commit ac03bd0b9e4e68d293d0cb8b23d85390f8df8fea
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 25 09:19:29 2016 -0800

    Restrict date filtering to first_seen/age

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index c4d9bc42b3..ed57121f17 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, division, print_function
 
-from datetime import datetime, timedelta
+from datetime import timedelta
 from django.db import IntegrityError, transaction
 from django.utils import timezone
 from rest_framework import serializers
@@ -87,16 +87,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
     permission_classes = (ProjectEventPermission,)
 
-    def _parse_date(self, value):
-        try:
-            return datetime.utcfromtimestamp(float(value)).replace(
-                tzinfo=timezone.utc,
-            )
-        except ValueError:
-            return datetime.strptime(value, '%Y-%m-%dT%H:%M:%S.%fZ').replace(
-                tzinfo=timezone.utc,
-            )
-
     def _build_query_params_from_request(self, request, project):
         query_kwargs = {
             'project': project,
@@ -127,11 +117,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         if tags:
             query_kwargs['tags'] = tags
 
-        # TODO: dates should include timestamps
-        date_from = request.GET.get('since')
-        date_to = request.GET.get('until')
-        date_filter = request.GET.get('date_filter')
-
         limit = request.GET.get('limit')
         if limit:
             try:
@@ -139,17 +124,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             except ValueError:
                 raise ValidationError('invalid limit')
 
-        if date_from:
-            date_from = self._parse_date(date_from)
-
-        if date_to:
-            date_to = self._parse_date(date_to)
-
-        query_kwargs['date_from'] = date_from
-        query_kwargs['date_to'] = date_to
-        if date_filter:
-            query_kwargs['date_filter'] = date_filter
-
         # TODO: proper pagination support
         cursor = request.GET.get('cursor')
         if cursor:
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index c700dd2f48..1d62435a3f 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -23,8 +23,9 @@ class SearchBackend(object):
 
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', date_filter='last_seen', unassigned=None,
-              date_from=None, date_to=None, cursor=None, limit=100):
+              sort_by='date', age_date_from=None, age_date_to=None,
+              unassigned=None, date_from=None, date_to=None, cursor=None,
+              limit=100):
         """
         The return value should be a CursorResult.
 
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index af3fb8a640..1215d44dc3 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -22,8 +22,9 @@ from sentry.utils.db import get_db_engine
 class DjangoSearchBackend(SearchBackend):
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', date_filter='last_seen', unassigned=None,
-              date_from=None, date_to=None, cursor=None, limit=100):
+              sort_by='date', age_date_from=None, age_date_to=None,
+              unassigned=None, date_from=None, date_to=None, cursor=None,
+              limit=100):
         from sentry.models import Group, GroupStatus
 
         queryset = Group.objects.filter(project=project)
@@ -77,26 +78,15 @@ class DjangoSearchBackend(SearchBackend):
                     grouptag__value=v,
                 ))
 
-        if date_filter == 'first_seen':
-            if date_from and date_to:
-                queryset = queryset.filter(
-                    first_seen__gte=date_from,
-                    first_seen__lte=date_to,
-                )
-            elif date_from:
-                queryset = queryset.filter(first_seen__gte=date_from)
-            elif date_to:
-                queryset = queryset.filter(first_seen__lte=date_to)
-        elif date_filter == 'last_seen':
-            if date_from and date_to:
-                queryset = queryset.filter(
-                    first_seen__gte=date_from,
-                    last_seen__lte=date_to,
-                )
-            elif date_from:
-                queryset = queryset.filter(last_seen__gte=date_from)
-            elif date_to:
-                queryset = queryset.filter(last_seen__lte=date_to)
+        if age_date_from and age_date_to:
+            queryset = queryset.filter(
+                first_seen__gte=age_date_from,
+                first_seen__lte=age_date_to,
+            )
+        elif age_date_from:
+            queryset = queryset.filter(first_seen__gte=age_date_from)
+        elif age_date_to:
+            queryset = queryset.filter(first_seen__lte=age_date_to)
 
         engine = get_db_engine('default')
         if engine.startswith('sqlite'):
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 50c742104f..1ead5eb37b 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -149,10 +149,9 @@ def parse_query(project, query, user):
                 flag, offset = parse_simple_range(value)
                 date_value = timezone.now() - offset
                 if flag == '+':
-                    results['date_to'] = date_value
+                    results['age_date_to'] = date_value
                 elif flag == '-':
-                    results['date_from'] = date_value
-                results['date_filter'] = 'first_seen'
+                    results['age_date_from'] = date_value
             elif key.startswith('user.'):
                 results['tags']['sentry:user'] = get_user_tag(
                     project, key.split('.', 1)[1], value)
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index eb7a9014be..c86731a7ce 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -144,50 +144,28 @@ class DjangoSearchBackendTest(TestCase):
         results = self.backend.query(self.project1, cursor=results.next, limit=1, sort_by='date')
         assert len(results) == 0
 
-    def test_first_seen_date_filter(self):
+    def test_age_filter(self):
         results = self.backend.query(
-            self.project1, date_from=self.group2.first_seen,
-            date_filter='first_seen')
+            self.project1,
+            age_date_from=self.group2.first_seen,
+        )
         assert len(results) == 1
         assert results[0] == self.group2
 
-        results = self.backend.query(
-            self.project1, date_to=self.group1.first_seen + timedelta(minutes=1),
-            date_filter='first_seen')
-        assert len(results) == 1
-        assert results[0] == self.group1
-
         results = self.backend.query(
             self.project1,
-            date_from=self.group1.first_seen,
-            date_to=self.group1.first_seen + timedelta(minutes=1),
-            date_filter='first_seen',
+            age_date_to=self.group1.first_seen + timedelta(minutes=1),
         )
         assert len(results) == 1
         assert results[0] == self.group1
 
-    def test_last_seen_date_filter(self):
-        results = self.backend.query(
-            self.project1, date_from=self.group1.last_seen,
-            date_filter='last_seen')
-        assert len(results) == 1
-        assert results[0] == self.group1
-
-        results = self.backend.query(
-            self.project1,
-            date_to=self.group1.last_seen - timedelta(minutes=1),
-            date_filter='last_seen')
-        assert len(results) == 1
-        assert results[0] == self.group2
-
         results = self.backend.query(
             self.project1,
-            date_from=self.group2.last_seen,
-            date_to=self.group1.last_seen - timedelta(minutes=1),
-            date_filter='last_seen',
+            age_date_from=self.group1.first_seen,
+            age_date_to=self.group1.first_seen + timedelta(minutes=1),
         )
         assert len(results) == 1
-        assert results[0] == self.group2
+        assert results[0] == self.group1
 
     def test_unassigned(self):
         results = self.backend.query(self.project1, unassigned=True)
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 5238fde022..55bb23f803 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -124,22 +124,19 @@ class ParseQueryTest(TestCase):
 
     def test_age_from(self):
         result = self.parse_query('age:-24h')
-        assert result['date_filter'] == 'first_seen'
-        assert result['date_from'] > timezone.now() - timedelta(hours=25)
-        assert result['date_from'] < timezone.now() - timedelta(hours=23)
-        assert not result.get('date_to')
+        assert result['age_date_from'] > timezone.now() - timedelta(hours=25)
+        assert result['age_date_from'] < timezone.now() - timedelta(hours=23)
+        assert not result.get('age_date_to')
 
     def test_age_to(self):
         result = self.parse_query('age:+24h')
-        assert result['date_filter'] == 'first_seen'
-        assert result['date_to'] > timezone.now() - timedelta(hours=25)
-        assert result['date_to'] < timezone.now() - timedelta(hours=23)
-        assert not result.get('date_from')
+        assert result['age_date_to'] > timezone.now() - timedelta(hours=25)
+        assert result['age_date_to'] < timezone.now() - timedelta(hours=23)
+        assert not result.get('age_date_from')
 
     def test_age_range(self):
         result = self.parse_query('age:-24h age:+12h')
-        assert result['date_filter'] == 'first_seen'
-        assert result['date_from'] > timezone.now() - timedelta(hours=25)
-        assert result['date_from'] < timezone.now() - timedelta(hours=23)
-        assert result['date_to'] > timezone.now() - timedelta(hours=13)
-        assert result['date_to'] < timezone.now() - timedelta(hours=11)
+        assert result['age_date_from'] > timezone.now() - timedelta(hours=25)
+        assert result['age_date_from'] < timezone.now() - timedelta(hours=23)
+        assert result['age_date_to'] > timezone.now() - timedelta(hours=13)
+        assert result['age_date_to'] < timezone.now() - timedelta(hours=11)
