commit 0dba898e1fb8a6cbec112cd6758b82f4d7471367
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Aug 23 16:12:33 2018 -0500

    feat(integrations): Better external form error mapping (#9464)
    
    Maps over field errors for the frontend forms

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 06c7db0954..2c7748730d 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -9,7 +9,7 @@ from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.integration import IntegrationIssueConfigSerializer
 from sentry.integrations import IntegrationFeatures
-from sentry.integrations.exceptions import IntegrationError
+from sentry.integrations.exceptions import IntegrationError, IntegrationFormError
 from sentry.models import ExternalIssue, GroupLink, Integration
 
 
@@ -138,6 +138,8 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         installation = integration.get_installation(organization_id)
         try:
             data = installation.create_issue(request.DATA)
+        except IntegrationFormError as exc:
+            return Response(exc.field_errors, status=400)
         except IntegrationError as exc:
             return Response({'non_field_errors': exc.message}, status=400)
 
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index e33196e385..289d618dbb 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -13,7 +13,8 @@ from sentry.exceptions import InvalidIdentity
 from sentry.pipeline import PipelineProvider
 
 from .exceptions import (
-    ApiHostError, ApiError, ApiUnauthorized, IntegrationError, UnsupportedResponseType
+    ApiHostError, ApiError, ApiUnauthorized, IntegrationError,
+    IntegrationFormError, UnsupportedResponseType
 )
 from .constants import ERR_UNAUTHORIZED, ERR_INTERNAL, ERR_UNSUPPORTED_RESPONSE_TYPE
 from sentry.models import Identity, OrganizationIntegration
@@ -217,6 +218,16 @@ class Integration(object):
     def error_message_from_json(self, data):
         return data.get('message', 'unknown error')
 
+    def error_fields_from_json(self, data):
+        """
+        If we can determine error fields from the response JSON this should
+        format and return them, allowing an IntegrationFormError to be raised.
+        Return None if no form errors are present.
+
+        Error fields should be in the format: {field: [message]}
+        """
+        return None
+
     def message_from_error(self, exc):
         if isinstance(exc, ApiUnauthorized):
             return ERR_UNAUTHORIZED
@@ -249,6 +260,15 @@ class Integration(object):
                 sys.exc_info()[2]
             )
         elif isinstance(exc, ApiError):
+            if exc.json:
+                error_fields = self.error_fields_from_json(exc.json)
+                if error_fields is not None:
+                    six.reraise(
+                        IntegrationFormError,
+                        IntegrationFormError(error_fields),
+                        sys.exc_info()[2]
+                    )
+
             six.reraise(
                 IntegrationError,
                 IntegrationError(self.message_from_error(exc)),
diff --git a/src/sentry/integrations/exceptions.py b/src/sentry/integrations/exceptions.py
index 5d14a77e2b..8ac74139db 100644
--- a/src/sentry/integrations/exceptions.py
+++ b/src/sentry/integrations/exceptions.py
@@ -65,3 +65,9 @@ class UnsupportedResponseType(ApiError):
 
 class IntegrationError(Exception):
     pass
+
+
+class IntegrationFormError(IntegrationError):
+    def __init__(self, field_errors):
+        super(IntegrationFormError, self).__init__('Invalid integration action')
+        self.field_errors = field_errors
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 619824617b..6b2a7155b1 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -11,7 +11,7 @@ from django.utils.translation import ugettext as _
 from sentry.integrations import (
     Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 )
-from sentry.integrations.exceptions import ApiUnauthorized, ApiError, IntegrationError
+from sentry.integrations.exceptions import ApiUnauthorized, ApiError, IntegrationError, IntegrationFormError
 from sentry.integrations.issues import IssueSyncMixin
 from sentry.models import IntegrationExternalProject, OrganizationIntegration
 from sentry.utils.http import absolute_uri
@@ -277,6 +277,13 @@ class JiraIntegration(Integration, IssueSyncMixin):
             message += ' '.join(['%s: %s' % (k, v) for k, v in data.get('errors').items()])
         return message
 
+    def error_fields_from_json(self, data):
+        errors = data.get('errors')
+        if not errors:
+            return None
+
+        return {key: [error] for key, error in data.get('errors').items()}
+
     def build_dynamic_field(self, group, field_meta):
         """
         Builds a field based on Jira's meta field information
@@ -443,11 +450,11 @@ class JiraIntegration(Integration, IssueSyncMixin):
         # protect against mis-configured integration submitting a form without an
         # issuetype assigned.
         if not data.get('issuetype'):
-            raise IntegrationError('Issue Type is required.')
+            raise IntegrationFormError({'issuetype': ['Issue type is required.']})
 
         jira_project = data.get('project')
         if not jira_project:
-            raise IntegrationError('Jira project is required.')
+            raise IntegrationFormError({'project': ['Jira project is required']})
 
         meta = client.get_create_meta_for_project(jira_project)
 
