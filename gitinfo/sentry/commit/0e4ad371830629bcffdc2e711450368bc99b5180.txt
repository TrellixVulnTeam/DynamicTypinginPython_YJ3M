commit 0e4ad371830629bcffdc2e711450368bc99b5180
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jun 21 11:18:06 2019 -0700

    feat(ui): Do not load Global Selection values from local storage in Issue Details (#13689)
    
    This is for the case where an Issue is accessed from a direct URL. Previously it would load the last accessed project/env from local storage. This is not desired behavior when accessing an Issue directly. This will look for a route to Issue details and avoid loading the store.
    
    However we also want to initialize the store if we leave the issue details page. Otherwise (this is exacerbated in the single project case), you could have last accessed project `Foo`, open url to issue in `Bar`, and then navigating from Issue to Issues list could result in a project that is neither `Foo` nor `Bar`.
    
    Fixes SEN-709
    Fixes SEN-658

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
index 1707ae82cf..f7f5f1d3ec 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -17,6 +17,7 @@ import {
   updateProjects,
 } from 'app/actionCreators/globalSelection';
 import BackToIssues from 'app/components/organizations/backToIssues';
+import ConfigStore from 'app/stores/configStore';
 import Header from 'app/components/organizations/header';
 import HeaderItemPosition from 'app/components/organizations/headerItemPosition';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
@@ -26,10 +27,9 @@ import MultipleProjectSelector from 'app/components/organizations/multipleProjec
 import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
-import ConfigStore from 'app/stores/configStore';
 import withProjects from 'app/utils/withProjects';
-import space from 'app/styles/space';
 
 import {getStateFromQuery} from './utils';
 
@@ -75,6 +75,15 @@ class GlobalSelectionHeader extends React.Component {
      */
     showRelative: PropTypes.bool,
 
+    // GlobalSelectionStore is not always initialized (e.g. Group Details) before this is rendered
+    //
+    // This component intentionally attempts to sync store --> URL Parameter
+    // only when mounted, except when this prop changes.
+    //
+    // XXX: This comes from GlobalSelectionStore and currently does not reset,
+    // so it happens at most once. Can add a reset as needed.
+    forceUrlSync: PropTypes.bool,
+
     // Callbacks //
     onChangeProjects: PropTypes.func,
     onUpdateProjects: PropTypes.func,
@@ -106,8 +115,7 @@ class GlobalSelectionHeader extends React.Component {
     const hasMultipleProjectFeature = this.hasMultipleProjectSelection();
 
     const stateFromRouter = getStateFromQuery(location.query);
-    // We should update store if there are any relevant URL parameters when component
-    // is mounted
+    // We should update store if there are any relevant URL parameters when component is mounted
     if (Object.values(stateFromRouter).some(i => !!i)) {
       if (!stateFromRouter.start && !stateFromRouter.end && !stateFromRouter.period) {
         stateFromRouter.period = DEFAULT_STATS_PERIOD;
@@ -163,7 +171,7 @@ class GlobalSelectionHeader extends React.Component {
     }
 
     // Update if URL parameters change
-    if (this.didQueryChange(this.props, nextProps)) {
+    if (this.changedQueryKeys(this.props, nextProps).length > 0) {
       return true;
     }
 
@@ -187,7 +195,7 @@ class GlobalSelectionHeader extends React.Component {
       return true;
     }
 
-    //update if any projects are starred or reordered
+    // update if any projects are starred or reordered
     if (
       this.props.projects &&
       nextProps.projects &&
@@ -199,14 +207,39 @@ class GlobalSelectionHeader extends React.Component {
       return true;
     }
 
+    // Update if `forceUrlSync` changes
+    if (!this.props.forceUrlSync && nextProps.forceUrlSync) {
+      return true;
+    }
+
     return false;
   }
 
   componentDidUpdate(prevProps) {
-    if (this.props.hasCustomRouting) {
+    const {hasCustomRouting, location, forceUrlSync, selection} = this.props;
+
+    if (hasCustomRouting) {
       return;
     }
 
+    // Kind of gross
+    if (forceUrlSync && !prevProps.forceUrlSync) {
+      const {project, environment} = getStateFromQuery(location.query);
+
+      if (
+        !isEqual(project, selection.projects) ||
+        !isEqual(environment, selection.environments)
+      ) {
+        updateParamsWithoutHistory(
+          {
+            project: selection.projects,
+            environment: selection.environments,
+          },
+          this.getRouter()
+        );
+      }
+    }
+
     // If component has updated (e.g. due to re-render from a router action),
     // update store values with values from router. Router should be source of truth
     this.updateStoreIfChange(prevProps, this.props);
@@ -216,17 +249,26 @@ class GlobalSelectionHeader extends React.Component {
     return new Set(this.props.organization.features).has('global-views');
   };
 
-  didQueryChange = (prevProps, nextProps) => {
+  /**
+   * Identifies the query params (that are relevant to this component) that have changed
+   *
+   * @return {String[]} Returns an array of param keys that have changed
+   */
+  changedQueryKeys = (prevProps, nextProps) => {
     const urlParamKeys = Object.values(URL_PARAM);
     const prevQuery = pick(prevProps.location.query, urlParamKeys);
     const nextQuery = pick(nextProps.location.query, urlParamKeys);
 
     // If no next query is specified keep the previous global selection values
     if (Object.keys(prevQuery).length === 0 && Object.keys(nextQuery).length === 0) {
-      return false;
+      return [];
     }
 
-    return !isEqual(prevQuery, nextQuery);
+    const changedKeys = Object.values(urlParamKeys).filter(
+      key => !isEqual(prevQuery[key], nextQuery[key])
+    );
+
+    return changedKeys;
   };
 
   updateStoreIfChange = (prevProps, nextProps) => {
@@ -234,7 +276,9 @@ class GlobalSelectionHeader extends React.Component {
     //
     // e.g. if selection store changed, don't trigger more actions
     // to update global selection store (otherwise we'll get recursive updates)
-    if (!this.didQueryChange(prevProps, nextProps)) {
+    const changedKeys = this.changedQueryKeys(prevProps, nextProps);
+
+    if (!changedKeys.length) {
       return;
     }
 
@@ -242,9 +286,19 @@ class GlobalSelectionHeader extends React.Component {
       nextProps.location.query
     );
 
-    updateDateTime({start, end, period, utc});
-    updateEnvironments(environment || []);
-    updateProjects(project || []);
+    if (changedKeys.includes(URL_PARAM.PROJECT)) {
+      updateProjects(project || []);
+    }
+    if (changedKeys.includes(URL_PARAM.ENVIRONMENT)) {
+      updateEnvironments(environment || []);
+    }
+    if (
+      [URL_PARAM.START, URL_PARAM.END, URL_PARAM.UTC, URL_PARAM.PERIOD].find(key =>
+        changedKeys.includes(key)
+      )
+    ) {
+      updateDateTime({start, end, period, utc});
+    }
   };
 
   // Returns `router` from props if `hasCustomRouting` property is false
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c009c7707d..f6dca813b1 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -955,6 +955,8 @@ function routes() {
             }
             component={errorHandler(LazyLoad)}
           >
+            {/* XXX: if we change the path for group details, we *must* update `OrganizationContext`.
+            There is behavior that depends on this path and unfortunately no great way to test for this contract */}
             <IndexRoute
               componentPromise={() =>
                 import(/* webpackChunkName: "OrganizationGroupEventDetails" */ './views/organizationGroupDetails/groupEventDetails')
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index a58585388b..cdadcef86b 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -49,6 +49,7 @@ const GlobalSelectionStore = Reflux.createStore({
   },
 
   reset(state) {
+    this._hasLoaded = false;
     this.selection = state || getDefaultSelection();
   },
 
@@ -56,7 +57,13 @@ const GlobalSelectionStore = Reflux.createStore({
    * Initializes the global selection store
    * If there are query params apply these, otherwise check local storage
    */
-  loadInitialData(organization, queryParams) {
+  loadInitialData(organization, queryParams, {forceUrlSync, onlyIfNeverLoaded} = {}) {
+    // If this option is true, only load if it has never been loaded before
+    if (onlyIfNeverLoaded && this._hasLoaded) {
+      return;
+    }
+
+    this._hasLoaded = true;
     this.organization = organization;
     const query = pick(queryParams, Object.values(URL_PARAM));
     const hasQuery = Object.keys(query).length > 0;
@@ -87,12 +94,16 @@ const GlobalSelectionStore = Reflux.createStore({
           globalSelection = {datetime: defaultDateTime, ...JSON.parse(storedValue)};
         }
       } catch (ex) {
+        console.error(ex); // eslint-disable-line no-console
         // use default if invalid
       }
     }
 
     if (isValidSelection(globalSelection, organization)) {
-      this.selection = globalSelection;
+      this.selection = {
+        ...globalSelection,
+        ...(forceUrlSync ? {forceUrlSync: true} : {}),
+      };
       this.trigger(this.selection);
     }
   },
diff --git a/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx b/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
index 7d0e83f5ab..56ec82876f 100644
--- a/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
+++ b/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
@@ -2,8 +2,8 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 
-import getDisplayName from 'app/utils/getDisplayName';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
+import getDisplayName from 'app/utils/getDisplayName';
 
 /**
  * Higher order component that uses GlobalSelectionStore and provides the
@@ -19,13 +19,33 @@ const withGlobalSelection = WrappedComponent =>
       };
     },
 
+    componentDidMount() {
+      this.updateSelection();
+    },
+
     onUpdate() {
-      this.setState({
-        selection: GlobalSelectionStore.get(),
-      });
+      this.updateSelection();
     },
+
+    updateSelection() {
+      const selection = GlobalSelectionStore.get();
+
+      if (this.state.selection !== selection) {
+        this.setState({
+          selection,
+        });
+      }
+    },
+
     render() {
-      return <WrappedComponent selection={this.state.selection} {...this.props} />;
+      const {forceUrlSync, ...selection} = this.state.selection;
+      return (
+        <WrappedComponent
+          forceUrlSync={forceUrlSync}
+          selection={selection}
+          {...this.props}
+        />
+      );
     },
   });
 
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index fe087545f1..0993b1bc23 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -34,6 +34,7 @@ const OrganizationContext = createReactClass({
 
   propTypes: {
     api: PropTypes.object,
+    routes: PropTypes.arrayOf(PropTypes.object),
     includeSidebar: PropTypes.bool,
     useLastOrganization: PropTypes.bool,
     organizationsLoading: PropTypes.bool,
@@ -136,7 +137,17 @@ const OrganizationContext = createReactClass({
 
         TeamStore.loadInitialData(data.teams);
         ProjectsStore.loadInitialData(data.projects);
-        GlobalSelectionStore.loadInitialData(data, this.props.location.query);
+
+        // Make an exception for issue details in the case where it is accessed directly (e.g. from email)
+        // We do not want to load the user's last used env/project in this case, otherwise will
+        // lead to very confusing behavior.
+        if (
+          !this.props.routes.find(
+            ({path}) => path && path.includes('/organizations/:orgId/issues/:groupId/')
+          )
+        ) {
+          GlobalSelectionStore.loadInitialData(data, this.props.location.query);
+        }
         OrganizationEnvironmentsStore.loadInitialData(environments);
 
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
index 02e5146f4b..55040fdc9c 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
@@ -1,25 +1,26 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import {isEqual} from 'lodash';
 import {browserHistory} from 'react-router';
+import {isEqual} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
 
-import SentryTypes from 'app/sentryTypes';
+import {fetchSentryAppComponents} from 'app/actionCreators/sentryAppComponents';
 import {withMeta} from 'app/components/events/meta/metaProxy';
 import EventEntries from 'app/components/events/eventEntries';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import GroupEventDetailsLoadingError from 'app/components/errors/groupEventDetailsLoadingError';
 import GroupSidebar from 'app/components/group/sidebar';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import ResolutionBox from 'app/components/resolutionBox';
 import MutedBox from 'app/components/mutedBox';
+import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
+import ResolutionBox from 'app/components/resolutionBox';
+import SentryTypes from 'app/sentryTypes';
+import fetchSentryAppInstallations from 'app/utils/fetchSentryAppInstallations';
 import withApi from 'app/utils/withApi';
-import withOrganization from 'app/utils/withOrganization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
-import fetchSentryAppInstallations from 'app/utils/fetchSentryAppInstallations';
-import {fetchSentryAppComponents} from 'app/actionCreators/sentryAppComponents';
-import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
+import withOrganization from 'app/utils/withOrganization';
 
-import GroupEventToolbar from './eventToolbar';
 import {fetchGroupEventAndMarkSeen, getEventEnvironment} from './utils';
+import GroupEventToolbar from './eventToolbar';
 
 class GroupEventDetails extends React.Component {
   static propTypes = {
@@ -77,7 +78,24 @@ class GroupEventDetails extends React.Component {
   }
 
   componentWillUnmount() {
-    this.props.api.clear();
+    const {api, organization} = this.props;
+
+    // Note: We do not load global selection store with any data when this component is used
+    // This is handled in `<OrganizationContext>` by examining the routes.
+    //
+    // When this view gets unmounted, attempt to load initial data so that projects/envs
+    // gets loaded with the last used one (via local storage). `forceUrlSync` will make
+    // `<GlobalSelectionHeader>` sync values from store to the URL (if they are different),
+    // otherwise they can out of sync because the component only syncs in `DidMount`, and
+    // the timing for that is not guaranteed.
+    //
+    // TBD: if this behavior is actually desired
+    GlobalSelectionStore.loadInitialData(organization, this.props.location.query, {
+      onlyIfNeverLoaded: true,
+      forceUrlSync: true,
+    });
+
+    api.clear();
   }
 
   fetchData = () => {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/index.jsx
index 121084903c..50edfca032 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/index.jsx
@@ -21,14 +21,13 @@ class OrganizationGroupDetails extends React.Component {
   }
 
   render() {
-    // eslint-disable-next-line no-unused-vars
     const {selection, ...props} = this.props;
 
     return (
       <GroupDetails
         environments={selection.environments}
-        enableSnuba={true}
-        showGlobalHeader={true}
+        enableSnuba
+        showGlobalHeader
         {...props}
       />
     );
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index a4e7e2e65d..ecb4a5e2e2 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -2,11 +2,11 @@ import React from 'react';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {mount} from 'enzyme';
+import ConfigStore from 'app/stores/configStore';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
-import * as globalActions from 'app/actionCreators/globalSelection';
 import ProjectsStore from 'app/stores/projectsStore';
-import ConfigStore from 'app/stores/configStore';
+import * as globalActions from 'app/actionCreators/globalSelection';
 
 const changeQuery = (routerContext, query) => ({
   ...routerContext,
@@ -21,9 +21,22 @@ const changeQuery = (routerContext, query) => ({
   },
 });
 
+jest.mock('app/utils/localStorage', () => {
+  return {
+    getItem: () => JSON.stringify({projects: [5], environments: ['staging']}),
+    setItem: jest.fn(),
+  };
+});
+
 describe('GlobalSelectionHeader', function() {
   const {organization, router, routerContext} = initializeOrg({
-    organization: TestStubs.Organization({features: ['global-views']}),
+    organization: {features: ['global-views']},
+    projects: [
+      {
+        id: 5,
+        isMember: true,
+      },
+    ],
     router: {
       location: {query: {}},
     },
@@ -111,6 +124,20 @@ describe('GlobalSelectionHeader', function() {
       })
     );
 
+    // component will initially try to sync router + stores
+    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
+      period: '7d',
+      utc: null,
+      start: null,
+      end: null,
+    });
+    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
+    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
+
+    globalActions.updateDateTime.mockClear();
+    globalActions.updateProjects.mockClear();
+    globalActions.updateEnvironments.mockClear();
+
     wrapper.setContext(
       changeQuery(routerContext, {
         statsPeriod: '21d',
@@ -125,8 +152,10 @@ describe('GlobalSelectionHeader', function() {
       start: null,
       end: null,
     });
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
+
+    // These should not be called because they have not changed, only date has changed
+    expect(globalActions.updateProjects).not.toHaveBeenCalled();
+    expect(globalActions.updateEnvironments).not.toHaveBeenCalled();
 
     expect(GlobalSelectionStore.get()).toEqual({
       datetime: {
@@ -140,6 +169,31 @@ describe('GlobalSelectionHeader', function() {
     });
   });
 
+  it('updates URL to match GlobalSelection store when re-rendered with `forceUrlSync` prop', async function() {
+    const wrapper = mount(
+      <GlobalSelectionHeader router={router} organization={organization} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    // Force load, will load from mocked localStorage
+    GlobalSelectionStore.loadInitialData(organization, {}, {forceUrlSync: true});
+
+    await tick();
+    wrapper.update();
+
+    expect(router.replace).toHaveBeenCalledWith(
+      expect.objectContaining({
+        query: {
+          environment: ['staging'],
+          project: [5],
+        },
+      })
+    );
+  });
+
   it('updates GlobalSelection store with default period', async function() {
     mount(
       <GlobalSelectionHeader organization={organization} />,
@@ -248,6 +302,51 @@ describe('GlobalSelectionHeader', function() {
     });
   });
 
+  it('updates store when there are no query params in URL and `disableLoadFromStore` is false', function() {
+    const initializationObj = initializeOrg({
+      organization: {
+        features: ['global-views'],
+      },
+      router: {
+        params: {orgId: 'org-slug'}, // we need this to be set to make sure org in context is same as current org in URL
+        location: {query: {project: [1, 2]}},
+      },
+    });
+
+    mount(
+      <GlobalSelectionHeader organization={initializationObj.organization} />,
+      initializationObj.routerContext
+    );
+
+    expect(globalActions.updateProjects).toHaveBeenCalledWith([1, 2]);
+    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
+    expect(globalActions.updateDateTime).toHaveBeenCalled();
+  });
+
+  it('does not update store when there are no query params in URL and `disableLoadFromStore` is true', function() {
+    const initializationObj = initializeOrg({
+      organization: {
+        features: ['global-views'],
+      },
+      router: {
+        params: {orgId: 'org-slug'}, // we need this to be set to make sure org in context is same as current org in URL
+        location: {query: {}},
+      },
+    });
+
+    mount(
+      <GlobalSelectionHeader
+        organization={initializationObj.organization}
+        disableLoadFromStore={true}
+      />,
+      initializationObj.routerContext
+    );
+
+    expect(globalActions.updateProjects).not.toHaveBeenCalled();
+    expect(globalActions.updateEnvironments).not.toHaveBeenCalled();
+    expect(globalActions.updateDateTime).not.toHaveBeenCalled();
+  });
+
   describe('Single project selection mode', function() {
     it('selects first project if more than one is requested', function() {
       const initializationObj = initializeOrg({
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index 4427ce82ff..1ea844b39f 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -30,6 +30,7 @@ describe('OrganizationContext', function() {
         api={new MockApiClient()}
         params={{orgId: 'org-slug'}}
         location={{query: {}}}
+        routes={[]}
         {...props}
       >
         <div />
@@ -55,6 +56,7 @@ describe('OrganizationContext', function() {
     TeamStore.loadInitialData.mockRestore();
     ProjectsStore.loadInitialData.mockRestore();
     ConfigStore.get.mockRestore();
+    GlobalSelectionStore.loadInitialData.mockRestore();
   });
 
   it('renders and fetches org', async function() {
@@ -220,4 +222,17 @@ describe('OrganizationContext', function() {
 
     expect(getOrgMock).toHaveBeenCalledTimes(1);
   });
+
+  it('does not call `GlobalSelectionStore.loadInitialData` on group details route', async function() {
+    wrapper = createWrapper({
+      routes: [{path: '/organizations/:orgId/issues/:groupId/'}],
+    });
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.state('loading')).toBe(false);
+    expect(wrapper.state('error')).toBe(false);
+
+    expect(GlobalSelectionStore.loadInitialData).not.toHaveBeenCalled();
+  });
 });
diff --git a/tests/js/spec/views/organizationDetails/organizationsDetails.spec.jsx b/tests/js/spec/views/organizationDetails/organizationsDetails.spec.jsx
index 21f9847561..9824ea39ba 100644
--- a/tests/js/spec/views/organizationDetails/organizationsDetails.spec.jsx
+++ b/tests/js/spec/views/organizationDetails/organizationsDetails.spec.jsx
@@ -30,7 +30,7 @@ describe('OrganizationDetails', function() {
           }),
         });
         const tree = mount(
-          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
+          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} routes={[]} />,
           TestStubs.routerContext()
         );
         await tick();
@@ -56,7 +56,7 @@ describe('OrganizationDetails', function() {
           }),
         });
         const tree = mount(
-          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
+          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} routes={[]} />,
           TestStubs.routerContext()
         );
         await tick();
@@ -88,7 +88,7 @@ describe('OrganizationDetails', function() {
 
       it('should render a deletion in progress prompt', async function() {
         const tree = mount(
-          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />
+          <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} routes={[]} />
         );
         await tick();
         await tick();
