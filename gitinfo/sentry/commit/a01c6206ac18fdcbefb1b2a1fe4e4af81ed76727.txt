commit a01c6206ac18fdcbefb1b2a1fe4e4af81ed76727
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Dec 18 10:10:11 2019 -0800

    ref(ts): Convert `<CustomIgnoreCountModal>` (#16154)
    
    This converts `<CustomIgnoreCountModal>` to typescript as well as making the form inputs more consistent visually.

diff --git a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
deleted file mode 100644
index dec4dd4db9..0000000000
--- a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
+++ /dev/null
@@ -1,94 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import Modal from 'react-bootstrap/lib/Modal';
-import {SelectField} from 'app/components/forms';
-import {t} from 'app/locale';
-
-export default class CustomIgnoreCountModal extends React.Component {
-  static propTypes = {
-    onSelected: PropTypes.func,
-    onCanceled: PropTypes.func,
-    show: PropTypes.bool,
-    label: PropTypes.string.isRequired,
-    countLabel: PropTypes.string.isRequired,
-    countName: PropTypes.string.isRequired,
-    windowName: PropTypes.string.isRequired,
-    windowChoices: PropTypes.array.isRequired,
-  };
-
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      count: 100,
-      window: '',
-    };
-  }
-
-  onSubmit = () => {
-    const {count, window} = this.state;
-    const {countName, windowName} = this.props;
-
-    const statusDetails = {[countName]: count};
-    if (window) {
-      statusDetails[windowName] = window;
-    }
-    this.props.onSelected(statusDetails);
-  };
-
-  onChange = (name, value) => {
-    this.setState({[name]: value});
-  };
-
-  render() {
-    const {count, window} = this.state;
-    return (
-      <Modal show={this.props.show} animation={false} onHide={this.props.onCanceled}>
-        <div className="modal-header">
-          <h4>{this.props.label}</h4>
-        </div>
-        <div className="modal-body">
-          <form className="m-b-1">
-            <div className="control-group">
-              <h6 className="nav-header">{this.props.countLabel}</h6>
-              <input
-                className="form-control"
-                type="number"
-                value={count}
-                onChange={e => this.onChange('count', e.target.value)}
-                style={{padding: '3px 10px'}}
-                required
-                placeholder={t('e.g. 100')}
-              />
-            </div>
-            <div className="control-group m-b-1">
-              <h6 className="nav-header">{t('Time window')}</h6>
-              <SelectField
-                value={window}
-                name="window"
-                onChange={v => this.onChange('window', v)}
-                choices={this.props.windowChoices}
-                placeholder={t('e.g. per hour')}
-                allowClear
-                help={t(
-                  '(Optional) If supplied, this rule will apply as a rate of change.'
-                )}
-              />
-            </div>
-          </form>
-        </div>
-        <div className="modal-footer m-t-1">
-          <button
-            type="button"
-            className="btn btn-default"
-            onClick={this.props.onCanceled}
-          >
-            {t('Cancel')}
-          </button>
-          <button type="button" className="btn btn-primary" onClick={this.onSubmit}>
-            {t('Ignore')}
-          </button>
-        </div>
-      </Modal>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx b/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx
new file mode 100644
index 0000000000..78a872608b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/customIgnoreCountModal.tsx
@@ -0,0 +1,114 @@
+import Modal from 'react-bootstrap/lib/Modal';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import InputField from 'app/views/settings/components/forms/inputField';
+import SelectField from 'app/views/settings/components/forms/selectField';
+import space from 'app/styles/space';
+
+type Props = {
+  onSelected: (statusDetails: {[key: string]: number}) => void;
+  onCanceled: () => void;
+  show: boolean;
+  label: string;
+  countLabel: string;
+  countName: string;
+  windowName: string;
+  windowChoices: string[];
+};
+
+type State = {
+  count: number;
+  window: number | null;
+};
+
+export default class CustomIgnoreCountModal extends React.Component<Props, State> {
+  static propTypes = {
+    onSelected: PropTypes.func,
+    onCanceled: PropTypes.func,
+    show: PropTypes.bool,
+    label: PropTypes.string.isRequired,
+    countLabel: PropTypes.string.isRequired,
+    countName: PropTypes.string.isRequired,
+    windowName: PropTypes.string.isRequired,
+    windowChoices: PropTypes.array.isRequired,
+  };
+
+  state: State = {
+    count: 100,
+    window: null,
+  };
+
+  handleSubmit = () => {
+    const {count, window} = this.state;
+    const {countName, windowName} = this.props;
+
+    const statusDetails: {[key: string]: number} = {[countName]: count};
+    if (window) {
+      statusDetails[windowName] = window;
+    }
+    this.props.onSelected(statusDetails);
+  };
+
+  handleChange = (name: keyof State, value: number) => {
+    this.setState({[name]: value} as State);
+  };
+
+  render() {
+    const {countLabel, label, show, windowChoices, onCanceled} = this.props;
+    const {count, window} = this.state;
+    return (
+      <Modal show={show} animation={false} onHide={onCanceled}>
+        <Modal.Header>
+          <h4>{label}</h4>
+        </Modal.Header>
+        <Modal.Body>
+          <InputField
+            inline={false}
+            flexibleControlStateSize
+            stacked
+            label={countLabel}
+            name="count"
+            type="number"
+            value={count}
+            onChange={e => this.handleChange('count' as 'count', Number(e.target.value))}
+            required
+            placeholder={t('e.g. 100')}
+          />
+          <SelectField
+            inline={false}
+            flexibleControlStateSize
+            stacked
+            label={t('Time window')}
+            value={window}
+            name="window"
+            onChange={v => this.handleChange('window' as 'window', v)}
+            choices={windowChoices}
+            placeholder={t('e.g. per hour')}
+            allowClear
+            help={t('(Optional) If supplied, this rule will apply as a rate of change.')}
+          />
+        </Modal.Body>
+        <Modal.Footer>
+          <Actions>
+            <Button type="button" onClick={onCanceled}>
+              {t('Cancel')}
+            </Button>
+            <Button type="button" priority="primary" onClick={this.handleSubmit}>
+              {t('Ignore')}
+            </Button>
+          </Actions>
+        </Modal.Footer>
+      </Modal>
+    );
+  }
+}
+
+const Actions = styled('div')`
+  display: grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+`;
