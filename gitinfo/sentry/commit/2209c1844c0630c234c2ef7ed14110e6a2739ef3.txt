commit 2209c1844c0630c234c2ef7ed14110e6a2739ef3
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 18 11:28:48 2015 -0700

    Support long microsecond values (fixes GH-1610)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index db1c5f7d02..02eb2ec12c 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -271,37 +271,42 @@ class ClientApiHelper(object):
         return dict((smart_str(k), v) for k, v in obj.iteritems())
 
     def _process_data_timestamp(self, data, current_datetime=None):
-        if not data['timestamp']:
+        value = data['timestamp']
+        if not value:
             del data['timestamp']
             return data
-        elif is_float(data['timestamp']):
+        elif is_float(value):
             try:
-                data['timestamp'] = datetime.fromtimestamp(float(data['timestamp']))
+                value = datetime.fromtimestamp(float(value))
             except Exception:
                 raise InvalidTimestamp('Invalid value for timestamp: %r' % data['timestamp'])
-        elif not isinstance(data['timestamp'], datetime):
-            if '.' in data['timestamp']:
-                format = '%Y-%m-%dT%H:%M:%S.%f'
+        elif not isinstance(value, datetime):
+            # all timestamps are in UTC, but the marker is optional
+            if 'Z' in value:
+                value = data['timestamp'][:-1]
+            if '.' in value:
+                # Python doesn't support long microsecond values
+                # https://github.com/getsentry/sentry/issues/1610
+                ts_bits = value.split('.', 1)
+                value = '%s.%s' % (ts_bits[0], ts_bits[1][:2])
+                fmt = '%Y-%m-%dT%H:%M:%S.%f'
             else:
-                format = '%Y-%m-%dT%H:%M:%S'
-            if 'Z' in data['timestamp']:
-                # support UTC market, but not other timestamps
-                format += 'Z'
+                fmt = '%Y-%m-%dT%H:%M:%S'
             try:
-                data['timestamp'] = datetime.strptime(data['timestamp'], format)
+                value = datetime.strptime(value, fmt)
             except Exception:
                 raise InvalidTimestamp('Invalid value for timestamp: %r' % data['timestamp'])
 
         if current_datetime is None:
             current_datetime = datetime.now()
 
-        if data['timestamp'] > current_datetime + timedelta(minutes=1):
-            raise InvalidTimestamp('Invalid value for timestamp (in future): %r' % data['timestamp'])
+        if value > current_datetime + timedelta(minutes=1):
+            raise InvalidTimestamp('Invalid value for timestamp (in future): %r' % value)
 
-        if data['timestamp'] < current_datetime - timedelta(days=30):
-            raise InvalidTimestamp('Invalid value for timestamp (too old): %r' % data['timestamp'])
+        if value < current_datetime - timedelta(days=30):
+            raise InvalidTimestamp('Invalid value for timestamp (too old): %r' % value)
 
-        data['timestamp'] = float(data['timestamp'].strftime('%s'))
+        data['timestamp'] = float(value.strftime('%s'))
 
         return data
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index f8bd3f34ff..8ce7264d6d 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -104,6 +104,14 @@ class ProcessDataTimestampTest(BaseAPITest):
             'timestamp': '2052-01-01T10:30:45Z'
         })
 
+    def test_long_microseconds_value(self):
+        d = datetime(2012, 01, 01, 10, 30, 45)
+        data = self.helper._process_data_timestamp({
+            'timestamp': '2012-01-01T10:30:45.341324Z'
+        }, current_datetime=d)
+        self.assertTrue('timestamp' in data)
+        self.assertEquals(data['timestamp'], 1325413845.0)
+
 
 class ValidateDataTest(BaseAPITest):
     def test_missing_project_id(self):
