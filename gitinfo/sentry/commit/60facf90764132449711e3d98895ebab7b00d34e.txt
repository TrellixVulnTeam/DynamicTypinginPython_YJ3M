commit 60facf90764132449711e3d98895ebab7b00d34e
Author: Mark Story <mark@sentry.io>
Date:   Wed Feb 5 16:00:16 2020 -0500

    fix(discover) Fix broken result views for team plan accounts (#16823)
    
    The discover sidebar would not properly retain the sidebar state,
    causing errors related to multiple project selection errors.
    
    Additionally the discover/results/ view would not correctly handle the
    redirect to the default view. These changes handle the move from an
    invalid view to a valid one and loads data as expected.

diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 468995116d..63d9e33524 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -168,6 +168,8 @@ class Sidebar extends React.Component {
       'releases',
       'user-feedback',
       'discover',
+      'discover/queries',
+      'discover/results',
       'releasesv2',
     ].map(route => `/organizations/${this.props.organization.slug}/${route}/`);
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 67b5e6a921..82aee1f4a3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -29,6 +29,7 @@ import withOrganization from 'app/utils/withOrganization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import Alert from 'app/components/alert';
 
+import {DEFAULT_EVENT_VIEW} from './data';
 import Table from './table';
 import Tags from './tags';
 import ResultsHeader from './resultsHeader';
@@ -67,6 +68,8 @@ class Results extends React.Component<Props, State> {
   componentDidMount() {
     const {api, organization, selection} = this.props;
     loadOrganizationTags(api, organization.slug, selection);
+
+    this.checkEventView();
   }
 
   componentDidUpdate(prevProps: Props) {
@@ -77,6 +80,23 @@ class Results extends React.Component<Props, State> {
     ) {
       loadOrganizationTags(api, organization.slug, selection);
     }
+    this.checkEventView();
+  }
+
+  checkEventView() {
+    const {eventView} = this.state;
+    if (eventView.isValid()) {
+      return;
+    }
+    // If the view is not valid, redirect to a known valid state.
+    const {location, organization} = this.props;
+    const nextEventView = EventView.fromNewQueryWithLocation(
+      DEFAULT_EVENT_VIEW,
+      location
+    );
+    ReactRouter.browserHistory.replace(
+      nextEventView.getResultsViewUrlTarget(organization.slug)
+    );
   }
 
   handleSearch = (query: string) => {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 89d8dbd612..12e99846be 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import {Location} from 'history';
-import {browserHistory} from 'react-router';
 import styled from '@emotion/styled';
 
 import {Client} from 'app/api';
@@ -10,7 +9,6 @@ import withApi from 'app/utils/withApi';
 import withTags from 'app/utils/withTags';
 import Pagination from 'app/components/pagination';
 
-import {DEFAULT_EVENT_VIEW} from '../data';
 import EventView, {isAPIPayloadSimilar} from '../eventView';
 import TableView from './tableView';
 import {TableData} from './types';
@@ -21,7 +19,7 @@ type TableProps = {
   eventView: EventView;
   organization: Organization;
   tags: {[key: string]: Tag};
-  setError: (string) => void;
+  setError: (msg: string) => void;
   title: string;
 };
 
@@ -52,32 +50,18 @@ class Table extends React.PureComponent<TableProps, TableState> {
   };
 
   componentDidMount() {
-    if (!this.props.eventView.isValid()) {
-      this.goToAllEvents();
-      return;
-    }
-
     this.fetchData();
   }
 
   componentDidUpdate(prevProps: TableProps) {
-    if (!this.state.isLoading && this.shouldRefetchData(prevProps)) {
+    // Reload data if we aren't already loading, or if we've moved
+    // from an invalid view state to a valid one.
+    if (
+      (!this.state.isLoading && this.shouldRefetchData(prevProps)) ||
+      (prevProps.eventView.isValid() === false && this.props.eventView.isValid())
+    ) {
       this.fetchData();
     }
-    if (!this.props.eventView.isValid()) {
-      this.goToAllEvents();
-      return;
-    }
-  }
-
-  goToAllEvents() {
-    const {location, organization} = this.props;
-    const nextEventView = EventView.fromNewQueryWithLocation(
-      DEFAULT_EVENT_VIEW,
-      location
-    );
-
-    browserHistory.replace(nextEventView.getResultsViewUrlTarget(organization.slug));
   }
 
   shouldRefetchData = (prevProps: TableProps): boolean => {
@@ -89,14 +73,16 @@ class Table extends React.PureComponent<TableProps, TableState> {
 
   fetchData = () => {
     const {eventView, organization, location, setError} = this.props;
-    const url = `/organizations/${organization.slug}/eventsv2/`;
 
+    if (!eventView.isValid()) {
+      return;
+    }
+    const url = `/organizations/${organization.slug}/eventsv2/`;
     const tableFetchID = Symbol('tableFetchID');
+    const apiPayload = eventView.getEventsAPIPayload(location);
 
     this.setState({isLoading: true, tableFetchID});
 
-    const apiPayload = eventView.getEventsAPIPayload(location);
-
     this.props.api
       .requestPromise(url, {
         method: 'GET',
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index f6bea151f4..ff563c61fd 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
+import {browserHistory} from 'react-router';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import Results from 'app/views/eventsV2/results';
@@ -25,6 +26,7 @@ const generateFields = () => {
 describe('EventsV2 > Results', function() {
   const eventTitle = 'Oh no something bad';
   const features = ['discover-basic'];
+  let eventResultsMock;
 
   beforeEach(function() {
     MockApiClient.addMockResponse({
@@ -52,7 +54,7 @@ describe('EventsV2 > Results', function() {
       url: '/organizations/org-slug/releases/',
       body: [],
     });
-    MockApiClient.addMockResponse({
+    eventResultsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/eventsv2/',
       body: {
         meta: {
@@ -99,6 +101,42 @@ describe('EventsV2 > Results', function() {
     MockApiClient.clearMockResponses();
   });
 
+  it('loads data when moving from an invalid to valid EventView', function() {
+    const organization = TestStubs.Organization({
+      features,
+      projects: [TestStubs.Project()],
+    });
+
+    // Start off with an invalid view (empty is invalid)
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+    // No request as eventview was invalid.
+    expect(eventResultsMock).not.toHaveBeenCalled();
+
+    // Should redirect.
+    expect(browserHistory.replace).toHaveBeenCalled();
+
+    // Update location simulating a redirect.
+    wrapper.setProps({location: {query: {...generateFields()}}});
+    wrapper.update();
+
+    // Should load events once
+    expect(eventResultsMock).toHaveBeenCalled();
+  });
+
   it('pagination cursor should be cleared when making a search', function() {
     const organization = TestStubs.Organization({
       features,
