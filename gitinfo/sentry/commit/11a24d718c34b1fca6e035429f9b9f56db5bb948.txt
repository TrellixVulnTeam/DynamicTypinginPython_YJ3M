commit 11a24d718c34b1fca6e035429f9b9f56db5bb948
Author: Manu <manuzope@gmail.com>
Date:   Thu Nov 7 15:22:50 2019 -0800

    Revert "feat(outcomes): Remove writes to redis (#15466)" (#15495)
    
    This reverts commit fbd9e4e61f86cad682edb7bb12ee8956df418310.

diff --git a/src/sentry/tsdb/redissnuba.py b/src/sentry/tsdb/redissnuba.py
index 4f2c92804b..df91e7b1c5 100644
--- a/src/sentry/tsdb/redissnuba.py
+++ b/src/sentry/tsdb/redissnuba.py
@@ -59,7 +59,7 @@ assert (
 
 model_backends = {
     # model: (read, write)
-    model: ("redis", "redis") if model not in SnubaTSDB.model_query_settings else ("snuba", "dummy")
+    model: ("redis", "redis") if model not in SnubaTSDB.model_columns else ("snuba", "dummy")
     for model in BaseTSDB.models
 }
 
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index 9860f8d293..90c2090661 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -30,7 +30,10 @@ class SnubaTSDB(BaseTSDB):
     will return empty results for unsupported models.
     """
 
-    # ``model_query_settings`` is a translation of TSDB models into required settings for querying snuba
+    # The ``model_query_settings`` and ``model_being_upgraded_query_settings`` are translations of
+    # TSDB models into required settings for querying snuba. Queries for ``model_columns``
+    # directly hit snuba, while queries for ``model_columns_being_upgraded`` hit
+    # redis in the main thread and snuba in a background thread.
     model_query_settings = {
         TSDBModel.project: SnubaModelQuerySettings(snuba.Dataset.Events, "project_id", None, None),
         TSDBModel.group: SnubaModelQuerySettings(snuba.Dataset.Events, "issue", None, None),
@@ -52,6 +55,17 @@ class SnubaTSDB(BaseTSDB):
         TSDBModel.frequent_issues_by_project: SnubaModelQuerySettings(
             snuba.Dataset.Events, "project_id", "issue", None
         ),
+    }
+
+    # In getsentry/getsentry:tsdb.py, we check ``model_columns`` to see if a request
+    # should go to snuba. So, for now, for backwards compatibility, alias
+    # ``model_columns`` to ``model_query_settings``.
+    # TODO(manu): use model_query_settings instead of model_columns in getsentry
+    model_columns = model_query_settings
+
+    # ``model_columns_being_upgraded`` are models that currently use Redis but are being
+    # transitioned to use Snuba.
+    model_being_upgraded_query_settings = {
         TSDBModel.organization_total_received: SnubaModelQuerySettings(
             snuba.Dataset.Outcomes,
             "org_id",
@@ -88,6 +102,9 @@ class SnubaTSDB(BaseTSDB):
             "times_seen",
             [["outcome", "=", outcomes.Outcome.FILTERED]],
         ),
+    }
+
+    model_being_upgraded_query_settings2 = {
         TSDBModel.key_total_received: SnubaModelQuerySettings(
             snuba.Dataset.Outcomes,
             "key_id",
@@ -108,12 +125,6 @@ class SnubaTSDB(BaseTSDB):
         ),
     }
 
-    # ``model_columns_being_upgraded`` are models that currently use Redis but are being
-    # transitioned to use Snuba.
-    model_being_upgraded_query_settings = {}
-
-    model_being_upgraded_query_settings2 = {}
-
     # The Outcomes dataset aggregates outcomes into chunks of an hour. So, for rollups less than an hour, we want to
     # query the raw outcomes dataset, with a few different settings (defined in lower_rollup_query_settings).
     lower_rollup_query_settings = {
@@ -161,6 +172,12 @@ class SnubaTSDB(BaseTSDB):
         ),
     }
 
+    all_model_query_settings = dict(
+        model_columns.items()
+        + model_being_upgraded_query_settings.items()
+        + model_being_upgraded_query_settings2.items()
+    )
+
     def __init__(self, **options):
         super(SnubaTSDB, self).__init__(**options)
 
@@ -183,18 +200,14 @@ class SnubaTSDB(BaseTSDB):
         `group_on_model`: whether to add a GROUP BY clause on the primary model.
         """
         # XXX: to counteract the hack in project_key_stats.py
-        if model in [
-            TSDBModel.key_total_received,
-            TSDBModel.key_total_blacklisted,
-            TSDBModel.key_total_rejected,
-        ]:
+        if model in self.model_being_upgraded_query_settings2.keys():
             keys = list(set(map(lambda x: int(x), keys)))
 
         # 10s is the only rollup under an hour that we support
         if rollup and rollup == 10 and model in self.lower_rollup_query_settings.keys():
             model_query_settings = self.lower_rollup_query_settings.get(model)
         else:
-            model_query_settings = self.model_query_settings.get(model)
+            model_query_settings = self.all_model_query_settings.get(model)
 
         if model_query_settings is None:
             raise Exception(u"Unsupported TSDBModel: {}".format(model.name))
@@ -298,7 +311,7 @@ class SnubaTSDB(BaseTSDB):
         if rollup and rollup == 10 and model in self.lower_rollup_query_settings.keys():
             model_query_settings = self.lower_rollup_query_settings.get(model)
         else:
-            model_query_settings = self.model_query_settings.get(model)
+            model_query_settings = self.all_model_query_settings.get(model)
 
         assert model_query_settings is not None, u"Unsupported TSDBModel: {}".format(model.name)
 
