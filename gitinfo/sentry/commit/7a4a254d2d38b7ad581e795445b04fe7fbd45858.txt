commit 7a4a254d2d38b7ad581e795445b04fe7fbd45858
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Jul 2 00:31:17 2016 +0300

    Added support for minified react exceptions

diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
new file mode 100644
index 0000000000..0da9ff4fd0
--- /dev/null
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -0,0 +1,95 @@
+import re
+import cgi
+import json
+import logging
+
+from django.conf import settings
+from django.core.cache import cache
+
+from sentry import http
+
+
+logger = logging.getLogger(__name__)
+
+
+error_processors = {}
+
+
+class Processor(object):
+
+    def __init__(self, vendor, mapping_url, regex, func):
+        self.vendor = vendor
+        self.mapping_url = mapping_url
+        self.regex = re.compile(regex)
+        self.func = func
+
+    def load_mapping(self):
+        key = 'javascript.errormapping:%s' % self.vendor
+        mapping = cache.get(key)
+        if mapping is not None:
+            return json.loads(mapping)
+
+        http_session = http.build_session()
+        response = http_session.get(self.mapping_url,
+            allow_redirects=True,
+            verify=False,
+            timeout=settings.SENTRY_SOURCE_FETCH_TIMEOUT,
+        )
+        data = response.json()
+        cache.set(key, json.dumps(data), 300)
+        return data
+
+    def try_process(self, exc):
+        match = self.regex.search(exc['value'])
+        if match is None:
+            return False
+        mapping = self.load_mapping()
+        return self.func(exc, match, mapping)
+
+
+def minified_error(vendor, mapping_url, regex):
+    def decorator(f):
+        error_processors[vendor] = Processor(vendor, mapping_url, regex, f)
+    return decorator
+
+
+@minified_error(
+    vendor='react',
+    mapping_url=('https://raw.githubusercontent.com/facebook/'
+                 'react/master/scripts/error-codes/codes.json'),
+    regex=r'Minified React error #(\d+); visit https?://[^?]+\?(\S+)'
+)
+def process_react_exception(exc, match, mapping):
+    error_id, qs = match.groups()
+    msg_format = mapping.get(error_id)
+    if msg_format is None:
+        return False
+    args = []
+    for k, v in cgi.parse_qsl(qs):
+        if k == 'args[]':
+            args.append(v)
+    exc['value'] = msg_format % tuple(args)
+    return True
+
+
+def rewrite_exception(data):
+    """Rewrite an exception in an event if needed.  Updates the exception
+    in place and returns `True` if a modification was performed or `False`
+    otherwise.
+    """
+    exc_data = data.get('sentry.interfaces.Exception')
+    if not exc_data:
+        return False
+
+    rv = False
+    for exc in exc_data['values']:
+        for processor in error_processors.itervalues():
+            try:
+                if processor.try_process(exc):
+                    rv = True
+                    break
+            except Exception as e:
+                logger.error('Failed to run processor "%s": %s',
+                             processor.vendor, e, exc_info=True)
+
+    return rv
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index e37cdbd907..480ef001a7 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -7,6 +7,7 @@ from sentry.models import Project
 from sentry.plugins import Plugin2
 
 from .processor import SourceProcessor
+from .errormapping import rewrite_exception
 
 
 def preprocess_event(data):
@@ -26,6 +27,8 @@ def preprocess_event(data):
         )
         processor.process(data)
 
+    rewrite_exception(data)
+
     inject_device_data(data)
 
     return data
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index f569cf47c0..1499752b2b 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -14,6 +14,7 @@ from sentry.lang.javascript.processor import (
     SourceProcessor, trim_line, UrlResult
 )
 from sentry.lang.javascript.sourcemaps import SourceMap, SourceMapIndex
+from sentry.lang.javascript.errormapping import rewrite_exception
 from sentry.models import Release
 from sentry.testutils import TestCase
 
@@ -314,8 +315,51 @@ class SourceProcessorTest(TestCase):
                 }],
             }
         }
-
         processor = SourceProcessor(project=self.project)
         result = processor.process(data)
         exc = result['sentry.interfaces.Exception']['values'][0]
         assert exc['stacktrace']['frames'][1]['module'] == 'foo/bar'
+
+
+class ErrorMappingTest(TestCase):
+
+    def test_react_error_mapping_resolving(self):
+        data = {
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'InvariantViolation',
+                    'value': (
+                        'Minified React error #109; visit http://facebook'
+                        '.github.io/react/docs/error-decoder.html?invariant='
+                        '109&args[]=Component for the full message or use '
+                        'the non-minified dev environment for full errors '
+                        'and additional helpful warnings.'
+                    ),
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/foo.js',
+                                'filename': 'foo.js',
+                                'lineno': 4,
+                                'colno': 0,
+                            },
+                            {
+                                'abs_path': 'http://example.com/foo.js',
+                                'filename': 'foo.js',
+                                'lineno': 1,
+                                'colno': 0,
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+
+        assert rewrite_exception(data)
+
+        assert data['sentry.interfaces.Exception']['values'][0]['value'] == (
+            'Component.render(): A valid React element (or null) must be '
+            'returned. You may have returned undefined, an array or '
+            'some other invalid object.'
+        )
