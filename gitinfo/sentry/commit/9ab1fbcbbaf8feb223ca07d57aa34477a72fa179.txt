commit 9ab1fbcbbaf8feb223ca07d57aa34477a72fa179
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 4 13:28:13 2019 -0800

    feat(discover): Add option to `getChartDataByDay` to return all series (#11325)
    
    ...instead of only top 10
    
    Depends on https://github.com/getsentry/sentry/pull/11324

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index 8fbcab0d37..9867816a0b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -48,6 +48,7 @@ export function getChartData(data, query, options = {}) {
  * @param {Object} query Query state corresponding to data
  * @param {Object} [options] Options object
  * @param {Boolean} [options.useTimestamps] (default: false) Return raw timestamps instead of formatting dates
+ * @param {Boolean} [options.allSeries] (default: false) Return all series instead of top 10
  * @returns {Array}
  */
 export function getChartDataByDay(rawData, query, options = {}) {
@@ -57,7 +58,11 @@ export function getChartDataByDay(rawData, query, options = {}) {
   const data = getDataWithKeys(rawData, query);
 
   // We only want to show the top 10 series
-  const top10Series = getTopSeries(data, aggregate);
+  const top10Series = getTopSeries(
+    data,
+    aggregate,
+    options.allSeries ? -1 : options.allSeries
+  );
 
   // Reverse to get ascending dates - we request descending to ensure latest
   // day data is compplete in the case of limits being hit
@@ -128,12 +133,12 @@ function getEmptySeries(dates) {
 }
 
 // Get the top series ranked by latest time / largest aggregate
-function getTopSeries(data, aggregate) {
+function getTopSeries(data, aggregate, limit = NUMBER_OF_SERIES_BY_DAY) {
   const allData = orderBy(data, ['time', aggregate], ['desc', 'desc']);
 
-  return new Set(
-    [...new Set(allData.map(row => row[CHART_KEY]))].slice(0, NUMBER_OF_SERIES_BY_DAY)
-  );
+  const orderedData = [...new Set(allData.map(row => row[CHART_KEY]))];
+
+  return new Set(limit <= 0 ? orderedData : orderedData.slice(0, limit));
 }
 
 function getDataWithKeys(data, query) {
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index 799620f92b..a9f776b6ab 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -230,6 +230,41 @@ describe('Utils', function() {
       ];
       expect(getChartDataByDay(raw, query, {useTimestamps: true})).toEqual(expected);
     });
+
+    it('shows only top 10 series by default', function() {
+      expect(
+        getChartDataByDay(
+          [
+            ...raw,
+            ...[...new Array(10)].map(() => ({
+              'error.type': 'Exeption',
+              platform: `${Math.random()}`,
+              count: 10,
+              time: 1532070000,
+            })),
+          ],
+          query
+        )
+      ).toHaveLength(10);
+    });
+
+    it('shows all series', function() {
+      expect(
+        getChartDataByDay(
+          [
+            ...raw,
+            ...[...new Array(10)].map(() => ({
+              'error.type': 'Exeption',
+              platform: `${Math.random()}`,
+              count: 10,
+              time: 1532070000,
+            })),
+          ],
+          query,
+          {allSeries: true}
+        )
+      ).toHaveLength(14);
+    });
   });
 
   it('getDisplayValue()', function() {
