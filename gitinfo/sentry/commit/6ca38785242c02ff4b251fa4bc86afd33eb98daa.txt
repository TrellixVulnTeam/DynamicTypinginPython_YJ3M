commit 6ca38785242c02ff4b251fa4bc86afd33eb98daa
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Oct 28 14:27:42 2019 -0700

    feat(app-platform): adds date_published to sentry apps (#15298)

diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index 3f5c9fdd50..87d61ac148 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -61,6 +61,7 @@ class Updater(Mediator):
         if self.user.is_superuser:
             if self.status == SentryAppStatus.PUBLISHED_STR:
                 self.sentry_app.status = SentryAppStatus.PUBLISHED
+                self.sentry_app.date_published = timezone.now()
             if self.status == SentryAppStatus.UNPUBLISHED_STR:
                 self.sentry_app.status = SentryAppStatus.UNPUBLISHED
 
diff --git a/src/sentry/migrations/0006_sentryapp_date_published.py b/src/sentry/migrations/0006_sentryapp_date_published.py
new file mode 100644
index 0000000000..b1b6eee853
--- /dev/null
+++ b/src/sentry/migrations/0006_sentryapp_date_published.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+
+    dependencies = [
+        ('sentry', '0005_fix_content_types'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='sentryapp',
+            name='date_published',
+            field=models.DateTimeField(null=True, blank=True),
+        ),
+    ]
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index ef8efb11f0..53679e61a0 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -99,6 +99,7 @@ class SentryApp(ParanoidModel, HasApiScopes):
 
     date_added = models.DateTimeField(default=timezone.now)
     date_updated = models.DateTimeField(default=timezone.now)
+    date_published = models.DateTimeField(null=True, blank=True)
 
     class Meta:
         app_label = "sentry"
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 97b6d99da7..faa7367f1b 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -203,10 +203,13 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
     def test_superusers_can_publish_apps(self):
         self.login_as(user=self.superuser, superuser=True)
         app = self.create_sentry_app(name="SampleApp", organization=self.org)
+        assert not app.date_published
         url = reverse("sentry-api-0-sentry-app-details", args=[app.slug])
         response = self.client.put(url, data={"status": "published"}, format="json")
         assert response.status_code == 200
-        assert SentryApp.objects.get(id=app.id).status == SentryAppStatus.PUBLISHED
+        app = SentryApp.objects.get(id=app.id)
+        assert app.status == SentryAppStatus.PUBLISHED
+        assert app.date_published
 
     def test_nonsuperusers_cannot_publish_apps(self):
         self.login_as(user=self.user)
