commit d463b40bc11bc938e0a863887550d38162b7b94d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Feb 13 13:44:29 2017 +0100

    Get cpu type from device context and clean up context registry

diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 651f77dee5..76ae6dc3da 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -35,16 +35,14 @@ def format_index_expr(format_string, data):
         six.text_type(format_string), (), data).strip())
 
 
-def contexttype(name):
-    def decorator(cls):
-        cls.type = name
-        context_types[name] = cls
-        return cls
-    return decorator
+def contexttype(cls):
+    context_types[cls.type] = cls
+    return cls
 
 
 class ContextType(object):
     indexed_fields = None
+    type = None
 
     def __init__(self, alias, data):
         self.alias = alias
@@ -61,6 +59,25 @@ class ContextType(object):
         rv['type'] = self.type
         return rv
 
+    @classmethod
+    def values_for_data(cls, data):
+        contexts = data.get('contexts') or {}
+        rv = []
+        for context in six.itervalues(contexts):
+            if context.get('type') == cls.type:
+                rv.append(context)
+        return rv
+
+    @classmethod
+    def primary_value_for_data(cls, data):
+        contexts = data.get('contexts') or {}
+        val = contexts.get(cls.type)
+        if val and val.get('type') == cls.type:
+            return val
+        rv = cls.values_for_data(data)
+        if len(rv) == 1:
+            return rv[0]
+
     def iter_tags(self):
         if self.indexed_fields:
             for field, f_string in six.iteritems(self.indexed_fields):
@@ -76,13 +93,14 @@ class ContextType(object):
 
 
 # TODO(dcramer): contexts need to document/describe expected (optional) fields
-@contexttype('default')
+@contexttype
 class DefaultContextType(ContextType):
-    pass
+    type = 'default'
 
 
-@contexttype('device')
+@contexttype
 class DeviceContextType(ContextType):
+    type = 'device'
     indexed_fields = {
         '': u'{model}',
         'family': u'{family}',
@@ -90,16 +108,18 @@ class DeviceContextType(ContextType):
     # model_id, arch
 
 
-@contexttype('runtime')
+@contexttype
 class RuntimeContextType(ContextType):
+    type = 'runtime'
     indexed_fields = {
         '': u'{name} {version}',
         'name': u'{name}',
     }
 
 
-@contexttype('browser')
+@contexttype
 class BrowserContextType(ContextType):
+    type = 'browser'
     indexed_fields = {
         '': u'{name} {version}',
         'name': u'{name}',
@@ -107,8 +127,9 @@ class BrowserContextType(ContextType):
     # viewport
 
 
-@contexttype('os')
+@contexttype
 class OsContextType(ContextType):
+    type = 'os'
     indexed_fields = {
         '': u'{name} {version}',
         'name': u'{name}',
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index d0b0d30da1..968a597240 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -15,7 +15,7 @@ from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed
 from sentry.lang.native.utils import \
     find_apple_crash_report_referenced_images, get_sdk_from_event, \
     find_stacktrace_referenced_images, get_sdk_from_apple_system_info, \
-    APPLE_SDK_MAPPING
+    cpu_name_from_data, APPLE_SDK_MAPPING
 from sentry.stacktraces import StacktraceProcessor
 from sentry.constants import NATIVE_UNKNOWN_STRING
 
@@ -286,6 +286,7 @@ def preprocess_apple_crash_event(data):
     referenced_images = find_apple_crash_report_referenced_images(
         crash_report['binary_images'], raw_threads.values())
     sym = Symbolizer(project, crash_report['binary_images'],
+                     cpu_name=cpu_name_from_data(data),
                      referenced_images=referenced_images)
 
     try:
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index d069fae64d..6c774521f9 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -93,15 +93,16 @@ def trim_frame(frame):
     return frame
 
 
-def find_system_symbol(img, instruction_addr, sdk_info=None):
+def find_system_symbol(img, instruction_addr, sdk_info=None, cpu_name=None):
     """Finds a system symbol."""
+    img_cpu_name = get_cpu_name(img['cpu_type'], img['cpu_subtype'])
+    cpu_name = img_cpu_name or cpu_name
     return DSymSymbol.objects.lookup_symbol(
         instruction_addr=instruction_addr,
         image_addr=img['image_addr'],
         image_vmaddr=img['image_vmaddr'],
         uuid=img['uuid'],
-        cpu_name=get_cpu_name(img['cpu_type'],
-                              img['cpu_subtype']),
+        cpu_name=cpu_name,
         object_path=img['name'],
         sdk_info=sdk_info
     )
@@ -137,10 +138,9 @@ class Symbolizer(object):
     """
 
     def __init__(self, project, binary_images, referenced_images=None,
-                 is_debug_build=None):
+                 cpu_name=None):
         self.symsynd_symbolizer = make_symbolizer(
             project, binary_images, referenced_images=referenced_images)
-        self.is_debug_build = is_debug_build
 
         # This is a duplication from symsynd.  The reason is that symsynd
         # will only load images that it can find dsyms for but we also
@@ -154,15 +154,16 @@ class Symbolizer(object):
         self._image_addresses.sort()
 
         # This should always succeed but you never quite know.
-        self.cpu_name = None
-        for img in six.itervalues(self.images):
-            cpu_name = get_cpu_name(img['cpu_type'],
-                                    img['cpu_subtype'])
-            if self.cpu_name is None:
-                self.cpu_name = cpu_name
-            elif self.cpu_name != cpu_name:
-                self.cpu_name = None
-                break
+        self.cpu_name = cpu_name
+        if self.cpu_name is None:
+            for img in six.itervalues(self.images):
+                cpu_name = get_cpu_name(img['cpu_type'],
+                                        img['cpu_subtype'])
+                if self.cpu_name is None:
+                    self.cpu_name = cpu_name
+                elif self.cpu_name != cpu_name:
+                    self.cpu_name = None
+                    break
 
     def find_best_instruction(self, frame, meta=None):
         """Finds the best instruction for a given frame."""
@@ -189,6 +190,8 @@ class Symbolizer(object):
             if not image_info:
                 continue
             dsym_path = normalize_dsym_path(image_info['dsym_path'])
+            # Here we use the CPU name from the image as it might be
+            # slightly different (armv7 vs armv7f for instance)
             cpu_name = image_info['cpu_name']
             image_vmaddr = get_macho_vmaddr(dsym_path, cpu_name)
             if image_vmaddr:
@@ -316,7 +319,7 @@ class Symbolizer(object):
 
         if symbol is None:
             symbol = find_system_symbol(
-                img, frame['instruction_addr'], sdk_info)
+                img, frame['instruction_addr'], sdk_info, self.cpu_name)
 
         if symbol is None:
             # Simulator frames cannot be symbolicated
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 8316927b94..faca263acd 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import six
 import logging
 
+from sentry.interfaces.contexts import DeviceContextType
+
 
 logger = logging.getLogger(__name__)
 
@@ -140,3 +143,12 @@ def get_sdk_from_apple_system_info(info):
         'version_minor': system_version[1],
         'version_patchlevel': system_version[2],
     }
+
+
+def cpu_name_from_data(data):
+    """Returns the CPU name from the given data if it exists."""
+    device = DeviceContextType.primary_value_for_data(data)
+    if device:
+        arch = device.get('arch')
+        if isinstance(arch, six.string_types):
+            return arch
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index 1fd60885ef..c89bbb6282 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.lang.native.utils import get_sdk_from_event
+from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data
 
 
 def test_get_sdk_from_event():
@@ -36,3 +36,33 @@ def test_get_sdk_from_event():
     assert sdk_info['version_major'] == 9
     assert sdk_info['version_minor'] == 3
     assert sdk_info['version_patchlevel'] == 1
+
+
+def test_cpu_name_from_data():
+    cpu_name = cpu_name_from_data({
+        'contexts': {
+            'device': {
+                'type': 'device',
+                'arch': 'arm64'
+            },
+            'device2': {
+                'type': 'device',
+                'arch': 'arm7'
+            },
+        }
+    })
+
+    assert cpu_name == 'arm64'
+
+
+def test_cpu_name_from_data_inferred_type():
+    cpu_name = cpu_name_from_data({
+        'contexts': {
+            'some_device': {
+                'type': 'device',
+                'arch': 'arm64'
+            }
+        }
+    })
+
+    assert cpu_name == 'arm64'
