commit b256eabf38fe654b120bf762fd961c37ca680308
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Jun 30 00:17:08 2016 +0300

    Initial rendering pass for threads

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index 1af8bb1619..49f58dcc75 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -5,6 +5,7 @@ import rawStacktraceContent from './rawStacktraceContent';
 import StacktraceContent from './stacktraceContent';
 import {getStacktraceDefaultState} from './stacktrace';
 import {t} from '../../../locale';
+import {defined} from '../../../utils';
 
 
 const Thread = React.createClass({
@@ -17,24 +18,40 @@ const Thread = React.createClass({
   },
 
   renderTitle() {
-    let bits = [];
-    if (this.data.index) {
-      bits.push('#' + this.data.index);
+    const {data} = this.props;
+    let bits = ['Thread'];
+    if (defined(data.name)) {
+      bits.push(`"${data.name}"`);
     }
-    if (this.data.name) {
-      bits.push(`"${this.data.name}"`);
+    if (defined(data.id)) {
+      bits.push('#' + data.id);
     }
-    if (this.data.id) {
-      bits.push('id=' + this.data.id);
-    }
-    return <h3>bits.join(' ')</h3>;
+    return <h4>{bits.join(' ')}</h4>;
+  },
+
+  renderMissingStacktrace() {
+    return (
+      <div className="traceback missing-traceback">
+        <ul>
+          <li className="frame missing-frame">
+            <div className="title">
+              <span className="informal">
+                {this.props.data.crashed
+                  ? 'Thread Crashed'
+                  : 'No or unknown stacktrace'}
+              </span>
+            </div>
+          </li>
+        </ul>
+      </div>
+    );
   },
 
   render() {
     return (
       <div className="thread">
         {this.renderTitle()}
-        {this.props.data.stacktrace && (
+        {this.props.data.stacktrace ? (
           this.props.stackView === 'raw' ?
             <pre className="traceback plain">
               {rawStacktraceContent(this.props.data.stacktrace, this.props.platform)}
@@ -42,10 +59,11 @@ const Thread = React.createClass({
           :
             <StacktraceContent
                 data={this.props.data.stacktrace}
-                className="no-exception"
                 includeSystemFrames={this.props.stackView === 'full'}
                 platform={this.props.event.platform}
                 newestFirst={this.props.newestFirst} />
+        ) : (
+          this.renderMissingStacktrace()
         )}
       </div>
     );
@@ -63,7 +81,7 @@ const ThreadsInterface = React.createClass({
 
   getInitialState() {
     let hasSystemFrames = false;
-    for (let thread in this.props.data.threads) {
+    for (let thread in this.props.data.list) {
       if (thread.hasSystemFrames) {
         hasSystemFrames = true;
         break;
@@ -95,7 +113,7 @@ const ThreadsInterface = React.createClass({
           <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>{t('Raw')}</a>
         </div>
         <h3>
-          {'Threads'}
+          {'Threads '}
           {newestFirst ?
             <small>({t('most recent call last')})</small>
           :
@@ -112,7 +130,7 @@ const ThreadsInterface = React.createClass({
           type={this.props.type}
           title={title}
           wrapTitle={false}>
-        {this.state.threads.map((thread, idx) => {
+        {this.props.data.list.map((thread, idx) => {
           return (
             <Thread
               key={idx}
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index b725a0e3c3..943e881764 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1087,6 +1087,10 @@ div.traceback > ul {
         font-weight: bold;
       }
 
+      .informal {
+        font-style: italic;
+      }
+
       a.annotation {
         &.trigger-popover {
           cursor: pointer;
@@ -1102,6 +1106,10 @@ div.traceback > ul {
       background: @white-dark;
     }
 
+    &.missing-frame .title {
+      background: lighten(@red-light, 30);
+    }
+
     .title.as-table {
       display: flex;
       align-items: baseline;
@@ -1732,6 +1740,21 @@ pre.val, span.val {
   }
 }
 
+/**
+* Threads
+* ============================================================================
+*/
+.box-content .thread {
+  margin: 0 0 20px 0;
+
+  h4 {
+    margin: 0 -20px 0 -20px;
+    padding: 7px 20px;
+    color: @gray-darker;
+    font-size: 14px;
+  }
+}
+
 /**
 * Shared Group Detail
 * ============================================================================
