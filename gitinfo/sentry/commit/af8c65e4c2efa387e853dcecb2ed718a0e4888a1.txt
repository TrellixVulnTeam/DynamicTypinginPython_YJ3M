commit af8c65e4c2efa387e853dcecb2ed718a0e4888a1
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 23 14:31:11 2015 +0200

    Support exception-less stacktraces in JS processor (fixes GH-1624)

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 4009393343..d3dbda5117 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -378,7 +378,10 @@ class SourceProcessor(object):
                 if e.get('stacktrace')
             ]
         except KeyError:
-            stacktraces = None
+            stacktraces = []
+
+        if 'sentry.interfaces.Stacktrace' in data:
+            stacktraces.append(Stacktrace.to_python(data['sentry.interfaces.Stacktrace']))
 
         return stacktraces
 
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index b504fc6f1f..2840527cc4 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -7,9 +7,10 @@ import responses
 
 from requests.exceptions import RequestException
 
+from sentry.interfaces.stacktrace import Stacktrace
 from sentry.lang.javascript.processor import (
     BadSource, discover_sourcemap, fetch_sourcemap, fetch_url, generate_module,
-    trim_line, UrlResult
+    SourceProcessor, trim_line, UrlResult
 )
 from sentry.lang.javascript.sourcemaps import SourceMap, SourceMapIndex
 from sentry.testutils import TestCase
@@ -151,3 +152,64 @@ class TrimLineTest(TestCase):
         assert trim_line(self.long_line, column=66) == '{snip} blic is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it lives wi {snip}'
         assert trim_line(self.long_line, column=190) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
         assert trim_line(self.long_line, column=9999) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
+
+
+class SourceProcessorTest(TestCase):
+    def test_get_stacktraces_returns_stacktrace_interface(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Stacktrace': {
+                'frames': [
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 4,
+                        'colno': 0,
+                    },
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 1,
+                        'colno': 0,
+                    },
+                ],
+            },
+        }
+
+        processor = SourceProcessor()
+        result = processor.get_stacktraces(data)
+        assert len(result) == 1
+        assert type(result[0]) is Stacktrace
+
+    def test_get_stacktraces_returns_exception_interface(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'Error',
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/foo.js',
+                                'filename': 'foo.js',
+                                'lineno': 4,
+                                'colno': 0,
+                            },
+                            {
+                                'abs_path': 'http://example.com/foo.js',
+                                'filename': 'foo.js',
+                                'lineno': 1,
+                                'colno': 0,
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+
+        processor = SourceProcessor()
+        result = processor.get_stacktraces(data)
+        assert len(result) == 1
+        assert type(result[0]) is Stacktrace
