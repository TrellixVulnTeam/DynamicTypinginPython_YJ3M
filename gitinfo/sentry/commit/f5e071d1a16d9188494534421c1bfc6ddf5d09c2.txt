commit f5e071d1a16d9188494534421c1bfc6ddf5d09c2
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed May 27 11:20:31 2020 -0700

    ref(integrations): Audit logs for install/uninstall (#19010)
    
    * ref(integrations): Audit logs for install/uninstall
    
    * update test
    
    * move up super

diff --git a/src/sentry/api/endpoints/organization_integration_details.py b/src/sentry/api/endpoints/organization_integration_details.py
index d655ff6c03..db273457e1 100644
--- a/src/sentry/api/endpoints/organization_integration_details.py
+++ b/src/sentry/api/endpoints/organization_integration_details.py
@@ -8,8 +8,9 @@ from django.http import Http404
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationIntegrationsPermission
 from sentry.api.serializers import serialize
 from sentry.shared_integrations.exceptions import IntegrationError
-from sentry.models import Integration, ObjectStatus, OrganizationIntegration
+from sentry.models import AuditLogEntryEvent, Integration, ObjectStatus, OrganizationIntegration
 from sentry.tasks.deletion import delete_organization_integration
+from sentry.utils.audit import create_audit_entry
 
 
 class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
@@ -48,6 +49,14 @@ class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
                 },
                 countdown=0,
             )
+            integration = org_integration.integration
+            create_audit_entry(
+                request=request,
+                organization=organization,
+                target_object=integration.id,
+                event=AuditLogEntryEvent.INTEGRATION_REMOVE,
+                data={"provider": integration.provider, "name": integration.name},
+            )
 
         return self.respond(status=204)
 
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index e997e5910a..8e9fc27802 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -31,8 +31,8 @@ from sentry.shared_integrations.constants import (
     ERR_INTERNAL,
     ERR_UNSUPPORTED_RESPONSE_TYPE,
 )
-from sentry.models import Identity, OrganizationIntegration
-
+from sentry.models import AuditLogEntryEvent, Identity, OrganizationIntegration
+from sentry.utils.audit import create_audit_entry
 
 FeatureDescription = namedtuple(
     "FeatureDescription",
@@ -174,6 +174,19 @@ class IntegrationProvider(PipelineProvider):
     def post_install(self, integration, organization, extra=None):
         pass
 
+    def create_audit_log_entry(self, integration, organization, request, action, extra=None):
+        """
+        Creates an audit log entry for the newly installed integration.
+        """
+        if action == "install":
+            create_audit_entry(
+                request=request,
+                organization=organization,
+                target_object=integration.id,
+                event=AuditLogEntryEvent.INTEGRATION_ADD,
+                data={"provider": integration.provider, "name": integration.name},
+            )
+
     def get_pipeline_views(self):
         """
         Return a list of ``View`` instances describing this integration's
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index 6e9bbedc4b..8044f6a6b1 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -53,8 +53,11 @@ class IntegrationPipeline(Pipeline):
         response = self._finish_pipeline(data)
 
         extra = data.get("post_install_data")
-
+        action = "upgrade" if extra else "install"
         # to Slack
+        self.provider.create_audit_log_entry(
+            self.integration, self.organization, self.request, action, extra=extra
+        )
         self.provider.post_install(self.integration, self.organization, extra=extra)
         self.clear_session()
         return response
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 9c1fbc49f0..81fe87f65e 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -16,12 +16,13 @@ from sentry.integrations import (
     IntegrationInstallation,
 )
 
-from sentry.models import Integration, Rule, RuleStatus
+from sentry.models import AuditLogEntryEvent, Integration, Organization, Rule, RuleStatus
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.compat import map
 from sentry.utils.http import absolute_uri
 from sentry.shared_integrations.exceptions import ApiError, IntegrationError
 from sentry.integrations.slack import post_migration
+from sentry.utils.audit import create_audit_entry
 
 from .client import SlackClient
 from .utils import logger
@@ -189,6 +190,32 @@ class SlackIntegrationProvider(IntegrationProvider):
 
         return integration
 
+    def create_audit_log_entry(self, integration, organization, request, action, extra=None):
+        super(SlackIntegrationProvider, self).create_audit_log_entry(
+            integration, organization, request, action
+        )
+
+        if action == "upgrade":
+            create_audit_entry(
+                request=request,
+                organization=organization,
+                target_object=integration.id,
+                event=AuditLogEntryEvent.INTEGRATION_UPGRADE,
+                data={"provider": integration.provider, "name": integration.name},
+            )
+
+            if extra and extra.get("extra_orgs"):
+                for org in Organization.objects.filter(slug__in=extra["extra_orgs"]):
+                    create_audit_entry(
+                        request=request,
+                        organization=org,
+                        target_object=integration.id,
+                        event=AuditLogEntryEvent.INTEGRATION_UPGRADE,
+                        data={"provider": integration.provider, "name": integration.name},
+                    )
+
+            return
+
     def post_install(self, integration, organization, extra=None):
         # normal installtions don't have extra, quit immediately
         if extra is None:
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index 8489096994..33d7fa877d 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -64,6 +64,7 @@ class InternalCreator(Mediator):
                 organization=self.organization,
                 target_object=self.organization.id,
                 event=AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD,
+                data={"name": self.sentry_app.name},
             )
 
     def record_analytics(self):
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index dc6e9ceb2c..b1145c1c1c 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -75,6 +75,7 @@ class AuditLogEntryEvent(object):
     SERVICEHOOK_ENABLE = 103
     SERVICEHOOK_DISABLE = 104
 
+    INTEGRATION_UPGRADE = 109
     INTEGRATION_ADD = 110
     INTEGRATION_EDIT = 111
     INTEGRATION_REMOVE = 112
@@ -160,6 +161,7 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.SERVICEHOOK_REMOVE, "servicehook.remove"),
             (AuditLogEntryEvent.SERVICEHOOK_ENABLE, "servicehook.enable"),
             (AuditLogEntryEvent.SERVICEHOOK_DISABLE, "servicehook.disable"),
+            (AuditLogEntryEvent.INTEGRATION_UPGRADE, "integration.upgrade"),
             (AuditLogEntryEvent.INTEGRATION_ADD, "integration.add"),
             (AuditLogEntryEvent.INTEGRATION_EDIT, "integration.edit"),
             (AuditLogEntryEvent.INTEGRATION_REMOVE, "integration.remove"),
@@ -358,20 +360,42 @@ class AuditLogEntry(Model):
             return 'disabled the service hook for "%s"' % (truncatechars(self.data["url"], 64),)
 
         elif self.event == AuditLogEntryEvent.INTEGRATION_ADD:
-            return "enabled integration %s for project %s" % (
-                self.data["integration"],
-                self.data["project"],
-            )
+            if self.data.get("provider"):
+                return "installed %s for the %s integration" % (
+                    self.data["name"],
+                    self.data["provider"],
+                )
+            else:
+                return "enabled integration %s for project %s" % (
+                    self.data["integration"],
+                    self.data["project"],
+                )
         elif self.event == AuditLogEntryEvent.INTEGRATION_EDIT:
+            if self.data.get("provider"):
+                return "edited the %s for the %s integration" % (
+                    self.data["name"],
+                    self.data["provider"],
+                )
             return "edited integration %s for project %s" % (
                 self.data["integration"],
                 self.data["project"],
             )
         elif self.event == AuditLogEntryEvent.INTEGRATION_REMOVE:
+            if self.data.get("provider"):
+                return "uninstalled %s for the %s integration" % (
+                    self.data["name"],
+                    self.data["provider"],
+                )
             return "disabled integration %s from project %s" % (
                 self.data["integration"],
                 self.data["project"],
             )
+        elif self.event == AuditLogEntryEvent.INTEGRATION_UPGRADE:
+            if self.data.get("provider"):
+                return "upgraded %s for the %s integration" % (
+                    self.data["name"],
+                    self.data["provider"],
+                )
 
         elif self.event == AuditLogEntryEvent.SENTRY_APP_ADD:
             return "created sentry app %s" % (self.data["sentry_app"])
@@ -381,6 +405,8 @@ class AuditLogEntry(Model):
             return "installed sentry app %s" % (self.data["sentry_app"])
         elif self.event == AuditLogEntryEvent.SENTRY_APP_UNINSTALL:
             return "uninstalled sentry app %s" % (self.data["sentry_app"])
+        elif self.event == AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD:
+            return "created internal integration %s" % (self.data.get("name", ""))
         elif self.event == AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD_TOKEN:
             return "created a token for internal integration %s" % (self.data["sentry_app"])
         elif self.event == AuditLogEntryEvent.INTERNAL_INTEGRATION_REMOVE_TOKEN:
diff --git a/tests/sentry/integrations/slack/test_integration.py b/tests/sentry/integrations/slack/test_integration.py
index 4875185754..35c62d31ac 100644
--- a/tests/sentry/integrations/slack/test_integration.py
+++ b/tests/sentry/integrations/slack/test_integration.py
@@ -7,6 +7,8 @@ from six.moves.urllib.parse import parse_qs, urlencode, urlparse
 
 from sentry.integrations.slack import SlackIntegrationProvider, SlackIntegration
 from sentry.models import (
+    AuditLogEntry,
+    AuditLogEntryEvent,
     Identity,
     IdentityProvider,
     IdentityStatus,
@@ -109,6 +111,9 @@ class SlackIntegrationTest(IntegrationTestCase):
         identity = Identity.objects.get(idp=idp, user=self.user, external_id="UXXXXXXX1")
         assert identity.status == IdentityStatus.VALID
 
+        audit_entry = AuditLogEntry.objects.get(event=AuditLogEntryEvent.INTEGRATION_ADD)
+        assert audit_entry.get_note() == "installed Example for the slack integration"
+
     @responses.activate
     def test_multiple_integrations(self):
         self.assert_setup_flow()
diff --git a/tests/sentry/integrations/slack/test_migration_flow.py b/tests/sentry/integrations/slack/test_migration_flow.py
index 31de58a235..3f8450e89e 100644
--- a/tests/sentry/integrations/slack/test_migration_flow.py
+++ b/tests/sentry/integrations/slack/test_migration_flow.py
@@ -7,6 +7,8 @@ from six.moves.urllib.parse import parse_qs, urlencode, urlparse
 
 from sentry.integrations.slack import SlackIntegrationProvider
 from sentry.models import (
+    AuditLogEntry,
+    AuditLogEntryEvent,
     Identity,
     IdentityProvider,
     IdentityStatus,
@@ -165,6 +167,9 @@ class SlackMigrationTest(IntegrationTestCase):
             }
         )
 
+        audit_entry = AuditLogEntry.objects.get(event=AuditLogEntryEvent.INTEGRATION_UPGRADE)
+        assert audit_entry.get_note() == "upgraded Example for the slack integration"
+
     def test_multiple_orgs_same_workspace(self):
         new_org = self.create_organization(owner=self.create_user())
         OrganizationIntegration.objects.create(organization=new_org, integration=self.integration)
@@ -176,6 +181,23 @@ class SlackMigrationTest(IntegrationTestCase):
         self.assertContains(resp, self.integration.name)
         self.assertContains(resp, new_org.slug)
 
+    @responses.activate
+    def test_multiple_orgs_same_workspace_audit_log_entries(self):
+        new_org = self.create_organization(owner=self.create_user())
+        OrganizationIntegration.objects.create(organization=new_org, integration=self.integration)
+
+        self.assert_setup_flow()
+
+        audit_entry1 = AuditLogEntry.objects.get(
+            organization=self.organization, event=AuditLogEntryEvent.INTEGRATION_UPGRADE
+        )
+        assert audit_entry1.get_note() == "upgraded Example for the slack integration"
+
+        audit_entry2 = AuditLogEntry.objects.get(
+            organization=new_org, event=AuditLogEntryEvent.INTEGRATION_UPGRADE
+        )
+        assert audit_entry2.get_note() == "upgraded Example for the slack integration"
+
     @patch("sentry.integrations.slack.post_migration.run_post_migration")
     @responses.activate
     def test_migration_flow_no_channels(self, run_post_migration):
