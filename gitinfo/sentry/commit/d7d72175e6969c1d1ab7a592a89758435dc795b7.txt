commit d7d72175e6969c1d1ab7a592a89758435dc795b7
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 7 14:04:50 2016 -0800

    Log failed/successful authentications

diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index 1fd9255d38..495b9d09a6 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
-from django.contrib.auth import login, logout
+from django.contrib.auth import logout
 from django.contrib.auth.models import AnonymousUser
 from rest_framework.response import Response
 
 from sentry.api.authentication import QuietBasicAuthentication
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
+from sentry.utils import auth
 
 
 class AuthIndexEndpoint(Endpoint):
@@ -54,7 +55,7 @@ class AuthIndexEndpoint(Endpoint):
             return Response(status=400)
 
         # Must use the real request object that Django knows about
-        login(request._request, request.user)
+        auth.login(request._request, request.user)
 
         return self.get(request)
 
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 106a609749..e477841106 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -5,7 +5,6 @@ import logging
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.contrib import messages
-from django.contrib.auth import login
 from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.utils import timezone
@@ -17,7 +16,7 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, AuthIdentity, AuthProvider, Organization,
     OrganizationMember, OrganizationMemberTeam, User
 )
-from sentry.utils.auth import find_users, get_login_redirect
+from sentry.utils import auth
 from sentry.utils.cache import Lock
 from sentry.utils.http import absolute_uri
 from sentry.web.forms.accounts import AuthenticationForm
@@ -350,7 +349,7 @@ class AuthHelper(object):
         op = request.POST.get('op')
         if not request.user.is_authenticated():
             try:
-                existing_user = find_users(identity['email'])[0]
+                existing_user = auth.find_users(identity['email'])[0]
             except IndexError:
                 existing_user = None
             login_form = self._get_login_form(existing_user)
@@ -363,9 +362,10 @@ class AuthHelper(object):
             # confirm authentication, login
             op = None
             if login_form.is_valid():
-                login(request, login_form.get_user())
+                auth.login(request, login_form.get_user())
                 request.session.pop('needs_captcha', None)
             else:
+                auth.log_auth_failure(request, request.POST.get('username'))
                 request.session['needs_captcha'] = 1
         else:
             op = None
@@ -386,11 +386,11 @@ class AuthHelper(object):
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
-        login(self.request, user)
+        auth.login(self.request, user)
 
         self.clear_session()
 
-        return HttpResponseRedirect(get_login_redirect(self.request))
+        return HttpResponseRedirect(auth.get_login_redirect(self.request))
 
     def _handle_existing_identity(self, auth_identity, identity):
         # TODO(dcramer): this is very similar to attach
@@ -422,11 +422,11 @@ class AuthHelper(object):
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
-        login(self.request, user)
+        auth.login(self.request, user)
 
         self.clear_session()
 
-        return HttpResponseRedirect(get_login_redirect(self.request))
+        return HttpResponseRedirect(auth.get_login_redirect(self.request))
 
     @transaction.atomic
     def _finish_login_pipeline(self, identity):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 9a80804266..8cd4927522 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -520,6 +520,9 @@ LOGGING = {
         'sentry': {
             'level': 'ERROR',
         },
+        'sentry.auth': {
+            'handlers': ['audit'],
+        },
         'sentry.api': {
             'handlers': ['console:api', 'sentry'],
             'propagate': False,
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 87a30ad0c6..da7d2c6e5b 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -7,12 +7,17 @@ sentry.utils.auth
 """
 from __future__ import absolute_import
 
+import logging
+
 from django.conf import settings
+from django.contrib.auth import login as _login
 from django.contrib.auth.backends import ModelBackend
 from django.core.urlresolvers import reverse
 
 from sentry.models import User
 
+logger = logging.getLogger('sentry.auth')
+
 
 def parse_auth_header(header):
     return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
@@ -58,6 +63,33 @@ def find_users(username, with_valid_password=True):
     return []
 
 
+def login(request, user):
+    log_auth_success(request, user.username)
+    _login(request, user)
+
+
+def log_auth_success(request, username):
+    logger.info(
+        'User authenticated successfully [ip:%s username:%r]',
+        request.META['REMOTE_ADDR'],
+        username,
+        extra={
+            'request': request,
+        }
+    )
+
+
+def log_auth_failure(request, username=None):
+    logger.info(
+        'User failed authentication [ip:%s username:%r]',
+        request.META['REMOTE_ADDR'],
+        username or '',
+        extra={
+            'request': request,
+        }
+    )
+
+
 class EmailAuthBackend(ModelBackend):
     """
     Authenticate against django.contrib.auth.models.User.
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index d939479b0b..b27d0504cb 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from django.conf import settings
 from django.contrib import messages
-from django.contrib.auth import login
 from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.http import HttpResponseRedirect
@@ -13,7 +12,7 @@ from sentry import features
 from sentry.models import AuthProvider, Organization
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
-from sentry.utils.auth import get_login_redirect
+from sentry.utils import auth
 
 ERR_NO_SSO = _('The organization does not exist or does not have Single Sign-On enabled.')
 
@@ -74,23 +73,24 @@ class AuthLoginView(BaseView):
             # HACK: grab whatever the first backend is and assume it works
             user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
-            login(request, user)
+            auth.login(request, user)
 
             # can_register should only allow a single registration
             request.session.pop('can_register', None)
 
             request.session.pop('needs_captcha', None)
 
-            return self.redirect(get_login_redirect(request))
+            return self.redirect(auth.get_login_redirect(request))
 
         elif login_form.is_valid():
-            login(request, login_form.get_user())
+            auth.login(request, login_form.get_user())
 
             request.session.pop('needs_captcha', None)
 
-            return self.redirect(get_login_redirect(request))
+            return self.redirect(auth.get_login_redirect(request))
 
         elif request.POST and not request.session.get('needs_captcha'):
+            auth.log_auth_failure(request, request.POST.get('username'))
             request.session['needs_captcha'] = 1
             login_form = self.get_login_form(request)
             login_form.errors.pop('captcha', None)
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index 6d10409223..d6bc4f85e9 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import, print_function
 
+
 from django.conf import settings
-from django.contrib.auth import login
 from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.views.decorators.cache import never_cache
@@ -9,7 +9,7 @@ from django.views.decorators.cache import never_cache
 from sentry import features
 from sentry.auth.helper import AuthHelper
 from sentry.models import AuthProvider, Organization
-from sentry.utils.auth import get_login_redirect
+from sentry.utils import auth
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 
@@ -56,23 +56,24 @@ class AuthOrganizationLoginView(BaseView):
             # HACK: grab whatever the first backend is and assume it works
             user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
-            login(request, user)
+            auth.login(request, user)
 
             # can_register should only allow a single registration
             request.session.pop('can_register', None)
 
             request.session.pop('needs_captcha', None)
 
-            return self.redirect(get_login_redirect(request))
+            return self.redirect(auth.get_login_redirect(request))
 
         elif login_form.is_valid():
-            login(request, login_form.get_user())
+            auth.login(request, login_form.get_user())
 
             request.session.pop('needs_captcha', None)
 
-            return self.redirect(get_login_redirect(request))
+            return self.redirect(auth.get_login_redirect(request))
 
         elif request.POST and not request.session.get('needs_captcha'):
+            auth.log_auth_failure(request, request.POST.get('username'))
             request.session['needs_captcha'] = 1
             login_form = self.get_login_form(request)
             login_form.errors.pop('captcha', None)
