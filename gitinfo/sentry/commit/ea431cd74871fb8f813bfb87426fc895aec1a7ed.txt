commit ea431cd74871fb8f813bfb87426fc895aec1a7ed
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Feb 28 10:29:17 2018 -0800

    fix: Rewrite environment relationships for rules when transferring projects (#7395)

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index a6d04cff5b..d93de34886 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import, print_function
 
 import logging
 import warnings
+from collections import defaultdict
 
 import six
 from bitfield import BitField
@@ -287,7 +288,13 @@ class Project(Model):
         # org than the existing one, which is currently the only use case in
         # production
         # TODO(jess): refactor this to make it an org transfer only
-        from sentry.models import ProjectTeam, ReleaseProject, EnvironmentProject
+        from sentry.models import (
+            Environment,
+            EnvironmentProject,
+            ProjectTeam,
+            ReleaseProject,
+            Rule,
+        )
 
         organization = team.organization
 
@@ -313,10 +320,12 @@ class Project(Model):
         # handle this behavior somehow. We really only have two options here:
         # * Copy over all releases/environments into the new org and handle de-duping
         # * Delete the bindings and let them reform with new data.
-        # We're choosing to just delete the bindings since new data flowing in will
-        # recreate links correctly. The tradeoff is that historical data is
-        # lost, but this is a compromise we're willing to take and a side effect
-        # of allowing this feature.
+        # We're generally choosing to just delete the bindings since new data
+        # flowing in will recreate links correctly. The tradeoff is that
+        # historical data is lost, but this is a compromise we're willing to
+        # take and a side effect of allowing this feature. There are exceptions
+        # to this however, such as rules, which should maintain their
+        # configuration when moved across organizations.
         if org_changed:
             for model in ReleaseProject, EnvironmentProject:
                 model.objects.filter(
@@ -326,6 +335,26 @@ class Project(Model):
             # with old orgs or teams
             ProjectTeam.objects.filter(project=self, team__organization_id=old_org_id).delete()
 
+        rules_by_environment_id = defaultdict(set)
+        for rule_id, environment_id in Rule.objects.filter(
+                project_id=self.id,
+                environment_id__isnull=False).values_list('id', 'environment_id'):
+            rules_by_environment_id[environment_id].add(rule_id)
+
+        environment_names = dict(
+            Environment.objects.filter(
+                id__in=rules_by_environment_id,
+            ).values_list('id', 'name')
+        )
+
+        for environment_id, rule_ids in rules_by_environment_id.items():
+            Rule.objects.filter(id__in=rule_ids).update(
+                environment_id=Environment.get_or_create(
+                    self,
+                    environment_names[environment_id],
+                ).id,
+            )
+
         # ensure this actually exists in case from team was null
         self.add_team(team)
 
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
index 1397b61cac..6bb18b2b1c 100644
--- a/tests/sentry/models/test_project.py
+++ b/tests/sentry/models/test_project.py
@@ -2,7 +2,7 @@
 
 from __future__ import absolute_import
 
-from sentry.models import OrganizationMember, OrganizationMemberTeam, Project
+from sentry.models import Environment, OrganizationMember, OrganizationMemberTeam, Project, Rule
 from sentry.testutils import TestCase
 
 
@@ -38,10 +38,18 @@ class ProjectTest(TestCase):
     def test_transfer_to(self):
         from_org = self.create_organization()
         from_team = self.create_team(organization=from_org)
-        project = self.create_project(teams=[from_team])
         to_org = self.create_organization()
         to_team = self.create_team(organization=to_org)
 
+        project = self.create_project(teams=[from_team])
+
+        rule = Rule.objects.create(
+            project=project,
+            environment_id=Environment.get_or_create(project, 'production').id,
+            label='Golden Rule',
+            data={},
+        )
+
         project.transfer_to(to_team)
 
         project = Project.objects.get(id=project.id)
@@ -50,6 +58,11 @@ class ProjectTest(TestCase):
         assert project.teams.first() == to_team
         assert project.organization_id == to_org.id
 
+        updated_rule = project.rule_set.get(label='Golden Rule')
+        assert updated_rule.id == rule.id
+        assert updated_rule.environment_id != rule.environment_id
+        assert updated_rule.environment_id == Environment.get_or_create(project, 'production').id
+
     def test_transfer_to_slug_collision(self):
         from_org = self.create_organization()
         from_team = self.create_team(organization=from_org)
