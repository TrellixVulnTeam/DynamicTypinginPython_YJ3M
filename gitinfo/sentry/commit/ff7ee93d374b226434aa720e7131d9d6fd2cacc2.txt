commit ff7ee93d374b226434aa720e7131d9d6fd2cacc2
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Mon Oct 28 12:07:54 2019 -0700

    feat(members): Add invite requests tab (#15237)

diff --git a/src/sentry/api/endpoints/organization_invite_request_details.py b/src/sentry/api/endpoints/organization_invite_request_details.py
index b7d34a5634..0e446467d4 100644
--- a/src/sentry/api/endpoints/organization_invite_request_details.py
+++ b/src/sentry/api/endpoints/organization_invite_request_details.py
@@ -49,7 +49,7 @@ class InviteRequestPermissions(OrganizationPermission):
     scope_map = {
         "GET": ["member:read", "member:write", "member:admin"],
         "PUT": ["member:write", "member:admin"],
-        "DELETE": ["member:admin"],
+        "DELETE": ["member:write", "member:admin"],
     }
 
 
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index e39ace7186..a7abf6189d 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -34,6 +34,7 @@ class OrganizationMemberSerializer(Serializer):
             },
             "dateCreated": obj.date_added,
             "inviteStatus": obj.get_invite_status_name(),
+            "inviterName": obj.inviter.get_display_name() if obj.inviter else None,
         }
         return d
 
diff --git a/src/sentry/static/sentry/app/components/badge.tsx b/src/sentry/static/sentry/app/components/badge.tsx
index bfaae425b5..c20478efa6 100644
--- a/src/sentry/static/sentry/app/components/badge.tsx
+++ b/src/sentry/static/sentry/app/components/badge.tsx
@@ -15,6 +15,6 @@ const Badge = ({priority, className, text}: Props) => (
 Badge.propTypes = {
   text: PropTypes.string,
   priority: PropTypes.oneOf(['strong', 'new', 'highlight']),
-};
+} as any;
 
 export default Badge;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 3514b06a3d..c75f541813 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -37,10 +37,10 @@ const lazyLoad = cb => m => cb(null, m.default);
 
 const hook = name => HookStore.get(name).map(cb => cb());
 
-const OrganizationMembersView = HookOrDefault({
+const OrganizationMembersWrapper = HookOrDefault({
   hookName: 'component:org-members-view',
   defaultComponentPromise: () =>
-    import(/* webpackChunkName: "OrganizationMembers" */ 'app/views/settings/organizationMembers'),
+    import(/* webpackChunkName: "OrganizationMembersWrapper" */ 'app/views/settings/organizationMembers/organizationMembersWrapper'),
 });
 
 function routes() {
@@ -497,7 +497,23 @@ function routes() {
       />
 
       <Route path="members/" name="Members">
-        <IndexRoute component={OrganizationMembersView} />
+        <Route component={OrganizationMembersWrapper}>
+          <IndexRoute
+            componentPromise={() =>
+              import(/* webpackChunkName: "OrganizationMembers" */ 'app/views/settings/organizationMembers')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+
+          <Route
+            path="requests/"
+            name="Requests"
+            componentPromise={() =>
+              import(/* webpackChunkName: "OrganizationRequestsView" */ 'app/views/settings/organizationMembers/organizationRequestsView')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+        </Route>
 
         <Route
           path="new/"
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 982b702d0d..d17c9e3056 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -361,6 +361,14 @@ export type Member = {
     'sso:invalid': boolean;
   };
   dateCreated: string;
+  inviteStatus: 'approved' | 'requested_to_be_invited' | 'requested_to_join';
+  inviterName: string | null;
+};
+
+export type AccessRequest = {
+  id: string;
+  team: Team;
+  member: Member;
 };
 
 export type EventViewv1 = {
@@ -569,4 +577,6 @@ export type RouterProps = {
 export type ActiveExperiments = {
   ImprovedInvitesExperiment: 'none' | 'all' | 'join_request' | 'invite_request';
   TrialUpgradeV2Experiment: 'upgrade' | 'trial' | -1;
+  JoinRequestExperiment: 0 | 1 | -1;
+  InviteRequestExperiment: 0 | 1 | -1;
 };
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 1d30238c39..4015af6085 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -28,17 +28,6 @@ const organizationNavigation = [
       {
         path: `${pathPrefix}/members/`,
         title: t('Members'),
-        // eslint-disable-next-line no-shadow
-        badge: ({organization, access}) => {
-          if (!access.has('org:write')) {
-            return null;
-          }
-          if (organization.pendingAccessRequests <= 0) {
-            return null;
-          }
-
-          return `${organization.pendingAccessRequests}`;
-        },
         show: ({access}) => access.has('member:read'),
         description: t('Manage user membership for an organization'),
         id: 'members',
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
index c4df3c4d94..9bd7a95180 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
@@ -1,25 +1,19 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from 'react-emotion';
 import {debounce} from 'lodash';
 
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/button';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import ConfigStore from 'app/stores/configStore';
-import InlineSvg from 'app/components/inlineSvg';
 import Pagination from 'app/components/pagination';
-import SentryTypes from 'app/sentryTypes';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import space from 'app/styles/space';
 import routeTitleGen from 'app/utils/routeTitle';
+import SentryTypes from 'app/sentryTypes';
 import {redirectToRemainingOrganization} from 'app/actionCreators/organizations';
-import {openInviteMembersModal} from 'app/actionCreators/modal';
+import withOrganization from 'app/utils/withOrganization';
 
-import OrganizationAccessRequests from './organizationAccessRequests';
 import OrganizationMemberRow from './organizationMemberRow';
 
 class OrganizationMembersView extends AsyncView {
@@ -48,7 +42,6 @@ class OrganizationMembersView extends AsyncView {
       ...state,
       members: [],
       invited: new Map(),
-      accessRequestBusy: new Map(),
       searchQuery: this.props.location.query.query || '',
     };
   }
@@ -76,12 +69,11 @@ class OrganizationMembersView extends AsyncView {
           },
         },
       ],
-      ['requestList', `/organizations/${this.props.params.orgId}/access-requests/`],
     ];
   }
 
   getTitle() {
-    const orgId = this.context.organization.slug;
+    const orgId = this.props.organization.slug;
     return routeTitleGen(t('Members'), orgId, false);
   }
 
@@ -104,41 +96,8 @@ class OrganizationMembersView extends AsyncView {
     });
   };
 
-  approveOrDeny = (isApproved, id) => {
-    const {params} = this.props;
-    const {orgId} = params || {};
-
-    this.setState(state => ({
-      accessRequestBusy: state.accessRequestBusy.set(id, true),
-    }));
-
-    return new Promise((resolve, reject) => {
-      this.api.request(`/organizations/${orgId}/access-requests/${id}/`, {
-        method: 'PUT',
-        data: {isApproved},
-        success: data => {
-          this.setState(state => ({
-            requestList: state.requestList.filter(
-              ({id: existingId}) => existingId !== id
-            ),
-          }));
-          resolve(data);
-        },
-        error: err => reject(err),
-        complete: () =>
-          this.setState(state => ({
-            accessRequestBusy: state.accessRequestBusy.set(id, false),
-          })),
-      });
-    });
-  };
-
-  handleApprove = id => this.approveOrDeny(true, id);
-
-  handleDeny = id => this.approveOrDeny(false, id);
-
   handleRemove = ({id, name}) => {
-    const {organization} = this.context;
+    const {organization} = this.props;
     const {slug: orgName} = organization;
 
     this.removeMember(id).then(
@@ -160,7 +119,7 @@ class OrganizationMembersView extends AsyncView {
   };
 
   handleLeave = ({id}) => {
-    const {organization} = this.context;
+    const {organization} = this.props;
     const {slug: orgName} = organization;
 
     this.removeMember(id).then(
@@ -222,9 +181,8 @@ class OrganizationMembersView extends AsyncView {
   }, 200);
 
   renderBody() {
-    const {params, routes} = this.props;
-    const {membersPageLinks, members, requestList} = this.state;
-    const {organization} = this.context;
+    const {params, routes, organization} = this.props;
+    const {membersPageLinks, members} = this.state;
     const {orgId} = params || {};
     const {name: orgName, access} = organization;
     const canAddMembers = access.indexOf('member:write') > -1;
@@ -238,42 +196,10 @@ class OrganizationMembersView extends AsyncView {
     const requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
 
     return (
-      <div>
-        <SettingsPageHeader title="Members" />
-
-        <StyledPanel>
-          <InlineSvg src="icon-mail" size="36px" />
-          <TextContainer>
-            <Heading>{t('Invite new members')}</Heading>
-            <SubText>
-              {t('Invite new members by email to join your organization')}
-            </SubText>
-          </TextContainer>
-          <Button
-            priority="primary"
-            size="small"
-            disabled={!canAddMembers}
-            title={
-              !canAddMembers
-                ? t('You do not have enough permission to add new members')
-                : undefined
-            }
-            onClick={openInviteMembersModal}
-          >
-            {t('Invite Members')}
-          </Button>
-        </StyledPanel>
-
-        <OrganizationAccessRequests
-          onApprove={this.handleApprove}
-          onDeny={this.handleDeny}
-          accessRequestBusy={this.state.accessRequestBusy}
-          requestList={requestList}
-        />
-
+      <React.Fragment>
         <Panel data-test-id="org-member-list">
           <PanelHeader hasButtons>
-            {t('Member')}
+            {t('Members')}
 
             {this.renderSearchInput({
               updateRoute: true,
@@ -311,37 +237,9 @@ class OrganizationMembersView extends AsyncView {
         </Panel>
 
         <Pagination pageLinks={membersPageLinks} />
-      </div>
+      </React.Fragment>
     );
   }
 }
 
-const StyledPanel = styled(Panel)`
-  padding: 18px;
-  margin-top: -14px;
-  margin-bottom: 40px;
-  display: grid;
-  grid-template-columns: max-content auto max-content;
-  grid-gap: ${space(3)};
-  align-items: center;
-  align-content: center;
-`;
-
-const TextContainer = styled('div')`
-  display: inline-grid;
-  grid-gap: ${space(1)};
-`;
-
-const Heading = styled('h1')`
-  margin: 0;
-  font-weight: 400;
-  font-size: ${p => p.theme.fontSizeExtraLarge};
-`;
-
-const SubText = styled('p')`
-  margin: 0;
-  color: ${p => p.theme.gray3};
-  font-size: 15px;
-`;
-
-export default OrganizationMembersView;
+export default withOrganization(OrganizationMembersView);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
new file mode 100644
index 0000000000..cd58b287cf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteRequestRow.tsx
@@ -0,0 +1,148 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Member, Organization} from 'app/types';
+import {PanelItem} from 'app/components/panels';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+import HookOrDefault from 'app/components/hookOrDefault';
+import Tag from 'app/views/settings/components/tag';
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+
+type Props = {
+  inviteRequest: Member;
+  inviteRequestBusy: {[key: string]: boolean};
+  organization: Organization;
+  onApprove: (id: string, email: string) => Promise<void>;
+  onDeny: (id: string, email: string) => Promise<void>;
+};
+
+const InviteModalHook = HookOrDefault({
+  hookName: 'member-invite-modal:customization',
+  defaultComponent: ({onSendInvites, children}) =>
+    children({sendInvites: onSendInvites, canSend: true}),
+});
+
+type InviteModalRenderFunc = React.ComponentProps<typeof InviteModalHook>['children'];
+
+const InviteRequestRow = ({
+  inviteRequest: {id, email, inviteStatus, inviterName, roleName},
+  inviteRequestBusy,
+  organization,
+  onApprove,
+  onDeny,
+}: Props) => {
+  // eslint-disable-next-line react/prop-types
+  const hookRenderer: InviteModalRenderFunc = ({sendInvites, canSend, headerInfo}) => (
+    <StyledPanelItem>
+      <div>
+        <h5 style={{marginBottom: '3px'}}>
+          <UserName>{email}</UserName>
+        </h5>
+        {inviteStatus === 'requested_to_be_invited' ? (
+          inviterName && (
+            <Tooltip
+              title={t(
+                'An existing member has asked to invite this user to your organization'
+              )}
+            >
+              <Description>
+                {tct('Requested by [inviterName]', {inviterName})}
+              </Description>
+            </Tooltip>
+          )
+        ) : (
+          <Tooltip title={t('This user has asked to join your organization.')}>
+            <JoinRequestIndicator size="small">{t('Join request')}</JoinRequestIndicator>
+          </Tooltip>
+        )}
+      </div>
+      <div>{roleName}</div>
+      <ButtonGroup>
+        <Confirm
+          onConfirm={sendInvites}
+          disableConfirmButton={!canSend}
+          message={
+            <React.Fragment>
+              {tct('Are you sure you want to invite [email] to your organization?', {
+                email,
+              })}
+              {headerInfo}
+            </React.Fragment>
+          }
+        >
+          <Button priority="primary" size="small" busy={inviteRequestBusy[id]}>
+            {t('Approve')}
+          </Button>
+        </Confirm>
+        <Button
+          size="small"
+          busy={inviteRequestBusy[id]}
+          onClick={() => onDeny(id, email)}
+        >
+          {t('Deny')}
+        </Button>
+      </ButtonGroup>
+    </StyledPanelItem>
+  );
+
+  return (
+    <InviteModalHook
+      willInvite
+      organization={organization}
+      onSendInvites={() => onApprove(id, email)}
+    >
+      {hookRenderer}
+    </InviteModalHook>
+  );
+};
+
+InviteRequestRow.propTypes = {
+  inviteRequest: PropTypes.shape({
+    email: PropTypes.string,
+    id: PropTypes.string,
+    inviterName: PropTypes.string,
+    inviteStatus: PropTypes.string,
+  }),
+  onApprove: PropTypes.func,
+  onDeny: PropTypes.func,
+  inviteRequestBusy: PropTypes.object,
+};
+
+const JoinRequestIndicator = styled(Tag)`
+  padding: ${space(0.5)} ${space(0.75)};
+  font-size: 10px;
+  text-transform: uppercase;
+`;
+
+const StyledPanelItem = styled(PanelItem)`
+  display: grid;
+  grid-template-columns: auto 140px max-content;
+  grid-gap: ${space(2)};
+  align-items: center;
+
+  @media (max-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: auto 100px max-content;
+  }
+`;
+
+const UserName = styled('div')`
+  font-size: ${p => p.theme.fontSizeLarge};
+  word-break: break-all;
+`;
+
+const Description = styled('div')`
+  color: ${p => p.theme.gray3};
+  font-size: 14px;
+`;
+
+const ButtonGroup = styled('div')`
+  display: inline-grid;
+  grid-template-columns: auto auto;
+  grid-gap: ${space(1)};
+`;
+
+export default InviteRequestRow;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
index 8870c25cb1..31135b4b8e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
@@ -1,14 +1,20 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import {Flex, Box} from 'grid-emotion';
 
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
-import Button from 'app/components/button';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import Button from 'app/components/button';
 import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import styled from 'react-emotion';
+import withApi from 'app/utils/withApi';
 
 class OrganizationAccessRequests extends React.Component {
   static propTypes = {
+    api: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    onUpdateRequestList: PropTypes.func.isRequired,
     requestList: PropTypes.arrayOf(
       PropTypes.shape({
         id: PropTypes.string.isRequired,
@@ -16,27 +22,63 @@ class OrganizationAccessRequests extends React.Component {
         team: SentryTypes.Team,
       })
     ),
-    accessRequestBusy: PropTypes.object,
-    onApprove: PropTypes.func.isRequired,
-    onDeny: PropTypes.func.isRequired,
   };
 
   static defaultProps = {
     requestList: [],
   };
 
+  state = {
+    accessRequestBusy: {},
+  };
+
+  handleAction = async ({id, isApproved, successMessage, errorMessage}) => {
+    const {api, orgId, onUpdateRequestList} = this.props;
+
+    this.setState(state => ({
+      accessRequestBusy: {...state.accessRequestBusy, [id]: true},
+    }));
+
+    try {
+      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {
+        method: 'PUT',
+        data: {isApproved},
+      });
+      onUpdateRequestList(id);
+      addSuccessMessage(successMessage);
+    } catch (err) {
+      addErrorMessage(errorMessage);
+      throw err;
+    }
+
+    this.setState(state => ({
+      accessRequestBusy: {...state.accessRequestBusy, [id]: false},
+    }));
+  };
+
   handleApprove = (id, e) => {
     e.stopPropagation();
-    this.props.onApprove(id);
+    this.handleAction({
+      id,
+      isApproved: true,
+      successMessage: t('Team request approved'),
+      errorMessage: t('Error approving team request'),
+    });
   };
 
   handleDeny = (id, e) => {
     e.stopPropagation();
-    this.props.onDeny(id);
+    this.handleAction({
+      id,
+      isApproved: false,
+      successMessage: t('Team request denied'),
+      errorMessage: t('Error denying team request'),
+    });
   };
 
   render() {
-    const {accessRequestBusy, requestList} = this.props;
+    const {requestList} = this.props;
+    const {accessRequestBusy} = this.state;
 
     if (!requestList || !requestList.length) {
       return null;
@@ -44,46 +86,39 @@ class OrganizationAccessRequests extends React.Component {
 
     return (
       <Panel>
-        <PanelHeader disablePadding>
-          <Flex>
-            <Box px={2} flex="1">
-              {t('Pending Access Requests')}
-            </Box>
-          </Flex>
-        </PanelHeader>
+        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>
 
         <PanelBody>
-          {requestList.map(({id, member, team}, i) => {
+          {requestList.map(({id, member, team}) => {
             const displayName =
               member.user &&
               (member.user.name || member.user.email || member.user.username);
             return (
-              <PanelItem p={0} key={id} align="center">
-                <Box p={2} flex="1">
+              <StyledPanelItem key={id}>
+                <div data-test-id="request-message">
                   {tct('[name] requests access to the [team] team.', {
                     name: <strong>{displayName}</strong>,
                     team: <strong>#{team.slug}</strong>,
                   })}
-                </Box>
-                <Box p={2}>
-                  <Button
-                    onClick={e => this.handleApprove(id, e)}
-                    busy={accessRequestBusy.get(id)}
+                </div>
+                <div>
+                  <StyledButton
                     priority="primary"
-                    style={{marginRight: 4}}
                     size="small"
+                    onClick={e => this.handleApprove(id, e)}
+                    busy={accessRequestBusy[id]}
                   >
                     {t('Approve')}
-                  </Button>
+                  </StyledButton>
                   <Button
-                    busy={accessRequestBusy.get(id)}
+                    busy={accessRequestBusy[id]}
                     onClick={e => this.handleDeny(id, e)}
                     size="small"
                   >
                     {t('Deny')}
                   </Button>
-                </Box>
-              </PanelItem>
+                </div>
+              </StyledPanelItem>
             );
           })}
         </PanelBody>
@@ -92,4 +127,15 @@ class OrganizationAccessRequests extends React.Component {
   }
 }
 
-export default OrganizationAccessRequests;
+const StyledPanelItem = styled(PanelItem)`
+  display: grid;
+  grid-template-columns: auto max-content;
+  grid-gap: ${space(2)};
+  align-items: center;
+`;
+
+const StyledButton = styled(Button)`
+  margin-right: ${space(1)};
+`;
+
+export default withApi(OrganizationAccessRequests);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
new file mode 100644
index 0000000000..2dbfe771ae
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersWrapper.tsx
@@ -0,0 +1,199 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {openInviteMembersModal} from 'app/actionCreators/modal';
+import {OrganizationDetailed} from 'app/types';
+import {Panel} from 'app/components/panels';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import Badge from 'app/components/badge';
+import Button from 'app/components/button';
+import InlineSvg from 'app/components/inlineSvg';
+import ListLink from 'app/components/links/listLink';
+import NavTabs from 'app/components/navTabs';
+import routeTitleGen from 'app/utils/routeTitle';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = AsyncView['props'] & {
+  children?: any;
+  organization: OrganizationDetailed;
+};
+
+class OrganizationMembersWrapper extends AsyncView<Props> {
+  getEndpoints(): [string, string][] {
+    const {orgId} = this.props.params;
+
+    return [
+      ['inviteRequests', `/organizations/${orgId}/invite-requests/`],
+      ['requestList', `/organizations/${orgId}/access-requests/`],
+    ];
+  }
+
+  getTitle() {
+    const {orgId} = this.props.params;
+    return routeTitleGen(t('Members'), orgId, false);
+  }
+
+  get hasExperiment() {
+    const {organization} = this.props;
+
+    if (!organization || !organization.experiments) {
+      return false;
+    }
+    return (
+      organization.experiments.JoinRequestExperiment === 1 ||
+      organization.experiments.InviteRequestExperiment === 1
+    );
+  }
+
+  get hasWriteAccess() {
+    const {organization} = this.props;
+    if (!organization || !organization.access) {
+      return false;
+    }
+    return organization.access.includes('member:write');
+  }
+
+  get showInviteRequests() {
+    return this.hasWriteAccess && this.hasExperiment;
+  }
+
+  get showNavTabs() {
+    const {requestList} = this.state;
+
+    // show the requests tab if there are pending team requests,
+    // or if the organization is exposed to the experiment and
+    // the user has access to approve or deny requests
+    return requestList.length > 0 || this.showInviteRequests;
+  }
+
+  get requestCount() {
+    const {requestList, inviteRequests} = this.state;
+    let count = requestList.length;
+
+    // if the user can't see the invite requests panel,
+    // exclude those requests from the total count
+    if (this.showInviteRequests) {
+      count += inviteRequests.length;
+    }
+    return count ? count.toString() : null;
+  }
+
+  updateRequestList = (id: string) =>
+    this.setState(state => ({
+      requestList: state.requestList.filter(({id: existingId}) => existingId !== id),
+    }));
+
+  updateInviteRequests = (id: string) =>
+    this.setState(state => ({
+      inviteRequests: state.inviteRequests.filter(
+        ({id: existingId}) => existingId !== id
+      ),
+    }));
+
+  renderBody() {
+    const {
+      children,
+      params: {orgId},
+    } = this.props;
+    const {requestList, inviteRequests} = this.state;
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title="Members" />
+
+        <StyledPanel>
+          <InlineSvg src="icon-mail" size="36px" />
+          <TextContainer>
+            <Heading>{t('Invite new members')}</Heading>
+            <SubText>
+              {t('Invite new members by email to join your organization')}
+            </SubText>
+          </TextContainer>
+          <Button
+            priority="primary"
+            size="small"
+            onClick={openInviteMembersModal}
+            disabled={!this.hasWriteAccess}
+            title={
+              !this.hasWriteAccess
+                ? t('You do not have enough permission to add new members')
+                : undefined
+            }
+          >
+            {t('Invite Members')}
+          </Button>
+        </StyledPanel>
+
+        {this.showNavTabs && (
+          <NavTabs underlined>
+            <ListLink
+              to={`/settings/${orgId}/members/`}
+              isActive={() => !location.pathname.includes('/requests/')}
+              data-test-id="members-tab"
+            >
+              {t('Members')}
+            </ListLink>
+            <ListLink
+              to={`/settings/${orgId}/members/requests/`}
+              isActive={() => location.pathname.includes('/requests/')}
+              data-test-id="requests-tab"
+            >
+              {t('Requests')}
+            </ListLink>
+            {this.requestCount && <StyledBadge text={this.requestCount} />}
+          </NavTabs>
+        )}
+
+        {children &&
+          React.cloneElement(children, {
+            requestList,
+            inviteRequests,
+            onUpdateInviteRequests: this.updateInviteRequests,
+            onUpdateRequestList: this.updateRequestList,
+            showInviteRequests: this.showInviteRequests,
+          })}
+      </React.Fragment>
+    );
+  }
+}
+
+const StyledPanel = styled(Panel)`
+  padding: 18px;
+  margin-top: -14px;
+  margin-bottom: 40px;
+  display: grid;
+  grid-template-columns: max-content auto max-content;
+  grid-gap: ${space(3)};
+  align-items: center;
+  align-content: center;
+`;
+
+const TextContainer = styled('div')`
+  display: inline-grid;
+  grid-gap: ${space(1)};
+`;
+
+const Heading = styled('h1')`
+  margin: 0;
+  font-weight: 400;
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+`;
+
+const SubText = styled('p')`
+  margin: 0;
+  color: ${p => p.theme.gray3};
+  font-size: 15px;
+`;
+
+const StyledBadge = styled(Badge)`
+  margin-left: -12px;
+
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    margin-left: -6px;
+  }
+`;
+
+export default withOrganization(OrganizationMembersWrapper);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
new file mode 100644
index 0000000000..4b34026b57
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationRequestsView.tsx
@@ -0,0 +1,156 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import * as ReactRouter from 'react-router';
+
+import {AccessRequest, Member, Organization} from 'app/types';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {t, tct} from 'app/locale';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+import InviteRequestRow from './inviteRequestRow';
+import OrganizationAccessRequests from './organizationAccessRequests';
+
+type Props = {
+  api: any;
+  params: any;
+  router: ReactRouter.InjectedRouter;
+  organization: Organization;
+  requestList: AccessRequest[];
+  inviteRequests: Member[];
+  onUpdateInviteRequests: (id: string) => void;
+  onUpdateRequestList: (id: string) => void;
+  showInviteRequests: boolean;
+};
+
+type State = {
+  inviteRequestBusy: {[key: string]: boolean};
+};
+
+class OrganizationRequestsView extends React.Component<Props, State> {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+    requestList: PropTypes.array.isRequired,
+    inviteRequests: PropTypes.array.isRequired,
+    onUpdateInviteRequests: PropTypes.func.isRequired,
+    onUpdateRequestList: PropTypes.func.isRequired,
+    showInviteRequests: PropTypes.bool.isRequired,
+  };
+
+  static defaultProps = {
+    inviteRequests: [],
+  };
+
+  state: State = {
+    inviteRequestBusy: {},
+  };
+
+  componentWillMount() {
+    this.handleRedirect();
+  }
+
+  componentDidUpdate() {
+    this.handleRedirect();
+  }
+
+  handleRedirect() {
+    const {router, params, requestList, showInviteRequests} = this.props;
+
+    // redirect to the members view if the user cannot see
+    // the invite requests panel and all of the team requests
+    // have been approved or denied
+    if (showInviteRequests || requestList.length) {
+      return null;
+    }
+    return router.push(`/settings/${params.orgId}/members/`);
+  }
+
+  handleAction = async ({id, method, data, successMessage, errorMessage}) => {
+    const {api, params, onUpdateInviteRequests} = this.props;
+
+    this.setState(state => ({
+      inviteRequestBusy: {...state.inviteRequestBusy, [id]: true},
+    }));
+
+    try {
+      await api.requestPromise(`/organizations/${params.orgId}/invite-requests/${id}/`, {
+        method,
+        data,
+      });
+      onUpdateInviteRequests(id);
+      addSuccessMessage(successMessage);
+    } catch (err) {
+      addErrorMessage(errorMessage);
+      throw err;
+    }
+
+    this.setState(state => ({
+      inviteRequestBusy: {...state.inviteRequestBusy, [id]: false},
+    }));
+  };
+
+  handleApprove = (id: string, email: string) =>
+    this.handleAction({
+      id,
+      method: 'PUT',
+      data: {approve: 1},
+      successMessage: tct('[email] has been invited', {email}),
+      errorMessage: tct('Error inviting [email]', {email}),
+    });
+
+  handleDeny = (id: string, email: string) =>
+    this.handleAction({
+      id,
+      method: 'DELETE',
+      data: {},
+      successMessage: tct('Invite request for [email] denied', {email}),
+      errorMessage: tct('Error denying invite request for [email]', {email}),
+    });
+
+  render() {
+    const {
+      params,
+      requestList,
+      showInviteRequests,
+      inviteRequests,
+      onUpdateRequestList,
+      organization,
+    } = this.props;
+    const {inviteRequestBusy} = this.state;
+
+    return (
+      <React.Fragment>
+        {showInviteRequests && (
+          <Panel>
+            <PanelHeader>{t('Pending Invite Requests')}</PanelHeader>
+            <PanelBody>
+              {inviteRequests.map(inviteRequest => (
+                <InviteRequestRow
+                  key={inviteRequest.id}
+                  organization={organization}
+                  inviteRequest={inviteRequest}
+                  inviteRequestBusy={inviteRequestBusy}
+                  onApprove={this.handleApprove}
+                  onDeny={this.handleDeny}
+                />
+              ))}
+              {inviteRequests.length === 0 && (
+                <EmptyMessage>{t('No requests found.')}</EmptyMessage>
+              )}
+            </PanelBody>
+          </Panel>
+        )}
+
+        <OrganizationAccessRequests
+          orgId={params.orgId}
+          requestList={requestList}
+          onUpdateRequestList={onUpdateRequestList}
+        />
+      </React.Fragment>
+    );
+  }
+}
+
+export default withApi(withOrganization(OrganizationRequestsView));
diff --git a/tests/js/sentry-test/fixtures/accessRequest.js b/tests/js/sentry-test/fixtures/accessRequest.js
new file mode 100644
index 0000000000..102359a2ee
--- /dev/null
+++ b/tests/js/sentry-test/fixtures/accessRequest.js
@@ -0,0 +1,11 @@
+import {Team} from './team';
+import {Member} from './member';
+
+export function AccessRequest(params = {}) {
+  return {
+    id: '123',
+    member: Member(),
+    team: Team(),
+    ...params,
+  };
+}
diff --git a/tests/js/sentry-test/fixtures/member.js b/tests/js/sentry-test/fixtures/member.js
index 6f1498f7e8..efbc89e779 100644
--- a/tests/js/sentry-test/fixtures/member.js
+++ b/tests/js/sentry-test/fixtures/member.js
@@ -13,6 +13,7 @@ export function Member(params = {}) {
       'sso:linked': false,
     },
     user: User(),
+    inviteStatus: 'approved',
     ...params,
   };
 }
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationAccessRequests.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationAccessRequests.spec.jsx.snap
deleted file mode 100644
index 3330360aa4..0000000000
--- a/tests/js/spec/views/settings/__snapshots__/organizationAccessRequests.spec.jsx.snap
+++ /dev/null
@@ -1,88 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`OrganizationAccessRequests renders empty 1`] = `""`;
-
-exports[`OrganizationAccessRequests renders list 1`] = `
-<Panel>
-  <PanelHeader
-    disablePadding={true}
-  >
-    <Flex>
-      <Box
-        flex="1"
-        px={2}
-      >
-        Pending Access Requests
-      </Box>
-    </Flex>
-  </PanelHeader>
-  <PanelBody
-    direction="column"
-    disablePadding={true}
-    flex={false}
-  >
-    <PanelItem
-      align="center"
-      key="id"
-      p={0}
-    >
-      <Box
-        flex="1"
-        p={2}
-      >
-        <span
-          key="5"
-        >
-          <strong
-            key="0"
-          >
-            sentry@test.com
-          </strong>
-          <span
-            key="1"
-          >
-             requests access to the 
-          </span>
-          <strong
-            key="2"
-          >
-            #
-            team-slug
-          </strong>
-          <span
-            key="3"
-          >
-             team.
-          </span>
-        </span>
-      </Box>
-      <Box
-        p={2}
-      >
-        <Button
-          align="center"
-          disabled={false}
-          onClick={[Function]}
-          priority="primary"
-          size="small"
-          style={
-            Object {
-              "marginRight": 4,
-            }
-          }
-        >
-          Approve
-        </Button>
-        <Button
-          align="center"
-          disabled={false}
-          onClick={[Function]}
-          size="small"
-        >
-          Deny
-        </Button>
-      </Box>
-    </PanelItem>
-  </PanelBody>
-</Panel>
-`;
diff --git a/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx b/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx
deleted file mode 100644
index ff8c4a72eb..0000000000
--- a/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx
+++ /dev/null
@@ -1,120 +0,0 @@
-import React from 'react';
-import {mountWithTheme, shallow} from 'sentry-test/enzyme';
-
-import OrganizationAccessRequests from 'app/views/settings/organizationMembers/organizationAccessRequests';
-
-describe('OrganizationAccessRequests', function() {
-  beforeEach(function() {});
-
-  it('renders empty', function() {
-    const wrapper = shallow(
-      <OrganizationAccessRequests
-        params={{apiKey: 1, orgId: 'org-slug'}}
-        onApprove={() => {}}
-        onDeny={() => {}}
-      />
-    );
-    expect(wrapper).toMatchSnapshot();
-  });
-
-  it('renders list', function() {
-    const wrapper = shallow(
-      <OrganizationAccessRequests
-        params={{apiKey: 1, orgId: 'org-slug'}}
-        accessRequestBusy={new Map()}
-        requestList={[
-          {
-            id: 'id',
-            member: {
-              id: 'memberid',
-              email: '',
-              name: '',
-              role: '',
-              roleName: '',
-              user: {
-                id: '',
-                name: 'sentry@test.com',
-              },
-            },
-            team: TestStubs.Team(),
-          },
-        ]}
-        onApprove={() => {}}
-        onDeny={() => {}}
-      />
-    );
-    expect(wrapper).toMatchSnapshot();
-  });
-
-  it('can approve', function() {
-    const mock = jest.fn();
-    const wrapper = mountWithTheme(
-      <OrganizationAccessRequests
-        params={{apiKey: 1, orgId: 'org-slug'}}
-        accessRequestBusy={new Map()}
-        requestList={[
-          {
-            id: 'id',
-            member: {
-              id: 'memberid',
-              email: '',
-              name: '',
-              role: '',
-              roleName: '',
-              user: {
-                id: '',
-                name: 'sentry@test.com',
-              },
-            },
-            team: TestStubs.Team(),
-          },
-        ]}
-        onApprove={mock}
-        onDeny={() => {}}
-      />,
-      TestStubs.routerContext()
-    );
-
-    wrapper
-      .find('Button')
-      .first()
-      .simulate('click');
-    expect(mock).toHaveBeenCalled();
-  });
-
-  it('can deny', function() {
-    const mock = jest.fn();
-    const wrapper = mountWithTheme(
-      <OrganizationAccessRequests
-        params={{apiKey: 1, orgId: 'org-slug'}}
-        accessRequestBusy={new Map()}
-        requestList={[
-          {
-            id: 'id',
-            member: {
-              id: 'memberid',
-              email: '',
-              name: '',
-              role: '',
-              roleName: '',
-              user: {
-                id: '',
-                name: 'sentry@test.com',
-              },
-            },
-            team: TestStubs.Team(),
-          },
-        ]}
-        onApprove={() => {}}
-        onDeny={mock}
-      />,
-      TestStubs.routerContext()
-    );
-
-    wrapper
-      .find('Button')
-      .last()
-      .simulate('click');
-    expect(mock).toHaveBeenCalled();
-  });
-});
diff --git a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
index 285d667205..590070b837 100644
--- a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
@@ -3,7 +3,6 @@ import {browserHistory} from 'react-router';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {Client} from 'app/api';
-import {openInviteMembersModal} from 'app/actionCreators/modal';
 import ConfigStore from 'app/stores/configStore';
 import OrganizationMembers from 'app/views/settings/organizationMembers';
 import OrganizationsStore from 'app/stores/organizationsStore';
@@ -11,9 +10,6 @@ import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 
 jest.mock('app/api');
 jest.mock('app/actionCreators/indicator');
-jest.mock('app/actionCreators/modal', () => ({
-  openInviteMembersModal: jest.fn(),
-}));
 
 describe('OrganizationMembers', function() {
   const members = TestStubs.Members();
@@ -91,24 +87,6 @@ describe('OrganizationMembers', function() {
     OrganizationsStore.load([organization]);
   });
 
-  it('can invite member with access', function() {
-    const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
-      TestStubs.routerContext([{organization}])
-    );
-
-    const inviteButton = wrapper.find('StyledButton[aria-label="Invite Members"]');
-    expect(inviteButton.prop('disabled')).toBe(false);
-    inviteButton.simulate('click');
-
-    expect(openInviteMembersModal).toHaveBeenCalled();
-  });
-
   it('can remove a member', async function() {
     const deleteMock = MockApiClient.addMockResponse({
       url: `/organizations/org-id/members/${members[0].id}/`,
@@ -318,73 +296,6 @@ describe('OrganizationMembers', function() {
     expect(inviteMock).toHaveBeenCalled();
   });
 
-  it('can approve pending access request', async function() {
-    const approveMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-id/access-requests/pending-id/',
-      method: 'PUT',
-    });
-    const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
-      TestStubs.routerContext()
-    );
-
-    expect(approveMock).not.toHaveBeenCalled();
-
-    wrapper
-      .find('OrganizationAccessRequests Button[priority="primary"]')
-      .simulate('click');
-
-    await tick();
-
-    expect(approveMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: {
-          isApproved: true,
-        },
-      })
-    );
-  });
-
-  it('can deny pending access request', async function() {
-    const denyMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-id/access-requests/pending-id/',
-      method: 'PUT',
-    });
-    const wrapper = mountWithTheme(
-      <OrganizationMembers
-        {...defaultProps}
-        params={{
-          orgId: 'org-id',
-        }}
-      />,
-      TestStubs.routerContext()
-    );
-
-    expect(denyMock).not.toHaveBeenCalled();
-
-    wrapper
-      .find('OrganizationAccessRequests Button')
-      .at(1)
-      .simulate('click');
-
-    await tick();
-
-    expect(denyMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: {
-          isApproved: false,
-        },
-      })
-    );
-  });
-
   it('can search organization members', async function() {
     const searchMock = MockApiClient.addMockResponse({
       url: '/organizations/org-id/members/',
diff --git a/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx b/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
new file mode 100644
index 0000000000..c45ee10a56
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationMembers/inviteRequestRow.spec.jsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import InviteRequestRow from 'app/views/settings/organizationMembers/inviteRequestRow';
+
+describe('InviteRequestRow', function() {
+  const orgId = 'org-slug';
+  const inviteRequestBusy = new Map();
+
+  const inviteRequest = TestStubs.Member({
+    user: null,
+    inviterName: TestStubs.User().name,
+    inviteStatus: 'requested_to_be_invited',
+    roleName: 'member',
+  });
+
+  const joinRequest = TestStubs.Member({
+    user: null,
+    inviteStatus: 'requested_to_join',
+    roleName: 'member',
+  });
+
+  it('renders request to be invited', function() {
+    const wrapper = mountWithTheme(
+      <InviteRequestRow
+        orgId={orgId}
+        inviteRequest={inviteRequest}
+        inviteRequestBusy={inviteRequestBusy}
+      />
+    );
+
+    expect(wrapper.find('UserName').text()).toBe(inviteRequest.email);
+    expect(
+      wrapper
+        .find('Description')
+        .text()
+        .includes(inviteRequest.inviterName)
+    ).toBe(true);
+  });
+
+  it('renders request to join', function() {
+    const wrapper = mountWithTheme(
+      <InviteRequestRow
+        orgId={orgId}
+        inviteRequest={joinRequest}
+        inviteRequestBusy={inviteRequestBusy}
+      />
+    );
+
+    expect(wrapper.find('UserName').text()).toBe(joinRequest.email);
+    expect(wrapper.find('JoinRequestIndicator').exists()).toBe(true);
+  });
+
+  it('can approve invite request', function() {
+    const mockApprove = jest.fn();
+    const mockDeny = jest.fn();
+
+    const wrapper = mountWithTheme(
+      <InviteRequestRow
+        orgId={orgId}
+        inviteRequest={inviteRequest}
+        inviteRequestBusy={inviteRequestBusy}
+        onApprove={mockApprove}
+        onDeny={mockDeny}
+      />
+    );
+
+    wrapper.find('button[aria-label="Approve"]').simulate('click');
+    wrapper.find('button[aria-label="Confirm"]').simulate('click');
+    expect(mockApprove).toHaveBeenCalledWith(inviteRequest.id, inviteRequest.email);
+    expect(mockDeny).not.toHaveBeenCalled();
+  });
+
+  it('can deny invite request', function() {
+    const mockApprove = jest.fn();
+
+    const mockDeny = jest.fn();
+    const wrapper = mountWithTheme(
+      <InviteRequestRow
+        orgId={orgId}
+        inviteRequest={inviteRequest}
+        inviteRequestBusy={inviteRequestBusy}
+        onApprove={mockApprove}
+        onDeny={mockDeny}
+      />
+    );
+
+    wrapper.find('button[aria-label="Deny"]').simulate('click');
+    expect(mockDeny).toHaveBeenCalledWith(inviteRequest.id, inviteRequest.email);
+    expect(mockApprove).not.toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
new file mode 100644
index 0000000000..7cf8cf8890
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
@@ -0,0 +1,104 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import OrganizationAccessRequests from 'app/views/settings/organizationMembers/organizationAccessRequests';
+
+describe('OrganizationAccessRequests', function() {
+  const orgId = 'org-slug';
+  const accessRequest = TestStubs.AccessRequest();
+  const requestList = [accessRequest];
+
+  it('renders empty', function() {
+    const wrapper = mountWithTheme(
+      <OrganizationAccessRequests
+        orgId={orgId}
+        requestList={[]}
+        onUpdateRequestList={() => {}}
+      />
+    );
+
+    expect(wrapper.find('OrganizationAccessRequests').exists()).toBe(true);
+  });
+
+  it('renders list', function() {
+    const wrapper = mountWithTheme(
+      <OrganizationAccessRequests
+        orgId={orgId}
+        requestList={requestList}
+        onUpdateRequestList={() => {}}
+      />
+    );
+
+    expect(wrapper.find('PanelHeader').text()).toBe('Pending Team Requests');
+    expect(
+      wrapper
+        .find('StyledPanelItem')
+        .text()
+        .includes(
+          `${accessRequest.member.user.name} requests access to the #${
+            accessRequest.team.slug
+          } team`
+        )
+    ).toBe(true);
+  });
+
+  it('can approve', async function() {
+    const onUpdateRequestListMock = jest.fn();
+    const approveMock = MockApiClient.addMockResponse({
+      url: `/organizations/${orgId}/access-requests/${accessRequest.id}/`,
+      method: 'PUT',
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationAccessRequests
+        orgId={orgId}
+        requestList={requestList}
+        onUpdateRequestList={onUpdateRequestListMock}
+      />
+    );
+
+    wrapper.find('button[aria-label="Approve"]').simulate('click');
+
+    await tick();
+
+    expect(approveMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: {
+          isApproved: true,
+        },
+      })
+    );
+    expect(onUpdateRequestListMock).toHaveBeenCalledWith(accessRequest.id);
+  });
+
+  it('can deny', async function() {
+    const onUpdateRequestListMock = jest.fn();
+    const denyMock = MockApiClient.addMockResponse({
+      url: `/organizations/${orgId}/access-requests/${accessRequest.id}/`,
+      method: 'PUT',
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationAccessRequests
+        orgId={orgId}
+        requestList={requestList}
+        onUpdateRequestList={onUpdateRequestListMock}
+      />
+    );
+
+    wrapper.find('button[aria-label="Deny"]').simulate('click');
+
+    await tick();
+
+    expect(denyMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: {
+          isApproved: false,
+        },
+      })
+    );
+    expect(onUpdateRequestListMock).toHaveBeenCalledWith(accessRequest.id);
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
new file mode 100644
index 0000000000..1ad300fed0
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMembersWrapper.spec.jsx
@@ -0,0 +1,236 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import {openInviteMembersModal} from 'app/actionCreators/modal';
+import OrganizationMembers from 'app/views/settings/organizationMembers';
+import OrganizationMembersWrapper from 'app/views/settings/organizationMembers/organizationMembersWrapper';
+
+jest.mock('app/actionCreators/modal', () => ({
+  openInviteMembersModal: jest.fn(),
+}));
+
+describe('OrganizationMembersWrapper', function() {
+  const member = TestStubs.Member();
+  const organization = TestStubs.Organization({
+    access: ['member:admin', 'org:admin', 'member:write'],
+    status: {
+      id: 'active',
+    },
+  });
+
+  const defaultProps = {
+    location: {query: {}},
+    params: {orgId: organization.slug},
+  };
+
+  const inviteRequest = TestStubs.Member({
+    user: null,
+    inviterName: TestStubs.User().name,
+    inviteStatus: 'requested_to_be_invited',
+  });
+
+  const joinRequest = TestStubs.Member({
+    user: null,
+    inviteStatus: 'requested_to_join',
+  });
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/members/',
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/auth-provider/',
+      method: 'GET',
+      body: {},
+    });
+  });
+
+  it('does not render requests tab', function() {
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={organization} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(false);
+  });
+
+  it('does not render requests tab without access', function() {
+    const org = TestStubs.Organization({
+      experiments: {InviteRequestExperiment: 1},
+      access: [],
+      status: {
+        id: 'active',
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(false);
+  });
+
+  it('renders requests tab with InviteRequestExperiment', function() {
+    const org = TestStubs.Organization({
+      experiments: {InviteRequestExperiment: 1},
+      access: ['member:admin', 'org:admin', 'member:write'],
+      status: {
+        id: 'active',
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [inviteRequest, joinRequest],
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="2"]').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+  });
+
+  it('renders requests tab with JoinRequestExperiment', function() {
+    const org = TestStubs.Organization({
+      experiments: {JoinRequestExperiment: 1},
+      access: ['member:admin', 'org:admin', 'member:write'],
+      status: {
+        id: 'active',
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge').exists()).toBe(false);
+    expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+  });
+
+  it('renders requests tab with team requests', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [TestStubs.AccessRequest()],
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={organization} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+  });
+
+  it('renders requests tab with team requests and no access', function() {
+    const org = TestStubs.Organization({
+      access: [],
+      status: {
+        id: 'active',
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [TestStubs.AccessRequest()],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [inviteRequest, joinRequest],
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="members-tab"]').exists()).toBe(true);
+    expect(wrapper.find('ListLink[data-test-id="requests-tab"]').exists()).toBe(true);
+  });
+
+  it('can invite member', function() {
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={organization} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    const inviteButton = wrapper.find('StyledButton[aria-label="Invite Members"]');
+    expect(inviteButton.prop('disabled')).toBe(false);
+    inviteButton.simulate('click');
+
+    expect(openInviteMembersModal).toHaveBeenCalled();
+  });
+
+  it('cannot invite without permissions', function() {
+    const org = TestStubs.Organization({
+      access: [],
+      status: {
+        id: 'active',
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps} />,
+      TestStubs.routerContext()
+    );
+
+    const inviteButton = wrapper.find('StyledButton[aria-label="Invite Members"]');
+    expect(inviteButton.prop('disabled')).toBe(true);
+  });
+
+  it('renders member list', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/members/',
+      method: 'GET',
+      body: [member],
+    });
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={organization} {...defaultProps}>
+        <OrganizationMembers {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('OrganizationMembersView').exists()).toBe(true);
+    expect(
+      wrapper
+        .find('PanelHeader')
+        .text()
+        .includes('Members')
+    ).toBe(true);
+
+    expect(
+      wrapper
+        .find('PanelItem')
+        .text()
+        .includes(member.name)
+    ).toBe(true);
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
new file mode 100644
index 0000000000..5f0f84d3d8
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationMembers/organizationRequestsView.spec.jsx
@@ -0,0 +1,286 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import OrganizationRequestsView from 'app/views/settings/organizationMembers/organizationRequestsView';
+import OrganizationMembersWrapper from 'app/views/settings/organizationMembers/organizationMembersWrapper';
+
+describe('OrganizationRequestsView', function() {
+  const organization = TestStubs.Organization({
+    access: ['member:admin', 'org:admin', 'member:write'],
+    status: {
+      id: 'active',
+    },
+  });
+
+  const defaultProps = {
+    location: {query: {}},
+    params: {orgId: organization.slug},
+    router: TestStubs.router(),
+  };
+
+  const accessRequest = TestStubs.AccessRequest();
+  const inviteRequest = TestStubs.Member({
+    id: '123',
+    user: null,
+    inviteStatus: 'requested_to_be_invited',
+    inviter: TestStubs.User(),
+  });
+  const joinRequest = TestStubs.Member({
+    id: '456',
+    user: null,
+    email: 'test@gmail.com',
+    inviteStatus: 'requested_to_join',
+  });
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: `/organizations/org-slug/access-requests/${accessRequest.id}/`,
+      method: 'PUT',
+    });
+  });
+
+  it('renders empty', function() {
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={organization} {...defaultProps}>
+        <OrganizationRequestsView organization={organization} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('PanelHeader').exists()).toBe(false);
+  });
+
+  it('can approve access request and update', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [accessRequest],
+    });
+
+    const org = TestStubs.Organization({
+      access: ['team:write'],
+      status: {
+        id: 'active',
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps}>
+        <OrganizationRequestsView organization={org} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('OrganizationAccessRequests').exists()).toBe(true);
+    expect(
+      wrapper
+        .find('[data-test-id="request-message"]')
+        .text()
+        .includes(accessRequest.member.user.name)
+    ).toBe(true);
+    wrapper.find('button[aria-label="Approve"]').simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('[data-test-id="request-message"]').exists()).toBe(false);
+    expect(wrapper.find('NavTabs').exists()).toBe(false);
+  });
+
+  it('can deny access request and update', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [accessRequest],
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={organization} {...defaultProps}>
+        <OrganizationRequestsView organization={organization} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('OrganizationAccessRequests').exists()).toBe(true);
+    expect(
+      wrapper
+        .find('[data-test-id="request-message"]')
+        .text()
+        .includes(accessRequest.member.user.name)
+    ).toBe(true);
+    wrapper.find('button[aria-label="Deny"]').simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('[data-test-id="request-message"]').exists()).toBe(false);
+    expect(wrapper.find('NavTabs').exists()).toBe(false);
+  });
+
+  it('does not render invite requests without experiment', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [accessRequest],
+    });
+
+    const org = TestStubs.Organization({
+      experiments: {InviteRequestExperiment: 0},
+      access: ['member:admin', 'org:admin', 'member:write'],
+      status: {
+        id: 'active',
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps}>
+        <OrganizationRequestsView organization={org} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+  });
+
+  it('does not render invite requests without access', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [inviteRequest],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/access-requests/',
+      method: 'GET',
+      body: [accessRequest],
+    });
+
+    const org = TestStubs.Organization({
+      experiments: {InviteRequestExperiment: 1},
+      access: [],
+      status: {
+        id: 'active',
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps}>
+        <OrganizationRequestsView organization={org} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+  });
+
+  it('can approve invite request and update', async function() {
+    const org = TestStubs.Organization({
+      experiments: {InviteRequestExperiment: 1},
+      access: ['member:admin', 'org:admin', 'member:write'],
+      status: {
+        id: 'active',
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [inviteRequest],
+    });
+    MockApiClient.addMockResponse({
+      url: `/organizations/org-slug/invite-requests/${inviteRequest.id}/`,
+      method: 'PUT',
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps}>
+        <OrganizationRequestsView organization={org} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('InviteRequestRow').exists()).toBe(true);
+
+    expect(
+      wrapper
+        .find('PanelHeader')
+        .text()
+        .includes('Pending Invite Requests')
+    ).toBe(true);
+
+    wrapper.find('button[aria-label="Approve"]').simulate('click');
+    wrapper.find('button[aria-label="Confirm"]').simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge').exists()).toBe(false);
+    expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+  });
+
+  it('can deny invite request and update', async function() {
+    const org = TestStubs.Organization({
+      experiments: {JoinRequestExperiment: 1},
+      access: ['member:admin', 'org:admin', 'member:write'],
+      status: {
+        id: 'active',
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/invite-requests/',
+      method: 'GET',
+      body: [joinRequest],
+    });
+    MockApiClient.addMockResponse({
+      url: `/organizations/org-slug/invite-requests/${joinRequest.id}/`,
+      method: 'DELETE',
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationMembersWrapper organization={org} {...defaultProps}>
+        <OrganizationRequestsView organization={org} {...defaultProps} />
+      </OrganizationMembersWrapper>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge[text="1"]').exists()).toBe(true);
+    expect(wrapper.find('InviteRequestRow').exists()).toBe(true);
+
+    expect(
+      wrapper
+        .find('PanelHeader')
+        .text()
+        .includes('Pending Invite Requests')
+    ).toBe(true);
+
+    wrapper.find('button[aria-label="Deny"]').simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('NavTabs').exists()).toBe(true);
+    expect(wrapper.find('Badge').exists()).toBe(false);
+    expect(wrapper.find('InviteRequestRow').exists()).toBe(false);
+  });
+});
