commit 092d053e03cbec62b4e131c26f26bb811b8c4024
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Nov 23 16:14:47 2016 -0800

    api: remove a needless query/cache lookup from common store path (#4596)
    
    * api: remove a needless query/cache lookup from common store path
    
    We are needlessly fetching a duplicate Project id when we only need to
    check if the ids mismatch. In the historical path, we then choose to
    explicitly resolve the object. This isn't more work since we didn't have
    a project id within the url to begin with. Now both paths do same amount
    of I/O.
    
    * rename function and vars

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 799c6b166d..e54bcc2e08 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -32,7 +32,7 @@ from sentry.constants import (
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.csp import Csp
 from sentry.event_manager import EventManager
-from sentry.models import EventError, Project, ProjectKey, TagKey, TagValue
+from sentry.models import EventError, ProjectKey, TagKey, TagValue
 from sentry.tasks.store import preprocess_event
 from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
@@ -210,7 +210,7 @@ class ClientApiHelper(object):
         """
         return origin_from_request(request)
 
-    def project_from_auth(self, auth):
+    def project_id_from_auth(self, auth):
         if not auth.public_key:
             raise APIUnauthorized('Invalid api key')
 
@@ -235,7 +235,7 @@ class ClientApiHelper(object):
         if not pk.roles.store:
             raise APIUnauthorized('Key does not allow event storage access')
 
-        return Project.objects.get_from_cache(id=pk.project_id)
+        return pk.project_id
 
     def decode_data(self, encoded_data):
         try:
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 2d61eaf83c..e5676f5a68 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -184,15 +184,13 @@ class APIView(BaseView):
         else:
             auth = self._parse_header(request, helper, project)
 
-            project_ = helper.project_from_auth(auth)
+            project_id = helper.project_id_from_auth(auth)
 
             # Legacy API was /api/store/ and the project ID was only available elsewhere
             if not project:
-                if not project_:
-                    raise APIError('Unable to identify project')
-                project = project_
+                project = Project.objects.get_from_cache(id=project_id)
                 helper.context.bind_project(project)
-            elif project_ != project:
+            elif project_id != project.id:
                 raise APIError('Two different projects were specified')
 
             helper.context.bind_auth(auth)
@@ -468,8 +466,8 @@ class CspReportView(StoreView):
         # `sentry_version` to be set in querystring
         auth = helper.auth_from_request(request)
 
-        project_ = helper.project_from_auth(auth)
-        if project_ != project:
+        project_id = helper.project_id_from_auth(auth)
+        if project_id != project.id:
             raise APIError('Two different projects were specified')
 
         helper.context.bind_auth(auth)
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index ad76718b89..abe55a9958 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -79,26 +79,26 @@ class AuthFromRequestTest(BaseAPITest):
             self.helper.auth_from_request(request)
 
 
-class ProjectFromAuthTest(BaseAPITest):
+class ProjectIdFromAuthTest(BaseAPITest):
     def test_invalid_if_missing_key(self):
-        self.assertRaises(APIUnauthorized, self.helper.project_from_auth, Auth({}))
+        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, Auth({}))
 
     def test_valid_with_key(self):
         auth = Auth({'sentry_key': self.pk.public_key})
-        result = self.helper.project_from_auth(auth)
-        self.assertEquals(result, self.project)
+        result = self.helper.project_id_from_auth(auth)
+        self.assertEquals(result, self.project.id)
 
     def test_invalid_key(self):
         auth = Auth({'sentry_key': 'z'})
-        self.assertRaises(APIUnauthorized, self.helper.project_from_auth, auth)
+        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
 
     def test_invalid_secret(self):
         auth = Auth({'sentry_key': self.pk.public_key, 'sentry_secret': 'z'})
-        self.assertRaises(APIUnauthorized, self.helper.project_from_auth, auth)
+        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
 
     def test_nonascii_key(self):
         auth = Auth({'sentry_key': '\xc3\xbc'})
-        self.assertRaises(APIUnauthorized, self.helper.project_from_auth, auth)
+        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
 
 
 class ProcessFingerprintTest(BaseAPITest):
