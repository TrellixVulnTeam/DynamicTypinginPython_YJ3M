commit 05def2c2ace675a47fc255b96f853992707397e9
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 4 01:03:59 2014 -0700

    Support native deflate and gzip encodings

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 880a6d386d..4d6af3c540 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -9,14 +9,15 @@ sentry.coreapi
 #       This will make it so we can more easily control logging with various
 #       metadata (rather than generic log messages which aren't useful).
 
-from datetime import datetime, timedelta
 import base64
 import logging
 import uuid
 import zlib
 
+from datetime import datetime, timedelta
 from django.conf import settings
 from django.utils.encoding import smart_str
+from gzip import GzipFile
 
 from sentry.app import env
 from sentry.constants import (
@@ -27,6 +28,7 @@ from sentry.models import Project, ProjectKey
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
+from sentry.utils.compat import StringIO
 from sentry.utils.imports import import_string
 from sentry.utils.strings import decompress, truncatechars
 
@@ -162,6 +164,30 @@ def project_from_auth_vars(auth_vars):
     return project, pk.user
 
 
+def decompress_deflate(encoded_data):
+    try:
+        return zlib.decompress(encoded_data)
+    except Exception as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.info(e, **client_metadata(exception=e))
+        raise APIForbidden('Bad data decoding request (%s, %s)' % (
+            e.__class__.__name__, e))
+
+
+def decompress_gzip(encoded_data):
+    try:
+        fp = StringIO(encoded_data)
+        with GzipFile(fileobj=fp) as f:
+            return f.read()
+    except Exception as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.info(e, **client_metadata(exception=e))
+        raise APIForbidden('Bad data decoding request (%s, %s)' % (
+            e.__class__.__name__, e))
+
+
 def decode_and_decompress_data(encoded_data):
     try:
         try:
diff --git a/src/sentry/utils/compat/__init__.py b/src/sentry/utils/compat/__init__.py
index ae90d4f8da..197285bcd2 100644
--- a/src/sentry/utils/compat/__init__.py
+++ b/src/sentry/utils/compat/__init__.py
@@ -10,3 +10,8 @@ try:
     import cPickle as pickle
 except ImportError:
     import pickle  # NOQA
+
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from StringIO import StringIO  # NOQA
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 6293660e49..3e4456ea89 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -33,7 +33,8 @@ from sentry.constants import (
 from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
-    APIForbidden, APIRateLimited, extract_auth_vars, ensure_has_ip)
+    APIForbidden, APIRateLimited, extract_auth_vars, ensure_has_ip,
+    decompress_deflate, decompress_gzip)
 from sentry.exceptions import InvalidData, InvalidOrigin, InvalidRequest
 from sentry.models import (
     Group, GroupBookmark, Project, ProjectCountByMinute, TagValue, Activity,
@@ -316,7 +317,11 @@ class StoreView(APIView):
         if result is False:
             raise APIForbidden('Creation of this event was blocked')
 
-        if not data.startswith('{'):
+        if request.META.get('HTTP_CONTENT_ENCODING') == 'gzip':
+            data = decompress_gzip(data)
+        elif request.META.get('HTTP_CONTENT_ENCODING') == 'deflate':
+            data = decompress_deflate(data)
+        elif not data.startswith('{'):
             data = decode_and_decompress_data(data)
         data = safely_load_json_string(data)
 
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 1f3ebbabc7..5eb119bee3 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -3,16 +3,22 @@
 from __future__ import absolute_import
 
 import datetime
+import json
 import mock
+import zlib
 
 from django.conf import settings as django_settings
 from django.core.urlresolvers import reverse
 from django.test.utils import override_settings
 from django.utils import timezone
-
+from gzip import GzipFile
+from exam import fixture
 from raven import Client
+
 from sentry.models import Group, Event, Project, User
 from sentry.testutils import TestCase
+from sentry.testutils.helpers import get_auth_header
+from sentry.utils.compat import StringIO
 from sentry.utils.settings import (
     validate_settings, ConfigurationError, import_string)
 
@@ -108,25 +114,21 @@ class RavenIntegrationTest(TestCase):
 
 
 class SentryRemoteTest(TestCase):
-    def test_correct_data(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+    @fixture
+    def path(self):
+        return reverse('sentry-api-store')
+
+    def test_minimal(self):
+        kwargs = {'message': 'hello'}
+
         resp = self._postWithHeader(kwargs)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.server_name, 'not_dcramer.local')
-        self.assertEquals(instance.level, 40)
-        self.assertEquals(instance.site, 'not_a_real_site')
 
-    def test_unicode_keys(self):
-        kwargs = {u'message': 'hello', u'server_name': 'not_dcramer.local', u'level': 40, u'site': 'not_a_real_site'}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        instance = Event.objects.get()
-        self.assertEquals(instance.message, 'hello')
-        self.assertEquals(instance.server_name, 'not_dcramer.local')
-        self.assertEquals(instance.level, 40)
-        self.assertEquals(instance.site, 'not_a_real_site')
+        assert resp.status_code == 200, resp.content
+
+        event_id = json.loads(resp.content)['id']
+        instance = Event.objects.get(event_id=event_id)
+
+        assert instance.message == 'hello'
 
     def test_timestamp(self):
         timestamp = timezone.now().replace(microsecond=0, tzinfo=timezone.utc) - datetime.timedelta(hours=1)
@@ -153,7 +155,8 @@ class SentryRemoteTest(TestCase):
         self.assertEquals(group.last_seen, timestamp)
 
     def test_ungzipped_data(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local',
+                  'level': 40, 'site': 'not_a_real_site'}
         resp = self._postWithSignature(kwargs)
         self.assertEquals(resp.status_code, 200)
         instance = Event.objects.get()
@@ -164,7 +167,8 @@ class SentryRemoteTest(TestCase):
 
     @override_settings(SENTRY_ALLOW_ORIGIN='getsentry.com')
     def test_correct_data_with_get(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local',
+                  'level': 40, 'site': 'not_a_real_site'}
         resp = self._getWithReferer(kwargs)
         self.assertEquals(resp.status_code, 200, resp.content)
         instance = Event.objects.get()
@@ -175,43 +179,21 @@ class SentryRemoteTest(TestCase):
 
     @override_settings(SENTRY_ALLOW_ORIGIN='getsentry.com')
     def test_get_without_referer(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local',
+                  'level': 40, 'site': 'not_a_real_site'}
         resp = self._getWithReferer(kwargs, referer=None, protocol='4')
         self.assertEquals(resp.status_code, 400, resp.content)
 
     @override_settings(SENTRY_ALLOW_ORIGIN='*')
     def test_get_without_referer_allowed(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local',
+                  'level': 40, 'site': 'not_a_real_site'}
         resp = self._getWithReferer(kwargs, referer=None, protocol='4')
         self.assertEquals(resp.status_code, 200, resp.content)
 
-    # def test_byte_sequence(self):
-    #     """
-    #     invalid byte sequence for encoding "UTF8": 0xedb7af
-    #     """
-    #     # TODO:
-    #     # add 'site' to data in fixtures/bad_data.json, then assert it's set correctly below
-
-    #     fname = os.path.join(os.path.dirname(__file__), 'fixtures/bad_data.json')
-    #     data = open(fname).read()
-
-    #     resp = self.client.post(reverse('sentry-api-store'), {
-    #         'data': data,
-    #         'key': settings.KEY,
-    #     })
-
-    #     self.assertEquals(resp.status_code, 200)
-
-    #     self.assertEquals(Event.objects.count(), 1)
-
-    #     instance = Event.objects.get()
-
-    #     self.assertEquals(instance.message, 'DatabaseError: invalid byte sequence for encoding "UTF8": 0xeda4ac\nHINT:  This error can also happen if the byte sequence does not match the encoding expected by the server, which is controlled by "client_encoding".\n')
-    #     self.assertEquals(instance.server_name, 'shilling.disqus.net')
-    #     self.assertEquals(instance.level, 40)
-
     def test_signature(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local',
+                  'level': 40, 'site': 'not_a_real_site'}
 
         resp = self._postWithSignature(kwargs)
 
@@ -224,6 +206,54 @@ class SentryRemoteTest(TestCase):
         self.assertEquals(instance.site, 'not_a_real_site')
         self.assertEquals(instance.level, 40)
 
+    def test_content_encoding_deflate(self):
+        kwargs = {'message': 'hello'}
+
+        message = zlib.compress(json.dumps(kwargs))
+
+        key = self.projectkey.public_key
+        secret = self.projectkey.secret_key
+
+        resp = self.client.post(
+            self.path, message,
+            content_type='application/octet-stream',
+            HTTP_CONTENT_ENCODING='deflate',
+            HTTP_X_SENTRY_AUTH=get_auth_header('_postWithHeader', key, secret),
+        )
+
+        assert resp.status_code == 200, resp.content
+
+        event_id = json.loads(resp.content)['id']
+        instance = Event.objects.get(event_id=event_id)
+
+        assert instance.message == 'hello'
+
+    def test_content_encoding_gzip(self):
+        kwargs = {'message': 'hello'}
+
+        message = json.dumps(kwargs)
+
+        fp = StringIO()
+        with GzipFile(fileobj=fp, mode='w') as f:
+            return f.write(message)
+
+        key = self.projectkey.public_key
+        secret = self.projectkey.secret_key
+
+        resp = self.client.post(
+            self.path, fp.getvalue(),
+            content_type='application/octet-stream',
+            CONTENT_ENCODING='gzip',
+            HTTP_X_SENTRY_AUTH=get_auth_header('_postWithHeader', key, secret),
+        )
+
+        assert resp.status_code == 200, resp.content
+
+        event_id = json.loads(resp.content)['id']
+        instance = Event.objects.get(event_id=event_id)
+
+        assert instance.message == 'hello'
+
 
 class DepdendencyTest(TestCase):
     def raise_import_error(self, package):
