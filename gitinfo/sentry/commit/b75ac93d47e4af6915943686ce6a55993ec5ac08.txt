commit b75ac93d47e4af6915943686ce6a55993ec5ac08
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue Mar 31 15:24:39 2020 +0200

    test(ui): Add test coverage for releases v2 list page (#17978)

diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index 81dcc81413..2d8c93e6a1 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -3,6 +3,7 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import styled from '@emotion/styled';
 import pick from 'lodash/pick';
 import {forceCheck} from 'react-lazyload';
+import flatMap from 'lodash/flatMap';
 
 import {t} from 'app/locale';
 import space from 'app/styles/space';
@@ -119,7 +120,8 @@ class ReleasesList extends AsyncView<Props, State> {
   };
 
   transformToProjectRelease(releases: Release[]): ProjectRelease[] {
-    return releases.flatMap(release =>
+    // native JS flatMap is not supported in our current nodejs 10.16.3 (tests)
+    return flatMap(releases, release =>
       release.projects.map(project => {
         return {
           ...release,
diff --git a/tests/js/sentry-test/fixtures/releaseV2.js b/tests/js/sentry-test/fixtures/releaseV2.js
new file mode 100644
index 0000000000..091224511b
--- /dev/null
+++ b/tests/js/sentry-test/fixtures/releaseV2.js
@@ -0,0 +1,84 @@
+export function ReleaseV2(params, healthParams) {
+  return {
+    dateReleased: null,
+    newGroups: 0,
+    commitCount: 0,
+    url: null,
+    data: {},
+    lastDeploy: null,
+    deployCount: 0,
+    dateCreated: '2020-03-23T00:00:00Z',
+    lastEvent: null,
+    version: 'sentry-android-shop@1.2.0',
+    firstEvent: null,
+    lastCommit: null,
+    shortVersion: 'sentry-android-shop@1.2.0',
+    authors: [],
+    owner: null,
+    versionInfo: {
+      buildHash: null,
+      version: {
+        pre: null,
+        raw: '1.2.0',
+        major: 1,
+        minor: 2,
+        buildCode: null,
+        patch: 0,
+      },
+      description: '1.2.0',
+      package: 'sentry-android-shop',
+    },
+    ref: null,
+    projects: [
+      {
+        healthData: {
+          totalUsers24h: null,
+          durationP50: 231,
+          totalSessions: 74949,
+          totalUsers: 2544,
+          hasHealthData: true,
+          crashFreeSessions: 99.59839357429719,
+          sessionsErrored: 301,
+          stats: {
+            '24h': [
+              [1585472400, 0],
+              [1585476000, 0],
+              [1585479600, 0],
+              [1585483200, 0],
+              [1585486800, 0],
+              [1585490400, 0],
+              [1585494000, 0],
+              [1585497600, 0],
+              [1585501200, 0],
+              [1585504800, 0],
+              [1585508400, 0],
+              [1585512000, 0],
+              [1585515600, 0],
+              [1585519200, 0],
+              [1585522800, 0],
+              [1585526400, 0],
+              [1585530000, 0],
+              [1585533600, 0],
+              [1585537200, 0],
+              [1585540800, 0],
+              [1585544400, 0],
+              [1585548000, 0],
+              [1585551600, 0],
+              [1585555200, 0],
+            ],
+          },
+          totalSessions24h: null,
+          crashFreeUsers: 98.07389937106919,
+          durationP90: 333,
+          adoption: null,
+          sessionsCrashed: 301,
+          ...healthParams,
+        },
+        id: 4383603,
+        name: 'Sentry-Android-Shop',
+        slug: 'sentry-android-shop',
+      },
+    ],
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/releasesV2/list/index.spec.jsx b/tests/js/spec/views/releasesV2/list/index.spec.jsx
index 0a28e04720..c31ed757ab 100644
--- a/tests/js/spec/views/releasesV2/list/index.spec.jsx
+++ b/tests/js/spec/views/releasesV2/list/index.spec.jsx
@@ -2,11 +2,9 @@ import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
-import ReleasesV2List from 'app/views/releasesV2/list/';
+import ReleaseList from 'app/views/releasesV2/list/';
 
-// waiting for api to be finished
-// eslint-disable-next-line jest/no-disabled-tests
-describe.skip('ReleasesV2List', function() {
+describe('ReleasesV2List', function() {
   const {organization, routerContext, router} = initializeOrg({
     organization: {features: ['releases-v2']},
   });
@@ -15,14 +13,26 @@ describe.skip('ReleasesV2List', function() {
     organization,
     selection: {projects: [2]},
     params: {orgId: organization.slug},
-    location: {query: {query: 'derp'}},
+    location: {
+      query: {
+        query: 'derp',
+        sort: 'sessions',
+        healthStatsPeriod: '24h',
+        healthStat: 'sessions',
+        somethingBad: 'XXX',
+      },
+    },
   };
   let wrapper, endpointMock;
 
   beforeEach(function() {
     endpointMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/releases/',
-      body: [TestStubs.Release({version: 'abc'}), TestStubs.Release({version: 'def'})],
+      body: [
+        TestStubs.ReleaseV2({version: '1.0.0'}),
+        TestStubs.ReleaseV2({version: '1.0.1'}),
+        TestStubs.ReleaseV2({version: 'af4f231ec9a8'}, {hasHealthData: false}),
+      ],
     });
 
     MockApiClient.addMockResponse({
@@ -30,7 +40,7 @@ describe.skip('ReleasesV2List', function() {
       body: [],
     });
 
-    wrapper = mountWithTheme(<ReleasesV2List {...props} />, routerContext);
+    wrapper = mountWithTheme(<ReleaseList {...props} />, routerContext);
   });
 
   afterEach(function() {
@@ -38,29 +48,57 @@ describe.skip('ReleasesV2List', function() {
   });
 
   it('renders list', function() {
-    const items = wrapper.find('StyledPanelItem');
+    const items = wrapper.find('StyledPanel');
 
-    expect(items).toHaveLength(20);
-    // expect(items.at(0).text()).toContain('First');
-    // expect(items.at(1).text()).toContain('Second');
+    expect(items).toHaveLength(3);
+    expect(items.at(0).text()).toContain('1.0.0');
+    expect(items.at(0).text()).toContain('Release adoption');
+    expect(items.at(2).text()).toContain('af4f231ec9a8');
+    expect(items.at(2).text()).not.toContain('Release adoption');
   });
 
-  it('displays empty state', function() {
+  it('displays the right empty state', function() {
+    let location;
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/releases/',
       body: [],
     });
 
-    expect(wrapper.find('StyledPanelItem')).toHaveLength(0);
-    expect(wrapper.text()).toContain('There are no releases.');
+    location = {query: {}};
+    wrapper = mountWithTheme(
+      <ReleaseList {...props} location={location} />,
+      routerContext
+    );
+    expect(wrapper.find('StyledPanel')).toHaveLength(0);
+    expect(wrapper.find('EmptyMessage').text()).toEqual('There are no releases.');
+
+    location = {query: {query: 'abc'}};
+    wrapper = mountWithTheme(
+      <ReleaseList {...props} location={location} />,
+      routerContext
+    );
+    expect(wrapper.find('EmptyMessage').text()).toEqual(
+      "There are no releases that match: 'abc'."
+    );
+
+    location = {query: {sort: 'sessions', statsPeriod: '7d'}};
+    wrapper = mountWithTheme(
+      <ReleaseList {...props} location={location} />,
+      routerContext
+    );
+    expect(wrapper.find('EmptyMessage').text()).toEqual(
+      'There are no releases with data in the last 7 days.'
+    );
   });
 
-  it('searches for a release', async function() {
+  it('searches for a release', function() {
     const input = wrapper.find('input');
 
     expect(endpointMock).toHaveBeenCalledWith(
       '/organizations/org-slug/releases/',
-      expect.objectContaining({query: {per_page: 50, query: 'derp'}})
+      expect.objectContaining({
+        query: expect.objectContaining({query: 'derp'}),
+      })
     );
 
     expect(input.prop('value')).toBe('derp');
@@ -68,12 +106,76 @@ describe.skip('ReleasesV2List', function() {
     input.simulate('change', {target: {value: 'a'}}).simulate('submit');
 
     expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/releases-v2/',
-      query: {
-        query: 'a',
-      },
+      query: expect.objectContaining({query: 'a'}),
+    });
+  });
+
+  it('sorts releases', function() {
+    expect(endpointMock).toHaveBeenCalledWith(
+      '/organizations/org-slug/releases/',
+      expect.objectContaining({
+        query: expect.objectContaining({sort: 'sessions'}),
+      })
+    );
+
+    const sortDropdown = wrapper.find('DropdownControl').first();
+    const sortOptions = sortDropdown.find('DropdownItem span');
+    const sortByDateOption = sortOptions.at(0);
+
+    expect(sortOptions).toHaveLength(4);
+    expect(sortByDateOption.text()).toEqual('Date Created');
+
+    sortByDateOption.simulate('click');
+
+    expect(router.push).toHaveBeenCalledWith({
+      query: expect.objectContaining({
+        sort: 'date',
+      }),
     });
   });
 
-  // TODO(releasesv2): test toggle 24h/14d charts
+  it('calls api with only whitelisted query params', function() {
+    expect(endpointMock).toHaveBeenCalledWith(
+      '/organizations/org-slug/releases/',
+      expect.objectContaining({
+        query: expect.not.objectContaining({
+          somethingBad: 'XXX',
+        }),
+      })
+    );
+  });
+
+  it('toggles health stats chart period/subject', function() {
+    expect(endpointMock).toHaveBeenCalledWith(
+      '/organizations/org-slug/releases/',
+      expect.objectContaining({
+        query: expect.objectContaining({
+          healthStatsPeriod: '24h',
+          healthStat: 'sessions',
+        }),
+      })
+    );
+
+    const healthStatsControls = wrapper.find('DailyUsersColumn').first();
+
+    expect(healthStatsControls.find('Period[selected=true]').text()).toEqual('24h');
+    expect(healthStatsControls.find('Title[selected=true]').text()).toEqual('Sessions');
+
+    const period14d = healthStatsControls.find('Period[selected=false] Link').first();
+    const subjectUsers = healthStatsControls.find('Title[selected=false] Link').first();
+
+    expect(period14d.prop('to')).toEqual({
+      pathname: undefined,
+      query: expect.objectContaining({
+        healthStatsPeriod: '14d',
+      }),
+    });
+
+    expect(subjectUsers.prop('to')).toEqual({
+      pathname: undefined,
+      query: expect.objectContaining({
+        healthStat: 'users',
+      }),
+    });
+  });
 });
