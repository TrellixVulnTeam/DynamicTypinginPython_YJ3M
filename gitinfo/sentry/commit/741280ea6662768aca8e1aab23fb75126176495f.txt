commit 741280ea6662768aca8e1aab23fb75126176495f
Author: Radu Woinaroski <5281987+RaduW@users.noreply.github.com>
Date:   Wed Jul 3 11:11:59 2019 +0200

    Replace database access for ProjectOptions with relay_config access (#13880)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7a4a4c0dd4..d6af2bde7d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -390,24 +390,24 @@ class EventManager(object):
                 if interface.to_python(self._data[name]).should_filter(self._project):
                     return (True, FilterStatKeys.INVALID_CSP)
 
-        if self._client_ip and not is_valid_ip(self._project, self._client_ip):
+        if self._client_ip and not is_valid_ip(self.relay_config, self._client_ip):
             return (True, FilterStatKeys.IP_ADDRESS)
 
         release = self._data.get('release')
-        if release and not is_valid_release(self._project, release):
+        if release and not is_valid_release(self.relay_config, release):
             return (True, FilterStatKeys.RELEASE_VERSION)
 
         error_message = get_path(self._data, 'logentry', 'formatted') \
             or get_path(self._data, 'logentry', 'message') \
             or ''
-        if error_message and not is_valid_error_message(self._project, error_message):
+        if error_message and not is_valid_error_message(self.relay_config, error_message):
             return (True, FilterStatKeys.ERROR_MESSAGE)
 
         for exc in get_path(self._data, 'exception', 'values', filter=True, default=[]):
             message = u': '.join(
                 filter(None, map(exc.get, ['type', 'value']))
             )
-            if message and not is_valid_error_message(self._project, message):
+            if message and not is_valid_error_message(self.relay_config, message):
                 return (True, FilterStatKeys.ERROR_MESSAGE)
 
         return should_filter_event(self.relay_config, self._data)
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
index 4ef219ae1d..1edd6ebe26 100644
--- a/src/sentry/utils/data_filters.py
+++ b/src/sentry/utils/data_filters.py
@@ -48,12 +48,12 @@ class FilterTypes(object):
     RELEASES = 'releases'
 
 
-def is_valid_ip(project, ip_address):
+def is_valid_ip(relay_config, ip_address):
     """
     Verify that an IP address is not being blacklisted
     for the given project.
     """
-    blacklist = project.get_option('sentry:blacklisted_ips')
+    blacklist = relay_config.config.get('blacklisted_ips')
     if not blacklist:
         return True
 
@@ -77,12 +77,12 @@ def is_valid_ip(project, ip_address):
     return True
 
 
-def is_valid_release(project, release):
+def is_valid_release(relay_config, release):
     """
     Verify that a release is not being filtered
     for the given project.
     """
-    invalid_versions = project.get_option(u'sentry:{}'.format(FilterTypes.RELEASES))
+    invalid_versions = relay_config.config.get(FilterTypes.RELEASES)
     if not invalid_versions:
         return True
 
@@ -95,12 +95,12 @@ def is_valid_release(project, release):
     return True
 
 
-def is_valid_error_message(project, message):
+def is_valid_error_message(relay_config, message):
     """
     Verify that an error message is not being filtered
     for the given project.
     """
-    filtered_errors = project.get_option(u'sentry:{}'.format(FilterTypes.ERROR_MESSAGES))
+    filtered_errors = relay_config.config.get(FilterTypes.ERROR_MESSAGES)
     if not filtered_errors:
         return True
 
diff --git a/src/sentry/web/relay_config.py b/src/sentry/web/relay_config.py
index 2eb38fa6d2..b9234577a9 100644
--- a/src/sentry/web/relay_config.py
+++ b/src/sentry/web/relay_config.py
@@ -282,7 +282,15 @@ def get_full_relay_config(project_id):
 
     invalid_releases = project.get_option(u'sentry:{}'.format(FilterTypes.RELEASES))
     if invalid_releases is not None:
-        project_cfg['invalid_releases'] = invalid_releases
+        project_cfg[FilterTypes.RELEASES] = invalid_releases
+
+    blacklisted_ips = project.get_option('sentry:blacklisted_ips')
+    if blacklisted_ips is not None:
+        project_cfg['blacklisted_ips'] = blacklisted_ips
+
+    error_messages = project.get_option(u'sentry:{}'.format(FilterTypes.ERROR_MESSAGES))
+    if error_messages is not None:
+        project_cfg[FilterTypes.ERROR_MESSAGES] = error_messages
 
     # get the filter settings for this project
     filter_settings = {}
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index e91d7f0cf8..994cdb8eea 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -25,6 +25,7 @@ from sentry.models import (
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase
 from sentry.utils.data_filters import FilterStatKeys
+from sentry.web.relay_config import get_full_relay_config
 
 
 def make_event(**kwargs):
@@ -1325,14 +1326,15 @@ class EventManagerTest(TestCase):
             },
         }
 
-        manager = EventManager(data, project=self.project)
+        relay_config = get_full_relay_config(self.project.id)
+        manager = EventManager(data, project=self.project, relay_config=relay_config)
 
         mock_is_valid_error_message.side_effect = [item.result for item in items]
 
         assert manager.should_filter() == (True, FilterStatKeys.ERROR_MESSAGE)
 
         assert mock_is_valid_error_message.call_args_list == [
-            mock.call(self.project, item.formatted) for item in items]
+            mock.call(relay_config, item.formatted) for item in items]
 
     def test_legacy_attributes_moved(self):
         event = make_event(
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 9d77591778..f4b9167bb9 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -25,6 +25,7 @@ from sentry.utils.data_filters import (
     is_valid_error_message,
     FilterTypes,
 )
+from sentry.web.relay_config import get_full_relay_config
 
 
 class AbsoluteUriTest(unittest.TestCase):
@@ -254,7 +255,8 @@ class IsValidOriginTestCase(unittest.TestCase):
 class IsValidIPTestCase(TestCase):
     def is_valid_ip(self, ip, inputs):
         self.project.update_option('sentry:blacklisted_ips', inputs)
-        return is_valid_ip(self.project, ip)
+        relay_config = get_full_relay_config(self.project.id)
+        return is_valid_ip(relay_config, ip)
 
     def test_not_in_blacklist(self):
         assert self.is_valid_ip('127.0.0.1', [])
@@ -275,7 +277,8 @@ class IsValidIPTestCase(TestCase):
 class IsValidReleaseTestCase(TestCase):
     def is_valid_release(self, value, inputs):
         self.project.update_option(u'sentry:{}'.format(FilterTypes.RELEASES), inputs)
-        return is_valid_release(self.project, value)
+        relay_config = get_full_relay_config(self.project.id)
+        return is_valid_release(relay_config, value)
 
     def test_release_not_in_list(self):
         assert self.is_valid_release('1.2.3', None)
@@ -294,7 +297,8 @@ class IsValidReleaseTestCase(TestCase):
 class IsValidErrorMessageTestCase(TestCase):
     def is_valid_error_message(self, value, inputs):
         self.project.update_option(u'sentry:{}'.format(FilterTypes.ERROR_MESSAGES), inputs)
-        return is_valid_error_message(self.project, value)
+        relay_config = get_full_relay_config(self.project.id)
+        return is_valid_error_message(relay_config, value)
 
     def test_error_class_not_in_list(self):
         assert self.is_valid_error_message(
