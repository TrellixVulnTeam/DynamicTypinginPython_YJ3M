commit 4100d5025002601d9c22c3aec61dea17a3d36cf1
Author: Chris Fuller <cfuller@sentry.io>
Date:   Thu Jul 9 11:29:44 2020 -0400

    feat(workflow): Filter out performance alerts and rules if they don't have the feature (#19683)
    
    * Adding filters on rules and alerts for perf alerts

diff --git a/src/sentry/incidents/endpoints/organization_incident_index.py b/src/sentry/incidents/endpoints/organization_incident_index.py
index 2ad9bb0ec4..79e0236457 100644
--- a/src/sentry/incidents/endpoints/organization_incident_index.py
+++ b/src/sentry/incidents/endpoints/organization_incident_index.py
@@ -7,6 +7,7 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.incidents.models import Incident, IncidentStatus
+from sentry.snuba.dataset import Dataset
 
 
 class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
@@ -42,6 +43,10 @@ class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
             elif query_status == "closed":
                 incidents = incidents.filter(status=IncidentStatus.CLOSED.value)
 
+        if not features.has("organizations:performance-view", organization):
+            # Filter to only error alerts
+            incidents = incidents.filter(alert_rule__snuba_query__dataset=Dataset.Events.value)
+
         return self.paginate(
             request,
             queryset=incidents,
diff --git a/src/sentry/incidents/endpoints/project_alert_rule_index.py b/src/sentry/incidents/endpoints/project_alert_rule_index.py
index 8f6cef561b..f8bccb1f62 100644
--- a/src/sentry/incidents/endpoints/project_alert_rule_index.py
+++ b/src/sentry/incidents/endpoints/project_alert_rule_index.py
@@ -13,6 +13,7 @@ from sentry.api.serializers import serialize, CombinedRuleSerializer
 from sentry.incidents.endpoints.serializers import AlertRuleSerializer
 from sentry.incidents.models import AlertRule
 from sentry.signals import alert_rule_created
+from sentry.snuba.dataset import Dataset
 from sentry.models import Rule, RuleStatus
 
 
@@ -21,6 +22,11 @@ class ProjectCombinedRuleIndexEndpoint(ProjectEndpoint):
         """
         Fetches alert rules and legacy rules for an organization
         """
+        alert_rules = AlertRule.objects.fetch_for_project(project)
+        if not features.has("organizations:performance-view", project.organization):
+            # Filter to only error alert rules
+            alert_rules = alert_rules.filter(snuba_query__dataset=Dataset.Events.value)
+
         return self.paginate(
             request,
             paginator_cls=CombinedQuerysetPaginator,
@@ -28,7 +34,7 @@ class ProjectCombinedRuleIndexEndpoint(ProjectEndpoint):
             default_per_page=25,
             order_by="-date_added",
             querysets=[
-                AlertRule.objects.fetch_for_project(project),
+                alert_rules,
                 Rule.objects.filter(
                     project=project, status__in=[RuleStatus.ACTIVE, RuleStatus.INACTIVE]
                 ),
@@ -44,9 +50,14 @@ class ProjectAlertRuleIndexEndpoint(ProjectEndpoint):
         if not features.has("organizations:incidents", project.organization, actor=request.user):
             raise ResourceDoesNotExist
 
+        alert_rules = AlertRule.objects.fetch_for_project(project)
+        if not features.has("organizations:performance-view", project.organization):
+            # Filter to only error alert rules
+            alert_rules = alert_rules.filter(snuba_query__dataset=Dataset.Events.value)
+
         return self.paginate(
             request,
-            queryset=AlertRule.objects.fetch_for_project(project),
+            queryset=alert_rules,
             order_by="-date_added",
             paginator_cls=OffsetPaginator,
             on_results=lambda x: serialize(x, request.user),
diff --git a/tests/acceptance/test_incidents.py b/tests/acceptance/test_incidents.py
index dde8d2d5cc..ba480ed436 100644
--- a/tests/acceptance/test_incidents.py
+++ b/tests/acceptance/test_incidents.py
@@ -6,7 +6,7 @@ import pytz
 from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now
 
-FEATURE_NAME = "organizations:incidents"
+FEATURE_NAME = ["organizations:incidents", "organizations:performance-view"]
 
 event_time = before_now(days=3).replace(tzinfo=pytz.utc)
 
diff --git a/tests/sentry/incidents/endpoints/test_organization_incident_index.py b/tests/sentry/incidents/endpoints/test_organization_incident_index.py
index 8e6a805dc5..b84597901b 100644
--- a/tests/sentry/incidents/endpoints/test_organization_incident_index.py
+++ b/tests/sentry/incidents/endpoints/test_organization_incident_index.py
@@ -5,6 +5,7 @@ from exam import fixture
 from sentry.api.serializers import serialize
 from sentry.incidents.models import IncidentStatus
 from sentry.testutils import APITestCase
+from sentry.snuba.models import QueryDatasets
 
 
 class IncidentListEndpointTest(APITestCase):
@@ -28,7 +29,7 @@ class IncidentListEndpointTest(APITestCase):
         other_incident = self.create_incident(status=IncidentStatus.CLOSED.value)
 
         self.login_as(self.user)
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             resp = self.get_valid_response(self.organization.slug)
 
         assert resp.data == serialize([other_incident, incident])
@@ -39,7 +40,7 @@ class IncidentListEndpointTest(APITestCase):
         closed_incident = self.create_incident(status=IncidentStatus.CLOSED.value)
         self.login_as(self.user)
 
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             resp_closed = self.get_valid_response(self.organization.slug, status="closed")
             resp_open = self.get_valid_response(self.organization.slug, status="open")
 
@@ -58,7 +59,7 @@ class IncidentListEndpointTest(APITestCase):
 
         self.login_as(self.user)
 
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             resp_filter_env = self.get_valid_response(self.organization.slug, environment=env.name)
             resp_no_env_filter = self.get_valid_response(self.organization.slug)
 
@@ -74,3 +75,20 @@ class IncidentListEndpointTest(APITestCase):
         self.login_as(self.user)
         resp = self.get_response(self.organization.slug)
         assert resp.status_code == 404
+
+    def test_no_perf_alerts(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        # alert_rule = self.create_alert_rule()
+        perf_alert_rule = self.create_alert_rule(query="p95", dataset=QueryDatasets.TRANSACTIONS)
+
+        perf_incident = self.create_incident(alert_rule=perf_alert_rule)
+        incident = self.create_incident()
+
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug)
+            assert resp.data == serialize([incident])
+
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
+            resp = self.get_valid_response(self.organization.slug)
+            assert resp.data == serialize([incident, perf_incident])
diff --git a/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py b/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py
index 4428da6cda..fb7b565b1a 100644
--- a/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py
+++ b/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py
@@ -11,7 +11,8 @@ from freezegun import freeze_time
 from sentry.api.serializers import serialize
 from sentry.incidents.models import AlertRule
 from sentry.testutils.helpers.datetime import before_now
-from sentry.testutils import TestCase, APITestCase
+from sentry.testutils import APITestCase
+from sentry.snuba.models import QueryDatasets
 from tests.sentry.api.serializers.test_alert_rule import BaseAlertRuleSerializerTest
 
 
@@ -43,6 +44,19 @@ class AlertRuleListEndpointTest(APITestCase):
 
         assert resp.data == serialize([alert_rule])
 
+    def test_no_perf_alerts(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        alert_rule = self.create_alert_rule()
+        perf_alert_rule = self.create_alert_rule(query="p95", dataset=QueryDatasets.TRANSACTIONS)
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug, self.project.slug)
+            assert resp.data == serialize([alert_rule])
+
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
+            resp = self.get_valid_response(self.organization.slug, self.project.slug)
+            assert resp.data == serialize([perf_alert_rule, alert_rule])
+
     def test_no_feature(self):
         self.create_team(organization=self.organization, members=[self.user])
         self.login_as(self.user)
@@ -100,7 +114,7 @@ class AlertRuleCreateEndpointTest(APITestCase):
             "projects": [self.project.slug],
             "name": "JustAValidTestRule",
         }
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             resp = self.get_valid_response(
                 self.organization.slug, self.project.slug, status_code=201, **valid_alert_rule
             )
@@ -125,7 +139,22 @@ class AlertRuleCreateEndpointTest(APITestCase):
         assert resp.status_code == 403
 
 
-class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase):
+class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, APITestCase):
+    endpoint = "sentry-api-0-project-combined-rules"
+
+    def test_no_perf_alerts(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.create_alert_rule()
+        perf_alert_rule = self.create_alert_rule(query="p95", dataset=QueryDatasets.TRANSACTIONS)
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug, self.project.slug)
+            assert perf_alert_rule.id not in [x["id"] for x in list(resp.data)]
+
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
+            resp = self.get_valid_response(self.organization.slug, self.project.slug)
+            assert perf_alert_rule.id in [int(x["id"]) for x in list(resp.data)]
+
     def setup_project_and_rules(self):
         self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
         self.team = self.create_team(organization=self.org, name="Mariachi Band")
@@ -157,7 +186,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
 
     def test_invalid_limit(self):
         self.setup_project_and_rules()
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"per_page": "notaninteger"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -167,7 +196,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
     def test_limit_higher_than_results_no_cursor(self):
         self.setup_project_and_rules()
         # Test limit above result count (which is 4), no cursor.
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"per_page": "5"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -185,7 +214,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         self.setup_project_and_rules()
 
         # Test Limit as 1, no cursor:
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"per_page": "1"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -202,7 +231,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         next_cursor = links[1]["cursor"]
 
         # Test Limit as 1, next page of previous request:
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"cursor": next_cursor, "per_page": "1"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -217,7 +246,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         self.setup_project_and_rules()
 
         # Test Limit as 2, no cursor:
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"per_page": "2"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -235,7 +264,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         )
         next_cursor = links[1]["cursor"]
         # Test Limit 2, next page of previous request:
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"cursor": next_cursor, "per_page": "2"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -253,7 +282,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         next_cursor = links[1]["cursor"]
 
         # Test Limit 2, next page of previous request - should get no results since there are only 4 total:
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"cursor": next_cursor, "per_page": "2"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -275,7 +304,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         )
         self.three_alert_rule = self.create_alert_rule(projects=self.projects)
 
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"per_page": "2"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
@@ -293,7 +322,7 @@ class ProjectCombinedRuleIndexEndpointTest(BaseAlertRuleSerializerTest, TestCase
         next_cursor = links[1]["cursor"]
         assert next_cursor.split(":")[1] == "1"  # Assert offset is properly calculated.
 
-        with self.feature("organizations:incidents"):
+        with self.feature(["organizations:incidents", "organizations:performance-view"]):
             request_data = {"cursor": next_cursor, "per_page": "2"}
             response = self.client.get(
                 path=self.combined_rules_url, data=request_data, content_type="application/json"
