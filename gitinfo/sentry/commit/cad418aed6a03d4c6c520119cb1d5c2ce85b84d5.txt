commit cad418aed6a03d4c6c520119cb1d5c2ce85b84d5
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue Jun 16 14:11:43 2020 +0200

    feat(ui): Source maps in settings (#19158)

diff --git a/src/sentry/api/endpoints/debug_files.py b/src/sentry/api/endpoints/debug_files.py
index 617d1a1c77..f1b9fde821 100644
--- a/src/sentry/api/endpoints/debug_files.py
+++ b/src/sentry/api/endpoints/debug_files.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
+import re
 import six
 import jsonschema
 import logging
 import posixpath
 
 from django.db import transaction
-from django.db.models import Q
+from django.db.models import Q, Count, Exists, OuterRef
 from django.http import StreamingHttpResponse, HttpResponse, Http404
 from rest_framework.response import Response
 from symbolic import normalize_debug_id, SymbolicError
@@ -18,7 +19,14 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.constants import KNOWN_DIF_FORMATS
-from sentry.models import FileBlobOwner, ProjectDebugFile, create_files_from_dif_zip
+from sentry.models import (
+    FileBlobOwner,
+    ProjectDebugFile,
+    create_files_from_dif_zip,
+    Release,
+    ReleaseFile,
+)
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.tasks.assemble import (
     get_assemble_status,
     set_assemble_status,
@@ -31,6 +39,7 @@ from sentry.utils import json
 logger = logging.getLogger("sentry.api")
 ERR_FILE_EXISTS = "A file matching this debug identifier already exists"
 DIF_MIMETYPES = dict((v, k) for k, v in KNOWN_DIF_FORMATS.items())
+_release_suffix = re.compile(r"^(.*)\s+\(([^)]+)\)\s*$")
 
 
 def upload_from_request(request, project):
@@ -348,3 +357,109 @@ class DifAssembleEndpoint(ProjectEndpoint):
             file_response[checksum] = {"state": ChunkFileState.CREATED, "missingChunks": []}
 
         return Response(file_response, status=200)
+
+
+class SourceMapsEndpoint(ProjectEndpoint):
+    # doc_section = DocSection.PROJECTS
+    permission_classes = (ProjectReleasePermission,)
+
+    def get(self, request, project):
+        """
+        List a Project's Source Map Archives
+        ````````````````````````````````````
+
+        Retrieve a list of source map archives (releases, later bundles) for a given project.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          source map archive belongs to.
+        :pparam string project_slug: the slug of the project to list the
+                                     source map archives of.
+        :qparam string query: If set, this parameter is used to locate source map archives with.
+        :auth: required
+        """
+        query = request.GET.get("query")
+
+        try:
+            queryset = (
+                Release.objects.filter(projects=project, organization_id=project.organization_id)
+                .annotate(
+                    has_file=Exists(
+                        ReleaseFile.objects.filter(release=OuterRef("id")).values_list("id")
+                    )
+                )
+                .values("id", "version", "date_added")
+                .filter(has_file=True)
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if query:
+            query_q = Q(version__icontains=query)
+
+            suffix_match = _release_suffix.match(query)
+            if suffix_match is not None:
+                query_q |= Q(version__icontains="%s+%s" % suffix_match.groups())
+
+            queryset = queryset.filter(query_q)
+
+        def expose_release(release, count):
+            return {
+                "type": "release",
+                "id": release["id"],
+                "name": release["version"],
+                "date": release["date_added"],
+                "fileCount": count,
+            }
+
+        def serialize_results(results):
+            file_counts = (
+                Release.objects.filter(id__in=[r["id"] for r in results])
+                .annotate(count=Count("releasefile"))
+                .values("count", "id")
+            )
+            file_count_map = {r["id"]: r["count"] for r in file_counts}
+            return serialize(
+                [expose_release(r, file_count_map[r["id"]]) for r in results], request.user
+            )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by="-date_added",
+            paginator_cls=OffsetPaginator,
+            default_per_page=10,
+            on_results=serialize_results,
+        )
+
+    def delete(self, request, project):
+        """
+        Delete an Archive
+        ```````````````````````````````````````````````````
+
+        Delete all artifacts inside given archive.
+
+        :pparam string organization_slug: the slug of the organization the
+                                            archive belongs to.
+        :pparam string project_slug: the slug of the project to delete the
+                                        archive of.
+        :qparam string id: The id of the archive to delete.
+        :auth: required
+        """
+        # TODO: wip, we need to delete release_file.file too (in async way)
+        return Response(status=404)
+
+        archive_id = request.GET.get("id")
+
+        if archive_id:
+            with transaction.atomic():
+                release = Release.objects.get(
+                    organization_id=project.organization_id, projects=project, id=archive_id
+                )
+                if release is not None:
+                    release_files = ReleaseFile.objects.filter(release=release)
+                    # TODO: do we need to delete release_file.file too?
+                    # src/sentry/api/endpoints/project_release_file_details.py:191
+                    release_files.delete()
+                    return Response(status=204)
+
+        return Response(status=404)
diff --git a/src/sentry/api/endpoints/project_release_files.py b/src/sentry/api/endpoints/project_release_files.py
index 4662b5405e..8407721eff 100644
--- a/src/sentry/api/endpoints/project_release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import re
 import logging
 from django.db import IntegrityError, transaction
+from django.db.models import Q
 from six import BytesIO
 from rest_framework.response import Response
 
@@ -67,8 +68,11 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
         :pparam string project_slug: the slug of the project to list the
                                      release files of.
         :pparam string version: the version identifier of the release.
+        :qparam string query: If set, this parameter is used to search files.
         :auth: required
         """
+        query = request.GET.get("query")
+
         try:
             release = Release.objects.get(
                 organization_id=project.organization_id, projects=project, version=version
@@ -80,6 +84,9 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
             ReleaseFile.objects.filter(release=release).select_related("file").order_by("name")
         )
 
+        if query:
+            file_list = file_list.filter(Q(name__icontains=query))
+
         return self.paginate(
             request=request,
             queryset=file_list,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 2b70fad573..bb543e4fa5 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -22,6 +22,7 @@ from .endpoints.data_scrubbing_selector_suggestions import DataScrubbingSelector
 from .endpoints.debug_files import (
     AssociateDSymFilesEndpoint,
     DebugFilesEndpoint,
+    SourceMapsEndpoint,
     DifAssembleEndpoint,
     UnknownDebugFilesEndpoint,
 )
@@ -1264,6 +1265,11 @@ urlpatterns = [
                     DebugFilesEndpoint.as_view(),
                     name="sentry-api-0-dsym-files",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/files/source-maps/$",
+                    SourceMapsEndpoint.as_view(),
+                    name="sentry-api-0-source-maps",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/files/difs/assemble/$",
                     DifAssembleEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 6e5de2dcf6..77c56c5cc0 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -433,7 +433,26 @@ function routes() {
           )
         }
         component={errorHandler(LazyLoad)}
-      />
+      >
+        <IndexRoute
+          componentPromise={() =>
+            import(
+              /* webpackChunkName: "ProjectSourceMapsList" */ 'app/views/settings/projectSourceMaps/list'
+            )
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          path=":version/"
+          name={t('Archive')}
+          componentPromise={() =>
+            import(
+              /* webpackChunkName: "ProjectSourceMapsDetail" */ 'app/views/settings/projectSourceMaps/detail'
+            )
+          }
+          component={errorHandler(LazyLoad)}
+        />
+      </Route>
       <Route
         path="processing-issues/"
         name="Processing Issues"
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 5fd27ffa9b..99bc75f472 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -907,6 +907,7 @@ type ReleaseData = {
   owner?: any; // TODO(ts)
   newGroups: number;
   versionInfo: VersionInfo;
+  fileCount: number | null;
 };
 
 type BaseRelease = {
@@ -1280,4 +1281,22 @@ export type EventGroupVariant = {
   config?: EventGroupingConfig;
 };
 
+export type SourceMapsArchive = {
+  id: number;
+  type: 'release';
+  name: string;
+  date: string;
+  fileCount: number;
+};
+
+export type Artifact = {
+  dateCreated: string;
+  dist: string | null;
+  id: string;
+  name: string;
+  sha1: string;
+  size: number;
+  headers: {'Content-Type': string};
+};
+
 export type EventGroupInfo = Record<EventGroupVariantKey, EventGroupVariant>;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx
index 2b89cd1abc..250d1f76d9 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/artifacts/index.tsx
@@ -42,7 +42,9 @@ class ReleaseArtifacts extends AsyncView<Props> {
       <React.Fragment>
         <Feature features={['artifacts-in-settings']}>
           <AlertLink
-            to={`/settings/${organization.slug}/projects/${project.slug}/source-maps/`}
+            to={`/settings/${organization.slug}/projects/${
+              project.slug
+            }/source-maps/${encodeURIComponent(params.release)}/`}
             priority="info"
           >
             {tct('Artifacts were moved to [sourceMaps] in Settings.', {
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx
index 80805d76c1..b991e246a0 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/projectReleaseDetails.tsx
@@ -56,7 +56,11 @@ const ProjectReleaseDetails = ({release, releaseMeta, orgSlug, projectSlug}: Pro
             <StyledTr>
               <TagKey>{t('Source Maps')}</TagKey>
               <TagValue>
-                <Link to={`/settings/${orgSlug}/projects/${projectSlug}/source-maps/`}>
+                <Link
+                  to={`/settings/${orgSlug}/projects/${projectSlug}/source-maps/${encodeURIComponent(
+                    version
+                  )}/`}
+                >
                   <Count value={releaseMeta.releaseFileCount} />{' '}
                   {tn('file uploaded', 'files uploaded', releaseMeta.releaseFileCount)}
                 </Link>
diff --git a/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx
index 505a65a18f..6e9342e80e 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDebugFiles/index.tsx
@@ -216,7 +216,7 @@ class ProjectDebugSymbols extends AsyncView<Props, State> {
           headers={[
             t('Debug ID'),
             t('Information'),
-            <TextRight key="actions">{t('Actions')}</TextRight>,
+            <Actions key="actions">{t('Actions')}</Actions>,
           ]}
           emptyMessage={this.getEmptyMessage()}
           isEmpty={debugFiles?.length === 0}
@@ -234,7 +234,7 @@ const StyledPanelTable = styled(PanelTable)`
   grid-template-columns: 37% 1fr auto;
 `;
 
-const TextRight = styled('div')`
+const Actions = styled('div')`
   text-align: right;
 `;
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectProguard/projectProguard.tsx b/src/sentry/static/sentry/app/views/settings/projectProguard/projectProguard.tsx
index acc923747c..59b756f819 100644
--- a/src/sentry/static/sentry/app/views/settings/projectProguard/projectProguard.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectProguard/projectProguard.tsx
@@ -164,7 +164,7 @@ class ProjectProguard extends AsyncView<Props, State> {
           headers={[
             t('Debug ID'),
             t('Information'),
-            <TextRight key="actions">{t('Actions')}</TextRight>,
+            <Actions key="actions">{t('Actions')}</Actions>,
           ]}
           emptyMessage={this.getEmptyMessage()}
           isEmpty={mappings?.length === 0}
@@ -182,7 +182,7 @@ const StyledPanelTable = styled(PanelTable)`
   grid-template-columns: 37% 1fr auto;
 `;
 
-const TextRight = styled('div')`
+const Actions = styled('div')`
   text-align: right;
 `;
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/detail/index.tsx b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/detail/index.tsx
new file mode 100644
index 0000000000..52577cae17
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/detail/index.tsx
@@ -0,0 +1,204 @@
+import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import {Organization, Project, Artifact} from 'app/types';
+import routeTitleGen from 'app/utils/routeTitle';
+import SearchBar from 'app/components/searchBar';
+import Pagination from 'app/components/pagination';
+import {PanelTable} from 'app/components/panels';
+import space from 'app/styles/space';
+import {formatVersion} from 'app/utils/formatters';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import Button from 'app/components/button';
+import ButtonBar from 'app/components/buttonBar';
+import {IconReleases, IconChevron} from 'app/icons';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+import {decodeScalar} from 'app/utils/queryString';
+
+import SourceMapsArtifactRow from './sourceMapsArtifactRow';
+
+type RouteParams = {orgId: string; projectId: string; version: string};
+
+type Props = RouteComponentProps<RouteParams, {}> & {
+  organization: Organization;
+  project: Project;
+};
+
+type State = AsyncView['state'] & {
+  artifacts: Artifact[];
+};
+
+class ProjectSourceMaps extends AsyncView<Props, State> {
+  getTitle() {
+    const {projectId, version} = this.props.params;
+
+    return routeTitleGen(t('Source Maps %s', formatVersion(version)), projectId, false);
+  }
+
+  getDefaultState(): State {
+    return {
+      ...super.getDefaultState(),
+      artifacts: [],
+    };
+  }
+
+  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
+    return [['artifacts', this.getArtifactsUrl(), {query: {query: this.getQuery()}}]];
+  }
+
+  getArtifactsUrl() {
+    const {orgId, projectId, version} = this.props.params;
+
+    return `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
+      version
+    )}/files/`;
+  }
+
+  handleSearch = (query: string) => {
+    const {location, router} = this.props;
+
+    router.push({
+      ...location,
+      query: {...location.query, cursor: undefined, query},
+    });
+  };
+
+  handleDelete = async (id: string) => {
+    addLoadingMessage(t('Removing artifact\u2026'));
+
+    try {
+      await this.api.requestPromise(`${this.getArtifactsUrl()}${id}/`, {
+        method: 'DELETE',
+      });
+      this.fetchData();
+      addSuccessMessage(t('Artifact removed.'));
+    } catch {
+      addErrorMessage(t('Unable to remove artifact. Please try again.'));
+    }
+  };
+
+  getQuery() {
+    const {query} = this.props.location.query;
+
+    return decodeScalar(query);
+  }
+
+  getEmptyMessage() {
+    if (this.getQuery()) {
+      return t('There are no artifacts that match your search.');
+    }
+
+    return t('There are no artifacts for this release.');
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderArtifacts() {
+    const {artifacts} = this.state;
+    const artifactApiUrl = this.api.baseUrl + this.getArtifactsUrl();
+
+    if (!artifacts.length) {
+      return null;
+    }
+
+    return artifacts.map(artifact => {
+      return (
+        <SourceMapsArtifactRow
+          key={artifact.id}
+          artifact={artifact}
+          onDelete={this.handleDelete}
+          downloadUrl={`${artifactApiUrl}${artifact.id}/?download=1`}
+        />
+      );
+    });
+  }
+
+  renderBody() {
+    const {loading, artifacts, artifactsPageLinks} = this.state;
+    const {version, orgId, projectId} = this.props.params;
+    const {project} = this.props;
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader
+          title={t('Source Maps Archive %s', formatVersion(version))}
+          action={
+            <ButtonBar gap={1}>
+              <Button
+                size="small"
+                to={`/settings/${orgId}/projects/${projectId}/source-maps/`}
+                icon={<IconChevron size="xs" direction="left" />}
+              >
+                {t('All Archives')}
+              </Button>
+              <Button
+                size="small"
+                to={`/organizations/${orgId}/releases/${encodeURIComponent(
+                  version
+                )}/?project=${project.id}`}
+                icon={<IconReleases size="xs" />}
+              >
+                {t('View Release')}
+              </Button>
+            </ButtonBar>
+          }
+        />
+
+        <Wrapper>
+          <TextBlock noMargin>{t('Uploaded artifacts')}:</TextBlock>
+          <SearchBar
+            placeholder={t('Filter artifacts')}
+            onSearch={this.handleSearch}
+            query={this.getQuery()}
+          />
+        </Wrapper>
+
+        <StyledPanelTable
+          headers={[
+            t('Artifact'),
+            t('Size'),
+            <Actions key="actions">{t('Actions')}</Actions>,
+          ]}
+          emptyMessage={this.getEmptyMessage()}
+          isEmpty={artifacts.length === 0}
+          isLoading={loading}
+        >
+          {this.renderArtifacts()}
+        </StyledPanelTable>
+        <Pagination pageLinks={artifactsPageLinks} />
+      </React.Fragment>
+    );
+  }
+}
+
+const StyledPanelTable = styled(PanelTable)`
+  grid-template-columns: 1fr 100px 150px;
+`;
+
+const Actions = styled('div')`
+  text-align: right;
+`;
+
+const Wrapper = styled('div')`
+  display: grid;
+  grid-template-columns: auto minmax(200px, 400px);
+  grid-gap: ${space(4)};
+  align-items: center;
+  margin-bottom: ${space(1)};
+  margin-top: ${space(1)};
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    display: block;
+  }
+`;
+
+export default ProjectSourceMaps;
diff --git a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/detail/sourceMapsArtifactRow.tsx b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/detail/sourceMapsArtifactRow.tsx
new file mode 100644
index 0000000000..fb7704cf80
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/detail/sourceMapsArtifactRow.tsx
@@ -0,0 +1,115 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import TimeSince from 'app/components/timeSince';
+import Button from 'app/components/button';
+import {IconClock, IconDelete, IconDownload} from 'app/icons';
+import ButtonBar from 'app/components/buttonBar';
+import FileSize from 'app/components/fileSize';
+import {Artifact} from 'app/types';
+import LinkWithConfirmation from 'app/components/links/linkWithConfirmation';
+import Access from 'app/components/acl/access';
+import Tooltip from 'app/components/tooltip';
+
+import Tag from '../../components/tag';
+
+type Props = {
+  artifact: Artifact;
+  onDelete: (id: string) => void;
+  downloadUrl: string;
+};
+
+const SourceMapsArtifactRow = ({artifact, onDelete, downloadUrl}: Props) => {
+  const {name, size, dateCreated, dist, id} = artifact;
+
+  const handleDeleteClick = () => {
+    onDelete(id);
+  };
+
+  return (
+    <React.Fragment>
+      <Column>
+        <Name>{name || `(${t('empty')})`}</Name>
+        <TimeAndDistWrapper>
+          <TimeWrapper>
+            <IconClock size="xs" />
+            <TimeSince date={dateCreated} />
+          </TimeWrapper>
+          {dist && <Tag inline>{dist}</Tag>}
+        </TimeAndDistWrapper>
+      </Column>
+      <Column>
+        <FileSize bytes={size} />
+      </Column>
+      <RightColumn>
+        <ButtonBar gap={0.5}>
+          <Access access={['project:write']}>
+            {({hasAccess}) => (
+              <Tooltip
+                title={t(
+                  'You do not have the required permission to download this artifact.'
+                )}
+                disabled={hasAccess}
+              >
+                <Button
+                  size="xsmall"
+                  icon={<IconDownload size="xs" />}
+                  disabled={!hasAccess}
+                  href={downloadUrl}
+                >
+                  {t('Download')}
+                </Button>
+              </Tooltip>
+            )}
+          </Access>
+          <LinkWithConfirmation
+            title={t('Delete artifact')}
+            message={t('Are you sure you want to remove this artifact?')}
+            onConfirm={handleDeleteClick}
+          >
+            <Button size="xsmall" icon={<IconDelete size="xs" />} priority="danger" />
+          </LinkWithConfirmation>
+        </ButtonBar>
+      </RightColumn>
+    </React.Fragment>
+  );
+};
+
+const Column = styled('div')`
+  display: flex;
+  flex-direction: column;
+  align-items: flex-start;
+  justify-content: center;
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+const RightColumn = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  align-items: center;
+`;
+
+const Name = styled('div')`
+  padding-right: ${space(4)};
+  overflow-wrap: break-word;
+  word-break: break-all;
+`;
+
+const TimeAndDistWrapper = styled('div')`
+  width: 100%;
+  display: flex;
+  margin-top: ${space(1)};
+  align-items: center;
+`;
+
+const TimeWrapper = styled('div')`
+  display: grid;
+  grid-gap: ${space(0.5)};
+  grid-template-columns: min-content 1fr;
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray600};
+`;
+
+export default SourceMapsArtifactRow;
diff --git a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/index.tsx b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/index.tsx
index b4229c9071..1d3ea10fa8 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/index.tsx
@@ -1,14 +1,23 @@
 import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {t} from 'app/locale';
 import {PageContent} from 'app/styles/organization';
 import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
 import withOrganization from 'app/utils/withOrganization';
+import {Organization, Project} from 'app/types';
 
-import ProjectSourceMaps from './projectSourceMaps';
+type RouteParams = {
+  orgId: string;
+};
 
-class ProjectSourceMapsContainer extends React.Component<ProjectSourceMaps['props']> {
+type Props = RouteComponentProps<RouteParams, {}> & {
+  organization: Organization;
+  project: Project;
+};
+
+class ProjectSourceMapsContainer extends React.Component<Props> {
   renderNoAccess() {
     return (
       <PageContent>
@@ -18,7 +27,7 @@ class ProjectSourceMapsContainer extends React.Component<ProjectSourceMaps['prop
   }
 
   render() {
-    const {organization} = this.props;
+    const {children, project, organization} = this.props;
 
     return (
       <Feature
@@ -26,7 +35,8 @@ class ProjectSourceMapsContainer extends React.Component<ProjectSourceMaps['prop
         organization={organization}
         renderDisabled={this.renderNoAccess}
       >
-        <ProjectSourceMaps {...this.props} />
+        {React.isValidElement(children) &&
+          React.cloneElement(children, {organization, project})}
       </Feature>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/list/index.tsx b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/list/index.tsx
new file mode 100644
index 0000000000..bf8d9a4948
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/list/index.tsx
@@ -0,0 +1,182 @@
+import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import {Organization, Project, SourceMapsArchive} from 'app/types';
+import routeTitleGen from 'app/utils/routeTitle';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import SearchBar from 'app/components/searchBar';
+import Pagination from 'app/components/pagination';
+import {PanelTable} from 'app/components/panels';
+import space from 'app/styles/space';
+import {decodeScalar} from 'app/utils/queryString';
+import {
+  addLoadingMessage,
+  addSuccessMessage,
+  addErrorMessage,
+} from 'app/actionCreators/indicator';
+
+import SourceMapsArchiveRow from './sourceMapsArchiveRow';
+
+type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
+  organization: Organization;
+  project: Project;
+};
+
+type State = AsyncView['state'] & {
+  archives: SourceMapsArchive[];
+};
+
+class ProjectSourceMaps extends AsyncView<Props, State> {
+  getTitle() {
+    const {projectId} = this.props.params;
+
+    return routeTitleGen(t('Source Maps'), projectId, false);
+  }
+
+  getDefaultState(): State {
+    return {
+      ...super.getDefaultState(),
+      archives: [],
+    };
+  }
+
+  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
+    return [['archives', this.getArchivesUrl(), {query: {query: this.getQuery()}}]];
+  }
+
+  getArchivesUrl() {
+    const {orgId, projectId} = this.props.params;
+
+    return `/projects/${orgId}/${projectId}/files/source-maps/`;
+  }
+
+  handleSearch = (query: string) => {
+    const {location, router} = this.props;
+
+    router.push({
+      ...location,
+      query: {...location.query, cursor: undefined, query},
+    });
+  };
+
+  handleDelete = async (id: number) => {
+    addLoadingMessage(t('Removing archive\u2026'));
+    try {
+      await this.api.requestPromise(this.getArchivesUrl(), {
+        method: 'DELETE',
+        query: {id},
+      });
+      this.fetchData();
+      addSuccessMessage(t('Archive removed.'));
+    } catch {
+      addErrorMessage(t('Unable to remove archive. Please try again.'));
+    }
+  };
+
+  getQuery() {
+    const {query} = this.props.location.query;
+
+    return decodeScalar(query);
+  }
+
+  getEmptyMessage() {
+    if (this.getQuery()) {
+      return t('There are no archives that match your search.');
+    }
+
+    return t('There are no archives for this project.');
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderMappings() {
+    const {archives} = this.state;
+    const {params} = this.props;
+    const {orgId, projectId} = params;
+
+    if (!archives.length) {
+      return null;
+    }
+
+    return archives.map(a => {
+      return (
+        <SourceMapsArchiveRow
+          key={a.name}
+          archive={a}
+          orgId={orgId}
+          projectId={projectId}
+          onDelete={this.handleDelete}
+        />
+      );
+    });
+  }
+
+  renderBody() {
+    const {loading, archives, archivesPageLinks} = this.state;
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title={t('Source Maps')} />
+
+        <TextBlock>
+          {t(
+            `Source Maps lets you view source code context obtained from stack traces in their original un-transformed form, which is particularly useful for debugging minified code, or transpiled code from a higher-level language.
+            `
+          )}
+        </TextBlock>
+
+        <Wrapper>
+          <TextBlock noMargin>{t('Uploaded archives')}:</TextBlock>
+
+          <SearchBar
+            placeholder={t('Filter archives')}
+            onSearch={this.handleSearch}
+            query={this.getQuery()}
+          />
+        </Wrapper>
+
+        <StyledPanelTable
+          headers={[
+            t('Archive'),
+            t('Artifacts'),
+            <Actions key="actions">{t('Actions')}</Actions>,
+          ]}
+          emptyMessage={this.getEmptyMessage()}
+          isEmpty={archives.length === 0}
+          isLoading={loading}
+        >
+          {this.renderMappings()}
+        </StyledPanelTable>
+        <Pagination pageLinks={archivesPageLinks} />
+      </React.Fragment>
+    );
+  }
+}
+
+const StyledPanelTable = styled(PanelTable)`
+  grid-template-columns: 1fr 100px 150px;
+`;
+
+const Actions = styled('div')`
+  text-align: right;
+`;
+
+const Wrapper = styled('div')`
+  display: grid;
+  grid-template-columns: auto minmax(200px, 400px);
+  grid-gap: ${space(4)};
+  align-items: center;
+  margin-top: ${space(4)};
+  margin-bottom: ${space(1)};
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    display: block;
+  }
+`;
+
+export default ProjectSourceMaps;
diff --git a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/list/sourceMapsArchiveRow.tsx b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/list/sourceMapsArchiveRow.tsx
new file mode 100644
index 0000000000..d7ed01354f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/list/sourceMapsArchiveRow.tsx
@@ -0,0 +1,88 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {SourceMapsArchive} from 'app/types';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import TimeSince from 'app/components/timeSince';
+import Button from 'app/components/button';
+import {IconClock, IconFile, IconDelete} from 'app/icons';
+import ButtonBar from 'app/components/buttonBar';
+import Version from 'app/components/version';
+import Count from 'app/components/count';
+import Confirm from 'app/components/confirm';
+import Link from 'app/components/links/link';
+
+type Props = {
+  archive: SourceMapsArchive;
+  orgId: string;
+  projectId: string;
+  onDelete: (id: number) => void;
+};
+
+const SourceMapsArchiveRow = ({archive, orgId, projectId, onDelete}: Props) => {
+  const {id, name, date, fileCount} = archive;
+  const archiveLink = `/settings/${orgId}/projects/${projectId}/source-maps/${encodeURIComponent(
+    name
+  )}`;
+  return (
+    <React.Fragment>
+      <Column>
+        <Name>
+          <Link to={archiveLink}>
+            <Version version={name} anchor={false} truncate />
+          </Link>
+        </Name>
+        <TimeWrapper>
+          <IconClock size="xs" />
+          <TimeSince date={date} />
+        </TimeWrapper>
+      </Column>
+      <Column>
+        <Count value={fileCount} />
+      </Column>
+      <RightColumn>
+        <ButtonBar gap={0.5}>
+          <Button size="xsmall" icon={<IconFile size="xs" />} to={archiveLink}>
+            {t('Open')}
+          </Button>
+          <Confirm
+            onConfirm={() => onDelete(id)}
+            message={t('Are you sure you want to remove all artifacts in this archive?')}
+          >
+            <Button size="xsmall" icon={<IconDelete size="xs" />} priority="danger" />
+          </Confirm>
+        </ButtonBar>
+      </RightColumn>
+    </React.Fragment>
+  );
+};
+
+const Column = styled('div')`
+  display: flex;
+  flex-direction: column;
+  align-items: flex-start;
+  justify-content: center;
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+const RightColumn = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  align-items: center;
+`;
+
+const Name = styled('div')`
+  max-width: 100%;
+`;
+
+const TimeWrapper = styled('div')`
+  display: grid;
+  grid-gap: ${space(0.5)};
+  grid-template-columns: min-content 1fr;
+  margin-top: ${space(1)};
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray600};
+`;
+
+export default SourceMapsArchiveRow;
diff --git a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/projectSourceMaps.tsx b/src/sentry/static/sentry/app/views/settings/projectSourceMaps/projectSourceMaps.tsx
deleted file mode 100644
index 34276581e8..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectSourceMaps/projectSourceMaps.tsx
+++ /dev/null
@@ -1,52 +0,0 @@
-import {RouteComponentProps} from 'react-router/lib/Router';
-import React from 'react';
-
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import {Organization, Project} from 'app/types';
-import routeTitleGen from 'app/utils/routeTitle';
-
-type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
-  organization: Organization;
-  project: Project;
-};
-
-type State = AsyncView['state'] & {
-  //
-};
-
-class ProjectSourceMaps extends AsyncView<Props, State> {
-  getTitle() {
-    const {projectId} = this.props.params;
-
-    return routeTitleGen(t('Source Maps'), projectId, false);
-  }
-
-  getDefaultState(): State {
-    return {
-      ...super.getDefaultState(),
-      //
-    };
-  }
-
-  getEndpoints() {
-    const endpoints: ReturnType<AsyncView['getEndpoints']> = [];
-
-    return endpoints;
-  }
-
-  renderLoading() {
-    return this.renderBody();
-  }
-
-  renderBody() {
-    return (
-      <React.Fragment>
-        <SettingsPageHeader title={t('Source Maps')} />
-      </React.Fragment>
-    );
-  }
-}
-
-export default ProjectSourceMaps;
diff --git a/tests/sentry/api/endpoints/test_debug_files.py b/tests/sentry/api/endpoints/test_debug_files.py
index 3cfd4ebfe9..313e42264c 100644
--- a/tests/sentry/api/endpoints/test_debug_files.py
+++ b/tests/sentry/api/endpoints/test_debug_files.py
@@ -8,7 +8,7 @@ from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
-from sentry.models import ProjectDebugFile
+from sentry.models import ProjectDebugFile, Release, ReleaseFile, File
 
 # This is obviously a freely generated UUID and not the checksum UUID.
 # This is permissible if users want to send different UUIDs
@@ -268,3 +268,64 @@ class DebugFilesUploadTest(APITestCase):
         assert response.status_code == 200, response.content
         dsyms = response.data
         assert len(dsyms) == 20
+
+    def test_source_maps(self):
+        project = self.create_project(name="foo")
+
+        release = Release.objects.create(organization_id=project.organization_id, version="1")
+        Release.objects.create(organization_id=project.organization_id, version="2")
+        release.add_project(project)
+
+        ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(name="application.js", type="release.file"),
+            name="http://example.com/application.js",
+        )
+        ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(name="application2.js", type="release.file"),
+            name="http://example.com/application2.js",
+        )
+
+        url = reverse(
+            "sentry-api-0-source-maps",
+            kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
+        )
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["name"] == text_type(release.version)
+        assert response.data[0]["fileCount"] == 2
+
+    # TODO: endpoint is wip
+    # def test_source_maps_delete_archive(self):
+    #     project = self.create_project(name="foo")
+
+    #     release = Release.objects.create(
+    #         organization_id=project.organization_id, version="1", id="1"
+    #     )
+    #     release.add_project(project)
+
+    #     ReleaseFile.objects.create(
+    #         organization_id=project.organization_id,
+    #         release=release,
+    #         file=File.objects.create(name="application.js", type="release.file"),
+    #         name="http://example.com/application.js",
+    #     )
+
+    #     url = reverse(
+    #         "sentry-api-0-source-maps",
+    #         kwargs={"organization_slug": project.organization.slug, "project_slug": project.slug},
+    #     )
+
+    #     self.login_as(user=self.user)
+
+    #     response = self.client.delete(url + "?id=1")
+    #     assert response.status_code == 204
+    #     assert not ReleaseFile.objects.filter(release=release).exists()
