commit 99ce25b17cb997ec2da254ca5a48466411dcfbfe
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Oct 8 12:29:26 2018 -0700

    ref(integrations): Allow migrating repos via dropdown (#10008)
    
    * ref(integrations): Allow migrating repos via dropdown

diff --git a/src/sentry/api/serializers/models/repository.py b/src/sentry/api/serializers/models/repository.py
index bea96f4fda..cf5fb0dbcf 100644
--- a/src/sentry/api/serializers/models/repository.py
+++ b/src/sentry/api/serializers/models/repository.py
@@ -9,6 +9,9 @@ from sentry.models import Repository
 @register(Repository)
 class RepositorySerializer(Serializer):
     def serialize(self, obj, attrs, user):
+        integration_id = None
+        if obj.integration_id:
+            integration_id = six.text_type(obj.id)
         if obj.provider:
             provider = {
                 'id': obj.provider,
@@ -26,5 +29,5 @@ class RepositorySerializer(Serializer):
             'provider': provider,
             'status': obj.get_status_display(),
             'dateCreated': obj.date_added,
-            'integrationId': six.text_type(obj.integration_id),
+            'integrationId': integration_id,
         }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index 7d54212791..c8e3a33cc5 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -99,16 +99,23 @@ export default class IntegrationRepos extends AsyncComponent {
     let {integration} = this.props;
     let orgId = this.context.organization.slug;
     let {itemList} = this.state;
+    let migratableRepo = itemList.filter(item => selection.value === item.name)[0];
+    let path = migratableRepo
+      ? `/organizations/${orgId}/repos/${migratableRepo.id}/`
+      : `/organizations/${orgId}/repos/`;
+    let data = migratableRepo
+      ? {integrationId: integration.id}
+      : {
+          installation: integration.id,
+          identifier: selection.value,
+          provider: `integrations:${integration.provider.key}`,
+        };
+    let method = migratableRepo ? 'PUT' : 'POST';
     let saveIndicator = IndicatorStore.add(t('Adding repository...'));
     this.setState({adding: true});
-
-    this.api.request(`/organizations/${orgId}/repos/`, {
-      data: {
-        installation: integration.id,
-        identifier: selection.value,
-        provider: `integrations:${integration.provider.key}`,
-      },
-      method: 'POST',
+    this.api.request(path, {
+      data,
+      method,
       success: repo => {
         this.setState({itemList: itemList.concat(repo)});
         IndicatorStore.addSuccess(
@@ -117,8 +124,8 @@ export default class IntegrationRepos extends AsyncComponent {
           })
         );
       },
-      error: data => {
-        let text = data.responseJSON.errors
+      error: errorData => {
+        let text = errorData.responseJSON.errors
           ? data.responseJSON.errors.__all__
           : t('Unable to add repository.');
         IndicatorStore.addError(text);
@@ -184,8 +191,10 @@ export default class IntegrationRepos extends AsyncComponent {
         </DropdownButton>
       );
     }
-    const repositories = new Set(this.state.itemList.map(i => i.name));
-    const repositoryOptions = (this.state.integrationRepos.repos || []).filter(
+    const repositories = new Set(
+      this.state.itemList.filter(item => item.integrationId).map(i => i.name)
+    );
+    let repositoryOptions = (this.state.integrationRepos.repos || []).filter(
       repo => !repositories.has(repo.identifier)
     );
     let items = repositoryOptions.map(repo => {
diff --git a/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx b/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
new file mode 100644
index 0000000000..d1c1dce4a6
--- /dev/null
+++ b/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
@@ -0,0 +1,61 @@
+/*global global*/
+import React from 'react';
+
+import {Client} from 'app/api';
+import {mount} from 'enzyme';
+import IntegrationRepos from 'app/views/organizationIntegrations/integrationRepos';
+
+describe('IntegrationRepos', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  describe('Adding repositories', function() {
+    const org = TestStubs.Organization();
+    const integration = TestStubs.GitHubIntegration();
+    const routerContext = TestStubs.routerContext();
+
+    describe('migratable repo', function() {
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/repos/`,
+        body: [
+          {
+            name: 'foo/bar',
+            id: 2,
+            integrationId: null,
+            provider: {
+              name: 'GitHub',
+              id: 'integrations:github',
+              status: 'active',
+              url: 'github.com/foo/bar',
+            },
+          },
+        ],
+      });
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/integrations/${integration.id}/repos/`,
+        body: {repos: [{identifier: 'foo/bar', name: 'foo'}]},
+      });
+      const wrapper = mount(
+        <IntegrationRepos integration={integration} />,
+        routerContext
+      );
+
+      it('associates repository with integration', () => {
+        const updateRepo = Client.addMockResponse({
+          method: 'PUT',
+          url: `/organizations/${org.slug}/repos/${2}/`,
+          body: {},
+        });
+        wrapper.find('DropdownButton').simulate('click');
+        wrapper.find('StyledListElement').simulate('click');
+        expect(updateRepo).toHaveBeenCalledWith(
+          `/organizations/${org.slug}/repos/${2}/`,
+          expect.objectContaining({
+            data: {integrationId: '1'},
+          })
+        );
+      });
+    });
+  });
+});
