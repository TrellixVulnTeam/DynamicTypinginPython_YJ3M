commit 02dd45aa69ee632767a63c082ff31225aaf16200
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Feb 23 10:48:35 2017 -0800

    stop creating duplicate environments in organization (#4968)

diff --git a/src/sentry/api/endpoints/group_environment_details.py b/src/sentry/api/endpoints/group_environment_details.py
index a718fbe737..58ec014831 100644
--- a/src/sentry/api/endpoints/group_environment_details.py
+++ b/src/sentry/api/endpoints/group_environment_details.py
@@ -17,9 +17,11 @@ from sentry.utils.dates import to_datetime
 
 class GroupEnvironmentDetailsEndpoint(GroupEndpoint):
     def get(self, request, group, environment):
+        project = group.project
         try:
             environment = Environment.objects.get(
-                project_id=group.project_id,
+                projects=project,
+                organization_id=project.organization_id,
                 # XXX(dcramer): we have no great way to pass the empty env
                 name='' if environment == 'none' else environment,
             )
diff --git a/src/sentry/api/endpoints/project_environments.py b/src/sentry/api/endpoints/project_environments.py
index 07f34f6a8b..8cc18a86fc 100644
--- a/src/sentry/api/endpoints/project_environments.py
+++ b/src/sentry/api/endpoints/project_environments.py
@@ -10,7 +10,8 @@ from sentry.models import Environment
 class ProjectEnvironmentsEndpoint(ProjectEndpoint):
     def get(self, request, project):
         queryset = Environment.objects.filter(
-            project_id=project.id,
+            projects=project,
+            organization_id=project.organization_id,
         ).order_by('name')
 
         return Response(serialize(list(queryset), request.user))
diff --git a/src/sentry/models/environment.py b/src/sentry/models/environment.py
index 6bc1664212..9b0dc9b220 100644
--- a/src/sentry/models/environment.py
+++ b/src/sentry/models/environment.py
@@ -10,11 +10,13 @@ from __future__ import absolute_import, print_function
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 
+from sentry.app import locks
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
+from sentry.utils.retries import TimedRetryPolicy
 
 
 class EnvironmentProject(Model):
@@ -49,6 +51,10 @@ class Environment(Model):
     def get_cache_key(cls, project_id, name):
         return 'env:1:%s:%s' % (project_id, md5_text(name).hexdigest())
 
+    @classmethod
+    def get_lock_key(cls, organization_id, name):
+        return 'environment:%s:%s' % (organization_id, md5_text(name).hexdigest())
+
     @classmethod
     def get_or_create(cls, project, name):
         name = name or ''
@@ -57,14 +63,34 @@ class Environment(Model):
 
         env = cache.get(cache_key)
         if env is None:
-            env = cls.objects.get_or_create(
-                project_id=project.id,
-                name=name,
-                defaults={'organization_id': project.organization_id}
-            )[0]
-            if env.organization_id is None:
-                env.update(organization_id=project.organization_id)
-            env.add_project(project)
+            try:
+                env = cls.objects.get(
+                    projects=project,
+                    organization_id=project.organization_id,
+                    name=name,
+                )
+            except cls.DoesNotExist:
+                env = cls.objects.filter(
+                    organization_id=project.organization_id,
+                    name=name,
+                ).order_by('date_added').first()
+                if not env:
+                    lock_key = cls.get_lock_key(project.organization_id, name)
+                    lock = locks.get(lock_key, duration=5)
+                    with TimedRetryPolicy(10)(lock.acquire):
+                        try:
+                            env = cls.objects.get(
+                                organization_id=project.organization_id,
+                                name=name,
+                            )
+                        except cls.DoesNotExist:
+                            env = cls.objects.create(
+                                project_id=project.id,
+                                name=name,
+                                organization_id=project.organization_id
+                            )
+                env.add_project(project)
+
             cache.set(cache_key, env, 3600)
 
         return env
diff --git a/tests/sentry/api/endpoints/test_group_environment_details.py b/tests/sentry/api/endpoints/test_group_environment_details.py
index d77ff45d78..79b5a959f4 100644
--- a/tests/sentry/api/endpoints/test_group_environment_details.py
+++ b/tests/sentry/api/endpoints/test_group_environment_details.py
@@ -9,11 +9,12 @@ class GroupEnvironmentDetailsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
-        Environment.objects.create(
+        env = Environment.objects.create(
             project_id=group.project_id,
             organization_id=group.project.organization_id,
             name=''
         )
+        env.add_project(group.project)
 
         url = '/api/0/issues/{}/environments/none/'.format(group.id)
         response = self.client.get(url, format='json')
@@ -28,11 +29,12 @@ class GroupEnvironmentDetailsTest(APITestCase):
 
         group = self.create_group()
 
-        Environment.objects.create(
+        env = Environment.objects.create(
             project_id=group.project_id,
             organization_id=group.project.organization_id,
             name='production',
         )
+        env.add_project(group.project)
 
         url = '/api/0/issues/{}/environments/production/'.format(group.id)
         response = self.client.get(url, format='json')
@@ -47,11 +49,12 @@ class GroupEnvironmentDetailsTest(APITestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        Environment.objects.create(
+        env = Environment.objects.create(
             project_id=group.project_id,
             organization_id=group.project.organization_id,
             name='production',
         )
+        env.add_project(project)
 
         release = Release.objects.create(
             organization_id=project.organization_id,
@@ -79,11 +82,12 @@ class GroupEnvironmentDetailsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
-        Environment.objects.create(
+        env = Environment.objects.create(
             project_id=group.project_id,
             organization_id=group.project.organization_id,
             name=''
         )
+        env.add_project(group.project)
 
         url = '/api/0/issues/{}/environments/doesnotexist/'.format(group.id)
         response = self.client.get(url, format='json')
diff --git a/tests/sentry/api/endpoints/test_project_environments.py b/tests/sentry/api/endpoints/test_project_environments.py
index a66fb38791..3279e53b27 100644
--- a/tests/sentry/api/endpoints/test_project_environments.py
+++ b/tests/sentry/api/endpoints/test_project_environments.py
@@ -10,17 +10,19 @@ class ProjectEnvironmentsTest(APITestCase):
     def test_simple(self):
         project = self.create_project()
 
-        Environment.objects.create(
+        env1 = Environment.objects.create(
             project_id=project.id,
             organization_id=project.organization_id,
             name='production',
         )
+        env1.add_project(project)
 
-        Environment.objects.create(
+        env2 = Environment.objects.create(
             project_id=project.id,
             organization_id=project.organization_id,
             name='staging',
         )
+        env2.add_project(project)
 
         self.login_as(user=self.user)
 
