commit 2328c2d073ecc31debb453b70a8bdda32e9304b5
Author: Mark Story <mark@sentry.io>
Date:   Wed Jul 3 11:17:34 2019 -0400

    chore: Remove unused method parameters (#13850)
    
    These methods don't use their variadic arguments, so they are just noise.
    By normalizing on kwargs we can save some cognitive complexity.

diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index e3c99d9e1a..3109a60755 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -81,23 +81,23 @@ class AuthLoginView(BaseView):
             initial=initial,
         )
 
-    def can_register(self, request, *args, **kwargs):
+    def can_register(self, request):
         return bool(auth.has_user_registration() or request.session.get('can_register'))
 
-    def get_next_uri(self, request, *args, **kwargs):
+    def get_next_uri(self, request):
         next_uri_fallback = None
         if request.session.get('_next') is not None:
             next_uri_fallback = request.session.pop('_next')
         return request.GET.get(REDIRECT_FIELD_NAME, next_uri_fallback)
 
-    def respond_login(self, request, context, *args, **kwargs):
+    def respond_login(self, request, context, **kwargs):
         return self.respond('sentry/login.html', context)
 
-    def handle_basic_auth(self, request, organization=None, *args, **kwargs):
-        can_register = self.can_register(
-            request, organization=organization, *args, **kwargs)
+    def handle_basic_auth(self, request, **kwargs):
+        can_register = self.can_register(request)
 
         op = request.POST.get('op')
+        organization = kwargs.pop('organization', None)
 
         if not op:
             # Detect that we are on the register page by url /register/ and
@@ -194,10 +194,10 @@ class AuthLoginView(BaseView):
         }
         context.update(additional_context.run_callbacks(request))
 
-        return self.respond_login(request, context, organization=organization, *args, **kwargs)
+        return self.respond_login(request, context, **kwargs)
 
-    def handle_authenticated(self, request, *args, **kwargs):
-        next_uri = self.get_next_uri(request, *args, **kwargs)
+    def handle_authenticated(self, request):
+        next_uri = self.get_next_uri(request)
         if auth.is_valid_redirect(next_uri, host=request.get_host()):
             return self.redirect(next_uri)
         return self.redirect_to_org(request)
@@ -208,13 +208,13 @@ class AuthLoginView(BaseView):
         return super(AuthLoginView, self).handle(request, *args, **kwargs)
 
     # XXX(dcramer): OAuth provider hooks this view
-    def get(self, request, *args, **kwargs):
-        next_uri = self.get_next_uri(request, *args, **kwargs)
+    def get(self, request, **kwargs):
+        next_uri = self.get_next_uri(request)
         if request.user.is_authenticated():
             # if the user is a superuser, but not 'superuser authenticated'
             # we allow them to re-authenticate to gain superuser status
             if not request.user.is_superuser or is_active_superuser(request):
-                return self.handle_authenticated(request, *args, **kwargs)
+                return self.handle_authenticated(request)
 
         request.session.set_test_cookie()
 
@@ -232,7 +232,7 @@ class AuthLoginView(BaseView):
             messages.add_message(request, messages.WARNING,
                                  WARN_SESSION_EXPIRED)
 
-        response = self.handle_basic_auth(request, *args, **kwargs)
+        response = self.handle_basic_auth(request, **kwargs)
 
         if session_expired:
             response.delete_cookie('session_expired')
@@ -240,7 +240,7 @@ class AuthLoginView(BaseView):
         return response
 
     # XXX(dcramer): OAuth provider hooks this view
-    def post(self, request, *args, **kwargs):
+    def post(self, request, **kwargs):
         op = request.POST.get('op')
         if op == 'sso' and request.POST.get('organization'):
             auth_provider = self.get_auth_provider(
@@ -254,4 +254,4 @@ class AuthLoginView(BaseView):
 
             return HttpResponseRedirect(next_uri)
 
-        return self.handle_basic_auth(request, *args, **kwargs)
+        return self.handle_basic_auth(request, **kwargs)
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index eadd43e41c..9d18887544 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -67,7 +67,7 @@ class AuthOrganizationLoginView(AuthLoginView):
             messages.add_message(request, messages.WARNING, WARN_SESSION_EXPIRED)
 
         if not auth_provider:
-            response = self.handle_basic_auth(request, organization)
+            response = self.handle_basic_auth(request, organization=organization)
         else:
             response = self.handle_sso(request, organization, auth_provider)
 
diff --git a/src/sentry/web/frontend/oauth_authorize.py b/src/sentry/web/frontend/oauth_authorize.py
index 2f772cea13..adcd21826e 100644
--- a/src/sentry/web/frontend/oauth_authorize.py
+++ b/src/sentry/web/frontend/oauth_authorize.py
@@ -20,7 +20,7 @@ logger = logging.getLogger('sentry.api')
 class OAuthAuthorizeView(AuthLoginView):
     auth_required = False
 
-    def get_next_uri(self, request, *args, **kwargs):
+    def get_next_uri(self, request):
         return request.get_full_path()
 
     def redirect_response(self, response_type, redirect_uri, params):
@@ -54,11 +54,11 @@ class OAuthAuthorizeView(AuthLoginView):
             }
         )
 
-    def respond_login(self, request, context, application, *args, **kwargs):
+    def respond_login(self, request, context, application, **kwargs):
         context['banner'] = u'Connect Sentry to {}'.format(application.name)
         return self.respond('sentry/login.html', context)
 
-    def get(self, request, *args, **kwargs):
+    def get(self, request, **kwargs):
         response_type = request.GET.get('response_type')
         client_id = request.GET.get('client_id')
         redirect_uri = request.GET.get('redirect_uri')
@@ -148,8 +148,7 @@ class OAuthAuthorizeView(AuthLoginView):
         request.session['oa2'] = payload
 
         if not request.user.is_authenticated():
-            return super(OAuthAuthorizeView, self).get(
-                request, application=application, *args, **kwargs)
+            return super(OAuthAuthorizeView, self).get(request, application=application)
 
         if not force_prompt:
             try:
@@ -208,7 +207,7 @@ class OAuthAuthorizeView(AuthLoginView):
         }
         return self.respond('sentry/oauth-authorize.html', context)
 
-    def post(self, request, *args, **kwargs):
+    def post(self, request, **kwargs):
         try:
             payload = request.session['oa2']
         except KeyError:
@@ -233,7 +232,7 @@ class OAuthAuthorizeView(AuthLoginView):
 
         if not request.user.is_authenticated():
             response = super(OAuthAuthorizeView, self).post(
-                request, application=application, *args, **kwargs)
+                request, application=application, **kwargs)
             # once they login, bind their user ID
             if request.user.is_authenticated():
                 request.session['oa2']['uid'] = request.user.id
