commit 6c3c08def4cdccb18bf05f04ea72044bb351bfb1
Author: Mark Story <mark@sentry.io>
Date:   Tue Sep 11 12:57:06 2018 -0400

    feat(auth) add tests for logout request

diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
index e514abed8c..87933c7097 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
@@ -20,153 +20,160 @@ import withApi from 'app/utils/withApi.jsx';
 import SwitchOrganization from './switchOrganization';
 import Divider from './divider.styled';
 
-const SidebarDropdown = withApi(class SidebarDropdown extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    orientation: PropTypes.oneOf(['top', 'left']),
-    collapsed: PropTypes.bool,
-    org: SentryTypes.Organization,
-    user: SentryTypes.User,
-    config: SentryTypes.Config,
-    onClick: PropTypes.func,
-  };
-
-  static defaultProps = {
-    onClick: () => {},
-  };
-
-  handleLogout = (...args) => {
-    let {api} = this.props;
-    api.request('/auth/', {
-      method: 'DELETE',
-      success: (res) => {
-        window.location = '/auth/login';
-      }
-    });
-  };
-
-  render() {
-    let {org, orientation, collapsed, config, user, onClick} = this.props;
-    let hasOrganization = !!org;
-    let hasUser = !!user;
-
-    // If there is no org in context, we use an org from `withLatestContext`
-    // (which uses an org from organizations index endpoint versus details endpoint)
-    // and does not have `access`
-    let hasOrgRead = org && org.access && org.access.indexOf('org:read') > -1;
-    let hasMemberRead = org && org.access && org.access.indexOf('member:read') > -1;
-    let hasTeamRead = org && org.access && org.access.indexOf('team:read') > -1;
-    let canCreateOrg = ConfigStore.get('features').has('organizations:create');
-
-    // Avatar to use: Organization --> user --> Sentry
-    const avatar =
-      hasOrganization || hasUser ? (
-        <StyledAvatar
-          onClick={onClick}
-          collapsed={collapsed}
-          organization={org}
-          user={!org ? user : null}
-          size={32}
-        />
-      ) : (
-        <SentryLink to="/">
-          <InlineSvg css={{fontSize: 32}} src="icon-sentry" />
-        </SentryLink>
-      );
-
-    return (
-      <DropdownMenu>
-        {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
-          return (
-            <SidebarDropdownRoot {...getRootProps({isStyled: true})}>
-              <SidebarDropdownActor
-                data-test-id="sidebar-dropdown"
-                {...getActorProps({isStyled: true})}
-              >
-                <div style={{display: 'flex', alignItems: 'flex-start'}}>
-                  {avatar}
-                  {hasOrganization &&
-                    !collapsed &&
-                    orientation !== 'top' && (
-                      <NameAndOrgWrapper>
-                        <DropdownOrgName>
-                          {org.name} <i className="icon-arrow-down" />
-                        </DropdownOrgName>
-                        <DropdownUserName>{user.name}</DropdownUserName>
-                      </NameAndOrgWrapper>
-                    )}
-                </div>
-              </SidebarDropdownActor>
-
-              {isOpen && (
-                <OrgAndUserMenu {...getMenuProps({isStyled: true, org})}>
-                  {hasOrganization && (
-                    <React.Fragment>
-                      <SidebarOrgSummary organization={org} />
-                      {hasOrgRead && (
-                        <SidebarMenuItem to={`/settings/${org.slug}/`}>
-                          {t('Organization settings')}
-                        </SidebarMenuItem>
-                      )}
-                      {hasMemberRead && (
-                        <SidebarMenuItem to={`/settings/${org.slug}/members/`}>
-                          {t('Members')}
-                        </SidebarMenuItem>
-                      )}
-
-                      {hasTeamRead && (
-                        <SidebarMenuItem to={`/settings/${org.slug}/teams/`}>
-                          {t('Teams')}
-                        </SidebarMenuItem>
+const SidebarDropdown = withApi(
+  class SidebarDropdown extends React.Component {
+    static propTypes = {
+      api: PropTypes.object,
+      orientation: PropTypes.oneOf(['top', 'left']),
+      collapsed: PropTypes.bool,
+      org: SentryTypes.Organization,
+      user: SentryTypes.User,
+      config: SentryTypes.Config,
+      onClick: PropTypes.func,
+    };
+
+    static defaultProps = {
+      onClick: () => {},
+    };
+
+    handleLogout = (...args) => {
+      let {api} = this.props;
+      api.request('/auth/', {
+        method: 'DELETE',
+        success: res => {
+          window.location = '/auth/login';
+        },
+      });
+    };
+
+    render() {
+      let {org, orientation, collapsed, config, user, onClick} = this.props;
+      let hasOrganization = !!org;
+      let hasUser = !!user;
+
+      // If there is no org in context, we use an org from `withLatestContext`
+      // (which uses an org from organizations index endpoint versus details endpoint)
+      // and does not have `access`
+      let hasOrgRead = org && org.access && org.access.indexOf('org:read') > -1;
+      let hasMemberRead = org && org.access && org.access.indexOf('member:read') > -1;
+      let hasTeamRead = org && org.access && org.access.indexOf('team:read') > -1;
+      let canCreateOrg = ConfigStore.get('features').has('organizations:create');
+
+      // Avatar to use: Organization --> user --> Sentry
+      const avatar =
+        hasOrganization || hasUser ? (
+          <StyledAvatar
+            onClick={onClick}
+            collapsed={collapsed}
+            organization={org}
+            user={!org ? user : null}
+            size={32}
+          />
+        ) : (
+          <SentryLink to="/">
+            <InlineSvg css={{fontSize: 32}} src="icon-sentry" />
+          </SentryLink>
+        );
+
+      return (
+        <DropdownMenu>
+          {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
+            return (
+              <SidebarDropdownRoot {...getRootProps({isStyled: true})}>
+                <SidebarDropdownActor
+                  data-test-id="sidebar-dropdown"
+                  {...getActorProps({isStyled: true})}
+                >
+                  <div style={{display: 'flex', alignItems: 'flex-start'}}>
+                    {avatar}
+                    {hasOrganization &&
+                      !collapsed &&
+                      orientation !== 'top' && (
+                        <NameAndOrgWrapper>
+                          <DropdownOrgName>
+                            {org.name} <i className="icon-arrow-down" />
+                          </DropdownOrgName>
+                          <DropdownUserName>{user.name}</DropdownUserName>
+                        </NameAndOrgWrapper>
                       )}
+                  </div>
+                </SidebarDropdownActor>
+
+                {isOpen && (
+                  <OrgAndUserMenu {...getMenuProps({isStyled: true, org})}>
+                    {hasOrganization && (
+                      <React.Fragment>
+                        <SidebarOrgSummary organization={org} />
+                        {hasOrgRead && (
+                          <SidebarMenuItem to={`/settings/${org.slug}/`}>
+                            {t('Organization settings')}
+                          </SidebarMenuItem>
+                        )}
+                        {hasMemberRead && (
+                          <SidebarMenuItem to={`/settings/${org.slug}/members/`}>
+                            {t('Members')}
+                          </SidebarMenuItem>
+                        )}
 
-                      <Hook
-                        name="sidebar:organization-dropdown-menu"
-                        organization={org}
-                        Components={{SidebarMenuItem}}
-                      />
+                        {hasTeamRead && (
+                          <SidebarMenuItem to={`/settings/${org.slug}/teams/`}>
+                            {t('Teams')}
+                          </SidebarMenuItem>
+                        )}
 
-                      {!config.singleOrganization && (
-                        <SidebarMenuItem>
-                          <SwitchOrganization canCreateOrganization={canCreateOrg} />
-                        </SidebarMenuItem>
-                      )}
+                        <Hook
+                          name="sidebar:organization-dropdown-menu"
+                          organization={org}
+                          Components={{SidebarMenuItem}}
+                        />
 
-                      <Divider />
-                    </React.Fragment>
-                  )}
-
-                  {!!user && (
-                    <React.Fragment>
-                      <UserSummary to="/settings/account/details/">
-                        <UserBadgeNoOverflow user={user} avatarSize={32} />
-                      </UserSummary>
-
-                      <div>
-                        <SidebarMenuItem to="/settings/account/">
-                          {t('User settings')}
-                        </SidebarMenuItem>
-                        <SidebarMenuItem to={'/settings/account/api/'}>
-                          {t('API keys')}
-                        </SidebarMenuItem>
-                        {user.isSuperuser && (
-                          <SidebarMenuItem to={'/manage/'}>{t('Admin')}</SidebarMenuItem>
+                        {!config.singleOrganization && (
+                          <SidebarMenuItem>
+                            <SwitchOrganization canCreateOrganization={canCreateOrg} />
+                          </SidebarMenuItem>
                         )}
-                        <SidebarMenuItem onClick={this.handleLogout}>
-                          {t('Sign out')}
-                        </SidebarMenuItem>
-                      </div>
-                    </React.Fragment>
-                  )}
-                </OrgAndUserMenu>
-              )}
-            </SidebarDropdownRoot>
-          );
-        }}
-      </DropdownMenu>
-    );
+
+                        <Divider />
+                      </React.Fragment>
+                    )}
+
+                    {!!user && (
+                      <React.Fragment>
+                        <UserSummary to="/settings/account/details/">
+                          <UserBadgeNoOverflow user={user} avatarSize={32} />
+                        </UserSummary>
+
+                        <div>
+                          <SidebarMenuItem to="/settings/account/">
+                            {t('User settings')}
+                          </SidebarMenuItem>
+                          <SidebarMenuItem to={'/settings/account/api/'}>
+                            {t('API keys')}
+                          </SidebarMenuItem>
+                          {user.isSuperuser && (
+                            <SidebarMenuItem to={'/manage/'}>
+                              {t('Admin')}
+                            </SidebarMenuItem>
+                          )}
+                          <SidebarMenuItem
+                            data-test-id="sidebarSignout"
+                            onClick={this.handleLogout}
+                          >
+                            {t('Sign out')}
+                          </SidebarMenuItem>
+                        </div>
+                      </React.Fragment>
+                    )}
+                  </OrgAndUserMenu>
+                )}
+              </SidebarDropdownRoot>
+            );
+          }}
+        </DropdownMenu>
+      );
+    }
   }
-});
+);
 
 export default SidebarDropdown;
 
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index f3bd91e42e..beb2361084 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -926,17 +926,21 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
         </MenuItemLink>
       </SidebarMenuItem>
       <SidebarMenuItem
+        data-test-id="sidebarSignout"
         onClick={[Function]}
       >
         <MenuItemLink
+          data-test-id="sidebarSignout"
           onClick={[Function]}
         >
           <Component
             className="css-1xkywpr-MenuItemLink e1ru2gxu1"
+            data-test-id="sidebarSignout"
             onClick={[Function]}
           >
             <div
               className="css-1xkywpr-MenuItemLink e1ru2gxu1"
+              data-test-id="sidebarSignout"
               onClick={[Function]}
             >
               <MenuItemLabel
@@ -2101,17 +2105,21 @@ exports[`Sidebar renders without org and router 1`] = `
         </MenuItemLink>
       </SidebarMenuItem>
       <SidebarMenuItem
+        data-test-id="sidebarSignout"
         onClick={[Function]}
       >
         <MenuItemLink
+          data-test-id="sidebarSignout"
           onClick={[Function]}
         >
           <Component
             className="css-1xkywpr-MenuItemLink e1ru2gxu1"
+            data-test-id="sidebarSignout"
             onClick={[Function]}
           >
             <div
               className="css-1xkywpr-MenuItemLink e1ru2gxu1"
+              data-test-id="sidebarSignout"
               onClick={[Function]}
             >
               <MenuItemLabel
diff --git a/tests/js/spec/components/sidebar/index.spec.jsx b/tests/js/spec/components/sidebar/index.spec.jsx
index 488a1c9772..fb0af15a28 100644
--- a/tests/js/spec/components/sidebar/index.spec.jsx
+++ b/tests/js/spec/components/sidebar/index.spec.jsx
@@ -141,6 +141,28 @@ describe('Sidebar', function() {
       expect(wrapper.find('SwitchOrganizationMenu')).toMatchSnapshot();
       jest.useRealTimers();
     });
+
+    it('has can logout', function() {
+      let mock = MockApiClient.addMockResponse({
+        url: '/auth/',
+        method: 'DELETE',
+        status: 204,
+      });
+
+      let org = TestStubs.Organization();
+      org = {
+        ...org,
+        access: [...org.access, 'member:read'],
+      };
+
+      wrapper = createWrapper({
+        organization: org,
+        user: TestStubs.User(),
+      });
+      wrapper.find('SidebarDropdownActor').simulate('click');
+      wrapper.find('SidebarMenuItem[data-test-id="sidebarSignout"]').simulate('click');
+      expect(mock).toHaveBeenCalled();
+    });
   });
 
   describe('SidebarPanel', function() {
