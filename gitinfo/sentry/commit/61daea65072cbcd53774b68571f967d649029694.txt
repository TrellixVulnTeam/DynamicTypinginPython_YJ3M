commit 61daea65072cbcd53774b68571f967d649029694
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 28 22:23:54 2015 -0700

    Remove explore code functionality

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 2c1e745c4c..53e568ab6d 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -751,9 +751,6 @@ SENTRY_RAVEN_JS_URL = 'cdn.ravenjs.com/1.1.20/jquery,native/raven.min.js'
 SENTRY_ENDPOINT = None
 SENTRY_PUBLIC_ENDPOINT = None
 
-# Early draft features. Not slated or public release yet.
-SENTRY_ENABLE_EXPLORE_CODE = False
-
 # Prevent variables (e.g. context locals, http data, etc) from exceeding this
 # size in characters
 SENTRY_MAX_VARIABLE_SIZE = 512
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 233273c713..a7593b981b 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -9,7 +9,6 @@ sentry.tasks.post_process
 from __future__ import absolute_import, print_function
 
 from celery.utils.log import get_task_logger
-from django.conf import settings
 from django.db import IntegrityError, transaction
 
 from sentry.constants import PLATFORM_LIST, PLATFORM_ROOTS
@@ -17,7 +16,6 @@ from sentry.plugins import plugins
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
-from sentry.utils.hashlib import md5
 
 logger = get_task_logger(__name__)
 
@@ -53,9 +51,6 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
 
     _capture_stats(event, is_new)
 
-    if settings.SENTRY_ENABLE_EXPLORE_CODE:
-        record_affected_code.delay(event=event)
-
     record_affected_user.delay(event=event)
 
     record_additional_tags(event=event)
@@ -124,49 +119,3 @@ def record_affected_user(event, **kwargs):
     Group.objects.add_tags(event.group, [
         ('sentry:user', euser.tag_value)
     ])
-
-
-@instrumented_task(
-    name='sentry.tasks.post_process.record_affected_code')
-def record_affected_code(event, **kwargs):
-    from sentry.models import Group
-
-    if not settings.SENTRY_ENABLE_EXPLORE_CODE:
-        return
-
-    data = event.interfaces.get('sentry.interfaces.Exception')
-    if not data:
-        return
-
-    checksum = lambda x: md5(x).hexdigest()
-
-    tags = []
-    for exception in data:
-        if not exception.stacktrace:
-            continue
-
-        for frame in exception.stacktrace:
-            # we only tag explicit app frames to avoid excess fat
-            if not frame.in_app:
-                continue
-
-            filename = frame.filename or frame.module
-            if not filename:
-                continue
-
-            tags.append((
-                'sentry:filename',
-                checksum(filename),
-                {'filename': filename},
-            ))
-
-            function = frame.function
-            if function:
-                tags.append((
-                    'sentry:function',
-                    checksum('%s:%s' % (filename, function)),
-                    {'filename': filename, 'function': function}
-                ))
-
-    if tags:
-        Group.objects.add_tags(event.group, tags)
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 5ad9dd04b8..50bc260a5b 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -63,7 +63,6 @@ def pytest_configure(config):
     settings.SENTRY_URL_PREFIX = 'http://example.com'
 
     # enable draft features
-    settings.SENTRY_ENABLE_EXPLORE_CODE = True
     settings.SENTRY_ENABLE_EMAIL_REPLIES = True
 
     # disable error reporting by default
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 91faa2b2de..5af3117df3 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -7,42 +7,12 @@ from mock import Mock, patch
 from sentry.models import EventUser, Group
 from sentry.testutils import TestCase
 from sentry.tasks.post_process import (
-    post_process_group, record_affected_user, record_affected_code,
-    record_additional_tags
+    post_process_group, record_affected_user, record_additional_tags
 )
 
 
 class PostProcessGroupTest(TestCase):
-    @patch('sentry.tasks.post_process.record_affected_code')
-    @patch('sentry.rules.processor.RuleProcessor.apply', Mock(return_value=[]))
-    def test_record_affected_code(self, mock_record_affected_code):
-        group = self.create_group(project=self.project)
-        event = self.create_event(group=group)
-
-        with self.settings(SENTRY_ENABLE_EXPLORE_CODE=False):
-            post_process_group(
-                event=event,
-                is_new=True,
-                is_regression=False,
-                is_sample=False,
-            )
-
-        assert not mock_record_affected_code.delay.called
-
-        with self.settings(SENTRY_ENABLE_EXPLORE_CODE=True):
-            post_process_group(
-                event=event,
-                is_new=True,
-                is_regression=False,
-                is_sample=False,
-            )
-
-        mock_record_affected_code.delay.assert_called_once_with(
-            event=event,
-        )
-
     @patch('sentry.tasks.post_process.record_affected_user')
-    @patch('sentry.tasks.post_process.record_affected_code', Mock())
     @patch('sentry.rules.processor.RuleProcessor.apply', Mock(return_value=[]))
     def test_record_affected_user(self, mock_record_affected_user):
         group = self.create_group(project=self.project)
@@ -60,7 +30,6 @@ class PostProcessGroupTest(TestCase):
         )
 
     @patch('sentry.tasks.post_process.record_affected_user', Mock())
-    @patch('sentry.tasks.post_process.record_affected_code', Mock())
     @patch('sentry.rules.processor.RuleProcessor')
     def test_rule_processor(self, mock_processor):
         group = self.create_group(project=self.project)
@@ -121,35 +90,3 @@ class RecordAdditionalTagsTest(TestCase):
             record_additional_tags(event=event)
 
             assert not add_tags.called
-
-
-class RecordAffectedCodeTest(TestCase):
-    def test_simple(self):
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.Exception': {
-                'values': [{
-                    'type': 'TypeError',
-                    'value': 'test',
-                    'stacktrace': {
-                        'frames': [{
-                            'function': 'bar',
-                            'filename': 'foo.py',
-                            'in_app': True,
-                        }],
-                    },
-                }],
-            },
-        })
-
-        with patch.object(Group.objects, 'add_tags') as add_tags:
-            record_affected_code(event=event)
-
-            add_tags.assert_called_once_with(event.group, [
-                ('sentry:filename', '1effb24729ae4c43efa36b460511136a', {
-                    'filename': 'foo.py',
-                }),
-                ('sentry:function', '7823c20ad591da0bbb78d083c118609c', {
-                    'filename': 'foo.py',
-                    'function': 'bar',
-                })
-            ])
