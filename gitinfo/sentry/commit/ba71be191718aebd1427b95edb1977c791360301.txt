commit ba71be191718aebd1427b95edb1977c791360301
Author: Danny Lee <dlee@sentry.io>
Date:   Tue May 5 10:13:58 2020 -0700

    perf(api): Instrumentation for GET OrganizationTeams endpoint (#18623)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index a917191cce..49f5b9ece4 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -4,6 +4,7 @@ import functools
 import logging
 import six
 import time
+import sentry_sdk
 
 from datetime import datetime, timedelta
 from django.conf import settings
@@ -149,19 +150,22 @@ class Endpoint(APIView):
         Identical to rest framework's dispatch except we add the ability
         to convert arguments (for common URL params).
         """
-        self.args = args
-        self.kwargs = kwargs
-        request = self.initialize_request(request, *args, **kwargs)
-        self.load_json_body(request)
-        self.request = request
-        self.headers = self.default_response_headers  # deprecate?
+        with sentry_sdk.start_span(op="PERF: base.dispatch - setup"):
+            self.args = args
+            self.kwargs = kwargs
+            request = self.initialize_request(request, *args, **kwargs)
+            self.load_json_body(request)
+            self.request = request
+            self.headers = self.default_response_headers  # deprecate?
 
         # Tags that will ultimately flow into the metrics backend at the end of
         # the request (happens via middleware/stats.py).
         request._metric_tags = {}
 
         if settings.SENTRY_API_RESPONSE_DELAY:
-            time.sleep(settings.SENTRY_API_RESPONSE_DELAY / 1000.0)
+            with sentry_sdk.start_span(op="PERF: base.dispatch - sleep") as span:
+                span.set_data("SENTRY_API_RESPONSE_DELAY", settings.SENTRY_API_RESPONSE_DELAY)
+                time.sleep(settings.SENTRY_API_RESPONSE_DELAY / 1000.0)
 
         origin = request.META.get("HTTP_ORIGIN", "null")
         # A "null" value should be treated as no Origin for us.
@@ -170,30 +174,31 @@ class Endpoint(APIView):
             origin = None
 
         try:
-            if origin and request.auth:
-                allowed_origins = request.auth.get_allowed_origins()
-                if not is_valid_origin(origin, allowed=allowed_origins):
-                    response = Response("Invalid origin: %s" % (origin,), status=400)
-                    self.response = self.finalize_response(request, response, *args, **kwargs)
-                    return self.response
-
-            self.initial(request, *args, **kwargs)
-
-            # Get the appropriate handler method
-            if request.method.lower() in self.http_method_names:
-                handler = getattr(self, request.method.lower(), self.http_method_not_allowed)
-
-                (args, kwargs) = self.convert_args(request, *args, **kwargs)
-                self.args = args
-                self.kwargs = kwargs
-            else:
-                handler = self.http_method_not_allowed
-
-            if getattr(request, "access", None) is None:
-                # setup default access
-                request.access = access.from_request(request)
-
-            response = handler(request, *args, **kwargs)
+            with sentry_sdk.start_span(op="PERF: base.dispatch - request") as span:
+                if origin and request.auth:
+                    allowed_origins = request.auth.get_allowed_origins()
+                    if not is_valid_origin(origin, allowed=allowed_origins):
+                        response = Response("Invalid origin: %s" % (origin,), status=400)
+                        self.response = self.finalize_response(request, response, *args, **kwargs)
+                        return self.response
+
+                self.initial(request, *args, **kwargs)
+
+                # Get the appropriate handler method
+                if request.method.lower() in self.http_method_names:
+                    handler = getattr(self, request.method.lower(), self.http_method_not_allowed)
+
+                    (args, kwargs) = self.convert_args(request, *args, **kwargs)
+                    self.args = args
+                    self.kwargs = kwargs
+                else:
+                    handler = self.http_method_not_allowed
+
+                if getattr(request, "access", None) is None:
+                    # setup default access
+                    request.access = access.from_request(request)
+
+                response = handler(request, *args, **kwargs)
 
         except Exception as exc:
             response = self.handle_exception(request, exc)
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 961ec56751..ed10317deb 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -243,7 +243,8 @@ class OrganizationEndpoint(Endpoint):
         return projects
 
     def get_environments(self, request, organization):
-        return get_environments(request, organization)
+        with sentry_sdk.start_span(op="PERF: Org.get_environments"):
+            return get_environments(request, organization)
 
     def get_filter_params(self, request, organization, date_filter_optional=False):
         """
@@ -268,10 +269,11 @@ class OrganizationEndpoint(Endpoint):
         except InvalidParams as e:
             raise ParseError(detail=u"Invalid date range: {}".format(e))
 
-        try:
-            projects = self.get_projects(request, organization)
-        except ValueError:
-            raise ParseError(detail="Invalid project ids")
+        with sentry_sdk.start_span(op="PERF: org.get_filter_params - projects"):
+            try:
+                projects = self.get_projects(request, organization)
+            except ValueError:
+                raise ParseError(detail="Invalid project ids")
 
         if not projects:
             raise NoProjects
@@ -284,10 +286,11 @@ class OrganizationEndpoint(Endpoint):
         return params
 
     def convert_args(self, request, organization_slug, *args, **kwargs):
-        try:
-            organization = Organization.objects.get_from_cache(slug=organization_slug)
-        except Organization.DoesNotExist:
-            raise ResourceDoesNotExist
+        with sentry_sdk.start_span(op="PERF: org.convert_args - organization (cache)"):
+            try:
+                organization = Organization.objects.get_from_cache(slug=organization_slug)
+            except Organization.DoesNotExist:
+                raise ResourceDoesNotExist
 
         with sentry_sdk.start_span(
             op="check_object_permissions_on_organization", description=organization_slug
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 80a323c0f3..5a438199ee 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import six
+import sentry_sdk
 
 from django.db import IntegrityError, transaction
 from django.db.models import Q
@@ -95,9 +96,10 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
         if request.auth and hasattr(request.auth, "project"):
             return Response(status=403)
 
-        queryset = Team.objects.filter(
-            organization=organization, status=TeamStatus.VISIBLE
-        ).order_by("slug")
+        with sentry_sdk.start_span(op="PERF: OrgTeam.get - filter"):
+            queryset = Team.objects.filter(
+                organization=organization, status=TeamStatus.VISIBLE
+            ).order_by("slug")
 
         if request.GET.get("is_not_member", "0") == "1":
             user_teams = Team.objects.get_for_user(organization=organization, user=request.user)
@@ -105,22 +107,26 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
 
         query = request.GET.get("query")
 
-        if query:
-            tokens = tokenize_query(query)
-            for key, value in six.iteritems(tokens):
-                if key == "query":
-                    value = " ".join(value)
-                    queryset = queryset.filter(Q(name__icontains=value) | Q(slug__icontains=value))
-                else:
-                    queryset = queryset.none()
+        with sentry_sdk.start_span(op="PERF: OrgTeam.get - tokenize"):
+            if query:
+                tokens = tokenize_query(query)
+                for key, value in six.iteritems(tokens):
+                    if key == "query":
+                        value = " ".join(value)
+                        queryset = queryset.filter(
+                            Q(name__icontains=value) | Q(slug__icontains=value)
+                        )
+                    else:
+                        queryset = queryset.none()
 
         is_detailed = request.GET.get("detailed", "1") != "0"
 
-        serializer = (
-            team_serializers.TeamWithProjectsSerializer
-            if is_detailed
-            else team_serializers.TeamSerializer
-        )
+        with sentry_sdk.start_span(op="PERF: OrgTeam.get - serialize"):
+            serializer = (
+                team_serializers.TeamWithProjectsSerializer
+                if is_detailed
+                else team_serializers.TeamSerializer
+            )
 
         return self.paginate(
             request=request,
