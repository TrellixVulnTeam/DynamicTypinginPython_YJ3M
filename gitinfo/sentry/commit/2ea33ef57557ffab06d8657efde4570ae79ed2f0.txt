commit 2ea33ef57557ffab06d8657efde4570ae79ed2f0
Author: Matte Noble <me@mattenoble.com>
Date:   Thu Mar 21 10:58:56 2019 -0700

    fix(app-platform): Don't use Group create signal (#12300)
    
    Instead of relying on the `post_save` signal, explicitly enqueue the
    Issue Created webhook from `post_process_group`.
    
    This will hopefully fix a problem where we're reporting wayyy too may
    DoesNotExist errors due to some race condition related to using the
    signal.
    
    FIXES SENTRY-98S

diff --git a/src/sentry/receivers/sentry_apps.py b/src/sentry/receivers/sentry_apps.py
index 42f2e704e7..7b930593f6 100644
--- a/src/sentry/receivers/sentry_apps.py
+++ b/src/sentry/receivers/sentry_apps.py
@@ -1,9 +1,6 @@
 from __future__ import absolute_import
 
-from django.db.models.signals import post_save
-from django.dispatch import receiver
-
-from sentry.models import Group, GroupAssignee, Organization
+from sentry.models import GroupAssignee, Organization
 from sentry.signals import (
     issue_ignored,
     issue_assigned,
@@ -11,25 +8,7 @@ from sentry.signals import (
     issue_resolved_in_release,
     resolved_with_commit,
 )
-from sentry.tasks.sentry_apps import (
-    process_resource_change_bound,
-    workflow_notification,
-)
-
-
-@receiver(post_save, sender=Group, weak=False)
-def issue_saved(sender, instance, created, **kwargs):
-    issue = instance
-
-    # We only send webhooks for creation right now.
-    if not created:
-        return
-
-    process_resource_change_bound.delay(
-        action='created',
-        sender=sender.__name__,
-        instance_id=issue.id,
-    )
+from sentry.tasks.sentry_apps import workflow_notification
 
 
 @issue_assigned.connect(weak=False)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 461ab9c439..dd5e3b1287 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -18,6 +18,7 @@ from sentry.utils import snuba
 from sentry.utils.cache import cache
 from sentry.plugins import plugins
 from sentry.signals import event_processed
+from sentry.tasks.sentry_apps import process_resource_change_bound
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.redis import redis_clusters
@@ -141,6 +142,13 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
                             event=event,
                         )
 
+        if is_new:
+            process_resource_change_bound.delay(
+                action='created',
+                sender='Group',
+                instance_id=event.group_id,
+            )
+
         for plugin in plugins.for_project(event.project):
             plugin_post_process_group(
                 plugin_slug=plugin.slug,
diff --git a/tests/sentry/receivers/test_sentry_apps.py b/tests/sentry/receivers/test_sentry_apps.py
index 8a89745a70..77ace2c1a5 100644
--- a/tests/sentry/receivers/test_sentry_apps.py
+++ b/tests/sentry/receivers/test_sentry_apps.py
@@ -3,27 +3,10 @@ from __future__ import absolute_import
 from mock import patch
 
 from sentry.models import Commit, GroupAssignee, GroupLink, Repository, Release
-from sentry.testutils import APITestCase, TestCase
+from sentry.testutils import APITestCase
 from sentry.testutils.helpers.faux import faux
 
 
-@patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
-class TestIssueSaved(TestCase):
-    def test_processes_created_issues(self, delay):
-        issue = self.create_group()
-        assert faux(delay).called_with(
-            action='created',
-            sender='Group',
-            instance_id=issue.id,
-        )
-
-    def test_does_not_process_unless_created(self, delay):
-        issue = self.create_group()
-        delay.reset_mock()
-        issue.update(message='Stuff blew up')
-        assert len(delay.mock_calls) == 0
-
-
 # This testcase needs to be an APITestCase because all of the logic to resolve
 # Issues and kick off side effects are just chillin in the endpoint code -_-
 @patch('sentry.tasks.sentry_apps.workflow_notification.delay')
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 2ac2de2378..6d360d4831 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -229,6 +229,25 @@ class PostProcessGroupTest(TestCase):
 
         assert not mock_process_service_hook.delay.mock_calls
 
+    @patch('sentry.tasks.sentry_apps.process_resource_change_bound.delay')
+    def test_processes_resource_change_task_on_new_group(self, delay):
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+
+        post_process_group(
+            event=event,
+            is_new=True,
+            is_regression=False,
+            is_sample=False,
+            is_new_group_environment=False,
+        )
+
+        delay.assert_called_once_with(
+            action='created',
+            sender='Group',
+            instance_id=group.id,
+        )
+
 
 class IndexEventTagsTest(TestCase):
     def test_simple(self):
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index c840bcd610..53940e32df 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -13,6 +13,7 @@ from sentry.testutils.helpers.faux import faux
 from sentry.utils.http import absolute_uri
 from sentry.receivers.sentry_apps import *  # NOQA
 from sentry.utils import json
+from sentry.tasks.post_process import post_process_group
 from sentry.tasks.sentry_apps import (
     send_alert_event,
     notify_sentry_app,
@@ -172,8 +173,17 @@ class TestProcessResourceChange(TestCase):
         )
 
     def test_group_created_sends_webhook(self, safe_urlopen):
+        issue = self.create_group(project=self.project)
+        event = self.create_event(group=issue)
+
         with self.tasks():
-            issue = self.create_group(project=self.project)
+            post_process_group(
+                event=event,
+                is_new=True,
+                is_regression=False,
+                is_sample=False,
+                is_new_group_environment=False,
+            )
 
         data = json.loads(faux(safe_urlopen).kwargs['data'])
 
