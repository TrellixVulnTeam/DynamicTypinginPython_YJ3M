commit 13622b2d0927662771c56f71c6623c571729b1a9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 11 13:54:52 2017 -0700

    feat(beacon): Change default reporting to anonymous

diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 9de7e5da3b..d1f6ff5fa9 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -89,6 +89,10 @@ register(
 
 register('api.rate-limit.org-create', default=5, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 
+# Beacon
+
+register('beacon.anonymous', default=True, flags=FLAG_REQUIRED)
+
 # Filestore
 register('filestore.backend', default='filesystem', flags=FLAG_NOSTORE)
 register('filestore.options', default={'location': '/tmp/sentry-files'}, flags=FLAG_NOSTORE)
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index 46d1743bef..ba4bf4c38e 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import _ from 'lodash';
 import ConfigStore from './stores/configStore';
-import {t} from './locale';
+import {t, tct} from './locale';
 import {EmailField, TextField, BooleanField} from './components/forms';
 
 // This are ordered based on their display order visually
@@ -16,6 +16,10 @@ const sections = [
   {
     key: 'auth',
     heading: t('Authentication')
+  },
+  {
+    key: 'beacon',
+    heading: t('Beacon')
   }
 ];
 
@@ -94,6 +98,18 @@ const definitions = [
       'The maximum number of organizations which may be created by a single account in a one hour window.'
     )
   },
+  {
+    key: 'beacon.anonymous',
+    label: 'Anonymize Beacon',
+    component: BooleanField,
+    defaultValue: () => true,
+    help: tct(
+      'If enabled, any stats reported to sentry.io will exclude identifying information (such as your administrative email address). By anonymizing your installation the Sentry team will be unable to contact you about security updates. For more information on what data is sent to Sentry, see the [link:documentation].',
+      {
+        link: <a href="https://docs.sentry.io/server/beacon/" />
+      }
+    )
+  },
   {
     key: 'mail.from',
     label: t('Email From'),
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index a61ebaa3f3..e9045d0d84 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -15,7 +15,8 @@ const optionsAvailable = [
   'auth.allow-registration',
   'auth.ip-rate-limit',
   'auth.user-rate-limit',
-  'api.rate-limit.org-create'
+  'api.rate-limit.org-create',
+  'beacon.anonymous'
 ];
 
 export default class AdminSettings extends AsyncView {
@@ -62,6 +63,9 @@ export default class AdminSettings extends AsyncView {
           {fields['auth.ip-rate-limit']}
           {fields['auth.user-rate-limit']}
           {fields['api.rate-limit.org-create']}
+
+          <h4>Beacon</h4>
+          {fields['beacon.anonymous']}
         </ApiForm>
       </div>
     );
diff --git a/src/sentry/tasks/beacon.py b/src/sentry/tasks/beacon.py
index 7f49312256..c8a17790a6 100644
--- a/src/sentry/tasks/beacon.py
+++ b/src/sentry/tasks/beacon.py
@@ -56,11 +56,12 @@ def send_beacon():
         end=end,
     )['events.total']
 
+    anonymous = options.get('beacon.anonymous')
+
     payload = {
         'install_id': install_id,
         'version': sentry.get_version(),
         'docker': sentry.is_docker(),
-        'admin_email': options.get('system.admin-email'),
         'data': {
             # TODO(dcramer): we'd also like to get an idea about the throughput
             # of the system (i.e. events in 24h)
@@ -71,8 +72,12 @@ def send_beacon():
             'events.24h': events_24h,
         },
         'packages': get_all_package_versions(),
+        'anonymous': anonymous,
     }
 
+    if not anonymous:
+        payload['admin_email'] = options.get('system.admin-email')
+
     # TODO(dcramer): relay the response 'notices' as admin broadcasts
     try:
         request = safe_urlopen(BEACON_URL, json=payload, timeout=5)
diff --git a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
index 7300408cc9..f00d995168 100644
--- a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
@@ -20,6 +20,7 @@ exports[`AdminSettings render() renders 1`] = `
           "auth.allow-registration": true,
           "auth.ip-rate-limit": 25,
           "auth.user-rate-limit": 25,
+          "beacon.anonymous": true,
           "system.admin-email": "foo@example.com",
           "system.rate-limit": 25,
           "system.security-email": "foo@example.com",
@@ -122,6 +123,33 @@ exports[`AdminSettings render() renders 1`] = `
         placeholder="e.g. 5"
         required={true}
       />
+      <h4>
+        Beacon
+      </h4>
+      <BooleanField
+        defaultValue={true}
+        disabled={false}
+        help={
+          <span>
+            <span>
+              If enabled, any stats reported to sentry.io will exclude identifying information (such as your administrative email address). By anonymizing your installation the Sentry team will be unable to contact you about security updates. For more information on what data is sent to Sentry, see the 
+            </span>
+            <a
+              href="https://docs.sentry.io/server/beacon/"
+            >
+              <span>
+                documentation
+              </span>
+            </a>
+            <span>
+              .
+            </span>
+          </span>
+        }
+        label="Anonymize Beacon"
+        name="beacon.anonymous"
+        required={false}
+      />
     </ApiForm>
   </div>
 </DocumentTitle>
diff --git a/tests/sentry/tasks/test_beacon.py b/tests/sentry/tasks/test_beacon.py
index 07758268f8..ddf42e49f5 100644
--- a/tests/sentry/tasks/test_beacon.py
+++ b/tests/sentry/tasks/test_beacon.py
@@ -26,6 +26,7 @@ class SendBeaconTest(TestCase):
         })
 
         assert options.set('system.admin-email', 'foo@example.com')
+        assert options.set('beacon.anonymous', False)
         send_beacon()
 
         install_id = options.get('sentry:install-id')
@@ -44,6 +45,7 @@ class SendBeaconTest(TestCase):
                     'teams': 1,
                     'events.24h': 0,
                 },
+                'anonymous': False,
                 'admin_email': 'foo@example.com',
                 'packages': mock_get_all_package_versions.return_value,
             },
@@ -53,6 +55,47 @@ class SendBeaconTest(TestCase):
 
         assert options.get('sentry:latest_version') == '1.0.0'
 
+    @patch('sentry.tasks.beacon.get_all_package_versions')
+    @patch('sentry.tasks.beacon.safe_urlopen')
+    @patch('sentry.tasks.beacon.safe_urlread')
+    def test_anonymous(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):
+        mock_get_all_package_versions.return_value = {'foo': '1.0'}
+        safe_urlread.return_value = json.dumps({
+            'notices': [],
+            'version': {
+                'stable': '1.0.0'
+            },
+        })
+
+        assert options.set('system.admin-email', 'foo@example.com')
+        assert options.set('beacon.anonymous', True)
+        send_beacon()
+
+        install_id = options.get('sentry:install-id')
+        assert install_id and len(install_id) == 40
+
+        safe_urlopen.assert_called_once_with(
+            BEACON_URL,
+            json={
+                'install_id': install_id,
+                'version': sentry.get_version(),
+                'docker': sentry.is_docker(),
+                'data': {
+                    'organizations': 1,
+                    'users': 0,
+                    'projects': 1,
+                    'teams': 1,
+                    'events.24h': 0,
+                },
+                'anonymous': True,
+                'packages': mock_get_all_package_versions.return_value,
+            },
+            timeout=5
+        )
+        safe_urlread.assert_called_once_with(safe_urlopen.return_value)
+
+        assert options.get('sentry:latest_version') == '1.0.0'
+
     @patch('sentry.tasks.beacon.get_all_package_versions')
     @patch('sentry.tasks.beacon.safe_urlopen')
     @patch('sentry.tasks.beacon.safe_urlread')
