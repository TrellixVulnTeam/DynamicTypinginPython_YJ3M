commit e62dd934718878314067839005e72bc4e5a4bf14
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 31 12:05:46 2016 -0700

    [sso] various improvements (#4449)
    
    - explicit marks on session mutation
    - add org notation to basic login
    - notes about existing security weaknesses
    - fix behavior of MFA not correctly marking org as authenticated

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 12ee889730..8adf2b09b5 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -498,7 +498,10 @@ class AuthHelper(object):
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
         # XXX(dcramer): this is repeated from above
-        auth.login(self.request, user, organization_id=self.organization.id)
+        if not auth.login(request, user,
+                          after_2fa=request.build_absolute_uri(),
+                          organization_id=self.organization.id):
+            return HttpResponseRedirect(auth.get_login_redirect(self.request))
 
         self.clear_session()
 
@@ -534,7 +537,10 @@ class AuthHelper(object):
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
-        auth.login(self.request, user, organization_id=self.organization.id)
+        if not auth.login(self.request, user,
+                          after_2fa=self.request.build_absolute_uri(),
+                          organization_id=self.organization.id):
+            return HttpResponseRedirect(auth.get_login_redirect(self.request))
 
         self.clear_session()
 
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 1ede4c3b78..2d1b1df90c 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -57,7 +57,7 @@ def get_pending_2fa_user(request):
     if rv is None:
         return
 
-    user_id, created_at = rv
+    user_id, created_at = rv[:2]
     if created_at < time() - 60 * 5:
         return None
 
@@ -145,9 +145,16 @@ def is_valid_redirect(url):
 
 
 def mark_sso_complete(request, organization_id):
-    sso = request.session.get(SSO_SESSION_KEY, '').split(',')
+    # TODO(dcramer): this needs to be bound based on SSO options (e.g. changing
+    # or enabling SSO invalidates this)
+    sso = request.session.get(SSO_SESSION_KEY, '')
+    if sso:
+        sso = sso.split(',')
+    else:
+        sso = []
     sso.append(six.text_type(organization_id))
     request.session[SSO_SESSION_KEY] = ','.join(sso)
+    request.session.modified = True
 
 
 def has_completed_sso(request, organization_id):
@@ -204,13 +211,19 @@ def login(request, user, passed_2fa=None, after_2fa=None,
         )
 
     if has_2fa and not passed_2fa:
-        request.session['_pending_2fa'] = [user.id, time()]
+        request.session['_pending_2fa'] = [user.id, time(), organization_id]
         if after_2fa is not None:
             request.session['_after_2fa'] = after_2fa
         return False
 
-    request.session[MFA_SESSION_KEY] = six.text_type(user.id)
-    request.session.pop('_pending_2fa', None)
+    # TODO(dcramer): this needs to be bound based on MFA options
+    if passed_2fa:
+        request.session[MFA_SESSION_KEY] = six.text_type(user.id)
+        request.session.modified = True
+
+    mfa_state = request.session.pop('_pending_2fa', ())
+    if organization_id is None and len(mfa_state) == 3:
+        organization_id = mfa_state[2]
 
     # Check for expired passwords here after we cleared the 2fa flow.
     # While this means that users will have to pass 2fa before they can
@@ -231,14 +244,15 @@ def login(request, user, passed_2fa=None, after_2fa=None,
     _login(request, user)
     if organization_id:
         mark_sso_complete(request, organization_id)
-    log_auth_success(request, user.username)
+    log_auth_success(request, user.username, organization_id)
     return True
 
 
-def log_auth_success(request, username):
+def log_auth_success(request, username, organization_id=None):
     logger.info('user.auth.success', extra={
         'ip_address': request.META['REMOTE_ADDR'],
         'username': username,
+        'organization_id': organization_id,
     })
 
 
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index d6fd26330d..14cab912d5 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -65,7 +65,8 @@ class AuthOrganizationLoginView(BaseView):
             return self.redirect(auth.get_login_redirect(request))
 
         elif login_form.is_valid():
-            auth.login(request, login_form.get_user())
+            auth.login(request, login_form.get_user(),
+                       organization_id=organization.id)
 
             return self.redirect(auth.get_login_redirect(request))
 
diff --git a/tests/sentry/utils/auth/tests.py b/tests/sentry/utils/auth/tests.py
index 179175eafb..d641304fc2 100644
--- a/tests/sentry/utils/auth/tests.py
+++ b/tests/sentry/utils/auth/tests.py
@@ -1,11 +1,14 @@
 from __future__ import absolute_import
 
+import six
+
+from django.contrib.auth.models import AnonymousUser
 from django.core.urlresolvers import reverse
 from django.http import HttpRequest
 
 from sentry.models import User
 from sentry.testutils import TestCase
-from sentry.utils.auth import EmailAuthBackend, get_login_redirect
+from sentry.utils.auth import EmailAuthBackend, login, get_login_redirect
 
 
 class EmailAuthBackendTest(TestCase):
@@ -51,3 +54,26 @@ class GetLoginRedirectTest(TestCase):
     def test_no_value_uses_default(self):
         result = get_login_redirect(self.make_request())
         assert result == reverse('sentry-login')
+
+
+class LoginTest(TestCase):
+    def make_request(self, next=None):
+        request = HttpRequest()
+        request.META['REMOTE_ADDR'] = '127.0.0.1'
+        request.session = self.session
+        request.user = AnonymousUser()
+        if next:
+            request.session['_next'] = next
+        return request
+
+    def test_simple(self):
+        request = self.make_request()
+        assert login(request, self.user)
+        assert request.user == self.user
+
+    def test_with_organization(self):
+        org = self.create_organization(name='foo', owner=self.user)
+        request = self.make_request()
+        assert login(request, self.user, organization_id=org.id)
+        assert request.user == self.user
+        assert request.session['sso'] == six.text_type(org.id)
