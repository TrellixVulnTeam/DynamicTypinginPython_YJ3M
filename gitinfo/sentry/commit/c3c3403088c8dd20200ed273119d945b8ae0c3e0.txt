commit c3c3403088c8dd20200ed273119d945b8ae0c3e0
Author: Jess MacQueen <jess@getsentry.com>
Date:   Thu Nov 16 13:15:33 2017 -0800

    fix(releases): Remove group commit resolutions when message changes

diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index e92ae27236..15892de725 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -46,6 +46,18 @@ def resolve_group_resolutions(instance, created, **kwargs):
 
 def resolved_in_commit(instance, created, **kwargs):
     groups = instance.find_referenced_groups()
+
+    # Delete GroupLinks where message may have changed
+    group_ids = {g.id for g in groups}
+    group_links = GroupLink.objects.filter(
+        linked_type=GroupLink.LinkedType.commit,
+        relationship=GroupLink.Relationship.resolves,
+        linked_id=instance.id,
+    )
+    for link in group_links:
+        if link.group_id not in group_ids:
+            link.delete()
+
     for group in groups:
         try:
             with transaction.atomic():
diff --git a/tests/sentry/receivers/test_releases.py b/tests/sentry/receivers/test_releases.py
index b9087314c4..81ac231e47 100644
--- a/tests/sentry/receivers/test_releases.py
+++ b/tests/sentry/receivers/test_releases.py
@@ -125,6 +125,34 @@ class ResolvedInCommitTest(TestCase):
             linked_type=GroupLink.LinkedType.commit,
             linked_id=commit.id).count() == 1
 
+    def test_removes_group_link_when_message_changes(self):
+        group = self.create_group()
+
+        repo = Repository.objects.create(
+            name='example',
+            organization_id=self.group.organization.id,
+        )
+
+        commit = Commit.objects.create(
+            key=sha1(uuid4().hex).hexdigest(),
+            repository_id=repo.id,
+            organization_id=group.organization.id,
+            message='Foo Biz\n\nFixes {}'.format(group.qualified_short_id),
+        )
+
+        assert GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).exists()
+
+        commit.message = 'no groups here'
+        commit.save()
+
+        assert not GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).exists()
+
     def test_no_matching_group(self):
         repo = Repository.objects.create(
             name='example',
