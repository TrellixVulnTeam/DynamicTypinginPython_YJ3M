commit b12d19a14552ba8d7697e50e2c5c94c0b6bb8771
Author: Max Bittker <maxbittker@gmail.com>
Date:   Fri Feb 16 14:42:25 2018 -0800

    fix(bulksubscribe): integrity error from dupe rows (#7291)
    
    * fix integrity error from dupe rows
    
    * throw the real integrity error

diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index 8af92722b6..17e07a5539 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -111,9 +111,11 @@ class GroupSubscriptionManager(BaseManager):
         Subscribe a list of user ids to an issue, but only if the users are not explicitly
         unsubscribed.
         """
+        user_ids = set(user_ids)
+
         # 5 retries for race conditions where
         # concurrent subscription attempts cause integrity errors
-        for _ in range(5):
+        for i in range(4, -1, -1):  # 4 3 2 1 0
 
             existing_subscriptions = set(GroupSubscription.objects.filter(
                 user_id__in=user_ids,
@@ -137,10 +139,9 @@ class GroupSubscriptionManager(BaseManager):
                 with transaction.atomic():
                     self.bulk_create(subscriptions)
                     return True
-            except IntegrityError:
-                pass
-
-        raise Exception('Bulk_Subscribe failed')
+            except IntegrityError as e:
+                if i == 0:
+                    raise e
 
     def get_participants(self, group):
         """
diff --git a/tests/sentry/models/test_groupsubscription.py b/tests/sentry/models/test_groupsubscription.py
index 08a7d71a92..333beb03a2 100644
--- a/tests/sentry/models/test_groupsubscription.py
+++ b/tests/sentry/models/test_groupsubscription.py
@@ -48,6 +48,21 @@ class SubscribeTest(TestCase):
             group=group,
         )) == 21
 
+    def test_bulk_dupes(self):
+        group = self.create_group()
+
+        user_ids = []
+
+        user = self.create_user()
+        user_ids.append(user.id)
+        user_ids.append(user.id)
+
+        GroupSubscription.objects.bulk_subscribe(group=group, user_ids=user_ids)
+
+        assert len(GroupSubscription.objects.filter(
+            group=group,
+        )) == 1
+
     def test_actor_user(self):
         group = self.create_group()
         user = self.create_user()
