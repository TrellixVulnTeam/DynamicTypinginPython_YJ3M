commit 8e263c21ac756a5d3b4488850da8d35a98e03035
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Feb 27 11:27:16 2017 -0800

    ui: move "blacklisted" stats into Inbound Data Filters page (#4933)
    
    * ui: move "blacklisted" stats into Inbound Data Filters page
    
    * Make filtered ip box match the rest of the page
    
    * add blankslate for filtered errors graph
    
    * Support empty graph
    
    * Fix lint issue
    
    * de-duping some code to make benjamin happier
    
    * bring back downvotes
    
    * be more liberal on the exception we catch
    
    * commenting it up

diff --git a/CHANGES b/CHANGES
index ec5d976442..199f8578cc 100644
--- a/CHANGES
+++ b/CHANGES
@@ -22,6 +22,7 @@ API Changes
 - Added OrganizationReleasesEndpoint.
 - Added context type ``app`` for cocoa events.
 - Added ``assignedTo`` param to ``/projects/{org}/{project}/issues/``.
+- Split out filtered stats onto Inbound Data Filters page
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index b93fccfd1a..6c7a3efbf2 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -146,6 +146,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:default_environment': project.get_option('sentry:default_environment'),
             'sentry:reprocessing_show_hint': bool(project.get_option('sentry:reprocessing_show_hint', True)),
             'sentry:reprocessing_active': bool(project.get_option('sentry:reprocessing_active', False)),
+            'filters:blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
             'feedback:branding': project.get_option('feedback:branding', '1') == '1',
         }
         data['plugins'] = serialize([
@@ -292,6 +293,10 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if 'sentry:reprocessing_show_hint' in options:
                 project.update_option('sentry:reprocessing_show_hint',
                     bool(options['sentry:reprocessing_show_hint']))
+            if 'filters:blacklisted_ips' in options:
+                project.update_option(
+                    'sentry:blacklisted_ips',
+                    clean_newline_inputs(options['filters:blacklisted_ips']))
 
             self.create_audit_entry(
                 request=request,
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index 50abad9b0c..f3391a9afc 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -208,7 +208,7 @@ const OrganizationStats = React.createClass({
         received: pReceived,
         rejected: pRejected,
         blacklisted: pBlacklisted,
-        accepted: pReceived - pRejected - pBlacklisted
+        accepted: Math.max(0, pReceived - pRejected - pBlacklisted)
       });
     });
     this.setState({
@@ -248,7 +248,7 @@ const OrganizationStats = React.createClass({
             three categories: Accepted, Rate Limited, and Filtered. Rate
             Limited events are entries that the system threw away due to quotas
             being hit, and Filtered events are events that were blocked
-            due to your data filters and blocklists.`)}</p>
+            due to your inbound data filter rules.`)}</p>
           </div>
           {!this.state.statsLoading &&
             <div className="col-md-3 stats-column">
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index 894c3aaf3c..6eea022b11 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -5,7 +5,9 @@ import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
+import StackedBarChart from '../components/stackedBarChart';
 import Switch from '../components/switch';
+import {FormState, TextareaField} from '../components/forms';
 import {t} from '../locale';
 import marked from '../utils/marked';
 
@@ -198,40 +200,212 @@ const LegacyBrowserFilterRow = React.createClass({
   }
 });
 
+const ProjectFiltersSettingsForm = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    initialData: React.PropTypes.object.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    let formData = {};
+    for (let key of Object.keys(this.props.initialData)) {
+      if (key.lastIndexOf('filters:') === 0) {
+        formData[key] = this.props.initialData[key];
+      }
+    }
+    return {
+      hasChanged: false,
+      formData: formData,
+      errors: {},
+    };
+  },
+
+  onFieldChange(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({
+      formData: {...formData},
+      hasChanged: true,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state === FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId, projectId} = this.props;
+      this.api.request(`/projects/${orgId}/${projectId}/`, {
+        method: 'PUT',
+        data: {options: this.state.formData},
+        success: (data) => {
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+            hasChanged: false
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
+    });
+  },
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let errors = this.state.errors;
+    return (
+      <form onSubmit={this.onSubmit} className="form-stacked p-b-1">
+        {this.state.state === FormState.ERROR &&
+          <div className="alert alert-error alert-block">
+            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+          </div>
+        }
+        <fieldset>
+          <div className="pull-right">
+
+              <button type="submit" className="btn btn-sm btn-primary"
+                      disabled={isSaving || !this.state.hasChanged}>{t('Save Changes')}</button>
+
+          </div>
+          <h5>{t('Filter errors from these IP addresses:')}</h5>
+          <TextareaField
+            key="ip"
+            name="ip"
+            help={t('Separate multiple entries with a newline.')}
+            placeholder="e.g. 127.0.0.1 or 10.0.0.0/8"
+            value={this.state.formData['filters:blacklisted_ips']}
+            error={errors['filters:blacklisted_ips']}
+            onChange={this.onFieldChange.bind(this, 'filters:blacklisted_ips')} />
+        </fieldset>
+      </form>
+    );
+  }
+});
+
 const ProjectFilters = React.createClass({
   mixins: [ApiMixin],
 
   getInitialState() {
+    let until = Math.floor(new Date().getTime() / 1000);
+    let since = until - 3600 * 24 * 7;
+
     return {
+      expected: 3,
       loading: true,
       error: false,
+      statsError: false,
       filterList: [],
+      querySince: since,
+      queryUntil: until,
+      stats: null,
+      rawStatsData: null,
+      processedStats: false,
+      projectOptions: {},
+      blankStats: false,
     };
   },
 
-  componentDidMount() {
+  componentWillMount() {
     this.fetchData();
   },
 
+  componentDidUpdate(prevProps) {
+    if (!this.state.loading && !this.state.stats) {
+      this.processStatsData();
+    }
+  },
+
   fetchData() {
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/filters/`, {
       success: (data, textStatus, jqXHR) => {
+        this.setState({filterList: data});
+      },
+      error: () => {
+        this.setState({error: true});
+      },
+      complete: () => {
+        let expected = this.state.expected - 1;
         this.setState({
-          error: false,
-          loading: false,
-          filterList: data
+          expected: expected,
+          loading: expected > 0,
         });
+      }
+    });
+
+    this.api.request(`/projects/${orgId}/${projectId}/stats/`, {
+      query: {
+        since: this.state.querySince,
+        until: this.state.queryUntil,
+        resolution: '1h',
+        stat: 'blacklisted',
+      },
+      success: (data) => {
+        this.setState({rawStatsData: data});
       },
       error: () => {
+        this.setState({error: true});
+      },
+      complete: () => {
+        let expected = this.state.expected - 1;
         this.setState({
-          error: true,
-          loading: false
+          expected: expected,
+          loading: expected > 0,
+        });
+      }
+    });
+
+    this.api.request(`/projects/${orgId}/${projectId}/`, {
+      success: (data, textStatus, jqXHR) => {
+        this.setState({projectOptions: data.options});
+      },
+      error: () => {
+        this.setState({error: true});
+      },
+      complete: () => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          loading: expected > 0,
         });
       }
     });
   },
 
+  processStatsData() {
+    let blank = true; // Keep track if the entire graph is blank or not.
+    let points = this.state.rawStatsData.map(point => {
+      let [x, y] = point;
+      if (y > 0) {
+        blank = false;
+      }
+      return {
+        x: x,
+        y: [y],
+      };
+    });
+    this.setState({
+      stats: points,
+      blankStats: blank,
+    });
+  },
+
   onToggleFilter(filter, active) {
     if (this.state.loading)
       return;
@@ -273,7 +447,7 @@ const ProjectFilters = React.createClass({
   renderBody() {
     let body;
 
-    if (this.state.loading)
+    if (this.state.loading || !this.state.stats)
       body = this.renderLoading();
     else if (this.state.error)
       body = <LoadingError onRetry={this.fetchData} />;
@@ -296,6 +470,28 @@ const ProjectFilters = React.createClass({
 
     return (
       <div>
+        <div className="panel panel-default">
+          <div className="panel-heading">
+            <h6>{t('Errors filtered in the last 7 days (by hour)')}</h6>
+          </div>
+          <div className="panel-body p-a-0">
+          {!this.state.blankStats ?
+            <div className="inbound-filters-stats p-a-1">
+              <div className="bar-chart">
+                <StackedBarChart
+                  points={this.state.stats}
+                  height={50}
+                  barClasses={['filtered']}
+                  className="sparkline m-b-0" />
+              </div>
+            </div> :
+            <div className="blankslate p-y-2">
+              <h5>{t('Nothing filtered in the last 7 days.')}</h5>
+              <p className="m-b-0">{t('Issues filtered as a result of your settings below will be shown here.')}</p>
+            </div>
+          }
+          </div>
+        </div>
         {this.state.filterList.map(filter => {
           let props = {
             key: filter.id,
@@ -308,6 +504,13 @@ const ProjectFilters = React.createClass({
             ? <LegacyBrowserFilterRow {...props}/>
             : <FilterRow {...props}/>;
         })}
+
+        <div style={{borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}}>
+          <ProjectFiltersSettingsForm
+            orgId={orgId}
+            projectId={projectId}
+            initialData={this.state.projectOptions} />
+        </div>
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 4a8c4ebe7a..f71a2261fe 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -943,6 +943,25 @@ table.integrations {
   }
 }
 
+.inbound-filters-stats {
+
+  .bar-chart figure a {
+    height: 50px;
+
+    span {
+      &.filtered {
+        background: @gray-lightest;
+      }
+    }
+
+    &:hover span {
+      &.filtered {
+        background: @gray-light;
+      }
+    }
+  }
+}
+
 /**
 * Auth providers
 * ============================================================================
@@ -3253,6 +3272,10 @@ ul.radio-inputs {
 .blankslate {
   text-align: center;
   padding: 50px 0;
+
+  h5 {
+    margin-bottom: 10px;
+  }
 }
 
 /**
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index d5303f8712..2dd5bb8dda 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -85,7 +85,6 @@
         {{ form.scrape_javascript|as_crispy_field }}
         {{ form.token|as_crispy_field }}
         {{ form.token_header|as_crispy_field }}
-        {{ form.blacklisted_ips|as_crispy_field }}
       </div>
     </div>
 
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index cf5eec041a..ed526c9aca 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -224,8 +224,12 @@ def is_valid_ip(ip_address, project):
             return False
 
         # Check to make sure it's actually a range before
-        if '/' in addr and ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(six.text_type(addr), strict=False):
-            return False
+        try:
+            if '/' in addr and ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(six.text_type(addr), strict=False):
+                return False
+        except ValueError:
+            # Ignore invalid values here
+            pass
 
     return True
 
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 7ac97c1930..466109dc3d 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -7,7 +7,6 @@ sentry.web.forms.fields
 """
 from __future__ import absolute_import
 
-import ipaddress
 import six
 
 from django.core.validators import URLValidator
@@ -150,26 +149,3 @@ class OriginsField(CharField):
             return False
 
         return True
-
-
-class IPNetworksField(CharField):
-    widget = Textarea(
-        attrs={
-            'placeholder': mark_safe(_('e.g. 127.0.0.1 or 10.0.0.0/8')),
-            'class': 'span8',
-        },
-    )
-
-    def clean(self, value):
-        if not value:
-            return None
-        value = value.strip()
-        if not value:
-            return None
-        values = [v for v in (v.strip() for v in value.split('\n')) if v]
-        for value in values:
-            try:
-                ipaddress.ip_network(six.text_type(value))
-            except ValueError:
-                raise ValidationError('%r is not an acceptable value' % value)
-        return values
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 9f6fc66d67..693a4a08ef 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -13,7 +13,7 @@ from uuid import uuid1
 from sentry import options
 from sentry.models import AuditLogEntryEvent, Project, Team
 from sentry.web.forms.fields import (
-    CustomTypedChoiceField, RangeField, OriginsField, IPNetworksField,
+    CustomTypedChoiceField, RangeField, OriginsField,
 )
 from sentry.web.frontend.base import ProjectView
 
@@ -90,8 +90,6 @@ class EditProjectForm(forms.ModelForm):
         help_text=_('Allow Sentry to scrape missing JavaScript source context when possible.'),
         required=False,
     )
-    blacklisted_ips = IPNetworksField(label=_('Filtered IP Addresses'), required=False,
-        help_text=_('Separate multiple entries with a newline.'))
 
     # Options that are overridden by Organization level settings
     org_overrides = ('scrub_data', 'scrub_defaults', 'scrub_ip_address')
@@ -252,7 +250,6 @@ class ProjectSettingsView(ProjectView):
                 'safe_fields': '\n'.join(project.get_option('sentry:safe_fields', None) or []),
                 'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
                 'scrape_javascript': bool(project.get_option('sentry:scrape_javascript', True)),
-                'blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
                 'default_environment': project.get_option('sentry:default_environment'),
                 'mail_subject_prefix': project.get_option(
                     'mail:subject_prefix', options.get('mail.subject-prefix')),
@@ -275,7 +272,6 @@ class ProjectSettingsView(ProjectView):
                 'safe_fields',
                 'scrub_ip_address',
                 'scrape_javascript',
-                'blacklisted_ips',
                 'default_environment',
                 'mail_subject_prefix',
             ):
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 9eb7ecc0fe..9ac4454c46 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -249,6 +249,9 @@ class IsValidIPTestCase(TestCase):
         assert not self.is_valid_ip('127.0.0.1', ['127.0.0.0/8'])
         assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.0/8', '192.168.1.0/8'])
 
+    def test_garbage_input(self):
+        assert self.is_valid_ip('127.0.0.1', ['lol/bar'])
+
 
 class OriginFromRequestTestCase(TestCase):
     def test_nothing(self):
