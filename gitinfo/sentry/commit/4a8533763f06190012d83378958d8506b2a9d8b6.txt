commit 4a8533763f06190012d83378958d8506b2a9d8b6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Nov 12 10:47:51 2016 +0100

    Added tests for new symbol behavior

diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 0854d85946..a5d8f60696 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -103,6 +103,27 @@ ValueError: hello world
         context = inst.get_api_context()
         assert context['hasSystemFrames']
 
+    def test_context_with_symbols(self):
+        inst = Exception.to_python(dict(values=[{
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': [{
+                'filename': 'foo/baz.py',
+                'function': 'myfunc',
+                'symbol': 'Class.myfunc',
+                'lineno': 1,
+                'in_app': True,
+            }]},
+        }]))
+
+        self.create_event(data={
+            'sentry.interfaces.Exception': inst.to_json(),
+        })
+        context = inst.get_api_context()
+        assert context['values'][0]['stacktrace']['frames'][
+            0]['symbol'] == 'Class.myfunc'
+
     def test_context_with_only_system_frames(self):
         inst = Exception.to_python(dict(values=[{
             'type': 'ValueError',
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index fce91b7175..f035ad5b18 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -400,6 +400,30 @@ class StacktraceTest(TestCase):
         result = interface.get_hash()
         assert result == []
 
+    def test_get_hash_uses_symbol_instead_of_function(self):
+        interface = Frame.to_python({
+            'module': 'libfoo',
+            'function': 'int main()',
+            'symbol': '_main',
+        })
+        result = interface.get_hash()
+        self.assertEquals(result, [
+            'libfoo',
+            '_main',
+        ])
+
+    def test_get_hash_skips_symbol_if_unknown(self):
+        interface = Frame.to_python({
+            'module': 'libfoo',
+            'function': 'main',
+            'symbol': '?',
+        })
+        result = interface.get_hash()
+        self.assertEquals(result, [
+            'libfoo',
+            'main',
+        ])
+
     @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
         event = mock.Mock(spec=Event())
