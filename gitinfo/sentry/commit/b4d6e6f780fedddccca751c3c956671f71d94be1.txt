commit b4d6e6f780fedddccca751c3c956671f71d94be1
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Jun 27 18:55:05 2018 -0700

    ref: Move fetching of groups from external id into helper method

diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index ed8795ccb7..e00d96fe16 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -169,6 +169,19 @@ class GroupManager(BaseManager):
                 'last_seen': date,
             })
 
+    def get_groups_by_external_issue(self, integration, external_issue_key):
+        from sentry.models import ExternalIssue, GroupLink
+        return Group.objects.filter(
+            id__in=GroupLink.objects.filter(
+                linked_id__in=ExternalIssue.objects.filter(
+                    key=external_issue_key,
+                    integration_id=integration.id,
+                    organization_id__in=integration.organizations.values_list('id', flat=True),
+                ).values_list('id', flat=True),
+            ).values_list('group_id', flat=True),
+            project__organization_id__in=integration.organizations.values_list('id', flat=True),
+        )
+
 
 class Group(Model):
     """
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index ef9bd60425..ade576cf63 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -50,21 +50,14 @@ def sync_group_assignee_inbound(integration, email, external_issue_key, assign=T
     assign linked groups to matching users. Checks project membership.
     Returns a list of groups that were successfully assigned.
     """
-    from sentry.models import Group, GroupLink, ExternalIssue, UserEmail, User
+    from sentry.models import Group, UserEmail, User
 
     logger = logging.getLogger('sentry.integrations.%s' % integration.provider)
 
     affected_groups = list(
-        Group.objects.filter(
-            id__in=GroupLink.objects.filter(
-                linked_id__in=ExternalIssue.objects.filter(
-                    key=external_issue_key,
-                    integration_id=integration.id,
-                    organization_id__in=integration.organizations.values_list('id', flat=True),
-                ).values_list('id', flat=True),
-            ).values_list('group_id', flat=True),
-            project__organization_id__in=integration.organizations.values_list('id', flat=True),
-        )
+        Group.objects.get_groups_by_external_issue(
+            integration, external_issue_key,
+        ),
     )
 
     if not affected_groups:
