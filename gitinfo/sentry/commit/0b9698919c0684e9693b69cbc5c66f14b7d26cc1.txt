commit 0b9698919c0684e9693b69cbc5c66f14b7d26cc1
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Nov 11 15:58:20 2019 -0800

    ref(ts): Convert `actionCreators/indicator` to typescript (#15411)
    
    This converts `actionCreators/indicator` to typescript as well as fixing incorrect usages of `removeIndicator()`

diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.tsx
similarity index 73%
rename from src/sentry/static/sentry/app/actionCreators/indicator.jsx
rename to src/sentry/static/sentry/app/actionCreators/indicator.tsx
index bd76780642..b4d8d752b0 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.tsx
@@ -3,11 +3,26 @@ import styled from 'react-emotion';
 
 import {DEFAULT_TOAST_DURATION} from 'app/constants';
 import {t, tct} from 'app/locale';
+import FormModel, {FieldValue} from 'app/views/settings/components/forms/model';
 import IndicatorActions from 'app/actions/indicatorActions';
 import space from 'app/styles/space';
 
+type IndicatorType = 'loading' | 'error' | 'success' | 'undo' | '';
+
+type Options = {
+  duration?: number;
+  append?: boolean;
+};
+
+type Indicator = {
+  type: IndicatorType;
+  id: string | number;
+  message: React.ReactNode;
+  options: Options;
+};
+
 // Removes a single indicator
-export function removeIndicator(indicator) {
+export function removeIndicator(indicator: Indicator) {
   IndicatorActions.remove(indicator);
 }
 
@@ -17,7 +32,11 @@ export function clearIndicators() {
 }
 
 // Note previous IndicatorStore.add behavior was to default to "loading" if no type was supplied
-export function addMessage(msg, type, options = {}) {
+export function addMessage(
+  msg: React.ReactNode,
+  type: IndicatorType,
+  options: Options = {}
+): void {
   let {duration} = options;
 
   // use default only if undefined, as 0 is a valid duration
@@ -30,33 +49,38 @@ export function addMessage(msg, type, options = {}) {
   IndicatorActions[action](msg, type, {...options, duration});
 }
 
-function addMessageWithType(type) {
-  return (msg, duration, options = {}) => addMessage(msg, type, {...options, duration});
+function addMessageWithType(type: IndicatorType) {
+  return (msg: React.ReactNode, duration?: number, options?: Omit<Options, 'duration'>) =>
+    addMessage(msg, type, {...options, duration});
 }
 
-export function addLoadingMessage(msg = t('Saving changes...'), ...args) {
+export function addLoadingMessage(
+  msg: React.ReactNode = t('Saving changes...'),
+  ...args
+) {
   return addMessageWithType('loading')(msg, ...args);
 }
 
-export function addErrorMessage(...args) {
-  return addMessageWithType('error')(...args);
+export function addErrorMessage(msg: React.ReactNode, ...args) {
+  return addMessageWithType('error')(msg, ...args);
 }
 
-export function addSuccessMessage(...args) {
-  return addMessageWithType('success')(...args);
+export function addSuccessMessage(msg: React.ReactNode, ...args) {
+  return addMessageWithType('success')(msg, ...args);
 }
 
-const PRETTY_VALUES = {
-  '': '<empty>',
-  [null]: '<none>',
-  [undefined]: '<unset>',
-  [false]: 'disabled',
-  [true]: 'enabled',
-};
+const PRETTY_VALUES: Map<unknown, string> = new Map([
+  ['', '<empty>'],
+  [null, '<none>'],
+  [undefined, '<unset>'],
+  // if we don't cast as any, then typescript complains because booleans are not valid keys
+  [true as any, 'enabled'],
+  [false as any, 'disabled'],
+]);
 
 // Transform form values into a string
 // Otherwise bool values will not get rendered and empty strings look like a bug
-const prettyFormString = (val, model, fieldName) => {
+const prettyFormString = (val: FieldValue, model: FormModel, fieldName: string) => {
   const descriptor = model.fieldDescriptor.get(fieldName);
 
   if (descriptor && typeof descriptor.formatMessageValue === 'function') {
@@ -67,13 +91,18 @@ const prettyFormString = (val, model, fieldName) => {
     return descriptor.formatMessageValue(val, {...descriptor, initialData});
   }
 
-  if (val in PRETTY_VALUES) {
-    return PRETTY_VALUES[val];
+  if (PRETTY_VALUES.has(val)) {
+    return PRETTY_VALUES.get(val);
   }
 
   return `${val}`;
 };
 
+type Change = {
+  old: FieldValue;
+  new: FieldValue;
+};
+
 /**
  * This will call an action creator to generate a "Toast" message that
  * notifies user the field that changed with its previous and current values.
@@ -81,7 +110,11 @@ const prettyFormString = (val, model, fieldName) => {
  * Also allows for undo
  */
 
-export function saveOnBlurUndoMessage(change, model, fieldName) {
+export function saveOnBlurUndoMessage(
+  change: Change,
+  model: FormModel,
+  fieldName: string
+) {
   if (!model) {
     return;
   }
@@ -92,7 +125,7 @@ export function saveOnBlurUndoMessage(change, model, fieldName) {
     return;
   }
 
-  const prettifyValue = val => prettyFormString(val, model, fieldName);
+  const prettifyValue = (val: FieldValue) => prettyFormString(val, model, fieldName);
 
   // Hide the change text when formatMessageValue is explicitly set to false
   const showChangeText = model.getDescriptor(fieldName, 'formatMessageValue') !== false;
diff --git a/src/sentry/static/sentry/app/views/monitors/monitorHeaderActions.jsx b/src/sentry/static/sentry/app/views/monitors/monitorHeaderActions.jsx
index db2c0b61bc..7c3256ba3f 100644
--- a/src/sentry/static/sentry/app/views/monitors/monitorHeaderActions.jsx
+++ b/src/sentry/static/sentry/app/views/monitors/monitorHeaderActions.jsx
@@ -1,17 +1,17 @@
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
-import {browserHistory} from 'react-router';
 
-import {t} from 'app/locale';
 import {
   addErrorMessage,
   addLoadingMessage,
-  removeIndicator,
+  clearIndicators,
 } from 'app/actionCreators/indicator';
 import {logException} from 'app/utils/logging';
-import SentryTypes from 'app/sentryTypes';
+import {t} from 'app/locale';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
+import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 
 class MonitorHeaderActions extends React.Component {
@@ -35,7 +35,6 @@ class MonitorHeaderActions extends React.Component {
         browserHistory.push(redirectPath);
       })
       .catch(() => {
-        removeIndicator();
         addErrorMessage(t('Unable to remove monitor.'));
       });
   };
@@ -49,12 +48,11 @@ class MonitorHeaderActions extends React.Component {
         data,
       })
       .then(resp => {
-        removeIndicator();
+        clearIndicators();
         this.props.onUpdate && this.props.onUpdate(resp);
       })
       .catch(err => {
         logException(err);
-        removeIndicator();
         addErrorMessage(t('Unable to update monitor.'));
       });
   };
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
index c32b5f734e..7b220b9fb2 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {Panel, PanelAlert} from 'app/components/panels';
-import {addLoadingMessage, removeIndicator} from 'app/actionCreators/indicator';
+import {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';
 import {t, tn} from 'app/locale';
 import Access from 'app/components/acl/access';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
@@ -118,7 +118,7 @@ class ProjectProcessingIssues extends React.Component {
     this.setState({
       reprocessing: true,
     });
-    const loadingIndicator = addLoadingMessage(t('Started reprocessing..'));
+    addLoadingMessage(t('Started reprocessing..'));
     const {orgId, projectId} = this.props.params;
     this.props.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {
       method: 'POST',
@@ -134,7 +134,7 @@ class ProjectProcessingIssues extends React.Component {
         });
       },
       complete: () => {
-        removeIndicator(loadingIndicator);
+        clearIndicators();
       },
     });
   };
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
index 3ab94a0af7..5485163a95 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -11,7 +11,6 @@ import {
   addSuccessMessage,
   addErrorMessage,
   addLoadingMessage,
-  removeIndicator,
 } from 'app/actionCreators/indicator';
 import {getDisplayName} from 'app/utils/environment';
 import {t, tct} from 'app/locale';
@@ -60,13 +59,12 @@ class RuleRow extends React.Component<Props, State> {
       return;
     }
 
-    const loadingIndicator = addLoadingMessage();
+    addLoadingMessage();
     const {api, orgId, projectId, data} = this.props;
     api.request(`/projects/${orgId}/${projectId}/rules/${data.id}/`, {
       method: 'DELETE',
       success: () => {
         this.props.onDelete();
-        removeIndicator(loadingIndicator);
         addSuccessMessage(tct('Successfully deleted "[alert]"', {alert: data.name}));
       },
       error: () => {
@@ -74,7 +72,6 @@ class RuleRow extends React.Component<Props, State> {
           error: true,
           loading: false,
         });
-        removeIndicator(loadingIndicator);
         addErrorMessage(t('Unable to save changes. Please try again.'));
       },
     });
