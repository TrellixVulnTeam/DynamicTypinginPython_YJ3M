commit 1555abf150a65f29072de55549fa7f4e56c6a177
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Feb 19 17:58:49 2019 -0800

    feat(api): Restrict advanced search usage to organizations with `advanced_search` feature.
    
    Advanced search is currently considered to be negative and wildcard searches. We'll probably expand
    this to include new search features over time.

diff --git a/src/sentry/api/endpoints/organization_group_index.py b/src/sentry/api/endpoints/organization_group_index.py
index 77d10f5c7a..45d0611520 100644
--- a/src/sentry/api/endpoints/organization_group_index.py
+++ b/src/sentry/api/endpoints/organization_group_index.py
@@ -27,7 +27,9 @@ search = SnubaSearchBackend(**settings.SENTRY_SEARCH_OPTIONS)
 class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
 
     def _search(self, request, organization, projects, environments, extra_query_kwargs=None):
-        query_kwargs = build_query_params_from_request(request, projects, environments)
+        query_kwargs = build_query_params_from_request(
+            request, organization, projects, environments,
+        )
         if extra_query_kwargs is not None:
             assert 'environment' not in extra_query_kwargs
             query_kwargs.update(extra_query_kwargs)
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index e9ba182e5e..3a845e66c7 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -77,7 +77,9 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             query_kwargs = {}
         else:
             environments = [environment] if environment is not None else environment
-            query_kwargs = build_query_params_from_request(request, [project], environments)
+            query_kwargs = build_query_params_from_request(
+                request, project.organization, [project], environments,
+            )
             if extra_query_kwargs is not None:
                 assert 'environment' not in extra_query_kwargs
                 query_kwargs.update(extra_query_kwargs)
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index f1e67f122b..4c9c86cc3e 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -142,6 +142,16 @@ class SearchFilter(namedtuple('SearchFilter', 'key operator value')):
             map(six.text_type, (self.key.name, self.operator, self.value.raw_value)),
         )
 
+    @cached_property
+    def is_negation(self):
+        # Negations are mostly just using != operators. But we also have
+        # negations on has: filters, which translate to = '', so handle that
+        # case as well.
+        return (
+            self.operator == '!=' and self.value.raw_value != ''
+            or self.operator == '=' and self.value.raw_value == ''
+        )
+
 
 class SearchKey(namedtuple('SearchKey', 'name')):
 
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index 9f39600b02..9063e48084 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -52,7 +52,7 @@ class ValidationError(Exception):
     pass
 
 
-def build_query_params_from_request(request, projects, environments):
+def build_query_params_from_request(request, organization, projects, environments):
     query_kwargs = {
         'projects': projects,
         'sort_by': request.GET.get('sort', DEFAULT_SORT_OPTION),
@@ -95,12 +95,45 @@ def build_query_params_from_request(request, projects, environments):
             # If something goes wrong here we just want to use the working
             # filters
             use_new_filters = False
+        if use_new_filters:
+            validate_search_filter_permissions(organization, search_filters)
         query_kwargs['search_filters'] = search_filters
 
     query_kwargs['use_new_filters'] = use_new_filters
     return query_kwargs
 
 
+# List of conditions that mark a SearchFilter as an advanced search. Format is
+# (lambda SearchFilter(): <boolean condition>, '<feature_name')
+advanced_search_features = [
+    (lambda search_filter: search_filter.is_negation, 'negative search'),
+    (lambda search_filter: search_filter.value.is_wildcard(), 'wildcard search'),
+]
+
+
+def validate_search_filter_permissions(organization, search_filters):
+    """
+    Verifies that an organization is allowed to perform the query that they
+    submitted.
+    If the org is using a feature they don't have access to, raises
+    `ValidationError` with information which part of the query they don't have
+    access to.
+    :param search_filters:
+    """
+    # If the organization has advanced search, then no need to perform any
+    # other checks since they're allowed to use all search features
+    if features.has('organizations:advanced_search', organization):
+        return
+
+    for search_filter in search_filters:
+        for feature_condition, feature_name in advanced_search_features:
+            if feature_condition(search_filter):
+                raise ValidationError(
+                    u'You need access to the advanced search feature to use {}'.format(
+                        feature_name),
+                )
+
+
 def get_by_short_id(organization_id, is_short_id_lookup, query):
     if is_short_id_lookup == '1' and \
             looks_like_short_id(query):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 113cd46be9..f0ac02d0be 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -791,6 +791,8 @@ SENTRY_FEATURES = {
     # Enables user registration.
     'auth:register': True,
 
+    # Enable advanced search features, like negation and wildcard matching.
+    'organizations:advanced_search': True,
     # Enable obtaining and using API keys.
     'organizations:api-keys': False,
     # Enable creating organizations within sentry (if SENTRY_SINGLE_ORGANIZATION
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 665b093409..c6697b5b5e 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -50,10 +50,12 @@ default_manager.add('auth:register')
 default_manager.add('organizations:create')
 
 # Organization scoped features
+default_manager.add('organizations:advanced_search', OrganizationFeature)  # NOQA
 default_manager.add('organizations:api-keys', OrganizationFeature)  # NOQA
 default_manager.add('organizations:discover', OrganizationFeature)  # NOQA
 default_manager.add('organizations:events', OrganizationFeature)  # NOQA
 default_manager.add('organizations:event-attachments', OrganizationFeature)  # NOQA
+default_manager.add('organizations:gitlab-integration', OrganizationFeature)  # NOQA
 default_manager.add('organizations:global-views', OrganizationFeature)  # NOQA
 default_manager.add('organizations:integrations-issue-basic', OrganizationFeature)  # NOQA
 default_manager.add('organizations:integrations-issue-sync', OrganizationFeature)  # NOQA
@@ -61,6 +63,8 @@ default_manager.add('organizations:internal-catchall', OrganizationFeature)  # N
 default_manager.add('organizations:sentry-apps', OrganizationFeature)  # NOQA
 default_manager.add('organizations:invite-members', OrganizationFeature)  # NOQA
 default_manager.add('organizations:js-loader', OrganizationFeature)  # NOQA
+default_manager.add('organizations:large-debug-files', OrganizationFeature)  # NOQA
+default_manager.add('organizations:legacy-event-id', OrganizationFeature)  # NOQA
 default_manager.add('organizations:monitors', OrganizationFeature)  # NOQA
 default_manager.add('organizations:new-teams', OrganizationFeature)  # NOQA
 default_manager.add('organizations:onboarding', OrganizationFeature)  # NOQA
@@ -74,20 +78,17 @@ default_manager.add('organizations:sso-rippling', OrganizationFeature)  # NOQA
 default_manager.add('organizations:sso-saml2', OrganizationFeature)  # NOQA
 default_manager.add('organizations:suggested-commits', OrganizationFeature)  # NOQA
 default_manager.add('organizations:unreleased-changes', OrganizationFeature)  # NOQA
-default_manager.add('organizations:gitlab-integration', OrganizationFeature)  # NOQA
-default_manager.add('organizations:large-debug-files', OrganizationFeature)  # NOQA
-default_manager.add('organizations:legacy-event-id', OrganizationFeature)  # NOQA
 
 # Project scoped features
-default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
+default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
 default_manager.add('projects:data-forwarding', ProjectFeature)  # NOQA
+default_manager.add('projects:discard-groups', ProjectFeature)  # NOQA
+default_manager.add('projects:minidump', ProjectFeature)  # NOQA
 default_manager.add('projects:rate-limits', ProjectFeature)  # NOQA
 default_manager.add('projects:sample-events', ProjectFeature)  # NOQA
 default_manager.add('projects:servicehooks', ProjectFeature)  # NOQA
+default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
 default_manager.add('projects:similarity-indexing', ProjectFeature)  # NOQA
-default_manager.add('projects:discard-groups', ProjectFeature)  # NOQA
-default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
-default_manager.add('projects:minidump', ProjectFeature)  # NOQA
 
 # Project plugin features
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
diff --git a/tests/sentry/api/helpers/test_group_index.py b/tests/sentry/api/helpers/test_group_index.py
new file mode 100644
index 0000000000..d337d6e97e
--- /dev/null
+++ b/tests/sentry/api/helpers/test_group_index.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from sentry.api.helpers.group_index import (
+    validate_search_filter_permissions,
+    ValidationError,
+)
+from sentry.api.issue_search import parse_search_query
+from sentry.testutils import TestCase
+
+
+class ValidateSearchFilterPermissionsTest(TestCase):
+
+    def run_test(self, query):
+        validate_search_filter_permissions(self.organization, parse_search_query(query))
+
+    def test_negative(self):
+        query = '!has:user'
+        with self.feature(
+                {'organizations:advanced_search': False},
+        ), self.assertRaisesRegexp(ValidationError, '.*negative search.*'):
+            self.run_test(query)
+
+        self.run_test(query)
+
+        query = '!something:123'
+        with self.feature(
+                {'organizations:advanced_search': False},
+        ), self.assertRaisesRegexp(ValidationError, '.*negative search.*'):
+            self.run_test(query)
+
+        self.run_test(query)
+
+    def test_wildcard(self):
+        query = 'abc:hello*'
+        with self.feature(
+                {'organizations:advanced_search': False},
+        ), self.assertRaisesRegexp(ValidationError, '.*wildcard search.*'):
+            self.run_test(query)
+
+        self.run_test(query)
+
+        query = 'raw * search'
+        with self.feature(
+                {'organizations:advanced_search': False},
+        ), self.assertRaisesRegexp(ValidationError, '.*wildcard search.*'):
+            self.run_test(query)
+
+        self.run_test(query)
diff --git a/tests/sentry/api/serializers/test_organization.py b/tests/sentry/api/serializers/test_organization.py
index dc93dfdb96..3699812124 100644
--- a/tests/sentry/api/serializers/test_organization.py
+++ b/tests/sentry/api/serializers/test_organization.py
@@ -19,6 +19,7 @@ class OrganizationSerializerTest(TestCase):
 
         assert result['id'] == six.text_type(organization.id)
         assert result['features'] == set([
+            'advanced_search',
             'new-teams',
             'shared-issues',
             'repos',
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index c357878295..42348ade38 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -391,6 +391,19 @@ class GroupListTest(APITestCase, SnubaTestCase):
 class GroupListTestWithSearchFilters(GroupListTest):
     use_new_filters = True
 
+    def test_advanced_search_errors(self):
+        self.login_as(user=self.user)
+        with self.feature({'organizations:advanced_search': False}):
+            response = self.get_response(sort_by='date', query='!has:user')
+            assert response.status_code == 400, response.data
+            assert (
+                'You need access to the advanced search feature to use negative '
+                'search' == response.data['detail']
+            )
+
+        response = self.get_response(sort_by='date', query='!has:user')
+        assert response.status_code == 200, response.data
+
 
 class GroupUpdateTest(APITestCase, SnubaTestCase):
     endpoint = 'sentry-api-0-organization-group-index'
