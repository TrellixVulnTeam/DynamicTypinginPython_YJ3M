commit eb7b08765482cd5f80077f2d686fb6329d42a46e
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Sep 12 18:32:36 2019 -0700

    feat(api): Implement organization level alert rule endpoints (SEN-989)
    
    This implements the initial organization level CRUD endpoints. These don't handle the select all
    case, we'll implement that separately since it involves a data model change.

diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 526b53023f..24cbee7d36 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -276,6 +276,12 @@ from .endpoints.useravatar import UserAvatarEndpoint
 from sentry.discover.endpoints.discover_query import DiscoverQueryEndpoint
 from sentry.discover.endpoints.discover_saved_queries import DiscoverSavedQueriesEndpoint
 from sentry.discover.endpoints.discover_saved_query_detail import DiscoverSavedQueryDetailEndpoint
+from sentry.incidents.endpoints.organization_alert_rule_details import (
+    OrganizationAlertRuleDetailsEndpoint,
+)
+from sentry.incidents.endpoints.organization_alert_rule_index import (
+    OrganizationAlertRuleIndexEndpoint,
+)
 from sentry.incidents.endpoints.project_alert_rule_details import ProjectAlertRuleDetailsEndpoint
 from sentry.incidents.endpoints.project_alert_rule_index import ProjectAlertRuleIndexEndpoint
 
@@ -531,6 +537,17 @@ urlpatterns = patterns(
                     OrganizationDetailsEndpoint.as_view(),
                     name="sentry-api-0-organization-details",
                 ),
+                # Alert Rules
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/$",
+                    OrganizationAlertRuleDetailsEndpoint.as_view(),
+                    name="sentry-api-0-organization-alert-rule-details",
+                ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/alert-rules/$",
+                    OrganizationAlertRuleIndexEndpoint.as_view(),
+                    name="sentry-api-0-organization-alert-rules",
+                ),
                 # Incidents
                 url(
                     r"^(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/activity/$",
diff --git a/src/sentry/incidents/endpoints/bases.py b/src/sentry/incidents/endpoints/bases.py
index 64f3aad29d..808ee9b769 100644
--- a/src/sentry/incidents/endpoints/bases.py
+++ b/src/sentry/incidents/endpoints/bases.py
@@ -4,6 +4,7 @@ from rest_framework.exceptions import PermissionDenied
 
 from sentry import features
 from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.incidents.models import AlertRule
 
@@ -27,3 +28,23 @@ class ProjectAlertRuleEndpoint(ProjectEndpoint):
             raise ResourceDoesNotExist
 
         return args, kwargs
+
+
+class OrganizationAlertRuleEndpoint(OrganizationEndpoint):
+    def convert_args(self, request, alert_rule_id, *args, **kwargs):
+        args, kwargs = super(OrganizationAlertRuleEndpoint, self).convert_args(
+            request, *args, **kwargs
+        )
+        organization = kwargs["organization"]
+
+        if not features.has("organizations:incidents", organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        try:
+            kwargs["alert_rule"] = AlertRule.objects.get(
+                organization=organization, id=alert_rule_id
+            )
+        except AlertRule.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return args, kwargs
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_details.py b/src/sentry/incidents/endpoints/organization_alert_rule_details.py
new file mode 100644
index 0000000000..2ee76eccad
--- /dev/null
+++ b/src/sentry/incidents/endpoints/organization_alert_rule_details.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.alert_rule import AlertRuleSerializer
+from sentry.incidents.endpoints.bases import OrganizationAlertRuleEndpoint
+from sentry.incidents.endpoints.serializers import AlertRuleSerializer as DrfAlertRuleSerializer
+from sentry.incidents.logic import AlreadyDeletedError, delete_alert_rule
+
+
+class OrganizationAlertRuleDetailsEndpoint(OrganizationAlertRuleEndpoint):
+    def get(self, request, organization, alert_rule):
+        """
+        Fetch an alert rule.
+        ``````````````````
+        :auth: required
+        """
+        data = serialize(alert_rule, request.user, AlertRuleSerializer())
+        return Response(data)
+
+    def put(self, request, organization, alert_rule):
+        serializer = DrfAlertRuleSerializer(
+            context={"organization": organization, "access": request.access},
+            instance=alert_rule,
+            data=request.data,
+            partial=True,
+        )
+
+        if serializer.is_valid():
+            alert_rule = serializer.save()
+            return Response(serialize(alert_rule, request.user), status=status.HTTP_200_OK)
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    def delete(self, request, organization, alert_rule):
+        try:
+            delete_alert_rule(alert_rule)
+            return Response(status=status.HTTP_204_NO_CONTENT)
+        except AlreadyDeletedError:
+            return Response(
+                "This rule has already been deleted", status=status.HTTP_400_BAD_REQUEST
+            )
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_index.py b/src/sentry/incidents/endpoints/organization_alert_rule_index.py
new file mode 100644
index 0000000000..ac7bee2d4b
--- /dev/null
+++ b/src/sentry/incidents/endpoints/organization_alert_rule_index.py
@@ -0,0 +1,47 @@
+from __future__ import absolute_import
+
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.incidents.models import AlertRule
+from sentry.incidents.endpoints.serializers import AlertRuleSerializer
+
+
+class OrganizationAlertRuleIndexEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        """
+        Fetches alert rules for an organization
+        """
+        if not features.has("organizations:incidents", organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        return self.paginate(
+            request,
+            queryset=AlertRule.objects.fetch_for_organization(organization),
+            order_by="-date_added",
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+            default_per_page=25,
+        )
+
+    def post(self, request, organization):
+        """
+        Create an alert rule
+        """
+        if not features.has("organizations:incidents", organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        serializer = AlertRuleSerializer(
+            context={"organization": organization, "access": request.access}, data=request.data
+        )
+
+        if serializer.is_valid():
+            alert_rule = serializer.save()
+            return Response(serialize(alert_rule, request.user), status=status.HTTP_201_CREATED)
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/incidents/endpoints/project_alert_rule_details.py b/src/sentry/incidents/endpoints/project_alert_rule_details.py
index 29ee6d9ebf..cb71e0ee37 100644
--- a/src/sentry/incidents/endpoints/project_alert_rule_details.py
+++ b/src/sentry/incidents/endpoints/project_alert_rule_details.py
@@ -22,7 +22,7 @@ class ProjectAlertRuleDetailsEndpoint(ProjectAlertRuleEndpoint):
 
     def put(self, request, project, alert_rule):
         serializer = DrfAlertRuleSerializer(
-            context={"organization": project.organization, "project": project},
+            context={"organization": project.organization, "access": request.access},
             instance=alert_rule,
             data=request.data,
             partial=True,
diff --git a/src/sentry/incidents/endpoints/project_alert_rule_index.py b/src/sentry/incidents/endpoints/project_alert_rule_index.py
index 1a137e63fa..2c8916ce64 100644
--- a/src/sentry/incidents/endpoints/project_alert_rule_index.py
+++ b/src/sentry/incidents/endpoints/project_alert_rule_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from copy import deepcopy
+
 from rest_framework import status
 from rest_framework.response import Response
 
@@ -36,8 +38,11 @@ class ProjectAlertRuleIndexEndpoint(ProjectEndpoint):
         if not features.has("organizations:incidents", project.organization, actor=request.user):
             raise ResourceDoesNotExist
 
+        data = deepcopy(request.data)
+        data["projects"] = [project.slug]
+
         serializer = AlertRuleSerializer(
-            context={"organization": project.organization, "project": project}, data=request.data
+            context={"organization": project.organization, "access": request.access}, data=data
         )
 
         if serializer.is_valid():
diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index 8cfae52082..f46acf5a5d 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -7,7 +7,9 @@ from enum import Enum
 from rest_framework import serializers
 
 from sentry.api.serializers.rest_framework.base import CamelSnakeModelSerializer
+from sentry.api.serializers.rest_framework.project import ProjectField
 from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.models.project import Project
 from sentry.snuba.models import QueryAggregations
 from sentry.incidents.logic import (
     AlertRuleNameAlreadyUsedError,
@@ -17,8 +19,15 @@ from sentry.incidents.logic import (
 
 
 class AlertRuleSerializer(CamelSnakeModelSerializer):
+    """
+    Serializer for creating/updating an alert rule. Required context:
+     - `organization`: The organization related to this alert rule.
+     - `access`: An access object (from `request.access`)
+    """
+
     # XXX: ArrayFields aren't supported automatically until DRF 3.1
     aggregations = serializers.ListField(child=serializers.IntegerField(), required=False)
+    projects = serializers.ListField(child=ProjectField(), required=True)
 
     class Meta:
         model = AlertRule
@@ -32,6 +41,7 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             "threshold_period",
             "aggregation",
             "aggregations",
+            "projects",
         ]
         extra_kwargs = {
             "query": {"allow_blank": True, "required": True},
@@ -84,17 +94,20 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             if "aggregation" not in validated_data:
                 raise serializers.ValidationError("aggregation is required")
 
-            return create_alert_rule(
-                organization=self.context["organization"],
-                projects=[self.context["project"]],
-                **validated_data
-            )
+            return create_alert_rule(organization=self.context["organization"], **validated_data)
         except AlertRuleNameAlreadyUsedError:
             raise serializers.ValidationError("This name is already in use for this project")
 
     def _remove_unchanged_fields(self, instance, validated_data):
         for field_name, value in list(six.iteritems(validated_data)):
             # Remove any fields that haven't actually changed
+            if field_name == "projects":
+                project_slugs = Project.objects.filter(
+                    querysubscription__alert_rules=instance
+                ).values_list("slug", flat=True)
+                if set(project_slugs) == set([project.slug for project in value]):
+                    validated_data.pop(field_name)
+                continue
             if isinstance(value, Enum):
                 value = value.value
             if getattr(instance, field_name) == value:
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index de0cf6141f..7c79dc49ad 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -250,6 +250,9 @@ class AlertRuleManager(BaseManager):
             )
         )
 
+    def fetch_for_organization(self, organization):
+        return self.filter(organization=organization)
+
     def fetch_for_project(self, project):
         return self.filter(query_subscriptions__project=project)
 
@@ -273,9 +276,7 @@ class AlertRule(Model):
 
     organization = FlexibleForeignKey("sentry.Organization", db_index=False, null=True)
     query_subscriptions = models.ManyToManyField(
-        "sentry.QuerySubscription",
-        related_name="query_subscriptions",
-        through=AlertRuleQuerySubscription,
+        "sentry.QuerySubscription", related_name="alert_rules", through=AlertRuleQuerySubscription
     )
     name = models.TextField()
     status = models.SmallIntegerField(default=AlertRuleStatus.PENDING.value)
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
new file mode 100644
index 0000000000..0c0159437a
--- /dev/null
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
@@ -0,0 +1,129 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import create_alert_rule
+from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.snuba.models import QueryAggregations
+from sentry.testutils import APITestCase
+
+
+class AlertRuleDetailsBase(object):
+    endpoint = "sentry-api-0-organization-alert-rule-details"
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def alert_rule(self):
+        return create_alert_rule(
+            self.organization,
+            [self.project],
+            "hello",
+            AlertRuleThresholdType.ABOVE,
+            "level:error",
+            QueryAggregations.TOTAL,
+            10,
+            1000,
+            400,
+            1,
+        )
+
+    def test_invalid_rule_id(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_response(self.organization.slug, 1234)
+
+        assert resp.status_code == 404
+
+    def test_permissions(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.create_user())
+        with self.feature("organizations:incidents"):
+            resp = self.get_response(self.organization.slug, self.alert_rule.id)
+
+        assert resp.status_code == 403
+
+    def test_no_feature(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug, self.alert_rule.id)
+        assert resp.status_code == 404
+
+
+class AlertRuleDetailsGetEndpointTest(AlertRuleDetailsBase, APITestCase):
+    def test_simple(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug, self.alert_rule.id)
+
+        assert resp.data == serialize(self.alert_rule)
+
+
+class AlertRuleDetailsPutEndpointTest(AlertRuleDetailsBase, APITestCase):
+    method = "put"
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug, self.alert_rule.id, name="what")
+
+        self.alert_rule.name = "what"
+        assert resp.data == serialize(self.alert_rule)
+        assert resp.data["name"] == "what"
+
+    def test_not_updated_fields(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(
+                self.organization.slug, self.alert_rule.id, aggregation=self.alert_rule.aggregation
+            )
+
+        existing_sub = self.alert_rule.query_subscriptions.first()
+
+        # Alert rule should be exactly the same
+        assert resp.data == serialize(self.alert_rule)
+        # If the aggregation changed we'd have a new subscription, validate that
+        # it hasn't changed explicitly
+        updated_sub = AlertRule.objects.get(id=self.alert_rule.id).query_subscriptions.first()
+        assert updated_sub.subscription_id == existing_sub.subscription_id
+
+
+class AlertRuleDetailsDeleteEndpointTest(AlertRuleDetailsBase, APITestCase):
+    method = "delete"
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            self.get_valid_response(self.organization.slug, self.alert_rule.id, status_code=204)
+
+        assert not AlertRule.objects.filter(id=self.alert_rule.id).exists()
+        assert not AlertRule.objects_with_deleted.filter(name=self.alert_rule.name)
+        assert AlertRule.objects_with_deleted.filter(id=self.alert_rule.id).exists()
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py
new file mode 100644
index 0000000000..15c0d745d4
--- /dev/null
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py
@@ -0,0 +1,132 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from freezegun import freeze_time
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import create_alert_rule
+from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.snuba.models import QueryAggregations
+from sentry.testutils import APITestCase
+
+
+class AlertRuleListEndpointTest(APITestCase):
+    endpoint = "sentry-api-0-organization-alert-rules"
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    def test_simple(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        alert_rule = create_alert_rule(
+            self.organization,
+            [self.project],
+            "hello",
+            AlertRuleThresholdType.ABOVE,
+            "level:error",
+            QueryAggregations.TOTAL,
+            10,
+            1000,
+            400,
+            1,
+        )
+
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug)
+
+        assert resp.data == serialize([alert_rule])
+
+    def test_no_feature(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug)
+        assert resp.status_code == 404
+
+
+@freeze_time()
+class AlertRuleCreateEndpointTest(APITestCase):
+    endpoint = "sentry-api-0-organization-alert-rules"
+    method = "post"
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(
+                self.organization.slug,
+                projects=[self.project.slug],
+                name="an alert",
+                thresholdType=1,
+                query="hi",
+                aggregation=0,
+                timeWindow=10,
+                alertThreshold=1000,
+                resolveThreshold=300,
+                status_code=201,
+            )
+        assert "id" in resp.data
+        alert_rule = AlertRule.objects.get(id=resp.data["id"])
+        assert resp.data == serialize(alert_rule, self.user)
+
+    def test_invalid_projects(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(
+                self.organization.slug,
+                projects=[
+                    self.project.slug,
+                    self.create_project(organization=self.create_organization()).slug,
+                ],
+                name="an alert",
+                thresholdType=1,
+                query="hi",
+                aggregation=0,
+                timeWindow=10,
+                alertThreshold=1000,
+                resolveThreshold=300,
+                status_code=400,
+            )
+        assert resp.data == {"projects": [u"Invalid project"]}
+
+    def test_no_feature(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug)
+        assert resp.status_code == 404
+
+    def test_no_perms(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="member", teams=[self.team]
+        )
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug)
+        assert resp.status_code == 403
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index d7bb154357..a4a922f2dd 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -2,8 +2,10 @@ from __future__ import absolute_import
 
 from exam import fixture
 
+from sentry.auth.access import from_user
 from sentry.incidents.endpoints.serializers import AlertRuleSerializer
-from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.incidents.logic import create_alert_rule
+from sentry.incidents.models import AlertRuleThresholdType
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import TestCase
 
@@ -20,22 +22,26 @@ class TestAlertRuleSerializer(TestCase):
             "alert_threshold": 0,
             "aggregation": 0,
             "threshold_period": 1,
+            "projects": [self.project.slug],
         }
 
+    @fixture
+    def access(self):
+        return from_user(self.user, self.organization)
+
+    @fixture
+    def context(self):
+        return {"organization": self.organization, "access": self.access}
+
     def run_fail_validation_test(self, params, errors):
         base_params = self.valid_params.copy()
         base_params.update(params)
-        serializer = AlertRuleSerializer(
-            context={"organization": self.project.organization, "project": self.project},
-            data=base_params,
-        )
+        serializer = AlertRuleSerializer(context=self.context, data=base_params)
         assert not serializer.is_valid()
         assert serializer.errors == errors
 
     def test_validation_no_params(self):
-        serializer = AlertRuleSerializer(
-            context={"organization": self.project.organization, "project": self.project}, data={}
-        )
+        serializer = AlertRuleSerializer(context=self.context, data={})
         assert not serializer.is_valid()
         field_is_required = ["This field is required."]
         assert serializer.errors == {
@@ -45,6 +51,7 @@ class TestAlertRuleSerializer(TestCase):
             "thresholdType": field_is_required,
             "resolveThreshold": field_is_required,
             "alertThreshold": field_is_required,
+            "projects": field_is_required,
         }
 
     def test_time_window(self):
@@ -80,10 +87,7 @@ class TestAlertRuleSerializer(TestCase):
 
     def _run_changed_fields_test(self, alert_rule, params, expected):
         serializer = AlertRuleSerializer(
-            context={"organization": self.project.organization, "project": self.project},
-            instance=alert_rule,
-            data=params,
-            partial=True,
+            context=self.context, instance=alert_rule, data=params, partial=True
         )
         serializer.is_valid()
         assert (
@@ -91,14 +95,74 @@ class TestAlertRuleSerializer(TestCase):
         )
 
     def test_remove_unchanged_fields(self):
-        alert_rule = AlertRule(**self.valid_params)
-        self._run_changed_fields_test(alert_rule, self.valid_params, {})
+        projects = [self.project, self.create_project()]
+        name = "hello"
+        query = "level:error"
+        aggregation = QueryAggregations.TOTAL
+        threshold_type = AlertRuleThresholdType.ABOVE
+        time_window = 10
+        alert_threshold = 1000
+        resolve_threshold = 400
+        alert_rule = create_alert_rule(
+            self.organization,
+            projects,
+            name,
+            threshold_type,
+            query,
+            aggregation,
+            time_window,
+            alert_threshold,
+            resolve_threshold,
+            1,
+        )
+
+        self._run_changed_fields_test(
+            alert_rule,
+            {
+                "projects": [p.slug for p in projects],
+                "name": name,
+                "threshold_type": threshold_type.value,
+                "query": query,
+                "aggregation": aggregation.value,
+                "time_window": time_window,
+                "alert_threshold": alert_threshold,
+                "resolve_threshold": resolve_threshold,
+            },
+            {},
+        )
+
+        self._run_changed_fields_test(alert_rule, {"projects": [p.slug for p in projects]}, {})
+        self._run_changed_fields_test(
+            alert_rule, {"projects": [self.project.slug]}, {"projects": [self.project]}
+        )
+
+        self._run_changed_fields_test(alert_rule, {"name": name}, {})
         self._run_changed_fields_test(alert_rule, {"name": "a name"}, {"name": "a name"})
-        self._run_changed_fields_test(alert_rule, {"aggregation": 0}, {})
+
+        self._run_changed_fields_test(alert_rule, {"threshold_type": threshold_type.value}, {})
+        self._run_changed_fields_test(
+            alert_rule, {"threshold_type": 1}, {"threshold_type": AlertRuleThresholdType.BELOW}
+        )
+
+        self._run_changed_fields_test(alert_rule, {"query": query}, {})
+        self._run_changed_fields_test(
+            alert_rule, {"query": "level:warning"}, {"query": "level:warning"}
+        )
+
+        self._run_changed_fields_test(alert_rule, {"aggregation": aggregation.value}, {})
         self._run_changed_fields_test(
             alert_rule, {"aggregation": 1}, {"aggregation": QueryAggregations.UNIQUE_USERS}
         )
-        self._run_changed_fields_test(alert_rule, {"threshold_type": 0}, {})
+
+        self._run_changed_fields_test(alert_rule, {"time_window": time_window}, {})
+        self._run_changed_fields_test(alert_rule, {"time_window": 20}, {"time_window": 20})
+
+        self._run_changed_fields_test(alert_rule, {"alert_threshold": alert_threshold}, {})
         self._run_changed_fields_test(
-            alert_rule, {"threshold_type": 1}, {"threshold_type": AlertRuleThresholdType.BELOW}
+            alert_rule, {"alert_threshold": 2000}, {"alert_threshold": 2000}
+        )
+
+        self._run_changed_fields_test(alert_rule, {"resolve_threshold": resolve_threshold}, {})
+        self._run_changed_fields_test(
+            alert_rule, {"resolve_threshold": 200}, {"resolve_threshold": 200}
         )
