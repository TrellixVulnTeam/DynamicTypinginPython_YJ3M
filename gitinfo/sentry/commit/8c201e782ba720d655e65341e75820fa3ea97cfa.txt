commit 8c201e782ba720d655e65341e75820fa3ea97cfa
Author: Mark Story <mark@sentry.io>
Date:   Thu Feb 13 12:53:26 2020 -0500

    fix(discover) Improve query conditions for graph navigation (#16981)
    
    When start/end support was added to referenceEvent conditions to improve
    performance graph click events broke for events in timeslices that don't
    match the current event. By using the current global selection as the
    start/end, and adding narrower timestamp conditions we can retain the
    performance benefits added before and fix finding graph events.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
index 245882b6ee..f3d8eb849f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
@@ -19,6 +19,7 @@ import MarkLine from 'app/components/charts/components/markLine';
 import {Panel} from 'app/components/panels';
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import theme from 'app/utils/theme';
 import {Event, Organization, GlobalSelection} from 'app/types';
 
@@ -67,6 +68,17 @@ const getCurrentEventMarker = (currentEvent: Event) => {
   };
 };
 
+type ClickHandlerOptions = {
+  api: Client;
+  currentEvent: Event;
+  organization: Organization;
+  queryString: string;
+  field: string[];
+  interval: string;
+  selection: GlobalSelection;
+  eventView: EventView;
+};
+
 /**
  * Handle click events on line markers
  *
@@ -86,16 +98,7 @@ const handleClick = async function(
     interval,
     selection,
     eventView,
-  }: {
-    api: Client;
-    currentEvent: Event;
-    organization: Organization;
-    queryString: string;
-    field: string[];
-    interval: string;
-    selection: GlobalSelection;
-    eventView: EventView;
-  }
+  }: ClickHandlerOptions
 ) {
   // Get the timestamp that was clicked.
   const value = series.value[0];
@@ -109,17 +112,30 @@ const handleClick = async function(
     ? 'last_seen'
     : null;
 
+  const endValue = getUtcDateString(value + intervalToMilliseconds(interval));
+  const startValue = getUtcDateString(value);
+
+  // Remove and replace any timestamp conditions from the existing query.
+  const newQuery = tokenizeSearch(queryString);
+  newQuery.timestamp = [`>${startValue}`, `<=${endValue}`];
+
   // Get events that match the clicked timestamp
   // taking into account the group and current environment & query
   const query: any = {
     environment: selection.environments,
-    start: getUtcDateString(value),
-    end: getUtcDateString(value + intervalToMilliseconds(interval)),
     limit: 1,
     referenceEvent: `${currentEvent.projectSlug}:${currentEvent.eventID}`,
-    query: queryString,
+    query: stringifyQueryObject(newQuery),
     field,
   };
+
+  // Perserve the current query window
+  if (selection.datetime.period) {
+    query.statsPeriod = selection.datetime.period;
+  } else {
+    query.start = selection.datetime.start;
+    query.end = selection.datetime.end;
+  }
   if (sortField !== null) {
     query.sort = sortField;
   }
