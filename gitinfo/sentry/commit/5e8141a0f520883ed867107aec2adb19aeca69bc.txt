commit 5e8141a0f520883ed867107aec2adb19aeca69bc
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Sep 16 15:00:41 2019 -0700

    feat(app-platform): distinguish public integrations (#14673)

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index e810bc9822..b22671af43 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -3,6 +3,7 @@ import {css} from 'react-emotion';
 import {ModalHeader, ModalBody, ModalFooter} from 'react-bootstrap';
 
 import ModalActions from 'app/actions/modalActions';
+import {Integration, IntegrationProvider, Organization, SentryApp} from 'app/types';
 
 export type RenderProps = {
   closeModal: () => void;
@@ -17,6 +18,19 @@ export type ModalOptions = {
   type?: string;
 };
 
+export type IntegrationDetailsModalOptions = {
+  onAddIntegration: (integration: Integration) => void;
+  provider: IntegrationProvider;
+  organization: Organization;
+};
+
+export type SentryAppDetailsModalOptions = {
+  sentryApp: SentryApp;
+  isInstalled: boolean;
+  onInstall: () => void;
+  organization: Organization;
+};
+
 /**
  * Show a modal
  */
@@ -153,7 +167,7 @@ export function openRecoveryOptions(options: ModalOptions = {}) {
  * @param Object options.provider The integration provider to show the details for
  * @param Function options.onAddIntegration Called after a new integration is added
  */
-export function openIntegrationDetails(options: ModalOptions = {}) {
+export function openIntegrationDetails(options: IntegrationDetailsModalOptions) {
   import(/* webpackChunkName: "IntegrationDetailsModal" */ 'app/components/modals/integrationDetailsModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -179,7 +193,7 @@ export function openHelpSearchModal() {
     });
 }
 
-export function openSentryAppDetailsModal(options: ModalOptions = {}) {
+export function openSentryAppDetailsModal(options: SentryAppDetailsModalOptions) {
   import(/* webpackChunkName: "SentryAppDetailsModal" */ 'app/components/modals/sentryAppDetailsModal')
     .then(mod => mod.default)
     .then(Modal => {
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx b/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx
rename to src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.tsx
index 960176e702..1c7548c377 100644
--- a/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.tsx
@@ -5,6 +5,8 @@ import {
   clearIndicators,
 } from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
+import {Client} from 'app/api';
+import {SentryApp, SentryAppInstallation} from 'app/types';
 
 /**
  * Install a sentry application
@@ -13,7 +15,11 @@ import {t} from 'app/locale';
  * @param {String} orgId Organization Slug
  * @param {Object} app SentryApp
  */
-export function installSentryApp(client, orgId, app) {
+export function installSentryApp(
+  client: Client,
+  orgId: string,
+  app: SentryApp
+): Promise<SentryAppInstallation> {
   addLoadingMessage();
   const promise = client.requestPromise(
     `/organizations/${orgId}/sentry-app-installations/`,
@@ -35,7 +41,10 @@ export function installSentryApp(client, orgId, app) {
  * @param {Object} client ApiClient
  * @param {Object} install SentryAppInstallation
  */
-export function uninstallSentryApp(client, install) {
+export function uninstallSentryApp(
+  client: Client,
+  install: SentryAppInstallation
+): Promise<void> {
   addLoadingMessage();
   const promise = client.requestPromise(`/sentry-app-installations/${install.uuid}/`, {
     method: 'DELETE',
diff --git a/src/sentry/static/sentry/app/components/circleIndicator.tsx b/src/sentry/static/sentry/app/components/circleIndicator.tsx
index a2bd69ff2f..17801dba41 100644
--- a/src/sentry/static/sentry/app/components/circleIndicator.tsx
+++ b/src/sentry/static/sentry/app/components/circleIndicator.tsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 
 type Props = {
-  enabled: boolean;
+  enabled?: boolean;
   size: number;
   color?: string;
   theme?: any;
diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.jsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
similarity index 92%
rename from src/sentry/static/sentry/app/components/modals/integrationDetailsModal.jsx
rename to src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
index 61728ed763..029560337f 100644
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
@@ -18,13 +18,18 @@ import Tag from 'app/views/settings/components/tag';
 import Tooltip from 'app/components/tooltip';
 import marked, {singleLineRenderer} from 'app/utils/marked';
 import space from 'app/styles/space';
+import {IntegrationDetailsModalOptions} from 'app/actionCreators/modal';
+import {Integration} from 'app/types';
 
-const EARLY_ADOPTER_INTEGRATIONS = [];
+type Props = {
+  closeModal: () => void;
+} & IntegrationDetailsModalOptions;
 
 /**
  * In sentry.io the features list supports rendering plan details. If the hook
  * is not registered for rendering the features list like this simply show the
  * features as a normal list.
+ * TODO(TS): Add typing for feature gates
  */
 const defaultFeatureGateComponents = {
   IntegrationFeatures: p =>
@@ -43,7 +48,7 @@ const defaultFeatureGateComponents = {
   ),
 };
 
-class IntegrationDetailsModal extends React.Component {
+class IntegrationDetailsModal extends React.Component<Props> {
   static propTypes = {
     closeModal: PropTypes.func.isRequired,
     onAddIntegration: PropTypes.func.isRequired,
@@ -58,7 +63,7 @@ class IntegrationDetailsModal extends React.Component {
     });
   }
 
-  onAddIntegration = integration => {
+  onAddIntegration = (integration: Integration) => {
     this.props.closeModal();
     this.props.onAddIntegration(integration);
   };
@@ -69,12 +74,6 @@ class IntegrationDetailsModal extends React.Component {
     ));
   }
 
-  earlyAdopterLabel(provider) {
-    return EARLY_ADOPTER_INTEGRATIONS.includes(provider.key) ? (
-      <StyledTag priority="warning">Early Adopter</StyledTag>
-    ) : null;
-  }
-
   render() {
     const {provider, organization, closeModal} = this.props;
     const {metadata} = provider;
@@ -140,10 +139,7 @@ class IntegrationDetailsModal extends React.Component {
             <ProviderName data-test-id="provider-name">
               {t('%s Integration', provider.name)}
             </ProviderName>
-            <Flex>
-              {this.earlyAdopterLabel(provider)}
-              {provider.features.length && this.featureTags(provider.features)}
-            </Flex>
+            <Flex>{provider.features.length && this.featureTags(provider.features)}</Flex>
           </Flex>
         </Flex>
         <Description dangerouslySetInnerHTML={{__html: description}} />
@@ -193,7 +189,7 @@ class IntegrationDetailsModal extends React.Component {
   }
 }
 
-const DisabledNotice = styled(({reason, ...p}) => (
+const DisabledNotice = styled(({reason, ...p}: {reason: string}) => (
   <Flex align="center" flex={1} {...p}>
     <InlineSvg src="icon-circle-exclamation" size="1.5em" />
     <Box ml={1}>{reason}</Box>
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
similarity index 95%
rename from src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx
rename to src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
index a694f45912..c94e6ce3dd 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
@@ -17,7 +17,15 @@ import InlineSvg from 'app/components/inlineSvg';
 import Tag from 'app/views/settings/components/tag';
 import {toPermissions} from 'app/utils/consolidatedScopes';
 import CircleIndicator from 'app/components/circleIndicator';
+import {SentryAppDetailsModalOptions} from 'app/actionCreators/modal';
 
+type Props = {
+  closeOnInstall?: boolean;
+  closeModal: () => void;
+} & SentryAppDetailsModalOptions &
+  AsyncComponent['props'];
+
+//TODO(TS): Add typing for feature gates
 const defaultFeatureGateComponents = {
   IntegrationFeatures: p =>
     p.children({
@@ -35,7 +43,7 @@ const defaultFeatureGateComponents = {
   ),
 };
 
-export default class SentryAppDetailsModal extends AsyncComponent {
+export default class SentryAppDetailsModal extends AsyncComponent<Props> {
   static propTypes = {
     sentryApp: SentryTypes.SentryApplication.isRequired,
     organization: SentryTypes.Organization.isRequired,
@@ -49,7 +57,7 @@ export default class SentryAppDetailsModal extends AsyncComponent {
     closeOnInstall: true,
   };
 
-  getEndpoints() {
+  getEndpoints(): [string, string][] {
     const {sentryApp} = this.props;
     return [['featureData', `/sentry-apps/${sentryApp.slug}/features/`]];
   }
@@ -200,7 +208,7 @@ const Author = styled(Box)`
   color: ${p => p.theme.gray2};
 `;
 
-const DisabledNotice = styled(({reason, ...p}) => (
+const DisabledNotice = styled(({reason, ...p}: {reason: string}) => (
   <Flex align="center" flex={1} {...p}>
     <InlineSvg src="icon-circle-exclamation" size="1.5em" />
     <Box ml={1}>{reason}</Box>
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
index 6a513c6545..0094f45a5b 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
@@ -4,7 +4,6 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import _ from 'lodash';
-import {Location} from 'history';
 
 import {SentryApp} from 'app/types';
 import {t} from 'app/locale';
@@ -30,7 +29,6 @@ class PublishRequestFormModel extends FormModel {
 
 type Props = {
   app: SentryApp;
-  location: Location;
   closeModal: () => void;
 };
 
@@ -141,7 +139,7 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
             submitLabel={t('Request Publication')}
             onCancel={() => this.props.closeModal()}
           >
-            <JsonForm location={this.props.location} forms={forms} />
+            <JsonForm forms={forms} />
           </Form>
         </Body>
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 0e86e87620..4fe6ec53b6 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1,6 +1,12 @@
 import {SpanEntry} from 'app/components/events/interfaces/spans/types';
 import {API_SCOPES} from 'app/constants';
 
+export type ObjectStatus =
+  | 'active'
+  | 'disabled'
+  | 'pending_deletion'
+  | 'deletion_in_progress';
+
 export type Organization = {
   id: string;
   slug: string;
@@ -196,8 +202,27 @@ export type Environment = {};
 // TODO(ts): This type is incomplete
 export type SavedSearch = {};
 
-// TODO(ts): This type is incomplete
-export type Plugin = {};
+export type Plugin = {
+  id: string;
+  name: string;
+  slug: string;
+  shortName: string;
+  type: string;
+  canDisable: boolean;
+  isTestable: boolean;
+  hasConfiguration: boolean;
+  metadata: any; // TODO(ts)
+  contexts: any[]; // TODO(ts)
+  status: string;
+  assets: any[]; // TODO(ts)
+  doc: string;
+  enabled?: boolean;
+  version?: string;
+  author?: {name: string; url: string};
+  isHidden: boolean;
+  description?: string;
+  resourceLinks?: Array<{title: string; url: string}>;
+};
 
 export type GlobalSelection = {
   projects: number[];
@@ -335,12 +360,23 @@ export type Repository = {
   url: string;
 };
 
+export type IntegrationProvider = {
+  key: string;
+  name: string;
+  canAdd: boolean;
+  canDisable: boolean;
+  features: string[];
+  aspects: any; //TODO(ts)
+  setupDialog: object; //TODO(ts)
+  metadata: any; //TODO(ts)
+};
+
 export type WebhookEvent = 'issue' | 'error';
 
 export type Scope = typeof API_SCOPES[number];
 
 export type SentryApp = {
-  status: string;
+  status: 'unpublished' | 'published' | 'internal';
   scopes: Scope[];
   isAlertable: boolean;
   verifyInstall: boolean;
@@ -365,6 +401,30 @@ export type SentryApp = {
   };
 };
 
+export type Integration = {
+  id: string;
+  name: string;
+  icon: string;
+  domainName: string;
+  accountType: string;
+  status: ObjectStatus;
+  provider: IntegrationProvider;
+  configOrganization: Array<any>;
+};
+
+export type SentryAppInstallation = {
+  app: {
+    uuid: string;
+    slug: string;
+  };
+  organization: {
+    slug: string;
+  };
+  uuid: string;
+  status: 'installed' | 'pending';
+  code?: string;
+};
+
 export type PermissionValue = 'no-access' | 'read' | 'write' | 'admin';
 
 export type Permissions = {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
similarity index 54%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
index 273b340f95..36d9e44251 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
@@ -14,13 +14,46 @@ import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarni
 import PermissionAlert from 'app/views/settings/organization/permissionAlert';
 import ProviderRow from 'app/views/organizationIntegrations/providerRow';
 import {removeSentryApp} from 'app/actionCreators/sentryApps';
-import SentryAppInstallations from 'app/views/organizationIntegrations/sentryAppInstallations';
+import SentryAppInstallationDetail from 'app/views/organizationIntegrations/sentryAppInstallationDetail';
 import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import withOrganization from 'app/utils/withOrganization';
+import {
+  Organization,
+  Integration,
+  Plugin,
+  SentryApp,
+  IntegrationProvider,
+  SentryAppInstallation,
+} from 'app/types';
+import {RequestOptions} from 'app/api';
+
+type AppOrProvider = SentryApp | IntegrationProvider;
+
+type Props = {
+  organization: Organization;
+  hideHeader: boolean;
+};
+
+type State = {
+  integrations: Integration[];
+  newlyInstalledIntegrationId: string;
+  plugins: Plugin[];
+  appInstalls: SentryAppInstallation[];
+  orgOwnedApps: SentryApp[];
+  publishedApps: SentryApp[];
+  config: {providers: IntegrationProvider[]};
+};
+
+function isSentryApp(integration: AppOrProvider): integration is SentryApp {
+  return (integration as SentryApp).uuid !== undefined;
+}
 
-class OrganizationIntegrations extends AsyncComponent {
+class OrganizationIntegrations extends AsyncComponent<
+  Props & AsyncComponent['props'],
+  State & AsyncComponent['state']
+> {
   // Some integrations require visiting a different website to add them. When
   // we come back to the tab we want to show our integrations as soon as we can.
   shouldReload = true;
@@ -37,7 +70,7 @@ class OrganizationIntegrations extends AsyncComponent {
     });
   }
 
-  getEndpoints() {
+  getEndpoints(): ([string, string, any] | [string, string])[] {
     const {orgId} = this.props.params;
     const query = {plugins: ['vsts', 'github', 'bitbucket']};
     return [
@@ -62,27 +95,13 @@ class OrganizationIntegrations extends AsyncComponent {
     return groupBy(this.state.unmigratableRepos, repo => repo.name.split('/')[0]);
   }
 
-  get providers() {
-    // Adds a list of `integrations` (installed Integration records)
-    // for each Provider, as well as an `isInstalled` boolean denoting
-    // when at least one Integration is present.
-    return this.state.config.providers.map(provider => {
-      const integrations = this.state.integrations.filter(
-        i => i.provider.key === provider.key
-      );
-      const isInstalled = integrations.length > 0;
-
-      return {
-        ...provider,
-        integrations,
-        isInstalled,
-      };
-    });
+  get providers(): IntegrationProvider[] {
+    return this.state.config.providers;
   }
 
   // Actions
 
-  onInstall = integration => {
+  onInstall = (integration: Integration) => {
     // Merge the new integration into the list. If we're updating an
     // integration overwrite the old integration.
     const keyedItems = keyBy(this.state.integrations, i => i.id);
@@ -90,7 +109,7 @@ class OrganizationIntegrations extends AsyncComponent {
     // Mark this integration as newlyAdded if it didn't already exist, allowing
     // us to animate the element in.
     if (!keyedItems.hasOwnProperty(integration.id)) {
-      integration.newlyAdded = true;
+      this.setState({newlyInstalledIntegrationId: integration.id});
     }
 
     const integrations = sortArray(
@@ -100,7 +119,7 @@ class OrganizationIntegrations extends AsyncComponent {
     this.setState({integrations});
   };
 
-  onRemove = integration => {
+  onRemove = (integration: Integration) => {
     const {orgId} = this.props.params;
 
     const origIntegrations = [...this.state.integrations];
@@ -108,7 +127,7 @@ class OrganizationIntegrations extends AsyncComponent {
     const integrations = this.state.integrations.filter(i => i.id !== integration.id);
     this.setState({integrations});
 
-    const options = {
+    const options: RequestOptions = {
       method: 'DELETE',
       error: () => {
         this.setState({integrations: origIntegrations});
@@ -119,8 +138,8 @@ class OrganizationIntegrations extends AsyncComponent {
     this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
   };
 
-  onDisable = integration => {
-    let url;
+  onDisable = (integration: Integration) => {
+    let url: string;
     const [domainName, orgName] = integration.domainName.split('/');
 
     if (integration.accountType === 'User') {
@@ -132,110 +151,136 @@ class OrganizationIntegrations extends AsyncComponent {
     window.open(url, '_blank');
   };
 
-  // Rendering
+  handleRemoveInternalSentryApp = (app: SentryApp): void => {
+    const apps = this.state.orgOwnedApps.filter(a => a.slug !== app.slug);
+    removeSentryApp(this.api, app).then(
+      () => {
+        this.setState({orgOwnedApps: apps});
+      },
+      () => {}
+    );
+  };
+
+  handleRemoveAppInstallation = (app: SentryApp): void => {
+    const appInstalls = this.state.appInstalls.filter(i => i.app.slug !== app.slug);
+    this.setState({appInstalls});
+  };
+
+  handleAppInstallation = (install: SentryAppInstallation): void => {
+    this.setState({appInstalls: [install, ...this.state.appInstalls]});
+  };
 
-  renderProvider(provider) {
+  getAppInstall = (app: SentryApp) => {
+    return this.state.appInstalls.find(i => i.app.slug === app.slug);
+  };
+
+  //Returns 0 if uninstalled, 1 if pending, and 2 if installed
+  getInstallValue(integration: AppOrProvider) {
+    const {integrations} = this.state;
+    if (isSentryApp(integration)) {
+      const install = this.getAppInstall(integration);
+      if (install) {
+        return install.status === 'pending' ? 1 : 2;
+      }
+      return 0;
+    }
+    return integrations.find(i => i.provider.key === integration.key) ? 2 : 0;
+  }
+
+  sortIntegrations(integrations: AppOrProvider[]) {
+    return integrations
+      .sort((a, b) => a.name.localeCompare(b.name))
+      .sort((a, b) => this.getInstallValue(b) - this.getInstallValue(a));
+  }
+
+  // Rendering
+  renderProvider = (provider: IntegrationProvider) => {
+    //find the integration installations for that provider
+    const integrations = this.state.integrations.filter(
+      i => i.provider.key === provider.key
+    );
     return (
       <ProviderRow
         key={`row-${provider.key}`}
         data-test-id="integration-row"
         provider={provider}
         orgId={this.props.params.orgId}
-        integrations={provider.integrations}
+        integrations={integrations}
         onInstall={this.onInstall}
         onRemove={this.onRemove}
         onDisable={this.onDisable}
         onReinstall={this.onInstall}
         enabledPlugins={this.enabledPlugins}
+        newlyInstalledIntegrationId={this.state.newlyInstalledIntegrationId}
       />
     );
-  }
+  };
 
-  renderSentryApps(apps, key) {
+  //render either an internal or non-internal app
+  renderSentryApp = (app: SentryApp) => {
     const {organization} = this.props;
-    const {appInstalls} = this.state;
 
-    return (
-      <SentryAppInstallations
-        key={`sentry-app-row-${key}`}
-        data-test-id="integration-row"
-        api={this.api}
-        organization={organization}
-        installs={appInstalls}
-        applications={apps}
-      />
-    );
-  }
-
-  renderInternalSentryApps(app, key) {
-    const {organization} = this.props;
+    if (app.status === 'internal') {
+      return (
+        <SentryApplicationRow
+          key={`sentry-app-row-${app.slug}`}
+          data-test-id="internal-integration-row"
+          onRemoveApp={() => this.handleRemoveInternalSentryApp(app)}
+          organization={organization}
+          app={app}
+        />
+      );
+    }
 
     return (
-      <SentryApplicationRow
-        key={`sentry-app-row-${key}`}
-        data-test-id="internal-integration-row"
+      <SentryAppInstallationDetail
+        key={`sentry-app-row-${app.slug}`}
+        data-test-id="integration-row"
         api={this.api}
-        onRemoveApp={() => this.onRemoveInternalApp(app)}
         organization={organization}
+        install={this.getAppInstall(app)}
+        onAppUninstall={() => this.handleRemoveAppInstallation(app)}
+        onAppInstall={this.handleAppInstallation}
         app={app}
       />
     );
-  }
+  };
 
-  onRemoveInternalApp = app => {
-    const apps = this.state.orgOwnedApps.filter(a => a.slug !== app.slug);
-    removeSentryApp(this.api, app).then(
-      () => {
-        this.setState({orgOwnedApps: apps});
-      },
-      () => {}
-    );
+  renderIntegration = (integration: AppOrProvider) => {
+    if (isSentryApp(integration)) {
+      return this.renderSentryApp(integration);
+    }
+    return this.renderProvider(integration);
   };
 
   renderBody() {
-    const {reloading, orgOwnedApps, publishedApps, appInstalls} = this.state;
+    const {reloading, orgOwnedApps, publishedApps} = this.state;
     const published = publishedApps || [];
     // we dont want the app to render twice if its the org that created
     // the published app.
     const orgOwned = orgOwnedApps.filter(app => {
       return !published.find(p => p.slug === app.slug);
     });
-    const orgOwnedInternal = orgOwned.filter(app => {
-      return app.status === 'internal';
-    });
-    const applications = published.concat(orgOwned.filter(a => a.status !== 'internal'));
-
-    const installedProviders = this.providers
-      .filter(p => p.isInstalled)
-      .map(p => [p.name, this.renderProvider(p)]);
-
-    const uninstalledProviders = this.providers
-      .filter(p => !p.isInstalled)
-      .map(p => [p.name, this.renderProvider(p)]);
-
-    const installedSentryApps = (applications || [])
-      .filter(a => appInstalls.find(i => i.app.slug === a.slug))
-      .map(a => [a.name, this.renderSentryApps([a], a.slug)]);
 
-    const uninstalledSentryApps = (applications || [])
-      .filter(a => !appInstalls.find(i => i.app.slug === a.slug))
-      .map(a => [a.name, this.renderSentryApps([a], a.slug)]);
+    /**
+     * We should have three sections:
+     * 1. Public apps and integrations available to everyone
+     * 2. Unpublished apps available to that org
+     * 3. Internal apps available to that org
+     */
 
-    const internalSentryApps = (orgOwnedInternal || []).map(a => [
-      this.renderInternalSentryApps(a, a.slug),
-    ]);
+    const publicApps = published.concat(orgOwned.filter(a => a.status === 'published'));
+    const publicIntegrations = this.sortIntegrations(
+      (publicApps as AppOrProvider[]).concat(this.providers)
+    );
 
-    // Combine the list of Providers and Sentry Apps that have installations.
-    const installed = installedProviders
-      .concat(installedSentryApps)
-      .sort((a, b) => a[0].localeCompare(b[0]))
-      .map(i => i[1]);
+    const unpublishedApps = this.sortIntegrations(
+      orgOwned.filter(a => a.status === 'unpublished')
+    );
 
-    // Combine the list of Providers and Sentry Apps that have no installations.
-    const uninstalled = uninstalledProviders
-      .concat(uninstalledSentryApps)
-      .sort((a, b) => a[0].localeCompare(b[0]))
-      .map(i => i[1]);
+    const orgOwnedInternal = this.sortIntegrations(
+      orgOwned.filter(a => a.status === 'internal')
+    );
 
     return (
       <React.Fragment>
@@ -255,13 +300,22 @@ class OrganizationIntegrations extends AsyncComponent {
             </Box>
             {reloading && <StyledLoadingIndicator mini />}
           </PanelHeader>
-          <PanelBody>
-            {installed}
-            {uninstalled}
-          </PanelBody>
+          <PanelBody>{publicIntegrations.map(this.renderIntegration)}</PanelBody>
         </Panel>
 
-        {internalSentryApps.length > 0 && (
+        {unpublishedApps.length > 0 && (
+          <Panel>
+            <PanelHeader disablePadding>
+              <Box px={2} flex="1">
+                {t('Unpublished Integrations')}
+              </Box>
+              {reloading && <StyledLoadingIndicator mini />}
+            </PanelHeader>
+            <PanelBody>{unpublishedApps.map(this.renderIntegration)}</PanelBody>
+          </Panel>
+        )}
+
+        {orgOwnedInternal.length > 0 && (
           <Panel>
             <PanelHeader disablePadding>
               <Box px={2} flex="1">
@@ -269,7 +323,7 @@ class OrganizationIntegrations extends AsyncComponent {
               </Box>
               {reloading && <StyledLoadingIndicator mini />}
             </PanelHeader>
-            <PanelBody>{internalSentryApps}</PanelBody>
+            <PanelBody>{orgOwnedInternal.map(this.renderIntegration)}</PanelBody>
           </Panel>
         )}
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index 66f3bf91e4..e479bc6b42 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -11,10 +11,21 @@ import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
 import Tooltip from 'app/components/tooltip';
+import {IntegrationProvider, Integration} from 'app/types';
 
 const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
 
-export default class InstalledIntegration extends React.Component {
+export type Props = {
+  orgId: string;
+  provider: IntegrationProvider;
+  integration: Integration;
+  onRemove: (integration: Integration) => void;
+  onDisable: (integration: Integration) => void;
+  onReinstallIntegration: (integration: Integration) => void;
+  className?: string;
+};
+
+export default class InstalledIntegration extends React.Component<Props> {
   static propTypes = {
     orgId: PropTypes.string.isRequired,
     provider: PropTypes.object.isRequired,
@@ -40,7 +51,7 @@ export default class InstalledIntegration extends React.Component {
     );
   }
 
-  reinstallIntegration = integration => {
+  reinstallIntegration = () => {
     const activeIntegration = Object.assign({}, this.props.integration, {
       status: 'active',
     });
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
similarity index 75%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
index 0c4e7f5a67..ea1454e10b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
@@ -9,27 +9,43 @@ import {PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
 import CircleIndicator from 'app/components/circleIndicator';
-import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
+import InstalledIntegration, {
+  Props as InstalledIntegrationProps,
+} from 'app/views/organizationIntegrations/installedIntegration';
 import Link from 'app/components/links/link';
 import PluginIcon from 'app/plugins/components/pluginIcon';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import {growDown, highlight} from 'app/styles/animations';
-
-export default class ProviderRow extends React.Component {
+import {IntegrationProvider, Integration} from 'app/types';
+
+type Props = {
+  provider: IntegrationProvider;
+  orgId: string;
+  onInstall: (integration: Integration) => void;
+  onRemove: (integration: Integration) => void;
+  onDisable: (integration: Integration) => void;
+  onReinstall: (integration: Integration) => void;
+  enabledPlugins: string[];
+  newlyInstalledIntegrationId: string;
+  integrations: Integration[];
+};
+
+export default class ProviderRow extends React.Component<Props> {
   static contextTypes = {
     organization: SentryTypes.Organization,
   };
 
   static propTypes = {
-    // `provider` is expected to have a list of installed `integrations`.
     provider: PropTypes.object.isRequired,
+    integrations: PropTypes.array.isRequired,
     orgId: PropTypes.string.isRequired,
     onInstall: PropTypes.func.isRequired,
     onRemove: PropTypes.func.isRequired,
     onDisable: PropTypes.func.isRequired,
     onReinstall: PropTypes.func.isRequired,
     enabledPlugins: PropTypes.array,
+    newlyInstalledIntegrationId: PropTypes.string,
   };
 
   static defaultProps = {
@@ -38,10 +54,8 @@ export default class ProviderRow extends React.Component {
 
   static upgradableIntegrations = ['vsts', 'bitbucket', 'github', 'github_enterprise'];
 
-  // State
-
   get integrations() {
-    return this.props.provider.integrations;
+    return this.props.integrations;
   }
 
   get isEnabled() {
@@ -91,6 +105,7 @@ export default class ProviderRow extends React.Component {
         onDisable={this.props.onDisable}
         onReinstallIntegration={this.props.onReinstall}
         data-test-id={integration.id}
+        newlyAdded={integration.id === this.props.newlyInstalledIntegrationId}
       />
     ));
   }
@@ -127,18 +142,27 @@ const ProviderDetails = styled(Flex)`
   font-size: 0.8em;
 `;
 
+type StatusProps = {
+  enabled: boolean;
+  theme?: any; //TS complains if we don't make this optional
+};
+
 const Status = styled(
-  withTheme(props => {
+  withTheme((props: StatusProps) => {
     const {enabled, ...p} = props;
     return (
       <Flex align="center">
-        <CircleIndicator size={6} color={enabled ? p.theme.success : p.theme.gray2} />
+        <CircleIndicator
+          enabled={enabled}
+          size={6}
+          color={enabled ? p.theme.success : p.theme.gray2}
+        />
         <div {...p}>{enabled ? t('Installed') : t('Not Installed')}</div>
       </Flex>
     );
   })
 )`
-  color: ${p => (p.enabled ? p.theme.success : p.theme.gray2)};
+  color: ${(p: StatusProps) => (p.enabled ? p.theme.success : p.theme.gray2)};
   margin-left: ${space(0.5)};
   &:after {
     content: '|';
@@ -156,14 +180,15 @@ const NewInstallation = styled('div')`
     ${p => highlight(p.theme.yellowLightest)} 1000ms 500ms ease-in-out forwards;
 `;
 
-const StyledInstalledIntegration = styled(p =>
-  p.integration.newlyAdded ? (
-    <NewInstallation>
+const StyledInstalledIntegration = styled(
+  (p: InstalledIntegrationProps & {newlyAdded: boolean}) =>
+    p.newlyAdded ? (
+      <NewInstallation>
+        <InstalledIntegration {...p} />
+      </NewInstallation>
+    ) : (
       <InstalledIntegration {...p} />
-    </NewInstallation>
-  ) : (
-    <InstalledIntegration {...p} />
-  )
+    )
 )`
   padding: ${space(2)};
   padding-left: 0;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
new file mode 100644
index 0000000000..d664d85f99
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
@@ -0,0 +1,90 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
+import SentryTypes from 'app/sentryTypes';
+import {t} from 'app/locale';
+import {
+  installSentryApp,
+  uninstallSentryApp,
+} from 'app/actionCreators/sentryAppInstallations';
+import {Client} from 'app/api';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
+import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  install?: SentryAppInstallation;
+  app: SentryApp;
+  onAppUninstall: () => void;
+  onAppInstall: (install: SentryAppInstallation) => void;
+};
+
+class SentryAppInstallationDetail extends React.Component<Props> {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization.isRequired,
+    install: PropTypes.object,
+    app: PropTypes.object.isRequired,
+    onAppUninstall: PropTypes.func.isRequired,
+    onAppInstall: PropTypes.func.isRequired,
+  };
+
+  redirectUser = (install: SentryAppInstallation) => {
+    const {organization, app} = this.props;
+
+    if (!app.redirectUrl) {
+      addSuccessMessage(t(`${app.slug} successfully installed.`));
+      this.props.onAppInstall(install);
+    } else {
+      const queryParams = {
+        installationId: install.uuid,
+        code: install.code,
+        orgSlug: organization.slug,
+      };
+      const redirectUrl = addQueryParamsToExistingUrl(app.redirectUrl, queryParams);
+      window.location.assign(redirectUrl);
+    }
+  };
+
+  handleInstall = () => {
+    const {organization, api, app} = this.props;
+    installSentryApp(api, organization.slug, app).then(
+      install => {
+        this.redirectUser(install);
+      },
+      () => {}
+    );
+  };
+
+  handleUninstall = (install: SentryAppInstallation) => {
+    const {api, app} = this.props;
+
+    uninstallSentryApp(api, install).then(
+      () => this.props.onAppUninstall(),
+      () => {
+        addErrorMessage(t(`Unable to uninstall ${app.name}`));
+      }
+    );
+  };
+
+  render() {
+    const {organization, install, app} = this.props;
+
+    return (
+      <React.Fragment>
+        <SentryApplicationRow
+          app={app}
+          organization={organization}
+          onInstall={this.handleInstall}
+          onUninstall={this.handleUninstall}
+          install={install}
+        />
+      </React.Fragment>
+    );
+  }
+}
+
+export default SentryAppInstallationDetail;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
deleted file mode 100644
index f24cf6d3c0..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
+++ /dev/null
@@ -1,106 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import {groupBy} from 'lodash';
-
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
-import SentryTypes from 'app/sentryTypes';
-import {t} from 'app/locale';
-import {
-  installSentryApp,
-  uninstallSentryApp,
-} from 'app/actionCreators/sentryAppInstallations';
-import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
-
-class SentryAppInstallations extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization.isRequired,
-    installs: PropTypes.array.isRequired,
-    applications: PropTypes.array.isRequired,
-  };
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      installs: this.props.installs,
-      applications: this.props.applications,
-    };
-  }
-
-  redirectUser = data => {
-    const {install, app} = data;
-    const {installs} = this.state;
-    const {organization} = this.props;
-
-    if (!app.redirectUrl) {
-      addSuccessMessage(t(`${app.slug} successfully installed.`));
-      this.setState({installs: [install, ...installs]});
-    } else {
-      const queryParams = {
-        installationId: install.uuid,
-        code: install.code,
-        orgSlug: organization.slug,
-      };
-      const redirectUrl = addQueryParamsToExistingUrl(app.redirectUrl, queryParams);
-      window.location.assign(redirectUrl);
-    }
-  };
-
-  install = app => {
-    const {organization, api} = this.props;
-    installSentryApp(api, organization.slug, app).then(
-      data => {
-        this.redirectUser({install: {...data}, app: {...app}});
-      },
-      () => {}
-    );
-  };
-
-  uninstall = install => {
-    const {api} = this.props;
-    const origInstalls = [...this.state.installs];
-    const installs = this.state.installs.filter(i => install.uuid !== i.uuid);
-
-    uninstallSentryApp(api, install).then(
-      () => this.setState({installs}),
-      () => {
-        this.setState({origInstalls});
-        addErrorMessage(t(`Unable to uninstall ${install.app.name}`));
-      }
-    );
-  };
-
-  openModal = app => {
-    this.install(app);
-  };
-
-  get installsByApp() {
-    return groupBy(this.state.installs, install => install.app.slug);
-  }
-
-  render() {
-    const {organization} = this.props;
-    const isEmpty = this.state.applications.length === 0;
-
-    return (
-      <React.Fragment>
-        {!isEmpty &&
-          this.state.applications.map(app => {
-            return (
-              <SentryApplicationRow
-                key={app.uuid}
-                app={app}
-                organization={organization}
-                onInstall={() => this.openModal(app)}
-                onUninstall={this.uninstall}
-                installs={this.installsByApp[app.slug]}
-              />
-            );
-          })}
-      </React.Fragment>
-    );
-  }
-}
-
-export default SentryAppInstallations;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx
similarity index 80%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
rename to src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx
index d9a4e79da3..f4652daee2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx
@@ -2,32 +2,44 @@ import React from 'react';
 import {Box, Flex} from 'grid-emotion';
 import {Link} from 'react-router';
 import {capitalize, omit} from 'lodash';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+import {withTheme} from 'emotion-theming';
 
 import Access from 'app/components/acl/access';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import ConfirmDelete from 'app/components/confirmDelete';
-import PropTypes from 'prop-types';
 import SentryTypes from 'app/sentryTypes';
 import {PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
-import styled from 'react-emotion';
 import space from 'app/styles/space';
-import {withTheme} from 'emotion-theming';
 import CircleIndicator from 'app/components/circleIndicator';
 import PluginIcon from 'app/plugins/components/pluginIcon';
 import {openSentryAppDetailsModal, openModal} from 'app/actionCreators/modal';
 import SentryAppPublishRequestModal from 'app/components/modals/sentryAppPublishRequestModal';
+import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
 
 const INSTALLED = 'Installed';
 const NOT_INSTALLED = 'Not Installed';
 const PENDING = 'Pending';
 
-export default class SentryApplicationRow extends React.PureComponent {
+type Props = {
+  app: SentryApp;
+  organization: Organization;
+  install?: SentryAppInstallation;
+  onInstall?: () => void;
+  onUninstall?: (install: SentryAppInstallation) => void;
+  onRemoveApp?: (app: SentryApp) => void;
+  showInstallationStatus: boolean;
+  ['data-test-id']?: string;
+};
+
+export default class SentryApplicationRow extends React.PureComponent<Props> {
   static propTypes = {
     app: SentryTypes.SentryApplication,
     organization: SentryTypes.Organization.isRequired,
-    installs: PropTypes.array,
+    install: PropTypes.object,
     onInstall: PropTypes.func,
     onUninstall: PropTypes.func,
     onRemoveApp: PropTypes.func,
@@ -43,16 +55,15 @@ export default class SentryApplicationRow extends React.PureComponent {
   }
 
   renderUnpublishedAdminButtons() {
-    const {app} = this.props;
     return (
       <ButtonHolder>
-        {this.isInternal ? null : this.renderPublishRequest(app)}
-        {this.renderRemoveApp(app)}
+        {this.isInternal ? null : this.renderPublishRequest()}
+        {this.renderRemoveApp()}
       </ButtonHolder>
     );
   }
 
-  renderDisabledPublishRequestButton(message) {
+  renderDisabledPublishRequestButton(message: string) {
     return (
       <StyledButton disabled title={t(message)} size="small" icon="icon-upgrade">
         {t('Publish')}
@@ -60,7 +71,7 @@ export default class SentryApplicationRow extends React.PureComponent {
     );
   }
 
-  renderDisabledRemoveButton(message) {
+  renderDisabledRemoveButton(message: string) {
     return <Button disabled title={t(message)} size="small" icon="icon-trash" />;
   }
 
@@ -88,7 +99,8 @@ export default class SentryApplicationRow extends React.PureComponent {
     );
   }
 
-  renderRemoveApp(app) {
+  renderRemoveApp() {
+    const {app, onRemoveApp} = this.props;
     const message = t(
       `Deleting ${app.slug} will also delete any and all of its installations. \
        This is a permanent action. Do you wish to continue?`
@@ -98,7 +110,7 @@ export default class SentryApplicationRow extends React.PureComponent {
         message={message}
         confirmInput={app.slug}
         priority="danger"
-        onConfirm={() => this.props.onRemoveApp(app)}
+        onConfirm={() => onRemoveApp && onRemoveApp(app)}
       >
         <Button size="small" icon="icon-trash" />
       </ConfirmDelete>
@@ -114,15 +126,13 @@ export default class SentryApplicationRow extends React.PureComponent {
   }
 
   renderUninstallButton() {
-    const install = this.props.installs[0];
-    const message = t(
-      `Are you sure you want to remove the ${install.app.slug} installation ?`
-    );
+    const {install, app, onUninstall} = this.props;
+    const message = t(`Are you sure you want to remove the ${app.slug} installation?`);
     return (
       <Confirm
         message={message}
         priority="danger"
-        onConfirm={() => this.props.onUninstall(install)}
+        onConfirm={() => onUninstall && install && onUninstall(install)}
       >
         <StyledButton borderless icon="icon-trash" data-test-id="sentry-app-uninstall">
           {t('Uninstall')}
@@ -146,12 +156,14 @@ export default class SentryApplicationRow extends React.PureComponent {
     if (showInstallationStatus) {
       //if internal and we show installation status, we don't show the learn more
       if (isInternal) {
-        return <Status status={status} isInternal={isInternal} />;
+        return <StatusIndicator status={status} isInternal={isInternal} />;
       }
       return (
         <React.Fragment>
-          <Status status={status} isInternal={false} />
-          <StyledLink onClick={this.openLearnMore}>{t('Learn More')}</StyledLink>
+          <StatusIndicator status={status} isInternal={false} />
+          <StyledLink to="" onClick={this.openLearnMore}>
+            {t('Learn More')}
+          </StyledLink>
         </React.Fragment>
       );
     }
@@ -159,7 +171,7 @@ export default class SentryApplicationRow extends React.PureComponent {
   }
 
   get isInstalled() {
-    return this.props.installs && this.props.installs.length > 0;
+    return !!this.props.install;
   }
 
   handlePublish = () => {
@@ -169,8 +181,8 @@ export default class SentryApplicationRow extends React.PureComponent {
   };
 
   get installationStatus() {
-    if (this.props.installs && this.props.installs.length > 0) {
-      return capitalize(this.props.installs[0].status);
+    if (this.props.install) {
+      return capitalize(this.props.install.status);
     }
 
     return NOT_INSTALLED;
@@ -180,12 +192,13 @@ export default class SentryApplicationRow extends React.PureComponent {
     const {app, onInstall, organization} = this.props;
     const isInstalled = !!this.isInstalled;
 
-    openSentryAppDetailsModal({
-      sentryApp: app,
-      isInstalled,
-      onInstall,
-      organization,
-    });
+    onInstall &&
+      openSentryAppDetailsModal({
+        sentryApp: app,
+        isInstalled,
+        onInstall,
+        organization,
+      });
   };
 
   renderInstallButton() {
@@ -292,7 +305,7 @@ const SentryAppDetails = styled(Flex)`
 
 const SentryAppName = styled('div')`
   font-weight: bold;
-  margin-top: ${p => (p.hideStatus ? '10px' : '0px')};
+  margin-top: ${(p: {hideStatus: boolean}) => (p.hideStatus ? '10px' : '0px')};
 `;
 
 const StyledLink = styled(Link)`
@@ -313,8 +326,10 @@ const color = {
   [PENDING]: 'yellowOrange',
 };
 
-const Status = styled(
-  withTheme(({status, ...props}) => {
+type StatusIndicatorProps = {status: string; theme?: any; isInternal: boolean};
+
+const StatusIndicator = styled(
+  withTheme(({status, ...props}: StatusIndicatorProps) => {
     //need to omit isInternal
     const propsToPass = omit(props, ['isInternal']);
     return (
@@ -325,7 +340,7 @@ const Status = styled(
     );
   })
 )`
-  color: ${props => props.theme[color[props.status]]};
+  color: ${(props: StatusIndicatorProps) => props.theme[color[props.status]]};
   margin-left: ${space(0.5)};
   font-weight: light;
   &:after {
@@ -337,20 +352,22 @@ const Status = styled(
   margin-right: ${space(0.75)};
 `;
 
-const PublishStatus = styled(({status, ...props}) => {
+type PublishStatusProps = {status: SentryApp['status']; theme?: any};
+
+const PublishStatus = styled(({status, ...props}: PublishStatusProps) => {
   return (
     <Flex align="center">
       <div {...props}>{t(`${status}`)}</div>
     </Flex>
   );
 })`
-  color: ${props =>
+  color: ${(props: PublishStatusProps) =>
     props.status === 'published' ? props.theme.success : props.theme.gray2};
   font-weight: light;
   margin-right: ${space(0.75)};
 `;
 
-const ButtonHolder = styled.div`
+const ButtonHolder = styled('div')`
   flex-direction: row;
   display: flex;
   & > * {
diff --git a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
index ee1ce76593..000e7b1762 100644
--- a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
+++ b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
@@ -111,19 +111,19 @@ exports[`IntegrationDetailsModal renders simple integration 1`] = `
                 data-test-id="provider-name"
               >
                 <Component
-                  className="css-1pygq0m-ProviderName e1rf4mlr1"
+                  className="css-1pygq0m-ProviderName exuwfuv1"
                   data-test-id="provider-name"
                 >
                   <Box
-                    className="css-1pygq0m-ProviderName e1rf4mlr1"
+                    className="css-1pygq0m-ProviderName exuwfuv1"
                     data-test-id="provider-name"
                   >
                     <Base
-                      className="e1rf4mlr1 css-cswdqk-ProviderName"
+                      className="exuwfuv1 css-cswdqk-ProviderName"
                       data-test-id="provider-name"
                     >
                       <div
-                        className="e1rf4mlr1 css-cswdqk-ProviderName"
+                        className="exuwfuv1 css-cswdqk-ProviderName"
                         data-test-id="provider-name"
                         is={null}
                       >
@@ -160,7 +160,7 @@ exports[`IntegrationDetailsModal renders simple integration 1`] = `
     }
   >
     <div
-      className="css-zqji3g-Description e1rf4mlr2"
+      className="css-zqji3g-Description exuwfuv2"
       dangerouslySetInnerHTML={
         Object {
           "__html": "<p><em>markdown</em> formatted <em>description</em></p>
@@ -264,21 +264,21 @@ exports[`IntegrationDetailsModal renders simple integration 1`] = `
   </FeatureList>
   <Metadata>
     <Base
-      className="css-xm93tv-Metadata e1rf4mlr3"
+      className="css-xm93tv-Metadata exuwfuv3"
     >
       <div
-        className="css-xm93tv-Metadata e1rf4mlr3"
+        className="css-xm93tv-Metadata exuwfuv3"
         is={null}
       >
         <AuthorName
           flex={1}
         >
           <Base
-            className="css-1uwqb6n-AuthorName e1rf4mlr4"
+            className="css-1uwqb6n-AuthorName exuwfuv4"
             flex={1}
           >
             <div
-              className="css-1uwqb6n-AuthorName e1rf4mlr4"
+              className="css-1uwqb6n-AuthorName exuwfuv4"
               is={null}
             >
               By Morty
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
similarity index 94%
rename from tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
rename to tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
index c0d5b997fa..8ee96d9b6b 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
@@ -1,7 +1,7 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`Sentry App Installations when Apps exist displays all Apps owned by the Org 1`] = `
-<SentryAppInstallations
+exports[`Sentry App Installations displays all Apps owned by the Org 1`] = `
+<SentryAppInstallationDetail
   api={
     Client {
       "_chain": [Function],
@@ -11,29 +11,28 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
       "hasProjectBeenRenamed": [Function],
     }
   }
-  applications={
-    Array [
-      Object {
-        "author": "Sentry",
-        "clientId": "client-id",
-        "clientSecret": "client-secret",
-        "events": Array [],
-        "isAlertable": false,
-        "name": "Sample App",
-        "overview": "This is an app.",
-        "redirectUrl": "https://example/com/setup",
-        "schema": Object {},
-        "scopes": Array [
-          "project:read",
-        ],
-        "slug": "sample-app",
-        "status": "unpublished",
-        "uuid": "123456123456123456123456",
-        "webhookUrl": "https://example.com/webhook",
-      },
-    ]
+  app={
+    Object {
+      "author": "Sentry",
+      "clientId": "client-id",
+      "clientSecret": "client-secret",
+      "events": Array [],
+      "isAlertable": false,
+      "name": "Sample App",
+      "overview": "This is an app.",
+      "redirectUrl": "https://example/com/setup",
+      "schema": Object {},
+      "scopes": Array [
+        "project:read",
+      ],
+      "slug": "sample-app",
+      "status": "unpublished",
+      "uuid": "123456123456123456123456",
+      "webhookUrl": "https://example.com/webhook",
+    }
   }
-  installs={Array []}
+  onAppInstall={[MockFunction]}
+  onAppUninstall={[MockFunction]}
   organization={
     Object {
       "access": Array [
@@ -84,7 +83,6 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
         "webhookUrl": "https://example.com/webhook",
       }
     }
-    key="123456123456123456123456"
     onInstall={[Function]}
     onUninstall={[Function]}
     organization={
@@ -122,21 +120,21 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
       p={2}
     >
       <Base
-        className="css-13p7dw9-PanelItem-SentryAppItem eac2pqx0"
+        className="css-13p7dw9-PanelItem-SentryAppItem e6pby8e0"
         data-test-id="sample-app"
         p={2}
       >
         <div
-          className="css-13p7dw9-PanelItem-SentryAppItem eac2pqx0"
+          className="css-13p7dw9-PanelItem-SentryAppItem e6pby8e0"
           data-test-id="sample-app"
           is={null}
         >
           <StyledFlex>
             <Base
-              className="css-14n192s-StyledFlex eac2pqx1"
+              className="css-14n192s-StyledFlex e6pby8e1"
             >
               <div
-                className="css-14n192s-StyledFlex eac2pqx1"
+                className="css-14n192s-StyledFlex e6pby8e1"
                 is={null}
               >
                 <PluginIcon
@@ -150,40 +148,40 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                 </PluginIcon>
                 <SentryAppBox>
                   <Base
-                    className="css-161g25b-SentryAppBox eac2pqx2"
+                    className="css-161g25b-SentryAppBox e6pby8e2"
                   >
                     <div
-                      className="css-161g25b-SentryAppBox eac2pqx2"
+                      className="css-161g25b-SentryAppBox e6pby8e2"
                       is={null}
                     >
                       <SentryAppName
                         hideStatus={false}
                       >
                         <div
-                          className="css-4cu42i-SentryAppName eac2pqx4"
+                          className="css-4cu42i-SentryAppName e6pby8e4"
                         >
                           Sample App
                         </div>
                       </SentryAppName>
                       <SentryAppDetails>
                         <Base
-                          className="css-f0t6d-SentryAppDetails eac2pqx3"
+                          className="css-f0t6d-SentryAppDetails e6pby8e3"
                         >
                           <div
-                            className="css-f0t6d-SentryAppDetails eac2pqx3"
+                            className="css-f0t6d-SentryAppDetails e6pby8e3"
                             is={null}
                           >
-                            <Status
+                            <StatusIndicator
                               isInternal={false}
                               status="Not Installed"
                             >
                               <WithTheme(Component)
-                                className="css-1uxco7x-Status eac2pqx8"
+                                className="css-tr2f8g-StatusIndicator e6pby8e8"
                                 isInternal={false}
                                 status="Not Installed"
                               >
                                 <Component
-                                  className="css-1uxco7x-Status eac2pqx8"
+                                  className="css-tr2f8g-StatusIndicator e6pby8e8"
                                   isInternal={false}
                                   status="Not Installed"
                                   theme={
@@ -459,7 +457,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                           />
                                         </CircleIndicator>
                                         <div
-                                          className="css-1uxco7x-Status eac2pqx8"
+                                          className="css-tr2f8g-StatusIndicator e6pby8e8"
                                           theme={
                                             Object {
                                               "alert": Object {
@@ -717,20 +715,22 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                   </Flex>
                                 </Component>
                               </WithTheme(Component)>
-                            </Status>
+                            </StatusIndicator>
                             <StyledLink
                               onClick={[Function]}
                               onlyActiveOnIndex={false}
                               style={Object {}}
+                              to=""
                             >
                               <Link
-                                className="css-u3fgwp-StyledLink eac2pqx5"
+                                className="css-u3fgwp-StyledLink e6pby8e5"
                                 onClick={[Function]}
                                 onlyActiveOnIndex={false}
                                 style={Object {}}
+                                to=""
                               >
                                 <a
-                                  className="css-u3fgwp-StyledLink eac2pqx5"
+                                  className="css-u3fgwp-StyledLink e6pby8e5"
                                   onClick={[Function]}
                                   style={Object {}}
                                 >
@@ -854,49 +854,5 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
       </Base>
     </SentryAppItem>
   </SentryApplicationRow>
-</SentryAppInstallations>
-`;
-
-exports[`Sentry App Installations when no Apps exist no row is displayed 1`] = `
-<SentryAppInstallations
-  api={
-    Client {
-      "_chain": [Function],
-      "_wrapRequest": [Function],
-      "bulkUpdate": [Function],
-      "handleRequestError": [Function],
-      "hasProjectBeenRenamed": [Function],
-    }
-  }
-  applications={Array []}
-  installs={Array []}
-  organization={
-    Object {
-      "access": Array [
-        "org:read",
-        "org:write",
-        "org:admin",
-        "org:integrations",
-        "project:read",
-        "project:write",
-        "project:admin",
-        "team:read",
-        "team:write",
-        "team:admin",
-      ],
-      "features": Array [],
-      "id": "3",
-      "name": "Organization Name",
-      "onboardingTasks": Array [],
-      "projects": Array [],
-      "scrapeJavaScript": true,
-      "slug": "org-slug",
-      "status": Object {
-        "id": "active",
-        "name": "active",
-      },
-      "teams": Array [],
-    }
-  }
-/>
+</SentryAppInstallationDetail>
 `;
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 92218fd87f..2c1b51fa7a 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -111,6 +111,7 @@ describe('OrganizationIntegrations', () => {
       installedSentryApp = TestStubs.SentryApp({
         name: 'An Integration',
         slug: 'an-integration',
+        status: 'published',
       });
 
       sentryAppInstall = TestStubs.SentryAppInstallation({
@@ -146,12 +147,12 @@ describe('OrganizationIntegrations', () => {
 
     it('places installed Integrations above uninstalled ones', () => {
       // Installed apps are shown at the top of the list
-      const installed = wrapper.find('SentryAppInstallations').at(0);
-      expect(installed.find('Status').prop('status')).toBe('Installed');
+      const installed = wrapper.find('SentryAppInstallationDetail').at(0);
+      expect(installed.find('StatusIndicator').prop('status')).toBe('Installed');
 
       // Uninstalled are shown lower.
-      const uninstalled = wrapper.find('SentryAppInstallations').at(1);
-      expect(uninstalled.find('Status').prop('status')).toBe('Not Installed');
+      const uninstalled = wrapper.find('SentryAppInstallationDetail').at(1);
+      expect(uninstalled.find('StatusIndicator').prop('status')).toBe('Not Installed');
     });
 
     it('sorts Sentry App Integrations among Integrations, alphabetically', () => {
@@ -259,7 +260,7 @@ describe('OrganizationIntegrations', () => {
           <OrganizationIntegrations organization={org} params={params} />,
           routerContext
         );
-        expect(wrapper.find('SentryAppInstallations').length).toBe(1);
+        expect(wrapper.find('SentryAppInstallationDetail').length).toBe(1);
       });
     });
 
@@ -300,8 +301,8 @@ describe('OrganizationIntegrations', () => {
           <OrganizationIntegrations organization={org} params={params} />,
           routerContext
         );
-        const pending = wrapper.find('SentryAppInstallations').at(0);
-        expect(pending.find('Status').prop('status')).toBe('Pending');
+        const pending = wrapper.find('SentryAppInstallationDetail').at(0);
+        expect(pending.find('StatusIndicator').prop('status')).toBe('Pending');
       });
     });
 
@@ -345,7 +346,7 @@ describe('OrganizationIntegrations', () => {
           <OrganizationIntegrations organization={org} params={params} />,
           routerContext
         );
-        wrapper.instance().onRemoveInternalApp(internalApp);
+        wrapper.instance().handleRemoveInternalSentryApp(internalApp);
         await tick();
         wrapper.update();
         expect(wrapper.instance().state.orgOwnedApps).toHaveLength(0);
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
new file mode 100644
index 0000000000..1d0628dd0c
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
@@ -0,0 +1,175 @@
+import React from 'react';
+
+import {Client} from 'app/api';
+import {mount} from 'enzyme';
+import {openSentryAppDetailsModal} from 'app/actionCreators/modal';
+import SentryAppInstallationDetail from 'app/views/organizationIntegrations/sentryAppInstallationDetail';
+
+jest.mock('app/actionCreators/modal', () => ({
+  openSentryAppDetailsModal: jest.fn(),
+}));
+
+describe('Sentry App Installations', function() {
+  const org = TestStubs.Organization();
+  const sentryApp = TestStubs.SentryApp();
+  const install = TestStubs.SentryAppInstallation({
+    organization: {slug: org.slug},
+    app: {slug: sentryApp.slug, uuid: 'f4d972ba-1177-4974-943e-4800fe8c7d05'},
+    code: '50624ecb-7aac-49d6-934a-83e53677560f',
+  });
+  const api = new Client();
+
+  const routerContext = TestStubs.routerContext();
+  let props, wrapper;
+
+  beforeEach(() => {
+    Client.clearMockResponses();
+    props = {
+      api,
+      organization: org,
+      app: sentryApp,
+      onAppInstall: jest.fn(),
+      onAppUninstall: jest.fn(),
+    };
+  });
+
+  it('displays all Apps owned by the Org', () => {
+    wrapper = mount(<SentryAppInstallationDetail {...props} />, routerContext);
+
+    expect(wrapper).toMatchSnapshot();
+    expect(wrapper.find('SentryApplicationRow').prop('app').name).toBe('Sample App');
+  });
+
+  describe('when installing', () => {
+    beforeEach(() => {
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/sentry-app-installations/`,
+        method: 'POST',
+        body: install,
+      });
+    });
+
+    it('disallows installation when already installed', () => {
+      wrapper = mount(
+        <SentryAppInstallationDetail {...props} install={install} />,
+        routerContext
+      );
+      expect(wrapper.find('[icon="icon-trash"]').exists()).toBe(true);
+    });
+
+    it('install button opens permissions modal', () => {
+      wrapper = mount(<SentryAppInstallationDetail {...props} />, routerContext);
+      wrapper.find('[icon="icon-circle-add"]').simulate('click');
+      expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
+        expect.objectContaining({
+          sentryApp,
+          organization: org,
+          onInstall: expect.any(Function),
+          isInstalled: false,
+        })
+      );
+    });
+
+    it('sentry app is shown as installed', async () => {
+      const app = TestStubs.SentryApp({redirectUrl: null});
+      wrapper = mount(
+        <SentryAppInstallationDetail {...props} app={app} />,
+        routerContext
+      );
+      wrapper.instance().handleInstall(app);
+      await tick();
+      wrapper.update();
+      expect(props.onAppInstall).toHaveBeenCalledWith(install);
+    });
+
+    it('redirects the user to the App when a redirectUrl is set', async () => {
+      window.location.assign = jest.fn();
+      wrapper = mount(<SentryAppInstallationDetail {...props} />, routerContext);
+
+      wrapper.find('[icon="icon-circle-add"]').simulate('click');
+      expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
+        expect.objectContaining({
+          sentryApp,
+          organization: org,
+          onInstall: expect.any(Function),
+          isInstalled: false,
+        })
+      );
+      wrapper.instance().handleInstall(sentryApp);
+      await tick();
+      expect(window.location.assign).toHaveBeenCalledWith(
+        `${sentryApp.redirectUrl}?code=${install.code}&installationId=${
+          install.uuid
+        }&orgSlug=${org.slug}`
+      );
+    });
+
+    it('handles a redirectUrl with pre-existing query params', async () => {
+      window.location.assign = jest.fn();
+      const sentryAppWithQuery = TestStubs.SentryApp({
+        redirectUrl: 'https://example.com/setup?hello=1',
+      });
+
+      wrapper = mount(
+        <SentryAppInstallationDetail {...props} app={sentryAppWithQuery} />,
+        routerContext
+      );
+
+      wrapper.find('[icon="icon-circle-add"]').simulate('click');
+      wrapper.instance().handleInstall(sentryAppWithQuery);
+      await tick();
+      expect(window.location.assign).toHaveBeenCalledWith(
+        `https://example.com/setup?code=${install.code}&hello=1&installationId=${
+          install.uuid
+        }&orgSlug=${org.slug}`
+      );
+    });
+  });
+
+  describe('when installing fails', () => {
+    it('allows for installation retry', async () => {
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/sentry-app-installations/`,
+        method: 'POST',
+        body: [],
+        statusCode: 400,
+      });
+
+      wrapper = mount(<SentryAppInstallationDetail {...props} />, routerContext);
+      wrapper.instance().handleInstall(sentryApp);
+      await tick();
+      expect(wrapper.exists('[icon="icon-circle-add"]')).toBe(true);
+      expect(props.onAppInstall).not.toHaveBeenCalled();
+    });
+  });
+
+  describe('when uninstalling', () => {
+    it('must confirm in order to uninstall', async () => {
+      const response = Client.addMockResponse({
+        url: `/sentry-app-installations/${install.uuid}/`,
+        method: 'DELETE',
+        body: [],
+      });
+
+      wrapper = mount(
+        <SentryAppInstallationDetail {...props} install={install} />,
+        routerContext
+      );
+
+      wrapper
+        .find('[data-test-id="sentry-app-uninstall"]')
+        .first()
+        .simulate('click');
+      wrapper
+        .find('[data-test-id="confirm-button"]')
+        .first()
+        .simulate('click');
+      expect(response).toHaveBeenCalledWith(
+        `/sentry-app-installations/${install.uuid}/`,
+        expect.objectContaining({method: 'DELETE'})
+      );
+      await tick();
+      expect(props.onAppUninstall).toHaveBeenCalledWith();
+    });
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
deleted file mode 100644
index 7febbdd3a7..0000000000
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
+++ /dev/null
@@ -1,239 +0,0 @@
-import React from 'react';
-
-import {Client} from 'app/api';
-import {mount} from 'enzyme';
-import {openSentryAppDetailsModal} from 'app/actionCreators/modal';
-import SentryAppInstallations from 'app/views/organizationIntegrations/sentryAppInstallations';
-
-jest.mock('app/actionCreators/modal', () => ({
-  openSentryAppDetailsModal: jest.fn(),
-}));
-
-describe('Sentry App Installations', function() {
-  const org = TestStubs.Organization();
-  const sentryApp = TestStubs.SentryApp();
-  const install = TestStubs.SentryAppInstallation({
-    organization: {slug: org.slug},
-    app: {slug: sentryApp.slug, uuid: 'f4d972ba-1177-4974-943e-4800fe8c7d05'},
-    code: '50624ecb-7aac-49d6-934a-83e53677560f',
-  });
-  const api = new Client();
-
-  const routerContext = TestStubs.routerContext();
-
-  beforeEach(() => {
-    Client.clearMockResponses();
-  });
-
-  describe('when no Apps exist', () => {
-    const wrapper = mount(
-      <SentryAppInstallations
-        api={api}
-        organization={org}
-        applications={[]}
-        installs={[]}
-      />,
-      routerContext
-    );
-
-    it('no row is displayed', () => {
-      expect(wrapper).toMatchSnapshot();
-      expect(wrapper.exists('SentryApplicationRow')).toBe(false);
-    });
-  });
-
-  describe('when Apps exist', () => {
-    let wrapper = mount(
-      <SentryAppInstallations
-        api={api}
-        organization={org}
-        applications={[sentryApp]}
-        installs={[]}
-      />,
-      routerContext
-    );
-
-    it('displays all Apps owned by the Org', () => {
-      expect(wrapper).toMatchSnapshot();
-      expect(wrapper.find('SentryApplicationRow').prop('app').name).toBe('Sample App');
-    });
-
-    describe('when installing', () => {
-      beforeEach(() => {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-app-installations/`,
-          method: 'POST',
-          body: install,
-        });
-      });
-
-      it('disallows installation when already installed', () => {
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[sentryApp]}
-            installs={[install]}
-          />,
-          routerContext
-        );
-        expect(wrapper.find('[icon="icon-trash"]').exists()).toBe(true);
-      });
-
-      it('install button opens permissions modal', () => {
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[sentryApp]}
-            installs={[]}
-          />,
-          routerContext
-        );
-        wrapper.find('[icon="icon-circle-add"]').simulate('click');
-        expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
-          expect.objectContaining({
-            sentryApp,
-            organization: org,
-            onInstall: expect.any(Function),
-            isInstalled: false,
-          })
-        );
-      });
-
-      it('sentry app is shown as installed', async () => {
-        const app = TestStubs.SentryApp({redirectUrl: null});
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[app]}
-            installs={[]}
-          />,
-          routerContext
-        );
-        wrapper.instance().install(app);
-        await tick();
-        wrapper.update();
-        expect(wrapper.state('installs')).toEqual([install]);
-        expect(wrapper.find('[icon="icon-trash"]').exists()).toBe(true);
-      });
-
-      it('redirects the user to the App when a redirectUrl is set', async () => {
-        window.location.assign = jest.fn();
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[sentryApp]}
-            installs={[]}
-          />,
-          routerContext
-        );
-
-        wrapper.find('[icon="icon-circle-add"]').simulate('click');
-        expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
-          expect.objectContaining({
-            sentryApp,
-            organization: org,
-            onInstall: expect.any(Function),
-            isInstalled: false,
-          })
-        );
-        wrapper.instance().install(sentryApp);
-        await tick();
-        expect(window.location.assign).toHaveBeenCalledWith(
-          `${sentryApp.redirectUrl}?code=${install.code}&installationId=${
-            install.uuid
-          }&orgSlug=${org.slug}`
-        );
-      });
-
-      it('handles a redirectUrl with pre-existing query params', async () => {
-        window.location.assign = jest.fn();
-        const sentryAppWithQuery = TestStubs.SentryApp({
-          redirectUrl: 'https://example.com/setup?hello=1',
-        });
-
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[sentryAppWithQuery]}
-            installs={[]}
-          />,
-          routerContext
-        );
-
-        wrapper.find('[icon="icon-circle-add"]').simulate('click');
-        wrapper.instance().install(sentryAppWithQuery);
-        await tick();
-        expect(window.location.assign).toHaveBeenCalledWith(
-          `https://example.com/setup?code=${install.code}&hello=1&installationId=${
-            install.uuid
-          }&orgSlug=${org.slug}`
-        );
-      });
-    });
-
-    describe('when installing fails', () => {
-      it('allows for installation retry', async () => {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-app-installations/`,
-          method: 'POST',
-          body: [],
-          statusCode: 400,
-        });
-
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[sentryApp]}
-            installs={[]}
-          />,
-          routerContext
-        );
-        wrapper.instance().install(sentryApp);
-        await tick();
-        expect(wrapper.exists('[icon="icon-circle-add"]')).toBe(true);
-        expect(wrapper.state('installs')).toEqual([]);
-      });
-    });
-
-    describe('when uninstalling', () => {
-      it('must confirm in order to uninstall', async () => {
-        const response = Client.addMockResponse({
-          url: `/sentry-app-installations/${install.uuid}/`,
-          method: 'DELETE',
-          body: [],
-        });
-
-        wrapper = mount(
-          <SentryAppInstallations
-            api={api}
-            organization={org}
-            applications={[sentryApp]}
-            installs={[install]}
-          />,
-          routerContext
-        );
-
-        wrapper
-          .find('[data-test-id="sentry-app-uninstall"]')
-          .first()
-          .simulate('click');
-        wrapper
-          .find('[data-test-id="confirm-button"]')
-          .first()
-          .simulate('click');
-        expect(response).toHaveBeenCalledWith(
-          `/sentry-app-installations/${install.uuid}/`,
-          expect.objectContaining({method: 'DELETE'})
-        );
-        await tick();
-        expect(wrapper.state('installs')).toEqual([]);
-      });
-    });
-  });
-});
