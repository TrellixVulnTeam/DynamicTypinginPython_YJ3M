commit 9cb281879254a64013df4d8f19fec3469344266d
Author: josh <josh@jrl.ninja>
Date:   Wed Dec 11 17:19:59 2019 -0800

    ref(django 1.10): keep pre-1.10 SubfieldBase behavior with Creator (#15855)

diff --git a/src/sentry/db/models/fields/array.py b/src/sentry/db/models/fields/array.py
index beb8e53dc5..25fb0f597c 100644
--- a/src/sentry/db/models/fields/array.py
+++ b/src/sentry/db/models/fields/array.py
@@ -45,7 +45,3 @@ class ArrayField(models.Field):
         if isinstance(value, six.text_type):
             value = json.loads(value)
         return map(self.of.to_python, value)
-
-
-if hasattr(models, "SubfieldBase"):
-    ArrayField = six.add_metaclass(models.SubfieldBase)(ArrayField)
diff --git a/src/sentry/db/models/fields/citext.py b/src/sentry/db/models/fields/citext.py
index ea20b837a5..a40db81a26 100644
--- a/src/sentry/db/models/fields/citext.py
+++ b/src/sentry/db/models/fields/citext.py
@@ -1,10 +1,9 @@
-from __future__ import absolute_import, print_function
-
-import six
+from __future__ import absolute_import
 
 from django.db import connections, models
 from django.db.models.signals import pre_migrate
 
+from sentry.db.models.utils import Creator
 
 __all__ = ("CITextField", "CICharField", "CIEmailField")
 
@@ -15,21 +14,21 @@ class CIText(object):
 
 
 class CITextField(CIText, models.TextField):
-    pass
+    def contribute_to_class(self, cls, name):
+        super(CITextField, self).contribute_to_class(cls, name)
+        setattr(cls, name, Creator(self))
 
 
 class CICharField(CIText, models.CharField):
-    pass
+    def contribute_to_class(self, cls, name):
+        super(CICharField, self).contribute_to_class(cls, name)
+        setattr(cls, name, Creator(self))
 
 
 class CIEmailField(CIText, models.EmailField):
-    pass
-
-
-if hasattr(models, "SubfieldBase"):
-    CITextField = six.add_metaclass(models.SubfieldBase)(CITextField)
-    CICharField = six.add_metaclass(models.SubfieldBase)(CICharField)
-    CIEmailField = six.add_metaclass(models.SubfieldBase)(CIEmailField)
+    def contribute_to_class(self, cls, name):
+        super(CIEmailField, self).contribute_to_class(cls, name)
+        setattr(cls, name, Creator(self))
 
 
 def create_citext_extension(using, **kwargs):
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index a63390f032..1a7fb7424e 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -7,7 +7,6 @@ import six
 import warnings
 from uuid import uuid4
 
-from django.db import models
 from django.db.models.signals import post_delete
 
 from sentry import nodestore
@@ -15,6 +14,7 @@ from sentry.utils.cache import memoize
 from sentry.utils.compat import pickle
 from sentry.utils.strings import decompress, compress
 from sentry.utils.canonical import CANONICAL_TYPES, CanonicalKeyDict
+from sentry.db.models.utils import Creator
 
 from .gzippeddict import GzippedDictField
 
@@ -171,6 +171,7 @@ class NodeField(GzippedDictField):
 
     def contribute_to_class(self, cls, name):
         super(NodeField, self).contribute_to_class(cls, name)
+        setattr(cls, name, Creator(self))
         post_delete.connect(self.on_delete, sender=self.model, weak=False)
 
     def on_delete(self, instance, **kwargs):
@@ -238,7 +239,3 @@ class NodeField(GzippedDictField):
         if not self.skip_nodestore_save:
             value.save()
         return compress(pickle.dumps({"node_id": value.id}))
-
-
-if hasattr(models, "SubfieldBase"):
-    NodeField = six.add_metaclass(models.SubfieldBase)(NodeField)
diff --git a/src/sentry/db/models/fields/uuid.py b/src/sentry/db/models/fields/uuid.py
index ce1e3a52c9..99a9df1951 100644
--- a/src/sentry/db/models/fields/uuid.py
+++ b/src/sentry/db/models/fields/uuid.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import, print_function
 import importlib
 import six
 
+from sentry.db.models.utils import Creator
+
 from django.db import models
 from django.db.models.fields import NOT_PROVIDED
 from psycopg2.extensions import register_adapter
@@ -98,6 +100,10 @@ class UUIDField(models.Field):
         # This is the standard case; just use the superclass logic.
         return super(UUIDField, self).pre_save(instance, add)
 
+    def contribute_to_class(self, cls, name):
+        super(UUIDField, self).contribute_to_class(cls, name)
+        setattr(cls, name, Creator(self))
+
     def to_python(self, value):
         """Return a UUID object."""
         if isinstance(value, self._coerce_to) or not value:
@@ -124,8 +130,5 @@ class UUIDAdapter(object):
         return ("'%s'" % self.value).encode("utf8")
 
 
-if hasattr(models, "SubfieldBase"):
-    UUIDField = six.add_metaclass(models.SubfieldBase)(UUIDField)
-
 # Register the UUID type with psycopg2.
 register_adapter(UUID, UUIDAdapter)
