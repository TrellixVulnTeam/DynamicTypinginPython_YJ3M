commit 0fef021f2832a19b901d304a2de07c8ddf85f4e5
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Dec 11 15:34:31 2018 -0800

    ref(api): Abstract Event Querystring Parsing Code
    
    Move ths event querystring parsing code up a level to `OrganizationEndpoint`, so that we can use it with other endpoints as we start to add the project/env/time filter bar to more pages.

diff --git a/requirements-test.txt b/requirements-test.txt
index 3e8395933c..a11304b5aa 100644
--- a/requirements-test.txt
+++ b/requirements-test.txt
@@ -6,6 +6,7 @@ casscache
 cqlsh
 # /cassandra
 datadog
+freezegun==0.3.11
 msgpack-python<0.5.0
 pytest-cov>=2.5.1,<2.6.0
 pytest-timeout==1.2.1
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 468b6d8121..95b727e5cd 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -1,15 +1,30 @@
 from __future__ import absolute_import
 
-from sentry.utils.sdk import configure_scope
+from rest_framework.exceptions import PermissionDenied
+
+from sentry import roles
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import SentryPermission
+from sentry.api.utils import (
+    get_date_range_from_params,
+    InvalidParams,
+)
 from sentry.auth.superuser import is_active_superuser
 from sentry.models import (
-    ApiKey, Authenticator, Organization, OrganizationMemberTeam, Project,
-    ProjectTeam, ReleaseProject, Team
+    ApiKey, Authenticator, Environment, Organization, OrganizationMember, OrganizationMemberTeam, Project,
+    ProjectStatus, ProjectTeam, ReleaseProject, Team
 )
 from sentry.utils import auth
+from sentry.utils.sdk import configure_scope
+
+
+class OrganizationEventsError(Exception):
+    pass
+
+
+class NoProjects(Exception):
+    pass
 
 
 class OrganizationPermission(SentryPermission):
@@ -92,6 +107,140 @@ class OrganizationDiscoverSavedQueryPermission(OrganizationPermission):
 class OrganizationEndpoint(Endpoint):
     permission_classes = (OrganizationPermission, )
 
+    def get_project_ids(
+        self,
+        request,
+        organization,
+        force_global_perms=False,
+        include_allow_joinleave=False,
+    ):
+        """
+        Determines which project ids to filter the endpoint by. If a list of
+        project ids is passed in via the `project` querystring argument then
+        validate that these projects can be accessed. If not passed, then
+        return all project ids that the user can access within this
+        organization.
+
+        :param request:
+        :param organization: Organization to fetch projects for
+        :param force_global_perms: Permission override. Allows subclasses to
+        perform their own validation and allow the user to access any project
+        in the organization. This is a hack to support the old
+        `request.auth.has_scope` way of checking permissions, don't use it
+        for anything else, we plan to remove this once we remove uses of
+        `auth.has_scope`.
+        :param include_allow_joinleave: Whether to factor the organization
+        allow_joinleave flag into permission checks. We should ideally
+        standardize how this is used and remove this parameter.
+        :return: A list of project ids, or raises PermissionDenied.
+        """
+        project_ids = set(map(int, request.GET.getlist('project')))
+
+        requested_projects = project_ids.copy()
+
+        om_role = None
+        if request.user.is_authenticated():
+            try:
+                om_role = OrganizationMember.objects.filter(
+                    user=request.user,
+                    organization=organization,
+                ).values_list('role', flat=True).get()
+            except OrganizationMember.DoesNotExist:
+                pass
+
+        if (
+            request.user.is_superuser
+            or (om_role and roles.get(om_role).is_global)
+            or include_allow_joinleave and organization.flags.allow_joinleave
+            or force_global_perms
+        ):
+            qs = Project.objects.filter(
+                organization=organization,
+                status=ProjectStatus.VISIBLE,
+            )
+        else:
+            qs = Project.objects.filter(
+                organization=organization,
+                teams__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember__user=request.user,
+                    organizationmember__organization=organization,
+                ).values_list('team'),
+                status=ProjectStatus.VISIBLE,
+            )
+
+        if project_ids:
+            qs = qs.filter(id__in=project_ids)
+
+        project_ids = set(qs.values_list('id', flat=True))
+
+        if requested_projects and project_ids != requested_projects:
+            raise PermissionDenied
+
+        return list(project_ids)
+
+    def get_environments(self, request, organization):
+        requested_environments = set(request.GET.getlist('environment'))
+
+        if not requested_environments:
+            return []
+
+        environments = set(
+            Environment.objects.filter(
+                organization_id=organization.id,
+                name__in=requested_environments,
+            ).values_list('name', flat=True),
+        )
+
+        if requested_environments != environments:
+            raise ResourceDoesNotExist
+
+        return list(environments)
+
+    def get_filter_params(self, request, organization, date_filter_optional=False):
+        """
+        Extracts common filter parameters from the request and returns them
+        in a standard format.
+        :param request:
+        :param organization: Organization to get params for
+        :param date_filter_optional: Defines what happens if no date filter
+        parameters are passed. If False, no date filtering occurs. If True, we
+        provide default values.
+        :return: A dict with keys:
+         - start: start date of the filter
+         - end: end date of the filter
+         - project_id: A list of project ids to filter on
+         - environment(optional): If environments were passed in, a list of
+         environment names
+        """
+        # get the top level params -- projects, time range, and environment
+        # from the request
+        try:
+            start, end = get_date_range_from_params(
+                request.GET,
+                optional=date_filter_optional,
+            )
+        except InvalidParams as exc:
+            raise OrganizationEventsError(exc.message)
+
+        try:
+            project_ids = self.get_project_ids(request, organization)
+        except ValueError:
+            raise OrganizationEventsError('Invalid project ids')
+
+        if not project_ids:
+            raise NoProjects
+
+        environments = self.get_environments(request, organization)
+        params = {
+            'start': start,
+            'end': end,
+            'project_id': project_ids,
+        }
+        if environments:
+            params['environment'] = environments
+
+        return params
+
     def convert_args(self, request, organization_slug, *args, **kwargs):
         try:
             organization = Organization.objects.get_from_cache(
diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 1402b53275..91d33350ed 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -1,110 +1,11 @@
 from __future__ import absolute_import
 
-from rest_framework.exceptions import PermissionDenied
-
-from sentry import roles
-from sentry.api.bases import OrganizationEndpoint
+from sentry.api.bases import OrganizationEndpoint, OrganizationEventsError
 from sentry.api.event_search import get_snuba_query_args, InvalidSearchQuery
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.utils import get_date_range_from_params, InvalidParams
-from sentry.models import (
-    Environment, OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
-)
-
-
-class OrganizationEventsError(Exception):
-    pass
-
-
-class NoProjects(Exception):
-    pass
 
 
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
 
-    def get_project_ids(self, request, organization):
-        project_ids = set(map(int, request.GET.getlist('project')))
-
-        requested_projects = project_ids.copy()
-
-        try:
-            om_role = OrganizationMember.objects.filter(
-                user=request.user,
-                organization=organization,
-            ).values_list('role', flat=True).get()
-        except OrganizationMember.DoesNotExist:
-            om_role = None
-
-        if request.user.is_superuser or (om_role and roles.get(om_role).is_global):
-            qs = Project.objects.filter(
-                organization=organization,
-                status=ProjectStatus.VISIBLE,
-            )
-        else:
-            qs = Project.objects.filter(
-                organization=organization,
-                teams__in=OrganizationMemberTeam.objects.filter(
-                    organizationmember__user=request.user,
-                    organizationmember__organization=organization,
-                ).values_list('team'),
-                status=ProjectStatus.VISIBLE,
-            )
-
-        if project_ids:
-            qs = qs.filter(id__in=project_ids)
-
-        project_ids = set(qs.values_list('id', flat=True))
-
-        if requested_projects and project_ids != requested_projects:
-            raise PermissionDenied
-
-        return list(project_ids)
-
-    def get_environments(self, request, organization):
-        requested_environments = set(request.GET.getlist('environment'))
-
-        if not requested_environments:
-            return []
-
-        environments = set(
-            Environment.objects.filter(
-                organization_id=organization.id,
-                name__in=requested_environments,
-            ).values_list('name', flat=True),
-        )
-
-        if requested_environments != environments:
-            raise ResourceDoesNotExist
-
-        return list(environments)
-
-    def get_filter_params(self, request, organization):
-        # get the top level params -- projects, time range, and environment
-        # from the request
-        try:
-            start, end = get_date_range_from_params(request.GET)
-        except InvalidParams as exc:
-            raise OrganizationEventsError(exc.message)
-
-        try:
-            project_ids = self.get_project_ids(request, organization)
-        except ValueError:
-            raise OrganizationEventsError('Invalid project ids')
-
-        if not project_ids:
-            raise NoProjects
-
-        environments = self.get_environments(request, organization)
-        params = {
-            'start': start,
-            'end': end,
-            'project_id': project_ids,
-        }
-        if environments:
-            params['environment'] = environments
-
-        return params
-
     def get_snuba_query_args(self, request, organization):
         params = self.get_filter_params(request, organization)
         try:
diff --git a/src/sentry/api/utils.py b/src/sentry/api/utils.py
index c4fbb3d351..33b9cbd6c1 100644
--- a/src/sentry/api/utils.py
+++ b/src/sentry/api/utils.py
@@ -15,8 +15,20 @@ class InvalidParams(Exception):
     pass
 
 
-def get_date_range_from_params(params):
-    # Returns (start, end) or raises an `InvalidParams` exception
+def get_date_range_from_params(params, optional=False):
+    """
+    Gets a date range from standard date range params we pass to the api.
+    If `statsPeriod` is passed then convert to a time delta and make sure it
+    fits within our min/max period length. Values are in the format
+    <number><period_type>, where period type is one of `s` (seconds),
+    `m` (minutes), `h` (hours) or `d` (days).
+    :param params:
+    If `start` end `end` are passed, validate them, convert to `datetime` and
+    returns them if valid.
+    :param optional: When True, if no params passed then return `(None, None)`.
+    :return: A length 2 tuple containing start/end or raises an `InvalidParams`
+    exception
+    """
     now = timezone.now()
 
     end = now
@@ -38,5 +50,7 @@ def get_date_range_from_params(params):
             raise InvalidParams(exc.message)
         if start > end:
             raise InvalidParams('start must be before end')
+    elif optional:
+        return None, None
 
-    return (start, end)
+    return start, end
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 4093b0f722..8448924a00 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -1,6 +1,20 @@
 from __future__ import absolute_import
 
-from sentry.api.bases.organization import OrganizationPermission
+from datetime import timedelta
+
+from django.test import RequestFactory
+from django.utils import timezone
+from exam import fixture
+from freezegun import freeze_time
+from rest_framework.exceptions import PermissionDenied
+
+from sentry.api.bases.organization import (
+    NoProjects,
+    OrganizationEndpoint,
+    OrganizationPermission,
+)
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.utils import MAX_STATS_PERIOD
 from sentry.models import ApiKey
 from sentry.testutils import TestCase
 
@@ -72,3 +86,247 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
             scope_list=['org:read'],
         )
         assert not self.has_object_perm('PUT', self.org, auth=key)
+
+
+class BaseOrganizationEndpointTest(TestCase):
+
+    @fixture
+    def endpoint(self):
+        return OrganizationEndpoint()
+
+    @fixture
+    def user(self):
+        return self.create_user('tester@test.com')
+
+    @fixture
+    def owner(self):
+        return self.create_user('owner@test.com')
+
+    @fixture
+    def super_user(self):
+        return self.create_user('super@user.com', is_superuser=True)
+
+    @fixture
+    def org(self):
+        org = self.create_organization('test', self.owner)
+        org.flags.allow_joinleave = False
+        org.save()
+        return org
+
+    def build_request(self, user=None, **params):
+        request = RequestFactory().get('/', params)
+        if user is None:
+            user = self.user
+        request.user = user
+        return request
+
+
+class GetProjectIdsTest(BaseOrganizationEndpointTest):
+
+    def setUp(self):
+        self.team_1 = self.create_team(organization=self.org)
+        self.team_2 = self.create_team(organization=self.org)
+        self.team_3 = self.create_team(organization=self.org)
+        self.project_1 = self.create_project(
+            organization=self.org,
+            teams=[self.team_1, self.team_3],
+        )
+        self.project_2 = self.create_project(
+            organization=self.org,
+            teams=[self.team_2, self.team_3],
+        )
+
+    def run_test(
+        self,
+        expected_projects,
+        user=None,
+        project_ids=None,
+        include_allow_joinleave=False,
+    ):
+        request_args = {}
+        if project_ids:
+            request_args['project'] = project_ids
+        result = self.endpoint.get_project_ids(
+            self.build_request(user=user, **request_args),
+            self.org,
+            include_allow_joinleave=include_allow_joinleave,
+        )
+        assert set([p.id for p in expected_projects]) == set(result)
+
+    def test_no_ids_no_teams(self):
+        # Should get nothing if not part of the org
+        self.run_test([])
+        # Should get everything if super user or owner
+        self.run_test([self.project_1, self.project_2], user=self.super_user)
+        self.run_test([self.project_1, self.project_2], user=self.owner)
+        # Should get everything if org is public
+        self.org.flags.allow_joinleave = True
+        self.org.save()
+        self.run_test([self.project_1, self.project_2], include_allow_joinleave=True)
+        self.run_test([], include_allow_joinleave=False)
+
+    def test_no_ids_teams(self):
+        membership = self.create_team_membership(user=self.user, team=self.team_1)
+        self.run_test([self.project_1])
+        membership.delete()
+        self.create_team_membership(user=self.user, team=self.team_3)
+        self.run_test([self.project_1, self.project_2])
+
+    def test_ids_no_teams(self):
+        with self.assertRaises(PermissionDenied):
+            self.run_test([], project_ids=[self.project_1.id])
+
+        self.run_test([self.project_1], user=self.super_user, project_ids=[self.project_1.id])
+        self.run_test([self.project_1], user=self.owner, project_ids=[self.project_1.id])
+        self.org.flags.allow_joinleave = True
+        self.org.save()
+        self.run_test(
+            [self.project_1],
+            project_ids=[self.project_1.id],
+            include_allow_joinleave=True,
+        )
+        with self.assertRaises(PermissionDenied):
+            self.run_test(
+                [self.project_1],
+                project_ids=[self.project_1.id],
+                include_allow_joinleave=False,
+            )
+
+    def test_ids_teams(self):
+        membership = self.create_team_membership(user=self.user, team=self.team_1)
+        self.run_test([self.project_1], project_ids=[self.project_1.id])
+        with self.assertRaises(PermissionDenied):
+            self.run_test([], project_ids=[self.project_2.id])
+        membership.delete()
+        self.create_team_membership(user=self.user, team=self.team_3)
+        self.run_test(
+            [self.project_1, self.project_2],
+            project_ids=[self.project_1.id, self.project_2.id],
+        )
+
+
+class GetEnvironmentsTest(BaseOrganizationEndpointTest):
+    def setUp(self):
+        self.project = self.create_project(organization=self.org)
+        self.env_1 = self.create_environment(project=self.project)
+        self.env_2 = self.create_environment(project=self.project)
+
+    def run_test(self, expected_envs, env_names=None):
+        request_args = {}
+        if env_names:
+            request_args['environment'] = env_names
+        result = self.endpoint.get_environments(
+            self.build_request(**request_args),
+            self.org,
+        )
+        assert set([e.name for e in expected_envs]) == set(result)
+
+    def test_no_params(self):
+        self.run_test([])
+
+    def test_valid_params(self):
+        self.run_test([self.env_1], [self.env_1.name])
+        self.run_test([self.env_1, self.env_2], [self.env_1.name, self.env_2.name])
+
+    def test_invalid_params(self):
+        with self.assertRaises(ResourceDoesNotExist):
+            self.run_test([], ['fake'])
+        with self.assertRaises(ResourceDoesNotExist):
+            self.run_test([self.env_1, self.env_2], ['fake', self.env_2.name])
+
+
+class GetFilterParamsTest(BaseOrganizationEndpointTest):
+    def setUp(self):
+        self.team_1 = self.create_team(organization=self.org)
+        self.project_1 = self.create_project(
+            organization=self.org,
+            teams=[self.team_1],
+        )
+        self.project_2 = self.create_project(
+            organization=self.org,
+            teams=[self.team_1],
+        )
+        self.env_1 = self.create_environment(project=self.project_1)
+        self.env_2 = self.create_environment(project=self.project_1)
+
+    def run_test(
+        self,
+        expected_projects,
+        expected_envs=None,
+        expected_start=None,
+        expected_end=None,
+        env_names=None,
+        user=None,
+        date_filter_optional=False,
+        project_ids=None,
+        start=None,
+        end=None,
+        stats_period=None,
+    ):
+        request_args = {}
+        if env_names:
+            request_args['environment'] = env_names
+        if project_ids:
+            request_args['project'] = project_ids
+        if start and end:
+            request_args['start'] = start
+            request_args['end'] = end
+        if stats_period:
+            request_args['statsPeriod'] = stats_period
+        result = self.endpoint.get_filter_params(
+            self.build_request(user=user, **request_args),
+            self.org,
+            date_filter_optional=date_filter_optional,
+        )
+
+        assert set([p.id for p in expected_projects]) == set(result['project_id'])
+        assert expected_start == result['start']
+        assert expected_end == result['end']
+        if expected_envs:
+            assert set([e.name for e in expected_envs]) == set(result['environment'])
+        else:
+            assert 'environment' not in result
+
+    @freeze_time('2018-12-11 03:21:34')
+    def test_no_params(self):
+        with self.assertRaises(NoProjects):
+            self.run_test([])
+        self.run_test(
+            [self.project_1, self.project_2],
+            expected_start=timezone.now() - MAX_STATS_PERIOD,
+            expected_end=timezone.now(),
+            user=self.super_user,
+        )
+        self.run_test(
+            [self.project_1, self.project_2],
+            expected_start=None,
+            expected_end=None,
+            user=self.super_user,
+            date_filter_optional=True
+        )
+
+    def test_params(self):
+        start = timezone.now() - timedelta(days=3)
+        end = timezone.now()
+        self.create_team_membership(user=self.user, team=self.team_1)
+        self.run_test(
+            expected_projects=[self.project_1, self.project_2],
+            project_ids=[self.project_1.id, self.project_2.id],
+            expected_envs=[self.env_1, self.env_2],
+            env_names=[self.env_1.name, self.env_2.name],
+            expected_start=start,
+            expected_end=end,
+            start=start.replace(tzinfo=None).isoformat(),
+            end=end.replace(tzinfo=None).isoformat(),
+        )
+
+        with freeze_time('2018-12-11 03:21:34'):
+            self.run_test(
+                expected_projects=[self.project_1, self.project_2],
+                project_ids=[self.project_1.id, self.project_2.id],
+                expected_envs=[self.env_1, self.env_2],
+                env_names=[self.env_1.name, self.env_2.name],
+                expected_start=timezone.now() - timedelta(days=2),
+                expected_end=timezone.now(),
+                stats_period='2d',
+            )
diff --git a/tests/sentry/api/test_utils.py b/tests/sentry/api/test_utils.py
index 970ea1d94e..b9a33c1294 100644
--- a/tests/sentry/api/test_utils.py
+++ b/tests/sentry/api/test_utils.py
@@ -3,8 +3,13 @@ from __future__ import absolute_import
 import datetime
 
 from django.utils import timezone
+from freezegun import freeze_time
 
-from sentry.api.utils import get_date_range_from_params, InvalidParams
+from sentry.api.utils import (
+    get_date_range_from_params,
+    InvalidParams,
+    MAX_STATS_PERIOD,
+)
 from sentry.testutils import TestCase
 
 
@@ -36,3 +41,13 @@ class GetDateRangeFromParamsTest(TestCase):
 
         with self.assertRaises(InvalidParams):
             get_date_range_from_params({'start': '2018-11-01'})
+
+    @freeze_time("2018-12-11 03:21:34")
+    def test_no_params(self):
+        start, end = get_date_range_from_params({})
+        assert start == timezone.now() - MAX_STATS_PERIOD
+        assert end == timezone.now()
+
+        start, end = get_date_range_from_params({}, optional=True)
+        assert start is None
+        assert end is None
