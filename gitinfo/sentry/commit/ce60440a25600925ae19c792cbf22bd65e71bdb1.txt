commit ce60440a25600925ae19c792cbf22bd65e71bdb1
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Jul 13 15:56:53 2016 -0700

    Use random group generator for email previews. (#3699)

diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 5502a25911..7453f0bab1 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -11,10 +11,7 @@ from datetime import (
     datetime,
     timedelta,
 )
-from django.contrib.webdesign.lorem_ipsum import (
-    WORDS,
-    words,
-)
+from django.contrib.webdesign.lorem_ipsum import WORDS
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 from django.utils.safestring import mark_safe
@@ -40,7 +37,7 @@ from sentry.models import (
     Team,
 )
 from sentry.plugins.sentry_mail.activity import emails
-from sentry.utils.dates import to_timestamp
+from sentry.utils.dates import to_datetime, to_timestamp
 from sentry.utils.samples import load_data
 from sentry.utils.email import inline_css
 from sentry.utils.http import absolute_uri
@@ -51,6 +48,62 @@ from sentry.web.helpers import render_to_response, render_to_string
 logger = logging.getLogger(__name__)
 
 
+def get_random(request):
+    seed = request.GET.get('seed', str(time.time()))
+    return Random(seed)
+
+
+def make_message(random, length=None):
+    if length is None:
+        length = int(random.weibullvariate(8, 3))
+    return ' '.join(random.choice(WORDS) for _ in xrange(length))
+
+
+def make_culprit(random):
+    def make_module_path_components(min, max):
+        for _ in xrange(random.randint(min, max)):
+            yield ''.join(random.sample(WORDS, random.randint(1, int(random.paretovariate(2.2)))))
+
+    return '{module} in {function}'.format(
+        module='.'.join(make_module_path_components(1, 4)),
+        function=random.choice(WORDS)
+    )
+
+
+def make_group_metadata(random, group):
+    return {
+        'type': 'error',
+        'metadata': {
+            'type': '{}Error'.format(
+                ''.join(word.title() for word in random.sample(WORDS, random.randint(1, 3))),
+            ),
+            'value': make_message(random),
+        }
+    }
+
+
+def make_group_generator(random, project):
+    epoch = to_timestamp(datetime(2016, 6, 1, 0, 0, 0, tzinfo=timezone.utc))
+    for id in itertools.count(1):
+        first_seen = epoch + random.randint(0, 60 * 60 * 24 * 30)
+        last_seen = random.randint(first_seen, first_seen + (60 * 60 * 24 * 30))
+
+        group = Group(
+            id=id,
+            project=project,
+            culprit=make_culprit(random),
+            level=random.choice(LOG_LEVELS.keys()),
+            message=make_message(random),
+            first_seen=to_datetime(first_seen),
+            last_seen=to_datetime(last_seen),
+        )
+
+        if random.random() < 0.8:
+            group.data = make_group_metadata(random, group)
+
+        yield group
+
+
 # TODO(dcramer): use https://github.com/disqus/django-mailviews
 class MailPreview(object):
     def __init__(self, html_template, text_template, context=None):
@@ -117,12 +170,11 @@ class ActivityMailDebugView(View):
             name='My Project',
         )
 
-        group = Group(
-            id=1,
-            project=project,
-            message='This is an example event.',
-            last_seen=datetime(2016, 6, 13, 3, 8, 24, tzinfo=timezone.utc),
-            first_seen=datetime(2016, 6, 13, 3, 8, 24, tzinfo=timezone.utc),
+        group = next(
+            make_group_generator(
+                get_random(request),
+                project,
+            ),
         )
 
         event = Event(
@@ -166,11 +218,12 @@ def new_event(request):
         team=team,
         organization=org,
     )
-    group = Group(
-        id=1,
-        project=project,
-        message='This is an example event.',
-        level=logging.ERROR,
+
+    group = next(
+        make_group_generator(
+            get_random(request),
+            project,
+        ),
     )
 
     event = Event(
@@ -213,9 +266,7 @@ def new_event(request):
 
 @login_required
 def digest(request):
-    seed = request.GET.get('seed', str(time.time()))
-    logger.debug('Using random seed value: %s')
-    random = Random(seed)
+    random = get_random(request)
 
     now = datetime.utcnow().replace(tzinfo=pytz.utc)
 
@@ -257,25 +308,12 @@ def digest(request):
 
     records = []
 
-    group_sequence = itertools.count(1)
     event_sequence = itertools.count(1)
+    group_generator = make_group_generator(random, project)
 
     for i in xrange(random.randint(1, 30)):
-        group_id = next(group_sequence)
-
-        culprit = '{module} in {function}'.format(
-            module='.'.join(
-                ''.join(random.sample(WORDS, random.randint(1, int(random.paretovariate(2.2))))) for word in xrange(1, 4)
-            ),
-            function=random.choice(WORDS)
-        )
-        group = state['groups'][group_id] = Group(
-            id=group_id,
-            project=project,
-            message=words(int(random.weibullvariate(8, 4)), common=False),
-            culprit=culprit,
-            level=random.choice(LOG_LEVELS.keys()),
-        )
+        group = next(group_generator)
+        state['groups'][group.id] = group
 
         offset = timedelta(seconds=0)
         for i in xrange(random.randint(1, 10)):
@@ -301,8 +339,8 @@ def digest(request):
                 )
             )
 
-            state['event_counts'][group_id] = random.randint(10, 1e4)
-            state['user_counts'][group_id] = random.randint(10, 1e4)
+            state['event_counts'][group.id] = random.randint(10, 1e4)
+            state['user_counts'][group.id] = random.randint(10, 1e4)
 
     digest = build_digest(project, records, state)
     start, end, counts = get_digest_metadata(digest)
diff --git a/tests/acceptance/test_activity_emails.py b/tests/acceptance/test_activity_emails.py
index 43ce7718ef..5e0062af84 100644
--- a/tests/acceptance/test_activity_emails.py
+++ b/tests/acceptance/test_activity_emails.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from urllib import urlencode
+
 from sentry.testutils import AcceptanceTestCase
 
 
@@ -9,92 +11,101 @@ class ActivityEmailsTest(AcceptanceTestCase):
         self.user = self.create_user('foo@example.com')
         self.login_as(self.user)
 
+    def build_url(self, path, format='html'):
+        return u'{}?{}'.format(
+            path,
+            urlencode({
+                'format': format,
+                'seed': '123',
+            }),
+        )
+
     def test_assigned_html(self):
-        self.browser.get('/debug/mail/assigned/?format=html')
+        self.browser.get(self.build_url('/debug/mail/assigned/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('assigned email html')
 
     def test_assigned_txt(self):
-        self.browser.get('/debug/mail/assigned/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/assigned/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('assigned email txt')
 
     def test_assigned_self_html(self):
-        self.browser.get('/debug/mail/assigned/self/?format=html')
+        self.browser.get(self.build_url('/debug/mail/assigned/self/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('assigned_self email html')
 
     def test_assigned_self_txt(self):
-        self.browser.get('/debug/mail/assigned/self/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/assigned/self/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('assigned_self email txt')
 
     def test_note_html(self):
-        self.browser.get('/debug/mail/note/?format=html')
+        self.browser.get(self.build_url('/debug/mail/note/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('note email html')
 
     def test_note_txt(self):
-        self.browser.get('/debug/mail/note/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/note/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('note email txt')
 
     def test_regression_html(self):
-        self.browser.get('/debug/mail/regression/?format=html')
+        self.browser.get(self.build_url('/debug/mail/regression/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('regression email html')
 
     def test_regression_txt(self):
-        self.browser.get('/debug/mail/regression/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/regression/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('regression email txt')
 
     def test_regression_with_version_html(self):
-        self.browser.get('/debug/mail/regression/release/?format=html')
+        self.browser.get(self.build_url('/debug/mail/regression/release/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('regression_with_version email html')
 
     def test_regression_with_version_txt(self):
-        self.browser.get('/debug/mail/regression/release/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/regression/release/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('regression_with_version email txt')
 
     def test_resolved_html(self):
-        self.browser.get('/debug/mail/resolved/?format=html')
+        self.browser.get(self.build_url('/debug/mail/resolved/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('resolved email html')
 
     def test_resolved_txt(self):
-        self.browser.get('/debug/mail/resolved/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/resolved/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('resolved email txt')
 
     def test_resolved_in_release_html(self):
-        self.browser.get('/debug/mail/resolved-in-release/?format=html')
+        self.browser.get(self.build_url('/debug/mail/resolved-in-release/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('resolved_in_release email html')
 
     def test_resolved_in_release_txt(self):
-        self.browser.get('/debug/mail/resolved-in-release/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/resolved-in-release/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('resolved_in_release email txt')
 
     def test_resolved_in_release_upcoming_html(self):
-        self.browser.get('/debug/mail/resolved-in-release/upcoming/?format=html')
+        self.browser.get(self.build_url('/debug/mail/resolved-in-release/upcoming/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('resolved_in_release_upcoming email html')
 
     def test_resolved_in_release_upcoming_txt(self):
-        self.browser.get('/debug/mail/resolved-in-release/upcoming/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/resolved-in-release/upcoming/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('resolved_in_release_upcoming email txt')
 
     def test_unassigned_html(self):
-        self.browser.get('/debug/mail/unassigned/?format=html')
+        self.browser.get(self.build_url('/debug/mail/unassigned/'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('unassigned email html')
 
     def test_unassigned_txt(self):
-        self.browser.get('/debug/mail/unassigned/?format=txt')
+        self.browser.get(self.build_url('/debug/mail/unassigned/', 'txt'))
         self.browser.wait_until('#preview')
         self.browser.snapshot('unassigned email txt')
