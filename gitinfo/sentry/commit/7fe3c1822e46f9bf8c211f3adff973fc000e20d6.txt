commit 7fe3c1822e46f9bf8c211f3adff973fc000e20d6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Nov 10 11:06:24 2016 +0100

    Fixed and improved raw stacktrace rendering

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 0ce3b263ab..4820d98e12 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -369,16 +369,16 @@ def resolve_frame_symbols(data):
             )
         })
 
-    processed_frames = []
     with sym:
         for stacktrace, container in stacktraces:
             store_raw = False
+
+            new_frames = list(stacktrace['frames'])
             for idx, frame in enumerate(stacktrace['frames']):
                 if 'image_addr' not in frame or \
                    'instruction_addr' not in frame or \
                    'symbol_addr' not in frame:
                     continue
-                store_raw = True
                 try:
                     sfrm = sym.symbolize_frame({
                         'object_name': frame.get('package'),
@@ -388,26 +388,30 @@ def resolve_frame_symbols(data):
                     }, sdk_info, report_error=report_error)
                     if not sfrm:
                         continue
+                    new_frame = dict(frame)
                     # XXX: log here if symbol could not be found?
-                    frame['function'] = sfrm.get('symbol_name') or \
-                        frame.get('function') or '<unknown>'
-                    frame['abs_path'] = sfrm.get('filename') or None
-                    if frame['abs_path']:
-                        frame['filename'] = posixpath.basename(frame['abs_path'])
+                    new_frame['function'] = sfrm.get('symbol_name') or \
+                        new_frame.get('function') or '<unknown>'
+                    new_frame['abs_path'] = sfrm.get('filename') or None
+                    if new_frame['abs_path']:
+                        new_frame['filename'] = posixpath.basename(new_frame['abs_path'])
                     if sfrm.get('line') is not None:
-                        frame['lineno'] = sfrm['line']
+                        new_frame['lineno'] = sfrm['line']
                     else:
-                        frame['instruction_offset'] = \
+                        new_frame['instruction_offset'] = \
                             parse_addr(sfrm['instruction_addr']) - \
                             parse_addr(sfrm['symbol_addr'])
                     if sfrm.get('column') is not None:
-                        frame['colno'] = sfrm['column']
-                    frame['package'] = sfrm['object_name'] or frame.get('package')
-                    frame['symbol_addr'] = '0x%x' % parse_addr(sfrm['symbol_addr'])
-                    frame['instruction_addr'] = '0x%x' % parse_addr(
+                        new_frame['colno'] = sfrm['column']
+                    new_frame['package'] = sfrm['object_name'] or new_frame.get('package')
+                    new_frame['symbol_addr'] = '0x%x' % parse_addr(sfrm['symbol_addr'])
+                    new_frame['instruction_addr'] = '0x%x' % parse_addr(
                         sfrm['instruction_addr'])
-                    frame['in_app'] = is_in_app(frame)
-                    processed_frames.append(frame)
+                    new_frame['in_app'] = is_in_app(new_frame)
+
+                    if new_frame != frame:
+                        new_frames[idx] = new_frame
+                        store_raw = True
                 except Exception:
                     logger.exception('Failed to symbolicate')
                     errors.append({
@@ -421,6 +425,9 @@ def resolve_frame_symbols(data):
                     'frames': stacktrace['frames'],
                 }
 
+            # Put the new frames in
+            stacktrace['frames'] = new_frames
+
     if errors:
         data.setdefault('errors', []).extend(errors)
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index 0b363fe4a7..edd00116d8 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -8,7 +8,7 @@ const CrashHeader = React.createClass({
     title: React.PropTypes.string,
     beforeTitle: React.PropTypes.any,
     group: PropTypes.Group.isRequired,
-    platform: PropTypes.string,
+    platform: React.PropTypes.string,
     thread: React.PropTypes.object,
     exception: React.PropTypes.object,
     stacktrace: React.PropTypes.object,
@@ -44,11 +44,19 @@ const CrashHeader = React.createClass({
     );
   },
 
+  getOriginalButtonLabel() {
+    if (this.platform === 'javascript' || this.platform === 'node') {
+      return t('Original');
+    } else {
+      return t('Symbolicated');
+    }
+  },
+
   getMinifiedButtonLabel() {
     if (this.platform === 'javascript' || this.platform === 'node') {
       return t('Minified');
     } else {
-      return t('Stripped');
+      return t('Unsymbolicated');
     }
   },
 
@@ -104,7 +112,7 @@ const CrashHeader = React.createClass({
         <div className="btn-group">
           {this.hasMinified() &&
             [
-              <a key="original" className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('original')}>{t('Original')}</a>,
+              <a key="original" className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('original')}>{this.getOriginalButtonLabel()}</a>,
               <a key="minified" className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('minified')}>{this.getMinifiedButtonLabel()}</a>
             ]
           }
