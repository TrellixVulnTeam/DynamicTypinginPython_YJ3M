commit fc5cd491eef71a4127bf615b4fd311cff45c769b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 30 17:33:19 2015 -0700

    Ensure all members can view membership details

diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 1e4f11301e..8fdeeac024 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -10,8 +10,6 @@ from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
 
 
 class OrganizationMemberSettingsView(OrganizationView):
-    required_access = OrganizationMemberType.MEMBER
-
     def get_form(self, request, member, authorizing_access):
         return EditOrganizationMemberForm(
             authorizing_access=authorizing_access,
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 3582469e5e..1ece8c9012 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -17,8 +17,8 @@ class OrganizationMemberSettingsPermissionTest(PermissionTestCase):
         om = self.create_member(user=member, organization=self.organization)
         self.path = reverse('sentry-organization-member-settings', args=[self.organization.slug, om.id])
 
-    def test_teamless_admin_cannot_load(self):
-        self.assert_teamless_admin_cannot_access(self.path)
+    def test_teamless_member_can_load(self):
+        self.assert_teamless_admin_can_access(self.path)
 
     def test_org_member_can_load(self):
         self.assert_org_member_can_access(self.path)
@@ -262,6 +262,39 @@ class OrganizationMemberSettingsTest(TestCase):
         assert resp.context['organization'] == organization
         assert resp.context['member'] == owner_om
 
+    def test_can_view_member_with_team_access(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team_1 = self.create_team(name='foo', organization=organization)
+        team_2 = self.create_team(name='bar', organization=organization)
+
+        member = self.create_user('foo@example.com', is_superuser=False)
+
+        owner_om = OrganizationMember.objects.get(
+            organization=organization,
+            user=self.user,
+        )
+
+        member_om = OrganizationMember.objects.create(
+            organization=organization,
+            user=member,
+            has_global_access=False,
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        path = reverse('sentry-organization-member-settings',
+                       args=[organization.slug, owner_om.id])
+
+        self.login_as(member)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/organization-member-details.html')
+
+        assert resp.context['organization'] == organization
+        assert resp.context['member'] == owner_om
+
     def test_global_access_with_inactive_teams(self):
         organization = self.create_organization(name='foo', owner=self.user)
         team_1 = self.create_team(name='foo', organization=organization)
