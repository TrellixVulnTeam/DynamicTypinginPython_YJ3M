commit f988d7badc3a405be5c0137539e02c27e375454f
Author: Mark Story <mark@sentry.io>
Date:   Mon Jun 1 15:56:42 2020 -0400

    feat(discover) Add sorting to discover saved queries (#19088)
    
    Add a UI control to expose the sorting options that we have for discover
    saved queries. This helps improve saved query experience for orgs with
    many saved queries.
    
    Add sorting by 'my queries'. This sort order puts the current user's queries
    first sorted by name, then other users after that also sorted by user id and
    name.

diff --git a/src/sentry/discover/endpoints/discover_saved_queries.py b/src/sentry/discover/endpoints/discover_saved_queries.py
index a07485cddc..59c1a17ae4 100644
--- a/src/sentry/discover/endpoints/discover_saved_queries.py
+++ b/src/sentry/discover/endpoints/discover_saved_queries.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import six
+from django.db.models import Case, When
 from rest_framework.response import Response
 
 from sentry import features
@@ -32,6 +33,7 @@ class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
             DiscoverSavedQuery.objects.filter(organization=organization)
             .select_related("created_by")
             .prefetch_related("projects")
+            .extra(select={"lower_name": "lower(name)"})
         )
         query = request.query_params.get("query")
         if query:
@@ -48,14 +50,21 @@ class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
 
         sort_by = request.query_params.get("sortBy")
         if sort_by in ("name", "-name"):
-            order_by = sort_by
+            order_by = "-lower_name" if sort_by.startswith("-") else "lower_name"
         elif sort_by in ("dateCreated", "-dateCreated"):
             order_by = "-date_created" if sort_by.startswith("-") else "date_created"
         elif sort_by in ("dateUpdated", "-dateUpdated"):
             order_by = "-date_updated" if sort_by.startswith("-") else "date_updated"
+        elif sort_by == "myqueries":
+            order_by = [
+                Case(When(created_by_id=request.user.id, then=-1), default="created_by_id"),
+                "lower_name",
+            ]
         else:
-            order_by = "name"
-        queryset = queryset.order_by(order_by)
+            order_by = "lower_name"
+        if not isinstance(order_by, list):
+            order_by = [order_by]
+        queryset = queryset.order_by(*order_by)
 
         # Old discover expects all queries and uses this parameter.
         if request.query_params.get("all") == "1":
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 6d0f5bfac0..857753c52d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -7,7 +7,7 @@ import pick from 'lodash/pick';
 import styled from '@emotion/styled';
 import {Location} from 'history';
 
-import {Organization, SavedQuery} from 'app/types';
+import {Organization, SavedQuery, SelectValue} from 'app/types';
 import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
@@ -15,6 +15,7 @@ import Alert from 'app/components/alert';
 import AsyncComponent from 'app/components/asyncComponent';
 import Banner from 'app/components/banner';
 import Button from 'app/components/button';
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
 import ConfigStore from 'app/stores/configStore';
 import Feature from 'app/components/acl/feature';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
@@ -34,6 +35,15 @@ import backgroundSpace from '../../../images/spot/background-space.svg';
 
 const BANNER_DISMISSED_KEY = 'discover-banner-dismissed';
 
+const SORT_OPTIONS: SelectValue<string>[] = [
+  {label: t('Name'), value: 'name'},
+  {label: t('My Queries'), value: 'myqueries'},
+  {label: t('Newest'), value: '-dateCreated'},
+  {label: t('Oldest'), value: 'dateCreated'},
+  {label: t('Recently updated'), value: '-dateUpdated'},
+  {label: t('Least recently updated'), value: 'dateUpdated'},
+];
+
 function checkIsBannerHidden(): boolean {
   return localStorage.getItem(BANNER_DISMISSED_KEY) === 'true';
 }
@@ -79,6 +89,15 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     return String(decodeScalar(location.query.query) || '').trim();
   }
 
+  getActiveSort() {
+    const {location} = this.props;
+
+    const urlSort = location.query.sort
+      ? decodeScalar(location.query.sort)
+      : '-dateUpdated';
+    return SORT_OPTIONS.find(item => item.value === urlSort) || SORT_OPTIONS[0];
+  }
+
   getEndpoints(): [string, string, any][] {
     const {organization, location} = this.props;
 
@@ -115,7 +134,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       cursor,
       query: `version:2 name:"${searchQuery}"`,
       per_page: perPage,
-      sortBy: '-dateUpdated',
+      sortBy: this.getActiveSort().value,
     };
     if (!cursor) {
       delete queryParams.cursor;
@@ -141,7 +160,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       });
     }
 
-    const PAYLOAD_KEYS = ['cursor', 'query'] as const;
+    const PAYLOAD_KEYS = ['sort', 'cursor', 'query'] as const;
 
     const payloadKeysChanged = !isEqual(
       pick(prevProps.location.query, PAYLOAD_KEYS),
@@ -176,6 +195,18 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     });
   };
 
+  handleSortChange = (value: string) => {
+    const {location} = this.props;
+    ReactRouter.browserHistory.push({
+      pathname: location.pathname,
+      query: {
+        ...location.query,
+        cursor: undefined,
+        sort: value,
+      },
+    });
+  };
+
   renderBanner() {
     const bannerDismissed = this.state.isBannerHidden;
 
@@ -216,14 +247,28 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
   }
 
   renderActions() {
+    const activeSort = this.getActiveSort();
+
     return (
       <StyledActions>
         <StyledSearchBar
           defaultQuery=""
           query={this.getSavedQuerySearchQuery()}
-          placeholder={t('Search for saved queries')}
+          placeholder={t('Search saved queries')}
           onSearch={this.handleSearchQuery}
         />
+        <DropdownControl buttonProps={{prefix: t('Sort By')}} label={activeSort.label}>
+          {SORT_OPTIONS.map(({label, value}) => (
+            <DropdownItem
+              key={value}
+              onSelect={this.handleSortChange}
+              eventKey={value}
+              isActive={value === activeSort.value}
+            >
+              {label}
+            </DropdownItem>
+          ))}
+        </DropdownControl>
       </StyledActions>
     );
   }
@@ -247,59 +292,26 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
+  renderBody() {
+    const {location, organization} = this.props;
+    const {savedQueries, savedQueriesPageLinks} = this.state;
+
+    return (
+      <QueryList
+        pageLinks={savedQueriesPageLinks}
+        savedQueries={savedQueries}
+        savedQuerySearchQuery={this.getSavedQuerySearchQuery()}
+        location={location}
+        organization={organization}
+        onQueryChange={this.handleQueryChange}
+      />
+    );
+  }
+
   render() {
-    let body: React.ReactNode;
     const {location, organization} = this.props;
-    const {loading, savedQueries, savedQueriesPageLinks, error} = this.state;
     const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
     const to = eventView.getResultsViewUrlTarget(organization.slug);
-    if (loading) {
-      body = this.renderLoading();
-    } else if (error) {
-      body = this.renderError();
-    } else {
-      body = (
-        <PageContent>
-          <StyledPageHeader>
-            {t('Discover')}
-            <StyledButton
-              data-test-id="build-new-query"
-              to={to}
-              priority="primary"
-              onClick={() => {
-                trackAnalyticsEvent({
-                  eventKey: 'discover_v2.build_new_query',
-                  eventName: 'Discoverv2: Build a new Discover Query',
-                  organization_id: parseInt(this.props.organization.id, 10),
-                });
-              }}
-            >
-              {t('Build a new query')}
-            </StyledButton>
-          </StyledPageHeader>
-          {this.renderBanner()}
-          {this.renderActions()}
-          <QueryList
-            pageLinks={savedQueriesPageLinks}
-            savedQueries={savedQueries}
-            savedQuerySearchQuery={this.getSavedQuerySearchQuery()}
-            location={location}
-            organization={organization}
-            onQueryChange={this.handleQueryChange}
-          />
-          <Feature features={['organizations:discover']} organization={organization}>
-            <div>
-              <SwitchLink
-                href={`/organizations/${organization.slug}/discover/`}
-                onClick={this.onGoLegacyDiscover}
-              >
-                {t('Go to Legacy Discover')}
-              </SwitchLink>
-            </div>
-          </Feature>
-        </PageContent>
-      );
-    }
 
     return (
       <Feature
@@ -310,7 +322,41 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
         <SentryDocumentTitle title={t('Discover')} objSlug={organization.slug}>
           <StyledPageContent>
             <LightWeightNoProjectMessage organization={organization}>
-              {body}
+              <PageContent>
+                <StyledPageHeader>
+                  {t('Discover')}
+                  <StyledButton
+                    data-test-id="build-new-query"
+                    to={to}
+                    priority="primary"
+                    onClick={() => {
+                      trackAnalyticsEvent({
+                        eventKey: 'discover_v2.build_new_query',
+                        eventName: 'Discoverv2: Build a new Discover Query',
+                        organization_id: parseInt(this.props.organization.id, 10),
+                      });
+                    }}
+                  >
+                    {t('Build a new query')}
+                  </StyledButton>
+                </StyledPageHeader>
+                {this.renderBanner()}
+                {this.renderActions()}
+                {this.renderComponent()}
+                <Feature
+                  features={['organizations:discover']}
+                  organization={organization}
+                >
+                  <div>
+                    <SwitchLink
+                      href={`/organizations/${organization.slug}/discover/`}
+                      onClick={this.onGoLegacyDiscover}
+                    >
+                      {t('Go to Legacy Discover')}
+                    </SwitchLink>
+                  </div>
+                </Feature>
+              </PageContent>
             </LightWeightNoProjectMessage>
           </StyledPageContent>
         </SentryDocumentTitle>
@@ -337,7 +383,10 @@ const StyledSearchBar = styled(SearchBar)`
 `;
 
 const StyledActions = styled('div')`
-  display: flex;
+  display: grid;
+  grid-gap: ${space(2)};
+  grid-template-columns: auto min-content;
+
   align-items: center;
   margin-bottom: ${space(3)};
 `;
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index 86a2382a03..b962c164c8 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -29,10 +29,13 @@ class DiscoverSavedQueryBase(APITestCase, SnubaTestCase):
 class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
     feature_name = "organizations:discover"
 
+    def setUp(self):
+        super(DiscoverSavedQueriesTest, self).setUp()
+        self.url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
+
     def test_get(self):
-        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         with self.feature(self.feature_name):
-            response = self.client.get(url)
+            response = self.client.get(self.url)
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
@@ -46,24 +49,22 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
         assert response.data[0]["createdBy"]["username"] == self.user.username
 
     def test_get_version_filter(self):
-        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         with self.feature(self.feature_name):
-            response = self.client.get(url, format="json", data={"query": "version:1"})
+            response = self.client.get(self.url, format="json", data={"query": "version:1"})
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data[0]["name"] == "Test query"
 
         with self.feature(self.feature_name):
-            response = self.client.get(url, format="json", data={"query": "version:2"})
+            response = self.client.get(self.url, format="json", data={"query": "version:2"})
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 0
 
     def test_get_name_filter(self):
-        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         with self.feature(self.feature_name):
-            response = self.client.get(url, format="json", data={"query": "Test"})
+            response = self.client.get(self.url, format="json", data={"query": "Test"})
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
@@ -71,14 +72,14 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
 
         with self.feature(self.feature_name):
             # Also available as the name: filter.
-            response = self.client.get(url, format="json", data={"query": "name:Test"})
+            response = self.client.get(self.url, format="json", data={"query": "name:Test"})
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data[0]["name"] == "Test query"
 
         with self.feature(self.feature_name):
-            response = self.client.get(url, format="json", data={"query": "name:Nope"})
+            response = self.client.get(self.url, format="json", data={"query": "name:Nope"})
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 0
@@ -95,16 +96,14 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
             )
             model.set_projects(self.project_ids)
 
-        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         with self.feature(self.feature_name):
-            response = self.client.get(url, data={"per_page": 1})
+            response = self.client.get(self.url, data={"per_page": 1})
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
 
-        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         with self.feature(self.feature_name):
             # The all parameter ignores pagination and returns all values.
-            response = self.client.get(url, data={"per_page": 1, "all": 1})
+            response = self.client.get(self.url, data={"per_page": 1, "all": 1})
         assert response.status_code == 200, response.content
         assert len(response.data) == 11
 
@@ -121,7 +120,6 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
         )
         model.set_projects(self.project_ids)
 
-        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         sort_options = {
             "dateCreated": True,
             "-dateCreated": False,
@@ -132,7 +130,7 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
         }
         for sorting, forward_sort in sort_options.items():
             with self.feature(self.feature_name):
-                response = self.client.get(url, data={"sortBy": sorting})
+                response = self.client.get(self.url, data={"sortBy": sorting})
             assert response.status_code == 200
 
             values = [row[sorting.strip("-")] for row in response.data]
@@ -140,11 +138,46 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
                 values = list(reversed(values))
             assert list(sorted(values)) == values
 
+    def test_get_sortby_myqueries(self):
+        uhoh_user = self.create_user(username="uhoh")
+        self.create_member(organization=self.org, user=uhoh_user)
+
+        whoops_user = self.create_user(username="whoops")
+        self.create_member(organization=self.org, user=whoops_user)
+
+        query = {"fields": ["message"], "query": "", "limit": 10}
+        model = DiscoverSavedQuery.objects.create(
+            organization=self.org,
+            created_by=uhoh_user,
+            name="a query for uhoh",
+            query=query,
+            version=2,
+            date_created=before_now(minutes=10),
+            date_updated=before_now(minutes=10),
+        )
+        model.set_projects(self.project_ids)
+
+        model = DiscoverSavedQuery.objects.create(
+            organization=self.org,
+            created_by=whoops_user,
+            name="a query for whoops",
+            query=query,
+            version=2,
+            date_created=before_now(minutes=10),
+            date_updated=before_now(minutes=10),
+        )
+        model.set_projects(self.project_ids)
+
+        with self.feature(self.feature_name):
+            response = self.client.get(self.url, data={"sortBy": "myqueries"})
+        assert response.status_code == 200, response.content
+        values = [int(item["createdBy"]["id"]) for item in response.data]
+        assert values == [self.user.id, uhoh_user.id, whoops_user.id]
+
     def test_post(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "New query",
                     "projects": self.project_ids,
@@ -165,9 +198,8 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
 
     def test_post_invalid_projects(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "New query",
                     "projects": self.project_ids_without_access,
@@ -183,9 +215,8 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
 
     def test_post_all_projects(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "All projects",
                     "projects": [-1],
@@ -201,9 +232,8 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
 
     def test_post_cannot_use_version_two_fields(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "New query",
                     "projects": self.project_ids,
@@ -223,11 +253,14 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
 class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
     feature_name = "organizations:discover-query"
 
+    def setUp(self):
+        super(DiscoverSavedQueriesVersion2Test, self).setUp()
+        self.url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
+
     def test_post_invalid_conditions(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "New query",
                     "projects": self.project_ids,
@@ -242,9 +275,8 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
 
     def test_post_require_selected_fields(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "New query",
                     "projects": self.project_ids,
@@ -258,9 +290,8 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
 
     def test_post_success(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "new query",
                     "projects": self.project_ids,
@@ -285,9 +316,8 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
 
     def test_post_all_projects(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "New query",
                     "projects": [-1],
@@ -301,9 +331,8 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
 
     def test_save_invalid_query(self):
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.post(
-                url,
+                self.url,
                 {
                     "name": "Bad query",
                     "projects": [-1],
