commit d09d47dceebaf811009aa0a18f7ec7ce400dd41c
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Dec 10 17:17:55 2019 +0100

    fix: Do not persist individual attachments for organizations that do not have this feature (#16030)
    
    * fix: Do not persist individual attachments for organizations that do not have this feature
    
    * fix: Fix tests

diff --git a/src/sentry/ingest/ingest_consumer.py b/src/sentry/ingest/ingest_consumer.py
index 3ecee0ec97..3671c512ca 100644
--- a/src/sentry/ingest/ingest_consumer.py
+++ b/src/sentry/ingest/ingest_consumer.py
@@ -8,6 +8,7 @@ from six import BytesIO
 from django.conf import settings
 from django.core.cache import cache
 
+from sentry import features
 from sentry.cache import default_cache
 from sentry.models import Project, File, EventAttachment
 from sentry.signals import event_accepted
@@ -148,6 +149,10 @@ def process_individual_attachment(message):
         logger.error("Project for ingested event does not exist: %s", project_id)
         return
 
+    if not features.has("organizations:event-attachments", project.organization, actor=None):
+        logger.info("Organization has no event attachments: %s", project_id)
+        return
+
     attachment = message["attachment"]
     attachment = attachment_cache.get_from_chunks(
         key=cache_key, type=attachment.pop("attachment_type"), **attachment
diff --git a/tests/sentry/ingest/ingest_consumer/test_ingest_processing.py b/tests/sentry/ingest/ingest_consumer/test_ingest_processing.py
index b49436cd5f..ba5492864d 100644
--- a/tests/sentry/ingest/ingest_consumer/test_ingest_processing.py
+++ b/tests/sentry/ingest/ingest_consumer/test_ingest_processing.py
@@ -32,7 +32,7 @@ def preprocess_event(monkeypatch):
 
 
 @pytest.mark.django_db
-def test_deduplication_works(default_project, task_runner, monkeypatch, preprocess_event):
+def test_deduplication_works(default_project, task_runner, preprocess_event):
     payload = get_normalized_event({"message": "hello world"}, default_project)
     event_id = payload["event_id"]
     project_id = default_project.id
@@ -60,7 +60,7 @@ def test_deduplication_works(default_project, task_runner, monkeypatch, preproce
 
 
 @pytest.mark.django_db
-def test_with_attachments(default_project, task_runner, monkeypatch, preprocess_event):
+def test_with_attachments(default_project, task_runner, preprocess_event):
     payload = get_normalized_event({"message": "hello world"}, default_project)
     event_id = payload["event_id"]
     attachment_id = "ca90fb45-6dd9-40a0-a18f-8693aa621abb"
@@ -124,7 +124,11 @@ def test_with_attachments(default_project, task_runner, monkeypatch, preprocess_
 
 
 @pytest.mark.django_db
-def test_individual_attachments(default_project, monkeypatch):
+@pytest.mark.parametrize("event_attachments", ["with_feature", "without_feature"])
+def test_individual_attachments(default_project, monkeypatch, event_attachments):
+    has_feature = event_attachments == "with_feature"
+    monkeypatch.setattr("sentry.features.has", lambda *a, **kw: has_feature)
+
     event_id = "515539018c9b4260a6f999572f1661ee"
     attachment_id = "ca90fb45-6dd9-40a0-a18f-8693aa621abb"
     project_id = default_project.id
@@ -164,11 +168,18 @@ def test_individual_attachments(default_project, monkeypatch):
         }
     )
 
-    att1, = EventAttachment.objects.filter(project_id=project_id, event_id=event_id).select_related(
-        "file"
+    attachments = list(
+        EventAttachment.objects.filter(project_id=project_id, event_id=event_id).select_related(
+            "file"
+        )
     )
-    assert att1.file.type == "event.attachment"
-    assert att1.file.headers == {"Content-Type": "application/octet-stream"}
-    f = att1.file.getfile()
-    assert f.read() == b"Hello World!"
-    assert f.name == "foo.txt"
+
+    if not has_feature:
+        assert not attachments
+    else:
+        att1, = attachments
+        assert att1.file.type == "event.attachment"
+        assert att1.file.headers == {"Content-Type": "application/octet-stream"}
+        f = att1.file.getfile()
+        assert f.read() == b"Hello World!"
+        assert f.name == "foo.txt"
