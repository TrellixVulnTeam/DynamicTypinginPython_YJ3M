commit 9ea76c514981c06e22874f40b47d64367f53dbeb
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Aug 23 10:19:57 2018 -0700

    fix: Correct superuser sso default behavior in tests

diff --git a/src/sentry/auth/superuser.py b/src/sentry/auth/superuser.py
index 2c788f3162..5fb31f222f 100644
--- a/src/sentry/auth/superuser.py
+++ b/src/sentry/auth/superuser.py
@@ -88,18 +88,21 @@ class Superuser(object):
         return self._is_active
 
     def is_privileged_request(self):
+        """
+        Returns ``(bool is_privileged, str reason)``
+        """
         allowed_ips = self.allowed_ips
         # if we've bound superuser to an organization they must
         # have completed SSO to gain status
         if self.org_id and not has_completed_sso(self.request, self.org_id):
-            return False
+            return False, 'incomplete-sso'
         # if there's no IPs configured, we allow assume its the same as *
         if not allowed_ips:
-            return True
+            return True, None
         ip = ipaddress.ip_address(six.text_type(self.request.META['REMOTE_ADDR']))
         if not any(ip in addr for addr in allowed_ips):
-            return False
-        return True
+            return False, 'invalid-ip'
+        return True, None
 
     def get_session_data(self, current_datetime=None):
         """
@@ -221,10 +224,16 @@ class Superuser(object):
             )
 
             if not self.is_active:
-                logger.warn('superuser.invalid-ip', extra={
-                    'ip_address': request.META['REMOTE_ADDR'],
-                    'user_id': request.user.id,
-                })
+                if self._inactive_reason:
+                    logger.warn('superuser.{}'.format(self._inactive_reason), extra={
+                        'ip_address': request.META['REMOTE_ADDR'],
+                        'user_id': request.user.id,
+                    })
+                else:
+                    logger.warn('superuser.inactive-unknown-reason', extra={
+                        'ip_address': request.META['REMOTE_ADDR'],
+                        'user_id': request.user.id,
+                    })
 
     def _set_logged_in(self, expires, token, user, current_datetime=None):
         # we bind uid here, as if you change users in the same request
@@ -240,7 +249,7 @@ class Superuser(object):
         # do we have a valid superuser session?
         self.is_valid = True
         # is the session active? (it could be valid, but inactive)
-        self._is_active = self.is_privileged_request()
+        self._is_active, self._inactive_reason = self.is_privileged_request()
         self.request.session[SESSION_KEY] = {
             'exp': self.expires.strftime('%s'),
             'idl': (current_datetime + IDLE_MAX_AGE).strftime('%s'),
@@ -254,6 +263,7 @@ class Superuser(object):
         self.expires = None
         self.token = None
         self._is_active = False
+        self._inactive_reason = None
         self.is_valid = False
         self.request.session.pop(SESSION_KEY, None)
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 7922a131ce..c1b472992c 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -48,7 +48,7 @@ from six.moves.urllib.parse import urlencode
 from sentry import auth
 from sentry.auth.providers.dummy import DummyProvider
 from sentry.auth.superuser import (
-    Superuser, COOKIE_SALT as SU_COOKIE_SALT, COOKIE_NAME as SU_COOKIE_NAME
+    Superuser, COOKIE_SALT as SU_COOKIE_SALT, COOKIE_NAME as SU_COOKIE_NAME, ORG_ID as SU_ORG_ID
 )
 from sentry.constants import MODULE_ROOT
 from sentry.models import (
@@ -148,16 +148,19 @@ class BaseTestCase(Fixtures, Exam):
         request.user = user
 
         if organization_ids is None:
-            organization_ids = []
-        if superuser and superuser_sso is None:
-            if superuser.ORG_ID:
-                organization_ids.append(superuser.ORG_ID)
+            organization_ids = set()
+        else:
+            organization_ids = set(organization_ids)
+        if superuser and superuser_sso is not False:
+            if SU_ORG_ID:
+                organization_ids.add(SU_ORG_ID)
         if organization_id:
-            organization_ids.append(organization_id)
+            organization_ids.add(organization_id)
 
+        # TODO(dcramer): ideally this would get abstracted
         if organization_ids:
             request.session[SSO_SESSION_KEY] = ','.join(
-                six.text_type(o) for o in set(organization_ids))
+                six.text_type(o) for o in organization_ids)
 
         # logging in implicitly binds superuser, but for test cases we
         # want that action to be explicit to avoid accidentally testing
