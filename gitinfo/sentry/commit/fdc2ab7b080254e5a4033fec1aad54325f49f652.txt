commit fdc2ab7b080254e5a4033fec1aad54325f49f652
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Aug 10 16:42:52 2016 -0700

    Minor report updates. (#3906)
    
    - Update report title to include duration and dates.
    - Use events seen statistics for percentage changes.
    - Update legend.

diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 9d64acb6fc..34e825ab12 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -8,7 +8,7 @@ from collections import namedtuple
 from datetime import timedelta
 from six.moves import reduce
 
-from django.utils import timezone
+from django.utils import dateformat, timezone
 
 from sentry import features
 from sentry.app import tsdb
@@ -22,6 +22,12 @@ from sentry.utils.email import MessageBuilder
 from sentry.utils.math import mean
 
 
+date_format = functools.partial(
+    dateformat.format,
+    format_string="F jS, Y",
+)
+
+
 logger = logging.getLogger(__name__)
 
 
@@ -149,22 +155,6 @@ def prepare_project_series((start, stop), project, rollup=60 * 60 * 24):
     )
 
 
-def time_series_collector(function, segments, start, stop):
-    """
-    Return a function can be used in a ``reduce`` operation to collect
-    ``datetime`` objects into N equally sized buckets. The object collected
-    into must support item assignment, such as a mutable mapping or sequence.
-    """
-    period = (stop - start) / segments
-
-    def collect(results, value):
-        key = int((value - start).total_seconds() / period.total_seconds())
-        results[key] = function(results[key], value)
-        return results
-
-    return collect
-
-
 def prepare_project_aggregates((_, stop), project):
     # TODO: This needs to return ``None`` for periods that don't have any data
     # (because the project is not old enough) and possibly extrapolate for
@@ -172,20 +162,22 @@ def prepare_project_aggregates((_, stop), project):
     segments = 4
     period = timedelta(days=7)
     start = stop - (period * segments)
-    return reduce(
-        time_series_collector(
-            lambda x, y: x + 1,
-            segments,
+
+    def get_aggregate_value(start, stop):
+        return tsdb.get_sums(
+            tsdb.models.project,
+            (project.id,),
             start,
             stop,
-        ),
-        project.group_set.filter(
-            status=GroupStatus.RESOLVED,
-            resolved_at__gte=start,
-            resolved_at__lt=stop,
-        ).values_list('resolved_at', flat=True),
-        [0] * segments,
-    )
+            rollup=60 * 60 * 24,
+        )[project.id]
+
+    return [
+        get_aggregate_value(
+            start + (period * i),
+            start + (period * (i + 1) - timedelta(seconds=1)),
+        ) for i in range(segments)
+    ]
 
 
 def trim_issue_list(value):
@@ -351,18 +343,39 @@ def fetch_personal_statistics((start, stop), organization, user):
     }
 
 
-def build_message(interval, organization, user, report):
-    start, stop = interval
+Duration = namedtuple(
+    'Duration', (
+        'adjective',  # e.g. "daily" or "weekly",
+        'noun',       # relative to today, e.g. "yesterday" or "this week"
+    ))
 
+durations = {
+    (60 * 60 * 24 * 7): Duration(
+        'weekly',
+        'this week',
+    ),
+}
+
+
+def build_message(timestamp, duration, organization, user, report):
+    start, stop = interval = _to_interval(timestamp, duration)
+
+    duration_spec = durations[duration]
     message = MessageBuilder(
-        subject=u'Sentry Report for {}'.format(organization.name),
+        subject=u'{} Report for {}: {} - {}'.format(
+            duration_spec.adjective.title(),
+            organization.name,
+            date_format(start),
+            date_format(stop),
+        ),
         template='sentry/emails/reports/body.txt',
         html_template='sentry/emails/reports/body.html',
         type='report.organization',
         context={
+            'duration': duration_spec,
             'interval': {
-                'start': start,
-                'stop': stop,
+                'start': date_format(start),
+                'stop': date_format(stop),
             },
             'organization': organization,
             'personal': fetch_personal_statistics(
@@ -413,7 +426,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
         ),
     )
 
-    message = build_message(interval, organization, user, report)
+    message = build_message(timestamp, duration, organization, user, report)
 
     if features.has('organizations:reports:deliver', organization):
         message.send()
diff --git a/src/sentry/templates/sentry/emails/email-styles.html b/src/sentry/templates/sentry/emails/email-styles.html
index ffee124b09..498fa96fe9 100644
--- a/src/sentry/templates/sentry/emails/email-styles.html
+++ b/src/sentry/templates/sentry/emails/email-styles.html
@@ -647,17 +647,15 @@
   }
 
   .weekly-report .legend span {
+    width: 16px;
+    height: 16px;
+    vertical-align: bottom;
     display: inline-block;
-    padding: 3px 7px;
-    margin: 0 10px 0 5px;
+    margin: 0 5px 0 15px;
     border-radius: 3px;
     color: #fff;
   }
 
-  .weekly-report .legend span.resolved {
-    margin-right: 0;
-  }
-
   .weekly-report .legend .all,
   .weekly-report .issue-graph-bar .all {
     background-color: #D6DBE4;
diff --git a/src/sentry/templates/sentry/emails/reports/body.html b/src/sentry/templates/sentry/emails/reports/body.html
index 32295248ab..bd451b2929 100644
--- a/src/sentry/templates/sentry/emails/reports/body.html
+++ b/src/sentry/templates/sentry/emails/reports/body.html
@@ -14,9 +14,8 @@
         </h1>
       </td>
       <td class="align-right">
-        <strong>Weekly Update for {{ organization.name }}</strong><br />
-        {# Note: This assumes we're always sending email on day boundaries. #}
-        {{ interval.start|date:"F j, Y" }} &ndash; {{ interval.stop|date:"F j, Y" }}
+        <strong>{{ duration.adjective|title }} Update for {{ organization.name }}</strong><br />
+        {{ interval.start }} &ndash; {{ interval.stop }}
       </td>
     </tr>
   </table>
@@ -28,11 +27,11 @@
   <table style="margin-bottom: 10px">
     <tr>
       <td>
-        <h4>Issues resolved in the past week</h4>
+          <h4>Events Seen {{ duration.noun|title }}</h4>
       </td>
       <td class="legend">
-          All <span class="all">{{ report.series.all|small_count }}</span>
-          Resolved <span class="resolved">{{ report.series.resolved|small_count }}</span>
+          <span class="all"></span> All: {{ report.series.all|small_count }}
+          <span class="resolved"></span> Resolved: {{ report.series.resolved|small_count }}
       </td>
     </tr>
   </table>
@@ -75,7 +74,7 @@
             {% endif %}
             {{ change|multiply:"100"|absolute_value|floatformat:"-1" }}%
             </div>
-            <small>{% if change >= 0 %}more{% else %}less{% endif %} than {{ label }}</small>
+            <small>{% if change >= 0 %}more{% else %}fewer{% endif %} events than {{ label }}</small>
           {% else %}
             <small class="empty">There is not enough data to compare to {{ label }}.</small>
           {% endif %}
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 38198d1af8..9a06cebbdd 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -376,7 +376,7 @@ def report(request):
 
     random = get_random(request)
 
-    rollup = 60 * 60 * 24 * 7
+    duration = 60 * 60 * 24 * 7
     timestamp = random.randint(
         to_timestamp(datetime(2016, 6, 1, 0, 0, 0, tzinfo=timezone.utc)),
         to_timestamp(datetime(2016, 7, 1, 0, 0, 0, tzinfo=timezone.utc)),
@@ -403,7 +403,7 @@ def report(request):
         name='My Project',
     )
 
-    start, stop = reports._to_interval(timestamp, rollup)
+    start, stop = reports._to_interval(timestamp, duration)
 
     group_instances = {}
 
@@ -439,6 +439,7 @@ def report(request):
     def build_report():
         daily_maximum = random.randint(1000, 10000)
 
+        rollup = 60 * 60 * 24
         series = [(
             timestamp + (i * rollup),
             (random.randint(0, daily_maximum), random.randint(0, daily_maximum))
@@ -472,9 +473,10 @@ def report(request):
         html_template='sentry/emails/reports/body.html',
         text_template='sentry/emails/reports/body.txt',
         context={
+            'duration': reports.durations[duration],
             'interval': {
-                'start': start,
-                'stop': stop,
+                'start': reports.date_format(start),
+                'stop': reports.date_format(stop),
             },
             'report': reports.to_context(
                 report,
diff --git a/tests/sentry/tasks/test_reports.py b/tests/sentry/tasks/test_reports.py
index b87483a2cd..7cd3387867 100644
--- a/tests/sentry/tasks/test_reports.py
+++ b/tests/sentry/tasks/test_reports.py
@@ -3,12 +3,11 @@ from __future__ import absolute_import
 import pytest
 import mock
 from django.core import mail
-from six.moves import reduce
 
 from sentry.models import Project
 from sentry.tasks.reports import (
     change, clean_series, merge_mappings, merge_sequences, merge_series,
-    safe_add, prepare_reports, time_series_collector,
+    safe_add, prepare_reports,
 )
 from sentry.testutils.cases import TestCase
 from sentry.utils.dates import to_datetime
@@ -153,38 +152,6 @@ def test_clean_series_rejects_offset_timestamp():
         )
 
 
-def test_time_series_collector():
-    def datetime_range(*args):
-        return [to_datetime(i) for i in range(*args)]
-
-    assert reduce(
-        time_series_collector(
-            lambda x, y: x + 1,
-            4,
-            to_datetime(0),
-            to_datetime(60),
-        ),
-        datetime_range(60),
-        [0] * 4,
-    ) == [15] * 4
-
-    assert reduce(
-        time_series_collector(
-            lambda x, y: x + [y],
-            4,
-            to_datetime(0),
-            to_datetime(60),
-        ),
-        datetime_range(60),
-        [[] for _ in range(4)]
-    ) == [
-        datetime_range(0, 15),
-        datetime_range(15, 30),
-        datetime_range(30, 45),
-        datetime_range(45, 60),
-    ]
-
-
 class ReportTestCase(TestCase):
     @mock.patch('sentry.features.has')
     def test_integration(self, has_feature):
