commit 468b29c25da09b1443e938af0c0882b89dfb4988
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 1 10:24:49 2017 -0700

    [workflow] expand ignore options (#5464)
    
    This adds additional options for temporary ignores. It focuses on occurrence count as well as number of users affected, giving both rates (count within a window) as well as delta from current.
    
    - Adds delta count for total frequency
    - Adds delta count for unique users
    - Adds rate of events
    - Adds unique users impacted in window

diff --git a/CHANGES b/CHANGES
index ab9cd30094..cc11f65e90 100644
--- a/CHANGES
+++ b/CHANGES
@@ -8,13 +8,14 @@ Version 8.17 (Unreleased)
 - Changed the grouping and default `in_app` values for cocoa events.
 - Removed global dsym support.
 - Removed support for legacy apple report format.
-
 - The threads interface now contributes to grouping if it contains a single thread.
 - Added per-key (DSN) rate limits (``project:rate-limits`` feature).
 - Added tsdb statistics for events per-key.
 - Added ``sentry.deletions`` abstraction to improve bulk deletions.
 - Added basic workspace for Visual Studio Code.
 - Added hovercards for Issue IDs in activity entries.
+- Added event count options to ignore.
+- Added user frequency options to ignore.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/package.json b/package.json
index 6f766a86e4..d06e798798 100644
--- a/package.json
+++ b/package.json
@@ -21,6 +21,7 @@
     "compression-webpack-plugin": "^0.3.0",
     "crypto-js": "3.1.5",
     "css-loader": "^0.28.2",
+    "enzyme-to-json": "^1.5.1",
     "extract-text-webpack-plugin": "2.0.0-beta.5",
     "file-loader": "0.8.4",
     "gettext-parser": "1.1.1",
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 48b1e8e078..026c735475 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -5,14 +5,12 @@ import logging
 from uuid import uuid4
 
 from django.utils import timezone
-from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry import tsdb
 from sentry.api import client
 from sentry.api.base import DocSection
 from sentry.api.bases import GroupEndpoint
-from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import (
@@ -66,20 +64,6 @@ STATUS_CHOICES = {
 }
 
 
-class GroupSerializer(serializers.Serializer):
-    status = serializers.ChoiceField(choices=zip(
-        STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
-    ))
-    isBookmarked = serializers.BooleanField()
-    isSubscribed = serializers.BooleanField()
-    hasSeen = serializers.BooleanField()
-    assignedTo = UserField()
-    ignoreDuration = serializers.IntegerField()
-
-    # TODO(dcramer): remove in 9.0
-    snoozeDuration = serializers.IntegerField()
-
-
 class GroupDetailsEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
@@ -269,10 +253,6 @@ class GroupDetailsEndpoint(GroupEndpoint):
         """
         # TODO(dcramer): we need to implement assignedTo in the bulk mutation
         # endpoint
-        serializer = GroupSerializer(data=request.DATA, partial=True)
-        if not serializer.is_valid():
-            return Response(serializer.errors, status=400)
-
         response = client.put(
             path='/projects/{}/{}/issues/'.format(
                 group.project.organization.slug,
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index a169ae0c75..0e70fd93ee 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -101,6 +101,12 @@ class GroupValidator(serializers.Serializer):
     isSubscribed = serializers.BooleanField()
     merge = serializers.BooleanField()
     ignoreDuration = serializers.IntegerField()
+    ignoreCount = serializers.IntegerField()
+    # in hours, max of one week
+    ignoreWindow = serializers.IntegerField(max_value=7 * 24)
+    ignoreUserCount = serializers.IntegerField()
+    # in hours, max of one week
+    ignoreUserWindow = serializers.IntegerField(max_value=7 * 24)
     assignedTo = UserField()
 
     # TODO(dcramer): remove in 9.0
@@ -461,16 +467,17 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         elif result.get('status') == 'resolved':
             now = timezone.now()
 
-            happened = queryset.exclude(
-                status=GroupStatus.RESOLVED,
-            ).update(
-                status=GroupStatus.RESOLVED,
-                resolved_at=now,
-            )
+            with transaction.atomic():
+                happened = queryset.exclude(
+                    status=GroupStatus.RESOLVED,
+                ).update(
+                    status=GroupStatus.RESOLVED,
+                    resolved_at=now,
+                )
 
-            GroupResolution.objects.filter(
-                group__in=group_ids,
-            ).delete()
+                GroupResolution.objects.filter(
+                    group__in=group_ids,
+                ).delete()
 
             if group_list and happened:
                 for group in group_list:
@@ -495,43 +502,65 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         elif result.get('status'):
             new_status = STATUS_CHOICES[result['status']]
 
-            happened = queryset.exclude(
-                status=new_status,
-            ).update(
-                status=new_status,
-            )
-
-            GroupResolution.objects.filter(
-                group__in=group_ids,
-            ).delete()
-
-            if new_status == GroupStatus.IGNORED:
-                ignore_duration = (
-                    result.pop('ignoreDuration', None)
-                    or result.pop('snoozeDuration', None)
+            with transaction.atomic():
+                happened = queryset.exclude(
+                    status=new_status,
+                ).update(
+                    status=new_status,
                 )
-                if ignore_duration:
-                    ignore_until = timezone.now() + timedelta(
-                        minutes=ignore_duration,
-                    )
-                    for group in group_list:
-                        GroupSnooze.objects.create_or_update(
-                            group=group,
-                            values={
-                                'until': ignore_until,
+
+                GroupResolution.objects.filter(
+                    group__in=group_ids,
+                ).delete()
+
+                if new_status == GroupStatus.IGNORED:
+                    ignore_duration = (
+                        result.pop('ignoreDuration', None)
+                        or result.pop('snoozeDuration', None)
+                    ) or None
+                    ignore_count = result.pop('ignoreCount', None) or None
+                    ignore_window = result.pop('ignoreWindow', None) or None
+                    ignore_user_count = result.pop('ignoreUserCount', None) or None
+                    ignore_user_window = result.pop('ignoreUserWindow', None) or None
+                    if ignore_duration or ignore_count or ignore_user_count:
+                        if ignore_duration:
+                            ignore_until = timezone.now() + timedelta(
+                                minutes=ignore_duration,
+                            )
+                        else:
+                            ignore_until = None
+                        for group in group_list:
+                            state = {}
+                            if ignore_count and not ignore_window:
+                                state['times_seen'] = group.times_seen
+                            if ignore_user_count and not ignore_user_window:
+                                state['users_seen'] = group.count_users_seen()
+                            GroupSnooze.objects.create_or_update(
+                                group=group,
+                                values={
+                                    'until': ignore_until,
+                                    'count': ignore_count,
+                                    'window': ignore_window,
+                                    'user_count': ignore_user_count,
+                                    'user_window': ignore_user_window,
+                                    'state': state,
+                                }
+                            )
+                            result['statusDetails'] = {
+                                'ignoreCount': ignore_count,
+                                'ignoreUntil': ignore_until,
+                                'ignoreUserCount': ignore_user_count,
+                                'ignoreUserWindow': ignore_user_window,
+                                'ignoreWindow': ignore_window,
                             }
-                        )
-                        result['statusDetails'] = {
-                            'ignoreUntil': ignore_until,
-                        }
+                    else:
+                        GroupSnooze.objects.filter(
+                            group__in=group_ids,
+                        ).delete()
+                        ignore_until = None
+                        result['statusDetails'] = {}
                 else:
-                    GroupSnooze.objects.filter(
-                        group__in=group_ids,
-                    ).delete()
-                    ignore_until = None
                     result['statusDetails'] = {}
-            else:
-                result['statusDetails'] = {}
 
             if group_list and happened:
                 if new_status == GroupStatus.UNRESOLVED:
@@ -540,8 +569,12 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 elif new_status == GroupStatus.IGNORED:
                     activity_type = Activity.SET_IGNORED
                     activity_data = {
-                        'ignoreUntil': ignore_until,
+                        'ignoreCount': ignore_count,
                         'ignoreDuration': ignore_duration,
+                        'ignoreUntil': ignore_until,
+                        'ignoreUserCount': ignore_user_count,
+                        'ignoreUserWindow': ignore_user_window,
+                        'ignoreWindow': ignore_window,
                     }
 
                 for group in group_list:
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 33b0d01085..99eee32d0f 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -128,11 +128,12 @@ class GroupSerializer(Serializer):
             ).values_list('group', 'values_seen')
         )
 
-        ignore_durations = dict(
-            GroupSnooze.objects.filter(
+        ignore_items = {
+            g.group_id: g
+            for g in GroupSnooze.objects.filter(
                 group__in=item_list,
-            ).values_list('group', 'until')
-        )
+            )
+        }
 
         pending_resolutions = dict(
             GroupResolution.objects.filter(
@@ -160,7 +161,7 @@ class GroupSerializer(Serializer):
                 'has_seen': seen_groups.get(item.id, active_date) > active_date,
                 'annotations': annotations,
                 'user_count': user_counts.get(item.id, 0),
-                'ignore_duration': ignore_durations.get(item.id),
+                'ignore_until': ignore_items.get(item.id),
                 'pending_resolution': pending_resolutions.get(item.id),
             }
         return result
@@ -168,12 +169,28 @@ class GroupSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         status = obj.status
         status_details = {}
-        if attrs['ignore_duration']:
-            if attrs['ignore_duration'] < timezone.now() and status == GroupStatus.IGNORED:
-                status = GroupStatus.UNRESOLVED
+        if attrs['ignore_until']:
+            snooze = attrs['ignore_until']
+            if snooze.is_valid(group=obj):
+                # counts return the delta remaining when window is not set
+                status_details.update({
+                    'ignoreCount': (
+                        snooze.count - (obj.times_seen - snooze.state['times_seen'])
+                        if snooze.count and not snooze.window
+                        else snooze.count
+                    ),
+                    'ignoreUntil': snooze.until,
+                    'ignoreUserCount': (
+                        snooze.user_count - (attrs['user_count'] - snooze.state['users_seen'])
+                        if snooze.user_count and not snooze.user_window
+                        else snooze.user_count
+                    ),
+                    'ignoreUserWindow': snooze.user_window,
+                    'ignoreWindow': snooze.window,
+                })
             else:
-                status_details['ignoreUntil'] = attrs['ignore_duration']
-        elif status == GroupStatus.UNRESOLVED and obj.is_over_resolve_age():
+                status = GroupStatus.UNRESOLVED
+        if status == GroupStatus.UNRESOLVED and obj.is_over_resolve_age():
             status = GroupStatus.RESOLVED
             status_details['autoResolved'] = True
         if status == GroupStatus.RESOLVED:
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 2ae90177c4..fad11dbfb0 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -254,22 +254,20 @@ class Group(Model):
         # XXX(dcramer): GroupSerializer reimplements this logic
         from sentry.models import GroupSnooze
 
-        if self.status == GroupStatus.IGNORED:
+        status = self.status
+
+        if status == GroupStatus.IGNORED:
             try:
                 snooze = GroupSnooze.objects.get(group=self)
             except GroupSnooze.DoesNotExist:
                 pass
             else:
-                # XXX(dcramer): if the snooze row exists then we need
-                # to confirm its still valid
-                if snooze.until > timezone.now():
-                    return GroupStatus.IGNORED
-                else:
-                    return GroupStatus.UNRESOLVED
+                if not snooze.is_valid(group=self):
+                    status = GroupStatus.UNRESOLVED
 
-        if self.status == GroupStatus.UNRESOLVED and self.is_over_resolve_age():
+        if status == GroupStatus.UNRESOLVED and self.is_over_resolve_age():
             return GroupStatus.RESOLVED
-        return self.status
+        return status
 
     def get_share_id(self):
         return b16encode(
@@ -470,3 +468,11 @@ class Group(Model):
             six.text_type(self.get_level_display()).upper().encode('utf-8'),
             self.title.encode('utf-8')
         )
+
+    def count_users_seen(self):
+        from sentry.models import GroupTagKey
+
+        return GroupTagKey.objects.filter(
+            group=self,
+            key='sentry:user',
+        ).aggregate(t=models.Sum('values_seen'))['t'] or 0
diff --git a/src/sentry/models/groupsnooze.py b/src/sentry/models/groupsnooze.py
index 863d162843..4dc43602cc 100644
--- a/src/sentry/models/groupsnooze.py
+++ b/src/sentry/models/groupsnooze.py
@@ -1,20 +1,110 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
+
 from django.db import models
-from sentry.db.models import Model, FlexibleForeignKey, sane_repr
+from django.utils import timezone
+from jsonfield import JSONField
+
+from sentry.db.models import (
+    BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey, Model,
+    sane_repr
+)
 
 
 class GroupSnooze(Model):
     """
-    A snooze marks an issue as ignored for a duration (specified by ``until``).
+    A snooze marks an issue as ignored until a condition is hit.
+
+    - If ``until`` is set, the snooze is lifted at the given datetime.
+    - If ``count`` is set, the snooze is lifted when total occurances match.
+    - If ``window`` is set (in addition to count), the snooze is lifted when
+      the rate of events matches.
+    - If ``user_count`` is set, the snooze is lfited when unique users match.
+    - If ``user_window`` is set (in addition to count), the snooze is lifted
+      when the rate unique users matches.
     """
     __core__ = False
 
     group = FlexibleForeignKey('sentry.Group', unique=True)
-    until = models.DateTimeField()
+    until = models.DateTimeField(null=True)
+    count = BoundedPositiveIntegerField(null=True)
+    window = BoundedPositiveIntegerField(null=True)
+    user_count = BoundedPositiveIntegerField(null=True)
+    user_window = BoundedPositiveIntegerField(null=True)
+    state = JSONField(null=True)
+
+    objects = BaseManager(cache_fields=(
+        'group',
+    ))
 
     class Meta:
         db_table = 'sentry_groupsnooze'
         app_label = 'sentry'
 
     __repr__ = sane_repr('group_id')
+
+    def is_valid(self, group=None, test_rates=False):
+        if group is None:
+            group = self.group
+        elif group.id != self.group_id:
+            raise ValueError
+
+        if self.until:
+            if self.until > timezone.now():
+                return True
+
+        if self.count:
+            if self.window:
+                if test_rates:
+                    if self.test_frequency_rates():
+                        return True
+                else:
+                    return True
+            elif self.count > group.times_seen - self.state['times_seen']:
+                return True
+
+        if self.user_count:
+            if not test_rates:
+                return True
+            if self.user_window:
+                if self.test_user_rates():
+                    return True
+            elif self.user_count > group.count_users_seen() - self.state['users_seen']:
+                return True
+        return False
+
+    def test_frequency_rates(self):
+        from sentry.tsdb import backend as tsdb
+
+        end = timezone.now()
+        start = end - timedelta(minutes=self.window)
+
+        rate = tsdb.get_sums(
+            model=tsdb.models.group,
+            keys=[self.group_id],
+            start=start,
+            end=end,
+        )[self.group_id]
+        if rate >= self.count:
+            return False
+
+        return True
+
+    def test_user_rates(self):
+        from sentry.tsdb import backend as tsdb
+
+        end = timezone.now()
+        start = end - timedelta(minutes=self.user_window)
+
+        rate = tsdb.get_distinct_counts_totals(
+            model=tsdb.models.users_affected_by_group,
+            keys=[self.group_id],
+            start=start,
+            end=end,
+        )[self.group_id]
+
+        if rate >= self.user_count:
+            return False
+
+        return True
diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
index ea68cae1ff..213d6978fa 100644
--- a/src/sentry/runner/commands/cleanup.py
+++ b/src/sentry/runner/commands/cleanup.py
@@ -57,47 +57,44 @@ def cleanup(days, project, concurrency, silent, model, router):
     from django.db import router as db_router
     from sentry.app import nodestore
     from sentry.db.deletion import BulkDeleteQuery
-    from sentry.models import (
-        ApiGrant, ApiToken, Event, EventMapping, Group, GroupRuleStatus,
-        GroupTagValue, LostPasswordHash, TagValue, GroupEmailThread, FileBlob,
-        EventTag,
-    )
+    from sentry import models
 
-    models = {m.lower() for m in model}
+    # list of models which this query is restricted to
+    model_list = {m.lower() for m in model}
 
     def is_filtered(model):
         if router is not None and db_router.db_for_write(model) != router:
             return True
-        if not models:
+        if not model_list:
             return False
-        return model.__name__.lower() not in models
+        return model.__name__.lower() not in model_list
 
     # these models should be safe to delete without cascades, in order
     BULK_DELETES = (
-        (GroupRuleStatus, 'date_added'),
-        (GroupTagValue, 'last_seen'),
-        (TagValue, 'last_seen'),
-        (GroupEmailThread, 'date'),
-        (EventTag, 'date_added'),
+        (models.GroupEmailThread, 'date'),
+        (models.GroupRuleStatus, 'date_added'),
+        (models.GroupTagValue, 'last_seen'),
+        (models.TagValue, 'last_seen'),
+        (models.EventTag, 'date_added'),
     )
 
     GENERIC_DELETES = (
-        (Event, 'datetime'),
-        (Group, 'last_seen'),
+        (models.Event, 'datetime'),
+        (models.Group, 'last_seen'),
     )
 
     if not silent:
         click.echo('Removing expired values for LostPasswordHash')
 
-    if is_filtered(LostPasswordHash):
+    if is_filtered(models.LostPasswordHash):
         if not silent:
             click.echo('>> Skipping LostPasswordHash')
     else:
-        LostPasswordHash.objects.filter(
+        models.LostPasswordHash.objects.filter(
             date_added__lte=timezone.now() - timedelta(hours=48)
         ).delete()
 
-    for model in [ApiGrant, ApiToken]:
+    for model in [models.ApiGrant, models.ApiToken]:
         if not silent:
             click.echo('Removing expired values for {}'.format(model.__name__))
 
@@ -143,17 +140,16 @@ def cleanup(days, project, concurrency, silent, model, router):
                 days=days,
                 project_id=project_id,
             ).execute()
-
     # EventMapping is fairly expensive and is special cased as it's likely you
     # won't need a reference to an event for nearly as long
     if not silent:
         click.echo("Removing expired values for EventMapping")
-    if is_filtered(EventMapping):
+    if is_filtered(models.EventMapping):
         if not silent:
             click.echo('>> Skipping EventMapping')
     else:
         BulkDeleteQuery(
-            model=EventMapping,
+            model=models.EventMapping,
             dtfield='date_added',
             days=min(days, 7),
             project_id=project_id,
@@ -164,7 +160,7 @@ def cleanup(days, project, concurrency, silent, model, router):
     # recent (as there could be a race between blob creation and reference)
     if not silent:
         click.echo("Cleaning up unused FileBlob references")
-    if is_filtered(FileBlob):
+    if is_filtered(models.FileBlob):
         if not silent:
             click.echo('>> Skipping FileBlob')
     else:
diff --git a/src/sentry/south_migrations/0326_auto__add_field_groupsnooze_count__add_field_groupsnooze_window__add_f.py b/src/sentry/south_migrations/0326_auto__add_field_groupsnooze_count__add_field_groupsnooze_window__add_f.py
new file mode 100644
index 0000000000..38991e3cb4
--- /dev/null
+++ b/src/sentry/south_migrations/0326_auto__add_field_groupsnooze_count__add_field_groupsnooze_window__add_f.py
@@ -0,0 +1,894 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding field 'GroupSnooze.count'
+        db.add_column('sentry_groupsnooze', 'count',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True),
+                      keep_default=False)
+
+        # Adding field 'GroupSnooze.window'
+        db.add_column('sentry_groupsnooze', 'window',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True),
+                      keep_default=False)
+
+        # Adding field 'GroupSnooze.user_count'
+        db.add_column('sentry_groupsnooze', 'user_count',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True),
+                      keep_default=False)
+
+        # Adding field 'GroupSnooze.user_window'
+        db.add_column('sentry_groupsnooze', 'user_window',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True),
+                      keep_default=False)
+
+        # Adding field 'GroupSnooze.state'
+        db.add_column('sentry_groupsnooze', 'state',
+                      self.gf('jsonfield.fields.JSONField')(null=True),
+                      keep_default=False)
+
+
+        # Changing field 'GroupSnooze.until'
+        db.alter_column('sentry_groupsnooze', 'until', self.gf('django.db.models.fields.DateTimeField')(null=True))
+
+    def backwards(self, orm):
+        raise RuntimeError("Cannot reverse this migration. 'GroupSnooze.until' and its values cannot be restored.")
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apiapplication': {
+            'Meta': {'object_name': 'ApiApplication'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'client_id': ('django.db.models.fields.CharField', [], {'default': "'1fe2246606cd41688e14b95ae1bdc14c6b7652dea035446fa2dc8bcacf21afd6'", 'unique': 'True', 'max_length': '64'}),
+            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'7f918820281a421d991389c5fad78a41551739601ae745e8a24e9cb56ee8ffaa'"}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'homepage_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'default': "'Trusting Weasel'", 'max_length': '64', 'blank': 'True'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'privacy_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'redirect_uris': ('django.db.models.fields.TextField', [], {}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'terms_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.apiauthorization': {
+            'Meta': {'unique_together': "(('user', 'application'),)", 'object_name': 'ApiAuthorization'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apigrant': {
+            'Meta': {'object_name': 'ApiGrant'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']"}),
+            'code': ('django.db.models.fields.CharField', [], {'default': "'d959d133f88c4292a581081e6190b949'", 'max_length': '64', 'db_index': 'True'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 6, 1, 0, 0)', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'redirect_uri': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.apitoken': {
+            'Meta': {'object_name': 'ApiToken'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 7, 1, 0, 0)', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'6c4fadd19de34e39ac0859f3f896065cd8c3cd19c56c453287ab9f199c539138'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'token': ('django.db.models.fields.CharField', [], {'default': "'94b568466766407cad05e6e2a630f6561a04ecb269c047c381f78c857d84422a'", 'unique': 'True', 'max_length': '64'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authenticator': {
+            'Meta': {'unique_together': "(('user', 'type'),)", 'object_name': 'Authenticator', 'db_table': "'auth_authenticator'"},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'last_used_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 6, 8, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.broadcastseen': {
+            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
+            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
+            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.commit': {
+            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'Commit', 'index_together': "(('repository_id', 'date_added'),)"},
+            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.commitauthor': {
+            'Meta': {'unique_together': "(('organization_id', 'email'), ('organization_id', 'external_id'))", 'object_name': 'CommitAuthor'},
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '164', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.commitfilechange': {
+            'Meta': {'unique_together': "(('commit', 'filename'),)", 'object_name': 'CommitFileChange'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'filename': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '1'})
+        },
+        'sentry.counter': {
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
+            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.deploy': {
+            'Meta': {'object_name': 'Deploy'},
+            'date_finished': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'notified': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.distribution': {
+            'Meta': {'unique_together': "(('release', 'name'),)", 'object_name': 'Distribution'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.dsymapp': {
+            'Meta': {'unique_together': "(('project', 'platform', 'app_id'),)", 'object_name': 'DSymApp'},
+            'app_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'sync_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'})
+        },
+        'sentry.dsymbundle': {
+            'Meta': {'object_name': 'DSymBundle'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'sdk': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymSDK']"})
+        },
+        'sentry.dsymobject': {
+            'Meta': {'object_name': 'DSymObject'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_path': ('django.db.models.fields.TextField', [], {'db_index': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'}),
+            'vmaddr': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'vmsize': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'})
+        },
+        'sentry.dsymsdk': {
+            'Meta': {'object_name': 'DSymSDK', 'index_together': "[('version_major', 'version_minor', 'version_patchlevel', 'version_build')]"},
+            'dsym_type': ('django.db.models.fields.CharField', [], {'max_length': '20', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'sdk_name': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
+            'version_build': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'version_major': ('django.db.models.fields.IntegerField', [], {}),
+            'version_minor': ('django.db.models.fields.IntegerField', [], {}),
+            'version_patchlevel': ('django.db.models.fields.IntegerField', [], {})
+        },
+        'sentry.dsymsymbol': {
+            'Meta': {'unique_together': "[('object', 'address')]", 'object_name': 'DSymSymbol'},
+            'address': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'symbol': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.environment': {
+            'Meta': {'unique_together': "(('project_id', 'name'), ('organization_id', 'name'))", 'object_name': 'Environment'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'through': "orm['sentry.EnvironmentProject']", 'symmetrical': 'False'})
+        },
+        'sentry.environmentproject': {
+            'Meta': {'unique_together': "(('project', 'environment'),)", 'object_name': 'EnvironmentProject'},
+            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventprocessingissue': {
+            'Meta': {'unique_together': "(('raw_event', 'processing_issue'),)", 'object_name': 'EventProcessingIssue'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'processing_issue': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProcessingIssue']"}),
+            'raw_event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.RawEvent']"})
+        },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key_id', 'value_id'), ('group_id', 'key_id', 'value_id'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
+            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.fileblob': {
+            'Meta': {'object_name': 'FileBlob'},
+            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
+        },
+        'sentry.fileblobindex': {
+            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.globaldsymfile': {
+            'Meta': {'object_name': 'GlobalDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'uuid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'short_id'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'short_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupcommitresolution': {
+            'Meta': {'unique_together': "(('group_id', 'commit_id'),)", 'object_name': 'GroupCommitResolution'},
+            'commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupredirect': {
+            'Meta': {'object_name': 'GroupRedirect'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'unique': 'True'})
+        },
+        'sentry.grouprelease': {
+            'Meta': {'unique_together': "(('group_id', 'release_id', 'environment'),)", 'object_name': 'GroupRelease'},
+            'environment': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.groupresolution': {
+            'Meta': {'object_name': 'GroupResolution'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.groupsnooze': {
+            'Meta': {'object_name': 'GroupSnooze'},
+            'count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'state': ('jsonfield.fields.JSONField', [], {'null': 'True'}),
+            'until': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'user_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'user_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.groupsubscription': {
+            'Meta': {'unique_together': "(('group', 'user'),)", 'object_name': 'GroupSubscription'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
+            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('group_id', 'key', 'value'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'", 'index_together': "(('project_id', 'key', 'value', 'last_seen'),)"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationavatar': {
+            'Meta': {'object_name': 'OrganizationAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.Organization']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.organizationoption': {
+            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.processingissue': {
+            'Meta': {'unique_together': "(('project', 'checksum', 'type'),)", 'object_name': 'ProcessingIssue'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '30'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'null': 'True'}),
+            'forced_color': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.projectdsymfile': {
+            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'ProjectDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'rate_limit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'rate_limit_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.projectplatform': {
+            'Meta': {'unique_together': "(('project_id', 'platform'),)", 'object_name': 'ProjectPlatform'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.rawevent': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'RawEvent'},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('organization', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'through': "orm['sentry.ReleaseProject']", 'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasecommit': {
+            'Meta': {'unique_together': "(('release', 'commit'), ('release', 'order'))", 'object_name': 'ReleaseCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseenvironment': {
+            'Meta': {'unique_together': "(('project_id', 'release_id', 'environment_id'), ('organization_id', 'release_id', 'environment_id'))", 'object_name': 'ReleaseEnvironment', 'db_table': "'sentry_environmentrelease'"},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'dist': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Distribution']", 'null': 'True'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseheadcommit': {
+            'Meta': {'unique_together': "(('repository_id', 'release'),)", 'object_name': 'ReleaseHeadCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.releaseproject': {
+            'Meta': {'unique_together': "(('project', 'release'),)", 'object_name': 'ReleaseProject', 'db_table': "'sentry_release_project'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.repository': {
+            'Meta': {'unique_together': "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))", 'object_name': 'Repository'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.reprocessingreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'ReprocessingReport'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.savedsearchuserdefault': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'SavedSearchUserDefault', 'db_table': "'sentry_savedsearch_userdefault'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'savedsearch': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.SavedSearch']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.scheduleddeletion': {
+            'Meta': {'unique_together': "(('app_label', 'model_name', 'object_id'),)", 'object_name': 'ScheduledDeletion'},
+            'aborted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 7, 1, 0, 0)'}),
+            'guid': ('django.db.models.fields.CharField', [], {'default': "'7dcd5c1ace824812b6cc232360d975f7'", 'unique': 'True', 'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'in_progress': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'model_name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'object_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'session_nonce': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useravatar': {
+            'Meta': {'object_name': 'UserAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.useremail': {
+            'Meta': {'unique_together': "(('user', 'email'),)", 'object_name': 'UserEmail'},
+            'date_hash_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'UgLIAnDusbhZ8E66pCx3Af5EoUtzEmSA'", 'max_length': '32'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'), ('user', 'organization', 'key'))", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'event_user_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.versiondsymfile': {
+            'Meta': {'unique_together': "(('dsym_file', 'version', 'build'),)", 'object_name': 'VersionDSymFile'},
+            'build': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'dsym_app': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymApp']"}),
+            'dsym_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProjectDSymFile']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '32'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index 88fd660117..78bd28c891 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -119,6 +119,38 @@ const ActivityItem = React.createClass({
             duration: <Duration seconds={data.ignoreDuration * 60} />,
             issue: issueLink
           });
+        } else if (data.ignoreCount && data.ignoreWindow) {
+          return tct(
+            '[author] ignored [issue] until it happens [count] time(s) in [duration]',
+            {
+              author: author,
+              count: data.ignoreCount,
+              interval: <Duration seconds={data.ignoreWindow * 3600} />,
+              issue: issueLink
+            }
+          );
+        } else if (data.ignoreCount) {
+          return tct('[author] ignored [issue] until it happens [count] time(s)', {
+            author: author,
+            count: data.ignoreCount,
+            issue: issueLink
+          });
+        } else if (data.ignoreUserCount && data.ignoreUserWindow) {
+          return tct(
+            '[author] ignored [issue] until it affects [count] user(s) in [duration]',
+            {
+              author: author,
+              count: data.ignoreUserCount,
+              interval: <Duration seconds={data.ignoreUserWindow * 3600} />,
+              issue: issueLink
+            }
+          );
+        } else if (data.ignoreUserCount) {
+          return tct('[author] ignored [issue] until it affects [count] user(s)', {
+            author: author,
+            count: data.ignoreUserCount,
+            issue: issueLink
+          });
         }
         return tct('[author] ignored [issue]', {
           author: author,
diff --git a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
new file mode 100644
index 0000000000..b7fc04f9a0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
@@ -0,0 +1,97 @@
+import React from 'react';
+import Modal from 'react-bootstrap/lib/Modal';
+import {Select2Field} from './forms';
+import {t} from '../locale';
+
+export default React.createClass({
+  propTypes: {
+    onSelected: React.PropTypes.func,
+    onCanceled: React.PropTypes.func,
+    show: React.PropTypes.bool,
+    label: React.PropTypes.string.isRequired,
+    countLabel: React.PropTypes.string.isRequired,
+    countName: React.PropTypes.string.isRequired,
+    windowName: React.PropTypes.string.isRequired,
+    windowChoices: React.PropTypes.array.isRequired
+  },
+
+  getInitialState() {
+    return {
+      count: 100,
+      window: ''
+    };
+  },
+
+  onSubmit() {
+    this.props.onSelected({
+      [this.props.countName]: this.state.count,
+      [this.props.windowName]: this.state.window
+    });
+  },
+
+  onChange(name, value) {
+    this.setState({[name]: value});
+  },
+
+  render() {
+    let {count, window} = this.state;
+    return (
+      <Modal
+        show={this.props.show}
+        animation={false}
+        bsSize="md"
+        onHide={this.props.onCanceled}>
+        <div className="modal-header">
+          <h4>{this.props.label}</h4>
+        </div>
+        <div className="modal-body">
+          <form className="m-b-1">
+            <div className="control-group">
+              <h6 className="nav-header">
+                {this.props.countLabel}
+              </h6>
+              <input
+                className="form-control"
+                type="number"
+                value={count}
+                onChange={e => this.onChange('count', e.target.value)}
+                style={{padding: '3px 10px'}}
+                required={true}
+                placeholder={t('e.g. 100')}
+              />
+            </div>
+            <div className="control-group m-b-1">
+              <h6 className="nav-header">
+                {t('Time window')}
+              </h6>
+              <Select2Field
+                className="form-control"
+                value={window}
+                name="window"
+                onChange={v => this.onChange('window', v)}
+                style={{padding: '3px 10px'}}
+                choices={[['', ' '], ...this.props.windowChoices]}
+                placeholder={t('e.g. per hour')}
+                allowClear={true}
+                help={t(
+                  '(Optional) If supplied, this rule will apply as a rate of change.'
+                )}
+              />
+            </div>
+          </form>
+        </div>
+        <div className="modal-footer m-t-1">
+          <button
+            type="button"
+            className="btn btn-default"
+            onClick={this.props.onCanceled}>
+            {t('Cancel')}
+          </button>
+          <button type="button" className="btn btn-primary" onClick={this.onSubmit}>
+            {t('Ignore')}
+          </button>
+        </div>
+      </Modal>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/components/customSnoozeModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
similarity index 62%
rename from src/sentry/static/sentry/app/components/customSnoozeModal.jsx
rename to src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
index a5f03a5c48..0628723773 100644
--- a/src/sentry/static/sentry/app/components/customSnoozeModal.jsx
+++ b/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
@@ -3,7 +3,7 @@ import Modal from 'react-bootstrap/lib/Modal';
 import {t} from '../locale';
 import {sprintf} from 'sprintf-js';
 
-const CustomSnoozeModal = React.createClass({
+export default React.createClass({
   propTypes: {
     onSelected: React.PropTypes.func,
     onCanceled: React.PropTypes.func,
@@ -16,7 +16,7 @@ const CustomSnoozeModal = React.createClass({
     };
   },
 
-  selectedSnoozeMinutes() {
+  selectedIgnoreMinutes() {
     const dateStr = this.refs.snoozeDateInput.value; // YYYY-MM-DD
     const timeStr = this.refs.snoozeTimeInput.value; // HH:MM
     if (dateStr && timeStr) {
@@ -32,14 +32,14 @@ const CustomSnoozeModal = React.createClass({
   },
 
   snoozeClicked() {
-    const minutes = this.selectedSnoozeMinutes();
+    const minutes = this.selectedIgnoreMinutes();
 
     this.setState({
       dateWarning: minutes <= 0
     });
 
     if (minutes > 0) {
-      this.props.onSelected(minutes);
+      this.props.onSelected({ignoreDuration: minutes});
     }
   },
 
@@ -61,41 +61,39 @@ const CustomSnoozeModal = React.createClass({
     const defaultTimeVal = sprintf('%02d:00', defaultDate.getUTCHours());
 
     return (
-      <Modal show={this.props.show} animation={false} bsSize="sm">
+      <Modal
+        show={this.props.show}
+        animation={false}
+        bsSize="md"
+        onHide={this.props.onCanceled}>
         <div className="modal-header">
-          <h4>{t('Ignore until:')}</h4>
+          <h4>{t('Ignore this issue until it occurs after ..')}</h4>
         </div>
         <div className="modal-body">
           <form className="form-horizontal">
-            <div className="form-group">
-              <label htmlFor="snooze-until-date" className="col-sm-4 control-label">
-                {t('Date:')}
-              </label>
-              <div className="col-sm-8">
-                <input
-                  className="form-control"
-                  type="date"
-                  id="snooze-until-date"
-                  defaultValue={defaultDateVal}
-                  ref="snoozeDateInput"
-                  style={{padding: '0 10px'}}
-                />
-              </div>
+            <div className="control-group">
+              <h6 className="nav-header">{t('Date')}</h6>
+              <input
+                className="form-control"
+                type="date"
+                id="snooze-until-date"
+                defaultValue={defaultDateVal}
+                ref="snoozeDateInput"
+                required={true}
+                style={{padding: '0 10px'}}
+              />
             </div>
-            <div className="form-group m-b-1">
-              <label htmlFor="snooze-until-time" className="col-sm-4 control-label">
-                {t('Time (UTC):')}
-              </label>
-              <div className="col-sm-8">
-                <input
-                  className="form-control"
-                  type="time"
-                  id="snooze-until-time"
-                  defaultValue={defaultTimeVal}
-                  ref="snoozeTimeInput"
-                  style={{padding: '0 10px'}}
-                />
-              </div>
+            <div className="control-group m-b-1">
+              <h6 className="nav-header">{t('Time (UTC)')}</h6>
+              <input
+                className="form-control"
+                type="time"
+                id="snooze-until-time"
+                defaultValue={defaultTimeVal}
+                ref="snoozeTimeInput"
+                style={{padding: '0 10px'}}
+                required={true}
+              />
             </div>
           </form>
         </div>
@@ -118,5 +116,3 @@ const CustomSnoozeModal = React.createClass({
     );
   }
 });
-
-export default CustomSnoozeModal;
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
index fb51b9caeb..e58d70f0df 100644
--- a/src/sentry/static/sentry/app/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -53,6 +53,7 @@ class Select2Field extends InputField {
     jQuery(this.refs.input)
       .select2({
         allowClear: this.props.allowClear,
+        allowEmpty: true,
         width: 'element'
       })
       .on('change', this.onChange);
@@ -66,9 +67,14 @@ class Select2Field extends InputField {
 Select2Field.propTypes = Object.assign(
   {
     choices: React.PropTypes.array.isRequired,
-    allowClear: React.PropTypes.bool
+    allowClear: React.PropTypes.bool,
+    allowEmpty: React.PropTypes.bool
   },
   InputField.propTypes
 );
 
+Select2Field.defaultProps = Object.assign({}, InputField.defaultProps, {
+  allowEmpty: false
+});
+
 export default Select2Field;
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index 44a5769fd0..934e1aa3b8 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import DateTime from './dateTime';
+import Duration from './duration';
 import {t} from '../locale';
 
 const MutedBox = React.createClass({
@@ -11,23 +12,45 @@ const MutedBox = React.createClass({
 
   mixins: [PureRenderMixin],
 
+  renderReason() {
+    let details = this.props.statusDetails;
+    if (details.ignoreUntil) {
+      return t(
+        'This issue has been ignored until %s',
+        <strong><DateTime date={details.ignoreUntil} /></strong>
+      );
+    } else if (details.ignoreCount && details.ignoreWindow) {
+      return t(
+        'This issue has been ignored until it occurs %s time(s) in %s',
+        <strong>{details.ignoreCount.toLocaleString()}</strong>,
+        <strong><Duration seconds={details.ignoreWindow * 3600} /></strong>
+      );
+    } else if (details.ignoreCount) {
+      return t(
+        'This issue has been ignored until it occurs %s more time(s)',
+        <strong>{details.ignoreCount.toLocaleString()}</strong>
+      );
+    } else if (details.ignoreUserCount && details.ignoreUserWindow) {
+      return t(
+        'This issue has been ignored until it affects %s user(s) in %s',
+        <strong>{details.ignoreUserCount.toLocaleString()}</strong>,
+        <strong><Duration seconds={details.ignoreUserWindow * 3600} /></strong>
+      );
+    } else if (details.ignoreUserCount) {
+      return t(
+        'This issue has been ignored until it affects %s more user(s)',
+        <strong>{details.ignoreUserCount.toLocaleString()}</strong>
+      );
+    }
+    return t('This issue has been ignored');
+  },
+
   render() {
-    let statusDetails = this.props.statusDetails;
     return (
       <div className="box">
         <span className="icon icon-soundoff" />
         <p>
-          {statusDetails.ignoreUntil
-            ? <span>
-                {t(
-                  'This issue has been ignored until %s',
-                  <strong><DateTime date={statusDetails.ignoreUntil} /></strong>
-                )}
-                {' '}
-                —
-                {' '}
-              </span>
-            : <span>{t('This issue has been ignored')} — </span>}
+          <span>{this.renderReason()} — </span>
           {t(
             'You will not be notified of any changes and it will not show up by default in feeds.'
           )}
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 4c2327ce04..520ceeffef 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -16,7 +16,7 @@ import GroupStore from '../../stores/groupStore';
 import IndicatorStore from '../../stores/indicatorStore';
 import MemberListStore from '../../stores/memberListStore';
 
-import {t, tn} from '../../locale';
+import {t, tct, tn} from '../../locale';
 
 const GroupActivity = React.createClass({
   // TODO(dcramer): only re-render on group/activity change
@@ -67,6 +67,34 @@ const GroupActivity = React.createClass({
             author: author,
             duration: <Duration seconds={data.ignoreDuration * 60} />
           });
+        } else if (data.ignoreCount && data.ignoreWindow) {
+          return tct(
+            '[author] ignored this issue until it happens [count] time(s) in [duration]',
+            {
+              author: author,
+              count: data.ignoreCount,
+              interval: <Duration seconds={data.ignoreWindow * 3600} />
+            }
+          );
+        } else if (data.ignoreCount) {
+          return tct('[author] ignored this issue until it happens [count] time(s)', {
+            author: author,
+            count: data.ignoreCount
+          });
+        } else if (data.ignoreUserCount && data.ignoreUserWindow) {
+          return tct(
+            '[author] ignored this issue until it affects [count] user(s) in [duration]',
+            {
+              author: author,
+              count: data.ignoreUserCount,
+              interval: <Duration seconds={data.ignoreUserWindow * 3600} />
+            }
+          );
+        } else if (data.ignoreUserCount) {
+          return tct('[author] ignored this issue until it affects [count] user(s)', {
+            author: author,
+            count: data.ignoreUserCount
+          });
         }
         return t('%s ignored this issue', author);
       case 'set_public':
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 7403b043e7..b4090de628 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -1,8 +1,10 @@
 import React from 'react';
 import {browserHistory} from 'react-router';
 import ApiMixin from '../../mixins/apiMixin';
+import CustomIgnoreCountModal from '../../components/customIgnoreCountModal';
+import CustomIgnoreDurationModal from '../../components/customIgnoreDurationModal';
 import DropdownLink from '../../components/dropdownLink';
-import CustomSnoozeModal from '../../components/customSnoozeModal';
+import Duration from '../../components/duration';
 import GroupState from '../../mixins/groupState';
 import IndicatorStore from '../../stores/indicatorStore';
 import IssuePluginActions from '../../components/group/issuePluginActions';
@@ -11,15 +13,7 @@ import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import TooltipMixin from '../../mixins/tooltip';
 import {t} from '../../locale';
 
-const Snooze = {
-  // all values in minutes
-  '30MINUTES': 30,
-  '2HOURS': 60 * 2,
-  '24HOURS': 60 * 24,
-  ONEWEEK: 60 * 24 * 7
-};
-
-const GroupActions = React.createClass({
+export default React.createClass({
   mixins: [
     ApiMixin,
     GroupState,
@@ -29,6 +23,10 @@ const GroupActions = React.createClass({
     })
   ],
 
+  getInitialState() {
+    return {ignoreModal: null};
+  },
+
   onDelete() {
     let group = this.getGroup();
     let project = this.getProject();
@@ -76,28 +74,38 @@ const GroupActions = React.createClass({
     this.onUpdate({isBookmarked: !this.getGroup().isBookmarked});
   },
 
-  onSnooze(duration) {
+  onIgnore(params) {
     this.onUpdate({
       status: 'ignored',
-      ignoreDuration: duration
+      ...params
     });
   },
 
-  customSnoozeClicked() {
+  customIgnoreModalClicked(modal) {
     this.setState({
-      isCustomSnoozeModalOpen: true
+      ignoreModal: modal
     });
   },
 
-  customSnoozeSelected(duration) {
-    this.onSnooze(duration);
-    this.customSnoozeCanceled();
+  customIgnoreModalSelected(data) {
+    this.onIgnore(data);
+    this.customIgnoreModalCanceled();
   },
 
-  customSnoozeCanceled() {
-    this.setState({
-      isCustomSnoozeModalOpen: false
-    });
+  customIgnoreModalCanceled() {
+    this.setState({ignoreModal: null});
+  },
+
+  getIgnoreDurations() {
+    return [30, 120, 360, 60 * 24, 60 * 24 * 7];
+  },
+
+  getIgnoreCounts() {
+    return [100, 1000, 10000, 100000];
+  },
+
+  getIgnoreWindows() {
+    return [[1, 'per hour'], [24, 'per day'], [24 * 7, 'per week']];
   },
 
   render() {
@@ -133,10 +141,30 @@ const GroupActions = React.createClass({
 
     return (
       <div className="group-actions">
-        <CustomSnoozeModal
-          show={this.state && this.state.isCustomSnoozeModalOpen}
-          onSelected={this.customSnoozeSelected}
-          onCanceled={this.customSnoozeCanceled}
+        <CustomIgnoreDurationModal
+          show={this.state.ignoreModal === 'duration'}
+          onSelected={this.customIgnoreModalSelected}
+          onCanceled={this.customIgnoreModalCanceled.bind(this, 'duration')}
+        />
+        <CustomIgnoreCountModal
+          show={this.state.ignoreModal === 'count'}
+          onSelected={this.customIgnoreModalSelected}
+          onCanceled={this.customIgnoreModalCanceled.bind(this, 'count')}
+          label={t('Ignore this issue until it occurs again .. ')}
+          countLabel={t('Number of times')}
+          countName="ignoreCount"
+          windowName="ignoreWindow"
+          windowChoices={this.getIgnoreWindows()}
+        />
+        <CustomIgnoreCountModal
+          show={this.state.ignoreModal === 'users'}
+          onSelected={this.customIgnoreModalSelected}
+          onCanceled={this.customIgnoreModalCanceled.bind(this, 'users')}
+          label={t('Ignore this issue until it affects an additional .. ')}
+          countLabel={t('Numbers of users')}
+          countName="ignoreUserCount"
+          windowName="ignoreUserWindow"
+          windowChoices={this.getIgnoreWindows()}
         />
         <div className="btn-group">
           {group.status === 'resolved'
@@ -178,7 +206,7 @@ const GroupActions = React.createClass({
                           <strong>{t('Resolved in next release')}</strong>
                           <div className="help-text">
                             {t(
-                              'Snooze notifications until this issue reoccurs in a future release.'
+                              'Ignore notifications until this issue reoccurs in a future release.'
                             )}
                           </div>
                         </a>
@@ -191,7 +219,7 @@ const GroupActions = React.createClass({
                           <strong>{t('Resolved in next release.')}</strong>
                           <div className="help-text">
                             {t(
-                              'Snooze notifications until this issue reoccurs in a future release.'
+                              'Ignore notifications until this issue reoccurs in a future release.'
                             )}
                           </div>
                         </a>}
@@ -219,32 +247,114 @@ const GroupActions = React.createClass({
                     />
                   </span>
                 }>
-                <MenuItem noAnchor={true}>
-                  <a onClick={this.onSnooze.bind(this, Snooze['30MINUTES'])}>
-                    {t('for 30 minutes')}
-                  </a>
-                </MenuItem>
-                <MenuItem noAnchor={true}>
-                  <a onClick={this.onSnooze.bind(this, Snooze['2HOURS'])}>
-                    {t('for 2 hours')}
-                  </a>
-                </MenuItem>
-                <MenuItem noAnchor={true}>
-                  <a onClick={this.onSnooze.bind(this, Snooze['24HOURS'])}>
-                    {t('for 24 hours')}
-                  </a>
-                </MenuItem>
-                <MenuItem noAnchor={true}>
-                  <a onClick={this.onSnooze.bind(this, Snooze.ONEWEEK)}>
-                    {t('for 1 week')}
-                  </a>
-                </MenuItem>
-                <MenuItem noAnchor={true}>
-                  <a onClick={this.customSnoozeClicked}>{t('until custom date...')}</a>
-                </MenuItem>
+                <MenuItem header={true}>Ignore Until</MenuItem>
+                <li className="dropdown-submenu">
+                  <DropdownLink title="This occurs again after .." caret={false}>
+                    {this.getIgnoreDurations().map(duration => {
+                      return (
+                        <MenuItem noAnchor={true} key={duration}>
+                          <a
+                            onClick={this.onIgnore.bind(this, {
+                              ignoreDuration: duration
+                            })}>
+                            <Duration seconds={duration * 60} />
+                          </a>
+                        </MenuItem>
+                      );
+                    })}
+                    <MenuItem divider={true} />
+                    <MenuItem noAnchor={true}>
+                      <a onClick={this.customIgnoreModalClicked.bind(this, 'duration')}>
+                        {t('Custom')}
+                      </a>
+                    </MenuItem>
+                  </DropdownLink>
+                </li>
+                <li className="dropdown-submenu">
+                  <DropdownLink title="This occurs again .." caret={false}>
+                    {this.getIgnoreCounts().map(count => {
+                      return (
+                        <li className="dropdown-submenu" key={count}>
+                          <DropdownLink
+                            title={t('%s times', count.toLocaleString())}
+                            caret={false}>
+                            <MenuItem noAnchor={true}>
+                              <a
+                                onClick={this.onIgnore.bind(this, {
+                                  ignoreCount: count
+                                })}>
+                                {t('from now')}
+                              </a>
+                            </MenuItem>
+                            {this.getIgnoreWindows().map(([hours, label]) => {
+                              return (
+                                <MenuItem noAnchor={true} key={hours}>
+                                  <a
+                                    onClick={this.onIgnore.bind(this, {
+                                      ignoreCount: count,
+                                      ignoreWindow: hours
+                                    })}>
+                                    {label}
+                                  </a>
+                                </MenuItem>
+                              );
+                            })}
+                          </DropdownLink>
+                        </li>
+                      );
+                    })}
+                    <MenuItem divider={true} />
+                    <MenuItem noAnchor={true}>
+                      <a onClick={this.customIgnoreModalClicked.bind(this, 'count')}>
+                        {t('Custom')}
+                      </a>
+                    </MenuItem>
+                  </DropdownLink>
+                </li>
+                <li className="dropdown-submenu">
+                  <DropdownLink title="This affects an additional .." caret={false}>
+                    {this.getIgnoreCounts().map(count => {
+                      return (
+                        <li className="dropdown-submenu" key={count}>
+                          <DropdownLink
+                            title={t('%s users', count.toLocaleString())}
+                            caret={false}>
+                            <MenuItem noAnchor={true}>
+                              <a
+                                onClick={this.onIgnore.bind(this, {
+                                  ignoreUserCount: count
+                                })}>
+                                {t('from now')}
+                              </a>
+                            </MenuItem>
+                            {this.getIgnoreWindows().map(([hours, label]) => {
+                              return (
+                                <MenuItem noAnchor={true} key={hours}>
+                                  <a
+                                    onClick={this.onIgnore.bind(this, {
+                                      ignoreUserCount: count,
+                                      ignoreUserWindow: hours
+                                    })}>
+                                    {label}
+                                  </a>
+                                </MenuItem>
+                              );
+                            })}
+                          </DropdownLink>
+                        </li>
+                      );
+                    })}
+                    <MenuItem divider={true} />
+                    <MenuItem noAnchor={true}>
+                      <a onClick={this.customIgnoreModalClicked.bind(this, 'users')}>
+                        {t('Custom')}
+                      </a>
+                    </MenuItem>
+                  </DropdownLink>
+                </li>
                 <MenuItem noAnchor={true}>
                   <a onClick={this.onUpdate.bind(this, {status: 'ignored'})}>
-                    {t('forever')}
+                    {t('Forever')}
                   </a>
                 </MenuItem>
               </DropdownLink>}
@@ -304,5 +414,3 @@ const GroupActions = React.createClass({
     );
   }
 });
-
-export default GroupActions;
diff --git a/src/sentry/static/sentry/less/dropdowns.less b/src/sentry/static/sentry/less/dropdowns.less
new file mode 100644
index 0000000000..466d58fc28
--- /dev/null
+++ b/src/sentry/static/sentry/less/dropdowns.less
@@ -0,0 +1,42 @@
+.dropdown-menu .dropdown-toggle {
+  display: block;
+  padding: 3px 20px;
+  clear: both;
+  font-weight: normal;
+  line-height: 1.42857143;
+  color: #493e54;
+  white-space: nowrap;
+}
+
+.dropdown-submenu {
+  position: relative;
+
+  > span {
+    display: block;
+
+    > .dropdown-menu {
+
+      &:after, &:before {
+        display: none !important;
+      }
+
+      top: 0;
+      left: 100%;
+      margin-top: -5px;
+      margin-left: -1px;
+      -webkit-border-radius: 0 6px 6px 6px;
+      -moz-border-radius: 0 6px 6px;
+      border-radius: 0 6px 6px 6px;
+    }
+  }
+
+  &:hover > span {
+    > .dropdown-menu {
+      display: block;
+    }
+
+    > a:after {
+      border-left-color: #fff;
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index a4ac9038c9..096829ada3 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -28,6 +28,7 @@
 @import url("./result-grid.less");
 @import url("./type.less");
 @import url("./browser-icons.less");
+@import url("./dropdowns.less");
 
 // Page specific
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index a55dd53069..abd7f30735 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -75,6 +75,8 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
     for callback, futures in rp.apply():
         safe_execute(callback, event, futures)
 
+    process_snoozes(event.group)
+
     for plugin in plugins.for_project(event.project):
         plugin_post_process_group(
             plugin_slug=plugin.slug,
@@ -102,6 +104,20 @@ def record_additional_tags(event):
         Group.objects.add_tags(event.group, added_tags)
 
 
+def process_snoozes(group):
+    from sentry.models import GroupSnooze
+
+    try:
+        snooze = GroupSnooze.objects.get_from_cache(
+            group=group,
+        )
+    except GroupSnooze.DoesNotExist:
+        return
+
+    if not snooze.is_valid(group, test_rates=True):
+        snooze.delete()
+
+
 @instrumented_task(
     name='sentry.tasks.post_process.plugin_post_process_group',
     stat_suffix=lambda plugin_slug, *a, **k: plugin_slug)
diff --git a/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap b/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
new file mode 100644
index 0000000000..44caeaa937
--- /dev/null
+++ b/tests/js/spec/views/groupDetails/__snapshots__/actions.spec.jsx.snap
@@ -0,0 +1,668 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GroupActions render() renders correctly 1`] = `
+<div
+  className="group-actions"
+>
+  <customIgnoreDurationModal
+    onCanceled={[Function]}
+    onSelected={[Function]}
+    show={false}
+  />
+  <customIgnoreCountModal
+    countLabel="Number of times"
+    countName="ignoreCount"
+    label="Ignore this issue until it occurs again .. "
+    onCanceled={[Function]}
+    onSelected={[Function]}
+    show={false}
+    windowChoices={
+      Array [
+        Array [
+          1,
+          "per hour",
+        ],
+        Array [
+          24,
+          "per day",
+        ],
+        Array [
+          168,
+          "per week",
+        ],
+      ]
+    }
+    windowName="ignoreWindow"
+  />
+  <customIgnoreCountModal
+    countLabel="Numbers of users"
+    countName="ignoreUserCount"
+    label="Ignore this issue until it affects an additional .. "
+    onCanceled={[Function]}
+    onSelected={[Function]}
+    show={false}
+    windowChoices={
+      Array [
+        Array [
+          1,
+          "per hour",
+        ],
+        Array [
+          24,
+          "per day",
+        ],
+        Array [
+          168,
+          "per week",
+        ],
+      ]
+    }
+    windowName="ignoreUserWindow"
+  />
+  <div
+    className="btn-group"
+  >
+    <a
+      className="group-resolve btn btn-default btn-sm"
+      onClick={[Function]}
+      title="Resolve"
+    >
+      <span
+        className="icon-checkmark"
+        style={
+          Object {
+            "marginRight": 5,
+          }
+        }
+      />
+      Resolve
+    </a>
+    <DropdownLink
+      caret={true}
+      className="group-resolve btn btn-default btn-sm"
+      disabled={false}
+      title=""
+      topLevelClasses="resolve-dropdown"
+    >
+      <MenuItem
+        noAnchor={true}
+      >
+        <a
+          className="disabled tip"
+          href="/org/project/settings/release-tracking/"
+          title="Set up release tracking in order to use this feature."
+        >
+          <strong>
+            Resolved in next release.
+          </strong>
+          <div
+            className="help-text"
+          >
+            Ignore notifications until this issue reoccurs in a future release.
+          </div>
+        </a>
+      </MenuItem>
+    </DropdownLink>
+  </div>
+  <div
+    className="btn-group"
+  >
+    <DropdownLink
+      caret={false}
+      className="group-ignore btn btn-default btn-sm"
+      disabled={false}
+      title={
+        <span>
+          Ignore
+          <span
+            className="icon-arrow-down"
+            style={
+              Object {
+                "marginLeft": 3,
+                "marginRight": -3,
+              }
+            }
+          />
+        </span>
+      }
+    >
+      <MenuItem
+        header={true}
+      >
+        Ignore Until
+      </MenuItem>
+      <li
+        className="dropdown-submenu"
+      >
+        <DropdownLink
+          caret={false}
+          disabled={false}
+          title="This occurs again after .."
+        >
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              <Duration
+                seconds={1800}
+              />
+            </a>
+          </MenuItem>
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              <Duration
+                seconds={7200}
+              />
+            </a>
+          </MenuItem>
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              <Duration
+                seconds={21600}
+              />
+            </a>
+          </MenuItem>
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              <Duration
+                seconds={86400}
+              />
+            </a>
+          </MenuItem>
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              <Duration
+                seconds={604800}
+              />
+            </a>
+          </MenuItem>
+          <MenuItem
+            divider={true}
+          />
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              Custom
+            </a>
+          </MenuItem>
+        </DropdownLink>
+      </li>
+      <li
+        className="dropdown-submenu"
+      >
+        <DropdownLink
+          caret={false}
+          disabled={false}
+          title="This occurs again .."
+        >
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="100 times"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="1,000 times"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="10,000 times"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="100,000 times"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <MenuItem
+            divider={true}
+          />
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              Custom
+            </a>
+          </MenuItem>
+        </DropdownLink>
+      </li>
+      <li
+        className="dropdown-submenu"
+      >
+        <DropdownLink
+          caret={false}
+          disabled={false}
+          title="This affects an additional .."
+        >
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="100 users"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="1,000 users"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="10,000 users"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <li
+            className="dropdown-submenu"
+          >
+            <DropdownLink
+              caret={false}
+              disabled={false}
+              title="100,000 users"
+            >
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  from now
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per hour
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per day
+                </a>
+              </MenuItem>
+              <MenuItem
+                noAnchor={true}
+              >
+                <a
+                  onClick={[Function]}
+                >
+                  per week
+                </a>
+              </MenuItem>
+            </DropdownLink>
+          </li>
+          <MenuItem
+            divider={true}
+          />
+          <MenuItem
+            noAnchor={true}
+          >
+            <a
+              onClick={[Function]}
+            >
+              Custom
+            </a>
+          </MenuItem>
+        </DropdownLink>
+      </li>
+      <MenuItem
+        noAnchor={true}
+      >
+        <a
+          onClick={[Function]}
+        >
+          Forever
+        </a>
+      </MenuItem>
+    </DropdownLink>
+  </div>
+  <div
+    className="btn-group"
+  >
+    <a
+      className="group-bookmark btn btn-default btn-sm"
+      onClick={[Function]}
+      title="Bookmark"
+    >
+      <span
+        className="icon-star-solid"
+      />
+    </a>
+  </div>
+  <div
+    className="btn-group"
+  >
+    <LinkWithConfirmation
+      className="group-remove btn btn-default btn-sm"
+      message="Deleting this event is permanent. Are you sure you wish to continue?"
+      onConfirm={[Function]}
+      title="Delete"
+    >
+      <span
+        className="icon-trash"
+      />
+    </LinkWithConfirmation>
+  </div>
+  <a
+    className="btn btn-default btn-sm btn-config-issue-tracking"
+    href="/org/project/settings/issue-tracking/"
+  >
+    Link Issue Tracker
+  </a>
+</div>
+`;
diff --git a/tests/js/spec/views/groupDetails/actions.spec.jsx b/tests/js/spec/views/groupDetails/actions.spec.jsx
new file mode 100644
index 0000000000..d204d1da01
--- /dev/null
+++ b/tests/js/spec/views/groupDetails/actions.spec.jsx
@@ -0,0 +1,45 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+
+import GroupActions from 'app/views/groupDetails/actions';
+import ConfigStore from 'app/stores/configStore';
+
+describe('GroupActions', function() {
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+
+    this.sandbox.stub(ConfigStore, 'get').returns([]);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe('render()', function() {
+    it('renders correctly', function() {
+      let wrapper = shallow(<GroupActions />, {
+        context: {
+          group: {
+            id: '1337',
+            pluginActions: [],
+            pluginIssues: []
+          },
+          organization: {
+            id: '4660',
+            slug: 'org'
+          },
+          project: {
+            id: '2448',
+            slug: 'project'
+          },
+          team: {
+            id: '3559',
+            slug: 'team'
+          }
+        }
+      });
+      expect(toJson(wrapper)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index f831b825cf..df43c5c309 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -4,7 +4,7 @@ import {shallow} from 'enzyme';
 import GroupSeenBy from 'app/views/groupDetails/seenBy';
 import ConfigStore from 'app/stores/configStore';
 
-describe('OrganizationTeams', function() {
+describe('GroupSeenBy', function() {
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index be1d459a9d..a2200c6ac9 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1,25 +1,23 @@
 from __future__ import absolute_import
 
 import json
-
 from datetime import timedelta
 from uuid import uuid4
 
 import six
-from six.moves.urllib.parse import quote
-
 from django.utils import timezone
 from exam import fixture
 from mock import patch
 
 from sentry.models import (
     Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash,
-    GroupTagValue, GroupResolution, GroupSeen, GroupSnooze, GroupStatus,
-    GroupSubscription, Release, UserOption
+    GroupResolution, GroupSeen, GroupSnooze, GroupStatus, GroupSubscription,
+    GroupTagKey, GroupTagValue, Release, UserOption
 )
 from sentry.models.event import Event
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import parse_link_header
+from six.moves.urllib.parse import quote
 
 
 class GroupListTest(APITestCase):
@@ -590,6 +588,37 @@ class GroupUpdateTest(APITestCase):
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.UNRESOLVED
 
+    def test_basic_ignore(self):
+        group = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+
+        snooze = GroupSnooze.objects.create(
+            group=group,
+            until=timezone.now(),
+        )
+
+        self.login_as(user=self.user)
+
+        url = '{url}?id={group.id}'.format(
+            url=self.path,
+            group=group,
+        )
+        response = self.client.put(url, data={
+            'status': 'ignored',
+        }, format='json')
+
+        assert response.status_code == 200
+
+        # existing snooze objects should be cleaned up
+        assert not GroupSnooze.objects.filter(id=snooze.id).exists()
+
+        group = Group.objects.get(id=group.id)
+        assert group.status == GroupStatus.IGNORED
+
+        assert response.data == {
+            'status': 'ignored',
+            'statusDetails': {},
+        }
+
     def test_snooze_duration(self):
         group = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
 
@@ -612,8 +641,12 @@ class GroupUpdateTest(APITestCase):
         # Drop microsecond value for MySQL
         now = timezone.now().replace(microsecond=0)
 
+        assert snooze.count is None
         assert snooze.until > now + timedelta(minutes=29)
         assert snooze.until < now + timedelta(minutes=31)
+        assert snooze.user_count is None
+        assert snooze.user_window is None
+        assert snooze.window is None
 
         # Drop microsecond value for MySQL
         response.data['statusDetails']['ignoreUntil'] = response.data['statusDetails']['ignoreUntil'].replace(microsecond=0)
@@ -621,12 +654,95 @@ class GroupUpdateTest(APITestCase):
         assert response.data == {
             'status': 'ignored',
             'statusDetails': {
+                'ignoreCount': snooze.count,
+                'ignoreWindow': snooze.window,
                 'ignoreUntil': snooze.until,
+                'ignoreUserCount': snooze.user_count,
+                'ignoreUserWindow': snooze.user_window,
             },
         }
 
-        group = Group.objects.get(id=group.id)
-        assert group.get_status() == GroupStatus.IGNORED
+    def test_snooze_count(self):
+        group = self.create_group(
+            checksum='a' * 32,
+            status=GroupStatus.RESOLVED,
+            times_seen=1,
+        )
+
+        self.login_as(user=self.user)
+
+        url = '{url}?id={group.id}'.format(
+            url=self.path,
+            group=group,
+        )
+        response = self.client.put(url, data={
+            'status': 'ignored',
+            'ignoreCount': 100,
+        }, format='json')
+
+        assert response.status_code == 200
+
+        snooze = GroupSnooze.objects.get(group=group)
+        assert snooze.count == 100
+        assert snooze.until is None
+        assert snooze.user_count is None
+        assert snooze.user_window is None
+        assert snooze.window is None
+        assert snooze.state['times_seen'] == 1
+
+        assert response.data == {
+            'status': 'ignored',
+            'statusDetails': {
+                'ignoreCount': snooze.count,
+                'ignoreWindow': snooze.window,
+                'ignoreUntil': snooze.until,
+                'ignoreUserCount': snooze.user_count,
+                'ignoreUserWindow': snooze.user_window,
+            },
+        }
+
+    def test_snooze_user_count(self):
+        group = self.create_group(
+            checksum='a' * 32,
+            status=GroupStatus.RESOLVED,
+        )
+        GroupTagKey.objects.create(
+            group=group,
+            key='sentry:user',
+            values_seen=100,
+        )
+
+        self.login_as(user=self.user)
+
+        url = '{url}?id={group.id}'.format(
+            url=self.path,
+            group=group,
+        )
+        response = self.client.put(url, data={
+            'status': 'ignored',
+            'ignoreUserCount': 100,
+        }, format='json')
+
+        assert response.status_code == 200
+
+        snooze = GroupSnooze.objects.get(group=group)
+        assert snooze.count is None
+        assert snooze.until is None
+        assert snooze.user_count == 100
+        assert snooze.user_window is None
+        assert snooze.window is None
+        assert snooze.state['users_seen'] == 100
+
+        assert response.data == {
+            'status': 'ignored',
+            'statusDetails': {
+                'ignoreCount': snooze.count,
+                'ignoreWindow': snooze.window,
+                'ignoreUntil': snooze.until,
+                'ignoreUserCount': snooze.user_count,
+                'ignoreUserWindow': snooze.user_window,
+            },
+        }
 
     def test_set_bookmarked(self):
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index 2dde7901b4..76efd74d25 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -45,7 +45,13 @@ class GroupSerializerTest(TestCase):
 
         result = serialize(group, user)
         assert result['status'] == 'ignored'
-        assert result['statusDetails'] == {'ignoreUntil': snooze.until}
+        assert result['statusDetails'] == {
+            'ignoreCount': snooze.count,
+            'ignoreUntil': snooze.until,
+            'ignoreUserCount': snooze.user_count,
+            'ignoreUserWindow': snooze.user_window,
+            'ignoreWindow': snooze.window,
+        }
 
     def test_resolved_in_next_release(self):
         release = Release.objects.create(
diff --git a/tests/sentry/models/test_groupsnooze.py b/tests/sentry/models/test_groupsnooze.py
new file mode 100644
index 0000000000..242341b7f6
--- /dev/null
+++ b/tests/sentry/models/test_groupsnooze.py
@@ -0,0 +1,150 @@
+from __future__ import absolute_import
+
+import itertools
+import mock
+import pytest
+
+from datetime import datetime, timedelta
+from django.utils import timezone
+from sentry.testutils import TestCase
+from sentry.models import GroupSnooze, GroupTagKey
+from sentry.tsdb import backend as tsdb
+
+
+class GroupSnoozeTest(TestCase):
+    sequence = itertools.count()  # generates unique values, class scope doesn't matter
+
+    def test_until_not_reached(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            until=timezone.now() + timedelta(days=1),
+        )
+        assert snooze.is_valid()
+
+    def test_until_reached(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            until=timezone.now() - timedelta(days=1),
+        )
+        assert not snooze.is_valid()
+
+    def test_mismatched_group(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+        )
+        with pytest.raises(ValueError):
+            snooze.is_valid(self.create_group())
+
+    def test_delta_not_reached(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            count=100,
+            state={'times_seen': 0},
+        )
+        assert snooze.is_valid()
+
+    def test_delta_reached(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            count=100,
+            state={'times_seen': 0},
+        )
+        self.group.update(times_seen=100)
+        assert not snooze.is_valid()
+
+    def test_user_delta_not_reached(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            user_count=100,
+            state={'users_seen': 0},
+        )
+        assert snooze.is_valid(test_rates=True)
+
+    def test_user_delta_reached(self):
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            user_count=100,
+            state={'users_seen': 0},
+        )
+        GroupTagKey.objects.create(
+            group=self.group,
+            key='sentry:user',
+            values_seen=100,
+        )
+        assert not snooze.is_valid(test_rates=True)
+
+    @mock.patch('django.utils.timezone.now')
+    def test_user_rate_reached(self, mock_now):
+        mock_now.return_value = datetime(2016, 8, 1, 0, 0, 0, 0, tzinfo=timezone.utc)
+
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            user_count=100,
+            user_window=60,
+        )
+        tsdb.record(
+            tsdb.models.users_affected_by_group,
+            self.group.id,
+            [next(self.sequence) for _ in xrange(0, 101)],
+        )
+        assert not snooze.is_valid(test_rates=True)
+
+    @mock.patch('django.utils.timezone.now')
+    def test_user_rate_not_reached(self, mock_now):
+        mock_now.return_value = datetime(2016, 8, 1, 0, 0, 0, 0, tzinfo=timezone.utc)
+
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            user_count=100,
+            user_window=60,
+        )
+        assert snooze.is_valid(test_rates=True)
+
+    @mock.patch('django.utils.timezone.now')
+    def test_user_rate_without_test(self, mock_now):
+        mock_now.return_value = datetime(2016, 8, 1, 0, 0, 0, 0, tzinfo=timezone.utc)
+
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            count=100,
+            window=60,
+        )
+        assert snooze.is_valid(test_rates=False)
+
+    @mock.patch('django.utils.timezone.now')
+    def test_rate_not_reached(self, mock_now):
+        mock_now.return_value = datetime(2016, 8, 1, 0, 0, 0, 0, tzinfo=timezone.utc)
+
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            count=100,
+            window=60,
+        )
+        assert snooze.is_valid(test_rates=True)
+
+    @mock.patch('django.utils.timezone.now')
+    def test_rate_reached(self, mock_now):
+        mock_now.return_value = datetime(2016, 8, 1, 0, 0, 0, 0, tzinfo=timezone.utc)
+
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            count=100,
+            window=60,
+        )
+        tsdb.incr(
+            tsdb.models.group,
+            self.group.id,
+            count=100,
+        )
+        assert not snooze.is_valid(test_rates=True)
+
+    @mock.patch('django.utils.timezone.now')
+    def test_rate_without_test(self, mock_now):
+        mock_now.return_value = datetime(2016, 8, 1, 0, 0, 0, 0, tzinfo=timezone.utc)
+
+        snooze = GroupSnooze.objects.create(
+            group=self.group,
+            count=100,
+            window=60,
+        )
+        assert snooze.is_valid(test_rates=False)
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 1435670b27..22e064980a 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -2,9 +2,11 @@
 
 from __future__ import absolute_import
 
+from datetime import timedelta
+from django.utils import timezone
 from mock import Mock, patch
 
-from sentry.models import EventTag, TagKey, TagValue
+from sentry.models import EventTag, GroupSnooze, TagKey, TagValue
 from sentry.testutils import TestCase
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import index_event_tags, post_process_group
@@ -66,6 +68,46 @@ class PostProcessGroupTest(TestCase):
         assert event.group == group2
         assert event.group_id == group2.id
 
+    @patch('sentry.tasks.post_process.record_affected_user', Mock())
+    def test_invalidates_snooze(self):
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+        snooze = GroupSnooze.objects.create(
+            group=group,
+            until=timezone.now() - timedelta(hours=1),
+        )
+
+        post_process_group(
+            event=event,
+            is_new=True,
+            is_regression=False,
+            is_sample=False,
+        )
+
+        assert not GroupSnooze.objects.filter(
+            id=snooze.id,
+        ).exists()
+
+    @patch('sentry.tasks.post_process.record_affected_user', Mock())
+    def test_maintains_valid_snooze(self):
+        group = self.create_group(project=self.project)
+        event = self.create_event(group=group)
+        snooze = GroupSnooze.objects.create(
+            group=group,
+            until=timezone.now() + timedelta(hours=1),
+        )
+
+        post_process_group(
+            event=event,
+            is_new=True,
+            is_regression=False,
+            is_sample=False,
+        )
+
+        assert GroupSnooze.objects.filter(
+            id=snooze.id,
+        ).exists()
+
 
 class IndexEventTagsTest(TestCase):
     def test_simple(self):
diff --git a/yarn.lock b/yarn.lock
index e8dede464c..5fed6df59a 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1744,6 +1744,18 @@ entities@~1.1.1:
   version "1.1.1"
   resolved "https://registry.yarnpkg.com/entities/-/entities-1.1.1.tgz#6e5c2d0a5621b5dadaecef80b90edfb5cd7772f0"
 
+enzyme-to-json@^1.5.1:
+  version "1.5.1"
+  resolved "https://registry.yarnpkg.com/enzyme-to-json/-/enzyme-to-json-1.5.1.tgz#e34f4d126bb3f4696ce3800b51f9ed83df708799"
+  dependencies:
+    lodash.filter "^4.6.0"
+    lodash.isnil "^4.0.0"
+    lodash.isplainobject "^4.0.6"
+    lodash.omitby "^4.5.0"
+    lodash.range "^3.2.0"
+    object-values "^1.0.0"
+    object.entries "^1.0.3"
+
 enzyme@2.4.1:
   version "2.4.1"
   resolved "https://registry.yarnpkg.com/enzyme/-/enzyme-2.4.1.tgz#90fa9861d982d0ceb92a9fd57e38426a2f74d3b1"
@@ -1767,16 +1779,7 @@ error-ex@^1.2.0:
   dependencies:
     is-arrayish "^0.2.1"
 
-es-abstract@^1.3.2:
-  version "1.6.1"
-  resolved "https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.6.1.tgz#bb8a2064120abcf928a086ea3d9043114285ec99"
-  dependencies:
-    es-to-primitive "^1.1.1"
-    function-bind "^1.1.0"
-    is-callable "^1.1.3"
-    is-regex "^1.0.3"
-
-es-abstract@^1.7.0:
+es-abstract@^1.3.2, es-abstract@^1.6.1, es-abstract@^1.7.0:
   version "1.7.0"
   resolved "https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.7.0.tgz#dfade774e01bfcd97f96180298c449c8623fb94c"
   dependencies:
@@ -3356,18 +3359,38 @@ lodash.debounce@^4.0.0:
   version "4.0.8"
   resolved "https://registry.yarnpkg.com/lodash.debounce/-/lodash.debounce-4.0.8.tgz#82d79bff30a67c4005ffd5e2515300ad9ca4d7af"
 
+lodash.filter@^4.6.0:
+  version "4.6.0"
+  resolved "https://registry.yarnpkg.com/lodash.filter/-/lodash.filter-4.6.0.tgz#668b1d4981603ae1cc5a6fa760143e480b4c4ace"
+
 lodash.flatten@^4.4.0:
   version "4.4.0"
   resolved "https://registry.yarnpkg.com/lodash.flatten/-/lodash.flatten-4.4.0.tgz#f31c22225a9632d2bbf8e4addbef240aa765a61f"
 
+lodash.isnil@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/lodash.isnil/-/lodash.isnil-4.0.0.tgz#49e28cd559013458c814c5479d3c663a21bfaa6c"
+
+lodash.isplainobject@^4.0.6:
+  version "4.0.6"
+  resolved "https://registry.yarnpkg.com/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz#7c526a52d89b45c45cc690b88163be0497f550cb"
+
 lodash.memoize@^4.1.2:
   version "4.1.2"
   resolved "https://registry.yarnpkg.com/lodash.memoize/-/lodash.memoize-4.1.2.tgz#bcc6c49a42a2840ed997f323eada5ecd182e0bfe"
 
+lodash.omitby@^4.5.0:
+  version "4.6.0"
+  resolved "https://registry.yarnpkg.com/lodash.omitby/-/lodash.omitby-4.6.0.tgz#5c15ff4754ad555016b53c041311e8f079204791"
+
 lodash.pickby@^4.6.0:
   version "4.6.0"
   resolved "https://registry.yarnpkg.com/lodash.pickby/-/lodash.pickby-4.6.0.tgz#7dea21d8c18d7703a27c704c15d3b84a67e33aff"
 
+lodash.range@^3.2.0:
+  version "3.2.0"
+  resolved "https://registry.yarnpkg.com/lodash.range/-/lodash.range-3.2.0.tgz#f461e588f66683f7eadeade513e38a69a565a15d"
+
 lodash.throttle@^4.0.0:
   version "4.1.1"
   resolved "https://registry.yarnpkg.com/lodash.throttle/-/lodash.throttle-4.1.1.tgz#c23e91b710242ac70c37f1e1cda9274cc39bf2f4"
@@ -3712,6 +3735,10 @@ object-keys@^1.0.10, object-keys@^1.0.8:
   version "1.0.11"
   resolved "https://registry.yarnpkg.com/object-keys/-/object-keys-1.0.11.tgz#c54601778ad560f1142ce0e01bcca8b56d13426d"
 
+object-values@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/object-values/-/object-values-1.0.0.tgz#72af839630119e5b98c3b02bb8c27e3237158105"
+
 object.assign@^4.0.3, object.assign@^4.0.4:
   version "4.0.4"
   resolved "https://registry.yarnpkg.com/object.assign/-/object.assign-4.0.4.tgz#b1c9cc044ef1b9fe63606fc141abbb32e14730cc"
@@ -3720,6 +3747,15 @@ object.assign@^4.0.3, object.assign@^4.0.4:
     function-bind "^1.1.0"
     object-keys "^1.0.10"
 
+object.entries@^1.0.3:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/object.entries/-/object.entries-1.0.4.tgz#1bf9a4dd2288f5b33f3a993d257661f05d161a5f"
+  dependencies:
+    define-properties "^1.1.2"
+    es-abstract "^1.6.1"
+    function-bind "^1.1.0"
+    has "^1.0.1"
+
 object.omit@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/object.omit/-/object.omit-2.0.0.tgz#868597333d54e60662940bb458605dd6ae12fe94"
