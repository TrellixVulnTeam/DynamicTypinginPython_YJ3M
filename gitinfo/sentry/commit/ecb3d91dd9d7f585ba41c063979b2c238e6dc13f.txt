commit ecb3d91dd9d7f585ba41c063979b2c238e6dc13f
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Mon Apr 15 11:59:56 2019 -0700

    ref(audit-log): Log sso config updates (#12744)

diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 01d367debc..da8e1f080b 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -280,7 +280,8 @@ class AuditLogEntry(Model):
         elif self.event == AuditLogEntryEvent.SSO_DISABLE:
             return 'disabled sso (%s)' % (self.data['provider'], )
         elif self.event == AuditLogEntryEvent.SSO_EDIT:
-            return 'edited sso settings'
+            return 'edited sso settings: ' + (', '.join(u'{} {}'.format(k, v)
+                                                        for k, v in self.data.items()))
         elif self.event == AuditLogEntryEvent.SSO_IDENTITY_LINK:
             return 'linked their account to a new identity'
 
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 11d83a5c9e..f655f3eaac 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -119,6 +119,20 @@ class OrganizationAuthSettingsView(OrganizationView):
             organization.default_role = form.cleaned_data['default_role']
             organization.save()
 
+            if form.initial != form.cleaned_data:
+                changed_data = {}
+                for key, value in form.cleaned_data.items():
+                    if form.initial.get(key) != value:
+                        changed_data[key] = u'to {}'.format(value)
+
+                self.create_audit_entry(
+                    request,
+                    organization=organization,
+                    target_object=auth_provider.id,
+                    event=AuditLogEntryEvent.SSO_EDIT,
+                    data=changed_data,
+                )
+
         view = provider.get_configure_view()
         response = view(request, organization, auth_provider)
         if isinstance(response, HttpResponse):
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 4941fbf9f1..0cce9e50fa 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -258,3 +258,124 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert not om.user.is_managed
 
         assert email_unlink_notifications.delay.called
+
+    def test_edit_sso_settings(self):
+        organization, auth_provider = self.create_org_and_auth_provider()
+        self.create_om_and_link_sso(organization)
+        path = reverse('sentry-organization-auth-provider-settings', args=[organization.slug])
+
+        assert not getattr(auth_provider.flags, 'allow_unlinked')
+        assert organization.default_role == 'member'
+        self.login_as(self.user, organization_id=organization.id)
+
+        with self.feature('organizations:sso-basic'):
+            resp = self.client.post(path, {
+                'op': 'settings',
+                'require_link': False,
+                'default_role': 'owner',
+            })
+
+        assert resp.status_code == 200
+
+        auth_provider = AuthProvider.objects.get(organization=organization)
+        assert getattr(auth_provider.flags, 'allow_unlinked')
+        organization = Organization.objects.get(id=organization.id)
+        assert organization.default_role == 'owner'
+
+        assert AuditLogEntry.objects.filter(
+            organization=organization,
+            target_object=auth_provider.id,
+            event=AuditLogEntryEvent.SSO_EDIT,
+            actor=self.user,
+            data={'require_link': u'to False', 'default_role': u'to owner'}
+        ).exists()
+
+    def test_edit_sso_settings__sso_required(self):
+        organization, auth_provider = self.create_org_and_auth_provider()
+        self.create_om_and_link_sso(organization)
+        path = reverse('sentry-organization-auth-provider-settings', args=[organization.slug])
+
+        assert not getattr(auth_provider.flags, 'allow_unlinked')
+        assert organization.default_role == 'member'
+        self.login_as(self.user, organization_id=organization.id)
+
+        with self.feature('organizations:sso-basic'):
+            resp = self.client.post(path, {
+                'op': 'settings',
+                'require_link': False,
+                'default_role': 'member',
+            })
+
+        assert resp.status_code == 200
+
+        auth_provider = AuthProvider.objects.get(organization=organization)
+        assert getattr(auth_provider.flags, 'allow_unlinked')
+        organization = Organization.objects.get(id=organization.id)
+        assert organization.default_role == 'member'
+
+        assert AuditLogEntry.objects.filter(
+            organization=organization,
+            target_object=auth_provider.id,
+            event=AuditLogEntryEvent.SSO_EDIT,
+            actor=self.user,
+            data={'require_link': u'to False'}
+        ).exists()
+
+    def test_edit_sso_settings__default_role(self):
+        organization, auth_provider = self.create_org_and_auth_provider()
+        self.create_om_and_link_sso(organization)
+        path = reverse('sentry-organization-auth-provider-settings', args=[organization.slug])
+
+        assert not getattr(auth_provider.flags, 'allow_unlinked')
+        assert organization.default_role == 'member'
+        self.login_as(self.user, organization_id=organization.id)
+
+        with self.feature('organizations:sso-basic'):
+            resp = self.client.post(path, {
+                'op': 'settings',
+                'require_link': True,
+                'default_role': 'owner',
+            })
+
+        assert resp.status_code == 200
+
+        auth_provider = AuthProvider.objects.get(organization=organization)
+        assert not getattr(auth_provider.flags, 'allow_unlinked')
+        organization = Organization.objects.get(id=organization.id)
+        assert organization.default_role == 'owner'
+
+        assert AuditLogEntry.objects.filter(
+            organization=organization,
+            target_object=auth_provider.id,
+            event=AuditLogEntryEvent.SSO_EDIT,
+            actor=self.user,
+            data={'default_role': u'to owner'}
+        ).exists()
+
+    def test_edit_sso_settings__no_change(self):
+        organization, auth_provider = self.create_org_and_auth_provider()
+        self.create_om_and_link_sso(organization)
+        path = reverse('sentry-organization-auth-provider-settings', args=[organization.slug])
+
+        assert not getattr(auth_provider.flags, 'allow_unlinked')
+        assert organization.default_role == 'member'
+        self.login_as(self.user, organization_id=organization.id)
+
+        with self.feature('organizations:sso-basic'):
+            resp = self.client.post(path, {
+                'op': 'settings',
+                'require_link': True,
+                'default_role': 'member',
+            })
+
+        assert resp.status_code == 200
+
+        auth_provider = AuthProvider.objects.get(organization=organization)
+        assert not getattr(auth_provider.flags, 'allow_unlinked')
+        organization = Organization.objects.get(id=organization.id)
+        assert organization.default_role == 'member'
+
+        assert not AuditLogEntry.objects.filter(
+            organization=organization,
+            event=AuditLogEntryEvent.SSO_EDIT,
+        ).exists()
