commit 607bdf1555ac0ec278a1d48abba15864187d4cc3
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Jan 14 16:00:01 2019 -0800

    ref(api): Refactor org endpoint base get_project_ids to get_projects

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index fdab7643f2..7e7be130cc 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -112,7 +112,7 @@ class OrganizationUserReportsPermission(OrganizationPermission):
 class OrganizationEndpoint(Endpoint):
     permission_classes = (OrganizationPermission, )
 
-    def get_project_ids(
+    def get_projects(
         self,
         request,
         organization,
@@ -167,12 +167,13 @@ class OrganizationEndpoint(Endpoint):
         if project_ids:
             qs = qs.filter(id__in=project_ids)
 
-        project_ids = set(qs.values_list('id', flat=True))
+        projects = list(qs)
+        project_ids = set(p.id for p in projects)
 
         if requested_projects and project_ids != requested_projects:
             raise PermissionDenied
 
-        return list(project_ids)
+        return projects
 
     def get_environments(self, request, organization):
         requested_environments = set(request.GET.getlist('environment'))
@@ -217,18 +218,18 @@ class OrganizationEndpoint(Endpoint):
             raise OrganizationEventsError(exc.message)
 
         try:
-            project_ids = self.get_project_ids(request, organization)
+            projects = self.get_projects(request, organization)
         except ValueError:
             raise OrganizationEventsError('Invalid project ids')
 
-        if not project_ids:
+        if not projects:
             raise NoProjects
 
         environments = [e.name for e in self.get_environments(request, organization)]
         params = {
             'start': start,
             'end': end,
-            'project_id': project_ids,
+            'project_id': [p.id for p in projects],
         }
         if environments:
             params['environment'] = environments
@@ -262,7 +263,7 @@ class OrganizationEndpoint(Endpoint):
 class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationReleasePermission, )
 
-    def get_project_ids(self, request, organization):
+    def get_projects(self, request, organization):
         has_valid_api_key = False
         if isinstance(request.auth, ApiKey):
             if request.auth.organization_id != organization.id:
@@ -276,7 +277,7 @@ class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
         ):
             return []
 
-        return super(OrganizationReleasesBaseEndpoint, self).get_project_ids(
+        return super(OrganizationReleasesBaseEndpoint, self).get_projects(
             request,
             organization,
             force_global_perms=has_valid_api_key,
@@ -286,5 +287,5 @@ class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
     def has_release_permission(self, request, organization, release):
         return ReleaseProject.objects.filter(
             release=release,
-            project_id__in=self.get_project_ids(request, organization),
+            project__in=self.get_projects(request, organization),
         ).exists()
diff --git a/src/sentry/api/endpoints/organization_group_index.py b/src/sentry/api/endpoints/organization_group_index.py
index 7ade2e136a..f7c74d7653 100644
--- a/src/sentry/api/endpoints/organization_group_index.py
+++ b/src/sentry/api/endpoints/organization_group_index.py
@@ -12,7 +12,7 @@ from sentry.api.helpers.group_search import build_query_params_from_request, get
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.group import StreamGroupSerializerSnuba
 from sentry.api.utils import get_date_range_from_params, InvalidParams
-from sentry.models import Environment, Group, GroupStatus, Project
+from sentry.models import Environment, Group, GroupStatus
 from sentry.search.snuba.backend import SnubaSearchBackend
 
 
@@ -24,17 +24,11 @@ search = SnubaSearchBackend(**settings.SENTRY_SEARCH_OPTIONS)
 
 class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
 
-    def _build_query_params_from_request(self, request, organization, project_ids):
-        projects = list(
-            Project.objects.filter(
-                id__in=project_ids,
-                organization=organization,
-            )
-        )
+    def _build_query_params_from_request(self, request, organization, projects):
         return build_query_params_from_request(request, projects)
 
-    def _search(self, request, organization, project_ids, environments, extra_query_kwargs=None):
-        query_kwargs = self._build_query_params_from_request(request, organization, project_ids)
+    def _search(self, request, organization, projects, environments, extra_query_kwargs=None):
+        query_kwargs = self._build_query_params_from_request(request, organization, projects)
         if extra_query_kwargs is not None:
             assert 'environment' not in extra_query_kwargs
             query_kwargs.update(extra_query_kwargs)
@@ -105,9 +99,10 @@ class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
             stats_period=stats_period,
         )
 
-        project_ids = self.get_project_ids(request, organization)
+        projects = self.get_projects(request, organization)
+        project_ids = [p.id for p in projects]
 
-        if not project_ids:
+        if not projects:
             return Response([])
 
         # we ignore date range for both short id and event ids
@@ -144,7 +139,7 @@ class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
 
         try:
             cursor_result, query_kwargs = self._search(
-                request, organization, project_ids, environments, {
+                request, organization, projects, environments, {
                     'count_hits': True,
                     'date_to': end,
                     'date_from': start,
diff --git a/src/sentry/api/endpoints/organization_issues_resolved_in_release.py b/src/sentry/api/endpoints/organization_issues_resolved_in_release.py
index 231b31a82b..57a681eed2 100644
--- a/src/sentry/api/endpoints/organization_issues_resolved_in_release.py
+++ b/src/sentry/api/endpoints/organization_issues_resolved_in_release.py
@@ -30,7 +30,7 @@ class OrganizationIssuesResolvedInReleaseEndpoint(OrganizationEndpoint, Environm
         """
         group_ids = get_group_ids_resolved_in_release(organization, version)
         groups = Group.objects.filter(
-            project_id__in=self.get_project_ids(request, organization),
+            project__in=self.get_projects(request, organization),
             id__in=group_ids,
         )
 
diff --git a/src/sentry/api/endpoints/organization_release_commits.py b/src/sentry/api/endpoints/organization_release_commits.py
index 30430c6c55..f7539be820 100644
--- a/src/sentry/api/endpoints/organization_release_commits.py
+++ b/src/sentry/api/endpoints/organization_release_commits.py
@@ -25,7 +25,7 @@ class OrganizationReleaseCommitsEndpoint(OrganizationReleasesBaseEndpoint):
         try:
             release = Release.objects.distinct().get(
                 organization_id=organization.id,
-                projects__id__in=self.get_project_ids(request, organization),
+                projects__in=self.get_projects(request, organization),
                 version=version,
             )
         except Release.DoesNotExist:
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index fc3dec8561..2c6fbe697a 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -13,11 +13,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import (
     ReleaseHeadCommitSerializer, ReleaseHeadCommitSerializerDeprecated, ListField
 )
-from sentry.models import (
-    Activity,
-    Project,
-    Release,
-)
+from sentry.models import Activity, Release
 from sentry.signals import release_created
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -182,9 +178,7 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
             result = serializer.object
 
             allowed_projects = {
-                p.slug: p for p in Project.objects.filter(
-                    id__in=self.get_project_ids(request, organization)
-                )
+                p.slug: p for p in self.get_projects(request, organization)
             }
 
             projects = []
diff --git a/src/sentry/api/endpoints/organization_users.py b/src/sentry/api/endpoints/organization_users.py
index 623faffb36..0c20e35649 100644
--- a/src/sentry/api/endpoints/organization_users.py
+++ b/src/sentry/api/endpoints/organization_users.py
@@ -10,11 +10,11 @@ from sentry.models import OrganizationMember
 
 class OrganizationUsersEndpoint(OrganizationEndpoint):
     def get(self, request, organization):
-        project_ids = self.get_project_ids(request, organization)
+        projects = self.get_projects(request, organization)
         qs = OrganizationMember.objects.filter(
             user__is_active=True,
             organization=organization,
-            teams__projectteam__project_id__in=project_ids,
+            teams__projectteam__project__in=projects,
         ).select_related('user').prefetch_related(
             'teams',
             'teams__projectteam_set',
@@ -24,5 +24,6 @@ class OrganizationUsersEndpoint(OrganizationEndpoint):
         return Response(serialize(
             list(qs),
             request.user,
-            serializer=OrganizationMemberWithProjectsSerializer(project_ids=project_ids),
+            serializer=OrganizationMemberWithProjectsSerializer(
+                project_ids=[p.id for p in projects]),
         ))
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 3c109088e7..ded2ecf476 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -152,12 +152,12 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         request_args = {}
         if project_ids:
             request_args['project'] = project_ids
-        result = self.endpoint.get_project_ids(
+        result = self.endpoint.get_projects(
             self.build_request(user=user, active_superuser=active_superuser, **request_args),
             self.org,
             include_allow_joinleave=include_allow_joinleave,
         )
-        assert set([p.id for p in expected_projects]) == set(result)
+        assert set([p.id for p in expected_projects]) == set(p.id for p in result)
 
     def test_no_ids_no_teams(self):
         # Should get nothing if not part of the org
@@ -218,11 +218,11 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
     def test_none_user(self):
         request = RequestFactory().get('/')
         request.session = {}
-        result = self.endpoint.get_project_ids(request, self.org)
+        result = self.endpoint.get_projects(request, self.org)
         assert [] == result
 
         request.user = None
-        result = self.endpoint.get_project_ids(request, self.org)
+        result = self.endpoint.get_projects(request, self.org)
         assert [] == result
 
 
