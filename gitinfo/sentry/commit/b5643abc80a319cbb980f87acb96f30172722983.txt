commit b5643abc80a319cbb980f87acb96f30172722983
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Mar 31 16:20:28 2020 +0200

    feat(sessions): Add stats totals to release detail page api (#17989)

diff --git a/src/sentry/api/endpoints/project_release_stats.py b/src/sentry/api/endpoints/project_release_stats.py
index 351aa437a2..4b55771f53 100644
--- a/src/sentry/api/endpoints/project_release_stats.py
+++ b/src/sentry/api/endpoints/project_release_stats.py
@@ -68,7 +68,7 @@ class ProjectReleaseStatsEndpoint(ProjectEndpoint):
         if release is None:
             raise ResourceDoesNotExist
 
-        stats = get_project_release_stats(
+        stats, totals = get_project_release_stats(
             project_id=params["project_id"][0],
             release=version,
             stat=stats_type,
@@ -95,7 +95,10 @@ class ProjectReleaseStatsEndpoint(ProjectEndpoint):
                 }
             )
 
-        return Response(serialize({"stats": stats, "usersBreakdown": users_breakdown}), status=200)
+        return Response(
+            serialize({"stats": stats, "statTotals": totals, "usersBreakdown": users_breakdown}),
+            status=200,
+        )
 
     def get_rollup(self, request, params):
         interval = parse_stats_period(request.GET.get("interval", "24h"))
diff --git a/src/sentry/snuba/sessions.py b/src/sentry/snuba/sessions.py
index 56b67ff469..c8b4613760 100644
--- a/src/sentry/snuba/sessions.py
+++ b/src/sentry/snuba/sessions.py
@@ -118,7 +118,7 @@ def get_project_releases_by_stability(
 
 def _make_stats(start, rollup, buckets, default=0):
     rv = []
-    start = int(to_timestamp(start) // rollup) * rollup
+    start = int(to_timestamp(start) // rollup + 1) * rollup
     for x in range(buckets):
         rv.append([start, default])
         start += rollup
@@ -365,18 +365,19 @@ def get_project_release_stats(project_id, release, stat, rollup, start, end, env
     buckets = int((end - start).total_seconds() / rollup)
     stats = _make_stats(start, rollup, buckets, default=None)
 
+    totals = {stat: 0, stat + "_crashed": 0, stat + "_abnormal": 0, stat + "_errored": 0}
+
     for rv in raw_query(
         dataset=Dataset.Sessions,
         selected_columns=[
             "bucketed_started",
-            "release",
             stat,
             stat + "_crashed",
             stat + "_abnormal",
             stat + "_errored",
             "duration_quantiles",
         ],
-        groupby=["bucketed_started", "release", "project_id"],
+        groupby=["bucketed_started"],
         start=start,
         end=end,
         rollup=rollup,
@@ -394,6 +395,12 @@ def get_project_release_stats(project_id, release, stat, rollup, start, end, env
             "duration_p90": _convert_duration(rv["duration_quantiles"][1]),
         }
 
+        # Session stats we can sum up directly without another query
+        # as the data becomes available.
+        if stat == "sessions":
+            for k in totals:
+                totals[k] += rv[k]
+
     for idx, bucket in enumerate(stats):
         if bucket[1] is None:
             stats[idx][1] = {
@@ -405,4 +412,23 @@ def get_project_release_stats(project_id, release, stat, rollup, start, end, env
                 "duration_p90": None,
             }
 
-    return stats
+    # For users we need a secondary query over the entire time range
+    if stat == "users":
+        rows = raw_query(
+            dataset=Dataset.Sessions,
+            selected_columns=["users", "users_crashed", "users_abnormal", "users_errored"],
+            start=start,
+            end=end,
+            conditions=conditions,
+            filter_keys=filter_keys,
+        )["data"]
+        if rows:
+            rv = rows[0]
+            totals = {
+                "users": rv["users"],
+                "users_crashed": rv["users_crashed"],
+                "users_abnormal": rv["users_abnormal"],
+                "users_errored": rv["users_errored"] - rv["users_crashed"],
+            }
+
+    return stats, totals
