commit 5ce333ea8e9a8ea5c14a819508ce67f27ca3d118
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Nov 7 10:58:01 2018 -0800

    feat(event search): Support searching for custom tags

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 4a692ce74b..c03852d93e 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -119,7 +119,11 @@ class SearchKey(namedtuple('SearchKey', 'name')):
 
     @property
     def snuba_name(self):
-        return FIELD_LOOKUP[self.name]['snuba_name']
+        field = FIELD_LOOKUP.get(self.name)
+        if field:
+            return field['snuba_name']
+        # assume custom tag if not listed
+        return 'tags[%s]' % (self.name,)
 
 
 class SearchValue(namedtuple('SearchValue', 'raw_value type')):
@@ -172,14 +176,12 @@ class SearchVisitor(NodeVisitor):
 
     def visit_basic_filter(self, node, children):
         search_key, _, search_value = children
-        try:
-            return SearchFilter(
-                SearchKey(search_key),
-                "=",
-                SearchValue(search_value, FIELD_LOOKUP[search_key]['type']),
-            )
-        except KeyError:
-            raise InvalidSearchQuery('Unsupported search term: %s' % (search_key,))
+        field = FIELD_LOOKUP.get(search_key)
+        return SearchFilter(
+            SearchKey(search_key),
+            "=",
+            SearchValue(search_value, field['type'] if field else 'string'),
+        )
 
     def visit_search_key(self, node, children):
         return node.text
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 96162b1a0f..e9ba884ed1 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -7,7 +7,7 @@ from parsimonious.exceptions import IncompleteParseError
 
 from sentry.api.event_search import (
     convert_endpoint_params, get_snuba_query_args, parse_search_query,
-    InvalidSearchQuery, SearchFilter, SearchKey, SearchValue
+    SearchFilter, SearchKey, SearchValue
 )
 from sentry.testutils import TestCase
 
@@ -183,12 +183,22 @@ class EventSearchTest(TestCase):
             ),
         ]
 
-    def test_parse_search_query_invalid(self):
-        with self.assertRaises(InvalidSearchQuery):
-            parse_search_query('fruit:apple release:1.2.1')
+    def test_parse_search_query_custom_tag(self):
+        assert parse_search_query('fruit:apple release:1.2.1') == [
+            SearchFilter(
+                key=SearchKey(name='fruit'),
+                operator='=',
+                value=SearchValue(raw_value='apple', type='string'),
+            ),
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='1.2.1', type='string'),
+            ),
+        ]
 
     def test_get_snuba_query_args(self):
-        assert get_snuba_query_args('user.email:foo@example.com release:1.2.1 hello', {
+        assert get_snuba_query_args('user.email:foo@example.com release:1.2.1 fruit:apple hello', {
             'project_id': [1, 2, 3],
             'start': datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
             'end': datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc),
@@ -196,6 +206,7 @@ class EventSearchTest(TestCase):
             'conditions': [
                 ['email', '=', 'foo@example.com'],
                 ['sentry:release', '=', '1.2.1'],
+                ['tags[fruit]', '=', 'apple'],
                 [['positionCaseInsensitive', ['message', "'hello'"]], '!=', 0],
             ],
             'filter_keys': {'project_id': [1, 2, 3]},
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index dca364d488..7a5402d322 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -129,10 +129,6 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
                 'organization_slug': project.organization.slug,
             }
         )
-        response = self.client.get(url, {'query': 'fruit:banana'}, format='json')
-
-        assert response.status_code == 400, response.content
-        assert response.data['detail'] == 'Unsupported search term: fruit'
 
         response = self.client.get(url, {'query': 'hi \n there'}, format='json')
 
@@ -336,3 +332,33 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
         url = '%s?environment=notanenvironment' % (base_url,)
         response = self.client.get(url, format='json')
         assert response.status_code == 404
+
+    def test_custom_tags(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        group = self.create_group(project=project)
+
+        event_1 = self.create_event(
+            'a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
+        )
+        self.create_event(
+            'b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
+        )
+
+        base_url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        response = self.client.get('%s?query=fruit:apple' % (base_url,), format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        self.assert_events_in_response(response, [event_1.event_id])
