commit ada90b546ef2853f2da705185a45504a6830be6f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Nov 30 04:08:12 2015 -0800

    Bootstrap options enough to get app running

diff --git a/.gitignore b/.gitignore
index 6c20ef3eb9..134ccfd56a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,3 +27,4 @@ example/db.sqlite
 /src/sentry/static/sentry/debug_toolbar/
 /src/sentry/static/sentry/rest_framework/
 /wheelhouse
+/test_cli/
diff --git a/src/sentry/cache/__init__.py b/src/sentry/cache/__init__.py
index 1334dbf049..3c78dbf30b 100644
--- a/src/sentry/cache/__init__.py
+++ b/src/sentry/cache/__init__.py
@@ -8,7 +8,7 @@ from django.core.exceptions import ImproperlyConfigured
 from sentry.utils.imports import import_string
 
 if not settings.SENTRY_CACHE:
-    raise ImproperlyConfigured('You must configure ``SENTRY_CACHE``.')
+    raise ImproperlyConfigured('You must configure ``cache.backend``.')
 
 default_cache = import_string(settings.SENTRY_CACHE)(
     **settings.SENTRY_CACHE_OPTIONS
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 6c7ede38ec..8f80aec2dd 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -7,10 +7,9 @@ sentry.options
 """
 from __future__ import absolute_import, print_function
 
-from .manager import OptionsManager, OptionsLoader
+from .manager import OptionsManager
 
 default_manager = OptionsManager()
-default_loader = OptionsLoader(default_manager)
 
 # expose public API
 get = default_manager.get
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 01f35b13a2..2b6b1a1787 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -58,11 +58,43 @@ def get_asset_version(settings):
         return int(time())
 
 
+# Options which must get extracted into Django settings while
+# bootstrapping. Everything else will get validated and used
+# as a part of OptionsManager.
+options_mapper = {
+    'cache.backend': 'SENTRY_CACHE',
+    'cache.options': 'SENTRY_CACHE_OPTIONS',
+    'system.databases': 'DATABASES',
+    'system.debug': 'DEBUG',
+    'system.secret-key': 'SECRET_KEY',
+    'redis.options': 'SENTRY_REDIS_OPTIONS',
+}
+
+
+def bootstrap_options(settings, config):
+    """
+    Quickly bootstrap options that come in from a config file
+    and convert options into Django settings that are
+    required to even initialize the rest of the app.
+    """
+    if config is None:
+        return
+    from sentry.utils.yaml import safe_load
+    with open(config, 'rb') as fp:
+        options = safe_load(fp)
+    for k, v in options.iteritems():
+        if k in options_mapper:
+            setattr(settings, options_mapper[k], v)
+        else:
+            # Stuff everything else into SENTRY_OPTIONS
+            # these will be validated later after bootstrapping
+            settings.SENTRY_OPTIONS[k] = v
+
+
 def initialize_app(config, skip_backend_validation=False):
     settings = config['settings']
 
-    from sentry.options import default_loader
-    default_loader.load(config['options'])
+    bootstrap_options(settings, config['options'])
 
     fix_south(settings)
 
@@ -153,9 +185,9 @@ def apply_legacy_settings(settings):
         settings.CELERY_ALWAYS_EAGER = (not settings.SENTRY_USE_QUEUE)
 
     if not settings.SENTRY_ADMIN_EMAIL:
-        show_big_error('SENTRY_ADMIN_EMAIL is not configured')
+        show_big_error('system.admin-email is not configured')
     elif not isinstance(settings.SENTRY_ADMIN_EMAIL, basestring):
-        show_big_error('SENTRY_ADMIN_EMAIL must be a string')
+        show_big_error('system.admin-email must be a string')
 
     if settings.SENTRY_URL_PREFIX in ('', 'http://sentry.example.com') and not settings.DEBUG:
         # Maybe also point to a piece of documentation for more information?
@@ -220,3 +252,5 @@ def on_configure(config):
         settings, 'kombu.contrib.django', 'djkombu_queue')
     skip_migration_if_applied(
         settings, 'social_auth', 'social_auth_association')
+
+    # TODO(mattrobenolt): Validate settings.SENTRY_OPTIONS.
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index aa77c2a4d0..42ee373410 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -16,7 +16,34 @@ DEFAULT_SETTINGS_CONF = 'config.yml'
 DEFAULT_SETTINGS_OVERRIDE = 'sentry.conf.py'
 CONFIG_TEMPLATE = """# https://docs.getsentry.com/
 
-system.debug: false
+###########
+# General #
+###########
+
+system.databases:
+  default:
+    ENGINE: 'sentry.db.postgres'
+    NAME: 'sentry'
+    USER: 'matt'
+    PASSWORD: ''
+    HOST: ''
+    PORT: ''
+
+cache.backend: 'sentry.cache.redis.RedisCache'
+# cache.options: {}
+
+redis.options:
+  hosts:
+    0:
+      host: '127.0.0.1'
+      port: 6379
+
+########
+# etc. #
+########
+
+# If this file ever becomes compromised, it's important to regenerate your SECRET_KEY
+# Changing this value will result in all current sessions being invalidated
 system.secret-key: %(default_key)r
 """
 
