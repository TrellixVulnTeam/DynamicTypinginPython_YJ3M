commit b9c2febe71970dbe1fae5b393f7990853d0c9d8e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 19 16:31:29 2020 -0800

    fix(workflow): Fix "Issue Alerts" rule config wrapping (#17115)
    
    I wanted this to be more grid like, but it's a bit challenging because of the varying number of inputs that can be involved, so change back to flexbox from using css grid.

diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
index 7ee9cf77b4..fb8f59f577 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
@@ -48,14 +48,18 @@ class RuleNode extends React.Component<Props> {
     }
 
     return (
-      <SelectControl
+      <InlineSelectControl
         isClearable={false}
-        placeholder={t('Select integration')}
-        noResultsText={t('No integrations available')}
         name={name}
         value={initialVal}
+        styles={{
+          control: provided => ({
+            ...provided,
+            minHeight: '28px',
+            height: '28px',
+          }),
+        }}
         choices={fieldConfig.choices}
-        key={name}
         onChange={({value}) => this.props.onPropertyChange(name, value)}
       />
     );
@@ -70,7 +74,6 @@ class RuleNode extends React.Component<Props> {
         name={name}
         value={(data && data[name]) ?? ''}
         placeholder={`${fieldConfig.placeholder}`}
-        key={name}
         onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
           onPropertyChange(name, e.target.value)
         }
@@ -87,7 +90,6 @@ class RuleNode extends React.Component<Props> {
         name={name}
         value={(data && data[name]) ?? ''}
         placeholder={`${fieldConfig.placeholder}`}
-        key={name}
         onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
           onPropertyChange(name, e.target.value)
         }
@@ -115,7 +117,7 @@ class RuleNode extends React.Component<Props> {
 
     const parts = label.split(/({\w+})/).map(part => {
       if (!/^{\w+}$/.test(part)) {
-        return part;
+        return <Separator>{part}</Separator>;
       }
 
       const key = part.slice(1, -1);
@@ -126,19 +128,23 @@ class RuleNode extends React.Component<Props> {
         return null;
       }
 
-      return formFields && formFields.hasOwnProperty(key)
-        ? this.getField(key, formFields[key])
-        : part;
+      return (
+        <Separator key={key}>
+          {formFields && formFields.hasOwnProperty(key)
+            ? this.getField(key, formFields[key])
+            : part}
+        </Separator>
+      );
     });
 
     const [title, ...inputs] = parts;
 
     // We return this so that it can be a grid
     return (
-      <React.Fragment>
-        <div>{title}</div>
-        <RuleNodeForm>{inputs}</RuleNodeForm>
-      </React.Fragment>
+      <Rule>
+        {title}
+        {inputs}
+      </Rule>
     );
   }
 
@@ -146,7 +152,7 @@ class RuleNode extends React.Component<Props> {
     const {data, onDelete} = this.props;
 
     return (
-      <React.Fragment>
+      <RuleRow>
         {data && <input type="hidden" name="id" value={data.id} />}
         {this.renderRow()}
         <DeleteButton
@@ -156,7 +162,7 @@ class RuleNode extends React.Component<Props> {
           size="small"
           icon="icon-trash"
         />
-      </React.Fragment>
+      </RuleRow>
     );
   }
 }
@@ -165,16 +171,36 @@ export default RuleNode;
 
 const InlineInput = styled(Input)`
   width: auto;
+  height: 28px;
 `;
 
-const RuleNodeForm = styled('div')`
-  display: grid;
-  grid-gap: ${space(1)};
-  grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
+const InlineSelectControl = styled(SelectControl)`
+  width: 180px;
+`;
+
+const Separator = styled('span')`
+  margin-right: ${space(1)};
+  padding-top: ${space(0.5)};
+  padding-bottom: ${space(0.5)};
+`;
+
+const RuleRow = styled('div')`
+  display: flex;
+  align-items: center;
+  padding: ${space(1)};
+
+  &:nth-child(odd) {
+    background-color: ${p => p.theme.offWhite};
+  }
+`;
+
+const Rule = styled('div')`
+  display: flex;
   align-items: center;
-  white-space: nowrap;
+  flex: 1;
+  flex-wrap: wrap;
 `;
 
 const DeleteButton = styled(Button)`
-  height: 36px;
+  flex-shrink: 0;
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
index f7efd914b5..22f1977f05 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
@@ -97,14 +97,10 @@ const StyledSelectControl = styled(SelectControl)`
 
 const RuleNodes = styled('div')`
   display: grid;
-  grid-template-columns: max-content auto max-content;
-  grid-template-rows: repeat(2, auto);
-  align-items: center;
   margin-bottom: ${space(2)};
   grid-gap: ${space(1)};
 
   @media (max-width: ${p => p.theme.breakpoints[1]}) {
-    grid-template-columns: none;
     grid-auto-flow: row;
   }
 `;
