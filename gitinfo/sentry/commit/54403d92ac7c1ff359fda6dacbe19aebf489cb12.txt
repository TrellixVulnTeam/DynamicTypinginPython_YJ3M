commit 54403d92ac7c1ff359fda6dacbe19aebf489cb12
Author: Matte Noble <me@mattenoble.com>
Date:   Thu Mar 21 13:13:35 2019 -0700

    fix(app-platform): Conditionally make requests (#12484)
    
    This adds a condition to all API requests pertaining to Sentry Apps. If
    the Organization is not flagged into those features, it will not make
    any of the requests.

diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
index 0a455db7cd..4a4a7d461e 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import PropTypes from 'prop-types';
 
 import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
 import AsyncComponent from 'app/components/asyncComponent';
 import ExternalIssueActions, {
   SentryAppExternalIssueActions,
@@ -20,6 +21,7 @@ class ExternalIssueList extends AsyncComponent {
     api: PropTypes.object.isRequired,
     group: SentryTypes.Group.isRequired,
     project: SentryTypes.Project.isRequired,
+    organization: SentryTypes.Organization.isRequired,
     orgId: PropTypes.string,
   };
 
@@ -70,28 +72,36 @@ class ExternalIssueList extends AsyncComponent {
   // control over those services.
   //
   fetchSentryAppData() {
-    const {api, orgId, group, project} = this.props;
-
-    api
-      .requestPromise(
-        `/organizations/${orgId}/sentry-app-components/?filter=issue-link&projectId=${project.id}`
-      )
-      .then(data => {
-        this.setState({components: data});
-      })
-      .catch(error => {
-        return;
-      });
-
-    api
-      .requestPromise(`/groups/${group.id}/external-issues/`)
-      .then(data => {
-        ExternalIssueStore.load(data);
-        this.setState({externalIssues: data});
-      })
-      .catch(error => {
+    const {api, orgId, group, project, organization} = this.props;
+
+    if (project && project.id && organization) {
+      const features = new Set(organization.features);
+
+      if (!features.has('sentry-apps')) {
         return;
-      });
+      }
+
+      api
+        .requestPromise(
+          `/organizations/${orgId}/sentry-app-components/?filter=issue-link&projectId=${project.id}`
+        )
+        .then(data => {
+          this.setState({components: data});
+        })
+        .catch(error => {
+          return;
+        });
+
+      api
+        .requestPromise(`/groups/${group.id}/external-issues/`)
+        .then(data => {
+          ExternalIssueStore.load(data);
+          this.setState({externalIssues: data});
+        })
+        .catch(error => {
+          return;
+        });
+    }
   }
 
   renderIntegrationIssues(integrations = []) {
@@ -204,4 +214,4 @@ class ExternalIssueList extends AsyncComponent {
   }
 }
 
-export default withApi(ExternalIssueList);
+export default withOrganization(withApi(ExternalIssueList));
diff --git a/src/sentry/static/sentry/app/utils/withSentryAppInstallations.jsx b/src/sentry/static/sentry/app/utils/withSentryAppInstallations.jsx
deleted file mode 100644
index d3d783fecf..0000000000
--- a/src/sentry/static/sentry/app/utils/withSentryAppInstallations.jsx
+++ /dev/null
@@ -1,78 +0,0 @@
-import React from 'react';
-
-import {Client} from 'app/api';
-import SentryTypes from 'app/sentryTypes';
-import getDisplayName from 'app/utils/getDisplayName';
-import SentryAppInstallationStore from 'app/stores/sentryAppInstallationsStore';
-
-const withSentryAppInstallations = WrappedComponent => {
-  class WithSentryAppInstallations extends React.Component {
-    static displayName = `withSentryAppInstallations(${getDisplayName(
-      WrappedComponent
-    )})`;
-
-    static propTypes = {
-      project: SentryTypes.Project,
-    };
-
-    constructor(props) {
-      super(props);
-      this.api = new Client();
-      this.sentryApps = [];
-    }
-
-    componentWillMount() {
-      this.fetchData();
-    }
-
-    componentWillUnmount() {
-      this.api.clear();
-    }
-
-    fetchData() {
-      const slug = this.props.project.organization.slug;
-
-      this.api
-        .requestPromise(`/organizations/${slug}/sentry-apps/`)
-        .then(data => {
-          this.sentryApps = data;
-          this.fetchInstallations();
-        })
-        .catch(this.gracefullyFail);
-    }
-
-    fetchInstallations() {
-      const slug = this.props.project.organization.slug;
-
-      this.api
-        .requestPromise(`/organizations/${slug}/sentry-app-installations/`)
-        .then(data => {
-          data.forEach(this.addSentryApp);
-          SentryAppInstallationStore.load(data);
-        })
-        .catch(this.gracefullyFail);
-    }
-
-    addSentryApp = install => {
-      install.sentryApp = this.sentryAppByUuid(install.app.uuid);
-    };
-
-    sentryAppByUuid = uuid => {
-      return this.sentryApps.find(a => a.uuid === uuid);
-    };
-
-    gracefullyFail = () => {
-      this.installations = [];
-    };
-
-    render() {
-      return (
-        <WrappedComponent sentryAppInstallations={this.installations} {...this.props} />
-      );
-    }
-  }
-
-  return WithSentryAppInstallations;
-};
-
-export default withSentryAppInstallations;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
index d768bf55c3..986921d662 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupEventDetails.jsx
@@ -70,7 +70,13 @@ class GroupEventDetails extends React.Component {
         });
       });
 
-    fetchSentryAppInstallations(orgSlug);
+    if (organization) {
+      const features = new Set(organization.features);
+
+      if (features.has('sentry-apps')) {
+        fetchSentryAppInstallations(orgSlug);
+      }
+    }
   };
 
   render() {
diff --git a/tests/js/spec/components/group/sidebar.spec.jsx b/tests/js/spec/components/group/sidebar.spec.jsx
index 5ab7ae8e88..43e28ccc05 100644
--- a/tests/js/spec/components/group/sidebar.spec.jsx
+++ b/tests/js/spec/components/group/sidebar.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {mount, shallow} from 'enzyme';
 
 import GroupSidebar from 'app/components/group/sidebar';
 
@@ -44,7 +44,7 @@ describe('GroupSidebar', function() {
       body: TestStubs.Tags(),
     });
 
-    wrapper = shallow(
+    wrapper = mount(
       <GroupSidebar
         group={group}
         project={project}
@@ -69,8 +69,10 @@ describe('GroupSidebar', function() {
     it('renders', function() {
       expect(wrapper.find('SuggestedOwners')).toHaveLength(1);
       expect(wrapper.find('GroupReleaseStats')).toHaveLength(1);
-      expect(wrapper.find('withApi(ExternalIssueList)')).toHaveLength(1);
-      expect(wrapper.find('[data-test-id="group-tag"]')).toHaveLength(5);
+      expect(wrapper.find('ExternalIssueList')).toHaveLength(1);
+      expect(wrapper.find('TagDistributionMeter[data-test-id="group-tag"]')).toHaveLength(
+        5
+      );
     });
   });
 
diff --git a/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx
new file mode 100644
index 0000000000..3b5a57814f
--- /dev/null
+++ b/tests/js/spec/views/groupDetails/groupEventDetails.spec.jsx
@@ -0,0 +1,122 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import GroupEventDetails from 'app/views/groupDetails/shared/groupEventDetails';
+
+describe('groupEventDetails', () => {
+  let org;
+  let project;
+  let routerContext;
+  let group;
+  let event;
+
+  beforeEach(() => {
+    const props = initializeOrg();
+    org = props.organization;
+    project = props.project;
+    project.organization = org;
+    routerContext = props.routerContext;
+
+    group = TestStubs.Group();
+    event = TestStubs.Event({
+      size: 1,
+      dateCreated: '2019-03-20T00:00:00.000Z',
+      errors: [],
+      entries: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/issues/${group.id}/`,
+      body: group,
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/issues/${group.id}/events/latest/`,
+      body: event,
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/issues/`,
+      method: 'PUT',
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/events/${event.id}/committers/`,
+      body: {committers: []},
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/events/${event.id}/owners/`,
+      body: {owners: [], rules: []},
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/issues/${group.id}/participants/`,
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/issues/${group.id}/tags/`,
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/groups/${group.id}/integrations/`,
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/sentry-apps/',
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/sentry-app-installations/`,
+      body: [],
+    });
+  });
+
+  it("doesn't load Sentry Apps without being flagged in", () => {
+    const request = MockApiClient.addMockResponse({
+      url: '/sentry-apps/',
+      body: [],
+    });
+
+    mount(
+      <GroupEventDetails
+        group={group}
+        project={project}
+        organization={org}
+        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+        params={{}}
+      />,
+      routerContext
+    );
+
+    expect(request).not.toHaveBeenCalled();
+  });
+
+  it('loads Sentry Apps when flagged in', () => {
+    const request = MockApiClient.addMockResponse({
+      url: '/sentry-apps/',
+      body: [],
+    });
+
+    org.features = ['sentry-apps'];
+    project.organization = org;
+
+    mount(
+      <GroupEventDetails
+        group={group}
+        project={project}
+        organization={org}
+        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+        params={{}}
+      />,
+      routerContext
+    );
+
+    expect(request).toHaveBeenCalledTimes(1);
+  });
+});
