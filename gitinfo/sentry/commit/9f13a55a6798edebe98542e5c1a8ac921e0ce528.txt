commit 9f13a55a6798edebe98542e5c1a8ac921e0ce528
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 7 14:34:16 2018 -0800

    fix(emails): Correct handling of primary email address
    
    - Allow primary email address to be changed on managed accounts (legacy page)
    - Disallow primary email address for unverified emails (enforce backend constraints)

diff --git a/src/sentry/api/endpoints/user_emails.py b/src/sentry/api/endpoints/user_emails.py
index a2f694babf..7e900f52ee 100644
--- a/src/sentry/api/endpoints/user_emails.py
+++ b/src/sentry/api/endpoints/user_emails.py
@@ -19,7 +19,7 @@ logger = logging.getLogger('sentry.accounts')
 class InvalidEmailResponse(Response):
     def __init__(self):
         super(InvalidEmailResponse, self).__init__(
-            {'detail': 'Invalid email'},
+            {'detail': 'Invalid email', 'email': 'Invalid email'},
             status=status.HTTP_400_BAD_REQUEST
         )
 
@@ -80,7 +80,7 @@ class UserEmailsEndpoint(UserEndpoint):
 
         emails = user.emails.all()
 
-        return Response(serialize(list(emails), user=user))
+        return self.respond(serialize(list(emails), user=user))
 
     @sudo_required
     def post(self, request, user):
@@ -116,7 +116,7 @@ class UserEmailsEndpoint(UserEndpoint):
                 }
             )
 
-            return Response(status=status.HTTP_204_NO_CONTENT)
+            return self.respond(serialize(new_email, user=request.user), status=201)
 
     @sudo_required
     def put(self, request, user):
@@ -141,27 +141,33 @@ class UserEmailsEndpoint(UserEndpoint):
             return InvalidEmailResponse()
 
         new_email = serializer.object['email'].lower().strip()
+        if new_email == old_email:
+            return InvalidEmailResponse()
 
         # If email doesn't exist for user, attempt to add new email
-        if not UserEmail.objects.filter(
+        new_email_obj = UserEmail.objects.filter(
             user=user, email__iexact=new_email
-        ).exists():
+        ).first()
+        if not new_email_obj:
             try:
-                added_email = add_email(new_email, user, serializer.object['newsletter'])
+                new_email_obj = add_email(new_email, user, serializer.object['newsletter'])
             except InvalidEmailError:
                 return InvalidEmailResponse()
             except DuplicateEmailError:
-                pass
+                new_email_obj = UserEmail.objects.filter(
+                    user=user, email__iexact=new_email
+                ).first()
+                assert new_email_obj
             else:
                 logger.info(
                     'user.email.add',
                     extra={
                         'user_id': user.id,
                         'ip_address': request.META['REMOTE_ADDR'],
-                        'email': added_email.email,
+                        'email': new_email_obj.email,
                     }
                 )
-                new_email = added_email.email
+                new_email = new_email_obj.email
 
         # Check if email is in use
         # Is this a security/abuse concern?
@@ -169,8 +175,9 @@ class UserEmailsEndpoint(UserEndpoint):
                                ).exclude(id=user.id).exists():
             return InvalidEmailResponse()
 
-        if new_email == old_email:
-            return InvalidEmailResponse()
+        if not new_email_obj.is_verified:
+            return self.respond(
+                {'email': 'You must verified your email address before marking it as primary.'}, status=400)
 
         # update notification settings for those set to primary email with new primary email
         alert_email = UserOption.objects.get_value(user=user, key='alert_email')
@@ -203,7 +210,7 @@ class UserEmailsEndpoint(UserEndpoint):
             }
         )
 
-        return Response(status=status.HTTP_204_NO_CONTENT)
+        return self.respond(serialize(new_email_obj, user=request.user))
 
     @sudo_required
     def delete(self, request, user):
@@ -223,8 +230,8 @@ class UserEmailsEndpoint(UserEndpoint):
 
         # Don't allow deleting primary email?
         if primary_email == del_email:
-            return Response({'detail': 'Cannot remove primary email'},
-                            status=status.HTTP_400_BAD_REQUEST)
+            return self.respond({'detail': 'Cannot remove primary email'},
+                                status=status.HTTP_400_BAD_REQUEST)
 
         del_email.delete()
 
@@ -237,4 +244,4 @@ class UserEmailsEndpoint(UserEndpoint):
             }
         )
 
-        return Response(status=status.HTTP_204_NO_CONTENT)
+        return self.respond(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/templates/sentry/account/emails.html b/src/sentry/templates/sentry/account/emails.html
index 9943e09fb7..228d784445 100644
--- a/src/sentry/templates/sentry/account/emails.html
+++ b/src/sentry/templates/sentry/account/emails.html
@@ -46,7 +46,7 @@
             {% endif %}
           </td>
           <td style="text-align: right">
-            {% if email != primary_email and email.is_verified and not user.is_managed %}
+            {% if email != primary_email and email.is_verified %}
             <form action="" method="post">
               {% csrf_token %}
               <input type='hidden' name='new_primary_email' value='{{ email.email }}'>
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index b223a4bbbf..14c071d524 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -524,7 +524,12 @@ def show_emails(request):
             )
 
         elif new_primary != user.email:
-
+            new_primary_email = UserEmail.objects.get(user=user, email__iexact=new_primary)
+            if not new_primary_email.is_verified:
+                messages.add_message(
+                    request, messages.ERROR, _("Cannot make an unverified address your primary email")
+                )
+                return HttpResponseRedirect(request.path)
             # update notification settings for those set to primary email with new primary email
             alert_email = UserOption.objects.get_value(user=user, key='alert_email')
 
diff --git a/tests/sentry/api/endpoints/test_user_emails.py b/tests/sentry/api/endpoints/test_user_emails.py
index 950271b4e1..20f2603fe8 100644
--- a/tests/sentry/api/endpoints/test_user_emails.py
+++ b/tests/sentry/api/endpoints/test_user_emails.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import User, UserEmail, UserOption
+from sentry.models import User, UserEmail
 from sentry.testutils import APITestCase
 
 
@@ -27,38 +27,6 @@ class UserEmailsTest(APITestCase):
         secondary_emails = filter(lambda n: not n['isPrimary'], response.data)
         assert len(secondary_emails) == 2
 
-    def test_add_new_primary_email(self):
-        UserOption.objects.set_value(user=self.user, key='alert_email', value='foo@example.com')
-        UserOption.objects.set_value(user=self.user, key='mail:email', value='foo@example.com')
-
-        # invalid email address
-        response = self.client.put(self.url, data={
-            'email': 'invalidprimary',
-        })
-        assert response.status_code == 400
-
-        # same email as current primary
-        response = self.client.put(self.url, data={
-            'email': 'foo@example.com',
-        })
-        assert response.status_code == 400
-
-        # valid primary email
-        response = self.client.put(self.url, data={
-            'email': 'newprimary@example.com',
-        })
-        assert response.status_code == 204
-
-        users = User.objects.filter(email='newprimary@example.com')
-        assert len(users) == 1
-        assert UserEmail.objects.filter(user=users[0], email='newprimary@example.com').exists()
-
-        # updated user options
-        assert UserOption.objects.get(user=users[0],
-                                      key='alert_email').value == 'newprimary@example.com'
-        assert UserOption.objects.get(user=users[0],
-                                      key='mail:email').value == 'newprimary@example.com'
-
     def test_add_secondary_email(self):
         # test invalid email
         response = self.client.post(self.url, data={
@@ -72,7 +40,7 @@ class UserEmailsTest(APITestCase):
             'email': 'altemail1@example.com',
         })
 
-        assert response.status_code == 204
+        assert response.status_code == 201
         assert len(UserEmail.objects.filter(user=self.user, email='altemail1@example.com'))
 
         # duplicate email
@@ -81,23 +49,27 @@ class UserEmailsTest(APITestCase):
         })
         assert response.status_code == 400
 
-    def test_change_secondary_to_primary(self):
-        # valid secondary email
-        response = self.client.post(self.url, data={
+    def test_change_verified_secondary_to_primary(self):
+        UserEmail.objects.create(user=self.user, email='altemail1@example.com', is_verified=True)
+        response = self.client.put(self.url, data={
             'email': 'altemail1@example.com',
         })
-        assert response.status_code == 204
-        assert len(UserEmail.objects.filter(user=self.user, email='altemail1@example.com'))
+        assert response.status_code == 200
 
-        # duplicate email
+        user = User.objects.get(id=self.user.id)
+        assert user.email == 'altemail1@example.com'
+        assert user.username == 'altemail1@example.com'
+
+    def test_change_unverified_secondary_to_primary(self):
+        UserEmail.objects.create(user=self.user, email='altemail1@example.com', is_verified=False)
         response = self.client.put(self.url, data={
             'email': 'altemail1@example.com',
         })
-        assert response.status_code == 204
+        assert response.status_code == 400
 
         user = User.objects.get(id=self.user.id)
-        assert user.email == 'altemail1@example.com'
-        assert user.username == 'altemail1@example.com'
+        assert user.email != 'altemail1@example.com'
+        assert user.username != 'altemail1@example.com'
 
     def test_remove_email(self):
         UserEmail.objects.create(user=self.user, email='altemail1@example.com')
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 5e2fa434e7..b43c3bfb40 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -50,37 +50,6 @@ class AppearanceSettingsTest(TestCase):
         assert options.get('clock_24_hours') is True
 
 
-class SettingsEmailTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings-emails')
-
-    def test_change_primary_email(self):
-        self.login_as(self.user)
-        self.create_user('foo@example.com')
-
-        # setting primary email changes it
-        self.client.post(self.path, {
-            'new_primary_email': 'foo1@example.com',
-            'primary': 1
-        })
-        assert User.objects.get(id=self.user.id).email == 'foo1@example.com'
-
-        # setting primary email to an existing user's email leaves it unchanged
-        self.client.post(self.path, {
-            'new_primary_email': 'foo@example.com',
-            'primary': 1
-        })
-        assert User.objects.get(id=self.user.id).email == 'foo1@example.com'
-
-        # setting primary to existing email + whitespace leaves it unchanged
-        self.client.post(self.path, {
-            'new_primary_email': 'foo@example.com\n\n',
-            'primary': 1
-        })
-        assert User.objects.get(id=self.user.id).email == 'foo1@example.com'
-
-
 class SettingsTest(TestCase):
     @fixture
     def path(self):
diff --git a/tests/sentry/web/frontend/test_emails.py b/tests/sentry/web/frontend/test_emails.py
index 89356a3d23..6b8de90e49 100644
--- a/tests/sentry/web/frontend/test_emails.py
+++ b/tests/sentry/web/frontend/test_emails.py
@@ -88,29 +88,31 @@ class EmailsTest(TestCase):
         self.assertNotIn('bar@example.com', resp.content)
         assert 'bar@example.com' not in (email.email for email in user.emails.all())
 
-    def test_change_primary_email(self):
+    def test_change_verified_primary_email(self):
         user = self.create_user('foo@example.com')
         self.login_as(user)
         resp = self.client.get(self.path)
         self.assertIn('foo@example.com', resp.content)
+        UserEmail.objects.create(email='bar@example.com', is_verified=True, user=user)
         resp = self.client.post(
             self.path, {'primary': '',
                         'new_primary_email': 'bar@example.com'}, follow=True
         )
         self.assertIn('bar@example.com', resp.content)
         user = User.objects.get(id=user.id)
-        assert user.email != 'foo@example.com'
         assert user.email == 'bar@example.com'
+        assert user.username == 'bar@example.com'
 
-    def test_username_updates(self):
+    def test_change_unverified_primary_email(self):
         user = self.create_user('foo@example.com')
         self.login_as(user)
-        email = UserEmail(user=user, email='bar@example.com')
-        email.save()
-        self.client.post(
-            self.path, data={'primary': '',
-                             'new_primary_email': 'bar@example.com'}, follow=True
+        resp = self.client.get(self.path)
+        self.assertIn('foo@example.com', resp.content)
+        UserEmail.objects.create(email='bar@example.com', is_verified=False, user=user)
+        resp = self.client.post(
+            self.path, {'primary': '',
+                        'new_primary_email': 'bar@example.com'}, follow=True
         )
         user = User.objects.get(id=user.id)
-        assert user.username != 'foo@example.com'
-        assert user.username == 'bar@example.com'
+        assert user.email == 'foo@example.com'
+        assert user.username == 'foo@example.com'
