commit 849dccb960d3013bc3287dafc0552362cb69222c
Author: Matej Minar <matej.minar@sentry.io>
Date:   Mon Dec 9 16:49:12 2019 +0100

    feat(ui): Native stack frame renderer enhancements (#15907)
    
    Updates to the native stack frame renderer.
    
    - convert between relative/absolute addresses
    - underline address if found by scanning
    - package path tooltip instead of slower title
    - clicking on package scrolls down to the filtered images
    - relative addresses by default
    - images search box refactored to reusable component with icon and reset option
    - status icons
    - inlined frame indicator

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 0e9b870ec9..f31ebfaa1f 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -278,6 +278,8 @@ class Frame(Interface):
             )
             if is_url(self.data["sourcemap"]):
                 data["mapUrl"] = self.data["sourcemap"]
+        if self.data and "symbolicator_status" in self.data:
+            data["symbolicatorStatus"] = self.data["symbolicator_status"]
 
         return data
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
index fe8be21dfd..7eb936ce7b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -36,6 +36,7 @@ class CrashContent extends React.Component {
         values={exception.values}
         platform={event.platform}
         newestFirst={newestFirst}
+        event={event}
       />
     );
   };
@@ -52,6 +53,7 @@ class CrashContent extends React.Component {
         className="no-exception"
         includeSystemFrames={stackView === 'full'}
         platform={event.platform}
+        event={event}
         newestFirst={newestFirst}
       />
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 1b274ccc8e..177a11017b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -2,6 +2,7 @@ import isNil from 'lodash/isNil';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import get from 'lodash/get';
 
 import Access from 'app/components/acl/access';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
@@ -10,33 +11,24 @@ import Checkbox from 'app/components/checkbox';
 import DebugFileFeature from 'app/components/debugFileFeature';
 import EventDataSection from 'app/components/events/eventDataSection';
 import InlineSvg from 'app/components/inlineSvg';
-import Input from 'app/components/forms/input';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import Tooltip from 'app/components/tooltip';
-
+import DebugMetaStore, {DebugMetaActions} from 'app/stores/debugMetaStore';
+import SearchInput from 'app/components/forms/searchInput';
+import {formatAddress, parseAddress} from 'app/components/events/interfaces/utils';
+import ImageForBar from 'app/components/events/interfaces/imageForBar';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
 
 const IMAGE_ADDR_LEN = 12;
 const MIN_FILTER_LEN = 3;
 
-function formatAddr(addr) {
-  return `0x${addr.toString(16).padStart(IMAGE_ADDR_LEN, '0')}`;
-}
-
-function parseAddr(addr) {
-  try {
-    return parseInt(addr, 16) || 0;
-  } catch (_e) {
-    return 0;
-  }
-}
-
 function getImageRange(image) {
   // The start address is normalized to a `0x` prefixed hex string. The event
   // schema also allows ingesting plain numbers, but this is converted during
   // ingestion.
-  const startAddress = parseAddr(image.image_addr);
+  const startAddress = parseAddress(image.image_addr);
 
   // The image size is normalized to a regular number. However, it can also be
   // `null`, in which case we assume that it counts up to the next image.
@@ -101,13 +93,13 @@ function getImageStatusDetails(status) {
   }
 }
 
-function combineStatus(debugStatus, unwindStatus) {
+export const combineStatus = (debugStatus, unwindStatus) => {
   const debugWeight = getStatusWeight(debugStatus);
   const unwindWeight = getStatusWeight(unwindStatus);
 
   const combined = debugWeight >= unwindWeight ? debugStatus : unwindStatus;
   return combined || 'unused';
-}
+};
 
 class DebugImage extends React.PureComponent {
   static propTypes = {
@@ -202,8 +194,9 @@ class DebugImage extends React.PureComponent {
         <ImageInfoGroup>{iconElement}</ImageInfoGroup>
 
         <ImageInfoGroup>
-          <Formatted>{formatAddr(startAddress)}</Formatted> &ndash; <br />
-          <Formatted>{formatAddr(endAddress)}</Formatted>
+          <Formatted>{formatAddress(startAddress, IMAGE_ADDR_LEN)}</Formatted> &ndash;{' '}
+          <br />
+          <Formatted>{formatAddress(endAddress, IMAGE_ADDR_LEN)}</Formatted>
         </ImageInfoGroup>
 
         <ImageInfoGroup fullWidth>
@@ -308,6 +301,18 @@ class DebugMetaInterface extends React.PureComponent {
     };
   }
 
+  componentDidMount() {
+    this.unsubscribeFromStore = DebugMetaStore.listen(this.onStoreChange);
+  }
+  componentWillUnmount() {
+    this.unsubscribeFromStore();
+  }
+  onStoreChange = store => {
+    this.setState({
+      filter: store.filter,
+    });
+  };
+
   filterImage(image) {
     const {showUnused, filter} = this.state;
     if (!filter || filter.length < MIN_FILTER_LEN) {
@@ -333,7 +338,7 @@ class DebugMetaInterface extends React.PureComponent {
     // When searching for an address, check for the address range of the image
     // instead of an exact match.
     if (filter.indexOf('0x') === 0) {
-      const needle = parseAddr(filter);
+      const needle = parseAddress(filter);
       if (needle > 0) {
         const [startAddress, endAddress] = getImageRange(image);
         return needle >= startAddress && needle < endAddress;
@@ -361,7 +366,7 @@ class DebugMetaInterface extends React.PureComponent {
   };
 
   handleChangeFilter = e => {
-    this.setState({filter: e.target.value});
+    DebugMetaActions.updateFilter(e.target.value || '');
   };
 
   isValidImage(image) {
@@ -389,7 +394,7 @@ class DebugMetaInterface extends React.PureComponent {
     // Sort images by their start address. We assume that images have
     // non-overlapping ranges. Each address is given as hex string (e.g.
     // "0xbeef").
-    filtered.sort((a, b) => parseAddr(a.image_addr) - parseAddr(b.image_addr));
+    filtered.sort((a, b) => parseAddress(a.image_addr) - parseAddress(b.image_addr));
 
     return filtered;
   }
@@ -397,7 +402,7 @@ class DebugMetaInterface extends React.PureComponent {
   renderToolbar() {
     const {filter, showDetails, showUnused} = this.state;
     return (
-      <Toolbar>
+      <ToolbarWrapper>
         <Label>
           <Checkbox checked={showDetails} onChange={this.handleChangeShowDetails} />
           {t('details')}
@@ -411,12 +416,15 @@ class DebugMetaInterface extends React.PureComponent {
           />
           {t('show unreferenced')}
         </Label>
-
-        <SearchBox
-          onChange={this.handleChangeFilter}
-          placeholder={t('Search loaded images\u2026')}
-        />
-      </Toolbar>
+        <SearchInputWrapper>
+          <SearchInput
+            value={filter}
+            onChange={this.handleChangeFilter}
+            placeholder={t('Search images\u2026')}
+            smaller
+          />
+        </SearchInputWrapper>
+      </ToolbarWrapper>
     );
   }
 
@@ -432,14 +440,22 @@ class DebugMetaInterface extends React.PureComponent {
     const titleElement = (
       <div>
         <GuideAnchor target="packages" position="top">
-          <Title>
-            <strong>{t('Images Loaded')}</strong>
-          </Title>
-          {this.renderToolbar()}
+          <AlignItems>
+            <ImagesTitle>{t('Images Loaded')}</ImagesTitle>
+            {this.renderToolbar()}
+          </AlignItems>
         </GuideAnchor>
       </div>
     );
 
+    const frames = get(
+      this.props.event.entries.find(({type}) => type === 'exception'),
+      'data.values[0].stacktrace.frames'
+    );
+    const foundFrame = frames
+      ? frames.find(frame => frame.instructionAddr === this.state.filter)
+      : null;
+
     return (
       <EventDataSection
         event={this.props.event}
@@ -449,6 +465,9 @@ class DebugMetaInterface extends React.PureComponent {
       >
         <DebugImagesPanel>
           <PanelBody>
+            {foundFrame && (
+              <ImageForBar frame={foundFrame} onShowAllImages={this.handleChangeFilter} />
+            )}
             {filteredImages.length > 0 ? (
               filteredImages.map(image => (
                 <DebugImage
@@ -472,12 +491,17 @@ class DebugMetaInterface extends React.PureComponent {
   }
 }
 
-const Title = styled('h3')`
-  float: left;
+//remove important once less files are gone
+const AlignItems = styled('div')`
+  display: flex;
+  align-items: baseline;
+  justify-content: space-between;
+  flex-wrap: wrap;
+  margin-bottom: ${space(3)};
 `;
-
-const Toolbar = styled('div')`
-  float: right;
+const ImagesTitle = styled('h3')`
+  margin-bottom: 0 !important;
+  padding-right: ${space(1)};
 `;
 
 const Label = styled('label')`
@@ -489,11 +513,6 @@ const Label = styled('label')`
   }
 `;
 
-const SearchBox = styled(Input)`
-  width: auto;
-  display: inline;
-`;
-
 const DebugImagesPanel = styled(Panel)`
   max-height: 600px;
   overflow-y: auto;
@@ -567,5 +586,14 @@ const EmptyItem = styled(PanelItem)`
     vertical-align: text-bottom;
   }
 `;
+const ToolbarWrapper = styled('div')`
+  display: flex;
+  align-items: baseline;
+  flex-wrap: wrap;
+`;
+const SearchInputWrapper = styled('div')`
+  max-width: 180px;
+  display: inline-block;
+`;
 
 export default DebugMetaInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 4689fd0d05..a2ab728d5e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -5,6 +5,7 @@ import {defined} from 'app/utils';
 import Annotated from 'app/components/events/meta/annotated';
 import ExceptionMechanism from 'app/components/events/interfaces/exceptionMechanism';
 import StacktraceContent from 'app/components/events/interfaces/stacktraceContent';
+import SentryTypes from 'app/sentryTypes';
 
 class ExceptionContent extends React.Component {
   static propTypes = {
@@ -13,11 +14,11 @@ class ExceptionContent extends React.Component {
     view: PropTypes.string.isRequired,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
+    event: SentryTypes.Event.isRequired,
   };
 
   render() {
-    const stackView = this.props.view;
-    const newestFirst = this.props.newestFirst;
+    const {newestFirst, event, view: stackView} = this.props;
     const children = this.props.values.map((exc, excIdx) => {
       return (
         <div key={excIdx} className="exception">
@@ -47,6 +48,7 @@ class ExceptionContent extends React.Component {
               includeSystemFrames={stackView === 'full'}
               platform={this.props.platform}
               newestFirst={newestFirst}
+              event={event}
             />
           )}
         </div>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 347a678082..b24425aef0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 import styled, {css} from 'react-emotion';
+import scrollToElement from 'scroll-to-element';
 
 import {defined, objectIsEmpty, isUrl} from 'app/utils';
 import {t} from 'app/locale';
@@ -10,6 +11,9 @@ import ContextLine from 'app/components/events/interfaces/contextLine';
 import ExternalLink from 'app/components/links/externalLink';
 import FrameRegisters from 'app/components/events/interfaces/frameRegisters';
 import FrameVariables from 'app/components/events/interfaces/frameVariables';
+import TogglableAddress from 'app/components/events/interfaces/togglableAddress';
+import PackageLink from 'app/components/events/interfaces/packageLink';
+import PackageStatus from 'app/components/events/interfaces/packageStatus';
 import StrictClick from 'app/components/strictClick';
 import Tooltip from 'app/components/tooltip';
 import Truncate from 'app/components/truncate';
@@ -17,6 +21,10 @@ import OpenInContextLine from 'app/components/events/interfaces/openInContextLin
 import space from 'app/styles/space';
 import ErrorBoundary from 'app/components/errorBoundary';
 import withSentryAppComponents from 'app/utils/withSentryAppComponents';
+import {DebugMetaActions} from 'app/stores/debugMetaStore';
+import {SymbolicatorStatus} from 'app/components/events/interfaces/types';
+import InlineSvg from 'app/components/inlineSvg';
+import {combineStatus} from 'app/components/events/interfaces/debugmeta';
 
 export function trimPackage(pkg) {
   const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
@@ -24,7 +32,7 @@ export function trimPackage(pkg) {
   return filename.replace(/\.(dylib|so|a|dll|exe)$/, '');
 }
 
-class FunctionName extends React.Component {
+export class FunctionName extends React.Component {
   static propTypes = {
     frame: PropTypes.object,
   };
@@ -70,6 +78,10 @@ export class Frame extends React.Component {
     timesRepeated: PropTypes.number,
     registers: PropTypes.objectOf(PropTypes.string.isRequired),
     components: PropTypes.array.isRequired,
+    showingAbsoluteAddress: PropTypes.bool,
+    onAddressToggle: PropTypes.func,
+    image: PropTypes.object,
+    maxLengthOfRelativeAddress: PropTypes.number,
   };
 
   static defaultProps = {
@@ -143,6 +155,35 @@ export class Frame extends React.Component {
     }
   }
 
+  isInlineFrame() {
+    return (
+      this.props.prevFrame &&
+      this.getPlatform() === (this.props.prevFrame.platform || this.props.platform) &&
+      this.props.data.instructionAddr === this.props.prevFrame.instructionAddr
+    );
+  }
+
+  shouldShowLinkToImage() {
+    return this.props.data.symbolicatorStatus !== SymbolicatorStatus.UNKNOWN_IMAGE;
+  }
+
+  packageStatusIsError() {
+    const {image} = this.props;
+    if (!image) {
+      return true;
+    }
+
+    const imageStatus = combineStatus(image.debug_status, image.unwind_status);
+
+    return imageStatus !== 'found';
+  }
+
+  scrollToImage = event => {
+    event.stopPropagation(); // to prevent collapsing if collapsable
+    DebugMetaActions.updateFilter(this.props.data.instructionAddr);
+    scrollToElement('#packages');
+  };
+
   preventCollapse = evt => {
     evt.stopPropagation();
   };
@@ -362,34 +403,48 @@ export class Frame extends React.Component {
     return !this.props.data.inApp && this.props.nextFrame && this.props.nextFrame.inApp;
   }
 
-  isInlineFrame() {
-    return (
-      this.props.prevFrame &&
-      this.getPlatform() === (this.props.prevFrame.platform || this.props.platform) &&
-      this.props.data.instructionAddr === this.props.prevFrame.instructionAddr
-    );
+  isFoundByStackScanning() {
+    const {data} = this.props;
+
+    return data.trust === 'scan' || data.trust === 'cfi-scan';
   }
 
   getFrameHint() {
-    if (this.isInlineFrame()) {
-      return t('Inlined frame');
+    // returning [hintText, hintType]
+    const {symbolicatorStatus} = this.props.data;
+    const func = this.props.data.function || '<unknown>';
+    const warningType = 'question';
+    const errorType = 'exclamation';
+
+    if (func.match(/^@objc\s/)) {
+      return [t('Objective-C -> Swift shim frame'), warningType];
     }
-    if (this.props.data.trust === 'scan' || this.props.data.trust === 'cfi-scan') {
-      return t('Found by stack scanning');
+    if (func === '<redacted>') {
+      return [t('Unknown system frame. Usually from beta SDKs'), warningType];
     }
-    if (this.getPlatform() === 'cocoa') {
-      const func = this.props.data.function || '<unknown>';
-      if (func.match(/^@objc\s/)) {
-        return t('Objective-C -> Swift shim frame');
-      }
-      if (func === '<redacted>') {
-        return t('Unknown system frame. Usually from beta SDKs');
-      }
-      if (func.match(/^__?hidden#\d+/)) {
-        return t('Hidden function from bitcode build');
-      }
+    if (func.match(/^__?hidden#\d+/)) {
+      return [t('Hidden function from bitcode build'), errorType];
+    }
+    if (!symbolicatorStatus && func === '<unknown>') {
+      // Only render this if the event was not symbolicated.
+      return [t('No function name was supplied by the client SDK.'), warningType];
+    }
+
+    switch (symbolicatorStatus) {
+      case SymbolicatorStatus.MISSING_SYMBOL:
+        return [t('The symbol was not found within the debug file.'), warningType];
+      case SymbolicatorStatus.UNKNOWN_IMAGE:
+        return [t('No image is specified for the address of the frame.'), warningType];
+      case SymbolicatorStatus.MISSING:
+        return [
+          t('The debug file could not be retrieved from any of the sources.'),
+          errorType,
+        ];
+      case SymbolicatorStatus.MALFORMED:
+        return [t('The retrieved debug file could not be processed.'), errorType];
+      default:
+        return [null, null];
     }
-    return null;
   }
 
   renderLeadHint() {
@@ -436,8 +491,14 @@ export class Frame extends React.Component {
   }
 
   renderNativeLine() {
-    const data = this.props.data;
-    const hint = this.getFrameHint();
+    const {
+      data,
+      showingAbsoluteAddress,
+      onAddressToggle,
+      image,
+      maxLengthOfRelativeAddress,
+    } = this.props;
+    const [hint, hintType] = this.getFrameHint();
 
     const enablePathTooltip = defined(data.absPath) && data.absPath !== data.filename;
 
@@ -446,16 +507,33 @@ export class Frame extends React.Component {
         <DefaultLine className="title as-table">
           <NativeLineContent>
             {this.renderLeadHint()}
-            {defined(data.package) ? (
-              <span className="package" title={data.package}>
-                {trimPackage(data.package)}
-              </span>
-            ) : (
-              <span className="package">{'<unknown>'}</span>
-            )}
-            <span className="address">{data.instructionAddr}</span>
+            <PackageLink
+              packagePath={data.package}
+              onClick={this.scrollToImage}
+              isClickable={this.shouldShowLinkToImage()}
+            >
+              <PackageStatus isError={this.packageStatusIsError()} />
+            </PackageLink>
+            <TogglableAddress
+              address={data.instructionAddr}
+              startingAddress={image ? image.image_addr : null}
+              isAbsolute={showingAbsoluteAddress}
+              isFoundByStackScanning={this.isFoundByStackScanning()}
+              isInlineFrame={this.isInlineFrame()}
+              onToggle={onAddressToggle}
+              maxLengthOfRelativeAddress={maxLengthOfRelativeAddress}
+            />
             <span className="symbol">
               <FunctionName frame={data} />{' '}
+              {hint !== null ? (
+                <Tooltip title={hint}>
+                  <HintStatus
+                    src={`icon-circle-${hintType}`}
+                    danger={hintType === 'exclamation'}
+                    size="1em"
+                  />
+                </Tooltip>
+              ) : null}
               {data.filename && (
                 <Tooltip title={data.absPath} disabled={!enablePathTooltip}>
                   <span className="filename">
@@ -464,13 +542,6 @@ export class Frame extends React.Component {
                   </span>
                 </Tooltip>
               )}
-              {hint !== null ? (
-                <Tooltip title={hint}>
-                  <a key="inline">
-                    <span className="icon-question" />
-                  </a>
-                </Tooltip>
-              ) : null}
             </span>
           </NativeLineContent>
           {this.renderExpander()}
@@ -553,4 +624,10 @@ const DefaultLine = styled(VertCenterWrapper)`
   justify-content: space-between;
 `;
 
+const HintStatus = styled(InlineSvg)`
+  margin: 0 ${space(0.75)} 0 -${space(0.25)};
+  color: ${p => (p.danger ? p.theme.alert.error.iconColor : '#2c58a8')};
+  transform: translateY(-1px);
+`;
+
 export default withSentryAppComponents(Frame, {componentType: 'stacktrace-link'});
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
new file mode 100644
index 0000000000..924c047430
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
@@ -0,0 +1,78 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import {FunctionName} from 'app/components/events/interfaces/frame';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+
+type Props = {
+  frame: object;
+  onShowAllImages: () => void;
+};
+
+const ImageForBar: React.FC<Props> = ({frame, onShowAllImages}) => {
+  return (
+    <Wrapper>
+      <MatchedFunctionWrapper>
+        <MatchedFunctionCaption>{t('Image for: ')}</MatchedFunctionCaption>
+        <FunctionName frame={frame} />
+      </MatchedFunctionWrapper>
+      <ResetAddressFilterCaption onClick={onShowAllImages}>
+        {t('Show all images')}
+      </ResetAddressFilterCaption>
+    </Wrapper>
+  );
+};
+
+ImageForBar.propTypes = {
+  frame: PropTypes.object.isRequired,
+  onShowAllImages: PropTypes.func.isRequired,
+};
+
+const Wrapper = styled('div')`
+  display: flex;
+  align-items: baseline;
+  justify-content: space-between;
+  padding: ${space(0.5)} ${space(2)};
+  background: ${p => p.theme.whiteDark};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  font-weight: 700;
+  code {
+    color: ${p => p.theme.blueDark};
+    font-size: ${p => p.theme.fontSizeSmall};
+    background: ${p => p.theme.whiteDark};
+  }
+  a {
+    color: ${p => p.theme.blueDark};
+    &:hover {
+      text-decoration: underline;
+    }
+  }
+`;
+
+const MatchedFunctionWrapper = styled('div')`
+  display: flex;
+  align-items: baseline;
+`;
+
+const MatchedFunctionCaption = styled('span')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  font-weight: 400;
+  color: ${p => p.theme.gray2};
+  flex-shrink: 0;
+`;
+
+const ResetAddressFilterCaption = styled('a')`
+  display: flex;
+  flex-shrink: 0;
+  padding-left: ${space(0.5)};
+  font-size: ${p => p.theme.fontSizeSmall};
+  font-weight: 400;
+  color: ${p => p.theme.gray2} !important;
+  &:hover {
+    color: ${p => p.theme.gray2} !important;
+  }
+`;
+
+export default ImageForBar;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx b/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
new file mode 100644
index 0000000000..c0c9543152
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
@@ -0,0 +1,86 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+import {defined} from 'app/utils';
+import {trimPackage} from 'app/components/events/interfaces/frame';
+import InlineSvg from 'app/components/inlineSvg';
+import {PackageStatusIcon} from 'app/components/events/interfaces/packageStatus';
+
+type Props = {
+  packagePath: string;
+  onClick: (event: React.MouseEvent<HTMLAnchorElement>) => void;
+  isClickable: boolean;
+};
+
+class PackageLink extends React.Component<Props> {
+  handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {
+    const {isClickable, onClick} = this.props;
+
+    if (isClickable) {
+      onClick(event);
+    }
+  };
+
+  render() {
+    const {packagePath, isClickable, children} = this.props;
+
+    return (
+      <Package onClick={this.handleClick} isClickable={isClickable}>
+        {defined(packagePath) ? (
+          <Tooltip title={packagePath}>
+            <PackageName>{trimPackage(packagePath)}</PackageName>
+          </Tooltip>
+        ) : (
+          <PackageName>{'<unknown>'}</PackageName>
+        )}
+        {children}
+        {isClickable && <LinkChevron src="icon-chevron-right" />}
+      </Package>
+    );
+  }
+}
+
+const LinkChevron = styled(InlineSvg)`
+  opacity: 0;
+  transform: translateX(${space(0.25)});
+  transition: all 0.2s ease-in-out;
+`;
+
+const Package = styled('a')<Partial<Props>>`
+  font-size: 13px;
+  font-weight: bold;
+  max-width: 100%;
+  display: flex;
+  align-items: center;
+  flex-basis: 137px;
+  flex-grow: 0;
+  flex-shrink: 0;
+  padding: 0 0 0 ${space(0.5)};
+  color: ${p => p.theme.foreground};
+  cursor: ${p => (p.isClickable ? 'pointer' : 'default')};
+
+  &:hover {
+    color: ${p => p.theme.foreground};
+
+    ${LinkChevron} {
+      opacity: 1;
+      transform: translateX(${space(0.5)});
+    }
+
+    &:hover ${PackageStatusIcon} {
+      opacity: 1;
+    }
+  }
+`;
+
+const PackageName = styled('span')`
+  display: block;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+  overflow: hidden;
+  max-width: 104px;
+`;
+
+export default PackageLink;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx b/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx
new file mode 100644
index 0000000000..efd6ff30d5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/packageStatus.tsx
@@ -0,0 +1,37 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import InlineSvg from 'app/components/inlineSvg';
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+
+type Props = {
+  isError: boolean;
+  tooltip?: string;
+};
+
+class PackageStatus extends React.Component<Props> {
+  render() {
+    const {isError, tooltip} = this.props;
+
+    const iconType = isError ? 'error' : 'success';
+    const iconSrc = isError ? 'icon-circle-exclamation' : 'icon-circle-check';
+
+    return (
+      <Tooltip title={tooltip} disabled={!(tooltip && tooltip.length)}>
+        <PackageStatusIcon type={iconType} src={iconSrc} size="1em" />
+      </Tooltip>
+    );
+  }
+}
+
+type PackageStatusIconProps = {
+  type: 'error' | 'success';
+};
+export const PackageStatusIcon = styled(InlineSvg)<PackageStatusIconProps>`
+  color: ${p => p.theme.alert[p.type!].iconColor};
+  margin-left: ${space(0.5)};
+  opacity: 0;
+`;
+
+export default PackageStatus;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 24e5af4d78..cd469524f2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,7 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import get from 'lodash/get';
+
 import Frame from 'app/components/events/interfaces/frame';
 import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import {parseAddress} from 'app/components/events/interfaces/utils';
 
 export default class StacktraceContent extends React.Component {
   static propTypes = {
@@ -10,6 +14,7 @@ export default class StacktraceContent extends React.Component {
     expandFirstFrame: PropTypes.bool,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
+    event: SentryTypes.Event.isRequired,
   };
 
   static defaultProps = {
@@ -17,6 +22,10 @@ export default class StacktraceContent extends React.Component {
     expandFirstFrame: true,
   };
 
+  state = {
+    showingAbsoluteAddresses: false,
+  };
+
   renderOmittedFrames = (firstFrameOmitted, lastFrameOmitted) => {
     const props = {
       className: 'frame frames-omitted',
@@ -36,8 +45,26 @@ export default class StacktraceContent extends React.Component {
     );
   };
 
+  findImageForPackage(framePackage) {
+    const images = get(
+      this.props.event.entries.find(entry => entry.type === 'debugmeta'),
+      'data.images'
+    );
+
+    return images ? images.find(img => get(img, 'code_file') === framePackage) : null;
+  }
+
+  handleToggleAddresses = event => {
+    event.stopPropagation(); // to prevent collapsing if collapsable
+
+    this.setState(prevState => ({
+      showingAbsoluteAddresses: !prevState.showingAbsoluteAddresses,
+    }));
+  };
+
   render() {
     const data = this.props.data;
+    const {showingAbsoluteAddresses} = this.state;
     let firstFrameOmitted, lastFrameOmitted;
 
     if (data.framesOmitted) {
@@ -61,6 +88,27 @@ export default class StacktraceContent extends React.Component {
     const expandFirstFrame = this.props.expandFirstFrame;
     const frames = [];
     let nRepeats = 0;
+
+    const maxLengthOfAllRelativeAddresses = data.frames.reduce(
+      (maxLengthUntilThisPoint, frame) => {
+        const correspondingImage = this.findImageForPackage(frame.package);
+
+        try {
+          const relativeAddress = (
+            parseAddress(frame.instructionAddr) -
+            parseAddress(correspondingImage.image_addr)
+          ).toString(16);
+
+          return maxLengthUntilThisPoint > relativeAddress.length
+            ? maxLengthUntilThisPoint
+            : relativeAddress.length;
+        } catch {
+          return maxLengthUntilThisPoint;
+        }
+      },
+      0
+    );
+
     data.frames.forEach((frame, frameIdx) => {
       const prevFrame = data.frames[frameIdx - 1];
       const nextFrame = data.frames[frameIdx + 1];
@@ -77,6 +125,8 @@ export default class StacktraceContent extends React.Component {
       }
 
       if (this.frameIsVisible(frame, nextFrame) && !repeatedFrame) {
+        const image = this.findImageForPackage(frame.package);
+
         frames.push(
           <Frame
             key={frameIdx}
@@ -88,6 +138,10 @@ export default class StacktraceContent extends React.Component {
             prevFrame={prevFrame}
             platform={this.props.platform}
             timesRepeated={nRepeats}
+            showingAbsoluteAddress={showingAbsoluteAddresses}
+            onAddressToggle={this.handleToggleAddresses}
+            image={image}
+            maxLengthOfRelativeAddress={maxLengthOfAllRelativeAddresses}
           />
         );
       }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/togglableAddress.tsx b/src/sentry/static/sentry/app/components/events/interfaces/togglableAddress.tsx
new file mode 100644
index 0000000000..bbb58384bc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/togglableAddress.tsx
@@ -0,0 +1,129 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import {formatAddress, parseAddress} from 'app/components/events/interfaces/utils';
+
+type Props = {
+  address: string;
+  startingAddress: string | null;
+  isAbsolute: boolean;
+  onToggle?: () => void;
+  isFoundByStackScanning: boolean;
+  isInlineFrame: boolean;
+  maxLengthOfRelativeAddress: number;
+};
+
+class TogglableAddress extends React.Component<Props> {
+  convertAbsoluteAddressToRelative() {
+    const {startingAddress, address, maxLengthOfRelativeAddress} = this.props;
+    if (!startingAddress) {
+      return '';
+    }
+
+    const relativeAddress = formatAddress(
+      parseAddress(address) - parseAddress(startingAddress),
+      maxLengthOfRelativeAddress
+    );
+
+    return `+${relativeAddress}`;
+  }
+
+  getAddressTooltip() {
+    const {isInlineFrame, isFoundByStackScanning} = this.props;
+
+    if (isInlineFrame && isFoundByStackScanning) {
+      return t('Inline frame, found by stack scanning');
+    }
+
+    if (isInlineFrame) {
+      return t('Inline frame');
+    }
+
+    if (isFoundByStackScanning) {
+      return t('Found by stack scanning');
+    }
+
+    return null;
+  }
+
+  render() {
+    const {
+      address,
+      isAbsolute,
+      onToggle,
+      isFoundByStackScanning,
+      isInlineFrame,
+    } = this.props;
+    const relativeAddress = this.convertAbsoluteAddressToRelative();
+
+    const formattedAddress = !relativeAddress || isAbsolute ? address : relativeAddress;
+
+    return (
+      <Address>
+        {onToggle && relativeAddress && (
+          <Tooltip title={isAbsolute ? t('Absolute') : t('Relative')}>
+            <Toggle className="icon-filter" onClick={onToggle} />
+          </Tooltip>
+        )}
+
+        <Tooltip
+          title={this.getAddressTooltip()}
+          disabled={!(isFoundByStackScanning || isInlineFrame)}
+        >
+          <AddressText
+            isFoundByStackScanning={isFoundByStackScanning}
+            isInlineFrame={isInlineFrame}
+          >
+            {formattedAddress}
+          </AddressText>
+        </Tooltip>
+      </Address>
+    );
+  }
+}
+
+const Toggle = styled('span')`
+  opacity: 0.33;
+  margin-right: 1ex;
+  cursor: pointer;
+  visibility: hidden;
+  position: relative;
+  top: 1px;
+
+  &:hover {
+    opacity: 1;
+  }
+`;
+
+const AddressText = styled('span')<Partial<Props>>`
+  border-bottom: ${p => {
+    if (p.isFoundByStackScanning) {
+      return `1px dashed ${p.theme.red}`;
+    } else if (p.isInlineFrame) {
+      return `1px dashed ${p.theme.blue}`;
+    } else {
+      return 'none';
+    }
+  }};
+`;
+
+const Address = styled('span')`
+  font-family: ${p => p.theme.text.familyMono};
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  color: ${p => p.theme.foreground};
+  letter-spacing: -0.25px;
+  width: 117px;
+  flex-grow: 0;
+  flex-shrink: 0;
+  display: block;
+  padding: 0 ${space(0.5)};
+
+  &:hover ${Toggle} {
+    visibility: visible;
+  }
+`;
+
+export default TogglableAddress;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/types.ts b/src/sentry/static/sentry/app/components/events/interfaces/types.ts
new file mode 100644
index 0000000000..1dd9a00eb3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/types.ts
@@ -0,0 +1,7 @@
+export enum SymbolicatorStatus {
+  SYMBOLICATED = 'symbolicated',
+  MISSING_SYMBOL = 'missing_symbol',
+  UNKNOWN_IMAGE = 'unknown_image',
+  MISSING = 'missing',
+  MALFORMED = 'malformed',
+}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 984498a314..97674afba3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -136,3 +136,15 @@ export function removeFilterMaskedEntries(rawData) {
   }
   return cleanedData;
 }
+
+export function formatAddress(address, imageAddressLength) {
+  return `0x${address.toString(16).padStart(imageAddressLength, '0')}`;
+}
+
+export function parseAddress(address) {
+  try {
+    return parseInt(address, 16) || 0;
+  } catch (_e) {
+    return 0;
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/searchInput.tsx b/src/sentry/static/sentry/app/components/forms/searchInput.tsx
new file mode 100644
index 0000000000..bdff766be8
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/searchInput.tsx
@@ -0,0 +1,73 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import InlineSvg from 'app/components/inlineSvg';
+import Input from 'app/components/forms/input';
+import space from 'app/styles/space';
+
+type Props = {
+  value: string;
+  onChange: ({target: {value: string}}) => void;
+  placeholder: string;
+  smaller?: boolean;
+};
+
+class SearchInput extends React.Component<Props> {
+  handleResetInput = () => {
+    this.props.onChange({target: {value: ''}});
+  };
+
+  render() {
+    const {placeholder, value, onChange, smaller} = this.props;
+    return (
+      <SearchWrapper smaller={smaller}>
+        <SearchIcon />
+        <SearchField placeholder={placeholder} value={value || ''} onChange={onChange} />
+        {value && value.length > 0 && (
+          <a onClick={this.handleResetInput}>
+            <SearchReset />
+          </a>
+        )}
+      </SearchWrapper>
+    );
+  }
+}
+
+const SearchIcon = styled(props => <InlineSvg src="icon-search" {...props} />)`
+  color: ${p => p.theme.gray2};
+  position: absolute;
+  z-index: 1;
+  left: 8px;
+`;
+const SearchField = styled(Input)`
+  padding-left: ${space(4)};
+  padding-right: ${space(4)};
+`;
+const SearchReset = styled(props => <InlineSvg src="icon-circle-close" {...props} />)`
+  color: ${p => p.theme.gray2};
+  position: absolute;
+  z-index: 1;
+  right: 8px;
+  opacity: 0.5;
+  transition: opacity 0.3s ease-in-out;
+
+  &:hover {
+    opacity: 1;
+  }
+`;
+
+const SearchWrapper = styled('div')<Partial<Props>>`
+  position: relative;
+  display: inline-block;
+  ${SearchIcon} {
+    top: ${p => (p.smaller ? '7px' : '11px')};
+  }
+  ${SearchField} {
+    height: ${p => (p.smaller ? '28px' : 'auto')};
+  }
+  ${SearchReset} {
+    top: ${p => (p.smaller ? '6px' : '10px')};
+  }
+`;
+
+export default SearchInput;
diff --git a/src/sentry/static/sentry/app/stores/debugMetaStore.jsx b/src/sentry/static/sentry/app/stores/debugMetaStore.jsx
new file mode 100644
index 0000000000..194173b9c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/debugMetaStore.jsx
@@ -0,0 +1,29 @@
+import Reflux from 'reflux';
+
+const DebugMetaActions = Reflux.createActions(['updateFilter']);
+
+const DebugMetaStore = Reflux.createStore({
+  init() {
+    this.reset();
+    this.listenTo(DebugMetaActions.updateFilter, this.updateFilter);
+  },
+
+  reset() {
+    this.filter = null;
+    this.trigger(this.get());
+  },
+
+  updateFilter(word) {
+    this.filter = word;
+    this.trigger(this.get());
+  },
+
+  get() {
+    return {
+      filter: this.filter,
+    };
+  },
+});
+
+export {DebugMetaActions, DebugMetaStore};
+export default DebugMetaStore;
diff --git a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
index 732146b20f..4138117f00 100644
--- a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
@@ -36,6 +36,17 @@ exports[`CrashContent renders with meta data 1`] = `
     mini={true}
   >
     <ExceptionContent
+      event={
+        Object {
+          "dateCreated": "2019-05-21T18:01:48.762Z",
+          "eventID": "12345678901234567890123456789012",
+          "groupID": "1",
+          "id": "1",
+          "message": "ApiException",
+          "tags": Array [],
+          "title": "ApiException",
+        }
+      }
       newestFirst={true}
       type="original"
       values={
@@ -178,6 +189,17 @@ exports[`CrashContent renders with meta data 1`] = `
                 "frames": Array [],
               }
             }
+            event={
+              Object {
+                "dateCreated": "2019-05-21T18:01:48.762Z",
+                "eventID": "12345678901234567890123456789012",
+                "groupID": "1",
+                "id": "1",
+                "message": "ApiException",
+                "tags": Array [],
+                "title": "ApiException",
+              }
+            }
             expandFirstFrame={true}
             includeSystemFrames={true}
             newestFirst={true}
