commit 8ce0ac7de4d679cdb34294d6b943ba13f0baa341
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 20 15:58:00 2016 -0700

    Make event-types feature public
    
    Removes the event-types feature switch
    
    /cc @getsentry/team

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 210d26ee7c..466dffb64d 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -60,7 +60,7 @@ class ProjectSerializer(Serializer):
         from sentry import features
 
         feature_list = []
-        for feature in ('breadcrumbs', 'csp', 'event-types', 'global-events', 'user-reports', 'dsym'):
+        for feature in ('breadcrumbs', 'csp', 'global-events', 'user-reports', 'dsym'):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
 
@@ -111,7 +111,7 @@ class SharedProjectSerializer(Serializer):
         from sentry import features
 
         feature_list = []
-        for feature in ('event-types', 'global-events', 'user-reports', 'dsym'):
+        for feature in ('global-events', 'user-reports', 'dsym'):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 94c7f7f41f..38a306555c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -616,7 +616,6 @@ SENTRY_FEATURES = {
     'organizations:create': True,
     'organizations:sso': True,
     'organizations:callsigns': False,
-    'projects:event-types': False,
     'projects:global-events': False,
     'projects:quotas': True,
     'projects:user-reports': False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index f31e039685..4d08a47af6 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -12,7 +12,6 @@ default_manager.add('organizations:sso', OrganizationFeature)
 default_manager.add('organizations:onboarding', OrganizationFeature)
 default_manager.add('organizations:callsigns', OrganizationFeature)
 default_manager.add('projects:breadcrumbs', ProjectFeature)
-default_manager.add('projects:event-types', ProjectFeature)
 default_manager.add('projects:global-events', ProjectFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 default_manager.add('projects:user-reports', ProjectFeature)
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index ba860376fb..0645dbf3ce 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -1,4 +1,3 @@
-import Raven from 'raven-js';
 import React from 'react';
 import Reflux from 'reflux';
 import {Link} from 'react-router';
@@ -9,7 +8,6 @@ import IndicatorStore from '../stores/indicatorStore';
 import DropdownLink from './dropdownLink';
 import GroupChart from './stream/groupChart';
 import GroupStore from '../stores/groupStore';
-import ProjectStore from '../stores/projectStore';
 import {t} from '../locale';
 
 const Snooze = {
@@ -85,15 +83,10 @@ const CompactIssueHeader = React.createClass({
     data: React.PropTypes.object.isRequired,
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
-    hasEventTypes: React.PropTypes.bool,
   },
 
   getTitle() {
     let data = this.props.data;
-    if (!this.props.hasEventTypes) {
-      return <span>{data.title}</span>;
-    }
-
     let metadata = data.metadata;
     switch (data.type) {
       case 'error':
@@ -119,10 +112,6 @@ const CompactIssueHeader = React.createClass({
 
   getMessage() {
     let data = this.props.data;
-    if (!this.props.hasEventTypes) {
-      return <span>{data.culprit}</span>;
-    }
-
     let metadata = data.metadata;
     switch (data.type) {
       case 'error':
@@ -251,23 +240,11 @@ const CompactIssue = React.createClass({
 
     let {id, orgId} = this.props;
     let projectId = issue.project.slug;
-
-    let project = ProjectStore.getBySlug(issue.project.slug);
-    let hasEventTypes = false;
-    if (project === undefined) {
-      Raven.captureMessage('project ' + issue.project.slug + ' not found in store on dashboard', {
-        fingerprint: ['project undefined dashboard']
-      });
-    } else {
-      hasEventTypes = new Set(project.features).has('event-types');
-    }
-
     let title = <span className="icon-more"></span>;
 
     return (
       <li className={className} onClick={this.toggleSelect}>
-        <CompactIssueHeader data={issue} orgId={orgId} projectId={projectId}
-                            hasEventTypes={hasEventTypes} />
+        <CompactIssueHeader data={issue} orgId={orgId} projectId={projectId} />
         {this.props.statsPeriod &&
           <div className="event-graph">
             <GroupChart id={id} statsPeriod={this.props.statsPeriod} />
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index ffa5d1936d..eea7687bee 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -20,15 +20,10 @@ const StreamGroupHeader = React.createClass({
     data: React.PropTypes.object.isRequired,
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
-    hasEventTypes: React.PropTypes.bool,
   },
 
   getTitle() {
     let data = this.props.data;
-    if (!this.props.hasEventTypes) {
-      return <span>{data.title}</span>;
-    }
-
     let metadata = data.metadata;
     switch (data.type) {
       case 'error':
@@ -54,10 +49,6 @@ const StreamGroupHeader = React.createClass({
 
   getMessage() {
     let data = this.props.data;
-    if (!this.props.hasEventTypes) {
-      return <span>{data.culprit}</span>;
-    }
-
     let metadata = data.metadata;
     switch (data.type) {
       case 'error':
@@ -160,7 +151,6 @@ const StreamGroup = React.createClass({
   render() {
     let data = this.state.data;
     let userCount = data.userCount;
-    let features = this.getProjectFeatures();
 
     let className = 'group row';
     if (data.isBookmarked) {
@@ -192,8 +182,7 @@ const StreamGroup = React.createClass({
           <StreamGroupHeader
             orgId={orgId}
             projectId={projectId}
-            data={data}
-            hasEventTypes={features.has('event-types')} />
+            data={data} />
           <div className="event-extra">
             <ul>
               {this.getFeatures().has('callsigns') && data.shortId &&
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index e1cff5c9e3..7a1e62afe7 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -73,12 +73,8 @@ const GroupHeader = React.createClass({
     });
   },
 
-  getTitle(hasEventTypes) {
+  getTitle() {
     let data = this.props.group;
-    if (!hasEventTypes) {
-      return <span>{data.title}</span>;
-    }
-
     let metadata = data.metadata;
     switch (data.type) {
       case 'error':
@@ -102,12 +98,8 @@ const GroupHeader = React.createClass({
     }
   },
 
-  getMessage(hasEventTypes) {
+  getMessage() {
     let data = this.props.group;
-    if (!hasEventTypes) {
-      return <span>{data.culprit}</span>;
-    }
-
     let metadata = data.metadata;
     switch (data.type) {
       case 'error':
@@ -142,22 +134,21 @@ const GroupHeader = React.createClass({
 
     let groupId = group.id,
       projectId = this.getProject().slug,
-      orgId = this.getOrganization().slug,
-      hasEventTypes = this.getProjectFeatures().has('event-types');
+      orgId = this.getOrganization().slug;
 
     return (
       <div className={className}>
         <div className="row">
           <div className="col-sm-8">
             <h3>
-              {this.getTitle(hasEventTypes)}
+              {this.getTitle()}
             </h3>
             <div className="event-message">
               <span className="error-level">{group.level}</span>
               {group.shortId &&
                 <ShortId shortId={group.shortId} />
               }
-              <span className="message">{this.getMessage(hasEventTypes)}</span>
+              <span className="message">{this.getMessage()}</span>
               {group.logger &&
                 <span className="event-annotation">
                   <Link to={`/${orgId}/${projectId}/`} query={{query: 'logger:' + group.logger}}>
