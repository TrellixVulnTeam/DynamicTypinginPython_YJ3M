commit 40fa200ce45477f82232695b7d8216abd5cc11a5
Author: Mark Story <mark@sentry.io>
Date:   Mon Apr 29 09:58:24 2019 -0400

    fix(jira) Fix option input type handling (#12964)
    
    We were not handling `option` type inputs at all, and mishandling
    allowedValues that did not contain either a `name` or `value` attribute.
    If an allowed value has a label we should use that for both the key
    & value as jira expects the string value back.
    
    Refs SEN-549

diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 4d3febda27..d1fe825336 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -310,8 +310,24 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
         except ApiError as e:
             self.raise_error(e)
 
-    def make_choices(self, x):
-        return [(y['id'], y['name'] if 'name' in y else y['value']) for y in x] if x else []
+    def make_choices(self, values):
+        if not values:
+            return []
+        results = []
+        for item in values:
+            key = item.get('id', None)
+            if 'name' in item:
+                value = item['name']
+            elif 'value' in item:
+                value = item['value']
+            elif 'label' in item:
+                # Label based options are appear to prefer the value on submit.
+                key = item['label']
+                value = item['label']
+            else:
+                continue
+            results.append((key, value))
+        return results
 
     def error_message_from_json(self, data):
         message = ''
@@ -375,6 +391,14 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
                     'default': ''
                 }
             )
+        elif schema['type'] == 'option' and len(field_meta.get('allowedValues', [])):
+            fieldtype = 'select'
+            fkwargs.update(
+                {
+                    'choices': self.make_choices(field_meta.get('allowedValues')),
+                    'default': ''
+                }
+            )
 
         # break this out, since multiple field types could additionally
         # be configured to use a custom property instead of a default.
@@ -585,10 +609,14 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
                     elif schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('multiuserpicker'):
                         # custom multi-picker
                         v = [{'name': v}]
-                    elif schema['type'] == 'array' and schema.get('items') != 'string':
-                        v = [{'id': vx} for vx in v]
+                    elif schema['type'] == 'array' and schema.get('items') == 'option':
+                        v = [{'value': vx} for vx in v]
                     elif schema['type'] == 'array' and schema.get('items') == 'string':
                         v = [v]
+                    elif schema['type'] == 'array' and schema.get('items') != 'string':
+                        v = [{'id': vx} for vx in v]
+                    elif schema['type'] == 'option':
+                        v = {'value': v}
                     elif schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('textarea'):
                         v = v
                     elif (schema['type'] == 'number' or
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 7ca22806e4..3e5c325904 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -58,6 +58,21 @@ SAMPLE_CREATE_META_RESPONSE = """
               },
               "name": "Labels",
               "key": "labels"
+            },
+            "customfield_10200": {
+              "operations": ["set"],
+              "required": false,
+              "schema": {
+                "type": "option",
+                "custom": "com.codebarrel.jira.iconselectlist:icon-select-cf",
+                "customId": 10200
+              },
+              "name": "Mood",
+              "hasDefaultValue": false,
+              "allowedValues": [
+                {"id": 10100, "label": "sad"},
+                {"id": 10101, "label": "happy"}
+              ]
             }
           }
         }
@@ -67,6 +82,7 @@ SAMPLE_CREATE_META_RESPONSE = """
 }
 """
 
+
 SAMPLE_PROJECT_LIST_RESPONSE = """
 [
   {
@@ -453,6 +469,13 @@ class JiraIntegrationTest(APITestCase):
                 'name': 'labels',
                 'label': 'Labels',
                 'default': '',
+            }, {
+                'required': False,
+                'type': 'select',
+                'name': 'customfield_10200',
+                'label': 'Mood',
+                'default': '',
+                'choices': [('sad', 'sad'), ('happy', 'happy')],
             }]
 
     def test_get_create_issue_config_with_default_and_param(self):
@@ -588,7 +611,7 @@ class JiraIntegrationTest(APITestCase):
             }
 
     @responses.activate
-    def test_create_issue_labels(self):
+    def test_create_issue_labels_and_option(self):
         org = self.organization
         self.login_as(self.user)
 
@@ -612,6 +635,7 @@ class JiraIntegrationTest(APITestCase):
         def responder(request):
             body = json.loads(request.body)
             assert body['fields']['labels'] == ['fuzzy', 'bunnies']
+            assert body['fields']['customfield_10200'] == {'value': 'sad'}
             return (200, {'content-type': 'application/json'}, '{"key":"APP-123"}')
 
         responses.add_callback(
@@ -626,6 +650,7 @@ class JiraIntegrationTest(APITestCase):
             'description': 'example bug report',
             'issuetype': '1',
             'project': '10000',
+            'customfield_10200': 'sad',
             'labels': 'fuzzy , ,  bunnies'
         })
         assert result['key'] == 'APP-123'
