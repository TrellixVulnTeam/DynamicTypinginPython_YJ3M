commit 312783bae9cd6ff8841eed606057ddbb5c3904bc
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 15 11:57:13 2015 -0700

    Expand error handling to orgDetails and groupDetails

diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 8776b8a11a..b71a69b196 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -9,6 +9,10 @@ import LoadingError from "../components/loadingError";
 import LoadingIndicator from "../components/loadingIndicator";
 import PropTypes from "../proptypes";
 
+const ERROR_TYPES = {
+  GROUP_NOT_FOUND: "GROUP_NOT_FOUND"
+};
+
 var GroupDetails = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
@@ -37,7 +41,8 @@ var GroupDetails = React.createClass({
     return {
       group: null,
       loading: true,
-      error: false
+      error: false,
+      errorType: null
     };
   },
 
@@ -46,23 +51,32 @@ var GroupDetails = React.createClass({
     this.fetchData();
   },
 
-  fetchData() {
-    this.setState({
-      loading: true,
-      error: false
-    });
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
 
+  fetchData() {
     api.request(this.getGroupDetailsEndpoint(), {
       success: (data) => {
         this.setState({
-          loading: false
+          loading: false,
+          error: false,
+          errorType: null
         });
 
         GroupStore.loadInitialData([data]);
-      }, error: () => {
+      }, error: (_, textStatus, errorThrown) => {
+        let errorType = null;
+        switch (errorThrown) {
+          case "NOT FOUND":
+            errorType = ERROR_TYPES.GROUP_NOT_FOUND;
+            break;
+          default:
+        }
         this.setState({
           loading: false,
-          error: true
+          error: true,
+          errorType: errorType
         });
       }
     });
@@ -93,10 +107,17 @@ var GroupDetails = React.createClass({
     var group = this.state.group;
     var params = this.context.router.getCurrentParams();
 
-    if (this.state.loading || !group)
+    if (this.state.error) {
+      switch (this.state.errorType) {
+        case ERROR_TYPES.GROUP_NOT_FOUND:
+          return (
+            <div className="alert alert-block">The issue you were looking for was not found.</div>
+          );
+        default:
+          return <LoadingError onRetry={this.remountComponent} />;
+      }
+    } else if (this.state.loading || !group)
       return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
 
     return (
       <DocumentTitle title={this.getTitle()}>
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 57db554f0e..94c38564d8 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -11,6 +11,10 @@ import PropTypes from "../proptypes";
 import RouteMixin from "../mixins/routeMixin";
 import TeamStore from "../stores/teamStore";
 
+const ERROR_TYPES = {
+  ORG_NOT_FOUND: "ORG_NOT_FOUND"
+};
+
 var OrganizationDetails = React.createClass({
   mixins: [
     RouteMixin
@@ -34,6 +38,7 @@ var OrganizationDetails = React.createClass({
     return {
       loading: true,
       error: false,
+      errorType: null,
       organization: null
     };
   },
@@ -46,33 +51,41 @@ var OrganizationDetails = React.createClass({
     TeamStore.reset();
   },
 
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
   routeDidChange(nextPath, nextParams) {
     var router = this.context.router;
     var params = router.getCurrentParams();
     if (nextParams.orgId != params.orgId) {
-      this.fetchData();
+      this.remountComponent();
     }
   },
 
   fetchData() {
-    this.setState({
-      loading: true,
-      error: false
-    });
-
     api.request(this.getOrganizationDetailsEndpoint(), {
       success: (data) => {
         this.setState({
           organization: data,
-          loading: false
+          loading: false,
+          error: false,
+          errorType: null
         });
 
         TeamStore.loadInitialData(data.teams);
-      },
-      error: () => {
+      }, error: (_, textStatus, errorThrown) => {
+        let errorType = null;
+        switch (errorThrown) {
+          case "NOT FOUND":
+            errorType = ERROR_TYPES.ORG_NOT_FOUND;
+            break;
+          default:
+        }
         this.setState({
           loading: false,
-          error: true
+          error: true,
+          errorType: errorType,
         });
       }
     });
@@ -97,8 +110,18 @@ var OrganizationDetails = React.createClass({
             Loading data for your organization.
           </LoadingIndicator>
         );
-    } else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    } else if (this.state.error) {
+      switch (this.state.errorType) {
+        case ERROR_TYPES.ORG_NOT_FOUND:
+          return (
+            <div className="container">
+              <div className="alert alert-block">The organization you were looking for was not found.</div>
+            </div>
+          );
+        default:
+          return <LoadingError onRetry={this.remountComponent} />;
+      }
+    }
 
     // Allow injection via getsentry et all
     var org = this.state.organization;
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 036263bbbc..c3039cc64e 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -55,32 +55,26 @@ var ProjectDetails = React.createClass({
     this.fetchData();
   },
 
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
   routeDidChange(nextPath, nextParams) {
     var router = this.context.router;
     var params = router.getCurrentParams();
     if (nextParams.projectId != params.projectId ||
         nextParams.orgId != params.orgId) {
-      this.setState({
-        loading: true,
-        error: false,
-        errorType: null,
-        project: null,
-        team: null
-      }, this.fetchData);
+      this.remountComponent();
     }
   },
 
   fetchData() {
     var org = this.getOrganization();
+    // TODO(dcramer): this should never happen
     if (!org) {
       return;
     }
 
-    this.setState({
-      loading: true,
-      error: false
-    });
-
     var router = this.context.router;
     var params = router.getCurrentParams();
     var projectSlug = params.projectId;
@@ -165,7 +159,7 @@ var ProjectDetails = React.createClass({
             </div>
           );
         default:
-          return <LoadingError onRetry={this.fetchData} />;
+          return <LoadingError onRetry={this.remountComponent} />;
       }
     }
 
