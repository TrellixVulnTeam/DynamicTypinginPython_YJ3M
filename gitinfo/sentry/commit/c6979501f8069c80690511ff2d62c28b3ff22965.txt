commit c6979501f8069c80690511ff2d62c28b3ff22965
Author: Mark Story <mark@sentry.io>
Date:   Fri Apr 26 11:08:04 2019 -0400

    ref: Only put un-deleted projects & teams into request.access (#12564)
    
    Only load visible teams and projects into request.access. This prevents
    situations where a user queues a project for deletion and continues to
    see that project inconsistently in different parts of the application.
    
    Both projects and teams have no cancel delete feature that would require
    permission checks to continue working for them.
    
    Fixes SEN-425

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index a8a27169be..3d3127d2f6 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -119,13 +119,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         return super(DetailedOrganizationSerializer, self).get_attrs(item_list, user)
 
     def _project_list(self, organization, access):
-        member_project_ids = []
-        member_projects = []
-        for project in access.projects:
-            if project.status == ProjectStatus.VISIBLE:
-                member_project_ids.append(project.id)
-                member_projects.append(project)
-
+        member_projects = list(access.projects)
+        member_project_ids = [p.id for p in member_projects]
         other_projects = list(Project.objects.filter(
             organization=organization,
             status=ProjectStatus.VISIBLE,
@@ -137,13 +132,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         return project_list
 
     def _team_list(self, organization, access):
-        member_team_ids = []
-        member_teams = []
-        for team in access.teams:
-            if team.status == TeamStatus.VISIBLE:
-                member_team_ids.append(team.id)
-                member_teams.append(team)
-
+        member_teams = list(access.teams)
+        member_team_ids = [p.id for p in member_teams]
         other_teams = list(Team.objects.filter(
             organization=organization,
             status=TeamStatus.VISIBLE,
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index 2e0c0fb029..9326f109f3 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -11,7 +11,8 @@ from sentry import roles
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
 from sentry.models import (
-    AuthIdentity, AuthProvider, OrganizationMember, Project, SentryApp, UserPermission
+    AuthIdentity, AuthProvider, OrganizationMember, Project, ProjectStatus,
+    SentryApp, UserPermission
 )
 
 
@@ -301,7 +302,10 @@ def from_sentry_app(user, organization=None):
         return NoAccess()
 
     team_list = list(sentry_app.teams.all())
-    project_list = list(Project.objects.filter(teams__in=team_list).distinct())
+    project_list = list(Project.objects.filter(
+        status=ProjectStatus.VISIBLE,
+        teams__in=team_list
+    ).distinct())
 
     return Access(
         scopes=sentry_app.scope_list,
@@ -347,7 +351,10 @@ def from_member(member, scopes=None):
     requires_sso, sso_is_valid = _sso_params(member)
 
     team_list = member.get_teams()
-    project_list = list(Project.objects.filter(teams__in=team_list).distinct())
+    project_list = list(Project.objects.filter(
+        status=ProjectStatus.VISIBLE,
+        teams__in=team_list
+    ).distinct())
 
     if scopes is not None:
         scopes = set(scopes) & member.get_scopes()
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 1740137f26..4935368151 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -23,8 +23,10 @@ from six.moves.urllib.parse import urlencode
 
 from sentry import roles
 from sentry.db.models import (
-    BaseModel, BoundedAutoField, BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
+    BaseModel, BoundedAutoField, BoundedPositiveIntegerField, FlexibleForeignKey,
+    Model, sane_repr
 )
+from sentry.models.team import TeamStatus
 from sentry.utils.http import absolute_uri
 
 INVITE_DAYS_VALID = 30
@@ -298,6 +300,7 @@ class OrganizationMember(Model):
         from sentry.models import Team
 
         return Team.objects.filter(
+            status=TeamStatus.VISIBLE,
             id__in=OrganizationMemberTeam.objects.filter(
                 organizationmember=self,
                 is_active=True,
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index 413960d24d..6c6ccea0ff 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -4,7 +4,7 @@ from django.contrib.auth.models import AnonymousUser
 from mock import Mock
 
 from sentry.auth import access
-from sentry.models import AuthProvider, AuthIdentity, Organization
+from sentry.models import AuthProvider, AuthIdentity, Organization, ObjectStatus
 from sentry.testutils import TestCase
 
 
@@ -26,6 +26,27 @@ class FromUserTest(TestCase):
         assert not result.has_project_scope(project, 'project:read')
         assert not result.has_project_membership(project)
 
+    def test_no_deleted_projects(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=self.user)
+
+        team = self.create_team(organization=organization)
+        self.create_member(
+            organization=organization,
+            user=user,
+            role='owner',
+            teams=[team]
+        )
+        project = self.create_project(
+            organization=organization,
+            status=ObjectStatus.PENDING_DELETION,
+            teams=[team])
+
+        result = access.from_user(user, organization)
+        assert result.has_project_access(project) is True
+        assert result.has_project_membership(project) is False
+        assert len(result.projects) == 0
+
     def test_unique_projects(self):
         user = self.create_user()
         organization = self.create_organization(owner=self.user)
@@ -252,6 +273,23 @@ class FromSentryAppTest(TestCase):
         result = access.from_sentry_app(self.proxy_user, self.out_of_scope_org)
         assert not result.has_team_access(self.out_of_scope_team)
 
+    def test_no_deleted_projects(self):
+        self.create_member(
+            organization=self.org,
+            user=self.user,
+            role='owner',
+            teams=[self.team]
+        )
+        project = self.create_project(
+            organization=self.org,
+            status=ObjectStatus.PENDING_DELETION,
+            teams=[self.team])
+
+        result = access.from_sentry_app(self.proxy_user, self.org)
+        assert result.has_project_access(project) is False
+        assert result.has_project_membership(project) is False
+        assert len(result.projects) == 0
+
 
 class DefaultAccessTest(TestCase):
     def test_no_access(self):
