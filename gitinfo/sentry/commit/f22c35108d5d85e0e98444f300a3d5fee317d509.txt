commit f22c35108d5d85e0e98444f300a3d5fee317d509
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Apr 7 10:38:29 2020 +0200

    ref: Remove InternalTransport (#18099)
    
    Follow-up to #17448 #18038
    
    We have set `store.use-relay-dsn-sample-rate` to 1 for a few days now and it seems to work fine.

diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 798dd71d6b..f46141ee66 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -226,8 +226,9 @@ register("discover2.max_tags_to_combine", default=3, flags=FLAG_PRIORITIZE_DISK)
 # disable datascrubbers.
 register("processing.can-use-scrubbers", default=True)
 
-# Sampling option to move over from reporting using the internal transport to
-# using a separate DSN
-# 0 => use tried and true internal transport
-# 1 => use relay_dsn in settings.SENTRY_SDK_CONFIG
-register("store.use-relay-dsn-sample-rate", default=0.0)
+# Killswitch for sending internal errors to the internal project or
+# `SENTRY_SDK_CONFIG.relay_dsn`. Set to `0` to only send to
+# `SENTRY_SDK_CONFIG.dsn` (the "upstream transport") and nothing else.
+#
+# Note: A value that is neither 0 nor 1 is regarded as 0
+register("store.use-relay-dsn-sample-rate", default=1)
diff --git a/src/sentry/utils/pytest/relay.py b/src/sentry/utils/pytest/relay.py
index 152c88c8b5..e13322c970 100644
--- a/src/sentry/utils/pytest/relay.py
+++ b/src/sentry/utils/pytest/relay.py
@@ -1,13 +1,17 @@
 # Fixutres used to interact with a test Relay server
 
 from __future__ import absolute_import
+
+import datetime
+import shutil
+import sys
+import time
 import pytest
 from os import path
+
 import six
 from six.moves.urllib.parse import urlparse
-import sys
-import datetime
-import shutil
+import requests
 
 from sentry.runner.commands.devservices import get_docker_client
 
@@ -102,11 +106,7 @@ def relay_server_setup(live_server, tmpdir_factory):
     }
 
     # Some structure similar to what the live_server fixture returns
-    server_info = {
-        "url": "http://127.0.0.1:{}".format(relay_port),
-        "is_started": False,
-        "options": options,
-    }
+    server_info = {"url": "http://127.0.0.1:{}".format(relay_port), "options": options}
 
     yield server_info
 
@@ -122,7 +122,17 @@ def relay_server(relay_server_setup):
     container_name = _relay_server_container_name()
     _remove_container_if_exists(docker_client, container_name)
     docker_client.containers.run(**options)
-    relay_server_setup["is_started"] = True
+
+    url = relay_server_setup["url"]
+
+    for i in range(5):
+        try:
+            requests.get(url)
+            break
+        except Exception:
+            time.sleep(0.1 * 2 ** i)
+    else:
+        raise ValueError("relay did not start in time")
 
     return {"url": relay_server_setup["url"]}
 
@@ -133,18 +143,3 @@ def get_relay_store_url(relay_server):
         return "{}/api/{}/store/".format(relay_server["url"], project_id)
 
     return relay_store_url
-
-
-@pytest.fixture(scope="function")
-def persistent_relay_server(relay_server_setup):
-    options = relay_server_setup["options"]
-
-    if not relay_server_setup["is_started"]:
-        # first time we use it in a test, everything should be
-        # already setup, sentry should be running and configured,
-        # just run relay
-        docker_client = get_docker_client()
-        docker_client.containers.run(**options)
-        relay_server_setup["is_started"] = True
-
-    return {"url": relay_server_setup["url"]}
diff --git a/src/sentry/utils/sdk.py b/src/sentry/utils/sdk.py
index d2d5d8aea3..e062ef291e 100644
--- a/src/sentry/utils/sdk.py
+++ b/src/sentry/utils/sdk.py
@@ -1,21 +1,15 @@
 from __future__ import absolute_import, print_function
 
-import random
 import inspect
-import json
 import logging
 import six
-import zlib
 
 from django.conf import settings
-from django.utils.functional import cached_property
 
 import sentry_sdk
 
 from sentry_sdk.client import get_options
-from sentry_sdk.transport import Transport, make_transport
-from sentry_sdk.consts import VERSION as SDK_VERSION
-from sentry_sdk.utils import Auth, capture_internal_exceptions
+from sentry_sdk.transport import make_transport
 from sentry_sdk.utils import logger as sdk_logger
 
 from sentry import options
@@ -118,12 +112,8 @@ def configure_sdk():
 
     sdk_options = dict(settings.SENTRY_SDK_CONFIG)
 
-    # if this flag is set then the internal transport is disabled.  This is useful
-    # for local testing in case the real python SDK behavior should be enforced.
-    #
-    # Make sure to pop all options that would be invalid for the SDK here
-    disable_internal_transport = sdk_options.pop("disable_internal_transport", False)
     relay_dsn = sdk_options.pop("relay_dsn", None)
+    internal_project_key = get_project_key()
     upstream_dsn = sdk_options.pop("dsn", None)
 
     if upstream_dsn:
@@ -131,13 +121,12 @@ def configure_sdk():
     else:
         upstream_transport = None
 
-    if not disable_internal_transport:
-        internal_transport = InternalTransport()
-    else:
-        internal_transport = None
-
     if relay_dsn:
         relay_transport = make_transport(get_options(dsn=relay_dsn, **sdk_options))
+    elif internal_project_key and internal_project_key.dsn_private:
+        relay_transport = make_transport(
+            get_options(dsn=internal_project_key.dsn_private, **sdk_options)
+        )
     else:
         relay_transport = None
 
@@ -158,22 +147,13 @@ def configure_sdk():
             #     event.setdefault('tags', {})['install-id'] = install_id
             upstream_transport.capture_event(event)
 
-        if relay_transport:
-            rate = options.get("store.use-relay-dsn-sample-rate")
-            if rate and random.random() < rate:
-                # Record this before calling `is_current_event_safe` to make
-                # numbers comparable to InternalTransport
+        if relay_transport and options.get("store.use-relay-dsn-sample-rate") == 1:
+            if is_current_event_safe():
                 metrics.incr("internal.captured.events.relay")
-                if is_current_event_safe():
-                    relay_transport.capture_event(event)
-                else:
-                    metrics.incr("internal.uncaptured.events.relay", skip_internal=False)
-                    sdk_logger.warn("internal-error.unsafe-stacktrace.relay")
-                return
-
-        if internal_transport:
-            metrics.incr("internal.captured.events.internal")
-            internal_transport.capture_event(event)
+                relay_transport.capture_event(event)
+            else:
+                metrics.incr("internal.uncaptured.events.relay", skip_internal=False)
+                sdk_logger.warn("internal-error.unsafe-stacktrace.relay")
 
     sentry_sdk.init(
         transport=capture_event,
@@ -188,89 +168,6 @@ def configure_sdk():
     )
 
 
-def _create_noop_hub():
-    def transport(event):
-        with capture_internal_exceptions():
-            metrics.incr("internal.uncaptured.events.noop-hub", skip_internal=False)
-            sdk_logger.warn("internal-error.noop-hub")
-
-    return sentry_sdk.Hub(sentry_sdk.Client(transport=transport))
-
-
-NOOP_HUB = _create_noop_hub()
-del _create_noop_hub
-
-
-class InternalTransport(Transport):
-    def __init__(self):
-        pass
-
-    @cached_property
-    def project_key(self):
-        return get_project_key()
-
-    @cached_property
-    def request_factory(self):
-        from django.test import RequestFactory
-
-        return RequestFactory()
-
-    def capture_event(self, event):
-        # Disable the SDK while processing our own events. This fixes some
-        # recursion issues when the view crashes without including any
-        # UNSAFE_FILES
-        #
-        # NOTE: UNSAFE_FILES still exists because the hub does not follow the
-        # execution flow into the celery job triggered by StoreView. In other
-        # words, UNSAFE_FILES is used in case the celery job for crashes and
-        # that error is captured by the SDK.
-        with sentry_sdk.Hub(NOOP_HUB):
-            return self._capture_event(event)
-
-    def _capture_event(self, event):
-        with capture_internal_exceptions():
-            key = self.project_key
-            if key is None:
-                return
-
-            if not is_current_event_safe():
-                metrics.incr("internal.uncaptured.events", skip_internal=False)
-                sdk_logger.warn("internal-error.unsafe-stacktrace")
-                return
-
-            auth = Auth(
-                scheme="https",
-                host="localhost",
-                project_id=key.project_id,
-                public_key=key.public_key,
-                secret_key=key.secret_key,
-                client="sentry-python/%s" % SDK_VERSION,
-            )
-
-            headers = {"HTTP_X_SENTRY_AUTH": auth.to_header(), "HTTP_CONTENT_ENCODING": "deflate"}
-
-            request = self.request_factory.post(
-                "/api/{}/store/".format(key.project_id),
-                data=zlib.compress(json.dumps(event).encode("utf8")),
-                content_type="application/octet-stream",
-                **headers
-            )
-
-            from sentry.web.api import StoreView
-
-            resp = StoreView.as_view()(request, project_id=six.text_type(key.project_id))
-
-            if resp.status_code != 200:
-                sdk_logger.warn(
-                    "internal-error.invalid-response",
-                    extra={
-                        "project_id": settings.SENTRY_PROJECT,
-                        "project_key": settings.SENTRY_PROJECT_KEY,
-                        "status_code": resp.status_code,
-                    },
-                )
-
-
 class RavenShim(object):
     """Wrapper around sentry-sdk in case people are writing their own
     integrations that rely on this being here."""
diff --git a/tests/sentry/utils/test_sdk.py b/tests/sentry/utils/test_sdk.py
index b7d2325ed5..94e9a37a08 100644
--- a/tests/sentry/utils/test_sdk.py
+++ b/tests/sentry/utils/test_sdk.py
@@ -1,102 +1,110 @@
 from __future__ import absolute_import, print_function
 
-from sentry_sdk import Hub
+import pytest
+
+from sentry_sdk import Hub, last_event_id
 
 from django.conf import settings
 from sentry.utils.sdk import configure_sdk, bind_organization_context
 from sentry.utils.compat import mock
 from sentry.app import raven
 
-from sentry.eventstore.models import Event
-from sentry.testutils import TestCase, assert_mock_called_once_with_partial
-from sentry import nodestore
+from sentry import eventstore
+from sentry.testutils import assert_mock_called_once_with_partial
+from sentry.testutils.relay import adjust_settings_for_relay_tests
+
 
+@pytest.fixture
+def post_event_with_sdk(settings, relay_server, wait_for_ingest_consumer):
+    adjust_settings_for_relay_tests(settings)
+    settings.SENTRY_ENDPOINT = relay_server["url"]
 
-class SentryInternalClientTest(TestCase):
-    def test_simple(self):
-        configure_sdk()
-        Hub.current.bind_client(Hub.main.client)
+    configure_sdk()
 
-        with self.tasks():
-            event_id = raven.captureMessage("internal client test")
+    wait_for_ingest_consumer = wait_for_ingest_consumer(settings)
 
-        event = nodestore.get(Event.generate_node_id(settings.SENTRY_PROJECT, event_id))
+    def inner(*args, **kwargs):
+        event_id = raven.captureMessage(*args, **kwargs)
+        Hub.current.client.flush()
 
-        assert event["project"] == settings.SENTRY_PROJECT
-        assert event["event_id"] == event_id
-        assert event["logentry"]["formatted"] == "internal client test"
+        return wait_for_ingest_consumer(
+            lambda: eventstore.get_event_by_id(settings.SENTRY_PROJECT, event_id)
+        )
 
-    def test_recursion_breaker(self):
-        configure_sdk()
-        Hub.current.bind_client(Hub.main.client)
+    return inner
 
-        # If this test terminates at all then we avoided recursion.
-        with self.tasks():
-            with mock.patch(
-                "sentry.event_manager.EventManager.save", side_effect=ValueError("oh no!")
-            ) as save:
-                event_id = raven.captureMessage("internal client test")
 
-        event = nodestore.get(Event.generate_node_id(settings.SENTRY_PROJECT, event_id))
-        assert event is None
+@pytest.mark.django_db
+def test_simple(post_event_with_sdk):
+    event = post_event_with_sdk("internal client test")
 
-        assert_mock_called_once_with_partial(
-            save, settings.SENTRY_PROJECT, cache_key=u"e:{}:1".format(event_id)
-        )
+    assert event
+    assert event.data["project"] == settings.SENTRY_PROJECT
+    assert event.data["event_id"] == last_event_id()
+    assert event.data["logentry"]["formatted"] == "internal client test"
+
+
+@pytest.mark.django_db
+def test_recursion_breaker(post_event_with_sdk):
+    # If this test terminates at all then we avoided recursion.
+    with mock.patch(
+        "sentry.event_manager.EventManager.save", side_effect=ValueError("oh no!")
+    ) as save:
+        with pytest.raises(ValueError):
+            post_event_with_sdk("internal client test")
+
+    assert_mock_called_once_with_partial(
+        save, settings.SENTRY_PROJECT, cache_key=u"e:{}:1".format(last_event_id())
+    )
 
-    def test_encoding(self):
-        configure_sdk()
-        Hub.current.bind_client(Hub.main.client)
 
-        class NotJSONSerializable:
-            pass
+@pytest.mark.django_db
+def test_encoding(post_event_with_sdk):
+    class NotJSONSerializable:
+        pass
 
-        with self.tasks():
-            event_id = raven.captureMessage(
-                "check the req", extra={"request": NotJSONSerializable()}
-            )
+    event = post_event_with_sdk("check the req", extra={"request": NotJSONSerializable()})
 
-        event = nodestore.get(Event.generate_node_id(settings.SENTRY_PROJECT, event_id))
+    assert event.data["project"] == settings.SENTRY_PROJECT
+    assert event.data["logentry"]["formatted"] == "check the req"
+    assert "NotJSONSerializable" in event.data["extra"]["request"]
 
-        assert event["project"] == settings.SENTRY_PROJECT
-        assert event["logentry"]["formatted"] == "check the req"
-        assert "NotJSONSerializable" in event["extra"]["request"]
 
-    def test_bind_organization_context(self):
-        configure_sdk()
-        Hub.current.bind_client(Hub.main.client)
+@pytest.mark.django_db
+def test_bind_organization_context(default_organization):
+    configure_sdk()
 
-        org = self.create_organization()
-        bind_organization_context(org)
+    bind_organization_context(default_organization)
 
-        assert Hub.current.scope._tags["organization"] == org.id
-        assert Hub.current.scope._tags["organization.slug"] == org.slug
-        assert Hub.current.scope._contexts["organization"] == {"id": org.id, "slug": org.slug}
+    assert Hub.current.scope._tags["organization"] == default_organization.id
+    assert Hub.current.scope._tags["organization.slug"] == default_organization.slug
+    assert Hub.current.scope._contexts["organization"] == {
+        "id": default_organization.id,
+        "slug": default_organization.slug,
+    }
 
-    def test_bind_organization_context_with_callback(self):
-        configure_sdk()
-        Hub.current.bind_client(Hub.main.client)
 
-        org = self.create_organization()
+@pytest.mark.django_db
+def test_bind_organization_context_with_callback(settings, default_organization):
+    configure_sdk()
 
-        def add_context(scope, organization, **kwargs):
-            scope.set_tag("organization.test", "1")
+    def add_context(scope, organization, **kwargs):
+        scope.set_tag("organization.test", "1")
 
-        with self.settings(SENTRY_ORGANIZATION_CONTEXT_HELPER=add_context):
-            bind_organization_context(org)
+    settings.SENTRY_ORGANIZATION_CONTEXT_HELPER = add_context
+    bind_organization_context(default_organization)
 
-        assert Hub.current.scope._tags["organization.test"] == "1"
+    assert Hub.current.scope._tags["organization.test"] == "1"
 
-    def test_bind_organization_context_with_callback_error(self):
-        configure_sdk()
-        Hub.current.bind_client(Hub.main.client)
 
-        org = self.create_organization()
+@pytest.mark.django_db
+def test_bind_organization_context_with_callback_error(settings, default_organization):
+    configure_sdk()
 
-        def add_context(scope, organization, **kwargs):
-            1 / 0
+    def add_context(scope, organization, **kwargs):
+        1 / 0
 
-        with self.settings(SENTRY_ORGANIZATION_CONTEXT_HELPER=add_context):
-            bind_organization_context(org)
+    settings.SENTRY_ORGANIZATION_CONTEXT_HELPER = add_context
+    bind_organization_context(default_organization)
 
-        assert Hub.current.scope._tags["organization"] == org.id
+    assert Hub.current.scope._tags["organization"] == default_organization.id
