commit b85284b293663b4dd62ae4ca0462074ac3d8b897
Author: Ben Vinegar <ben@benv.ca>
Date:   Tue Sep 29 13:21:09 2015 -0700

    Fix user/assigned tag filter

diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index 6fe966225d..a48824b8c7 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -42,4 +42,3 @@ var MemberListStore = Reflux.createStore({
 });
 
 export default MemberListStore;
-
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index ef7210abb8..57e30a96f5 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -3,11 +3,12 @@ import _ from "underscore";
 
 import StreamTagActions from "../actions/streamTagActions";
 import MemberListStore from "./memberListStore";
-
 var StreamTagStore = Reflux.createStore({
   listenables: StreamTagActions,
 
   init: function() {
+    this.listenTo(MemberListStore, this.onMemberListStoreChange);
+
     this.tags = {
       is: {
         key: 'is',
@@ -22,29 +23,32 @@ var StreamTagStore = Reflux.createStore({
       assigned: {
         key: 'assigned',
         name: 'User',
-        values: MemberListStore.getAll().map(user => {
-          return user.email;
-        }),
+        values: MemberListStore.getAll().map(user => user.email),
         predefined: true
       }
     };
   },
 
-  reset: function() {
-
-  },
-
   getTag(tagName) {
     return this.tags[tagName];
   },
 
+  getAllTags() {
+    return this.tags;
+  },
+
   getTagValues(tagKey, query) {
     return this.tags[tagKey].values || [];
   },
 
   onLoadTagsSuccess(data) {
     Object.assign(this.tags, _.reduce(data, (obj, tag) => {
+      tag = Object.assign({
+        values: []
+      }, tag);
+
       obj[tag.key] = tag;
+
       return obj;
     }, {}));
 
@@ -61,6 +65,12 @@ var StreamTagStore = Reflux.createStore({
       tag.values = data;
 
     this.trigger([tag]);
+  },
+
+  onMemberListStoreChange(members) {
+    let assignedTag = this.tags.assigned;
+    assignedTag.values = MemberListStore.getAll().map(user => user.email);
+    this.trigger([assignedTag]);
   }
 });
 
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 190f4b78ca..1be7b208ce 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -62,7 +62,7 @@ var Stream = React.createClass({
       query: this.props.defaultQuery,
       sort: this.props.defaultSort,
       filter: {},
-      tags: {},
+      tags: StreamTagStore.getAllTags(),
       isSidebarVisible: false
     }, this.getQueryStringState());
   },
@@ -275,11 +275,12 @@ var Stream = React.createClass({
   },
 
   onStreamTagChange(tags) {
+    // new object to trigger state change
     this.setState({
-      tags: tags.reduce((obj, tag) => {
+      tags: Object.assign({}, tags.reduce((obj, tag) => {
         obj[tag.key] = tag;
         return obj;
-      }, this.state.tags)
+      }, this.state.tags))
     });
   },
 
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 5225091d7c..884b3adf03 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -1,14 +1,7 @@
 import React from "react";
-import Reflux from "reflux";
 import _ from "underscore";
 
-import StreamTagStore from "../../stores/streamTagStore";
-
 var StreamTagFilter = React.createClass({
-  mixins: [
-    Reflux.listenTo(StreamTagStore, "onStreamTagChange")
-  ],
-
   contextTypes: {
     router: React.PropTypes.func
   },
@@ -26,7 +19,6 @@ var StreamTagFilter = React.createClass({
 
   getInitialState() {
     return {
-      tagValues: this.props.tag.values || [],
       query: '',
       loading: false,
       selectedValue: this.props.initialValue,
@@ -102,7 +94,6 @@ var StreamTagFilter = React.createClass({
 
   render() {
     let tag = this.props.tag;
-
     return (
       <div className="stream-tag-filter">
         <h6 className="nav-header">{tag.name}</h6>
@@ -111,7 +102,7 @@ var StreamTagFilter = React.createClass({
 
           <select ref="select" value={this.props.initialValue}>
             <option></option>
-            {this.state.tagValues.map((val) => {
+            {this.props.tag.values.map((val) => {
               return (
                 <option key={val}>{val}</option>
               );
