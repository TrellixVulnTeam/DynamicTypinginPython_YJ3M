commit 5e6508f82a07b3c26620a2be9ff22e6b04a3da02
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Mar 12 14:44:53 2018 -0700

    feat(owners): Owners notifications (#7503)
    
    * Just putting all the things I've done on github. mailplugin changes to owner first attempt.
    
    * removed notify_event_service and notify_event tests becasue they seemed unnecessary given my changes.
    
    * Made changes specific to the mail plugin.
    
    * removed remainign code for plugin wide ownership changes. Used methods that are in progress tests will fail.
    
    * Added tests and such to use the projectownership stuff.
    
    * Removed comment.
    
    * Added Rule from ownership gramar to setup method.
    
    * Corrected the case where owners is an empty list to the desired behavior.
    
    * Fixed mail test.
    
    * gave group in tests a generated next id
    
    * added metrics to the send_to function.
    
    * Added skip internal flag to metrics
    
    * changed the owners assignment line to account for changes in the project ownership get owners method.
    
    * Added is_Active filter to send_to_list query. Moved user model import to module level.
    
    * revised metrics based on jame's feedback.

diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index ad47b611fc..b1c5da489a 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -19,10 +19,13 @@ from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
 from sentry import features, options
+from sentry.models import ProjectOwnership, User
+
 from sentry.digests.utilities import get_digest_metadata
 from sentry.plugins import register
 from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
+from sentry.utils import metrics
 from sentry.utils.cache import cache
 from sentry.utils.committers import get_event_file_committers
 from sentry.utils.email import MessageBuilder, group_id_to_email
@@ -112,7 +115,7 @@ class MailPlugin(NotificationPlugin):
 
         return super(MailPlugin, self).should_notify(group, event)
 
-    def get_send_to(self, project):
+    def get_send_to(self, project, event=None):
         """
         Returns a list of user IDs for the users that should receive
         notifications for the provided project.
@@ -123,6 +126,53 @@ class MailPlugin(NotificationPlugin):
             logger.debug('Tried to send notification to invalid project: %r', project)
             return []
 
+        if event:
+            owners, _ = ProjectOwnership.get_owners(project.id, event.data)
+            if owners != ProjectOwnership.Everyone:
+                if not owners:
+                    metrics.incr(
+                        'features.owners.send_to',
+                        tags={
+                            'organization': project.organization_id,
+                            'outcome': 'empty',
+                        },
+                        skip_internal=True,
+                    )
+                    return []
+
+                metrics.incr(
+                    'features.owners.send_to',
+                    tags={
+                        'organization': project.organization_id,
+                        'outcome': 'match',
+                    },
+                    skip_internal=True,
+                )
+                send_to_list = []
+                teams_to_resolve = []
+                for owner in owners:
+                    if owner.type == User:
+                        send_to_list.append(owner.id)
+                    else:
+                        teams_to_resolve.append(owner.id)
+
+                # get all users in teams
+                if teams_to_resolve:
+                    send_to_list += User.objects.filter(
+                        is_active=True,
+                        sentry_orgmember_set__organizationmemberteam__team__id__in=teams_to_resolve,
+                    ).values_list('id', flat=True)
+                return send_to_list
+            else:
+                metrics.incr(
+                    'features.owners.send_to',
+                    tags={
+                        'organization': project.organization_id,
+                        'outcome': 'everyone',
+                    },
+                    skip_internal=True,
+                )
+
         cache_key = '%s:send_to:%s' % (self.get_conf_key(), project.pk)
         send_to_list = cache.get(cache_key)
         if send_to_list is None:
@@ -144,6 +194,7 @@ class MailPlugin(NotificationPlugin):
         from sentry.models import Commit, Release
 
         event = notification.event
+
         group = event.group
         project = group.project
         org = group.organization
@@ -215,7 +266,7 @@ class MailPlugin(NotificationPlugin):
             'X-Sentry-Reply-To': group_id_to_email(group.id),
         }
 
-        for user_id in self.get_send_to(project):
+        for user_id in self.get_send_to(project=project, event=event):
             self.add_unsubscribe_link(context, user_id, project)
             self._send_mail(
                 subject=subject,
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
index 0470cc9c58..ac30be81fc 100644
--- a/src/sentry/rules/actions/notify_event.py
+++ b/src/sentry/rules/actions/notify_event.py
@@ -1,6 +1,7 @@
 """
 sentry.rules.actions.notify_event
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Used for notifying *all* enabled plugins
 
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
index 79ad47e762..931caee604 100644
--- a/src/sentry/rules/actions/notify_event_service.py
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -1,6 +1,7 @@
 """
 sentry.rules.actions.notify_event_service
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Used for notifying a *specific* plugin
 
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 9f52e89814..6925520b14 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -19,9 +19,10 @@ from sentry.api.serializers import (
 from sentry.digests.notifications import build_digest, event_to_record
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import (
-    Activity, Event, Group, GroupSubscription, OrganizationMember, OrganizationMemberTeam, Rule,
-    UserOption, UserReport
+    Activity, Event, Group, GroupSubscription, OrganizationMember, OrganizationMemberTeam,
+    ProjectOwnership, Rule, UserOption, UserReport
 )
+from sentry.ownership.grammar import Owner, Matcher, dump_schema
 from sentry.plugins import Notification
 from sentry.plugins.sentry_mail.activity.base import ActivityEmail
 from sentry.plugins.sentry_mail.models import MailPlugin
@@ -480,3 +481,157 @@ class ActivityEmailTestCase(TestCase):
             get_value.side_effect = lambda project, key, default=None: \
                 "[Example prefix] " if key == "mail:subject_prefix" else default
             assert email.get_subject_with_prefix().startswith('[Example prefix] ')
+
+
+class MailPluginOwnersTest(TestCase):
+    @fixture
+    def plugin(self):
+        return MailPlugin()
+
+    def setUp(self):
+        from sentry.ownership.grammar import Rule
+        self.user = self.create_user(email='foo@example.com', is_active=True)
+        self.user2 = self.create_user(email='baz@example.com', is_active=True)
+
+        self.organization = self.create_organization(owner=self.user)
+        self.team = self.create_team(organization=self.organization)
+
+        self.project = self.create_project(name='Test', teams=[self.team])
+        OrganizationMemberTeam.objects.create(
+            organizationmember=OrganizationMember.objects.get(
+                user=self.user,
+                organization=self.organization,
+            ),
+            team=self.team,
+        )
+        self.create_member(user=self.user2, organization=self.organization, teams=[self.team])
+        self.group = self.create_group(
+            first_seen=timezone.now(),
+            last_seen=timezone.now(),
+            project=self.project,
+            message='hello  world',
+            logger='root',
+        )
+        ProjectOwnership.objects.create(
+            project_id=self.project.id,
+            schema=dump_schema([
+                Rule(Matcher('path', '*.py'), [
+                    Owner('team', self.team.slug),
+                ]),
+                Rule(Matcher('path', '*.jx'), [
+                    Owner('user', self.user2.email),
+                ]),
+                Rule(Matcher('path', '*.cbl'), [
+                    Owner('user', self.user.email),
+                    Owner('user', self.user2.email),
+                ])
+            ]),
+            fallthrough=True,
+        )
+
+    def make_event_data(self, filename, url='http://example.com'):
+        data = {
+            'tags': [('level', 'error')],
+            'sentry.interfaces.Stacktrace': {
+                'frames': [
+                    {
+                        'lineno': 1,
+                        'filename': filename,
+                    },
+                ],
+            },
+            'sentry.interfaces.Http': {
+                'url': url
+            },
+        }
+        return data
+
+    def assert_notify(self, event, emails_sent_to):
+        mail.outbox = []
+        with self.options({'system.url-prefix': 'http://example.com'}), self.tasks():
+            self.plugin.notify(Notification(event=event))
+        assert len(mail.outbox) == len(emails_sent_to)
+        assert sorted(email.to[0] for email in mail.outbox) == sorted(emails_sent_to)
+
+    def test_get_send_to_with_team_owners(self):
+        event = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.py')
+        )
+        assert (sorted(set([self.user.pk, self.user2.pk])) == sorted(
+            self.plugin.get_send_to(self.project, event.data)))
+
+    def test_get_send_to_with_user_owners(self):
+        event = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.cbl')
+        )
+        assert (sorted(set([self.user.pk, self.user2.pk])) == sorted(
+            self.plugin.get_send_to(self.project, event.data)))
+
+    def test_get_send_to_with_user_owner(self):
+        event = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.jx')
+        )
+        assert (sorted(set([self.user2.pk])) == sorted(
+            self.plugin.get_send_to(self.project, event.data)))
+
+    def test_get_send_to_with_fallthrough(self):
+        event = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.jx')
+        )
+        assert (sorted(set([self.user2.pk])) == sorted(
+            self.plugin.get_send_to(self.project, event.data)))
+
+    def test_get_send_to_without_fallthrough(self):
+        ProjectOwnership.objects.get(project_id=self.project.id).update(fallthrough=False)
+        event = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.cpp')
+        )
+        assert [] == sorted(self.plugin.get_send_to(self.project, event.data))
+
+    def test_notify_users_with_owners(self):
+        event_all_users = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.cbl'),
+        )
+        self.assert_notify(event_all_users, [self.user.email, self.user2.email])
+
+        event_team = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.py'),
+        )
+        self.assert_notify(event_team, [self.user.email, self.user2.email])
+
+        event_single_user = Event(
+            group=self.group,
+            message=self.group.message,
+            project=self.project,
+            datetime=self.group.last_seen,
+            data=self.make_event_data('foo.jx'),
+        )
+        self.assert_notify(event_single_user, [self.user2.email])
