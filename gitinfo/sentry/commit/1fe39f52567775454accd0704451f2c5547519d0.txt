commit 1fe39f52567775454accd0704451f2c5547519d0
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 11 02:23:34 2015 -0700

    Ensure Project.member_set does not include inactive members

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 485609fac3..e60ff7f178 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -200,9 +200,12 @@ class Project(Model):
         from sentry.models import OrganizationMember
 
         return OrganizationMember.objects.filter(
-            Q(teams=self.team) | Q(has_global_access=True),
+            Q(organizationmemberteam__team=self.team) | Q(has_global_access=True),
             user__is_active=True,
             organization=self.organization,
+        ).exclude(
+            organizationmemberteam__team=self.team,
+            organizationmemberteam__is_active=False,
         ).distinct()
 
     def has_access(self, user, access=None):
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
new file mode 100644
index 0000000000..5b6f3b39cb
--- /dev/null
+++ b/tests/sentry/models/test_project.py
@@ -0,0 +1,66 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import OrganizationMember, OrganizationMemberTeam
+from sentry.testutils import TestCase
+
+
+class ProjectTest(TestCase):
+    def test_global_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team)
+        member = OrganizationMember.objects.get(
+            user=user,
+            organization=org,
+        )
+
+        assert list(project.member_set.all()) == [member]
+
+    def test_inactive_global_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team)
+        member = OrganizationMember.objects.get(
+            user=user,
+            organization=org,
+        )
+        OrganizationMemberTeam.objects.create(
+            organizationmember=member,
+            team=team,
+            is_active=False
+        )
+
+        assert list(project.member_set.all()) == []
+
+    def test_active_basic_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team)
+        user2 = self.create_user('foo@example.com')
+        member = self.create_member(
+            user=user2,
+            organization=org,
+            has_global_access=False,
+            teams=[team]
+        )
+
+        assert member in project.member_set.all()
+
+    def test_teamless_basic_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(team=team)
+        user2 = self.create_user('foo@example.com')
+        member = self.create_member(
+            user=user2,
+            organization=org,
+            has_global_access=False,
+        )
+
+        assert member not in project.member_set.all()
