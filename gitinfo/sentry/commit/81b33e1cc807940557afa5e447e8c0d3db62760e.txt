commit 81b33e1cc807940557afa5e447e8c0d3db62760e
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 28 10:00:41 2017 -0800

    ci: Make superuser opt-in for tests

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index cf7ca6bd80..b183b8ef01 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -129,7 +129,7 @@ class BaseTestCase(Fixtures, Exam):
 
     # TODO(dcramer): we want to make the default behavior be ``superuser=False``
     # but for compatibility reasons we need to update other projects first
-    def login_as(self, user, organization_id=None, superuser=True):
+    def login_as(self, user, organization_id=None, superuser=False):
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
         request = self.make_request()
@@ -141,7 +141,8 @@ class BaseTestCase(Fixtures, Exam):
         # want that action to be explicit to avoid accidentally testing
         # superuser-only code
         if not superuser:
-            request.superuser.set_logged_out()
+            # XXX(dcramer): we're calling the internal method to avoid logging
+            request.superuser._set_logged_out()
         elif request.user.is_superuser and superuser:
             request.superuser.set_logged_in(request.user)
             # XXX(dcramer): awful hack to ensure future attempts to instantiate
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index e71e7fb436..a707e36603 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -216,15 +216,11 @@ class Fixtures(object):
             group=self.group, project=self.project, type=Activity.NOTE, user=self.user, data={}
         )
 
-    def create_organization(self, **kwargs):
-        if not kwargs.get('name'):
-            kwargs['name'] = petname.Generate(2, ' ', letters=10).title()
-
-        owner = kwargs.pop('owner', -1)
-        if owner is -1:
-            owner = self.user
+    def create_organization(self, name=None, owner=None, **kwargs):
+        if not name:
+            name = petname.Generate(2, ' ', letters=10).title()
 
-        org = Organization.objects.create(**kwargs)
+        org = Organization.objects.create(name=name, **kwargs)
         if owner:
             self.create_member(
                 organization=org,
@@ -239,13 +235,28 @@ class Fixtures(object):
         om = OrganizationMember.objects.create(**kwargs)
         if teams:
             for team in teams:
-                OrganizationMemberTeam.objects.create(
+                self.create_team_membership(
                     team=team,
-                    organizationmember=om,
-                    is_active=True,
+                    member=om,
                 )
         return om
 
+    def create_team_membership(self, team, member=None, user=None):
+        if member is None:
+            member, _ = OrganizationMember.objects.get_or_create(
+                user=user,
+                organization=team.organization,
+                defaults={
+                    'role': 'member',
+                }
+            )
+
+        return OrganizationMemberTeam.objects.create(
+            team=team,
+            organizationmember=member,
+            is_active=True,
+        )
+
     def create_team(self, **kwargs):
         if not kwargs.get('name'):
             kwargs['name'] = petname.Generate(2, ' ', letters=10).title()
@@ -253,8 +264,13 @@ class Fixtures(object):
             kwargs['slug'] = slugify(six.text_type(kwargs['name']))
         if not kwargs.get('organization'):
             kwargs['organization'] = self.organization
+        members = kwargs.pop('members', None)
 
-        return Team.objects.create(**kwargs)
+        team = Team.objects.create(**kwargs)
+        if members:
+            for user in members:
+                self.create_team_membership(team=team, user=user)
+        return team
 
     def create_environment(self, **kwargs):
         project = kwargs.get('project', self.project)
diff --git a/tests/acceptance/test_organization_stats.py b/tests/acceptance/test_organization_stats.py
index addb8648dd..e73c2fb58a 100644
--- a/tests/acceptance/test_organization_stats.py
+++ b/tests/acceptance/test_organization_stats.py
@@ -9,21 +9,12 @@ class OrganizationStatsTest(AcceptanceTestCase):
     def setUp(self):
         super(OrganizationStatsTest, self).setUp()
         self.user = self.create_user('foo@example.com')
-        self.org = self.create_organization(
-            name='Rowdy Tiger',
-            owner=None,
-        )
-        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.org = self.create_organization(name='Org Name')
+        self.team = self.create_team(name='Team Name', organization=self.org, members=[self.user])
         self.project = self.create_project(
             organization=self.org,
             team=self.team,
-            name='Bengal',
-        )
-        self.create_member(
-            user=self.user,
-            organization=self.org,
-            role='owner',
-            teams=[self.team],
+            name='Project Name'
         )
         self.login_as(self.user)
         self.path = '/organizations/{}/stats/'.format(self.org.slug)
diff --git a/tests/sentry/api/endpoints/test_issues_resolved_in_release.py b/tests/sentry/api/endpoints/test_issues_resolved_in_release.py
index 7b60119624..0b6c172c1b 100644
--- a/tests/sentry/api/endpoints/test_issues_resolved_in_release.py
+++ b/tests/sentry/api/endpoints/test_issues_resolved_in_release.py
@@ -7,7 +7,6 @@ from sentry.models import (
     Commit,
     GroupLink,
     GroupResolution,
-    Release,
     ReleaseCommit,
     Repository,
 )
@@ -16,105 +15,89 @@ from sentry.testutils import APITestCase
 
 
 class IssuesResolvedInReleaseEndpointTest(APITestCase):
+    def setUp(self):
+        super(IssuesResolvedInReleaseEndpointTest, self).setUp()
+        self.user = self.create_user()
+        self.org = self.create_organization()
+        self.team = self.create_team(organization=self.org)
+        self.create_member(organization=self.org, user=self.user, teams=[self.team])
+        self.project = self.create_project(
+            team=self.team,
+        )
+        self.release = self.create_release(
+            project=self.project,
+        )
+        self.group = self.create_group(project=self.project)
+        self.login_as(self.user)
+
+        self.path = reverse(
+            'sentry-api-0-release-resolved',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+                'project_slug': self.project.slug,
+                'version': self.release.version,
+            }
+        )
+
     def test_shows_issues_from_groupresolution(self):
         """
         tests that the endpoint will correctly retrieve issues resolved
         in a release from the GroupResolution model
         """
-        user = self.create_user('foo@example.com', is_superuser=True)
-        project = self.create_project(
-            name='foo',
-        )
-        self.login_as(user)
-        release = Release.objects.create(
-            organization_id=project.organization_id,
-            version='1',
-        )
-        release.add_project(project)
-        group = self.create_group(project=project)
         GroupResolution.objects.create(
-            group=group,
-            release=release,
+            group=self.group,
+            release=self.release,
             type=GroupResolution.Type.in_release,
         )
-        url = reverse(
-            'sentry-api-0-release-resolved',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-                'version': release.version,
-            }
-        )
-
-        response = self.client.get(url)
+        response = self.client.get(self.path)
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(group.id)
+        assert response.data[0]['id'] == six.text_type(self.group.id)
 
     def test_shows_issues_from_grouplink(self):
         """
         tests that the endpoint will correctly retrieve issues resolved
         in a release from the GroupLink model
         """
-        user = self.create_user('foo@example.com', is_superuser=True)
-        project = self.create_project(
-            name='foo',
-        )
-        self.login_as(user)
-        release = Release.objects.create(
-            organization_id=project.organization_id,
-            version='1',
-        )
-        release.add_project(project)
-        group = self.create_group(project=project)
         repo = Repository.objects.create(
-            organization_id=project.organization_id,
-            name=project.name,
+            organization_id=self.org.id,
+            name=self.project.name,
         )
         commit = Commit.objects.create(
-            organization_id=project.organization_id,
+            organization_id=self.org.id,
             repository_id=repo.id,
             key='a' * 40,
         )
         commit2 = Commit.objects.create(
-            organization_id=project.organization_id,
+            organization_id=self.org.id,
             repository_id=repo.id,
             key='b' * 40,
         )
         ReleaseCommit.objects.create(
-            organization_id=project.organization_id,
-            release=release,
+            organization_id=self.org.id,
+            release=self.release,
             commit=commit,
             order=1,
         )
         ReleaseCommit.objects.create(
-            organization_id=project.organization_id,
-            release=release,
+            organization_id=self.org.id,
+            release=self.release,
             commit=commit2,
             order=0,
         )
         GroupLink.objects.create(
-            group_id=group.id,
-            project_id=group.project_id,
+            group_id=self.group.id,
+            project_id=self.group.project_id,
             linked_type=GroupLink.LinkedType.commit,
             relationship=GroupLink.Relationship.resolves,
             linked_id=commit.id,
         )
-        url = reverse(
-            'sentry-api-0-release-resolved',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-                'version': release.version,
-            }
-        )
-
-        response = self.client.get(url)
+        response = self.client.get(self.path)
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(group.id)
+        assert response.data[0]['id'] == six.text_type(self.group.id)
 
     def test_does_not_return_duplicate_groups(self):
         """
@@ -122,135 +105,97 @@ class IssuesResolvedInReleaseEndpointTest(APITestCase):
         in a release from the GroupLink and GroupResolution model
         but will not return the groups twice if they appear in both
         """
-        user = self.create_user('foo@example.com', is_superuser=True)
-        project = self.create_project(
-            name='foo',
-        )
-        self.login_as(user)
-        release = Release.objects.create(
-            organization_id=project.organization_id,
-            version='1',
-        )
-        release.add_project(project)
-        group = self.create_group(project=project)
         repo = Repository.objects.create(
-            organization_id=project.organization_id,
-            name=project.name,
+            organization_id=self.org.id,
+            name=self.project.name,
         )
         commit = Commit.objects.create(
-            organization_id=project.organization_id,
+            organization_id=self.org.id,
             repository_id=repo.id,
             key='a' * 40,
         )
         commit2 = Commit.objects.create(
-            organization_id=project.organization_id,
+            organization_id=self.org.id,
             repository_id=repo.id,
             key='b' * 40,
         )
         ReleaseCommit.objects.create(
-            organization_id=project.organization_id,
-            release=release,
+            organization_id=self.org.id,
+            release=self.release,
             commit=commit,
             order=1,
         )
         ReleaseCommit.objects.create(
-            organization_id=project.organization_id,
-            release=release,
+            organization_id=self.org.id,
+            release=self.release,
             commit=commit2,
             order=0,
         )
         GroupLink.objects.create(
-            group_id=group.id,
-            project_id=group.project_id,
+            group_id=self.group.id,
+            project_id=self.group.project_id,
             linked_type=GroupLink.LinkedType.commit,
             relationship=GroupLink.Relationship.resolves,
             linked_id=commit.id,
         )
         GroupResolution.objects.create(
-            group=group,
-            release=release,
+            group=self.group,
+            release=self.release,
             type=GroupResolution.Type.in_release,
         )
-        url = reverse(
-            'sentry-api-0-release-resolved',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-                'version': release.version,
-            }
-        )
 
-        response = self.client.get(url)
+        response = self.client.get(self.path)
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(group.id)
+        assert response.data[0]['id'] == six.text_type(self.group.id)
 
     def test_return_groups_from_both_types(self):
         """
         tests that the endpoint will correctly retrieve issues resolved
         in a release from both the GroupLink and GroupResolution model
         """
-        user = self.create_user('foo@example.com', is_superuser=True)
-        project = self.create_project(
-            name='foo',
-        )
-        self.login_as(user)
-        release = Release.objects.create(
-            organization_id=project.organization_id,
-            version='1',
-        )
-        release.add_project(project)
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project)
+        group2 = self.create_group(project=self.project)
         repo = Repository.objects.create(
-            organization_id=project.organization_id,
-            name=project.name,
+            organization_id=self.org.id,
+            name=self.project.name,
         )
         commit = Commit.objects.create(
-            organization_id=project.organization_id,
+            organization_id=self.org.id,
             repository_id=repo.id,
             key='a' * 40,
         )
         commit2 = Commit.objects.create(
-            organization_id=project.organization_id,
+            organization_id=self.org.id,
             repository_id=repo.id,
             key='b' * 40,
         )
         ReleaseCommit.objects.create(
-            organization_id=project.organization_id,
-            release=release,
+            organization_id=self.org.id,
+            release=self.release,
             commit=commit,
             order=1,
         )
         ReleaseCommit.objects.create(
-            organization_id=project.organization_id,
-            release=release,
+            organization_id=self.org.id,
+            release=self.release,
             commit=commit2,
             order=0,
         )
         GroupLink.objects.create(
-            group_id=group.id,
-            project_id=group.project_id,
+            group_id=self.group.id,
+            project_id=self.group.project_id,
             linked_type=GroupLink.LinkedType.commit,
             relationship=GroupLink.Relationship.resolves,
             linked_id=commit.id,
         )
         GroupResolution.objects.create(
             group=group2,
-            release=release,
+            release=self.release,
             type=GroupResolution.Type.in_release,
         )
-        url = reverse(
-            'sentry-api-0-release-resolved',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-                'version': release.version,
-            }
-        )
 
-        response = self.client.get(url)
+        response = self.client.get(self.path)
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
diff --git a/tests/sentry/api/endpoints/test_organization_api_key_index.py b/tests/sentry/api/endpoints/test_organization_api_key_index.py
index 48ecb3d405..799fab20b5 100644
--- a/tests/sentry/api/endpoints/test_organization_api_key_index.py
+++ b/tests/sentry/api/endpoints/test_organization_api_key_index.py
@@ -42,7 +42,7 @@ class OrganizationApiKeyIndex(APITestCase):
 
         assert resp.status_code == 403
 
-    def test_admin_can_access(self):
+    def test_superuser_can_access(self):
         self.login_as(user=self.user)
         organization = self.create_organization(name='foo', owner=self.user)
 
@@ -58,7 +58,7 @@ class OrganizationApiKeyIndex(APITestCase):
             args=[organization.slug]
         )
 
-        self.login_as(admin_user)
+        self.login_as(admin_user, superuser=True)
 
         resp = self.client.get(path)
 
diff --git a/tests/sentry/api/endpoints/test_organization_stats.py b/tests/sentry/api/endpoints/test_organization_stats.py
index 802966ebda..ec7d0c7aea 100644
--- a/tests/sentry/api/endpoints/test_organization_stats.py
+++ b/tests/sentry/api/endpoints/test_organization_stats.py
@@ -13,12 +13,12 @@ class OrganizationStatsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        org = self.create_organization(owner=self.user, name='baz')
+        org = self.create_organization(owner=self.user)
 
         tsdb.incr(tsdb.models.organization_total_received, org.id, count=3)
 
         url = reverse('sentry-api-0-organization-stats', args=[org.slug])
-        response = self.client.get(url, format='json')
+        response = self.client.get(url)
 
         assert response.status_code == 200, response.content
         assert response.data[-1][1] == 3, response.data
@@ -29,12 +29,12 @@ class OrganizationStatsTest(APITestCase):
     def test_resolution(self):
         self.login_as(user=self.user)
 
-        org = self.create_organization(owner=self.user, name='baz')
+        org = self.create_organization(owner=self.user)
 
         tsdb.incr(tsdb.models.organization_total_received, org.id, count=3)
 
         url = reverse('sentry-api-0-organization-stats', args=[org.slug])
-        response = self.client.get('{}?resolution=1d'.format(url), format='json')
+        response = self.client.get('{}?resolution=1d'.format(url))
 
         assert response.status_code == 200, response.content
         assert response.data[-1][1] == 3, response.data
@@ -43,16 +43,14 @@ class OrganizationStatsTest(APITestCase):
     def test_id_filtering(self):
         self.login_as(user=self.user)
 
-        org = self.create_organization(owner=self.user, name='baz')
+        org = self.create_organization(owner=self.user)
         project = self.create_project(
-            slug='example',
-            team=self.create_team(organization=org),
+            team=self.create_team(organization=org, members=[self.user]),
         )
 
         make_request = functools.partial(
             self.client.get,
             reverse('sentry-api-0-organization-stats', args=[org.slug]),
-            format='json'
         )
 
         response = make_request({
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index f048ef54af..a0e6962620 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -90,7 +90,7 @@ class ProjectUpdateTest(APITestCase):
 
     def test_team_changes(self):
         project = self.create_project()
-        team = self.create_team()
+        team = self.create_team(members=[self.user])
         self.login_as(user=self.user)
         url = reverse(
             'sentry-api-0-project-details',
diff --git a/tests/sentry/api/endpoints/test_project_index.py b/tests/sentry/api/endpoints/test_project_index.py
index aa903c419f..396fb41c86 100644
--- a/tests/sentry/api/endpoints/test_project_index.py
+++ b/tests/sentry/api/endpoints/test_project_index.py
@@ -14,17 +14,14 @@ class ProjectsListTest(APITestCase):
     def path(self):
         return reverse('sentry-api-0-projects')
 
-    def test_member(self):
-        user = self.create_user('foo@example.com', is_superuser=False)
-        org = self.create_organization(name='foo')
-        team = self.create_team(organization=org, name='foo')
-        project = self.create_project(team=team, organization=org)
-
-        self.create_member(organization=org, user=user, teams=[team])
-
-        org2 = self.create_organization(name='bar')
-        team2 = self.create_team(organization=org, name='bar')
-        self.create_project(team=team2, organization=org2)
+    def test_member_constraints(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org, members=[user])
+        project = self.create_project(team=team)
+        org2 = self.create_organization()
+        team2 = self.create_team(organization=org2, members=[])
+        self.create_project(team=team2)
 
         self.login_as(user=user)
         response = self.client.get(self.path)
@@ -37,15 +34,15 @@ class ProjectsListTest(APITestCase):
     def test_superuser(self):
         Project.objects.all().delete()
 
-        user = self.create_user('foo@example.com', is_superuser=True)
+        user = self.create_user(is_superuser=True)
 
-        org = self.create_organization(name='foo', owner=user)
+        org = self.create_organization(owner=user)
         self.create_project(organization=org)
 
-        org2 = self.create_organization(name='bar')
+        org2 = self.create_organization()
         self.create_project(organization=org2)
 
-        self.login_as(user=user)
+        self.login_as(user=user, superuser=True)
         response = self.client.get(self.path)
         assert response.status_code == 200
         assert len(response.data) == 2
@@ -53,13 +50,11 @@ class ProjectsListTest(APITestCase):
     def test_status_filter(self):
         Project.objects.all().delete()
 
-        user = self.create_user('foo@example.com', is_superuser=True)
-
-        org = self.create_organization(name='foo')
-        project1 = self.create_project(organization=org)
-
-        org2 = self.create_organization(name='bar')
-        project2 = self.create_project(organization=org2, status=ProjectStatus.PENDING_DELETION)
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org, members=[user])
+        project1 = self.create_project(team=team)
+        project2 = self.create_project(team=team, status=ProjectStatus.PENDING_DELETION)
 
         self.login_as(user=user)
 
@@ -76,13 +71,11 @@ class ProjectsListTest(APITestCase):
     def test_query_filter(self):
         Project.objects.all().delete()
 
-        user = self.create_user('foo@example.com', is_superuser=True)
-
-        org = self.create_organization(name='foo')
-        project1 = self.create_project(name='foo', organization=org)
-
-        org2 = self.create_organization(name='bar')
-        self.create_project(name='bar', organization=org2)
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org, members=[user])
+        project1 = self.create_project(name='foo', team=team)
+        self.create_project(name='bar', team=team)
 
         self.login_as(user=user)
 
@@ -98,12 +91,11 @@ class ProjectsListTest(APITestCase):
     def test_slug_query(self):
         Project.objects.all().delete()
 
-        user = self.create_user('foo@example.com', is_superuser=True)
-
-        org = self.create_organization(name='foo')
-        project1 = self.create_project(name='foo', slug='foo', organization=org)
-
-        self.create_project(name='bar', slug='bar', organization=org)
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org, members=[user])
+        project1 = self.create_project(slug='foo', name='foo', team=team)
+        self.create_project(name='bar', slug='bar', team=team)
 
         self.login_as(user=user)
 
@@ -119,12 +111,11 @@ class ProjectsListTest(APITestCase):
     def test_id_query(self):
         Project.objects.all().delete()
 
-        user = self.create_user('foo@example.com', is_superuser=True)
-
-        org = self.create_organization(name='foo')
-        project1 = self.create_project(name='foo', slug='foo', organization=org)
-
-        self.create_project(name='bar', slug='bar', organization=org)
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org, members=[user])
+        project1 = self.create_project(team=team)
+        self.create_project(team=team)
 
         self.login_as(user=user)
 
diff --git a/tests/sentry/api/endpoints/test_system_health.py b/tests/sentry/api/endpoints/test_system_health.py
index caf8345f46..cadb640721 100644
--- a/tests/sentry/api/endpoints/test_system_health.py
+++ b/tests/sentry/api/endpoints/test_system_health.py
@@ -7,7 +7,7 @@ from sentry.testutils import APITestCase
 
 class SystemHealthTest(APITestCase):
     def test_simple(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         url = reverse('sentry-api-0-system-health')
         response = self.client.get(url)
         assert response.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_team_members.py b/tests/sentry/api/endpoints/test_team_members.py
index 0c555012b6..95438fa3a5 100644
--- a/tests/sentry/api/endpoints/test_team_members.py
+++ b/tests/sentry/api/endpoints/test_team_members.py
@@ -9,10 +9,10 @@ from sentry.testutils import APITestCase
 
 class TeamMembersTest(APITestCase):
     def test_simple(self):
-        org = self.create_organization()
-        team = self.create_team(organization=org)
+        org = self.create_organization(owner=self.user)
         foo = self.create_user('foo@example.com')
         bar = self.create_user('bar@example.com')
+        team = self.create_team(organization=org)
         member = self.create_member(organization=org, user=foo, teams=[team])
         self.create_member(organization=org, user=bar, teams=[])
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_team_project_index.py b/tests/sentry/api/endpoints/test_team_project_index.py
index 2b4d63d3c5..cd8aef24ab 100644
--- a/tests/sentry/api/endpoints/test_team_project_index.py
+++ b/tests/sentry/api/endpoints/test_team_project_index.py
@@ -11,7 +11,7 @@ from sentry.testutils import APITestCase
 class TeamProjectIndexTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
-        team = self.create_team(slug='baz')
+        team = self.create_team(members=[self.user])
         project_1 = self.create_project(team=team, slug='fiz')
         project_2 = self.create_project(team=team, slug='buzz')
 
@@ -36,7 +36,7 @@ class TeamProjectIndexTest(APITestCase):
 class TeamProjectCreateTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
-        team = self.create_team(slug='baz')
+        team = self.create_team(members=[self.user])
         url = reverse(
             'sentry-api-0-team-project-index',
             kwargs={
diff --git a/tests/sentry/api/endpoints/test_team_stats.py b/tests/sentry/api/endpoints/test_team_stats.py
index f1210f885e..58fee4cab1 100644
--- a/tests/sentry/api/endpoints/test_team_stats.py
+++ b/tests/sentry/api/endpoints/test_team_stats.py
@@ -10,10 +10,10 @@ class TeamStatsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        team = self.create_team(name='foo')
+        team = self.create_team(members=[self.user])
         project_1 = self.create_project(team=team, name='a')
         project_2 = self.create_project(team=team, name='b')
-        team_2 = self.create_team(name='bar')
+        team_2 = self.create_team(members=[self.user])
         project_3 = self.create_project(team=team_2, name='c')
 
         tsdb.incr(tsdb.models.project, project_1.id, count=3)
@@ -27,7 +27,7 @@ class TeamStatsTest(APITestCase):
                 'team_slug': team.slug,
             }
         )
-        response = self.client.get(url, format='json')
+        response = self.client.get(url)
 
         assert response.status_code == 200, response.content
         assert response.data[-1][1] == 8, response.data
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index f02a1ff887..2ea5516767 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -14,7 +14,7 @@ class DeleteUserAuthenticatorTest(APITestCase):
             user=user,
         )
 
-        self.login_as(user=user)
+        self.login_as(user=user, superuser=True)
 
         url = reverse(
             'sentry-api-0-user-authenticator-details',
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index 739d289bfb..d1f90009a9 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -350,7 +350,7 @@ class SetCommitsTestCase(TestCase):
         assert release.last_commit_id == latest_commit.id
 
     def test_resolution_support_full_featured(self):
-        org = self.create_organization()
+        org = self.create_organization(owner=self.user)
         project = self.create_project(organization=org, name='foo')
         group = self.create_group(project=project)
 
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index 942adfc5cf..e50c7fe862 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -94,14 +94,6 @@ class AuthLoginTest(TestCase):
         assert resp.context['op'] == 'register'
         self.assertTemplateUsed('sentry/login.html')
 
-    def test_already_logged_in(self):
-        self.login_as(self.user)
-        with self.feature('organizations:create'):
-            resp = self.client.get(self.path)
-
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver/organizations/new/'
-
     def test_register_prefills_invite_email(self):
         self.session['invite_email'] = 'foo@example.com'
         self.session['can_register'] = True
@@ -144,7 +136,16 @@ class AuthLoginTest(TestCase):
         assert next not in resp['Location']
         assert resp['Location'] == 'http://testserver/auth/login/'
 
-    def test_doesnt_redirect_with_superuser(self):
+    def test_redirects_already_authed_non_superuser(self):
+        self.user.update(is_superuser=False)
+        self.login_as(self.user)
+        with self.feature('organizations:create'):
+            resp = self.client.get(self.path)
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/organizations/new/'
+
+    def test_doesnt_redirect_already_authed_superuser(self):
         self.login_as(self.user, superuser=False)
 
         resp = self.client.get(self.path)
