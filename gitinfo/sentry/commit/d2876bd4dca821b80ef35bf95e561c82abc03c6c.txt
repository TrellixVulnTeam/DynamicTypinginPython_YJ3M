commit d2876bd4dca821b80ef35bf95e561c82abc03c6c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Feb 28 14:12:46 2020 -0800

    chore(frontend): Cleanup modal actions (#17386)
    
    - Use async await syntax for loading modules
     - Move types to be near the functions

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index cadaf4dd79..d41a6e9446 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -3,7 +3,13 @@ import {css} from '@emotion/core';
 import {ModalHeader, ModalBody, ModalFooter} from 'react-bootstrap';
 
 import ModalActions from 'app/actions/modalActions';
-import {Integration, IntegrationProvider, Organization, SentryApp} from 'app/types';
+import {
+  Integration,
+  IntegrationProvider,
+  Organization,
+  SentryApp,
+  Project,
+} from 'app/types';
 
 export type ModalRenderProps = {
   closeModal: () => void;
@@ -20,28 +26,6 @@ export type ModalOptions = {
   type?: string;
 };
 
-export type IntegrationDetailsModalOptions = {
-  onAddIntegration: (integration: Integration) => void;
-  provider: IntegrationProvider;
-  organization: Organization;
-  isInstalled: boolean; //used for analytics
-  onCloseModal?: () => void; //used for analytics
-};
-
-export type SentryAppDetailsModalOptions = {
-  sentryApp: SentryApp;
-  isInstalled: boolean;
-  onInstall: () => Promise<void>;
-  organization: Organization;
-  onCloseModal?: () => void; //used for analytics
-};
-
-export type TeamAccessRequestModalOptions = {
-  memberId: string;
-  teamId: string;
-  orgId: string;
-};
-
 /**
  * Show a modal
  */
@@ -59,181 +43,182 @@ export function closeModal() {
   ModalActions.closeModal();
 }
 
-export function openSudo({
-  onClose,
-  ...args
-}: {
+type OpenSudoModalOptions = {
   onClose?: () => void;
   superuser?: boolean;
   sudo?: boolean;
   retryRequest?: () => Promise<any>;
-} = {}) {
-  import(/* webpackChunkName: "SudoModal" */ 'app/components/modals/sudoModal')
-    .then(mod => mod.default)
-    .then(SudoModal =>
-      openModal(deps => <SudoModal {...deps} {...args} />, {
-        modalClassName: 'sudo-modal',
-        onClose,
-      })
-    );
+};
+
+export async function openSudo({onClose, ...args}: OpenSudoModalOptions = {}) {
+  const mod = await import(
+    /* webpackChunkName: "SudoModal" */ 'app/components/modals/sudoModal'
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...args} />, {
+    modalClassName: 'sudo-modal',
+    onClose,
+  });
 }
 
-export function openDiffModal(options: ModalOptions) {
-  import(/* webpackChunkName: "DiffModal" */ 'app/components/modals/diffModal')
-    .then(mod => mod.default)
-    .then(Modal => {
-      // This is the only way to style the different Modal children
-      const modalCss = css`
-        .modal-dialog {
-          display: flex;
-          margin: 0;
-          left: 10px;
-          right: 10px;
-          top: 10px;
-          bottom: 10px;
-          width: auto;
-        }
-        .modal-content {
-          display: flex;
-          flex: 1;
-        }
-        .modal-body {
-          display: flex;
-          overflow: hidden;
-          flex: 1;
-        }
-      `;
-
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalCss,
-      });
-    });
+export async function openDiffModal(options: ModalOptions) {
+  const mod = await import(
+    /* webpackChunkName: "DiffModal" */ 'app/components/modals/diffModal'
+  );
+  const {default: Modal, modalCss} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalCss,
+  });
 }
 
-/**
- * @param Object options
- * @param Object options.organization The organization to create a team for
- * @param Object options.project (optional) An initial project to add the team to. This may be deprecated soon as
- * we may add a project selection inside of the modal flow
- */
-export function openCreateTeamModal(options: ModalOptions = {}) {
-  import(
+type CreateTeamModalOptions = {
+  /**
+   * The organization to create a team for
+   */
+  organization: Organization;
+  /**
+   * An initial project to add the team to. This may be deprecated soon as we may add a project selection inside of the modal flow
+   */
+  project?: Project;
+};
+
+export async function openCreateTeamModal(options: CreateTeamModalOptions) {
+  const mod = await import(
     /* webpackChunkName: "CreateTeamModal" */ 'app/components/modals/createTeamModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalClassName: 'create-team-modal',
-      });
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalClassName: 'create-team-modal',
+  });
 }
 
-/**
- * @param Object options.organization The organization to create a rules for
- * @param Object options.project The project to create a rules for
- */
-export function openCreateOwnershipRule(options: ModalOptions = {}) {
-  import(
+type CreateOwnershipRuleModalOptions = {
+  /**
+   * The organization to create a rules for
+   */
+  organization: Organization;
+  /**
+   * The project to create a rules for
+   */
+  project: Project;
+};
+
+export async function openCreateOwnershipRule(options: CreateOwnershipRuleModalOptions) {
+  const mod = await import(
     /* webpackChunkName: "CreateOwnershipRuleModal" */ 'app/components/modals/createOwnershipRuleModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalClassName: 'create-ownership-rule-modal',
-      });
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalClassName: 'create-ownership-rule-modal',
+  });
 }
 
-export function openCommandPalette(options: ModalOptions = {}) {
-  import(/* webpackChunkName: "CommandPalette" */ 'app/components/modals/commandPalette')
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalClassName: 'command-palette',
-      });
-    });
+export async function openCommandPalette(options: ModalOptions = {}) {
+  const mod = await import(
+    /* webpackChunkName: "CommandPalette" */ 'app/components/modals/commandPalette'
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalClassName: 'command-palette',
+  });
 }
 
-export function openRecoveryOptions(options: ModalOptions = {}) {
-  import(
+export async function openRecoveryOptions(options: ModalOptions = {}) {
+  const mod = await import(
     /* webpackChunkName: "RecoveryOptionsModal" */ 'app/components/modals/recoveryOptionsModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalClassName: 'recovery-options',
-      });
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalClassName: 'recovery-options',
+  });
 }
 
-export function openTeamAccessRequestModal(options: TeamAccessRequestModalOptions) {
-  import(
+export type TeamAccessRequestModalOptions = {
+  memberId: string;
+  teamId: string;
+  orgId: string;
+};
+
+export async function openTeamAccessRequestModal(options: TeamAccessRequestModalOptions) {
+  const mod = await import(
     /* webpackChunkName: "TeamAccessRequestModal" */ 'app/components/modals/teamAccessRequestModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalClassName: 'confirm-team-request',
-      });
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalClassName: 'confirm-team-request',
+  });
 }
 
-/**
- * @param Object options.provider The integration provider to show the details for
- * @param Function options.onAddIntegration Called after a new integration is added
- */
-export function openIntegrationDetails(options: IntegrationDetailsModalOptions) {
-  import(
+export type IntegrationDetailsModalOptions = {
+  onAddIntegration: (integration: Integration) => void;
+  provider: IntegrationProvider;
+  organization: Organization;
+  isInstalled: boolean; //used for analytics
+  onCloseModal?: () => void; //used for analytics
+};
+
+export async function openIntegrationDetails(options: IntegrationDetailsModalOptions) {
+  const mod = await import(
     /* webpackChunkName: "IntegrationDetailsModal" */ 'app/components/modals/integrationDetailsModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />);
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />);
 }
 
-export function redirectToProject(newProjectSlug: string) {
-  import(
+export async function redirectToProject(newProjectSlug: string) {
+  const mod = await import(
     /* webpackChunkName: "RedirectToProjectModal" */ 'app/components/modals/redirectToProject'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} slug={newProjectSlug} />, {});
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} slug={newProjectSlug} />, {});
 }
 
-export function openHelpSearchModal() {
-  import(
+export async function openHelpSearchModal() {
+  const mod = await import(
     /* webpackChunkName: "HelpSearchModal" */ 'app/components/modals/helpSearchModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} />, {
-        modalClassName: 'help-search-modal',
-      });
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} />, {
+    modalClassName: 'help-search-modal',
+  });
 }
 
-export function openSentryAppDetailsModal(options: SentryAppDetailsModalOptions) {
-  import(
+export type SentryAppDetailsModalOptions = {
+  sentryApp: SentryApp;
+  isInstalled: boolean;
+  onInstall: () => Promise<void>;
+  organization: Organization;
+  onCloseModal?: () => void; //used for analytics
+};
+
+export async function openSentryAppDetailsModal(options: SentryAppDetailsModalOptions) {
+  const mod = await import(
     /* webpackChunkName: "SentryAppDetailsModal" */ 'app/components/modals/sentryAppDetailsModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />);
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />);
 }
 
-export function openDebugFileSourceModal(options: ModalOptions = {}) {
-  import(
+export async function openDebugFileSourceModal(options: ModalOptions = {}) {
+  const mod = await import(
     /* webpackChunkName: "DebugFileSourceModal" */ 'app/components/modals/debugFileSourceModal'
-  )
-    .then(mod => mod.default)
-    .then(Modal => {
-      openModal(deps => <Modal {...deps} {...options} />, {
-        modalClassName: 'debug-file-source',
-      });
-    });
+  );
+  const {default: Modal} = mod;
+
+  openModal(deps => <Modal {...deps} {...options} />, {
+    modalClassName: 'debug-file-source',
+  });
 }
 
 export async function openInviteMembersModal(options = {}) {
diff --git a/src/sentry/static/sentry/app/components/modals/diffModal.jsx b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
index 9b16b7c568..7be3372781 100644
--- a/src/sentry/static/sentry/app/components/modals/diffModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import {css} from '@emotion/core';
 
 import IssueDiff from 'app/components/issueDiff';
 
@@ -19,4 +20,27 @@ class DiffModal extends React.Component {
   }
 }
 
+const modalCss = css`
+  .modal-dialog {
+    display: flex;
+    margin: 0;
+    left: 10px;
+    right: 10px;
+    top: 10px;
+    bottom: 10px;
+    width: auto;
+  }
+  .modal-content {
+    display: flex;
+    flex: 1;
+  }
+  .modal-body {
+    display: flex;
+    overflow: hidden;
+    flex: 1;
+  }
+`;
+
+export {modalCss};
+
 export default DiffModal;
