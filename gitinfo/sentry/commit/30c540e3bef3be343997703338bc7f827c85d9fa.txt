commit 30c540e3bef3be343997703338bc7f827c85d9fa
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Thu Mar 12 12:03:11 2020 -0700

    ref(guides): Refactor assistant guides frontend (#17569)

diff --git a/src/sentry/static/sentry/app/actionCreators/guides.jsx b/src/sentry/static/sentry/app/actionCreators/guides.tsx
similarity index 62%
rename from src/sentry/static/sentry/app/actionCreators/guides.jsx
rename to src/sentry/static/sentry/app/actionCreators/guides.tsx
index 3f46535d3e..aa0961a81c 100644
--- a/src/sentry/static/sentry/app/actionCreators/guides.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/guides.tsx
@@ -5,7 +5,7 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 const api = new Client();
 
 export function fetchGuides() {
-  api.request('/assistant/', {
+  api.request('/assistant/?v2', {
     method: 'GET',
     success: data => {
       GuideActions.fetchSucceeded(data);
@@ -13,12 +13,12 @@ export function fetchGuides() {
   });
 }
 
-export function registerAnchor(anchor) {
-  GuideActions.registerAnchor(anchor);
+export function registerAnchor(target: string) {
+  GuideActions.registerAnchor(target);
 }
 
-export function unregisterAnchor(anchor) {
-  GuideActions.unregisterAnchor(anchor);
+export function unregisterAnchor(target: string) {
+  GuideActions.unregisterAnchor(target);
 }
 
 export function nextStep() {
@@ -29,46 +29,42 @@ export function closeGuide() {
   GuideActions.closeGuide();
 }
 
-export function dismissGuide(guideId, step, org) {
-  recordDismiss(guideId, step, org);
+export function dismissGuide(guide: string, step: number, orgId: string) {
+  recordDismiss(guide, step, orgId);
   closeGuide();
 }
 
-export function recordFinish(guideId, org) {
+export function recordFinish(guide: string, orgId: string) {
   api.request('/assistant/', {
     method: 'PUT',
     data: {
-      guide_id: guideId,
+      guide,
       status: 'viewed',
     },
   });
   const data = {
     eventKey: 'assistant.guide_finished',
     eventName: 'Assistant Guide Finished',
-    guide: guideId,
+    guide,
+    organization_id: orgId,
   };
-  if (org) {
-    data.organization_id = org.id;
-  }
   trackAnalyticsEvent(data);
 }
 
-export function recordDismiss(guideId, step, org) {
+export function recordDismiss(guide: string, step: number, orgId: string) {
   api.request('/assistant/', {
     method: 'PUT',
     data: {
-      guide_id: guideId,
+      guide,
       status: 'dismissed',
     },
   });
   const data = {
     eventKey: 'assistant.guide_dismissed',
     eventName: 'Assistant Guide Dismissed',
-    guide: guideId,
+    guide,
     step,
+    organization_id: orgId,
   };
-  if (org) {
-    data.organization_id = org.id;
-  }
   trackAnalyticsEvent(data);
 }
diff --git a/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx b/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
new file mode 100644
index 0000000000..6b07759f6d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
@@ -0,0 +1,122 @@
+import React from 'react';
+
+import {t, tct} from 'app/locale';
+import {GuidesContent} from 'app/components/assistant/types';
+import ExternalLink from 'app/components/links/externalLink';
+
+export default function getGuidesContent(): GuidesContent {
+  return [
+    {
+      guide: 'issue',
+      requiredTargets: ['issue_title', 'exception'],
+      steps: [
+        {
+          title: t('Issue Details'),
+          target: 'issue_title',
+          description: t(
+            "The issue page contains all the details about an issue. Let's get started."
+          ),
+        },
+        {
+          title: t('Stacktrace'),
+          target: 'exception',
+          description: t(
+            `See the sequence of function calls that led to the error, and global/local variables
+            for each stack frame.`
+          ),
+        },
+        {
+          title: t('Breadcrumbs'),
+          target: 'breadcrumbs',
+          description: t(
+            `Breadcrumbs are a trail of events that happened prior to the error. They're similar
+            to traditional logs but can record more rich structured data. When Sentry is used with
+            web frameworks, breadcrumbs are automatically captured for events like database calls and
+            network requests.`
+          ),
+        },
+        {
+          title: t('Tags'),
+          target: 'tags',
+          description: t(
+            `Attach arbitrary key-value pairs to each event which you can search and filter on.
+            View a heatmap of all tags for an issue on the right panel.`
+          ),
+        },
+        {
+          title: t('Resolve'),
+          target: 'resolve',
+          description: tct(
+            `Resolve an issue to remove it from your issue list. Sentry can also [link:alert you]
+            when a new issue occurs or a resolved issue re-occurs.`,
+            {link: <ExternalLink href="/settings/account/notifications/" />}
+          ),
+        },
+        {
+          title: t('Delete and Ignore'),
+          target: 'ignore_delete_discard',
+          description: t(
+            `Delete an issue to remove it from your issue list until it happens again.
+            Ignore an issue to remove it permanently or until certain conditions are met.`
+          ),
+        },
+        {
+          title: t('Issue Number'),
+          target: 'issue_number',
+          description: tct(
+            `Include this unique identifier in your commit message to have Sentry automatically
+            resolve the issue when your code is deployed. [link:Learn more].`,
+            {link: <ExternalLink href="https://docs.sentry.io/learn/releases/" />}
+          ),
+        },
+        {
+          title: t('Ownership Rules'),
+          target: 'owners',
+          description: tct(
+            `Define users or teams responsible for specific file paths or URLs so that alerts can
+            be routed to the right person. [link:Learn more]`,
+            {
+              link: <ExternalLink href="https://docs.sentry.io/learn/issue-owners/" />,
+            }
+          ),
+        },
+      ],
+    },
+    {
+      guide: 'issue_stream',
+      requiredTargets: ['issue_stream'],
+      steps: [
+        {
+          title: t('Issues'),
+          target: 'issue_stream',
+          description: tct(
+            `Sentry automatically groups similar events together into an issue. Similarity is
+            determined by stacktrace and other factors. [link:Learn more].`,
+            {
+              link: (
+                <ExternalLink href="https://docs.sentry.io/data-management/rollups/" />
+              ),
+            }
+          ),
+        },
+      ],
+    },
+    {
+      guide: 'discover_sidebar',
+      requiredTargets: ['discover_sidebar'],
+      steps: [
+        {
+          title: t('Event Pages have moved'),
+          target: 'discover_sidebar',
+          description: tct(
+            `These are now in our powerful new query builder, Discover.
+            [link:Learn more about its advanced features].`,
+            {
+              link: <ExternalLink href="https://docs.sentry.io/workflow/discover2/" />,
+            }
+          ),
+        },
+      ],
+    },
+  ];
+}
diff --git a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx b/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
similarity index 63%
rename from src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
rename to src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
index c2b9c2e237..1cd61e7bc3 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
@@ -2,9 +2,9 @@ import {ClassNames} from '@emotion/core';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
-import $ from 'jquery';
 import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import * as Sentry from '@sentry/browser';
 
 import theme from 'app/utils/theme';
 import {
@@ -21,40 +21,62 @@ import Button from 'app/components/button';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import {CloseIcon} from 'app/components/assistant/styles';
-
-// A GuideAnchor puts an informative hovercard around an element.
-// Guide anchors register with the GuideStore, which uses registrations
-// from one or more anchors on the page to determine which guides can
-// be shown on the page.
-const GuideAnchor = createReactClass({
+import {Guide} from 'app/components/assistant/types';
+
+type Props = {
+  target: string;
+  position?: string;
+};
+
+type State = {
+  active: boolean;
+  orgId: string | null;
+  currentGuide?: Guide;
+  step?: number;
+};
+
+/**
+ * A GuideAnchor puts an informative hovercard around an element.
+ * Guide anchors register with the GuideStore, which uses registrations
+ * from one or more anchors on the page to determine which guides can
+ * be shown on the page.
+ */
+const GuideAnchor = createReactClass<Props, State>({
   propTypes: {
     target: PropTypes.string.isRequired,
     position: PropTypes.string,
   },
 
-  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange')],
+  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange') as any],
 
   getInitialState() {
     return {
       active: false,
+      orgId: null,
     };
   },
 
   componentDidMount() {
-    registerAnchor(this);
+    const {target} = this.props;
+    target && registerAnchor(target);
   },
 
   componentDidUpdate(_prevProps, prevState) {
     if (this.containerElement && !prevState.active && this.state.active) {
-      const windowHeight = $(window).height();
-      $('html,body').animate({
-        scrollTop: $(this.containerElement).offset().top - windowHeight / 2,
-      });
+      try {
+        const {top} = this.containerElement.getBoundingClientRect();
+        const scrollTop = window.pageYOffset;
+        const centerElement = top + scrollTop - window.innerHeight / 2;
+        window.scrollTo({top: centerElement});
+      } catch (err) {
+        Sentry.captureException(err);
+      }
     }
   },
 
   componentWillUnmount() {
-    unregisterAnchor(this);
+    const {target} = this.props;
+    target && unregisterAnchor(target);
   },
 
   onGuideStateChange(data) {
@@ -63,30 +85,23 @@ const GuideAnchor = createReactClass({
       data.currentGuide.steps[data.currentStep].target === this.props.target;
     this.setState({
       active,
-      guide: data.currentGuide,
+      currentGuide: data.currentGuide,
       step: data.currentStep,
-      org: data.org,
-      messageVariables: {
-        orgSlug: data.org && data.org.slug,
-        projectSlug: data.project && data.project.slug,
-      },
+      orgId: data.orgId,
     });
   },
 
-  interpolate(template, variables) {
-    const regex = /\${([^{]+)}/g;
-    return template.replace(regex, (_match, g1) => variables[g1.trim()]);
-  },
-
-  /* Terminology:
-   - A guide can be FINISHED by clicking one of the buttons in the last step.
-   - A guide can be DISMISSED by x-ing out of it at any step except the last (where there is no x).
-   - In both cases we consider it CLOSED.
-  */
+  /**
+   * Terminology:
+   *
+   *  - A guide can be FINISHED by clicking one of the buttons in the last step
+   *  - A guide can be DISMISSED by x-ing out of it at any step except the last (where there is no x)
+   *  - In both cases we consider it CLOSED
+   */
   handleFinish(e) {
     e.stopPropagation();
-    const {guide, org} = this.state;
-    recordFinish(guide.id, org);
+    const {currentGuide, orgId} = this.state;
+    recordFinish(currentGuide.guide, orgId);
     closeGuide();
   },
 
@@ -97,12 +112,12 @@ const GuideAnchor = createReactClass({
 
   handleDismiss(e) {
     e.stopPropagation();
-    const {guide, step, org} = this.state;
-    dismissGuide(guide.id, step, org);
+    const {currentGuide, step, orgId} = this.state;
+    dismissGuide(currentGuide.guide, step, orgId);
   },
 
   render() {
-    const {active, guide, step, messageVariables} = this.state;
+    const {active, currentGuide, step} = this.state;
     if (!active) {
       return this.props.children ? this.props.children : null;
     }
@@ -110,28 +125,24 @@ const GuideAnchor = createReactClass({
     const body = (
       <GuideContainer>
         <GuideInputRow>
-          <StyledTitle>{guide.steps[step].title}</StyledTitle>
-          {step < guide.steps.length - 1 && (
+          <StyledTitle>{currentGuide.steps[step].title}</StyledTitle>
+          {step < currentGuide.steps.length - 1 && (
             <CloseLink onClick={this.handleDismiss} href="#" data-test-id="close-button">
               <CloseIcon />
             </CloseLink>
           )}
         </GuideInputRow>
         <StyledContent>
-          <div
-            dangerouslySetInnerHTML={{
-              __html: this.interpolate(guide.steps[step].message, messageVariables),
-            }}
-          />
+          <div>{currentGuide.steps[step].description}</div>
           <Actions>
             <div>
-              {step < guide.steps.length - 1 ? (
+              {step < currentGuide.steps.length - 1 ? (
                 <Button priority="success" size="small" onClick={this.handleNextStep}>
-                  {t('Next')} &rarr;
+                  {t('Next')}
                 </Button>
               ) : (
                 <Button priority="success" size="small" onClick={this.handleFinish}>
-                  {t(guide.steps.length === 1 ? 'Got It' : 'Done')}
+                  {t(currentGuide.steps.length === 1 ? 'Got It' : 'Done')}
                 </Button>
               )}
             </div>
diff --git a/src/sentry/static/sentry/app/components/assistant/types.tsx b/src/sentry/static/sentry/app/components/assistant/types.tsx
new file mode 100644
index 0000000000..6b3d5edf02
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/types.tsx
@@ -0,0 +1,33 @@
+export type GuideStep = {
+  title: string;
+  /**
+   * Step is tied to an anchor target. If the anchor doesn't exist,
+   * the step will not be shown. If the anchor exists but is of type
+   * "invisible", it will not be pinged but will be scrolled to.
+   * Otherwise the anchor will be pinged and scrolled to.
+   */
+  target: string;
+  description: React.ReactNode;
+};
+
+export type Guide = {
+  guide: string;
+  requiredTargets: string[];
+  steps: GuideStep[];
+  seen?: boolean;
+};
+
+export type GuidesContent = {
+  guide: string;
+  /**
+   * Anchor targets required on the page. An empty list will cause the
+   * guide to be shown regardless.
+   */
+  requiredTargets: string[];
+  steps: GuideStep[];
+}[];
+
+export type GuidesServerData = {
+  guide: string;
+  seen: boolean;
+}[];
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
deleted file mode 100644
index 704fdba866..0000000000
--- a/src/sentry/static/sentry/app/stores/guideStore.jsx
+++ /dev/null
@@ -1,187 +0,0 @@
-import {browserHistory} from 'react-router';
-import Reflux from 'reflux';
-
-import GuideActions from 'app/actions/guideActions';
-import OrganizationsActions from 'app/actions/organizationsActions';
-import ProjectActions from 'app/actions/projectActions';
-import {Client} from 'app/api';
-import ConfigStore from 'app/stores/configStore';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-
-const GuideStore = Reflux.createStore({
-  init() {
-    this.state = {
-      // All guides returned to us from the server.
-      guides: {},
-      // All anchors that are currently mounted.
-      anchors: new Set(),
-      // The "on deck" guide.
-      currentGuide: null,
-      // Current step of the current guide (0-indexed).
-      currentStep: 0,
-      // Current organization.
-      org: null,
-      // Current project.
-      project: null,
-      // We force show a guide if the URL contains #assistant.
-      forceShow: false,
-      // The previously shown guide.
-      prevGuide: null,
-    };
-
-    this.api = new Client();
-    this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
-    this.listenTo(GuideActions.closeGuide, this.onCloseGuide);
-    this.listenTo(GuideActions.nextStep, this.onNextStep);
-    this.listenTo(GuideActions.registerAnchor, this.onRegisterAnchor);
-    this.listenTo(GuideActions.unregisterAnchor, this.onUnregisterAnchor);
-    this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
-    this.listenTo(ProjectActions.setActive, this.onSetActiveProject);
-    this.listenTo(OrganizationsActions.changeSlug, this.onChangeOrgSlug);
-
-    window.addEventListener('load', this.onURLChange, false);
-    browserHistory.listen(() => this.onURLChange());
-  },
-
-  onURLChange() {
-    this.state.forceShow = window.location.hash === '#assistant';
-    this.updateCurrentGuide();
-  },
-
-  onSetActiveOrganization(data) {
-    this.state.org = data;
-    this.updateCurrentGuide();
-  },
-
-  onSetActiveProject(data) {
-    this.state.project = data;
-    this.updateCurrentGuide();
-  },
-
-  onChangeOrgSlug(_prev, next) {
-    this.state.org = next;
-    this.updateCurrentGuide();
-  },
-
-  onFetchSucceeded(data) {
-    // It's possible we can get empty responses (seems to be Firefox specific)
-    // Do nothing if `data` is empty
-    if (!data) {
-      return;
-    }
-
-    this.state.guides = data;
-    this.updateCurrentGuide();
-  },
-
-  onCloseGuide() {
-    const {currentGuide} = this.state;
-    this.state.guides[
-      Object.keys(this.state.guides).find(
-        key => this.state.guides[key].id === currentGuide.id
-      )
-    ].seen = true;
-    // Don't continue to force show if the user dismissed the guide.
-    this.state.forceShow = false;
-    this.updateCurrentGuide();
-  },
-
-  onNextStep() {
-    this.state.currentStep += 1;
-    this.trigger(this.state);
-  },
-
-  onRegisterAnchor(anchor) {
-    this.state.anchors.add(anchor);
-    this.updateCurrentGuide();
-  },
-
-  onUnregisterAnchor(anchor) {
-    this.state.anchors.delete(anchor);
-    this.updateCurrentGuide();
-  },
-
-  recordCue(id) {
-    const data = {
-      eventKey: 'assistant.guide_cued',
-      eventName: 'Assistant Guide Cued',
-      guide: id,
-    };
-    if (this.state.org) {
-      data.organization_id = this.state.org.id;
-    }
-    trackAnalyticsEvent(data);
-  },
-
-  updatePrevGuide(bestGuide) {
-    if (!bestGuide) {
-      return;
-    }
-
-    if (!this.state.prevGuide || this.state.prevGuide.id !== bestGuide.id) {
-      this.recordCue(bestGuide.id);
-      this.state.prevGuide = bestGuide;
-    }
-  },
-
-  updateCurrentGuide() {
-    // Logic to determine if a guide is shown:
-    // 1. If any required target is missing, don't show the guide.
-    // 2. If the URL ends with #assistant, show the guide.
-    // 3. If the user has seen the guide or is an old non-superuser, don't show the guide.
-    // 4. Otherwise show the guide.
-
-    const availableTargets = [...this.state.anchors].map(a => a.props.target);
-
-    // sort() so that we pick a guide deterministically every time this function is called.
-    let guideKeys = Object.keys(this.state.guides)
-      .sort()
-      .filter(key =>
-        this.state.guides[key].required_targets.every(
-          t => availableTargets.indexOf(t) >= 0
-        )
-      );
-
-    if (!this.state.forceShow) {
-      const user = ConfigStore.get('user');
-
-      // Don't show guides to users who signed up way before these changes were implemented
-      const assistantThreshold = new Date(2019, 6, 1);
-      // Spam existing users about the discover tab, but not new signups.
-      const discoverDate = new Date(2020, 1, 6);
-      const userDateJoined = new Date(user?.dateJoined);
-
-      guideKeys = guideKeys.filter(key => {
-        if (this.state.guides[key].seen) {
-          return false;
-        }
-        if (user?.isSuperuser) {
-          return true;
-        }
-        if (key === 'discover_sidebar' && userDateJoined >= discoverDate) {
-          return false;
-        }
-        return userDateJoined > assistantThreshold;
-      });
-    }
-
-    let bestGuide = null;
-    if (guideKeys.length > 0) {
-      bestGuide = {
-        ...this.state.guides[guideKeys[0]],
-
-        // Remove steps that don't have an anchor on the page.
-        steps: this.state.guides[guideKeys[0]].steps.filter(
-          step => step.target && availableTargets.indexOf(step.target) >= 0
-        ),
-      };
-    }
-
-    this.updatePrevGuide(bestGuide);
-    this.state.currentGuide = bestGuide;
-    this.state.currentStep = 0;
-    this.trigger(this.state);
-  },
-});
-
-export default GuideStore;
diff --git a/src/sentry/static/sentry/app/stores/guideStore.tsx b/src/sentry/static/sentry/app/stores/guideStore.tsx
new file mode 100644
index 0000000000..20be0aeced
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/guideStore.tsx
@@ -0,0 +1,214 @@
+import {browserHistory} from 'react-router';
+import Reflux from 'reflux';
+
+import {Client} from 'app/api';
+import {Guide, GuidesServerData, GuidesContent} from 'app/components/assistant/types';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import ConfigStore from 'app/stores/configStore';
+import getGuidesContent from 'app/components/assistant/getGuidesContent';
+import GuideActions from 'app/actions/guideActions';
+import OrganizationsActions from 'app/actions/organizationsActions';
+
+const guidesContent: GuidesContent = getGuidesContent();
+
+type GuideStoreState = {
+  /**
+   * All tooltip guides
+   */
+  guides: Guide[];
+  /**
+   * Anchors that are currently mounted
+   */
+  anchors: Set<string>;
+  /**
+   * The current guide
+   */
+  currentGuide: Guide | null;
+  /**
+   * Current step of the current guide
+   */
+  currentStep: number;
+  /**
+   * Current organization id
+   */
+  orgId: string | null;
+  /**
+   * We force show a guide if the URL contains #assistant
+   */
+  forceShow: boolean;
+  /**
+   * The previously shown guide
+   */
+  prevGuide: Guide | null;
+};
+
+const defaultState: GuideStoreState = {
+  guides: [],
+  anchors: new Set(),
+  currentGuide: null,
+  currentStep: 0,
+  orgId: null,
+  forceShow: false,
+  prevGuide: null,
+};
+
+type GuideStoreInterface = {
+  state: GuideStoreState;
+
+  onFetchSucceeded: (data: GuidesServerData) => void;
+  onRegisterAnchor: (target: string) => void;
+  onUnregisterAnchor: (target: string) => void;
+  recordCue: (guide: string) => void;
+  updatePrevGuide: (nextGuide: Guide | null) => void;
+};
+
+const guideStoreConfig: Reflux.StoreDefinition & GuideStoreInterface = {
+  state: defaultState,
+
+  init() {
+    this.state = defaultState;
+
+    this.api = new Client();
+    this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
+    this.listenTo(GuideActions.closeGuide, this.onCloseGuide);
+    this.listenTo(GuideActions.nextStep, this.onNextStep);
+    this.listenTo(GuideActions.registerAnchor, this.onRegisterAnchor);
+    this.listenTo(GuideActions.unregisterAnchor, this.onUnregisterAnchor);
+    this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
+
+    window.addEventListener('load', this.onURLChange, false);
+    browserHistory.listen(() => this.onURLChange());
+  },
+
+  onURLChange() {
+    this.state.forceShow = window.location.hash === '#assistant';
+    this.updateCurrentGuide();
+  },
+
+  onSetActiveOrganization(data) {
+    this.state.orgId = data ? data.id : null;
+    this.updateCurrentGuide();
+  },
+
+  onFetchSucceeded(data) {
+    // It's possible we can get empty responses (seems to be Firefox specific)
+    // Do nothing if `data` is empty
+    // also, temporarily check data is in the correct format from the updated
+    // assistant endpoint
+    if (!data || !Array.isArray(data)) {
+      return;
+    }
+
+    // map server guide state (i.e. seen status) with guide content
+    const guides = guidesContent.map(guideContent => ({
+      ...guideContent,
+      ...data.find(serverGuide => serverGuide.guide === guideContent.guide),
+    }));
+
+    this.state.guides = guides;
+    this.updateCurrentGuide();
+  },
+
+  onCloseGuide() {
+    const {currentGuide} = this.state;
+    this.state.guides.map(guide => {
+      if (guide.guide === currentGuide?.guide) {
+        guide.seen = true;
+      }
+    });
+    this.state.forceShow = false;
+    this.updateCurrentGuide();
+  },
+
+  onNextStep() {
+    this.state.currentStep += 1;
+    this.trigger(this.state);
+  },
+
+  onRegisterAnchor(target) {
+    this.state.anchors.add(target);
+    this.updateCurrentGuide();
+  },
+
+  onUnregisterAnchor(target) {
+    this.state.anchors.delete(target);
+    this.updateCurrentGuide();
+  },
+
+  recordCue(guide) {
+    const data = {
+      guide,
+      eventKey: 'assistant.guide_cued',
+      eventName: 'Assistant Guide Cued',
+      organization_id: this.state.orgId,
+    };
+    trackAnalyticsEvent(data);
+  },
+
+  updatePrevGuide(nextGuide) {
+    const {prevGuide} = this.state;
+    if (!nextGuide) {
+      return;
+    }
+
+    if (!prevGuide || prevGuide.guide !== nextGuide.guide) {
+      this.recordCue(nextGuide.guide);
+      this.state.prevGuide = nextGuide;
+    }
+  },
+
+  /**
+   * Logic to determine if a guide is shown:
+   *
+   *  - If any required target is missing, don't show the guide
+   *  - If the URL ends with #assistant, show the guide
+   *  - If the user has already seen the guide, don't show the guide
+   *  - Otherwise show the guide
+   */
+  updateCurrentGuide() {
+    const {anchors, guides, forceShow} = this.state;
+
+    let guideOptions = guides
+      .sort((a, b) => a.guide.localeCompare(b.guide))
+      .filter(guide => guide.requiredTargets.every(target => anchors.has(target)));
+
+    if (!forceShow) {
+      const user = ConfigStore.get('user');
+      const assistantThreshold = new Date(2019, 6, 1);
+      const discoverDate = new Date(2020, 1, 6);
+      const userDateJoined = new Date(user?.dateJoined);
+
+      guideOptions = guideOptions.filter(({guide, seen}) => {
+        if (seen !== false) {
+          return false;
+        }
+        if (user?.isSuperuser) {
+          return true;
+        }
+        if (guide === 'discover_sidebar' && userDateJoined >= discoverDate) {
+          return false;
+        }
+        return userDateJoined > assistantThreshold;
+      });
+    }
+
+    const nextGuide =
+      guideOptions.length > 0
+        ? {
+            ...guideOptions[0],
+            steps: guideOptions[0].steps.filter(
+              step => step.target && anchors.has(step.target)
+            ),
+          }
+        : null;
+
+    this.updatePrevGuide(nextGuide);
+    this.state.currentGuide = nextGuide;
+    this.state.currentStep = 0;
+    this.trigger(this.state);
+  },
+};
+
+type GuideStore = Reflux.Store & GuideStoreInterface;
+
+export default Reflux.createStore(guideStoreConfig) as GuideStore;
diff --git a/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap
deleted file mode 100644
index 95c3fd3ca2..0000000000
--- a/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap
+++ /dev/null
@@ -1,684 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`GuideAnchor renders, advances, and finishes 1`] = `
-<GuideAnchor
-  target="target 1"
->
-  <ForwardRef(render)>
-    <Hovercard
-      body={
-        <ForwardRef(render)>
-          <ForwardRef(render)>
-            <ForwardRef(render)>
-              title 1
-            </ForwardRef(render)>
-            <ForwardRef(render)
-              data-test-id="close-button"
-              href="#"
-              onClick={[Function]}
-            >
-              <ForwardRef(render) />
-            </ForwardRef(render)>
-          </ForwardRef(render)>
-          <ForwardRef(render)>
-            <div
-              dangerouslySetInnerHTML={
-                Object {
-                  "__html": "abc",
-                }
-              }
-            />
-            <ForwardRef(render)>
-              <div>
-                <ForwardRef
-                  onClick={[Function]}
-                  priority="success"
-                  size="small"
-                >
-                  Next
-                   →
-                </ForwardRef>
-              </div>
-            </ForwardRef(render)>
-          </ForwardRef(render)>
-        </ForwardRef(render)>
-      }
-      bodyClassName="css-1engxaj"
-      displayTimeout={100}
-      position="top"
-      show={true}
-      tipColor="#3EA573"
-    >
-      <Manager>
-        <Reference>
-          <InnerReference
-            setReferenceNode={[Function]}
-          >
-            <span
-              aria-describedby="hovercard-123456"
-            >
-              <span />
-            </span>
-          </InnerReference>
-        </Reference>
-        <Portal
-          containerInfo={
-            <div
-              id="hovercard-portal"
-            >
-              <div
-                class="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
-                id="hovercard-123456"
-                style="position: absolute; top: 0px; left: 0px; opacity: 0; pointer-events: none;"
-              >
-                <div
-                  class="css-fb6op-Body e38w1je2"
-                >
-                  <div
-                    class="css-hhb7wa-GuideContainer e130o4350"
-                  >
-                    <div
-                      class="css-oc5lxq-GuideInputRow e130o4352"
-                    >
-                      <div
-                        class="css-nw97la-StyledTitle e130o4353"
-                      >
-                        title 1
-                      </div>
-                      <a
-                        class="css-1tis8wt-CloseLink e130o4351"
-                        data-test-id="close-button"
-                        href="#"
-                      >
-                        <svg
-                          class="ernuchp3 css-1kfzr4j-InlineSvg-CloseIcon enyz4ql0"
-                          height="1em"
-                          viewBox="[object Object]"
-                          width="1em"
-                        >
-                          <use
-                            href="#test"
-                            xlink:href="#test"
-                          />
-                        </svg>
-                      </a>
-                    </div>
-                    <div
-                      class="css-qwocdy-StyledContent e130o4354"
-                    >
-                      <div>
-                        abc
-                      </div>
-                      <div
-                        class="css-m56sce-Actions e130o4355"
-                      >
-                        <div>
-                          <button
-                            aria-disabled="false"
-                            class="css-1a9qzq-StyledButton edwq9my0"
-                            role="button"
-                          >
-                            <span
-                              class="css-19gcr2f-ButtonLabel edwq9my1"
-                            >
-                              Next
-                               →
-                            </span>
-                          </button>
-                        </div>
-                      </div>
-                    </div>
-                  </div>
-                </div>
-                <span
-                  class="css-8y7441-HovercardArrow e38w1je3"
-                />
-              </div>
-            </div>
-          }
-        >
-          <Popper
-            modifiers={
-              Object {
-                "hide": Object {
-                  "enabled": false,
-                },
-                "preventOverflow": Object {
-                  "boundariesElement": "viewport",
-                  "enabled": true,
-                  "padding": 10,
-                },
-              }
-            }
-            placement="top"
-          >
-            <InnerPopper
-              eventsEnabled={true}
-              modifiers={
-                Object {
-                  "hide": Object {
-                    "enabled": false,
-                  },
-                  "preventOverflow": Object {
-                    "boundariesElement": "viewport",
-                    "enabled": true,
-                    "padding": 10,
-                  },
-                }
-              }
-              placement="top"
-              positionFixed={false}
-              referenceElement={
-                <span
-                  aria-describedby="hovercard-123456"
-                >
-                  <span />
-                </span>
-              }
-            >
-              <StyledHovercard
-                className="hovercard"
-                id="hovercard-123456"
-                style={
-                  Object {
-                    "left": 0,
-                    "opacity": 0,
-                    "pointerEvents": "none",
-                    "position": "absolute",
-                    "top": 0,
-                  }
-                }
-                visible={true}
-                withHeader={false}
-              >
-                <div
-                  className="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
-                  id="hovercard-123456"
-                  style={
-                    Object {
-                      "left": 0,
-                      "opacity": 0,
-                      "pointerEvents": "none",
-                      "position": "absolute",
-                      "top": 0,
-                    }
-                  }
-                >
-                  <Body
-                    className="css-1engxaj"
-                  >
-                    <div
-                      className="css-fb6op-Body e38w1je2"
-                    >
-                      <GuideContainer>
-                        <div
-                          className="css-hhb7wa-GuideContainer e130o4350"
-                        >
-                          <GuideInputRow>
-                            <div
-                              className="css-oc5lxq-GuideInputRow e130o4352"
-                            >
-                              <StyledTitle>
-                                <div
-                                  className="css-nw97la-StyledTitle e130o4353"
-                                >
-                                  title 1
-                                </div>
-                              </StyledTitle>
-                              <CloseLink
-                                data-test-id="close-button"
-                                href="#"
-                                onClick={[Function]}
-                              >
-                                <a
-                                  className="css-1tis8wt-CloseLink e130o4351"
-                                  data-test-id="close-button"
-                                  href="#"
-                                  onClick={[Function]}
-                                >
-                                  <CloseIcon>
-                                    <Component
-                                      className="css-1j72m2y-CloseIcon ernuchp3"
-                                    >
-                                      <InlineSvg
-                                        className="css-1j72m2y-CloseIcon ernuchp3"
-                                        src="icon-close-lg"
-                                      >
-                                        <ForwardRef
-                                          className="ernuchp3 css-1kfzr4j-InlineSvg-CloseIcon enyz4ql0"
-                                          src="icon-close-lg"
-                                        >
-                                          <svg
-                                            className="ernuchp3 css-1kfzr4j-InlineSvg-CloseIcon enyz4ql0"
-                                            height="1em"
-                                            viewBox={Object {}}
-                                            width="1em"
-                                          >
-                                            <use
-                                              href="#test"
-                                              xlinkHref="#test"
-                                            />
-                                          </svg>
-                                        </ForwardRef>
-                                      </InlineSvg>
-                                    </Component>
-                                  </CloseIcon>
-                                </a>
-                              </CloseLink>
-                            </div>
-                          </GuideInputRow>
-                          <StyledContent>
-                            <div
-                              className="css-qwocdy-StyledContent e130o4354"
-                            >
-                              <div
-                                dangerouslySetInnerHTML={
-                                  Object {
-                                    "__html": "abc",
-                                  }
-                                }
-                              />
-                              <Actions>
-                                <div
-                                  className="css-m56sce-Actions e130o4355"
-                                >
-                                  <div>
-                                    <forwardRef<Button>
-                                      onClick={[Function]}
-                                      priority="success"
-                                      size="small"
-                                    >
-                                      <Button
-                                        align="center"
-                                        disabled={false}
-                                        forwardRef={null}
-                                        onClick={[Function]}
-                                        priority="success"
-                                        size="small"
-                                      >
-                                        <StyledButton
-                                          aria-disabled={false}
-                                          disabled={false}
-                                          forwardRef={null}
-                                          onClick={[Function]}
-                                          priority="success"
-                                          role="button"
-                                          size="small"
-                                        >
-                                          <Component
-                                            aria-disabled={false}
-                                            className="css-1a9qzq-StyledButton edwq9my0"
-                                            forwardRef={null}
-                                            onClick={[Function]}
-                                            role="button"
-                                            size="small"
-                                          >
-                                            <button
-                                              aria-disabled={false}
-                                              className="css-1a9qzq-StyledButton edwq9my0"
-                                              onClick={[Function]}
-                                              role="button"
-                                              size="small"
-                                            >
-                                              <ButtonLabel
-                                                align="center"
-                                                priority="success"
-                                                size="small"
-                                              >
-                                                <Component
-                                                  align="center"
-                                                  className="css-19gcr2f-ButtonLabel edwq9my1"
-                                                  priority="success"
-                                                  size="small"
-                                                >
-                                                  <span
-                                                    className="css-19gcr2f-ButtonLabel edwq9my1"
-                                                  >
-                                                    Next
-                                                     →
-                                                  </span>
-                                                </Component>
-                                              </ButtonLabel>
-                                            </button>
-                                          </Component>
-                                        </StyledButton>
-                                      </Button>
-                                    </forwardRef<Button>>
-                                  </div>
-                                </div>
-                              </Actions>
-                            </div>
-                          </StyledContent>
-                        </div>
-                      </GuideContainer>
-                    </div>
-                  </Body>
-                  <HovercardArrow
-                    style={Object {}}
-                    tipColor="#3EA573"
-                  >
-                    <span
-                      className="css-8y7441-HovercardArrow e38w1je3"
-                      style={Object {}}
-                    />
-                  </HovercardArrow>
-                </div>
-              </StyledHovercard>
-            </InnerPopper>
-          </Popper>
-        </Portal>
-      </Manager>
-    </Hovercard>
-  </ForwardRef(render)>
-</GuideAnchor>
-`;
-
-exports[`GuideAnchor renders, advances, and finishes 2`] = `
-<GuideAnchor
-  target="target 2"
->
-  <ForwardRef(render)>
-    <Hovercard
-      body={
-        <ForwardRef(render)>
-          <ForwardRef(render)>
-            <ForwardRef(render)>
-              title 2
-            </ForwardRef(render)>
-          </ForwardRef(render)>
-          <ForwardRef(render)>
-            <div
-              dangerouslySetInnerHTML={
-                Object {
-                  "__html": "xyz",
-                }
-              }
-            />
-            <ForwardRef(render)>
-              <div>
-                <ForwardRef
-                  onClick={[Function]}
-                  priority="success"
-                  size="small"
-                >
-                  Done
-                </ForwardRef>
-              </div>
-            </ForwardRef(render)>
-          </ForwardRef(render)>
-        </ForwardRef(render)>
-      }
-      bodyClassName="css-1engxaj"
-      displayTimeout={100}
-      position="top"
-      show={true}
-      tipColor="#3EA573"
-    >
-      <Manager>
-        <Reference>
-          <InnerReference
-            setReferenceNode={[Function]}
-          >
-            <span
-              aria-describedby="hovercard-123456"
-            >
-              <span />
-            </span>
-          </InnerReference>
-        </Reference>
-        <Portal
-          containerInfo={
-            <div
-              id="hovercard-portal"
-            >
-              <div
-                class="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
-                id="hovercard-123456"
-                style="position: absolute; top: 0px; left: 0px; opacity: 0; pointer-events: none;"
-              >
-                <div
-                  class="css-fb6op-Body e38w1je2"
-                >
-                  <div
-                    class="css-hhb7wa-GuideContainer e130o4350"
-                  >
-                    <div
-                      class="css-oc5lxq-GuideInputRow e130o4352"
-                    >
-                      <div
-                        class="css-nw97la-StyledTitle e130o4353"
-                      >
-                        title 2
-                      </div>
-                    </div>
-                    <div
-                      class="css-qwocdy-StyledContent e130o4354"
-                    >
-                      <div>
-                        xyz
-                      </div>
-                      <div
-                        class="css-m56sce-Actions e130o4355"
-                      >
-                        <div>
-                          <button
-                            aria-disabled="false"
-                            aria-label="Done"
-                            class="css-1a9qzq-StyledButton edwq9my0"
-                            role="button"
-                          >
-                            <span
-                              class="css-19gcr2f-ButtonLabel edwq9my1"
-                            >
-                              Done
-                            </span>
-                          </button>
-                        </div>
-                      </div>
-                    </div>
-                  </div>
-                </div>
-                <span
-                  class="css-8y7441-HovercardArrow e38w1je3"
-                />
-              </div>
-            </div>
-          }
-        >
-          <Popper
-            modifiers={
-              Object {
-                "hide": Object {
-                  "enabled": false,
-                },
-                "preventOverflow": Object {
-                  "boundariesElement": "viewport",
-                  "enabled": true,
-                  "padding": 10,
-                },
-              }
-            }
-            placement="top"
-          >
-            <InnerPopper
-              eventsEnabled={true}
-              modifiers={
-                Object {
-                  "hide": Object {
-                    "enabled": false,
-                  },
-                  "preventOverflow": Object {
-                    "boundariesElement": "viewport",
-                    "enabled": true,
-                    "padding": 10,
-                  },
-                }
-              }
-              placement="top"
-              positionFixed={false}
-              referenceElement={
-                <span
-                  aria-describedby="hovercard-123456"
-                >
-                  <span />
-                </span>
-              }
-            >
-              <StyledHovercard
-                className="hovercard"
-                id="hovercard-123456"
-                style={
-                  Object {
-                    "left": 0,
-                    "opacity": 0,
-                    "pointerEvents": "none",
-                    "position": "absolute",
-                    "top": 0,
-                  }
-                }
-                visible={true}
-                withHeader={false}
-              >
-                <div
-                  className="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
-                  id="hovercard-123456"
-                  style={
-                    Object {
-                      "left": 0,
-                      "opacity": 0,
-                      "pointerEvents": "none",
-                      "position": "absolute",
-                      "top": 0,
-                    }
-                  }
-                >
-                  <Body
-                    className="css-1engxaj"
-                  >
-                    <div
-                      className="css-fb6op-Body e38w1je2"
-                    >
-                      <GuideContainer>
-                        <div
-                          className="css-hhb7wa-GuideContainer e130o4350"
-                        >
-                          <GuideInputRow>
-                            <div
-                              className="css-oc5lxq-GuideInputRow e130o4352"
-                            >
-                              <StyledTitle>
-                                <div
-                                  className="css-nw97la-StyledTitle e130o4353"
-                                >
-                                  title 2
-                                </div>
-                              </StyledTitle>
-                            </div>
-                          </GuideInputRow>
-                          <StyledContent>
-                            <div
-                              className="css-qwocdy-StyledContent e130o4354"
-                            >
-                              <div
-                                dangerouslySetInnerHTML={
-                                  Object {
-                                    "__html": "xyz",
-                                  }
-                                }
-                              />
-                              <Actions>
-                                <div
-                                  className="css-m56sce-Actions e130o4355"
-                                >
-                                  <div>
-                                    <forwardRef<Button>
-                                      onClick={[Function]}
-                                      priority="success"
-                                      size="small"
-                                    >
-                                      <Button
-                                        align="center"
-                                        disabled={false}
-                                        forwardRef={null}
-                                        onClick={[Function]}
-                                        priority="success"
-                                        size="small"
-                                      >
-                                        <StyledButton
-                                          aria-disabled={false}
-                                          aria-label="Done"
-                                          disabled={false}
-                                          forwardRef={null}
-                                          onClick={[Function]}
-                                          priority="success"
-                                          role="button"
-                                          size="small"
-                                        >
-                                          <Component
-                                            aria-disabled={false}
-                                            aria-label="Done"
-                                            className="css-1a9qzq-StyledButton edwq9my0"
-                                            forwardRef={null}
-                                            onClick={[Function]}
-                                            role="button"
-                                            size="small"
-                                          >
-                                            <button
-                                              aria-disabled={false}
-                                              aria-label="Done"
-                                              className="css-1a9qzq-StyledButton edwq9my0"
-                                              onClick={[Function]}
-                                              role="button"
-                                              size="small"
-                                            >
-                                              <ButtonLabel
-                                                align="center"
-                                                priority="success"
-                                                size="small"
-                                              >
-                                                <Component
-                                                  align="center"
-                                                  className="css-19gcr2f-ButtonLabel edwq9my1"
-                                                  priority="success"
-                                                  size="small"
-                                                >
-                                                  <span
-                                                    className="css-19gcr2f-ButtonLabel edwq9my1"
-                                                  >
-                                                    Done
-                                                  </span>
-                                                </Component>
-                                              </ButtonLabel>
-                                            </button>
-                                          </Component>
-                                        </StyledButton>
-                                      </Button>
-                                    </forwardRef<Button>>
-                                  </div>
-                                </div>
-                              </Actions>
-                            </div>
-                          </StyledContent>
-                        </div>
-                      </GuideContainer>
-                    </div>
-                  </Body>
-                  <HovercardArrow
-                    style={Object {}}
-                    tipColor="#3EA573"
-                  >
-                    <span
-                      className="css-8y7441-HovercardArrow e38w1je3"
-                      style={Object {}}
-                    />
-                  </HovercardArrow>
-                </div>
-              </StyledHovercard>
-            </InnerPopper>
-          </Popper>
-        </Portal>
-      </Manager>
-    </Hovercard>
-  </ForwardRef(render)>
-</GuideAnchor>
-`;
diff --git a/tests/js/spec/components/assistant/guideAnchor.spec.jsx b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
index 59be50d363..27818890f9 100644
--- a/tests/js/spec/components/assistant/guideAnchor.spec.jsx
+++ b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
@@ -6,29 +6,26 @@ import GuideActions from 'app/actions/guideActions';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GuideAnchor', function() {
-  const guides = {
-    guide1: {
-      id: 1,
-      required_targets: [],
-      steps: [
-        {message: 'abc', target: 'target 1', title: 'title 1'},
-        {message: 'xyz', target: 'target 2', title: 'title 2'},
-      ],
+  let wrapper1, wrapper2;
+  const serverGuide = [
+    {
+      guide: 'issue',
+      seen: false,
     },
-  };
+  ];
 
   const routerContext = TestStubs.routerContext();
 
-  let wrapper1, wrapper2;
-
   beforeEach(function() {
     ConfigStore.config = {
       user: {
-        isSuperuser: true,
+        isSuperuser: false,
+        dateJoined: new Date(2020, 0, 1),
       },
     };
-    wrapper1 = mountWithTheme(<GuideAnchor target="target 1" />, routerContext);
-    wrapper2 = mountWithTheme(<GuideAnchor target="target 2" />, routerContext);
+
+    wrapper1 = mountWithTheme(<GuideAnchor target="issue_title" />, routerContext);
+    wrapper2 = mountWithTheme(<GuideAnchor target="exception" />, routerContext);
   });
 
   afterEach(function() {
@@ -37,11 +34,12 @@ describe('GuideAnchor', function() {
   });
 
   it('renders, advances, and finishes', async function() {
-    const data = JSON.parse(JSON.stringify(guides)); // deep copy
-    GuideActions.fetchSucceeded(data);
+    GuideActions.fetchSucceeded(serverGuide);
     await tick();
     wrapper1.update();
-    expect(wrapper1).toMatchSnapshot();
+
+    expect(wrapper1.find('Hovercard').exists()).toBe(true);
+    expect(wrapper1.find('StyledTitle').text()).toBe('Issue Details');
 
     // Clicking on next should deactivate the current card and activate the next one.
     wrapper1
@@ -53,7 +51,8 @@ describe('GuideAnchor', function() {
     wrapper2.update();
     expect(wrapper1.state('active')).toBeFalsy();
     expect(wrapper2.state('active')).toBeTruthy();
-    expect(wrapper2).toMatchSnapshot();
+    expect(wrapper2.find('Hovercard').exists()).toBe(true);
+    expect(wrapper2.find('StyledTitle').text()).toBe('Stacktrace');
 
     // Clicking on the button in the last step should finish the guide.
     const finishMock = MockApiClient.addMockResponse({
@@ -69,7 +68,7 @@ describe('GuideAnchor', function() {
       expect.objectContaining({
         method: 'PUT',
         data: {
-          guide_id: 1,
+          guide: 'issue',
           status: 'viewed',
         },
       })
@@ -77,8 +76,7 @@ describe('GuideAnchor', function() {
   });
 
   it('dismisses', async function() {
-    const data = JSON.parse(JSON.stringify(guides)); // deep copy
-    GuideActions.fetchSucceeded(data);
+    GuideActions.fetchSucceeded(serverGuide);
     await tick();
     wrapper1.update();
 
@@ -95,7 +93,7 @@ describe('GuideAnchor', function() {
       expect.objectContaining({
         method: 'PUT',
         data: {
-          guide_id: 1,
+          guide: 'issue',
           status: 'dismissed',
         },
       })
@@ -113,6 +111,6 @@ describe('GuideAnchor', function() {
     const component = wrapper.instance();
     wrapper.update();
     expect(component.state).toMatchObject({active: false});
-    expect(wrapper.find('Hovercard')).toHaveLength(0);
+    expect(wrapper.find('Hovercard').exists()).toBe(false);
   });
 });
diff --git a/tests/js/spec/components/modals/commandPaletteModal.spec.jsx b/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
index 2591ab3e17..ac1de33d5b 100644
--- a/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
+++ b/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
@@ -53,7 +53,7 @@ describe('Command Palette Modal', function() {
       },
     });
     MockApiClient.addMockResponse({
-      url: '/assistant/',
+      url: '/assistant/?v2',
       body: [],
     });
   });
diff --git a/tests/js/spec/components/modals/helpSearchModal.spec.jsx b/tests/js/spec/components/modals/helpSearchModal.spec.jsx
index 84ae03baff..f02e7fd58c 100644
--- a/tests/js/spec/components/modals/helpSearchModal.spec.jsx
+++ b/tests/js/spec/components/modals/helpSearchModal.spec.jsx
@@ -46,7 +46,7 @@ describe('Docs Search Modal', function() {
       },
     });
     MockApiClient.addMockResponse({
-      url: '/assistant/',
+      url: '/assistant/?v2',
       body: [],
     });
   });
diff --git a/tests/js/spec/components/modals/sudoModal.spec.jsx b/tests/js/spec/components/modals/sudoModal.spec.jsx
index 2743464d43..6b80cfb92b 100644
--- a/tests/js/spec/components/modals/sudoModal.spec.jsx
+++ b/tests/js/spec/components/modals/sudoModal.spec.jsx
@@ -17,7 +17,7 @@ describe('Sudo Modal', function() {
       },
     });
     Client.addMockResponse({
-      url: '/assistant/',
+      url: '/assistant/?v2',
       body: [],
     });
     Client.addMockResponse({
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index 71cd065258..416a07b54b 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -1,110 +1,88 @@
-import React from 'react';
-
 import GuideStore from 'app/stores/guideStore';
-import GuideAnchor from 'app/components/assistant/guideAnchor';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GuideStore', function() {
-  const anchor1 = <GuideAnchor target="target 1" />;
-  const anchor2 = <GuideAnchor target="target 2" />;
   let data;
 
   beforeEach(function() {
     ConfigStore.config = {
       user: {
-        isSuperuser: true,
+        isSuperuser: false,
+        dateJoined: new Date(2020, 0, 1),
       },
     };
     GuideStore.init();
-    data = {
-      Guide1: {
-        id: 1,
-        required_targets: ['target 1'],
-        steps: [
-          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
-          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
-          {message: 'Message 3', target: 'target 3', title: '3. Title 3'},
-        ],
-        seen: true,
-      },
-      Guide2: {
-        id: 2,
-        required_targets: ['target 1'],
-        steps: [
-          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
-          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
-        ],
+    data = [
+      {
+        guide: 'issue',
         seen: false,
       },
-    };
-    GuideStore.onRegisterAnchor(anchor1);
-    GuideStore.onRegisterAnchor(anchor2);
+      {guide: 'issue_stream', seen: true},
+    ];
+    GuideStore.onRegisterAnchor('issue_title');
+    GuideStore.onRegisterAnchor('exception');
+    GuideStore.onRegisterAnchor('breadcrumbs');
+    GuideStore.onRegisterAnchor('issue_stream');
   });
 
-  afterEach(function() {});
-
   it('should move through the steps in the guide', function() {
     GuideStore.onFetchSucceeded(data);
-    const guide = GuideStore.state.currentGuide;
     // Should pick the first non-seen guide in alphabetic order.
-    expect(guide.id).toEqual(2);
-    expect(guide.steps).toHaveLength(2);
+    expect(GuideStore.state.currentStep).toEqual(0);
+    expect(GuideStore.state.currentGuide.guide).toEqual('issue');
+    // Should prune steps that don't have anchors.
+    expect(GuideStore.state.currentGuide.steps).toHaveLength(3);
+
     GuideStore.onNextStep();
     expect(GuideStore.state.currentStep).toEqual(1);
+    GuideStore.onNextStep();
+    expect(GuideStore.state.currentStep).toEqual(2);
     GuideStore.onCloseGuide();
     expect(GuideStore.state.currentGuide).toEqual(null);
   });
 
-  it('should force show a guide', function() {
+  it('should force show a guide with #assistant', function() {
+    data = [
+      {
+        guide: 'issue',
+        seen: true,
+      },
+      {guide: 'issue_stream', seen: false},
+    ];
+
     GuideStore.onFetchSucceeded(data);
     window.location.hash = '#assistant';
     GuideStore.onURLChange();
-    expect(GuideStore.state.currentGuide.id).toEqual(1);
-    // Should prune steps that don't have anchors.
-    expect(GuideStore.state.currentGuide.steps).toHaveLength(2);
+    expect(GuideStore.state.currentGuide.guide).toEqual('issue');
     GuideStore.onCloseGuide();
-    expect(GuideStore.state.currentGuide.id).toEqual(2);
+    expect(GuideStore.state.currentGuide.guide).toEqual('issue_stream');
     window.location.hash = '';
   });
 
   it('should record analytics events when guide is cued', function() {
     const spy = jest.spyOn(GuideStore, 'recordCue');
     GuideStore.onFetchSucceeded(data);
-    expect(spy).toHaveBeenCalledWith(data.Guide2.id);
+    expect(spy).toHaveBeenCalledWith('issue');
     expect(spy).toHaveBeenCalledTimes(1);
-    spy.mockRestore();
-  });
 
-  it('should not send multiple cue analytics events for same guide', function() {
-    const spy = jest.spyOn(GuideStore, 'recordCue');
-    GuideStore.onFetchSucceeded(data);
-    expect(spy).toHaveBeenCalledWith(data.Guide2.id);
-    expect(spy).toHaveBeenCalledTimes(1);
     GuideStore.updateCurrentGuide();
     expect(spy).toHaveBeenCalledTimes(1);
+
+    GuideStore.onNextStep();
+    expect(spy).toHaveBeenCalledTimes(1);
     spy.mockRestore();
   });
 
   describe('discover sidebar guide', function() {
-    const anchor3 = <GuideAnchor target="discover_sidebar" />;
-
     beforeEach(function() {
-      data = {
-        discover_sidebar: {
-          id: 4,
-          required_targets: ['discover_sidebar'],
-          steps: [
-            {
-              title: 'Title 4',
-              message: 'Message 4',
-              target: 'discover_sidebar',
-            },
-          ],
+      data = [
+        {
+          guide: 'discover_sidebar',
           seen: false,
         },
-      };
+      ];
 
-      GuideStore.onRegisterAnchor(anchor3);
+      GuideStore.onRegisterAnchor('discover_sidebar');
     });
 
     it('does not render without user', function() {
@@ -120,7 +98,7 @@ describe('GuideStore', function() {
         },
       };
       GuideStore.onFetchSucceeded(data);
-      expect(GuideStore.state.currentGuide.id).toBe(data.discover_sidebar.id);
+      expect(GuideStore.state.currentGuide.guide).toBe('discover_sidebar');
     });
 
     it('shows discover sidebar guide to previously existing users', function() {
@@ -131,7 +109,7 @@ describe('GuideStore', function() {
         },
       };
       GuideStore.onFetchSucceeded(data);
-      expect(GuideStore.state.currentGuide.id).toBe(data.discover_sidebar.id);
+      expect(GuideStore.state.currentGuide.guide).toBe('discover_sidebar');
     });
 
     it('does not show discover sidebar guide to new users', function() {
@@ -146,7 +124,7 @@ describe('GuideStore', function() {
     });
 
     it('hides discover sidebar guide once seen', function() {
-      data.discover_sidebar.seen = true;
+      data[0].seen = true;
       // previous user
       ConfigStore.config = {
         user: {
diff --git a/tests/js/spec/views/app.spec.jsx b/tests/js/spec/views/app.spec.jsx
index 72492f71bd..c220463dfc 100644
--- a/tests/js/spec/views/app.spec.jsx
+++ b/tests/js/spec/views/app.spec.jsx
@@ -21,7 +21,7 @@ describe('App', function() {
     });
 
     MockApiClient.addMockResponse({
-      url: '/assistant/',
+      url: '/assistant/?v2',
       body: [],
     });
   });
diff --git a/tests/js/spec/views/projectTeams.spec.jsx b/tests/js/spec/views/projectTeams.spec.jsx
index fd848b2c6c..5f4a8ddc32 100644
--- a/tests/js/spec/views/projectTeams.spec.jsx
+++ b/tests/js/spec/views/projectTeams.spec.jsx
@@ -247,7 +247,7 @@ describe('ProjectTeams', function() {
       body: {},
     });
     MockApiClient.addMockResponse({
-      url: '/assistant/',
+      url: '/assistant/?v2',
       body: {},
     });
     MockApiClient.addMockResponse({
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
index 25e203bb3a..1cddeddb36 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
@@ -98,7 +98,7 @@ describe('Organization Developer Settings', function() {
         },
       });
       Client.addMockResponse({
-        url: '/assistant/',
+        url: '/assistant/?v2',
         body: [],
       });
       Client.addMockResponse({
