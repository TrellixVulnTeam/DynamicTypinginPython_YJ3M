commit 035c2acf0c7d7cb2600b5adc9a7824a56c865e42
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Oct 7 15:04:10 2015 -0700

    Use `target_key` from `rb==1.3`.

diff --git a/setup.py b/setup.py
index a89b48c6a8..147db1ed8b 100755
--- a/setup.py
+++ b/setup.py
@@ -111,7 +111,7 @@ install_requires = [
     'South==1.0.1',
     'toronado>=0.0.4,<0.1.0',
     'urllib3>=1.11,<1.12',
-    'rb>=1.1.0,<2.0.0',
+    'rb>=1.3.0,<2.0.0',
 ]
 
 postgres_requires = [
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 3a2f32a93d..659c1547df 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -184,9 +184,7 @@ class RedisTSDB(BaseTSDB):
 
         with self.cluster.fanout() as client:
             for model, key, values in items:
-                h = self.cluster.get_router().get_host_for_key(key)
-                c = client.target([h])
-
+                c = client.target_key(key)
                 for rollup, max_values in self.rollups:
                     expire = rollup * max_values  # XXX: This logic can lead to incorrect expiry values.
 
@@ -195,6 +193,9 @@ class RedisTSDB(BaseTSDB):
                     c.pfadd(k, m, *values)
                     c.expire(k, expire)
 
+        # TODO: Check to make sure these operations didn't fail, so we can
+        # raise an error if there were issues.
+
     def get_distinct_counts(self, model, keys, start, end):
         """
         Count distinct items during a time range.
@@ -218,12 +219,10 @@ class RedisTSDB(BaseTSDB):
         responses = {}
         with self.cluster.fanout() as client:
             for key in keys:
-                h = self.cluster.get_router().get_host_for_key(key)
-                c = client.target([h])
-
+                c = client.target_key(key)
                 make_key = functools.partial(get_key, key)
-                responses[key] = h, c.execute_command('pfcount', *map(make_key, intervals))
+                responses[key] = c.execute_command('pfcount', *map(make_key, intervals))
 
         upper = intervals[0]
         lower = intervals[-1] + rollup
-        return (upper, lower), {k: v.value[h] for k, (h, v) in responses.iteritems()}
+        return (upper, lower), {k: v.value for k, v in responses.iteritems()}
