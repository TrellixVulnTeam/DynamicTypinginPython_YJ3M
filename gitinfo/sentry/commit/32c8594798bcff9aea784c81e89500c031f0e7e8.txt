commit 32c8594798bcff9aea784c81e89500c031f0e7e8
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Sep 10 11:22:41 2010 -0700

    Refactored client so that it can be extended. USE_LOGGING is no longer documented. Added LoggingSentryClient.

diff --git a/README.rst b/README.rst
index 2adc5e26ac..2ac253d01d 100644
--- a/README.rst
+++ b/README.rst
@@ -146,14 +146,6 @@ You should also enable the ``SentryRouter`` to avoid things like extraneous tabl
 
 .. note:: This functionality REQUIRES Django 1.2.
 
-##############
-SENTRY_LOGGING
-##############
-
-Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``sentry``. Use this in conjuction with ``sentry.client.handlers.SentryHandler`` or your own handler to tweak how logging is dealt with.
-
-A good example use case for this, is if you want to write to something like a syslog ahead of time, and later process that into the database with another tool.
-
 ############################
 Integration with ``logging``
 ############################
diff --git a/sentry/client/base.py b/sentry/client/base.py
index 2f88fd807b..f0617e0288 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -39,6 +39,9 @@ class SentryClient(object):
             if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
                 return
 
+        return self.send(**kwargs)
+
+    def send(self, **kwargs):
         if settings.REMOTE_URL:
             data = {
                 'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
@@ -144,5 +147,4 @@ class SentryClient(object):
             traceback=tb_message,
             data=data,
             **kwargs
-        )
-SentryClient = SentryClient()
\ No newline at end of file
+        )
\ No newline at end of file
diff --git a/sentry/client/handlers.py b/sentry/client/handlers.py
index 9821346dde..f16796717b 100644
--- a/sentry/client/handlers.py
+++ b/sentry/client/handlers.py
@@ -2,6 +2,6 @@ import logging
 
 class SentryHandler(logging.Handler):
     def emit(self, record):
-        from sentry.client.base import SentryClient
+        from sentry.client.models import get_client
 
-        SentryClient.create_from_record(record)
\ No newline at end of file
+        get_client().create_from_record(record)
\ No newline at end of file
diff --git a/sentry/client/log.py b/sentry/client/log.py
new file mode 100644
index 0000000000..d551674d8d
--- /dev/null
+++ b/sentry/client/log.py
@@ -0,0 +1,18 @@
+from sentry.client.base import SentryClient
+
+import logging
+import sys
+
+class LoggingSentryClient(SentryClient):
+    logger_name = 'sentry'
+    default_level = logging.ERROR
+    
+    def __init__(self, *args, **kwargs):
+        super(LoggingSentryClient, self).__init__(*args, **kwargs)
+        self.logger = logging.getLogger(self.logger_name)
+    
+    def send(self, **kwargs):
+        exc_info = sys.exc_info()
+        self.logger.log(kwargs.pop('level') or self.default_level,
+                        kwargs.pop('message') or exc_info[0],
+                        exc_info=exc_info, extra=kwargs)
diff --git a/sentry/client/models.py b/sentry/client/models.py
index 146f198f95..f374c8b7c5 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -13,6 +13,15 @@ from sentry.helpers import get_installed_apps
 
 logger = logging.getLogger('sentry')
 
+_client = (None, None)
+def get_client():
+    global _client
+    if _client[0] != settings.CLIENT:
+        module, class_name = settings.CLIENT.rsplit('.', 1)
+        _client = (settings.CLIENT, getattr(__import__(module, {}, {}, class_name), class_name)())
+    return _client[1]
+client = get_client()
+
 @transaction.commit_on_success
 def sentry_exception_handler(sender, request=None, **kwargs):
     try:
@@ -63,11 +72,9 @@ def sentry_exception_handler(sender, request=None, **kwargs):
             data=data,
             view=view,
         )
-
-        if settings.USE_LOGGING:
-            logger.critical(exc_value, exc_info=sys.exc_info(), extra=extra)
-        else:
-            SentryClient.create_from_exception(**extra)
+        
+        client = get_client()
+        client.create_from_exception(**extra)
     except Exception, exc:
         try:
             logger.exception(u'Unable to process log entry: %s' % (exc,))
diff --git a/sentry/settings.py b/sentry/settings.py
index 5ef1492ad8..fb651126b8 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -11,8 +11,6 @@ CATCH_404_ERRORS = getattr(settings, 'SENTRY_CATCH_404_ERRORS', False)
 
 DATABASE_USING = getattr(settings, 'SENTRY_DATABASE_USING', None)
 
-USE_LOGGING = getattr(settings, 'SENTRY_USE_LOGGING', False)
-
 THRASHING_TIMEOUT = getattr(settings, 'SENTRY_THRASHING_TIMEOUT', 60)
 THRASHING_LIMIT = getattr(settings, 'SENTRY_THRASHING_LIMIT', 10)
 
@@ -38,4 +36,14 @@ REMOTE_URL = getattr(settings, 'SENTRY_REMOTE_URL', None)
 
 REMOTE_TIMEOUT = getattr(settings, 'SENTRY_REMOTE_TIMEOUT', 5)
 
-ADMINS = getattr(settings, 'SENTRY_ADMINS', [])
\ No newline at end of file
+ADMINS = getattr(settings, 'SENTRY_ADMINS', [])
+
+# TODO: deprecate this
+USE_LOGGING = getattr(settings, 'SENTRY_USE_LOGGING', False)
+
+if USE_LOGGING:
+    default_client = 'sentry.client.log.LoggingSentryClient'
+else:
+    default_client = 'sentry.client.base.SentryClient'
+
+CLIENT = getattr(settings, 'SENTRY_CLIENT', default_client)
\ No newline at end of file
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 3296ad5448..274331674f 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -24,7 +24,7 @@ from sentry import settings
 from sentry.helpers import transform
 from sentry.models import Message, GroupedMessage
 from sentry.client.base import SentryClient
-from sentry.client.models import sentry_exception_handler
+from sentry.client.models import sentry_exception_handler, get_client
 
 from models import TestModel, DuplicateKeyModel
 
@@ -226,14 +226,14 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
-            SentryClient.create_from_exception(exc)
+            get_client().create_from_exception(exc)
         else:
             self.fail('Unable to create `Message` entry.')
 
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
-            error = SentryClient.create_from_exception()
+            error = get_client().create_from_exception()
             self.assertTrue(error.data.get('__sentry__', {}).get('exc'))
         else:
             self.fail('Unable to create `Message` entry.')
@@ -247,7 +247,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
         
-        SentryClient.create_from_text('This is an error', level=logging.DEBUG)
+        get_client().create_from_text('This is an error', level=logging.DEBUG)
         
         self.assertEquals(Message.objects.count(), 3)
         self.assertEquals(GroupedMessage.objects.count(), 3)
@@ -262,7 +262,7 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999979)
         except Message.DoesNotExist, exc:
-            SentryClient.create_from_exception(exc)
+            get_client().create_from_exception(exc)
         else:
             self.fail('Unable to create `Message` entry.')
             
@@ -282,7 +282,7 @@ class SentryTestCase(TestCase):
         cnt = Message.objects.count()
         value = 'רונית מגן'
 
-        error = SentryClient.create_from_text(value)
+        error = get_client().create_from_text(value)
         self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
@@ -308,7 +308,7 @@ class SentryTestCase(TestCase):
         cnt = Message.objects.count()
         value = 'רונית מגן'.decode('utf-8')
 
-        error = SentryClient.create_from_text(value)
+        error = get_client().create_from_text(value)
         self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
@@ -330,50 +330,10 @@ class SentryTestCase(TestCase):
     
     def testLongURLs(self):
         # Fix: #6 solves URLs > 200 characters
-        error = SentryClient.create_from_text('hello world', url='a'*210)
+        error = get_client().create_from_text('hello world', url='a'*210)
         self.assertEquals(error.url, 'a'*200)
         self.assertEquals(error.data['url'], 'a'*210)
     
-    def testUseLogging(self):
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
-        
-        request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
-
-        try:
-            Message.objects.get(id=999999999)
-        except Message.DoesNotExist, exc:
-            sentry_exception_handler(request=request, sender=self)
-        else:
-            self.fail('Expected an exception.')
-        
-        self.assertEquals(Message.objects.count(), 1)
-        self.assertEquals(GroupedMessage.objects.count(), 1)
-        last = Message.objects.get()
-        self.assertEquals(last.logger, 'root')
-        self.assertEquals(last.class_name, 'DoesNotExist')
-        self.assertEquals(last.level, logging.ERROR)
-        self.assertEquals(last.message, smart_unicode(exc))
-        
-        settings.USE_LOGGING = True
-        
-        logger = logging.getLogger('sentry')
-        for h in logger.handlers:
-            logger.removeHandler(h)
-        logger.addHandler(logging.StreamHandler())
-        
-        try:
-            Message.objects.get(id=999999999)
-        except Message.DoesNotExist, exc:
-            sentry_exception_handler(request=request, sender=self)
-        else:
-            self.fail('Expected an exception.')
-        
-        self.assertEquals(Message.objects.count(), 1)
-        self.assertEquals(GroupedMessage.objects.count(), 1)
-        
-        settings.USE_LOGGING = False
-    
     def testThrashing(self):
         settings.THRASHING_LIMIT = 10
         settings.THRASHING_TIMEOUT = 60
@@ -382,7 +342,7 @@ class SentryTestCase(TestCase):
         GroupedMessage.objects.all().delete()
         
         for i in range(0, 50):
-            SentryClient.create_from_text('hi')
+            get_client().create_from_text('hi')
         
         self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
     
@@ -430,7 +390,7 @@ class SentryTestCase(TestCase):
         GroupedMessage.objects.all().delete()
         
         for i in range(0, 50):
-            SentryClient.create_from_text('hi')
+            get_client().create_from_text('hi')
         
         self.assertEquals(Message.objects.count(), 50)
 
@@ -767,4 +727,46 @@ class SentryHelpersTest(TestCase):
         self.assertEquals(get_db_engine(), 'mysql')
         
         settings.DATABASES = _databases
-        settings.DATABASE_ENGINE = _engine
\ No newline at end of file
+        settings.DATABASE_ENGINE = _engine
+
+class SentryClientTest(TestCase):
+    urls = 'sentry.tests.urls'
+
+    def setUp(self):
+        self._client = settings.CLIENT
+        
+    def tearDown(self):
+        settings.CLIENT = self._client
+    
+    def test_get_client(self):
+        from sentry.client.base import SentryClient
+        from sentry.client.log import LoggingSentryClient
+        self.assertEquals(get_client().__class__, SentryClient)
+        self.assertEquals(get_client(), get_client())
+    
+        settings.CLIENT = 'sentry.client.log.LoggingSentryClient'
+        
+        self.assertEquals(get_client().__class__, LoggingSentryClient)
+        self.assertEquals(get_client(), get_client())
+    
+        settings.CLIENT = 'sentry.client.base.SentryClient'
+    
+    def test_logging_client(self):
+        settings.CLIENT = 'sentry.client.log.LoggingSentryClient'
+        
+        client = get_client()
+        
+        _foo = {'': None}
+        
+        class handler(logging.Handler):
+            def emit(self, record):
+                _foo[''] = record
+
+        logger = client.logger
+        logger.addHandler(handler())
+        
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        
+        self.assertEquals(_foo[''].getMessage(), 'view exception')
+        self.assertEquals(_foo[''].levelno, client.default_level)
+        self.assertEquals(_foo[''].class_name, 'Exception')
\ No newline at end of file
