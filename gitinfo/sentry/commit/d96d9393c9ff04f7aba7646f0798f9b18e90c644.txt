commit d96d9393c9ff04f7aba7646f0798f9b18e90c644
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Nov 23 11:31:25 2018 +0100

    ref(utils): Make get_path and set_path stricter (#10733)

diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index f0cde1d9aa..072db67203 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -133,25 +133,29 @@ def get_path(data, *path, **kwargs):
     filtered with the given callback. Alternatively, pass ``True`` as filter to
     only filter ``None`` values.
     """
+    default = kwargs.pop('default', None)
+    f = kwargs.pop('filter', None)
+    for k in kwargs:
+        raise TypeError("set_path() got an undefined keyword argument '%s'" % k)
+
     for p in path:
         if isinstance(data, collections.Mapping) and p in data:
             data = data[p]
         elif isinstance(data, (list, tuple)) and -len(data) <= p < len(data):
             data = data[p]
         else:
-            return kwargs.get('default')
+            return default
 
-    f = kwargs.get('filter')
     if f and data and isinstance(data, (list, tuple)):
         data = list(filter((lambda x: x is not None) if f is True else f, data))
 
-    return data if data is not None else kwargs.get('default')
+    return data if data is not None else default
 
 
 def set_path(data, *path, **kwargs):
     """
     Recursively traverses or creates the specified path and sets the given value
-    argument. `None` is treated like a missing value. If a non-mapping is
+    argument. `None` is treated like a missing value. If a non-mapping item is
     encountered while traversing, the value is not set.
 
     This function is equivalent to a recursive dict.__setitem__. Returns True if
@@ -161,7 +165,14 @@ def set_path(data, *path, **kwargs):
     no existing value or it is None. See ``setdefault_path``.
     """
 
-    value = kwargs['value']
+    try:
+        value = kwargs.pop('value')
+    except KeyError:
+        raise TypeError("set_path() requires a 'value' keyword argument")
+
+    overwrite = kwargs.pop('overwrite', True)
+    for k in kwargs:
+        raise TypeError("set_path() got an undefined keyword argument '%s'" % k)
 
     for p in path[:-1]:
         if not isinstance(data, collections.Mapping):
@@ -174,7 +185,7 @@ def set_path(data, *path, **kwargs):
         return False
 
     p = path[-1]
-    if kwargs.get('overwrite', True) or data.get(p) is None:
+    if overwrite or data.get(p) is None:
         data[p] = value
         return True
 
@@ -185,7 +196,7 @@ def setdefault_path(data, *path, **kwargs):
     """
     Recursively traverses or creates the specified path and sets the given value
     argument if it does not exist. `None` is treated like a missing value. If a
-    non-mapping is encountered while traversing, the value is not set.
+    non-mapping item is encountered while traversing, the value is not set.
 
     This function is equivalent to a recursive dict.setdefault, except for None
     values. Returns True if the value was set, otherwise False.
diff --git a/tests/sentry/utils/test_safe.py b/tests/sentry/utils/test_safe.py
index 858af72ad9..48cbc94597 100644
--- a/tests/sentry/utils/test_safe.py
+++ b/tests/sentry/utils/test_safe.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from collections import OrderedDict
 from functools import partial
+import pytest
 
 from sentry.testutils import TestCase
 from sentry.utils.canonical import CanonicalKeyDict
@@ -138,6 +139,10 @@ class GetPathTest(TestCase):
         assert get_path({'a': {'b': 42}}, 'a', filter=True) == {'b': 42}
         assert get_path({'a': 42}, 'b', filter=True) is None
 
+    def test_kwargs(self):
+        with pytest.raises(TypeError):
+            get_path({}, 'foo', unknown=True)
+
 
 class SetPathTest(TestCase):
     def test_set_none(self):
@@ -172,3 +177,10 @@ class SetPathTest(TestCase):
         data = {}
         assert setdefault_path(data, 'a', 'b', value=42)
         assert data == {'a': {'b': 42}}
+
+    def test_kwargs(self):
+        with pytest.raises(TypeError):
+            set_path({}, 'foo')
+
+        with pytest.raises(TypeError):
+            set_path({}, 'foo', value=1, unknown=True)
