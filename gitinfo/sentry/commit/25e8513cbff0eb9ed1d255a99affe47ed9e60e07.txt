commit 25e8513cbff0eb9ed1d255a99affe47ed9e60e07
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 3 18:55:32 2014 -0800

    Set active date 30 seconds into the future

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7c302347c3..0f58a85fc0 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -10,7 +10,7 @@ from __future__ import absolute_import, print_function
 import logging
 import six
 
-from datetime import datetime
+from datetime import datetime, timedelta
 from django.conf import settings
 from django.db import IntegrityError, transaction
 from django.utils import timezone
@@ -478,12 +478,14 @@ class EventManager(object):
 
         is_regression = False
         if group.is_resolved() and plugin_is_regression(group, event):
-            # Making things atomic
+            # add 30 seconds to the regression window to account for
+            # races here
+            active_date = date + timedelta(seconds=30)
             is_regression = bool(Group.objects.filter(
                 id=group.id,
             ).exclude(
-                active_at__gte=date,
-            ).update(active_at=date, status=STATUS_UNRESOLVED))
+                active_at__gte=active_date,
+            ).update(active_at=active_date, status=STATUS_UNRESOLVED))
 
             transaction.commit_unless_managed(using=group._state.db)
 
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index d7955e4697..e5673de39e 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -156,9 +156,6 @@ class EventManagerTest(TestCase):
 
     @patch('sentry.models.Group.is_resolved')
     def test_unresolves_group_with_auto_resolve(self, mock_is_resolved):
-        # N.B. EventManager won't unresolve the group unless the event2 has a
-        # later timestamp than event1. MySQL doesn't support microseconds.
-
         mock_is_resolved.return_value = False
         manager = EventManager(self.make_event(
             event_id='a' * 32, checksum='a' * 32,
@@ -169,13 +166,13 @@ class EventManagerTest(TestCase):
         mock_is_resolved.return_value = True
         manager = EventManager(self.make_event(
             event_id='b' * 32, checksum='a' * 32,
-            timestamp=1403007315,
+            timestamp=1403007414,
         ))
         event2 = manager.save(1)
         assert event.group_id == event2.group_id
 
         group = Group.objects.get(id=event.group.id)
-        assert group.active_at == event2.datetime != event.datetime
+        assert group.active_at > event2.datetime > event.datetime
 
     def test_long_culprit(self):
         manager = EventManager(self.make_event(
