commit 89bdcba6854baaee8c454f2184630ad1d415eade
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Fri Apr 3 09:14:21 2020 +0200

    fix: Validate PII config in organization options as well (#18045)
    
    * fix: Validate PII config in organization options as well
    
    * fix tests

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 0538edc1eb..0f1a7129f3 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -16,6 +16,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models import organization as org_serializers
 from sentry.api.serializers.rest_framework import ListField
 from sentry.constants import LEGACY_RATE_LIMIT_OPTIONS, RESERVED_ORGANIZATION_SLUGS
+from sentry.datascrubbing import validate_pii_config_update
 from sentry.lang.native.utils import STORE_CRASH_REPORTS_DEFAULT, convert_crashreport_count
 from sentry.models import (
     AuditLogEntryEvent,
@@ -171,6 +172,10 @@ class OrganizationSerializer(serializers.Serializer):
             raise serializers.ValidationError('The slug "%s" is already in use.' % (value,))
         return value
 
+    def validate_relayPiiConfig(self, value):
+        organization = self.context["organization"]
+        return validate_pii_config_update(organization, value)
+
     def validate_sensitiveFields(self, value):
         if value and not all(value):
             raise serializers.ValidationError("Empty values are not allowed.")
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index be162ee533..307c8fa017 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -10,7 +10,6 @@ from django.db import IntegrityError, transaction
 from django.utils import timezone
 from rest_framework import serializers, status
 from rest_framework.response import Response
-from sentry_relay import validate_pii_config
 
 from sentry import features
 from sentry.utils.data_filters import FilterTypes
@@ -24,6 +23,7 @@ from sentry.api.serializers.rest_framework.list import EmptyListField
 from sentry.api.serializers.rest_framework.list import ListField
 from sentry.api.serializers.rest_framework.origin import OriginField
 from sentry.constants import RESERVED_PROJECT_SLUGS
+from sentry.datascrubbing import validate_pii_config_update
 from sentry.lang.native.symbolicator import parse_sources, InvalidSourcesError
 from sentry.lang.native.utils import convert_crashreport_count
 from sentry.models import (
@@ -174,25 +174,8 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
         return slug
 
     def validate_relayPiiConfig(self, value):
-        if not value:
-            return value
-
         organization = self.context["project"].organization
-        request = self.context["request"]
-        has_datascrubbers_v2 = features.has(
-            "organizations:datascrubbers-v2", organization, actor=request.user
-        )
-        if not has_datascrubbers_v2:
-            raise serializers.ValidationError(
-                "Organization does not have the datascrubbers-v2 feature enabled"
-            )
-
-        try:
-            validate_pii_config(value)
-        except ValueError as e:
-            raise serializers.ValidationError(e)
-
-        return value
+        return validate_pii_config_update(organization, value)
 
     def validate_builtinSymbolSources(self, value):
         if not value:
diff --git a/src/sentry/datascrubbing.py b/src/sentry/datascrubbing.py
index dcdf6e9ded..1112cd5b68 100644
--- a/src/sentry/datascrubbing.py
+++ b/src/sentry/datascrubbing.py
@@ -1,9 +1,12 @@
 from __future__ import absolute_import
 
 import copy
-import sentry_relay
 import six
 
+import sentry_relay
+from rest_framework import serializers
+
+from sentry import features
 from sentry.utils import metrics
 
 
@@ -79,6 +82,24 @@ def merge_pii_configs(prefixes_and_configs):
     return merged_config
 
 
+def validate_pii_config_update(organization, value):
+    if not value:
+        return value
+
+    has_datascrubbers_v2 = features.has("organizations:datascrubbers-v2", organization)
+    if not has_datascrubbers_v2:
+        raise serializers.ValidationError(
+            "Organization does not have the datascrubbers-v2 feature enabled"
+        )
+
+    try:
+        sentry_relay.validate_pii_config(value)
+    except ValueError as e:
+        raise serializers.ValidationError(e)
+
+    return value
+
+
 def _prefix_rule_references_in_rule(custom_rules, rule_def, prefix):
     if not isinstance(rule_def, dict):
         return rule_def
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 826987b9ce..9eb47c7be7 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -201,7 +201,6 @@ class OrganizationUpdateTest(APITestCase):
             "safeFields": [u"email"],
             "storeCrashReports": 10,
             "scrubIPAddresses": True,
-            "relayPiiConfig": '{"applications": {"$string": []}}',
             "scrapeJavaScript": False,
             "defaultRole": "owner",
             "require2FA": True,
@@ -232,7 +231,6 @@ class OrganizationUpdateTest(APITestCase):
         assert options.get("sentry:require_scrub_ip_address")
         assert options.get("sentry:sensitive_fields") == ["password"]
         assert options.get("sentry:safe_fields") == ["email"]
-        assert options.get("sentry:relay_pii_config") == '{"applications": {"$string": []}}'
         assert options.get("sentry:store_crash_reports") == 10
         assert options.get("sentry:scrape_javascript") is False
         assert options.get("sentry:join_requests") is False
@@ -379,6 +377,28 @@ class OrganizationUpdateTest(APITestCase):
         org = Organization.objects.get(id=org.id)
         assert org.status == OrganizationStatus.VISIBLE
 
+    def test_relay_pii_config(self):
+        org = self.create_organization(owner=self.user)
+        url = reverse("sentry-api-0-organization-details", kwargs={"organization_slug": org.slug})
+        self.login_as(user=self.user)
+        with self.feature("organizations:datascrubbers-v2"):
+            value = '{"applications": {"freeform": []}}'
+            resp = self.client.put(url, data={"relayPiiConfig": value})
+            assert resp.status_code == 200, resp.content
+            assert org.get_option("sentry:relay_pii_config") == value
+            assert resp.data["relayPiiConfig"] == value
+
+    def test_relay_pii_config_forbidden(self):
+        org = self.create_organization(owner=self.user)
+        url = reverse("sentry-api-0-organization-details", kwargs={"organization_slug": org.slug})
+        self.login_as(user=self.user)
+
+        value = '{"applications": {"freeform": []}}'
+        resp = self.client.put(url, data={"relayPiiConfig": value})
+        assert resp.status_code == 400
+        assert b"feature" in resp.content
+        assert org.get_option("sentry:relay_pii_config") is None
+
 
 class OrganizationDeleteTest(APITestCase):
     @patch("sentry.api.endpoints.organization_details.uuid4")
