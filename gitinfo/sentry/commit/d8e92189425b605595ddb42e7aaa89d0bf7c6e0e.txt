commit d8e92189425b605595ddb42e7aaa89d0bf7c6e0e
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 25 15:29:58 2015 -0800

    Enable SSO account links
    
    - Enable auth link identity page
    - Add resend action to member list
    - Add reinvite parameter to organization member details

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 9ab911c90a..55c563d1e7 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -1,14 +1,19 @@
 from __future__ import absolute_import
 
+from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    AuditLogEntry, AuditLogEntryEvent, AuthProvider, OrganizationMember,
     OrganizationMemberType
 )
 
 
+class OrganizationMemberSerializer(serializers.Serializer):
+    reinvite = serializers.BooleanField()
+
+
 class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
     def _is_only_owner(self, member):
         if member.type != OrganizationMemberType.OWNER:
@@ -24,6 +29,36 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
 
         return True
 
+    def put(self, request, organization, member_id):
+        try:
+            om = OrganizationMember.objects.filter(
+                organization=organization,
+                id=member_id,
+            ).select_related('user').get()
+        except OrganizationMember.DoesNotExist:
+            return Response(status=404)
+
+        serializer = OrganizationMemberSerializer(data=request.DATA, partial=True)
+        if not serializer.is_valid():
+            return Response(status=400)
+
+        has_sso = AuthProvider.objects.filter(
+            organization=organization,
+        ).exists()
+
+        result = serializer.object
+        # XXX(dcramer): if/when this expands beyond reinvite we need to check
+        # access level
+        if result.get('reinvite'):
+            if om.is_pending:
+                om.send_invite_email()
+            elif has_sso and not getattr(om.flags, 'sso:linked'):
+                om.send_sso_link_email()
+            else:
+                # TODO(dcramer): proper error message
+                return Response(status=400)
+        return Response(status=204)
+
     def delete(self, request, organization, member_id):
         if request.user.is_superuser:
             authorizing_access = OrganizationMemberType.OWNER
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index e0fe9c0c16..027adb363a 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -13,6 +13,9 @@ class OrganizationMemberSerializer(Serializer):
             'email': obj.email or obj.user.email,
             'access': obj.get_type_display(),
             'pending': obj.is_pending,
+            'flags': {
+                'sso:linked': getattr(obj.flags, 'sso:linked'),
+            },
             'dateCreated': obj.date_added,
             'avatarUrl': get_gravatar_url(obj.email, size=32),
         }
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index c525e06105..96b990d24f 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -121,6 +121,30 @@ class OrganizationMember(Model):
             logger = logging.getLogger('sentry.mail.errors')
             logger.exception(e)
 
+    def send_sso_link_email(self):
+        from sentry.utils.email import MessageBuilder
+
+        context = {
+            'email': self.email,
+            'organization_name': self.organization.name,
+            'url': absolute_uri(reverse('sentry-auth-link-identity', kwargs={
+                'organization_slug': self.organization.slug,
+                'token': self.token,
+            })),
+        }
+
+        msg = MessageBuilder(
+            subject='Action Required for %s' % (self.organization.name,),
+            template='sentry/emails/auth-link-identity.txt',
+            context=context,
+        )
+
+        try:
+            msg.send([self.email])
+        except Exception as e:
+            logger = logging.getLogger('sentry.mail.errors')
+            logger.exception(e)
+
     def get_display_name(self):
         if self.user_id:
             return self.user.get_display_name()
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index 4e343af9d9..77184d3d48 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -37,7 +37,7 @@
       </tr>
     </thead>
     <tbody>
-      {% for member, team_list in member_list %}
+      {% for member, team_list, needs_sso in member_list %}
         <tr>
           <td style="vertical-align: top">
             <img class="avatar" src="{% gravatar_url member.get_email size 20 %}">
@@ -46,13 +46,15 @@
             <strong><a href="{% url 'sentry-organization-member-settings' organization.slug member.id %}">
               {{ member.get_display_name }}
             </a></strong>
-            {% if member.is_pending %}
-              <small>&mdash; Invited</small>
-            {% endif %}
-            {% comment %}
             <br />
-            Not connected &middot; <a href="#">Resend SSO Invitation</a>
-            {% endcomment %}
+            {% if needs_sso or member.is_pending %}
+              {% if needs_sso %}
+                Pending SSO link
+              {% else %}
+                Invited
+              {% endif %}
+              &middot; <a href="javascript:void(0)" class="resend-invite" data-member-id="{{ member.id }}">Resend Invitation</a>
+            {% endif %}
           </td>
           <td>{{ member.get_email }}</td>
           <td>{{ member.get_type_display }}</td>
@@ -103,7 +105,25 @@
         $this.parents('tr').remove();
       },
       error: function() {
-        alert('There was an error while trying to remove the team member.');
+        alert('There was an error while trying to remove the member.');
+      }
+    });
+  });
+
+  $('.resend-invite').click(function(){
+    var $this = $(this);
+    $.ajax({
+      url: app.config.urlPrefix + '/api/0/organizations/' + app.config.organizationId + '/members/' + $this.data('member-id') + '/',
+      data: JSON.stringify({
+        reinvite: 1,
+      }),
+      contentType: 'application/json',
+      method: 'PUT',
+      success: function() {
+        $this.replaceWith('<span>Sent!</span>');
+      },
+      error: function() {
+        alert('There was an error while trying to reinvite the member.');
       }
     });
   });
diff --git a/src/sentry/web/frontend/auth_link_identity.py b/src/sentry/web/frontend/auth_link_identity.py
index 10316c1de2..6f8d2c6e48 100644
--- a/src/sentry/web/frontend/auth_link_identity.py
+++ b/src/sentry/web/frontend/auth_link_identity.py
@@ -11,7 +11,7 @@ from sentry.web.frontend.base import BaseView
 ERR_INVITE_INVALID = _('The invite link you followed is not valid.')
 
 
-class AuthLinkIdentity(BaseView):
+class AuthLinkIdentityView(BaseView):
     # TODO(dcramer): ideally we could show a login form here if they were auth'd
     # as an invalid account
     def handle(self, request, organization_slug, token):
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
index 36f960915d..2324715f7a 100644
--- a/src/sentry/web/frontend/organization_members.py
+++ b/src/sentry/web/frontend/organization_members.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 from collections import defaultdict
 
 from sentry.models import (
-    OrganizationMember, OrganizationMemberTeams, OrganizationMemberType
+    AuthProvider, OrganizationMember, OrganizationMemberTeams,
+    OrganizationMemberType
 )
 from sentry.web.frontend.base import OrganizationView
 
@@ -32,19 +33,26 @@ class OrganizationMembersView(OrganizationView):
 
         queryset = sorted(queryset, key=lambda x: x.email or x.user.get_display_name())
 
+        try:
+            auth_provider = AuthProvider.objects.get(organization=organization)
+        except AuthProvider.DoesNotExist:
+            auth_provider = None
+
         member_list = []
         for om in queryset:
-            member_list.append((om, team_map[om.id]))
+            needs_sso = bool(auth_provider and getattr(om.flags, 'sso:linked'))
+            member_list.append((om, team_map[om.id], needs_sso))
 
         # if the member is not the only owner we allow them to leave the org
         member_can_leave = any(
-            1 for om, _ in member_list
+            1 for om, _, _ in member_list
             if (om.type == OrganizationMemberType.OWNER
                 and om.user != request.user
                 and om.user is not None)
         )
 
         context = {
+            'org_has_sso': auth_provider is not None,
             'member_list': member_list,
             'authorizing_access': authorizing_access,
             'member_can_leave': member_can_leave,
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 8df0fffb6a..5afb430926 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -33,6 +33,7 @@ __all__ = ('urlpatterns',)
 
 from sentry.web.frontend.accept_organization_invite import AcceptOrganizationInviteView
 from sentry.web.frontend.access_group_migration import AccessGroupMigrationView
+from sentry.web.frontend.auth_link_identity import AuthLinkIdentityView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.auth_logout import AuthLogoutView
 from sentry.web.frontend.auth_organization_login import AuthOrganizationLoginView
@@ -103,12 +104,16 @@ urlpatterns += patterns('',
         name='sentry-mailgun-inbound-hook'),
 
     # Auth
+    url(r'^auth/link/(?P<organization_slug>[^/]+)/(?P<token>\w+)/$', AuthLinkIdentityView.as_view(),
+        name='sentry-auth-link-identity'),
     url(r'^auth/login/$', AuthLoginView.as_view(),
         name='sentry-login'),
-    url(r'^auth/sso/$', AuthProviderLoginView.as_view(),
-        name='sentry-auth-sso'),
     url(r'^auth/login/(?P<organization_slug>[^/]+)/$', AuthOrganizationLoginView.as_view(),
         name='sentry-auth-organization'),
+    url(r'^auth/sso/$', AuthProviderLoginView.as_view(),
+        name='sentry-auth-sso'),
+
+
     url(r'^auth/logout/$', AuthLogoutView.as_view(),
         name='sentry-logout'),
 
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index add49d2294..8a463b122e 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -1,11 +1,81 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from mock import patch
 
-from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.models import (
+    AuthProvider, OrganizationMember, OrganizationMemberType
+)
 from sentry.testutils import APITestCase
 
 
+class UpdateOrganizationMemberTest(APITestCase):
+    @patch('sentry.models.OrganizationMember.send_invite_email')
+    def test_reinvite_pending_member(self, mock_send_invite_email):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member_om = OrganizationMember.objects.create(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+
+        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'reinvite': 1})
+
+        assert resp.status_code == 204
+        mock_send_invite_email.assert_called_once_with()
+
+    @patch('sentry.models.OrganizationMember.send_sso_link_email')
+    def test_reinvite_sso_link(self, mock_send_sso_link_email):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member = self.create_user('bar@example.com')
+        member_om = OrganizationMember.objects.create(
+            organization=organization,
+            user=member,
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+        AuthProvider.objects.create(organization=organization, provider='dummy')
+
+        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'reinvite': 1})
+
+        assert resp.status_code == 204
+        mock_send_sso_link_email.assert_called_once_with()
+
+    @patch('sentry.models.OrganizationMember.send_sso_link_email')
+    def test_cannot_reinvite_normal_member(self, mock_send_sso_link_email):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member = self.create_user('bar@example.com')
+        member_om = OrganizationMember.objects.create(
+            organization=organization,
+            user=member,
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+
+        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'reinvite': 1})
+
+        assert resp.status_code == 400
+
+
 class DeleteOrganizationMemberTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index d186d72745..1924944dcf 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -8,7 +8,7 @@ from sentry.models import OrganizationMember
 from sentry.testutils import TestCase
 
 
-class PendingOrganizationMemberTest(TestCase):
+class OrganizationMemberTest(TestCase):
     def test_token_generation(self):
         member = OrganizationMember(id=1, organization_id=1, email='foo@example.com')
         with self.settings(SECRET_KEY='a'):
@@ -30,3 +30,15 @@ class PendingOrganizationMemberTest(TestCase):
             msg = mail.outbox[0]
 
             assert msg.to == ['foo@example.com']
+
+    def test_send_sso_link_email(self):
+        organization = self.create_organization()
+        member = OrganizationMember(id=1, organization=organization, email='foo@example.com')
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+            member.send_invite_email()
+
+            assert len(mail.outbox) == 1
+
+            msg = mail.outbox[0]
+
+            assert msg.to == ['foo@example.com']
diff --git a/tests/sentry/web/frontend/test_organization_members.py b/tests/sentry/web/frontend/test_organization_members.py
index a702bf444a..746d439061 100644
--- a/tests/sentry/web/frontend/test_organization_members.py
+++ b/tests/sentry/web/frontend/test_organization_members.py
@@ -57,6 +57,6 @@ class OrganizationMembersTest(TestCase):
         member_list = sorted(resp.context['member_list'], key=lambda x: x[0].id)
 
         assert member_list == [
-            (owner_om, []),
-            (member_om, [team_2]),
+            (owner_om, [], False),
+            (member_om, [team_2], False),
         ]
