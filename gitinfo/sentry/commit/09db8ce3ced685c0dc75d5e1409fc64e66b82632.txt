commit 09db8ce3ced685c0dc75d5e1409fc64e66b82632
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Sep 21 10:38:07 2016 -0700

    Add the ability to turn on notifications for your own activity. (#4178)

diff --git a/src/sentry/plugins/sentry_mail/activity/base.py b/src/sentry/plugins/sentry_mail/activity/base.py
index 28541ca6d0..1beaf1f69c 100644
--- a/src/sentry/plugins/sentry_mail/activity/base.py
+++ b/src/sentry/plugins/sentry_mail/activity/base.py
@@ -4,7 +4,9 @@ from django.core.urlresolvers import reverse
 from django.utils.html import escape, mark_safe
 
 from sentry import options
-from sentry.models import GroupSubscription, ProjectOption, UserAvatar
+from sentry.models import (
+    GroupSubscription, ProjectOption, UserAvatar, UserOption
+)
 from sentry.utils.avatar import get_email_avatar
 from sentry.utils.email import MessageBuilder, group_id_to_email
 from sentry.utils.http import absolute_uri
@@ -34,13 +36,24 @@ class ActivityEmail(object):
         # TODO(dcramer): not used yet today except by Release's
         if not self.group:
             return []
-        return [
-            u for u in
+
+        participants = set(
             GroupSubscription.objects.get_participants(
-                group=self.group,
+                group=self.group
             )
-            if u != self.activity.user
-        ]
+        )
+
+        receive_own_activity = UserOption.objects.get_value(
+            user=self.activity.user,
+            project=None,
+            key='self_notifications',
+            default='0'
+        ) == '1'
+
+        if not receive_own_activity:
+            participants.discard(self.activity.user)
+
+        return participants
 
     def get_template(self):
         return 'sentry/emails/activity/generic.txt'
diff --git a/src/sentry/templates/sentry/account/notifications.html b/src/sentry/templates/sentry/account/notifications.html
index 2cc2ca375a..069fb44978 100644
--- a/src/sentry/templates/sentry/account/notifications.html
+++ b/src/sentry/templates/sentry/account/notifications.html
@@ -47,6 +47,8 @@
 
         <p class="help-text help-block">Note: You'll always receive notifications if you're explicitly participating on an issue.</p>
 
+        {{ settings_form.self_notifications|as_crispy_field }}
+
         <hr />
 
         <h4>{% trans "Weekly Reports" %}</h4>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 21a91a6d83..69ff0e1f6c 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -7,15 +7,14 @@ sentry.web.forms.accounts
 """
 from __future__ import absolute_import
 
-import pytz
-
 from datetime import datetime
+
+import pytz
 from django import forms
 from django.conf import settings
 from django.contrib.auth import authenticate, get_user_model
 from django.utils.text import capfirst
 from django.utils.translation import ugettext_lazy as _
-from six.moves import range
 
 from sentry import options
 from sentry.app import ratelimiter
@@ -25,6 +24,7 @@ from sentry.models import (
 )
 from sentry.utils.auth import find_users, logger
 from sentry.web.forms.fields import ReadOnlyTextField
+from six.moves import range
 
 
 def _get_timezone_choices():
@@ -421,6 +421,10 @@ class NotificationSettingsForm(forms.Form):
         label=_('Receive updates for all issues by default'),
         required=False,
     )
+    self_notifications = forms.BooleanField(
+        label=_('Receive notifications about my own activity'),
+        required=False,
+    )
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
@@ -450,6 +454,13 @@ class NotificationSettingsForm(forms.Form):
             ) == UserOptionValue.all_conversations
         )
 
+        self.fields['self_notifications'].initial = UserOption.objects.get_value(
+            user=self.user,
+            project=None,
+            key='self_notifications',
+            default='0'
+        ) == '1'
+
     def get_title(self):
         return "General"
 
@@ -468,6 +479,13 @@ class NotificationSettingsForm(forms.Form):
             value='1' if self.cleaned_data['subscribe_by_default'] else '0',
         )
 
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='self_notifications',
+            value='1' if self.cleaned_data['self_notifications'] else '0',
+        )
+
         if self.cleaned_data.get('workflow_notifications') is True:
             UserOption.objects.set_value(
                 user=self.user,
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 0241260007..4672b4e092 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -2,32 +2,26 @@
 
 from __future__ import absolute_import
 
-import mock
-import six
 from datetime import datetime
 
+import mock
 import pytz
+import six
 from django.core import mail
 from django.utils import timezone
 from exam import fixture
 from mock import Mock
 
-from sentry.digests.notifications import (
-    build_digest,
-    event_to_record,
-)
+from sentry.digests.notifications import build_digest, event_to_record
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import (
-    Activity,
-    Event,
-    Group,
-    OrganizationMember,
-    OrganizationMemberTeam,
-    Rule,
+    Activity, Event, Group, GroupSubscription, OrganizationMember,
+    OrganizationMemberTeam, Rule, UserOption
 )
 from sentry.plugins import Notification
+from sentry.plugins.sentry_mail.activity.base import ActivityEmail
 from sentry.plugins.sentry_mail.models import MailPlugin
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, TransactionTestCase
 from sentry.utils.email import MessageBuilder
 
 
@@ -351,3 +345,37 @@ class MailPluginTest(TestCase):
 
         assert msg.subject == 'Re: [Sentry] [foo Bar] ERROR: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
+
+
+class ActivityEmailTestCase(TransactionTestCase):
+    def test_get_participants(self):
+        organization = self.create_organization(owner=self.create_user())
+        team = self.create_team(organization=organization)
+        project = self.create_project(organization=organization, team=team)
+        group = self.create_group(project=project)
+
+        actor = self.create_user()
+        other = self.create_user()
+
+        for user in (actor, other):
+            self.create_member([team], user=user, organization=organization)
+            GroupSubscription.objects.subscribe(group, user)
+
+        email = ActivityEmail(
+            Activity(
+                project=group.project,
+                group=group,
+                user=actor,
+            )
+        )
+
+        assert email.get_participants() == set([other])
+
+        UserOption.objects.set_value(
+            user=actor,
+            project=None,
+            key='self_notifications',
+            value='1'
+        )
+
+        assert email.get_participants() == set([actor, other])
