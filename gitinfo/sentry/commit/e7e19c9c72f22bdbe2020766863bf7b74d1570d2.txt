commit e7e19c9c72f22bdbe2020766863bf7b74d1570d2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 15 11:17:33 2014 -0800

    Add various permission integration tests

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index bfa6e8983c..d2a7700e5a 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -8,7 +8,8 @@ sentry.testutils.cases
 
 from __future__ import absolute_import
 
-__all__ = ('TestCase', 'TransactionTestCase', 'APITestCase')
+__all__ = ('TestCase', 'TransactionTestCase', 'APITestCase', 'RuleTestCase',
+           'PermissionTestCase')
 
 import base64
 import os.path
@@ -29,7 +30,7 @@ from nydus.db import create_cluster
 from rest_framework.test import APITestCase as BaseAPITestCase
 
 from sentry.constants import MODULE_ROOT
-from sentry.models import GroupMeta, ProjectOption
+from sentry.models import GroupMeta, OrganizationMemberType, ProjectOption
 from sentry.rules import EventState
 from sentry.utils import json
 
@@ -253,3 +254,195 @@ class RuleTestCase(TestCase):
             event = self.event
         state = self.get_state(**kwargs)
         assert rule.passes(event, state) is False
+
+
+class PermissionTestCase(TestCase):
+    def setUp(self):
+        super(PermissionTestCase, self).setUp()
+        self.owner = self.create_user()
+        self.organization = self.create_organization(owner=self.owner)
+        self.team = self.create_team(organization=self.organization)
+
+    def assert_can_access(self, user, path, method='GET'):
+        self.login_as(user)
+        resp = getattr(self.client, method.lower())(path)
+        assert resp.status_code >= 200 and resp.status_code < 300
+
+    def assert_cannot_access(self, user, path, method='GET'):
+        self.login_as(user)
+        resp = getattr(self.client, method.lower())(path)
+        assert resp.status_code >= 300
+
+    def assert_team_member_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False, teams=[self.team],
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_org_member_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=True,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_teamless_member_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_team_member_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False, teams=[self.team],
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_org_member_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=True,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_teamless_member_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_team_admin_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False, teams=[self.team],
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_org_admin_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=True,
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_teamless_admin_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False,
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_team_admin_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False, teams=[self.team],
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_org_admin_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=True,
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_teamless_admin_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False,
+            type=OrganizationMemberType.ADMIN,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_team_owner_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False, teams=[self.team],
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_org_owner_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=True,
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_teamless_owner_can_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False,
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.assert_can_access(user, path)
+
+    def assert_team_owner_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False, teams=[self.team],
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_org_owner_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=True,
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.assert_cannot_access(user, path)
+
+    def assert_teamless_owner_cannot_access(self, path):
+        user = self.create_user()
+        self.create_member(
+            user=user, organization=self.organization,
+            has_global_access=False,
+            type=OrganizationMemberType.OWNER,
+        )
+
+        self.assert_cannot_access(user, path)
diff --git a/tests/sentry/web/frontend/test_organization_audit_log.py b/tests/sentry/web/frontend/test_organization_audit_log.py
index 65b97a5137..82c330c8fb 100644
--- a/tests/sentry/web/frontend/test_organization_audit_log.py
+++ b/tests/sentry/web/frontend/test_organization_audit_log.py
@@ -3,7 +3,22 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.models import AuditLogEntry, AuditLogEntryEvent
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationAuditLogPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationAuditLogPermissionTest, self).setUp()
+        self.path = reverse('sentry-organization-audit-log', args=[self.organization.slug])
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
 
 
 class OrganizationAuditLogTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_home.py b/tests/sentry/web/frontend/test_organization_home.py
index e65aef8aff..a8e514e97f 100644
--- a/tests/sentry/web/frontend/test_organization_home.py
+++ b/tests/sentry/web/frontend/test_organization_home.py
@@ -2,7 +2,19 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationHomePermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationHomePermissionTest, self).setUp()
+        self.path = reverse('sentry-organization-home', args=[self.organization.slug])
+
+    def test_teamless_member_can_load(self):
+        self.assert_teamless_member_can_access(self.path)
+
+    def test_org_member_can_load(self):
+        self.assert_org_member_can_access(self.path)
 
 
 class OrganizationHomeTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 247470f376..0b1bd86c64 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -7,7 +7,24 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
     OrganizationMemberType
 )
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationMemberSettingsPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationMemberSettingsPermissionTest, self).setUp()
+        member = self.create_user()
+        om = self.create_member(user=member, organization=self.organization)
+        self.path = reverse('sentry-organization-member-settings', args=[self.organization.slug, om.id])
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
 
 
 class OrganizationMemberSettingsTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_settings.py b/tests/sentry/web/frontend/test_organization_settings.py
index 8f7fe6710d..37b8a9cb88 100644
--- a/tests/sentry/web/frontend/test_organization_settings.py
+++ b/tests/sentry/web/frontend/test_organization_settings.py
@@ -3,7 +3,22 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.models import Organization
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationSettingsPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationSettingsPermissionTest, self).setUp()
+        self.path = reverse('sentry-organization-settings', args=[self.organization.slug])
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
 
 
 class OrganizationSettingsTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_stats.py b/tests/sentry/web/frontend/test_organization_stats.py
index 945fbab276..d30fc29884 100644
--- a/tests/sentry/web/frontend/test_organization_stats.py
+++ b/tests/sentry/web/frontend/test_organization_stats.py
@@ -2,7 +2,22 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationStatsPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationStatsPermissionTest, self).setUp()
+        self.path = reverse('sentry-organization-stats', args=[self.organization.slug])
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
 
 
 class OrganizationStatsTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_remove_organization.py b/tests/sentry/web/frontend/test_remove_organization.py
index 361b2decbd..f9c8f33502 100644
--- a/tests/sentry/web/frontend/test_remove_organization.py
+++ b/tests/sentry/web/frontend/test_remove_organization.py
@@ -3,7 +3,22 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.models import Organization, OrganizationStatus
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class RemoveOrganizationPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(RemoveOrganizationPermissionTest, self).setUp()
+        self.path = reverse('sentry-remove-organization', args=[self.organization.slug])
+
+    def test_teamless_owner_cannot_load(self):
+        self.assert_teamless_owner_cannot_access(self.path)
+
+    def test_org_admin_cannot_load(self):
+        self.assert_org_admin_cannot_access(self.path)
+
+    def test_org_owner_can_load(self):
+        self.assert_org_owner_can_access(self.path)
 
 
 class RemoveOrganizationTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_remove_project.py b/tests/sentry/web/frontend/test_remove_project.py
index a7926c4431..756da67b4e 100644
--- a/tests/sentry/web/frontend/test_remove_project.py
+++ b/tests/sentry/web/frontend/test_remove_project.py
@@ -6,7 +6,29 @@ from django.core.urlresolvers import reverse
 
 from sentry.constants import STATUS_HIDDEN
 from sentry.models import Project
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class RemoveProjectPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(RemoveProjectPermissionTest, self).setUp()
+        self.project = self.create_project(team=self.team)
+        self.path = reverse('sentry-remove-project', args=[self.organization.slug, self.project.slug])
+
+    def test_teamless_owner_cannot_load(self):
+        self.assert_teamless_owner_cannot_access(self.path)
+
+    def test_team_admin_cannot_load(self):
+        self.assert_team_admin_cannot_access(self.path)
+
+    def test_team_owner_can_load(self):
+        self.assert_team_owner_can_access(self.path)
+
+    def test_org_admin_cannot_load(self):
+        self.assert_org_admin_cannot_access(self.path)
+
+    def test_org_owner_can_load(self):
+        self.assert_org_owner_can_access(self.path)
 
 
 class RemoveProjectTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_remove_team.py b/tests/sentry/web/frontend/test_remove_team.py
index 6770a986be..8662e8da41 100644
--- a/tests/sentry/web/frontend/test_remove_team.py
+++ b/tests/sentry/web/frontend/test_remove_team.py
@@ -5,7 +5,28 @@ import mock
 from django.core.urlresolvers import reverse
 
 from sentry.models import Team, TeamStatus
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class RemoveTeamPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(RemoveTeamPermissionTest, self).setUp()
+        self.path = reverse('sentry-remove-team', args=[self.organization.slug, self.team.slug])
+
+    def test_teamless_owner_cannot_load(self):
+        self.assert_teamless_owner_cannot_access(self.path)
+
+    def test_team_admin_cannot_load(self):
+        self.assert_team_admin_cannot_access(self.path)
+
+    def test_team_owner_can_load(self):
+        self.assert_team_owner_can_access(self.path)
+
+    def test_org_admin_cannot_load(self):
+        self.assert_org_admin_cannot_access(self.path)
+
+    def test_org_owner_can_load(self):
+        self.assert_org_owner_can_access(self.path)
 
 
 class RemoveTeamTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_team_settings.py b/tests/sentry/web/frontend/test_team_settings.py
index 32b779fe4f..3193e35355 100644
--- a/tests/sentry/web/frontend/test_team_settings.py
+++ b/tests/sentry/web/frontend/test_team_settings.py
@@ -4,7 +4,25 @@ from django.core.urlresolvers import reverse
 from exam import fixture
 
 from sentry.models import Team
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class TeamSettingsPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(TeamSettingsPermissionTest, self).setUp()
+        self.path = reverse('sentry-manage-team', args=[self.organization.slug, self.team.slug])
+
+    def test_team_admin_can_load(self):
+        self.assert_team_admin_can_access(self.path)
+
+    def test_team_member_cannot_load(self):
+        self.assert_team_member_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
 
 
 class TeamSettingsTest(TestCase):
