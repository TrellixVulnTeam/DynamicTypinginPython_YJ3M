commit 38f210ea6b5146339e62a69970ac582e78752194
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 20 11:43:59 2018 -0700

    fix(slack): Verify channel app permissions on alerts

diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index bc0ba1e565..9fd3078f9c 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -58,7 +58,7 @@ class SlackNotifyServiceForm(forms.Form):
             }
 
             raise forms.ValidationError(
-                _('The "%(channel)s" channel or user does not exist in the %(workspace)s Slack workspace.'),
+                _('The slack resource "%(channel)s" does not exist or has not been granted access in the %(workspace)s Slack workspace.'),
                 code='invalid',
                 params=params,
             )
@@ -141,6 +141,13 @@ class SlackNotifyServiceAction(EventAction):
             organizations=self.project.organization,
         )
 
+    def get_form_instance(self):
+        return self.form_cls(
+            self.data,
+            integrations=self.get_integrations(),
+            channel_transformer=self.get_channel_id,
+        )
+
     def get_channel_id(self, integration_id, name):
         try:
             integration = Integration.objects.get(
@@ -151,15 +158,30 @@ class SlackNotifyServiceAction(EventAction):
         except Integration.DoesNotExist:
             return None
 
-        # Look for channel ID
-        payload = {
+        session = http.build_session()
+
+        token_payload = {
             'token': integration.metadata['access_token'],
+        }
+
+        # Get slack app resource permissions
+        resp = session.get('https://slack.com/api/apps.permissions.info', params=token_payload)
+        resp = resp.json()
+        if not resp.get('ok'):
+            extra = {'error': resp.get('error')}
+            self.logger.info('rule.slack.permission_check_failed', extra=extra)
+            return None
+
+        channel_perms = resp['info']['channel']['resources']
+        dm_perms = resp['info']['im']['resources']
+
+        # Look for channel ID
+        channels_payload = dict(token_payload, **{
             'exclude_archived': False,
             'exclude_members': True,
-        }
+        })
 
-        session = http.build_session()
-        resp = session.get('https://slack.com/api/channels.list', params=payload)
+        resp = session.get('https://slack.com/api/channels.list', params=channels_payload)
         resp = resp.json()
         if not resp.get('ok'):
             self.logger.info('rule.slack.channel_list_failed', extra={'error': resp.get('error')})
@@ -168,14 +190,16 @@ class SlackNotifyServiceAction(EventAction):
         channel_id = {c['name']: c['id'] for c in resp['channels']}.get(name)
 
         if channel_id:
+            if channel_id in channel_perms['excluded_ids']:
+                return None
+
+            if not channel_perms['wildcard'] and channel_id not in channel_perms['ids']:
+                return None
+
             return (CHANNEL_PREFIX, channel_id)
 
         # Look for user ID
-        payload = {
-            'token': integration.metadata['access_token'],
-        }
-
-        resp = session.get('https://slack.com/api/users.list', params=payload)
+        resp = session.get('https://slack.com/api/users.list', params=token_payload)
         resp = resp.json()
         if not resp.get('ok'):
             self.logger.info('rule.slack.user_list_failed', extra={'error': resp.get('error')})
@@ -183,14 +207,7 @@ class SlackNotifyServiceAction(EventAction):
 
         member_id = {c['name']: c['id'] for c in resp['members']}.get(name)
 
-        if member_id:
+        if member_id and member_id in dm_perms['ids']:
             return (MEMBER_PREFIX, member_id)
 
         return None
-
-    def get_form_instance(self):
-        return self.form_cls(
-            self.data,
-            integrations=self.get_integrations(),
-            channel_transformer=self.get_channel_id,
-        )
diff --git a/tests/sentry/integrations/slack/test_notify_action.py b/tests/sentry/integrations/slack/test_notify_action.py
index 5d16a5df0d..e0e4edff49 100644
--- a/tests/sentry/integrations/slack/test_notify_action.py
+++ b/tests/sentry/integrations/slack/test_notify_action.py
@@ -16,6 +16,32 @@ class SlackNotifyActionTest(RuleTestCase):
     def setUp(self):
         event = self.get_event()
 
+        self.permissions = {
+            'ok': True,
+            'info': {
+                'channel': {
+                    'resources': {
+                        'wildcard': True,
+                        'excluded_ids': [],
+                        'ids': [],
+                    },
+                },
+                'im': {
+                    'resources': {
+                        'ids': ['member-id', 'morty-id'],
+                    },
+                },
+            },
+        }
+
+        responses.add(
+            method=responses.GET,
+            url='https://slack.com/api/apps.permissions.info',
+            status=200,
+            content_type='application/json',
+            body=json.dumps(self.permissions),
+        )
+
         self.integration = Integration.objects.create(
             provider='slack',
             name='Awesome Team',
@@ -173,6 +199,14 @@ class SlackNotifyActionTest(RuleTestCase):
             body=json.dumps(channels),
         )
 
+        responses.add(
+            method=responses.GET,
+            url='https://slack.com/api/channels.list',
+            status=200,
+            content_type='application/json',
+            body=json.dumps(channels),
+        )
+
         members = {
             'ok': 'true',
             'members': [{'name': 'other-member', 'id': 'member-id'}],
