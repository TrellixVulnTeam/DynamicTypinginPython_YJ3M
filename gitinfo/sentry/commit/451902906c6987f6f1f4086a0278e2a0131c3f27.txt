commit 451902906c6987f6f1f4086a0278e2a0131c3f27
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 6 17:52:48 2012 -0800

    Initial work on bookmarks (handles selection, but not adding/removing)

diff --git a/sentry/migrations/0034_auto__add_groupbookmark__add_unique_groupbookmark_project_user_group.py b/sentry/migrations/0034_auto__add_groupbookmark__add_unique_groupbookmark_project_user_group.py
new file mode 100644
index 0000000000..100cdacfaa
--- /dev/null
+++ b/sentry/migrations/0034_auto__add_groupbookmark__add_unique_groupbookmark_project_user_group.py
@@ -0,0 +1,200 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'GroupBookmark'
+        db.create_table('sentry_groupbookmark', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Project'])),
+            ('group', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Group'])),
+            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
+        ))
+        db.send_create_signal('sentry', ['GroupBookmark'])
+
+        # Adding unique constraint on 'GroupBookmark', fields ['project', 'user', 'group']
+        db.create_unique('sentry_groupbookmark', ['project_id', 'user_id', 'group_id'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'GroupBookmark', fields ['project', 'user', 'group']
+        db.delete_unique('sentry_groupbookmark', ['project_id', 'user_id', 'group_id'])
+
+        # Deleting model 'GroupBookmark'
+        db.delete_table('sentry_groupbookmark')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key', 'value'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 1d7e65e176..e8b127ab07 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -431,6 +431,20 @@ class Event(MessageBase):
         return module, self.data['__sentry__']['version']
 
 
+class GroupBookmark(Model):
+    """
+    Identifies a bookmark relationship between a user and an
+    aggregated event (Group).
+    """
+    project = models.ForeignKey(Project)  # denormalized
+    group = models.ForeignKey(Group, related_name="bookmark_set")
+    user = models.ForeignKey(User, related_name="bookmark_set")
+
+    class Meta:
+        # composite index includes project for efficient queries
+        unique_together = (('project', 'user', 'group'),)
+
+
 class FilterValue(Model):
     """
     Stores references to available filters.
diff --git a/sentry/templates/sentry/groups/group_list.html b/sentry/templates/sentry/groups/group_list.html
index 265f15361d..3131b03ea2 100644
--- a/sentry/templates/sentry/groups/group_list.html
+++ b/sentry/templates/sentry/groups/group_list.html
@@ -23,7 +23,7 @@
     <div class="sparkline" id="sparkline"></div>
     {% if VIEWS %}
         <ul class="pills">
-            <li{% if not view %} class="active"{% endif %}><a href="{% url sentry project.pk %}">All</a></li>
+            <li{% if not view %} class="active"{% endif %}><a href="{% url sentry project.pk %}">{% trans "All" %}</a></li>
             {% for v in VIEWS %}
                 <li{% if view == v %} class="active"{% endif %}><a href="{% url sentry project.pk v.pk %}">{{ v.verbose_name_plural }}</a></li>
             {% endfor %}
@@ -35,6 +35,15 @@
 {% block heading %}{% trans "Events <small>Aggregated</small>" %}{% endblock %}
 
 {% block sidebar %}
+    {% querystring from request without bookmarks as bookmark_querystring %}
+    <div class="sidebar-module sidebar-module-{{ filter.column }}">
+        <h2>{% trans "Bookmarks" %}</h2>
+        <ul class="bookmarks-list filter-list">
+            <li{% if not request.GET.bookmarks %} class="active"{% endif %}><a href="?{{ querystring }}">{% trans "All Events" %}</a></li>
+            <li{% if request.GET.bookmarks %} class="active"{% endif %}><a href="?{{ querystring }}&amp;bookmarks=1">{% trans "Only Bookmarks" %}</a></li>
+        </ul>
+    </div>
+
     {% for filter in filters %}
         <div class="sidebar-module sidebar-module-{{ filter.column }}">
             {% if filter.show_label %}
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 8178c779e0..9b26145793 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -203,3 +203,7 @@ def is_float(var):
     except ValueError:
         return False
     return True
+
+
+def has_trending(alias='default'):
+    return not get_db_engine('default').startswith('sqlite')
diff --git a/sentry/views/exception.py b/sentry/views/exception.py
index 0cd773ea93..01b8907007 100644
--- a/sentry/views/exception.py
+++ b/sentry/views/exception.py
@@ -13,8 +13,8 @@ __all__ = ('Exception',)
 
 
 class Exception(View):
-    verbose_name = _('exception')
-    verbose_name_plural = _('exceptions')
+    verbose_name = _('Exception')
+    verbose_name_plural = _('Exceptions')
 
     def should_store(self, event):
         return 'sentry.interfaces.Exception' in event.interfaces
diff --git a/sentry/views/message.py b/sentry/views/message.py
index a441e04b1a..5ca86399c2 100644
--- a/sentry/views/message.py
+++ b/sentry/views/message.py
@@ -13,8 +13,8 @@ __all__ = ('Message',)
 
 
 class Message(View):
-    verbose_name = _('message')
-    verbose_name_plural = _('messages')
+    verbose_name = _('Message')
+    verbose_name_plural = _('Messages')
 
     def should_store(self, event):
         return 'sentry.interfaces.Message' in event.interfaces
diff --git a/sentry/views/query.py b/sentry/views/query.py
index 090ab842b2..df833fd085 100644
--- a/sentry/views/query.py
+++ b/sentry/views/query.py
@@ -13,8 +13,8 @@ __all__ = ('Query',)
 
 
 class Query(View):
-    verbose_name = _('query')
-    verbose_name_plural = _('queries')
+    verbose_name = _('Query')
+    verbose_name_plural = _('Queries')
 
     def should_store(self, event):
         return 'sentry.interfaces.Query' in event.interfaces
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index acdb11b5b1..f077c36cff 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -36,11 +36,9 @@ def event_list(request, project):
     event_list = Event.objects.filter(project=project).order_by('-datetime')
 
     # TODO: implement separate API for messages
-    any_filter = False
     for filter_ in filters:
         if not filter_.is_set():
             continue
-        any_filter = True
         event_list = filter_.get_query_set(event_list)
 
     offset = (page - 1) * settings.MESSAGES_PER_PAGE
@@ -55,7 +53,6 @@ def event_list(request, project):
         'has_realtime': has_realtime,
         'event_list': event_list[offset:limit],
         'today': today,
-        'any_filter': any_filter,
         'filters': filters,
     }, request)
 
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 12d7f23682..81a8232b89 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -1,6 +1,6 @@
 """
-sentry.web.views
-~~~~~~~~~~~~~~~~
+sentry.web.frontend.groups
+~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
@@ -17,12 +17,13 @@ from django.shortcuts import get_object_or_404
 from django.template.loader import render_to_string
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.csrf import csrf_exempt
 
 from sentry.conf import settings
 from sentry.filters import Filter
 from sentry.models import Group, Event, Project, View
-from sentry.utils import json, get_db_engine
+from sentry.utils import json, has_trending
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response, \
     get_project_list
@@ -31,7 +32,82 @@ uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 event_re = re.compile(r'^(?P<event_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
 
 
-HAS_TRENDING = not get_db_engine('default').startswith('sqlite')
+SORT_OPTIONS = (
+    'priority',
+    'date',
+    'new',
+    'freq',
+    'tottime',
+    'avgtime',
+    'accel_15',
+    'accel_60',
+)
+DEFAULT_SORT_OPTION = 'priority'
+
+
+def _get_sort_label(sort):
+    if sort.startswith('accel_'):
+        n = sort.split('accel_', 1)[-1]
+        return _('Trending: %d minutes', n)
+
+    return {
+        'date': _('Last Seen'),
+        'new': _('First Seen'),
+        'freq': _('Frequency'),
+        'tottime': _('Total Time Spent'),
+        'avgtime': _('Average Time Spent'),
+        'priority': _('Priority'),
+    }[sort]
+
+
+def _get_group_list(request, project, view=None):
+    filters = []
+    for cls in Filter.handlers.filter(Group):
+        filters.append(cls(request))
+
+    event_list = Group.objects
+    if request.GET.get('bookmarks'):
+        event_list = event_list.filter(
+            bookmark_set__project=project,
+            bookmark_set__user=request.user,
+        )
+    else:
+        event_list = event_list.filter(project=project)
+
+    if view:
+        event_list = event_list.filter(views=view)
+
+    for filter_ in filters:
+        if not filter_.is_set():
+            continue
+        event_list = filter_.get_query_set(event_list)
+
+    sort = request.GET.get('sort')
+    if sort not in SORT_OPTIONS:
+        sort = DEFAULT_SORT_OPTION
+
+    if sort == 'date':
+        event_list = event_list.order_by('-last_seen')
+    elif sort == 'new':
+        event_list = event_list.order_by('-first_seen')
+    elif sort == 'freq':
+        event_list = event_list.order_by('-times_seen')
+    elif sort == 'tottime':
+        event_list = event_list.filter(time_spent_count__gt=0)\
+                                .order_by('-time_spent_total')
+    elif sort == 'avgtime':
+        event_list = event_list.filter(time_spent_count__gt=0)\
+                               .extra(select={'avg_time_spent': 'time_spent_total / time_spent_count'})\
+                               .order_by('-avg_time_spent')
+    elif has_trending() and sort and sort.startswith('accel_'):
+        event_list = Group.objects.get_accelerated(event_list, minutes=int(sort.split('_', 1)[1]))
+    elif sort == 'priority':
+        sort = 'priority'
+        event_list = event_list.order_by('-score', '-last_seen')
+    else:
+        raise NotImplementedError('Sort not implemented: %r' % sort)
+
+    return filters, event_list
 
 
 @login_required
@@ -45,48 +121,23 @@ def ajax_handler(request, project):
         return render_to_response('sentry/partial/_notification.html', request.GET)
 
     def poll(request, project):
-        filters = []
-        for cls in Filter.handlers.filter(Group):
-            filters.append(cls(request))
-
         offset = 0
         limit = settings.MESSAGES_PER_PAGE
 
-        event_list = Group.objects.filter(project=project)
-
         view_id = request.GET.get('view_id')
         if view_id:
             try:
                 view = View.objects.get(pk=view_id)
             except View.DoesNotExist:
                 return HttpResponseRedirect(reverse('sentry', args=[project.pk]))
-
-            event_list = event_list.filter(views=view)
-
-        for filter_ in filters:
-            if not filter_.is_set():
-                continue
-            event_list = filter_.get_query_set(event_list)
-
-        sort = request.GET.get('sort')
-        if sort == 'date':
-            event_list = event_list.order_by('-last_seen')
-        elif sort == 'new':
-            event_list = event_list.order_by('-first_seen')
-        elif sort == 'freq':
-            event_list = event_list.order_by('-times_seen')
-        elif sort == 'tottime':
-            event_list = event_list.filter(time_spent_count__gt=0)\
-                                    .order_by('-time_spent_total')
-        elif sort == 'avgtime':
-            event_list = event_list.filter(time_spent_count__gt=0)\
-                                   .extra(select={'avg_time_spent': 'time_spent_total / time_spent_count'})\
-                                   .order_by('-avg_time_spent')
-        elif HAS_TRENDING and sort and sort.startswith('accel_'):
-            event_list = Group.objects.get_accelerated(event_list, minutes=int(sort.split('_', 1)[1]))
         else:
-            sort = 'priority'
-            event_list = event_list.order_by('-score', '-last_seen')
+            view = None
+
+        filters, event_list = _get_group_list(
+            request=request,
+            project=project,
+            view=view,
+        )
 
         data = [
             (m.pk, {
@@ -233,62 +284,30 @@ def search(request, project):
 @login_required
 @has_access
 def group_list(request, project, view_id=None):
-    filters = []
-    for cls in Filter.handlers.filter(Group):
-        filters.append(cls(request))
-
     try:
         page = int(request.GET.get('p', 1))
     except (TypeError, ValueError):
         page = 1
 
-    event_list = Group.objects.filter(project=project)
-
     if view_id:
         try:
             view = View.objects.get(pk=view_id)
         except View.DoesNotExist:
             return HttpResponseRedirect(reverse('sentry', args=[project.pk]))
-
-        event_list = event_list.filter(views=view)
     else:
         view = None
 
-    # Filters only apply if we're not searching
-    any_filter = False
-    for filter_ in filters:
-        if not filter_.is_set():
-            continue
-        any_filter = True
-        event_list = filter_.get_query_set(event_list)
+    filters, event_list = _get_group_list(
+        request=request,
+        project=project,
+        view=view,
+    )
 
+    # XXX: this is duplicate in _get_group_list
     sort = request.GET.get('sort')
-    if sort == 'date':
-        sort_label = 'Last Seen'
-        event_list = event_list.order_by('-last_seen')
-    elif sort == 'new':
-        sort_label = 'First Seen'
-        event_list = event_list.order_by('-first_seen')
-    elif sort == 'freq':
-        sort_label = 'Frequency'
-        event_list = event_list.order_by('-times_seen')
-    elif sort == 'tottime':
-        sort_label = 'Total Time Spent'
-        event_list = event_list.filter(time_spent_count__gt=0)\
-                                .order_by('-time_spent_total')
-    elif sort == 'avgtime':
-        sort_label = 'Average Time Spent'
-        event_list = event_list.filter(time_spent_count__gt=0)\
-                               .extra(select={'_avg_time_spent': 'time_spent_total / time_spent_count'})\
-                               .order_by('-_avg_time_spent')
-    elif HAS_TRENDING and sort and sort.startswith('accel_'):
-        minutes = int(sort.split('_', 1)[1])
-        sort_label = 'Trending: {0} minutes'.format(minutes)
-        event_list = Group.objects.get_accelerated(event_list, minutes=minutes)
-    else:
-        sort_label = 'Priority'
-        sort = 'priority'
-        event_list = event_list.order_by('-score', '-last_seen')
+    if sort not in SORT_OPTIONS:
+        sort = DEFAULT_SORT_OPTION
+    sort_label = _get_sort_label(sort)
 
     today = datetime.datetime.now()
 
@@ -301,10 +320,9 @@ def group_list(request, project, view_id=None):
         'today': today,
         'sort': sort,
         'sort_label': sort_label,
-        'any_filter': any_filter,
         'filters': filters,
         'view': view,
-        'HAS_TRENDING': HAS_TRENDING,
+        'HAS_TRENDING': has_trending(),
     }, request)
 
 
