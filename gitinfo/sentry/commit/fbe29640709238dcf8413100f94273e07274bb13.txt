commit fbe29640709238dcf8413100f94273e07274bb13
Author: evanh <evanh@users.noreply.github.com>
Date:   Tue Mar 17 15:06:24 2020 -0400

    fix(discover) Finalize available functions (#17593)
    
    * fix(discover) Finalize available functions
    
    We finalized the list of available functions, so reflect that change in the
    backend. We still need the discover shim for the old queries, but there
    is another PR incoming to migrate all of that over.
    
    * Remove parameters from UI code as well.
    
    Co-authored-by: Mark Story <mark@sentry.io>

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 5187193d19..247e4604b0 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -873,19 +873,19 @@ FIELD_ALIASES = {
 }
 
 
-def get_json_meta_type(field, snuba_type):
-    alias_definition = FIELD_ALIASES.get(field)
+def get_json_meta_type(field_alias, snuba_type):
+    alias_definition = FIELD_ALIASES.get(field_alias)
     if alias_definition and alias_definition.get("result_type"):
         return alias_definition.get("result_type")
-    function_match = FUNCTION_ALIAS_PATTERN.match(field)
+    function_match = FUNCTION_ALIAS_PATTERN.match(field_alias)
     if function_match:
         function_definition = FUNCTIONS.get(function_match.group(1))
         if function_definition and function_definition.get("result_type"):
             return function_definition.get("result_type")
     # TODO remove this check when field aliases are removed.
-    if "duration" in field or field in ("p75", "p95", "p99"):
+    if "duration" in field_alias or field_alias in ("p75", "p95", "p99"):
         return "duration"
-    if field == "transaction.status":
+    if field_alias == "transaction.status":
         return "string"
     return get_json_type(snuba_type)
 
@@ -1003,6 +1003,24 @@ FUNCTIONS = {
         "aggregate": [u"quantile({percentile:.2f})", u"{column}", None],
         "result_type": "duration",
     },
+    "p75": {
+        "name": "p75",
+        "args": [],
+        "aggregate": [u"quantile(0.75)", "transaction.duration", None],
+        "result_type": "duration",
+    },
+    "p95": {
+        "name": "p95",
+        "args": [],
+        "aggregate": [u"quantile(0.95)", "transaction.duration", None],
+        "result_type": "duration",
+    },
+    "p99": {
+        "name": "p99",
+        "args": [],
+        "aggregate": [u"quantile(0.99)", "transaction.duration", None],
+        "result_type": "duration",
+    },
     "rps": {
         "name": "rps",
         "args": [IntervalDefault("interval", 1, None)],
@@ -1029,19 +1047,19 @@ FUNCTIONS = {
     },
     "apdex": {
         "name": "apdex",
-        "args": [DurationColumn("column"), NumberRange("satisfaction", 0, None)],
-        "transform": u"apdex({column}, {satisfaction:g})",
+        "args": [NumberRange("satisfaction", 0, None)],
+        "transform": u"apdex(duration, {satisfaction:g})",
         "result_type": "number",
     },
     "impact": {
         "name": "impact",
-        "args": [DurationColumn("column"), NumberRange("satisfaction", 0, None)],
+        "args": [NumberRange("satisfaction", 0, None)],
         "calculated_args": [{"name": "tolerated", "fn": lambda args: args["satisfaction"] * 4.0}],
         # Snuba is not able to parse Clickhouse infix expressions. We should pass aggregations
         # in a format Snuba can parse so query optimizations can be applied.
         # It has a minimal prefix parser though to bridge the gap between the current state
         # and when we will have an easier syntax.
-        "transform": u"plus(minus(1, divide(plus(countIf(less({column}, {satisfaction:g})),divide(countIf(and(greater({column}, {satisfaction:g}),less({column}, {tolerated:g}))),2)),count())),multiply(minus(1,divide(1,sqrt(uniq(user)))),3))",
+        "transform": u"plus(minus(1, divide(plus(countIf(less(duration, {satisfaction:g})),divide(countIf(and(greater(duration, {satisfaction:g}),less(duration, {tolerated:g}))),2)),count())),multiply(minus(1,divide(1,sqrt(uniq(user)))),3))",
         "result_type": "number",
     },
     "error_rate": {
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 7e35e42902..22160b28f2 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -427,13 +427,13 @@ def transform_results(result, translated_columns, snuba_args):
 # TODO(evanh) This is only here for backwards compatibilty with old queries using these deprecated
 # aliases. Once we migrate the queries these can go away.
 OLD_FUNCTIONS_TO_NEW = {
-    "p75": "percentile(transaction.duration, 0.75)",
-    "p95": "percentile(transaction.duration, 0.95)",
-    "p99": "percentile(transaction.duration, 0.99)",
+    "p75": "p75()",
+    "p95": "p95()",
+    "p99": "p99()",
     "last_seen": "last_seen()",
     "latest_event": "latest_event()",
-    "apdex": "apdex(transaction.duration, 300)",
-    "impact": "impact(transaction.duration, 300)",
+    "apdex": "apdex(300)",
+    "impact": "impact(300)",
 }
 
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 50d90fd5ec..a323eb3d31 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -135,12 +135,6 @@ export const AGGREGATIONS = {
   },
   apdex: {
     parameters: [
-      {
-        kind: 'column',
-        columnTypes: ['duration'],
-        defaultValue: 'transaction.duration',
-        required: true,
-      },
       {
         kind: 'value',
         dataType: 'number',
@@ -153,12 +147,6 @@ export const AGGREGATIONS = {
   },
   impact: {
     parameters: [
-      {
-        kind: 'column',
-        columnTypes: ['duration'],
-        defaultValue: 'transaction.duration',
-        required: true,
-      },
       {
         kind: 'value',
         dataType: 'number',
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
index f360107794..cebf07eb66 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
@@ -101,7 +101,7 @@ class ColumnEditRow extends React.Component<Props> {
           }
         }
         if (param.kind === 'value') {
-          column.function[i + 1] = param.defaultValue;
+          column.function[i + 1] = param.defaultValue || '';
         }
       });
 
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
index 8ff209215e..da158e844e 100644
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
+++ b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
@@ -123,7 +123,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
         columns: [
           {kind: 'function', function: ['count', 'id']},
           {kind: 'function', function: ['count_unique', 'title']},
-          {kind: 'function', function: ['apdex', 'transaction.duration', 200]},
+          {kind: 'function', function: ['percentile', 'transaction.duration', '0.66']},
         ],
         onApply: () => void 0,
         tagKeys,
@@ -137,11 +137,11 @@ describe('EventsV2 -> ColumnEditModal', function() {
       expect(countRow.find('SelectControl')).toHaveLength(1);
       expect(countRow.find('StyledInput[disabled]')).toHaveLength(2);
 
-      const apdexRow = wrapper.find('ColumnEditRow').last();
+      const percentileRow = wrapper.find('ColumnEditRow').last();
       // two select fields, and one number input.
-      expect(apdexRow.find('SelectControl')).toHaveLength(2);
-      expect(apdexRow.find('StyledInput[disabled]')).toHaveLength(0);
-      expect(apdexRow.find('StyledInput[inputMode="numeric"]')).toHaveLength(1);
+      expect(percentileRow.find('SelectControl')).toHaveLength(2);
+      expect(percentileRow.find('StyledInput[disabled]')).toHaveLength(0);
+      expect(percentileRow.find('StyledInput[inputMode="numeric"]')).toHaveLength(1);
     });
   });
 
@@ -202,7 +202,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
     });
 
     it('shows additional inputs for multi-parameter functions', function() {
-      selectByLabel(wrapper, 'apdex(\u2026)', {name: 'field', at: 0, control: true});
+      selectByLabel(wrapper, 'percentile(\u2026)', {name: 'field', at: 0, control: true});
 
       // Parameter select should display and use the default value.
       const field = wrapper.find('ColumnEditRow SelectControl[name="parameter"]');
@@ -210,7 +210,7 @@ describe('EventsV2 -> ColumnEditModal', function() {
 
       // Input should show and have default value.
       const refinement = wrapper.find('ColumnEditRow input[inputMode="numeric"]');
-      expect(refinement.props().value).toBe('300');
+      expect(refinement.props().value).toBe('0.5');
     });
   });
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 6be357547f..21e93aa188 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1176,12 +1176,12 @@ class GetSnubaQueryArgsTest(TestCase):
         assert result.having == [["percentile_transaction_duration_0_75", ">", 100]]
 
     def test_function_with_float_arguments(self):
-        result = get_filter("apdex(transaction.duration, 300):>0.5")
-        assert result.having == [["apdex_transaction_duration_300", ">", 0.5]]
+        result = get_filter("apdex(300):>0.5")
+        assert result.having == [["apdex_300", ">", 0.5]]
 
     def test_function_with_negative_arguments(self):
-        result = get_filter("apdex(transaction.duration, 300):>-0.5")
-        assert result.having == [["apdex_transaction_duration_300", ">", -0.5]]
+        result = get_filter("apdex(300):>-0.5")
+        assert result.having == [["apdex_300", ">", -0.5]]
 
     @pytest.mark.xfail(reason="this breaks issue search so needs to be redone")
     def test_trace_id(self):
@@ -1223,8 +1223,8 @@ class ResolveFieldListTest(unittest.TestCase):
             "avg(transaction.duration)",
             "latest_event()",
             "last_seen()",
-            "apdex(transaction.duration, 300)",
-            "impact(transaction.duration, 300)",
+            "apdex(300)",
+            "impact(300)",
             "percentile(transaction.duration, 0.75)",
             "percentile(transaction.duration, 0.95)",
             "percentile(transaction.duration, 0.99)",
@@ -1236,11 +1236,11 @@ class ResolveFieldListTest(unittest.TestCase):
             ["avg", "transaction.duration", "avg_transaction_duration"],
             ["argMax", ["id", "timestamp"], "latest_event"],
             ["max", "timestamp", "last_seen"],
-            ["apdex(duration, 300)", None, "apdex_transaction_duration_300"],
+            ["apdex(duration, 300)", None, "apdex_300"],
             [
                 "plus(minus(1, divide(plus(countIf(less(duration, 300)),divide(countIf(and(greater(duration, 300),less(duration, 1200))),2)),count())),multiply(minus(1,divide(1,sqrt(uniq(user)))),3))",
                 None,
-                "impact_transaction_duration_300",
+                "impact_300",
             ],
             ["quantile(0.75)", "transaction.duration", "percentile_transaction_duration_0_75"],
             ["quantile(0.95)", "transaction.duration", "percentile_transaction_duration_0_95"],
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index c4c78c0deb..46fca2f45d 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -437,8 +437,8 @@ class QueryTransformTest(TestCase):
     @patch("sentry.snuba.discover.raw_query")
     def test_selected_columns_aggregate_alias(self, mock_query):
         mock_query.return_value = {
-            "meta": [{"name": "transaction"}, {"name": "percentile_transaction_duration_0_95"}],
-            "data": [{"transaction": "api.do_things", "percentile_transaction_duration_0_95": 200}],
+            "meta": [{"name": "transaction"}, {"name": "p95"}],
+            "data": [{"transaction": "api.do_things", "p95": 200}],
         }
         discover.query(
             selected_columns=["transaction", "p95", "count_unique(transaction)"],
@@ -449,7 +449,7 @@ class QueryTransformTest(TestCase):
         mock_query.assert_called_with(
             selected_columns=["transaction"],
             aggregations=[
-                ["quantile(0.95)", "duration", "percentile_transaction_duration_0_95"],
+                ["quantile(0.95)", "duration", "p95"],
                 ["uniq", "transaction", "count_unique_transaction"],
                 ["argMax", ["event_id", "timestamp"], "latest_event"],
                 ["argMax", ["project_id", "timestamp"], "projectid"],
@@ -477,8 +477,8 @@ class QueryTransformTest(TestCase):
     @patch("sentry.snuba.discover.raw_query")
     def test_selected_columns_aggregate_alias_with_brackets(self, mock_query):
         mock_query.return_value = {
-            "meta": [{"name": "transaction"}, {"name": "percentile_transaction_duration_0_95"}],
-            "data": [{"transaction": "api.do_things", "percentile_transaction_duration_0_95": 200}],
+            "meta": [{"name": "transaction"}, {"name": "p95"}],
+            "data": [{"transaction": "api.do_things", "p95": 200}],
         }
         discover.query(
             selected_columns=["transaction", "p95()", "count_unique(transaction)"],
@@ -489,7 +489,7 @@ class QueryTransformTest(TestCase):
         mock_query.assert_called_with(
             selected_columns=["transaction"],
             aggregations=[
-                ["quantile(0.95)", "duration", "percentile_transaction_duration_0_95"],
+                ["quantile(0.95)", "duration", "p95"],
                 ["uniq", "transaction", "count_unique_transaction"],
                 ["argMax", ["event_id", "timestamp"], "latest_event"],
                 ["argMax", ["project_id", "timestamp"], "projectid"],
@@ -894,8 +894,8 @@ class QueryTransformTest(TestCase):
             filter_keys={"project_id": [self.project.id]},
             groupby=["transaction"],
             dataset=Dataset.Discover,
-            aggregations=[["quantile(0.95)", "duration", "percentile_transaction_duration_0_95"]],
-            having=[["percentile_transaction_duration_0_95", ">", 5]],
+            aggregations=[["quantile(0.95)", "duration", "p95"]],
+            having=[["p95", ">", 5]],
             end=end_time,
             start=start_time,
             orderby=None,
@@ -925,8 +925,8 @@ class QueryTransformTest(TestCase):
             filter_keys={"project_id": [self.project.id]},
             groupby=["transaction"],
             dataset=Dataset.Discover,
-            aggregations=[["quantile(0.95)", "duration", "percentile_transaction_duration_0_95"]],
-            having=[["percentile_transaction_duration_0_95", ">", 5]],
+            aggregations=[["quantile(0.95)", "duration", "p95"]],
+            having=[["p95", ">", 5]],
             end=end_time,
             start=start_time,
             orderby=None,
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index dcc92fe0dd..50bd3b1f23 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1645,7 +1645,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                         "p75",
                         "p95()",
                         "percentile(transaction.duration, 0.99)",
-                        "apdex(transaction.duration,300)",
+                        "apdex(300)",
                         "impact()",
                         "error_rate()",
                     ],
@@ -1658,7 +1658,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert meta["p75"] == "duration"
             assert meta["p95"] == "duration"
             assert meta["percentile_transaction_duration_0_99"] == "duration"
-            assert meta["apdex_transaction_duration_300"] == "number"
+            assert meta["apdex_300"] == "number"
             assert meta["impact"] == "number"
 
             data = response.data["data"]
@@ -1666,7 +1666,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert data[0]["p75"] == 5000
             assert data[0]["p95"] == 5000
             assert data[0]["percentile_transaction_duration_0_99"] == 5000
-            assert data[0]["apdex_transaction_duration_300"] == 0.0
+            assert data[0]["apdex_300"] == 0.0
             assert data[0]["impact"] == 1.0
             assert data[0]["error_rate"] == 0.5
 
