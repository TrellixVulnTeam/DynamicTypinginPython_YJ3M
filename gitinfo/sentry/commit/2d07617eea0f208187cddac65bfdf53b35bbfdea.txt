commit 2d07617eea0f208187cddac65bfdf53b35bbfdea
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Feb 11 16:05:22 2019 -0800

    fix(issues): Fix empty state for organization issues (#12021)
    
    Less robots.
    
    Previously if there were *any* projects without a first event, we would show the empty state. Now we only show it if all projects do not have a first event.

diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 07a280822d..a904988f6f 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -497,11 +497,12 @@ const OrganizationStream = createReactClass({
     const {organization} = this.props;
     const selectedProjects = this.getGlobalSearchProjects();
 
-    // If no projects are selected, then we must check every project the user is a member of
-    const projectsWithoutFirstEvent = !selectedProjects.length
-      ? organization.projects.filter(p => p.isMember).filter(p => !p.firstEvent)
-      : selectedProjects.filter(p => !p.firstEvent);
-    const noEvents = projectsWithoutFirstEvent.length > 0;
+    // If no projects are selected, then we must check every project the user is a
+    // member of and make sure there are no first events for all of the projects
+    const projects = !selectedProjects.length
+      ? organization.projects.filter(p => p.isMember)
+      : selectedProjects;
+    const noFirstEvents = projects.every(p => !p.firstEvent);
 
     if (this.state.issuesLoading) {
       body = this.renderLoading();
@@ -509,8 +510,8 @@ const OrganizationStream = createReactClass({
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
     } else if (this.state.groupIds.length > 0) {
       body = this.renderGroupNodes(this.state.groupIds, this.getGroupStatsPeriod());
-    } else if (noEvents) {
-      body = this.renderAwaitingEvents(selectedProjects);
+    } else if (noFirstEvents) {
+      body = this.renderAwaitingEvents(projects);
     } else {
       body = this.renderEmpty();
     }
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 03186b07b9..767107be02 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -307,36 +307,169 @@ describe('OrganizationStream', function() {
       expect(wrapper.find('EmptyStateWarning')).toHaveLength(1);
     });
 
-    it('displays the getting started state', function() {
-      const proj = TestStubs.ProjectDetails({
-        firstEvent: false,
+    it('displays group rows', function() {
+      GroupStore.add([group]);
+      wrapper.setState({
+        error: false,
+        savedSearchLoading: false,
+        issuesLoading: false,
+        groupIds: ['1'],
       });
-      const org = TestStubs.Organization({
-        access: ['releases'],
-        projects: [proj],
+      const groups = wrapper.find('StreamGroup');
+      expect(groups).toHaveLength(1);
+    });
+  });
+
+  describe('Empty State', function() {
+    const createWrapper = moreProps => {
+      const defaultProps = {
+        selection: {
+          projects: [],
+          environments: [],
+          datetime: {period: '14d'},
+        },
+        location: {query: {query: 'is:unresolved'}, search: 'query=is:unresolved'},
+        params: {orgId: organization.slug},
+        organization: TestStubs.Organization({
+          projects: [],
+        }),
+        ...moreProps,
+      };
+      const localWrapper = shallow(<OrganizationStream {...defaultProps} />);
+      localWrapper.setState({
+        error: false,
+        savedSearchLoading: false,
+        issuesLoading: false,
+        groupIds: [],
       });
-      wrapper.setProps({
-        organization: org,
+
+      return localWrapper;
+    };
+
+    it('displays when no projects selected and all projects user is member of, does not have first event', function() {
+      wrapper = createWrapper({
+        organization: TestStubs.Organization({
+          projects: [
+            TestStubs.Project({
+              id: '1',
+              slug: 'foo',
+              isMember: true,
+              firstEvent: false,
+            }),
+            TestStubs.Project({
+              id: '2',
+              slug: 'bar',
+              isMember: true,
+              firstEvent: false,
+            }),
+            TestStubs.Project({
+              id: '3',
+              slug: 'baz',
+              isMember: true,
+              firstEvent: false,
+            }),
+          ],
+        }),
+      });
+
+      expect(wrapper.find('ErrorRobot')).toHaveLength(1);
+    });
+
+    it('does not display when no projects selected and any projects have a first event', function() {
+      wrapper = createWrapper({
+        organization: TestStubs.Organization({
+          projects: [
+            TestStubs.Project({
+              id: '1',
+              slug: 'foo',
+              isMember: true,
+              firstEvent: false,
+            }),
+            TestStubs.Project({
+              id: '2',
+              slug: 'bar',
+              isMember: true,
+              firstEvent: true,
+            }),
+            TestStubs.Project({
+              id: '3',
+              slug: 'baz',
+              isMember: true,
+              firstEvent: false,
+            }),
+          ],
+        }),
+      });
+
+      expect(wrapper.find('ErrorRobot')).toHaveLength(0);
+    });
+
+    it('displays when all selected projects do not have first event', function() {
+      wrapper = createWrapper({
         selection: {
-          projects: [parseInt(proj.id, 10)],
+          projects: [1, 2],
           environments: [],
           datetime: {period: '14d'},
         },
+        organization: TestStubs.Organization({
+          projects: [
+            TestStubs.Project({
+              id: '1',
+              slug: 'foo',
+              isMember: true,
+              firstEvent: false,
+            }),
+            TestStubs.Project({
+              id: '2',
+              slug: 'bar',
+              isMember: true,
+              firstEvent: false,
+            }),
+            TestStubs.Project({
+              id: '3',
+              slug: 'baz',
+              isMember: true,
+              firstEvent: false,
+            }),
+          ],
+        }),
       });
-      wrapper.setState({savedSearchLoading: false, issuesLoading: false});
+
       expect(wrapper.find('ErrorRobot')).toHaveLength(1);
     });
 
-    it('displays group rows', function() {
-      GroupStore.add([group]);
-      wrapper.setState({
-        error: false,
-        savedSearchLoading: false,
-        issuesLoading: false,
-        groupIds: ['1'],
+    it('does not display when any selected projects have first event', function() {
+      wrapper = createWrapper({
+        selection: {
+          projects: [1, 2],
+          environments: [],
+          datetime: {period: '14d'},
+        },
+        organization: TestStubs.Organization({
+          projects: [
+            TestStubs.Project({
+              id: '1',
+              slug: 'foo',
+              isMember: true,
+              firstEvent: false,
+            }),
+            TestStubs.Project({
+              id: '2',
+              slug: 'bar',
+              isMember: true,
+              firstEvent: true,
+            }),
+            TestStubs.Project({
+              id: '3',
+              slug: 'baz',
+              isMember: true,
+              firstEvent: true,
+            }),
+          ],
+        }),
       });
-      const groups = wrapper.find('StreamGroup');
-      expect(groups).toHaveLength(1);
+
+      expect(wrapper.find('ErrorRobot')).toHaveLength(0);
     });
   });
 });
