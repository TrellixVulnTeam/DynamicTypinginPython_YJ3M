commit 5ae457ec0cda6948387ec13f82c0c1b14b246bf3
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Apr 24 10:11:08 2019 -0700

    feat(project-selector): Update non member projects UI (#12822)
    
    Groups non member projects in the project selector dropdown. Currently
    only affects superusers.

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
index 892bd6235d..cd2c3ccac8 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -1,4 +1,4 @@
-import {isEqual, pick, partition} from 'lodash';
+import {flatten, isEqual, pick, partition} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -310,14 +310,14 @@ class GlobalSelectionHeader extends React.Component {
     );
 
     if (isSuperuser) {
-      return [...memberProjects, ...nonMemberProjects];
+      return [memberProjects, nonMemberProjects];
     }
 
-    return memberProjects;
+    return [memberProjects, []];
   };
 
   getFirstProject = () => {
-    return this.getProjects()
+    return flatten(this.getProjects())
       .map(p => parseInt(p.id, 10))
       .slice(0, 1);
   };
@@ -356,6 +356,8 @@ class GlobalSelectionHeader extends React.Component {
       ? [parseInt(forceProject.id, 10)]
       : this.props.selection.projects;
 
+    const [projects, nonMemberProjects] = this.getProjects();
+
     return (
       <Header className={className}>
         <HeaderItemPosition>
@@ -363,7 +365,8 @@ class GlobalSelectionHeader extends React.Component {
           <MultipleProjectSelector
             organization={organization}
             forceProject={forceProject}
-            projects={this.getProjects()}
+            projects={projects}
+            nonMemberProjects={nonMemberProjects}
             value={this.state.projects || this.props.selection.projects}
             onChange={this.handleChangeProjects}
             onUpdate={this.handleUpdateProjects}
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index 87732b04db..944c001dae 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -21,6 +21,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
     organization: SentryTypes.Organization.isRequired,
     value: PropTypes.array,
     projects: PropTypes.array.isRequired,
+    nonMemberProjects: PropTypes.array.isRequired,
     onChange: PropTypes.func,
     onUpdate: PropTypes.func,
     multi: PropTypes.bool,
@@ -128,10 +129,19 @@ export default class MultipleProjectSelector extends React.PureComponent {
   };
 
   render() {
-    const {value, projects, multi, organization, forceProject} = this.props;
+    const {
+      value,
+      projects,
+      nonMemberProjects,
+      multi,
+      organization,
+      forceProject,
+    } = this.props;
     const selectedProjectIds = new Set(value);
 
-    const selected = projects.filter(project =>
+    const allProjects = [...projects, ...nonMemberProjects];
+
+    const selected = allProjects.filter(project =>
       selectedProjectIds.has(parseInt(project.id, 10))
     );
 
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectSelector.jsx
index 3f73643b80..1e7887539c 100644
--- a/src/sentry/static/sentry/app/components/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectSelector.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 import {Link} from 'react-router';
+import {flatten} from 'lodash';
 
 import {analytics} from 'app/utils/analytics';
 import {sortArray} from 'app/utils';
@@ -34,6 +35,7 @@ class ProjectSelector extends React.Component {
     multiProjects: PropTypes.arrayOf(
       PropTypes.oneOfType([PropTypes.string, SentryTypes.Project])
     ),
+    nonMemberProjects: PropTypes.arrayOf(SentryTypes.Project),
 
     // Render a footer at the bottom of the list
     // render function that is passed an `actions` object with `close` and `open` properties.
@@ -78,19 +80,24 @@ class ProjectSelector extends React.Component {
 
   getActiveProject() {
     const {projectId} = this.props;
-
-    const projects = this.getProjects();
+    const projects = flatten(this.getProjects());
 
     return projects.find(({slug}) => slug === projectId);
   }
 
   getProjects() {
-    const {organization, projects, multiProjects} = this.props;
+    const {organization, projects, multiProjects, nonMemberProjects} = this.props;
 
     if (multiProjects) {
-      return multiProjects;
+      return [
+        sortArray(multiProjects, project => {
+          return [!project.isBookmarked, project.name];
+        }),
+        nonMemberProjects || [],
+      ];
     }
 
+    // Legacy
     const {isSuperuser} = ConfigStore.get('user');
     const unfilteredProjects = projects || organization.projects;
 
@@ -98,9 +105,12 @@ class ProjectSelector extends React.Component {
       ? unfilteredProjects
       : unfilteredProjects.filter(project => project.isMember);
 
-    return sortArray(filteredProjects, project => {
-      return [!project.isBookmarked, project.name];
-    });
+    return [
+      sortArray(filteredProjects, project => {
+        return [!project.isBookmarked, project.name];
+      }),
+      [],
+    ];
   }
 
   isControlled = () => typeof this.props.selectedProjects !== 'undefined';
@@ -182,14 +192,49 @@ class ProjectSelector extends React.Component {
     const {activeProject} = this.state;
     const access = new Set(org.access);
 
-    const projects = this.getProjects();
-    const projectList = sortArray(projects, project => {
-      return [!project.isBookmarked, project.name];
-    });
+    const [projects, nonMemberProjects] = this.getProjects();
 
-    const hasProjects = projectList && !!projectList.length;
+    const hasProjects =
+      (projects && !!projects.length) ||
+      (nonMemberProjects && !!nonMemberProjects.length);
     const hasProjectWrite = access.has('project:write');
 
+    const getProjectItem = project => ({
+      value: project,
+      searchKey: project.slug,
+      label: ({inputValue}) => (
+        <ProjectSelectorItem
+          something="test"
+          project={project}
+          organization={org}
+          multi={multi}
+          inputValue={inputValue}
+          isChecked={
+            this.isControlled()
+              ? !!this.props.selectedProjects.find(({slug}) => slug === project.slug)
+              : this.state.selectedProjects.has(project.slug)
+          }
+          style={{padding: 0}}
+          onMultiSelect={this.handleMultiSelect}
+        />
+      ),
+    });
+
+    const projectList = hasProjects
+      ? [
+          {
+            hideGroupLabel: true,
+            items: projects.map(getProjectItem),
+          },
+          {
+            hideGroupLabel: nonMemberProjects.length === 0,
+            itemSize: 'small',
+            label: <Label>{t("Projects I don't belong to")}</Label>,
+            items: nonMemberProjects.map(getProjectItem),
+          },
+        ]
+      : [];
+
     return (
       <DropdownAutoComplete
         alignMenu="left"
@@ -208,6 +253,7 @@ class ProjectSelector extends React.Component {
         emptyMessage={t('You have no projects')}
         noResultsMessage={t('No projects found')}
         virtualizedHeight={theme.headerSelectorRowHeight}
+        virtualizedLabelHeight={theme.headerSelectorLabelHeight}
         emptyHidesInput
         inputActions={() => (
           <AddButton
@@ -245,24 +291,7 @@ class ProjectSelector extends React.Component {
             </React.Fragment>
           );
         }}
-        items={projectList.map(project => ({
-          value: project,
-          searchKey: project.slug,
-          label: ({inputValue}) => (
-            <ProjectSelectorItem
-              project={project}
-              organization={org}
-              multi={multi}
-              inputValue={inputValue}
-              isChecked={
-                this.isControlled()
-                  ? !!this.props.selectedProjects.find(({slug}) => slug === project.slug)
-                  : this.state.selectedProjects.has(project.slug)
-              }
-              onMultiSelect={this.handleMultiSelect}
-            />
-          ),
-        }))}
+        items={projectList}
       >
         {renderProps =>
           children({
@@ -335,7 +364,6 @@ class ProjectSelectorItem extends React.PureComponent {
       <BadgeAndActionsWrapper
         bookmarkHasChanged={this.state.bookmarkHasChanged}
         onAnimationEnd={this.clearAnimation}
-        isProjectMember={project.isMember}
       >
         <GlobalSelectionHeaderRow
           checked={isChecked}
@@ -428,11 +456,10 @@ const SettingsIcon = styled(InlineSvg)`
   width: 16px;
 `;
 
-const getNonMemberStyles = p => {
-  return `
-    color: ${p.theme.gray2};
-  `;
-};
+const Label = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray2};
+`;
 
 const BadgeAndActionsWrapper = styled('div')`
   animation: ${p => (p.bookmarkHasChanged ? `1s ${alertHighlight('info')}` : 'none')};
@@ -441,7 +468,6 @@ const BadgeAndActionsWrapper = styled('div')`
   border-style: solid;
   border-width: 1px 0;
   border-color: transparent;
-  ${p => (p.isProjectMember ? null : getNonMemberStyles(p))}
   &:hover ${StyledBookmarkStar}, &:hover ${SettingsIconLink} {
     opacity: 1;
   }
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.jsx
index 2f32a68744..4cde907a89 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.jsx
@@ -64,6 +64,7 @@ const theme = {
   borderRadius: '4px',
   borderRadiusBottom: '0 0 4px 4px',
   headerSelectorRowHeight: 44,
+  headerSelectorLabelHeight: 28,
 
   dropShadowLight: '0 2px 0 rgba(37, 11, 54, 0.04)',
   dropShadowHeavy: '0 1px 4px 1px rgba(47,40,55,0.08), 0 4px 16px 0 rgba(47,40,55,0.12)',
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 29c93f791f..87acb8ea8c 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -349,6 +349,9 @@ describe('GlobalSelectionHeader', function() {
 
       expect(wrapper.find('MultipleProjectSelector').prop('projects')).toEqual([
         memberProject,
+      ]);
+
+      expect(wrapper.find('MultipleProjectSelector').prop('nonMemberProjects')).toEqual([
         nonMemberProject,
       ]);
     });
diff --git a/tests/js/spec/components/projectSelector.spec.jsx b/tests/js/spec/components/projectSelector.spec.jsx
index 550d4a0d91..c9360a8aa7 100644
--- a/tests/js/spec/components/projectSelector.spec.jsx
+++ b/tests/js/spec/components/projectSelector.spec.jsx
@@ -280,4 +280,29 @@ describe('ProjectSelector', function() {
       )
     ).toEqual(['test-project']);
   });
+
+  it('displays multi projects', function() {
+    const project = TestStubs.Project();
+    const multiProjectProps = {...props, multiProjects: [project]};
+
+    const wrapper = mount(<ProjectSelector {...multiProjectProps} />, routerContext);
+    openMenu(wrapper);
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(1);
+    expect(wrapper.text()).not.toContain("Projects I don't belong to");
+  });
+
+  it('displays multi projects with non member projects', function() {
+    const project = TestStubs.Project({id: '1'});
+    const nonMemberProject = TestStubs.Project({id: '2'});
+    const multiProjectProps = {
+      ...props,
+      multiProjects: [project],
+      nonMemberProjects: [nonMemberProject],
+    };
+
+    const wrapper = mount(<ProjectSelector {...multiProjectProps} />, routerContext);
+    openMenu(wrapper);
+    expect(wrapper.text()).toContain("Projects I don't belong to");
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
+  });
 });
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
index c690bab803..67d893104c 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
@@ -379,6 +379,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                       "greenTransparent": "rgba(87, 190, 140, 0.5)",
                                       "grid": 8,
                                       "headerFontSize": "22px",
+                                      "headerSelectorLabelHeight": 28,
                                       "headerSelectorRowHeight": 44,
                                       "offWhite": "#FAF9FB",
                                       "offWhite2": "#E7E1EC",
@@ -649,6 +650,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                               "greenTransparent": "rgba(87, 190, 140, 0.5)",
                                               "grid": 8,
                                               "headerFontSize": "22px",
+                                              "headerSelectorLabelHeight": 28,
                                               "headerSelectorRowHeight": 44,
                                               "offWhite": "#FAF9FB",
                                               "offWhite2": "#E7E1EC",
