commit 345cbbe7f40914fef0179cbc91b09cab58f524bf
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Mar 24 14:46:29 2020 -0700

    feat(ui): Change `<ButtonBar>` to control "active" `<Button>` (#17768)
    
    This changes `<ButtonBar>` to support an `active` prop whose value should correspond to a child `<Button>` `id` value. This makes it so you do not need to have separate logic to set the `priority` property on the "active" `<Button>`

diff --git a/docs-ui/components/button.stories.js b/docs-ui/components/button.stories.js
index 5e117d4e84..4eef30e810 100644
--- a/docs-ui/components/button.stories.js
+++ b/docs-ui/components/button.stories.js
@@ -222,24 +222,20 @@ storiesOf('UI|Buttons', module)
         </Section>
 
         <Section>
-          <h3>Merged Buttons</h3>
-          <ButtonBar merged>
-            <Button priority="primary" className="active">
-              Left Button
-            </Button>
-            <Button>Right Button</Button>
+          <h3>Merged Buttons with "active" button</h3>
+          <ButtonBar active="left" merged>
+            <Button barId="left">Left Button</Button>
+            <Button barId="right">Right Button</Button>
           </ButtonBar>
         </Section>
 
         <Section>
-          <h3>Multiple Merged Buttons</h3>
-          <ButtonBar merged>
-            <Button>First Button</Button>
-            <Button priority="primary" className="active">
-              Second Button
-            </Button>
-            <Button>Third Button</Button>
-            <Button>Fourth Button</Button>
+          <h3>Multiple Merged Buttons with "active" button</h3>
+          <ButtonBar active="2" merged>
+            <Button barId="1">First Button</Button>
+            <Button barId="2">Second Button</Button>
+            <Button barId="3">Third Button</Button>
+            <Button barId="4">Fourth Button</Button>
           </ButtonBar>
         </Section>
       </div>
diff --git a/src/sentry/static/sentry/app/components/button.tsx b/src/sentry/static/sentry/app/components/button.tsx
index 5a199e4595..923c3249fe 100644
--- a/src/sentry/static/sentry/app/components/button.tsx
+++ b/src/sentry/static/sentry/app/components/button.tsx
@@ -35,6 +35,9 @@ type Props = {
   onClick?: (e: React.MouseEvent) => void;
   forwardRef?: React.Ref<ButtonElement>;
   name?: string;
+
+  // This is only used with `<ButtonBar>`
+  barId?: string;
 };
 
 type ButtonProps = Omit<React.HTMLProps<ButtonElement>, keyof Props> & Props;
diff --git a/src/sentry/static/sentry/app/components/buttonBar.tsx b/src/sentry/static/sentry/app/components/buttonBar.tsx
index 6bfe933e0d..df3e8277c2 100644
--- a/src/sentry/static/sentry/app/components/buttonBar.tsx
+++ b/src/sentry/static/sentry/app/components/buttonBar.tsx
@@ -1,19 +1,51 @@
 import React from 'react';
+import classNames from 'classnames';
 import styled from '@emotion/styled';
 
+import Button from 'app/components/button';
 import space, {ValidSize} from 'app/styles/space';
 
 type ButtonBarProps = {
   className?: string;
   gap?: ValidSize;
   merged?: boolean;
+  active?: React.ComponentProps<typeof Button>['barId'];
   children: React.ReactNode;
 };
 
-function ButtonBar({children, className, merged = false, gap = 0}: ButtonBarProps) {
+function ButtonBar({
+  children,
+  className,
+  active,
+  merged = false,
+  gap = 0,
+}: ButtonBarProps) {
+  const shouldCheckActive = typeof active !== 'undefined';
   return (
     <ButtonGrid merged={merged} gap={gap} className={className}>
-      {children}
+      {!shouldCheckActive
+        ? children
+        : React.Children.map(children, child => {
+            if (!React.isValidElement(child)) {
+              return child;
+            }
+
+            const {props: childProps, ...childWithoutProps} = child;
+
+            // We do not want to pass `barId` to <Button>`
+            const {barId, ...props} = childProps;
+            const isActive = active === barId;
+
+            // This ["primary"] could be customizable with a prop,
+            // but let's just enforce one "active" type for now
+            const priority = isActive ? 'primary' : childProps.priority || 'default';
+
+            return React.cloneElement(childWithoutProps as React.ReactElement, {
+              ...props,
+              className: classNames(className, {active: isActive}),
+              priority,
+            });
+          })}
     </ButtonGrid>
   );
 }
diff --git a/tests/js/spec/components/buttonBar.spec.jsx b/tests/js/spec/components/buttonBar.spec.jsx
new file mode 100644
index 0000000000..e033c54e4d
--- /dev/null
+++ b/tests/js/spec/components/buttonBar.spec.jsx
@@ -0,0 +1,37 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+import Button from 'app/components/button';
+import ButtonBar from 'app/components/buttonBar';
+
+describe('ButtonBar', function() {
+  const createWrapper = () =>
+    mountWithTheme(
+      <ButtonBar active="2" merged>
+        <Button barId="1">First Button</Button>
+        <Button barId="2">Second Button</Button>
+        <Button barId="3">Third Button</Button>
+        <Button barId="4">Fourth Button</Button>
+      </ButtonBar>
+    );
+
+  it('has "Second Button" as the active button in the bar', function() {
+    const wrapper = createWrapper();
+    expect(
+      wrapper
+        .find('Button')
+        .at(1)
+        .prop('priority')
+    ).toBe('primary');
+  });
+
+  it('does not pass `barId` down to the button', function() {
+    const wrapper = createWrapper();
+    expect(
+      wrapper
+        .find('Button')
+        .at(1)
+        .prop('barId')
+    ).toBeUndefined();
+  });
+});
