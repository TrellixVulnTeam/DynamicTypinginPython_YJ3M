commit 2c0cce8d19a48bbd526d7d916c4e8180a19a32c6
Author: Mark Story <mark@mark-story.com>
Date:   Tue Mar 12 09:51:12 2019 -0400

    fix(ui) Going to a global saved search from a project based one (#12358)
    
    Going from a project based saved search to a global one should retain
    the current global search so that users without global views don't get
    a backend error.
    
    Fixes SEN-251

diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 49e5291b37..0fe7b55ba2 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -43,8 +43,6 @@ const DEFAULT_QUERY = 'is:unresolved';
 const DEFAULT_SORT = 'date';
 const DEFAULT_STATS_PERIOD = '24h';
 const STATS_PERIODS = new Set(['14d', '24h']);
-// TODO: Delete this after testing production counts cc/ @wedamija
-const NEW_FILTERS_TEST = 'use_new_filters';
 
 const OrganizationStream = createReactClass({
   displayName: 'OrganizationStream',
@@ -261,12 +259,6 @@ const OrganizationStream = createReactClass({
     const currentQuery = this.props.location.query || {};
     if ('cursor' in currentQuery) {
       requestParams.cursor = currentQuery.cursor;
-    } else if (NEW_FILTERS_TEST in currentQuery) {
-      // TODO: Delete this after testing production counts cc/ @wedamija
-      requestParams[NEW_FILTERS_TEST] = currentQuery[NEW_FILTERS_TEST];
-    } else if (ConfigStore.get('user').isSuperuser) {
-      // TODO: Delete this after testing production counts cc/ @wedamija
-      requestParams[NEW_FILTERS_TEST] = 1;
     }
 
     if (this.lastRequest) {
@@ -463,16 +455,19 @@ const OrganizationStream = createReactClass({
       if (savedSearch.projectId) {
         query.project = [savedSearch.projectId];
       }
+
+      // If the saved search is project-less and the user doesn't have
+      // global-views we retain their current project filter
+      // so that the backend doesn't reject their request.
+      const hasMultipleProjectSelection = organization.features.includes('global-views');
+      if (!savedSearch.projectId && !hasMultipleProjectSelection) {
+        query.project = this.props.selection.projects;
+      }
     } else {
       path = `/organizations/${organization.slug}/issues/`;
     }
 
     if (path !== this.props.location.path && !isEqual(query, this.props.location.query)) {
-      // TODO: Delete/revert this after testing production counts cc/ @wedamija
-      if (this.props.location.query[NEW_FILTERS_TEST]) {
-        query[NEW_FILTERS_TEST] = 1;
-      }
-
       browserHistory.push({
         pathname: path,
         query,
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 0c6371a8ed..6d0eba6073 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -12,7 +12,6 @@ const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
 describe('OrganizationStream', function() {
-  let sandbox;
   let wrapper;
   let props;
 
@@ -25,8 +24,6 @@ describe('OrganizationStream', function() {
   let fetchMembersRequest;
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
     project = TestStubs.ProjectDetails({
       id: '3559',
       name: 'Foo Project',
@@ -81,7 +78,6 @@ describe('OrganizationStream', function() {
       body: [TestStubs.Member({projects: [project.slug]})],
     });
 
-    sandbox.stub(browserHistory, 'push');
     TagStore.init();
 
     props = {
@@ -97,10 +93,89 @@ describe('OrganizationStream', function() {
   });
 
   afterEach(function() {
-    sandbox.restore();
     MockApiClient.clearMockResponses();
   });
 
+  describe('transitionTo', function() {
+    let instance;
+    beforeEach(function() {
+      wrapper = shallow(<OrganizationStream {...props} />);
+      instance = wrapper.instance();
+    });
+
+    it('transitions to query updates', function() {
+      instance.transitionTo({query: 'is:ignored'});
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/issues/',
+        query: {
+          environment: [],
+          project: [parseInt(project.id, 10)],
+          query: 'is:ignored',
+          statsPeriod: '14d',
+        },
+      });
+    });
+
+    it('transitions to saved search that has a projectId', function() {
+      savedSearch = {
+        id: 123,
+        projectId: 99,
+        query: 'foo:bar',
+      };
+      instance.setState({savedSearch});
+      instance.transitionTo();
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/issues/searches/123/',
+        query: {
+          environment: [],
+          project: [savedSearch.projectId],
+          statsPeriod: '14d',
+        },
+      });
+    });
+
+    it('goes to all projects when using a basic saved searches and global-views feature', function() {
+      organization.features = ['global-views'];
+      savedSearch = {
+        id: 1,
+        project: null,
+        query: 'is:unresolved',
+      };
+      instance.setState({savedSearch});
+      instance.transitionTo();
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/issues/searches/1/',
+        query: {
+          environment: [],
+          statsPeriod: '14d',
+        },
+      });
+    });
+
+    it('retains project selection when using a basic saved search and no global-views feature', function() {
+      organization.features = [];
+      savedSearch = {
+        id: 1,
+        projectId: null,
+        query: 'is:unresolved',
+      };
+      instance.setState({savedSearch});
+      instance.transitionTo();
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/issues/searches/1/',
+        query: {
+          environment: [],
+          project: props.selection.projects,
+          statsPeriod: '14d',
+        },
+      });
+    });
+  });
+
   describe('getEndpointParams', function() {
     beforeEach(function() {
       wrapper = shallow(<OrganizationStream {...props} />);
