commit d63b0d5bab1fc1b34eea213cebbfb00620f45098
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 20 19:23:29 2012 -0800

    Use context_line and exception type in grouping if possible

diff --git a/CHANGES b/CHANGES
index 1f8f13b494..1db1b450f3 100644
--- a/CHANGES
+++ b/CHANGES
@@ -28,6 +28,8 @@ Other Changes
 - A new 1080p wall display is available.
 - The event stream now includes sparklines representing the last 24 hours of data for each event.
 - Trends have greatly improved.
+- Grouping events that have identical stacktraces other than the function name (e.g. dynamically generated
+  functions) is not possible.
 
 
 Version 5.0.0
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 2912dfb02b..e1f6758f85 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -80,6 +80,9 @@ class Interface(object):
     def serialize(self):
         return dict((k, self.__dict__[k]) for k in self.attrs)
 
+    def get_composite_hash(self, interfaces):
+        return self.get_hash()
+
     def get_hash(self):
         return []
 
@@ -269,6 +272,12 @@ class Stacktrace(Interface):
             'frames': self.frames,
         }
 
+    def get_composite_hash(self, interfaces):
+        output = self.get_hash()
+        if 'sentry.interfaces.Exception' in interfaces:
+            output.append(interfaces['sentry.interfaces.Exception'].type)
+        return output
+
     def get_hash(self):
         output = []
         for frame in self.frames:
@@ -277,7 +286,9 @@ class Stacktrace(Interface):
             else:
                 output.append(frame['filename'])
 
-            if frame.get('function'):
+            if frame.get('context_line'):
+                output.append(frame['context_line'])
+            elif frame.get('function'):
                 output.append(frame['function'])
             elif frame.get('lineno'):
                 output.append(frame['lineno'])
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 7cb4d18815..efb3a57117 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -47,8 +47,9 @@ MAX_TAG_LENGTH = 200
 
 
 def get_checksum_from_event(event):
-    for interface in event.interfaces.itervalues():
-        result = interface.get_hash()
+    interfaces = event.interfaces
+    for interface in interfaces.itervalues():
+        result = interface.get_composite_hash(interfaces=event.interfaces)
         if result:
             hash = hashlib.md5()
             for r in result:
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 8ab6ff864f..1a19859b6f 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 import mock
 
-from sentry.interfaces import Stacktrace
+from sentry.interfaces import Stacktrace, Exception
 from sentry.models import Event
 
 from sentry.testutils import TestCase
@@ -57,6 +57,29 @@ class StacktraceTest(TestCase):
         result = interface.get_hash()
         self.assertEquals(result, ['foo.py', 'bar'])
 
+    def test_get_hash_uses_context_line_over_function(self):
+        interface = Stacktrace(frames=[{
+            'context_line': 'foo bar',
+            'lineno': 1,
+            'filename': 'foo.py',
+            'function': 'bar'
+        }])
+        result = interface.get_hash()
+        self.assertEquals(result, ['foo.py', 'foo bar'])
+
+    def test_get_composite_hash_uses_exception_if_present(self):
+        interface = Stacktrace(frames=[{
+            'context_line': 'foo bar',
+            'lineno': 1,
+            'filename': 'foo.py',
+            'function': 'bar'
+        }])
+        interface_exc = Exception(type='exception', value='bar')
+        result = interface.get_composite_hash({
+            'sentry.interfaces.Exception': interface_exc,
+        })
+        self.assertEquals(result[-1], 'exception')
+
     @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
         event = mock.Mock(spec=Event)
