commit b5a46d36cb42b3568a49cfade337c313bdffe72a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 22 13:47:48 2015 -0700

    Basic error handling for views

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index d075ccf542..f88a4df89f 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -36,6 +36,8 @@ import RouteNotFound from './views/routeNotFound';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
 
+import errorHandler from './utils/errorHandler';
+
 function appendTrailingSlash(nextState, replaceState) {
   let lastChar = nextState.location.pathname.slice(-1);
   if (lastChar !== '/') {
@@ -44,7 +46,7 @@ function appendTrailingSlash(nextState, replaceState) {
 }
 
 let routes = (
-  <Route path="/" component={App}>
+  <Route path="/" component={errorHandler(App)}>
 
     <Route path="/manage/" component={Admin}>
       <IndexRoute component={AdminOverview} />
@@ -65,7 +67,7 @@ let routes = (
       <Route path="/organizations/:orgId/rate-limits/" component={OrganizationRateLimits} />
 
       <Route path=":projectId/" component={ProjectDetails}>
-        <IndexRoute component={Stream} />
+        <IndexRoute component={errorHandler(Stream)} />
         <Route path="dashboard/" component={ProjectDashboard} />
         <Route path="events/" component={ProjectEvents} />
         <Route path="releases/" component={ProjectReleases} />
@@ -81,7 +83,7 @@ let routes = (
           </Route>
         </Route>
         <Redirect from="group/:groupId/" to="issues/:groupId/" />
-        <Route path="issues/:groupId/" component={GroupDetails}
+        <Route path="issues/:groupId/" component={errorHandler(GroupDetails)}
                ignoreScrollBehavior>
           <IndexRoute component={GroupEventDetails} />
 
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 64722c0488..e8058c4b28 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -204,5 +204,5 @@ export default {
   Collection: require('./utils/collection'),
   PendingChangeQueue: require('./utils/pendingChangeQueue'),
   StreamManager: require('./utils/streamManager'),
-  CursorPoller: require('./utils/cursorPoller')
+  CursorPoller: require('./utils/cursorPoller'),
 };
diff --git a/src/sentry/static/sentry/app/utils/errorHandler.jsx b/src/sentry/static/sentry/app/utils/errorHandler.jsx
new file mode 100644
index 0000000000..896451622d
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/errorHandler.jsx
@@ -0,0 +1,17 @@
+import React from 'react';
+import RouteError from '../views/routeError';
+
+export default function errorHandler(Component) {
+  const originalRender = Component.prototype.render;
+
+  Component.prototype.render = function tryRender() {
+    try {
+      return originalRender.apply(this, arguments);
+    } catch (err) {
+      console.error(err);
+      return <RouteError error={err} component={this} />;
+    }
+  };
+
+  return Component;
+}
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index 1c62af25a2..ebc1f1776e 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -206,7 +206,7 @@ const InstallWizard = React.createClass({
               </LoadingIndicator>
             : (error ?
               <div className="loading-error">
-                <span className="icon" />
+                <span className="icon-exclamation" />
                 {t('We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.')}
               </div>
             :
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
new file mode 100644
index 0000000000..d8224c2a9d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -0,0 +1,55 @@
+import jQuery from 'jquery';
+import Raven from 'raven-js';
+import React from 'react';
+
+import ConfigStore from '../stores/configStore';
+import {t} from '../locale';
+
+
+function loadScript(url) {
+  let script = document.createElement('script');
+  script.type = 'text/javascript';
+  script.async = true;
+  script.src = url;
+  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(script);
+}
+
+const RouteError = React.createClass({
+  componentWillMount() {
+    // TODO(dcramer): show something in addition to embed (that contains it?)
+    // TODO(dcramer): capture better context
+    Raven.captureException(this.props.err);
+    this.setState({
+      errorId: Raven.lastEventId(),
+    }, () => {
+      loadScript(this.getCrashReportUrl());
+    });
+  },
+
+  componentWillUnmount() {
+    // TODO(dcramer): kill crash dialog
+  },
+
+  getCrashReportUrl() {
+    // TODO(dcramer): needs urlPrefix
+    let query = jQuery.param({
+      eventId: this.state.errorId,
+      // TODO(dcramer): dsn should come from raven-js
+      dsn: ConfigStore.get('dsn'),
+    });
+    return `/api/embed/error-page/?${query}`;
+  },
+
+  render() {
+    // TODO(dcramer): show additional resource links
+    return (
+      <div className="alert alert-block alert-error">
+        <span className="icon-exclamation" style={{marginRight: 10}}/>
+        {t('There was an unexpected error rendering this page.')}
+      </div>
+    );
+  },
+});
+
+export default RouteError;
+
diff --git a/src/sentry/templates/sentry/error-page-embed.js b/src/sentry/templates/sentry/error-page-embed.js
index 620d74ad82..13c3d3978a 100644
--- a/src/sentry/templates/sentry/error-page-embed.js
+++ b/src/sentry/templates/sentry/error-page-embed.js
@@ -146,7 +146,7 @@
     parent.appendChild(this.element);
   };
 
-  var options = window.sentryConfig;
+  var options = window.sentryConfig || {};
   var embed = new SentryErrorEmbed(options);
   if (options.attachOnLoad !== false) {
     onReady(function(){
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index d50d876835..1e6fc12a8a 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import logging
 import sentry
 
 from django import template
@@ -10,6 +11,7 @@ from pkg_resources import parse_version
 
 from sentry import features, options
 from sentry.api.serializers.base import serialize
+from sentry.models import ProjectKey
 from sentry.utils import json
 from sentry.utils.assets import get_asset_url
 from sentry.utils.functional import extract_lazy_object
@@ -51,6 +53,17 @@ def _needs_upgrade():
     return False
 
 
+def _get_public_dsn():
+    try:
+        projectkey = ProjectKey.objects.filter(
+            project=settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT,
+        )[0]
+    except Exception:
+        logging.exception('Unable to fetch ProjectKey for internal project')
+        return
+    return projectkey.dsn_public
+
+
 @register.simple_tag(takes_context=True)
 def get_react_config(context):
     if 'request' in context:
@@ -88,6 +101,7 @@ def get_react_config(context):
         'features': enabled_features,
         'mediaUrl': get_asset_url('sentry', ''),
         'needsUpgrade': needs_upgrade,
+        'dsn': _get_public_dsn(),
         'messages': [{
             'message': msg.message,
             'level': msg.tags,
