commit 5c8eb035e248a77a0508f11469f6ec1a6edf2115
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 20 14:17:18 2010 -0700

    Added FilterValue for storage of distinct key names on filters

diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index 67a85b6b3a..82dfdae75f 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -75,8 +75,10 @@ class SentryFilter(object):
         return '?' + query_dict.urlencode()
     
     def get_choices(self):
-        from sentry.models import GroupedMessage
-        return SortedDict((l, l) for l in GroupedMessage.objects.values_list(self.column, flat=True).distinct())
+        from sentry.models import FilterValue
+        return SortedDict((l, l) for l in FilterValue.objects.filter(key=self.column)\
+                                                     .values_list('value', flat=True)\
+                                                     .order_by('value'))
     
     def get_query_set(self, queryset):
         from indexer.models import Index
@@ -112,10 +114,6 @@ class ServerNameFilter(SentryFilter):
     label = 'Server Name'
     column = 'server_name'
 
-    def get_choices(self):
-        from sentry.models import Message
-        return SortedDict((l, l) for l in Message.objects.values_list(self.column, flat=True).distinct())
-
     def get_query_set(self, queryset):
         return queryset.filter(message_set__server_name=self.get_value())
 
diff --git a/sentry/manager.py b/sentry/manager.py
index de0b7a1119..56cd3424cc 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -75,6 +75,8 @@ class SentryManager(models.Manager):
                 group=group,
                 **kwargs
             )
+            FilterValue.objects.get_or_create(key='server_name', value=server_name)
+            FilterValue.objects.get_or_create(key='logger', value=logger_name)
         except Exception, exc:
             # TODO: should we mail admins when there are failures?
             try:
diff --git a/sentry/migrations/0004_auto__add_filtervalue__add_unique_filtervalue_key_value.py b/sentry/migrations/0004_auto__add_filtervalue__add_unique_filtervalue_key_value.py
new file mode 100644
index 0000000000..e5343508bf
--- /dev/null
+++ b/sentry/migrations/0004_auto__add_filtervalue__add_unique_filtervalue_key_value.py
@@ -0,0 +1,72 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'FilterValue'
+        db.create_table('sentry_filtervalue', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
+            ('value', self.gf('django.db.models.fields.CharField')(max_length=255)),
+        ))
+        db.send_create_signal('sentry', ['FilterValue'])
+
+        # Adding unique constraint on 'FilterValue', fields ['key', 'value']
+        db.create_unique('sentry_filtervalue', ['key', 'value'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'FilterValue', fields ['key', 'value']
+        db.delete_unique('sentry_filtervalue', ['key', 'value'])
+
+        # Deleting model 'FilterValue'
+        db.delete_table('sentry_filtervalue')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '255'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '255', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '255', 'null': 'True', 'blank': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 59bfa1ce11..924766aaaa 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -225,3 +225,15 @@ class Message(MessageBase):
             fake_request.path_info = ''
         fake_request.path = fake_request.path_info
         return fake_request
+
+class FilterValue(models.Model):
+    FILTER_KEYS = (
+        ('server_name', _('server name')),
+        ('logger', _('logger')),
+    )
+    
+    key = models.CharField(choices=FILTER_KEYS, max_length=32)
+    value = models.CharField(max_length=255)
+    
+    class Meta:
+        unique_together = (('key', 'value'),)
\ No newline at end of file
