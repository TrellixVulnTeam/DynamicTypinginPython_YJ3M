commit b0a8ab63bed5aa63e520b106d5e8fc57404087eb
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Jul 22 12:12:08 2016 -0700

    Add locking to upgrade (#3740)
    
    This adds:
    
    * A --lock option to `sentry upgrade` which will bail out and error if
      there is already a claimed lock.
    * A --with-lock option to `sentry run web --upgrade` which will skip
      running `upgrade` if the lock is already claimed.
    
    This change is to better facilitate automated cluster deployments where
    the recommended means of upgrading/deploying Sentry is just by running
    `sentry run web --upgrade` without needing a manual step of running
    `upgrade`. In distributed systems, it's not a great idea to be running
    multiple concurrent `upgrades` since they'll likely conflict and error
    out or do something potentially worse.

diff --git a/src/sentry/runner/commands/run.py b/src/sentry/runner/commands/run.py
index be33f33e97..0d46948f2d 100644
--- a/src/sentry/runner/commands/run.py
+++ b/src/sentry/runner/commands/run.py
@@ -55,18 +55,25 @@ def run():
 @click.option('--bind', '-b', default=None, help='Bind address.', type=Address)
 @click.option('--workers', '-w', default=0, help='The number of worker processes for handling requests.')
 @click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
+@click.option('--with-lock', default=False, is_flag=True, help='Use a lock if performing an upgrade.')
 @click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
 @log_options()
 @configuration
-def web(bind, workers, upgrade, noinput):
+def web(bind, workers, upgrade, with_lock, noinput):
     "Run web service."
     if upgrade:
         click.echo('Performing upgrade before service startup...')
         from sentry.runner import call_command
-        call_command(
-            'sentry.runner.commands.upgrade.upgrade',
-            verbosity=0, noinput=noinput,
-        )
+        try:
+            call_command(
+                'sentry.runner.commands.upgrade.upgrade',
+                verbosity=0, noinput=noinput, lock=with_lock,
+            )
+        except click.ClickException:
+            if with_lock:
+                click.echo('!! Upgrade currently running from another process, skipping.', err=True)
+            else:
+                raise
 
     from sentry.services.http import SentryHTTPServer
     SentryHTTPServer(
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
index 400954b874..f0a7340512 100644
--- a/src/sentry/runner/commands/upgrade.py
+++ b/src/sentry/runner/commands/upgrade.py
@@ -11,19 +11,11 @@ import click
 from sentry.runner.decorators import configuration
 
 
-@click.command()
-@click.option('--verbosity', '-v', default=1, help='Verbosity level.')
-@click.option('--traceback', default=True, is_flag=True, help='Raise on exception.')
-@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
-@configuration
-@click.pass_context
-def upgrade(ctx, verbosity, traceback, noinput):
-    "Perform any pending database migrations and upgrades."
-
+def _upgrade(interactive, traceback, verbosity):
     from django.core.management import call_command as dj_call_command
     dj_call_command(
         'syncdb',
-        interactive=not noinput,
+        interactive=interactive,
         traceback=traceback,
         verbosity=verbosity,
     )
@@ -32,7 +24,7 @@ def upgrade(ctx, verbosity, traceback, noinput):
         'migrate',
         merge=True,
         ignore_ghost_migrations=True,
-        interactive=not noinput,
+        interactive=interactive,
         traceback=traceback,
         verbosity=verbosity,
     )
@@ -41,3 +33,26 @@ def upgrade(ctx, verbosity, traceback, noinput):
     call_command(
         'sentry.runner.commands.repair.repair',
     )
+
+
+@click.command()
+@click.option('--verbosity', '-v', default=1, help='Verbosity level.')
+@click.option('--traceback', default=True, is_flag=True, help='Raise on exception.')
+@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@click.option('--lock', default=False, is_flag=True, help='Hold a global lock and limit upgrade to one concurrent.')
+@configuration
+@click.pass_context
+def upgrade(ctx, verbosity, traceback, noinput, lock):
+    "Perform any pending database migrations and upgrades."
+
+    if lock:
+        from sentry.app import locks
+        from sentry.utils.locking import UnableToAcquireLock
+        lock = locks.get('upgrade', duration=0)
+        try:
+            with lock.acquire():
+                _upgrade(not noinput, traceback, verbosity)
+        except UnableToAcquireLock:
+            raise click.ClickException('Unable to acquire `upgrade` lock.')
+    else:
+        _upgrade(not noinput, traceback, verbosity)
