commit e187387742ce508850ce60ea6651f71bcbd49c64
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri May 12 11:42:36 2017 -0700

    validate repo in refs rather than silently skipping (#5369)
    
    * validate repo in refs rather than silently skipping
    
    * add todo
    
    * refactor to reduce queries
    
    * return invalid repo names in response

diff --git a/src/sentry/api/endpoints/organization_release_details.py b/src/sentry/api/endpoints/organization_release_details.py
index 747c9909c3..6513ea1702 100644
--- a/src/sentry/api/endpoints/organization_release_details.py
+++ b/src/sentry/api/endpoints/organization_release_details.py
@@ -6,7 +6,7 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
-from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.exceptions import InvalidRepository, ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import (
     CommitSerializer, ListField, ReleaseHeadCommitSerializerDeprecated,
@@ -162,7 +162,12 @@ class OrganizationReleaseDetailsEndpoint(OrganizationReleasesBaseEndpoint):
                     'refs': ['You must use an authenticated API token to fetch refs']
                 }, status=400)
             fetch_commits = not commit_list
-            release.set_refs(refs, request.user, fetch=fetch_commits)
+            try:
+                release.set_refs(refs, request.user, fetch=fetch_commits)
+            except InvalidRepository as exc:
+                return Response({
+                    'refs': [exc.message]
+                }, status=400)
 
         if (not was_released and release.date_released):
             for project in release.projects.all():
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index bc2e50de48..5842294b1d 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -7,6 +7,7 @@ from rest_framework.response import Response
 from .project_releases import ReleaseSerializer
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
+from sentry.api.exceptions import InvalidRepository
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import (
@@ -186,7 +187,12 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint):
                         'refs': ['You must use an authenticated API token to fetch refs']
                     }, status=400)
                 fetch_commits = not commit_list
-                release.set_refs(refs, request.user, fetch=fetch_commits)
+                try:
+                    release.set_refs(refs, request.user, fetch=fetch_commits)
+                except InvalidRepository as exc:
+                    return Response({
+                        'refs': [exc.message]
+                    }, status=400)
 
             if not created and not new_projects:
                 # This is the closest status code that makes sense, and we want
diff --git a/src/sentry/api/exceptions.py b/src/sentry/api/exceptions.py
index 3eb6a3b3d6..c99f6867ac 100644
--- a/src/sentry/api/exceptions.py
+++ b/src/sentry/api/exceptions.py
@@ -5,3 +5,7 @@ from rest_framework.exceptions import APIException
 
 class ResourceDoesNotExist(APIException):
     status_code = 404
+
+
+class InvalidRepository(Exception):
+    pass
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index f742b0427f..365ecc064a 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -252,6 +252,7 @@ class Release(Model):
             return True
 
     def set_refs(self, refs, user, fetch=False):
+        from sentry.api.exceptions import InvalidRepository
         from sentry.models import Commit, ReleaseHeadCommit, Repository
         from sentry.tasks.commits import fetch_commits
 
@@ -262,14 +263,18 @@ class Release(Model):
             projects__in=self.projects.all(),
         ).exclude(version=self.version).order_by('-date_added').first()
 
+        names = {r['repository'] for r in refs}
+        repos = list(Repository.objects.filter(
+            organization_id=self.organization_id,
+            name__in=names,
+        ))
+        repos_by_name = {r.name: r for r in repos}
+        invalid_repos = names - set(repos_by_name.keys())
+        if invalid_repos:
+            raise InvalidRepository('Invalid repository names: %s' % ','.join(invalid_repos))
+
         for ref in refs:
-            try:
-                repo = Repository.objects.get(
-                    organization_id=self.organization_id,
-                    name=ref['repository'],
-                )
-            except Repository.DoesNotExist:
-                continue
+            repo = repos_by_name[ref['repository']]
 
             commit = Commit.objects.get_or_create(
                 organization_id=self.organization_id,
diff --git a/tests/sentry/api/endpoints/test_organization_release_details.py b/tests/sentry/api/endpoints/test_organization_release_details.py
index 6302d23987..cf580b1f27 100644
--- a/tests/sentry/api/endpoints/test_organization_release_details.py
+++ b/tests/sentry/api/endpoints/test_organization_release_details.py
@@ -440,3 +440,42 @@ class ReleaseDeleteTest(APITestCase):
         assert response.status_code == 400, response.content
 
         assert Release.objects.filter(id=release.id).exists()
+
+    def test_bad_repo_name(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        release.add_project(project)
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.put(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug],
+            'refs': [{
+                'repository': 'not_a_repo',
+                'commit': 'a' * 40,
+            }]
+        })
+        assert response.status_code == 400
+        assert response.data == {
+            'refs': [u'Invalid repository names: not_a_repo']
+        }
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 005bcb7140..9eb764b9b6 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -757,3 +757,35 @@ class OrganizationReleaseCreateTest(APITestCase):
         )
 
         assert response.status_code == 201
+
+    def test_bad_repo_name(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug],
+            'refs': [{
+                'repository': 'not_a_repo',
+                'commit': 'a' * 40,
+            }]
+        })
+        assert response.status_code == 400
+        assert response.data == {
+            'refs': [u'Invalid repository names: not_a_repo']
+        }
