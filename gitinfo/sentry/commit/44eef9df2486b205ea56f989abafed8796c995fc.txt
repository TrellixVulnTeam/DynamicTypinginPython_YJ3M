commit 44eef9df2486b205ea56f989abafed8796c995fc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sun Mar 6 23:45:44 2016 +0100

    Added callsign support to new project form and new project API

diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 4706dc5d7d..58bf57fd54 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -8,6 +8,7 @@ from sentry.api.bases.team import TeamEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Project, AuditLogEntryEvent
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.utils.strings import validate_callsign, iter_callsign_choices
 
 
 @scenario('ListTeamProjects')
@@ -34,6 +35,13 @@ def create_project_scenario(runner):
 class ProjectSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=True)
     slug = serializers.CharField(max_length=200, required=False)
+    callsign = serializers.CharField(max_length=6, required=False)
+
+    def validate(self, data):
+        callsign = data.get('callsign')
+        if callsign and validate_callsign(callsign) is None:
+            raise serializers.ValidationError(
+                'Callsign must be between 2 and 6 characters long.')
 
 
 class TeamProjectIndexEndpoint(TeamEndpoint):
@@ -75,6 +83,7 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
         :param string name: the name for the new project.
         :param string slug: optionally a slug for the new project.  If it's
                             not provided a slug is generated from the name.
+        :param string callsign: optionally a callsign for the new project.
         :auth: required
         """
         serializer = ProjectSerializer(data=request.DATA)
@@ -82,9 +91,22 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
         if serializer.is_valid():
             result = serializer.object
 
+            callsign = result.get('callsign')
+            if not callsign:
+                it = iter_callsign_choices(result['name'])
+                for callsign in it:
+                    try:
+                        Project.objects.get(
+                            organization=team.organization,
+                            callsign=callsign
+                        )
+                    except Project.DoesNotExist:
+                        break
+
             project = Project.objects.create(
                 name=result['name'],
                 slug=result.get('slug'),
+                callsign=callsign,
                 organization=team.organization,
                 team=team
             )
diff --git a/src/sentry/migrations/0242_prefill_callsigns.py b/src/sentry/migrations/0242_prefill_callsigns.py
index f3f9e5469b..99ff18de0c 100644
--- a/src/sentry/migrations/0242_prefill_callsigns.py
+++ b/src/sentry/migrations/0242_prefill_callsigns.py
@@ -6,7 +6,7 @@ from south.utils import datetime_utils as datetime
 from south.db import db
 from south.v2 import DataMigration
 from django.db import models, transaction
-from sentry.utils.strings import tokens_from_name
+from sentry.utils.strings import tokens_from_name, iter_callsign_choices
 
 
 class RollbackLocally(Exception):
@@ -22,40 +22,6 @@ def catchable_atomic():
         pass
 
 
-def iter_callsign_choices(project):
-    words = list(x.upper() for x in tokens_from_name(
-        project.name, remove_digits=True))
-    if not words:
-        words = ['AA']
-    bits = []
-
-    if len(words) == 2:
-        bits.append(words[0][:1] + words[1][:1])
-    elif len(words) == 3:
-        bits.append(words[0][:1] + words[1][:1] + words[2][:1])
-    bit = words[0][:2]
-    if len(bit) == 2:
-        bits.append(bit)
-    bit = words[0][:3]
-    if len(bit) == 3:
-        bits.append(bit)
-
-    for bit in bits:
-        yield bit
-
-    try:
-        team_bit = _letters_re.findall(project.team.name.upper())[0][:1]
-        if team_bit:
-            for bit in bits:
-                yield team_bit + bit
-    except IndexError:
-        pass
-
-    for idx in count(2):
-        for bit in bits:
-            yield '%s%d' % (bit, idx)
-
-
 def get_callsigns(projects):
     rv = {}
 
@@ -63,7 +29,8 @@ def get_callsigns(projects):
         if project.callsign is not None:
             rv[project.callsign] = project.id
             continue
-        for callsign in iter_callsign_choices(project):
+        for callsign in iter_callsign_choices(project.name,
+                                              team_name=project.team.name):
             if callsign in rv:
                 continue
             rv[callsign] = project.id
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index f0ae27c623..d001cbf2c2 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import
 import base64
 import re
 import zlib
+from itertools import count
 
 from django.utils.encoding import smart_unicode, force_unicode
 
@@ -20,6 +21,7 @@ _callsign_re = re.compile(r'^[A-Z]{2,6}$')
 _word_sep_re = re.compile(r'[\s.;,_-]+(?u)')
 _camelcase_re = re.compile(
     r'(?:[A-Z]{2,}(?=[A-Z]))|(?:[A-Z][a-z0-9]+)|(?:[a-z0-9]+)')
+_letters_re = re.compile(r'[A-Z]+')
 _digit_re = re.compile(r'\d+')
 
 
@@ -106,6 +108,41 @@ def validate_callsign(value):
     return callsign
 
 
+def iter_callsign_choices(project_name, team_name=None):
+    words = list(x.upper() for x in tokens_from_name(
+        project_name, remove_digits=True))
+    if not words:
+        words = ['AA']
+    bits = []
+
+    if len(words) == 2:
+        bits.append(words[0][:1] + words[1][:1])
+    elif len(words) == 3:
+        bits.append(words[0][:1] + words[1][:1] + words[2][:1])
+    bit = words[0][:2]
+    if len(bit) == 2:
+        bits.append(bit)
+    bit = words[0][:3]
+    if len(bit) == 3:
+        bits.append(bit)
+
+    for bit in bits:
+        yield bit
+
+    if team_name is not None:
+        try:
+            team_bit = _letters_re.findall(team_name.upper())[0][:1]
+            if team_bit:
+                for bit in bits:
+                    yield team_bit + bit
+        except IndexError:
+            pass
+
+    for idx in count(2):
+        for bit in bits:
+            yield '%s%d' % (bit, idx)
+
+
 def split_camelcase(word):
     pieces = _camelcase_re.findall(word)
 
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index 25974a7bc2..691c9b7375 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -6,6 +6,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, Project
 from sentry.signals import project_created
 from sentry.utils.samples import create_sample_event
+from sentry.utils.strings import iter_callsign_choices, validate_callsign
 
 
 BLANK_CHOICE = [("", "")]
@@ -16,13 +17,44 @@ class AddProjectForm(forms.ModelForm):
         widget=forms.TextInput(attrs={
             'placeholder': _('i.e. API, Frontend, My Application Name'),
         }),
-        help_text='Using the repository name generally works well.',
+        help_text=_('Using the repository name generally works well.'),
+    )
+    callsign = forms.CharField(label=_('Callsign'),
+        widget=forms.TextInput(attrs={
+            'placeholder': _('2-6 letter prefix.  Leave empty '
+                             'for auto assignment.'),
+        }),
+        help_text=_('This is added as prefix for issue IDs.'),
+        required=False
     )
 
     class Meta:
-        fields = ('name',)
+        fields = ('name', 'callsign')
         model = Project
 
+    def __init__(self, organization, *args, **kwargs):
+        forms.ModelForm.__init__(self, *args, **kwargs)
+        self.organization = organization
+
+    def clean_callsign(self):
+        callsign = self.cleaned_data.get('callsign')
+        if not callsign:
+            it = iter_callsign_choices(self.cleaned_data['name'])
+            for potential_callsign in it:
+                try:
+                    Project.objects.get(
+                        organization=self.organization,
+                        callsign=potential_callsign
+                    )
+                except Project.DoesNotExist:
+                    return potential_callsign
+
+        callsign = validate_callsign(callsign)
+        if callsign is None:
+            raise forms.ValidationError(_('Callsign must be between 2 '
+                                          'and 6 letters'))
+        return callsign
+
     def save(self, actor, team, ip_address):
         project = super(AddProjectForm, self).save(commit=False)
         project.team = team
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index 9563c91176..6593f3ee97 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -20,11 +20,11 @@ class AddProjectWithTeamForm(AddProjectForm):
     )
 
     class Meta:
-        fields = ('name', 'team')
+        fields = ('name', 'callsign', 'team')
         model = Project
 
-    def __init__(self, user, team_list, *args, **kwargs):
-        super(AddProjectWithTeamForm, self).__init__(*args, **kwargs)
+    def __init__(self, user, organization, team_list, *args, **kwargs):
+        super(AddProjectWithTeamForm, self).__init__(organization, *args, **kwargs)
 
         self.team_list = team_list
 
@@ -56,9 +56,11 @@ class CreateProjectView(OrganizationView):
     required_scope = 'team:write'
 
     def get_form(self, request, organization, team_list):
-        return AddProjectWithTeamForm(request.user, team_list, request.POST or None, initial={
+        data = {
             'team': request.GET.get('team'),
-        })
+        }
+        return AddProjectWithTeamForm(request.user, organization, team_list,
+                                      request.POST or None, initial=data)
 
     def handle(self, request, organization):
         team_list = [
