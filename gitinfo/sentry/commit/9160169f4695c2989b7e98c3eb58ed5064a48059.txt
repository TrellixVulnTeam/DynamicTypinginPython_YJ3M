commit 9160169f4695c2989b7e98c3eb58ed5064a48059
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 18 08:40:00 2016 -0800

    Begin restructuring of short id UI to submit data

diff --git a/src/sentry/api/endpoints/organization_shortids.py b/src/sentry/api/endpoints/organization_shortids.py
new file mode 100644
index 0000000000..936333105f
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_shortids.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationEndpoint
+
+
+class ShortIdsUpdateEndpoint(OrganizationEndpoint):
+
+    def put(self, request, organization):
+        """
+        Update Short IDs
+        ````````````````
+
+        Updates the call signs of projects within the organization.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          short ID should be looked up in.
+        :param projects: a dictionary of project IDs to their intended
+                         short IDs.
+        :auth: required
+        """
+        projects = dict((str(p.id), p) for p in organization.project_set.all())
+        rv = {}
+
+        for project_id, short_name in request.DATA.get('projects', {}).iteritems():
+            project = projects.get(project_id)
+            if project is None:
+                continue
+            project.short_name = short_name
+            project.update_option('sentry:reviewed-short-id', True)
+            rv[project.id] = short_name
+
+        return Response({
+            'updated_short_ids': rv
+        })
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index dc8d98bf8d..7a55eb8127 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -25,6 +25,7 @@ from .endpoints.organization_access_request_details import OrganizationAccessReq
 from .endpoints.organization_activity import OrganizationActivityEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
+from .endpoints.organization_shortids import ShortIdsUpdateEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
@@ -111,6 +112,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/shortids/(?P<short_id>[^\/]+)/$',
         ShortIdLookupEndpoint.as_view(),
         name='sentry-api-0-short-id-lookup'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/shortids/$',
+        ShortIdsUpdateEndpoint.as_view(),
+        name='sentry-api-0-short-ids-update'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/access-requests/(?P<request_id>\d+)/$',
         OrganizationAccessRequestDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-access-request-details'),
diff --git a/src/sentry/static/sentry/app/components/actionOverlay.jsx b/src/sentry/static/sentry/app/components/actionOverlay.jsx
index 83ddf51483..313f6e8f2f 100644
--- a/src/sentry/static/sentry/app/components/actionOverlay.jsx
+++ b/src/sentry/static/sentry/app/components/actionOverlay.jsx
@@ -2,27 +2,27 @@ import React from 'react';
 import {History} from 'react-router';
 import OrganizationState from '../mixins/organizationState';
 import {t} from '../locale';
+import requiredAdminActions from '../components/requiredAdminActions';
+import LoadingIndicator from '../components/loadingIndicator';
 
 const ActionOverlay = React.createClass({
   propTypes: {
-    actionId: React.PropTypes.string.isRequired
+    actionId: React.PropTypes.string.isRequired,
+    isLoading: React.PropTypes.bool
   },
   mixins: [OrganizationState, History],
 
   componentWillMount() {
-    // in case we mount but we are not an org admin or our action is not
-    // in the list of currently required actions, we bail out in a really
-    // stupid way but works.
-    let org = this.getOrganization();
-    let access = this.getAccess();
-    let requiredActions = new Set(org.requiredAdminActions);
-
-    if (!access.has('org:write') ||
-        !requiredActions.has(this.props.actionId)) {
+    let action = this.getAction();
+    if (!action.requiresAction(this.getOrganization())) {
       this.dismiss();
     }
   },
 
+  getAction() {
+    return requiredAdminActions[this.props.actionId];
+  },
+
   dismiss() {
     // is this the right thing?
     this.context.history.goBack();
@@ -34,19 +34,30 @@ const ActionOverlay = React.createClass({
   },
 
   render() {
-    let {children, ...other} = this.props;
+    let {children, isLoading, ...other} = this.props;
     let orgUrl = `/organizations/${this.getOrganization().slug}/`;
+    let className = 'admin-action-overlay';
+    if (isLoading) {
+      className += ' loading-data';
+    }
+
     return (
-      <div className="admin-action-overlay" {...other}>
+      <div className={className} {...other}>
         <div className="pattern"/>
         <div className="container">
           <div className="dialog">
-            <div className="discard-bar">
-              <a href={orgUrl} onClick={this.onDoThisLater}>{
-                t('Do this later …')}</a>
-            </div>
-            <div className="content">
-              {children}
+            <div className="dialog-contents">
+              <div className="discard-bar">
+                <a href={orgUrl} onClick={this.onDoThisLater}>{
+                  t('Do this later …')}</a>
+              </div>
+              <div className="content">
+                {children}
+              </div>
+              {isLoading ?
+                <div className="loading-overlay">
+                  <LoadingIndicator/>
+                </div> : null}
             </div>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index 693cdc69f2..5b7e98ec0f 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -47,6 +47,16 @@ const OnboardingStatus = React.createClass({
   }
 });
 
+function getFirstRequiredAdminAction(org) {
+  for (let key in requiredAdminActions) {
+    let action = requiredAdminActions[key];
+    if (action.requiresAction(org)) {
+      return action;
+    }
+  }
+  return null;
+}
+
 const Header = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired
@@ -91,24 +101,17 @@ const Header = React.createClass({
       logo = <span className="icon-sentry-logo-full"/>;
     }
 
+    let org = this.getOrganization();
+    let requiredAction = getFirstRequiredAdminAction(org);
     let actionMessage = null;
 
-    if (org) {
-      let requiredActions = org.requiredAdminActions;
-      if (requiredActions.length > 0) {
-        if (this.getAccess().has('org:write')) {
-          let slugId = requiredActions[0].toLowerCase().replace(/_/g, '-');
-          let url = `/organizations/${org.slug}/actions/${slugId}/`;
-          actionMessage = (
-            <a href={url}>{t('Required Action:')}{' '}{
-              requiredAdminActions[requiredActions[0]].getActionLinkTitle()}</a>
-          );
-        } else {
-          actionMessage = (
-            <span>{t('There are pending actions for an administrator of this organization!')}</span>
-          );
-        }
-      }
+    if (org && requiredAction !== null) {
+      let slugId = requiredAction.ID.toLowerCase().replace(/_/g, '-');
+      let url = `/organizations/${org.slug}/actions/${slugId}/`;
+      actionMessage = (
+        <a href={url}>{t('Required Action:')}{' '}{
+          requiredAction.getActionLinkTitle()}</a>
+      );
     }
 
     // NOTE: this.props.orgId not guaranteed to be specified
diff --git a/src/sentry/static/sentry/app/components/requiredAdminActions.jsx b/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
index 1caf7a4822..864239d70e 100644
--- a/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
+++ b/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
@@ -4,4 +4,8 @@ const requiredAdminActions = {
   SET_SHORT_IDS: SetShortIdsAction
 };
 
+for (let key in requiredAdminActions) {
+  requiredAdminActions[key].ID = key;
+}
+
 export default requiredAdminActions;
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index cede34f63d..831c1bde19 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -17,7 +17,7 @@ let ERROR_TYPES = {
 function doProjectsNeedShortId(teams) {
   for (let i = 0; i < teams.length; i++) {
     for (let j = 0; j < teams[i].projects.length; j++) {
-      if (teams[i].projects[j].shortName === null) {
+      if (!teams[i].projects[j].shortNameReviewed) {
         return true;
       }
     }
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
index 4c4233fcb2..8a8721969a 100644
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
@@ -1,43 +1,120 @@
 import React from 'react';
 import ActionOverlay from '../../components/actionOverlay';
 import OrganizationState from '../../mixins/organizationState';
+import ApiMixin from '../../mixins/apiMixin';
 import {t} from '../../locale';
 
+function getProjectInfoForReview(org) {
+  let projects = [];
+  let nonMemberProjects = [];
+  let requiresReview = 0;
+  let canReviewAnything = false;
+  let canWriteProjects = (new Set(org.access)).has('project:write');
+
+  for (let i = 0; i < org.teams.length; i++) {
+    let team = org.teams[i];
+    for (let j = 0; j < team.projects.length; j++) {
+      let project = team.projects[j];
+      let canReview = false;
+      let targetList = nonMemberProjects;
+      if (team.isMember) {
+        canReview = canWriteProjects;
+        if (!project.shortNameReviewed) {
+          requiresReview++;
+          canReviewAnything = canReviewAnything || canReview;
+        }
+        targetList = projects;
+      }
+      targetList.push({
+        projectId: project.id,
+        projectName: project.name,
+        isMember: team.isMember,
+        requiresReview: !project.shortNameReviewed,
+        canReview: canReview,
+        teamName: org.teams[i].name,
+        shortName: project.shortName || null
+      });
+    }
+  }
+
+  projects = projects.concat(nonMemberProjects);
+
+  return {
+    projects: projects,
+    requiresReview: requiresReview,
+    canReviewAnything: canReviewAnything,
+    hasNonMemberProjects: nonMemberProjects.length > 0
+  };
+}
+
 
 const SetShortIdsAction = React.createClass({
-  mixins: [OrganizationState],
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      isLoading: false,
+      shortIds: {}
+    };
+  },
 
   getProjectList() {
-    let org = this.getOrganization();
-    let projects = [];
-    for (let i = 0; i < org.teams.length; i++) {
-      for (let j = 0; j < org.teams[i].projects.length; j++) {
-        let project = org.teams[i].projects[j];
-        projects.push({
-          projectId: project.id,
-          projectName: project.name,
-          teamName: org.teams[i].name,
-          shortName: project.shortName || null
+    return getProjectInfoForReview(this.getOrganization()).projects;
+  },
+
+  onSubmit(event) {
+    this.setState({
+      isLoading: true
+    });
+
+    let orgId = this.getOrganization().slug;
+    this.api.request(`/organizations/${orgId}/shortids/`, {
+      method: 'PUT',
+      data: this.state.shortIds,
+      success: (data) => {
+      },
+      error: (error) => {
+      },
+      complete: () => {
+        this.setState({
+          isLoading: false
         });
       }
-    }
+    });
+  },
 
-    return projects;
+  onSetShortName(projectId, event) {
+    this.setState({
+
+    });
   },
 
   render() {
     let org = this.getOrganization();
-    let projects = this.getProjectList();
+    let info = getProjectInfoForReview(this.getOrganization());
+    let projects = info.projects;
 
     return (
-      <ActionOverlay actionId="SET_SHORT_IDS">
-        <h1>{t('Add Call Signs to Projects')}</h1>
+      <ActionOverlay actionId="SET_SHORT_IDS" isLoading={this.state.isLoading}>
+        <h1>{t('Review Call Signs for Projects')}</h1>
         <p>{t('Sentry now requires you to specify a call sign (short name) for each project in the organization “%s”. These short names are used to identify the project in the issue IDs.  Ideally they are two or three letter long.', org.name)}</p>
+        {info.hasNonMemberProjects
+          ? <p>{t('Projects of teams you are not a member of are shown grayed out.')}</p> : null}
+        <p>{t('Projects which have been previously reviewed are shown in green.')}</p>
         <form className="form-horizontal">
           {projects.map((project) => {
             let inputId = 'input-' + project.projectId;
+            let disabled = !project.canReview;
+            let className = 'form-group short-id-form-group';
+            if (disabled) {
+              className += ' disabled';
+            }
+            if (!project.requiresReview) {
+              className += ' reviewed';
+            }
+
             return (
-              <div className="form-group short-id-form-group" key={project.projectId}>
+              <div className={className} key={project.projectId}>
                 <label htmlFor={inputId}
                   className="col-sm-6 col-sm-offset-2 control-label">
                   {project.teamName} / {project.projectName}
@@ -45,14 +122,18 @@ const SetShortIdsAction = React.createClass({
                 <div className="col-sm-2">
                   <input type="text"
                     id={inputId}
+                    disabled={disabled}
                     className="form-control"
-                    defaultValue={project.shortName}/>
+                    onChange={this.onSetShortName.bind(this, project.projectId)}
+                    value={project.shortName}/>
                 </div>
               </div>
             );
           })}
           <div className="actions">
-            <button type="button" className="btn btn-primary btn-lg">
+            <button type="button"
+              onClick={this.onSubmit}
+              className="btn btn-primary btn-lg">
               {t('Set Call Signs')}
             </button>
           </div>
@@ -62,8 +143,13 @@ const SetShortIdsAction = React.createClass({
   }
 });
 
+SetShortIdsAction.requiresAction = function(org) {
+  let info = getProjectInfoForReview(org);
+  return info.requiresReview > 0 && info.canReviewAnything;
+};
+
 SetShortIdsAction.getActionLinkTitle = function() {
-  return t('Call Signs for Projects');
+  return t('Review Call Signs for Projects');
 };
 
 export default SetShortIdsAction;
diff --git a/src/sentry/static/sentry/less/required-admin-actions.less b/src/sentry/static/sentry/less/required-admin-actions.less
index afa354ac72..54abf3e25f 100644
--- a/src/sentry/static/sentry/less/required-admin-actions.less
+++ b/src/sentry/static/sentry/less/required-admin-actions.less
@@ -36,6 +36,10 @@
   margin-left: -300px;
   margin-top: 50px;
 
+  .dialog-contents {
+    position: relative;
+  }
+
   .discard-bar {
     float: right;
     a {
@@ -67,9 +71,37 @@
     padding: 20px 0;
   }
 
+  .loading-overlay {
+    display: block;
+    position: absolute;
+    top: -20px;
+    left: -20px;
+    right: -20px;
+    bottom: -20px;
+    background: fade(@purple-dark, 50%);
+    border-radius: 4px;
+    padding-top: 50%;
+    .loading {
+      margin: 0 auto 0 auto;
+      transform: translateY(-50%);
+    }
+  }
+
   .short-id-form-group {
     margin-bottom: 5px;
 
+    &.disabled label {
+      color: @gray;
+    }
+
+    &.reviewed input {
+      background: @green-light;
+      color: @green-dark;
+      text-shadow: none;
+      border-color: @green-dark;
+      box-shadow: inset 0 0 4px @green;
+    }
+
     label { text-align: left; }
     input {
       text-align: center;
@@ -81,6 +113,14 @@
       text-shadow: 0 0 2px darken(@purple, 30);
       box-shadow: inset 0 0 4px darken(@purple, 20);
       border: 1px solid darken(@purple, 40);
+
+      &:disabled {
+        background: @gray-lighter;
+        color: @gray-darkest;
+        text-shadow: none;
+        border-color: @gray-darker;
+        box-shadow: inset 0 0 4px @gray;
+      }
     }
   }
 }
