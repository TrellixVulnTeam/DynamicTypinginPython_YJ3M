commit f9dd4d0d7c683632cf02810c03bd42d7051ad010
Author: Ben Vinegar <benvinegar@users.noreply.github.com>
Date:   Thu Feb 2 15:25:15 2017 -0800

    Add IE10 browser filter (#4858)

diff --git a/CHANGES b/CHANGES
index 551eba3d37..0665e3722a 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@ Version 8.14 (Unreleased)
 -------------------------
 
 - Added new internal processing interface that supports multiple processing steps per stacktrace (for instance JavaScript + native)
+- Add IE10 legacy browser filter
 
 Version 8.13
 ------------
diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index d1ad327148..32878531d3 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -7,6 +7,9 @@ from rest_framework import serializers
 from sentry.models import ProjectOption
 from sentry.api.fields import MultipleChoiceField
 
+"""
+For default (legacy) filter
+"""
 MIN_VERSIONS = {
     'Chrome': 0,
     'IE': 10,
@@ -23,6 +26,7 @@ class LegacyBrowserFilterSerializer(serializers.Serializer):
     subfilters = MultipleChoiceField(choices=[
         'ie_pre_9',
         'ie9',
+        'ie10',
         'opera_pre_15',
         'android_pre_4',
         'safari_pre_6'
@@ -80,6 +84,9 @@ class LegacyBrowsersFilter(Filter):
             return ''
 
     def filter_default(self, browser):
+        """
+        Legacy filter - new users specify individual filters
+        """
         try:
             minimum_version = MIN_VERSIONS[browser['family']]
         except KeyError:
@@ -137,7 +144,7 @@ class LegacyBrowsersFilter(Filter):
 
         return False
 
-    def filter_ie9(self, browser):
+    def _filter_ie(self, browser, compare_version):
         if not browser['family'] == "IE":
             return False
 
@@ -146,24 +153,16 @@ class LegacyBrowsersFilter(Filter):
         except (TypeError, ValueError):
             return False
 
-        if major_browser_version == 9:
-            return True
-
-        return False
-
-    def filter_ie_pre_9(self, browser):
-        if not browser['family'] == "IE":
-            return False
+        return compare_version(major_browser_version)
 
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
+    def filter_ie10(self, browser):
+        return self._filter_ie(browser, lambda major_ver: major_ver == 10)
 
-        if major_browser_version <= 8:
-            return True
+    def filter_ie9(self, browser):
+        return self._filter_ie(browser, lambda major_ver: major_ver == 9)
 
-        return False
+    def filter_ie_pre_9(self, browser):
+        return self._filter_ie(browser, lambda major_ver: major_ver <= 8)
 
     def test(self, data):
         if data.get('platform') != 'javascript':
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index 097d581203..894c3aaf3c 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -79,6 +79,11 @@ const LEGACY_BROWSER_SUBFILTERS = {
     helpText: 'Version 9',
     title: 'Internet Explorer',
   },
+  'ie10': {
+    icon: 'internet-explorer',
+    helpText: 'Version 10',
+    title: 'Internet Explorer',
+  },
   'opera_pre_15': {
     icon: 'opera',
     helpText: 'Version 14 and lower',
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 4b985d5a9d..b0c03146e4 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -288,6 +288,24 @@ class LegacyBrowsersFilterTest(TestCase):
         browser = ua['user_agent']
         assert self.filter_cls(self.project).filter_ie_pre_9(browser) is True
 
+    def test_does_filter_ie9(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value={'ie9'}
+        )
+        data = self.get_mock_data(USER_AGENTS['ie_9'])
+        assert self.apply_filter(data) is True
+
+    def test_does_filter_ie10(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value={'ie10'}
+        )
+        data = self.get_mock_data(USER_AGENTS['ie_10'])
+        assert self.apply_filter(data) is True
+
     def test_does_not_filter_ie10(self):
         data = self.get_mock_data(USER_AGENTS['ie_10'])
         ua_data = self.filter_cls(self.project).get_user_agent(data)
