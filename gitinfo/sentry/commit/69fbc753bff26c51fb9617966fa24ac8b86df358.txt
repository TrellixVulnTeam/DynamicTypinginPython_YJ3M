commit 69fbc753bff26c51fb9617966fa24ac8b86df358
Author: Sarah Lohmeier <sarah.lohmeier@sentry.io>
Date:   Thu Jun 4 15:35:29 2020 -0700

    feat(ui): Display auth providers in order of popularity (#19185)
    
    On the Auth Settings page, displays the auth providers in order of how many users use them.
    
    The list of auth providers is already sorted to display providers unavailable for the current plan last. The “displaying unavailable providers last” functionality is preserved, but within both the available and unavailable providers, providers are sorted by popularity.
    
    The list of popularity order is hard-coded because neither the providers nor their relative popularity is expected to change frequently, and fetching it automatically would be a lot of effort and extra page load time for a relatively small UI tweak.
    
    Part of ENT-12.

diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
index 23bd873775..015d1b4998 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/organizationAuthList.jsx
@@ -14,23 +14,48 @@ import getCookie from 'app/utils/getCookie';
 
 import ProviderItem from './providerItem';
 
-class OrganizationAuthList extends React.Component {
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-  };
+const providerPopularity = {
+  google: 0,
+  github: 1,
+  okta: 2,
+  'active-directory': 3,
+  saml2: 4,
+  onelogin: 5,
+  rippling: 6,
+  auth0: 7,
+};
 
+class OrganizationAuthList extends React.Component {
   static propTypes = {
     providerList: PropTypes.arrayOf(SentryTypes.AuthProvider).isRequired,
     activeProvider: PropTypes.object,
   };
 
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
   render() {
     const {activeProvider} = this.props;
     const {organization} = this.context;
     const features = organization.features;
 
-    // Sort feature-flagged integrations last
-    const providerList = (this.props.providerList || []).sort((a, b) => {
+    // Sort provider list twice: first, by popularity,
+    // and then a second time, to sort unavailable providers for the current plan to the end of the list.
+    const sortedByPopularity = (this.props.providerList || []).sort((a, b) => {
+      if (!(a.key in providerPopularity)) {
+        return -1;
+      }
+      if (!(b.key in providerPopularity)) {
+        return 1;
+      }
+      if (providerPopularity[a.key] === providerPopularity[b.key]) {
+        return 0;
+      }
+      return providerPopularity[a.key] > providerPopularity[b.key] ? 1 : -1;
+    });
+
+    const providerList = sortedByPopularity.sort((a, b) => {
       const aEnabled = features.includes(descopeFeatureName(a.requiredFeature));
       const bEnabled = features.includes(descopeFeatureName(b.requiredFeature));
 
