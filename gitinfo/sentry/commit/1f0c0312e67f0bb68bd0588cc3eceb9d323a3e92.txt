commit 1f0c0312e67f0bb68bd0588cc3eceb9d323a3e92
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Mar 21 16:43:05 2019 -0700

    feat: Turn on Snuba for the project details endpoint (#12496)
    
    Also turns on Snuba for the project details endpoint. Make sure
    project_id is defined before attempting to get Snuba event.
    
    Ref: SEN-401, JAVASCRIPT-5VE

diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index dd1dc3776c..eca5ae51c1 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -41,8 +41,7 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         :auth: required
         """
 
-        use_snuba = request.GET.get('enable_snuba') == '1' and \
-            options.get('snuba.events-queries.enabled')
+        use_snuba = options.get('snuba.events-queries.enabled')
 
         if not use_snuba:
             return self.get_legacy(request, project, event_id)
diff --git a/tests/sentry/api/endpoints/test_group_events_latest.py b/tests/sentry/api/endpoints/test_group_events_latest.py
new file mode 100644
index 0000000000..531e3d7bcb
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_events_latest.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+import six
+
+from datetime import timedelta
+from django.utils import timezone
+
+from sentry.models import Group
+from sentry.testutils import APITestCase
+
+
+class GroupEventsLatestTest(APITestCase):
+    def setUp(self):
+        super(GroupEventsLatestTest, self).setUp()
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        two_min_ago = (timezone.now() - timedelta(minutes=2)).isoformat()[:19]
+
+        self.event1 = self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'environment': 'staging',
+                'fingerprint': ['group_1'],
+                'timestamp': two_min_ago
+            },
+            project_id=project.id,
+        )
+
+        self.event2 = self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'environment': 'production',
+                'fingerprint': ['group_1'],
+                'timestamp': min_ago
+            },
+            project_id=project.id,
+        )
+
+        self.group = Group.objects.first()
+
+    def test_simple(self):
+        url = u'/api/0/issues/{}/events/latest/'.format(self.group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(self.event2.id)
diff --git a/tests/sentry/api/endpoints/test_group_events_oldest.py b/tests/sentry/api/endpoints/test_group_events_oldest.py
new file mode 100644
index 0000000000..5c1a967e13
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_events_oldest.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+import six
+
+from datetime import timedelta
+from django.utils import timezone
+
+from sentry.models import Group
+from sentry.testutils import APITestCase
+
+
+class GroupEventsOldestTest(APITestCase):
+    def setUp(self):
+        super(GroupEventsOldestTest, self).setUp()
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        two_min_ago = (timezone.now() - timedelta(minutes=2)).isoformat()[:19]
+
+        self.event1 = self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'environment': 'staging',
+                'fingerprint': ['group_1'],
+                'timestamp': two_min_ago
+            },
+            project_id=project.id,
+        )
+
+        self.event2 = self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'environment': 'production',
+                'fingerprint': ['group_1'],
+                'timestamp': min_ago
+            },
+            project_id=project.id,
+        )
+
+        self.group = Group.objects.first()
+
+    def test_simple(self):
+        url = u'/api/0/issues/{}/events/oldest/'.format(self.group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(self.event1.id)
diff --git a/tests/sentry/api/endpoints/test_project_event_details.py b/tests/sentry/api/endpoints/test_project_event_details.py
new file mode 100644
index 0000000000..92c88ea152
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_event_details.py
@@ -0,0 +1,101 @@
+from __future__ import absolute_import
+
+import six
+
+from datetime import timedelta
+from django.utils import timezone
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class ProjectEventDetailsTest(APITestCase):
+    def setUp(self):
+        super(ProjectEventDetailsTest, self).setUp()
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        one_min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        two_min_ago = (timezone.now() - timedelta(minutes=2)).isoformat()[:19]
+        three_min_ago = (timezone.now() - timedelta(minutes=3)).isoformat()[:19]
+
+        self.prev_event = self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'timestamp': three_min_ago,
+                'fingerprint': ['group-1']
+            },
+            project_id=project.id
+        )
+        self.cur_event = self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'timestamp': two_min_ago,
+                'fingerprint': ['group-1']
+            },
+            project_id=project.id
+        )
+        self.next_event = self.store_event(
+            data={
+                'event_id': 'c' * 32,
+                'timestamp': one_min_ago,
+                'fingerprint': ['group-1'],
+                'environment': 'production',
+                'tags': {'environment': 'production'}
+            },
+            project_id=project.id
+        )
+
+    def test_simple(self):
+        url = reverse(
+            'sentry-api-0-project-event-details',
+            kwargs={
+                'event_id': self.cur_event.event_id,
+                'project_slug': self.cur_event.project.slug,
+                'organization_slug': self.cur_event.project.organization.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(self.cur_event.id)
+        assert response.data['nextEventID'] == six.text_type(self.next_event.event_id)
+        assert response.data['previousEventID'] == six.text_type(self.prev_event.event_id)
+        assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
+
+        # Same event can be looked up by primary key
+        url = reverse(
+            'sentry-api-0-project-event-details',
+            kwargs={
+                'event_id': self.cur_event.id,
+                'project_slug': self.cur_event.project.slug,
+                'organization_slug': self.cur_event.project.organization.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(self.cur_event.id)
+        assert response.data['nextEventID'] == six.text_type(self.next_event.event_id)
+        assert response.data['previousEventID'] == six.text_type(self.prev_event.event_id)
+        assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
+
+    def test_prev_has_no_prev(self):
+        # Test that the "previous" event does not itself have a "previousEventID"
+        # pointing back to the current event. i.e. test that there is not a redirect
+        # loop between next and previous events that occur within the same second.
+
+        url = reverse(
+            'sentry-api-0-project-event-details',
+            kwargs={
+                'event_id': self.prev_event.event_id,
+                'project_slug': self.prev_event.project.slug,
+                'organization_slug': self.prev_event.project.organization.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(self.prev_event.id)
+        assert response.data['previousEventID'] is None
+        assert response.data['nextEventID'] == self.cur_event.event_id
+        assert response.data['groupID'] == six.text_type(self.prev_event.group.id)
diff --git a/tests/snuba/api/endpoints/test_group_events_latest.py b/tests/snuba/api/endpoints/test_group_events_latest.py
index f40b8f67e0..c6c798d2a6 100644
--- a/tests/snuba/api/endpoints/test_group_events_latest.py
+++ b/tests/snuba/api/endpoints/test_group_events_latest.py
@@ -41,21 +41,18 @@ class GroupEventsLatestTest(APITestCase, SnubaTestCase):
 
         self.group = Group.objects.first()
 
-    def test_simple(self):
+    def test_snuba_no_environment(self):
+        options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/latest/'.format(self.group.id)
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
-        assert response.data['id'] == six.text_type(self.event2.id)
-
-    def test_snuba_no_environment(self):
-        options.set('snuba.events-queries.enabled', True)
-        self.test_simple()
+        assert response.data['id'] == six.text_type(self.event2.event_id)
 
-    def test_environment(self):
+    def test_snuba_environment(self):
         options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/latest/'.format(self.group.id)
         response = self.client.get(url, format='json', data={'environment': ['production']})
 
         assert response.status_code == 200
-        assert response.data['id'] == six.text_type(self.event2.id)
+        assert response.data['id'] == six.text_type(self.event2.event_id)
diff --git a/tests/snuba/api/endpoints/test_group_events_oldest.py b/tests/snuba/api/endpoints/test_group_events_oldest.py
index 81e4977ce6..fda237ea1d 100644
--- a/tests/snuba/api/endpoints/test_group_events_oldest.py
+++ b/tests/snuba/api/endpoints/test_group_events_oldest.py
@@ -41,21 +41,18 @@ class GroupEventsOldestTest(APITestCase, SnubaTestCase):
 
         self.group = Group.objects.first()
 
-    def test_simple(self):
+    def test_snuba_no_environment(self):
+        options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/oldest/'.format(self.group.id)
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
-        assert response.data['id'] == six.text_type(self.event1.id)
-
-    def test_snuba_no_environment(self):
-        options.set('snuba.events-queries.enabled', True)
-        self.test_simple()
+        assert response.data['id'] == six.text_type(self.event1.event_id)
 
-    def test_environment(self):
+    def test_snuba_environment(self):
         options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/oldest/'.format(self.group.id)
         response = self.client.get(url, format='json', data={'environment': ['production']})
 
         assert response.status_code == 200
-        assert response.data['id'] == six.text_type(self.event2.id)
+        assert response.data['id'] == six.text_type(self.event2.event_id)
diff --git a/tests/snuba/api/endpoints/test_project_event_details.py b/tests/snuba/api/endpoints/test_project_event_details.py
index 1bd18df6ac..f94323de65 100644
--- a/tests/snuba/api/endpoints/test_project_event_details.py
+++ b/tests/snuba/api/endpoints/test_project_event_details.py
@@ -46,61 +46,6 @@ class ProjectEventDetailsTest(APITestCase, SnubaTestCase):
             project_id=project.id
         )
 
-    def test_simple(self):
-        url = reverse(
-            'sentry-api-0-project-event-details',
-            kwargs={
-                'event_id': self.cur_event.event_id,
-                'project_slug': self.cur_event.project.slug,
-                'organization_slug': self.cur_event.project.organization.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(self.cur_event.id)
-        assert response.data['nextEventID'] == six.text_type(self.next_event.event_id)
-        assert response.data['previousEventID'] == six.text_type(self.prev_event.event_id)
-        assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
-
-        # Same event can be looked up by primary key
-        url = reverse(
-            'sentry-api-0-project-event-details',
-            kwargs={
-                'event_id': self.cur_event.id,
-                'project_slug': self.cur_event.project.slug,
-                'organization_slug': self.cur_event.project.organization.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(self.cur_event.id)
-        assert response.data['nextEventID'] == six.text_type(self.next_event.event_id)
-        assert response.data['previousEventID'] == six.text_type(self.prev_event.event_id)
-        assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
-
-    def test_prev_has_no_prev(self):
-        # Test that the "previous" event does not itself have a "previousEventID"
-        # pointing back to the current event. i.e. test that there is not a redirect
-        # loop between next and previous events that occur within the same second.
-
-        url = reverse(
-            'sentry-api-0-project-event-details',
-            kwargs={
-                'event_id': self.prev_event.event_id,
-                'project_slug': self.prev_event.project.slug,
-                'organization_slug': self.prev_event.project.organization.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(self.prev_event.id)
-        assert response.data['previousEventID'] is None
-        assert response.data['nextEventID'] == self.cur_event.event_id
-        assert response.data['groupID'] == six.text_type(self.prev_event.group.id)
-
     def test_snuba(self):
         options.set('snuba.events-queries.enabled', True)
         url = reverse(
