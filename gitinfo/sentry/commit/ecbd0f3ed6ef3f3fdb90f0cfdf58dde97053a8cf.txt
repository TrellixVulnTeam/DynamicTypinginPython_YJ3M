commit ecbd0f3ed6ef3f3fdb90f0cfdf58dde97053a8cf
Author: tracehelms <tracehelms@gmail.com>
Date:   Fri Jul 10 11:45:29 2015 -0600

    Refactor SearchBar to get query from Stream
    
    Previously SearchBar was tracking its own state and this created certain
    edge cases where the SearchBar wouldn't reset to default. Moving the
    state logic up to Stream lets us handle the behavior better.

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 82143a8822..6142881daa 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -45,7 +45,9 @@ var Stream = React.createClass({
       realtimeActive: true,
       pageLinks: '',
       loading: true,
-      error: false
+      error: false,
+      query: this.props.defaultQuery,
+      filter: {}
     };
   },
 
@@ -75,8 +77,24 @@ var Stream = React.createClass({
   },
 
   routeDidChange() {
-    this._poller.disable();
-    this.fetchData();
+    var currentQuery = this.context.router.getCurrentQuery();
+
+    var filter = {};
+    if (currentQuery.bookmarks) {
+      filter = { bookmarks: "1" };
+    } else if (currentQuery.assigned) {
+      filter = { assigned: "1" };
+    }
+
+    var query = (currentQuery.hasOwnProperty("query")) ? currentQuery.query : this.props.defaultQuery;
+
+    this.setState({
+      filter: filter,
+      query: query
+    }, function() {
+      this._poller.disable();
+      this.fetchData();
+    });
   },
 
   componentWillUnmount() {
@@ -181,6 +199,39 @@ var Stream = React.createClass({
     router.transitionTo('stream', params, queryParams);
   },
 
+  onSearch() {
+    this.transitionTo();
+  },
+
+  onQueryChange(query) {
+    this.setState({
+      query: query
+    });
+  },
+
+  onFilterChange(filter) {
+    this.setState({
+      filter: filter
+    }, function() {
+      this.transitionTo();
+    });
+  },
+
+  transitionTo() {
+    var router = this.context.router;
+    var queryParams = {};
+
+    for (var prop in this.state.filter) {
+      queryParams[prop] = this.state.filter[prop];
+    }
+
+    if (this.state.query !== this.props.defaultQuery) {
+      queryParams.query = this.state.query;
+    }
+
+    router.transitionTo('stream', router.getCurrentParams(), queryParams);
+  },
+
   renderGroupNodes(ids, statsPeriod) {
     var groupNodes = ids.map((id) => {
       return <StreamGroup key={id} id={id} statsPeriod={statsPeriod} />;
@@ -225,7 +276,7 @@ var Stream = React.createClass({
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
-    var query = this.props.defaultQuery;
+    var query = this.state.query;
 
     if (params.hasOwnProperty("query")) {
       query = params.query;
@@ -233,7 +284,10 @@ var Stream = React.createClass({
 
     return (
       <div>
-        <StreamFilters defaultQuery={query} />
+        <StreamFilters query={query}
+          onQueryChange={this.onQueryChange}
+          onFilterChange={this.onFilterChange}
+          onSearch={this.onSearch} />
         <div className="group-header">
           <StreamActions
             orgId={params.orgId}
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 80643f084c..08ec615b56 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -15,15 +15,17 @@ var StreamFilters = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: ""
+      filter: "",
+      query: "",
+      onFilterChange: function() {},
+      onQueryChange: function() {},
+      onSearch: function() {}
     };
   },
 
   getInitialState() {
     return {
-      activeButton: null,
-      query: this.props.defaultQuery,
-      filter: ""
+      activeButton: null
     };
   },
 
@@ -56,34 +58,8 @@ var StreamFilters = React.createClass({
     return activeButton;
   },
 
-  onSearch(query) {
-    this.setState({
-      query: query
-    }, function() {
-      this.transitionTo();
-    });
-  },
-
   onFilterChange(filter) {
-    this.setState({
-      filter: filter
-    }, function() {
-      this.transitionTo();
-    });
-  },
-
-  transitionTo() {
-    var router = this.context.router;
-    var queryParams = {};
-
-    for (var prop in this.state.filter) {
-      queryParams[prop] = this.state.filter[prop];
-    }
-    if (this.state.query !== this.props.defaultQuery) {
-      queryParams.query = this.state.query;
-    }
-
-    router.transitionTo('stream', router.getCurrentParams(), queryParams);
+    this.props.onFilterChange(filter);
   },
 
   render() {
@@ -94,21 +70,23 @@ var StreamFilters = React.createClass({
           <div className="col-sm-4 primary-filters">
             <div className="btn-group btn-group-justified">
               <FilterSelectLink label="All Events"
-                                isActive={activeButton === 'all'}
-                                onSelect={this.onFilterChange.bind(this, {})}
-                                extraClass="btn-all-events" />
+                isActive={activeButton === 'all'}
+                onSelect={this.onFilterChange.bind(this, {})}
+                extraClass="btn-all-events" />
               <FilterSelectLink label="Bookmarks"
-                                isActive={activeButton === 'bookmarks'}
-                                onSelect={this.onFilterChange.bind(this, {bookmarks: "1"})}
-                                extraClass="btn-middle btn-bookmarks" />
+                isActive={activeButton === 'bookmarks'}
+                onSelect={this.onFilterChange.bind(this, {bookmarks: "1"})}
+                extraClass="btn-middle btn-bookmarks" />
               <FilterSelectLink label="Assigned"
-                                isActive={activeButton === 'assigned'}
-                                onSelect={this.onFilterChange.bind(this, {assigned: "1"})}
-                                extraClass="btn-assigned" />
+                isActive={activeButton === 'assigned'}
+                onSelect={this.onFilterChange.bind(this, {assigned: "1"})}
+                extraClass="btn-assigned" />
             </div>
           </div>
           <div className="col-sm-8">
-            <SearchBar onSearch={this.onSearch} defaultQuery={this.state.query} />
+            <SearchBar query={this.props.query}
+              onQueryChange={this.props.onQueryChange}
+              onSearch={this.props.onSearch} />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 08a6db5f1a..23100c4746 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -12,30 +12,27 @@ var SearchBar = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: "",
-      onSearch: function() {}
+      query: "",
+      onSearch: function() {},
+      onQueryChange: function() {}
     };
   },
 
   getInitialState() {
     return {
-      dropdownVisible: false,
-      query: this.props.defaultQuery
+      dropdownVisible: false
     };
   },
 
   onSubmit(event) {
     event.preventDefault();
     this.refs.searchInput.getDOMNode().blur();
-    this.props.onSearch(this.state.query);
+    this.props.onSearch();
   },
 
   clearSearch() {
-    this.setState({
-      query: ''
-    }, function() {
-      this.props.onSearch(this.state.query);
-    });
+    this.props.onQueryChange("");
+    this.props.onSearch();
   },
 
   onQueryFocus() {
@@ -51,9 +48,7 @@ var SearchBar = React.createClass({
   },
 
   onQueryChange(event) {
-    this.setState({
-      query: event.target.value
-    });
+    this.props.onQueryChange(event.target.value);
   },
 
   render() {
@@ -62,16 +57,16 @@ var SearchBar = React.createClass({
         <form className="form-horizontal" ref="searchForm" onSubmit={this.onSubmit}>
           <div>
             <input type="text" className="search-input form-control"
-                   placeholder="Search for events, users, tags, and everything else."
-                   name="query"
-                   ref="searchInput"
-                   autoComplete="off"
-                   value={this.state.query}
-                   onFocus={this.onQueryFocus}
-                   onBlur={this.onQueryBlur}
-                   onChange={this.onQueryChange} />
+              placeholder="Search for events, users, tags, and everything else."
+              name="query"
+              ref="searchInput"
+              autoComplete="off"
+              value={this.props.query}
+              onFocus={this.onQueryFocus}
+              onBlur={this.onQueryBlur}
+              onChange={this.onQueryChange} />
             <span className="icon-search" />
-            {this.state.query !== '' &&
+            {this.props.query !== '' &&
               <div>
                 <a className="search-save-search btn btn-xs btn-default">Save</a>
                 <a className="search-clear-form" onClick={this.clearSearch}>
diff --git a/tests/js/spec/views/stream/filters.spec.js b/tests/js/spec/views/stream/filters.spec.js
deleted file mode 100644
index 3342e05583..0000000000
--- a/tests/js/spec/views/stream/filters.spec.js
+++ /dev/null
@@ -1,76 +0,0 @@
-var React = require("react/addons");
-
-var FilterSelectLink = require("app/views/stream/filterSelectLink");
-var SearchBar = require("app/views/stream/searchBar");
-var StreamFilters = require("app/views/stream/filters");
-var stubReactComponents = require("../../../helpers/stubReactComponent");
-var stubRouterContext = require("../../../helpers/stubRouterContext");
-
-var TestUtils = React.addons.TestUtils;
-
-describe("StreamFilters", function() {
-
-  beforeEach(function() {
-    this.sandbox = sinon.sandbox.create();
-    stubReactComponents(this.sandbox, [FilterSelectLink, SearchBar]);
-  });
-
-  afterEach(function() {
-    this.sandbox.restore();
-  });
-
-  describe("transitionTo()", function() {
-
-    it("calls router.transitionTo() with correct params", function(){
-      var stubTransitionTo = this.sandbox.spy();
-      var Element = stubRouterContext(StreamFilters, {}, {
-        getCurrentParams() {
-          return {};
-        },
-        getCurrentQuery() {
-          return {};
-        },
-        transitionTo: stubTransitionTo
-      });
-      var wrapper = TestUtils.renderIntoDocument(<Element />);
-
-      wrapper.refs.stub.setState({
-        filter: {
-          bookmarks: "1"
-        },
-        query: "is:resolved"
-      });
-
-      wrapper.refs.stub.transitionTo();
-      var expected = {
-        bookmarks: "1",
-        query: "is:resolved"
-      };
-
-      expect(stubTransitionTo.calledWith("stream", {}, expected)).to.be.true;
-    });
-
-    it("omits query if equal to the default query", function(){
-      var stubTransitionTo = this.sandbox.spy();
-      var Element = stubRouterContext(StreamFilters, {
-        defaultQuery: {
-          query: "is:unresolved"
-        }
-      }, {
-        getCurrentParams() {
-          return {};
-        },
-        getCurrentQuery() {
-          return {};
-        },
-        transitionTo: stubTransitionTo
-      });
-      var wrapper = TestUtils.renderIntoDocument(<Element />);
-
-      wrapper.refs.stub.transitionTo();
-      expect(stubTransitionTo.calledWith("stream", {}, {})).to.be.true;
-    });
-
-  });
-
-});
diff --git a/tests/js/spec/views/stream/searchBar.spec.js b/tests/js/spec/views/stream/searchBar.spec.js
index 542cfdccb5..e3c31ad083 100644
--- a/tests/js/spec/views/stream/searchBar.spec.js
+++ b/tests/js/spec/views/stream/searchBar.spec.js
@@ -19,28 +19,20 @@ describe("SearchBar", function() {
     this.sandbox.restore();
   });
 
-  describe("getInitialState()", function() {
-
-    it("inherits the query state from props", function() {
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar defaultQuery={"is:unresolved"} />);
-      var expected = wrapper.state.query; expect(expected).to.be.eql("is:unresolved");
-    });
-
-  });
-
   describe("clearSearch()", function() {
 
     it("clears the query", function() {
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar defaultQuery={"is:unresolved"} />);
+      var stubbedOnQueryChange = this.sandbox.spy();
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar query={"is:unresolved"} onQueryChange={stubbedOnQueryChange} />);
       wrapper.clearSearch();
-      expect(wrapper.state.query).to.eql("");
+      expect(stubbedOnQueryChange.calledWith("")).to.be.true;
     });
 
     it("calls onSearch()", function() {
       var stubbedOnSearch = this.sandbox.spy();
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar defaultQuery={"is:unresolved"} onSearch={stubbedOnSearch}/>);
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar query={"is:unresolved"} onSearch={stubbedOnSearch}/>);
       wrapper.clearSearch();
-      expect(stubbedOnSearch.calledWith("")).to.be.true;
+      expect(stubbedOnSearch.called).to.be.true;
     });
 
   });
@@ -53,6 +45,7 @@ describe("SearchBar", function() {
       wrapper.onQueryFocus();
       expect(wrapper.state.dropdownVisible).to.be.true;
     });
+
   });
 
   describe("onQueryBlur()", function() {
@@ -67,41 +60,27 @@ describe("SearchBar", function() {
 
   });
 
-  describe("onQueryChange()", function() {
-
-    it("sets the query", function() {
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar />);
-      wrapper.state.query = "is:resolved";
-
-      wrapper.onQueryChange({ target: { value: "java" } });
-      expect(wrapper.state.query).to.eql("java");
-    });
-
-  });
-
   describe("render()", function() {
 
-    it("invokes onSearch() when search input changes", function() {
+    it("invokes onSearch() when submitting the form", function() {
       var stubOnSearch = this.sandbox.spy();
       var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} />);
 
-      TestUtils.Simulate.change(wrapper.refs.searchInput, { target: { value: "java" } });
       TestUtils.Simulate.submit(wrapper.refs.searchForm, { preventDefault() {} });
 
-      expect(stubOnSearch.calledWith("java")).to.be.true;
+      expect(stubOnSearch.called).to.be.true;
     });
 
     it("invokes onSearch() when search is cleared", function() {
       var stubOnSearch = this.sandbox.spy();
-      var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} />);
-      wrapper.setState({
-        query: "this-is-not-empty"
-      });
+      var stubOnQueryChange = this.sandbox.spy();
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} query={"not blank"} onQueryChange={stubOnQueryChange}/>);
 
       var cancelButton = findWithClass(wrapper, "search-clear-form");
       TestUtils.Simulate.click(cancelButton);
 
-      expect(stubOnSearch.calledWith("")).to.be.true;
+      expect(stubOnSearch.called).to.be.true;
+      expect(stubOnQueryChange.calledWith("")).to.be.true;
     });
 
   });
