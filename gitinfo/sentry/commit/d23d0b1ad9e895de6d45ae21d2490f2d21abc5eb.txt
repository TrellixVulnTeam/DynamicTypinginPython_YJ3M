commit d23d0b1ad9e895de6d45ae21d2490f2d21abc5eb
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Wed Mar 11 16:04:05 2020 -0700

    feat(IntegrationDirectory): Sort integrations by popularity (#17565)
    
    Objective
    Integrations in the integration directory should be sorted by their popularity (weight). However, we want to A/B test this change so we should start by hiding the new sorting behind a local storage variable SORT_INTEGRATIONS_BY_WEIGHT. If that value is a ”1”, the user should see the new sorting. Otherwise, they see the old alphabetical ordering.
    
    These weights should be hardcoded in the application itself. We can store this in a map where the key is the integration slug and the value is an integer and represents the weight. The weights should reflect the relative popularity of each integration. Please note this sorting should not override the sorting of installed integrations on top. That should be the same. Integrations of the same weight should be sorted alphabetically.

diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 1b8eb435e7..4ea43a91cd 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -12,8 +12,9 @@ import {
 import {Hooks} from 'app/types/hooks';
 import HookStore from 'app/stores/hookStore';
 
-const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'INTEGRATION_ANALYTICS_SESSION';
-const USE_INTEGRATION_DIRECTORY = 'USE_INTEGRATION_DIRECTORY';
+const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'INTEGRATION_ANALYTICS_SESSION' as const;
+const USE_INTEGRATION_DIRECTORY = 'USE_INTEGRATION_DIRECTORY' as const;
+const SORT_INTEGRATIONS_BY_WEIGHT = 'SORT_INTEGRATIONS_BY_WEIGHT' as const;
 
 export const startAnalyticsSession = () => {
   const sessionId = uniqueId();
@@ -39,6 +40,9 @@ export const isIntegrationDirectoryActive = (organization?: Organization) => {
   }
 };
 
+export const getSortIntegrationsByWeightActive = () =>
+  localStorage.getItem(SORT_INTEGRATIONS_BY_WEIGHT) === '1';
+
 export type SingleIntegrationEvent = {
   eventKey:
     | 'integrations.install_modal_opened'
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
index fe3b8aa04f..d3d07e35d1 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
@@ -2,8 +2,53 @@ export const INSTALLED = 'Installed' as const;
 export const NOT_INSTALLED = 'Not Installed' as const;
 export const PENDING = 'Pending' as const;
 
-export const colors = {
+export const COLORS = {
   [INSTALLED]: 'success',
   [NOT_INSTALLED]: 'gray2',
   [PENDING]: 'yellowOrange',
-};
+} as const;
+
+/**
+ * Integrations in the integration directory should be sorted by their popularity (weight). The weights should reflect the relative popularity of each integration are hardcoded.
+ */
+
+export const POPULARITY_WEIGHT: {
+  [key: string]: number;
+} = {
+  // First-party-integrations
+  slack: 50,
+  github: 20,
+  jira: 10,
+  bitbucket: 10,
+  gitlab: 10,
+  pagerduty: 10,
+  vsts: 10,
+  jira_server: 10,
+  bitbucket_server: 10,
+  github_enterprise: 10,
+
+  // Sentry-apps
+  clubhouse: 9,
+  rookout: 9,
+  clickup: 9,
+  amixir: 9,
+  split: 9,
+
+  // Plugins
+  webhooks: 10,
+  asana: 8,
+  trello: 8,
+  heroku: 8,
+  pivotal: 8,
+  twilio: 8,
+  pushover: 5,
+  redmine: 5,
+  phabricator: 5,
+  opsgenie: 5,
+  teamwork: 5,
+  victorops: 5,
+  sessionstack: 5,
+  segment: 1,
+  'amazon-sqs': 1,
+  splunk: 1,
+} as const;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 3ac69d30f8..6d3ac43f09 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -16,6 +16,7 @@ import {Panel, PanelBody} from 'app/components/panels';
 import {
   trackIntegrationEvent,
   getSentryAppInstallStatus,
+  getSortIntegrationsByWeightActive,
 } from 'app/utils/integrationUtil';
 import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
@@ -28,6 +29,7 @@ import SearchInput from 'app/components/forms/searchInput';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
 import space from 'app/styles/space';
 
+import {POPULARITY_WEIGHT} from './constants';
 import IntegrationRow from './integrationRow';
 
 type AppOrProviderOrPlugin = SentryApp | IntegrationProvider | PluginWithProjectList;
@@ -188,22 +190,47 @@ export class OrganizationIntegrations extends AsyncComponent<
   //Returns 0 if uninstalled, 1 if pending, and 2 if installed
   getInstallValue(integration: AppOrProviderOrPlugin) {
     const {integrations} = this.state;
-    if (isSentryApp(integration)) {
-      const install = this.getAppInstall(integration);
-      if (install) {
-        return install.status === 'pending' ? 1 : 2;
-      }
-      return 0;
-    } else if (isPlugin(integration)) {
+
+    if (isPlugin(integration)) {
       return integration.projectList.length > 0 ? 2 : 0;
     }
-    return integrations.find(i => i.provider.key === integration.key) ? 2 : 0;
+
+    if (!isSentryApp(integration)) {
+      return integrations.find(i => i.provider.key === integration.key) ? 2 : 0;
+    }
+
+    const install = this.getAppInstall(integration);
+
+    if (install) {
+      return install.status === 'pending' ? 1 : 2;
+    }
+
+    return 0;
   }
 
+  getPopularityWeight = (integration: AppOrProviderOrPlugin) =>
+    POPULARITY_WEIGHT[integration.slug] ?? 1;
+
+  sortByName = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) =>
+    a.name.localeCompare(b.name);
+
+  sortByPopularity = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) => {
+    const weightA = this.getPopularityWeight(a);
+    const weightB = this.getPopularityWeight(b);
+    return weightB - weightA;
+  };
+
+  sortByInstalled = (a: AppOrProviderOrPlugin, b: AppOrProviderOrPlugin) =>
+    this.getInstallValue(b) - this.getInstallValue(a);
+
   sortIntegrations(integrations: AppOrProviderOrPlugin[]) {
-    return integrations
-      .sort((a, b) => a.name.localeCompare(b.name))
-      .sort((a, b) => this.getInstallValue(b) - this.getInstallValue(a));
+    if (getSortIntegrationsByWeightActive()) {
+      return integrations
+        .sort(this.sortByName)
+        .sort(this.sortByPopularity)
+        .sort(this.sortByInstalled);
+    }
+    return integrations.sort(this.sortByName).sort(this.sortByInstalled);
   }
 
   async componentDidUpdate(_, prevState: State) {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx
index 2b8434cfd1..acddad69c9 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx
@@ -7,7 +7,7 @@ import {t} from 'app/locale';
 import space from 'app/styles/space';
 import {IntegrationInstallationStatus} from 'app/types';
 
-import {colors} from './constants';
+import {COLORS} from './constants';
 
 type StatusProps = {
   status: IntegrationInstallationStatus;
@@ -22,12 +22,12 @@ const IntegrationStatus = styled((props: StatusProps) => {
   const {status, ...p} = props;
   return (
     <StatusWrapper>
-      <CircleIndicator size={6} color={theme[colors[status]]} />
+      <CircleIndicator size={6} color={theme[COLORS[status]]} />
       <div {...p}>{`${t(status)}`}</div>
     </StatusWrapper>
   );
 })`
-  color: ${(props: StatusProps) => theme[colors[props.status]]};
+  color: ${p => theme[COLORS[p.status]]};
   margin-left: ${space(0.5)};
   font-weight: light;
   margin-right: ${space(0.75)};
