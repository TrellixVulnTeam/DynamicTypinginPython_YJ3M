commit 0eba0048b7b87cbe4fdeb9628b1d877bf4c611d2
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Aug 6 12:43:07 2010 -0700

    trunk: Add further test cases

diff --git a/djangodblog/tests/models.py b/djangodblog/tests/models.py
index 0a1fd20104..fdcc7ab991 100644
--- a/djangodblog/tests/models.py
+++ b/djangodblog/tests/models.py
@@ -6,3 +6,10 @@ class JSONDictModel(models.Model):
     
     def __unicode__(self):
         return unicode(self.data)
+
+class DuplicateKeyModel(models.Model):
+    foo = models.IntegerField(unique=True, default=1)
+    
+    def __unicode__(self):
+        return unicode(self.foo)
+    
\ No newline at end of file
diff --git a/djangodblog/tests/tests.py b/djangodblog/tests/tests.py
index c2dd9d3b1f..d98f33e02d 100644
--- a/djangodblog/tests/tests.py
+++ b/djangodblog/tests/tests.py
@@ -8,12 +8,24 @@ from django.utils.encoding import smart_unicode
 
 from djangodblog.middleware import DBLogMiddleware
 from djangodblog.models import Error, ErrorBatch
-from djangodblog.tests.models import JSONDictModel
+from djangodblog.tests.models import JSONDictModel, DuplicateKeyModel
 from djangodblog import settings
 
 import logging
 import sys
 
+def conditional_on_module(module):
+    def wrapped(func):
+        def inner(self, *args, **kwargs):
+            try:
+                __import__(module)
+            except ImportError:
+                print "Skipping test: %s.%s" % (self.__class__.__name__, func.__name__)
+            else:
+                return func(self, *args, **kwargs)
+        return inner
+    return wrapped
+
 class RequestFactory(Client):
     # Used to generate request objects.
     def request(self, **request):
@@ -51,6 +63,8 @@ class DBLogTestCase(TestCase):
         self._handlers = None
         self._level = None
         settings.DEBUG = False
+        self.logger = logging.getLogger('dblog')
+        self.logger.addHandler(logging.StreamHandler())
     
     def tearDown(self):
         self.tearDownHandler()
@@ -390,6 +404,30 @@ class DBLogTestCase(TestCase):
 
         settings.THRASHING_LIMIT = prev
 
+    def testDatabaseError(self):
+        from django.db import connection
+        
+        try:
+            cursor = connection.cursor()
+            cursor.execute("select foo")
+        except:
+            got_request_exception.send(sender=self.__class__)
+
+        self.assertEquals(Error.objects.count(), 1)
+        self.assertEquals(ErrorBatch.objects.count(), 1)
+
+    def testIntegrityError(self):
+        DuplicateKeyModel.objects.create()
+        try:
+            DuplicateKeyModel.objects.create()
+        except:
+            got_request_exception.send(sender=self.__class__)
+        else:
+            self.fail('Excepted an IntegrityError to be raised.')
+
+        self.assertEquals(Error.objects.count(), 1)
+        self.assertEquals(ErrorBatch.objects.count(), 1)
+
 class DBLogViewsTest(TestCase):
     urls = 'djangodblog.tests.urls'
     
diff --git a/runtests.py b/runtests.py
index 624158a893..f59c202265 100644
--- a/runtests.py
+++ b/runtests.py
@@ -9,6 +9,8 @@ if not settings.configured:
     settings.configure(
         DATABASE_ENGINE='sqlite3',
         INSTALLED_APPS=[
+            # Included to fix Disqus' test Django which solves IntegrityError case
+            'django.contrib.contenttypes',
             'djangodblog',
             # No fucking idea why I have to do this
             'djangodblog.tests',
