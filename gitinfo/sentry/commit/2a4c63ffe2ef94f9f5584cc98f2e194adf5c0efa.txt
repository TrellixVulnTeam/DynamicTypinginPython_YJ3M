commit 2a4c63ffe2ef94f9f5584cc98f2e194adf5c0efa
Author: Mark Story <mark@sentry.io>
Date:   Tue Apr 14 14:22:17 2020 -0400

    fix(discover) Fix apdex() getting the incorrect number of parameters (#18248)
    
    Functions with only a single scalar parameter should not update the
    'refinement' slot as that would make it a 3 parameter function.
    
    When going from a function that takes 2 parameters to one that takes
    fewer we need to remove the additional parameters to prevent invalid
    results.
    
    Eagerly generating the fieldOptions helps fix a state race where core
    fields get marked as tags.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 76d5a85ee7..94354bfa61 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -52,7 +52,7 @@ class ColumnEditCollection extends React.Component<Props, State> {
     draggingTargetIndex: void 0,
     left: void 0,
     top: void 0,
-    fieldOptions: {},
+    fieldOptions: this.generateFieldOptions(),
   };
 
   componentDidMount() {
@@ -68,7 +68,6 @@ class ColumnEditCollection extends React.Component<Props, State> {
 
       document.body.appendChild(this.portal);
     }
-    this.syncFields();
   }
 
   componentDidUpdate(prevProps: Props) {
@@ -88,7 +87,7 @@ class ColumnEditCollection extends React.Component<Props, State> {
   portal: HTMLElement | null = null;
   dragGhostRef = React.createRef<HTMLDivElement>();
 
-  syncFields() {
+  generateFieldOptions() {
     const {organization, tagKeys} = this.props;
 
     let fields = Object.keys(FIELDS);
@@ -148,7 +147,11 @@ class ColumnEditCollection extends React.Component<Props, State> {
       });
     }
 
-    this.setState({fieldOptions});
+    return fieldOptions;
+  }
+
+  syncFields() {
+    this.setState({fieldOptions: this.generateFieldOptions()});
   }
 
   keyForColumn(column: Column, isGhost: boolean): string {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
index 1b5dfef4be..6668352611 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
@@ -98,8 +98,12 @@ class ColumnEditRow extends React.Component<Props> {
         }
       });
 
-      if (column.kind === 'function' && value.meta.parameters.length === 0) {
-        column.function = [column.function[0], '', undefined];
+      if (column.kind === 'function') {
+        if (value.meta.parameters.length === 0) {
+          column.function = [column.function[0], '', undefined];
+        } else if (value.meta.parameters.length === 1) {
+          column.function[2] = undefined;
+        }
       }
     }
 
@@ -114,6 +118,14 @@ class ColumnEditRow extends React.Component<Props> {
     this.triggerChange(newColumn);
   };
 
+  handleScalarParameterChange = (value: string) => {
+    const newColumn = cloneDeep(this.props.column);
+    if (newColumn.kind === 'function') {
+      newColumn.function[1] = value;
+    }
+    this.triggerChange(newColumn);
+  };
+
   handleRefinementChange = (value: string) => {
     const newColumn = cloneDeep(this.props.column);
     if (newColumn.kind === 'function') {
@@ -162,8 +174,7 @@ class ColumnEditRow extends React.Component<Props> {
   }
 
   getFieldData() {
-    let field: FieldValue | null = null,
-      fieldParameter: FieldValue | null = null;
+    let field: FieldValue | null = null;
 
     const {column} = this.props;
     let {fieldOptions} = this.props;
@@ -172,28 +183,27 @@ class ColumnEditRow extends React.Component<Props> {
       const funcName = `function:${column.function[0]}`;
       if (fieldOptions[funcName] !== undefined) {
         field = fieldOptions[funcName].value;
-        // TODO move this closer to where it is used.
-        fieldParameter = this.getFieldOrTagValue(column.function[1]);
       }
     }
+
     if (column.kind === 'field') {
       field = this.getFieldOrTagValue(column.field);
+      fieldOptions = this.appendFieldIfUnknown(fieldOptions, field);
     }
 
-    // If our current field, or columnParameter is a virtual tag, add it to the option list.
-    fieldOptions = this.appendFieldIfUnknown(fieldOptions, field);
-    fieldOptions = this.appendFieldIfUnknown(fieldOptions, fieldParameter);
-
     let parameterDescriptions: ParameterDescription[] = [];
     // Generate options and values for each parameter.
     if (
       field &&
       field.kind === FieldValueKind.FUNCTION &&
-      field.meta.parameters.length > 0
+      field.meta.parameters.length > 0 &&
+      column.kind === 'function'
     ) {
       parameterDescriptions = field.meta.parameters.map(
-        (param): ParameterDescription => {
+        (param, index: number): ParameterDescription => {
           if (param.kind === 'column') {
+            const fieldParameter = this.getFieldOrTagValue(column.function[1]);
+            fieldOptions = this.appendFieldIfUnknown(fieldOptions, fieldParameter);
             return {
               kind: 'column',
               value: fieldParameter,
@@ -206,10 +216,11 @@ class ColumnEditRow extends React.Component<Props> {
               ),
             };
           }
+
           return {
             kind: 'value',
             value:
-              (column.kind === 'function' && column.function[2]) ||
+              (column.kind === 'function' && column.function[index + 1]) ||
               param.defaultValue ||
               '',
             dataType: param.dataType,
@@ -218,7 +229,6 @@ class ColumnEditRow extends React.Component<Props> {
         }
       );
     }
-
     return {field, fieldOptions, parameterDescriptions};
   }
 
@@ -241,7 +251,7 @@ class ColumnEditRow extends React.Component<Props> {
 
   renderParameterInputs(parameters: ParameterDescription[]): React.ReactNode[] {
     const {gridColumns} = this.props;
-    const inputs = parameters.map((descriptor: ParameterDescription) => {
+    const inputs = parameters.map((descriptor: ParameterDescription, index: number) => {
       if (descriptor.kind === 'column' && descriptor.options.length > 0) {
         return (
           <SelectControl
@@ -256,10 +266,13 @@ class ColumnEditRow extends React.Component<Props> {
         );
       }
       if (descriptor.kind === 'value') {
+        const handler =
+          index === 0 ? this.handleScalarParameterChange : this.handleRefinementChange;
+
         const inputProps = {
           required: descriptor.required,
           value: descriptor.value,
-          onUpdate: this.handleRefinementChange,
+          onUpdate: handler,
         };
         switch (descriptor.dataType) {
           case 'number':
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
index e973a70714..2a75c80976 100644
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
+++ b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
@@ -177,14 +177,18 @@ describe('EventsV2 -> ColumnEditModal', function() {
   });
 
   describe('function & column selection', function() {
-    const wrapper = mountModal(
-      {
-        columns: [columns[0]],
-        onApply: () => void 0,
-        tagKeys,
-      },
-      initialData
-    );
+    let onApply, wrapper;
+    beforeEach(function() {
+      onApply = jest.fn();
+      wrapper = mountModal(
+        {
+          columns: [columns[0]],
+          onApply,
+          tagKeys,
+        },
+        initialData
+      );
+    });
 
     it('restricts column choices', function() {
       selectByLabel(wrapper, 'avg(\u2026)', {name: 'field', at: 0, control: true});
@@ -216,6 +220,47 @@ describe('EventsV2 -> ColumnEditModal', function() {
       const refinement = wrapper.find('ColumnEditRow input[inputMode="numeric"]');
       expect(refinement.props().value).toBe('0.5');
     });
+
+    it('handles scalar field parameters', function() {
+      selectByLabel(wrapper, 'apdex(\u2026)', {name: 'field', at: 0, control: true});
+
+      // Parameter select should display and use the default value.
+      const field = wrapper.find('ColumnEditRow input[name="refinement"]');
+      expect(field.props().value).toBe('300');
+
+      // Trigger a blur and make sure the column is not wrong.
+      field.simulate('blur');
+
+      // Apply the changes so we can see the new columns.
+      wrapper.find('Button[priority="primary"]').simulate('click');
+      expect(onApply).toHaveBeenCalledWith([
+        {kind: 'function', function: ['apdex', '300', undefined]},
+      ]);
+    });
+
+    it('clears unused parameters', function() {
+      // Choose percentile, then apdex which has fewer parameters and different types.
+      selectByLabel(wrapper, 'percentile(\u2026)', {name: 'field', at: 0, control: true});
+      selectByLabel(wrapper, 'apdex(\u2026)', {name: 'field', at: 0, control: true});
+
+      // Apply the changes so we can see the new columns.
+      wrapper.find('Button[priority="primary"]').simulate('click');
+      expect(onApply).toHaveBeenCalledWith([
+        {kind: 'function', function: ['apdex', '300', undefined]},
+      ]);
+    });
+
+    it('clears all unused parameters', function() {
+      // Choose percentile, then error_rate which has no parameters.
+      selectByLabel(wrapper, 'percentile(\u2026)', {name: 'field', at: 0, control: true});
+      selectByLabel(wrapper, 'error_rate()', {name: 'field', at: 0, control: true});
+
+      // Apply the changes so we can see the new columns.
+      wrapper.find('Button[priority="primary"]').simulate('click');
+      expect(onApply).toHaveBeenCalledWith([
+        {kind: 'function', function: ['error_rate', '', undefined]},
+      ]);
+    });
   });
 
   describe('removing rows', function() {
