commit 1b617f1242b433c314e97ddc13577990690dd3f5
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 9 12:13:15 2016 -0800

    Move team settings to React

diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 05e8d2a34f..e00ab6a5c6 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -74,7 +74,6 @@ class TeamDetailsEndpoint(TeamEndpoint):
         return Response(context)
 
     @attach_scenarios([update_team_scenario])
-    @sudo_required
     def put(self, request, team):
         """
         Update a Team
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index ee497528d7..ab6a325159 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -41,10 +41,14 @@ export default class InputField extends FormField {
   }
 
   render() {
+    let className = 'control-group';
+    if (this.props.error) {
+      className += ' has-error';
+    }
     return (
-      <div className="control-group">
+      <div className={className}>
         <div className="controls">
-          <label>{this.props.label}</label>
+          <label className="control-label">{this.props.label}</label>
           {this.props.disabled && this.props.disabledReason &&
             <span className="disabled-indicator tip" title={this.props.disabledReason}>
               <span className="icon-question" />
@@ -59,6 +63,9 @@ export default class InputField extends FormField {
           {this.props.help &&
             <p className="help-block">{this.props.help}</p>
           }
+          {this.props.error &&
+            <p className="error">{this.props.error}</p>
+          }
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f5c25b4ef0..3845094e6b 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -39,6 +39,7 @@ import ReleaseNewEvents from './views/releaseNewEvents';
 import RouteNotFound from './views/routeNotFound';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
+import TeamSettings from './views/teamSettings';
 
 import errorHandler from './utils/errorHandler';
 
@@ -67,8 +68,9 @@ let routes = (
       <Route path="/organizations/:orgId/issues/assigned/" component={errorHandler(MyIssuesAssignedToMe)} />
       <Route path="/organizations/:orgId/issues/bookmarks/" component={errorHandler(MyIssuesBookmarked)} />
       <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
-      <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
       <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
+      <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
+      <Route path="/organizations/:orgId/teams/:teamId/settings/" component={errorHandler(TeamSettings)} />
 
       <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
         <IndexRoute component={errorHandler(Stream)} />
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
index dc90dda712..25b2666898 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
@@ -15,7 +15,6 @@ const AllTeamsList = React.createClass({
 
   render() {
     let {access, organization, openMembership} = this.props;
-    let urlPrefix = `${ConfigStore.get('urlPrefix')}/organizations/${organization.slug}`;
     let teamNodes = this.props.teamList.map((team, teamIdx) => {
       return (
         <AllTeamsRow
@@ -23,7 +22,6 @@ const AllTeamsList = React.createClass({
           team={team}
           organization={organization}
           openMembership={openMembership}
-          urlPrefix={urlPrefix}
           key={team.slug} />
       );
     });
@@ -38,6 +36,7 @@ const AllTeamsList = React.createClass({
       );
     }
 
+    let urlPrefix = `${ConfigStore.get('urlPrefix')}/organizations/${organization.slug}`;
     return tct('You don\'t have any teams for this organization yet. Get started by [link:creating your first team].', {
       root: <p />,
       link: <a href={`${urlPrefix}/teams/new/`} />
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
index 7fcc711859..3c5e76c039 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {Link} from 'react-router';
 
 import ApiMixin from '../../mixins/apiMixin';
 import AlertActions from '../../actions/alertActions';
@@ -75,7 +76,8 @@ const AllTeamsRow = React.createClass({
   },
 
   render() {
-    let {access, team, openMembership, urlPrefix} = this.props;
+    let {access, team, openMembership} = this.props;
+    let orgId = this.props.organization.slug;
     return (
      <tr>
         <td>
@@ -97,10 +99,10 @@ const AllTeamsRow = React.createClass({
                onClick={this.joinTeam}>{t('Request Access')}</a>
           )))}
           {access.has('team:write') &&
-            <a className="btn btn-default btn-sm" href={`${urlPrefix}/teams/${team.slug}/settings/`}
+            <Link className="btn btn-default btn-sm" to={`/organizations/${orgId}/teams/${team.slug}/settings/`}
                style={{marginLeft: 5}}>
               {t('Team Settings')}
-            </a>
+            </Link>
           }
         </td>
       </tr>
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index 62e81d3f31..6721e67c24 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -62,6 +62,7 @@ const ExpandedTeamList = React.createClass({
   renderTeamNode(team, urlPrefix) {
     // TODO: make this cleaner
     let access = this.props.access;
+    let orgId = this.props.organization.slug;
     return (
       <div className="box" key={team.slug}>
         <div className="box-header">
@@ -70,9 +71,9 @@ const ExpandedTeamList = React.createClass({
               {t('Leave Team')}
             </a>
             {access.has('team:write') &&
-              <a className="team-settings" href={`${urlPrefix}/teams/${team.slug}/settings/`}>
+              <Link className="team-settings" to={`/organizations/${orgId}/teams/${team.slug}/settings/`}>
                 {t('Team Settings')}
-              </a>
+              </Link>
             }
           </div>
           <h3>{team.name}</h3>
@@ -143,9 +144,8 @@ const ExpandedTeamList = React.createClass({
   },
 
   renderTeamNodes() {
-    let urlPrefix = this.urlPrefix();
     return this.props.teamList.map((team) => {
-      return this.renderTeamNode(team, urlPrefix);
+      return this.renderTeamNode(team);
     });
   },
 
diff --git a/src/sentry/static/sentry/app/views/teamSettings.jsx b/src/sentry/static/sentry/app/views/teamSettings.jsx
new file mode 100644
index 0000000000..0c732121d3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamSettings.jsx
@@ -0,0 +1,224 @@
+import jQuery from 'jquery';
+import React from 'react';
+import {History} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import ConfigStore from '../stores/configStore';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import OrganizationState from '../mixins/organizationState';
+import {TextField} from '../components/forms';
+import {t} from '../locale';
+
+const FormState = {
+  READY: 'Ready',
+  SAVING: 'Saving',
+  ERROR: 'Error',
+};
+
+const TeamSettingsForm = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: Object.assign({}, this.props.initialData),
+      errors: {},
+    };
+  },
+
+  onFieldChange(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({
+      formData: formData,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId, teamId} = this.props;
+      this.api.request(`/teams/${orgId}/${teamId}/`, {
+        method: 'PUT',
+        data: this.state.formData,
+        success: (data) => {
+          this.props.onSave(data);
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
+    });
+  },
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let errors = this.state.errors;
+    return (
+      <form onSubmit={this.onSubmit} className="form-stacked">
+        {this.state.state === FormState.ERROR &&
+          <div className="alert alert-error alert-block">
+            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+          </div>
+        }
+        <fieldset>
+          <TextField
+            key="name"
+            label={t('Name')}
+            placeholder={t('e.g. API Team')}
+            value={this.state.formData.name}
+            required={true}
+            error={errors.name}
+            onChange={this.onFieldChange.bind(this, 'name')} />
+          <TextField
+            key="slug"
+            label={t('Short name')}
+            value={this.state.formData.slug}
+            required={true}
+            error={errors.slug}
+            onChange={this.onFieldChange.bind(this, 'slug')} />
+       </fieldset>
+        <fieldset className="form-actions">
+          <button type="submit" className="btn btn-primary"
+                  disabled={isSaving}>{t('Save Changes')}</button>
+        </fieldset>
+      </form>
+    );
+  }
+});
+
+const TeamSettings = React.createClass({
+  contextTypes: {
+    location: React.PropTypes.object
+  },
+
+  mixins: [
+    ApiMixin,
+    History,
+    OrganizationState
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      team: null
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+    jQuery(document.body).addClass('narrow');
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let params = this.props.params;
+    if (nextProps.params.teamId !== params.teamId ||
+        nextProps.params.orgId !== params.orgId) {
+      this.setState({
+        loading: true,
+        error: false
+      }, this.fetchData);
+    }
+  },
+
+  componentWillUnmount() {
+    jQuery(document.body).removeClass('narrow');
+  },
+
+  fetchData() {
+    let params = this.props.params;
+
+    this.api.request(`/teams/${params.orgId}/${params.teamId}/`, {
+      success: (data) => {
+        this.setState({
+          team: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  onSaveTeam(data) {
+    let team = this.state.team;
+    if (data.slug !== team.slug) {
+      let orgId = this.props.params.orgId;
+      this.history.pushState(null, `/organizations/${orgId}/teams/${data.slug}/settings/`);
+    } else {
+      Object.assign({}, team, data);
+      this.setState({team: team});
+    }
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    let {orgId, teamId} = this.props.params;
+    let team = this.state.team;
+    let urlPrefix = ConfigStore.get('urlPrefix');
+    let access = this.getAccess();
+
+    return (
+      <div className="container">
+        <h3>{team.name} <small>{t('Team Settings')}</small></h3>
+
+        <div className="box">
+          <div className="box-content with-padding">
+            <TeamSettingsForm
+              orgId={orgId}
+              teamId={teamId}
+              initialData={team}
+              onSave={this.onSaveTeam} />
+          </div>
+        </div>
+
+        {access.has('team:delete') &&
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Remove Team')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <p>{t('Removing this team will delete associated projects and events.')}</p>
+
+              <fieldset className="form-actions">
+                <a href={`${urlPrefix}/organizations/${orgId}/teams/${teamId}/remove/`} className="btn btn-danger">
+                  {t('Remove Team')}
+                </a>
+              </fieldset>
+            </div>
+          </div>
+        }
+      </div>
+    );
+  }
+});
+
+export default TeamSettings;
diff --git a/src/sentry/templates/sentry/admin/teams/list.html b/src/sentry/templates/sentry/admin/teams/list.html
index 6e0e96774c..4589329a76 100644
--- a/src/sentry/templates/sentry/admin/teams/list.html
+++ b/src/sentry/templates/sentry/admin/teams/list.html
@@ -36,7 +36,9 @@
                 {% for team in team_list.paginator.objects %}
                     <tr>
                         <td>
-                            <a href="{% url 'sentry-manage-team' team.organization.slug team.slug %}"><strong>{{ team.slug }}</strong></a>
+                            <a href="{% absolute_uri '/organizations/{}/teams/{}/settings/' team.organization.slug team.slug %}">
+                                <strong>{{ team.slug }}</strong>
+                            </a>
                         </td>
                         <td style="text-align:right; vertical-align:middle;">
                             {{ team.num_projects }}
diff --git a/src/sentry/templates/sentry/teams/manage.html b/src/sentry/templates/sentry/teams/manage.html
deleted file mode 100644
index 9179463f2b..0000000000
--- a/src/sentry/templates/sentry/teams/manage.html
+++ /dev/null
@@ -1,52 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{% trans "Team Settings" %} | {{ block.super }}{% endblock %}
-
-{% block content %}
-  <h3>{{ team.name }} <small> {% trans "Team Settings" %}</small>
-  </h3>
-
-  <div class="box">
-    <div class="box-content with-padding">
-      <form class="form-stacked" action="" method="post">
-        {% csrf_token %}
-
-        {% if form.errors %}
-          <div class="alert alert-block alert-error">{% trans "Please correct the errors below." %}</div>
-        {% endif %}
-
-        {{ form|as_crispy_errors }}
-
-        <fieldset>
-          {% for field in form %}
-            {{ field|as_crispy_field }}
-          {% endfor %}
-        </fieldset>
-
-        <fieldset class="form-actions">
-          <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </fieldset>
-      </form>
-    </div>
-  </div>
-
-  {% if ACCESS.team_delete %}
-  <div class="box">
-    <div class="box-header">
-      <h3>{% trans "Remove Team" %}</h3>
-    </div>
-    <div class="box-content with-padding">
-      <p>Removing this team will delete associated projects and events.</p>
-
-      <fieldset class="form-actions">
-        <a href="{% url 'sentry-remove-team' organization.slug team.slug %}" class="btn btn-danger">{% trans "Remove Team" %}</a>
-      </fieldset>
-    </div>
-  </div>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/teams/remove.html b/src/sentry/templates/sentry/teams/remove.html
index 750f3fecb2..5f65094a85 100644
--- a/src/sentry/templates/sentry/teams/remove.html
+++ b/src/sentry/templates/sentry/teams/remove.html
@@ -2,6 +2,7 @@
 
 {% load crispy_forms_tags %}
 {% load i18n %}
+{% load sentry_helpers %}
 
 {% block title %}{% trans "Remove Team" %} | {{ block.super }}{% endblock %}
 
@@ -35,7 +36,7 @@
 
     <fieldset class="form-actions">
       <button type="submit" class="btn btn-danger">{% trans "Remove Team" %}</button>
-      <a href="{% url 'sentry-manage-team' organization.slug team.slug %}" class="btn btn-default">{% trans "Cancel" %}</a>
+      <a href="{% absolute_uri '/organizations/{}/teams/{}/settings/' team.organization.slug team.slug %}" class="btn btn-default">{% trans "Cancel" %}</a>
     </fieldset>
   </form>
 {% endblock %}
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
deleted file mode 100644
index 35f123ddf4..0000000000
--- a/src/sentry/web/frontend/team_settings.py
+++ /dev/null
@@ -1,78 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.db import IntegrityError
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
-from sentry.web.frontend.base import TeamView
-
-
-class EditTeamForm(forms.ModelForm):
-    slug = forms.SlugField(
-        label=_('Short name'),
-        help_text=_('A unique ID used to identify this team.'),
-    )
-
-    class Meta:
-        fields = ('name', 'slug',)
-        model = Team
-
-    def clean_slug(self):
-        value = self.cleaned_data.get('slug')
-        if not value:
-            return
-
-        qs = Team.objects.filter(
-            slug=value,
-            organization=self.instance.organization,
-        ).exclude(id=self.instance.id)
-        if qs.exists():
-            raise forms.ValidationError("A team with that slug already exists.")
-
-        return value
-
-
-class TeamSettingsView(TeamView):
-    required_scope = 'team:write'
-
-    def get_form(self, request, team):
-        return EditTeamForm(request.POST or None, instance=team)
-
-    def handle(self, request, organization, team):
-        form = self.get_form(request, team)
-        if form.is_valid():
-            try:
-                team = form.save()
-            except IntegrityError:
-                form.errors['__all__'] = ['There was an error while saving your changes. Please try again.']
-
-        if form.is_valid():
-            AuditLogEntry.objects.create(
-                organization=organization,
-                actor=request.user,
-                ip_address=request.META['REMOTE_ADDR'],
-                target_object=team.id,
-                event=AuditLogEntryEvent.TEAM_EDIT,
-                data=team.get_audit_log_data(),
-            )
-
-            messages.add_message(request, messages.SUCCESS,
-                _('Changes to your team were saved.'))
-
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
-
-        if request.is_superuser():
-            can_remove_team = True
-        else:
-            can_remove_team = request.access.has_team_scope(team, 'team:delete')
-
-        context = {
-            'form': form,
-            'can_remove_team': can_remove_team,
-        }
-
-        return self.respond('sentry/teams/manage.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 1eec0c4347..c7ef5d7f1a 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -66,7 +66,6 @@ from sentry.web.frontend.remove_organization import RemoveOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.replay_event import ReplayEventView
-from sentry.web.frontend.team_settings import TeamSettingsView
 
 
 def init_all_applications():
@@ -251,8 +250,6 @@ urlpatterns += patterns(
         name='sentry-organization-stats'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/settings/$', OrganizationSettingsView.as_view(),
         name='sentry-organization-settings'),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/settings/$', TeamSettingsView.as_view(),
-        name='sentry-manage-team'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/remove/$', RemoveTeamView.as_view(),
         name='sentry-remove-team'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/teams/new/$', CreateTeamView.as_view(),
diff --git a/tests/sentry/web/frontend/test_team_settings.py b/tests/sentry/web/frontend/test_team_settings.py
deleted file mode 100644
index 69b24fb461..0000000000
--- a/tests/sentry/web/frontend/test_team_settings.py
+++ /dev/null
@@ -1,57 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import Team
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class TeamSettingsPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(TeamSettingsPermissionTest, self).setUp()
-        self.path = reverse('sentry-manage-team', args=[self.organization.slug, self.team.slug])
-
-    def test_team_admin_can_load(self):
-        self.assert_team_admin_can_access(self.path)
-
-    def test_member_cannot_load(self):
-        self.assert_member_cannot_access(self.path)
-
-    def test_owner_can_load(self):
-        self.assert_owner_can_access(self.path)
-
-
-class TeamSettingsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-team', args=[self.organization.slug, self.team.slug])
-
-    def test_renders_with_context(self):
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/teams/manage.html')
-        assert resp.context['team'] == self.team
-
-    def test_valid_params(self):
-        self.login_as(self.user)
-        resp = self.client.post(self.path, {
-            'name': 'bar',
-            'slug': self.team.slug,
-        })
-        assert resp.status_code == 302
-        self.assertEquals(resp['Location'], 'http://testserver' + self.path)
-        team = Team.objects.get(id=self.team.id)
-        self.assertEquals(team.name, 'bar')
-
-    def test_slug_already_exists(self):
-        self.login_as(self.user)
-        self.create_team(name='bar', slug='bar', organization=self.organization)
-        resp = self.client.post(self.path, {
-            'name': 'bar',
-            'slug': 'bar',
-        })
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/manage.html')
-        assert resp.context['form'].errors['slug']
