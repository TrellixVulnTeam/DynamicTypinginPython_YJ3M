commit f7b3203640fb0990fb89b7cf10701bb4aaf55fe1
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Wed Nov 29 14:08:19 2017 +1300

    fix: Make exception parsing (more) idempotent (#6639)
    
    There was an issue where an exception that started off as:
        `{'type': None, 'value': {'isTrusted': True}}`
    After the first time through to_python/to_json it looked like:
        `{'type': None, 'value': '{"isTrusted":true}'}`
    Then after another pass through, it looked like:
        `{'type': '{"isTrusted"', 'value': 'true}'}`
    
    This tightens up the matching on a separating colon so that we still
    split `TypeError: foo` type strings into components, but we don't split
    json-serialized dictionaries.

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index f9ea76b0ae..d7476b3881 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import
 
 __all__ = ('Exception', )
 
+import re
 import six
 
 from django.conf import settings
@@ -19,6 +20,8 @@ from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
 from sentry.utils import json
 from sentry.utils.safe import trim
 
+_type_value_re = re.compile('^(\w+):(.*)$')
+
 
 class SingleException(Interface):
     """
@@ -64,10 +67,11 @@ class SingleException(Interface):
         type = data.get('type')
         value = data.get('value')
         if isinstance(value, six.string_types):
-            if type is None and ':' in value.split(' ', 1)[0]:
-                type, value = value.split(':', 1)
-                # in case of TypeError: foo (no space)
-                value = value.strip()
+            if type is None:
+                m = _type_value_re.match(value)
+                if m:
+                    type = m.group(1)
+                    value = m.group(2).strip()
         elif value is not None:
             value = json.dumps(value)
 
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index c77184009a..7897e6cf00 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -341,10 +341,10 @@ class SingleExceptionTest(TestCase):
         assert not result.stacktrace
 
     def test_coerces_object_value_to_string(self):
-        result = SingleException.to_python(dict(
-            type='ValueError',
-            value={'unauthorized': True},
-        ))
+        result = SingleException.to_python({
+            'type': 'ValueError',
+            'value': {'unauthorized': True},
+        })
         assert result.value == '{"unauthorized":true}'
 
     def test_handles_type_in_value(self):
@@ -360,6 +360,20 @@ class SingleExceptionTest(TestCase):
         assert result.type == 'ValueError'
         assert result.value == 'unauthorized'
 
+    def test_value_serialization_idempotent(self):
+        result = SingleException.to_python({
+            'type': None,
+            'value': {'unauthorized': True},
+        }).to_json()
+
+        assert result['type'] is None
+        assert result['value'] == '{"unauthorized":true}'
+
+        # Don't re-split a json-serialized value on the colon
+        result = SingleException.to_python(result).to_json()
+        assert result['type'] is None
+        assert result['value'] == '{"unauthorized":true}'
+
 
 class SlimExceptionDataTest(TestCase):
     def test_under_max(self):
