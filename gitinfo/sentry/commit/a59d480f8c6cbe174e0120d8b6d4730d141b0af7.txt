commit a59d480f8c6cbe174e0120d8b6d4730d141b0af7
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Dec 19 10:32:39 2019 -0800

    ref: Define accessible attributes of SnubaEvent (#16121)
    
    Do not allow random attribute access for SnubaEvent. Removes the
    assumption that attribute name is the same as the Snuba column name
    and nodestore key.

diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 2f829c2207..05dded33a7 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import logging
 import six
 import string
 import pytz
@@ -31,8 +30,6 @@ from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
 from sentry.utils.safe import get_path
 from sentry.utils.strings import truncatechars
 
-logger = logging.getLogger(__name__)
-
 
 class EventDict(CanonicalKeyDict):
     """
@@ -411,26 +408,6 @@ class SnubaEvent(EventCommon):
         )
         self.data = NodeData(node_id, data=None, wrapper=EventDict)
 
-    def __getattr__(self, name):
-        """
-        Depending on what snuba data this event was initialized with, we may
-        have the data available to return, or we may have to look in the
-        `data` dict (which would force a nodestore load). All unresolved
-        self.foo type accesses will come through here.
-        """
-        if name in ("_project_cache", "_group_cache", "_environment_cache"):
-            raise AttributeError()
-
-        allowed_attributes = ["timestamp", "event_id", "group_id", "project_id"]
-
-        if name not in allowed_attributes:
-            logger.warn("event.invalid-attribute", extra={"attribute_name": name})
-
-        if name in self.snuba_data:
-            return self.snuba_data[name]
-        else:
-            return self.data[name]
-
     # ============================================
     # Snuba-only implementations of properties that
     # would otherwise require nodestore data.
@@ -534,6 +511,30 @@ class SnubaEvent(EventCommon):
         # have to reference the row id anyway.
         return self.event_id
 
+    @property
+    def timestamp(self):
+        return self.snuba_data["timestamp"]
+
+    @property
+    def event_id(self):
+        return self.snuba_data["event_id"]
+
+    @property
+    def project_id(self):
+        return self.snuba_data["project_id"]
+
+    @project_id.setter
+    def project_id(self, value):
+        self.snuba_data["project_id"] = value
+
+    @property
+    def group_id(self):
+        return self.snuba_data["group_id"]
+
+    @group_id.setter
+    def group_id(self, value):
+        self.snuba_data["group_id"] = value
+
     def save(self):
         raise NotImplementedError
 
