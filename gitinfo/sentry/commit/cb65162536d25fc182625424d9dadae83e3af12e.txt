commit cb65162536d25fc182625424d9dadae83e3af12e
Author: Mark Story <mark@mark-story.com>
Date:   Wed Oct 24 16:34:53 2018 -0400

    fix(gitlab) Improve gitlab issue/project search (#10233)
    
    Instead of searching all of gitlab which can be slow on gitlab.com, we
    should only search the group the sentry integration installation is
    attached to. This lets the user sift through less data as the results
    are always relevant to the linked group.
    
    Refs APP-640

diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index 023eceba24..fca11a75ca 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -16,17 +16,16 @@ class GitLabApiClientPath(object):
     compare = u'/projects/{project}/repository/compare'
     diff = u'/projects/{project}/repository/commits/{sha}/diff'
     group = u'/groups/{group}'
+    group_issues = u'/groups/{group}/issues'
     group_projects = u'/groups/{group}/projects'
     hooks = u'/hooks'
     issue = u'/projects/{project}/issues/{issue}'
     issues = u'/projects/{project}/issues'
-    issues_search = u'/issues'
     members = u'/projects/{project}/members'
     notes = u'/projects/{project}/issues/{issue}/notes'
     project = u'/projects/{project}'
     project_hooks = u'/projects/{project}/hooks'
     project_hook = u'/projects/{project}/hooks/{hook_id}'
-    projects = u'/projects'
     user = u'/user'
 
     @staticmethod
@@ -105,7 +104,7 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
         """
         return self.get(GitLabApiClientPath.user)
 
-    def get_group_projects(self, group, query=None, simple=True):
+    def search_group_projects(self, group, query=None, simple=True):
         """Get projects for a group
 
         See https://docs.gitlab.com/ee/api/groups.html#list-a-group-s-projects
@@ -131,21 +130,6 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
             GitLabApiClientPath.project.format(project=project_id)
         )
 
-    def get_projects(self, query, simple=True):
-        """Get project list
-
-        See https://docs.gitlab.com/ee/api/projects.html#list-all-projects
-        """
-        # simple param returns limited fields for the project.
-        # Really useful, because we often don't need most of the project information
-        return self.get(
-            GitLabApiClientPath.projects,
-            params={
-                'search': query,
-                'simple': simple,
-            }
-        )
-
     def get_issue(self, project_id, issue_id):
         """Get an issue
 
@@ -168,14 +152,17 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
             data=data,
         )
 
-    def search_issues(self, query):
-        return self.get(
-            GitLabApiClientPath.issues_search,
-            params={
-                'scope': 'all',
-                'search': query
-            }
-        )
+    def search_group_issues(self, group_id, query):
+        """Search issues in a group
+
+        See https://docs.gitlab.com/ee/api/issues.html#list-group-issues
+        """
+        path = GitLabApiClientPath.group_issues.format(group=group_id)
+
+        return self.get(path, params={
+            'scope': 'all',
+            'search': query
+        })
 
     def create_note(self, project_id, issue_iid, data):
         """Create an issue note
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index 963cca27ab..62af08b67b 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -87,16 +87,26 @@ class GitlabIntegration(IntegrationInstallation, GitlabIssueBasic, RepositoryMix
     def get_repositories(self, query=None):
         # Note: gitlab projects are the same things as repos everywhere else
         group = self.get_group_id()
-        resp = self.get_client().get_group_projects(group, query)
+        resp = self.get_client().search_group_projects(group, query)
         return [{
             'identifier': repo['id'],
             'name': repo['name_with_namespace'],
         } for repo in resp]
 
+    def search_projects(self, query):
+        client = self.get_client()
+        group_id = self.get_group_id()
+        return client.search_group_projects(group_id, query)
+
+    def search_issues(self, query):
+        client = self.get_client()
+        group_id = self.get_group_id()
+        return client.search_group_issues(group_id, query)
+
 
 class InstallationForm(forms.Form):
     url = forms.CharField(
-        label=_("Installation Url"),
+        label=_('Installation Url'),
         help_text=_('The "base URL" for your GitLab instance, '
                     'includes the host and protocol.'),
         widget=forms.TextInput(
@@ -104,13 +114,13 @@ class InstallationForm(forms.Form):
         ),
     )
     group = forms.CharField(
-        label=_("GitLab Group Name"),
+        label=_('GitLab Group Name'),
         widget=forms.TextInput(
-            attrs={'placeholder': _('my-awesome-group')}
+            attrs={'placeholder': _('example-co')}
         )
     )
     verify_ssl = forms.BooleanField(
-        label=_("Verify SSL"),
+        label=_('Verify SSL'),
         help_text=_('By default, we verify SSL certificates '
                     'when delivering payloads to your GitLab instance, '
                     'and request GitLab to verify SSL when it delivers '
@@ -119,14 +129,14 @@ class InstallationForm(forms.Form):
         required=False
     )
     client_id = forms.CharField(
-        label=_("GitLab Application ID"),
+        label=_('GitLab Application ID'),
         widget=forms.TextInput(
             attrs={'placeholder': _(
                 '5832fc6e14300a0d962240a8144466eef4ee93ef0d218477e55f11cf12fc3737')}
         )
     )
     client_secret = forms.CharField(
-        label=_("GitLab Application Secret"),
+        label=_('GitLab Application Secret'),
         widget=forms.TextInput(
             attrs={'placeholder': _('XXXXXXXXXXXXXXXXXXXXXXXXXXX')}
         )
diff --git a/src/sentry/integrations/gitlab/search.py b/src/sentry/integrations/gitlab/search.py
index a45484b9b2..1f46fdad43 100644
--- a/src/sentry/integrations/gitlab/search.py
+++ b/src/sentry/integrations/gitlab/search.py
@@ -29,14 +29,14 @@ class GitlabIssueSearchEndpoint(OrganizationEndpoint):
         installation = integration.get_installation(organization.id)
 
         if field == 'externalIssue':
-            response = installation.get_client().search_issues(query)
+            response = installation.search_issues(query)
             return Response([{
                 'label': '(#%s) %s' % (i['iid'], i['title']),
                 'value': '%s#%s' % (i['project_id'], i['iid'])
             } for i in response])
 
         if field == 'project':
-            response = installation.get_client().get_projects(query=query)
+            response = installation.search_projects(query)
             return Response([{
                 'label': project['name_with_namespace'],
                 'value': project['id'],
diff --git a/tests/sentry/integrations/gitlab/test_search.py b/tests/sentry/integrations/gitlab/test_search.py
index b53e012664..d44bd7b95d 100644
--- a/tests/sentry/integrations/gitlab/test_search.py
+++ b/tests/sentry/integrations/gitlab/test_search.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import responses
 
-from mock import patch
 from django.core.urlresolvers import reverse
 from .testutils import GitLabTestCase
 
@@ -23,80 +22,95 @@ class GitlabSearchTest(GitLabTestCase):
     # Happy Paths
     @responses.activate
     def test_finds_external_issue_results(self):
-        search_results = {
-            'AEIOU': [
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/groups/1/issues?scope=all&search=AEIOU',
+            json=[
                 {'iid': 25, 'title': 'AEIOU Error', 'project_id': '1'},
                 {'iid': 45, 'title': 'AEIOU Error', 'project_id': '2'}
             ]
-        }
-        with patch('sentry.integrations.gitlab.client.GitLabApiClient.search_issues', lambda c, q: search_results[q]):
-            resp = self.client.get(
-                self.url,
-                data={
-                    'field': 'externalIssue',
-                    'query': 'AEIOU',
-                }
-            )
-
-            assert resp.status_code == 200
-            assert resp.data == [
-                {'value': '1#25', 'label': '(#25) AEIOU Error'},
-                {'value': '2#45', 'label': '(#45) AEIOU Error'}
-            ]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'externalIssue',
+                'query': 'AEIOU',
+            }
+        )
 
+        assert resp.status_code == 200
+        assert resp.data == [
+            {'value': '1#25', 'label': '(#25) AEIOU Error'},
+            {'value': '2#45', 'label': '(#45) AEIOU Error'}
+        ]
+
+    @responses.activate
     def test_finds_project_results(self):
-        projects = {'GetSentry': [
-            {
-                'id': '1',
-                'name_with_namespace': 'GetSentry / Sentry',
-                'path_with_namespace': 'getsentry/sentry'
-            },
-            {
-                'id': '2',
-                'name_with_namespace': 'GetSentry2 / Sentry2',
-                'path_with_namespace': 'getsentry2/sentry2'
-            },
-        ]}
-        with patch('sentry.integrations.gitlab.client.GitLabApiClient.get_projects', lambda c, query: projects[query]):
-            resp = self.client.get(
-                self.url,
-                data={
-                    'field': 'project',
-                    'query': 'GetSentry',
-                }
-            )
-
-            assert resp.status_code == 200
-            assert resp.data == [
-                {'value': '1', 'label': 'GetSentry / Sentry'},
-                {'value': '2', 'label': 'GetSentry2 / Sentry2'}
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/groups/1/projects?query=GetSentry&simple=True',
+            json=[
+                {
+                    'id': '1',
+                    'name_with_namespace': 'GetSentry / Sentry',
+                    'path_with_namespace': 'getsentry/sentry'
+                },
+                {
+                    'id': '2',
+                    'name_with_namespace': 'GetSentry2 / Sentry2',
+                    'path_with_namespace': 'getsentry2/sentry2'
+                },
             ]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'project',
+                'query': 'GetSentry',
+            }
+        )
 
+        assert resp.status_code == 200
+        assert resp.data == [
+            {'value': '1', 'label': 'GetSentry / Sentry'},
+            {'value': '2', 'label': 'GetSentry2 / Sentry2'}
+        ]
+
+    @responses.activate
     def test_finds_no_external_issues_results(self):
-        with patch('sentry.integrations.gitlab.client.GitLabApiClient.search_issues', lambda c, q: []):
-            resp = self.client.get(
-                self.url,
-                data={
-                    'field': 'externalIssue',
-                    'query': 'XYZ',
-                }
-            )
-
-            assert resp.status_code == 200
-            assert resp.data == []
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/groups/1/issues?scope=all&search=XYZ',
+            json=[]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'externalIssue',
+                'query': 'XYZ',
+            }
+        )
 
+        assert resp.status_code == 200
+        assert resp.data == []
+
+    @responses.activate
     def test_finds_no_project_results(self):
-        with patch('sentry.integrations.gitlab.client.GitLabApiClient.get_projects', lambda c, query: []):
-            resp = self.client.get(
-                self.url,
-                data={
-                    'field': 'project',
-                    'query': 'GetSentry',
-                }
-            )
-
-            assert resp.status_code == 200
-            assert resp.data == []
+        responses.add(
+            responses.GET,
+            'https://example.gitlab.com/api/v4/groups/1/projects?query=GetSentry&simple=True',
+            json=[]
+        )
+        resp = self.client.get(
+            self.url,
+            data={
+                'field': 'project',
+                'query': 'GetSentry',
+            }
+        )
+
+        assert resp.status_code == 200
+        assert resp.data == []
 
     # Request Validations
     def test_missing_field(self):
@@ -165,7 +179,8 @@ class GitlabSearchTest(GitLabTestCase):
     @responses.activate
     def test_search_issues_request_fails(self):
         responses.add(
-            responses.GET, u'https://example.gitlab.com/api/v4/issues',
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/issues',
             status=503
         )
         resp = self.client.get(
