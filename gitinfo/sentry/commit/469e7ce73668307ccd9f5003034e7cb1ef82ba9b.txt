commit 469e7ce73668307ccd9f5003034e7cb1ef82ba9b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 2 06:33:33 2018 +0900

    feat(ui): Change Project General Settings to use new form (#7311)

diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index 3016c42178..9a0782f7ad 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -1,9 +1,16 @@
 import classNames from 'classnames';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 import idx from 'idx';
 
 import {defined} from '../../utils';
+import InlineSvg from '../inlineSvg';
+
+const StyledInlineSvg = styled(InlineSvg)`
+  display: block;
+  color: ${p => p.theme.gray3};
+`;
 
 export default class FormField extends React.PureComponent {
   static propTypes = {
@@ -145,7 +152,7 @@ export default class FormField extends React.PureComponent {
           {disabled &&
             disabledReason && (
               <span className="disabled-indicator tip" title={disabledReason}>
-                <span className="icon-question" />
+                <StyledInlineSvg src="icon-circle-question" size="18px" />
               </span>
             )}
           {defined(help) && <p className="help-block">{help}</p>}
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index ac7c703301..5fc8c05f2e 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -1,9 +1,39 @@
 import {extractMultilineFields} from '../../utils';
-import {t} from '../../locale';
+import {t, tn} from '../../locale';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/organization/:orgId/project/:projectId/settings/';
 
+const getResolveAgeAllowedValues = () => {
+  let i = 0;
+  let values = [];
+  while (i <= 720) {
+    values.push(i);
+    if (i < 12) {
+      i += 1;
+    } else if (i < 24) {
+      i += 3;
+    } else if (i < 36) {
+      i += 6;
+    } else if (i < 48) {
+      i += 12;
+    } else {
+      i += 24;
+    }
+  }
+  return values;
+};
+
+const RESOLVE_AGE_ALLOWED_VALUES = getResolveAgeAllowedValues();
+
+const ORG_DISABLED_REASON = t(
+  "This option is enforced by your organization's settings and cannot be customized per-project."
+);
+
+// Check if a field has been set at the organization level.
+const hasOrgOverride = ({organization, name}) =>
+  typeof organization[name] !== 'undefined';
+
 const formGroups = [
   {
     // Form "section"/"panel"
@@ -31,6 +61,7 @@ const formGroups = [
         name: 'team',
         type: 'array',
         label: t('Team'),
+        visible: ({organization}) => organization.teams.length > 1,
         choices: ({organization}) =>
           organization.teams.filter(o => o.isMember).map(o => [o.id, o.slug]),
         help: t("Opt-in to new features before they're released to the public."),
@@ -62,15 +93,23 @@ const formGroups = [
       },
       {
         name: 'resolveAge',
-        type: 'number',
-
-        min: 0,
-        max: 168,
-        step: 1,
+        type: 'range',
+        allowedValues: RESOLVE_AGE_ALLOWED_VALUES,
         label: t('Auto Resolve'),
         help: t(
           "Automatically resolve an issue if it hasn't been seen for this amount of time"
         ),
+        formatLabel: val => {
+          val = parseInt(val, 10);
+          if (val === 0) {
+            return t('Disabled');
+          } else if (val > 23 && val % 24 === 0) {
+            // Based on allowed values, val % 24 should always be true
+            val = val / 24;
+            return tn('%d day', '%d days', val);
+          }
+          return tn('%d hour', '%d hours', val);
+        },
       },
     ],
   },
@@ -82,12 +121,15 @@ const formGroups = [
         name: 'dataScrubber',
         type: 'boolean',
         label: t('Data Scrubber'),
+        disabled: hasOrgOverride,
+        disabledReason: ORG_DISABLED_REASON,
         help: t('Enable server-side data scrubbing'),
       },
       {
         name: 'dataScrubberDefaults',
         type: 'boolean',
-
+        disabled: hasOrgOverride,
+        disabledReason: ORG_DISABLED_REASON,
         label: t('Use Default Scrubbers'),
         help: t(
           'Apply default scrubbers to prevent things like passwords and credit cards from being stored'
@@ -120,6 +162,8 @@ const formGroups = [
       {
         name: 'scrubIPAddresses',
         type: 'boolean',
+        disabled: hasOrgOverride,
+        disabledReason: ORG_DISABLED_REASON,
         label: t("Don't Store IP Addresses"),
         help: t('Preventing IP addresses from being stored for new events'),
       },
diff --git a/src/sentry/static/sentry/app/icons/icon-circle-question.svg b/src/sentry/static/sentry/app/icons/icon-circle-question.svg
new file mode 100644
index 0000000000..066fb0ae66
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-circle-question.svg
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+	<g fill="currentColor" fill-rule="nonzero">
+		<path d="M12,24 C5.372583,24 0,18.627417 0,12 C0,5.372583 5.372583,0 12,0 C18.627417,0 24,5.372583 24,12 C24,18.627417 18.627417,24 12,24 Z M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M11,17 C11,16.4477153 11.4477153,16 12,16 C12.5522847,16 13,16.4477153 13,17 C13,17.5522847 12.5522847,18 12,18 C11.4477153,18 11,17.5522847 11,17 Z M13,14 C13,14.5522847 12.5522847,15 12,15 C11.4477153,15 11,14.5522847 11,14 L11,12.9958496 C11,12.533315 11.3172049,12.1311363 11.7670102,12.0233704 C13.3666543,11.6401224 14,10.8269006 14,10.0625 C14,8.81039776 13.1225769,8 12,8 C10.8774231,8 10,8.81039776 10,10.0625 C10,10.6147847 9.55228475,11.0625 9,11.0625 C8.44771525,11.0625 8,10.6147847 8,10.0625 C8,7.66876891 9.80678739,6 12,6 C14.1932126,6 16,7.66876891 16,10.0625 C16,11.7147528 14.9222801,12.8652265 13,13.5048847 L13,14 Z" id="Shape">
+		</path>
+	</g>
+</svg>
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 2bfa301c5c..c253575c39 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -1,31 +1,37 @@
+import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {
-  ApiForm,
-  BooleanField,
-  RangeField,
-  Select2Field,
-  TextareaField,
-  TextField,
-} from '../components/forms';
 import {getOrganizationState} from '../mixins/organizationState';
 import {t, tct} from '../locale';
 import AsyncView from './asyncView';
-import DynamicWrapper from '../components/dynamicWrapper';
-import IndicatorStore from '../stores/indicatorStore';
+import Form from './settings/components/forms/form';
+
+import FieldControl from './settings/components/forms/field/fieldControl';
+import FieldDescription from './settings/components/forms/field/fieldDescription';
+import FieldLabel from './settings/components/forms/field/fieldLabel';
+import FieldHelp from './settings/components/forms/field/fieldHelp';
+import FieldWrapper from './settings/components/forms/field/fieldWrapper';
+import JsonForm from './settings/components/forms/jsonForm';
+import Panel from './settings/components/panel';
+import PanelAlert from './settings/components/panelAlert';
+import PanelHeader from './settings/components/panelHeader';
 import SettingsPageHeader from './settings/components/settingsPageHeader';
-
-class ListAsTextareaField extends TextareaField {
-  getValue(props, context) {
-    let value = super.getValue(props, context);
-    return value ? value.join('\n') : '';
-  }
-
-  coerceValue(value) {
-    return value ? value.split('\n') : [];
-  }
-}
+import TextBlock from './settings/components/text/textBlock';
+import projectFields from '../data/forms/projectGeneralSettings';
+
+const noMargin = {marginBottom: 0};
+
+const AutoResolveFooter = () => (
+  <Box p={2} pb={0}>
+    <PanelAlert type="warning" icon="icon-circle-exclamation" css={noMargin}>
+      <strong>
+        {t(`Note: Enabling auto resolve will immediately resolve anything that has
+                  not been seen within this period of time. There is no undo!`)}
+      </strong>
+    </PanelAlert>
+  </Box>
+);
 
 export default class ProjectGeneralSettings extends AsyncView {
   static contextTypes = {
@@ -37,43 +43,6 @@ export default class ProjectGeneralSettings extends AsyncView {
     return `/projects/${orgId}/${projectId}/`;
   }
 
-  getTeamChoices() {
-    return this.context.organization.teams
-      .filter(o => o.isMember)
-      .map(o => [o.slug, o.slug]);
-  }
-
-  getResolveAgeAllowedValues() {
-    let i = 0;
-    let values = [];
-    while (i <= 720) {
-      values.push(i);
-      if (i < 12) {
-        i += 1;
-      } else if (i < 24) {
-        i += 3;
-      } else if (i < 36) {
-        i += 6;
-      } else if (i < 48) {
-        i += 12;
-      } else {
-        i += 24;
-      }
-    }
-    return values;
-  }
-
-  formatResolveAgeLabel(val) {
-    val = parseInt(val, 10);
-    if (val === 0) {
-      return 'Disabled';
-    } else if (val > 23 && val % 24 === 0) {
-      val = val / 24;
-      return val + ' day' + (val != 1 ? 's' : '');
-    }
-    return val + ' hour' + (val != 1 ? 's' : '');
-  }
-
   renderRemoveProject() {
     let {orgId, projectId} = this.props.params;
 
@@ -85,29 +54,46 @@ export default class ProjectGeneralSettings extends AsyncView {
 
     if (!isProjectAdmin) {
       return (
-        <p>{t('You do not have the required permission to remove this project.')}</p>
+        <FieldWrapper inline>
+          <FieldDescription inline>
+            <FieldHelp>
+              {t('You do not have the required permission to remove this project.')}
+            </FieldHelp>
+          </FieldDescription>
+        </FieldWrapper>
       );
     } else if (project.isInternal) {
       return (
-        <p>
-          {t(
-            'This project cannot be removed. It is used internally by the Sentry server.'
-          )}
-        </p>
+        <FieldWrapper inline>
+          <FieldDescription inline>
+            <FieldHelp>
+              {t(
+                'This project cannot be removed. It is used internally by the Sentry server.'
+              )}
+            </FieldHelp>
+          </FieldDescription>
+        </FieldWrapper>
       );
     } else {
       return (
-        <p>
-          <a
-            href={`/${orgId}/${projectId}/settings/remove/`}
-            className="btn btn-danger pull-right"
-          >
-            {t('Remove Project')}
-          </a>
-          Remove the <strong>{project.slug}</strong> project and all related data.
-          <br />
-          Careful, this action cannot be undone.
-        </p>
+        <FieldWrapper inline>
+          <FieldDescription inline>
+            <FieldLabel>{t('Remove Project')}</FieldLabel>
+            <FieldHelp>
+              Remove the <strong>{project.slug}</strong> project and all related data.
+              <br />
+              Careful, this action cannot be undone.
+            </FieldHelp>
+          </FieldDescription>
+          <FieldControl>
+            <a
+              href={`/${orgId}/${projectId}/settings/remove/`}
+              className="btn btn-danger"
+            >
+              {t('Remove Project')}
+            </a>
+          </FieldControl>
+        </FieldWrapper>
       );
     }
   }
@@ -122,48 +108,54 @@ export default class ProjectGeneralSettings extends AsyncView {
 
     if (!isProjectAdmin) {
       return (
-        <p>{t('You do not have the required permission to transfer this project.')}</p>
+        <FieldWrapper inline>
+          <FieldDescription inline>
+            <FieldHelp>
+              {t('You do not have the required permission to transfer this project.')}
+            </FieldHelp>
+          </FieldDescription>
+        </FieldWrapper>
       );
     } else if (project.isInternal) {
       return (
-        <p>
-          {t(
-            'This project cannot be removed. It is used internally by the Sentry server.'
-          )}
-        </p>
+        <FieldWrapper inline>
+          <FieldDescription inline>
+            <FieldHelp>
+              {t(
+                'This project cannot be removed. It is used internally by the Sentry server.'
+              )}
+            </FieldHelp>
+          </FieldDescription>
+        </FieldWrapper>
       );
     } else {
       return (
-        <p>
-          <a
-            href={`/${orgId}/${projectId}/settings/transfer/`}
-            className="btn btn-danger pull-right"
-          >
-            {t('Transfer Project')}
-          </a>
-          Transfer the <strong>{project.slug}</strong> project and all related data.
-          <br />
-          Careful, this action cannot be undone.
-        </p>
+        <FieldWrapper inline>
+          <FieldDescription inline>
+            <FieldLabel>{t('Transfer Project')}</FieldLabel>
+            <FieldHelp>
+              Transfer the <strong>{project.slug}</strong> project and all related data.
+              <br />
+              Careful, this action cannot be undone.
+            </FieldHelp>
+          </FieldDescription>
+          <FieldControl>
+            <a
+              href={`/${orgId}/${projectId}/settings/transfer/`}
+              className="btn btn-danger"
+            >
+              {t('Transfer Project')}
+            </a>
+          </FieldControl>
+        </FieldWrapper>
       );
     }
   }
 
   renderBody() {
-    // These values cannot be changed on a project basis if any of them are 'true' at the org level
-    let orgOverrideFields = ['dataScrubber', 'dataScrubberDefaults', 'scrubIPAddresses'];
-
-    let orgOverrides = orgOverrideFields.reduce((res, key) => {
-      res[key] = this.context.organization[key];
-      return res;
-    }, {});
-
-    let orgOverrideDisabledReason = t(
-      "This option is enforced by your organization's settings and cannot be customized per-project."
-    );
-
+    let {organization} = this.context;
     let project = this.state.data;
-    let {orgId, projectId} = this.props.params;
+    let {projectId} = this.props.params;
     let initialData = {
       name: project.name,
       slug: project.slug,
@@ -184,235 +176,69 @@ export default class ProjectGeneralSettings extends AsyncView {
       scrapeJavaScript: project.scrapeJavaScript,
     };
 
-    let teamChoices = this.getTeamChoices();
-
     return (
       <div>
         <SettingsPageHeader title={t('Project Settings')} />
 
-        <ApiForm
+        <Form
+          saveOnBlur
+          allowUndo
           initialData={initialData}
           apiMethod="PUT"
           apiEndpoint={this.getEndpoint()}
           onSubmitSuccess={resp => {
-            IndicatorStore.add(t('Your changes were saved'), 'success', {duration: 2000});
             // Reload if slug has changed
             if (projectId !== resp.slug) {
-              window.location = `/${orgId}/${resp.slug}/settings/`;
+              window.location = `/${organization.slug}/${resp.slug}/settings/`;
             }
           }}
         >
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Project Details')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <TextField
-                name="name"
-                label={t('Project Name')}
-                required={true}
-                placeholder={t('e.g. My Service Name')}
-              />
-              <TextField
-                name="slug"
-                label={t('Short name')}
-                required={true}
-                help={t('A unique ID used to identify this project.')}
-              />
-              {teamChoices.length > 1 ? (
-                <Select2Field
-                  name="team"
-                  className="control-group"
-                  label={t('Team')}
-                  required={true}
-                  choices={this.getTeamChoices()}
-                />
-              ) : null}
-            </div>
-          </div>
-
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Email')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <TextField
-                name="subjectPrefix"
-                label={t('Subject prefix')}
-                help={t('Choose a custom prefix for emails from this project.')}
-              />
-            </div>
-          </div>
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Event Settings')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <TextField
-                name="defaultEnvironment"
-                label={t('Default environment')}
-                help={t('The default selected environment when viewing issues.')}
-                placeholder={t('e.g. production')}
-              />
-              <RangeField
-                name="resolveAge"
-                label={t('Auto resolve')}
-                help={t(
-                  "Automatically resolve an issue if it hasn't been seen for this amount of time."
-                )}
-                min={0}
-                max={720}
-                step={1}
-                allowedValues={this.getResolveAgeAllowedValues()}
-                formatLabel={this.formatResolveAgeLabel}
-              />
-              <p>
-                <small>
-                  <strong>
-                    Note: Enabling auto resolve will immediately resolve anything that has
-                    not been seen within this period of time. There is no undo!
-                  </strong>
-                </small>
-              </p>
-            </div>
-          </div>
-
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Data Privacy')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <BooleanField
-                disabled={orgOverrides.dataScrubber}
-                disabledReason={orgOverrideDisabledReason}
-                value={orgOverrides.dataScrubber || null}
-                name="dataScrubber"
-                label={t('Data scrubber')}
-                help={t('Enable server-side data scrubbing.')}
-              />
-              <BooleanField
-                disabled={orgOverrides.dataScrubberDefaults}
-                value={orgOverrides.dataScrubberDefaults || null}
-                disabledReason={orgOverrideDisabledReason}
-                name="dataScrubberDefaults"
-                label={t('Use default scrubbers')}
-                help={t(
-                  'Apply default scrubbers to prevent things like passwords and credit cards from being stored.'
-                )}
-              />
-              <ListAsTextareaField
-                name="sensitiveFields"
-                label={t('Additional sensitive fields')}
-                help={t(
-                  'Additional field names to match against when scrubbing data. Separate multiple entries with a newline.'
-                )}
-                placeholder={t('e.g. email')}
-              />
-              <ListAsTextareaField
-                name="safeFields"
-                label={t('Safe fields')}
-                help={t(
-                  'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
-                )}
-                placeholder={t('e.g. email')}
-              />
-              <BooleanField
-                disabled={orgOverrides.scrubIPAddresses}
-                value={orgOverrides.scrubIPAddresses || null}
-                disabledReason={orgOverrideDisabledReason}
-                name="scrubIPAddresses"
-                label={t("Don't store IP Addresses")}
-                help={t('Prevent IP addresses from being stored for new events.')}
-              />
-            </div>
-          </div>
-
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Client Security')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <p>
-                {tct(
-                  'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
-                  {
-                    link: <a href="https://github.com/getsentry/raven-js">raven-js</a>,
-                  }
-                )}{' '}
-                {tct(
-                  'This will restrict requests based on the [Origin] and [Referer] headers.',
-                  {
-                    Origin: <code>Origin</code>,
-                    Referer: <code>Referer</code>,
-                  }
-                )}
-              </p>
-              <ListAsTextareaField
-                name="allowedDomains"
-                label={t('Allowed domains')}
-                help={t('Separate multiple entries with a newline. Cannot be empty.')}
-                placeholder={t('e.g. https://example.com or example.com')}
-              />
-              <BooleanField
-                name="scrapeJavaScript"
-                label={t('Enable JavaScript source fetching')}
-                help={t(
-                  'Allow Sentry to scrape missing JavaScript source context when possible.'
-                )}
-              />
-
-              <DynamicWrapper
-                value={
-                  <TextField
-                    name="securityToken"
-                    label={t('Security token')}
-                    help={t(
-                      'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
-                    )}
-                  />
-                }
-                fixed={
-                  <TextField
-                    name="percy-mock-securityToken"
-                    label={t('Security token')}
-                    value="<<SECURITY_TOKEN>>"
-                    help={t(
-                      'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
-                    )}
-                  />
-                }
-              />
-
-              <TextField
-                name="securityTokenHeader"
-                label={t('Security token header')}
-                help={t(
-                  'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
-                )}
-                placeholder={t('e.g. X-Sentry-Token')}
-              />
-              <BooleanField
-                name="verifySSL"
-                label={t('Verify TLS/SSL')}
-                help={t(
-                  'Outbound requests will verify TLS (sometimes known as SSL) connections.'
-                )}
-              />
-            </div>
-          </div>
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Remove Project')}</h3>
-            </div>
-            <div className="box-content with-padding">{this.renderRemoveProject()}</div>
-          </div>
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Transfer Project')}</h3>
-            </div>
-            <div className="box-content with-padding">{this.renderTransferProject()}</div>
-          </div>
-        </ApiForm>
+          <JsonForm
+            forms={projectFields}
+            additionalFieldProps={{organization}}
+            access={new Set(organization.access)}
+            renderBodyStart={({title}) => {
+              if (title === 'Client Security') {
+                return (
+                  <Box p={2} pb={0}>
+                    <PanelAlert type="info" icon="icon-circle-exclamation" css={noMargin}>
+                      <TextBlock css={noMargin}>
+                        {tct(
+                          'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
+                          {
+                            link: (
+                              <a href="https://github.com/getsentry/raven-js">raven-js</a>
+                            ),
+                          }
+                        )}{' '}
+                        {tct(
+                          'This will restrict requests based on the [Origin] and [Referer] headers.',
+                          {
+                            Origin: <code>Origin</code>,
+                            Referer: <code>Referer</code>,
+                          }
+                        )}
+                      </TextBlock>
+                    </PanelAlert>
+                  </Box>
+                );
+              }
+              return null;
+            }}
+            renderFooter={({title}) => {
+              if (title === 'Event Settings') {
+                return <AutoResolveFooter />;
+              }
+              return null;
+            }}
+          />
+        </Form>
+
+        <Panel>
+          <PanelHeader>{t('Project Administration')}</PanelHeader>
+          {this.renderRemoveProject()}
+          {this.renderTransferProject()}
+        </Panel>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index 0fafdb3b8a..2f17b733a9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -2,115 +2,18 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-const Slider = styled.input`
-  -webkit-appearance: none;
-  width: 100%;
-  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * 2}px;
-
-  &:focus {
-    outline: none;
-
-    &::-webkit-slider-runnable-track {
-      background: ${p => p.theme.borderDark};
-    }
-
-    &::-ms-fill-upper {
-      background: ${p => p.theme.borderDark};
-    }
-
-    &::-ms-fill-lower {
-      background: ${p => p.theme.borderDark};
-    }
-  }
-
-  &::-webkit-slider-runnable-track {
-    width: 100%;
-    height: 3px;
-    cursor: pointer;
-    background: ${p => p.theme.borderLight};
-    border-radius: 3px;
-    border: 0;
-  }
-
-  &::-moz-range-track {
-    width: 100%;
-    height: 3px;
-    cursor: pointer;
-    background: ${p => p.theme.borderLight};
-    border-radius: 3px;
-    border: 0;
-  }
-
-  &::-ms-track {
-    width: 100%;
-    height: 3px;
-    cursor: pointer;
-    background: ${p => p.theme.borderLight};
-    border-radius: 3px;
-    border: 0;
-  }
-
-  &::-webkit-slider-thumb {
-    box-shadow: 0 0 0 3px #fff;
-    height: 17px;
-    width: 17px;
-    border-radius: 50%;
-    background: ${p => p.theme.purple};
-    cursor: pointer;
-    -webkit-appearance: none;
-    margin-top: -7px;
-    border: 0;
-  }
-
-  &::-moz-range-thumb {
-    box-shadow: 0 0 0 3px #fff;
-    height: 17px;
-    width: 17px;
-    border-radius: 50%;
-    background: ${p => p.theme.purple};
-    cursor: pointer;
-    -webkit-appearance: none;
-    margin-top: -7px;
-    border: 0;
-  }
-
-  &::-ms-thumb {
-    box-shadow: 0 0 0 3px #fff;
-    height: 17px;
-    width: 17px;
-    border-radius: 50%;
-    background: ${p => p.theme.purple};
-    cursor: pointer;
-    -webkit-appearance: none;
-    margin-top: -7px;
-    border: 0;
-  }
-
-  &::-ms-fill-lower {
-    background: ${p => p.theme.borderLight};
-    border: 0;
-    border-radius: 50%;
-  }
-
-  &::-ms-fill-upper {
-    background: ${p => p.theme.borderLight});
-    border: 0;
-    border-radius: 50%;
-  }
-`;
-
-const Label = styled.label`
-  font-size: 14px;
-  margin-bottom: ${p => p.theme.grid}px;
-  color: ${p => p.theme.gray3};
-`;
-
 class RangeSlider extends React.Component {
   static propTypes = {
-    value: PropTypes.number.isRequired,
     name: PropTypes.string.isRequired,
-    min: PropTypes.number.isRequired,
-    max: PropTypes.number.isRequired,
+    /**
+     * min allowed value, not needed if using `allowedValues`
+     */
+    min: PropTypes.number,
+    /**
+     * max allowed value, not needed if using `allowedValues`
+     */
+    max: PropTypes.number,
+    value: PropTypes.number,
     step: PropTypes.number,
     onChange: PropTypes.func,
 
@@ -152,8 +55,16 @@ class RangeSlider extends React.Component {
   }
 
   componentWillReceiveProps(nextProps) {
+    // Update local state when re-rendered with next `props.value` (e.g if this is controlled)
     if (typeof nextProps.value !== 'undefined') {
-      this.setState({value: nextProps.value});
+      let {allowedValues} = this.props;
+      let sliderValue = nextProps.value;
+
+      // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`
+      if (allowedValues && allowedValues.indexOf(sliderValue) > -1) {
+        sliderValue = allowedValues.indexOf(sliderValue);
+      }
+      this.setState({sliderValue});
     }
   }
 
@@ -174,6 +85,7 @@ class RangeSlider extends React.Component {
     });
 
     if (this.props.onChange) {
+      // `value` is the allowed value if `allowedValues` is defined (i.e. not index)
       this.props.onChange(value, e);
     }
   };
@@ -216,3 +128,106 @@ class RangeSlider extends React.Component {
 }
 
 export default RangeSlider;
+
+const Slider = styled.input`
+  -webkit-appearance: none;
+  width: 100%;
+  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * 2}px;
+
+  &:focus {
+    outline: none;
+
+    &::-webkit-slider-runnable-track {
+      background: ${p => p.theme.borderDark};
+    }
+
+    &::-ms-fill-upper {
+      background: ${p => p.theme.borderDark};
+    }
+
+    &::-ms-fill-lower {
+      background: ${p => p.theme.borderDark};
+    }
+  }
+
+  &::-webkit-slider-runnable-track {
+    width: 100%;
+    height: 3px;
+    cursor: pointer;
+    background: ${p => p.theme.borderLight};
+    border-radius: 3px;
+    border: 0;
+  }
+
+  &::-moz-range-track {
+    width: 100%;
+    height: 3px;
+    cursor: pointer;
+    background: ${p => p.theme.borderLight};
+    border-radius: 3px;
+    border: 0;
+  }
+
+  &::-ms-track {
+    width: 100%;
+    height: 3px;
+    cursor: pointer;
+    background: ${p => p.theme.borderLight};
+    border-radius: 3px;
+    border: 0;
+  }
+
+  &::-webkit-slider-thumb {
+    box-shadow: 0 0 0 3px #fff;
+    height: 17px;
+    width: 17px;
+    border-radius: 50%;
+    background: ${p => p.theme.purple};
+    cursor: pointer;
+    -webkit-appearance: none;
+    margin-top: -7px;
+    border: 0;
+  }
+
+  &::-moz-range-thumb {
+    box-shadow: 0 0 0 3px #fff;
+    height: 17px;
+    width: 17px;
+    border-radius: 50%;
+    background: ${p => p.theme.purple};
+    cursor: pointer;
+    -webkit-appearance: none;
+    margin-top: -7px;
+    border: 0;
+  }
+
+  &::-ms-thumb {
+    box-shadow: 0 0 0 3px #fff;
+    height: 17px;
+    width: 17px;
+    border-radius: 50%;
+    background: ${p => p.theme.purple};
+    cursor: pointer;
+    -webkit-appearance: none;
+    margin-top: -7px;
+    border: 0;
+  }
+
+  &::-ms-fill-lower {
+    background: ${p => p.theme.borderLight};
+    border: 0;
+    border-radius: 50%;
+  }
+
+  &::-ms-fill-upper {
+    background: ${p => p.theme.borderLight});
+    border: 0;
+    border-radius: 50%;
+  }
+`;
+
+const Label = styled.label`
+  font-size: 14px;
+  margin-bottom: ${p => p.theme.grid}px;
+  color: ${p => p.theme.gray3};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
index e409512a60..2ff768d37d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
@@ -4,6 +4,7 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import FieldControlState from './fieldControlState';
+import InlineSvg from '../../../../../components/inlineSvg';
 import Tooltip from '../../../../../components/tooltip';
 
 // This wraps Control + ControlError message
@@ -26,6 +27,18 @@ const FieldControlWrapper = styled(({hasControlState, ...props}) => <Flex {...pr
   flex-shrink: 0;
 `;
 
+const StyledInlineSvg = styled(InlineSvg)`
+  display: block;
+  color: ${p => p.theme.gray1};
+  margin: 0 auto;
+  cursor: pointer;
+  transition: 0.15s color;
+
+  &:hover {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
 class FieldControl extends React.Component {
   static propTypes = {
     inline: PropTypes.bool,
@@ -61,8 +74,8 @@ class FieldControl extends React.Component {
           {disabled &&
             disabledReason && (
               <Tooltip title={disabledReason}>
-                <span className="disabled-indicator">
-                  <span className="icon-question" />
+                <span className="disabled-indicator m-a-0">
+                  <StyledInlineSvg src="icon-circle-question" size="18px" />
                 </span>
               </Tooltip>
             )}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index e5357edbc7..a94043bf4f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import BooleanField from './booleanField';
-// import RangeField from './rangeField';
+import RangeField from './rangeField';
 // import Select2FieldAutocomplete from './select2FieldAutocomplete';
 import Select2Field from './select2Field';
 // import Select2TextField from './select2TextField';
@@ -23,6 +23,7 @@ export default class FieldFromConfig extends React.Component {
         'radio',
         'choice',
         'select',
+        'range',
       ]),
       required: PropTypes.bool,
       multiline: PropTypes.bool,
@@ -50,8 +51,8 @@ export default class FieldFromConfig extends React.Component {
     switch (field.type) {
       case 'secret':
         return <InputField {...props} type="password" />;
-      // case 'range':
-      // return <RangeField {...props} />;
+      case 'range':
+        return <RangeField {...props} />;
       case 'bool':
       case 'boolean':
         return <BooleanField {...props} />;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 72521bcc40..2376f36478 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -246,7 +246,7 @@ class FormField extends React.Component {
     let model = this.getModel();
 
     return (
-      <Field id={id} {...props}>
+      <Field id={id} name={name} {...props}>
         {({alignRight, inline, disabled, disabledReason}) => (
           <FieldControl
             disabled={disabled}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index dc7af837ef..97eb4b592f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -24,6 +24,10 @@ class JsonForm extends React.Component {
     access: PropTypes.object,
     additionalFieldProps: PropTypes.object,
     renderFooter: PropTypes.func,
+    /**
+     * Renders inside of PanelBody
+     */
+    renderBodyStart: PropTypes.func,
   };
 
   static defaultProps = {
@@ -72,11 +76,13 @@ class JsonForm extends React.Component {
       access,
       additionalFieldProps,
       renderFooter,
+      renderBodyStart,
       // eslint-disable-next-line no-unused-vars
       location,
       ...otherProps
     } = this.props;
     let shouldRenderFooter = typeof renderFooter === 'function';
+    let shouldRenderBodyStart = typeof renderBodyStart === 'function';
 
     return (
       <Box {...otherProps}>
@@ -85,6 +91,8 @@ class JsonForm extends React.Component {
             <Panel key={title} id={title}>
               <PanelHeader>{title}</PanelHeader>
               <PanelBody>
+                {shouldRenderBodyStart && renderBodyStart({title, fields})}
+
                 {fields.map(field => {
                   if (typeof field === 'function') {
                     return field();
diff --git a/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
index f8f5a3fe35..640711f236 100644
--- a/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
@@ -8,14 +8,13 @@ exports[`projectGeneralSettings renders 1`] = `
     <SettingsPageHeading
       title="Project Settings"
     />
-    <ApiForm
+    <Form
+      allowUndo={true}
       apiEndpoint="/projects/org-slug/project-slug/"
       apiMethod="PUT"
       cancelLabel="Cancel"
       className="form-stacked"
-      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
       footerClass="form-actions align-right"
-      hideErrors={false}
       initialData={
         Object {
           "allowedDomains": undefined,
@@ -37,369 +36,274 @@ exports[`projectGeneralSettings renders 1`] = `
           "verifySSL": undefined,
         }
       }
+      onSubmitError={[Function]}
       onSubmitSuccess={[Function]}
       requireChanges={false}
-      resetOnError={false}
+      saveOnBlur={true}
       submitDisabled={false}
       submitLabel="Save Changes"
     >
-      <div
-        className="box"
-      >
-        <div
-          className="box-header"
-        >
-          <h3>
-            Project Details
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <TextField
-            disabled={false}
-            hideErrorMessage={false}
-            label="Project Name"
-            name="name"
-            placeholder="e.g. My Service Name"
-            required={true}
-          />
-          <TextField
-            disabled={false}
-            help="A unique ID used to identify this project."
-            hideErrorMessage={false}
-            label="Short name"
-            name="slug"
-            required={true}
-          />
-        </div>
-      </div>
-      <div
-        className="box"
-      >
-        <div
-          className="box-header"
-        >
-          <h3>
-            Email
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <TextField
-            disabled={false}
-            help="Choose a custom prefix for emails from this project."
-            hideErrorMessage={false}
-            label="Subject prefix"
-            name="subjectPrefix"
-            required={false}
-          />
-        </div>
-      </div>
-      <div
-        className="box"
-      >
-        <div
-          className="box-header"
-        >
-          <h3>
-            Event Settings
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <TextField
-            disabled={false}
-            help="The default selected environment when viewing issues."
-            hideErrorMessage={false}
-            label="Default environment"
-            name="defaultEnvironment"
-            placeholder="e.g. production"
-            required={false}
-          />
-          <RangeField
-            allowedValues={
-              Array [
-                0,
-                1,
-                2,
-                3,
-                4,
-                5,
-                6,
-                7,
-                8,
-                9,
-                10,
-                11,
-                12,
-                15,
-                18,
-                21,
-                24,
-                30,
-                36,
-                48,
-                72,
-                96,
-                120,
-                144,
-                168,
-                192,
-                216,
-                240,
-                264,
-                288,
-                312,
-                336,
-                360,
-                384,
-                408,
-                432,
-                456,
-                480,
-                504,
-                528,
-                552,
-                576,
-                600,
-                624,
-                648,
-                672,
-                696,
-                720,
-              ]
-            }
-            disabled={false}
-            formatLabel={[Function]}
-            help="Automatically resolve an issue if it hasn't been seen for this amount of time."
-            hideErrorMessage={false}
-            label="Auto resolve"
-            max={720}
-            min={0}
-            name="resolveAge"
-            required={false}
-            snap={true}
-            step={1}
-          />
-          <p>
-            <small>
-              <strong>
-                Note: Enabling auto resolve will immediately resolve anything that has not been seen within this period of time. There is no undo!
-              </strong>
-            </small>
-          </p>
-        </div>
-      </div>
-      <div
-        className="box"
-      >
-        <div
-          className="box-header"
-        >
-          <h3>
-            Data Privacy
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <BooleanField
-            disabled={false}
-            disabledReason="This option is enforced by your organization's settings and cannot be customized per-project."
-            help="Enable server-side data scrubbing."
-            hideErrorMessage={false}
-            label="Data scrubber"
-            name="dataScrubber"
-            required={false}
-            value={null}
-          />
-          <BooleanField
-            disabled={false}
-            disabledReason="This option is enforced by your organization's settings and cannot be customized per-project."
-            help="Apply default scrubbers to prevent things like passwords and credit cards from being stored."
-            hideErrorMessage={false}
-            label="Use default scrubbers"
-            name="dataScrubberDefaults"
-            required={false}
-            value={null}
-          />
-          <ListAsTextareaField
-            disabled={false}
-            help="Additional field names to match against when scrubbing data. Separate multiple entries with a newline."
-            hideErrorMessage={false}
-            label="Additional sensitive fields"
-            name="sensitiveFields"
-            placeholder="e.g. email"
-            required={false}
-          />
-          <ListAsTextareaField
-            disabled={false}
-            help="Field names which data scrubbers should ignore. Separate multiple entries with a newline."
-            hideErrorMessage={false}
-            label="Safe fields"
-            name="safeFields"
-            placeholder="e.g. email"
-            required={false}
-          />
-          <BooleanField
-            disabled={false}
-            disabledReason="This option is enforced by your organization's settings and cannot be customized per-project."
-            help="Prevent IP addresses from being stored for new events."
-            hideErrorMessage={false}
-            label="Don't store IP Addresses"
-            name="scrubIPAddresses"
-            required={false}
-            value={null}
-          />
-        </div>
-      </div>
-      <div
-        className="box"
-      >
-        <div
-          className="box-header"
-        >
-          <h3>
-            Client Security
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <p>
-            <span
-              key="4"
-            >
-              <span
-                key="0"
-              >
-                Configure origin URLs which Sentry should accept events from. This is used for communication with clients like 
-              </span>
-              <a
-                href="https://github.com/getsentry/raven-js"
-                key="1"
-              >
-                raven-js
-              </a>
-              <span
-                key="2"
-              >
-                .
-              </span>
-            </span>
-             
-            <span
-              key="6"
-            >
-              <span
-                key="0"
-              >
-                This will restrict requests based on the 
-              </span>
-              <code
-                key="1"
-              >
-                Origin
-              </code>
-              <span
-                key="2"
-              >
-                 and 
-              </span>
-              <code
-                key="3"
-              >
-                Referer
-              </code>
-              <span
-                key="4"
-              >
-                 headers.
-              </span>
-            </span>
-          </p>
-          <ListAsTextareaField
-            disabled={false}
-            help="Separate multiple entries with a newline. Cannot be empty."
-            hideErrorMessage={false}
-            label="Allowed domains"
-            name="allowedDomains"
-            placeholder="e.g. https://example.com or example.com"
-            required={false}
-          />
-          <BooleanField
-            disabled={false}
-            help="Allow Sentry to scrape missing JavaScript source context when possible."
-            hideErrorMessage={false}
-            label="Enable JavaScript source fetching"
-            name="scrapeJavaScript"
-            required={false}
-          />
-          <DynamicWrapper
-            fixed={
-              <TextField
-                disabled={false}
-                help="Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended."
-                hideErrorMessage={false}
-                label="Security token"
-                name="percy-mock-securityToken"
-                required={false}
-                value="<<SECURITY_TOKEN>>"
-              />
-            }
-            value={
-              <TextField
-                disabled={false}
-                help="Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended."
-                hideErrorMessage={false}
-                label="Security token"
-                name="securityToken"
-                required={false}
-              />
-            }
-          />
-          <TextField
-            disabled={false}
-            help="Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended."
-            hideErrorMessage={false}
-            label="Security token header"
-            name="securityTokenHeader"
-            placeholder="e.g. X-Sentry-Token"
-            required={false}
-          />
-          <BooleanField
-            disabled={false}
-            help="Outbound requests will verify TLS (sometimes known as SSL) connections."
-            hideErrorMessage={false}
-            label="Verify TLS/SSL"
-            name="verifySSL"
-            required={false}
-          />
-        </div>
-      </div>
-      <div
-        className="box"
+      <JsonForm
+        access={
+          Set {
+            "org:read",
+            "org:write",
+            "org:admin",
+            "project:read",
+            "project:write",
+            "project:admin",
+            "team:read",
+            "team:write",
+            "team:admin",
+          }
+        }
+        additionalFieldProps={
+          Object {
+            "organization": Object {
+              "access": Array [
+                "org:read",
+                "org:write",
+                "org:admin",
+                "project:read",
+                "project:write",
+                "project:admin",
+                "team:read",
+                "team:write",
+                "team:admin",
+              ],
+              "features": Array [],
+              "id": "3",
+              "name": "Organization Name",
+              "onboardingTasks": Array [],
+              "slug": "org-slug",
+              "status": Object {
+                "id": "active",
+                "name": "active",
+              },
+              "teams": Array [],
+            },
+          }
+        }
+        forms={
+          Array [
+            Object {
+              "fields": Array [
+                Object {
+                  "help": "The name of your project",
+                  "label": "Project Name",
+                  "name": "name",
+                  "placeholder": "My Service Name",
+                  "required": true,
+                  "type": "string",
+                },
+                Object {
+                  "help": "A unique ID used to identify this project",
+                  "label": "Short Name",
+                  "name": "slug",
+                  "placeholder": "my-service-name",
+                  "required": true,
+                  "type": "string",
+                },
+                Object {
+                  "choices": [Function],
+                  "help": "Opt-in to new features before they're released to the public.",
+                  "label": "Team",
+                  "name": "team",
+                  "type": "array",
+                  "visible": [Function],
+                },
+              ],
+              "title": "Project Details",
+            },
+            Object {
+              "fields": Array [
+                Object {
+                  "help": "Choose a custom prefix for emails from this project",
+                  "label": "Subject Prefix",
+                  "name": "subjectPrefix",
+                  "type": "string",
+                },
+              ],
+              "title": "Email",
+            },
+            Object {
+              "fields": Array [
+                Object {
+                  "help": "The default selected environment when viewing issues",
+                  "label": "Default Environment",
+                  "name": "defaultEnvironment",
+                  "placeholder": "production",
+                  "type": "string",
+                },
+                Object {
+                  "allowedValues": Array [
+                    0,
+                    1,
+                    2,
+                    3,
+                    4,
+                    5,
+                    6,
+                    7,
+                    8,
+                    9,
+                    10,
+                    11,
+                    12,
+                    15,
+                    18,
+                    21,
+                    24,
+                    30,
+                    36,
+                    48,
+                    72,
+                    96,
+                    120,
+                    144,
+                    168,
+                    192,
+                    216,
+                    240,
+                    264,
+                    288,
+                    312,
+                    336,
+                    360,
+                    384,
+                    408,
+                    432,
+                    456,
+                    480,
+                    504,
+                    528,
+                    552,
+                    576,
+                    600,
+                    624,
+                    648,
+                    672,
+                    696,
+                    720,
+                  ],
+                  "formatLabel": [Function],
+                  "help": "Automatically resolve an issue if it hasn't been seen for this amount of time",
+                  "label": "Auto Resolve",
+                  "name": "resolveAge",
+                  "type": "range",
+                },
+              ],
+              "title": "Event Settings",
+            },
+            Object {
+              "fields": Array [
+                Object {
+                  "disabled": [Function],
+                  "disabledReason": "This option is enforced by your organization's settings and cannot be customized per-project.",
+                  "help": "Enable server-side data scrubbing",
+                  "label": "Data Scrubber",
+                  "name": "dataScrubber",
+                  "type": "boolean",
+                },
+                Object {
+                  "disabled": [Function],
+                  "disabledReason": "This option is enforced by your organization's settings and cannot be customized per-project.",
+                  "help": "Apply default scrubbers to prevent things like passwords and credit cards from being stored",
+                  "label": "Use Default Scrubbers",
+                  "name": "dataScrubberDefaults",
+                  "type": "boolean",
+                },
+                Object {
+                  "getValue": [Function],
+                  "help": "Additional field names to match against when scrubbing data. Separate multiple entries with a newline",
+                  "label": "Additional Sensitive Fields",
+                  "multiline": true,
+                  "name": "sensitiveFields",
+                  "placeholder": "email",
+                  "setValue": [Function],
+                  "type": "string",
+                },
+                Object {
+                  "getValue": [Function],
+                  "help": "Field names which data scrubbers should ignore. Separate multiple entries with a newline",
+                  "label": "Safe Fields",
+                  "multiline": true,
+                  "name": "safeFields",
+                  "placeholder": "business-email",
+                  "setValue": [Function],
+                  "type": "string",
+                },
+                Object {
+                  "disabled": [Function],
+                  "disabledReason": "This option is enforced by your organization's settings and cannot be customized per-project.",
+                  "help": "Preventing IP addresses from being stored for new events",
+                  "label": "Don't Store IP Addresses",
+                  "name": "scrubIPAddresses",
+                  "type": "boolean",
+                },
+              ],
+              "title": "Data Privacy",
+            },
+            Object {
+              "fields": Array [
+                Object {
+                  "getValue": [Function],
+                  "help": "Separate multiple entries with a newline",
+                  "label": "Allowed Domains",
+                  "multiline": true,
+                  "name": "allowedDomains",
+                  "placeholder": "https://example.com or example.com",
+                  "setValue": [Function],
+                  "type": "string",
+                },
+                Object {
+                  "help": "Allow Sentry to scrape missing JavaScript source context when possible",
+                  "label": "Enable JavaScript source fetching",
+                  "name": "scrapeJavaScript",
+                  "type": "boolean",
+                },
+                Object {
+                  "help": "Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended",
+                  "label": "Security Token",
+                  "name": "securityToken",
+                  "type": "string",
+                },
+                Object {
+                  "help": "Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended.",
+                  "label": "Security Token Header",
+                  "name": "securityTokenHeader",
+                  "placeholder": "X-Sentry-Token",
+                  "type": "string",
+                },
+                Object {
+                  "help": "Outbound requests will verify TLS (sometimes known as SSL) connections.",
+                  "label": "Verify TLS/SSL",
+                  "name": "verifySSL",
+                  "type": "boolean",
+                },
+              ],
+              "title": "Client Security",
+            },
+          ]
+        }
+        renderBodyStart={[Function]}
+        renderFooter={[Function]}
+      />
+    </Form>
+    <Panel>
+      <PanelHeader>
+        Project Administration
+      </PanelHeader>
+      <FieldWrapper
+        inline={true}
       >
-        <div
-          className="box-header"
+        <FieldDescription
+          inline={true}
         >
-          <h3>
+          <FieldLabel>
             Remove Project
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <p>
-            <a
-              className="btn btn-danger pull-right"
-              href="/org-slug/project-slug/settings/remove/"
-            >
-              Remove Project
-            </a>
+          </FieldLabel>
+          <FieldHelp>
             Remove the 
             <strong>
               project-slug
@@ -407,29 +311,29 @@ exports[`projectGeneralSettings renders 1`] = `
              project and all related data.
             <br />
             Careful, this action cannot be undone.
-          </p>
-        </div>
-      </div>
-      <div
-        className="box"
+          </FieldHelp>
+        </FieldDescription>
+        <FieldControl
+          hideControlState={false}
+        >
+          <a
+            className="btn btn-danger"
+            href="/org-slug/project-slug/settings/remove/"
+          >
+            Remove Project
+          </a>
+        </FieldControl>
+      </FieldWrapper>
+      <FieldWrapper
+        inline={true}
       >
-        <div
-          className="box-header"
+        <FieldDescription
+          inline={true}
         >
-          <h3>
+          <FieldLabel>
             Transfer Project
-          </h3>
-        </div>
-        <div
-          className="box-content with-padding"
-        >
-          <p>
-            <a
-              className="btn btn-danger pull-right"
-              href="/org-slug/project-slug/settings/transfer/"
-            >
-              Transfer Project
-            </a>
+          </FieldLabel>
+          <FieldHelp>
             Transfer the 
             <strong>
               project-slug
@@ -437,10 +341,20 @@ exports[`projectGeneralSettings renders 1`] = `
              project and all related data.
             <br />
             Careful, this action cannot be undone.
-          </p>
-        </div>
-      </div>
-    </ApiForm>
+          </FieldHelp>
+        </FieldDescription>
+        <FieldControl
+          hideControlState={false}
+        >
+          <a
+            className="btn btn-danger"
+            href="/org-slug/project-slug/settings/transfer/"
+          >
+            Transfer Project
+          </a>
+        </FieldControl>
+      </FieldWrapper>
+    </Panel>
   </div>
 </SideEffect(DocumentTitle)>
 `;
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index f900487713..f3ca22e271 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -1,9 +1,11 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {ThemeProvider} from 'emotion-theming';
+import {mount, shallow} from 'enzyme';
 
 import {Client} from 'app/api';
 
 import ProjectGeneralSettings from 'app/views/projectGeneralSettings';
+import theme from 'app/utils/theme';
 
 describe('projectGeneralSettings', function() {
   let org = TestStubs.Organization();
@@ -30,29 +32,23 @@ describe('projectGeneralSettings', function() {
   });
 
   it('disables field with an org override', function() {
-    let component = shallow(
-      <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
-      {
-        context: {
-          organization: {
-            ...org,
-            dataScrubber: true,
-          },
-        },
-      }
+    let routerContext = TestStubs.routerContext();
+    routerContext.context.organization.dataScrubber = true;
+    let component = mount(
+      <ThemeProvider theme={theme}>
+        <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
+      </ThemeProvider>,
+      routerContext
     );
-
-    expect(component.find('[name="dataScrubber"]').prop('disabled')).toBe(true);
+    expect(component.find('Switch[name="dataScrubber"]').prop('isDisabled')).toBe(true);
   });
 
   it('project admins can transfer or remove project', function() {
-    let component = shallow(
-      <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
-      {
-        context: {
-          organization: org,
-        },
-      }
+    let component = mount(
+      <ThemeProvider theme={theme}>
+        <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
+      </ThemeProvider>,
+      TestStubs.routerContext()
     );
 
     let removeBtn = component.find('a.btn.btn-danger').first();
@@ -63,16 +59,13 @@ describe('projectGeneralSettings', function() {
   });
 
   it('displays transfer/remove message for non-admins', function() {
-    let component = shallow(
-      <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
-      {
-        context: {
-          organization: {
-            ...org,
-            access: ['org: read'],
-          },
-        },
-      }
+    let routerContext = TestStubs.routerContext();
+    routerContext.context.organization.access = ['org:read'];
+    let component = mount(
+      <ThemeProvider theme={theme}>
+        <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
+      </ThemeProvider>,
+      routerContext
     );
 
     expect(component.html()).toContain(
