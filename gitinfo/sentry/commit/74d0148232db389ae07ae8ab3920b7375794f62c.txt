commit 74d0148232db389ae07ae8ab3920b7375794f62c
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Feb 22 15:01:14 2018 -0800

    feat(ui): Finish fine tuning UI (#7239)
    
    * change account notifications to be saveOnBlur
    * fix(api): Fix PUT endpoint for default notifications

diff --git a/src/sentry/api/endpoints/user_notification_details.py b/src/sentry/api/endpoints/user_notification_details.py
index 278039b81d..a382b6b7e3 100644
--- a/src/sentry/api/endpoints/user_notification_details.py
+++ b/src/sentry/api/endpoints/user_notification_details.py
@@ -46,6 +46,7 @@ class UserNotificationsSerializer(Serializer):
     def get_attrs(self, item_list, user, *args, **kwargs):
         data = list(UserOption.objects.filter(
             user__in=item_list,
+            organization=None,
             project=None).select_related('user'))
 
         results = defaultdict(list)
@@ -93,7 +94,8 @@ class UserNotificationDetailsEndpoint(UserEndpoint):
             for key in serializer.object:
                 db_key = USER_OPTION_SETTINGS[key]['key']
                 val = six.text_type(int(serializer.object[key]))
-                (uo, created) = UserOption.objects.get_or_create(user=user, key=db_key, project=None)
+                (uo, created) = UserOption.objects.get_or_create(
+                    user=user, key=db_key, project=None, organization=None)
                 uo.update(value=val)
 
             return self.get(request, user)
diff --git a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
index f477903463..31cdcb7300 100644
--- a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
@@ -1,88 +1,82 @@
+import {t, tct} from '../../locale';
+
 // Export route to make these forms searchable by label/help
 export const route = '/settings/account/notifications/';
 
 const formGroups = [
   {
-    title: 'Alerts',
+    title: t('Alerts'),
     fields: [
       {
         name: 'subscribeByDefault',
         type: 'boolean',
-        label: 'Send Me Project Alerts',
-        help: 'Alerts are defined in [Project] » Project Settings » Alerts » Rules.',
+        label: t('Send Me Project Alerts'),
+        // TODO(billy): Make this a real link
+        help: tct('Alerts are defined in [locationPath]', {
+          locationPath: '[Project] » Project Settings » Alerts » Rules.',
+        }),
       },
     ],
-    fineTuning: {
-      text: 'Fine tune alerts by project',
-      path: 'project-alerts/',
-    },
   },
 
   {
-    title: 'Workflow Notifications',
+    title: t('Workflow Notifications'),
     fields: [
       {
         name: 'workflowNotifications',
         type: 'radio',
-        label: 'Send Me Workflow Notifications',
+        label: t('Send Me Workflow Notifications'),
         choices: [[0, 'Always'], [1, 'Only On Issues I Subscribe To'], [2, 'Never']],
-        help: 'E.g. changes in issue assignment, resolution status, and comments.',
+        help: t('E.g. changes in issue assignment, resolution status, and comments.'),
       },
     ],
-    fineTuning: {
-      text: 'Fine tune workflow notifications by project',
-      path: 'workflow-notifications/',
-    },
   },
 
   {
-    title: 'Weekly Reports',
+    title: t('Email Routing'),
+    fields: [],
+  },
+
+  {
+    title: t('Weekly Reports'),
     fields: [
       {
         name: 'weeklyReports',
         type: 'boolean',
-        label: 'Send Me Weekly Reports',
-        help: "Reports contain a summary of what's happened within your organization.",
+        label: t('Send Me Weekly Reports'),
+        help: t("Reports contain a summary of what's happened within your organization."),
         disabled: true,
       },
     ],
-    fineTuning: {
-      text: 'Fine tune weekly reports by organization',
-      path: 'weekly-reports/',
-    },
   },
 
   {
-    title: 'Deploy Notifications',
+    title: t('Deploy Notifications'),
     fields: [
       {
         name: 'deployNotifications',
         type: 'radio',
-        label: 'Send Me Deploy Notifications',
+        label: t('Send Me Deploy Notifications'),
         choices: [[2, 'Always'], [3, 'Only On Deploys With My Commits'], [4, 'Never']],
-        help: 'Deploy emails include release, environment and commit overviews.',
+        help: t('Deploy emails include release, environment and commit overviews.'),
       },
     ],
-    fineTuning: {
-      text: 'Fine tune deploy notifications by organization',
-      path: 'deploy-notifications/',
-    },
   },
 
   {
-    title: 'My Activity',
+    title: t('My Activity'),
     fields: [
       {
         name: 'personalActivityNotifications',
         type: 'boolean',
-        label: 'Notify Me About My Own Activity',
-        help: 'Enable this to recieve notifications about your own actions on Sentry.',
+        label: t('Notify Me About My Own Activity'),
+        help: t('Enable this to recieve notifications about your own actions on Sentry.'),
       },
       {
         name: 'selfAssignOnResolve',
         type: 'boolean',
-        label: "Claim Unassigned Issues I've Resolved",
-        help: "You'll recieve notifications about any changes that happen afterwards.",
+        label: t("Claim Unassigned Issues I've Resolved"),
+        help: t("You'll recieve notifications about any changes that happen afterwards."),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index cf94ef8338..b7868bb785 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -141,7 +141,7 @@ const accountSettingsRoutes = (
         component={errorHandler(LazyLoad)}
       />
       <Route
-        path="project-alerts/"
+        path=":fineTuneType/"
         name="Fine Tune Alerts"
         componentPromise={() =>
           import(/* webpackChunkName: "AccountNotificationsFineTuning" */ './views/settings/account/accountNotificationFineTuning')}
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
index b90e38dfe1..6a850e3130 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
@@ -1,21 +1,69 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {t} from '../../../locale';
 import AsyncView from '../../asyncView';
-import ApiForm from '../components/forms/apiForm';
-
-import Select2Field from '../components/forms/select2Field';
+import Form from '../components/forms/form';
 import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
 import PanelHeader from '../components/panelHeader';
-
 import ProjectsStore from '../../../stores/projectsStore';
+import Select2Field from '../components/forms/select2Field';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import TextBlock from '../components/text/textBlock';
+import withOrganizations from '../../../utils/withOrganizations';
 
 const ACCOUNT_NOTIFICATION_FIELDS = {
-  'project-alerts/': {
-    name: 'subscribeByDefault',
+  alerts: {
+    title: 'Project Alerts',
+    description: t('Control alerts that you receive per project.'),
+    type: 'select',
+    choices: [[-1, t('Default')], [1, t('On')], [0, t('Off')]],
+  },
+  workflow: {
+    title: 'Workflow Notifications',
+    description: t(
+      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'
+    ),
+    type: 'select',
+    choices: [
+      [-1, t('Default')],
+      [0, t('Always')],
+      [1, t('Only on issues I subscribe to')],
+      [2, t('Never')],
+    ],
+  },
+  deploy: {
+    title: t('Deploy Notifications'),
+    description: t(
+      'Control deploy notifications that include release, environment, and commit overviews.'
+    ),
+    type: 'select',
+    choices: [
+      [-1, t('Default')],
+      [2, t('Always')],
+      [3, t('Only on deploys with my commits')],
+      [4, t('Never')],
+    ],
+  },
+  reports: {
+    title: t('Weekly Reports'),
+    description: t(
+      "Reports contain a summary of what's happened within the organization."
+    ),
+    type: 'select',
+    choices: [[1, t('On')], [0, t('Off')]],
+  },
+
+  email: {
+    title: t('Email Routing'),
+    description: t(
+      'On a per project basis, route emails to an alternative email address.'
+    ),
     type: 'select',
-    choices: [['default', 'Default'], ['on', 'On'], ['off', 'Off']],
+    // No choices here because it's going to have dynamic content
+    // Component will create choices
   },
 };
 
@@ -24,17 +72,23 @@ const PanelBodyLineItem = styled(PanelBody)`
   border-bottom: 1px solid ${p => p.theme.borderLight};
 `;
 
-export default class AccountNotificationDetails extends AsyncView {
-  getEndpoints() {
-    return [['notifications', '/users/me/notifications/'], ['projects', '/projects/']];
-  }
+// Which fine tuning parts are grouped by project
+const isGroupedByProject = type => ['alerts', 'workflow', 'email'].indexOf(type) > -1;
+
+class AccountNotificationsByProject extends React.Component {
+  static propTypes = {
+    projects: PropTypes.array,
+    field: PropTypes.object,
+  };
 
-  getFieldData(fieldName, projectList) {
-    ProjectsStore.loadInitialData(projectList);
+  getFieldData() {
+    let {projects, field} = this.props;
+    ProjectsStore.loadInitialData(projects);
 
     const projectsByOrg = ProjectsStore.getAllGroupedByOrganization();
 
-    const fieldConfig = ACCOUNT_NOTIFICATION_FIELDS[fieldName];
+    // eslint-disable-next-line no-unused-vars
+    const {title, description, ...fieldConfig} = field;
 
     // Display as select box in this view regardless of the type specified in the config
     return Object.values(projectsByOrg).map(org => {
@@ -43,7 +97,9 @@ export default class AccountNotificationDetails extends AsyncView {
         projects: org.projects.map(project => {
           return {
             ...fieldConfig,
-            name: project.slug,
+            // `name` key refers to field name
+            // we use project.id because slugs are not unique across orgs
+            name: project.id,
             label: project.name,
           };
         }),
@@ -51,37 +107,148 @@ export default class AccountNotificationDetails extends AsyncView {
     });
   }
 
+  render() {
+    const data = this.getFieldData();
+
+    return data.map(({name, projects: projectFields}) => {
+      return (
+        <div key={name}>
+          <PanelHeader>{name}</PanelHeader>
+          {projectFields.map(field => {
+            return (
+              <PanelBodyLineItem key={field.name}>
+                <Select2Field
+                  name={field.name}
+                  choices={field.choices}
+                  label={field.label}
+                  small={true}
+                />
+              </PanelBodyLineItem>
+            );
+          })}
+        </div>
+      );
+    });
+  }
+}
+
+class AccountNotificationsByOrganization extends React.Component {
+  static propTypes = {
+    organizations: PropTypes.array,
+    field: PropTypes.object,
+  };
+
+  getFieldData() {
+    const {field, organizations} = this.props;
+    // eslint-disable-next-line no-unused-vars
+    const {title, description, ...fieldConfig} = field;
+
+    // Display as select box in this view regardless of the type specified in the config
+    return organizations.map(org => {
+      return {
+        ...fieldConfig,
+        // `name` key refers to field name
+        // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)
+        name: org.id,
+        label: org.slug,
+      };
+    });
+  }
+
+  render() {
+    const fields = this.getFieldData();
+
+    return (
+      <React.Fragment>
+        <PanelHeader>{t('Organizations')}</PanelHeader>
+        {fields.map(field => {
+          return (
+            <PanelBodyLineItem key={field.name}>
+              <Select2Field
+                name={field.name}
+                choices={field.choices}
+                label={field.label}
+                small
+              />
+            </PanelBodyLineItem>
+          );
+        })}
+      </React.Fragment>
+    );
+  }
+}
+
+const AccountNotificationsByOrganizationContainer = withOrganizations(
+  AccountNotificationsByOrganization
+);
+
+export default class AccountNotificationFineTuning extends AsyncView {
+  getEndpoints() {
+    const {fineTuneType} = this.props.params;
+    const endpoints = [['notifications', `/users/me/notifications/${fineTuneType}/`]];
+
+    if (isGroupedByProject(fineTuneType)) {
+      endpoints.push(['projects', '/projects/']);
+    }
+
+    endpoints.push(['emails', '/users/me/emails/']);
+    if (fineTuneType === 'email') {
+      endpoints.push(['emails', '/users/me/emails/']);
+    }
+
+    return endpoints;
+  }
+
+  // Return a sorted list of user's verified emails
+  getEmailChoices() {
+    let {emails} = this.state;
+    if (!emails) return [];
+
+    return emails.filter(({isVerified}) => isVerified).sort((a, b) => {
+      // Sort by primary -> email
+      if (a.isPrimary) {
+        return -1;
+      } else if (b.isPrimary) {
+        return 1;
+      }
+
+      return a.email < b.email ? -1 : 1;
+    });
+  }
+
   renderBody() {
-    const {path} = this.props.route;
-    const data = this.getFieldData(path, this.state.projects);
+    const {fineTuneType} = this.props.params;
+    const isProject = isGroupedByProject(fineTuneType);
+    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];
+    const {title, description} = field;
+
+    if (fineTuneType === 'email') {
+      // Fetch verified email addresses
+      field.choices = this.getEmailChoices().map(({email}) => [email, email]);
+    }
 
     return (
       <div>
-        <ApiForm apiMethod="PUT" apiEndpoint={'/users/me/notifications/'}>
+        <SettingsPageHeader title={title} />
+        {description && <TextBlock>{description}</TextBlock>}
+
+        <Form
+          saveOnBlur
+          apiMethod="PUT"
+          apiEndpoint={`/users/me/notifications/${this.props.params.fineTuneType}/`}
+          initialData={this.state.notifications}
+        >
           <Panel>
-            <PanelHeader lightText={true}>{this.props.route.name}</PanelHeader>
-
-            {data.map(org => {
-              return (
-                <div key={org.name}>
-                  <PanelHeader>{org.name}</PanelHeader>
-                  {org.projects.map((project, idx) => {
-                    return (
-                      <PanelBodyLineItem key={idx}>
-                        <Select2Field
-                          name={project.name}
-                          choices={project.choices}
-                          label={project.label}
-                          small={true}
-                        />
-                      </PanelBodyLineItem>
-                    );
-                  })}
-                </div>
-              );
-            })}
+            {isProject && (
+              <AccountNotificationsByProject
+                projects={this.state.projects}
+                field={field}
+              />
+            )}
+
+            {!isProject && <AccountNotificationsByOrganizationContainer field={field} />}
           </Panel>
-        </ApiForm>
+        </Form>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
index 5db11be23e..d9c38e065d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
@@ -1,22 +1,41 @@
-import React from 'react';
-import PropTypes from 'prop-types';
 import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
 
+import {t} from '../../../locale';
+import AlertLink from '../../../components/alertLink';
 import AsyncView from '../../asyncView';
+import Form from '../components/forms/form';
+import InlineSvg from '../../../components/inlineSvg';
+import JsonForm from '../components/forms/jsonForm';
 import Link from '../../../components/link';
-
+import PanelFooter from '../components/panelFooter';
 import SettingsPageHeader from '../components/settingsPageHeader';
 import accountNotificationFields from '../../../data/forms/accountNotificationSettings';
 
-import ApiForm from '../components/forms/apiForm';
-import FieldFromConfig from '../components/forms/fieldFromConfig';
-import Panel from '../components/panel';
-import PanelBody from '../components/panelBody';
-import PanelHeader from '../components/panelHeader';
-import PanelFooter from '../components/panelFooter';
-import AlertLink from '../../../components/alertLink';
-import InlineSvg from '../../../components/inlineSvg';
-import {t} from '../../../locale';
+const FINE_TUNE_FOOTERS = {
+  Alerts: {
+    text: 'Fine tune alerts by project',
+    path: 'alerts/',
+  },
+  'Workflow Notifications': {
+    text: 'Fine tune workflow notifications by project',
+    path: 'workflow/',
+  },
+  'Email Routing': {
+    text: 'Fine tune email routing by project',
+    path: 'email/',
+  },
+  'Weekly Reports': {
+    text: 'Fine tune weekly reports by organization',
+    path: 'reports/',
+  },
+  'Deploy Notifications': {
+    text: 'Fine tune deploy notifications by organization',
+    path: 'deploy/',
+  },
+};
 
 export default class AccountNotifications extends AsyncView {
   getEndpoints() {
@@ -31,60 +50,56 @@ export default class AccountNotifications extends AsyncView {
     return (
       <div>
         <SettingsPageHeader title="Notifications" />
-        <ApiForm
+        <Form
           initialData={this.state.data}
+          saveOnBlur
           apiMethod="PUT"
-          apiEndpoint={'/users/me/notifications/'}
+          apiEndpoint="/users/me/notifications/"
         >
           <Box>
-            {accountNotificationFields.map(field => {
-              return <FormField key={field.title} field={field} />;
-            })}
+            <JsonForm
+              forms={accountNotificationFields}
+              renderFooter={({title}) => {
+                if (FINE_TUNE_FOOTERS[title]) {
+                  return <FineTuningFooter {...FINE_TUNE_FOOTERS[title]} />;
+                }
+                return null;
+              }}
+            />
             <AlertLink to="/settings/account/emails" icon="icon-mail">
-              {t('Looking to add, remove, or route an email? Use the emails panel.')}
+              {t('Looking to add or remove an email? Use the emails panel.')}
             </AlertLink>
           </Box>
-        </ApiForm>
+        </Form>
       </div>
     );
   }
 }
 
-class FormField extends React.Component {
+const FineTuneLink = styled(Link)`
+  display: flex;
+  justify-content: space-between;
+  padding: 15px 20px;
+  color: inherit;
+`;
+
+class FineTuningFooter extends React.Component {
   static propTypes = {
-    field: PropTypes.object.isRequired,
+    path: PropTypes.string.isRequired,
+    text: PropTypes.string.isRequired,
   };
 
-  constructor(props) {
-    super(props);
-  }
   render() {
-    let {title, fields, fineTuning} = this.props.field;
-
-    let linkStyle = {
-      display: 'flex',
-      justifyContent: 'space-between',
-      padding: '15px 20px',
-      color: 'inherit',
-    };
-
+    let {path, text} = this.props;
     let baseUrl = '/settings/account/notifications/';
 
     return (
-      <Panel key={title} id={title}>
-        <PanelHeader>{title}</PanelHeader>
-        <PanelBody>
-          {fields.map(field => <FieldFromConfig key={field.name} field={field} />)}
-        </PanelBody>
-        {fineTuning && (
-          <PanelFooter>
-            <Link to={`${baseUrl}${fineTuning.path}`} style={linkStyle}>
-              <span>{fineTuning.text}</span>
-              <InlineSvg src="icon-chevron-right" size="15px" />
-            </Link>
-          </PanelFooter>
-        )}
-      </Panel>
+      <PanelFooter css={{borderTop: 'none'}}>
+        <FineTuneLink to={`${baseUrl}${path}`}>
+          <span>{text}</span>
+          <InlineSvg src="icon-chevron-right" size="15px" />
+        </FineTuneLink>
+      </PanelFooter>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index 7c0c8673c1..e5357edbc7 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -28,8 +28,8 @@ export default class FieldFromConfig extends React.Component {
       multiline: PropTypes.bool,
       label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
       placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
-      help: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
-      extraHelp: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
+      help: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
+      extraHelp: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
       visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       showReturnButton: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index fff67bb319..3931e9ff87 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -397,6 +397,8 @@ class FormModel {
             addErrorMessage(resp.responseJSON.non_field_errors[0], 10000);
             // Reset saving state
             this.setError(id, '');
+          } else {
+            this.setError(id, 'Failed to save');
           }
         } else {
           // Default error behavior
diff --git a/tests/js/spec/views/accountNotifications.spec.jsx b/tests/js/spec/views/accountNotifications.spec.jsx
new file mode 100644
index 0000000000..e647c866aa
--- /dev/null
+++ b/tests/js/spec/views/accountNotifications.spec.jsx
@@ -0,0 +1,80 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import AccountNotifications from 'app/views/settings/account/accountNotifications';
+
+describe('AccountNotifications', function() {
+  let url = '/users/me/notifications/';
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url,
+      method: 'GET',
+      body: {
+        workflowNotifications: 1,
+        selfAssignOnResolve: false,
+        weeklyReports: true,
+        deployNotifications: 3,
+        personalActivityNotifications: true,
+        subscribeByDefault: true,
+      },
+    });
+
+    MockApiClient.addMockResponse({
+      url,
+      method: 'GET',
+      body: {
+        webhookUrl: 'webhook-url',
+        token: 'token token token',
+      },
+    });
+  });
+
+  it('renders with values from API', function() {
+    let wrapper = mount(<AccountNotifications />, TestStubs.routerContext());
+
+    // "Send Me Project Alerts"
+    expect(wrapper.find('Switch[name="subscribeByDefault"]').prop('isActive')).toBe(true);
+
+    // "Workflow Notifications"
+    expect(
+      wrapper.find('Field[id="workflowNotifications"] RadioGroup').prop('value')
+    ).toBe(1);
+
+    // "Deploy Notifications"
+    expect(wrapper.find('Field[id="deployNotifications"] RadioGroup').prop('value')).toBe(
+      3
+    );
+
+    // "Notify Me About my Own Activity"
+    expect(
+      wrapper.find('Switch[name="personalActivityNotifications"]').prop('isActive')
+    ).toBe(true);
+
+    // "Claim Unassigned Issues"
+    expect(wrapper.find('Switch[name="selfAssignOnResolve"]').prop('isActive')).toBe(
+      false
+    );
+  });
+
+  it('can change "Deploy Notifications"', function() {
+    let wrapper = mount(<AccountNotifications />, TestStubs.routerContext());
+    let mock = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+    });
+
+    wrapper
+      .find('Field[id="deployNotifications"] RadioLineItem')
+      .at(2)
+      .simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        data: {deployNotifications: 4},
+      })
+    );
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_user_notification_details.py b/tests/sentry/api/endpoints/test_user_notification_details.py
index 609eead9a9..8e2ecbd781 100644
--- a/tests/sentry/api/endpoints/test_user_notification_details.py
+++ b/tests/sentry/api/endpoints/test_user_notification_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.testutils import APITestCase
+from sentry.models import UserOption
 
 from django.core.urlresolvers import reverse
 
@@ -53,6 +54,24 @@ class UserNotificationDetailsTest(APITestCase):
 
     def test_returns_correct_defaults(self):
         user = self.create_user(email='a@example.com')
+        org = self.create_organization(name='Org Name', owner=user)
+
+        # Adding existing UserOptions for a project or org to test that defaults are correct
+        # default is 3
+        UserOption.objects.create(
+            user=user,
+            project=None,
+            organization=org,
+            key="deploy-emails",
+            value=1)
+
+        # default is 0
+        UserOption.objects.create(
+            user=user,
+            project=None,
+            organization=org,
+            key="workflow:notifications",
+            value=1)
 
         self.login_as(user=user)
 
@@ -93,6 +112,46 @@ class UserNotificationDetailsTest(APITestCase):
         assert resp.data.get('subscribeByDefault') is True
         assert resp.data.get('workflowNotifications') == 0
 
+        assert UserOption.objects.get(user=user,
+                                      project=None,
+                                      organization=None,
+                                      key='deploy-emails'
+                                      ).value == '2'
+
+    def test_saves_and_returns_values_when_defaults_present(self):
+        user = self.create_user(email='a@example.com')
+        org = self.create_organization(name='Org Name', owner=user)
+        self.login_as(user=user)
+        UserOption.objects.create(
+            user=user,
+            project=None,
+            organization=org,
+            key="deploy-emails",
+            value=1)
+
+        url = reverse(
+            'sentry-api-0-user-notifications', kwargs={
+                'user_id': 'me',
+            }
+        )
+
+        resp = self.client.put(url, format='json', data={
+            'deployNotifications': 2,
+        })
+
+        assert resp.status_code == 200
+        assert resp.data.get('deployNotifications') == 2
+        assert UserOption.objects.get(
+            user=user,
+            project=None,
+            organization=org,
+            key="deploy-emails").value == 1
+        assert UserOption.objects.get(
+            user=user,
+            project=None,
+            organization=None,
+            key="deploy-emails").value == '2'
+
     def test_reject_invalid_values(self):
         user = self.create_user(email='a@example.com')
         self.login_as(user=user)
