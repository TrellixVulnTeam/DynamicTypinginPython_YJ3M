commit 763ad7fe86f4bf6376dedd54896b4c3e2196a295
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 8 22:25:49 2016 -0700

    Correct support for unauthenticated inactive accounts
    
    New account should be created and identity reclaimed.
    
    @getsentry/infrastructure

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index f44c6267df..50d9c4e4c9 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -298,10 +298,11 @@ class AuthHelper(object):
                     data=identity.get('data', {}),
                 )
         except IntegrityError:
-            AuthIdentity.objects.get(
+            auth_identity = AuthIdentity.objects.get(
                 auth_provider=auth_provider,
                 ident=identity['id'],
-            ).update(
+            )
+            auth_identity.update(
                 user=user,
                 data=identity.get('data', {}),
             )
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 53aa4ca1d0..243531844c 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -358,3 +358,62 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
+
+    def test_flow_as_unauthenticated_existing_inactive_user_with_merge_and_existing_identity(self):
+        """
+        Given an unauthenticated user, and an existing, inactive user account
+        with a linked identity, this should claim that identity and create
+        a new user account.
+        """
+        organization = self.create_organization(name='foo', owner=self.user)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('bar@example.com', is_active=False)
+
+        auth_identity = AuthIdentity.objects.create(
+            auth_provider=auth_provider,
+            user=user,
+            ident='adfadsf@example.com'
+        )
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'adfadsf@example.com'})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-identity.html')
+        assert resp.status_code == 200
+        assert not resp.context['existing_user']
+        assert resp.context['login_form']
+
+        resp = self.client.post(path, {
+            'op': 'newuser',
+        })
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/'
+
+        auth_identity = AuthIdentity.objects.get(
+            id=auth_identity.id,
+        )
+
+        assert auth_identity.ident == 'adfadsf@example.com'
+
+        new_user = auth_identity.user
+        assert new_user != user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=new_user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
