commit 3111c3b802d530fbe6a989fa9873fa911a7a9848
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Nov 21 10:15:06 2017 -0800

    ðŸ”ª the old dropdown (#6592)
    
    * fix(ui): Make dropdown html valid - no div inside span
    
    * ref(ui): Remove old dropdownList, rename dropdownReact to dropdownList
    
    ðŸ”ª
    
    * fix(ui): Properly render discard dropdown menu

diff --git a/docs-ui/components/dropdownReact.stories.js b/docs-ui/components/dropdownReact.stories.js
deleted file mode 100644
index b715b94a83..0000000000
--- a/docs-ui/components/dropdownReact.stories.js
+++ /dev/null
@@ -1,29 +0,0 @@
-import React from 'react';
-import {storiesOf} from '@storybook/react';
-// import {action} from '@storybook/addon-actions';
-import {withInfo} from '@storybook/addon-info';
-
-import DropdownReact from 'sentry-ui/dropdownReact';
-import MenuItem from 'sentry-ui/menuItem';
-
-storiesOf('Links/DropdownReact', module)
-  .add(
-    'anchor left (default)',
-    withInfo('Anchors to left side')(() => (
-      <div className="clearfix">
-        <DropdownReact title="Test">
-          <MenuItem href="">Item</MenuItem>
-        </DropdownReact>
-      </div>
-    ))
-  )
-  .add(
-    'anchor right',
-    withInfo('Anchors to right side')(() => (
-      <div className="clearfix">
-        <DropdownReact anchorRight title="Test">
-          <MenuItem href="">Item</MenuItem>
-        </DropdownReact>
-      </div>
-    ))
-  );
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 30a284e1f7..99ab32dac2 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -9,7 +9,7 @@ import {valueIsEqual} from '../utils';
 import ApiMixin from '../mixins/apiMixin';
 import Avatar from '../components/avatar';
 import ConfigStore from '../stores/configStore';
-import DropdownReact from './dropdownReact';
+import DropdownLink from './dropdownLink';
 import FlowLayout from './flowLayout';
 import GroupStore from '../stores/groupStore';
 import LoadingIndicator from '../components/loadingIndicator';
@@ -238,7 +238,7 @@ const AssigneeSelector = React.createClass({
           {loading ? (
             <LoadingIndicator mini />
           ) : (
-            <DropdownReact
+            <DropdownLink
               className="assignee-selector-toggle"
               onOpen={this.onDropdownOpen}
               onClose={this.onDropdownClose}
@@ -283,7 +283,7 @@ const AssigneeSelector = React.createClass({
                   </FlowLayout>
                 </li>
               )}
-            </DropdownReact>
+            </DropdownLink>
           )}
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index 6bf5532ac7..f21b417ede 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -1,100 +1,220 @@
-import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 
-require('bootstrap/js/dropdown');
-
-const DropdownLink = React.createClass({
-  propTypes: {
+class DropdownLink extends React.Component {
+  static propTypes = {
     title: PropTypes.node,
     /** display dropdown caret */
     caret: PropTypes.bool,
     disabled: PropTypes.bool,
     onOpen: PropTypes.func,
     onClose: PropTypes.func,
+
+    /**
+     * Callback function to check if we should ignore click outside to
+     * hide dropdown menu
+     */
+    shouldIgnoreClickOutside: PropTypes.func,
+
+    /**
+     * If this is set, then this will become a "controlled" component.
+     * It will no longer set local state and dropdown visiblity will
+     * only follow `isOpen`.
+     */
+    isOpen: PropTypes.bool,
+
     /** anchors menu to the right */
     anchorRight: PropTypes.bool,
+
+    /** Keeps dropdown menu open when menu is clicked */
+    keepMenuOpen: PropTypes.bool,
+
+    /**
+     * Always render children of dropdown menu, this is included to support
+     * menu items that open a confirm modal. Otherwise when dropdown menu hides,
+     * the modal also gets unmounted
+     */
+    alwaysRenderMenu: PropTypes.bool,
+
     topLevelClasses: PropTypes.string,
     menuClasses: PropTypes.string,
-  },
 
-  getDefaultProps() {
-    return {
-      disabled: false,
-      anchorRight: false,
-      caret: true,
-    };
-  },
-  getInitialState() {
-    return {
+    /**
+     * If this is set to true, the dropdown behaves as a "nested dropdown" and is
+     * triggered on mouse enter and mouse leave
+     */
+    isNestedDropdown: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    disabled: false,
+    anchorRight: false,
+    keepMenuOpen: false,
+    caret: true,
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {
       isOpen: false,
     };
-  },
-
-  componentDidMount() {
-    jQuery(this.refs.dropdownToggle).dropdown();
-    jQuery(this.refs.dropdownToggle.parentNode)
-      .on('shown.bs.dropdown', e => {
-        this.setState({
-          isOpen: true,
-        });
-        this.props.onOpen && this.props.onOpen(e);
-      })
-      .on('hidden.bs.dropdown', e => {
-        setTimeout(() => {
-          if (!this.isMounted()) {
-            return;
-          }
-          this.setState({
-            isOpen: false,
-          });
-          this.props.onClose && this.props.onClose(e);
-        });
-      });
-  },
+  }
 
   componentWillUnmount() {
-    jQuery(this.refs.dropdownToggle.parentNode).off();
-  },
+    document.removeEventListener('click', this.checkClickOutside, true);
+  }
+
+  // Gets open state from props or local state when appropriate
+  isOpen = () => {
+    let {isOpen} = this.props;
+    let isControlled = typeof isOpen !== 'undefined';
+    return (isControlled && isOpen) || this.state.isOpen;
+  };
+
+  // Checks if click happens inside of dropdown menu (or its button)
+  // Closes dropdownmenu if it is "outside"
+  checkClickOutside = e => {
+    let {shouldIgnoreClickOutside} = this.props;
+
+    if (!this.dropdownMenu) return;
+    // Dropdown menu itself
+    if (this.dropdownMenu.contains(e.target)) return;
+    // Button that controls visibility of dropdown menu
+    if (this.dropdownActor.contains(e.target)) return;
 
-  close() {
-    this.setState({isOpen: false});
-  },
+    if (typeof shouldIgnoreClickOutside === 'function' && shouldIgnoreClickOutside(e))
+      return;
+
+    this.handleClose(e);
+  };
+
+  // Opens dropdown menu
+  handleOpen = e => {
+    let {onOpen, isOpen} = this.props;
+    let isControlled = typeof isOpen !== 'undefined';
+    if (!isControlled) {
+      this.setState({
+        isOpen: true,
+      });
+    }
+
+    if (typeof onOpen === 'function') {
+      onOpen(e);
+    }
+  };
+
+  // Decide whether dropdown should be closed when mouse leaves element
+  handleMouseLeave = e => {
+    const toElement = e.toElement || e.relatedTarget;
+
+    if (this.dropdownMenu && !this.dropdownMenu.contains(toElement)) {
+      this.handleClose(e);
+    }
+  };
+
+  // Closes dropdown menu
+  handleClose = e => {
+    let {onClose, isOpen} = this.props;
+    let isControlled = typeof isOpen !== 'undefined';
+    if (!isControlled) {
+      this.setState({isOpen: false});
+    }
+
+    if (typeof onClose === 'function') {
+      onClose(e);
+    }
+  };
+
+  // When dropdown menu is displayed and mounted to DOM,
+  // bind a click handler to `document` to listen for clicks outside of
+  // this component and close menu if so
+  handleMenuMount = ref => {
+    this.dropdownMenu = ref;
+
+    if (this.dropdownMenu) {
+      // 3rd arg = useCapture = so event capturing vs event bubbling
+      document.addEventListener('click', this.checkClickOutside, true);
+    } else {
+      document.removeEventListener('click', this.checkClickOutside, true);
+    }
+  };
+
+  handleToggle = e => {
+    if (this.isOpen()) {
+      this.handleClose(e);
+    } else {
+      this.handleOpen(e);
+    }
+  };
+
+  // Control whether we should hide dropdown menu when it is clicked
+  handleDropdownMenuClick = e => {
+    if (this.props.keepMenuOpen) return;
+
+    this.handleClose(e);
+  };
 
   render() {
-    let {anchorRight, disabled} = this.props;
+    let {
+      anchorRight,
+      disabled,
+      title,
+      caret,
+      children,
+      menuClasses,
+      className,
+      alwaysRenderMenu,
+      topLevelClasses,
+      isNestedDropdown,
+    } = this.props;
 
     // Default anchor = left
     let isRight = anchorRight;
+    let shouldShowDropdown = this.isOpen();
 
-    let className = classNames(this.props.className, {
+    let cx = classNames('dropdown-actor', className, {
       'dropdown-menu-right': isRight,
       'dropdown-toggle': true,
+      hover: shouldShowDropdown,
       disabled,
     });
 
-    let topLevelClasses = classNames(this.props.topLevelClasses, {
+    let topLevelCx = classNames('dropdown', topLevelClasses, {
       'pull-right': isRight,
       'anchor-right': isRight,
-      dropdown: true,
-      open: this.state.isOpen,
+      open: shouldShowDropdown,
     });
 
+    // .dropdown-actor-title = flexbox to fix vertical alignment on firefox
+    // Need the extra container because dropdown-menu alignment is off if `dropdown-actor` is a flexbox
     return (
-      <span className={topLevelClasses}>
-        <a className={className} data-toggle="dropdown" ref="dropdownToggle">
-          <div className="dropdown-actor-title">
-            {this.props.title}
-            {this.props.caret && <i className="icon-arrow-down" />}
-          </div>
+      <span className={topLevelCx}>
+        <a
+          className={cx}
+          ref={ref => (this.dropdownActor = ref)}
+          onClick={!isNestedDropdown && this.handleToggle}
+          onMouseEnter={isNestedDropdown && this.handleOpen}
+          onMouseLeave={isNestedDropdown && this.handleMouseLeave}
+        >
+          <span className="dropdown-actor-title">
+            <span>{title}</span>
+            {caret && <i className="icon-arrow-down" />}
+          </span>
         </a>
-        <ul className={classNames(this.props.menuClasses, 'dropdown-menu')}>
-          {this.props.children}
-        </ul>
+        {(shouldShowDropdown || alwaysRenderMenu) && (
+          <ul
+            ref={this.handleMenuMount}
+            onClick={this.handleDropdownMenuClick}
+            className={classNames(menuClasses, 'dropdown-menu')}
+            onMouseLeave={isNestedDropdown && this.handleMouseLeave}
+          >
+            {children}
+          </ul>
+        )}
       </span>
     );
-  },
-});
+  }
+}
 
 export default DropdownLink;
diff --git a/src/sentry/static/sentry/app/components/dropdownReact.jsx b/src/sentry/static/sentry/app/components/dropdownReact.jsx
deleted file mode 100644
index ab0e67b29b..0000000000
--- a/src/sentry/static/sentry/app/components/dropdownReact.jsx
+++ /dev/null
@@ -1,220 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import classNames from 'classnames';
-
-class DropdownReact extends React.Component {
-  static propTypes = {
-    title: PropTypes.node,
-    /** display dropdown caret */
-    caret: PropTypes.bool,
-    disabled: PropTypes.bool,
-    onOpen: PropTypes.func,
-    onClose: PropTypes.func,
-
-    /**
-     * Callback function to check if we should ignore click outside to
-     * hide dropdown menu
-     */
-    shouldIgnoreClickOutside: PropTypes.func,
-
-    /**
-     * If this is set, then this will become a "controlled" component.
-     * It will no longer set local state and dropdown visiblity will
-     * only follow `isOpen`.
-     */
-    isOpen: PropTypes.bool,
-
-    /** anchors menu to the right */
-    anchorRight: PropTypes.bool,
-
-    /** Keeps dropdown menu open when menu is clicked */
-    keepMenuOpen: PropTypes.bool,
-
-    /**
-     * Always render children of dropdown menu, this is included to support
-     * menu items that open a confirm modal. Otherwise when dropdown menu hides,
-     * the modal also gets unmounted
-     */
-    alwaysRenderMenu: PropTypes.bool,
-
-    topLevelClasses: PropTypes.string,
-    menuClasses: PropTypes.string,
-
-    /**
-     * If this is set to true, the dropdown behaves as a "nested dropdown" and is
-     * triggered on mouse enter and mouse leave
-     */
-    isNestedDropdown: PropTypes.bool,
-  };
-
-  static defaultProps = {
-    disabled: false,
-    anchorRight: false,
-    keepMenuOpen: false,
-    caret: true,
-  };
-
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      isOpen: false,
-    };
-  }
-
-  componentWillUnmount() {
-    document.removeEventListener('click', this.checkClickOutside, true);
-  }
-
-  // Gets open state from props or local state when appropriate
-  isOpen = () => {
-    let {isOpen} = this.props;
-    let isControlled = typeof isOpen !== 'undefined';
-    return (isControlled && isOpen) || this.state.isOpen;
-  };
-
-  // Checks if click happens inside of dropdown menu (or its button)
-  // Closes dropdownmenu if it is "outside"
-  checkClickOutside = e => {
-    let {shouldIgnoreClickOutside} = this.props;
-
-    if (!this.dropdownMenu) return;
-    // Dropdown menu itself
-    if (this.dropdownMenu.contains(e.target)) return;
-    // Button that controls visibility of dropdown menu
-    if (this.dropdownActor.contains(e.target)) return;
-
-    if (typeof shouldIgnoreClickOutside === 'function' && shouldIgnoreClickOutside(e))
-      return;
-
-    this.handleClose(e);
-  };
-
-  // Opens dropdown menu
-  handleOpen = e => {
-    let {onOpen, isOpen} = this.props;
-    let isControlled = typeof isOpen !== 'undefined';
-    if (!isControlled) {
-      this.setState({
-        isOpen: true,
-      });
-    }
-
-    if (typeof onOpen === 'function') {
-      onOpen(e);
-    }
-  };
-
-  // Decide whether dropdown should be closed when mouse leaves element
-  handleMouseLeave = e => {
-    const toElement = e.toElement || e.relatedTarget;
-
-    if (this.dropdownMenu && !this.dropdownMenu.contains(toElement)) {
-      this.handleClose(e);
-    }
-  };
-
-  // Closes dropdown menu
-  handleClose = e => {
-    let {onClose, isOpen} = this.props;
-    let isControlled = typeof isOpen !== 'undefined';
-    if (!isControlled) {
-      this.setState({isOpen: false});
-    }
-
-    if (typeof onClose === 'function') {
-      onClose(e);
-    }
-  };
-
-  // When dropdown menu is displayed and mounted to DOM,
-  // bind a click handler to `document` to listen for clicks outside of
-  // this component and close menu if so
-  handleMenuMount = ref => {
-    this.dropdownMenu = ref;
-
-    if (this.dropdownMenu) {
-      // 3rd arg = useCapture = so event capturing vs event bubbling
-      document.addEventListener('click', this.checkClickOutside, true);
-    } else {
-      document.removeEventListener('click', this.checkClickOutside, true);
-    }
-  };
-
-  handleToggle = e => {
-    if (this.isOpen()) {
-      this.handleClose(e);
-    } else {
-      this.handleOpen(e);
-    }
-  };
-
-  // Control whether we should hide dropdown menu when it is clicked
-  handleDropdownMenuClick = e => {
-    if (this.props.keepMenuOpen) return;
-
-    this.handleClose(e);
-  };
-
-  render() {
-    let {
-      anchorRight,
-      disabled,
-      title,
-      caret,
-      children,
-      menuClasses,
-      className,
-      alwaysRenderMenu,
-      topLevelClasses,
-      isNestedDropdown,
-    } = this.props;
-
-    // Default anchor = left
-    let isRight = anchorRight;
-    let shouldShowDropdown = this.isOpen();
-
-    let cx = classNames('dropdown-actor', className, {
-      'dropdown-menu-right': isRight,
-      'dropdown-toggle': true,
-      hover: shouldShowDropdown,
-      disabled,
-    });
-
-    let topLevelCx = classNames('dropdown', topLevelClasses, {
-      'pull-right': isRight,
-      'anchor-right': isRight,
-      open: shouldShowDropdown,
-    });
-
-    // .dropdown-actor-title = flexbox to fix vertical alignment on firefox
-    // Need the extra container because dropdown-menu alignment is off if `dropdown-actor` is a flexbox
-    return (
-      <span className={topLevelCx}>
-        <a
-          className={cx}
-          ref={ref => (this.dropdownActor = ref)}
-          onClick={!isNestedDropdown && this.handleToggle}
-          onMouseEnter={isNestedDropdown && this.handleOpen}
-          onMouseLeave={isNestedDropdown && this.handleMouseLeave}
-        >
-          <div className="dropdown-actor-title">
-            <span>{title}</span>
-            {caret && <i className="icon-arrow-down" />}
-          </div>
-        </a>
-        {(shouldShowDropdown || alwaysRenderMenu) && (
-          <ul
-            ref={this.handleMenuMount}
-            onClick={this.handleDropdownMenuClick}
-            className={classNames(menuClasses, 'dropdown-menu')}
-            onMouseLeave={isNestedDropdown && this.handleMouseLeave}
-          >
-            {children}
-          </ul>
-        )}
-      </span>
-    );
-  }
-}
-
-export default DropdownReact;
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index e64a1b4305..1b17c4a90a 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -6,7 +6,7 @@ import classNames from 'classnames';
 import ApiMixin from '../../mixins/apiMixin';
 
 import ProjectLabel from '../../components/projectLabel';
-import DropdownReact from '../dropdownReact';
+import DropdownLink from '../dropdownLink';
 import MenuItem from '../menuItem';
 import Link from '../link';
 
@@ -330,7 +330,7 @@ const ProjectSelector = React.createClass({
           {this.state.activeProject
             ? this.getLinkNode(this.state.activeTeam, this.state.activeProject)
             : t('Select a project')}
-          <DropdownReact
+          <DropdownLink
             ref="dropdownLink"
             title=""
             topLevelClasses={dropdownClassNames}
@@ -360,7 +360,7 @@ const ProjectSelector = React.createClass({
               projects: children,
               filter: this.state.filter,
             })}
-          </DropdownReact>
+          </DropdownLink>
         </h3>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/shareIssue.jsx b/src/sentry/static/sentry/app/components/shareIssue.jsx
index 8423a28839..5e1a7785f8 100644
--- a/src/sentry/static/sentry/app/components/shareIssue.jsx
+++ b/src/sentry/static/sentry/app/components/shareIssue.jsx
@@ -9,7 +9,7 @@ import AutoSelectText from './autoSelectText';
 import Button from './buttons/button';
 import Clipboard from './clipboard';
 import Confirm from './confirm';
-import DropdownReact from './dropdownReact';
+import DropdownLink from './dropdownLink';
 import FlowLayout from './flowLayout';
 import IconCopy from '../icons/icon-copy';
 import IconRefresh from '../icons/icon-refresh';
@@ -195,7 +195,7 @@ class ShareIssue extends React.Component {
 
     let shareTitle = 'Share';
 
-    // Needs to wrap in an inline block for DropdownReact,
+    // Needs to wrap in an inline block for DropdownLink,
     // or else dropdown icon gets wrapped?
     const title = (
       <div style={{marginRight: 4}}>
@@ -207,7 +207,7 @@ class ShareIssue extends React.Component {
     );
 
     return (
-      <DropdownReact
+      <DropdownLink
         className={cx}
         shouldIgnoreClickOutside={() => this.hasConfirmModal}
         title={title}
@@ -241,7 +241,7 @@ class ShareIssue extends React.Component {
               />
             )}
         </li>
-      </DropdownReact>
+      </DropdownLink>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index d465bcdfed..8c8c46a740 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -8,7 +8,6 @@ import ApiMixin from '../../mixins/apiMixin';
 import CustomIgnoreCountModal from '../../components/customIgnoreCountModal';
 import CustomIgnoreDurationModal from '../../components/customIgnoreDurationModal';
 import CustomResolutionModal from '../../components/customResolutionModal';
-import DropdownReact from '../../components/dropdownReact';
 import DropdownLink from '../../components/dropdownLink';
 import Duration from '../../components/duration';
 import GroupActions from '../../actions/groupActions';
@@ -104,7 +103,7 @@ const ResolveActions = React.createClass({
             <span className="icon-checkmark" style={{marginRight: 5}} />
             {t('Resolve')}
           </a>
-          <DropdownReact
+          <DropdownLink
             key="resolve-dropdown"
             caret={true}
             className={resolveClassName}
@@ -156,7 +155,7 @@ const ResolveActions = React.createClass({
                 {t('Another version ...')}
               </a>
             </MenuItem>
-          </DropdownReact>
+          </DropdownLink>
         </div>
       </div>
     );
@@ -258,10 +257,10 @@ const IgnoreActions = React.createClass({
             <span className="icon-ban" style={{marginRight: 5}} />
             {t('Ignore')}
           </a>
-          <DropdownReact caret={true} className={linkClassName} title="">
+          <DropdownLink caret={true} className={linkClassName} title="">
             <MenuItem header={true}>Ignore Until</MenuItem>
             <li className="dropdown-submenu">
-              <DropdownReact
+              <DropdownLink
                 title="This occurs again after .."
                 caret={false}
                 isNestedDropdown={true}
@@ -283,10 +282,10 @@ const IgnoreActions = React.createClass({
                 <MenuItem noAnchor={true}>
                   <a onClick={() => this.setState({modal: 'duration'})}>{t('Custom')}</a>
                 </MenuItem>
-              </DropdownReact>
+              </DropdownLink>
             </li>
             <li className="dropdown-submenu">
-              <DropdownReact
+              <DropdownLink
                 title="This occurs again .."
                 caret={false}
                 isNestedDropdown={true}
@@ -294,7 +293,7 @@ const IgnoreActions = React.createClass({
                 {this.getIgnoreCounts().map(count => {
                   return (
                     <li className="dropdown-submenu" key={count}>
-                      <DropdownReact
+                      <DropdownLink
                         title={t('%s times', count.toLocaleString())}
                         caret={false}
                         isNestedDropdown={true}
@@ -322,7 +321,7 @@ const IgnoreActions = React.createClass({
                             </MenuItem>
                           );
                         })}
-                      </DropdownReact>
+                      </DropdownLink>
                     </li>
                   );
                 })}
@@ -330,10 +329,10 @@ const IgnoreActions = React.createClass({
                 <MenuItem noAnchor={true}>
                   <a onClick={() => this.setState({modal: 'count'})}>{t('Custom')}</a>
                 </MenuItem>
-              </DropdownReact>
+              </DropdownLink>
             </li>
             <li className="dropdown-submenu">
-              <DropdownReact
+              <DropdownLink
                 title="This affects an additional .."
                 caret={false}
                 isNestedDropdown={true}
@@ -341,7 +340,7 @@ const IgnoreActions = React.createClass({
                 {this.getIgnoreCounts().map(count => {
                   return (
                     <li className="dropdown-submenu" key={count}>
-                      <DropdownReact
+                      <DropdownLink
                         title={t('%s users', count.toLocaleString())}
                         caret={false}
                         isNestedDropdown={true}
@@ -369,7 +368,7 @@ const IgnoreActions = React.createClass({
                             </MenuItem>
                           );
                         })}
-                      </DropdownReact>
+                      </DropdownLink>
                     </li>
                   );
                 })}
@@ -377,9 +376,9 @@ const IgnoreActions = React.createClass({
                 <MenuItem noAnchor={true}>
                   <a onClick={() => this.setState({modal: 'users'})}>{t('Custom')}</a>
                 </MenuItem>
-              </DropdownReact>
+              </DropdownLink>
             </li>
-          </DropdownReact>
+          </DropdownLink>
         </div>
       </div>
     );
@@ -408,7 +407,11 @@ const DeleteActions = React.createClass({
           <span className="icon-trash" />
         </LinkWithConfirmation>
         {features.has('custom-filters') && (
-          <DropdownLink caret={true} className="group-delete btn btn-default btn-sm">
+          <DropdownLink
+            caret={true}
+            className="group-delete btn btn-default btn-sm"
+            alwaysRenderMenu
+          >
             <li>
               <LinkWithConfirmation
                 title={t('Discard')}
@@ -617,7 +620,7 @@ const GroupDetailsActions = React.createClass({
 
         {group.pluginActions.length > 1 ? (
           <div className="btn-group more">
-            <DropdownReact className="btn btn-default btn-sm" title={t('More')}>
+            <DropdownLink className="btn btn-default btn-sm" title={t('More')}>
               {group.pluginActions.map((action, actionIdx) => {
                 return (
                   <MenuItem key={actionIdx} href={action[1]}>
@@ -625,7 +628,7 @@ const GroupDetailsActions = React.createClass({
                   </MenuItem>
                 );
               })}
-            </DropdownReact>
+            </DropdownLink>
           </div>
         ) : (
           group.pluginActions.length !== 0 &&
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
index ed2792ba64..7a028ec98a 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
@@ -4,7 +4,7 @@ import {sortArray} from '../utils';
 import {t} from '../locale';
 import AsyncView from './asyncView';
 import Confirm from '../components/confirm';
-import DropdownReact from '../components/dropdownReact';
+import DropdownLink from '../components/dropdownLink';
 import IndicatorStore from '../stores/indicatorStore';
 import MenuItem from '../components/menuItem';
 
@@ -134,7 +134,7 @@ export default class OrganizationIntegrations extends AsyncView {
     return (
       <div className="ref-organization-integrations">
         <div className="pull-right">
-          <DropdownReact
+          <DropdownLink
             anchorRight
             alwaysRenderMenu
             className="btn btn-primary btn-sm"
@@ -149,7 +149,7 @@ export default class OrganizationIntegrations extends AsyncView {
                 </MenuItem>
               );
             })}
-          </DropdownReact>
+          </DropdownLink>
         </div>
         <h3 className="m-b-2">{t('Integrations')}</h3>
         {itemList.length > 0 ? (
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
index 7d2353f014..2e9d7828af 100644
--- a/src/sentry/static/sentry/app/views/organizationRepositories.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
@@ -7,7 +7,7 @@ import {sortArray, parseRepo} from '../utils';
 import {t, tct} from '../locale';
 import Button from '../components/buttons/button';
 import Confirm from '../components/confirm';
-import DropdownReact from '../components/dropdownReact';
+import DropdownLink from '../components/dropdownLink';
 import IndicatorStore from '../stores/indicatorStore';
 import MenuItem from '../components/menuItem';
 import OrganizationSettingsView from './organizationSettingsView';
@@ -307,7 +307,7 @@ class OrganizationRepositories extends OrganizationSettingsView {
     return (
       <div>
         <div className="pull-right">
-          <DropdownReact
+          <DropdownLink
             anchorRight
             alwaysRenderMenu
             className="btn btn-primary btn-sm"
@@ -324,7 +324,7 @@ class OrganizationRepositories extends OrganizationSettingsView {
                 </MenuItem>
               );
             })}
-          </DropdownReact>
+          </DropdownLink>
         </div>
         <h3 className="m-b-2">{t('Repositories')}</h3>
         {hasItemList && (
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 3a2b32f38e..21e2e20e13 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -170,7 +170,11 @@ const IgnoreActions = React.createClass({
           >
             <MenuItem header={true}>Ignore Until</MenuItem>
             <li className="dropdown-submenu">
-              <DropdownLink title="This occurs again after .." caret={false}>
+              <DropdownLink
+                title="This occurs again after .."
+                caret={false}
+                isNestedDropdown={true}
+              >
                 {this.getIgnoreDurations().map(duration => {
                   return (
                     <MenuItem noAnchor={true} key={duration}>
@@ -192,13 +196,18 @@ const IgnoreActions = React.createClass({
               </DropdownLink>
             </li>
             <li className="dropdown-submenu">
-              <DropdownLink title="This occurs again .." caret={false}>
+              <DropdownLink
+                title="This occurs again .."
+                caret={false}
+                isNestedDropdown={true}
+              >
                 {this.getIgnoreCounts().map(count => {
                   return (
                     <li className="dropdown-submenu" key={count}>
                       <DropdownLink
                         title={t('%s times', count.toLocaleString())}
                         caret={false}
+                        isNestedDropdown={true}
                       >
                         <MenuItem noAnchor={true}>
                           <ActionLink
@@ -236,13 +245,18 @@ const IgnoreActions = React.createClass({
               </DropdownLink>
             </li>
             <li className="dropdown-submenu">
-              <DropdownLink title="This affects an additional .." caret={false}>
+              <DropdownLink
+                title="This affects an additional .."
+                caret={false}
+                isNestedDropdown={true}
+              >
                 {this.getIgnoreCounts().map(count => {
                   return (
                     <li className="dropdown-submenu" key={count}>
                       <DropdownLink
                         title={t('%s users', count.toLocaleString())}
                         caret={false}
+                        isNestedDropdown={true}
                       >
                         <MenuItem noAnchor={true}>
                           <ActionLink
diff --git a/tests/js/spec/components/__snapshots__/dropdownLink.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownLink.spec.jsx.snap
index 2c3aab8631..08c677a197 100644
--- a/tests/js/spec/components/__snapshots__/dropdownLink.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/dropdownLink.spec.jsx.snap
@@ -2,60 +2,44 @@
 
 exports[`DropdownLink renders and anchors to left by default 1`] = `
 <span
-  className="top-level-class dropdown"
+  className="dropdown top-level-class"
 >
   <a
-    className="dropdown-toggle"
-    data-toggle="dropdown"
+    className="dropdown-actor dropdown-toggle"
+    onClick={[Function]}
   >
-    <div
+    <span
       className="dropdown-actor-title"
     >
-      test
+      <span>
+        test
+      </span>
       <i
         className="icon-arrow-down"
       />
-    </div>
+    </span>
   </a>
-  <ul
-    className="dropdown-menu"
-  >
-    <div>
-      1
-    </div>
-    <div>
-      2
-    </div>
-  </ul>
 </span>
 `;
 
 exports[`DropdownLink renders and anchors to right 1`] = `
 <span
-  className="top-level-class pull-right anchor-right dropdown"
+  className="dropdown top-level-class pull-right anchor-right"
 >
   <a
-    className="dropdown-menu-right dropdown-toggle"
-    data-toggle="dropdown"
+    className="dropdown-actor dropdown-menu-right dropdown-toggle"
+    onClick={[Function]}
   >
-    <div
+    <span
       className="dropdown-actor-title"
     >
-      test
+      <span>
+        test
+      </span>
       <i
         className="icon-arrow-down"
       />
-    </div>
+    </span>
   </a>
-  <ul
-    className="dropdown-menu"
-  >
-    <div>
-      1
-    </div>
-    <div>
-      2
-    </div>
-  </ul>
 </span>
 `;
diff --git a/tests/js/spec/components/__snapshots__/dropdownReact.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownReact.spec.jsx.snap
deleted file mode 100644
index 6ac03915d7..0000000000
--- a/tests/js/spec/components/__snapshots__/dropdownReact.spec.jsx.snap
+++ /dev/null
@@ -1,45 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`DropdownReact renders and anchors to left by default 1`] = `
-<span
-  className="dropdown top-level-class"
->
-  <a
-    className="dropdown-actor dropdown-toggle"
-    onClick={[Function]}
-  >
-    <div
-      className="dropdown-actor-title"
-    >
-      <span>
-        test
-      </span>
-      <i
-        className="icon-arrow-down"
-      />
-    </div>
-  </a>
-</span>
-`;
-
-exports[`DropdownReact renders and anchors to right 1`] = `
-<span
-  className="dropdown top-level-class pull-right anchor-right"
->
-  <a
-    className="dropdown-actor dropdown-menu-right dropdown-toggle"
-    onClick={[Function]}
-  >
-    <div
-      className="dropdown-actor-title"
-    >
-      <span>
-        test
-      </span>
-      <i
-        className="icon-arrow-down"
-      />
-    </div>
-  </a>
-</span>
-`;
diff --git a/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap b/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap
index a1b690601f..6d03777bcc 100644
--- a/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap
@@ -1,7 +1,7 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`ShareIssue renders when busy 1`] = `
-<DropdownReact
+<DropdownLink
   anchorRight={false}
   caret={true}
   className="share-issue btn-sm btn btn-default"
@@ -52,11 +52,11 @@ exports[`ShareIssue renders when busy 1`] = `
       />
     </SpreadLayout>
   </li>
-</DropdownReact>
+</DropdownLink>
 `;
 
 exports[`ShareIssue renders when not shared 1`] = `
-<DropdownReact
+<DropdownLink
   anchorRight={false}
   caret={true}
   className="share-issue btn-sm btn btn-default"
@@ -110,11 +110,11 @@ exports[`ShareIssue renders when not shared 1`] = `
       />
     </SpreadLayout>
   </li>
-</DropdownReact>
+</DropdownLink>
 `;
 
 exports[`ShareIssue renders when not shared 2`] = `
-<DropdownReact
+<DropdownLink
   anchorRight={false}
   caret={true}
   className="share-issue btn-sm btn btn-default"
@@ -176,5 +176,5 @@ exports[`ShareIssue renders when not shared 2`] = `
       shareUrl="http://sentry.io/share/test/"
     />
   </li>
-</DropdownReact>
+</DropdownLink>
 `;
diff --git a/tests/js/spec/components/dropdownLink.spec.jsx b/tests/js/spec/components/dropdownLink.spec.jsx
index c9faa76502..da051d989c 100644
--- a/tests/js/spec/components/dropdownLink.spec.jsx
+++ b/tests/js/spec/components/dropdownLink.spec.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
-import {shallow} from 'enzyme';
+import {shallow, mount} from 'enzyme';
 import DropdownLink from 'app/components/dropdownLink';
 
 describe('DropdownLink', function() {
@@ -12,39 +11,174 @@ describe('DropdownLink', function() {
     menuClasses: '',
   };
 
-  describe('componentWillUnmount()', function() {
-    it('should remove event handlers before unmounting', function() {
-      let dropdownlink = TestUtils.renderIntoDocument(<DropdownLink {...INPUT_1} />);
+  describe('renders', function() {
+    it('and anchors to left by default', function() {
+      let component = shallow(
+        <DropdownLink {...INPUT_1}>
+          <div>1</div>
+          <div>2</div>
+        </DropdownLink>
+      );
 
-      let handlers = jQuery._data(dropdownlink.refs.dropdownToggle.parentNode, 'events');
-      expect(handlers).toBeInstanceOf(Object);
+      expect(component).toMatchSnapshot();
+    });
 
-      dropdownlink.componentWillUnmount(dropdownlink);
+    it('and anchors to right', function() {
+      let component = shallow(
+        <DropdownLink {...INPUT_1} anchorRight>
+          <div>1</div>
+          <div>2</div>
+        </DropdownLink>
+      );
 
-      handlers = jQuery._data(dropdownlink.refs.dropdownToggle.parentNode, 'events');
-      expect(handlers).toBe(undefined);
+      expect(component).toMatchSnapshot();
     });
   });
 
-  it('renders and anchors to left by default', function() {
-    let component = shallow(
-      <DropdownLink {...INPUT_1}>
-        <div>1</div>
-        <div>2</div>
-      </DropdownLink>
-    );
+  describe('Uncontrolled', function() {
+    let wrapper;
+
+    beforeEach(function() {
+      if (wrapper) {
+        wrapper.unmount();
+      }
+
+      wrapper = mount(
+        <DropdownLink title="test">
+          <li>hi</li>
+        </DropdownLink>
+      );
+    });
+
+    describe('While Closed', function() {
+      it('displays dropdown menu when dropdown actor button clicked', function() {
+        expect(wrapper.find('li').length).toBe(0);
+        expect(wrapper.state('isOpen')).toBe(false);
+
+        // open
+        wrapper.find('a').simulate('click');
+        expect(wrapper.state('isOpen')).toBe(true);
+        expect(wrapper.find('li').length).toBe(1);
+      });
+    });
+    describe('While Opened', function() {
+      beforeEach(function() {
+        // Opens dropdown menu
+        wrapper.find('a').simulate('click');
+      });
+
+      it.skip('closes when clicked outside', function() {
+        jQuery(document).click();
+        expect(wrapper.state('isOpen')).toBe(false);
+        expect(wrapper.instance().checkClickOutside).toHaveBeenCalled();
+      });
+
+      it('closes when dropdown actor button is clicked', function() {
+        wrapper.find('a').simulate('click');
+        expect(wrapper.state('isOpen')).toBe(false);
+      });
 
-    expect(component).toMatchSnapshot();
+      it('closes when dropdown menu item is clicked', function() {
+        wrapper.find('li').simulate('click');
+        expect(wrapper.state('isOpen')).toBe(false);
+      });
+
+      it('does not close when menu is clicked and `keepMenuOpen` is on', function() {
+        wrapper = mount(
+          <DropdownLink title="test" keepMenuOpen>
+            <li>hi</li>
+          </DropdownLink>
+        );
+        wrapper.find('a').simulate('click');
+        wrapper.find('li').simulate('click');
+        expect(wrapper.state('isOpen')).toBe(true);
+        wrapper.unmount();
+      });
+    });
   });
 
-  it('renders and anchors to right', function() {
-    let component = shallow(
-      <DropdownLink {...INPUT_1} anchorRight>
-        <div>1</div>
-        <div>2</div>
-      </DropdownLink>
-    );
+  describe('Controlled', function() {
+    let wrapper;
+
+    beforeEach(function() {
+      if (wrapper) {
+        wrapper.unmount();
+      }
+    });
+    describe('Opened', function() {
+      beforeEach(function() {
+        wrapper = mount(
+          <DropdownLink isOpen={true} title="test">
+            <li>hi</li>
+          </DropdownLink>
+        );
+      });
+
+      it('does not close when menu is clicked', function() {
+        // open
+        wrapper.find('li').simulate('click');
+        // State does not change
+        expect(wrapper.state('isOpen')).toBe(false);
+        expect(wrapper.find('.dropdown-menu').length).toBe(1);
+      });
 
-    expect(component).toMatchSnapshot();
+      it('does not close when document is clicked', function() {
+        jQuery(document).click();
+        // State does not change
+        expect(wrapper.state('isOpen')).toBe(false);
+        expect(wrapper.find('.dropdown-menu').length).toBe(1);
+      });
+
+      it('does not close when dropdown actor is clicked', function() {
+        wrapper.find('a').simulate('click');
+        // State does not change
+        expect(wrapper.state('isOpen')).toBe(false);
+        expect(wrapper.find('.dropdown-menu').length).toBe(1);
+      });
+    });
+    describe('Closed', function() {
+      beforeEach(function() {
+        wrapper = mount(
+          <DropdownLink isOpen={false} title="test">
+            <li>hi</li>
+          </DropdownLink>
+        );
+      });
+
+      it('does not open when dropdown actor is clicked', function() {
+        wrapper.find('a').simulate('click');
+        // State does not change
+        expect(wrapper.state('isOpen')).toBe(false);
+        expect(wrapper.find('.dropdown-menu').length).toBe(0);
+      });
+    });
+  });
+
+  describe('Nested Dropdown', function() {
+    let wrapper;
+
+    beforeEach(function() {
+      if (wrapper) {
+        wrapper.unmount();
+      }
+
+      wrapper = mount(
+        <DropdownLink title="parent">
+          <DropdownLink title="nested" isNestedDropdown={true}>
+            Test
+          </DropdownLink>
+        </DropdownLink>
+      );
+    });
+
+    it('Opens / closes on mouse enter and leave', function() {
+      wrapper.find('a').simulate('click');
+      wrapper.find('.dropdown-menu a').simulate('mouseEnter');
+      expect(wrapper.find('.dropdown-menu').length).toBe(2);
+
+      wrapper.find('.dropdown-menu a').simulate('mouseLeave');
+
+      expect(wrapper.find('.dropdown-menu').length).toBe(1);
+    });
   });
 });
diff --git a/tests/js/spec/components/dropdownReact.spec.jsx b/tests/js/spec/components/dropdownReact.spec.jsx
deleted file mode 100644
index 6d1a869400..0000000000
--- a/tests/js/spec/components/dropdownReact.spec.jsx
+++ /dev/null
@@ -1,184 +0,0 @@
-import React from 'react';
-import {shallow, mount} from 'enzyme';
-import DropdownReact from 'app/components/dropdownReact';
-
-describe('DropdownReact', function() {
-  const INPUT_1 = {
-    title: 'test',
-    onOpen: () => {},
-    onClose: () => {},
-    topLevelClasses: 'top-level-class',
-    menuClasses: '',
-  };
-
-  describe('renders', function() {
-    it('and anchors to left by default', function() {
-      let component = shallow(
-        <DropdownReact {...INPUT_1}>
-          <div>1</div>
-          <div>2</div>
-        </DropdownReact>
-      );
-
-      expect(component).toMatchSnapshot();
-    });
-
-    it('and anchors to right', function() {
-      let component = shallow(
-        <DropdownReact {...INPUT_1} anchorRight>
-          <div>1</div>
-          <div>2</div>
-        </DropdownReact>
-      );
-
-      expect(component).toMatchSnapshot();
-    });
-  });
-
-  describe('Uncontrolled', function() {
-    let wrapper;
-
-    beforeEach(function() {
-      if (wrapper) {
-        wrapper.unmount();
-      }
-
-      wrapper = mount(
-        <DropdownReact title="test">
-          <li>hi</li>
-        </DropdownReact>
-      );
-    });
-
-    describe('While Closed', function() {
-      it('displays dropdown menu when dropdown actor button clicked', function() {
-        expect(wrapper.find('li').length).toBe(0);
-        expect(wrapper.state('isOpen')).toBe(false);
-
-        // open
-        wrapper.find('a').simulate('click');
-        expect(wrapper.state('isOpen')).toBe(true);
-        expect(wrapper.find('li').length).toBe(1);
-      });
-    });
-    describe('While Opened', function() {
-      beforeEach(function() {
-        // Opens dropdown menu
-        wrapper.find('a').simulate('click');
-      });
-
-      it.skip('closes when clicked outside', function() {
-        jQuery(document).click();
-        expect(wrapper.state('isOpen')).toBe(false);
-        expect(wrapper.instance().checkClickOutside).toHaveBeenCalled();
-      });
-
-      it('closes when dropdown actor button is clicked', function() {
-        wrapper.find('a').simulate('click');
-        expect(wrapper.state('isOpen')).toBe(false);
-      });
-
-      it('closes when dropdown menu item is clicked', function() {
-        wrapper.find('li').simulate('click');
-        expect(wrapper.state('isOpen')).toBe(false);
-      });
-
-      it('does not close when menu is clicked and `keepMenuOpen` is on', function() {
-        wrapper = mount(
-          <DropdownReact title="test" keepMenuOpen>
-            <li>hi</li>
-          </DropdownReact>
-        );
-        wrapper.find('a').simulate('click');
-        wrapper.find('li').simulate('click');
-        expect(wrapper.state('isOpen')).toBe(true);
-        wrapper.unmount();
-      });
-    });
-  });
-
-  describe('Controlled', function() {
-    let wrapper;
-
-    beforeEach(function() {
-      if (wrapper) {
-        wrapper.unmount();
-      }
-    });
-    describe('Opened', function() {
-      beforeEach(function() {
-        wrapper = mount(
-          <DropdownReact isOpen={true} title="test">
-            <li>hi</li>
-          </DropdownReact>
-        );
-      });
-
-      it('does not close when menu is clicked', function() {
-        // open
-        wrapper.find('li').simulate('click');
-        // State does not change
-        expect(wrapper.state('isOpen')).toBe(false);
-        expect(wrapper.find('.dropdown-menu').length).toBe(1);
-      });
-
-      it('does not close when document is clicked', function() {
-        jQuery(document).click();
-        // State does not change
-        expect(wrapper.state('isOpen')).toBe(false);
-        expect(wrapper.find('.dropdown-menu').length).toBe(1);
-      });
-
-      it('does not close when dropdown actor is clicked', function() {
-        wrapper.find('a').simulate('click');
-        // State does not change
-        expect(wrapper.state('isOpen')).toBe(false);
-        expect(wrapper.find('.dropdown-menu').length).toBe(1);
-      });
-    });
-    describe('Closed', function() {
-      beforeEach(function() {
-        wrapper = mount(
-          <DropdownReact isOpen={false} title="test">
-            <li>hi</li>
-          </DropdownReact>
-        );
-      });
-
-      it('does not open when dropdown actor is clicked', function() {
-        wrapper.find('a').simulate('click');
-        // State does not change
-        expect(wrapper.state('isOpen')).toBe(false);
-        expect(wrapper.find('.dropdown-menu').length).toBe(0);
-      });
-    });
-  });
-
-  describe('Nested Dropdown', function() {
-    let wrapper;
-
-    beforeEach(function() {
-      if (wrapper) {
-        wrapper.unmount();
-      }
-
-      wrapper = mount(
-        <DropdownReact title="parent">
-          <DropdownReact title="nested" isNestedDropdown={true}>
-            Test
-          </DropdownReact>
-        </DropdownReact>
-      );
-    });
-
-    it('Opens / closes on mouse enter and leave', function() {
-      wrapper.find('a').simulate('click');
-      wrapper.find('.dropdown-menu a').simulate('mouseEnter');
-      expect(wrapper.find('.dropdown-menu').length).toBe(2);
-
-      wrapper.find('.dropdown-menu a').simulate('mouseLeave');
-
-      expect(wrapper.find('.dropdown-menu').length).toBe(1);
-    });
-  });
-});
diff --git a/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap b/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap
index bb4a922d3b..79b193b212 100644
--- a/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap
+++ b/tests/js/spec/components/projectHeader/__snapshots__/projectSelector.spec.jsx.snap
@@ -46,7 +46,7 @@ exports[`ProjectSelector render() can filter projects by project name 1`] = `
         </a>
       </Link>
       Select a project
-      <DropdownReact
+      <DropdownLink
         anchorRight={false}
         caret={true}
         disabled={false}
@@ -64,14 +64,14 @@ exports[`ProjectSelector render() can filter projects by project name 1`] = `
             className="dropdown-actor dropdown-toggle hover"
             onClick={[Function]}
           >
-            <div
+            <span
               className="dropdown-actor-title"
             >
               <span />
               <i
                 className="icon-arrow-down"
               />
-            </div>
+            </span>
           </a>
           <ul
             className="dropdown-menu"
@@ -121,7 +121,7 @@ exports[`ProjectSelector render() can filter projects by project name 1`] = `
             </MenuItem>
           </ul>
         </span>
-      </DropdownReact>
+      </DropdownLink>
     </h3>
   </div>
 </ProjectSelector>
@@ -173,7 +173,7 @@ exports[`ProjectSelector render() can filter projects by team name/project name
         </a>
       </Link>
       Select a project
-      <DropdownReact
+      <DropdownLink
         anchorRight={false}
         caret={true}
         disabled={false}
@@ -191,14 +191,14 @@ exports[`ProjectSelector render() can filter projects by team name/project name
             className="dropdown-actor dropdown-toggle hover"
             onClick={[Function]}
           >
-            <div
+            <span
               className="dropdown-actor-title"
             >
               <span />
               <i
                 className="icon-arrow-down"
               />
-            </div>
+            </span>
           </a>
           <ul
             className="dropdown-menu"
@@ -269,7 +269,7 @@ exports[`ProjectSelector render() can filter projects by team name/project name
             </MenuItem>
           </ul>
         </span>
-      </DropdownReact>
+      </DropdownLink>
     </h3>
   </div>
 </ProjectSelector>
@@ -289,7 +289,7 @@ exports[`ProjectSelector render() lists projects and has filter 1`] = `
       />
     </Link>
     Select a project
-    <DropdownReact
+    <DropdownLink
       anchorRight={false}
       caret={true}
       disabled={false}
@@ -332,7 +332,7 @@ exports[`ProjectSelector render() lists projects and has filter 1`] = `
           Test Project
         </span>
       </MenuItem>
-    </DropdownReact>
+    </DropdownLink>
   </h3>
 </div>
 `;
@@ -351,7 +351,7 @@ exports[`ProjectSelector render() should show empty message and create project b
       />
     </Link>
     Select a project
-    <DropdownReact
+    <DropdownLink
       anchorRight={false}
       caret={true}
       disabled={false}
@@ -386,7 +386,7 @@ exports[`ProjectSelector render() should show empty message and create project b
           Create project
         </a>
       </MenuItem>
-    </DropdownReact>
+    </DropdownLink>
   </h3>
 </div>
 `;
@@ -405,7 +405,7 @@ exports[`ProjectSelector render() should show empty message with no projects but
       />
     </Link>
     Select a project
-    <DropdownReact
+    <DropdownLink
       anchorRight={false}
       caret={true}
       disabled={false}
@@ -426,7 +426,7 @@ exports[`ProjectSelector render() should show empty message with no projects but
           You have no projects.
         </div>
       </MenuItem>
-    </DropdownReact>
+    </DropdownLink>
   </h3>
 </div>
 `;
@@ -477,7 +477,7 @@ exports[`ProjectSelector render() shows empty filter message when filtering has
         </a>
       </Link>
       Select a project
-      <DropdownReact
+      <DropdownLink
         anchorRight={false}
         caret={true}
         disabled={false}
@@ -495,14 +495,14 @@ exports[`ProjectSelector render() shows empty filter message when filtering has
             className="dropdown-actor dropdown-toggle hover"
             onClick={[Function]}
           >
-            <div
+            <span
               className="dropdown-actor-title"
             >
               <span />
               <i
                 className="icon-arrow-down"
               />
-            </div>
+            </span>
           </a>
           <ul
             className="dropdown-menu"
@@ -541,7 +541,7 @@ exports[`ProjectSelector render() shows empty filter message when filtering has
             </MenuItem>
           </ul>
         </span>
-      </DropdownReact>
+      </DropdownLink>
     </h3>
   </div>
 </ProjectSelector>
diff --git a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
index bd200a482f..5efc50989e 100644
--- a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
@@ -17,7 +17,7 @@ exports[`OrganizationIntegrations render() with a provider renders 1`] = `
       <div
         className="pull-right"
       >
-        <DropdownReact
+        <DropdownLink
           alwaysRenderMenu={true}
           anchorRight={true}
           caret={true}
@@ -33,7 +33,7 @@ exports[`OrganizationIntegrations render() with a provider renders 1`] = `
               className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
               onClick={[Function]}
             >
-              <div
+              <span
                 className="dropdown-actor-title"
               >
                 <span>
@@ -42,7 +42,7 @@ exports[`OrganizationIntegrations render() with a provider renders 1`] = `
                 <i
                   className="icon-arrow-down"
                 />
-              </div>
+              </span>
             </a>
             <ul
               className="dropdown-menu"
@@ -66,7 +66,7 @@ exports[`OrganizationIntegrations render() with a provider renders 1`] = `
               </MenuItem>
             </ul>
           </span>
-        </DropdownReact>
+        </DropdownLink>
       </div>
       <h3
         className="m-b-2"
@@ -118,7 +118,7 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
       <div
         className="pull-right"
       >
-        <DropdownReact
+        <DropdownLink
           alwaysRenderMenu={true}
           anchorRight={true}
           caret={true}
@@ -134,7 +134,7 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
               className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
               onClick={[Function]}
             >
-              <div
+              <span
                 className="dropdown-actor-title"
               >
                 <span>
@@ -143,7 +143,7 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
                 <i
                   className="icon-arrow-down"
                 />
-              </div>
+              </span>
             </a>
             <ul
               className="dropdown-menu"
@@ -167,7 +167,7 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
               </MenuItem>
             </ul>
           </span>
-        </DropdownReact>
+        </DropdownLink>
       </div>
       <h3
         className="m-b-2"
@@ -302,7 +302,7 @@ exports[`OrganizationIntegrations render() without any providers is loading when
     <div
       className="pull-right"
     >
-      <DropdownReact
+      <DropdownLink
         alwaysRenderMenu={true}
         anchorRight={true}
         caret={true}
@@ -361,7 +361,7 @@ exports[`OrganizationIntegrations render() without any providers renders 1`] = `
       <div
         className="pull-right"
       >
-        <DropdownReact
+        <DropdownLink
           alwaysRenderMenu={true}
           anchorRight={true}
           caret={true}
@@ -377,7 +377,7 @@ exports[`OrganizationIntegrations render() without any providers renders 1`] = `
               className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
               onClick={[Function]}
             >
-              <div
+              <span
                 className="dropdown-actor-title"
               >
                 <span>
@@ -386,14 +386,14 @@ exports[`OrganizationIntegrations render() without any providers renders 1`] = `
                 <i
                   className="icon-arrow-down"
                 />
-              </div>
+              </span>
             </a>
             <ul
               className="dropdown-menu"
               onClick={[Function]}
             />
           </span>
-        </DropdownReact>
+        </DropdownLink>
       </div>
       <h3
         className="m-b-2"
diff --git a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
index e586be5ba9..6211762850 100644
--- a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
@@ -15,7 +15,7 @@ exports[`OrganizationRepositories render() with a provider renders 1`] = `
       <div
         className="pull-right"
       >
-        <DropdownReact
+        <DropdownLink
           alwaysRenderMenu={true}
           anchorRight={true}
           caret={true}
@@ -31,7 +31,7 @@ exports[`OrganizationRepositories render() with a provider renders 1`] = `
               className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
               onClick={[Function]}
             >
-              <div
+              <span
                 className="dropdown-actor-title"
               >
                 <span>
@@ -40,7 +40,7 @@ exports[`OrganizationRepositories render() with a provider renders 1`] = `
                 <i
                   className="icon-arrow-down"
                 />
-              </div>
+              </span>
             </a>
             <ul
               className="dropdown-menu"
@@ -133,7 +133,7 @@ exports[`OrganizationRepositories render() with a provider renders 1`] = `
               </MenuItem>
             </ul>
           </span>
-        </DropdownReact>
+        </DropdownLink>
       </div>
       <h3
         className="m-b-2"
@@ -183,7 +183,7 @@ exports[`OrganizationRepositories render() with a provider renders with a reposi
       <div
         className="pull-right"
       >
-        <DropdownReact
+        <DropdownLink
           alwaysRenderMenu={true}
           anchorRight={true}
           caret={true}
@@ -199,7 +199,7 @@ exports[`OrganizationRepositories render() with a provider renders with a reposi
               className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
               onClick={[Function]}
             >
-              <div
+              <span
                 className="dropdown-actor-title"
               >
                 <span>
@@ -208,7 +208,7 @@ exports[`OrganizationRepositories render() with a provider renders with a reposi
                 <i
                   className="icon-arrow-down"
                 />
-              </div>
+              </span>
             </a>
             <ul
               className="dropdown-menu"
@@ -301,7 +301,7 @@ exports[`OrganizationRepositories render() with a provider renders with a reposi
               </MenuItem>
             </ul>
           </span>
-        </DropdownReact>
+        </DropdownLink>
       </div>
       <h3
         className="m-b-2"
@@ -465,7 +465,7 @@ exports[`OrganizationRepositories render() without any providers is loading when
     <div
       className="pull-right"
     >
-      <DropdownReact
+      <DropdownLink
         alwaysRenderMenu={true}
         anchorRight={true}
         caret={true}
@@ -522,7 +522,7 @@ exports[`OrganizationRepositories render() without any providers renders 1`] = `
       <div
         className="pull-right"
       >
-        <DropdownReact
+        <DropdownLink
           alwaysRenderMenu={true}
           anchorRight={true}
           caret={true}
@@ -538,7 +538,7 @@ exports[`OrganizationRepositories render() without any providers renders 1`] = `
               className="dropdown-actor btn btn-primary btn-sm dropdown-menu-right dropdown-toggle hover"
               onClick={[Function]}
             >
-              <div
+              <span
                 className="dropdown-actor-title"
               >
                 <span>
@@ -547,14 +547,14 @@ exports[`OrganizationRepositories render() without any providers renders 1`] = `
                 <i
                   className="icon-arrow-down"
                 />
-              </div>
+              </span>
             </a>
             <ul
               className="dropdown-menu"
               onClick={[Function]}
             />
           </span>
-        </DropdownReact>
+        </DropdownLink>
       </div>
       <h3
         className="m-b-2"
