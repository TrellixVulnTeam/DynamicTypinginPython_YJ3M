commit f8b64babedd590a7105c0cb6f238921ea371edb4
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 11 12:01:38 2017 -0700

    [analytics] add map attribute to events

diff --git a/src/sentry/analytics/__init__.py b/src/sentry/analytics/__init__.py
index af12e81073..97a61f2b94 100644
--- a/src/sentry/analytics/__init__.py
+++ b/src/sentry/analytics/__init__.py
@@ -7,7 +7,7 @@ from sentry.utils.services import LazyServiceWrapper
 
 from .base import Analytics  # NOQA
 from .event_manager import default_manager
-from .event import Attribute, Event  # NOQA
+from .event import *  # NOQA
 
 
 def get_backend_path(backend):
diff --git a/src/sentry/analytics/base.py b/src/sentry/analytics/base.py
index 1bc2908122..866909dfb0 100644
--- a/src/sentry/analytics/base.py
+++ b/src/sentry/analytics/base.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+__all__ = ('Analytics',)
+
 import six
 
 from sentry.utils.services import Service
diff --git a/src/sentry/analytics/event.py b/src/sentry/analytics/event.py
index 4ea8ed7c97..32a1a1a82e 100644
--- a/src/sentry/analytics/event.py
+++ b/src/sentry/analytics/event.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+__all__ = ('Attribute', 'Event', 'Map')
+
 import six
 
 from django.utils import timezone
@@ -14,6 +16,32 @@ class Attribute(object):
         self.required = required
 
 
+class Map(Attribute):
+    def __init__(self, name, attributes, required=True):
+        self.name = name
+        self.required = required
+        self.attributes = attributes
+
+    def type(self, value):
+        if not isinstance(value, dict):
+            raise ValueError('Value must be a dictionary')
+
+        data = {}
+        for attr in self.attributes:
+            if attr.required:
+                nv = value.pop(attr.name)
+            else:
+                nv = value.pop(attr.name, None)
+            data[attr.name] = attr.type(nv) if nv is not None else nv
+
+        if value:
+            raise ValueError(u'Unknown attributes: {}'.format(
+                ', '.join(value.keys()),
+            ))
+
+        return data
+
+
 class Event(object):
     __slots__ = ['attributes', 'data', 'datetime', 'type']
 
diff --git a/tests/sentry/analytics/test_event.py b/tests/sentry/analytics/test_event.py
new file mode 100644
index 0000000000..15652258c4
--- /dev/null
+++ b/tests/sentry/analytics/test_event.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.analytics import Attribute, Event, Map
+from sentry.testutils import TestCase
+
+
+class ExampleEvent(Event):
+    type = 'example'
+
+    attributes = (
+        Attribute('id', type=int),
+        Map('map', (
+            Attribute('key'),
+        )),
+        Attribute('optional', type=bool, required=False),
+    )
+
+
+class EventTest(TestCase):
+    def test_simple(self):
+        result = ExampleEvent(id='1', map={'key': 'value'}, optional=False)
+        assert result.data == {
+            'id': 1,
+            'map': {
+                'key': 'value',
+            },
+            'optional': False,
+        }
+
+    def test_optional_is_optional(self):
+        result = ExampleEvent(id='1', map={'key': 'value'})
+        assert result.data == {
+            'id': 1,
+            'map': {
+                'key': 'value',
+            },
+            'optional': None,
+        }
+
+    def test_invalid_map(self):
+        with pytest.raises(ValueError):
+            ExampleEvent(id='1', map='foo')
