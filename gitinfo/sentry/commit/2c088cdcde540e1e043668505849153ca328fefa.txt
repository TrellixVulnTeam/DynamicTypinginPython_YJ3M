commit 2c088cdcde540e1e043668505849153ca328fefa
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 19 10:24:08 2020 -0800

    feat(workflow): Fix forms on new Issue Alerts (#17069)
    
    This fixes issues with the new react-select on the new Issue Alerts view. This also moves around API calls so that we do not show the alert type chooser when editing an Issue Alert.
    
    * change loading condition
    * update rule node select to not use legacy control
    * default ruleNode inputs to empty string as value

diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index 851201a755..39369df8d8 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -176,7 +176,7 @@ const SelectControl = props => {
   const mappedValue =
     props.multiple && Array.isArray(value)
       ? value.map(val => choicesOrOptions.find(option => option.value === val))
-      : choicesOrOptions.find(opt => opt.value === value);
+      : choicesOrOptions.find(opt => opt.value === value) || value;
 
   // Allow the provided `styles` prop to override default styles using the same
   // function interface provided by react-styled. This ensures the `provided`
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 737ef31549..6a1bc53db7 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -359,7 +359,7 @@ function routes() {
             name="Edit Alert Rule"
             componentPromise={() =>
               import(
-                /* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/ruleDetailsNew'
+                /* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/issueEditor'
               )
             }
             component={errorHandler(LazyLoad)}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
index dc9c846c90..662fa64106 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -4,6 +4,8 @@ import React from 'react';
 import {Organization, Project} from 'app/types';
 import {createDefaultRule} from 'app/views/settings/incidentRules/constants';
 import recreateRoute from 'app/utils/recreateRoute';
+import withOrganization from 'app/utils/withOrganization';
+import withProject from 'app/utils/withProject';
 
 import RuleForm from './ruleForm';
 
@@ -41,4 +43,4 @@ class IncidentRulesCreate extends React.Component<Props> {
   }
 }
 
-export default IncidentRulesCreate;
+export default withProject(withOrganization(IncidentRulesCreate));
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index d0dd5a586f..49bd481b77 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -5,7 +5,6 @@ import classNames from 'classnames';
 import styled from '@emotion/styled';
 
 import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
-import {Client} from 'app/api';
 import {Environment, Organization, Project} from 'app/types';
 import {
   IssueAlertRule,
@@ -21,6 +20,7 @@ import {
 } from 'app/actionCreators/indicator';
 import {getDisplayName} from 'app/utils/environment';
 import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
 import Form from 'app/views/settings/components/forms/form';
 import LoadingMask from 'app/components/loadingMask';
 import PanelAlert from 'app/components/panels/panelAlert';
@@ -31,7 +31,8 @@ import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import TextField from 'app/views/settings/components/forms/textField';
 import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+import withProject from 'app/utils/withProject';
 
 import RuleNodeList from './ruleNodeList';
 
@@ -66,20 +67,20 @@ const defaultRule: UnsavedIssueAlertRule = {
 type ConditionOrAction = string;
 
 type Props = {
-  api: Client;
-  actions: IssueAlertRuleActionTemplate[] | null;
-  conditions: IssueAlertRuleConditionTemplate[] | null;
   project: Project;
   organization: Organization;
 } & RouteComponentProps<{orgId: string; projectId: string; ruleId: string}, {}>;
 
-type State = {
+type State = AsyncView['state'] & {
   rule: UnsavedIssueAlertRule | IssueAlertRule;
-  loading: boolean;
-  error: null | {
+  detailedError: null | {
     [key: string]: string[];
   };
   environments: Environment[];
+  configs: {
+    actions: IssueAlertRuleActionTemplate[];
+    conditions: IssueAlertRuleConditionTemplate[];
+  } | null;
 };
 
 function isSavedAlertRule(
@@ -88,37 +89,32 @@ function isSavedAlertRule(
   return rule.hasOwnProperty('id');
 }
 
-class IssueRuleEditor extends React.Component<Props, State> {
-  state: State = {
-    rule: {...defaultRule},
-    loading: false,
-    error: null,
-    environments: [],
-  };
-
-  componentDidMount() {
-    this.fetchData();
+class IssueRuleEditor extends AsyncView<Props, State> {
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      configs: null,
+      detailedError: null,
+      rule: {...defaultRule},
+      environments: [],
+    };
   }
 
-  async fetchData() {
+  getEndpoints() {
     const {
-      api,
       params: {ruleId, projectId, orgId},
     } = this.props;
 
-    const promises = [
-      api.requestPromise(`/projects/${orgId}/${projectId}/environments/`),
-      ruleId
-        ? api.requestPromise(`/projects/${orgId}/${projectId}/rules/${ruleId}/`)
-        : Promise.resolve(defaultRule),
+    const endpoints = [
+      ['environments', `/projects/${orgId}/${projectId}/environments/`],
+      ['configs', `/projects/${orgId}/${projectId}/rules/configuration/`],
     ];
 
-    try {
-      const [environments, rule] = await Promise.all(promises);
-      this.setState({environments, rule});
-    } catch (_err) {
-      addErrorMessage(t('Unable to fetch data'));
+    if (ruleId) {
+      endpoints.push(['rule', `/projects/${orgId}/${projectId}/rules/${ruleId}/`]);
     }
+
+    return endpoints as [string, string][];
   }
 
   handleSubmit = async () => {
@@ -136,18 +132,18 @@ class IssueRuleEditor extends React.Component<Props, State> {
     addLoadingMessage(t('Saving...'));
 
     try {
-      const resp = await this.props.api.requestPromise(endpoint, {
+      const resp = await this.api.requestPromise(endpoint, {
         method: isNew ? 'POST' : 'PUT',
         data: rule,
       });
 
-      this.setState({error: null, loading: false, rule: resp});
+      this.setState({detailedError: null, rule: resp});
 
       addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
       browserHistory.replace(recreateRoute('', {...this.props, stepBack: -1}));
     } catch (err) {
       this.setState({
-        error: err.responseJSON || {__all__: 'Unknown error'},
+        detailedError: err.responseJSON || {__all__: 'Unknown error'},
         loading: false,
       });
       addErrorMessage(t('An error occurred'));
@@ -161,13 +157,13 @@ class IssueRuleEditor extends React.Component<Props, State> {
   };
 
   hasError = (field: string) => {
-    const {error} = this.state;
+    const {detailedError} = this.state;
 
-    if (!error) {
+    if (!detailedError) {
       return false;
     }
 
-    return error.hasOwnProperty(field);
+    return detailedError.hasOwnProperty(field);
   };
 
   handleEnvironmentChange = (val: string) => {
@@ -190,9 +186,11 @@ class IssueRuleEditor extends React.Component<Props, State> {
   handlePropertyChange = (type: ConditionOrAction) => {
     return (idx: number) => {
       return (prop: string, val: string) => {
-        const rule = {...this.state.rule} as IssueAlertRule;
-        rule[type][idx][prop] = val;
-        this.setState({rule});
+        this.setState(state => {
+          const rule = {...state.rule} as IssueAlertRule;
+          rule[type][idx][prop] = val;
+          return {rule};
+        });
       };
     };
   };
@@ -233,7 +231,11 @@ class IssueRuleEditor extends React.Component<Props, State> {
     };
   };
 
-  render() {
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
     const {projectId, ruleId} = this.props.params;
     const {environments} = this.state;
     const environmentChoices = [
@@ -241,7 +243,7 @@ class IssueRuleEditor extends React.Component<Props, State> {
       ...environments.map(env => [env.name, getDisplayName(env)]),
     ];
 
-    const {rule, error} = this.state;
+    const {rule, detailedError} = this.state;
     const {actionMatch, actions, conditions, frequency, name} = rule || {};
 
     const environment =
@@ -259,14 +261,14 @@ class IssueRuleEditor extends React.Component<Props, State> {
           key={isSavedAlertRule(rule) ? rule.id : undefined}
           onCancel={this.handleCancel}
           onSubmit={this.handleSubmit}
-          initialData={rule as object}
+          initialData={{...rule, environment, actionMatch, frequency: `${frequency}`}}
           submitLabel={t('Save Rule')}
         >
-          {ruleId && !this.state.rule && <SemiTransparentLoadingMask />}
+          {this.state.loading && <SemiTransparentLoadingMask />}
           <Panel>
             <PanelHeader>{t('Configure Rule Conditions')}</PanelHeader>
             <PanelBody>
-              {error && (
+              {detailedError && (
                 <PanelAlert type="error">
                   {t(
                     'There was an error saving your changes. Make sure all fields are valid and try again.'
@@ -282,10 +284,8 @@ class IssueRuleEditor extends React.Component<Props, State> {
                 placeholder={t('Select an Environment')}
                 clearable={false}
                 name="environment"
-                value={environment}
                 choices={environmentChoices}
                 onChange={val => this.handleEnvironmentChange(val)}
-                multiple
               />
 
               <PanelSubHeader>
@@ -297,11 +297,16 @@ class IssueRuleEditor extends React.Component<Props, State> {
                         error: this.hasError('actionMatch'),
                       })}
                       inline={false}
-                      height="20"
-                      clearable={false}
-                      search={false}
+                      styles={{
+                        control: provided => ({
+                          ...provided,
+                          minHeight: '20px',
+                          height: '20px',
+                        }),
+                      }}
+                      isSearchable={false}
+                      isClearable={false}
                       name="actionMatch"
-                      value={actionMatch}
                       required
                       flexibleControlStateSize
                       choices={ACTION_MATCH_CHOICES}
@@ -312,12 +317,14 @@ class IssueRuleEditor extends React.Component<Props, State> {
               </PanelSubHeader>
 
               {this.hasError('conditions') && (
-                <PanelAlert type="error">{this.state.error!.conditions[0]}</PanelAlert>
+                <PanelAlert type="error">
+                  {this.state.detailedError?.conditions[0]}
+                </PanelAlert>
               )}
 
               <PanelRuleItem>
                 <RuleNodeList
-                  nodes={this.props.conditions}
+                  nodes={this.state.configs?.conditions ?? null}
                   items={conditions || []}
                   placeholder={t('Add a condition...')}
                   onPropertyChange={this.handlePropertyChange('conditions')}
@@ -329,12 +336,14 @@ class IssueRuleEditor extends React.Component<Props, State> {
               <PanelSubHeader>{t('Perform these actions')}</PanelSubHeader>
 
               {this.hasError('actions') && (
-                <PanelAlert type="error">{this.state.error!.actions[0]}</PanelAlert>
+                <PanelAlert type="error">
+                  {this.state.detailedError?.actions[0]}
+                </PanelAlert>
               )}
 
               <PanelRuleItem>
                 <RuleNodeList
-                  nodes={this.props.actions}
+                  nodes={this.state.configs?.actions ?? null}
                   items={actions || []}
                   placeholder={t('Add an action...')}
                   onPropertyChange={this.handlePropertyChange('actions')}
@@ -382,7 +391,7 @@ class IssueRuleEditor extends React.Component<Props, State> {
   }
 }
 
-export default withApi(IssueRuleEditor);
+export default withProject(withOrganization(IssueRuleEditor));
 
 const StyledForm = styled(Form)`
   position: relative;
@@ -394,7 +403,7 @@ const PanelRuleItem = styled(PanelItem)`
 
 const EmbeddedWrapper = styled('div')`
   margin: 0 ${space(1)};
-  width: 72px;
+  width: 80px;
 `;
 
 const EmbeddedSelectField = styled(SelectField)`
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
index b9ccebe1db..87cec59245 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
@@ -49,16 +49,14 @@ class RuleNode extends React.Component<Props> {
 
     return (
       <SelectControl
-        deprecatedSelectControl
-        clearable={false}
+        isClearable={false}
         placeholder={t('Select integration')}
         noResultsText={t('No integrations available')}
-        height="35"
         name={name}
         value={initialVal}
         choices={fieldConfig.choices}
         key={name}
-        onChange={val => this.props.onPropertyChange(name, val)}
+        onChange={({value}) => this.props.onPropertyChange(name, value)}
       />
     );
   };
@@ -70,7 +68,7 @@ class RuleNode extends React.Component<Props> {
       <InlineInput
         type="text"
         name={name}
-        value={data && data[name]}
+        value={(data && data[name]) ?? ''}
         placeholder={`${fieldConfig.placeholder}`}
         key={name}
         onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
@@ -87,7 +85,7 @@ class RuleNode extends React.Component<Props> {
       <InlineInput
         type="number"
         name={name}
-        value={data && data[name]}
+        value={(data && data[name]) ?? ''}
         placeholder={`${fieldConfig.placeholder}`}
         key={name}
         onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
index ec832df619..f7efd914b5 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNodeList.tsx
@@ -79,8 +79,8 @@ class RuleNodeList extends React.Component<Props> {
           </RuleNodes>
         )}
         <StyledSelectControl
-          deprecatedSelectControl
           placeholder={placeholder}
+          value={null}
           onChange={obj => onAddRow(obj ? obj.value : obj)}
           options={options}
         />
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
index 0348bed44f..8325f387e6 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
@@ -1,11 +1,6 @@
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
-import {
-  IssueAlertRuleActionTemplate,
-  IssueAlertRuleConditionTemplate,
-} from 'app/types/alerts';
-import {Organization, Project} from 'app/types';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -13,8 +8,7 @@ import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
 import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
 import PanelItem from 'app/components/panels/panelItem';
 import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';
-import withOrganization from 'app/utils/withOrganization';
-import withProject from 'app/utils/withProject';
+import routeTitleGen from 'app/utils/routeTitle';
 
 type RouteParams = {
   orgId: string;
@@ -23,17 +17,10 @@ type RouteParams = {
   ruleId: string; //TODO(ts): Make ruleId optional
 };
 
-type Props = {
-  organization: Organization;
-  project: Project;
-} & RouteComponentProps<RouteParams, {}>;
+type Props = RouteComponentProps<RouteParams, {}>;
 
 type State = {
   alertType: string | null;
-  configs: {
-    actions: IssueAlertRuleActionTemplate[];
-    conditions: IssueAlertRuleConditionTemplate[];
-  } | null;
 } & AsyncView['state'];
 
 class RuleDetails extends AsyncView<Props, State> {
@@ -47,14 +34,15 @@ class RuleDetails extends AsyncView<Props, State> {
         : pathname.includes('metric-rules')
         ? 'metric'
         : null,
-      configs: null,
     };
   }
 
-  getEndpoints(): [string, string][] {
-    const {orgId, projectId} = this.props.params;
+  getTitle() {
+    return routeTitleGen(t('New Alert'), this.props.params.projectId, false);
+  }
 
-    return [['configs', `/projects/${orgId}/${projectId}/rules/configuration/`]];
+  getEndpoints(): [string, string][] {
+    return [];
   }
 
   handleChangeAlertType = (alertType: string) => {
@@ -69,7 +57,8 @@ class RuleDetails extends AsyncView<Props, State> {
   }
 
   renderBody() {
-    const {alertType, configs} = this.state;
+    const {alertType} = this.state;
+
     return (
       <React.Fragment>
         <Panel>
@@ -102,11 +91,7 @@ class RuleDetails extends AsyncView<Props, State> {
         </Panel>
 
         {alertType === 'issue' ? (
-          <IssueEditor
-            {...this.props}
-            actions={configs && configs.actions}
-            conditions={configs && configs.conditions}
-          />
+          <IssueEditor {...this.props} />
         ) : alertType === 'metric' ? (
           <IncidentRulesCreate {...this.props} />
         ) : null}
@@ -115,4 +100,4 @@ class RuleDetails extends AsyncView<Props, State> {
   }
 }
 
-export default withProject(withOrganization(RuleDetails));
+export default RuleDetails;
