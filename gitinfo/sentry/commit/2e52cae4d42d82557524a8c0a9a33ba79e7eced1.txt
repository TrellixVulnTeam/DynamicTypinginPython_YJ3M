commit 2e52cae4d42d82557524a8c0a9a33ba79e7eced1
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Jun 27 22:33:41 2016 +0200

    Add device family

diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 164660d26c..a4a442792b 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -33,10 +33,15 @@ class ContextType(object):
 
     def __init__(self, alias, data):
         self.alias = alias
-        self.data = data
+        ctx_data = {}
+        for key, value in trim(data).iteritems():
+            ctx_data[force_text(key)] = force_text(value)
+        self.data = ctx_data
 
     def to_json(self):
-        return self.data
+        rv = dict(self.data)
+        rv['type'] = self.type
+        return rv
 
     def iter_tags(self):
         if self.indexed_fields:
@@ -62,6 +67,7 @@ class DefaultContextType(ContextType):
 class DeviceContextType(ContextType):
     indexed_fields = {
         '': '{model}',
+        'family': '{family}',
     }
     # model_id, arch
 
@@ -111,11 +117,7 @@ class Contexts(Interface):
     def normalize_context(cls, alias, data):
         ctx_type = data.get('type', alias)
         ctx_cls = context_types.get(ctx_type, DefaultContextType)
-        ctx_data = {}
-        for key, value in trim(data).iteritems():
-            ctx_data[force_text(key)] = force_text(value)
-        ctx_data['type'] = ctx_cls.type
-        return ctx_cls(alias, ctx_data)
+        return ctx_cls(alias, data)
 
     def iter_contexts(self):
         return self._data.itervalues()
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 5206d8b75a..77a64ff811 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+import re
 import logging
 import posixpath
 
@@ -11,6 +12,8 @@ from sentry.models.dsymfile import SDK_MAPPING
 
 logger = logging.getLogger(__name__)
 
+model_re = re.compile(r'^(\S+?)\d')
+
 APP_BUNDLE_PATHS = (
     '/var/containers/Bundle/Application/',
     '/private/var/containers/Bundle/Application/',
@@ -226,6 +229,9 @@ def inject_apple_device_data(data, system):
         device['model_id'] = system['model']
     if 'machine' in system:
         device['model'] = system['machine']
+        match = model_re.match(system['machine'])
+        if match is not None:
+            device['family'] = match.group(1)
 
 
 def record_no_symsynd(data):
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
index 5c353bcab3..17622a6530 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
@@ -10,13 +10,14 @@ const DeviceContextType = React.createClass({
   },
 
   render() {
-    let {name, model, model_id, arch, battery_level, orientation,
+    let {name, family, model, model_id, arch, battery_level, orientation,
       ...data} = this.props.data;
     return (
       <ContextBlock
         data={data}
         knownData={[
           ['Name', name],
+          ['Family', family],
           ['Model', model + (model_id ? ` (${model_id})` : '')],
           ['Architecture', arch],
           ['Battery Level', defined(battery_level)
