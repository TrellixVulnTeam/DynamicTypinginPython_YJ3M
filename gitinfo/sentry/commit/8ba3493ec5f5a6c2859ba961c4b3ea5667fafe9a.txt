commit 8ba3493ec5f5a6c2859ba961c4b3ea5667fafe9a
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Nov 29 16:33:45 2018 -0800

    feat(settings): Expose disabled alert settings to members (#10848)

diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index e84a419ac9..a2af228a76 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -25,7 +25,6 @@ export default function getConfiguration({project}) {
           path: `${pathPrefix}/alerts/`,
           title: t('Alerts'),
           description: t('Manage alerts and alert rules for a project'),
-          show: ({access}) => access.has('project:write'),
         },
         {
           path: `${pathPrefix}/tags/`,
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
index e8983246c5..9c76ae514d 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
@@ -22,6 +22,7 @@ import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EnvironmentStore from 'app/stores/environmentStore';
 import ListLink from 'app/components/listLink';
 import NavTabs from 'app/components/navTabs';
+import PermissionAlert from 'app/views/settings/project/permissionAlert';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import Tooltip from 'app/components/tooltip';
@@ -293,6 +294,7 @@ class ProjectAlertRules extends AsyncView {
             </NavTabs>
           }
         />
+        <PermissionAlert />
         {!!ruleList.length && this.renderResults()}
         {!ruleList.length && this.renderEmpty()}
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
index c02adc7ef9..bce3130108 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 import {PanelAlert} from 'app/components/panels';
 import {fields} from 'app/data/forms/projectAlerts';
 import {t} from 'app/locale';
+import Access from 'app/components/acl/access';
 import AlertLink from 'app/components/alertLink';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
@@ -10,6 +11,7 @@ import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import ListLink from 'app/components/listLink';
 import NavTabs from 'app/components/navTabs';
+import PermissionAlert from 'app/views/settings/project/permissionAlert';
 import PluginList from 'app/components/pluginList';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -70,80 +72,94 @@ export default class ProjectAlertSettings extends AsyncView {
     let canEditRule = organization.access.includes('project:write');
 
     return (
-      <React.Fragment>
-        <SettingsPageHeader
-          title={t('Alerts')}
-          action={
-            <Tooltip
-              disabled={canEditRule}
-              title={t('You do not have permission to edit alert rules.')}
+      <Access access={['project:write']}>
+        {({hasAccess}) => (
+          <React.Fragment>
+            <SettingsPageHeader
+              title={t('Alerts')}
+              action={
+                <Tooltip
+                  disabled={canEditRule}
+                  title={t('You do not have permission to edit alert rules.')}
+                >
+                  <Button
+                    to={recreateRoute('rules/new/', this.props)}
+                    disabled={!canEditRule}
+                    priority="primary"
+                    size="small"
+                    icon="icon-circle-add"
+                  >
+                    {t('New Alert Rule')}
+                  </Button>
+                </Tooltip>
+              }
+              tabs={
+                <NavTabs underlined={true}>
+                  <ListLink to={recreateRoute('', this.props)} index={true}>
+                    {t('Settings')}
+                  </ListLink>
+                  <ListLink to={recreateRoute('rules/', this.props)}>
+                    {t('Rules')}
+                  </ListLink>
+                </NavTabs>
+              }
+            />
+            <PermissionAlert />
+            <AlertLink to={'/settings/account/notifications/'} icon="icon-mail">
+              {t(
+                'Looking to fine-tune your personal notification preferences? Visit your Account Settings'
+              )}
+            </AlertLink>
+
+            <Form
+              saveOnBlur
+              allowUndo
+              initialData={{
+                subjectTemplate: this.state.project.subjectTemplate,
+                digestsMinDelay: this.state.project.digestsMinDelay,
+                digestsMaxDelay: this.state.project.digestsMaxDelay,
+              }}
+              apiMethod="PUT"
+              apiEndpoint={`/projects/${orgId}/${projectId}/`}
             >
-              <Button
-                to={recreateRoute('rules/new/', this.props)}
-                disabled={!canEditRule}
-                priority="primary"
-                size="small"
-                icon="icon-circle-add"
-              >
-                {t('New Alert Rule')}
-              </Button>
-            </Tooltip>
-          }
-          tabs={
-            <NavTabs underlined={true}>
-              <ListLink to={recreateRoute('', this.props)} index={true}>
-                {t('Settings')}
-              </ListLink>
-              <ListLink to={recreateRoute('rules/', this.props)}>{t('Rules')}</ListLink>
-            </NavTabs>
-          }
-        />
-        <AlertLink to={'/settings/account/notifications/'} icon="icon-mail">
-          {t(
-            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'
-          )}
-        </AlertLink>
+              <JsonForm
+                disabled={!hasAccess}
+                title={t('Email Settings')}
+                fields={[fields.subjectTemplate]}
+              />
 
-        <Form
-          saveOnBlur
-          allowUndo
-          initialData={{
-            subjectTemplate: this.state.project.subjectTemplate,
-            digestsMinDelay: this.state.project.digestsMinDelay,
-            digestsMaxDelay: this.state.project.digestsMaxDelay,
-          }}
-          apiMethod="PUT"
-          apiEndpoint={`/projects/${orgId}/${projectId}/`}
-        >
-          <JsonForm title={t('Email Settings')} fields={[fields.subjectTemplate]} />
+              <JsonForm
+                title={t('Digests')}
+                disabled={!hasAccess}
+                fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}
+                renderHeader={() => (
+                  <PanelAlert type="info">
+                    {t(
+                      'Sentry will automatically digest alerts sent ' +
+                        'by some services to avoid flooding your inbox ' +
+                        'with individual issue notifications. To control ' +
+                        'how frequently notifications are delivered, use ' +
+                        'the sliders below.'
+                    )}
+                  </PanelAlert>
+                )}
+              />
+            </Form>
 
-          <JsonForm
-            title={t('Digests')}
-            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}
-            renderHeader={() => (
-              <PanelAlert type="info">
-                {t(
-                  'Sentry will automatically digest alerts sent ' +
-                    'by some services to avoid flooding your inbox ' +
-                    'with individual issue notifications. To control ' +
-                    'how frequently notifications are delivered, use ' +
-                    'the sliders below.'
+            {hasAccess && (
+              <PluginList
+                organization={organization}
+                project={this.state.project}
+                pluginList={this.state.pluginList.filter(
+                  p => p.type === 'notification' && p.hasConfiguration
                 )}
-              </PanelAlert>
+                onEnablePlugin={this.handleEnablePlugin}
+                onDisablePlugin={this.handleDisablePlugin}
+              />
             )}
-          />
-        </Form>
-
-        <PluginList
-          organization={organization}
-          project={this.state.project}
-          pluginList={this.state.pluginList.filter(
-            p => p.type === 'notification' && p.hasConfiguration
-          )}
-          onEnablePlugin={this.handleEnablePlugin}
-          onDisablePlugin={this.handleDisablePlugin}
-        />
-      </React.Fragment>
+          </React.Fragment>
+        )}
+      </Access>
     );
   }
 }
diff --git a/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap
index 8ff56ff85f..42d2b3cd53 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertRules.spec.jsx.snap
@@ -283,6 +283,75 @@ exports[`projectAlertRules renders 1`] = `
           </div>
         </Wrapper>
       </SettingsPageHeading>
+      <PermissionAlert
+        access={
+          Array [
+            "project:write",
+          ]
+        }
+      >
+        <AccessContainer
+          access={
+            Array [
+              "project:write",
+            ]
+          }
+        >
+          <Access
+            access={
+              Array [
+                "project:write",
+              ]
+            }
+            configUser={
+              Object {
+                "email": "foo@example.com",
+                "flags": Object {
+                  "newsletter_consent_prompt": false,
+                },
+                "hasPasswordAuth": true,
+                "id": "1",
+                "isAuthenticated": true,
+                "name": "Foo Bar",
+                "options": Object {
+                  "timezone": "UTC",
+                },
+                "permissions": Set {},
+                "username": "foo@example.com",
+              }
+            }
+            organization={
+              Object {
+                "access": Array [
+                  "org:read",
+                  "org:write",
+                  "org:admin",
+                  "project:read",
+                  "project:write",
+                  "project:admin",
+                  "team:read",
+                  "team:write",
+                  "team:admin",
+                ],
+                "features": Array [],
+                "id": "3",
+                "name": "Organization Name",
+                "onboardingTasks": Array [],
+                "projects": Array [],
+                "scrapeJavaScript": true,
+                "slug": "org-slug",
+                "status": Object {
+                  "id": "active",
+                  "name": "active",
+                },
+                "teams": Array [],
+              }
+            }
+            renderNoAccessMessage={false}
+            requireAll={true}
+          />
+        </AccessContainer>
+      </PermissionAlert>
       <div
         className="rules-list"
       >
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 43690ee244..70ad4d4216 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -4,188 +4,14 @@ exports[`ProjectAlertSettings render() renders 1`] = `
 <SideEffect(DocumentTitle)
   title="Project Alert Settings - Sentry"
 >
-  <SettingsPageHeading
-    action={
-      <Tooltip
-        disabled={true}
-        title="You do not have permission to edit alert rules."
-      >
-        <Button
-          disabled={false}
-          icon="icon-circle-add"
-          priority="primary"
-          size="small"
-          to="rules/new/"
-        >
-          New Alert Rule
-        </Button>
-      </Tooltip>
+  <AccessContainer
+    access={
+      Array [
+        "project:write",
+      ]
     }
-    tabs={
-      <NavTabs
-        underlined={true}
-      >
-        <ListLink
-          activeClassName="active"
-          index={true}
-          to=""
-        >
-          Settings
-        </ListLink>
-        <ListLink
-          activeClassName="active"
-          index={false}
-          to="rules/"
-        >
-          Rules
-        </ListLink>
-      </NavTabs>
-    }
-    title="Alerts"
-  />
-  <AlertLink
-    icon="icon-mail"
-    priority="warning"
-    to="/settings/account/notifications/"
-  >
-    Looking to fine-tune your personal notification preferences? Visit your Account Settings
-  </AlertLink>
-  <Form
-    allowUndo={true}
-    apiEndpoint="/projects/org-slug/project-slug/"
-    apiMethod="PUT"
-    cancelLabel="Cancel"
-    className="form-stacked"
-    initialData={
-      Object {
-        "digestsMaxDelay": 60,
-        "digestsMinDelay": 5,
-        "subjectTemplate": "[$project] \${tag:level}: $title",
-      }
-    }
-    onSubmitError={[Function]}
-    onSubmitSuccess={[Function]}
-    requireChanges={false}
-    saveOnBlur={true}
-    submitDisabled={false}
-    submitLabel="Save Changes"
-    submitPriority="primary"
   >
-    <JsonForm
-      additionalFieldProps={Object {}}
-      fields={
-        Array [
-          Object {
-            "help": "The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and \${tag:key}, such as \${tag:environment} or \${tag:release}.",
-            "label": "Subject Template",
-            "name": "subjectTemplate",
-            "placeholder": "e.g. $shortID - $title",
-            "type": "string",
-          },
-        ]
-      }
-      title="Email Settings"
-    />
-    <JsonForm
-      additionalFieldProps={Object {}}
-      fields={
-        Array [
-          Object {
-            "defaultValue": 300,
-            "formatLabel": [Function],
-            "help": "Notifications will be delivered at most this often.",
-            "label": "Minimum delivery interval",
-            "max": 3600,
-            "min": 60,
-            "name": "digestsMinDelay",
-            "step": 60,
-            "type": "range",
-          },
-          Object {
-            "defaultValue": 300,
-            "formatLabel": [Function],
-            "help": "Notifications will be delivered at least this often.",
-            "label": "Maximum delivery interval",
-            "max": 3600,
-            "min": 60,
-            "name": "digestsMaxDelay",
-            "step": 60,
-            "type": "range",
-          },
-        ]
-      }
-      renderHeader={[Function]}
-      title="Digests"
-    />
-  </Form>
-  <PluginList
-    onDisablePlugin={[Function]}
-    onEnablePlugin={[Function]}
-    organization={
-      Object {
-        "access": Array [
-          "org:read",
-          "org:write",
-          "org:admin",
-          "project:read",
-          "project:write",
-          "project:admin",
-          "team:read",
-          "team:write",
-          "team:admin",
-        ],
-        "features": Array [],
-        "id": "3",
-        "name": "Organization Name",
-        "onboardingTasks": Array [],
-        "projects": Array [],
-        "scrapeJavaScript": true,
-        "slug": "org-slug",
-        "status": Object {
-          "id": "active",
-          "name": "active",
-        },
-        "teams": Array [],
-      }
-    }
-    pluginList={Array []}
-    project={
-      Object {
-        "allowedDomains": Array [
-          "example.com",
-          "https://example.com",
-        ],
-        "dataScrubber": false,
-        "dataScrubberDefaults": false,
-        "digestsMaxDelay": 60,
-        "digestsMinDelay": 5,
-        "features": Array [],
-        "hasAccess": true,
-        "id": "2",
-        "isBookmarked": false,
-        "isMember": true,
-        "name": "Project Name",
-        "resolveAge": 48,
-        "safeFields": Array [
-          "business-email",
-          "company",
-        ],
-        "scrapeJavaScript": true,
-        "scrubIPAddresses": false,
-        "securityToken": "security-token",
-        "securityTokenHeader": "x-security-header",
-        "sensitiveFields": Array [
-          "creditcard",
-          "ssn",
-        ],
-        "slug": "project-slug",
-        "storeCrashReports": false,
-        "subjectPrefix": "[my-org]",
-        "subjectTemplate": "[$project] \${tag:level}: $title",
-        "teams": Array [],
-        "verifySSL": true,
-      }
-    }
-  />
+    <Component />
+  </AccessContainer>
 </SideEffect(DocumentTitle)>
 `;
