commit 4b9f2f854e62eb5aa3af719999ca3d199f94a3cc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 14 12:42:26 2019 +0200

    feat(grouping): Normalize lambda names in stacktraces (#13175)

diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 0519aef6c9..571b6fa155 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -213,7 +213,8 @@ def get_function_component(function, platform, legacy_function_logic,
                 hint='ignored unknown function'
             )
         elif legacy_function_logic:
-            new_function = trim_function_name(func, platform)
+            new_function = trim_function_name(func, platform,
+                                              normalize_lambdas=False)
             if new_function != func:
                 function_component.update(
                     values=[new_function],
diff --git a/src/sentry/stacktraces/functions.py b/src/sentry/stacktraces/functions.py
index 2abbde072b..5d5084b5a4 100644
--- a/src/sentry/stacktraces/functions.py
+++ b/src/sentry/stacktraces/functions.py
@@ -9,6 +9,22 @@ from sentry.stacktraces.platform import get_behavior_family_for_platform
 _windecl_hash = re.compile(r'^@?(.*?)@[0-9]+$')
 _rust_hash = re.compile(r'::h[a-z0-9]{16}$')
 _cpp_trailer_re = re.compile(r'(\bconst\b|&)$')
+_lambda_re = re.compile(r'''(?x)
+    # gcc
+    (?:
+        \{
+            lambda\(.*?\)\#\d+
+        \}
+    ) |
+    # msvc
+    (?:
+        \blambda_[a-f0-9]{32}\b
+    ) |
+    # clang
+    (?:
+        \$_\d+\b
+    )
+''')
 
 
 PAIRS = {
@@ -75,7 +91,7 @@ def split_func_tokens(s):
     return [''.join(x) for x in rv]
 
 
-def trim_function_name(function, platform):
+def trim_function_name(function, platform, normalize_lambdas=True):
     """Given a function value from the frame's function attribute this returns
     a trimmed version that can be stored in `function_name`.  This is only used
     if the client did not supply a value itself already.
@@ -108,6 +124,16 @@ def trim_function_name(function, platform):
         .replace('operator()', u'operator◯')\
         .replace(' -> ', u' ⟿ ')
 
+    # normalize C++ lambdas.  This is necessary because different
+    # compilers use different rules for now to name a lambda and they are
+    # all quite inconsistent.  This does not give us perfect answers to
+    # this problem but closer.  In particular msvc will call a lambda
+    # something like `lambda_deadbeefeefffeeffeeff` whereas clang for
+    # instance will name it `main::$_0` which will tell us in which outer
+    # function it was declared.
+    if normalize_lambdas:
+        function = _lambda_re.sub('lambda', function)
+
     # Remove the arguments if there is one.
     def process_args(value, start):
         value = value.strip()
diff --git a/tests/sentry/grouping/grouping_inputs/native-complex-function-names.json b/tests/sentry/grouping/grouping_inputs/native-complex-function-names.json
index b6f7e5e2aa..cc4c995595 100644
--- a/tests/sentry/grouping/grouping_inputs/native-complex-function-names.json
+++ b/tests/sentry/grouping/grouping_inputs/native-complex-function-names.json
@@ -19,6 +19,11 @@
               "function": "Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)",
               "instruction_addr": "0x10918cd81",
               "in_app": false
+            },
+            {
+              "function": "<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()",
+              "instruction_addr": "0x10918dda1",
+              "in_app": false
             }
           ]
         },
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap
index b15b943092..c93262f405 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-09T18:49:35.092083Z'
+created: '2019-05-11T09:56:03.074860Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -15,11 +15,14 @@ app:
           frame (non app frame)
             function* (isolated function)
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
 --------------------------------------------------------------------------
 system:
-  hash: '9b78cced1eefcd0c655a0a3d8ce2cdd2'
+  hash: 'e4dcc3896f798a517fb40f50daace658'
   component:
     system*
       exception*
@@ -30,5 +33,8 @@ system:
           frame*
             function* (isolated function)
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap
index 672d5fc025..fd33d48124 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-16T14:31:51.256670Z'
+created: '2019-05-11T09:56:04.447818Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -15,6 +15,9 @@ app:
           frame (frame considered in-app because no frame is in-app)
             function (function name is used only if module or filename are available)
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
         type*
           u'log_demo'
         value*
@@ -32,6 +35,9 @@ system:
           frame
             function (function name is used only if module or filename are available)
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent(char const *,char const *,char const *)'
+          frame
+            function (function name is used only if module or filename are available)
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
         type*
           u'log_demo'
         value*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap
index 14bf5ebd60..f3e984db01 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-09T18:49:36.714864Z'
+created: '2019-05-11T09:56:05.696521Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -15,11 +15,14 @@ app:
           frame (non app frame)
             function* (isolated function)
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
 --------------------------------------------------------------------------
 system:
-  hash: '9b78cced1eefcd0c655a0a3d8ce2cdd2'
+  hash: 'e4dcc3896f798a517fb40f50daace658'
   component:
     system*
       exception*
@@ -30,5 +33,8 @@ system:
           frame*
             function* (isolated function)
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda_5db80dab47756d3e72c2dcd38b80b1dd>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
index 8121140b36..7529979476 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-26T19:30:17.911166Z'
+created: '2019-05-11T09:56:06.984699Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -15,13 +15,16 @@ app:
           frame (non app frame)
             function*
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
         value*
           u'Holy shit everything is on fire!'
 --------------------------------------------------------------------------
 system:
-  hash: '9b78cced1eefcd0c655a0a3d8ce2cdd2'
+  hash: '61d21e6d53c0837718af047c20e5e7ea'
   component:
     system*
       exception*
@@ -32,6 +35,9 @@ system:
           frame*
             function*
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
         value (ignored because stacktrace takes precedence)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap
index 89f6946296..2bc5c3e8be 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-08T07:29:42.628861Z'
+created: '2019-05-11T09:56:08.384459Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -15,13 +15,16 @@ app:
           frame (non app frame)
             function*
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
         value*
           u'Holy shit everything is on fire!'
 --------------------------------------------------------------------------
 system:
-  hash: '9b78cced1eefcd0c655a0a3d8ce2cdd2'
+  hash: '61d21e6d53c0837718af047c20e5e7ea'
   component:
     system*
       exception*
@@ -32,6 +35,9 @@ system:
           frame*
             function*
               u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
         type (ignored because exception is synthetic)
           u'log_demo'
         value (ignored because stacktrace takes precedence)
diff --git a/tests/sentry/stacktraces/test_functions.py b/tests/sentry/stacktraces/test_functions.py
index 37adf46b40..2c17ebf113 100644
--- a/tests/sentry/stacktraces/test_functions.py
+++ b/tests/sentry/stacktraces/test_functions.py
@@ -100,6 +100,26 @@ from sentry.stacktraces.functions import replace_enclosed_string, split_func_tok
             'ViewController.causeCrash(Any) -> SomeObject',
             'ViewController.causeCrash',
         ],
+        [
+            'main::$_0',
+            'main::lambda',
+        ],
+        [
+            'main::$_42',
+            'main::lambda',
+        ],
+        [
+            'main::{lambda(int)#1}',
+            'main::lambda',
+        ],
+        [
+            'main::{lambda()#42}',
+            'main::lambda',
+        ],
+        [
+            'lambda_7156c3ceaa11256748687ab67e3ef4cd',
+            'lambda',
+        ],
     ]
 )
 def test_trim_function_name(input, output):
