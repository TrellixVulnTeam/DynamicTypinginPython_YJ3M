commit be3bb3c69f89e78899237a8027afbdab350c23e0
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Nov 19 15:04:38 2018 +0100

    ref: Remove legacy message use internally (#10621)
    
    * ref: Kill the last remains of the legacy message use internally
    
    * ref: Remove unused group message fallback in ui
    
    * ref: Change the test only fallback code in get_event_metadata
    
    * ref: Refactor legacy code path for metadata
    
    * ref: Stop using deprecated attributes
    
    * chore: Remove unused print
    
    * ref: Always run normalization in tests
    
    * ref: Add metadata compat to tombstone
    
    * fix: Fix some potentially bad snuba tests
    
    * feat: Support user to create_event
    
    * ref: Change for_store to ctor
    
    * ref: Fixed an incorrect user set in create_event
    
    * fix: fixed a typo
    
    * fix: Pass an empty env in snuba test

diff --git a/src/sentry/api/serializers/snuba.py b/src/sentry/api/serializers/snuba.py
index cbcac6ff33..8a1dc68aac 100644
--- a/src/sentry/api/serializers/snuba.py
+++ b/src/sentry/api/serializers/snuba.py
@@ -57,6 +57,9 @@ def geo_by_addr(ip):
 
 
 def serialize_eventusers(organization, item_list, user, lookup):
+    if not item_list:
+        return {}
+
     # We have no reliable way to map the tag value format
     # back into real EventUser rows. EventUser is only unique
     # per-project, and this is an organization aggregate.
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 12fc48c5e0..bd099c22cb 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -167,7 +167,7 @@ CLIENT_RESERVED_ATTRS = (
     'project', 'errors', 'event_id', 'message', 'checksum', 'culprit', 'fingerprint', 'level',
     'time_spent', 'logger', 'server_name', 'site', 'received', 'timestamp', 'extra', 'modules',
     'tags', 'platform', 'release', 'dist', 'environment', 'transaction', 'key_id', '_meta',
-    'applecrashreport', 'device', 'repos', 'query',
+    'applecrashreport', 'device', 'repos', 'query', 'type',
 )
 
 # XXX: Must be all lowercase
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index c2e4080d29..4344aa251f 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -84,6 +84,20 @@ SECURITY_REPORT_INTERFACES = (
 ENABLE_RUST = os.environ.get("SENTRY_USE_RUST_NORMALIZER", "false").lower() in ("1", "true")
 
 
+def get_event_metadata_compat(data, fallback_message):
+    """This is a fallback path to getting the event metadata.  This is used
+    by some code paths that could potentially deal with old sentry events that
+    do not have metadata yet.  This does not happen in practice any more but
+    the testsuite was never adapted so the tests hit this code path constantly.
+    """
+    etype = data.get('type') or 'default'
+    if 'metadata' not in data:
+        data = dict(data)
+        data['logentry'] = {'formatted': fallback_message}
+        return eventtypes.get(etype)(data).get_metadata()
+    return data['metadata']
+
+
 def count_limit(count):
     # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
     # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
@@ -386,6 +400,7 @@ class EventManager(object):
         auth=None,
         key=None,
         content_encoding=None,
+        for_store=True,
     ):
         self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
@@ -394,6 +409,7 @@ class EventManager(object):
         self._user_agent = user_agent
         self._auth = auth
         self._key = key
+        self._for_store = for_store
 
     def process_csp_report(self):
         """Only called from the CSP report endpoint."""
@@ -466,14 +482,19 @@ class EventManager(object):
             return
 
         data = self._data
-        if self._project is not None:
-            data['project'] = self._project.id
-        if self._key is not None:
-            data['key_id'] = self._key.id
-        if self._auth is not None:
-            data['sdk'] = data.get('sdk') or parse_client_as_sdk(self._auth.client)
 
-        errors = data['errors'] = []
+        if self._for_store:
+            if self._project is not None:
+                data['project'] = self._project.id
+            if self._key is not None:
+                data['key_id'] = self._key.id
+            if self._auth is not None:
+                data['sdk'] = data.get('sdk') or parse_client_as_sdk(self._auth.client)
+
+        # permit the client to transmit errors as well.
+        errors = data.get('errors')
+        if not errors:
+            errors = data['errors'] = []
 
         # Before validating with a schema, attempt to cast values to their desired types
         # so that the schema doesn't have to take every type variation into account.
@@ -516,10 +537,17 @@ class EventManager(object):
                     errors.append({'type': EventError.INVALID_DATA, 'name': c, 'value': data[c]})
                     del data[c]
 
-        # raw 'message' is coerced to the Message interface, as its used for pure index of
-        # searchable strings. If both a raw 'message' and a Message interface exist, try and
-        # add the former as the 'formatted' attribute of the latter.
-        # See GH-3248
+        # raw 'message' is coerced to the Message interface.  Longer term
+        # we want to treat 'message' as a pure alias for 'logentry' but
+        # for now that won't be the case.
+        #
+        # TODO(mitsuhiko): the logic we want to apply here long term is
+        # to
+        #
+        # 1. make logentry.message optional
+        # 2. make logentry.formatted the primary value
+        # 3. always treat a string as an alias for `logentry.formatted`
+        # 4. remove the custom coercion logic here
         msg_str = data.pop('message', None)
         if msg_str:
             msg_if = data.get('logentry')
@@ -587,63 +615,64 @@ class EventManager(object):
                 log('Discarded invalid value for interface: %s (%r)', k, value, exc_info=True)
                 errors.append({'type': EventError.INVALID_DATA, 'name': k, 'value': value})
 
-        # Additional data coercion and defaulting
-        level = data.get('level') or DEFAULT_LOG_LEVEL
-        if isinstance(level, int) or (isinstance(level, six.string_types) and level.isdigit()):
-            level = LOG_LEVELS.get(int(level), DEFAULT_LOG_LEVEL)
-        data['level'] = LOG_LEVELS_MAP.get(level, LOG_LEVELS_MAP[DEFAULT_LOG_LEVEL])
-
-        if data.get('dist') and not data.get('release'):
-            data['dist'] = None
-
-        timestamp = data.get('timestamp')
-        if not timestamp:
-            timestamp = timezone.now()
-
-        # TODO (alex) can this all be replaced by utcnow?
-        # it looks like the only time that this would even be hit is when timestamp
-        # is not defined, as the earlier process_timestamp already converts existing
-        # timestamps to floats.
-        if isinstance(timestamp, datetime):
-            # We must convert date to local time so Django doesn't mess it up
-            # based on TIME_ZONE
-            if settings.TIME_ZONE:
-                if not timezone.is_aware(timestamp):
-                    timestamp = timestamp.replace(tzinfo=timezone.utc)
-            elif timezone.is_aware(timestamp):
-                timestamp = timestamp.replace(tzinfo=None)
-            timestamp = float(timestamp.strftime('%s'))
-
-        data['timestamp'] = timestamp
-        data['received'] = float(timezone.now().strftime('%s'))
-
-        data.setdefault('checksum', None)
-        data.setdefault('culprit', None)
-        data.setdefault('dist', None)
-        data.setdefault('environment', None)
-        data.setdefault('extra', {})
-        data.setdefault('fingerprint', None)
-        data.setdefault('logger', DEFAULT_LOGGER_NAME)
-        data.setdefault('platform', None)
-        data.setdefault('server_name', None)
-        data.setdefault('site', None)
-        data.setdefault('tags', [])
-        data.setdefault('transaction', None)
-
-        # Fix case where legacy apps pass 'environment' as a tag
-        # instead of a top level key.
-        # TODO (alex) save() just reinserts the environment into the tags
-        if not data.get('environment'):
-            tagsdict = dict(data['tags'])
-            if 'environment' in tagsdict:
-                data['environment'] = tagsdict['environment']
-                del tagsdict['environment']
-                data['tags'] = tagsdict.items()
-
-        # the SDKs currently do not describe event types, and we must infer
-        # them from available attributes
-        data['type'] = eventtypes.infer(data).key
-        data['version'] = self.version
+        # Additional data coercion and defaulting we only do for store.
+        if self._for_store:
+            level = data.get('level') or DEFAULT_LOG_LEVEL
+            if isinstance(level, int) or (isinstance(level, six.string_types) and level.isdigit()):
+                level = LOG_LEVELS.get(int(level), DEFAULT_LOG_LEVEL)
+            data['level'] = LOG_LEVELS_MAP.get(level, LOG_LEVELS_MAP[DEFAULT_LOG_LEVEL])
+
+            if data.get('dist') and not data.get('release'):
+                data['dist'] = None
+
+            timestamp = data.get('timestamp')
+            if not timestamp:
+                timestamp = timezone.now()
+
+            # TODO (alex) can this all be replaced by utcnow?
+            # it looks like the only time that this would even be hit is when timestamp
+            # is not defined, as the earlier process_timestamp already converts existing
+            # timestamps to floats.
+            if isinstance(timestamp, datetime):
+                # We must convert date to local time so Django doesn't mess it up
+                # based on TIME_ZONE
+                if settings.TIME_ZONE:
+                    if not timezone.is_aware(timestamp):
+                        timestamp = timestamp.replace(tzinfo=timezone.utc)
+                elif timezone.is_aware(timestamp):
+                    timestamp = timestamp.replace(tzinfo=None)
+                timestamp = float(timestamp.strftime('%s'))
+
+            data['timestamp'] = timestamp
+            data['received'] = float(timezone.now().strftime('%s'))
+
+            data.setdefault('checksum', None)
+            data.setdefault('culprit', None)
+            data.setdefault('dist', None)
+            data.setdefault('environment', None)
+            data.setdefault('extra', {})
+            data.setdefault('fingerprint', None)
+            data.setdefault('logger', DEFAULT_LOGGER_NAME)
+            data.setdefault('platform', None)
+            data.setdefault('server_name', None)
+            data.setdefault('site', None)
+            data.setdefault('tags', [])
+            data.setdefault('transaction', None)
+
+            # Fix case where legacy apps pass 'environment' as a tag
+            # instead of a top level key.
+            # TODO (alex) save() just reinserts the environment into the tags
+            if not data.get('environment'):
+                tagsdict = dict(data['tags'])
+                if 'environment' in tagsdict:
+                    data['environment'] = tagsdict['environment']
+                    del tagsdict['environment']
+                    data['tags'] = tagsdict.items()
+
+            # the SDKs currently do not describe event types, and we must infer
+            # them from available attributes
+            data['type'] = eventtypes.infer(data).key
+            data['version'] = self.version
 
         exception = data.get('exception')
         stacktrace = data.get('stacktrace')
@@ -674,15 +703,22 @@ class EventManager(object):
             data.setdefault('user', {}).setdefault('ip_address', self._client_ip)
 
         # Trim values
-        data['logger'] = trim(data['logger'].strip(), 64)
-        trim_dict(data['extra'], max_size=settings.SENTRY_MAX_EXTRA_VARIABLE_SIZE)
+        if data.get('logger'):
+            data['logger'] = trim(data['logger'].strip(), 64)
+
+        if data.get('extra'):
+            trim_dict(data['extra'], max_size=settings.SENTRY_MAX_EXTRA_VARIABLE_SIZE)
 
-        if data['culprit']:
+        if data.get('culprit'):
             data['culprit'] = trim(data['culprit'], MAX_CULPRIT_LENGTH)
 
-        if data['transaction']:
+        if data.get('transaction'):
             data['transaction'] = trim(data['transaction'], MAX_CULPRIT_LENGTH)
 
+        # Do not add errors unless there are for non store mode
+        if not self._for_store and not data.get('errors'):
+            self._data.pop('errors')
+
         self._data = data
 
     def should_filter(self):
@@ -754,6 +790,29 @@ class EventManager(object):
             platform=platform
         )
 
+    def get_search_message(self, data, event_metadata=None, culprit=None):
+        """This generates the internal event.message attribute which is used
+        for search purposes.  It adds a bunch of data from the metadata and
+        the culprit.
+        """
+        message = ''
+
+        if 'logentry' in data:
+            message += (data['logentry'].get('formatted') or
+                        data['logentry'].get('message') or '')
+
+        if event_metadata:
+            for value in six.itervalues(event_metadata):
+                value_u = force_text(value, errors='replace')
+                if value_u not in message:
+                    message = u'{} {}'.format(message, value_u)
+
+        if culprit and culprit not in message:
+            culprit_u = force_text(culprit, errors='replace')
+            message = u'{} {}'.format(message, culprit_u)
+
+        return trim(message.strip(), settings.SENTRY_MAX_MESSAGE_LENGTH)
+
     def save(self, project_id, raw=False):
         from sentry.tasks.post_process import index_event_tags
 
@@ -799,8 +858,10 @@ class EventManager(object):
         environment = data.pop('environment', None)
         recorded_timestamp = data.get("timestamp")
 
-        # unused
-        message = data.pop('message', '')
+        # old events had a small chance of having a legacy message
+        # attribute show up here.  In all reality this is being coerced
+        # into logentry for more than two years at this point (2018).
+        data.pop('message', None)
 
         event = self._get_event_instance(project_id=project_id)
         event._project_cache = project
@@ -897,46 +958,19 @@ class EventManager(object):
         else:
             hashes = [md5_from_hash(h) for h in get_hashes_for_event(event)]
 
-        # TODO(dcramer): temp workaround for complexity
-        data['message'] = message
         event_type = eventtypes.get(data.get('type', 'default'))(data)
         event_metadata = event_type.get_metadata()
-        # TODO(dcramer): temp workaround for complexity
-        del data['message']
 
         data['type'] = event_type.key
         data['metadata'] = event_metadata
 
         # index components into ``Event.message``
         # See GH-3248
-        if event_type.key != 'default':
-            if 'logentry' in data and \
-                    data['logentry']['message'] != message:
-                message = u'{} {}'.format(
-                    message,
-                    data['logentry']['message'],
-                )
-
-        if not message:
-            message = ''
-        elif not isinstance(message, six.string_types):
-            message = force_text(message)
-
-        for value in six.itervalues(event_metadata):
-            value_u = force_text(value, errors='replace')
-            if value_u not in message:
-                message = u'{} {}'.format(message, value_u)
-
-        if culprit and culprit not in message:
-            culprit_u = force_text(culprit, errors='replace')
-            message = u'{} {}'.format(message, culprit_u)
-
-        message = trim(message.strip(), settings.SENTRY_MAX_MESSAGE_LENGTH)
+        event.message = self.get_search_message(data, event_metadata, culprit)
 
-        event.message = message
         kwargs = {
             'platform': platform,
-            'message': message
+            'message': event.message
         }
 
         received_timestamp = event.data.get('received') or float(event.datetime.strftime('%s'))
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 8e76a00b00..99df12a04f 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -27,13 +27,9 @@ class DefaultEvent(BaseEvent):
         return True
 
     def get_metadata(self):
-        # See GH-3248
-        message_interface = self.data.get(
-            'logentry', {
-                'message': self.data.get('message', ''),
-            }
-        )
-        message = strip(message_interface.get('formatted', message_interface['message']))
+        message_interface = self.data.get('logentry') or {}
+        message = strip(message_interface.get('formatted') or
+                        message_interface.get('message'))
         if not message:
             title = '<unlabeled event>'
         else:
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index c396b9cd31..6293dfc2fb 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -116,14 +116,8 @@ class Event(Model):
 
         See ``sentry.eventtypes``.
         """
-        etype = self.data.get('type', 'default')
-        if 'metadata' not in self.data:
-            # TODO(dcramer): remove after Dec 1 2016
-            data = dict(self.data or {})
-            data['message'] = self.message
-            data = CanonicalKeyView(data)
-            return eventtypes.get(etype)(data).get_metadata()
-        return self.data['metadata']
+        from sentry.event_manager import get_event_metadata_compat
+        return get_event_metadata_compat(self.data, self.message)
 
     @property
     def title(self):
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 8412b689b7..4bab4d1cf6 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -392,14 +392,8 @@ class Group(Model):
 
         See ``sentry.eventtypes``.
         """
-        etype = self.data.get('type')
-        if etype is None:
-            etype = 'default'
-        if 'metadata' not in self.data:
-            data = self.data.copy() if self.data else {}
-            data['message'] = self.message
-            return eventtypes.get(etype)(data).get_metadata()
-        return self.data['metadata']
+        from sentry.event_manager import get_event_metadata_compat
+        return get_event_metadata_compat(self.data, self.message)
 
     @property
     def title(self):
diff --git a/src/sentry/models/grouptombstone.py b/src/sentry/models/grouptombstone.py
index a2afe8e454..233e029d1c 100644
--- a/src/sentry/models/grouptombstone.py
+++ b/src/sentry/models/grouptombstone.py
@@ -4,7 +4,6 @@ import logging
 
 from django.db import models
 
-from sentry import eventtypes
 from sentry.constants import LOG_LEVELS, MAX_CULPRIT_LENGTH
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, GzippedDictField, Model
@@ -48,11 +47,5 @@ class GroupTombstone(Model):
 
         See ``sentry.eventtypes``.
         """
-        etype = self.data.get('type')
-        if etype is None:
-            etype = 'default'
-        if 'metadata' not in self.data:
-            data = self.data.copy() if self.data else {}
-            data['message'] = self.message
-            return eventtypes.get(etype)(data).get_metadata()
-        return self.data['metadata']
+        from sentry.event_manager import get_event_metadata_compat
+        return get_event_metadata_compat(self.data, self.message)
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index a405d17457..7d4035b594 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -188,7 +188,7 @@ const GroupDetails = createReactClass({
       case 'default':
         return group.metadata.title;
       default:
-        return group.message.split('\n')[0];
+        return '';
     }
   },
 
diff --git a/src/sentry/templates/sentry/emails/activity/generic.txt b/src/sentry/templates/sentry/emails/activity/generic.txt
index 4af844a917..64cc9e8ce1 100644
--- a/src/sentry/templates/sentry/emails/activity/generic.txt
+++ b/src/sentry/templates/sentry/emails/activity/generic.txt
@@ -7,7 +7,7 @@
 
 ## Issue Details
 
-{{ group.message_short }}
+{{ group.title }}
 
 {{ link }}
 {% if unsubscribe_link %}
diff --git a/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt b/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt
index 8ebd281152..2bf7249e5d 100644
--- a/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt
+++ b/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt
@@ -9,7 +9,7 @@
 
 ## Details
 
-{{ group.message_short }}
+{{ group.title }}
 
 {{ link }}
 
diff --git a/src/sentry/templates/sentry/emails/activity/note.txt b/src/sentry/templates/sentry/emails/activity/note.txt
index 33e62c59a8..abe95efb7c 100644
--- a/src/sentry/templates/sentry/emails/activity/note.txt
+++ b/src/sentry/templates/sentry/emails/activity/note.txt
@@ -9,7 +9,7 @@
 
 ## Details
 
-{{ group.message_short }}
+{{ group.title }}
 
 {{ activity_link }}
 
diff --git a/src/sentry/templates/sentry/emails/digests/body.txt b/src/sentry/templates/sentry/emails/digests/body.txt
index 1b28d9c8ab..98835f19a3 100644
--- a/src/sentry/templates/sentry/emails/digests/body.txt
+++ b/src/sentry/templates/sentry/emails/digests/body.txt
@@ -3,7 +3,7 @@
 
 {% for rule, groups in digest.iteritems %}{{ rule.label }}
 
-{% for group, records in groups.iteritems %}* {{ group.message_short }} ({{ group.event_count }} event{{ group.event_count|pluralize }}, {{ group.user_count }} user{{ group.user_count|pluralize }})
+{% for group, records in groups.iteritems %}* {{ group.title }} ({{ group.event_count }} event{{ group.event_count|pluralize }}, {{ group.user_count }} user{{ group.user_count|pluralize }})
   {% url 'sentry-group' group.organization.slug group.project.slug group.id as group_link %}{% absolute_uri group_link %}
 
 {% endfor %}{% endfor %}
diff --git a/src/sentry/templates/sentry/partial/_event.html b/src/sentry/templates/sentry/partial/_event.html
index d7ddcf926c..ce4990a938 100644
--- a/src/sentry/templates/sentry/partial/_event.html
+++ b/src/sentry/templates/sentry/partial/_event.html
@@ -5,7 +5,7 @@
     <div class="event-details event-cell">
         <h3>
             <a href="{% url 'sentry-group-event' event.organization.slug event.project.slug event.group_id event.pk %}">
-                {{ event.message_short }}
+                {{ event.title }}
             </a>
         </h3>
         <div class="meta">
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index bb8c62a5d4..12ad6b442c 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -850,10 +850,6 @@ class SnubaTestCase(TestCase):
                 group_id=event.group_id,
             )
 
-        if 'user' in tags:
-            user = tags.pop('user')
-            data['user'] = user
-
         hashes = get_hashes_from_fingerprint(
             event,
             data.get('fingerprint', ['{{ default }}']),
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 988cfaaf5a..13cbdf4d98 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -24,6 +24,7 @@ from hashlib import sha1
 from loremipsum import Generator
 from uuid import uuid4
 
+from sentry.event_manager import EventManager
 from sentry.constants import SentryAppStatus
 from sentry.mediators.sentry_apps import Creator as SentryAppCreator
 from sentry.mediators.service_hooks import Creator as ServiceHookCreator
@@ -456,7 +457,7 @@ class Fixtures(object):
 
         return useremail
 
-    def create_event(self, event_id=None, **kwargs):
+    def create_event(self, event_id=None, normalize=True, **kwargs):
         if event_id is None:
             event_id = uuid4().hex
         if 'group' not in kwargs:
@@ -474,6 +475,10 @@ class Fixtures(object):
             stacktrace = kwargs.pop('stacktrace')
             kwargs['data']['stacktrace'] = stacktrace
 
+        user = kwargs.pop('user', None)
+        if user is not None:
+            kwargs['data']['user'] = user
+
         kwargs['data'].setdefault(
             'errors', [{
                 'type': EventError.INVALID_DATA,
@@ -488,17 +493,12 @@ class Fixtures(object):
                 'message': kwargs.get('message') or '<unlabeled event>',
             }
 
-        if 'type' not in kwargs['data']:
-            kwargs['data'].update(
-                {
-                    'type': 'default',
-                    'metadata': {
-                        'title': kwargs['data']['logentry']['message'],
-                    },
-                }
-            )
+        if normalize:
+            manager = EventManager(CanonicalKeyDict(kwargs['data']),
+                                   for_store=False)
+            manager.normalize()
+            kwargs['data'] = manager.get_data()
 
-        kwargs['data'] = CanonicalKeyDict(kwargs.pop('data'))
         event = Event(event_id=event_id, **kwargs)
         EventMapping.objects.create(
             project_id=event.project.id,
diff --git a/src/sentry/utils/geo.py b/src/sentry/utils/geo.py
index 0d8d5baffe..03344d1691 100644
--- a/src/sentry/utils/geo.py
+++ b/src/sentry/utils/geo.py
@@ -9,7 +9,10 @@ logger = logging.getLogger(__name__)
 
 
 # default is no-op
-geo_by_addr = lambda ip: None
+def geo_by_addr(ip):
+    pass
+
+
 rust_geoip = None
 
 
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index e2ab233855..a65172eeec 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -137,6 +137,7 @@ class EventManagerTest(TransactionTestCase):
                 checksum='a' * 32,
             )
         )
+        manager.normalize()
         event = manager.save(1)
 
         manager = EventManager(
@@ -146,6 +147,8 @@ class EventManagerTest(TransactionTestCase):
                 checksum='a' * 32,
             )
         )
+        manager.normalize()
+
         with self.tasks():
             event2 = manager.save(1)
 
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index 35a4a8e9b4..7cc3993e08 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -62,10 +62,10 @@ class MergeGroupTest(TestCase):
     def test_merge_with_event_integrity(self):
         project1 = self.create_project()
         group1 = self.create_group(project1)
-        event1 = self.create_event('a' * 32, group=group1, data={'foo': 'bar'})
+        event1 = self.create_event('a' * 32, group=group1, data={'extra': {'foo': 'bar'}})
         project2 = self.create_project()
         group2 = self.create_group(project2)
-        event2 = self.create_event('b' * 32, group=group2, data={'foo': 'baz'})
+        event2 = self.create_event('b' * 32, group=group2, data={'extra': {'foo': 'baz'}})
 
         with self.tasks():
             merge_groups([group1.id], group2.id)
@@ -77,12 +77,12 @@ class MergeGroupTest(TestCase):
         event1 = Event.objects.get(id=event1.id)
         assert event1.group_id == group2.id
         Event.objects.bind_nodes([event1], 'data')
-        assert event1.data['foo'] == 'bar'
+        assert event1.data['extra']['foo'] == 'bar'
 
         event2 = Event.objects.get(id=event2.id)
         assert event2.group_id == group2.id
         Event.objects.bind_nodes([event2], 'data')
-        assert event2.data['foo'] == 'baz'
+        assert event2.data['extra']['foo'] == 'baz'
 
     def test_merge_creates_redirect(self):
         groups = [self.create_group() for _ in range(0, 3)]
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 72753cefd7..52fa385b8b 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -102,7 +102,7 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
             group=group,
             message="Delet the Data",
             datetime=self.min_ago,
-            tags={'user': {'email': 'foo@example.com'}},
+            user={'email': 'foo@example.com'},
         )
 
         url = reverse(
@@ -272,7 +272,7 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
             'c' * 32, group=group, datetime=self.min_ago, tags={'environment': environment2.name}
         )
         event_4 = self.create_event(
-            'd' * 32, group=group, datetime=self.min_ago, tags={'environment': None}
+            'd' * 32, group=group, datetime=self.min_ago,
         )
 
         base_url = reverse(
@@ -383,11 +383,11 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
             'b' * 32, group=group, datetime=self.min_ago, tags={'sentry:release': '4.1.2'}
         )
         event_2 = self.create_event(
-            'c' * 32, group=group, datetime=self.min_ago, tags={'user': {'email': 'foo@example.com'}}
+            'c' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.com'}
         )
 
         self.create_event(
-            'd' * 32, group=group, datetime=self.min_ago, tags={'user': {'email': 'foo@example.commmmmmmm'}}
+            'd' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.commmmmmmm'}
         )
 
         base_url = reverse(
@@ -419,7 +419,7 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         group = self.create_group(project=project)
 
         event_1 = self.create_event(
-            'a' * 32, group=group, datetime=self.min_ago, tags={'user': {'email': 'foo@example.com'}}
+            'a' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.com'},
         )
         event_2 = self.create_event(
             'b' * 32,
diff --git a/tests/snuba/api/endpoints/test_organization_health.py b/tests/snuba/api/endpoints/test_organization_health.py
index d8e967f619..9979181f88 100644
--- a/tests/snuba/api/endpoints/test_organization_health.py
+++ b/tests/snuba/api/endpoints/test_organization_health.py
@@ -102,7 +102,7 @@ class OrganizationHealthTest(APITestCase, SnubaTestCase):
             group=group,
             datetime=self.min_ago,
             tags={
-                'environment': None,
+                'environment': '',
                 'sentry:user': 'id:%s' % (self.user.id,),
             },
         )
