commit 3683b2b0fe73e272884bb366863d257a8f89ea0a
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 18 13:13:33 2012 -0700

    Enable control of the ability to set the 'public' flag on projects via a setting, permission hook, and can_change_project user permission

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 24cab8d8fb..b88eabf4c9 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -120,6 +120,10 @@ VIEWS = (
 # to create new projects
 ALLOW_PROJECT_CREATION = False
 
+# Should users without superuser permissions be allowed to
+# make projects public
+ALLOW_PUBLIC_PROJECTS = True
+
 # Instructs Sentry to utilize it's queue for background jobs. You will
 # need to ensure that you have workers running if you enable the queue.
 USE_QUEUE = False
diff --git a/sentry/permissions.py b/sentry/permissions.py
index e6c3344bac..ba19b4a539 100644
--- a/sentry/permissions.py
+++ b/sentry/permissions.py
@@ -10,6 +10,10 @@ from sentry.plugins import plugins
 
 
 def can_create_projects(user):
+    """
+    Returns a boolean describing whether a user has the ability to
+    create new projects.
+    """
     if not (user and user.is_authenticated()):
         return False
 
@@ -23,3 +27,23 @@ def can_create_projects(user):
     if result is False:
         return result
     return True
+
+
+def can_set_public_projects(user):
+    """
+    Returns a boolean describing whether a user has the ability to
+    change the ``public`` attribute of projects.
+    """
+    if not (user and user.is_authenticated()):
+        return False
+
+    if user.has_perm('sentry.can_change_project'):
+        return True
+
+    result = plugins.first('has_perm', user, 'set_project_public')
+    if result is None:
+        result = settings.ALLOW_PUBLIC_PROJECTS
+
+    if result is False:
+        return result
+    return True
diff --git a/sentry/web/forms.py b/sentry/web/forms.py
index 9e9d5bbb76..4d4463c398 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms.py
@@ -14,6 +14,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.models import Project, ProjectMember
 from sentry.interfaces import Http
+from sentry.permissions import can_set_public_projects
 
 
 class RadioFieldRenderer(forms.widgets.RadioFieldRenderer):
@@ -97,6 +98,11 @@ class EditProjectForm(forms.ModelForm):
         fields = ('name', 'status', 'public')
         model = Project
 
+    def __init__(self, request, *args, **kwargs):
+        super(EditProjectForm, self).__init__(*args, **kwargs)
+        if not can_set_public_projects(request.user):
+            del self.fields['public']
+
 
 class BaseProjectMemberForm(forms.ModelForm):
     class Meta:
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index ff7dcab416..657d98c577 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -127,7 +127,7 @@ def manage_project(request, project):
     if result is False and not request.user.has_perm('sentry.can_change_project'):
         return HttpResponseRedirect(reverse('sentry'))
 
-    form = EditProjectForm(request.POST or None, instance=project)
+    form = EditProjectForm(request, request.POST or None, instance=project)
 
     if form.is_valid():
         project = form.save()
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
index d573a8ec79..ec19ee11f4 100644
--- a/tests/sentry/permissions/tests.py
+++ b/tests/sentry/permissions/tests.py
@@ -3,7 +3,7 @@
 from __future__ import absolute_import
 
 from django.contrib.auth.models import User, AnonymousUser
-from sentry.permissions import can_create_projects
+from sentry.permissions import can_create_projects, can_set_public_projects
 from tests.base import TestCase
 
 
@@ -25,3 +25,23 @@ class CanCreateProjectTest(TestCase):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False):
             user = User(id=100000)
             self.assertFalse(can_create_projects(user))
+
+
+class CanSetProjectPublicTest(TestCase):
+    def test_superuser_is_true(self):
+        user = User(id=100000, is_superuser=True)
+        self.assertTrue(can_set_public_projects(user))
+
+    def test_anonymous_is_false(self):
+        user = AnonymousUser()
+        self.assertFalse(can_set_public_projects(user))
+
+    def test_allow_creation_is_true(self):
+        with self.Settings(SENTRY_ALLOW_PUBLIC_PROJECTS=True):
+            user = User(id=100000)
+            self.assertTrue(can_set_public_projects(user))
+
+    def test_dont_allow_creation_is_false(self):
+        with self.Settings(SENTRY_ALLOW_PUBLIC_PROJECTS=False):
+            user = User(id=100000)
+            self.assertFalse(can_set_public_projects(user))
