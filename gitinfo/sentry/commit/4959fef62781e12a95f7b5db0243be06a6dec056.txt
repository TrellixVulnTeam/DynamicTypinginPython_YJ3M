commit 4959fef62781e12a95f7b5db0243be06a6dec056
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Mon Mar 2 10:42:32 2020 -0800

    expt(projectCreation/Workflow): Start variant expt manual testing (#17385)
    
    There are 3 variants tested for this experiment:
    - Control: Issue Alert options will not be enabled
    - 2 Options: Issue Alert options are enabled with: 'I'll create my alerts later" and "Alert me on every issue"
    - 3 Options: 2 Options + a custom rule creator
    
    This PR will allow for all three variants to be tested.
    We are still using the experiment with the tmp suffix so that the experiments can be tested with our test-orgs.
    
    Sister PR: https://github.com/getsentry/getsentry/pull/3611

diff --git a/src/sentry/api/endpoints/project_agnostic_rule_conditions.py b/src/sentry/api/endpoints/project_agnostic_rule_conditions.py
index 7cd02e1edc..7cdc240e7f 100644
--- a/src/sentry/api/endpoints/project_agnostic_rule_conditions.py
+++ b/src/sentry/api/endpoints/project_agnostic_rule_conditions.py
@@ -20,14 +20,18 @@ class ProjectAgnosticRuleConditionsEndpoint(OrganizationEndpoint):
                 context["formFields"] = rule_cls.form_fields
             return context
 
-        # TODO(Jeff): Rename to `AlertDefaultsExperiment` on real experiment run
-        if experiments.get(org=organization, experiment_name="AlertDefaultsExperimentTmp") != 1:
-            return Response(status=status.HTTP_404_NOT_FOUND)
-
-        return Response(
-            [
-                info_extractor(rule_cls)
-                for rule_type, rule_cls in rules
-                if rule_type.startswith("condition/")
-            ]
+        experiment_variant = experiments.get(
+            org=organization, experiment_name="AlertDefaultsExperimentTmp"
         )
+        if experiment_variant == "test3Options":
+            return Response(
+                [
+                    info_extractor(rule_cls)
+                    for rule_type, rule_cls in rules
+                    if rule_type.startswith("condition/")
+                ]
+            )
+        elif experiment_variant == "test2Options":
+            return Response(status=status.HTTP_200_OK)
+
+        return Response(status=status.HTTP_404_NOT_FOUND)
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index beddd66672..f835cbedf8 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -828,6 +828,7 @@ export type SentryAppComponent = {
 
 export type ActiveExperiments = {
   TrialUpgradeV2Experiment: 'upgrade' | 'trial' | -1;
+  AlertDefaultsExperimentTmp: 'testControl' | 'test2Options' | 'test3Options';
 };
 
 type SavedQueryVersions = 1 | 2;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
index 28f947986d..405df42cba 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
@@ -65,13 +65,12 @@ class CreateProject extends React.Component {
   }
 
   componentDidMount() {
-    // TODO(jeff): Change key to AlertDefaultExperiment on the real experiment run
     logExperiment({
       organization: this.props.organization,
-      key: 'AlertDefaultExperimentTmp',
+      key: 'AlertDefaultsExperimentTmp',
       unitName: 'org_id',
       unitId: parseInt(this.props.organization.id, 10),
-      param: 'exposed',
+      param: 'variant',
     });
     trackAnalyticsEvent({
       eventKey: 'new_project.visited',
diff --git a/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx b/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx
index d08042f7b9..3f2e7b6d81 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/issueAlertOptions.tsx
@@ -19,8 +19,8 @@ enum MetricValues {
 }
 enum Actions {
   ALERT_ON_EVERY_ISSUE,
-  CREATE_ALERT_LATER,
   CUSTOMIZED_ALERTS,
+  CREATE_ALERT_LATER,
 }
 
 const UNIQUE_USER_FREQUENCY_CONDITION: string =
@@ -104,7 +104,7 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
       ...super.getDefaultState(),
       conditions: [],
       intervalChoices: [],
-      alertSetting: `${Actions.CUSTOMIZED_ALERTS}`,
+      alertSetting: `${Actions.CREATE_ALERT_LATER}`,
       metric: MetricValues.ERRORS,
       interval: '',
       threshold: DEFAULT_THRESHOLD_VALUE,
@@ -127,8 +127,8 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
     hasProperlyLoadedConditions: boolean
   ): [string, string | ReactElement][] {
     const options: [string, React.ReactNode][] = [
-      [`${Actions.ALERT_ON_EVERY_ISSUE}`, t('Alert me on every new issue')],
       [`${Actions.CREATE_ALERT_LATER}`, t("I'll create my own alerts later")],
+      [`${Actions.ALERT_ON_EVERY_ISSUE}`, t('Alert me on every new issue')],
     ];
     if (hasProperlyLoadedConditions) {
       options.unshift([
@@ -241,7 +241,9 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
     );
 
     if (!conditions || conditions.length === 0) {
-      this.setStateAndUpdateParents({conditions: undefined});
+      this.setStateAndUpdateParents({
+        conditions: undefined,
+      });
       return;
     }
 
@@ -254,11 +256,14 @@ class IssueAlertOptions extends AsyncComponent<Props, State> {
           new Error('Interval choices or sent from API endpoint is inconsistent or empty')
         );
       });
-      this.setStateAndUpdateParents({conditions: undefined});
+      this.setStateAndUpdateParents({
+        conditions: undefined,
+      });
       return;
     }
 
     this.setStateAndUpdateParents({
+      alertSetting: `${Actions.CUSTOMIZED_ALERTS}`,
       conditions,
       intervalChoices,
       interval,
diff --git a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
index 226f2283c4..2f5f013170 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
@@ -13,10 +13,9 @@ const NewProject = ({organization}) => (
       <Content>
         <DocumentTitle title="Sentry" />
         <CreateProject
-          hasIssueAlertOptionsEnabled={
-            // TODO(Jeff): Rename to `AlertDefaultsExperiment` on real experiment run
-            organization.experiments?.AlertDefaultsExperimentTmp === 1
-          }
+          hasIssueAlertOptionsEnabled={['test2Options', 'test3Options'].includes(
+            organization.experiments?.AlertDefaultsExperimentTmp
+          )}
         />
       </Content>
     </div>
diff --git a/tests/sentry/api/endpoints/test_project_agnostic_rule_configurations.py b/tests/sentry/api/endpoints/test_project_agnostic_rule_configurations.py
index 4bc9d26718..50359951b5 100644
--- a/tests/sentry/api/endpoints/test_project_agnostic_rule_configurations.py
+++ b/tests/sentry/api/endpoints/test_project_agnostic_rule_configurations.py
@@ -7,7 +7,7 @@ from sentry.testutils import APITestCase
 
 
 class ProjectAgnosticRuleConfigurationsTest(APITestCase):
-    @patch("sentry.experiments.get", return_value=1)
+    @patch("sentry.experiments.get", return_value="test3Options")
     def test_simple(self, mocked_experiment):
         self.login_as(user=self.user)
         org = self.create_organization(owner=self.user, name="baz")
