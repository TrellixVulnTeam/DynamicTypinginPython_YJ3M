commit 3edc69df25dd4f778f4d920500f4104b09bc0a29
Author: Mark Story <mark@sentry.io>
Date:   Mon May 4 13:38:52 2020 -0400

     feat(ui) Add duration percentile graph (#18562)
    
    This visualization lets you see the response time at various percentile
    value. This helps identify the difference in response time between your
    median and worst case transactions. It also lets you see how what
    percentage of your requests are beyond your desired state.

diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
index d4aab776db..e0fa969756 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
@@ -17,15 +17,18 @@ import OptionSelector from 'app/components/charts/optionSelector';
 import {ChartContainer} from '../styles';
 import DurationChart from './durationChart';
 import LatencyChart from './latencyChart';
+import DurationPercentileChart from './durationPercentileChart';
 
 enum DisplayModes {
+  DURATION_PERCENTILE = 'durationpercentile',
   DURATION = 'duration',
   LATENCY = 'latency',
 }
 
 const DISPLAY_OPTIONS: SelectValue<string>[] = [
-  {value: DisplayModes.LATENCY, label: t('Latency Distribution')},
   {value: DisplayModes.DURATION, label: t('Duration Breakdown')},
+  {value: DisplayModes.DURATION_PERCENTILE, label: t('Duration Percentiles')},
+  {value: DisplayModes.LATENCY, label: t('Latency Distribution')},
 ];
 
 type Props = {
@@ -78,6 +81,18 @@ class TransactionSummaryCharts extends React.Component<Props> {
               statsPeriod={eventView.statsPeriod}
             />
           )}
+          {display === DisplayModes.DURATION_PERCENTILE && (
+            <DurationPercentileChart
+              organization={organization}
+              location={location}
+              query={eventView.query}
+              project={eventView.project}
+              environment={eventView.environment}
+              start={eventView.start}
+              end={eventView.end}
+              statsPeriod={eventView.statsPeriod}
+            />
+          )}
         </ChartContainer>
 
         <ChartControls>
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/durationPercentileChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/durationPercentileChart.tsx
new file mode 100644
index 0000000000..56b9cd09ae
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/durationPercentileChart.tsx
@@ -0,0 +1,216 @@
+import React from 'react';
+import {Location} from 'history';
+import isEqual from 'lodash/isEqual';
+import pick from 'lodash/pick';
+
+import {IconWarning} from 'app/icons';
+import {t} from 'app/locale';
+import AreaChart from 'app/components/charts/areaChart';
+import ErrorPanel from 'app/components/charts/components/errorPanel';
+import AsyncComponent from 'app/components/asyncComponent';
+import Tooltip from 'app/components/tooltip';
+import {OrganizationSummary} from 'app/types';
+import LoadingPanel from 'app/views/events/loadingPanel';
+import EventView from 'app/utils/discover/eventView';
+import theme from 'app/utils/theme';
+import {getDuration} from 'app/utils/formatters';
+
+import {HeaderTitleLegend, StyledIconQuestion} from '../styles';
+
+const QUERY_KEYS = [
+  'environment',
+  'project',
+  'query',
+  'start',
+  'end',
+  'statsPeriod',
+] as const;
+
+type ViewProps = Pick<EventView, typeof QUERY_KEYS[number]>;
+
+type ApiResult = {
+  [bucket: string]: number;
+};
+
+type Props = AsyncComponent['props'] &
+  ViewProps & {
+    organization: OrganizationSummary;
+    location: Location;
+  };
+
+type State = AsyncComponent['state'] & {
+  chartData: {data: ApiResult[]} | null;
+};
+
+/**
+ * Fetch and render a bar chart that shows event volume
+ * for each duration bucket. We always render 15 buckets of
+ * equal widths based on the endpoints min + max durations.
+ *
+ * This graph visualizes how many transactions were recorded
+ * at each duration bucket, showing the modality of the transaction.
+ */
+class DurationPercentileChart extends AsyncComponent<Props, State> {
+  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
+    const {
+      organization,
+      query,
+      start,
+      end,
+      statsPeriod,
+      environment,
+      project,
+      location,
+    } = this.props;
+    const eventView = EventView.fromSavedQuery({
+      id: '',
+      name: '',
+      version: 2,
+      fields: [
+        'percentile(transaction.duration, 0.10)',
+        'percentile(transaction.duration, 0.25)',
+        'percentile(transaction.duration, 0.50)',
+        'percentile(transaction.duration, 0.75)',
+        'percentile(transaction.duration, 0.90)',
+        'percentile(transaction.duration, 0.95)',
+        'percentile(transaction.duration, 0.99)',
+        'percentile(transaction.duration, 0.995)',
+        'percentile(transaction.duration, 0.999)',
+        'p100()',
+      ],
+      orderby: '',
+      projects: project,
+      range: statsPeriod,
+      query,
+      environment,
+      start,
+      end,
+    });
+    const apiPayload = eventView.getEventsAPIPayload(location);
+    apiPayload.referrer = 'api.performance.durationpercentilechart';
+
+    return [
+      ['chartData', `/organizations/${organization.slug}/eventsv2/`, {query: apiPayload}],
+    ];
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    if (this.shouldRefetchData(prevProps)) {
+      this.fetchData();
+    }
+  }
+
+  shouldRefetchData(prevProps: Props) {
+    if (this.state.loading) {
+      return false;
+    }
+    return !isEqual(pick(prevProps, QUERY_KEYS), pick(this.props, QUERY_KEYS));
+  }
+
+  renderLoading() {
+    return <LoadingPanel data-test-id="histogram-loading" />;
+  }
+
+  renderError() {
+    // Don't call super as we don't really need issues for this.
+    return (
+      <ErrorPanel>
+        <IconWarning color={theme.gray2} size="lg" />
+      </ErrorPanel>
+    );
+  }
+
+  renderBody() {
+    const {chartData} = this.state;
+    if (chartData === null) {
+      return null;
+    }
+    const xAxis = {
+      type: 'category',
+      truncate: true,
+      axisLabel: {
+        showMinLabel: true,
+        showMaxLabel: true,
+      },
+      axisTick: {
+        interval: 0,
+        alignWithLabel: true,
+      },
+    };
+    const tooltip = {
+      valueFormatter(value) {
+        return getDuration(value / 1000, 2);
+      },
+    };
+    const colors = theme.charts.getColorPalette(1);
+
+    return (
+      <AreaChart
+        grid={{left: '10px', right: '10px', top: '40px', bottom: '0px'}}
+        xAxis={xAxis}
+        yAxis={{type: 'value'}}
+        series={transformData(chartData.data)}
+        tooltip={tooltip}
+        colors={colors}
+      />
+    );
+  }
+
+  render() {
+    return (
+      <React.Fragment>
+        <HeaderTitleLegend>
+          {t('Duration Percentiles')}
+          <Tooltip
+            position="top"
+            title={t(
+              `Compare the duration at each percentile. Compare with Latency Histogram to see transaction volume at duration intervals.`
+            )}
+          >
+            <StyledIconQuestion />
+          </Tooltip>
+        </HeaderTitleLegend>
+        {this.renderComponent()}
+      </React.Fragment>
+    );
+  }
+}
+
+const VALUE_EXTRACT_PATTERN = /(\d+)$/;
+/**
+ * Convert a discover response into a barchart compatible series
+ */
+function transformData(data: ApiResult[]) {
+  const extractedData = Object.keys(data[0])
+    .map((key: string) => {
+      const nameMatch = VALUE_EXTRACT_PATTERN.exec(key);
+      if (!nameMatch) {
+        return [-1, -1];
+      }
+      let nameValue = Number(nameMatch[1]);
+      if (nameValue > 100) {
+        nameValue /= 10;
+      }
+      return [nameValue, data[0][key]];
+    })
+    .filter(i => i[0] > 0);
+
+  extractedData.sort((a, b) => {
+    if (a[0] > b[0]) {
+      return 1;
+    }
+    if (a[0] < b[0]) {
+      return -1;
+    }
+    return 0;
+  });
+
+  return [
+    {
+      seriesName: t('Duration'),
+      data: extractedData.map(i => ({value: i[1], name: `${i[0].toLocaleString()}%`})),
+    },
+  ];
+}
+
+export default DurationPercentileChart;
