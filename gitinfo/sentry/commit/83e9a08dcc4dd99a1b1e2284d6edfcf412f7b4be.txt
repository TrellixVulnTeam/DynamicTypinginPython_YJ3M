commit 83e9a08dcc4dd99a1b1e2284d6edfcf412f7b4be
Author: Mark Story <mark@sentry.io>
Date:   Thu Feb 13 11:51:10 2020 -0500

    fix(api) Don't 500 on invalid per_page parameters (#16990)
    
    fix(api) Don't 500 on invalid per_page parameters
    
    Fixes SENTRY-F2A

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 64bcb236e0..a917191cce 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -236,7 +236,10 @@ class Endpoint(APIView):
     ):
         assert (paginator and not paginator_kwargs) or (paginator_cls and paginator_kwargs)
 
-        per_page = int(request.GET.get("per_page", default_per_page))
+        try:
+            per_page = int(request.GET.get("per_page", default_per_page))
+        except ValueError:
+            raise ParseError(detail="Invalid per_page parameter.")
 
         input_cursor = None
         if request.GET.get("cursor"):
@@ -253,7 +256,7 @@ class Endpoint(APIView):
         try:
             cursor_result = paginator.get_result(limit=per_page, cursor=input_cursor)
         except BadPaginationError as e:
-            return Response({"detail": six.text_type(e)}, status=400)
+            return ParseError(detail=six.text_type(e))
 
         # map results based on callback
         if on_results:
diff --git a/tests/sentry/api/test_base.py b/tests/sentry/api/test_base.py
index 2eac9c2170..9a8c61ca3c 100644
--- a/tests/sentry/api/test_base.py
+++ b/tests/sentry/api/test_base.py
@@ -6,6 +6,7 @@ from django.http import HttpRequest
 from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
+from sentry.api.paginator import GenericOffsetPaginator
 from sentry.models import ApiKey
 from sentry.testutils import APITestCase
 
@@ -17,6 +18,23 @@ class DummyEndpoint(Endpoint):
         return Response({"ok": True})
 
 
+class DummyPaginationEndpoint(Endpoint):
+    permission_classes = ()
+
+    def get(self, request):
+        values = [x for x in range(0, 100)]
+
+        def data_fn(offset, limit):
+            page_offset = offset * limit
+            return values[page_offset : page_offset + limit]
+
+        return self.paginate(
+            request=request,
+            paginator=GenericOffsetPaginator(data_fn),
+            on_results=lambda results: results,
+        )
+
+
 _dummy_endpoint = DummyEndpoint.as_view()
 
 
@@ -40,6 +58,28 @@ class EndpointTest(APITestCase):
         assert response["Access-Control-Allow-Origin"] == "http://example.com"
 
 
+class PaginateTest(APITestCase):
+    def setUp(self):
+        super(PaginateTest, self).setUp()
+        self.request = HttpRequest()
+        self.request.method = "GET"
+        self.view = DummyPaginationEndpoint().as_view()
+
+    def test_success(self):
+        response = self.view(self.request)
+        assert response.status_code == 200, response.content
+
+    def test_invalid_per_page(self):
+        self.request.GET = {"per_page": "nope"}
+        response = self.view(self.request)
+        assert response.status_code == 400
+
+    def test_invalid_cursor(self):
+        self.request.GET = {"cursor": "no:no:no"}
+        response = self.view(self.request)
+        assert response.status_code == 400
+
+
 class EndpointJSONBodyTest(APITestCase):
     def setUp(self):
         super(EndpointJSONBodyTest, self).setUp()
