commit f66a2703c5ed33f2bf003b0d90fc4fc3edfc1831
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Aug 13 15:58:42 2015 -0700

    Component tests can now stub arbitrary context properties

diff --git a/tests/js/helpers/stubContext.jsx b/tests/js/helpers/stubContext.jsx
new file mode 100644
index 0000000000..71af873551
--- /dev/null
+++ b/tests/js/helpers/stubContext.jsx
@@ -0,0 +1,53 @@
+// https://github.com/karlbright/react-stub-context/blob/master/src/index.js
+
+var React = require('react');
+
+function stubContext(BaseComponent, context) {
+  if(typeof context === 'undefined' || context === null) context = {};
+
+  var _contextTypes = {}, _context = context;
+
+  try {
+    Object.keys(_context).forEach(function(key) {
+      _contextTypes[key] = React.PropTypes.any;
+    });
+  } catch (err) {
+    throw new TypeError('createdStubbedContextComponent requires an object');
+  }
+
+  var StubbedContextParent = React.createClass({
+    displayName: 'StubbedContextParent',
+    childContextTypes: _contextTypes,
+    getChildContext() { return _context; },
+    contextTypes: _contextTypes,
+
+    render() {
+      return React.Children.only(this.props.children);
+    }
+  });
+
+  var StubbedContextHandler = React.createClass({
+    displayName: 'StubbedContextHandler',
+    childContextTypes: _contextTypes,
+    getChildContext() { return _context; },
+
+    getWrappedElement() { return this._wrappedElement; },
+    getWrappedParentElement() { return this._wrappedParentElement; },
+
+    render() {
+      this._wrappedElement = <BaseComponent ref="wrapped" {...this.state} {...this.props} />;
+      this._wrappedParentElement = <StubbedContextParent>{this._wrappedElement}</StubbedContextParent>;
+
+      return this._wrappedParentElement;
+    }
+  });
+
+  BaseComponent.contextTypes = Object.assign({}, BaseComponent.contextTypes, _contextTypes);
+
+  StubbedContextHandler.getWrappedComponent = function() { return BaseComponent; };
+  StubbedContextHandler.getWrappedParentComponent = function() { return StubbedContextParent; };
+
+  return StubbedContextHandler;
+}
+
+module.exports = stubContext;
\ No newline at end of file
diff --git a/tests/js/helpers/stubRouter.jsx b/tests/js/helpers/stubRouter.jsx
new file mode 100644
index 0000000000..3ca3e27a4b
--- /dev/null
+++ b/tests/js/helpers/stubRouter.jsx
@@ -0,0 +1,18 @@
+export default function (stubs) {
+  function RouterStub() {}
+
+  Object.assign(RouterStub, {
+    makePath() {},
+    makeHref() {},
+    transitionTo() {},
+    replaceWith() {},
+    goBack() {},
+    getCurrentPath() {},
+    getCurrentRoutes() {},
+    getCurrentPathname() {},
+    isActive() {},
+    getRouteAtDepth() {},
+    setRouteComponentAtDepth() {}
+  }, stubs);
+  return RouterStub;
+}
\ No newline at end of file
diff --git a/tests/js/helpers/stubRouterContext.jsx b/tests/js/helpers/stubRouterContext.jsx
deleted file mode 100644
index 8fabec3619..0000000000
--- a/tests/js/helpers/stubRouterContext.jsx
+++ /dev/null
@@ -1,39 +0,0 @@
-var React = require("react");
-
-export default (Component, props, stubs) => {
-  function RouterStub() {}
-
-  Object.assign(RouterStub, {
-    makePath() {},
-    makeHref() {},
-    transitionTo() {},
-    replaceWith() {},
-    goBack() {},
-    getCurrentPath() {},
-    getCurrentRoutes() {},
-    getCurrentPathname() {},
-    getCurrentParams() {},
-    getCurrentQuery() {},
-    isActive() {},
-    getRouteAtDepth() {},
-    setRouteComponentAtDepth() {}
-  }, stubs);
-
-  return React.createClass({
-    childContextTypes: {
-      router: React.PropTypes.func,
-      routeDepth: React.PropTypes.number
-    },
-
-    getChildContext() {
-      return {
-        router: RouterStub,
-        routeDepth: 0
-      };
-    },
-
-    render() {
-      return <Component ref="stub" {...props} />;
-    }
-  });
-};
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
new file mode 100644
index 0000000000..0d6e001451
--- /dev/null
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -0,0 +1,56 @@
+/*jshint expr: true*/
+var React = require("react/addons");
+var Cookies = require("js-cookie");
+
+var api = require("app/api");
+var OrganizationTeams = require("app/views/organizationTeams");
+var stubReactComponents = require("../../helpers/stubReactComponent");
+var stubRouter = require("../../helpers/stubRouter");
+var stubContext = require("../../helpers/stubContext");
+
+var TestUtils = React.addons.TestUtils;
+var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
+var findWithType = TestUtils.findRenderedComponentWithType;
+
+describe("OrganizationTeams", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+
+    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+
+    var ContextStubbedOrganizationTeams = stubContext(OrganizationTeams, {
+      organization: { id: 1337 },
+      router: stubRouter({
+        getCurrentParams() {
+          return { orgId: "123" };
+        },
+        getCurrentQuery() {
+          return { limit: 0 };
+        }
+      })
+    });
+
+    this.Element = <ContextStubbedOrganizationTeams/>;
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+    React.unmountComponentAtNode(document.body);
+  });
+
+  describe("fetchStats()", function() {
+    it('should make a request to the organizations endpoint', function () {
+      var organizationTeams = React.render(this.Element, document.body).refs.wrapped;
+
+      // NOTE: creation of OrganizationTeams causes a bunch of API requests to fire ...
+      //       reset the request stub so that we can get an accurate count
+      this.stubbedApiRequest.reset();
+
+      organizationTeams.fetchStats();
+
+      expect(this.stubbedApiRequest.callCount).to.equal(1);
+      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal('/organizations/123/stats/');
+    });
+  });
+});
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 6db2afb2be..c4bfbbdbed 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -9,7 +9,8 @@ var LoadingIndicator = require("app/components/loadingIndicator");
 var Stream = require("app/views/stream");
 var StreamGroup = require("app/components/streamGroup");
 var stubReactComponents = require("../../helpers/stubReactComponent");
-var stubRouterContext = require("../../helpers/stubRouterContext");
+var stubContext = require("../../helpers/stubContext");
+var stubRouter = require("../../helpers/stubRouter");
 
 var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
@@ -23,21 +24,22 @@ describe("Stream", function() {
     this.stubbedApiRequest = this.sandbox.stub(Api, "request");
     stubReactComponents(this.sandbox, [StreamGroup]);
 
-    this.Element = stubRouterContext(Stream, {
-      setProjectNavSection() {}
-    }, {
-      getCurrentParams() {
-        return {
-          orgId: "123",
-          projectId: "456"
-        };
-      },
-      getCurrentQuery() {
-        return {
-          limit: 0
-        };
-      }
+    var ContextStubbedStream = stubContext(Stream, {
+      router: stubRouter({
+        getCurrentParams() {
+          return {
+            orgId: "123",
+            projectId: "456"
+          };
+        },
+        getCurrentQuery() {
+          return { limit: 0 };
+        }
+      })
     });
+
+
+    this.Element = <ContextStubbedStream setProjectNavSection={function () {}}/>;
   });
 
   afterEach(function() {
@@ -57,8 +59,8 @@ describe("Stream", function() {
 
       var stubbedSetEndpoint = this.sandbox.stub(CursorPoller.prototype, "setEndpoint");
 
-      var wrapper = React.render(<this.Element />, document.body);
-      wrapper.refs.stub.fetchData();
+      var wrapper = React.render(this.Element, document.body);
+      wrapper.refs.wrapped.fetchData();
 
       expect(stubbedSetEndpoint.calledWith(expectedUrl)).to.be.true;
     });
@@ -68,15 +70,15 @@ describe("Stream", function() {
   describe("render()", function() {
 
     it("displays a loading indicator when component is loading", function() {
-      var wrapper = React.render(<this.Element />, document.body);
-      wrapper.refs.stub.setState({ loading: true });
+      var wrapper = React.render(this.Element, document.body);
+      wrapper.refs.wrapped.setState({ loading: true });
       var expected = findWithType(wrapper, LoadingIndicator);
       expect(expected).to.be.ok;
     });
 
     it("displays an error when component has errored", function() {
-      var wrapper = React.render(<this.Element />, document.body);
-      wrapper.refs.stub.setState({
+      var wrapper = React.render(this.Element, document.body);
+      wrapper.refs.wrapped.setState({
         error: true,
         loading: false
       });
@@ -85,8 +87,8 @@ describe("Stream", function() {
     });
 
     it("displays the group list", function() {
-      var wrapper = React.render(<this.Element />, document.body);
-      wrapper.refs.stub.setState({
+      var wrapper = React.render(this.Element, document.body);
+      wrapper.refs.wrapped.setState({
         error: false,
         groupIds: ["1"],
         loading: false
@@ -96,8 +98,8 @@ describe("Stream", function() {
     });
 
     it("displays empty with no ids", function() {
-      var wrapper = React.render(<this.Element />, document.body);
-      wrapper.refs.stub.setState({
+      var wrapper = React.render(this.Element, document.body);
+      wrapper.refs.wrapped.setState({
         error: false,
         groupIds: [],
         loading: false
@@ -116,14 +118,14 @@ describe("Stream", function() {
 
     it("reads the realtimeActive state from a cookie", function() {
       Cookies.set("realtimeActive", "false");
-      var wrapper = React.render(<this.Element />, document.body);
+      var wrapper = React.render(this.Element, document.body);
       var expected = findWithClass(wrapper, "icon-play");
       expect(expected).to.be.ok;
     });
 
     it("reads the true realtimeActive state from a cookie", function() {
       Cookies.set("realtimeActive", "true");
-      var wrapper = React.render(<this.Element />, document.body);
+      var wrapper = React.render(this.Element, document.body);
       var expected = findWithClass(wrapper, "icon-pause");
       expect(expected).to.be.ok;
     });
@@ -133,14 +135,14 @@ describe("Stream", function() {
   describe("onRealtimeChange", function() {
 
     it("sets the realtimeActive state", function() {
-      var wrapper = React.render(<this.Element />, document.body);
-      wrapper.refs.stub.state.realtimeActive = false;
-      wrapper.refs.stub.onRealtimeChange(true);
-      expect(wrapper.refs.stub.state.realtimeActive).to.eql(true);
+      var wrapper = React.render(this.Element, document.body);
+      wrapper.refs.wrapped.state.realtimeActive = false;
+      wrapper.refs.wrapped.onRealtimeChange(true);
+      expect(wrapper.refs.wrapped.state.realtimeActive).to.eql(true);
       expect(Cookies.get("realtimeActive")).to.eql("true");
 
-      wrapper.refs.stub.onRealtimeChange(false);
-      expect(wrapper.refs.stub.state.realtimeActive).to.eql(false);
+      wrapper.refs.wrapped.onRealtimeChange(false);
+      expect(wrapper.refs.wrapped.state.realtimeActive).to.eql(false);
       expect(Cookies.get("realtimeActive")).to.eql("false");
     });
 
@@ -160,8 +162,8 @@ describe("Stream", function() {
         loading: true,
         error: false
       };
-      var wrapper = React.render(<this.Element />, document.body);
-      var actual = wrapper.refs.stub.getInitialState();
+      var wrapper = React.render(this.Element, document.body);
+      var actual = wrapper.refs.wrapped.getInitialState();
 
       for (var property in expected) {
         expect(actual[property]).to.eql(expected[property]);
