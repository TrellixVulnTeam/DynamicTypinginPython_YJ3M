commit 99df490c32eb8ecc3892d8e171dd0d3cb4a7d13f
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 29 11:49:38 2016 -0700

    Add reason to GroupSubscription.

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index e839fd30df..6768ca4abe 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -13,8 +13,9 @@ from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
 from sentry.constants import STATUS_CHOICES
 from sentry.models import (
-    Activity, Group, GroupAssignee, GroupSeen, GroupSubscription, GroupStatus,
-    GroupTagKey, GroupTagValue, Release, UserReport
+    Activity, Group, GroupAssignee, GroupSeen, GroupSubscription,
+    GroupSubscriptionReason, GroupStatus, GroupTagKey, GroupTagValue, Release,
+    UserReport
 )
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
@@ -261,6 +262,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
                     GroupSubscription.objects.subscribe(
                         group=group,
                         user=result['assignedTo'],
+                        reason=GroupSubscriptionReason.assigned,
                     )
             else:
                 GroupAssignee.objects.deassign(group, acting_user)
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 83ce6e90c2..16704b228d 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -9,7 +9,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework.group_notes import NoteSerializer
-from sentry.models import Activity, GroupSubscription
+from sentry.models import Activity, GroupSubscription, GroupSubscriptionReason
 from sentry.utils.functional import extract_lazy_object
 
 
@@ -50,6 +50,7 @@ class GroupNotesEndpoint(GroupEndpoint):
         GroupSubscription.objects.subscribe(
             group=group,
             user=request.user,
+            reason=GroupSubscriptionReason.comment,
         )
 
         activity = Activity.objects.create(
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 6837cd3bbc..5f87315dda 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -15,7 +15,8 @@ from sentry.constants import DEFAULT_SORT_OPTION
 from sentry.db.models.query import create_or_update
 from sentry.models import (
     Activity, EventMapping, Group, GroupBookmark, GroupResolution, GroupSeen,
-    GroupSubscription, GroupSnooze, GroupStatus, Release, TagKey
+    GroupSubscription, GroupSubscriptionReason, GroupSnooze, GroupStatus,
+    Release, TagKey
 )
 from sentry.models.group import looks_like_short_id
 from sentry.search.utils import parse_query
@@ -362,6 +363,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 GroupSubscription.objects.subscribe(
                     user=request.user,
                     group=group,
+                    reason=GroupSubscriptionReason.status_change,
                 )
 
                 if created:
@@ -411,6 +413,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                     GroupSubscription.objects.subscribe(
                         user=request.user,
                         group=group,
+                        reason=GroupSubscriptionReason.status_change,
                     )
                     activity = Activity.objects.create(
                         project=group.project,
@@ -476,6 +479,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                     GroupSubscription.objects.subscribe(
                         user=request.user,
                         group=group,
+                        reason=GroupSubscriptionReason.status_change,
                     )
                     activity = Activity.objects.create(
                         project=group.project,
@@ -513,6 +517,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 GroupSubscription.objects.subscribe(
                     user=request.user,
                     group=group,
+                    reason=GroupSubscriptionReason.bookmark,
                 )
         elif result.get('isBookmarked') is False:
             GroupBookmark.objects.filter(
diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index af76d24678..913b798115 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -4,11 +4,22 @@ from django.conf import settings
 from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 
-from sentry.db.models import FlexibleForeignKey, Model, BaseManager, sane_repr
+from sentry.db.models import (
+    BoundedPositiveIntegerField, FlexibleForeignKey, Model, BaseManager,
+    sane_repr
+)
+
+
+class GroupSubscriptionReason(object):
+    unknown = 0
+    comment = 1
+    assigned = 2
+    bookmark = 3
+    status_change = 4
 
 
 class GroupSubscriptionManager(BaseManager):
-    def subscribe(self, group, user):
+    def subscribe(self, group, user, reason=GroupSubscriptionReason.unknown):
         """
         Subscribe a user to an issue, but only if the user has not explicitly
         unsubscribed.
@@ -20,6 +31,7 @@ class GroupSubscriptionManager(BaseManager):
                     group=group,
                     project=group.project,
                     is_active=True,
+                    reason=reason,
                 )
         except IntegrityError:
             pass
@@ -36,6 +48,9 @@ class GroupSubscription(Model):
     # namespace related_name on User since we don't own the model
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL)
     is_active = models.BooleanField(default=True)
+    reason = BoundedPositiveIntegerField(
+        default=GroupSubscriptionReason.unknown,
+    )
     date_added = models.DateTimeField(default=timezone.now, null=True)
 
     objects = GroupSubscriptionManager()
diff --git a/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py b/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py
index 4913067acf..0cde8f3318 100644
--- a/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py
+++ b/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py
@@ -15,6 +15,7 @@ class Migration(SchemaMigration):
             ('group', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(related_name='subscription_set', to=orm['sentry.Group'])),
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'])),
             ('is_active', self.gf('django.db.models.fields.BooleanField')(default=True)),
+            ('reason', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
             ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, null=True)),
         ))
         db.send_create_signal('sentry', ['GroupSubscription'])
@@ -22,8 +23,6 @@ class Migration(SchemaMigration):
         # Adding unique constraint on 'GroupSubscription', fields ['group', 'user']
         db.create_unique('sentry_groupsubscription', ['group_id', 'user_id'])
 
-        # kill duplicate index
-        # db.delete_index('sentry_groupsubscription', ['group_id'])
 
     def backwards(self, orm):
         # Removing unique constraint on 'GroupSubscription', fields ['group', 'user']
@@ -116,7 +115,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 7, 5, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 7, 6, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -354,6 +353,7 @@ class Migration(SchemaMigration):
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
             'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
+            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
         },
         'sentry.grouptagkey': {
@@ -640,4 +640,4 @@ class Migration(SchemaMigration):
         }
     }
 
-    complete_apps = ['sentry']
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/tests/sentry/models/test_groupsubscription.py b/tests/sentry/models/test_groupsubscription.py
new file mode 100644
index 0000000000..4ca86da884
--- /dev/null
+++ b/tests/sentry/models/test_groupsubscription.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from sentry.models import GroupSubscription
+from sentry.testutils import TestCase
+
+
+class SubscribeTest(TestCase):
+    def test_simple(self):
+        group = self.create_group()
+        user = self.create_user()
+
+        GroupSubscription.objects.subscribe(group=group, user=user)
+
+        assert GroupSubscription.objects.filter(
+            group=group,
+            user=user,
+        ).exists()
+
+        # should not error
+        GroupSubscription.objects.subscribe(group=group, user=user)
