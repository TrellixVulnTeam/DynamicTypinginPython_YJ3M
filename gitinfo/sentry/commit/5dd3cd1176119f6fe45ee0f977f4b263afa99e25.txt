commit 5dd3cd1176119f6fe45ee0f977f4b263afa99e25
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Nov 1 19:06:33 2018 -0700

    feat(api): Add environment support to org events endpoint

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 4b8cd58c9d..d958bb4d03 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -8,11 +8,14 @@ from rest_framework.response import Response
 from sentry import roles
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.event_search import get_snuba_query_args, InvalidSearchQuery
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.event import SnubaEvent
 from sentry.api.utils import get_date_range_from_params, InvalidParams
-from sentry.models import OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
+from sentry.models import (
+    Environment, OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
+)
 from sentry.utils.snuba import raw_query
 
 
@@ -56,6 +59,25 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
 
         return list(project_ids)
 
+    def get_environments(self, request, organization):
+        requested_environments = set(request.GET.getlist('environment'))
+
+        if not requested_environments:
+            return []
+
+        environments = dict(
+            Environment.objects.filter(
+                organization_id=organization.id,
+                name__in=requested_environments,
+            ).values_list('name', 'id'),
+        )
+
+        if requested_environments != set(environments.keys()):
+            raise ResourceDoesNotExist
+
+        # snuba requires ids for filter keys
+        return environments.values()
+
     def get(self, request, organization):
         try:
             start, end = get_date_range_from_params(request.GET)
@@ -67,12 +89,17 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
         except ValueError:
             return Response({'detail': 'Invalid project ids'}, status=400)
 
+        environments = self.get_environments(request, organization)
+        params = {
+            'start': start,
+            'end': end,
+            'project_id': project_ids,
+        }
+        if environments:
+            params['environment'] = environments
+
         try:
-            snuba_args = get_snuba_query_args(query=request.GET.get('query'), params={
-                'start': start,
-                'end': end,
-                'project_id': project_ids,
-            })
+            snuba_args = get_snuba_query_args(query=request.GET.get('query'), params=params)
         except InvalidSearchQuery as exc:
             return Response({'detail': exc.message}, status=400)
 
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 6d8ec72f69..b0ba0a5b89 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -234,24 +234,27 @@ def get_snuba_query_args(query=None, params=None):
         'filter_keys': {},
     }
     for _filter in parsed_filters:
-        if _filter.key.snuba_name in ('start', 'end'):
-            kwargs[_filter.key.snuba_name] = _filter.value.raw_value
+        snuba_name = _filter.key.snuba_name
+        value = _filter.value.raw_value
 
-        elif _filter.key.snuba_name == 'project_id':
-            kwargs['filter_keys'][_filter.key.snuba_name] = _filter.value.raw_value
+        if snuba_name in ('start', 'end'):
+            kwargs[snuba_name] = value
 
-        elif _filter.key.snuba_name == 'message':
+        # environment can also be passed as a condition
+        elif snuba_name in ('project_id', 'environment') and isinstance(value, (list, tuple)):
+            kwargs['filter_keys'][snuba_name] = value
+
+        elif snuba_name == 'message':
             # make message search case insensitive
             kwargs['conditions'].append(
-                [['positionCaseInsensitive', ['message', "'%s'" %
-                                              (_filter.value.raw_value,)]], '!=', 0]
+                [['positionCaseInsensitive', ['message', "'%s'" % (value,)]], '!=', 0]
             )
 
         else:
             kwargs['conditions'].append([
-                _filter.key.snuba_name,
+                snuba_name,
                 _filter.operator,
-                _filter.value.raw_value,
+                value,
             ])
 
     return kwargs
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 331c23f26e..560b64180b 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -249,3 +249,54 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         self.assert_events_in_response(response, [event_1.event_id])
+
+    def test_environment_filtering(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        environment = self.create_environment(project=project, name="production")
+        environment2 = self.create_environment(project=project)
+        group = self.create_group(project=project)
+
+        event_1 = self.create_event(
+            'a' * 32, group=group, datetime=self.min_ago, tags={'environment': environment.name}
+        )
+        event_2 = self.create_event(
+            'b' * 32, group=group, datetime=self.min_ago, tags={'environment': environment.name}
+        )
+        self.create_event(
+            'c' * 32, group=group, datetime=self.min_ago, tags={'environment': environment2.name}
+        )
+
+        base_url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        # test as part of query param
+        url = '%s?environment=%s' % (base_url, environment.name)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        self.assert_events_in_response(response, [event_1.event_id, event_2.event_id])
+
+        # test as part of search
+        url = '%s?query=environment:%s' % (base_url, environment.name)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        self.assert_events_in_response(response, [event_1.event_id, event_2.event_id])
+
+        # test nonexistent environment
+        url = '%s?environment=notanenvironment' % (base_url,)
+        response = self.client.get(url, format='json')
+        assert response.status_code == 404
