commit c8580f4bfed985a3586fe0f557c97f6e84bf2ff5
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Feb 25 15:20:30 2019 +0100

    feat: Improved event titles for native crashes (#12131)

diff --git a/requirements-base.txt b/requirements-base.txt
index 8d473a2124..41f3b7e220 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -55,7 +55,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.11.0
-semaphore>=0.4.15,<0.5.0
+semaphore>=0.4.16,<0.5.0
 sentry-sdk>=0.7.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/culprit.py b/src/sentry/culprit.py
new file mode 100644
index 0000000000..536427071e
--- /dev/null
+++ b/src/sentry/culprit.py
@@ -0,0 +1,72 @@
+"""
+This file implements the legacy culprit system.  The culprit at this point is
+just used as a fallback if no transaction is set.  When a transaction is set
+the culprit is overriden by the transaction value.
+
+Over time we want to fully phase out the culprit.  Until then this is the
+code that generates it.
+"""
+
+from __future__ import absolute_import
+from sentry.constants import MAX_CULPRIT_LENGTH
+from sentry.utils.safe import get_path
+from sentry.utils.strings import truncatechars
+
+
+def generate_culprit(data):
+    platform = data.get('platform')
+    exceptions = get_path(data, 'exception', 'values', filter=True)
+    if exceptions:
+        # Synthetic events no longer get a culprit
+        last_exception = get_path(exceptions, -1)
+        if get_path(last_exception, 'mechanism', 'synthetic'):
+            return ''
+
+        stacktraces = [e['stacktrace'] for e in exceptions if get_path(e, 'stacktrace', 'frames')]
+    else:
+        stacktrace = data.get('stacktrace')
+        if stacktrace and stacktrace.get('frames'):
+            stacktraces = [stacktrace]
+        else:
+            stacktraces = None
+
+    culprit = None
+
+    if not culprit and stacktraces:
+        culprit = get_stacktrace_culprit(get_path(stacktraces, -1), platform=platform)
+
+    if not culprit and data.get('request'):
+        culprit = get_path(data, 'request', 'url')
+
+    return truncatechars(culprit or '', MAX_CULPRIT_LENGTH)
+
+
+def get_stacktrace_culprit(stacktrace, platform):
+    default = None
+    for frame in reversed(stacktrace['frames']):
+        if not frame:
+            continue
+        if frame.get('in_app'):
+            culprit = get_frame_culprit(frame, platform=platform)
+            if culprit:
+                return culprit
+        elif default is None:
+            default = get_frame_culprit(frame, platform=platform)
+    return default
+
+
+def get_frame_culprit(frame, platform):
+    # If this frame has a platform, we use it instead of the one that
+    # was passed in (as that one comes from the exception which might
+    # not necessarily be the same platform).
+    platform = frame.get('platform') or platform
+    if platform in ('objc', 'cocoa', 'native'):
+        return frame.get('function') or '?'
+    fileloc = frame.get('module') or frame.get('filename')
+    if not fileloc:
+        return ''
+    elif platform in ('javascript', 'node'):
+        # function and fileloc might be unicode here, so let it coerce
+        # to a unicode string if needed.
+        return '%s(%s)' % (frame.get('function') or '?', fileloc)
+    return '%s in %s' % (fileloc, frame.get('function') or '?')
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index b98f68afb4..b7e5b09c29 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -18,8 +18,7 @@ from django.utils.encoding import force_text
 
 from sentry import buffer, eventtypes, eventstream, features, tagstore, tsdb, filters
 from sentry.constants import (
-    LOG_LEVELS, LOG_LEVELS_MAP, MAX_CULPRIT_LENGTH, VALID_PLATFORMS,
-    MAX_TAG_VALUE_LENGTH,
+    LOG_LEVELS, LOG_LEVELS_MAP, VALID_PLATFORMS, MAX_TAG_VALUE_LENGTH,
 )
 from sentry.coreapi import (
     APIError,
@@ -52,11 +51,11 @@ from sentry.utils.data_filters import (
 from sentry.utils.dates import to_timestamp
 from sentry.utils.db import is_postgres, is_mysql
 from sentry.utils.safe import safe_execute, trim, get_path, setdefault_path
-from sentry.utils.strings import truncatechars
 from sentry.utils.geo import rust_geoip
 from sentry.utils.validators import is_float
 from sentry.utils.contexts_normalization import normalize_user_agent
 from sentry.stacktraces import normalize_in_app
+from sentry.culprit import generate_culprit
 
 
 logger = logging.getLogger("sentry.events")
@@ -135,31 +134,6 @@ else:
         return True
 
 
-def generate_culprit(data, platform=None):
-    exceptions = get_path(data, 'exception', 'values')
-    if exceptions:
-        stacktraces = [e['stacktrace'] for e in exceptions if get_path(e, 'stacktrace', 'frames')]
-    else:
-        stacktrace = data.get('stacktrace')
-        if stacktrace and stacktrace.get('frames'):
-            stacktraces = [stacktrace]
-        else:
-            stacktraces = None
-
-    culprit = None
-
-    if not culprit and stacktraces:
-        from sentry.interfaces.stacktrace import Stacktrace
-        culprit = Stacktrace.to_python(stacktraces[-1]).get_culprit_string(
-            platform=platform,
-        )
-
-    if not culprit and data.get('request'):
-        culprit = get_path(data, 'request', 'url')
-
-    return truncatechars(culprit or '', MAX_CULPRIT_LENGTH)
-
-
 def plugin_is_regression(group, event):
     project = event.project
     for plugin in plugins.for_project(project):
@@ -545,7 +519,7 @@ class EventManager(object):
         return force_text(
             self._data.get('culprit') or
             self._data.get('transaction') or
-            generate_culprit(self._data, platform=self._data['platform']) or
+            generate_culprit(self._data) or
             ''
         )
 
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 50c3c3c4c4..7c1a378196 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -8,15 +8,19 @@ from sentry.utils.strings import truncatechars
 from .base import BaseEvent
 
 
-def get_crash_file(stacktrace):
+def get_crash_location(exception, platform=None):
     default = None
-    for frame in reversed(get_path(stacktrace, 'frames', filter=True) or ()):
+    for frame in reversed(get_path(exception, 'stacktrace', 'frames', filter=True) or ()):
         fn = frame.get('filename') or frame.get('abs_path')
         if fn:
+            func = frame.get('function')
+            if func is not None:
+                from sentry.interfaces.stacktrace import trim_function_name
+                func = trim_function_name(func, frame.get('platform') or platform)
             if frame.get('in_app'):
-                return fn
+                return fn, func
             if default is None:
-                default = fn
+                default = fn, func
     return default
 
 
@@ -29,28 +33,38 @@ class ErrorEvent(BaseEvent):
 
     def get_metadata(self, data):
         exception = get_path(data, 'exception', 'values', -1)
+        if not exception:
+            return {}
 
-        # in some situations clients are submitting non-string data for these
-        rv = {
-            'type': trim(get_path(exception, 'type', default='Error'), 128),
-            'value': trim(get_path(exception, 'value', default=''), 1024),
-        }
+        loc = get_crash_location(exception, data.get('platform'))
+        rv = {}
 
-        # Attach crash location
-        if exception:
-            stacktrace = exception.get('stacktrace')
-            if stacktrace:
-                fn = get_crash_file(stacktrace)
-                if fn is not None:
-                    rv['filename'] = fn
+        # If the exception mechanism indicates a synthetic exception we do not
+        # want to record the type and value into the metadata.
+        if not get_path(exception, 'mechanism', 'synthetic'):
+            rv.update({
+                'type': trim(get_path(exception, 'type', default='Error'), 128),
+                'value': trim(get_path(exception, 'value', default=''), 1024),
+            })
+
+        # Attach crash location if available
+        if loc is not None:
+            fn, func = loc
+            if fn:
+                rv['filename'] = fn
+            if func:
+                rv['function'] = func
 
         return rv
 
     def get_title(self, metadata):
+        ty = metadata.get('type')
+        if ty is None:
+            return metadata.get('function') or '<unknown>'
         if not metadata['value']:
-            return metadata['type']
+            return ty
         return u'{}: {}'.format(
-            metadata['type'],
+            ty,
             truncatechars(metadata['value'].splitlines()[0], 100),
         )
 
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 7cf56e76dd..2c6d303d58 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -710,6 +710,7 @@ class Mechanism(Interface):
     >>>         "relevant_address": "0x1"
     >>>     },
     >>>     "handled": false,
+    >>>     "synthetic": false,
     >>>     "help_link": "https://developer.apple.com/library/content/qa/qa1367/_index.html",
     >>>     "meta": {
     >>>         "mach_exception": {
@@ -762,6 +763,7 @@ class Mechanism(Interface):
 
         kwargs = {
             'type': trim(data['type'], 128),
+            'synthetic': data.get('synthetic'),
             'description': trim(data.get('description'), 1024),
             'help_link': trim(data.get('help_link'), 1024),
             'handled': data.get('handled'),
@@ -778,6 +780,7 @@ class Mechanism(Interface):
     def to_json(self):
         return prune_empty_keys({
             'type': self.type,
+            'synthetic': self.synthetic,
             'description': self.description,
             'help_link': self.help_link,
             'handled': self.handled,
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index a44700a574..18a252cdc5 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -36,6 +36,10 @@ _filename_version_re = re.compile(
 )/""", re.X | re.I
 )
 
+# Native function trim re.  For now this is a simple hack until we have the
+# language hints in which will let us trim this down better.
+_native_function_trim_re = re.compile(r'^(.[^(]*)\(')
+
 # OpenJDK auto-generated classes for reflection access:
 #   sun.reflect.GeneratedSerializationConstructorAccessor123
 #   sun.reflect.GeneratedConstructorAccessor456
@@ -97,6 +101,20 @@ def trim_package(pkg):
     return pkg
 
 
+def trim_function_name(func, platform):
+    # TODO(mitsuhiko): we actually want to use the language information here
+    # but we don't have that yet.
+    if platform in ('objc', 'cocoa', 'native'):
+        # objc function
+        if func.startswith(('[', '+[', '-[')):
+            return func
+        # c/c++ function hopefully
+        match = _native_function_trim_re.match(func.strip())
+        if match is not None:
+            return match.group(1).strip()
+    return func
+
+
 def to_hex_addr(addr):
     if addr is None:
         return None
@@ -622,23 +640,6 @@ class Frame(Interface):
             }
         ).strip('\n')
 
-    def get_culprit_string(self, platform=None):
-        # If this frame has a platform, we use it instead of the one that
-        # was passed in (as that one comes from the exception which might
-        # not necessarily be the same platform).
-        if self.platform is not None:
-            platform = self.platform
-        if platform in ('objc', 'cocoa', 'native'):
-            return self.function or '?'
-        fileloc = self.module or self.filename
-        if not fileloc:
-            return ''
-        elif platform in ('javascript', 'node'):
-            # function and fileloc might be unicode here, so let it coerce
-            # to a unicode string if needed.
-            return '%s(%s)' % (self.function or '?', fileloc)
-        return '%s in %s' % (fileloc, self.function or '?', )
-
 
 class Stacktrace(Interface):
     """
@@ -944,14 +945,3 @@ class Stacktrace(Interface):
             )
 
         return '\n'.join(result)
-
-    def get_culprit_string(self, platform=None):
-        default = None
-        for frame in reversed(self.frames):
-            if frame.in_app:
-                culprit = frame.get_culprit_string(platform=platform)
-                if culprit:
-                    return culprit
-            elif default is None:
-                default = frame.get_culprit_string(platform=platform)
-        return default
diff --git a/src/sentry/lang/native/minidump.py b/src/sentry/lang/native/minidump.py
index 9021ec1895..2b3c251930 100644
--- a/src/sentry/lang/native/minidump.py
+++ b/src/sentry/lang/native/minidump.py
@@ -78,6 +78,7 @@ def merge_process_state_event(data, state, cfi=None):
         'mechanism': {
             'type': 'minidump',
             'handled': False,
+            'synthetic': True,
             # We cannot extract exception codes or signals with the breakpad
             # extractor just yet. Once these capabilities are added to symbolic,
             # these values should go in the mechanism here.
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx b/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
index 67aa2ff271..c9f3cea405 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
@@ -63,8 +63,11 @@ class EventOrGroupHeader extends React.Component {
 
   getLocation() {
     const {data} = this.props;
-    const {metadata} = data || {};
-    return metadata.filename || null;
+    if (data.type === 'error') {
+      const {metadata} = data || {};
+      return metadata.filename || null;
+    }
+    return null;
   }
 
   getTitle() {
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
index 2cd36eadac..a8807b8255 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
@@ -26,8 +26,12 @@ class EventOrGroupTitle extends React.Component {
     let subtitle = null;
 
     if (type == 'error') {
-      title = metadata.type;
       subtitle = culprit;
+      if (metadata.type) {
+        title = metadata.type;
+      } else {
+        title = metadata.function || '<unknown>';
+      }
     } else if (type == 'csp') {
       title = metadata.directive;
       subtitle = metadata.uri;
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index 4904df54a5..03672150b7 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -75,11 +75,19 @@ def merge_mappings(values):
     return result
 
 
+def _generate_culprit(event):
+    # XXX(mitsuhiko): workaround: some old events do not have this data yet.
+    # This should be save delete by end of 2019 even considering slow on-prem
+    # releases.  Platform was added back to data in december 2018.
+    data = event.data
+    if data.get('platform') is None:
+        data = dict(data.items())
+        data['platform'] = event.platform
+    return generate_culprit(data)
+
+
 initial_fields = {
-    'culprit': lambda event: generate_culprit(
-        event.data,
-        event.platform,
-    ),
+    'culprit': lambda event: _generate_culprit(event),
     'data': lambda event: {
         'last_received': event.data.get('received') or float(event.datetime.strftime('%s')),
         'type': event.data['type'],
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 47c6eb2e76..5e92b5a09f 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -9,7 +9,10 @@ from django.conf import settings
 from django.template.loader import render_to_string
 from exam import fixture
 
-from sentry.interfaces.stacktrace import (Frame, Stacktrace, get_context, is_url, slim_frame_data)
+from sentry.interfaces.stacktrace import (
+    Frame, Stacktrace, get_context, is_url, slim_frame_data,
+    trim_function_name
+)
 from sentry.models import Event
 from sentry.testutils import TestCase
 
@@ -25,6 +28,16 @@ def test_is_url():
     assert is_url('blob:\x00') is False
 
 
+def test_trim_function_name():
+    assert trim_function_name('+[foo:(bar)]', 'objc') == '+[foo:(bar)]'
+    assert trim_function_name('[foo:(bar)]', 'objc') == '[foo:(bar)]'
+    assert trim_function_name('-[foo:(bar)]', 'objc') == '-[foo:(bar)]'
+    assert trim_function_name(
+        '(anonymous namespace)::foo(int)',
+        'native') == '(anonymous namespace)::foo'
+    assert trim_function_name('foo::bar::foo(int)', 'native') == 'foo::bar::foo'
+
+
 class GetContextTest(TestCase):
     def test_works_with_empty_filename(self):
         result = get_context(0, 'hello world')
@@ -721,64 +734,6 @@ class StacktraceTest(TestCase):
         result = interface.compute_hashes()
         self.assertEquals(result, [])
 
-    def test_cocoa_culprit(self):
-        stacktrace = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'filename': 'foo/baz.c',
-                        'package': '/foo/bar/baz.dylib',
-                        'lineno': 1,
-                        'in_app': True,
-                        'function': '-[CRLCrashAsyncSafeThread crash]',
-                    }
-                ]
-            )
-        )
-        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
-
-    def test_emoji_culprit(self):
-        stacktrace = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'filename': 'foo/baz.c',
-                        'package': '/foo/bar/baz.dylib',
-                        'module': u'\U0001f62d',
-                        'lineno': 1,
-                        'in_app': True,
-                        'function': u'\U0001f60d',
-                    }
-                ]
-            )
-        )
-        assert stacktrace.get_culprit_string(platform='javascript') == u'\U0001f60d(\U0001f62d)'
-
-    def test_cocoa_strict_stacktrace(self):
-        stacktrace = Stacktrace.to_python(
-            dict(
-                frames=[
-                    {
-                        'filename': 'foo/baz.c',
-                        'package': '/foo/bar/libswiftCore.dylib',
-                        'lineno': 1,
-                        'in_app': False,
-                        'function': 'fooBar',
-                    }, {
-                        'package': '/foo/bar/MyApp',
-                        'in_app': True,
-                        'function': 'fooBar2',
-                    }, {
-                        'filename': 'Mycontroller.swift',
-                        'package': '/foo/bar/MyApp',
-                        'in_app': True,
-                        'function': '-[CRLCrashAsyncSafeThread crash]',
-                    }
-                ]
-            )
-        )
-        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
-
     def test_compute_hashes_does_not_group_different_js_errors(self):
         interface = Stacktrace.to_python(
             {
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 2c58edfa36..6d8238c772 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -569,7 +569,7 @@ class GenerateModulesTest(TestCase):
         }
         generate_modules(data)
         fix_culprit(data)
-        assert data['culprit'] == 'bar in oops'
+        assert data['culprit'] == 'oops(bar)'
 
     def test_ensure_module_names(self):
         from sentry.lang.javascript.plugin import generate_modules
diff --git a/tests/sentry/lang/native/test_minidump.py b/tests/sentry/lang/native/test_minidump.py
index f51da3cf03..3d0116c875 100644
--- a/tests/sentry/lang/native/test_minidump.py
+++ b/tests/sentry/lang/native/test_minidump.py
@@ -148,7 +148,8 @@ def test_minidump_linux():
         'exception': {
             'mechanism': {
                 'type': 'minidump',
-                'handled': False
+                'handled': False,
+                'synthetic': True,
             },
             'stacktrace': {
                 'frames': [
@@ -625,7 +626,8 @@ def test_minidump_macos():
         'exception': {
             'mechanism': {
                 'type': 'minidump',
-                'handled': False
+                'handled': False,
+                'synthetic': True,
             },
             'stacktrace': {
                 'frames': [
@@ -836,7 +838,8 @@ def test_minidump_windows():
         'exception': {
             'mechanism': {
                 'type': 'minidump',
-                'handled': False
+                'handled': False,
+                'synthetic': True,
             },
             'stacktrace': {
                 'frames': [
diff --git a/tests/sentry/test_culprit.py b/tests/sentry/test_culprit.py
new file mode 100644
index 0000000000..73c079c6ee
--- /dev/null
+++ b/tests/sentry/test_culprit.py
@@ -0,0 +1,154 @@
+from __future__ import absolute_import
+
+from sentry.event_manager import EventManager
+
+
+def get_culprit(data):
+    mgr = EventManager(data)
+    mgr.normalize()
+    return mgr.get_culprit()
+
+
+def test_cocoa_culprit():
+    culprit = get_culprit({
+        'platform': 'cocoa',
+        'exception': {
+            'type': 'Crash',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.c',
+                        'package': '/foo/bar/baz.dylib',
+                        'lineno': 1,
+                        'in_app': True,
+                        'function': '-[CRLCrashAsyncSafeThread crash]',
+                    }
+                ]
+            }
+        }
+    })
+    assert culprit == '-[CRLCrashAsyncSafeThread crash]'
+
+
+def test_emoji_culprit():
+    culprit = get_culprit({
+        'platform': 'native',
+        'exception': {
+            'type': 'Crash',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.c',
+                        'package': '/foo/bar/baz.dylib',
+                        'module': u'\U0001f62d',
+                        'lineno': 1,
+                        'in_app': True,
+                        'function': u'\U0001f60d',
+                    }
+                ]
+            }
+        }
+    })
+    assert culprit == u'\U0001f60d'
+
+
+def test_cocoa_strict_stacktrace():
+    culprit = get_culprit({
+        'platform': 'native',
+        'exception': {
+            'type': 'Crash',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.c',
+                        'package': '/foo/bar/libswiftCore.dylib',
+                        'lineno': 1,
+                        'in_app': False,
+                        'function': 'fooBar',
+                    }, {
+                        'package': '/foo/bar/MyApp',
+                        'in_app': True,
+                        'function': 'fooBar2',
+                    }, {
+                        'filename': 'Mycontroller.swift',
+                        'package': '/foo/bar/MyApp',
+                        'in_app': True,
+                        'function': '-[CRLCrashAsyncSafeThread crash]',
+                    }
+                ]
+            }
+        }
+    })
+    assert culprit == '-[CRLCrashAsyncSafeThread crash]'
+
+
+def test_culprit_for_synthetic_event():
+    # Synthetic events do not generate a culprit
+    culprit = get_culprit({
+        'platform': 'javascript',
+        'exception': {
+            'type': 'Error',
+            'value': 'I threw up stringly',
+            'mechanism': {
+                'type': 'string-error',
+                'synthetic': True,
+            },
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.js',
+                        'package': 'node_modules/blah/foo/bar.js',
+                        'lineno': 42,
+                        'in_app': True,
+                        'function': 'fooBar',
+                    }
+                ]
+            }
+        }
+    })
+    assert culprit == ''
+
+
+def test_culprit_for_javascript_event():
+    culprit = get_culprit({
+        'platform': 'javascript',
+        'exception': {
+            'type': 'Error',
+            'value': 'I fail hard',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.js',
+                        'package': 'node_modules/blah/foo/bar.js',
+                        'lineno': 42,
+                        'in_app': True,
+                        'function': 'fooBar',
+                    }
+                ]
+            }
+        }
+    })
+    assert culprit == 'fooBar(foo/baz.js)'
+
+
+def test_culprit_for_python_event():
+    culprit = get_culprit({
+        'platform': 'python',
+        'exception': {
+            'type': 'ZeroDivisionError',
+            'value': 'integer division or modulo by zero',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'filename': 'foo/baz.py',
+                        'module': 'foo.baz',
+                        'package': 'foo/baz.py',
+                        'lineno': 23,
+                        'in_app': True,
+                        'function': 'it_failed',
+                    }
+                ]
+            }
+        }
+    })
+    assert culprit == 'foo.baz in it_failed'
