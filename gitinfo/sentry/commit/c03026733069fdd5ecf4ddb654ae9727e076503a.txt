commit c03026733069fdd5ecf4ddb654ae9727e076503a
Author: Ben Vinegar <ben@benv.ca>
Date:   Sat Mar 19 15:09:14 2016 -0700

    Stop logAjaxError choking on undefined responseText (Firefox)

diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.jsx
index 6e7fbb0c8d..61d8149298 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.jsx
@@ -1,3 +1,5 @@
+import Raven from 'raven-js';
+
 export function logException(ex, context) {
   Raven.captureException(ex, {
     extra: context
@@ -7,9 +9,12 @@ export function logException(ex, context) {
 }
 
 export function logAjaxError(error, context) {
-  let errorString = (error.responseJSON ?
+  let errorString = error.responseJSON ?
     error.responseJSON.detail || error.responseJSON.toString() :
-    error.responseText.substr(0, 255));
+    error.responseText ?
+      error.responseText.substr(0, 255) :
+      '<unknown response>'; // occassionally responseText is undefined
+
   let message = `HTTP ${error.status}: ${errorString}`;
   Raven.captureMessage(message, {
     extra: context
diff --git a/tests/js/spec/utils/logging.spec.jsx b/tests/js/spec/utils/logging.spec.jsx
new file mode 100644
index 0000000000..7ab4cb05a5
--- /dev/null
+++ b/tests/js/spec/utils/logging.spec.jsx
@@ -0,0 +1,47 @@
+import {logAjaxError} from 'app/utils/logging';
+import Raven from 'raven-js';
+
+describe('logging', function () {
+  beforeEach(function () {
+    this.sandbox = sinon.sandbox.create();
+
+    this.sandbox.stub(Raven, 'captureMessage');
+    this.sandbox.stub(window.console, 'error');
+  });
+
+  afterEach(function () {
+    this.sandbox.restore();
+  });
+
+  describe('logAjaxError()', function () {
+    it('should handle (Sentry) JSON responses', function () {
+      logAjaxError({
+        status: 500,
+        responseJSON: {detail: 'A bad thing happened'}
+      }, {foo: 'bar'} /* context */);
+
+      expect(Raven.captureMessage.calledOnce).to.be.ok;
+      expect(Raven.captureMessage.getCall(0).args[0]).to.eql('HTTP 500: A bad thing happened');
+      expect(Raven.captureMessage.getCall(0).args[1].extra).to.eql({foo: 'bar'});
+    });
+
+    it('should handle text/html responses', function () {
+      logAjaxError({
+        status: 401,
+        responseText: 'You are not authenticated'
+      }, {foo: 'bar'} /* context */);
+
+      expect(Raven.captureMessage.calledOnce).to.be.ok;
+      expect(Raven.captureMessage.getCall(0).args[0]).to.eql('HTTP 401: You are not authenticated');
+      expect(Raven.captureMessage.getCall(0).args[1].extra).to.eql({foo: 'bar'});
+    });
+
+    it('should handle responseJSON/responseText undefined (bad content type?)', function () {
+      logAjaxError({status: 404}, {foo: 'bar'} /* context */);
+
+      expect(Raven.captureMessage.calledOnce).to.be.ok;
+      expect(Raven.captureMessage.getCall(0).args[0]).to.eql('HTTP 404: <unknown response>');
+      expect(Raven.captureMessage.getCall(0).args[1].extra).to.eql({foo: 'bar'});
+    });
+  });
+});
\ No newline at end of file
