commit 33952f8d95581426424d6ae4d5e27d476b9eb697
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 15 09:27:58 2016 -0700

    Improve react form abstractions (#4139)
    
    - Add GenericField which renders standard field config abstraction
    - Replace CheckboxField with BooleanField
    - Add email field
    - Add range field
    - Add number field
    - Move form config abstraction into utility

diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
index 3ea59f9cf3..5c3bba7807 100644
--- a/src/sentry/plugins/config.py
+++ b/src/sentry/plugins/config.py
@@ -2,9 +2,7 @@ from __future__ import absolute_import
 
 __all__ = ['PluginConfigMixin']
 
-import six
-
-from django import forms
+from sentry.utils.forms import form_to_config
 
 from .validators import DEFAULT_VALIDATORS
 
@@ -13,28 +11,6 @@ class PluginConfigMixin(object):
     asset_key = None
     assets = []
 
-    def field_to_config(self, name, field):
-        config = {
-            'name': name,
-            'label': field.label or name.replace('_', ' ').title(),
-            'placeholder': field.widget.attrs.get('placeholder'),
-            'help': field.help_text,
-            'required': field.required,
-        }
-        if isinstance(field, forms.URLField):
-            config['type'] = 'url'
-        elif isinstance(field, forms.CharField):
-            if isinstance(field.widget, forms.PasswordInput):
-                config['type'] = 'secret'
-            elif isinstance(field.widget, forms.Textarea):
-                config['type'] = 'textarea'
-            else:
-                config['type'] = 'text'
-        elif isinstance(field, forms.ChoiceField):
-            config['type'] = 'select'
-            config['choices'] = field.choices
-        return config
-
     def get_assets(self):
         return self.assets
 
@@ -52,12 +28,7 @@ class PluginConfigMixin(object):
         if not form:
             return []
 
-        config = []
-        for name, field in six.iteritems(form.base_fields):
-            row = self.field_to_config(name, field)
-            row['default'] = field.initial
-            config.append(row)
-        return config
+        return form_to_config(form)
 
     def validate_config_field(self, project, name, value, actor=None):
         """
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
index 2b4d0b3526..878c8a839e 100644
--- a/src/sentry/static/sentry/app/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -1,7 +1,15 @@
 import React from 'react';
+
+import {defined} from '../../utils';
+
 import InputField from './inputField';
 
 export default class BooleanField extends InputField {
+  valueFromProps(props) {
+    let value = super.valueFromProps(props);
+    return value ? true : false;
+  }
+
   onChange(e) {
     this.setState({
       value: e.target.checked,
@@ -14,13 +22,45 @@ export default class BooleanField extends InputField {
     return (
       <input id={this.getId()}
           type={this.getType()}
-          style={{marginLeft: '10px'}}
           onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
           defaultChecked={this.state.value} />
     );
   }
 
+
+  render() {
+    let className = this.getClassName();
+    if (this.props.error) {
+      className += ' has-error';
+    }
+    return (
+      <div className={className}>
+        <div className="controls">
+          <label className="control-label">
+            {this.getField()}
+            {this.props.label}
+            {this.props.disabled && this.props.disabledReason &&
+              <span className="disabled-indicator tip" title={this.props.disabledReason}>
+                <span className="icon-question" />
+              </span>
+            }
+          </label>
+          {defined(this.props.help) &&
+            <p className="help-block">{this.props.help}</p>
+          }
+          {this.props.error &&
+            <p className="error">{this.props.error}</p>
+          }
+        </div>
+      </div>
+    );
+  }
+
+  getClassName() {
+    return 'control-group checkbox';
+  }
+
   getType() {
     return 'checkbox';
   }
diff --git a/src/sentry/static/sentry/app/components/forms/checkboxField.jsx b/src/sentry/static/sentry/app/components/forms/checkboxField.jsx
deleted file mode 100644
index dd14154d06..0000000000
--- a/src/sentry/static/sentry/app/components/forms/checkboxField.jsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import jQuery from 'jquery';
-import React from 'react';
-import ReactDOM from 'react-dom';
-import FormField from './formField';
-
-export default class CheckboxField extends FormField {
-  constructor(props) {
-    super(props);
-
-    this.state.value = (
-      props.value ? true : false
-    );
-  }
-
-  // XXX(dcramer): this comes from TooltipMixin
-  componentDidMount() {
-    this.attachTooltips();
-  }
-
-  componentWillUnmount() {
-    this.removeTooltips();
-    jQuery(ReactDOM.findDOMNode(this)).unbind();
-  }
-
-  attachTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this))
-      .tooltip();
-  }
-
-  removeTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this))
-      .tooltip('destroy');
-  }
-
-  onChange(e) {
-    this.setState({
-      value: e.target.checked,
-    }, () => {
-      this.props.onChange(this.state.value);
-    });
-  }
-
-  render() {
-    return (
-      <div className="checkbox">
-        <label>
-          <input type="checkbox"
-                 onChange={this.onChange.bind(this)}
-                 disabled={this.props.disabled}
-                 checked={this.props.value} />
-          {this.props.label}
-          {this.props.disabled && this.props.disabledReason &&
-            <span className="disabled-indicator tip" title={this.props.disabledReason}>
-              <span className="icon-question" />
-            </span>
-          }
-        </label>
-        {this.props.help &&
-          <p className="help-block">{this.props.help}</p>
-        }
-      </div>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
new file mode 100644
index 0000000000..87b49132e5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -0,0 +1,72 @@
+import React from 'react';
+
+import {defined} from '../../utils';
+
+import BooleanField from './booleanField';
+import EmailField from './emailField';
+import NumberField from './numberField';
+import PasswordField from './passwordField';
+import RangeField from './rangeField';
+import Select2FieldAutocomplete from './select2FieldAutocomplete';
+import Select2Field from './select2Field';
+import TextField from './textField';
+import TextareaField from './textareaField';
+
+class GenericField extends React.Component {
+  render() {
+    let config = this.props.config;
+    let required = defined(config.required) ? config.required : true;
+    let props = Object.assign(Object.assign({}, config), {
+      value: this.props.formData[config.name],
+      onChange: this.props.onChange,
+      label: config.label + (required ? '*' : ''),
+      placeholder: config.placeholder,
+      required: required,
+      name: config.name,
+      error: this.props.formErrors[config.name],
+      disabled: config.readonly,
+      key: config.name,
+      help: (
+        (defined(config.help) && config.help !== '')
+          ? <span dangerouslySetInnerHTML={{__html: config.help}}/>
+          : null
+      ),
+    });
+
+    switch (config.type) {
+      case 'secret':
+        return <PasswordField {...props} />;
+      case 'range':
+        return <RangeField {...props} />;
+      case 'bool':
+        return <BooleanField {...props} />;
+      case 'email':
+        return <EmailField {...props} />;
+      case 'string':
+      case 'text':
+      case 'url':
+        return <TextField {...props} />;
+      case 'number':
+        return <NumberField {...props} />;
+      case 'textarea':
+        return <TextareaField {...props} />;
+      case 'choice':
+      case 'select':
+        if (props.has_autocomplete) {
+          return <Select2FieldAutocomplete {...props} />;
+        }
+        return <Select2Field {...props} />;
+      default:
+        return null;
+    }
+  }
+}
+
+GenericField.propTypes = {
+    config: React.PropTypes.object.isRequired,
+    formData: React.PropTypes.object,
+    formErrors: React.PropTypes.object,
+    onChange: React.PropTypes.func,
+};
+
+export default GenericField;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 2e0c60f96a..2caf80c583 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -6,10 +6,11 @@ const FormState = {
 };
 
 export {default as BooleanField} from './booleanField';
-export {default as CheckboxField} from './checkboxField';
-export {default as Form} from './form';
 export {default as EmailField} from './emailField';
+export {default as Form} from './form';
+export {default as GenericField} from './genericField';
 export {default as MultipleCheckboxField} from './multipleCheckboxField';
+export {default as NumberField} from './numberField';
 export {default as PasswordField} from './passwordField';
 export {default as RangeField} from './rangeField';
 export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 3344281bc5..950e89f79a 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -9,6 +9,8 @@ export default class InputField extends FormField {
   constructor(props) {
     super(props);
 
+    this.onChange = this.onChange.bind(this);
+
     this.state.value = this.valueFromProps(props);
   }
 
@@ -54,15 +56,19 @@ export default class InputField extends FormField {
           type={this.getType()}
           className="form-control"
           placeholder={this.props.placeholder}
-          onChange={this.onChange.bind(this)}
+          onChange={this.onChange}
           disabled={this.props.disabled}
           ref="input"
           value={this.state.value} />
     );
   }
 
+  getClassName() {
+    return 'control-group';
+  }
+
   render() {
-    let className = 'control-group';
+    let className = this.getClassName();
     if (this.props.error) {
       className += ' has-error';
     }
@@ -76,7 +82,7 @@ export default class InputField extends FormField {
             </span>
           }
           {this.getField()}
-          {this.props.help &&
+          {defined(this.props.help) &&
             <p className="help-block">{this.props.help}</p>
           }
           {this.props.error &&
diff --git a/src/sentry/static/sentry/app/components/forms/numberField.jsx b/src/sentry/static/sentry/app/components/forms/numberField.jsx
new file mode 100644
index 0000000000..89095b52da
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/numberField.jsx
@@ -0,0 +1,7 @@
+import InputField from './inputField';
+
+export default class NumberField extends InputField {
+  getType() {
+    return 'number';
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
index df6d50ac15..b4acdeb064 100644
--- a/src/sentry/static/sentry/app/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -1,5 +1,5 @@
+import jQuery from 'jquery';
 import React from 'react';
-import ReactDOM from 'react-dom';
 
 import InputField from './inputField';
 
@@ -11,29 +11,28 @@ export default class Select2Field extends InputField {
           onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
           value={this.state.value}>
-          {this.props.choices.map((choice) => {
-            return (
-              <option key={choice[0]}
-                      value={choice[0]}>{choice[1]}</option>
-            );
-          })}
+        {this.props.choices.map((choice) => {
+          return (
+            <option key={choice[0]}
+                    value={choice[0]}>
+              {choice[1]}
+            </option>
+          );
+        })}
       </select>
     );
   }
 
   componentDidMount() {
-    let $el = $('select', ReactDOM.findDOMNode(this));
-    $el.on('change.select2field', this.onChange.bind(this));
+    jQuery(this.refs.input).select2().on('change', this.onChange);
 
     // TODO(jess): upgrade select2 so we can just do
     // dropdownParent: $('.modal-dialog') as a supported option
-    $('.modal').removeAttr('tabindex');
-    $el.select2();
+    jQuery('.modal').removeAttr('tabindex');
   }
 
   componentWillUnmount() {
-    let $el = $('select', ReactDOM.findDOMNode(this));
-    $el.off('change.select2field');
+    jQuery(this.refs.select).select2('destroy');
   }
 
 }
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index c54ebcc324..573f75a2c9 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -4,17 +4,12 @@ import underscore from 'underscore';
 import {
   Form,
   FormState,
-  PasswordField,
-  Select2Field,
-  Select2FieldAutocomplete,
-  TextField,
-  TextareaField,
+  GenericField
 } from '../../components/forms';
 import {Client} from '../../api';
 import IndicatorStore from '../../stores/indicatorStore';
 import LoadingIndicator from '../../components/loadingIndicator';
 import {t} from '../../locale';
-import {defined} from '../../utils';
 
 
 class PluginSettings extends React.Component {
@@ -62,46 +57,6 @@ class PluginSettings extends React.Component {
     this.setState({formData: formData, errors: errors});
   }
 
-  renderField(field) {
-    let el;
-    let required = defined(field.required) ? field.required : true;
-    let props = {
-      value: this.state.formData[field.name],
-      onChange: this.changeField.bind(this, field.name),
-      label: field.label + (required ? '*' : ''),
-      placeholder: field.placeholder,
-      name: field.name,
-      error: this.state.errors[field.name],
-      disabled: field.readonly,
-      key: field.name,
-      help: <span dangerouslySetInnerHTML={{__html: field.help}}/>
-    };
-
-    switch (field.type) {
-      case 'secret':
-        el = <PasswordField {...props} />;
-        break;
-      case 'text':
-      case 'url':
-        el = <TextField {...props} />;
-        break;
-      case 'textarea':
-        el = <TextareaField {...props} />;
-        break;
-      case 'select':
-        if (field.has_autocomplete) {
-          el = <Select2FieldAutocomplete {...props} />;
-        } else {
-          props.choices = field.choices;
-          el = <Select2Field {...props} />;
-        }
-        break;
-      default:
-        el = null;
-    }
-    return el;
-  }
-
   onSubmit() {
     if (this.state.state == FormState.SAVING) {
       return;
@@ -178,7 +133,15 @@ class PluginSettings extends React.Component {
             </ul>
           </div>
         }
-        {this.state.fieldList.map(f => this.renderField(f))}
+        {this.state.fieldList.map(f => {
+          return (
+            <GenericField
+              config={f}
+              formData={this.state.formData}
+              formErrors={this.state.errors}
+              onChange={this.changeField.bind(this, f.name)} />
+          );
+        })}
       </Form>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
index 9ae8430edd..575c66a9ba 100644
--- a/src/sentry/static/sentry/app/views/projectCspSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
-import {FormState, TextareaField, CheckboxField} from '../components/forms';
+import {FormState, TextareaField, BooleanField} from '../components/forms';
 import {t} from '../locale';
 
 const ProjectCspSettingsForm = React.createClass({
@@ -81,7 +81,7 @@ const ProjectCspSettingsForm = React.createClass({
           </div>
         }
         <fieldset>
-          <CheckboxField
+          <BooleanField
             key="ignored-sources-defaults"
             name="ignored-sources-defaults"
             label={t('Use Default Ignored Sources')}
diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index fc531f23b0..84b710203b 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
-import {FormState, CheckboxField} from '../components/forms';
+import {FormState, BooleanField} from '../components/forms';
 import {t} from '../locale';
 
 const ProjectFeedbackSettingsForm = React.createClass({
@@ -81,7 +81,7 @@ const ProjectFeedbackSettingsForm = React.createClass({
           </div>
         }
         <fieldset>
-          <CheckboxField
+          <BooleanField
             key="branding"
             name="branding"
             label={t('Show Sentry Branding')}
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index ddfca91df5..fe5c0b0f64 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -7,7 +7,7 @@ import DropdownLink from '../../components/dropdownLink';
 import IndicatorStore from '../../stores/indicatorStore';
 import MenuItem from '../../components/menuItem';
 import {t} from '../../locale';
-import {CheckboxField, TextField} from '../../components/forms';
+import {BooleanField, TextField} from '../../components/forms';
 
 const SaveSearchState = {
   READY: 'Ready',
@@ -127,11 +127,11 @@ const SaveSearchButton = React.createClass({
                 value={this.state.formData.query}
                 required={true}
                 onChange={this.onFieldChange.bind(this, 'query')} />
-              <CheckboxField
+              <BooleanField
                 key="isUserDefault"
                 label={t('Make this the default view for myself.')}
                 onChange={this.onFieldChange.bind(this, 'isUserDefault')} />
-              <CheckboxField
+              <BooleanField
                 key="isDefault"
                 label={t('Make this the default view for my team.')}
                 onChange={this.onFieldChange.bind(this, 'isDefault')} />
diff --git a/src/sentry/utils/forms.py b/src/sentry/utils/forms.py
new file mode 100644
index 0000000000..897d345841
--- /dev/null
+++ b/src/sentry/utils/forms.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+import six
+
+from django import forms
+
+
+def field_to_config(name, field):
+    config = {
+        'name': name,
+        'label': field.label or name.replace('_', ' ').title(),
+        'placeholder': field.widget.attrs.get('placeholder'),
+        'help': field.help_text,
+        'required': field.required,
+    }
+    if isinstance(field, forms.URLField):
+        config['type'] = 'url'
+    elif isinstance(field, forms.IntegerField):
+        config['type'] = 'number'
+    elif isinstance(field, forms.BooleanField):
+        config['type'] = 'bool'
+    elif isinstance(field, forms.EmailField):
+        config['type'] = 'email'
+    elif isinstance(field, forms.CharField):
+        if isinstance(field.widget, forms.PasswordInput):
+            config['type'] = 'secret'
+        elif isinstance(field.widget, forms.Textarea):
+            config['type'] = 'textarea'
+        else:
+            config['type'] = 'text'
+    elif isinstance(field, forms.ChoiceField):
+        config['type'] = 'select'
+        config['choices'] = field.choices
+    return config
+
+
+def form_to_config(form):
+    config = []
+    for name, field in six.iteritems(form.base_fields):
+        row = field_to_config(name, field)
+        row['default'] = field.initial
+        config.append(row)
+    return config
