commit a568d44bcb7a06ab4d1b6899415d3e76a5275bcd
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Mon Aug 1 16:18:05 2016 -0700

    Add one day interval to EventFrequencyCondition. (#3847)

diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index 65a08edacc..7bf99bc80d 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -19,12 +19,14 @@ from sentry.rules.conditions.base import EventCondition
 class Interval(object):
     ONE_MINUTE = '1m'
     ONE_HOUR = '1h'
+    ONE_DAY = '1d'
 
 
 class EventFrequencyForm(forms.Form):
     interval = forms.ChoiceField(choices=(
         (Interval.ONE_MINUTE, 'one minute'),
         (Interval.ONE_HOUR, 'one hour'),
+        (Interval.ONE_DAY, 'one day'),
     ))
     value = forms.IntegerField(widget=forms.TextInput(attrs={
         'placeholder': '100',
@@ -83,6 +85,8 @@ class EventFrequencyCondition(EventCondition):
                 start = end - timedelta(minutes=1)
             elif interval == Interval.ONE_HOUR:
                 start = end - timedelta(hours=1)
+            elif interval == Interval.ONE_DAY:
+                start = end - timedelta(hours=24)
             else:
                 raise ValueError(interval)
 
diff --git a/tests/sentry/rules/conditions/test_event_frequency.py b/tests/sentry/rules/conditions/test_event_frequency.py
index 441c105182..3133ca809c 100644
--- a/tests/sentry/rules/conditions/test_event_frequency.py
+++ b/tests/sentry/rules/conditions/test_event_frequency.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
 from django.utils import timezone
 
 from sentry.app import tsdb
@@ -12,53 +13,88 @@ class EventFrequencyConditionTest(RuleTestCase):
 
     def test_one_minute(self):
         event = self.get_event()
+        value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_MINUTE,
-            'value': '10',
+            'value': str(value),
         })
-        self.assertDoesNotPass(rule, event)
 
-        tsdb.incr(tsdb.models.group, event.group_id, count=11)
+        tsdb.incr(
+            tsdb.models.group,
+            event.group_id,
+            count=value + 1,
+            timestamp=timezone.now() - timedelta(minutes=5),
+        )
+        self.assertDoesNotPass(rule, event)
 
         rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=value)
+        self.assertDoesNotPass(rule, event)
 
-        rule = self.get_rule({
-            'interval': Interval.ONE_MINUTE,
-            'value': '10',
-        })
+        rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=1)
         self.assertPasses(rule, event)
 
     def test_one_hour(self):
         event = self.get_event()
+        value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_HOUR,
-            'value': '10',
+            'value': str(value),
         })
+
+        tsdb.incr(
+            tsdb.models.group,
+            event.group_id,
+            count=value + 1,
+            timestamp=timezone.now() - timedelta(minutes=90),
+        )
         self.assertDoesNotPass(rule, event)
 
-        tsdb.incr(tsdb.models.group, event.group_id, count=11)
+        rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=value)
+        self.assertDoesNotPass(rule, event)
 
         rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=1)
+        self.assertPasses(rule, event)
 
+    def test_one_day(self):
+        event = self.get_event()
+        value = 10
         rule = self.get_rule({
-            'interval': Interval.ONE_HOUR,
-            'value': '10',
+            'interval': Interval.ONE_DAY,
+            'value': str(value),
         })
+
+        tsdb.incr(
+            tsdb.models.group,
+            event.group_id,
+            count=value + 1,
+            timestamp=timezone.now() - timedelta(hours=36),
+        )
+        self.assertDoesNotPass(rule, event)
+
+        rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=value)
+        self.assertDoesNotPass(rule, event)
+
+        rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=1)
         self.assertPasses(rule, event)
 
     def test_doesnt_send_consecutive(self):
         event = self.get_event()
+        value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_HOUR,
-            'value': '10',
+            'value': str(value),
         })
 
-        tsdb.incr(tsdb.models.group, event.group_id, count=11)
+        self.assertDoesNotPass(rule, event)
 
-        rule = self.get_rule({
-            'interval': Interval.ONE_HOUR,
-            'value': '10',
-        })
+        rule.clear_cache(event)
+        tsdb.incr(tsdb.models.group, event.group_id, count=value + 1)
         self.assertPasses(rule, event)
 
         self.assertDoesNotPass(rule, event, rule_last_active=timezone.now())
@@ -69,14 +105,9 @@ class EventFrequencyConditionTest(RuleTestCase):
             'interval': Interval.ONE_MINUTE,
             'value': '0',
         })
-        self.assertDoesNotPass(rule, event)
 
-        tsdb.incr(tsdb.models.group, event.group_id, count=1)
+        self.assertDoesNotPass(rule, event)
 
         rule.clear_cache(event)
-
-        rule = self.get_rule({
-            'interval': Interval.ONE_MINUTE,
-            'value': '0',
-        })
+        tsdb.incr(tsdb.models.group, event.group_id, count=1)
         self.assertPasses(rule, event)
