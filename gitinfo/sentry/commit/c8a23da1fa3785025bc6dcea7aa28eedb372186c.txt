commit c8a23da1fa3785025bc6dcea7aa28eedb372186c
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Feb 21 08:45:22 2020 -0800

    feat(integration-directory): add analytics (#17152)

diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
index 2ecd8ee3a6..f7b925fdf6 100644
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
@@ -67,6 +67,7 @@ class IntegrationDetailsModal extends React.Component<Props> {
         eventName: 'Integrations: Installation Start',
         integration: provider.key,
         integration_type: 'first_party',
+        view: 'integrations_page',
       },
       organization
     );
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index d091917f93..0ad6f90930 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -23,6 +23,7 @@ class PluginSettings extends PluginComponentBase {
       // override default FormState.READY if api requests are
       // necessary to even load the form
       state: FormState.LOADING,
+      wasConfiguredOnPageLoad: false,
     });
   }
 
@@ -46,6 +47,21 @@ class PluginSettings extends PluginComponentBase {
   }
 
   onSubmit() {
+    if (!this.state.wasConfiguredOnPageLoad) {
+      //Users cannot install plugins like other integrations but we need the events for the funnel
+      //we will treat a user saving a plugin that wasn't already configured as an installation event
+      trackIntegrationEvent(
+        {
+          eventKey: 'integrations.installation_start',
+          eventName: 'Integrations: Installation Start',
+          integration: this.props.plugin.id,
+          view: 'plugin_details',
+          project_id: this.props.project.id,
+        },
+        this.props.organization
+      );
+    }
+
     let repo = this.state.formData.repo;
     repo = repo && parseRepo(repo);
     const parsedFormData = {...this.state.formData, repo};
@@ -75,6 +91,19 @@ class PluginSettings extends PluginComponentBase {
           },
           this.props.organization
         );
+
+        if (!this.state.wasConfiguredOnPageLoad) {
+          trackIntegrationEvent(
+            {
+              eventKey: 'integrations.installation_complete',
+              eventName: 'Integrations: Installation Complete',
+              integration: this.props.plugin.id,
+              view: 'plugin_details',
+              project_id: this.props.project.id,
+            },
+            this.props.organization
+          );
+        }
       }),
       error: this.onSaveError.bind(this, error => {
         this.setState({
@@ -97,17 +126,21 @@ class PluginSettings extends PluginComponentBase {
           );
           return;
         }
+        let wasConfiguredOnPageLoad = false;
         const formData = {};
         const initialData = {};
         data.config.forEach(field => {
           formData[field.name] = field.value || field.defaultValue;
           initialData[field.name] = field.value;
+          //for simplicity sake, we will consider a plugin was configured if we have any value that is stored in the DB
+          wasConfiguredOnPageLoad = wasConfiguredOnPageLoad || !!field.value;
         });
         this.setState(
           {
             fieldList: data.config,
             formData,
             initialData,
+            wasConfiguredOnPageLoad,
             // call this here to prevent FormState.READY from being
             // set before fieldList is
           },
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index faae61a1f6..d9a9c25555 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -12,6 +12,8 @@ export type IntegrationInstallationStatus =
   | typeof NOT_INSTALLED
   | typeof PENDING;
 
+export type SentryAppStatus = 'unpublished' | 'published' | 'internal';
+
 export type ObjectStatus =
   | 'active'
   | 'disabled'
@@ -543,7 +545,7 @@ export type SentryAppSchemaElement =
   | SentryAppSchemaStacktraceLink;
 
 export type SentryApp = {
-  status: 'unpublished' | 'published' | 'internal';
+  status: SentryAppStatus;
   scopes: Scope[];
   isAlertable: boolean;
   verifyInstall: boolean;
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 4b6983e25c..42a1e30be5 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -5,6 +5,7 @@ import {
   Organization,
   SentryAppInstallation,
   IntegrationInstallationStatus,
+  SentryAppStatus,
 } from 'app/types';
 import {Hooks} from 'app/types/hooks';
 import HookStore from 'app/stores/hookStore';
@@ -30,61 +31,72 @@ export const getAnalyticsSessionId = () => {
 export const isIntegrationDirectoryActive = () =>
   localStorage.getItem(USE_INTEGRATION_DIRECTORY) === '1';
 
-type ModalOpenEvent = {
-  eventKey: 'integrations.install_modal_opened';
-  eventName: 'Integrations: Install Modal Opened';
-  already_installed: boolean; //need this field for the modal open event but not other events
-};
-
-type OtherSingleIntegrationEvents = {
+export type SingleIntegrationEvent = {
   eventKey:
+    | 'integrations.install_modal_opened'
     | 'integrations.installation_start'
     | 'integrations.installation_complete'
-    | 'integrations.details_viewed'
+    | 'integrations.integration_viewed' //for the integration overview
+    | 'integrations.details_viewed' //for an individual configuration
     | 'integrations.uninstall_clicked'
     | 'integrations.uninstall_completed'
     | 'integrations.enabled'
     | 'integrations.disabled'
-    | 'integrations.config_saved';
+    | 'integrations.config_saved'
+    | 'integrations.integration_tab_clicked'
+    | 'integrations.plugin_add_to_project_clicked';
   eventName:
+    | 'Integrations: Install Modal Opened'
     | 'Integrations: Installation Start'
     | 'Integrations: Installation Complete'
+    | 'Integrations: Integration Viewed'
     | 'Integrations: Details Viewed'
     | 'Integrations: Uninstall Clicked'
     | 'Integrations: Uninstall Completed'
     | 'Integrations: Enabled'
     | 'Integrations: Disabled'
-    | 'Integrations: Config Saved';
-};
+    | 'Integrations: Integration Tab Clicked'
+    | 'Integrations: Config Saved'
+    | 'Integrations: Plugin Add to Project Clicked';
+  integration: string; //the slug
+  already_installed?: boolean;
+  integration_tab?: 'configurations' | 'information';
+} & (SentryAppEvent | NonSentryAppEvent);
 
 type SentryAppEvent = {
   integration_type: 'sentry_app';
   //include the status since people might do weird things testing unpublished integrations
-  integration_status: 'published' | 'unpublished' | 'internal';
+  integration_status: SentryAppStatus;
 };
-
 type NonSentryAppEvent = {
   integration_type: 'plugin' | 'first_party';
 };
 
-type SingleIntegrationEvent = (ModalOpenEvent | OtherSingleIntegrationEvents) &
-  (SentryAppEvent | NonSentryAppEvent) & {
-    integration: string; //the slug
-  };
-
 type MultipleIntegrationsEvent = {
   eventKey: 'integrations.index_viewed';
   eventName: 'Integrations: Index Page Viewed';
   integrations_installed: number;
 };
 
-type IntegrationsEventParams = (MultipleIntegrationsEvent | SingleIntegrationEvent) & {
+type IntegrationSearchEvent = {
+  eventKey: 'integrations.directory_item_searched';
+  eventName: 'Integrations: Directory Item Searched';
+  search_term: string;
+  num_results: number;
+};
+
+type IntegrationsEventParams = (
+  | MultipleIntegrationsEvent
+  | SingleIntegrationEvent
+  | IntegrationSearchEvent
+) & {
   view?:
     | 'external_install'
     | 'integrations_page'
     | 'legacy_integrations'
     | 'plugin_details'
-    | 'integrations_directory';
+    | 'integrations_directory'
+    | 'integrations_directory_integration_detail';
   project_id?: string;
 } & Parameters<Hooks['analytics:track-event']>[0];
 
@@ -121,7 +133,7 @@ export const trackIntegrationEvent = (
 
   //add the integration_status to the type of params so TS doesn't complain about what we do below
   const fullParams: typeof params & {
-    integration_status?: string;
+    integration_status?: SentryAppStatus;
   } = params;
 
   //Reload expects integration_status even though it's not relevant for non-sentry apps
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
index e1023d6ebe..0d39e7b32e 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -2,7 +2,12 @@ import React from 'react';
 import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
-import {Organization, IntegrationFeature, IntegrationInstallationStatus} from 'app/types';
+import {
+  Organization,
+  IntegrationFeature,
+  IntegrationInstallationStatus,
+  SentryAppStatus,
+} from 'app/types';
 import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import space from 'app/styles/space';
@@ -11,7 +16,11 @@ import PluginIcon from 'app/plugins/components/pluginIcon';
 import InlineSvg from 'app/components/inlineSvg';
 import Access from 'app/components/acl/access';
 import Tooltip from 'app/components/tooltip';
-import {getIntegrationFeatureGate} from 'app/utils/integrationUtil';
+import {
+  getIntegrationFeatureGate,
+  trackIntegrationEvent,
+  SingleIntegrationEvent,
+} from 'app/utils/integrationUtil';
 import Alert, {Props as AlertProps} from 'app/components/alert';
 import ExternalLink from 'app/components/links/externalLink';
 import marked, {singleLineRenderer} from 'app/utils/marked';
@@ -42,15 +51,28 @@ class AbstractIntegrationDetailedView<
     const {location} = this.props;
     const value =
       location.query.tab === 'configurations' ? 'configurations' : 'information';
-
     // eslint-disable-next-line react/no-did-mount-set-state
     this.setState({tab: value});
   }
 
+  onLoadAllEndpointsSuccess() {
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.integration_viewed',
+      eventName: 'Integrations: Integration Viewed',
+      integration_tab: this.state.tab,
+    });
+  }
+
   /***
    * Abstract methods defined below
    */
 
+  //The analytics type used in analytics which is snake case
+  get integrationType(): 'sentry_app' | 'first_party' | 'plugin' {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
   get description(): string {
     // Allow children to implement this
     throw new Error('Not implemented');
@@ -89,6 +111,11 @@ class AbstractIntegrationDetailedView<
   }
 
   onTabChange = (value: Tab) => {
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.integration_tab_clicked',
+      eventName: 'Integrations: Integration Tab Clicked',
+      integration_tab: value,
+    });
     this.setState({tab: value});
   };
 
@@ -123,6 +150,36 @@ class AbstractIntegrationDetailedView<
    * Actually implmeented methods below*
    */
 
+  get integrationSlug() {
+    return this.props.params.integrationSlug;
+  }
+
+  //Wrapper around trackIntegrationEvent that automatically provides many fields and the org
+  trackIntegrationEvent = (
+    options: Pick<
+      SingleIntegrationEvent,
+      'eventKey' | 'eventName' | 'integration_tab'
+    > & {
+      integration_status?: SentryAppStatus;
+      project_id?: string;
+    }
+  ) => {
+    //If we use this intermediate type we get type checking on the things we care about
+    const params: Omit<
+      Parameters<typeof trackIntegrationEvent>[0],
+      'integrations_installed'
+    > = {
+      view: 'integrations_directory_integration_detail',
+      integration: this.integrationSlug,
+      integration_type: this.integrationType,
+      already_installed: this.installationStatus !== 'Not Installed', //pending counts as installed here
+      ...options,
+    };
+    //type cast here so TS won't complain
+    const typeCasted = params as Parameters<typeof trackIntegrationEvent>[0];
+    trackIntegrationEvent(typeCasted, this.props.organization);
+  };
+
   //Returns the props as needed by the hooks integrations:feature-gates
   get featureProps() {
     const {organization} = this.props;
@@ -143,13 +200,12 @@ class AbstractIntegrationDetailedView<
 
   //Returns the content shown in the top section of the integration detail
   renderTopSection() {
-    const {integrationSlug} = this.props.params;
     const {organization} = this.props;
 
     const {IntegrationFeatures} = getIntegrationFeatureGate();
     return (
       <Flex>
-        <PluginIcon pluginId={integrationSlug} size={50} />
+        <PluginIcon pluginId={this.integrationSlug} size={50} />
         <NameContainer>
           <Flex>
             <Name>{this.integrationName}</Name>
@@ -214,10 +270,7 @@ class AbstractIntegrationDetailedView<
     return (
       <React.Fragment>
         <Description dangerouslySetInnerHTML={{__html: marked(this.description)}} />
-        <FeatureList
-          {...this.featureProps}
-          provider={{key: this.props.params.integrationSlug}}
-        />
+        <FeatureList {...this.featureProps} provider={{key: this.integrationSlug}} />
         {this.renderPermissions()}
         <Metadata>
           {!!this.author && <AuthorName>{t('By %s', this.author)}</AuthorName>}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
index cb0e54d909..f7f57d526c 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
@@ -17,6 +17,10 @@ type Props = {
   reinstallId?: string;
   account?: string;
   organization?: Organization; //for analytics
+  analyticsParams?: {
+    view: 'integrations_directory_integration_detail' | 'integrations_directory';
+    already_installed: boolean;
+  };
 };
 
 export default class AddIntegration extends React.Component<Props> {
@@ -72,6 +76,7 @@ export default class AddIntegration extends React.Component<Props> {
         eventName: 'Integrations: Installation Start',
         integration: this.props.provider.key,
         integration_type: 'first_party',
+        ...this.props.analyticsParams,
       },
       this.props.organization
     );
@@ -123,6 +128,7 @@ export default class AddIntegration extends React.Component<Props> {
         eventName: 'Integrations: Installation Complete',
         integration: this.props.provider.key,
         integration_type: 'first_party',
+        ...this.props.analyticsParams,
       },
       this.props.organization
     );
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
index ae068312e5..9c303f3ba6 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
@@ -14,6 +14,10 @@ type Props = {
   buttonText?: string;
   reinstall?: boolean;
   organization?: Organization; //for analytics
+  analyticsParams?: {
+    view: 'integrations_directory_integration_detail' | 'integrations_directory';
+    already_installed: boolean;
+  };
 } & React.ComponentProps<typeof Button>;
 
 export default class AddIntegrationButton extends React.Component<Props> {
@@ -32,6 +36,7 @@ export default class AddIntegrationButton extends React.Component<Props> {
       onAddIntegration,
       organization,
       reinstall,
+      analyticsParams,
       ...buttonProps
     } = this.props;
 
@@ -47,6 +52,7 @@ export default class AddIntegrationButton extends React.Component<Props> {
           provider={provider}
           onInstall={onAddIntegration}
           organization={organization}
+          analyticsParams={analyticsParams}
         >
           {onClick => (
             <Button
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
new file mode 100644
index 0000000000..c22b0ecb81
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
@@ -0,0 +1,202 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import Access from 'app/components/acl/access';
+import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
+import Alert from 'app/components/alert';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
+import Tooltip from 'app/components/tooltip';
+import {IntegrationProvider, Integration, Organization} from 'app/types';
+import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
+
+const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
+
+export type Props = {
+  organization: Organization;
+  provider: IntegrationProvider;
+  integration: Integration;
+  onRemove: (integration: Integration) => void;
+  onDisable: (integration: Integration) => void;
+  onReinstallIntegration: (integration: Integration) => void;
+  trackIntegrationEvent: (
+    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>
+  ) => void; //analytics callback
+  className?: string;
+};
+
+//TODO: Rename to InstalledIntegration when we can remove the old one
+export default class InstalledIntegrationInDirectory extends React.Component<Props> {
+  /**
+   * Integrations have additional configuration when any of the conditions are
+   * met:
+   *
+   * - The Integration has organization-specific configuration options.
+   * - The Integration has configurable features
+   */
+  hasConfiguration() {
+    const {integration, provider} = this.props;
+
+    return (
+      integration.configOrganization.length > 0 ||
+      provider.features.filter(f => CONFIGURABLE_FEATURES.includes(f)).length > 0
+    );
+  }
+
+  reinstallIntegration = () => {
+    const activeIntegration = Object.assign({}, this.props.integration, {
+      status: 'active',
+    });
+    this.props.onReinstallIntegration(activeIntegration);
+  };
+
+  handleUninstallClick = () => {
+    this.props.trackIntegrationEvent({
+      eventKey: 'integrations.uninstall_clicked',
+      eventName: 'Integrations: Uninstall Clicked',
+    });
+  };
+
+  getRemovalBodyAndText(aspects) {
+    if (aspects && aspects.removal_dialog) {
+      return {
+        body: aspects.removal_dialog.body,
+        actionText: aspects.removal_dialog.actionText,
+      };
+    } else {
+      return {
+        body: t(
+          'Deleting this integration will remove any project associated data. This action cannot be undone. Are you sure you want to delete this integration?'
+        ),
+        actionText: t('Delete'),
+      };
+    }
+  }
+
+  handleRemove(integration: Integration) {
+    this.props.onRemove(integration);
+    this.props.trackIntegrationEvent({
+      eventKey: 'integrations.uninstall_completed',
+      eventName: 'Integrations: Uninstall Completed',
+    });
+  }
+
+  get removeConfirmProps() {
+    const {integration} = this.props;
+    const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);
+
+    const message = (
+      <React.Fragment>
+        <Alert type="error" icon="icon-circle-exclamation">
+          Deleting this integration has consequences!
+        </Alert>
+        {body}
+      </React.Fragment>
+    );
+    return {
+      message,
+      confirmText: actionText,
+      onConfirm: () => this.handleRemove(integration),
+    };
+  }
+
+  get disableConfirmProps() {
+    const {integration} = this.props;
+    const {body, actionText} = integration.provider.aspects.disable_dialog;
+    const message = (
+      <React.Fragment>
+        <Alert type="error" icon="icon-circle-exclamation">
+          This integration cannot be removed on Sentry
+        </Alert>
+        {body}
+      </React.Fragment>
+    );
+
+    return {
+      message,
+      confirmText: actionText,
+      onConfirm: () => this.props.onDisable(integration),
+    };
+  }
+
+  render() {
+    const {className, integration, provider, organization} = this.props;
+
+    const removeConfirmProps =
+      integration.status === 'active' && integration.provider.canDisable
+        ? this.disableConfirmProps
+        : this.removeConfirmProps;
+
+    return (
+      <Access access={['org:integrations']}>
+        {({hasAccess}) => (
+          <IntegrationFlex key={integration.id} className={className}>
+            <IntegrationItemBox>
+              <IntegrationItem compact integration={integration} />
+            </IntegrationItemBox>
+            <div>
+              {integration.status === 'disabled' && (
+                <AddIntegrationButton
+                  size="xsmall"
+                  priority="success"
+                  provider={provider}
+                  onAddIntegration={this.reinstallIntegration}
+                  reinstall
+                />
+              )}
+              {integration.status === 'active' && (
+                <Tooltip
+                  disabled={this.hasConfiguration()}
+                  position="left"
+                  title="Integration not configurable"
+                >
+                  <StyledButton
+                    borderless
+                    icon="icon-settings"
+                    disabled={!this.hasConfiguration() || !hasAccess}
+                    to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
+                    data-test-id="integration-configure-button"
+                  >
+                    Configure
+                  </StyledButton>
+                </Tooltip>
+              )}
+            </div>
+            <div>
+              <Confirm
+                priority="danger"
+                onConfirming={this.handleUninstallClick}
+                disabled={!hasAccess}
+                {...removeConfirmProps}
+              >
+                <StyledButton
+                  disabled={!hasAccess}
+                  borderless
+                  icon="icon-trash"
+                  data-test-id="integration-remove-button"
+                >
+                  Uninstall
+                </StyledButton>
+              </Confirm>
+            </div>
+          </IntegrationFlex>
+        )}
+      </Access>
+    );
+  }
+}
+
+const StyledButton = styled(Button)`
+  color: ${p => p.theme.gray2};
+`;
+
+const IntegrationFlex = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const IntegrationItemBox = styled('div')`
+  flex: 1;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
index 35ec29f834..bed9e08c49 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
@@ -15,6 +15,7 @@ import {
   addLoadingMessage,
 } from 'app/actionCreators/indicator';
 import {PluginNoProject, PluginProjectItem, Organization, AvatarProject} from 'app/types';
+import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
 
 export type Props = {
   api: Client;
@@ -23,10 +24,16 @@ export type Props = {
   organization: Organization;
   onResetConfiguration: (projectId: string) => void;
   onEnablePlugin: (projectId: string) => void;
+  trackIntegrationEvent: (
+    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'> & {project_id: string}
+  ) => void; //analytics callback
   className?: string;
 };
 
 export class InstalledPlugin extends React.Component<Props> {
+  get projectId() {
+    return this.props.projectItem.projectId;
+  }
   getConfirmMessage() {
     return (
       <React.Fragment>
@@ -56,14 +63,23 @@ export class InstalledPlugin extends React.Component<Props> {
       addLoadingMessage(t('Removing...'));
       await this.pluginUpdate({reset: true});
       addSuccessMessage(t('Configuration was removed'));
-      this.props.onResetConfiguration(this.props.projectItem.projectId);
+      this.props.onResetConfiguration(this.projectId);
+      this.props.trackIntegrationEvent({
+        eventKey: 'integrations.uninstall_completed',
+        eventName: 'Integrations: Uninstall Completed',
+        project_id: this.projectId,
+      });
     } catch (_err) {
       addErrorMessage(t('Unable to remove configuration'));
     }
   };
 
   handleUninstallClick = () => {
-    //TODO: Analytics
+    this.props.trackIntegrationEvent({
+      eventKey: 'integrations.uninstall_clicked',
+      eventName: 'Integrations: Uninstall Clicked',
+      project_id: this.projectId,
+    });
   };
 
   enablePlugin = async () => {
@@ -71,7 +87,12 @@ export class InstalledPlugin extends React.Component<Props> {
       addLoadingMessage(t('Enabling...'));
       await this.pluginUpdate({enabled: true});
       addSuccessMessage(t('Configuration was enabled'));
-      this.props.onEnablePlugin(this.props.projectItem.projectId);
+      this.props.onEnablePlugin(this.projectId);
+      this.props.trackIntegrationEvent({
+        eventKey: 'integrations.enabled',
+        eventName: 'Integrations: Enabled',
+        project_id: this.projectId,
+      });
     } catch (_err) {
       addErrorMessage(t('Unable to enable configuration'));
     }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
index 9316bc7263..bfdb028b28 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
@@ -6,11 +6,10 @@ import {Integration, IntegrationProvider} from 'app/types';
 import {RequestOptions} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
-import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 import space from 'app/styles/space';
 import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
 import Button from 'app/components/button';
-import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
+import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegrationInDirectory';
 import withOrganization from 'app/utils/withOrganization';
 import {sortArray} from 'app/utils';
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
@@ -40,6 +39,10 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
     return baseEndpoints;
   }
 
+  get integrationType() {
+    return 'first_party' as const;
+  }
+
   get provider() {
     return this.state.information.providers[0];
   }
@@ -140,17 +143,10 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
   };
 
   handleExternalInstall = () => {
-    const {organization} = this.props;
-    const provider = this.provider;
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.installation_start',
-        eventName: 'Integrations: Installation Start',
-        integration: provider.key,
-        integration_type: 'first_party',
-      },
-      organization
-    );
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.installation_start',
+      eventName: 'Integrations: Installation Start',
+    });
   };
 
   renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
@@ -175,6 +171,10 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
         <AddIntegrationButton
           provider={provider}
           onAddIntegration={this.onInstall}
+          analyticsParams={{
+            view: 'integrations_directory_integration_detail',
+            already_installed: this.installationStatus !== 'Not Installed',
+          }}
           {...buttonProps}
         />
       );
@@ -212,6 +212,7 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
               onDisable={this.onDisable}
               onReinstallIntegration={this.onInstall}
               data-test-id={integration.id}
+              trackIntegrationEvent={this.trackIntegrationEvent}
             />
           </InstallWrapper>
         ))}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index a6a893e89b..094fda3f33 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -1,4 +1,5 @@
 import groupBy from 'lodash/groupBy';
+import debounce from 'lodash/debounce';
 import React from 'react';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
@@ -57,6 +58,8 @@ function isPlugin(
   return integration.hasOwnProperty('shortName');
 }
 
+const TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS = 1000;
+
 export class OrganizationIntegrations extends AsyncComponent<
   Props & AsyncComponent['props'],
   State & AsyncComponent['state']
@@ -114,7 +117,7 @@ export class OrganizationIntegrations extends AsyncComponent<
   trackPageViewed() {
     //count the number of installed apps
 
-    const {integrations, publishedApps} = this.state;
+    const {integrations, publishedApps, plugins} = this.state;
     const integrationsInstalled = new Set();
     //add installed integrations
     integrations.forEach((integration: Integration) => {
@@ -124,12 +127,18 @@ export class OrganizationIntegrations extends AsyncComponent<
     publishedApps.filter(this.getAppInstall).forEach((sentryApp: SentryApp) => {
       integrationsInstalled.add(sentryApp.slug);
     });
+    //add plugins
+    plugins.forEach((plugin: PluginWithProjectList) => {
+      if (plugin.projectList.length) {
+        integrationsInstalled.add(plugin.slug);
+      }
+    });
     trackIntegrationEvent(
       {
         eventKey: 'integrations.index_viewed',
         eventName: 'Integrations: Index Page Viewed',
         integrations_installed: integrationsInstalled.size,
-        view: 'integrations_page',
+        view: 'integrations_directory',
       },
       this.props.organization,
       {startSession: true}
@@ -213,12 +222,26 @@ export class OrganizationIntegrations extends AsyncComponent<
     });
   }
 
+  debouncedTrackIntegrationSearch = debounce((search: string, numResults: number) => {
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.directory_item_searched',
+        eventName: 'Integrations: Directory Item Searched',
+        view: 'integrations_directory',
+        search_term: search,
+        num_results: numResults,
+      },
+      this.props.organization
+    );
+  }, TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS);
+
   onSearchChange = async ({target}) => {
     this.setState({searchInput: target.value}, () => {
       if (!target.value) {
         return this.setState({displayedList: this.state.list});
       }
       const result = this.state.fuzzy && this.state.fuzzy.search(target.value);
+      this.debouncedTrackIntegrationSearch(target.value, result.length);
       return this.setState({
         displayedList: this.sortIntegrations(result.map(i => i.item)),
       });
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
index e91b874754..294439300d 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
@@ -28,6 +28,10 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
     ];
   }
 
+  get integrationType() {
+    return 'plugin' as const;
+  }
+
   get plugin() {
     return this.state.plugins[0];
   }
@@ -100,6 +104,10 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
   handleAddToProject = () => {
     const plugin = this.plugin;
     const {organization, router} = this.props;
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.plugin_add_to_project_clicked',
+      eventName: 'Integrations: Plugin Add to Project Clicked',
+    });
     modal.openModal(
       ({closeModal, Header, Body}) => (
         <ContextPickerModal
@@ -153,6 +161,7 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
             projectItem={projectItem}
             onResetConfiguration={this.handleResetConfiguration}
             onEnablePlugin={this.handleEnablePlugin}
+            trackIntegrationEvent={this.trackIntegrationEvent}
           />
         ))}
       </div>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
index 118fef981b..a953b8bdec 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
@@ -54,10 +54,19 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
       router,
     } = this.props;
 
-    return (
-      this.sentryApp.status === 'internal' &&
-      router.push(`/settings/${organization.slug}/developer-settings/${integrationSlug}/`)
-    );
+    //redirect for internal integrations
+    if (this.sentryApp.status === 'internal') {
+      router.push(
+        `/settings/${organization.slug}/developer-settings/${integrationSlug}/`
+      );
+      return;
+    }
+
+    super.onLoadAllEndpointsSuccess();
+  }
+
+  get integrationType() {
+    return 'sentry_app' as const;
   }
 
   get sentryApp() {
@@ -114,9 +123,23 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
   handleInstall = async () => {
     const {organization} = this.props;
     const {sentryApp} = this.state;
-
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.installation_start',
+      eventName: 'Integrations: Installation Start',
+      integration_status: sentryApp.status,
+    });
     // installSentryApp adds a message on failure
     const install = await installSentryApp(this.api, organization.slug, sentryApp);
+
+    //installation is complete if the status is installed
+    if (install.status === 'installed') {
+      this.trackIntegrationEvent({
+        eventKey: 'integrations.installation_complete',
+        eventName: 'Integrations: Installation Complete',
+        integration_status: sentryApp.status,
+      });
+    }
+
     if (!sentryApp.redirectUrl) {
       addSuccessMessage(t(`${sentryApp.slug} successfully installed.`));
       this.setState({appInstalls: [install, ...this.state.appInstalls]});
@@ -139,6 +162,11 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
   handleUninstall = async (install: SentryAppInstallation) => {
     try {
       await uninstallSentryApp(this.api, install);
+      this.trackIntegrationEvent({
+        eventKey: 'integrations.uninstall_completed',
+        eventName: 'Integrations: Uninstall Completed',
+        integration_status: this.sentryApp.status,
+      });
       const appInstalls = this.state.appInstalls.filter(
         i => i.app.slug !== this.sentryApp.slug
       );
@@ -148,6 +176,15 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
     }
   };
 
+  recordUninstallClicked = () => {
+    const sentryApp = this.sentryApp;
+    this.trackIntegrationEvent({
+      eventKey: 'integrations.uninstall_clicked',
+      eventName: 'Integrations: Uninstall Clicked',
+      integration_status: sentryApp.status,
+    });
+  };
+
   renderPermissions() {
     const permissions = this.permissions;
     if (!Object.keys(permissions).some(scope => permissions[scope].length > 0)) {
@@ -212,7 +249,7 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
         install={this.install}
         app={this.sentryApp}
         onClickUninstall={this.handleUninstall}
-        onUninstallModalOpen={() => {}} //TODO: Implement tracking analytics
+        onUninstallModalOpen={this.recordUninstallClicked}
         disabled={!userHasAccess}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
index b3c3d8640a..ab81bd9225 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
@@ -109,6 +109,7 @@ class SentryAppInstallationDetail extends React.Component<Props> {
             integration: app.slug,
             integration_type: 'sentry_app',
             integration_status: app.status,
+            view: 'integrations_page',
           },
           this.props.organization
         );
@@ -130,6 +131,7 @@ class SentryAppInstallationDetail extends React.Component<Props> {
         integration: app.slug,
         integration_type: 'sentry_app',
         integration_status: app.status,
+        view: 'integrations_page',
       },
       this.props.organization
     );
