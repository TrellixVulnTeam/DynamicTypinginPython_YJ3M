commit 2a4ef1b8f186964ad5980038cf1e0a7d6a2bce39
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 4 12:18:56 2011 -0700

    Some additional test coverage and support for capturing the authenticated users information given request is in the logged context

diff --git a/CHANGES b/CHANGES
index 6340c2c919..4720827b4b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -10,6 +10,9 @@
 * Added SENTRY_MAIL_INCLUDE_LOGGERS setting.
 * Added SENTRY_MAIL_EXCLUDE_LOGGERS setting.
 * Added the ``level`` argument to the cleanup command.
+* The thrashed key is now set correctly in request.sentry.
+* Added user information to all messages that have ``request``.
+* Much improved test coverage.
 
 1.9.0
 
diff --git a/sentry/client/base.py b/sentry/client/base.py
index 28e4457fd9..a137e7e7f2 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -11,6 +11,7 @@ import urllib2
 import uuid
 
 from django.core.cache import cache
+from django.http import HttpRequest
 from django.template import TemplateSyntaxError
 from django.template.loader import LoaderOrigin
 
@@ -85,12 +86,14 @@ class SentryClient(object):
             # Ensure we're not changing the original data which was passed
             # to Sentry
             kwargs['data'] = kwargs['data'].copy()
+        else:
+            kwargs['data'] = {}
+
+        if '__sentry__' not in kwargs['data']:
+            kwargs['data']['__sentry__'] = {}
 
         request = kwargs.pop('request', None)
-        if request:
-            if not kwargs.get('data'):
-                kwargs['data'] = {}
-            
+        if isinstance(request, HttpRequest):
             if not request.POST and request.raw_post_data:
                 post_data = request.raw_post_data
             else:
@@ -102,6 +105,21 @@ class SentryClient(object):
                 GET=request.GET,
                 COOKIES=request.COOKIES,
             ))
+            
+            if hasattr(request, 'user'):
+                if request.user.is_authenticated():
+                    user_info = {
+                        'is_authenticated': True,
+                        'id': request.user.pk,
+                        'username': request.user.username,
+                        'email': request.user.email,
+                    }
+                else:
+                    user_info = {
+                        'is_authenticated': False,
+                    }
+
+                kwargs['data']['__sentry__']['user'] = user_info
 
             if not kwargs.get('url'):
                 kwargs['url'] = request.build_absolute_uri()
@@ -109,12 +127,6 @@ class SentryClient(object):
         kwargs.setdefault('level', logging.ERROR)
         kwargs.setdefault('server_name', settings.NAME)
 
-        # save versions of all installed apps
-        if 'data' not in kwargs or '__sentry__' not in (kwargs['data'] or {}):
-            if kwargs.get('data') is None:
-                kwargs['data'] = {}
-            kwargs['data']['__sentry__'] = {}
-
         versions = get_versions()
         kwargs['data']['__sentry__']['versions'] = versions
 
@@ -214,7 +226,7 @@ class SentryClient(object):
             # attach the sentry object to the request
             request.sentry = {
                 'id': message_id,
-                'trashed': False,
+                'thrashed': False,
             }
         
         # store the last message_id incase we hit thrashing limits
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index 5e916eedae..105defb1b6 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -180,6 +180,29 @@
             <div id="requestinfo">
                 <h2>{% trans "Additional Data" %}</h2>
                 <table>
+                    {% if user_data %}
+                        <tr>
+                            <th class="key">USER</th>
+                            <td class="values">
+                                <table class="vars">
+                                    <thead>
+                                        <tr>
+                                            <th>{% trans "Variable" %}</th>
+                                            <th>{% trans "Value" %}</th>
+                                        </tr>
+                                    </thead>
+                                    <tbody>
+                                        {% for k_, v_ in user_data.iteritems|as_sorted %}
+                                        <tr>
+                                            <td>{{ k_ }}</td>
+                                            <td class="code"><pre>{{ v_|pprint }}</pre></td>
+                                        </tr>
+                                        {% endfor %}
+                                    </tbody>
+                                </table>
+                            </td>
+                        </tr>
+                    {% endif %}
                     {% for k, v in json_data %}
                         <tr>
                             <th class="key">{{ k }}</th>
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index f328722857..182c5c1800 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -11,6 +11,7 @@ from types import ClassType, TypeType
 
 import django
 from django.conf import settings as django_settings
+from django.http import HttpRequest
 from django.utils.encoding import force_unicode
 from django.utils.functional import Promise
 from django.utils.hashcompat import md5_constructor, sha_constructor
@@ -100,7 +101,7 @@ def transform(value, stack=[], context=None):
     elif isinstance(value, (tuple, list, set, frozenset)):
         try:
             ret = type(value)(transform_rec(o) for o in value)
-        except TypeError, te:
+        except TypeError:
             # We may be dealing with a namedtuple
             ret = type(value)(transform_rec(o) for o in value[:])
     elif isinstance(value, uuid.UUID):
@@ -291,7 +292,7 @@ def get_auth_header(signature, timestamp, client):
 def parse_auth_header(header):
     return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
 
-class MockDjangoRequest(object):
+class MockDjangoRequest(HttpRequest):
     GET = {}
     POST = {}
     META = {}
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 048ef19c25..6d0d95650c 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -194,11 +194,11 @@ class SentryManager(models.Manager):
                 logger.exception(u'Unable to process log entry: %s' % (exc,))
             except Exception, exc:
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
+        else:
+            if mail and should_mail(group):
+                group.mail_admins()
 
-        if mail and should_mail(group):
-            group.mail_admins()
-
-        return instance
+            return instance
 
 class GroupedMessageManager(SentryManager):
     def get_by_natural_key(self, logger, view, checksum):
diff --git a/sentry/web/views.py b/sentry/web/views.py
index bde19d15dd..39d0efee6d 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -320,6 +320,7 @@ def group(request, group_id):
     frames = None
     # module versions
     version_data = None
+    user_data = None
 
     if '__sentry__' in obj.data:
         sentry_data = obj.data['__sentry__']
@@ -333,6 +334,9 @@ def group(request, group_id):
         if 'frames' in sentry_data:
             frames = sentry_data['frames']
 
+        if 'user' in sentry_data:
+            user_data = sentry_data['user']
+
         if module and args:
             # We fake the exception class due to many issues with imports/builtins/etc
             exc_type = type(str(obj.class_name), (Exception,), {})
@@ -349,6 +353,7 @@ def group(request, group_id):
         'page': 'details',
         'group': group,
         'json_data': iter_data(obj),
+        'user_data': user_data,
         'version_data': version_data,
         'frames': frames,
         'template_info': template_info,
@@ -380,6 +385,7 @@ def group_message_details(request, group_id, message_id):
     exc_type, exc_value = None, None
     # stack frames
     frames = None
+    user_data = None
     
     if '__sentry__' in message.data:
         sentry_data = message.data['__sentry__']
@@ -393,6 +399,9 @@ def group_message_details(request, group_id, message_id):
         if 'frames' in sentry_data:
             frames = sentry_data['frames']
 
+        if 'user' in sentry_data:
+            user_data = sentry_data['user']
+
         if module and args:
             # We fake the exception class due to many issues with imports/builtins/etc
             exc_type = type(str(message.class_name), (Exception,), {})
@@ -407,6 +416,7 @@ def group_message_details(request, group_id, message_id):
         'group': group,
         'message': message,
         'json_data': iter_data(message),
+        'user_data': user_data,
         'frames': frames,
         'template_info': template_info,
         'request': request,
diff --git a/tests/tests.py b/tests/tests.py
index 612f51bfb2..8bae8bee57 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -326,6 +326,7 @@ class SentryTest(BaseTestCase):
         self.assertEquals(error.data['url'], 'a'*210)
         
     def test_thrashing(self):
+        request = MockDjangoRequest()
         settings.THRASHING_LIMIT = 10
         settings.THRASHING_TIMEOUT = 60
         
@@ -334,13 +335,19 @@ class SentryTest(BaseTestCase):
         
         message_id = None
         for i in range(0, 10):
-            this_message_id = get_client().create_from_text('hi')
+            this_message_id = get_client().create_from_text('test_thrashing', request=request)
             self.assertTrue(this_message_id is not None)
+            self.assertTrue(hasattr(request, 'sentry'))
+            self.assertTrue('thrashed' in request.sentry)
+            self.assertFalse(request.sentry['thrashed'])
             self.assertNotEquals(this_message_id, message_id)
             message_id = this_message_id
 
         for i in range(0, 40):
-            this_message_id = get_client().create_from_text('hi')
+            this_message_id = get_client().create_from_text('test_thrashing', request=request)
+            self.assertTrue(hasattr(request, 'sentry'))
+            self.assertTrue('thrashed' in request.sentry)
+            self.assertTrue(request.sentry['thrashed'])
             self.assertEquals(this_message_id, message_id)
         
         self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
@@ -427,6 +434,39 @@ class SentryTest(BaseTestCase):
         self.assertEquals(last.message, 'view exception')
         self.assertEquals(last.view, 'tests.views.raise_exc')
 
+    def test_user_info(self):
+        user = User(username='admin', email='admin@example.com')
+        user.set_password('admin')
+        user.save()
+        
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+        
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        self.assertEquals(Message.objects.count(), 1)
+        last = Message.objects.get()
+        self.assertTrue('user' in last.data['__sentry__'])
+        user_info = last.data['__sentry__']['user']
+        self.assertTrue('is_authenticated' in user_info)
+        self.assertFalse(user_info['is_authenticated'])
+        self.assertFalse('username' in user_info)
+        self.assertFalse('email' in user_info)
+        
+        self.assertTrue(self.client.login(username='admin', password='admin'))
+
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        self.assertEquals(Message.objects.count(), 2)
+        last = Message.objects.order_by('-id')[0]
+        self.assertTrue('user' in last.data['__sentry__'])
+        user_info = last.data['__sentry__']['user']
+        self.assertTrue('is_authenticated' in user_info)
+        self.assertTrue(user_info['is_authenticated'])
+        self.assertTrue('username' in user_info)
+        self.assertEquals(user_info['username'], 'admin')
+        self.assertTrue('email' in user_info)
+        self.assertEquals(user_info['email'], 'admin@example.com')
+
     def test_request_middleware_exception(self):
         orig = list(django_settings.MIDDLEWARE_CLASSES)
         django_settings.MIDDLEWARE_CLASSES = orig + ['tests.middleware.BrokenRequestMiddleware',]
@@ -964,6 +1004,27 @@ class SentryViewsTest(BaseTestCase):
         resp = self.client.get(reverse('sentry-group', args=[2]), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/group/details.html')
+        self.assertTrue('group' in resp.context)
+        group = GroupedMessage.objects.get(pk=2)
+        self.assertEquals(resp.context['group'], group)
+
+    def test_group_message_list(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group-messages', args=[2]), follow=True)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/group/message_list.html')
+        self.assertTrue('group' in resp.context)
+        group = GroupedMessage.objects.get(pk=2)
+        self.assertEquals(resp.context['group'], group)
+
+    def test_group_message_details(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group-message', args=[2, 4]), follow=True)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        self.assertTemplateUsed(resp, 'sentry/group/message.html')
+        self.assertTrue('group' in resp.context)
+        group = GroupedMessage.objects.get(pk=2)
+        self.assertEquals(resp.context['group'], group)
 
 class SentryRemoteTest(BaseTestCase):
 
