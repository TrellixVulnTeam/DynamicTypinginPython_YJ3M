commit 4ce36f1dfee88305bc840ba47a277676e38d5a91
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Sep 12 16:28:53 2017 -0700

    ref(similarity): split index backends into module (#6108)

diff --git a/src/sentry/similarity/__init__.py b/src/sentry/similarity/__init__.py
index 3b05951330..c83a50a289 100644
--- a/src/sentry/similarity/__init__.py
+++ b/src/sentry/similarity/__init__.py
@@ -6,8 +6,9 @@ import logging
 from django.conf import settings
 
 from sentry.interfaces.stacktrace import Frame
+from sentry.similarity.backends.dummy import DummyIndexBackend
+from sentry.similarity.backends.redis import RedisMinHashIndexBackend
 from sentry.similarity.encoder import Encoder
-from sentry.similarity.index import MinHashIndex, DummyIndex
 from sentry.similarity.features import (
     ExceptionFeature,
     FeatureSet,
@@ -60,7 +61,7 @@ def get_frame_attributes(frame):
     return attributes
 
 
-def _make_index(cluster=None):
+def _make_index_backend(cluster=None):
     if not cluster:
         cluster_id = getattr(
             settings,
@@ -71,11 +72,11 @@ def _make_index(cluster=None):
         try:
             cluster = redis.redis_clusters.get(cluster_id)
         except KeyError:
-            index = DummyIndex()
+            index = DummyIndexBackend()
             logger.info('No redis cluster provided for similarity, using {!r}.'.format(index))
             return index
 
-    return MinHashIndex(
+    return RedisMinHashIndexBackend(
         cluster,
         'sim:1',
         MinHashSignatureBuilder(16, 0xFFFF),
@@ -86,7 +87,7 @@ def _make_index(cluster=None):
 
 
 features = FeatureSet(
-    _make_index(),
+    _make_index_backend(),
     Encoder({
         Frame: get_frame_attributes,
     }),
diff --git a/src/sentry/similarity/backends/__init__.py b/src/sentry/similarity/backends/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/similarity/backends/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/similarity/backends/abstract.py b/src/sentry/similarity/backends/abstract.py
new file mode 100644
index 0000000000..a97212ee38
--- /dev/null
+++ b/src/sentry/similarity/backends/abstract.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from abc import ABCMeta, abstractmethod
+
+import six
+
+
+@six.add_metaclass(ABCMeta)
+class AbstractIndexBackend(object):
+    @abstractmethod
+    def classify(self, scope, items, limit=None, timestamp=None):
+        pass
+
+    @abstractmethod
+    def compare(self, scope, key, items, limit=None, timestamp=None):
+        pass
+
+    @abstractmethod
+    def record(self, scope, key, items, timestamp=None):
+        pass
+
+    @abstractmethod
+    def merge(self, scope, destination, items, timestamp=None):
+        pass
+
+    @abstractmethod
+    def delete(self, scope, items, timestamp=None):
+        pass
+
+    @abstractmethod
+    def scan(self, scope, indices, batch=1000, timestamp=None):
+        pass
+
+    @abstractmethod
+    def flush(self, scope, indices, batch=1000, timestamp=None):
+        pass
+
+    @abstractmethod
+    def export(self, scope, items, timestamp=None):
+        pass
+
+    @abstractmethod
+    def import_(self, scope, items, timestamp=None):
+        pass
diff --git a/src/sentry/similarity/backends/dummy.py b/src/sentry/similarity/backends/dummy.py
new file mode 100644
index 0000000000..c0dfd1fe2f
--- /dev/null
+++ b/src/sentry/similarity/backends/dummy.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from sentry.similarity.backends.abstract import AbstractIndexBackend
+
+
+class DummyIndexBackend(AbstractIndexBackend):
+    def classify(self, scope, items, limit=None, timestamp=None):
+        return []
+
+    def compare(self, scope, key, items, limit=None, timestamp=None):
+        return []
+
+    def record(self, scope, key, items, timestamp=None):
+        return {}
+
+    def merge(self, scope, destination, items, timestamp=None):
+        return False
+
+    def delete(self, scope, items, timestamp=None):
+        return False
+
+    def scan(self, scope, indices, batch=1000, timestamp=None):
+        # empty generator
+        return
+        yield
+
+    def flush(self, scope, indices, batch=1000, timestamp=None):
+        pass
+
+    def export(self, scope, items, timestamp=None):
+        return {}
+
+    def import_(self, scope, items, timestamp=None):
+        return {}
diff --git a/src/sentry/similarity/index.py b/src/sentry/similarity/backends/redis.py
similarity index 89%
rename from src/sentry/similarity/index.py
rename to src/sentry/similarity/backends/redis.py
index 30d053451d..9d58d96b02 100644
--- a/src/sentry/similarity/index.py
+++ b/src/sentry/similarity/backends/redis.py
@@ -3,9 +3,11 @@ from __future__ import absolute_import
 import itertools
 import time
 
+from sentry.similarity.backends.abstract import AbstractIndexBackend
 from sentry.utils.iterators import chunked
 from sentry.utils.redis import load_script
 
+
 index = load_script('similarity/index.lua')
 
 
@@ -18,7 +20,7 @@ def flatten(value):
     return list(itertools.chain.from_iterable(value))
 
 
-class MinHashIndex(object):
+class RedisMinHashIndexBackend(AbstractIndexBackend):
     def __init__(self, cluster, namespace, signature_builder, bands, interval, retention):
         self.cluster = cluster
         self.namespace = namespace
@@ -256,34 +258,3 @@ class MinHashIndex(object):
             arguments.extend([idx, key, data])
 
         return self.__index(scope, arguments)
-
-
-class DummyIndex(object):
-    def classify(self, scope, items, limit=None, timestamp=None):
-        return []
-
-    def compare(self, scope, key, items, limit=None, timestamp=None):
-        return []
-
-    def record(self, scope, key, items, timestamp=None):
-        return {}
-
-    def merge(self, scope, destination, items, timestamp=None):
-        return False
-
-    def delete(self, scope, items, timestamp=None):
-        return False
-
-    def scan(self, scope, indices, batch=1000, timestamp=None):
-        # empty generator
-        return
-        yield
-
-    def flush(self, scope, indices, batch=1000, timestamp=None):
-        pass
-
-    def export(self, scope, items, timestamp=None):
-        return {}
-
-    def import_(self, scope, items, timestamp=None):
-        return {}
diff --git a/tests/sentry/similarity/test_index.py b/tests/sentry/similarity/test_index.py
index 15a4cbc434..5054260d36 100644
--- a/tests/sentry/similarity/test_index.py
+++ b/tests/sentry/similarity/test_index.py
@@ -5,7 +5,7 @@ import time
 import msgpack
 from exam import fixture
 
-from sentry.similarity.index import MinHashIndex
+from sentry.similarity.backends.redis import RedisMinHashIndexBackend
 from sentry.similarity.signatures import MinHashSignatureBuilder
 from sentry.testutils import TestCase
 from sentry.utils import redis
@@ -13,10 +13,10 @@ from sentry.utils import redis
 signature_builder = MinHashSignatureBuilder(32, 0xFFFF)
 
 
-class MinHashIndexTestCase(TestCase):
+class RedisMinHashIndexBackendTestCase(TestCase):
     @fixture
     def index(self):
-        return MinHashIndex(
+        return RedisMinHashIndexBackend(
             redis.clusters.get('default').get_local_client(0),
             'sim',
             signature_builder,
@@ -95,7 +95,7 @@ class MinHashIndexTestCase(TestCase):
                 for key, _ in self.index.compare('example', '1', [('index',
                                                                    0)])] == ['1', '2', '4', '5']
 
-        assert MinHashIndex(
+        assert RedisMinHashIndexBackend(
             self.index.cluster,
             self.index.namespace + '2',
             self.index.signature_builder,
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index dc5a9c6fb9..57d47ba7b6 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -5,12 +5,12 @@ from mock import patch
 
 from sentry.tasks.merge import merge_group, rehash_group_events
 from sentry.models import Event, Group, GroupMeta, GroupRedirect, GroupTagKey, GroupTagValue
-from sentry.similarity import _make_index
+from sentry.similarity import _make_index_backend
 from sentry.testutils import TestCase
 from sentry.utils import redis
 
 # Use the default redis client as a cluster client in the similarity index
-index = _make_index(redis.clusters.get('default').get_local_client(0))
+index = _make_index_backend(redis.clusters.get('default').get_local_client(0))
 
 
 @patch('sentry.similarity.features.index', new=index)
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index a430803576..393fd9b31d 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -17,7 +17,7 @@ from sentry.models import (
     Activity, Environment, EnvironmentProject, Event, EventMapping, Group, GroupHash, GroupRelease,
     GroupTagKey, GroupTagValue, Release, UserReport
 )
-from sentry.similarity import features, _make_index
+from sentry.similarity import features, _make_index_backend
 from sentry.tasks.unmerge import (
     get_caches, get_event_user_from_interface, get_fingerprint, get_group_backfill_attributes,
     get_group_creation_attributes, unmerge
@@ -27,7 +27,7 @@ from sentry.utils.dates import to_timestamp
 from sentry.utils import redis
 
 # Use the default redis client as a cluster client in the similarity index
-index = _make_index(redis.clusters.get('default').get_local_client(0))
+index = _make_index_backend(redis.clusters.get('default').get_local_client(0))
 
 
 @patch('sentry.similarity.features.index', new=index)
