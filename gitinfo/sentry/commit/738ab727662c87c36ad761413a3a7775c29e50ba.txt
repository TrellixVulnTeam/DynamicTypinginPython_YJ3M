commit 738ab727662c87c36ad761413a3a7775c29e50ba
Author: Max Bittker <maxbittker@gmail.com>
Date:   Fri Mar 9 11:24:20 2018 -0800

    feat(owners): Display code owners for events (#7540)
    
    * display owners for event

diff --git a/src/sentry/static/sentry/app/components/actorAvatar.jsx b/src/sentry/static/sentry/app/components/actorAvatar.jsx
index aad9f3b4fa..3c95f91d8d 100644
--- a/src/sentry/static/sentry/app/components/actorAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/actorAvatar.jsx
@@ -20,11 +20,11 @@ class ActorAvatar extends React.Component {
     let {actor, ...props} = this.props;
     if (actor.type == 'user') {
       let user = MemberListStore.getById(actor.id);
-      return <Avatar user={user} {...props} hasTooltip />;
+      return <Avatar user={user} hasTooltip {...props} />;
     }
     if (actor.type == 'team') {
       let team = TeamStore.getById(actor.id);
-      return <TeamAvatar team={team} {...props} hasTooltip />;
+      return <TeamAvatar team={team} hasTooltip {...props} />;
     }
 
     Raven.captureException('Unknown avatar type', {
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 102021575c..6a58a4c681 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -5,10 +5,11 @@ import ReactDOMServer from 'react-dom/server';
 import moment from 'moment';
 
 import Avatar from '../avatar';
+import ActorAvatar from '../actorAvatar';
 import TooltipMixin from '../../mixins/tooltip';
 import ApiMixin from '../../mixins/apiMixin';
 import GroupState from '../../mixins/groupState';
-import {assignToUser} from '../../actionCreators/group';
+import {assignToUser, assignToActor} from '../../actionCreators/group';
 import {t} from '../../locale';
 
 const SuggestedOwners = createReactClass({
@@ -31,7 +32,11 @@ const SuggestedOwners = createReactClass({
   ],
 
   getInitialState() {
-    return {owners: undefined};
+    return {
+      rule: null,
+      owners: [],
+      committers: [],
+    };
   },
 
   componentDidMount() {
@@ -67,16 +72,29 @@ const SuggestedOwners = createReactClass({
       {
         success: (data, _, jqXHR) => {
           this.setState({
-            owners: data.committers,
+            committers: data.committers,
           });
         },
         error: error => {
           this.setState({
-            owners: undefined,
+            committers: [],
           });
         },
       }
     );
+    this.api.request(`/projects/${org.slug}/${project.slug}/events/${event.id}/owners/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          owners: data.owners,
+          rule: data.rule,
+        });
+      },
+      error: error => {
+        this.setState({
+          owners: [],
+        });
+      },
+    });
   },
 
   assignTo(user) {
@@ -85,8 +103,17 @@ const SuggestedOwners = createReactClass({
     }
   },
 
-  renderCommitter(owner) {
-    let {author, commits} = owner;
+  assignToActor(actor) {
+    if (actor.id !== undefined) {
+      assignToActor({
+        actor,
+        id: this.props.event.groupID,
+      });
+    }
+  },
+
+  renderCommitter(committer) {
+    let {author, commits} = committer;
     return (
       <span
         key={author.id || author.email}
@@ -130,17 +157,58 @@ const SuggestedOwners = createReactClass({
     );
   },
 
+  renderOwner(owner) {
+    let {rule} = this.state;
+    return (
+      <span
+        key={`${owner.id}:${owner.type}`}
+        className="avatar-grid-item tip"
+        onClick={() => this.assignToActor(owner)}
+        title={ReactDOMServer.renderToStaticMarkup(
+          <div>
+            <div className="tooltip-owners-name">{owner.name}</div>
+            <ul className="tooltip-owners-commits">
+              {t("Assigned based on your Project's Issue Ownership settings")}
+            </ul>
+            <ul className="tooltip-owners-commits">
+              {rule[0] + t(' matched: ') + rule[1]}
+            </ul>
+          </div>
+        )}
+      >
+        <ActorAvatar actor={owner} hasTooltip={false} />
+      </span>
+    );
+  },
+
   render() {
-    if (!(this.state.owners && this.state.owners.length)) {
+    let {committers, owners} = this.state;
+    let showOwners = new Set(this.getOrganization().features).has('internal-catchall');
+
+    if (owners.length == 0 && committers.length == 0) {
       return null;
     }
     return (
       <div className="m-b-1">
-        <h6>
-          <span>{t('Suggested Owners')}</span>
-          <small style={{background: '#FFFFFF'}}>Click to assign</small>
-        </h6>
-        <div className="avatar-grid">{this.state.owners.map(this.renderCommitter)}</div>
+        {committers.length ? (
+          <React.Fragment>
+            <h6>
+              <span>{t('Suggested Owners')}</span>
+              <small style={{background: '#FFFFFF'}}>{t('Click to assign')}</small>
+            </h6>
+            <div className="avatar-grid">{committers.map(this.renderCommitter)}</div>
+          </React.Fragment>
+        ) : null}
+
+        {showOwners && owners.length ? (
+          <React.Fragment>
+            <h6>
+              <span>{t('Owners')}</span>
+              <small style={{background: '#FFFFFF'}}>{t('Click to assign')}</small>
+            </h6>
+            <div className="avatar-grid">{owners.map(this.renderOwner)}</div>
+          </React.Fragment>
+        ) : null}
       </div>
     );
   },
diff --git a/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
new file mode 100644
index 0000000000..9bb2055a64
--- /dev/null
+++ b/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
@@ -0,0 +1,100 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`SuggestedOwners render() should not show owners committers without featureflag 1`] = `
+<SuggestedOwners
+  event={
+    Object {
+      "eventID": "12345",
+      "groupID": "1",
+      "id": "1",
+      "message": "ApiException",
+    }
+  }
+>
+  <div
+    className="m-b-1"
+  />
+</SuggestedOwners>
+`;
+
+exports[`SuggestedOwners render() should show owners when enable 1`] = `
+<SuggestedOwners
+  event={
+    Object {
+      "eventID": "12345",
+      "groupID": "1",
+      "id": "1",
+      "message": "ApiException",
+    }
+  }
+>
+  <div
+    className="m-b-1"
+  >
+    <h6>
+      <span>
+        Owners
+      </span>
+      <small
+        style={
+          Object {
+            "background": "#FFFFFF",
+          }
+        }
+      >
+        Click to assign
+      </small>
+    </h6>
+    <div
+      className="avatar-grid"
+    >
+      <span
+        className="avatar-grid-item tip"
+        key="1:user"
+        onClick={[Function]}
+        title="<div><div class=\\"tooltip-owners-name\\">Jane Doe</div><ul class=\\"tooltip-owners-commits\\">Assigned based on your Project&#x27;s Issue Ownership settings</ul><ul class=\\"tooltip-owners-commits\\">path matched: sentry/tagstore/*</ul></div>"
+      >
+        <ActorAvatar
+          actor={
+            Object {
+              "id": "1",
+              "name": "Jane Doe",
+              "type": "user",
+            }
+          }
+          hasTooltip={false}
+        >
+          <Avatar
+            className="avatar"
+            gravatar={true}
+            hasTooltip={false}
+            size={64}
+            user={
+              Object {
+                "email": "janedoe@example.com",
+                "id": "1",
+                "name": "Jane Doe",
+              }
+            }
+          >
+            <Tooltip
+              disabled={true}
+              title="Jane Doe (janedoe@example.com)"
+            >
+              <span
+                className="avatar"
+              >
+                <img
+                  onError={[Function]}
+                  onLoad={[Function]}
+                  src="undefined/avatar/e1f3994f2632af3d1c8c2dcc168a10e6?s=64&d=blank"
+                />
+              </span>
+            </Tooltip>
+          </Avatar>
+        </ActorAvatar>
+      </span>
+    </div>
+  </div>
+</SuggestedOwners>
+`;
diff --git a/tests/js/spec/components/group/suggestedOwners.spec.jsx b/tests/js/spec/components/group/suggestedOwners.spec.jsx
new file mode 100644
index 0000000000..04c75d024b
--- /dev/null
+++ b/tests/js/spec/components/group/suggestedOwners.spec.jsx
@@ -0,0 +1,74 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import SuggestedOwners from 'app/components/group/suggestedOwners';
+import MemberListStore from 'app/stores/memberListStore';
+import {Client} from 'app/api';
+import SentryTypes from 'app/proptypes';
+
+describe('SuggestedOwners', function() {
+  let sandbox;
+  const event = TestStubs.Event();
+  const USER = {
+    id: '1',
+    name: 'Jane Doe',
+    email: 'janedoe@example.com',
+  };
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  beforeEach(function() {
+    let endpoint = `/projects/${org.slug}/${project.slug}/events/${event.id}`;
+
+    sandbox = sinon.sandbox.create();
+    MemberListStore.loadInitialData([USER]);
+    Client.addMockResponse({
+      url: `${endpoint}/committers/`,
+      body: {committers: []},
+    });
+    Client.addMockResponse({
+      url: `${endpoint}/owners/`,
+      body: {
+        owners: [
+          {
+            type: 'user',
+            id: '1',
+            name: 'Jane Doe',
+          },
+        ],
+        rule: ['path', 'sentry/tagstore/*'],
+      },
+    });
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+    Client.clearMockResponses();
+  });
+
+  describe('render()', function() {
+    it('should show owners when enable', function() {
+      let wrapper = mount(
+        <SuggestedOwners event={event} />,
+        TestStubs.routerContext([
+          {project: TestStubs.Project(), group: TestStubs.Group()},
+          {group: SentryTypes.Group, project: SentryTypes.Project},
+        ])
+      );
+
+      wrapper.setContext({
+        organization: {id: '1', features: new Set(['internal-catchall'])},
+      });
+
+      expect(wrapper).toMatchSnapshot();
+    });
+    it('should not show owners committers without featureflag', function() {
+      let wrapper = mount(
+        <SuggestedOwners event={event} />,
+        TestStubs.routerContext([
+          {project: TestStubs.Project(), group: TestStubs.Group()},
+          {group: SentryTypes.Group, project: SentryTypes.Project},
+        ])
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
