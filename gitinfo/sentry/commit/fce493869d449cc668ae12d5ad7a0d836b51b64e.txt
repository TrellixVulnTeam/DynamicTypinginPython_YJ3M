commit fce493869d449cc668ae12d5ad7a0d836b51b64e
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 19 14:27:23 2013 -0700

    Add Riak integration tests

diff --git a/.travis.yml b/.travis.yml
index 153d54c1d1..334da25976 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,4 +1,10 @@
 language: python
+services:
+  - memcached
+  - riak
+  - mysql
+  - postgresql
+  - redis-server
 python:
   - "2.6"
   - "2.7"
diff --git a/tests/sentry/nodestore/riak/__init__.py b/tests/sentry/nodestore/riak/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/nodestore/riak/backend/__init__.py b/tests/sentry/nodestore/riak/backend/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/nodestore/riak/backend/tests.py b/tests/sentry/nodestore/riak/backend/tests.py
new file mode 100644
index 0000000000..4afce19a6e
--- /dev/null
+++ b/tests/sentry/nodestore/riak/backend/tests.py
@@ -0,0 +1,55 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.nodestore.riak.backend import RiakNodeStorage
+from sentry.testutils import TestCase
+
+
+def riak_is_available():
+    import socket
+    try:
+        socket.create_connection(('127.0.0.1', 8098), 1.0)
+    except socket.error:
+        return False
+    else:
+        return True
+
+
+@pytest.mark.skipif('not riak_is_available()',
+                    reason="requires riak server running")
+class RiakNodeStorageTest(TestCase):
+    def setUp(self):
+        self.ns = RiakNodeStorage(nodes=({
+            'host': '127.0.0.1',
+            'http_port': 8098,
+        }))
+
+    def test_integration(self):
+        node_id = self.ns.create({
+            'foo': 'bar',
+        })
+        assert node_id is not None
+
+        self.ns.set(node_id, {
+            'foo': 'baz',
+        })
+
+        result = self.ns.get(node_id)
+        assert result == {
+            'foo': 'baz',
+        }
+
+        node_id2 = self.ns.create({
+            'foo': 'bar',
+        })
+
+        result = self.ns.get_multi([node_id, node_id2])
+        assert result[node_id] == {
+            'foo': 'baz',
+        }
+        assert result[node_id2] == {
+            'foo': 'bar',
+        }
