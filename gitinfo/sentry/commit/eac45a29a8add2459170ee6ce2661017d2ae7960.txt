commit eac45a29a8add2459170ee6ce2661017d2ae7960
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 7 21:10:03 2013 -0700

    Remove lock on get_or_create

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 891d32c163..55b3d9a047 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -38,7 +38,7 @@ from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED, MINUTE_NORMALIZ
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.tasks.index import index_event
-from sentry.utils.cache import cache, memoize, Lock
+from sentry.utils.cache import cache, memoize
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
 from sentry.utils.models import create_or_update, make_key
@@ -219,32 +219,6 @@ class BaseManager(models.Manager):
         else:
             return self.get(**kwargs)
 
-    def get_or_create(self, _cache=False, **kwargs):
-        """
-        A modified version of Django's get_or_create which will create a distributed
-        lock (using the cache backend) whenever it hits the create clause.
-        """
-        defaults = kwargs.pop('defaults', {})
-
-        # before locking attempt to fetch the instance
-        try:
-            if _cache:
-                return self.get_from_cache(**kwargs), False
-            return self.get(**kwargs), False
-        except self.model.DoesNotExist:
-            pass
-        lock_key = make_key(self.model, 'lock', kwargs)
-
-        # instance not found, lets grab a lock and attempt to create it
-        with Lock(lock_key):
-            # its important we get() before create() to ensure that if
-            # someone beat us to creating it from the time we did our very
-            # first .get(), that we get the result back as we cannot
-            # rely on unique constraints existing
-            instance, created = super(BaseManager, self).get_or_create(defaults=defaults, **kwargs)
-
-        return instance, created
-
     def create_or_update(self, **kwargs):
         return create_or_update(self.model, **kwargs)
 
