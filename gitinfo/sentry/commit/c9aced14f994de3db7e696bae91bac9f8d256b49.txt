commit c9aced14f994de3db7e696bae91bac9f8d256b49
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 1 21:24:16 2014 -0700

    Various work to cleaning up team/project permissions

diff --git a/src/sentry/api/endpoints/group_markseen.py b/src/sentry/api/endpoints/group_markseen.py
index 45516d5b63..aab0f4da62 100644
--- a/src/sentry/api/endpoints/group_markseen.py
+++ b/src/sentry/api/endpoints/group_markseen.py
@@ -19,7 +19,7 @@ class GroupMarkSeenEndpoint(Endpoint):
         assert_perm(group, request.user, request.auth)
 
         if group.project not in Project.objects.get_for_user(
-                request.user, team=group.project.team, superuser=False):
+                team=group.project.team, user=request.user):
             return Response(status=400)
 
         instance, created = create_or_update(
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 96e0bc7358..b0bb478ffa 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -57,9 +57,9 @@ class OrganizationTeamsEndpoint(Endpoint):
                 return Response(status=403)
         else:
             teams = Team.objects.get_for_user(
-                user=request.user,
                 organization=organization,
-            ).values()
+                user=request.user,
+            )
         return Response(serialize(teams, request.user))
 
     def post(self, request, organization_id):
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 7dacf21e9f..776beb98cb 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -23,7 +23,7 @@ class TeamProjectIndexEndpoint(Endpoint):
 
         assert_perm(team, request.user, request.auth)
 
-        results = list(Project.objects.get_for_user(request.user, team=team))
+        results = list(Project.objects.get_for_user(team=team, user=request.user))
 
         return Response(serialize(results, request.user))
 
@@ -32,7 +32,7 @@ class TeamProjectIndexEndpoint(Endpoint):
 
         assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
-        if not can_create_projects(request.user, team=team_id):
+        if not can_create_projects(user=request.user, team=team):
             return Response(status=403)
 
         serializer = ProjectSerializer(data=request.DATA)
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index 3885739c3d..702e29d34f 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -15,7 +15,10 @@ class TeamStatsEndpoint(BaseStatsEndpoint):
 
         assert_perm(team, request.user, request.auth)
 
-        projects = Project.objects.get_for_user(request.user, team=team)
+        projects = Project.objects.get_for_user(
+            team=team,
+            user=request.user,
+        )
 
         if not projects:
             return Response([])
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index eb6fd7ba99..d990aa3664 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -7,7 +7,7 @@ from sentry.api.base import Endpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import Team, User
+from sentry.models import User
 
 
 class UserSerializer(serializers.ModelSerializer):
@@ -27,12 +27,7 @@ class UserDetailsEndpoint(Endpoint):
 
         assert_perm(user, request.user, request.auth)
 
-        teams = Team.objects.get_for_user(user, with_projects=True)
-
         data = serialize(user, request.user)
-        data['teams'] = serialize([t[0] for t in teams.itervalues()], request.user)
-        for (team, projects), team_data in zip(teams.itervalues(), data['teams']):
-            team_data['projects'] = serialize(projects, request.user)
 
         return Response(data)
 
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 710b522e53..3d96472258 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -17,7 +17,11 @@ def has_perm(object, user, project_key, access=MEMBER_USER):
     if type(object) == Team:
         if project_key:
             return object == project_key.project.team and access == MEMBER_USER
-        return object.slug in Team.objects.get_for_user(user, access=access)
+        return object in Team.objects.get_for_user(
+            organization=object.organization,
+            user=user,
+            access=access,
+        )
 
     if hasattr(object, 'project'):
         object = object.project
@@ -28,7 +32,11 @@ def has_perm(object, user, project_key, access=MEMBER_USER):
 
         return any(
             object == o
-            for o in Project.objects.get_for_user(user, access=access)
+            for o in Project.objects.get_for_user(
+                team=object.team,
+                user=user,
+                access=access,
+            )
         )
 
     raise TypeError(type(object))
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 5535821542..06fb51ef10 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -9,9 +9,18 @@ from sentry.utils.db import attach_foreignkey
 @register(Project)
 class ProjectSerializer(Serializer):
     def attach_metadata(self, objects, user):
+        if not objects:
+            return
+
+        organization = objects[0].team.organization
+
         team_map = dict(
-            (t.id, t) for t in Team.objects.get_for_user(user).itervalues()
+            (t.id, t) for t in Team.objects.get_for_user(
+                organization=organization,
+                user=user,
+            )
         )
+
         for project in objects:
             try:
                 team = team_map[project.team_id]
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 26b5e2e286..e92d9adf48 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -8,10 +8,19 @@ from sentry.models import Team
 @register(Team)
 class TeamSerializer(Serializer):
     def attach_metadata(self, objects, user):
-        team_map = Team.objects.get_for_user(user)
+        if not objects:
+            return
+
+        organization = objects[0].organization
+        team_map = dict(
+            (t.id, t) for t in Team.objects.get_for_user(
+                organization=organization,
+                user=user,
+            )
+        )
         for team in objects:
             try:
-                team.access_type = team_map[team.slug].access_type
+                team.access_type = team_map[team.id].access_type
             except KeyError:
                 team.access_type = None
 
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 928632a8c1..e98e99168e 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -10,14 +10,11 @@ from __future__ import absolute_import
 
 import six
 
-from django.conf import settings
 from django.contrib.auth.models import UserManager
-from django.utils.datastructures import SortedDict
 
 from sentry.app import buffer, tsdb
-from sentry.constants import MAX_TAG_VALUE_LENGTH, MEMBER_USER
+from sentry.constants import MAX_TAG_VALUE_LENGTH
 from sentry.db.models import BaseManager
-from sentry.utils.db import attach_foreignkey
 
 
 class UserManager(BaseManager, UserManager):
@@ -91,114 +88,18 @@ class GroupManager(BaseManager):
 
 
 class ProjectManager(BaseManager):
-    def get_for_user(self, user=None, access=None, hidden=False, team=None,
-                     superuser=True):
+    def get_for_user(self, team, user, access=None):
         """
         Returns a SortedDict of all projects a user has some level of access to.
         """
-        from sentry.models import Team
-
         if not (user and user.is_authenticated()):
             return []
 
-        # TODO: the result of this function should be cached
-        is_authenticated = (user and user.is_authenticated())
-
-        base_qs = self
-        if not hidden:
-            base_qs = base_qs.filter(status=0)
-        if team:
-            base_qs = base_qs.filter(team=team)
-
-        if team and user.is_superuser and superuser:
-            projects = set(base_qs)
-        else:
-            projects_qs = base_qs
-            if not settings.SENTRY_PUBLIC:
-                # If the user is authenticated, include their memberships
-                teams = Team.objects.get_for_user(
-                    user, access, access_groups=False).values()
-                if not teams:
-                    projects_qs = self.none()
-                if team and team not in teams:
-                    projects_qs = self.none()
-                elif not team:
-                    projects_qs = projects_qs.filter(team__in=teams)
-
-            projects = set(projects_qs)
-
-            if is_authenticated:
-                projects |= set(base_qs.filter(accessgroup__members=user))
+        base_qs = self.filter(team=team)
 
-        attach_foreignkey(projects, self.model.team)
+        project_list = []
+        for project in base_qs:
+            project.team = team
+            project_list.append(project)
 
-        return sorted(projects, key=lambda x: x.name.lower())
-
-
-class TeamManager(BaseManager):
-    def get_for_user(self, user, access=None, access_groups=True,
-                     with_projects=False, organization=None):
-        """
-        Returns a SortedDict of all teams a user has some level of access to.
-
-        Each <Team> returned has an ``access_type`` attribute which holds the
-        MEMBER_TYPE value.
-        """
-        from sentry.models import TeamMember, AccessGroup, Project
-
-        results = SortedDict()
-
-        if not user.is_authenticated():
-            return results
-
-        all_teams = set()
-
-        qs = TeamMember.objects.filter(
-            user=user,
-        ).select_related('team')
-        if access is not None:
-            qs = qs.filter(type__lte=access)
-        if organization is not None:
-            qs = qs.filter(team__organization=organization)
-
-        for tm in qs:
-            team = tm.team
-            team.access_type = tm.type
-            all_teams.add(team)
-
-        if access_groups:
-            qs = AccessGroup.objects.filter(
-                members=user,
-            ).select_related('team')
-            if access is not None:
-                qs = qs.filter(type__lte=access)
-            if organization is not None:
-                qs = qs.filter(team__organization=organization)
-
-            for group in qs:
-                team = group.team
-                team.access_type = group.type
-                all_teams.add(team)
-
-        if settings.SENTRY_PUBLIC and access is None:
-            qs = self.all()
-            if organization is not None:
-                qs = qs.filter(organization=organization)
-
-            for team in qs:
-                all_teams.add(team)
-                team.access_type = MEMBER_USER
-
-        for team in sorted(all_teams, key=lambda x: x.name.lower()):
-            results[team.slug] = team
-
-        if with_projects:
-            # these kinds of queries make people sad :(
-            new_results = SortedDict()
-            for team in results.itervalues():
-                project_list = list(Project.objects.get_for_user(
-                    user, team=team))
-                new_results[team.slug] = (team, project_list)
-            results = new_results
-
-        return results
+        return sorted(project_list, key=lambda x: x.name.lower())
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index af7f194923..872d0cfc6c 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -106,3 +106,5 @@ class OrganizationMember(Model):
         if self.user_id:
             return self.user.email
         return self.email
+
+OrganizationMemberTeams = OrganizationMember.teams.through
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index e1683360af..3c2ae5e6dd 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -14,12 +14,66 @@ from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import RESERVED_TEAM_SLUGS
-from sentry.db.models import BoundedPositiveIntegerField, Model, sane_repr
+from sentry.db.models import (
+    BaseManager, BoundedPositiveIntegerField, Model, sane_repr
+)
 from sentry.db.models.utils import slugify_instance
-from sentry.manager import TeamManager
 from sentry.utils.http import absolute_uri
 
 
+class TeamManager(BaseManager):
+    def get_for_user(self, organization, user, access=None, access_groups=True,
+                     with_projects=False):
+        """
+        Returns a SortedDict of all teams a user has some level of access to.
+
+        Each <Team> returned has an ``access_type`` attribute which holds the
+        MEMBER_TYPE value.
+        """
+        from sentry.models import (
+            OrganizationMember, Project
+        )
+
+        if not user.is_authenticated():
+            return []
+
+        all_teams = set()
+
+        qs = OrganizationMember.objects.filter(
+            user=user,
+            organization=organization,
+        )
+        if access is not None:
+            qs = qs.filter(type__lte=access)
+
+        try:
+            om = qs.get()
+        except OrganizationMember.DoesNotExist:
+            return []
+
+        if om.has_global_access:
+            team_qs = self.filter(organization=organization)
+        else:
+            team_qs = om.teams.all()
+
+        for team in team_qs:
+            team.access_type = om.type
+            all_teams.add(team)
+
+        results = sorted(all_teams, key=lambda x: x.name.lower())
+
+        if with_projects:
+            # these kinds of queries make people sad :(
+            for idx, team in enumerate(results):
+                project_list = list(Project.objects.get_for_user(
+                    team=team,
+                    user=user,
+                ))
+                results[idx] = (team, project_list)
+
+        return results
+
+
 # TODO(dcramer): pull in enum library
 class TeamStatus(object):
     VISIBLE = 0
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 400b7e436c..2cc7c642d8 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -82,7 +82,7 @@ def can_create_teams(user):
 
 @cached_for_request
 @requires_login
-def can_create_projects(user, team=None):
+def can_create_projects(user, team):
     """
     Returns a boolean describing whether a user has the ability to
     create new projects.
@@ -90,8 +90,9 @@ def can_create_projects(user, team=None):
     if user.is_superuser:
         return True
 
-    # must be an owner of team
-    if team and not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    # must be an organization admin
+    if not team.organization.member_set.filter(
+            user=user, type=OrganizationMemberType.ADMIN, teams=team).exists():
         return False
 
     result = plugins.first('has_perm', user, 'add_project', team)
@@ -267,9 +268,12 @@ def can_admin_group(user, group, is_remove=False):
         return True
 
     # We make the assumption that we have a valid membership here
-    try:
-        Team.objects.get_for_user(user)[group.project.team.slug]
-    except KeyError:
+        # TODO(dcramer): this is a really inefficient way to test this
+    teams = Team.objects.get_for_user(
+        organization=group.project.team.organization,
+        user=user,
+    )
+    if group.project.team not in teams:
         return False
 
     # The "remove_event" permission was added after "admin_event".
diff --git a/src/sentry/tasks/email.py b/src/sentry/tasks/email.py
index 9a23d6ecab..3e133d9d65 100644
--- a/src/sentry/tasks/email.py
+++ b/src/sentry/tasks/email.py
@@ -24,7 +24,7 @@ def _get_user_from_email(group, email):
     for user in User.objects.filter(email__iexact=email):
         # Make sure that the user actually has access to this project
         if group.project not in Project.objects.get_for_user(
-                user, team=group.team, superuser=False):
+                team=group.team, user=user):
             logger.warning('User %r does not have access to group %r', (user, group))
             continue
 
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index bea14bd49e..4099b80ec6 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -474,7 +474,8 @@ def can_admin_team(user, team):
         return True
     if team.owner == user:
         return True
-    if team.slug in Team.objects.get_for_user(user, access=MEMBER_OWNER):
+    if team.slug in Team.objects.get_for_user(
+            organization=team.organization, user=user, access=MEMBER_OWNER):
         return True
     return False
 
diff --git a/src/sentry/templatetags/sentry_permissions.py b/src/sentry/templatetags/sentry_permissions.py
index 8237a2f44f..7f6f08365f 100644
--- a/src/sentry/templatetags/sentry_permissions.py
+++ b/src/sentry/templatetags/sentry_permissions.py
@@ -19,13 +19,13 @@ register = template.Library()
 
 # TODO: Django doesn't seem to introspect function args correctly for filters
 # so we can't just register.filter(can_add_team_member)
-register.filter('can_create_teams')(lambda a, b: can_create_teams)
-register.filter('can_create_projects')(lambda a, b: can_create_projects)
+register.filter('can_create_teams')(lambda a, b: can_create_teams(a, b))
+register.filter('can_create_projects')(lambda a, b: can_create_projects(a, b))
 register.filter('can_add_team_member')(lambda a, b: can_add_team_member(a, b))
 register.filter('can_manage_team')(lambda a, b: can_manage_team(a, b))
 register.filter('can_manage_org')(lambda a, b: can_manage_org(a, b))
-register.filter('can_remove_team')(lambda a, b: can_remove_team)
-register.filter('can_remove_project')(lambda a, b: can_remove_project)
+register.filter('can_remove_team')(lambda a, b: can_remove_team(a, b))
+register.filter('can_remove_project')(lambda a, b: can_remove_project(a, b))
 
 
 @register.filter
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 59028e1803..9f865e98e7 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -669,7 +669,7 @@ def get_group_trends(request, team=None, project=None):
     if not team and project:
         project_list = [project]
     else:
-        project_list = Project.objects.get_for_user(request.user, team=team)
+        project_list = Project.objects.get_for_user(team=team, user=request.user)
 
     project_dict = dict((p.id, p) for p in project_list)
 
@@ -707,7 +707,7 @@ def get_new_groups(request, team=None, project=None):
     if not team and project:
         project_list = [project]
     else:
-        project_list = Project.objects.get_for_user(request.user, team=team)
+        project_list = Project.objects.get_for_user(team=team, user=request.user)
 
     project_dict = dict((p.id, p) for p in project_list)
 
@@ -741,7 +741,7 @@ def get_resolved_groups(request, team=None, project=None):
     if not team and project:
         project_list = [project]
     else:
-        project_list = Project.objects.get_for_user(request.user, team=team)
+        project_list = Project.objects.get_for_user(team=team, user=request.user)
 
     project_dict = dict((p.id, p) for p in project_list)
 
@@ -774,7 +774,7 @@ def get_stats(request, team=None, project=None):
     if not team and project:
         project_list = [project]
     else:
-        project_list = Project.objects.get_for_user(request.user, team=team)
+        project_list = Project.objects.get_for_user(team=team, user=request.user)
 
     cutoff = timedelta(minutes=minutes)
 
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 00bfabc799..e6776cec29 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -49,17 +49,19 @@ def has_access(access_or_func=None, team=None, access=None):
 
             # Pull in team if it's part of the URL arguments
             if team_slug:
-                if request.user.is_superuser:
-                    try:
-                        team = Team.objects.get_from_cache(slug=team_slug)
-                    except Team.DoesNotExist:
-                        return HttpResponseRedirect(reverse('sentry'))
-                else:
-                    team_list = Team.objects.get_for_user(request.user, access)
-
-                    try:
-                        team = team_list[team_slug]
-                    except KeyError:
+                try:
+                    team = Team.objects.get_from_cache(slug=team_slug)
+                except Team.DoesNotExist:
+                    return HttpResponseRedirect(reverse('sentry'))
+
+                if not request.user.is_superuser:
+                    team_list = Team.objects.get_for_user(
+                        organization=team.organization,
+                        user=request.user,
+                        access=access,
+                    )
+
+                    if team not in team_list:
                         return HttpResponseRedirect(reverse('sentry'))
             else:
                 team = None
@@ -86,7 +88,11 @@ def has_access(access_or_func=None, team=None, access=None):
                         else:
                             return HttpResponseRedirect(reverse('sentry'))
                 else:
-                    project_list = Project.objects.get_for_user(request.user, access, team=team)
+                    project_list = Project.objects.get_for_user(
+                        team=team,
+                        user=request.user,
+                        access=access,
+                    )
 
                     if project_id.isdigit():
                         key = 'id'
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 81428d6011..b134caa578 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -86,14 +86,14 @@ class EditProjectForm(BaseProjectForm):
 
     def __init__(self, request, team_list, data, instance, *args, **kwargs):
         super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
-        self.team_list = dict((t.pk, t) for t in team_list.itervalues())
+        self.team_map = dict((t.pk, t) for t in team_list)
 
         if not can_set_public_projects(request.user):
             del self.fields['public']
-        if len(team_list) == 1 and instance.team == team_list.values()[0]:
+        if len(team_list) == 1 and instance.team == team_list[0]:
             del self.fields['team']
         else:
-            self.fields['team'].choices = get_team_choices(self.team_list, instance.team)
+            self.fields['team'].choices = get_team_choices(self.team_map, instance.team)
             self.fields['team'].widget.choices = self.fields['team'].choices
 
     def clean_team(self):
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 879ce4007c..2b2071ae8a 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -260,7 +260,11 @@ def appearance_settings(request):
 def notification_settings(request):
     settings_form = NotificationSettingsForm(request.user, request.POST or None)
 
-    project_list = Project.objects.get_for_user(request.user, access=MEMBER_USER)
+    # TODO(dcramer): we need to list out all projects by org/team
+    project_list = Project.objects.get_for_user(
+        user=request.user,
+        access=MEMBER_USER,
+    )
     project_forms = [
         (project, ProjectEmailOptionsForm(
             project, request.user,
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 10dae6b1c9..87e3ec093d 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -81,46 +81,43 @@ class OrganizationMixin(object):
         Returns the currently selected team for the request or None
         if no match.
         """
-        if request.user.is_superuser:
-            try:
-                return Team.objects.get_from_cache(slug=team_slug)
-            except Team.DoesNotExist:
-                return None
-
-        team_list = Team.objects.get_for_user(
-            user=request.user,
-            access=access,
-        )
-
         try:
-            return team_list[team_slug]
-        except KeyError:
+            team = Team.objects.get_from_cache(slug=team_slug)
+        except Team.DoesNotExist:
             return None
 
-    def get_active_project(self, request, team, project_slug, access=None):
-        if request.user.is_superuser:
-            try:
-                return Project.objects.get_from_cache(
-                    slug=project_slug,
-                    team=team,
-                )
-            except Project.DoesNotExist:
+        if not request.user.is_superuser:
+            team_list = Team.objects.get_for_user(
+                organization=team.organization,
+                user=request.user,
+                access=access,
+            )
+
+            if team not in team_list:
                 return None
 
-        project_list = Project.objects.get_for_user(
-            user=request.user,
-            team=team,
-            access=access,
-        )
+        return team
 
+    def get_active_project(self, request, team, project_slug, access=None):
         try:
-            return (
-                p for p in project_list
-                if p.slug == project_slug
-            ).next()
-        except StopIteration:
+            project = Project.objects.get_from_cache(
+                slug=project_slug,
+                team=team,
+            )
+        except Project.DoesNotExist:
             return None
 
+        if not request.user.is_superuser:
+            project_list = Project.objects.get_for_user(
+                user=request.user,
+                team=team,
+                access=access,
+            )
+            if project not in project_list:
+                return None
+
+        return project
+
 
 class BaseView(View, OrganizationMixin):
     auth_required = True
@@ -159,7 +156,7 @@ class BaseView(View, OrganizationMixin):
             organization=organization,
             user=user,
             with_projects=True,
-        ).values()
+        )
 
 
 class OrganizationView(BaseView):
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index ca99a48ccc..48d24af49f 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -301,7 +301,7 @@ def group(request, team, project, group, event_id=None):
         add_note_form = NewNoteForm()
 
     if project in Project.objects.get_for_user(
-            request.user, team=team, superuser=False):
+            team=team, user=request.user):
         # update that the user has seen this group
         create_or_update(
             GroupSeen,
diff --git a/src/sentry/web/frontend/organization_home.py b/src/sentry/web/frontend/organization_home.py
index 6dfba8b9d0..ca15c28265 100644
--- a/src/sentry/web/frontend/organization_home.py
+++ b/src/sentry/web/frontend/organization_home.py
@@ -10,7 +10,7 @@ class OrganizationHomeView(OrganizationView):
             organization=organization,
             user=request.user,
             with_projects=True,
-        ).values()
+        )
 
         context = {
             'team_list': team_list,
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
index 9e275b37af..f1d3aebbc8 100644
--- a/src/sentry/web/frontend/organization_members.py
+++ b/src/sentry/web/frontend/organization_members.py
@@ -2,11 +2,11 @@ from __future__ import absolute_import
 
 from collections import defaultdict
 
-from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.models import (
+    OrganizationMember, OrganizationMemberTeams, OrganizationMemberType
+)
 from sentry.web.frontend.base import OrganizationView
 
-OrganizationMemberTeams = OrganizationMember.teams.through
-
 
 class OrganizationMembersView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
diff --git a/src/sentry/web/frontend/organization_teams.py b/src/sentry/web/frontend/organization_teams.py
index 620398adca..06da91ee72 100644
--- a/src/sentry/web/frontend/organization_teams.py
+++ b/src/sentry/web/frontend/organization_teams.py
@@ -11,7 +11,7 @@ class OrganizationTeamsView(OrganizationView):
         team_list = Team.objects.get_for_user(
             organization=organization,
             user=request.user,
-        ).values()
+        )
 
         context = {
             'team_list': team_list,
diff --git a/src/sentry/web/frontend/projects/settings.py b/src/sentry/web/frontend/projects/settings.py
index c3b7095cec..269d462780 100644
--- a/src/sentry/web/frontend/projects/settings.py
+++ b/src/sentry/web/frontend/projects/settings.py
@@ -30,7 +30,11 @@ def manage_project(request, team, project):
     if result is False and not request.user.is_superuser:
         return HttpResponseRedirect(reverse('sentry'))
 
-    team_list = Team.objects.get_for_user(team.owner, MEMBER_OWNER)
+    team_list = Team.objects.get_for_user(
+        organization=team.organization,
+        user=team.owner,
+        access=MEMBER_OWNER,
+    )
 
     form = EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
         'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 7076dffdc0..9819d9d40e 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -8,13 +8,11 @@ sentry.web.helpers
 from __future__ import absolute_import, print_function
 
 import logging
-import warnings
 
 from django.conf import settings
 from django.core.urlresolvers import reverse, resolve
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
-from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
 from sentry import options
@@ -24,14 +22,6 @@ from sentry.models import Project, Team, Option, ProjectOption, ProjectKey
 logger = logging.getLogger('sentry.errors')
 
 
-def get_project_list(user=None, access=None, hidden=False, key='id', team=None):
-    warnings.warn('get_project_list is Deprecated. Use Project.objects.get_for_user instead.', DeprecationWarning)
-    return SortedDict(
-        (getattr(p, key), p)
-        for p in Project.objects.get_for_user(user, access)
-    )
-
-
 def group_is_public(group, user):
     """
     Return ``True`` if the this group if the user viewing it should see a restricted view.
@@ -50,16 +40,11 @@ def group_is_public(group, user):
     if user.is_superuser:
         return False
     # project owners can view events
-    if group.project in get_project_list(user).values():
+    if group.project in Project.objects.get_for_user(team=group.project.team, user=user):
         return False
     return True
 
 
-def get_team_list(user, access=None):
-    warnings.warn('get_team_list is Deprecated. Use Team.objects.get_for_user instead.', DeprecationWarning)
-    return Team.objects.get_for_user(user, access)
-
-
 _LOGIN_URL = None
 
 
@@ -124,7 +109,7 @@ def get_default_context(request, existing_context=None, team=None):
                 organization=team.organization,
                 user=request.user,
                 with_projects=True,
-            ).values()
+            )
 
     return context
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index fa09aa2bc0..0dc3326350 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -2,11 +2,9 @@
 
 from __future__ import absolute_import
 
-import mock
-
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import (
-    Group, Project, Team, User, AccessGroup, GroupTagValue
+    Group, Team, User, AccessGroup, GroupTagValue
 )
 from sentry.testutils import TestCase
 
@@ -41,52 +39,40 @@ class SentryManagerTest(TestCase):
         self.assertEquals(res.times_seen, 1)
 
 
-class ProjectManagerTest(TestCase):
-    def setUp(self):
-        self.project = Project.objects.get()
-        self.project.update(public=True)
-        self.project2 = self.create_project(name='Test', slug='test', public=False)
-
-    @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
-    def test_does_not_include_public_projects(self):
-        self.user.is_superuser = False
-        project_list = Project.objects.get_for_user(self.user)
-        assert project_list == []
-
-        project_list = Project.objects.get_for_user(self.user, MEMBER_USER)
-        assert project_list == []
-
-    @mock.patch('sentry.models.Team.objects.get_for_user')
-    def test_does_not_include_private_projects(self, get_for_user):
-        self.user.is_superuser = False
-        get_for_user.return_value = {self.project2.team.id: self.project2.team}
-        project_list = Project.objects.get_for_user(self.user)
-        get_for_user.assert_called_once_with(self.user, None, access_groups=False)
-        assert project_list == [self.project2]
-
-        get_for_user.reset_mock()
-        project_list = Project.objects.get_for_user(self.user, MEMBER_USER)
-        get_for_user.assert_called_once_with(self.user, MEMBER_USER, access_groups=False)
-        assert project_list == [self.project2]
-
-
 class TeamManagerTest(TestCase):
     def test_simple(self):
         user = User.objects.create(username='foo')
         user2 = User.objects.create(username='bar')
         user3 = User.objects.create(username='baz')
-        team = self.create_team(name='Test', owner=user)
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org, name='Test')
         group = AccessGroup.objects.create(name='Test', type=MEMBER_USER, team=team)
         group.members.add(user2)
 
-        result = Team.objects.get_for_user(user, access=MEMBER_OWNER)
-        assert result == {team.slug: team}
-
-        result = Team.objects.get_for_user(user2, access=MEMBER_OWNER)
-        assert result == {}
-
-        result = Team.objects.get_for_user(user2, access=MEMBER_USER)
-        assert result == {team.slug: team}
-
-        result = Team.objects.get_for_user(user3, access=MEMBER_OWNER)
-        assert result == {}
+        result = Team.objects.get_for_user(
+            organization=org,
+            user=user,
+            access=MEMBER_OWNER,
+        )
+        assert result == [team]
+
+        result = Team.objects.get_for_user(
+            organization=org,
+            user=user2,
+            access=MEMBER_OWNER,
+        )
+        assert result == []
+
+        result = Team.objects.get_for_user(
+            organization=org,
+            user=user,
+            access=MEMBER_USER,
+        )
+        assert result == [team]
+
+        result = Team.objects.get_for_user(
+            organization=org,
+            user=user3,
+            access=MEMBER_OWNER,
+        )
+        assert result == []
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
index 2cfd6887ec..58e3992ca8 100644
--- a/tests/sentry/permissions/tests.py
+++ b/tests/sentry/permissions/tests.py
@@ -3,25 +3,11 @@
 from __future__ import absolute_import
 
 from django.contrib.auth.models import AnonymousUser
-from sentry.permissions import can_create_projects, can_set_public_projects
+from sentry.permissions import can_set_public_projects
 from sentry.models import User
 from sentry.testutils import TestCase
 
 
-class CanCreateProjectTest(TestCase):
-    def test_superuser_is_true(self):
-        user = User(id=100000, is_superuser=True)
-        self.assertTrue(can_create_projects(user))
-
-    def test_anonymous_is_false(self):
-        user = AnonymousUser()
-        self.assertFalse(can_create_projects(user))
-
-    def test_allow_creation_is_true(self):
-        user = User(id=100000)
-        self.assertTrue(can_create_projects(user))
-
-
 class CanSetProjectPublicTest(TestCase):
     def test_superuser_is_true(self):
         user = User(id=100000, is_superuser=True)
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 75b28d24d1..181f0baa59 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -9,7 +9,7 @@ from exam import before, fixture
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import (
-    Team, TeamMember, PendingTeamMember, AccessGroup, Project, User)
+    Team, TeamMember, PendingTeamMember, User)
 from sentry.testutils import TestCase
 
 
@@ -119,73 +119,6 @@ class RemoveTeamTest(BaseTeamTest):
         assert not Team.objects.filter(pk=self.team.pk).exists()
 
 
-class CreateTeamMemberTest(BaseTeamTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-new-team-member', args=[self.team.slug])
-
-    def test_does_load(self):
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/teams/members/new.html')
-
-    @mock.patch('sentry.web.frontend.create_team_member.can_add_team_member')
-    def test_missing_permission(self, can_add_team_member):
-        can_add_team_member.return_value = False
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 302)
-        can_add_team_member.assert_called_once_with(self.user, self.team)
-
-    def test_cannot_add_existing_member(self):
-        resp = self.client.post(self.path, {
-            'add-type': MEMBER_USER,
-            'add-user': self.team.owner.username,
-        })
-        self.assertEquals(resp.status_code, 200)
-        self.assertIn('user', resp.context['add_form'].errors)
-
-    def test_does_add_existing_user_as_member(self):
-        user = User.objects.create(username='newuser')
-        resp = self.client.post(self.path, {
-            'add-type': MEMBER_USER,
-            'add-user': user.username,
-        })
-        self.assertEquals(resp.status_code, 302, resp.context['add_form'].errors if resp.status_code != 302 else None)
-        member = self.team.member_set.get(user=user)
-        self.assertEquals(member.type, MEMBER_USER)
-
-    def test_cannot_invite_existing_member(self):
-        resp = self.client.post(self.path, {
-            'invite-type': MEMBER_USER,
-            'invite-email': self.team.owner.email,
-        })
-        self.assertEquals(resp.status_code, 200)
-        self.assertIn('email', resp.context['invite_form'].errors)
-
-    @mock.patch('sentry.models.PendingTeamMember.send_invite_email')
-    def test_does_invite_already_registered_user(self, send_invite_email):
-        user = User.objects.create(username='newuser', email='newuser@example.com')
-        resp = self.client.post(self.path, {
-            'invite-type': MEMBER_USER,
-            'invite-email': user.email,
-        })
-        self.assertEquals(resp.status_code, 302)
-        ptm = PendingTeamMember.objects.get(email=user.email, team=self.team)
-        self.assertEquals(ptm.type, MEMBER_USER)
-        send_invite_email.assert_called_once_with()
-
-    @mock.patch('sentry.models.PendingTeamMember.send_invite_email')
-    def test_does_invite_unregistered_user(self, send_invite_email):
-        resp = self.client.post(self.path, {
-            'invite-type': MEMBER_USER,
-            'invite-email': 'newuser@example.com',
-        })
-        self.assertEquals(resp.status_code, 302)
-        ptm = PendingTeamMember.objects.get(email='newuser@example.com', team=self.team)
-        self.assertEquals(ptm.type, MEMBER_USER)
-        send_invite_email.assert_called_once_with()
-
-
 class AcceptInviteTest(BaseTeamTest):
     def test_invalid_member_id(self):
         resp = self.client.get(reverse('sentry-accept-invite', args=[1, 2]))
@@ -241,104 +174,6 @@ class AcceptInviteTest(BaseTeamTest):
         self.assertEquals(resp.status_code, 200)
 
 
-class BaseAccessGroupTest(BaseTeamTest):
-    @before
-    def create_group(self):
-        self.group = AccessGroup.objects.create(team=self.team, name='Test')
-        self.group.members.add(self.user)
-        self.group.projects.add(self.project)
-
-
-class ManageAccessGroupsTest(BaseAccessGroupTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-access-groups', args=[self.team.slug])
-
-    def test_does_render_with_context(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/groups/list.html')
-        assert list(resp.context['group_list']) == [self.group]
-
-
-class AccessGroupDetailsTest(BaseAccessGroupTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-edit-access-group', args=[self.team.slug, self.group.id])
-
-    def test_does_render_with_context(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/groups/details.html')
-        assert 'form' in resp.context
-        assert resp.context['group'] == self.group
-
-
-class RemoveAccessGroupTest(BaseAccessGroupTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-remove-access-group', args=[self.team.slug, self.group.id])
-
-    def test_does_render_with_context(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/groups/remove.html')
-        assert 'form' in resp.context
-        assert resp.context['group'] == self.group
-
-    def test_does_delete(self):
-        resp = self.client.post(self.path, {})
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-manage-access-groups', args=[self.team.slug])
-        assert not AccessGroup.objects.filter(id=self.group.id).exists()
-
-
-class AccessGroupMembersTest(BaseAccessGroupTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-access-group-members', args=[self.team.slug, self.group.id])
-
-    def test_does_render_with_context(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/groups/members.html')
-        assert 'form' in resp.context
-        assert resp.context['group'] == self.group
-        assert list(resp.context['member_list']) == [self.user]
-
-    def test_does_add_member(self):
-        user = User.objects.create(username='bobross')
-        resp = self.client.post(self.path, {
-            'user': user.username
-        })
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + self.path
-        assert self.group.members.filter(id=user.id).exists()
-
-
-class AccessGroupProjectsTest(BaseAccessGroupTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-access-group-projects', args=[self.team.slug, self.group.id])
-
-    def test_does_render_with_context(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/groups/projects.html')
-        assert 'form' in resp.context
-        assert resp.context['group'] == self.group
-        assert list(resp.context['project_list']) == [self.project]
-
-    def test_does_add_member(self):
-        project = Project.objects.create(team=self.team, name='Sample')
-        resp = self.client.post(self.path, {
-            'project': project.id
-        })
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + self.path
-        assert self.group.projects.filter(id=project.id).exists()
-
-
 class ManageProjectsTest(BaseTeamTest):
     @fixture
     def path(self):
@@ -352,23 +187,3 @@ class ManageProjectsTest(BaseTeamTest):
         self.assertTemplateUsed(resp, 'sentry/teams/projects/index.html')
         assert list(resp.context['project_list']) == [project]
         assert resp.context['team'] == self.team
-
-
-class ManageMembersTest(BaseTeamTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-team-members', args=[self.team.slug])
-
-    def test_does_render_with_context(self):
-        pm = self.team.pending_member_set.create(email='foo@example.com')
-        tm = self.team.member_set.get()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/teams/members/index.html')
-        assert list(resp.context['member_list']) == [
-            (tm, tm.user),
-        ]
-        assert list(resp.context['pending_member_list']) == [
-            (pm, pm.email),
-        ]
-        assert resp.context['team'] == self.team
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index fbc8abccef..bc486c9e67 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -34,40 +34,43 @@ class GetLoginUrlTest(TestCase):
 
 
 class GroupIsPublicTest(TestCase):
-    @mock.patch('sentry.web.helpers.get_project_list', mock.Mock(return_value={}))
-    def test_non_public_group_returns_false(self):
+    @mock.patch('sentry.models.Project.objects.get_for_user')
+    def test_non_public_group_returns_false(self, get_project_list):
+        get_project_list.return_value = []
         self.group.is_public = False
         self.user.is_superuser = False
         result = group_is_public(self.group, self.user)
         assert result is False
 
-    @mock.patch('sentry.web.helpers.get_project_list')
+    @mock.patch('sentry.models.Project.objects.get_for_user')
     def test_public_group_returns_true_with_missing_project(self, get_project_list):
-        get_project_list.return_value = {}
+        get_project_list.return_value = []
         self.group.is_public = True
         self.user.is_superuser = False
         result = group_is_public(self.group, self.user)
         assert result is True
-        get_project_list.assert_called_once_with(self.user)
+        get_project_list.assert_called_once_with(team=self.group.project.team, user=self.user)
 
-    @mock.patch('sentry.web.helpers.get_project_list')
+    @mock.patch('sentry.models.Project.objects.get_for_user')
     def test_public_group_returns_false_with_project_membership(self, get_project_list):
-        get_project_list.return_value = {self.group.project.id: self.group.project}
+        get_project_list.return_value = [self.group.project]
         self.group.is_public = True
         self.user.is_superuser = False
         result = group_is_public(self.group, self.user)
         assert result is False
-        get_project_list.assert_called_once_with(self.user)
+        get_project_list.assert_called_once_with(team=self.group.project.team, user=self.user)
 
-    @mock.patch('sentry.web.helpers.get_project_list', mock.Mock(return_value={}))
-    def test_superuser_is_false_with_missing_project(self):
+    @mock.patch('sentry.models.Project.objects.get_for_user')
+    def test_superuser_is_false_with_missing_project(self, get_project_list):
+        get_project_list.return_value = []
         self.group.is_public = True
         self.user.is_superuser = True
         result = group_is_public(self.group, self.user)
         assert result is False
 
-    @mock.patch('sentry.web.helpers.get_project_list', mock.Mock(return_value={}))
-    def test_anonymous_user(self):
+    @mock.patch('sentry.models.Project.objects.get_for_user')
+    def test_anonymous_user(self, get_project_list):
+        get_project_list.return_value = []
         self.group.is_public = True
         result = group_is_public(self.group, AnonymousUser())
         assert result is True
