commit fb86b6597e02b0c88ecbf9d1d70703514896c64a
Author: Ben Vinegar <ben@benv.ca>
Date:   Tue Sep 29 14:40:37 2015 -0700

    Add text search to advanced filters

diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
new file mode 100644
index 0000000000..e5490abfc4
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -0,0 +1,38 @@
+import _ from "underscore";
+
+/**
+ * Converts a stream query to an object representation, with
+ * keys representing tag names, and the magic __text key
+ * representing the text component of the search.
+ *
+ * Example:
+ *
+ * "python is:unresolved assigned:foo@bar.com"
+ * => {
+ *      __text: "python",
+ *      is: "unresolved",
+ *      assigned: "foo@bar.com"
+ *    }
+ */
+
+export function queryToObj(queryStr) {
+	var text = [];
+
+	let queryItems = queryStr.match(/\S+:"[^"]*"?|\S+/g);
+	let queryObj = _.inject(queryItems, (obj, item) => {
+	  let index = item.indexOf(':');
+	  if (index === -1) {
+	  	text.push(item);
+	  } else {
+		  let tagKey = item.slice(0, index);
+		  let value = item.slice(index + 1).replace(/^"|"$/g, '');
+		  obj[tagKey] = value;
+	  }
+	  return obj;
+	}, {});
+
+	if (text.length)
+		queryObj.__text = text.join(' ');
+
+	return queryObj;
+}
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 1be7b208ce..f15003475d 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -3,7 +3,6 @@ import Reflux from "reflux";
 import $ from "jquery";
 import Cookies from "js-cookie";
 import Sticky from 'react-sticky';
-import _ from "underscore";
 import classNames from "classnames";
 
 import api from "../api";
@@ -20,6 +19,7 @@ import StreamTagStore from "../stores/streamTagStore";
 import StreamFilters from './stream/filters';
 import StreamSidebar from "./stream/sidebar";
 import utils from "../utils";
+import {queryToObj} from "../utils/stream";
 
 
 var Stream = React.createClass({
@@ -384,15 +384,7 @@ var Stream = React.createClass({
   render() {
     let router = this.context.router;
     let params = router.getCurrentParams();
-
-    let queryItems = this.state.query.match(/\S+:"[^"]*"?|\S+/g);
-    let queryObj = _.inject(queryItems, (obj, item) => {
-      let index = item.indexOf(':');
-      let tagKey = item.slice(0, index);
-      let value = item.slice(index + 1).replace(/^"|"$/g, '');
-      obj[tagKey] = value;
-      return obj;
-    }, {});
+    let queryObj = queryToObj(this.state.query);
 
     let classes = ['stream-row'];
 
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 97c9bc8897..7dd83c7a1a 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -28,23 +28,51 @@ var StreamSidebar = React.createClass({
   },
 
   getQueryStr() {
-    return _.map(this.state.currentQuery, (value, tagKey) => {
-      return `${tagKey}:"${value}"`;
-    }).join(' ');
+    let tags = _.omit(this.state.currentQuery, '__text');
+
+    return _.map(tags, (value, tagKey) => {
+        return `${tagKey}:"${value}"`;
+      })
+      .concat(this.state.currentQuery.__text)
+      .join(' ');
   },
 
   onSelectTag(tag, value) {
     this.setState({
       currentQuery: {...this.state.currentQuery, [tag.key]:value}
-    }, () => {
-      let query = this.getQueryStr();
-      this.props.onQueryChange && this.props.onQueryChange(query);
-    });
+    }, this.onQueryChange);
+  },
+
+  onTextChange: function (evt) {
+    let text = evt.target.value;
+
+    this.debouncedTextChange(text);
+  },
+
+  debouncedTextChange: _.debounce(function(text) {
+    this.setState({
+      currentQuery: {...this.state.currentQuery, __text:text}
+    }, this.onQueryChange);
+  }, 300),
+
+  onQueryChange() {
+    let query = this.getQueryStr();
+    this.props.onQueryChange && this.props.onQueryChange(query);
   },
 
   render() {
     return (
       <div className="stream-sidebar">
+        <div className="stream-tag-filter">
+          <h6 className="nav-header">Text</h6>
+          <input
+            className="form-control"
+            placeholder="Search title and culprit text body"
+            onChange={this.onTextChange}
+            defaultValue={this.props.initialQuery.__text}
+          />
+        </div>
+
         {_.map(this.props.tags, (tag) => {
           return (
             <StreamTagFilter
