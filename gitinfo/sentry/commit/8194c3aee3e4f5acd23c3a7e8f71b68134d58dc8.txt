commit 8194c3aee3e4f5acd23c3a7e8f71b68134d58dc8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Apr 20 13:37:31 2018 -0700

    feat: Add new org dashboard behind feature flag (#8120)

diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/index.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/index.jsx
index 61bfcd18b1..26fc379539 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/index.jsx
@@ -1,109 +1,33 @@
 import React from 'react';
 import createReactClass from 'create-react-class';
-import Reflux from 'reflux';
 
-import ApiMixin from '../../mixins/apiMixin';
-import {loadStats} from '../../actionCreators/projects';
-
-import GroupStore from '../../stores/groupStore';
-import ProjectsStore from '../../stores/projectsStore';
-import TeamStore from '../../stores/teamStore';
-
-import EventsPerHour from '../../components/events/eventsPerHour';
-import OrganizationHomeContainer from '../../components/organizations/homeContainer';
 import OrganizationState from '../../mixins/organizationState';
-import UnreleasedChanges from './unreleasedChanges';
-import Resources from './resources';
-import Activity from './activity';
-import ProjectList from './projectList';
-import ProjectListOld from './projectListOld';
-import NewIssues from './newIssues';
-import AssignedIssues from './assignedIssues';
+import OldDashboard from './oldDashboard';
+import ProjectNav from './projectNav';
+
+class Dashboard extends React.Component {
+  render() {
+    return (
+      <div>
+        <ProjectNav />
+        New dashboard placeholder
+      </div>
+    );
+  }
+}
 
 const OrganizationDashboard = createReactClass({
   displayName: 'OrganizationDashboard',
-  mixins: [
-    ApiMixin,
-    Reflux.listenTo(TeamStore, 'onTeamListChange'),
-    Reflux.listenTo(ProjectsStore, 'onProjectListChange'),
-    OrganizationState,
-  ],
-
-  getDefaultProps() {
-    return {
-      statsPeriod: '24h',
-      pageSize: 5,
-    };
-  },
-
-  getInitialState() {
-    return {
-      teams: TeamStore.getAll(),
-      projects: ProjectsStore.getAll(),
-    };
-  },
-
-  componentWillMount() {
-    loadStats(this.api, {
-      orgId: this.props.params.orgId,
-      query: {
-        since: new Date().getTime() / 1000 - 3600 * 24,
-        stat: 'generated',
-        group: 'project',
-      },
-    });
-  },
-
-  componentWillUnmount() {
-    GroupStore.reset();
-  },
-
-  onTeamListChange() {
-    this.setState({
-      teams: TeamStore.getAll(),
-    });
-  },
-
-  onProjectListChange() {
-    this.setState({
-      projects: ProjectsStore.getAll(),
-    });
-  },
+  mixins: [OrganizationState],
 
   render() {
-    let org = this.getOrganization();
-    let projects = org.projects;
-    let showResources = false;
-    if (projects.length == 1 && !projects[0].firstEvent) {
-      showResources = true;
-    }
-    let features = new Set(org.features);
+    const hasNewDashboardFeature = this.getFeatures().has('dashboard');
 
-    return (
-      <OrganizationHomeContainer>
-        <div className="row">
-          <div className="col-md-8">
-            {features.has('unreleased-changes') && <UnreleasedChanges {...this.props} />}
-            {showResources && <Resources org={org} project={projects[0]} />}
-            {!showResources && (
-              <div>
-                <AssignedIssues {...this.props} />
-                <NewIssues {...this.props} />
-                <Activity {...this.props} />
-              </div>
-            )}
-          </div>
-          <div className="col-md-4">
-            <EventsPerHour {...this.props} />
-            {features.has('new-teams') ? (
-              <ProjectList {...this.props} projects={this.state.projects} />
-            ) : (
-              <ProjectListOld {...this.props} projects={this.state.projects} />
-            )}
-          </div>
-        </div>
-      </OrganizationHomeContainer>
-    );
+    if (hasNewDashboardFeature) {
+      return <Dashboard {...this.props} />;
+    } else {
+      return <OldDashboard {...this.props} />;
+    }
   },
 });
 
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/oldDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/oldDashboard.jsx
new file mode 100644
index 0000000000..61bfcd18b1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/oldDashboard.jsx
@@ -0,0 +1,110 @@
+import React from 'react';
+import createReactClass from 'create-react-class';
+import Reflux from 'reflux';
+
+import ApiMixin from '../../mixins/apiMixin';
+import {loadStats} from '../../actionCreators/projects';
+
+import GroupStore from '../../stores/groupStore';
+import ProjectsStore from '../../stores/projectsStore';
+import TeamStore from '../../stores/teamStore';
+
+import EventsPerHour from '../../components/events/eventsPerHour';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationState from '../../mixins/organizationState';
+import UnreleasedChanges from './unreleasedChanges';
+import Resources from './resources';
+import Activity from './activity';
+import ProjectList from './projectList';
+import ProjectListOld from './projectListOld';
+import NewIssues from './newIssues';
+import AssignedIssues from './assignedIssues';
+
+const OrganizationDashboard = createReactClass({
+  displayName: 'OrganizationDashboard',
+  mixins: [
+    ApiMixin,
+    Reflux.listenTo(TeamStore, 'onTeamListChange'),
+    Reflux.listenTo(ProjectsStore, 'onProjectListChange'),
+    OrganizationState,
+  ],
+
+  getDefaultProps() {
+    return {
+      statsPeriod: '24h',
+      pageSize: 5,
+    };
+  },
+
+  getInitialState() {
+    return {
+      teams: TeamStore.getAll(),
+      projects: ProjectsStore.getAll(),
+    };
+  },
+
+  componentWillMount() {
+    loadStats(this.api, {
+      orgId: this.props.params.orgId,
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 24,
+        stat: 'generated',
+        group: 'project',
+      },
+    });
+  },
+
+  componentWillUnmount() {
+    GroupStore.reset();
+  },
+
+  onTeamListChange() {
+    this.setState({
+      teams: TeamStore.getAll(),
+    });
+  },
+
+  onProjectListChange() {
+    this.setState({
+      projects: ProjectsStore.getAll(),
+    });
+  },
+
+  render() {
+    let org = this.getOrganization();
+    let projects = org.projects;
+    let showResources = false;
+    if (projects.length == 1 && !projects[0].firstEvent) {
+      showResources = true;
+    }
+    let features = new Set(org.features);
+
+    return (
+      <OrganizationHomeContainer>
+        <div className="row">
+          <div className="col-md-8">
+            {features.has('unreleased-changes') && <UnreleasedChanges {...this.props} />}
+            {showResources && <Resources org={org} project={projects[0]} />}
+            {!showResources && (
+              <div>
+                <AssignedIssues {...this.props} />
+                <NewIssues {...this.props} />
+                <Activity {...this.props} />
+              </div>
+            )}
+          </div>
+          <div className="col-md-4">
+            <EventsPerHour {...this.props} />
+            {features.has('new-teams') ? (
+              <ProjectList {...this.props} projects={this.state.projects} />
+            ) : (
+              <ProjectListOld {...this.props} projects={this.state.projects} />
+            )}
+          </div>
+        </div>
+      </OrganizationHomeContainer>
+    );
+  },
+});
+
+export default OrganizationDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/projectNav.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/projectNav.jsx
new file mode 100644
index 0000000000..fa0f4e5f29
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/projectNav.jsx
@@ -0,0 +1,122 @@
+import React from 'react';
+import createReactClass from 'create-react-class';
+import {Flex, Box} from 'grid-emotion';
+import styled from 'react-emotion';
+
+import space from '../../styles/space';
+
+import OrganizationState from '../../mixins/organizationState';
+
+import DropdownLink from '../../components/dropdownLink';
+import MenuItem from '../../components/menuItem';
+import {t} from '../../locale';
+import Button from '../../components/buttons/button';
+import Tooltip from '../../components/tooltip';
+
+const ProjectNav = createReactClass({
+  mixins: [OrganizationState],
+
+  render() {
+    const org = this.getOrganization();
+    const access = this.getAccess();
+    const hasProjectWrite = access.has('project:write');
+    const hasTeamWrite = access.has('team:write');
+
+    const menuItems = [
+      {
+        title: t('Project'),
+        to: `/organizations/${org.slug}/projects/new/`,
+        disabled: !hasProjectWrite,
+        tooltip: t('You do not have permission to create new projects'),
+      },
+      {
+        title: t('Team'),
+        to: `/organizations/${org.slug}/teams/new/`,
+        disabled: !hasTeamWrite,
+        tooltip: t('You do not have permission to create new teams'),
+      },
+      {
+        title: t('Teammate'),
+        to: `settings/${org.slug}/members/new/`,
+        disabled: !hasTeamWrite,
+        tooltip: t('You do not have permission to manage teams'),
+      },
+    ];
+
+    const menuContent = menuItems.reduce((acc, item, idx) => {
+      if (idx > 0) {
+        acc.push(<MenuItem key={idx} divider />);
+      }
+      if (item.disabled) {
+        acc.push(
+          <li role="presentation" key={item.title} disabled>
+            <Tooltip title={item.tooltip}>
+              <span>{item.title}</span>
+            </Tooltip>
+          </li>
+        );
+      } else {
+        acc.push(
+          <MenuItem
+            title={item.title}
+            to={item.to}
+            key={item.title}
+            disabled={item.disabled}
+          >
+            {item.title}
+          </MenuItem>
+        );
+      }
+
+      return acc;
+    }, []);
+
+    const title = (
+      <Button size="small">
+        <span>{t('Add new')}</span>
+        <span className="icon-arrow-down" />
+      </Button>
+    );
+
+    return (
+      <StyledNav justify="space-between" p={2} align="center">
+        <Box>
+          <strong>{t('Projects')}</strong>
+        </Box>
+        <StyledDropdown>
+          <DropdownLink title={title} anchorRight={true} caret={false}>
+            {menuContent}
+          </DropdownLink>
+        </StyledDropdown>
+      </StyledNav>
+    );
+  },
+});
+
+const StyledNav = styled(Flex)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  box-shadow: ${p => p.theme.dropShadowLight};
+`;
+
+const StyledDropdown = styled.div`
+  .dropdown-menu:after,
+  .dropdown-menu:before {
+    display: none;
+  }
+  .icon-arrow-down {
+    top: 1px;
+    font-size: 12px !important;
+    color: ${p => p.theme.gray1};
+    margin-left: ${space(0.5)};
+  }
+  li[role='presentation'] a:hover {
+    color: white;
+    background-color: ${p => p.theme.purpleDark};
+  }
+  li[disabled] {
+    color ${p => p.theme.gray1};
+    padding: 3px 10px;
+  }
+`;
+
+export default ProjectNav;
