commit 8c5ad0250ac25575f37ea4d1ba396e9a07ba01ea
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Mar 29 00:09:40 2016 +0200

    Back out callsign column.
    
    This does not include the migration that actually drops the column.

diff --git a/src/sentry/api/endpoints/organization_shortids.py b/src/sentry/api/endpoints/organization_shortids.py
deleted file mode 100644
index 9a97b7ef49..0000000000
--- a/src/sentry/api/endpoints/organization_shortids.py
+++ /dev/null
@@ -1,74 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework.response import Response
-
-from django.db import transaction
-
-from sentry.api.bases.organization import OrganizationEndpoint
-from sentry.models import Project
-from sentry.utils.strings import validate_callsign
-
-
-class ShortIdsUpdateEndpoint(OrganizationEndpoint):
-
-    def put(self, request, organization):
-        """
-        Update Short IDs
-        ````````````````
-
-        Updates the call signs of projects within the organization.
-
-        :pparam string organization_slug: the slug of the organization the
-                                          short ID should be looked up in.
-        :param callsigns: a dictionary of project IDs to their intended
-                          callsigns.
-        :auth: required
-        """
-        callsigns = request.DATA.get('callsigns', {})
-        for project_id, callsign in callsigns.iteritems():
-            callsign = validate_callsign(callsign)
-            if callsign is None:
-                return Response({'detail': 'invalid callsign "%s"' % callsign},
-                                status=400)
-            callsigns[project_id] = callsign
-
-        if len(callsigns) != len(set(callsigns.values())):
-            return Response({'detail': 'Duplicate callsigns'}, status=400)
-
-        project_q = organization.project_set.filter(
-            pk__in=[int(x) for x in callsigns]
-        )
-
-        rv = {}
-
-        with transaction.atomic():
-            projects = {}
-
-            # Clear out all call-signs first so that we can move them
-            # around through the uniqueness
-            for project in project_q:
-                projects[str(project.id)] = project
-                project.callsign = None
-                project.save()
-
-            # Set new ones
-            for project_id, callsign in callsigns.iteritems():
-                project = projects.get(project_id)
-                if project is None:
-                    continue
-                other = Project.objects.filter(
-                    callsign=callsign,
-                    organization=organization
-                ).exclude(id=project.id).first()
-                if other is not None:
-                    if len(callsigns) != len(callsigns.values()):
-                        return Response({'detail': 'Duplicate callsign %s'
-                                         % callsign}, status=400)
-                project.callsign = callsign
-                project.update_option('sentry:reviewed-callsign', True)
-                project.save()
-                rv[project_id] = callsign
-
-        return Response({
-            'updated_short_ids': rv
-        })
diff --git a/src/sentry/api/endpoints/organization_slugs.py b/src/sentry/api/endpoints/organization_slugs.py
new file mode 100644
index 0000000000..cbf385a311
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_slugs.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from django.db import transaction
+
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.models import Project
+from django.core.validators import validate_slug, ValidationError
+
+
+class SlugsUpdateEndpoint(OrganizationEndpoint):
+
+    def put(self, request, organization):
+        """
+        Update Project Slugs
+        ````````````````````
+
+        Updates the slugs of projects within the organization.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          short ID should be looked up in.
+        :param slugs: a dictionary of project IDs to their intended slugs.
+        :auth: required
+        """
+        slugs = request.DATA.get('slugs', {})
+        for project_id, slug in slugs.iteritems():
+            slug = slug.lower()
+            try:
+                validate_slug(slug)
+            except ValidationError:
+                return Response({'detail': 'invalid slug "%s"' % slug},
+                                status=400)
+            slugs[project_id] = slug
+
+        if len(slugs) != len(set(slugs.values())):
+            return Response({'detail': 'Duplicate slugs'}, status=400)
+
+        project_q = organization.project_set.filter(
+            pk__in=[int(x) for x in slugs]
+        )
+
+        rv = {}
+
+        with transaction.atomic():
+            projects = {}
+
+            # Clear out all slugs first so that we can move them
+            # around through the uniqueness
+            for project in project_q:
+                projects[str(project.id)] = project
+                project.slug = None
+                project.save()
+
+            # Set new ones
+            for project_id, slug in slugs.iteritems():
+                project = projects.get(project_id)
+                if project is None:
+                    continue
+                other = Project.objects.filter(
+                    slug=slug,
+                    organization=organization
+                ).exclude(id=project.id).first()
+                if other is not None:
+                    if len(slugs) != len(slugs.values()):
+                        return Response({'detail': 'Duplicate slug %s'
+                                         % slug}, status=400)
+                project.slug = slug
+                project.update_option('sentry:reviewed-slug', True)
+                project.save()
+                rv[project_id] = slug
+
+        return Response({
+            'updated_slugs': rv
+        })
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 74d435eaf9..4706dc5d7d 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -8,7 +8,6 @@ from sentry.api.bases.team import TeamEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Project, AuditLogEntryEvent
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.utils.strings import validate_callsign, iter_callsign_choices
 
 
 @scenario('ListTeamProjects')
@@ -35,14 +34,6 @@ def create_project_scenario(runner):
 class ProjectSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=True)
     slug = serializers.CharField(max_length=200, required=False)
-    callsign = serializers.CharField(max_length=6, required=False)
-
-    def validate(self, data):
-        callsign = data.get('callsign')
-        if callsign and validate_callsign(callsign) is None:
-            raise serializers.ValidationError(
-                'Callsign must be between 2 and 6 characters long.')
-        return data
 
 
 class TeamProjectIndexEndpoint(TeamEndpoint):
@@ -84,7 +75,6 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
         :param string name: the name for the new project.
         :param string slug: optionally a slug for the new project.  If it's
                             not provided a slug is generated from the name.
-        :param string callsign: optionally a callsign for the new project.
         :auth: required
         """
         serializer = ProjectSerializer(data=request.DATA)
@@ -92,22 +82,9 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
         if serializer.is_valid():
             result = serializer.object
 
-            callsign = result.get('callsign')
-            if not callsign:
-                it = iter_callsign_choices(result['name'])
-                for callsign in it:
-                    try:
-                        Project.objects.get(
-                            organization=team.organization,
-                            callsign=callsign
-                        )
-                    except Project.DoesNotExist:
-                        break
-
             project = Project.objects.create(
                 name=result['name'],
                 slug=result.get('slug'),
-                callsign=callsign,
                 organization=team.organization,
                 team=team
             )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 7a55eb8127..e6eb397359 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -25,7 +25,7 @@ from .endpoints.organization_access_request_details import OrganizationAccessReq
 from .endpoints.organization_activity import OrganizationActivityEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
-from .endpoints.organization_shortids import ShortIdsUpdateEndpoint
+from .endpoints.organization_slugs import SlugsUpdateEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
@@ -112,8 +112,8 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/shortids/(?P<short_id>[^\/]+)/$',
         ShortIdLookupEndpoint.as_view(),
         name='sentry-api-0-short-id-lookup'),
-    url(r'^organizations/(?P<organization_slug>[^\/]+)/shortids/$',
-        ShortIdsUpdateEndpoint.as_view(),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/slugs/$',
+        SlugsUpdateEndpoint.as_view(),
         name='sentry-api-0-short-ids-update'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/access-requests/(?P<request_id>\d+)/$',
         OrganizationAccessRequestDetailsEndpoint.as_view(),
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 7ec27221b4..d4949df7f3 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -35,7 +35,7 @@ from sentry.utils.strings import truncatechars, strip
 from sentry.utils.numbers import base32_encode, base32_decode
 
 
-_short_id_re = re.compile(r'^(.*?)(?:[\s_-])([A-Za-z0-9]+)$')
+_short_id_re = re.compile(r'^(.*?)(?:[\s_-])([A-Za-z0-9-._]+)$')
 
 
 def looks_like_short_id(value):
@@ -60,7 +60,7 @@ class GroupManager(BaseManager):
         if match is None:
             raise Group.DoesNotExist()
         callsign, id = match.groups()
-        callsign = callsign.upper()
+        callsign = callsign.lower()
         try:
             short_id = base32_decode(id)
             # We need to make sure the short id is not overflowing the
@@ -72,7 +72,7 @@ class GroupManager(BaseManager):
             raise Group.DoesNotExist()
         return Group.objects.get(
             project__organization=org,
-            project__callsign=callsign.upper(),
+            project__slug=callsign,
             short_id=short_id,
         )
 
@@ -197,10 +197,9 @@ class Group(Model):
 
     @property
     def qualified_short_id(self):
-        if self.project.callsign is not None and \
-           self.short_id is not None:
+        if self.short_id is not None:
             return '%s-%s' % (
-                self.project.callsign,
+                self.project.slug.upper(),
                 base32_encode(self.short_id),
             )
 
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 3b55d52a2a..e1a7e4b809 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -75,7 +75,6 @@ class Project(Model):
     """
     slug = models.SlugField(null=True)
     name = models.CharField(max_length=200)
-    callsign = models.CharField(max_length=40, null=True)
     forced_color = models.CharField(max_length=6, null=True)
     organization = FlexibleForeignKey('sentry.Organization')
     team = FlexibleForeignKey('sentry.Team')
@@ -98,8 +97,7 @@ class Project(Model):
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_project'
-        unique_together = (('team', 'slug'), ('organization', 'slug'),
-                           ('organization', 'callsign'))
+        unique_together = (('team', 'slug'), ('organization', 'slug'))
 
     __repr__ = sane_repr('team_id', 'slug')
 
@@ -198,6 +196,10 @@ class Project(Model):
 
         return ProjectOption.objects.unset_value(self, *args, **kwargs)
 
+    @property
+    def callsign(self):
+        return self.slug.upper()
+
     @property
     def color(self):
         if self.forced_color is not None:
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
index eae2a22958..edc1b2ae8d 100644
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
@@ -59,7 +59,7 @@ const SetCallsignsAction = React.createClass({
     return {
       isLoading: true,
       info: {},
-      callsigns: {}
+      slugs: {}
     };
   },
 
@@ -73,17 +73,17 @@ const SetCallsignsAction = React.createClass({
     });
 
     let orgId = this.getOrganization().slug;
-    this.api.request(`/organizations/${orgId}/shortids/`, {
+    this.api.request(`/organizations/${orgId}/slugs/`, {
       method: 'PUT',
-      data: {callsigns: this.state.callsigns},
+      data: {slugs: this.state.slugs},
       success: (data) => {
         this.context.history.pushState('refresh', `/${orgId}/`);
       },
       error: (error) => {
         /*eslint no-console:0*/
-        console.log('Failed to set callsigns:', error);
+        console.log('Failed to set slugs:', error);
         /*eslint no-alert:0*/
-        alert(t('Failed to set callsigns'));
+        alert(t('Failed to set slugs'));
       },
       complete: () => {
         this.setState({
@@ -95,7 +95,7 @@ const SetCallsignsAction = React.createClass({
 
   onSetShortName(projectId, event) {
     this.setState({
-      callsigns: update(this.state.callsigns, {
+      slugs: update(this.state.slugs, {
         [projectId]: {$set: event.target.value.toUpperCase().trim()}
       }),
     });
@@ -103,14 +103,14 @@ const SetCallsignsAction = React.createClass({
 
   fetchData() {
     let info = getProjectInfoForReview(this.getOrganization());
-    let callsigns = {};
+    let slugs = {};
     info.memberProjects.forEach((project) => {
-      callsigns[project.projectId] = project.callSign;
+      slugs[project.projectId] = project.callSign;
     });
 
     this.setState({
       info: info,
-      callsigns: callsigns,
+      slugs: slugs,
       isLoading: false,
     });
   },
@@ -122,8 +122,8 @@ const SetCallsignsAction = React.createClass({
       return false;
     }
 
-    for (let key in this.state.callsigns) {
-      if (this.state.callsigns[key] === callsign) {
+    for (let key in this.state.slugs) {
+      if (this.state.slugs[key] === callsign) {
         found++;
       }
     }
@@ -153,7 +153,7 @@ const SetCallsignsAction = React.createClass({
           {info.memberProjects.map((project) => {
             let inputId = 'input-' + project.projectId;
             let className = 'form-group short-id-form-group';
-            let callsign = this.state.callsigns[project.projectId] || '';
+            let callsign = this.state.slugs[project.projectId] || '';
             if (!project.requiresReview) {
               className += ' reviewed';
             }
diff --git a/src/sentry/templates/sentry/create-project.html b/src/sentry/templates/sentry/create-project.html
index e33ae841bd..fd2640e05d 100644
--- a/src/sentry/templates/sentry/create-project.html
+++ b/src/sentry/templates/sentry/create-project.html
@@ -23,9 +23,6 @@
     {{ form|as_crispy_errors }}
 
     {{ form.name|as_crispy_field }}
-    {% feature organizations:callsigns organization %}
-      {{ form.callsign|as_crispy_field }}
-    {% endfeature %}
     {% if form.team %}
       {{ form.team|as_crispy_field }}
     {% endif %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index a9f11f2e62..7d4e52fbd9 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -39,9 +39,6 @@
       <div class="box-content with-padding">
         {{ form.name|as_crispy_field }}
         {{ form.slug|as_crispy_field }}
-        {% feature organizations:callsigns project.organization %}
-          {{ form.callsign|as_crispy_field }}
-        {% endfeature %}
         {{ form.team|as_crispy_field }}
       </div>
     </div>
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 8795c6a45d..b9f760af2b 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -290,16 +290,13 @@ class MockUtils(object):
             },
         )[0]
 
-    def create_project(self, name, team, org, callsign=None):
+    def create_project(self, name, team, org):
         from sentry.models import Project
-        if callsign is None:
-            callsign = name.upper()[:2]
         return Project.objects.get_or_create(
             team=team,
             name=name,
             defaults={
                 'organization': org,
-                'callsign': callsign,
             }
         )[0]
 
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index 865acba9a8..4ab273cdd1 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -6,7 +6,6 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, Project
 from sentry.signals import project_created
 from sentry.utils.samples import create_sample_event
-from sentry.utils.strings import iter_callsign_choices, validate_callsign
 
 
 BLANK_CHOICE = [("", "")]
@@ -19,50 +18,15 @@ class AddProjectForm(forms.ModelForm):
         }),
         help_text=_('Using the repository name generally works well.'),
     )
-    callsign = forms.CharField(label=_('Callsign'),
-        widget=forms.TextInput(attrs={
-            'placeholder': _('2-6 letter prefix.  Leave empty '
-                             'for auto assignment.'),
-        }),
-        help_text=_('This is added as prefix for issue IDs.'),
-        required=False
-    )
 
     class Meta:
-        fields = ('name', 'callsign')
+        fields = ('name',)
         model = Project
 
     def __init__(self, organization, *args, **kwargs):
         forms.ModelForm.__init__(self, *args, **kwargs)
         self.organization = organization
 
-    def clean_callsign(self):
-        callsign = self.cleaned_data.get('callsign')
-        if not callsign:
-            it = iter_callsign_choices(self.cleaned_data.get('name') or '')
-            for potential_callsign in it:
-                try:
-                    Project.objects.get(
-                        organization=self.organization,
-                        callsign=potential_callsign
-                    )
-                except Project.DoesNotExist:
-                    return potential_callsign
-
-        callsign = validate_callsign(callsign)
-        if callsign is None:
-            raise forms.ValidationError(_('Callsign must be between 2 '
-                                          'and 6 letters'))
-        try:
-            other = Project.objects.get(
-                organization=self.organization,
-                callsign=callsign
-            )
-        except Project.DoesNotExist:
-            return callsign
-        raise forms.ValidationError(_('Another project (%s) is already '
-                                      'using that callsign') % other.name)
-
     def save(self, actor, team, ip_address):
         project = super(AddProjectForm, self).save(commit=False)
         project.team = team
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index 6593f3ee97..c08fe247a2 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -20,7 +20,7 @@ class AddProjectWithTeamForm(AddProjectForm):
     )
 
     class Meta:
-        fields = ('name', 'callsign', 'team')
+        fields = ('name', 'team')
         model = Project
 
     def __init__(self, user, organization, team_list, *args, **kwargs):
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index e58deaae5f..3b6fe3409a 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -8,7 +8,6 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 from uuid import uuid1
 
-from sentry import features
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, Project, Team
 )
@@ -16,7 +15,6 @@ from sentry.web.forms.fields import (
     CustomTypedChoiceField, RangeField, OriginsField, IPNetworksField,
 )
 from sentry.web.frontend.base import ProjectView
-from sentry.utils.strings import validate_callsign
 
 
 BLANK_CHOICE = [("", "")]
@@ -29,8 +27,6 @@ class EditProjectForm(forms.ModelForm):
         label=_('Short name'),
         help_text=_('A unique ID used to identify this project.'),
     )
-    callsign = forms.CharField(label=_('Callsign'),
-        help_text=_('A short (typically two) letter sequence to identify issues.'))
     team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
@@ -76,7 +72,7 @@ class EditProjectForm(forms.ModelForm):
     org_overrides = ('scrub_data', 'scrub_defaults', 'scrub_ip_address')
 
     class Meta:
-        fields = ('name', 'team', 'slug', 'callsign')
+        fields = ('name', 'team', 'slug')
         model = Project
 
     def __init__(self, request, organization, team_list, data, instance, *args, **kwargs):
@@ -98,9 +94,6 @@ class EditProjectForm(forms.ModelForm):
         self.fields['team'].choices = self.get_team_choices(team_list, instance.team)
         self.fields['team'].widget.choices = self.fields['team'].choices
 
-        if not features.has('organizations:callsigns', organization, actor=request.user):
-            del self.fields['callsign']
-
         # After the Form is initialized, we now need to disable the fields that have been
         # overridden from Organization options.
         for opt in disabled:
@@ -156,34 +149,14 @@ class EditProjectForm(forms.ModelForm):
         slug = self.cleaned_data.get('slug')
         if not slug:
             return
-        exists_qs = Project.objects.filter(
-            slug=slug,
-            organization=self.organization
-        ).exclude(id=self.instance.id)
-        if exists_qs.exists():
-            raise forms.ValidationError('Another project is already using that slug')
-        return slug
-
-    def clean_callsign(self):
-        # If no callsign was provided we go with the old one.  This
-        # primarily exists so that people without the callsign feature
-        # enabled will not screw up their callsigns.
-        callsign = self.cleaned_data.get('callsign')
-        if not callsign:
-            return self.instance.callsign
-
-        callsign = validate_callsign(callsign)
-        if callsign is None:
-            raise forms.ValidationError(_('Callsign must be between 2 '
-                                          'and 6 letters'))
         other = Project.objects.filter(
-            callsign=callsign,
+            slug=slug,
             organization=self.organization
         ).exclude(id=self.instance.id).first()
         if other is not None:
-            raise forms.ValidationError(_('Another project (%s) is already '
-                                          'using that callsign') % other.name)
-        return callsign
+            raise forms.ValidationError('Another project (%s) is already '
+                                        'using that slug' % other.name)
+        return slug
 
 
 class ProjectSettingsView(ProjectView):
diff --git a/tests/sentry/web/frontend/test_project_settings.py b/tests/sentry/web/frontend/test_project_settings.py
index db0d72cc16..0cc0be3698 100644
--- a/tests/sentry/web/frontend/test_project_settings.py
+++ b/tests/sentry/web/frontend/test_project_settings.py
@@ -79,7 +79,6 @@ class ProjectSettingsTest(TestCase):
             'name': 'bar',
             'slug': self.project.slug,
             'team': self.team.id,
-            'callsign': self.project.callsign,
             'scrub_data': '1',
             'token': 'foobar',
         })
