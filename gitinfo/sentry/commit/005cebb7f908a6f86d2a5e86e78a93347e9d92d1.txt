commit 005cebb7f908a6f86d2a5e86e78a93347e9d92d1
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Oct 3 11:25:12 2018 -0700

    feat(integrations): Add get default field value base functionality. (#9838)
    
    * added base get default project/repo.
    
    * added default field to link issue
    
    * Fixed comment formatting
    
    * Added code to keep from affecting jira/
    
    * moved store_last_issue_defaults out of try block.
    
    * Removed Jira change.
    
    * removed merge_issue_condig_defaults
    
    * fixed tests

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 78246e4149..ac9c6a4cca 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -120,6 +120,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         else:
             external_issue.update(**defaults)
 
+        installation.store_issue_last_defaults(group.project_id, request.DATA)
         try:
             installation.after_link_issue(external_issue, data=request.DATA)
         except IntegrationFormError as exc:
@@ -209,6 +210,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
                 user=request.user,
                 sender=self.__class__,
             )
+        installation.store_issue_last_defaults(group.project_id, request.DATA)
 
         # TODO(jess): return serialized issue
         url = data.get('url') or installation.get_issue_url(external_issue.key)
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index f0be996ff7..64049a5104 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -119,16 +119,18 @@ class IntegrationIssueConfigSerializer(IntegrationSerializer):
         installation = obj.get_installation(organization_id)
 
         if self.action == 'link':
-            data['linkIssueConfig'] = installation.get_link_issue_config(
+            config = installation.get_link_issue_config(
                 self.group,
                 params=self.params,
             )
+            data['linkIssueConfig'] = config
 
         if self.action == 'create':
-            data['createIssueConfig'] = installation.get_create_issue_config(
+            config = installation.get_create_issue_config(
                 self.group,
                 params=self.params,
             )
+            data['createIssueConfig'] = config
 
         return data
 
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 0c9dec2812..56ec0bf8ca 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -68,6 +68,35 @@ class ExampleIntegration(IntegrationInstallation, IssueSyncMixin):
         quoted_comment = '%s<blockquote>%s</blockquote>' % (attribution, comment)
         return quoted_comment
 
+    def get_persisted_default_config_fields(self):
+        return ['project']
+
+    def get_create_issue_config(self, group, **kwargs):
+        fields = super(ExampleIntegration, self).get_create_issue_config(group, **kwargs)
+        default = self.get_project_defaults(group.project_id)
+        example_project_field = self.generate_example_project_field(default)
+        return fields + [example_project_field]
+
+    def generate_example_project_field(self, default_fields):
+        project_field = {
+            'name': 'project',
+            'label': 'Project',
+            'choices': [('1', 'Project 1'), ('2', 'Project 2')],
+            'type': 'select',
+        }
+
+        default_project = default_fields.get('project')
+        if default_project is not None:
+            project_field['default'] = default_project
+
+        return project_field
+
+    def get_link_issue_config(self, group, **kwargs):
+        fields = super(ExampleIntegration, self).get_link_issue_config(group, **kwargs)
+        default = self.get_project_defaults(group.project_id)
+        example_project_field = self.generate_example_project_field(default)
+        return fields + [example_project_field]
+
     def create_issue(self, data, **kwargs):
         if 'assignee' not in data:
             raise IntegrationError('Assignee is required')
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 06ea5b8b75..bec112993a 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -96,6 +96,44 @@ class IssueBasicMixin(object):
             }
         ]
 
+    def get_persisted_default_config_fields(self):
+        """
+        Returns a list of field names that should have their last used values
+        persisted on a per-project basis.
+        """
+        return []
+
+    def store_issue_last_defaults(self, project_id, data):
+        """
+        Stores the last used field defaults on a per-project basis. This
+        accepts a dict of values that will be filtered to keys returned by
+        ``get_persisted_default_config_fields`` which will automatically be
+        merged into the associated field config object as the default.
+
+        >>> integ.store_issue_last_defaults(1, {'externalProject': 2})
+
+        When the integration is serialized these values will automatically be
+        merged into the field configuration objects.
+
+        NOTE: These are currently stored for both link and create issue, no
+              differentiation is made between the two field configs.
+        """
+        persisted_fields = self.get_persisted_default_config_fields()
+        if not persisted_fields:
+            return
+
+        defaults = {k: v for k, v in six.iteritems(data) if k in persisted_fields}
+
+        self.org_integration.config.update({
+            'project_issue_defaults': {project_id: defaults},
+        })
+        self.org_integration.save()
+
+    def get_project_defaults(self, project_id):
+        return self.org_integration.config \
+            .get('project_issue_defaults', {}) \
+            .get(six.text_type(project_id), {})
+
     def create_issue(self, data, **kwargs):
         """
         Create an issue via the provider's API and return the issue key,
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 011c715975..c8d4d0336a 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -39,12 +39,20 @@ class GroupIntegrationDetailsTest(APITestCase):
                     'features': [f.value for f in provider.features],
                     'aspects': provider.metadata.aspects,
                 },
-                'linkIssueConfig': [{
-                    'default': '',
-                    'type': 'string',
-                    'name': 'externalIssue',
-                    'label': 'Issue',
-                }]
+                'linkIssueConfig': [
+                    {
+                        'default': '',
+                        'type': 'string',
+                        'name': 'externalIssue',
+                        'label': 'Issue',
+                    },
+                    {
+                        'choices': [('1', 'Project 1'), ('2', 'Project 2')],
+                        'label': 'Project',
+                        'name': 'project',
+                        'type': 'select'
+                    }
+                ]
             }
 
     def test_simple_get_create(self):
@@ -97,6 +105,12 @@ class GroupIntegrationDetailsTest(APITestCase):
                         'label': 'Description',
                         'autosize': True,
                         'maxRows': 10,
+                    },
+                    {
+                        'choices': [('1', 'Project 1'), ('2', 'Project 2')],
+                        'type': 'select',
+                        'name': 'project',
+                        'label': 'Project',
                     }
                 ]
             }
@@ -283,3 +297,49 @@ class GroupIntegrationDetailsTest(APITestCase):
         response = self.client.delete(path)
         assert response.status_code == 400
         assert response.data['detail'] == 'Your organization does not have access to this feature.'
+
+    def test_default_project(self):
+        def assert_default_project(path, action, expected_project_field):
+            response = self.client.get(path)
+            assert response.status_code == 200
+            if action == 'create':
+                fields = response.data['createIssueConfig']
+            else:
+                fields = response.data['linkIssueConfig']
+            assert response.data['id'] == six.text_type(integration.id)
+            for field in fields:
+                if field['name'] == 'project':
+                    project_field = field
+                    break
+
+            assert project_field == expected_project_field
+
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        self.create_event(group=group)
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        org_integration = integration.add_organization(org, self.user)
+        org_integration.config = {
+            'project_issue_defaults': {
+                group.project_id: {'project': '2'}
+            }
+        }
+        org_integration.save()
+        create_path = u'/api/0/issues/{}/integrations/{}/?action=create'.format(
+            group.id, integration.id)
+        link_path = u'/api/0/issues/{}/integrations/{}/?action=link'.format(
+            group.id, integration.id)
+        project_field = {
+            'name': 'project',
+            'label': 'Project',
+            'choices': [('1', 'Project 1'), ('2', 'Project 2')],
+            'type': 'select',
+            'default': '2',
+        }
+        with self.feature('organizations:integrations-issue-basic'):
+            assert_default_project(create_path, 'create', project_field)
+            assert_default_project(link_path, 'link', project_field)
