commit ccaaa5b17e8b91ae8b5f4dfda7ee9c0e5b00a3c0
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Wed Mar 18 10:56:52 2020 -0700

    ref(SentryApps): Update Sentry App Serializer to include features (#17731)
    
    Objective
    Currently, the integration features for a Sentry App are loaded from a separate endpoint. We want to load the integration features of a sentry app anytime we try to serialize it. We will not fetch the objects for internal integrations.

diff --git a/src/sentry/api/serializers/models/sentry_app.py b/src/sentry/api/serializers/models/sentry_app.py
index 6cf751b0d2..0c16405a67 100644
--- a/src/sentry/api/serializers/models/sentry_app.py
+++ b/src/sentry/api/serializers/models/sentry_app.py
@@ -6,6 +6,9 @@ from sentry.api.serializers import Serializer, register
 from sentry.models import SentryApp
 from sentry.models.sentryapp import MASKED_VALUE
 from sentry.constants import SentryAppStatus
+from sentry.models import IntegrationFeature
+from sentry.api.serializers import serialize
+from sentry.utils.compat import map
 
 
 @register(SentryApp)
@@ -30,10 +33,16 @@ class SentryAppSerializer(Serializer):
             "allowedOrigins": obj.application.get_allowed_origins(),
         }
 
+        data["featureData"] = []
+
+        if obj.status != SentryAppStatus.INTERNAL:
+            features = IntegrationFeature.objects.filter(sentry_app_id=obj.id)
+            data["featureData"] = map(lambda x: serialize(x, user), features)
+
         if obj.status == SentryAppStatus.PUBLISHED and obj.date_published:
             data.update({"datePublished": obj.date_published})
 
-        if is_active_superuser(env.request) or (
+        if (env.request and is_active_superuser(env.request)) or (
             hasattr(user, "get_orgs") and obj.owner in user.get_orgs()
         ):
             client_secret = (
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_apps.py b/tests/sentry/api/endpoints/test_organization_sentry_apps.py
index b667457cc7..9ed738c03f 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_apps.py
@@ -54,6 +54,12 @@ class GetOrganizationSentryAppsTest(OrganizationSentryAppsTest):
                     "allowedOrigins": [],
                     "schema": {},
                     "owner": {"id": self.org.id, "slug": self.org.slug},
+                    "featureData": [
+                        {
+                            "featureGate": "integrations-api",
+                            "description": "Testin can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                        }
+                    ],
                 }
             ],
         )
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 31b941a4e3..2e69dffe84 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -122,6 +122,12 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
+            "featureData": [
+                {
+                    "description": "Test can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                    "featureGate": "integrations-api",
+                }
+            ],
         }
 
     def test_update_unpublished_app(self):
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index c25c630d45..97174b6a3d 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -86,6 +86,12 @@ class GetSentryAppsTest(SentryAppsTest):
             "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
+            "featureData": [
+                {
+                    "featureGate": "integrations-api",
+                    "description": "Test can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                }
+            ],
         } in json.loads(response.content)
 
     def test_users_filter_on_internal_apps(self):
@@ -112,6 +118,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "clientId": self.internal_app.application.client_id,
             "clientSecret": self.internal_app.application.client_secret,
             "owner": {"id": self.internal_org.id, "slug": self.internal_org.slug},
+            "featureData": [],
         } in json.loads(response.content)
 
         response_uuids = set(o["uuid"] for o in response.data)
@@ -148,6 +155,7 @@ class GetSentryAppsTest(SentryAppsTest):
             "clientId": self.internal_app.application.client_id,
             "clientSecret": self.internal_app.application.client_secret,
             "owner": {"id": self.internal_org.id, "slug": self.internal_org.slug},
+            "featureData": [],
         } in json.loads(response.content)
 
         response_uuids = set(o["uuid"] for o in response.data)
@@ -180,6 +188,12 @@ class GetSentryAppsTest(SentryAppsTest):
             "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
+            "featureData": [
+                {
+                    "featureGate": "integrations-api",
+                    "description": "Test can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                }
+            ],
         } in json.loads(response.content)
 
         response_uuids = set(o["uuid"] for o in response.data)
@@ -221,6 +235,12 @@ class GetSentryAppsTest(SentryAppsTest):
             "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
+            "featureData": [
+                {
+                    "featureGate": "integrations-api",
+                    "description": "Testin can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                }
+            ],
         } in json.loads(response.content)
 
         response_uuids = set(o["uuid"] for o in response.data)
@@ -266,6 +286,12 @@ class GetSentryAppsTest(SentryAppsTest):
             "allowedOrigins": [],
             "schema": {},
             "owner": {"id": self.org.id, "slug": self.org.slug},
+            "featureData": [
+                {
+                    "featureGate": "integrations-api",
+                    "description": "Boo Far can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                }
+            ],
         } in json.loads(response.content)
 
     def test_users_dont_see_unpublished_apps_their_org_owns(self):
diff --git a/tests/sentry/api/serializers/test_sentry_app.py b/tests/sentry/api/serializers/test_sentry_app.py
new file mode 100644
index 0000000000..0836f105f5
--- /dev/null
+++ b/tests/sentry/api/serializers/test_sentry_app.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.sentry_app import SentryAppSerializer
+from sentry.testutils import TestCase
+
+# from sentry.constants import SentryAppStatus
+
+
+class SentryAppSerializerTest(TestCase):
+    def test_published_app(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=user)
+        sentry_app = self.create_sentry_app(
+            name="Tesla App",
+            organization=organization,
+            published=True,
+            scopes=("org:write", "team:admin"),
+        )
+        result = serialize(sentry_app, None, SentryAppSerializer(), access=None)
+
+        assert result["name"] == "Tesla App"
+        assert result["featureData"] == [
+            {
+                "description": "Tesla App can **utilize the Sentry API** to pull data or update resources in Sentry (with permissions granted, of course).",
+                "featureGate": "integrations-api",
+            }
+        ]
+        assert result["scopes"] == ["org:write", "team:admin"]
+        assert result.get("clientSecret") is None
+
+    def test_internal_app(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        self.create_project(organization=org)
+        sentry_app = self.create_internal_integration(
+            name="La Croix App", organization=org, scopes=("org:write", "team:admin")
+        )
+        result = serialize(sentry_app, None, SentryAppSerializer(), access=None)
+
+        assert result["name"] == "La Croix App"
+        assert result["status"] == "internal"
+        assert result["featureData"] == []
+        assert result["scopes"] == ["org:write", "team:admin"]
+        assert result.get("clientSecret") is None
