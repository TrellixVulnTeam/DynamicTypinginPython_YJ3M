commit f30e49e62a71825890cbe1341304c023a731803e
Author: Alex Coomans <alex@alexcoomans.com>
Date:   Mon Jun 6 17:53:59 2016 -0700

    Handle race-condition in LevelCondition (#3379)

diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
index 143cb7918e..54c053e603 100644
--- a/src/sentry/rules/conditions/level.py
+++ b/src/sentry/rules/conditions/level.py
@@ -19,6 +19,7 @@ LEVEL_CHOICES = OrderedDict([
     ("{0}".format(k), "{0}".format(v.capitalize()))
     for k, v in sorted(LOG_LEVELS.items(), key=lambda x: x[0], reverse=True)
 ])
+LOG_LEVEL_REVERSE_MAP = dict((v, k) for k, v in LOG_LEVELS.iteritems())
 
 
 class LevelMatchType(object):
@@ -58,7 +59,12 @@ class LevelCondition(EventCondition):
             return False
 
         desired_level = int(desired_level)
-        level = int(event.group.level)
+        # Fetch the event level from the tags since event.level is
+        # event.group.level which may have changed
+        try:
+            level = LOG_LEVEL_REVERSE_MAP[event.get_tag('level')]
+        except KeyError:
+            return False
 
         if desired_match == LevelMatchType.EQUAL:
             return level == desired_level
diff --git a/tests/sentry/rules/conditions/test_level_event.py b/tests/sentry/rules/conditions/test_level_event.py
index 73775e642a..be5c4f1b76 100644
--- a/tests/sentry/rules/conditions/test_level_event.py
+++ b/tests/sentry/rules/conditions/test_level_event.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import logging
+
 from sentry.testutils.cases import RuleTestCase
 from sentry.rules.conditions.level import LevelCondition, LevelMatchType
 
@@ -7,13 +9,8 @@ from sentry.rules.conditions.level import LevelCondition, LevelMatchType
 class LevelConditionTest(RuleTestCase):
     rule_cls = LevelCondition
 
-    def get_event(self):
-        event = self.event
-        event.group.level = 20
-        return event
-
     def test_equals(self):
-        event = self.get_event()
+        event = self.create_event(event_id='a' * 32, tags={'level': 'info'})
         rule = self.get_rule({
             'match': LevelMatchType.EQUAL,
             'level': '20',
@@ -27,7 +24,7 @@ class LevelConditionTest(RuleTestCase):
         self.assertDoesNotPass(rule, event)
 
     def test_greater_than(self):
-        event = self.get_event()
+        event = self.create_event(event_id='a' * 32, tags={'level': 'info'})
         rule = self.get_rule({
             'match': LevelMatchType.GREATER_OR_EQUAL,
             'level': '40',
@@ -41,7 +38,7 @@ class LevelConditionTest(RuleTestCase):
         self.assertPasses(rule, event)
 
     def test_less_than(self):
-        event = self.get_event()
+        event = self.create_event(event_id='a' * 32, tags={'level': 'info'})
         rule = self.get_rule({
             'match': LevelMatchType.LESS_OR_EQUAL,
             'level': '10',
@@ -53,3 +50,46 @@ class LevelConditionTest(RuleTestCase):
             'level': '30',
         })
         self.assertPasses(rule, event)
+
+    def test_without_tag(self):
+        event = self.create_event(event_id='a' * 32, tags={})
+        rule = self.get_rule({
+            'match': LevelMatchType.EQUAL,
+            'level': '30',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_errors_with_invalid_level(self):
+        event = self.create_event(event_id='a' * 32, tags={'level': 'foobar'})
+        rule = self.get_rule({
+            'match': LevelMatchType.EQUAL,
+            'level': '30',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    # This simulates the following case:
+    # - Rule is setup to accept >= error
+    # - error event finishes the save_event task, group has a level of error
+    # - warning event finishes the save event, group now has a level of warning
+    # - error event starts post_process_group should pass even though the group
+    #   has a warning level set
+    #
+    # Specifically here to make sure the check is properly checking the event's level
+    def test_differing_levels(self):
+        eevent = self.create_event(tags={'level': 'error'})
+        wevent = self.create_event(tags={'level': 'warning'})
+
+        assert wevent.id != eevent.id
+        assert wevent.group.id == eevent.group.id
+
+        wevent.group.level = logging.WARNING
+
+        assert wevent.level == logging.WARNING
+        assert eevent.level == logging.WARNING
+
+        rule = self.get_rule({
+            'match': LevelMatchType.GREATER_OR_EQUAL,
+            'level': '40',
+        })
+        self.assertDoesNotPass(rule, wevent)
+        self.assertPasses(rule, eevent)
