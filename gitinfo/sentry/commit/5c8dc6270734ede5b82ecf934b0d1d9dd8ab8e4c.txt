commit 5c8dc6270734ede5b82ecf934b0d1d9dd8ab8e4c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 15 17:59:43 2018 -0700

    feat(slack): Implement assign to teams

diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index a904e6f634..2c9e2a3424 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -2,38 +2,59 @@ from __future__ import absolute_import
 
 import logging
 
-from django.db.models import Q
 from six.moves.urllib.parse import parse_qs, urlencode, urlparse, urlunparse
 
-from sentry.utils.dates import to_timestamp
+from sentry.api.fields.actor import Actor
 from sentry.utils import json
 from sentry.utils.assets import get_asset_url
+from sentry.utils.dates import to_timestamp
 from sentry.utils.http import absolute_uri
-from sentry.models import GroupStatus, GroupAssignee, OrganizationMember, User, Identity
+from sentry.models import (
+    GroupStatus, GroupAssignee, OrganizationMember, User, Identity, Team,
+)
 
 logger = logging.getLogger('sentry.integrations.slack')
 
-UNASSIGN_OPTION = {
-    'text': u':negative_squared_cross_mark: Unassign Issue',
-    'value': 'none',
-}
-
 # Attachment colors used for issues with no actions take
 NEW_ISSUE_COLOR = '#E03E2F'
 ACTIONED_ISSUE_COLOR = '#EDEEEF'
 
 
-def get_assignees(group):
+def format_actor_option(actor):
+    if isinstance(actor, User):
+        return {'text': actor.get_display_name(), 'value': u'user:{}'.format(actor.id)}
+    if isinstance(actor, Team):
+        return {'text': actor.slug, 'value': u'team:{}'.format(actor.id)}
+
+    raise NotImplementedError
+
+
+def get_member_assignees(group):
     queryset = OrganizationMember.objects.filter(
-        Q(user__is_active=True) | Q(user__isnull=True),
+        user__is_active=True,
         organization=group.organization,
         teams__in=group.project.teams.all(),
-    ).select_related('user')
+    ).distinct().select_related('user')
+
+    members = sorted(queryset, key=lambda u: u.user.get_display_name())
 
-    members = sorted(queryset, key=lambda x: x.user.get_display_name() if x.user_id else x.email)
-    members = filter(lambda m: m.user_id is not None, members)
+    return [format_actor_option(u.user) for u in members]
+
+
+def get_team_assignees(group):
+    return [format_actor_option(u) for u in group.project.teams.all()]
+
+
+def get_assignee(group):
+    try:
+        assigned_actor = GroupAssignee.objects.get(group=group).assigned_actor()
+    except GroupAssignee.DoesNotExist:
+        return None
 
-    return [{'text': x.user.get_display_name(), 'value': x.user.username} for x in members]
+    try:
+        return format_actor_option(assigned_actor.resolve())
+    except assigned_actor.type.DoesNotExist:
+        return None
 
 
 def add_notification_referrer_param(url, provider):
@@ -70,21 +91,23 @@ def build_attachment_text(group, event=None):
 
 
 def build_assigned_text(identity, assignee):
-    if assignee == 'none':
-        return u'*Issue unassigned by <@{user_id}>*'.format(
-            user_id=identity.external_id,
-        )
+    actor = Actor.from_actor_id(assignee)
 
     try:
-        assignee_user = User.objects.get(username=assignee)
-    except User.DoesNotExist:
+        assigned_actor = actor.resolve()
+    except actor.type.DoesNotExist:
         return
 
-    try:
-        assignee_ident = Identity.objects.get(user=assignee_user)
-        assignee_text = u'<@{}>'.format(assignee_ident.external_id)
-    except Identity.DoesNotExist:
-        assignee_text = assignee_user.get_display_name()
+    if actor.type == Team:
+        assignee_text = assigned_actor.slug
+    elif actor.type == User:
+        try:
+            assignee_ident = Identity.objects.get(user=assigned_actor)
+            assignee_text = u'<@{}>'.format(assignee_ident.external_id)
+        except Identity.DoesNotExist:
+            assignee_text = assigned_actor.get_display_name()
+    else:
+        raise NotImplementedError
 
     return u'*Issue assigned to {assignee_text} by <@{user_id}>*'.format(
         assignee_text=assignee_text,
@@ -118,7 +141,9 @@ def build_action_text(identity, action):
 def build_attachment(group, event=None, tags=None, identity=None, actions=None, rules=None):
     # XXX(dcramer): options are limited to 100 choices, even when nested
     status = group.get_status()
-    assignees = get_assignees(group)
+
+    members = get_member_assignees(group)
+    teams = get_team_assignees(group)
 
     logo_url = absolute_uri(get_asset_url('sentry', 'images/sentry-email-avatar.png'))
     color = NEW_ISSUE_COLOR
@@ -128,17 +153,7 @@ def build_attachment(group, event=None, tags=None, identity=None, actions=None,
     if actions is None:
         actions = []
 
-    try:
-        assignee = GroupAssignee.objects.get(group=group).user
-        assignee = {
-            'text': assignee.get_display_name(),
-            'value': assignee.username,
-        }
-
-        # Add unassign option to the top of the list
-        assignees.insert(0, UNASSIGN_OPTION)
-    except GroupAssignee.DoesNotExist:
-        assignee = None
+    assignee = get_assignee(group)
 
     resolve_button = {
         'name': 'resolve_dialog',
@@ -167,6 +182,20 @@ def build_attachment(group, event=None, tags=None, identity=None, actions=None,
             'value': 'unresolved',
         })
 
+    option_groups = []
+
+    if teams:
+        option_groups.append({
+            'text': 'Teams',
+            'options': teams,
+        })
+
+    if members:
+        option_groups.append({
+            'text': 'People',
+            'options': members,
+        })
+
     payload_actions = [
         resolve_button,
         ignore_button,
@@ -174,8 +203,8 @@ def build_attachment(group, event=None, tags=None, identity=None, actions=None,
             'name': 'assign',
             'text': 'Select Assignee...',
             'type': 'select',
-            'options': assignees,
             'selected_options': [assignee],
+            'option_groups': option_groups,
         },
     ]
 
diff --git a/tests/sentry/integrations/slack/test_action_endpoint.py b/tests/sentry/integrations/slack/test_action_endpoint.py
index fccf1d241a..85dec9af0e 100644
--- a/tests/sentry/integrations/slack/test_action_endpoint.py
+++ b/tests/sentry/integrations/slack/test_action_endpoint.py
@@ -167,7 +167,7 @@ class StatusActionTest(BaseEventTest):
         # Assign to user
         status_action = {
             'name': 'assign',
-            'selected_options': [{'value': user2.username}],
+            'selected_options': [{'value': u'user:{}'.format(user2.id)}],
         }
 
         resp = self.post_webhook(action_data=[status_action])
@@ -180,19 +180,19 @@ class StatusActionTest(BaseEventTest):
             assigner=self.identity.external_id,
         )
 
-        # Unassign from user
+        # Assign to team
         status_action = {
             'name': 'assign',
-            'selected_options': [{'value': 'none'}],
+            'selected_options': [{'value': u'team:{}'.format(self.team.id)}],
         }
 
         resp = self.post_webhook(action_data=[status_action])
 
         assert resp.status_code == 200, resp.content
-        assert not GroupAssignee.objects.filter(group=self.group1).exists()
+        assert GroupAssignee.objects.filter(group=self.group1, team=self.team).exists()
 
-        expect_status = u'*Issue unassigned by <@{assigner}>*'.format(
-            assignee=user2.get_display_name(),
+        expect_status = u'*Issue assigned to {team} by <@{assigner}>*'.format(
+            team=self.team.slug,
             assigner=self.identity.external_id,
         )
 
@@ -212,7 +212,7 @@ class StatusActionTest(BaseEventTest):
 
         status_action = {
             'name': 'assign',
-            'selected_options': [{'value': user2.username}],
+            'selected_options': [{'value': u'user:{}'.format(user2.id)}],
         }
 
         resp = self.post_webhook(action_data=[status_action])
