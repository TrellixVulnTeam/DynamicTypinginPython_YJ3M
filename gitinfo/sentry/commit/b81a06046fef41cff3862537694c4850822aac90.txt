commit b81a06046fef41cff3862537694c4850822aac90
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Apr 30 11:47:31 2020 +0200

    feat(tsdb): Option on redissnuba to switch to Redis after a certain date (#18040)
    
    This adds an option to the redissnuba tsdb backend to allow you to start
    reading from Snuba only after a certain date.
    
    It can be used like this in your sentry.conf.py:
    
    SENTRY_TSDB = 'sentry.tsdb.redissnuba.RedisSnubaTSDB'
    SENTRY_TSDB_OPTIONS = {"switchover_timestamp": 123456}  # now + 90d
    
    We want to use this in getsentry/onprem to enable automatic switchover. Note that we had discussions that maybe this backend should live in the onprem repo, but I think it's easier to add an option to the backend we already use in prod.
    
    We cannot use ServiceDelegator as that's a getsentry thing

diff --git a/src/sentry/tsdb/redissnuba.py b/src/sentry/tsdb/redissnuba.py
index 26e0e3e308..4a743ae82c 100644
--- a/src/sentry/tsdb/redissnuba.py
+++ b/src/sentry/tsdb/redissnuba.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import time
 import inspect
 import six
 
@@ -66,11 +67,14 @@ model_backends = {
 }
 
 
-def selector_func(method, callargs):
+def selector_func(method, callargs, switchover_timestamp=None):
     spec = method_specifications.get(method)
     if spec is None:
         return "redis"  # default backend (possibly invoke base directly instead?)
 
+    if switchover_timestamp is not None and time.time() < switchover_timestamp:
+        return "redis"  # snuba does not yet have all data
+
     operation_type, model_extractor = spec
     backends = {model_backends[model][operation_type] for model in model_extractor(callargs)}
 
@@ -81,7 +85,7 @@ def selector_func(method, callargs):
 def make_method(key):
     def method(self, *a, **kw):
         callargs = inspect.getcallargs(getattr(BaseTSDB, key), self, *a, **kw)
-        backend = selector_func(key, callargs)
+        backend = selector_func(key, callargs, self.switchover_timestamp)
         return getattr(self.backends[backend], key)(*a, **kw)
 
     return method
@@ -100,7 +104,24 @@ class RedisSnubaTSDBMeta(type):
 
 @six.add_metaclass(RedisSnubaTSDBMeta)
 class RedisSnubaTSDB(BaseTSDB):
-    def __init__(self, **options):
+    def __init__(self, switchover_timestamp=None, **options):
+        """
+        A TSDB backend that uses the Snuba outcomes dataset for certain models
+        instead of reading/writing to redis. Reading will trigger a Snuba
+        query, while writing is a noop as Snuba reads from outcomes.
+
+        Note: Using this backend requires you to start Snuba outcomes consumers
+        (not to be confused with the outcomes consumers in Sentry itself).
+
+        :param switchover_timestamp: When set, only start reading from snuba
+            after this timestamp (as returned by `time.time()`). When this
+            timestamp has not been reached yet, this backend just degrades to
+            Redis for *all* keys.
+
+            The default `None` will start reading from Snuba immediately and is
+            equivalent to setting a past timestamp.
+        """
+        self.switchover_timestamp = switchover_timestamp
         self.backends = {
             "dummy": DummyTSDB(),
             "redis": RedisTSDB(**options.pop("redis", {})),
