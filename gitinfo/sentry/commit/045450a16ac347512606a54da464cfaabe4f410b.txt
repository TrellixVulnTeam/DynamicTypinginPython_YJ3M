commit 045450a16ac347512606a54da464cfaabe4f410b
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Sep 23 16:05:51 2015 -0700

    Change `add_to_schedule` to `ensure_timeline_scheduled` for clarity.

diff --git a/src/sentry/digests/redis.py b/src/sentry/digests/redis.py
index 6496071189..de513ea528 100644
--- a/src/sentry/digests/redis.py
+++ b/src/sentry/digests/redis.py
@@ -57,7 +57,7 @@ def make_record_key(timeline_key, record):
 # Ensures an timeline is scheduled to be digested.
 # KEYS: {WATING, READY}
 # ARGV: {TIMELINE, TIMESTAMP}
-ADD_TO_SCHEDULE_SCRIPT = """\
+ENSURE_TIMELINE_SCHEDULED_SCRIPT = """\
 -- Check to see if the timeline exists in the "waiting" set (heuristics tell us
 -- that this should be more likely than it's presence in the "ready" set.)
 local waiting = redis.call('ZSCORE', KEYS[1], ARGV[1])
@@ -96,7 +96,7 @@ return table.getn(keys)
 
 # XXX: Passing `None` as the first argument is a dirty hack to allow us to use
 # this more easily with the cluster
-add_to_schedule = Script(None, ADD_TO_SCHEDULE_SCRIPT)
+ensure_timeline_scheduled = Script(None, ENSURE_TIMELINE_SCHEDULED_SCRIPT)
 truncate_timeline = Script(None, TRUNCATE_TIMELINE_SCRIPT)
 
 
@@ -132,7 +132,7 @@ class RedisBackend(Backend):
             # http://redis.io/commands/ZADD#elements-with-the-same-score
             pipeline.zadd(timeline_key, record.timestamp, record.key)
 
-            add_to_schedule(
+            ensure_timeline_scheduled(
                 map(
                     functools.partial(make_schedule_key, self.namespace),
                     (SCHEDULE_STATE_WAITING, SCHEDULE_STATE_READY,),
diff --git a/tests/sentry/digests/test_redis.py b/tests/sentry/digests/test_redis.py
index 24b11a2e73..0104b167cf 100644
--- a/tests/sentry/digests/test_redis.py
+++ b/tests/sentry/digests/test_redis.py
@@ -15,7 +15,7 @@ from sentry.digests.redis import (
     SCHEDULE_STATE_READY,
     SCHEDULE_STATE_WAITING,
     RedisBackend,
-    add_to_schedule,
+    ensure_timeline_scheduled,
     make_digest_key,
     make_iteration_key,
     make_record_key,
@@ -58,7 +58,7 @@ class BaseRedisBackendTestCase(TestCase):
 
 
 class RedisScriptTestCase(BaseRedisBackendTestCase):
-    def test_add_to_schedule_script(self):
+    def test_ensure_timeline_scheduled_script(self):
         client = StrictRedis(db=9)
 
         timeline = 'timeline'
@@ -72,18 +72,18 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
         # The first addition should cause the timeline to be added to the waiting set.
         with self.assertChanges(waiting_set_size, before=0, after=1), \
                 self.assertChanges(timeline_score_in_waiting_set, before=None, after=timestamp):
-            add_to_schedule(('waiting', 'ready'), (timeline, timestamp), client)
+            ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp), client)
 
         # Adding it again with a timestamp in the future should not change the schedule time.
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertDoesNotChange(timeline_score_in_waiting_set):
-            add_to_schedule(('waiting', 'ready'), (timeline, timestamp + 50), client)
+            ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp + 50), client)
 
         # If we see a record with a timestamp earlier than the schedule time,
         # we should change the schedule.
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertChanges(timeline_score_in_waiting_set, before=timestamp, after=timestamp - 50):
-            add_to_schedule(('waiting', 'ready'), (timeline, timestamp - 50), client)
+            ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp - 50), client)
 
         # Move the timeline from the waiting set to the ready set.
         client.zrem('waiting', timeline)
@@ -93,7 +93,7 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertDoesNotChange(ready_set_size), \
                 self.assertDoesNotChange(timeline_score_in_ready_set):
-            add_to_schedule(('waiting', 'ready'), (timeline, timestamp - 50), client)
+            ensure_timeline_scheduled(('waiting', 'ready'), (timeline, timestamp - 50), client)
 
     def test_truncate_timeline_script(self):
         client = StrictRedis(db=9)
