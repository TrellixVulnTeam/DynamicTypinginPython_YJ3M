commit dcab98e9eed0acd35a44f14c7f00c0b5fbf4b7a7
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Apr 21 18:49:13 2020 -0700

    feat(alerts): Allow environment filtering (#18392)

diff --git a/src/sentry/api/endpoints/organization_incident_index.py b/src/sentry/api/endpoints/organization_incident_index.py
index 9229ec2dff..33e7b45646 100644
--- a/src/sentry/api/endpoints/organization_incident_index.py
+++ b/src/sentry/api/endpoints/organization_incident_index.py
@@ -66,6 +66,10 @@ class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
             organization, self.get_projects(request, organization)
         )
 
+        envs = self.get_environments(request, organization)
+        if envs:
+            incidents = incidents.filter(alert_rule__environment__in=envs)
+
         query_status = request.GET.get("status")
         if query_status is not None:
             if query_status == "open":
diff --git a/tests/sentry/api/endpoints/test_organization_incident_index.py b/tests/sentry/api/endpoints/test_organization_incident_index.py
index 1e6b355525..65456314b5 100644
--- a/tests/sentry/api/endpoints/test_organization_incident_index.py
+++ b/tests/sentry/api/endpoints/test_organization_incident_index.py
@@ -48,6 +48,29 @@ class IncidentListEndpointTest(APITestCase):
         assert resp_closed.data == serialize([closed_incident])
         assert resp_open.data == serialize([incident])
 
+    def test_filter_env(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        env = self.create_environment(self.project)
+        rule = self.create_alert_rule(projects=[self.project], environment=[env])
+
+        incident = self.create_incident(alert_rule=rule)
+        self.create_incident()
+
+        self.login_as(self.user)
+
+        with self.feature("organizations:incidents"):
+            resp_filter_env = self.get_valid_response(
+                self.organization.slug, environment=[env.name]
+            )
+            resp_no_env_filter = self.get_valid_response(self.organization.slug)
+
+        # The alert without an environment assigned should not be selected
+        assert len(resp_filter_env.data) == 1
+        assert resp_filter_env.data == serialize([incident])
+
+        # No filter returns both incidents
+        assert len(resp_no_env_filter.data) == 2
+
     def test_no_feature(self):
         self.create_team(organization=self.organization, members=[self.user])
         self.login_as(self.user)
