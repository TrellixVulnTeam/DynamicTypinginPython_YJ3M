commit b6340529c40f5c55c3ec64946fe4b1361feb0ef4
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Nov 15 10:42:56 2018 -0800

    feat(integrations): Add Jira Server to the Integrations Page (#10571)
    
    * Added jira server as an integration on the integrations page.
    
    * Added jira server url.
    
    * added rudamentary tests and buid integration/identity methods.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ee36e44435..42de00bb8b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1315,12 +1315,14 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.github_enterprise.GitHubEnterpriseIntegrationProvider',
     'sentry.integrations.gitlab.GitlabIntegrationProvider',
     'sentry.integrations.jira.JiraIntegrationProvider',
+    'sentry.integrations.jira_server.JiraServerIntegrationProvider',
     'sentry.integrations.vsts.VstsIntegrationProvider',
     'sentry.integrations.vsts_extension.VstsExtensionIntegrationProvider',
 )
 
 SENTRY_INTERNAL_INTEGRATIONS = (
     'vsts-extension',
+    'jira_server',
 )
 
 
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index f910d965b2..9f01fc7349 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -7,6 +7,7 @@ from .oauth2 import *  # NOQA
 from .slack import *  # NOQA
 from .github import *  # NOQA
 from .github_enterprise import *  # NOQA
+from .jira_server import *  # NOQA
 from .vsts import *  # NOQA
 from .vsts_extension import *  # NOQA
 from .bitbucket import *  # NOQA
@@ -25,6 +26,7 @@ unregister = default_manager.unregister
 register(SlackIdentityProvider)  # NOQA
 register(GitHubIdentityProvider)  # NOQA
 register(GitHubEnterpriseIdentityProvider)  # NOQA
+register(JiraServerIdentityProvider)  # NOQA
 register(VSTSIdentityProvider)  # NOQA
 register(VstsExtensionIdentityProvider)  # NOQA
 register(BitbucketIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/jira_server/__init__.py b/src/sentry/identity/jira_server/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/jira_server/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/jira_server/provider.py b/src/sentry/identity/jira_server/provider.py
new file mode 100644
index 0000000000..cc37600e15
--- /dev/null
+++ b/src/sentry/identity/jira_server/provider.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.identity.base import Provider
+
+
+class JiraServerIdentityProvider(Provider):
+    name = 'Jira Server'
+    key = 'jira_server'
+
+    def build_identity(self, state):
+        # TODO(lb): This is wrong. Not currently operational.
+        # this should be implemented.
+        return {
+            'type': 'jira_server',
+            'id': state['id'],
+            'name': 'Jira Server',
+        }
diff --git a/src/sentry/integrations/jira_server/__init__.py b/src/sentry/integrations/jira_server/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/jira_server/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
new file mode 100644
index 0000000000..07a601c9f8
--- /dev/null
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -0,0 +1,87 @@
+from __future__ import absolute_import
+
+import logging
+
+from django.utils.translation import ugettext as _
+
+from sentry.integrations import (
+    IntegrationFeatures, IntegrationProvider, IntegrationMetadata, FeatureDescription,
+)
+from sentry.integrations.jira import JiraIntegration
+
+logger = logging.getLogger('sentry.integrations.jira_server')
+
+DESCRIPTION = """
+Connect your Sentry organization into one or more of your Jira Server instances.
+Get started streamlining your bug squashing workflow by unifying your Sentry and
+Jira instances together.
+"""
+
+FEATURE_DESCRIPTIONS = [
+    FeatureDescription(
+        """
+        Create and link Sentry issue groups directly to a Jira ticket in any of your
+        projects, providing a quick way to jump from Sentry bug to tracked ticket!
+        """,
+        IntegrationFeatures.ISSUE_BASIC,
+    ),
+    FeatureDescription(
+        """
+        Automatically synchronize assignees to and from Jira. Don't get confused
+        who's fixing what, let us handle ensuring your issues and tickets match up
+        to your Sentry and Jira assignees.
+        """,
+        IntegrationFeatures.ISSUE_SYNC,
+    ),
+    FeatureDescription(
+        """
+        Synchronize Comments on Sentry Issues directly to the linked Jira ticket.
+        """,
+        IntegrationFeatures.ISSUE_SYNC,
+    ),
+]
+
+
+metadata = IntegrationMetadata(
+    description=_(DESCRIPTION.strip()),
+    features=FEATURE_DESCRIPTIONS,
+    author='The Sentry Team',
+    noun=_('Instance'),
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=Jira%20Server%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/jira_server',
+    aspects={},
+)
+
+
+class JiraServerIntegration(JiraIntegration):
+    pass
+
+
+class JiraServerIntegrationProvider(IntegrationProvider):
+    key = 'jira_server'
+    name = 'Jira Server'
+    metadata = metadata
+    integration_cls = JiraIntegration
+
+    features = frozenset([
+        IntegrationFeatures.ISSUE_BASIC,
+        IntegrationFeatures.ISSUE_SYNC
+    ])
+
+    can_add = False
+
+    def get_pipeline_views(self):
+        return []
+
+    def build_integration(self, state):
+        # TODO(lb): This is wrong. Not currently operational.
+        # this should be implemented.
+        user = state['identity']['data']
+        return {
+            'provider': 'jira_server',
+            'external_id': '%s:%s' % (state['base_url'], state['id']),
+            'user_identity': {
+                'type': 'jira_server',
+                'external_id': '%s:%s' % (state['base_url'], user['id'])
+            }
+        }
diff --git a/src/sentry/integrations/jira_server/urls.py b/src/sentry/integrations/jira_server/urls.py
new file mode 100644
index 0000000000..0f194ad392
--- /dev/null
+++ b/src/sentry/integrations/jira_server/urls.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+from django.conf.urls import patterns  # , url
+urlpatterns = patterns(
+    '',
+)
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 059727513a..d06416cb3a 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -211,6 +211,7 @@ def register_extensions():
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
     from sentry.integrations.gitlab import GitlabIntegrationProvider
     from sentry.integrations.jira import JiraIntegrationProvider
+    from sentry.integrations.jira_server import JiraServerIntegrationProvider
     from sentry.integrations.slack import SlackIntegrationProvider
     from sentry.integrations.vsts import VstsIntegrationProvider
     from sentry.integrations.vsts_extension import VstsExtensionIntegrationProvider
@@ -221,6 +222,7 @@ def register_extensions():
     integrations.register(GitHubEnterpriseIntegrationProvider)
     integrations.register(GitlabIntegrationProvider)
     integrations.register(JiraIntegrationProvider)
+    integrations.register(JiraServerIntegrationProvider)
     integrations.register(SlackIntegrationProvider)
     integrations.register(VstsIntegrationProvider)
     integrations.register(VstsExtensionIntegrationProvider)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b84ab4b7bb..a4346a0df2 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -516,6 +516,7 @@ urlpatterns += patterns(
     ),
     url(r'^extensions/cloudflare/', include('sentry.integrations.cloudflare.urls')),
     url(r'^extensions/jira/', include('sentry.integrations.jira.urls')),
+    url(r'^extensions/jira-server/', include('sentry.integrations.jira_server.urls')),
     url(r'^extensions/slack/', include('sentry.integrations.slack.urls')),
     url(r'^extensions/github/', include('sentry.integrations.github.urls')),
     url(r'^extensions/github-enterprise/', include('sentry.integrations.github_enterprise.urls')),
diff --git a/tests/sentry/integrations/jira_server/__init__.py b/tests/sentry/integrations/jira_server/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/jira_server/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/jira_server/test_integration.py b/tests/sentry/integrations/jira_server/test_integration.py
new file mode 100644
index 0000000000..f8872e6249
--- /dev/null
+++ b/tests/sentry/integrations/jira_server/test_integration.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from sentry.integrations.jira_server import JiraServerIntegrationProvider
+from sentry.identity.jira_server import JiraServerIdentityProvider
+from sentry.testutils import IntegrationTestCase
+
+
+class JiraServerIntegrationTest(IntegrationTestCase):
+    provider = JiraServerIntegrationProvider
+
+    def test_temporary_identity_provider(self):
+        provider = JiraServerIdentityProvider()
+        state = {'id': 'identity-id'}
+        assert provider.build_identity(state) == {
+            'type': 'jira_server',
+            'id': state['id'],
+            'name': 'Jira Server',
+        }
+
+    def test_temporary_integration_provider(self):
+        provider = JiraServerIntegrationProvider()
+        state = {
+            'identity': {'data': {'id': 'user-id'}},
+            'base_url': 'https://jira-server.com/',
+            'id': 'integration-id',
+        }
+        assert provider.build_integration(state) == {
+            'provider': 'jira_server',
+            'external_id': '%s:%s' % (state['base_url'], state['id']),
+            'user_identity': {
+                'type': 'jira_server',
+                'external_id': '%s:%s' % (state['base_url'], state['identity']['data']['id'])
+            }
+        }
