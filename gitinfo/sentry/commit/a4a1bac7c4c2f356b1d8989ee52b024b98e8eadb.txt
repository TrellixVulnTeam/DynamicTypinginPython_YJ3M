commit a4a1bac7c4c2f356b1d8989ee52b024b98e8eadb
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 5 14:14:06 2015 -0800

    Various cleanup

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 79e33e4820..f3be412768 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -12,11 +12,11 @@ class Client {
   }
 
   uniqueId() {
-    function s4() {
+    var s4 = () => {
       return Math.floor((1 + Math.random()) * 0x10000)
                  .toString(16)
                  .substring(1);
-    }
+    };
     return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
   }
@@ -60,11 +60,11 @@ class Client {
     return this.request(path, {
       query: query,
       method: "DELETE",
-      success: function(response){
-       AggregateListActions.deleteSuccess(id, params.itemIds, response);
+      success: (response) => {
+        AggregateListActions.deleteSuccess(id, params.itemIds, response);
       },
-      error: function(error){
-       AggregateListActions.deleteError(id, params.itemIds, error);
+      error: (error) => {
+        AggregateListActions.deleteError(id, params.itemIds, error);
       }
     });
   }
@@ -80,11 +80,11 @@ class Client {
       query: query,
       method: "PUT",
       data: params.data,
-      success: function(response){
-       AggregateListActions.updateSuccess(id, params.itemIds, response);
+      success: (response) => {
+        AggregateListActions.updateSuccess(id, params.itemIds, response);
       },
-      error: function(error){
-       AggregateListActions.updateError(id, params.itemIds, error);
+      error: (error) => {
+        AggregateListActions.updateError(id, params.itemIds, error);
       }
     });
   }
@@ -100,11 +100,11 @@ class Client {
       query: query,
       method: "PUT",
       data: {merge: 1},
-      success: function(response){
-       AggregateListActions.mergeSuccess(id, params.itemIds, response);
+      success: (response) => {
+        AggregateListActions.mergeSuccess(id, params.itemIds, response);
       },
-      error: function(error){
-       AggregateListActions.mergeError(id, params.itemIds, error);
+      error: (error) => {
+        AggregateListActions.mergeError(id, params.itemIds, error);
       }
     });
   }
@@ -118,11 +118,11 @@ class Client {
     return this.request(path, {
       method: "PUT",
       data: {assignedTo: params.email},
-      success: function(response){
-       AggregateListActions.assignToSuccess(id, params.id, response);
+      success: (response) => {
+        AggregateListActions.assignToSuccess(id, params.id, response);
       },
-      error: function(error){
-       AggregateListActions.assignToError(id, params.id, error);
+      error: (error) => {
+        AggregateListActions.assignToError(id, params.id, error);
       }
     });
   }
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index 429d252335..781614c481 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -150,7 +150,7 @@ var AggregateListStore = Reflux.createStore({
     AlertActions.addAlert(ERR_SCHEDULE_DELETE, 'error');
     this.trigger();
   },
-  
+
   onDeleteSuccess(changeId, itemIds, response) {
     var itemIdSet = new Set(itemIds);
     itemIds.forEach(itemId => {
@@ -184,7 +184,7 @@ var AggregateListStore = Reflux.createStore({
     this.trigger();
   },
 
-  onUpdate(changeId, itemIds, data){
+  onUpdate(changeId, itemIds, data) {
     if (typeof itemIds === 'undefined') this.items.map(item => item.id);
     itemIds.forEach(itemId => {
       this.addStatus(itemId, 'update');
@@ -193,7 +193,7 @@ var AggregateListStore = Reflux.createStore({
     this.trigger();
   },
 
-  onUpdateError(changeId, itemIds, error){
+  onUpdateError(changeId, itemIds, error) {
     this.pendingChanges.remove(changeId);
     itemIds.forEach(itemId => {
       this.clearStatus(itemId, 'update');
@@ -202,7 +202,7 @@ var AggregateListStore = Reflux.createStore({
     this.trigger();
   },
 
-  onUpdateSuccess(changeId, itemIds, response){
+  onUpdateSuccess(changeId, itemIds, response) {
     if (typeof itemIds === 'undefined') {
       itemIds = this.items.map(item => item.id);
     }
diff --git a/src/sentry/static/sentry/app/views/aggregate.jsx b/src/sentry/static/sentry/app/views/aggregate.jsx
index 1a44fe304b..c1c8fd14c5 100644
--- a/src/sentry/static/sentry/app/views/aggregate.jsx
+++ b/src/sentry/static/sentry/app/views/aggregate.jsx
@@ -38,13 +38,13 @@ var AggregateDetails = React.createClass({
 
   componentWillMount() {
     api.request(this.getAggregateDetailsEndpoint(), {
-      success: function(data, textStatus, jqXHR) {
+      success: (data) => {
         AggregateListStore.loadInitialData([data]);
 
         this.setBreadcrumbs([
           {name: data.title, to: 'aggregateDetails'}
         ]);
-      }.bind(this)
+      }
     });
   },
 
