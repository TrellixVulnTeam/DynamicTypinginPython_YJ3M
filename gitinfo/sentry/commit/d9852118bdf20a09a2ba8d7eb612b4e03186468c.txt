commit d9852118bdf20a09a2ba8d7eb612b4e03186468c
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Apr 9 08:26:16 2020 -0700

    ref(integrations): Add sentry APM to ApiClient (#17792)
    
    * ref(integrations): Add sentry apm to ApiClient
    fix conflict
    
    * add back in APM for shared_integrations
    
    * create new Spans
    
    * add transaction_start decorator
    
    * fix: Fix test
    
    Co-authored-by: Markus Unterwaditzer <markus@unterwaditzer.net>

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 9877a157cb..4f9133b1f5 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -12,6 +12,8 @@ from sentry.integrations import IntegrationFeatures
 from sentry.shared_integrations.exceptions import IntegrationError, IntegrationFormError
 from sentry.models import Activity, ExternalIssue, GroupLink, Integration
 from sentry.signals import integration_issue_created, integration_issue_linked
+from sentry.web.decorators import transaction_start
+
 
 MISSING_FEATURE_MESSAGE = "Your organization does not have access to this feature."
 
@@ -43,6 +45,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             data=issue_information,
         )
 
+    @transaction_start("GroupIntegrationDetailsEndpoint")
     def get(self, request, group, integration_id):
         if not self._has_issue_feature(group.organization, request.user):
             return Response({"detail": MISSING_FEATURE_MESSAGE}, status=400)
@@ -81,6 +84,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             return Response({"detail": six.text_type(e)}, status=400)
 
     # was thinking put for link an existing issue, post for create new issue?
+    @transaction_start("GroupIntegrationDetailsEndpoint")
     def put(self, request, group, integration_id):
         if not self._has_issue_feature(group.organization, request.user):
             return Response({"detail": MISSING_FEATURE_MESSAGE}, status=400)
@@ -169,6 +173,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         }
         return Response(context, status=201)
 
+    @transaction_start("GroupIntegrationDetailsEndpoint")
     def post(self, request, group, integration_id):
         if not self._has_issue_feature(group.organization, request.user):
             return Response({"detail": MISSING_FEATURE_MESSAGE}, status=400)
@@ -241,6 +246,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         }
         return Response(context, status=201)
 
+    @transaction_start("GroupIntegrationDetailsEndpoint")
     def delete(self, request, group, integration_id):
         if not self._has_issue_feature(group.organization, request.user):
             return Response({"detail": MISSING_FEATURE_MESSAGE}, status=400)
diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index 9655f21d5d..6f79fdb385 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -1,9 +1,7 @@
 from __future__ import absolute_import
 
-
 from time import time
 
-
 from sentry.shared_integrations.client import BaseApiClient
 from sentry.exceptions import InvalidIdentity
 
diff --git a/src/sentry/shared_integrations/client.py b/src/sentry/shared_integrations/client.py
index 86021fed26..1424ab3228 100644
--- a/src/sentry/shared_integrations/client.py
+++ b/src/sentry/shared_integrations/client.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import logging
 import json
 import requests
+import sentry_sdk
 import six
 
 from collections import OrderedDict
@@ -147,13 +148,16 @@ class BaseApiClient(object):
     def get_cache_prefix(self):
         return u"%s.%s.client:" % (self.integration_type, self.name)
 
-    def track_response_data(self, code, error=None):
+    def track_response_data(self, code, span, error=None):
         metrics.incr(
             u"%s.http_response" % (self.datadog_prefix),
             sample_rate=1.0,
             tags={self.integration_type: self.name, "status": code},
         )
 
+        span.set_http_status(code)
+        span.set_tag(self.integration_type, self.name)
+
         extra = {
             self.integration_type: self.name,
             "status_string": six.text_type(code),
@@ -203,42 +207,47 @@ class BaseApiClient(object):
             sample_rate=1.0,
             tags={self.integration_type: self.name},
         )
-        try:
-            resp = getattr(session, method.lower())(
-                url=full_url,
-                headers=headers,
-                json=data if json else None,
-                data=data if not json else None,
-                params=params,
-                auth=auth,
-                verify=self.verify_ssl,
-                allow_redirects=allow_redirects,
-                timeout=timeout,
-            )
-            resp.raise_for_status()
-        except ConnectionError as e:
-            self.track_response_data("connection_error", e)
-            raise ApiHostError.from_exception(e)
-        except Timeout as e:
-            self.track_response_data("timeout", e)
-            raise ApiTimeoutError.from_exception(e)
-        except HTTPError as e:
-            resp = e.response
-            if resp is None:
-                self.track_response_data("unknown", e)
-                self.logger.exception(
-                    "request.error", extra={self.integration_type: self.name, "url": full_url}
+
+        with sentry_sdk.start_span(
+            op=u"{}.http".format(self.integration_type),
+            transaction=u"{}.http_response.{}".format(self.integration_type, self.name),
+        ) as span:
+            try:
+                resp = getattr(session, method.lower())(
+                    url=full_url,
+                    headers=headers,
+                    json=data if json else None,
+                    data=data if not json else None,
+                    params=params,
+                    auth=auth,
+                    verify=self.verify_ssl,
+                    allow_redirects=allow_redirects,
+                    timeout=timeout,
                 )
-                raise ApiError("Internal Error")
-            self.track_response_data(resp.status_code, e)
-            raise ApiError.from_response(resp)
+                resp.raise_for_status()
+            except ConnectionError as e:
+                self.track_response_data("connection_error", span, e)
+                raise ApiHostError.from_exception(e)
+            except Timeout as e:
+                self.track_response_data("timeout", span, e)
+                raise ApiTimeoutError.from_exception(e)
+            except HTTPError as e:
+                resp = e.response
+                if resp is None:
+                    self.track_response_data("unknown", span, e)
+                    self.logger.exception(
+                        "request.error", extra={self.integration_type: self.name, "url": full_url}
+                    )
+                    raise ApiError("Internal Error")
+                self.track_response_data(resp.status_code, span, e)
+                raise ApiError.from_response(resp)
 
-        self.track_response_data(resp.status_code)
+            self.track_response_data(resp.status_code, span)
 
-        if resp.status_code == 204:
-            return {}
+            if resp.status_code == 204:
+                return {}
 
-        return BaseApiResponse.from_response(resp, allow_text=allow_text)
+            return BaseApiResponse.from_response(resp, allow_text=allow_text)
 
     # subclasses should override ``request``
     def request(self, *args, **kwargs):
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index d62b4f9eef..1358d7fd7f 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -2,8 +2,10 @@ from __future__ import absolute_import, print_function
 
 import logging
 import time
+import sentry_sdk
 
 from django.conf import settings
+from sentry_sdk.tracing import Span
 
 from sentry import features
 from sentry.utils.cache import cache
@@ -177,7 +179,10 @@ def post_process_group(event, is_new, is_regression, is_new_group_environment, *
             # objects back and forth isn't super efficient
             for callback, futures in rp.apply():
                 has_alert = True
-                safe_execute(callback, event, futures)
+                with sentry_sdk.start_span(
+                    Span(op="post_process_group", transaction="rule_processor_apply", sampled=True)
+                ):
+                    safe_execute(callback, event, futures)
 
             if features.has("projects:servicehooks", project=event.project):
                 allowed_events = set(["event.created"])
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 297a5f4020..939842a256 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -7,6 +7,8 @@ from django.contrib import messages
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.utils import auth
+from sentry_sdk import Hub
+from sentry_sdk.tracing import Span
 
 ERR_BAD_SIGNATURE = _("The link you followed is invalid or expired.")
 
@@ -37,3 +39,15 @@ def signed_auth_required(func):
         return func(request, *args, **kwargs)
 
     return wrapped
+
+
+def transaction_start(endpoint):
+    def decorator(func):
+        @wraps(func)
+        def wrapped(request, *args, **kwargs):
+            with Hub.current.start_span(Span(op="http.server", transaction=endpoint, sampled=True)):
+                return func(request, *args, **kwargs)
+
+        return wrapped
+
+    return decorator
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index cca70a8f1f..2398f24888 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -525,7 +525,9 @@ class SentryWsgiRemoteTest(TransactionTestCase):
                     body = "".join(app_iter)
 
         assert status == "200 OK", body
-        assert not events
+        assert set((e.get("type"), e.get("transaction")) for e in events) == {
+            ("transaction", "rule_processor_apply")
+        }
         assert calls == [1]
 
 
