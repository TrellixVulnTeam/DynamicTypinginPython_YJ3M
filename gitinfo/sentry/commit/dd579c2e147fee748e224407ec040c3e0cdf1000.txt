commit dd579c2e147fee748e224407ec040c3e0cdf1000
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Oct 2 12:54:10 2017 -0700

    Allow org owners to transfer projects across orgs (#5614)
    
    * syntax and unused imports
    
    * add accept transfer endpoint
    
    * import Http404
    
    * resolve merge
    
    * add audit log for project transfer request
    
    * audit log for accept project transfer
    
    * add transaction ids
    
    * change activity log type
    
    * add from_organization to request project transfer email
    
    * Add generic signing module
    
    * add sign/unsign for data in url
    
    * checks for expired signature and bad signature
    
    * remove not used variable
    
    * add transfer project request tests
    
    * use urlencode
    
    * refactor and add error message for unfound email
    
    * add some accept transfer tests
    
    * remove dupe 'try'
    
    * add check for project's org
    
    * use absolute_uri
    
    * refactor team query and owner email check
    
    * fix typo
    
    * fix test
    
    * moar tests
    
    * another test
    
    * use transfer_to for project transfer

diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index ec18e0c37b..98fbc7b2ff 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -38,6 +38,8 @@ class AuditLogEntryEvent(object):
     PROJECT_REMOVE = 32
     PROJECT_SET_PUBLIC = 33
     PROJECT_SET_PRIVATE = 34
+    PROJECT_REQUEST_TRANSFER = 35
+    PROJECT_ACCEPT_TRANSFER = 36
 
     TAGKEY_REMOVE = 40
 
@@ -93,6 +95,8 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.PROJECT_REMOVE, 'project.remove'),
             (AuditLogEntryEvent.PROJECT_SET_PUBLIC, 'project.set-public'),
             (AuditLogEntryEvent.PROJECT_SET_PRIVATE, 'project.set-private'),
+            (AuditLogEntryEvent.PROJECT_REQUEST_TRANSFER, 'project.request-transfer'),
+            (AuditLogEntryEvent.PROJECT_ACCEPT_TRANSFER, 'project.accept-transfer'),
             (AuditLogEntryEvent.ORG_ADD, 'org.create'),
             (AuditLogEntryEvent.ORG_EDIT, 'org.edit'),
             (AuditLogEntryEvent.ORG_REMOVE, 'org.remove'),
@@ -197,6 +201,10 @@ class AuditLogEntry(Model):
             return 'edited project %s' % (self.data['slug'], )
         elif self.event == AuditLogEntryEvent.PROJECT_REMOVE:
             return 'removed project %s' % (self.data['slug'], )
+        elif self.event == AuditLogEntryEvent.PROJECT_REQUEST_TRANSFER:
+            return 'requested to transfer project %s' % (self.data['slug'], )
+        elif self.event == AuditLogEntryEvent.PROJECT_ACCEPT_TRANSFER:
+            return 'accepted transfer of project %s' % (self.data['slug'], )
 
         elif self.event == AuditLogEntryEvent.TAGKEY_REMOVE:
             return 'removed tags matching %s = *' % (self.data['key'], )
diff --git a/src/sentry/templates/sentry/emails/transfer_project.html b/src/sentry/templates/sentry/emails/transfer_project.html
new file mode 100644
index 0000000000..d59a91dc1c
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/transfer_project.html
@@ -0,0 +1,14 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block main %}
+    <h3>Request for Project Transfer</h3>
+    <p>A project transfer request has been made:</p>
+    <p><pre>From Organization: <strong>{{ from_org }}</strong></pre></p>
+    <p><pre>Project: <strong>{{ project_name }}</strong></pre></p>
+    <p><pre>Requested by: {{ requester }}</pre></p>
+    <p><pre>Requested at: {{ request_time }}</pre></p>
+    <p>Approving the transfer for <strong>{{ project_name }}</strong> will take you to the finals steps for where you would like <strong>{{ project_name }}</strong> to be transferred to.</p>
+    <p><a href="{{ url }}" class="btn">Approve Transfer</a></p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/transfer_project.txt b/src/sentry/templates/sentry/emails/transfer_project.txt
new file mode 100644
index 0000000000..97363fc00f
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/transfer_project.txt
@@ -0,0 +1,9 @@
+Request for Project Transfer
+A project transfer request has been made:
+From Organization: {{ from_org }}
+Project: {{ project_name }}
+Requested by: {{ requester }}
+Requested at: {{ request_time }}>
+Approving the transfer for {{ project_name }} will take you to the finals steps for where you would like {{ project_name }} to be transferred to.
+
+Approve transfer: {{url}}
diff --git a/src/sentry/templates/sentry/projects/accept_project_transfer.html b/src/sentry/templates/sentry/projects/accept_project_transfer.html
new file mode 100644
index 0000000000..df6fbaea08
--- /dev/null
+++ b/src/sentry/templates/sentry/projects/accept_project_transfer.html
@@ -0,0 +1,29 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Accept Project Transfer" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <div class="page-header">
+    <h2>
+      {% trans "Approve Transfer Project Request" %}
+    </h2>
+  </div>
+  <form action="" method="post">
+    {% csrf_token %}
+    {{ form|as_crispy_errors }}
+    <p>Projects must be transferred to a specific <strong>Team</strong> in order to be moved over to another <strong>Organization</strong>. You can always change the team later under the <strong>Project Settings</strong>.</p>
+    <p>{% trans "Please select which" %} <strong>{% trans "Team" %}</strong> {% trans "you want for the project" %} <strong>{{ project.name }}</strong>.</p>
+    <div class="box">
+      <div class="box-content with-padding">
+          {{ form.team|as_crispy_field }}
+      </div>
+    </div>
+
+    <fieldset class="form-actions">
+      <button type="submit" class="btn btn-danger">{% trans "Transfer Project" %}</button>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 05ac210c6b..9f59d52d0d 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -108,6 +108,25 @@
       </div>
     </div>
 
+    <div class="box">
+      <div class="box-header">
+        <h3>{% trans "Transfer Project" %}</h3>
+      </div>
+      <div class="box-content with-padding">
+        {% if not ACCESS.project_admin %}
+        <p>{% trans "You do not have the required permission to remove this project." %}</p>
+        {% elif project.is_internal_project %}
+        <p>{% trans "This project cannot be removed. It is used internally by the Sentry server." %}</p>
+        {% else %}
+        <p class="clearfix">
+          <a href="{% url 'sentry-transfer-project' project.organization.slug project.slug %}" class="btn btn-danger pull-right">{% trans "Transfer Project" %}</a>
+          Transfer the <strong>{{ project.slug }}</strong> project and all related data. </br>
+          Careful, this action cannot be undone.
+        </p>
+        {% endif %}
+      </div>
+    </div>
+
     <div class="form-actions">
       <button type="submit" class="btn btn-primary btn-lg">{% trans "Save Changes" %}</button>
     </div>
@@ -211,11 +230,14 @@
         </a>
         {% if processing_issues > 0 %}
         <script>
-          ReactDOM.render(React.createElement(Sentry.Badge, {
-            text: '{{ processing_issues|safe }}',
-            isNew: true,
-          }), document.getElementById('processing-badge'));
-        </script>
+        ReactDOM.render(
+  React.createElement(Sentry.Badge, {
+    text: '{{ processing_issues|safe }}',
+    isNew: true
+  }),
+  document.getElementById('processing-badge')
+);
+</script>
         {% endif %}
     </li>
   </ul>
diff --git a/src/sentry/templates/sentry/projects/transfer.html b/src/sentry/templates/sentry/projects/transfer.html
new file mode 100644
index 0000000000..8f3d999b43
--- /dev/null
+++ b/src/sentry/templates/sentry/projects/transfer.html
@@ -0,0 +1,35 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Remove Project" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <div class="page-header">
+    <h2>
+      {% trans "Transfer Project" %}
+      <small>{{ project.name }}</small>
+    </h2>
+  </div>
+  <form action="" method="post">
+    {% csrf_token %}
+
+    <p><strong>{% trans "Transferring this project is permanent and cannot be undone!" %}</strong></p>
+
+    <p>{% trans "Please enter the Owner of the organization you would like to transfer this project to." %}</p>
+
+    {{ form|as_crispy_errors }}
+
+    {% for field in form %}
+        {{ field|as_crispy_field }}
+    {% endfor %}
+
+    <p>{% trans "A request will be emailed to the Owner in order to transfer" %} <strong> {{ project.name }} </strong> {%trans "to a new organization." %}</p>
+
+    <fieldset class="form-actions">
+      <button type="submit" class="btn btn-danger">{% trans "Send Transfer Project Request" %}</button>
+      <a href="{% url 'sentry-manage-project' project.organization.slug project.slug %}" class="btn btn-default">{% trans "Cancel" %}</a>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/utils/signing.py b/src/sentry/utils/signing.py
new file mode 100644
index 0000000000..f08269655e
--- /dev/null
+++ b/src/sentry/utils/signing.py
@@ -0,0 +1,26 @@
+"""
+Generic way to sign and unsign data for use in urls.
+"""
+from __future__ import absolute_import
+
+from base64 import urlsafe_b64encode, urlsafe_b64decode
+from django.core.signing import TimestampSigner
+from sentry.utils.json import dumps, loads
+
+SALT = 'sentry-generic-signing'
+
+
+def sign(**kwargs):
+    return urlsafe_b64encode(
+        TimestampSigner(salt=SALT).sign(dumps(kwargs))
+    ).rstrip('=')
+
+
+def unsign(data, max_age=60 * 60 * 24 * 2):
+    padding = len(data) % 4
+    return loads(
+        TimestampSigner(salt=SALT).unsign(
+            urlsafe_b64decode(data + b'=' * (4 - padding)),
+            max_age=max_age,
+        )
+    )
diff --git a/src/sentry/web/frontend/accept_project_transfer.py b/src/sentry/web/frontend/accept_project_transfer.py
new file mode 100644
index 0000000000..f2a8e59231
--- /dev/null
+++ b/src/sentry/web/frontend/accept_project_transfer.py
@@ -0,0 +1,116 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.contrib import messages
+from django.utils.translation import ugettext_lazy as _
+from sentry import roles
+from sentry.web.frontend.base import BaseView
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect, Http404
+from django.utils.encoding import force_str
+from django.core.signing import BadSignature, SignatureExpired
+from sentry.utils.signing import unsign
+from sentry.models import AuditLogEntryEvent, OrganizationMember, Organization, Team, TeamStatus, Project
+
+
+class AcceptProjectTransferForm(forms.Form):
+    team = forms.ChoiceField(choices=[])
+
+    def __init__(self, request, *args, **kwargs):
+        super(AcceptProjectTransferForm, self).__init__(*args, **kwargs)
+        teams = []
+        for o in Organization.objects.get_for_user(request.user):
+            # getting ALL the teams for the organization - not scoped to organizationmember
+            for t in Team.objects.filter(organization=o, status=TeamStatus.VISIBLE):
+                option = " %s - %s" % (t.name, o.name)
+                teams.append([t.id, option])
+
+        self.fields['team'].choices = teams
+        self.fields['team'].widget.choices = self.fields['team'].choices
+
+
+class AcceptProjectTransferView(BaseView):
+    required_scope = 'org:admin'
+    sudo_required = True
+
+    def get_form(self, request):
+        if request.method == 'POST':
+            return AcceptProjectTransferForm(request, request.POST, initial=request.POST)
+        return AcceptProjectTransferForm(request)
+
+    def handle(self, request, *args, **kwargs):
+        try:
+            d = request.GET['data']
+        except KeyError:
+            raise Http404
+
+        try:
+            data = unsign(force_str(d))
+        except BadSignature:
+            messages.add_message(
+                request, messages.ERROR,
+                _(u'Could not approve transfer, please make sure link is valid.')
+            )
+            return HttpResponseRedirect(
+                reverse('sentry')
+            )
+        except SignatureExpired:
+            messages.add_message(
+                request, messages.ERROR,
+                _(u'Project transfer link has expired!')
+            )
+            return HttpResponseRedirect(
+                reverse('sentry')
+            )
+
+        project_id = data['project_id']
+        user_id = data['user_id']
+        transaction_id = data['transaction_id']
+        from_organization_id = data['from_organization_id']
+
+        # check if user is still an owner
+        if not OrganizationMember.objects.filter(
+            role=roles.get_top_dog().id,
+            user__is_active=True,
+            user_id=user_id,
+        ).exists():
+            return HttpResponseRedirect(
+                reverse('sentry')
+            )
+
+        try:
+            project = Project.objects.get(id=project_id, organization_id=from_organization_id)
+        except Project.DoesNotExist:
+            messages.add_message(
+                request, messages.ERROR,
+                _(u'Project no longer exists')
+            )
+            return HttpResponseRedirect(
+                reverse('sentry')
+            )
+
+        form = self.get_form(request)
+        if form.is_valid():
+            # transfer the project
+            team_id = form.cleaned_data.get('team')
+            new_team = Team.objects.get(id=team_id)
+            project.transfer_to(new_team)
+
+            self.create_audit_entry(
+                request=request,
+                organization=project.organization,
+                target_object=project_id,
+                event=AuditLogEntryEvent.PROJECT_ACCEPT_TRANSFER,
+                data=project.get_audit_log_data(),
+                transaction_id=transaction_id,
+            )
+
+            return HttpResponseRedirect(
+                reverse('sentry-organization-home', args=[new_team.organization.slug])
+            )
+
+        context = {
+            'project': project,
+            'form': form,
+        }
+        return self.respond('sentry/projects/accept_project_transfer.html', context)
diff --git a/src/sentry/web/frontend/transfer_project.py b/src/sentry/web/frontend/transfer_project.py
new file mode 100644
index 0000000000..d1a0dea428
--- /dev/null
+++ b/src/sentry/web/frontend/transfer_project.py
@@ -0,0 +1,104 @@
+from __future__ import absolute_import
+
+import six
+from uuid import uuid4
+from six.moves.urllib.parse import urlencode
+
+from django import forms
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils import timezone
+from django.utils.translation import ugettext_lazy as _
+
+from sentry import roles, options
+from sentry.web.frontend.base import ProjectView
+from sentry.utils.email import MessageBuilder
+from sentry.utils.http import absolute_uri
+from sentry.utils.signing import sign
+from sentry.models import AuditLogEntryEvent, OrganizationMember
+
+
+class TransferProjectForm(forms.Form):
+    email = forms.CharField(
+        label=_('Organization Owner'),
+        max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('user@company.com')})
+    )
+
+
+class TransferProjectView(ProjectView):
+    required_scope = 'project:admin'
+    sudo_required = True
+
+    def get_form(self, request):
+        if request.method == 'POST':
+            return TransferProjectForm(request.POST)
+        return TransferProjectForm()
+
+    def handle(self, request, organization, team, project):
+        form = self.get_form(request)
+
+        if form.is_valid():
+            email = form.cleaned_data.get('email')
+            try:
+                owner = OrganizationMember.objects.filter(
+                    user__email__iexact=email,
+                    role=roles.get_top_dog().id,
+                    user__is_active=True,
+                )[0]
+            except IndexError:
+                messages.add_message(
+                    request, messages.ERROR, six.text_type(
+                        _('Could not find owner with that email')))
+                return self.respond('sentry/projects/transfer.html', context={'form': form})
+
+            transaction_id = uuid4().hex
+            url_data = sign(
+                actor_id=request.user.id,
+                from_organization_id=organization.id,
+                project_id=project.id,
+                user_id=owner.user_id,
+                transaction_id=transaction_id)
+            context = {
+                'email': email,
+                'from_org': organization.name,
+                'project_name': project.name,
+                'request_time': timezone.now(),
+                'url':
+                absolute_uri('/accept-transfer/') + '?' + urlencode({'data': url_data}),
+                'requester': request.user
+            }
+            MessageBuilder(
+                subject='%sRequest for Project Transfer' %
+                (options.get('mail.subject-prefix'), ),
+                template='sentry/emails/transfer_project.txt',
+                html_template='sentry/emails/transfer_project.html',
+                type='org.confirm_project_transfer_request',
+                context=context,
+            ).send_async([email])
+
+            self.create_audit_entry(
+                request=request,
+                organization=project.organization,
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_REQUEST_TRANSFER,
+                data=project.get_audit_log_data(),
+                transaction_id=transaction_id,
+            )
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _(u'A request was sent to move project %r to a different organization') %
+                (project.name.encode('utf-8'), )
+            )
+
+            return HttpResponseRedirect(
+                reverse('sentry-organization-home', args=[team.organization.slug])
+            )
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/projects/transfer.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7114b87c1f..bbfb4ca20f 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -66,6 +66,8 @@ from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
 from sentry.web.frontend.restore_organization import RestoreOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
+from sentry.web.frontend.transfer_project import TransferProjectView
+from sentry.web.frontend.accept_project_transfer import AcceptProjectTransferView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.sudo import SudoView
 from sentry.web.frontend.unsubscribe_issue_notifications import \
@@ -305,6 +307,9 @@ urlpatterns += patterns(
     url(r'^api/[^0]+/', generic_react_page_view),
     url(r'^out/$', OutView.as_view()),
 
+    url(r'^accept-transfer/$', AcceptProjectTransferView.as_view(),
+        name='sentry-accept-project-transfer'),
+
     # Organizations
     url(r'^(?P<organization_slug>[\w_-]+)/$', react_page_view, name='sentry-organization-home'),
     url(r'^organizations/new/$', generic_react_page_view),
@@ -413,6 +418,11 @@ urlpatterns += patterns(
         RemoveProjectView.as_view(),
         name='sentry-remove-project'
     ),
+    url(
+        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/transfer/$',
+        TransferProjectView.as_view(),
+        name='sentry-transfer-project'
+    ),
     url(
         r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/tags/$',
         ProjectTagsView.as_view(),
@@ -438,6 +448,8 @@ urlpatterns += patterns(
     url(r'^$', HomeView.as_view(), name='sentry'),
     url(r'^robots\.txt$', api.robots_txt, name='sentry-api-robots-txt'),
 
+
+
     # Force a 404 of favicon.ico.
     # This url is commonly requested by browsers, and without
     # blocking this, it was treated as a 200 OK for a react page view.
diff --git a/tests/sentry/web/frontend/test_accept_project_transfer.py b/tests/sentry/web/frontend/test_accept_project_transfer.py
new file mode 100644
index 0000000000..80edea66ca
--- /dev/null
+++ b/tests/sentry/web/frontend/test_accept_project_transfer.py
@@ -0,0 +1,122 @@
+from __future__ import absolute_import
+
+from uuid import uuid4
+from six.moves.urllib.parse import urlencode
+from django.core.urlresolvers import reverse
+from sentry.utils.signing import sign
+from sentry.models import Project
+
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class AcceptTransferProjectPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(AcceptTransferProjectPermissionTest, self).setUp()
+        self.project = self.create_project(team=self.team)
+        self.path = reverse('sentry-accept-project-transfer')
+
+    def test_team_admin_cannot_load(self):
+        self.assert_team_admin_cannot_access(self.path)
+
+
+class AcceptTransferProjectTest(TestCase):
+    def setUp(self):
+        super(AcceptTransferProjectTest, self).setUp()
+        self.owner = self.create_user(email='example@example.com', is_superuser=False)
+        self.from_organization = self.create_organization(name='love', owner=self.owner)
+        self.to_organization = self.create_organization(name='lust', owner=self.owner)
+        self.from_team = self.create_team(name='bar', organization=self.from_organization)
+        self.to_team = self.create_team(name='bub', organization=self.to_organization)
+        user = self.create_user('admin@example.com')
+        self.member = self.create_member(
+            organization=self.from_organization,
+            user=user,
+            role='admin',
+            teams=[self.from_team],
+        )
+        self.project = self.create_project(name='proj', team=self.from_team)
+        self.transaction_id = uuid4().hex
+        self.path = reverse('sentry-accept-project-transfer')
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path, 'POST')
+
+    def test_handle_incorrect_url_data(self):
+        self.login_as(self.owner)
+        url_data = sign(
+            actor_id=self.member.id,
+            # This is bad data
+            from_organization_id=9999999,
+            project_id=self.project.id,
+            user_id=self.owner.id,
+            transaction_id=self.transaction_id)
+        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))
+        assert resp.status_code == 302
+        resp = self.client.get(self.path)
+        assert resp.status_code == 404
+
+    def test_renders_template_with_signed_link(self):
+        self.login_as(self.owner)
+        url_data = sign(
+            actor_id=self.member.user_id,
+            from_organization_id=self.from_organization.id,
+            project_id=self.project.id,
+            user_id=self.owner.id,
+            transaction_id=self.transaction_id)
+
+        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/projects/accept_project_transfer.html')
+        assert resp.context['project'] == self.project
+
+    def test_transfers_project_to_correct_organization(self):
+        self.login_as(self.owner)
+        url_data = sign(
+            actor_id=self.member.user_id,
+            from_organization_id=self.from_organization.id,
+            project_id=self.project.id,
+            user_id=self.owner.id,
+            transaction_id=self.transaction_id)
+
+        url = self.path + '?' + urlencode({'data': url_data})
+        resp = self.client.post(url, data={'team': self.to_team.id})
+        assert resp['location'] == 'http://testserver' + \
+            reverse('sentry-organization-home', args=[self.to_team.organization.slug])
+
+        p = Project.objects.get(id=self.project.id)
+        assert p.organization_id == self.to_organization.id
+        assert p.team_id == self.to_team.id
+
+    def test_non_owner_cannot_transfer_project(self):
+        rando_user = self.create_user(email='blipp@bloop.com', is_superuser=False)
+        rando_org = self.create_organization(name='supreme beans')
+
+        self.login_as(rando_user)
+        url_data = sign(
+            actor_id=self.member.user_id,
+            from_organization_id=rando_org.id,
+            project_id=self.project.id,
+            user_id=rando_user.id,
+            transaction_id=self.transaction_id)
+
+        url = self.path + '?' + urlencode({'data': url_data})
+        resp = self.client.post(url, data={'team': self.to_team.id})
+        assert resp.status_code == 302
+        p = Project.objects.get(id=self.project.id)
+        assert p.organization_id == self.from_organization.id
+
+    def test_cannot_transfer_project_twice_from_same_org(self):
+        self.login_as(self.owner)
+        url_data = sign(
+            actor_id=self.member.user_id,
+            from_organization_id=self.from_organization.id,
+            project_id=self.project.id,
+            user_id=self.owner.id,
+            transaction_id=self.transaction_id)
+
+        url = self.path + '?' + urlencode({'data': url_data})
+        resp = self.client.post(url, data={'team': self.to_team.id})
+        assert resp['location'] == 'http://testserver' + \
+            reverse('sentry-organization-home', args=[self.to_team.organization.slug])
+        resp = self.client.get(url)
+        assert resp.status_code == 302
diff --git a/tests/sentry/web/frontend/test_transfer_project.py b/tests/sentry/web/frontend/test_transfer_project.py
new file mode 100644
index 0000000000..c6efa67118
--- /dev/null
+++ b/tests/sentry/web/frontend/test_transfer_project.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class TransferProjectPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(TransferProjectPermissionTest, self).setUp()
+        self.project = self.create_project(team=self.team)
+        self.path = reverse(
+            'sentry-transfer-project', args=[self.organization.slug, self.project.slug]
+        )
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_team_admin_can_load(self):
+        self.assert_team_admin_can_access(self.path)
+
+    def test_owner_can_load(self):
+        self.assert_owner_can_access(self.path)
+
+
+class TransferProjectTest(TestCase):
+    def setUp(self):
+        super(TransferProjectTest, self).setUp()
+        self.owner = self.create_user(email='example@example.com', is_superuser=False)
+        organization = self.create_organization(owner=self.owner)
+        self.team = self.create_team(name='bar', organization=organization)
+        self.project = self.create_project(name='bar', team=self.team)
+        self.path = reverse('sentry-transfer-project', args=[organization.slug, self.project.slug])
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path, 'POST')
+
+    def test_renders_template_with_get(self):
+        self.login_as(self.owner)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/projects/transfer.html')
+        assert resp.context['team'] == self.team
+        assert resp.context['project'] == self.project
+
+    def test_deletion_flow(self):
+        self.login_as(self.owner)
+        email = self.owner.email
+
+        resp = self.client.post(
+            self.path, format='json', data={
+                'email': email,
+            }
+        )
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + \
+            reverse('sentry-organization-home', args=[self.team.organization.slug])
