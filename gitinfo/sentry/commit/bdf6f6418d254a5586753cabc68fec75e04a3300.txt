commit bdf6f6418d254a5586753cabc68fec75e04a3300
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Tue May 19 08:59:00 2020 +0200

    ref(pii): Added hide caret logic (#18880)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
index 5abaa4f4c7..186b1ba285 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
@@ -7,7 +7,7 @@ import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
 
 import {RuleType, MethodType} from './types';
-import DataPrivacyRulesFormSource from './dataPrivacyRulesFormSource';
+import Source from './source';
 import DataPrivacyRulesFormField from './dataPrivacyRulesFormField';
 import DataPrivacyRulesFormSelectControl from './dataPrivacyRulesFormSelectControl';
 import DataPrivacyRulesFormEventId from './dataPrivacyRulesFormEventId';
@@ -22,7 +22,7 @@ type Rule = {
 };
 
 type EventIdProps = React.ComponentProps<typeof DataPrivacyRulesFormEventId>;
-type SourceProps = React.ComponentProps<typeof DataPrivacyRulesFormSource>;
+type SourceProps = React.ComponentProps<typeof Source>;
 type Errors = {
   customRegularExpression?: string;
   source?: string;
@@ -107,7 +107,7 @@ const DataPrivacyRulesForm = ({
         'Where to look. In the simplest case this can be an attribute name.'
       )}
     >
-      <DataPrivacyRulesFormSource
+      <Source
         onChange={(value: string) => {
           onChange('source', value);
         }}
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
similarity index 95%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
index 615b702b08..f9176ce08b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source.tsx
@@ -28,14 +28,16 @@ type State = {
   fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>>;
   activeSuggestion: number;
   showSuggestions: boolean;
+  hideCaret: boolean;
 };
 
-class DataPrivacyRulesFormSource extends React.Component<Props, State> {
+class Source extends React.Component<Props, State> {
   state: State = {
     suggestions: [],
     fieldValues: [],
     activeSuggestion: 0,
     showSuggestions: false,
+    hideCaret: false,
   };
 
   componentDidMount() {
@@ -232,6 +234,7 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
   handleClickOutside = () => {
     this.setState({
       showSuggestions: false,
+      hideCaret: false,
     });
   };
 
@@ -285,6 +288,7 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
         fieldValues,
         activeSuggestion: 0,
         showSuggestions: false,
+        hideCaret: false,
       },
       () => {
         this.handleChangeParentValue();
@@ -293,12 +297,19 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
   };
 
   scrollToSuggestion = () => {
-    const {activeSuggestion} = this.state;
+    const {activeSuggestion, hideCaret} = this.state;
+
     this.suggestionList?.current?.children[activeSuggestion].scrollIntoView({
       behavior: 'smooth',
       block: 'nearest',
       inline: 'start',
     });
+
+    if (!hideCaret) {
+      this.setState({
+        hideCaret: true,
+      });
+    }
   };
 
   handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
@@ -341,10 +352,10 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
 
   render() {
     const {error, disabled, value, onBlur} = this.props;
-    const {showSuggestions, suggestions, activeSuggestion} = this.state;
+    const {showSuggestions, suggestions, activeSuggestion, hideCaret} = this.state;
 
     return (
-      <Wrapper ref={this.selectorField}>
+      <Wrapper ref={this.selectorField} hideCaret={hideCaret}>
         <StyledTextField
           name="from"
           placeholder={t('Enter a custom attribute, variable or header name')}
@@ -395,11 +406,12 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
   }
 }
 
-export default DataPrivacyRulesFormSource;
+export default Source;
 
-const Wrapper = styled('div')`
+const Wrapper = styled('div')<{hideCaret?: boolean}>`
   position: relative;
   width: 100%;
+  ${p => p.hideCaret && `caret-color: transparent;`}
 `;
 
 const StyledTextField = styled(TextField)`
@@ -410,6 +422,9 @@ const StyledTextField = styled(TextField)`
   }
 
   z-index: 1002;
+  :focus {
+    outline: none;
+  }
 `;
 
 const SuggestionsWrapper = styled('ul')`
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
deleted file mode 100644
index 2afe266dd4..0000000000
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
+++ /dev/null
@@ -1,123 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`DataPrivacyRulesFormSource default render 1`] = `
-<DataPrivacyRulesFormSource
-  onChange={[MockFunction]}
-  suggestions={
-    Array [
-      Object {
-        "description": "everywhere",
-        "type": "value",
-        "value": "**",
-      },
-      Object {
-        "description": "attributes named \\"password\\"",
-        "type": "value",
-        "value": "password",
-      },
-      Object {
-        "description": "the exception value",
-        "type": "value",
-        "value": "$error.value",
-      },
-      Object {
-        "description": "the log message",
-        "type": "value",
-        "value": "$message",
-      },
-      Object {
-        "description": "the key \\"MyValue\\" in \\"Additional Data\\"",
-        "type": "value",
-        "value": "extra.MyValue",
-      },
-      Object {
-        "description": "everything in \\"Additional Data\\"",
-        "type": "value",
-        "value": "extra.**",
-      },
-      Object {
-        "description": "the X-Custom-Token HTTP header",
-        "type": "value",
-        "value": "$http.headers.x-custom-token",
-      },
-      Object {
-        "description": "the user IP address",
-        "type": "value",
-        "value": "$user.ip_address",
-      },
-      Object {
-        "description": "the local variable \\"foo\\"",
-        "type": "value",
-        "value": "$frame.vars.foo",
-      },
-      Object {
-        "description": "the timezone in the device context",
-        "type": "value",
-        "value": "contexts.device.timezone",
-      },
-      Object {
-        "description": "the tag \\"server_name\\"",
-        "type": "value",
-        "value": "tags.server_name",
-      },
-    ]
-  }
-  value="$string"
->
-  <Wrapper>
-    <div
-      className="css-8p5quz-Wrapper e5vbseb0"
-    >
-      <StyledTextField
-        autoComplete="off"
-        disabled={false}
-        hideErrorMessage={false}
-        name="from"
-        onChange={[Function]}
-        onFocus={[Function]}
-        onKeyDown={[Function]}
-        placeholder="Enter a custom attribute, variable or header name"
-        required={false}
-        value="$string"
-      >
-        <TextField
-          autoComplete="off"
-          className="css-12y0yqb-StyledTextField e5vbseb1"
-          disabled={false}
-          hideErrorMessage={false}
-          name="from"
-          onChange={[Function]}
-          onFocus={[Function]}
-          onKeyDown={[Function]}
-          placeholder="Enter a custom attribute, variable or header name"
-          required={false}
-          value="$string"
-        >
-          <div
-            className="css-12y0yqb-StyledTextField e5vbseb1 control-group"
-          >
-            <div
-              className="controls"
-            >
-              <input
-                autoComplete="off"
-                className="form-control"
-                disabled={false}
-                id="id-from"
-                name="from"
-                onChange={[Function]}
-                onFocus={[Function]}
-                onKeyDown={[Function]}
-                placeholder="Enter a custom attribute, variable or header name"
-                required={false}
-                type="text"
-                value="$string"
-              />
-            </div>
-          </div>
-        </TextField>
-      </StyledTextField>
-    </div>
-  </Wrapper>
-</DataPrivacyRulesFormSource>
-`;
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesFormSource.spec.tsx b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
similarity index 95%
rename from tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesFormSource.spec.tsx
rename to tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
index 8ceac9e5ce..30777cfbef 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesFormSource.spec.tsx
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/source.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import DataPrivacyRulesFormSource from 'app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource';
+import Source from 'app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/source';
 import {
   binaryOperatorSuggestions,
   unaryOperatorSuggestions,
@@ -12,9 +12,9 @@ function renderComponent({
   value = '$string',
   onChange = jest.fn(),
   ...props
-}: Partial<DataPrivacyRulesFormSource['props']>) {
+}: Partial<Source['props']>) {
   return mountWithTheme(
-    <DataPrivacyRulesFormSource
+    <Source
       suggestions={defaultSuggestions}
       onChange={onChange}
       value={value}
@@ -23,7 +23,7 @@ function renderComponent({
   );
 }
 
-describe('DataPrivacyRulesFormSource', () => {
+describe('Source', () => {
   it('default render', () => {
     const wrapper = renderComponent({});
     expect(wrapper.find('input').prop('value')).toBe('$string');
