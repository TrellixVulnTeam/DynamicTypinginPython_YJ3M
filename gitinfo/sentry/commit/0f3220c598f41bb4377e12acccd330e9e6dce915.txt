commit 0f3220c598f41bb4377e12acccd330e9e6dce915
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jun 15 15:00:37 2020 -0700

    ref(eslint): Fix strict eslint errors (namely `no-unused-vars`) (#19357)
    
    We changed to use `@typescript-eslint/no-unused-vars`, however we still had a lot of one-off disabling of `eslint/no-unused-vars`.
    
    Instead of disabling the rule, destructure with an alias that starts with `_` so that lint engine ignores it.
    
    We should follow this up by making `no-unused-vars` a default rule.
    
    Also fixes warnings about sort order for React components.

diff --git a/src/sentry/static/sentry/app/components/charts/tableChart.jsx b/src/sentry/static/sentry/app/components/charts/tableChart.jsx
index 85c575239d..fae273148f 100644
--- a/src/sentry/static/sentry/app/components/charts/tableChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/tableChart.jsx
@@ -6,32 +6,6 @@ import {Panel, PanelHeader, PanelItem} from 'app/components/panels';
 
 export const TableChart = styled(
   class TableChartComponent extends React.Component {
-    static propTypes = {
-      data: PropTypes.arrayOf(PropTypes.any),
-      /**
-       * The column index where your data starts.
-       * This is used to calculate totals.
-       *
-       * Will not work if you have mixed string/number columns
-       */
-      dataStartIndex: PropTypes.number,
-      widths: PropTypes.arrayOf(PropTypes.number),
-      // Height of body
-      bodyHeight: PropTypes.string,
-      getValue: PropTypes.func,
-      renderTableHeader: PropTypes.func,
-      renderBody: PropTypes.func,
-      renderHeaderCell: PropTypes.func,
-      renderDataCell: PropTypes.func,
-      shadeRowPercentage: PropTypes.bool,
-      showRowTotal: PropTypes.bool,
-      showColumnTotal: PropTypes.bool,
-      rowTotalLabel: PropTypes.string,
-      columnTotalLabel: PropTypes.string,
-      // props to pass to PanelHeader
-      headerProps: PropTypes.object,
-    };
-
     static get defaultProps() {
       // Default renderer for Table Header
       const defaultRenderTableHeader = ({
@@ -220,6 +194,32 @@ export const TableChart = styled(
       };
     }
 
+    static propTypes = {
+      data: PropTypes.arrayOf(PropTypes.any),
+      /**
+       * The column index where your data starts.
+       * This is used to calculate totals.
+       *
+       * Will not work if you have mixed string/number columns
+       */
+      dataStartIndex: PropTypes.number,
+      widths: PropTypes.arrayOf(PropTypes.number),
+      // Height of body
+      bodyHeight: PropTypes.string,
+      getValue: PropTypes.func,
+      renderTableHeader: PropTypes.func,
+      renderBody: PropTypes.func,
+      renderHeaderCell: PropTypes.func,
+      renderDataCell: PropTypes.func,
+      shadeRowPercentage: PropTypes.bool,
+      showRowTotal: PropTypes.bool,
+      showColumnTotal: PropTypes.bool,
+      rowTotalLabel: PropTypes.string,
+      columnTotalLabel: PropTypes.string,
+      // props to pass to PanelHeader
+      headerProps: PropTypes.object,
+    };
+
     // TODO(billy): memoize?
     getTotals(rows) {
       if (!rows) {
diff --git a/src/sentry/static/sentry/app/components/dateTime.tsx b/src/sentry/static/sentry/app/components/dateTime.tsx
index 07c82c63cf..77994edf31 100644
--- a/src/sentry/static/sentry/app/components/dateTime.tsx
+++ b/src/sentry/static/sentry/app/components/dateTime.tsx
@@ -63,11 +63,11 @@ class DateTime extends React.Component<Props> {
   render() {
     const {
       date,
-      seconds, // eslint-disable-line no-unused-vars
-      shortDate, // eslint-disable-line no-unused-vars
-      dateOnly, // eslint-disable-line no-unused-vars
       utc,
-      timeOnly: _timeOnly, // eslint-disable-line no-unused-vars
+      seconds: _seconds,
+      shortDate: _shortDate,
+      dateOnly: _dateOnly,
+      timeOnly: _timeOnly,
       ...carriedProps
     } = this.props;
     const user = ConfigStore.get('user');
diff --git a/src/sentry/static/sentry/app/components/deviceName.tsx b/src/sentry/static/sentry/app/components/deviceName.tsx
index b00c35341b..b1605b459c 100644
--- a/src/sentry/static/sentry/app/components/deviceName.tsx
+++ b/src/sentry/static/sentry/app/components/deviceName.tsx
@@ -43,8 +43,6 @@ export default class DeviceName extends React.Component<Props, State> {
     };
   }
 
-  private _isMounted?: boolean;
-
   componentDidMount() {
     // This is to handle react's warning on calling setState for unmounted components
     // Since we can't cancel promises, we need to do this
@@ -65,6 +63,8 @@ export default class DeviceName extends React.Component<Props, State> {
     this._isMounted = false;
   }
 
+  private _isMounted?: boolean;
+
   render() {
     const {value, children} = this.props;
     const {iOSDeviceList} = this.state;
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
index 695a137bd5..a4bb2af4fb 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
@@ -25,11 +25,7 @@ class DropdownAutoComplete extends React.Component {
       <DropdownAutoCompleteMenu {...props}>
         {renderProps => {
           // Don't pass `onClick` from `getActorProps`
-          const {
-            //eslint-disable-next-line no-unused-vars
-            onClick,
-            ...actorProps
-          } = renderProps.getActorProps();
+          const {onClick: _onClick, ...actorProps} = renderProps.getActorProps();
 
           return (
             <Actor
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
index 7cd0ce7472..9e8b3cf6d7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
@@ -55,6 +55,10 @@ export class Provider extends React.Component<PropType, StateType> {
     dividerPosition: DEFAULT_DIVIDER_POSITION,
   };
 
+  componentWillUnmount() {
+    this.cleanUpListeners();
+  }
+
   previousUserSelect: UserSelectValues | null = null;
   dividerHandlePosition: number = DEFAULT_DIVIDER_POSITION;
   isDragging: boolean = false;
@@ -188,10 +192,6 @@ export class Provider extends React.Component<PropType, StateType> {
     }
   };
 
-  componentWillUnmount() {
-    this.cleanUpListeners();
-  }
-
   render() {
     const childrenProps = {
       dividerPosition: this.state.dividerPosition,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
index 6825ba8061..1f126ec47c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
@@ -92,6 +92,10 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
     viewWindowEnd: 1,
   };
 
+  componentWillUnmount() {
+    this.cleanUpListeners();
+  }
+
   previousUserSelect: UserSelectValues | null = null;
 
   hasInteractiveLayer = (): boolean => !!this.props.interactiveLayerRef.current;
@@ -363,10 +367,6 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
     }
   };
 
-  componentWillUnmount() {
-    this.cleanUpListeners();
-  }
-
   render() {
     const childrenProps = {
       isDragging: this.state.isDragging,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index 4f698fd3d6..be614d9929 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -49,8 +49,6 @@ type State = {
 };
 
 class TraceView extends React.PureComponent<Props, State> {
-  minimapInteractiveRef = React.createRef<HTMLDivElement>();
-
   constructor(props: Props) {
     super(props);
 
@@ -67,6 +65,8 @@ class TraceView extends React.PureComponent<Props, State> {
     }
   }
 
+  minimapInteractiveRef = React.createRef<HTMLDivElement>();
+
   async filterOnSpans(searchQuery: string | undefined) {
     if (!searchQuery) {
       // reset
diff --git a/src/sentry/static/sentry/app/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
index 7a04ea2d32..93b8e2bcb1 100644
--- a/src/sentry/static/sentry/app/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
@@ -45,13 +45,15 @@ export default class RangeField extends InputField {
     if (this.props.disabled) {
       suffixClassNames += ' disabled';
     }
+
+    // eslint-disable-next-line react/no-find-dom-node
     $(ReactDOM.findDOMNode(this.refs.input))
-      .on('slider:ready', (e, data) => {
+      .on('slider:ready', (_e, data) => {
         const value = parseInt(data.value, 10);
         $value.appendTo(data.el);
         $value.html(this.props.formatLabel(value));
       })
-      .on('slider:changed', (e, data) => {
+      .on('slider:changed', (_e, data) => {
         const value = parseInt(data.value, 10);
         $value.html(this.props.formatLabel(value));
         this.setValue(value);
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index a4a26f5263..97bad505fe 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -116,8 +116,7 @@ class LazyLoad extends React.Component {
 
   render() {
     const {Component, error} = this.state;
-    // eslint-disable-next-line no-unused-vars
-    const {hideBusy, hideError, component, ...otherProps} = this.props;
+    const {hideBusy, hideError, component: _component, ...otherProps} = this.props;
 
     if (error && !hideError) {
       return (
diff --git a/src/sentry/static/sentry/app/components/letterAvatar.tsx b/src/sentry/static/sentry/app/components/letterAvatar.tsx
index 5210ddc8bf..6d1d8eed63 100644
--- a/src/sentry/static/sentry/app/components/letterAvatar.tsx
+++ b/src/sentry/static/sentry/app/components/letterAvatar.tsx
@@ -65,7 +65,13 @@ type LetterAvatarProps = React.ComponentProps<'svg'> & Props;
  * the svg, etc) will also need to be changed there.
  */
 const LetterAvatar = styled(
-  ({identifier, displayName, round, forwardedRef, ...props}: LetterAvatarProps) => (
+  ({
+    identifier,
+    displayName,
+    round: _round,
+    forwardedRef,
+    ...props
+  }: LetterAvatarProps) => (
     <svg ref={forwardedRef} viewBox="0 0 120 120" {...props}>
       <rect
         x="0"
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
index d10d94c62c..83a1cdddd0 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/index.jsx
@@ -26,6 +26,11 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
 class DateRange extends React.Component {
+  static getTimeStringFromDate = date =>
+    moment(date)
+      .local()
+      .format('HH:mm');
+
   static propTypes = {
     /**
      * Start date value for absolute date selector
@@ -74,21 +79,16 @@ class DateRange extends React.Component {
     organization: SentryTypes.Organization,
   };
 
+  static contextTypes = {
+    router: PropTypes.object,
+  };
+
   static defaultProps = {
     showAbsolute: true,
     showRelative: false,
     maxPickableDays: MAX_PICKABLE_DAYS,
   };
 
-  static contextTypes = {
-    router: PropTypes.object,
-  };
-
-  static getTimeStringFromDate = date =>
-    moment(date)
-      .local()
-      .format('HH:mm');
-
   handleSelectDateRange = ({selection}) => {
     const {onChange} = this.props;
     const {startDate, endDate} = selection;
diff --git a/src/sentry/static/sentry/app/components/shareIssue.jsx b/src/sentry/static/sentry/app/components/shareIssue.jsx
index e16ced7835..cd15221f27 100644
--- a/src/sentry/static/sentry/app/components/shareIssue.jsx
+++ b/src/sentry/static/sentry/app/components/shareIssue.jsx
@@ -33,6 +33,7 @@ class ShareUrlContainer extends React.Component {
     if (!this.urlRef) {
       return;
     }
+    // eslint-disable-next-line react/no-find-dom-node
     selectText(ReactDOM.findDOMNode(this.urlRef));
   };
 
@@ -41,6 +42,7 @@ class ShareUrlContainer extends React.Component {
 
     if (this.urlRef) {
       // Always select url if it's available
+      // eslint-disable-next-line react/no-find-dom-node
       selectText(ReactDOM.findDOMNode(this.urlRef));
     }
   };
@@ -186,7 +188,7 @@ class ShareIssue extends React.Component {
   };
 
   // State of confirm modal so we can keep dropdown menu opn
-  handleConfirmCancel = e => (this.hasConfirmModal = false);
+  handleConfirmCancel = () => (this.hasConfirmModal = false);
   handleConfirmReshare = () => (this.hasConfirmModal = true);
 
   render() {
diff --git a/src/sentry/static/sentry/app/stores/pluginsStore.jsx b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
index bd29570819..c064cea07e 100644
--- a/src/sentry/static/sentry/app/stores/pluginsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
@@ -8,11 +8,7 @@ const PluginsStore = Reflux.createStore({
   },
 
   getState() {
-    const {
-      //eslint-disable-next-line no-unused-vars
-      plugins,
-      ...state
-    } = this.state;
+    const {plugins: _plugins, ...state} = this.state;
 
     return {
       ...state,
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
index bd025eb506..62512b1298 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
@@ -4,20 +4,10 @@ import {getExternal, getInternal} from 'app/views/discover/aggregations/utils';
 import {getQueryStringFromQuery} from 'app/views/discover/utils';
 
 export function getDiscoverUrlPathFromDiscoverQuery({organization, selection, query}) {
-  const {
-    datetime,
-    environments, // eslint-disable-line no-unused-vars
-    ...restSelection
-  } = selection;
+  const {datetime, environments: _environments, ...restSelection} = selection;
 
   // Discover does not support importing these
-  const {
-    groupby, // eslint-disable-line no-unused-vars
-    rollup, // eslint-disable-line no-unused-vars
-    name, // eslint-disable-line no-unused-vars
-    orderby,
-    ...restQuery
-  } = query;
+  const {groupby: _groupby, rollup: _rollup, name: _name, orderby, ...restQuery} = query;
 
   const orderbyTimeIndex = orderby.indexOf('time');
   const visual = orderbyTimeIndex === -1 ? 'table' : 'line-by-day';
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx
index 021d1c2e8f..45bae15d9e 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx
@@ -6,12 +6,7 @@ import {getUtcDateString} from 'app/utils/dates';
 import {getDiscoverConditionsToSearchString} from './getDiscoverConditionsToSearchString';
 
 export function getEventsUrlPathFromDiscoverQuery({organization, selection, query}) {
-  const {
-    projects,
-    datetime,
-    environments, // eslint-disable-line no-unused-vars
-    ...restSelection
-  } = selection;
+  const {projects, datetime, environments: _environments, ...restSelection} = selection;
 
   return `/organizations/${organization.slug}/events/?${qs.stringify(
     pickBy({
diff --git a/src/sentry/static/sentry/app/views/discover/result/index.tsx b/src/sentry/static/sentry/app/views/discover/result/index.tsx
index 353870db0a..70c4c78fe3 100644
--- a/src/sentry/static/sentry/app/views/discover/result/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/index.tsx
@@ -53,9 +53,6 @@ type ResultState = {
 };
 
 class Result extends React.Component<ResultProps, ResultState> {
-  // This is the ref of the table container component
-  private container: any;
-
   constructor(props: ResultProps) {
     super(props);
     this.state = {
@@ -90,6 +87,9 @@ class Result extends React.Component<ResultProps, ResultState> {
     window.removeEventListener('resize', this.throttledUpdateDimensions);
   }
 
+  // This is the ref of the table container component
+  private container: any;
+
   setDimensions = (ref: any) => {
     this.container = ref;
     if (ref && this.state.height === null) {
diff --git a/src/sentry/static/sentry/app/views/discover/utils.tsx b/src/sentry/static/sentry/app/views/discover/utils.tsx
index 6efc6e96d1..d99f0f8f98 100644
--- a/src/sentry/static/sentry/app/views/discover/utils.tsx
+++ b/src/sentry/static/sentry/app/views/discover/utils.tsx
@@ -127,8 +127,14 @@ export function queryHasChanged(prev: string, next: string): boolean {
  * our internal representation of queries.
  */
 export function parseSavedQuery(savedQuery: any): SavedQuery {
-  // eslint-disable-next-line no-unused-vars
-  const {id, name, dateCreated, dateUpdated, createdBy, ...query} = savedQuery;
+  const {
+    id: _id,
+    name: _name,
+    dateCreated: _dateCreated,
+    dateUpdated: _dateUpdated,
+    createdBy: _createdBy,
+    ...query
+  } = savedQuery;
   return query;
 }
 
@@ -138,7 +144,7 @@ export function fetchSavedQuery(organization: any, queryId: string): Promise<any
 
   return api.requestPromise(endpoint, {
     method: 'GET',
-  } as any); // TODO: Remove as any
+  } as any); // TODO(ts): Remove as any
 }
 
 export function fetchSavedQueries(organization: any): Promise<any> {
@@ -148,7 +154,7 @@ export function fetchSavedQueries(organization: any): Promise<any> {
   return api.requestPromise(endpoint, {
     method: 'GET',
     query: {all: 1, query: 'version:1', sortBy: '-dateUpdated'},
-  } as any); // TODO: Remove as any
+  } as any); // TODO(ts): Remove as any
 }
 
 export function createSavedQuery(organization: any, data: any): Promise<any> {
@@ -158,7 +164,7 @@ export function createSavedQuery(organization: any, data: any): Promise<any> {
   return api.requestPromise(endpoint, {
     data,
     method: 'POST',
-  } as any); // TODO: Remove as any
+  } as any); // TODO(ts): Remove as any
 }
 
 export function updateSavedQuery(organization: any, id: any, data: any): Promise<any> {
@@ -168,7 +174,7 @@ export function updateSavedQuery(organization: any, id: any, data: any): Promise
   return api.requestPromise(endpoint, {
     data,
     method: 'PUT',
-  } as any); // TODO: Remove as any
+  } as any); // TODO(ts): Remove as any
 }
 
 export function deleteSavedQuery(organization: any, id: any): Promise<any> {
@@ -177,7 +183,7 @@ export function deleteSavedQuery(organization: any, id: any): Promise<any> {
 
   return api.requestPromise(endpoint, {
     method: 'DELETE',
-  } as any); // TODO: Remove as any
+  } as any); // TODO(ts): Remove as any
 }
 
 /**
diff --git a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
index f6d6fb4221..30caa22972 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
@@ -126,8 +126,13 @@ class CreateSampleEventButton extends React.Component<Props, State> {
   };
 
   render() {
-    // eslint-disable-next-line no-unused-vars
-    const {api, organization, project, source, ...props} = this.props;
+    const {
+      api: _api,
+      organization: _organization,
+      project: _project,
+      source: _source,
+      ...props
+    } = this.props;
     const {creating} = this.state;
 
     return (
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
index 33ae7c23d4..c8f4e748a0 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
@@ -41,8 +41,12 @@ export default class ApiForm extends React.Component {
   };
 
   render() {
-    // eslint-disable-next-line no-unused-vars
-    const {onSubmit, apiMethod, apiEndpoint, ...otherProps} = this.props;
+    const {
+      onSubmit: _onSubmit,
+      apiMethod: _apiMethod,
+      apiEndpoint: _apiEndpoint,
+      ...otherProps
+    } = this.props;
 
     return <Form onSubmit={this.onSubmit} {...otherProps} />;
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
index e489971663..d934145879 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
@@ -89,23 +89,20 @@ type State = {
 };
 
 export default class PermissionSelection extends React.Component<Props, State> {
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-    form: PropTypes.object,
-  };
-
   static propTypes = {
     permissions: PropTypes.object.isRequired,
     onChange: PropTypes.func.isRequired,
     appPublished: PropTypes.bool,
   };
 
-  constructor(props) {
-    super(props);
-    this.state = {
-      permissions: this.props.permissions,
-    };
-  }
+  static contextTypes = {
+    router: PropTypes.object.isRequired,
+    form: PropTypes.object,
+  };
+
+  state = {
+    permissions: this.props.permissions,
+  };
 
   /**
    * Converts the "Permission" values held in `state` to a list of raw
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx
index eff7df5569..24c35403e8 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx
@@ -57,7 +57,7 @@ class OnboardingHovercard extends React.Component<Props, State> {
   };
 
   render() {
-    const {children, organization, location, ...props} = this.props;
+    const {children, organization: _org, location: _location, ...props} = this.props;
 
     if (!this.shouldShowHovercard) {
       return children;
