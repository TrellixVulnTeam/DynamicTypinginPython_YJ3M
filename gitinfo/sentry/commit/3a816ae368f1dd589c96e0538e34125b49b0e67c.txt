commit 3a816ae368f1dd589c96e0538e34125b49b0e67c
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri Oct 12 12:14:01 2018 -0700

    feat(api): Add project filters to org events endpoint (#10112)

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 439ad76b64..a6dfb8de4b 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -1,9 +1,13 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
-from django.utils import timezone
 from functools32 import partial
 
+from django.utils import timezone
+
+from rest_framework.exceptions import PermissionDenied
+from rest_framework.response import Response
+
 from sentry import roles
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
@@ -16,6 +20,10 @@ from sentry.utils.snuba import raw_query
 class OrganizationEventsEndpoint(OrganizationEndpoint):
 
     def get_project_ids(self, request, organization):
+        project_ids = set(map(int, request.GET.getlist('project')))
+
+        requested_projects = project_ids.copy()
+
         om_role = OrganizationMember.objects.filter(
             user=request.user,
             organization=organization,
@@ -36,7 +44,15 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
                 status=ProjectStatus.VISIBLE,
             )
 
-        return list(qs.values_list('id', flat=True))
+        if project_ids:
+            qs = qs.filter(id__in=project_ids)
+
+        project_ids = set(qs.values_list('id', flat=True))
+
+        if requested_projects and project_ids != requested_projects:
+            raise PermissionDenied
+
+        return list(project_ids)
 
     def get(self, request, organization):
         query = request.GET.get('query')
@@ -46,13 +62,18 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
 
         now = timezone.now()
 
+        try:
+            project_ids = self.get_project_ids(request, organization)
+        except ValueError:
+            return Response({'detail': 'Invalid project ids'}, status=400)
+
         data_fn = partial(
             # extract 'data' from raw_query result
             lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
             start=now - timedelta(days=90),
             end=now,
             conditions=conditions,
-            filter_keys={'project_id': self.get_project_ids(request, organization)},
+            filter_keys={'project_id': project_ids},
             selected_columns=SnubaEvent.selected_columns,
             orderby='-timestamp',
         )
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index e24cfedd21..a749aee58b 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -63,3 +63,63 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
         assert len(response.data) == 1
         assert response.data[0]['eventID'] == event_2.event_id
         assert response.data[0]['message'] == 'delet the data'
+
+    def test_project_filtering(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        project2 = self.create_project(organization=org, teams=[team])
+        project3 = self.create_project(organization=org)
+        group = self.create_group(project=project)
+        group2 = self.create_group(project=project2)
+        group3 = self.create_group(project=project3)
+        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event('b' * 32, group=group2, datetime=self.min_ago)
+        self.create_event('c' * 32, group=group3, datetime=self.min_ago)
+
+        base_url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+
+        # test bad project id
+        url = '%s?project=abc' % (base_url,)
+        response = self.client.get(url, format='json')
+        assert response.status_code == 400
+
+        # test including project user doesn't have access to
+        url = '%s?project=%s&project=%s' % (base_url, project.id, project3.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 403
+
+        # test filtering by project
+        url = '%s?project=%s' % (base_url, project.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
+            [
+                event_1.event_id,
+            ]
+        )
+
+        # test only returns events from project user has access to
+        response = self.client.get(base_url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
+            [
+                event_1.event_id,
+                event_2.event_id,
+            ]
+        )
