commit 00ed5171451964a7f29d905e272fb30d0a090c83
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 4 20:32:15 2012 -0800

    Added tests for extract_auth_vars

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 7fc1992ce4..4da65ead64 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -1,3 +1,10 @@
+"""
+sentry.coreapi
+~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 import base64
 import datetime
 import logging
diff --git a/sentry/utils/auth.py b/sentry/utils/auth.py
index 7e22098628..e833224324 100644
--- a/sentry/utils/auth.py
+++ b/sentry/utils/auth.py
@@ -1,12 +1,21 @@
+"""
+sentry.utils.auth
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 import hmac
 from django.utils.hashcompat import sha_constructor
 from sentry.conf import settings
 
+
 def get_signature(message, timestamp, key=None):
     if not key:
         key = settings.KEY
     return hmac.new(key, '%s %s' % (timestamp, message), sha_constructor).hexdigest()
 
+
 def get_auth_header(signature, timestamp, client, api_key=None):
     header = [
         ('sentry_timestamp', timestamp),
@@ -18,5 +27,6 @@ def get_auth_header(signature, timestamp, client, api_key=None):
 
     return 'Sentry %s' % ', '.join('%s=%s' % (k, v) for k, v in header)
 
+
 def parse_auth_header(header):
-    return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
\ No newline at end of file
+    return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
diff --git a/tests/api/tests.py b/tests/api/tests.py
index e621d5a09d..91cb3acd74 100644
--- a/tests/api/tests.py
+++ b/tests/api/tests.py
@@ -8,7 +8,7 @@ from django.contrib.auth.models import User
 
 from sentry.models import Project
 from sentry.coreapi import project_from_id, project_from_api_key_and_id, \
-  APIUnauthorized
+  extract_auth_vars, APIUnauthorized
 
 from tests.base import TestCase
 
@@ -51,3 +51,35 @@ class APITest(TestCase):
         # invalid api_key
         with self.assertRaises(APIUnauthorized):
             project_from_api_key_and_id(1, self.project.id)
+
+    def test_valid_extract_auth_vars_v3(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry key=value, biz=baz'}
+        result = extract_auth_vars(request)
+        self.assertNotEquals(result, None)
+        self.assertTrue('key' in result)
+        self.assertEquals(result['key'], 'value')
+        self.assertTrue('biz' in result)
+        self.assertEquals(result['biz'], 'baz')
+
+    def test_invalid_extract_auth_vars_v3(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'foobar'}
+        result = extract_auth_vars(request)
+        self.assertEquals(result, None)
+
+    def test_valid_extract_auth_vars_v2(self):
+        request = mock.Mock()
+        request.META = {'HTTP_AUTHORIZATION': 'Sentry key=value, biz=baz'}
+        result = extract_auth_vars(request)
+        self.assertNotEquals(result, None)
+        self.assertTrue('key' in result)
+        self.assertEquals(result['key'], 'value')
+        self.assertTrue('biz' in result)
+        self.assertEquals(result['biz'], 'baz')
+
+    def test_invalid_extract_auth_vars_v2(self):
+        request = mock.Mock()
+        request.META = {'HTTP_AUTHORIZATION': 'foobar'}
+        result = extract_auth_vars(request)
+        self.assertEquals(result, None)
