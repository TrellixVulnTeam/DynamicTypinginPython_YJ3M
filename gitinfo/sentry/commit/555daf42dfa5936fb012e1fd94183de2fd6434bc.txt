commit 555daf42dfa5936fb012e1fd94183de2fd6434bc
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Feb 24 11:01:43 2020 -0800

    chore(ts): Convert marked (#17174)

diff --git a/package.json b/package.json
index 9719eef57e..6f1f9186a2 100644
--- a/package.json
+++ b/package.json
@@ -30,11 +30,13 @@
     "@types/clipboard": "^2.0.1",
     "@types/color": "^3.0.0",
     "@types/create-react-class": "^15.6.2",
+    "@types/dompurify": "^2.0.1",
     "@types/echarts": "^4.1.11",
     "@types/jest": "^24.0.17",
     "@types/jquery": "^2.0.53",
     "@types/js-cookie": "^2.2.2",
     "@types/lodash": "^4.14.134",
+    "@types/marked": "^0.7.2",
     "@types/moment-timezone": "^0.5.12",
     "@types/papaparse": "^4.5.11",
     "@types/react": "~16.9.19",
diff --git a/src/sentry/static/sentry/app/utils/marked.jsx b/src/sentry/static/sentry/app/utils/marked.jsx
deleted file mode 100644
index 893579cb7b..0000000000
--- a/src/sentry/static/sentry/app/utils/marked.jsx
+++ /dev/null
@@ -1,70 +0,0 @@
-import marked from 'marked'; // eslint-disable-line no-restricted-imports
-import dompurify from 'dompurify';
-
-function isSafeHref(href, pattern) {
-  try {
-    return pattern.test(decodeURIComponent(unescape(href)));
-  } catch (e) {
-    return false;
-  }
-}
-
-// We need to implement our own marked Renderer to not render
-// potentially malicious uris.
-// This is copy/pasted from
-// https://github.com/chjj/marked/blob/master/lib/marked.js#L869-L888
-// and modified.
-function Renderer() {
-  return marked.Renderer.apply(this, arguments);
-}
-Object.assign(Renderer.prototype, marked.Renderer.prototype);
-
-// Only https and mailto, (e.g. no javascript, vbscript, data protocols)
-const safeLinkPattern = /^(https?:|mailto:)/i;
-
-Renderer.prototype.link = function(href, title, text) {
-  // For a bad link, just return the plain text href
-  if (this.options.sanitize && !isSafeHref(href, safeLinkPattern)) {
-    return href;
-  }
-
-  let out = '<a href="' + href + '"';
-  if (title) {
-    out += ' title="' + title + '"';
-  }
-  out += '>' + text + '</a>';
-  return dompurify.sanitize(out);
-};
-
-// Only allow http(s) for image tags
-const safeImagePattern = /^https?:\/\/./i;
-
-Renderer.prototype.image = function(href, title, text) {
-  // For a bad image, return an empty string
-  if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {
-    return '';
-  }
-
-  let out = '<img src="' + href + '" alt="' + text + '"';
-  if (title) {
-    out += ' title="' + title + '"';
-  }
-  out += this.options.xhtml ? '/>' : '>';
-  return out;
-};
-
-marked.setOptions({
-  renderer: new Renderer(),
-  sanitize: true,
-});
-
-const noParagraphRenderer = new Renderer();
-noParagraphRenderer.paragraph = s => s;
-
-const singleLineRenderer = (text, options) =>
-  dompurify.sanitize(marked(text, {...options, renderer: noParagraphRenderer}));
-
-const sanitizedMarked = (...args) => dompurify.sanitize(marked(...args));
-
-export {singleLineRenderer};
-export default sanitizedMarked;
diff --git a/src/sentry/static/sentry/app/utils/marked.tsx b/src/sentry/static/sentry/app/utils/marked.tsx
new file mode 100644
index 0000000000..0c660e7d5e
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/marked.tsx
@@ -0,0 +1,59 @@
+import marked from 'marked'; // eslint-disable-line no-restricted-imports
+import dompurify from 'dompurify';
+
+// Only https and mailto, (e.g. no javascript, vbscript, data protocols)
+const safeLinkPattern = /^(https?:|mailto:)/i;
+
+const safeImagePattern = /^https?:\/\/./i;
+
+function isSafeHref(href: string, pattern: RegExp) {
+  try {
+    return pattern.test(decodeURIComponent(unescape(href)));
+  } catch {
+    return false;
+  }
+}
+
+/**
+ * Implementation of marked.Renderer which additonally sanitizes URLs.
+ */
+class SafeRenderer extends marked.Renderer {
+  link(href: string, title: string, text: string) {
+    // For a bad link, just return the plain text href
+    if (!isSafeHref(href, safeLinkPattern)) {
+      return href;
+    }
+
+    const out = `<a href="${href}"${title ? ` title="${title}"` : ''}>${text}</a>`;
+    return dompurify.sanitize(out);
+  }
+
+  image(href: string, title: string, text: string) {
+    // For a bad image, return an empty string
+    if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {
+      return '';
+    }
+
+    return `<img src="${href}" alt="${text}"${title ? ` title="${title}"` : ''} />`;
+  }
+}
+
+class NoParagraphRenderer extends SafeRenderer {
+  paragraph(text: string) {
+    return text;
+  }
+}
+
+marked.setOptions({
+  renderer: new SafeRenderer(),
+  sanitize: true,
+});
+
+const sanitizedMarked = (...args: Parameters<typeof marked>) =>
+  dompurify.sanitize(marked(...args));
+
+const singleLineRenderer = (text: string, options: marked.MarkedOptions = {}) =>
+  sanitizedMarked(text, {...options, renderer: new NoParagraphRenderer()});
+
+export {singleLineRenderer};
+export default sanitizedMarked;
diff --git a/yarn.lock b/yarn.lock
index 9a3f667ce5..1a582d2f53 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2409,6 +2409,13 @@
   dependencies:
     "@types/react" "*"
 
+"@types/dompurify@^2.0.1":
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/@types/dompurify/-/dompurify-2.0.1.tgz#0bf3a9f8ee21d81adb20b8c374ab034d6a74dbf7"
+  integrity sha512-OQ16dECrRv/I//woKkVUxyVGYR94W3qp3Wy//B63awHVe3h/1/URFqP5a/V2m4k01DEvWs1+z7FWW3xfM1lH3Q==
+  dependencies:
+    "@types/trusted-types" "*"
+
 "@types/echarts@^4.1.11":
   version "4.4.2"
   resolved "https://registry.yarnpkg.com/@types/echarts/-/echarts-4.4.2.tgz#88be60b9b87bc65414f22d4150834538d62ac602"
@@ -2507,6 +2514,11 @@
   resolved "https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.149.tgz#1342d63d948c6062838fbf961012f74d4e638440"
   integrity sha512-ijGqzZt/b7BfzcK9vTrS6MFljQRPn5BFWOx8oE0GYxribu6uV+aA9zZuXI1zc/etK9E8nrgdoF2+LgUw7+9tJQ==
 
+"@types/marked@^0.7.2":
+  version "0.7.2"
+  resolved "https://registry.yarnpkg.com/@types/marked/-/marked-0.7.2.tgz#1393f076773b55cc7078c0fbeb86a497c69db97e"
+  integrity sha512-A3EDyNaq6OCcpaOia2HQ/tu2QYt8DKuj4ExP21VU3cU3HTo2FLslvbqa2T1vux910RHvuSVqpwKnnykSFcRWOA==
+
 "@types/minimatch@*":
   version "3.0.3"
   resolved "https://registry.yarnpkg.com/@types/minimatch/-/minimatch-3.0.3.tgz#3dca0e3f33b200fc7d1139c0cd96c1268cadfd9d"
@@ -2678,6 +2690,11 @@
   resolved "https://registry.yarnpkg.com/@types/tapable/-/tapable-1.0.5.tgz#9adbc12950582aa65ead76bffdf39fe0c27a3c02"
   integrity sha512-/gG2M/Imw7cQFp8PGvz/SwocNrmKFjFsm5Pb8HdbHkZ1K8pmuPzOX4VeVoiEecFCVf4CsN1r3/BRvx+6sNqwtQ==
 
+"@types/trusted-types@*":
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/@types/trusted-types/-/trusted-types-1.0.4.tgz#922d092c84a776a59acb0bd6785fd82b59b9bad5"
+  integrity sha512-6jtHrHpmiXOXoJ31Cg9R+iEVwuEKPf0XHwFUI93eEPXx492/J2JHyafkleKE2EYzZprayk9FSjTyK1GDqcwDng==
+
 "@types/uglify-js@*":
   version "3.0.4"
   resolved "https://registry.yarnpkg.com/@types/uglify-js/-/uglify-js-3.0.4.tgz#96beae23df6f561862a830b4288a49e86baac082"
