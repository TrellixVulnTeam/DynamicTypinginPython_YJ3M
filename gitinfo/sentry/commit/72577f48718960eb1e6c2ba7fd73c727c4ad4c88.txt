commit 72577f48718960eb1e6c2ba7fd73c727c4ad4c88
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Mar 12 17:43:58 2015 -0700

    Remove use of invalid SENTRY_ALLOW_REGISTRATION

diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 40cc468ca2..ebbd8077e7 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -41,7 +41,7 @@ from sentry.utils.safe import safe_execute
 def register(request):
     from django.conf import settings
 
-    if not (settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register')):
+    if not (features.has('auth:register') or request.session.get('can_register')):
         return HttpResponseRedirect(reverse('sentry'))
 
     form = RegistrationForm(request.POST or None,
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 771531e7e1..c649be5a8a 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -18,18 +18,18 @@ class RegisterTest(TestCase):
         return reverse('sentry-register')
 
     def test_redirects_if_registration_disabled(self):
-        with self.settings(SENTRY_ALLOW_REGISTRATION=False):
+        with self.feature('auth:register', False):
             resp = self.client.get(self.path)
             assert resp.status_code == 302
 
     def test_renders_correct_template(self):
-        with self.settings(SENTRY_ALLOW_REGISTRATION=True):
+        with self.feature('auth:register'):
             resp = self.client.get(self.path)
             assert resp.status_code == 200
             self.assertTemplateUsed('sentry/register.html')
 
     def test_with_required_params(self):
-        with self.settings(SENTRY_ALLOW_REGISTRATION=True):
+        with self.feature('auth:register'):
             resp = self.client.post(self.path, {
                 'username': 'test-a-really-long-email-address@example.com',
                 'password': 'foobar',
