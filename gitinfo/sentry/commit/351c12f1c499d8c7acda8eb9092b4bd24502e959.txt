commit 351c12f1c499d8c7acda8eb9092b4bd24502e959
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Feb 14 10:32:50 2017 -0800

    Use context to identify anonymous functions and module-scoped code. (#4907)
    
    Fixes SENTRY-2RR, SENTRY-2RJ.

diff --git a/src/sentry/similarity.py b/src/sentry/similarity.py
index 92b2ec2f25..1ea5ba3273 100644
--- a/src/sentry/similarity.py
+++ b/src/sentry/similarity.py
@@ -311,6 +311,24 @@ FRAME_SEPARATOR = b'\x02'
 FRAME_FUNCTION_KEY = b'\x10'
 FRAME_MODULE_KEY = b'\x11'
 FRAME_FILENAME_KEY = b'\x12'
+FRAME_SIGNATURE_KEY = b'\x13'
+
+
+def get_frame_signature(frame, lines=5):
+    """\
+    Creates a "signature" for a frame from the surrounding context lines,
+    reading up to ``lines`` values from each side.
+    """
+    return struct.pack(
+        '>i',
+        mmh3.hash(
+            '\n'.join(
+                frame.get('pre_context', [])[-lines:] +
+                [frame['context_line']] +
+                frame.get('post_context', [])[:lines]
+            )
+        ),
+    )
 
 
 def serialize_frame(frame):
@@ -322,9 +340,13 @@ def serialize_frame(frame):
     # serialization step before hashing.
     # TODO(tkaemming): These frame values need platform-specific normalization.
     # This probably should be done prior to this method being called...?
-    attributes = {
-        FRAME_FUNCTION_KEY: frame['function']
-    }
+    attributes = {}
+
+    function_name = frame.get('function')
+    if function_name in set(['<lambda>', None]):
+        attributes[FRAME_SIGNATURE_KEY] = get_frame_signature(frame)
+    else:
+        attributes[FRAME_FUNCTION_KEY] = function_name.encode('utf8')
 
     scopes = (
         (FRAME_MODULE_KEY, 'module'),
@@ -334,17 +356,12 @@ def serialize_frame(frame):
     for key, name in scopes:
         value = frame.get(name)
         if value:
-            attributes[key] = value
+            attributes[key] = value.encode('utf8')
             break
 
     return FRAME_ITEM_SEPARATOR.join(
         map(
-            lambda item: FRAME_PAIR_SEPARATOR.join(
-                map(
-                    operator.methodcaller('encode', 'utf8'),
-                    item,
-                ),
-            ),
+            FRAME_PAIR_SEPARATOR.join,
             attributes.items(),
         ),
     )
diff --git a/tests/sentry/test_similarity.py b/tests/sentry/test_similarity.py
index af39844793..14d310ebda 100644
--- a/tests/sentry/test_similarity.py
+++ b/tests/sentry/test_similarity.py
@@ -6,7 +6,8 @@ import pytest
 
 from sentry.similarity import (
     MinHashIndex, get_exception_frames, get_euclidian_distance,
-    get_manhattan_distance, get_number_format, scale_to_total
+    get_manhattan_distance, get_number_format, scale_to_total,
+    serialize_frame,
 )
 from sentry.testutils import TestCase
 from sentry.utils import redis
@@ -176,6 +177,51 @@ def test_get_exception_frames():
     }) == []
 
 
+def test_serialize_frame():
+    with pytest.raises(Exception):
+        serialize_frame({})
+
+    serialize_frame({
+        'function': u'\N{SNOWMAN}',
+    })
+
+    serialize_frame({
+        'module': u'\N{SNOWMAN WITHOUT SNOW}',
+        'function': u'\N{SNOWMAN}',
+    })
+
+    serialize_frame({
+        'filename': u'\N{BLACK SNOWMAN}',
+        'function': u'\N{SNOWMAN}',
+    })
+
+    context = {
+        'pre_context': ['foo'],
+        'context_line': 'bar',
+        'post_context': ['baz'],
+    }
+
+    assert serialize_frame(context) == \
+        serialize_frame(dict({'function': '<lambda>'}, **context)) == \
+        serialize_frame(dict({'function': None}, **context))
+
+    assert serialize_frame({
+        'pre_context': (['red'] * 10) + (['foo'] * 5),
+        'context_line': 'bar',
+        'post_context': (['foo'] * 5) + (['red'] * 10),
+    }) == serialize_frame({
+        'pre_context': (['blue'] * 10) + (['foo'] * 5),
+        'context_line': 'bar',
+        'post_context': (['foo'] * 5) + (['blue'] * 10),
+    })
+
+    with pytest.raises(Exception):
+        serialize_frame({
+            'pre_context': ['foo'],
+            'post_context': ['baz'],
+        })
+
+
 class MinHashIndexTestCase(TestCase):
     def test_index(self):
         index = MinHashIndex(
