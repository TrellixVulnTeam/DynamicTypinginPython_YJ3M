commit 7e4fa1336c0ad21942c2c395577673826fa8d1c3
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 29 15:46:26 2015 -0700

    Add rule edit endpoint

diff --git a/src/sentry/api/endpoints/project_rule_details.py b/src/sentry/api/endpoints/project_rule_details.py
index 008e4483bc..3ad9a614c3 100644
--- a/src/sentry/api/endpoints/project_rule_details.py
+++ b/src/sentry/api/endpoints/project_rule_details.py
@@ -1,16 +1,95 @@
 from __future__ import absolute_import
 
+from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Rule
+from sentry.rules import rules
+
+
+ValidationError = serializers.ValidationError
+
+
+class RuleNodeField(serializers.WritableField):
+    def __init__(self, type):
+        super(RuleNodeField, self).__init__()
+        self.type_name = type
+
+    def to_native(self, obj):
+        return obj
+
+    def from_native(self, data):
+        if not isinstance(data, dict):
+            msg = 'Incorrect type. Expected a mapping, but got %s'
+            raise ValidationError(msg % type(data).__name__)
+
+        if 'id' not in data:
+            raise ValidationError("Missing attribute 'id'")
+
+        cls = rules.get(data['id'], self.type_name)
+        if cls is None:
+            msg = "Invalid node. Could not find '%s'"
+            raise ValidationError(msg % data['id'])
+
+        if not cls(self.context['project'], data).validate_form():
+            raise ValidationError('Node did not pass validation')
+
+        return data
+
+
+class ListField(serializers.WritableField):
+    def __init__(self, child):
+        self.child = child
+        super(ListField, self).__init__()
+
+    def initialize(self, **kwargs):
+        super(ListField, self).initialize(**kwargs)
+        self.child.initialize(**kwargs)
+
+    def to_native(self, obj):
+        return obj
+
+    def from_native(self, data):
+        if not isinstance(data, list):
+            msg = 'Incorrect type. Expected a mapping, but got %s'
+            raise ValidationError(msg % type(data).__name__)
+
+        return map(self.child.from_native, data)
+
+
+class RuleSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=64)
+    actionMatch = serializers.ChoiceField(choices=(
+        ('all', 'all'),
+        ('any', 'any'),
+        ('none', 'none'),
+    ))
+    actions = ListField(
+        child=RuleNodeField(type='action/event'),
+    )
+    conditions = ListField(
+        child=RuleNodeField(type='condition/event'),
+    )
+
+    def save(self, rule):
+        if self.data.get('name'):
+            rule.label = self.data['name']
+        if self.data.get('actionMatch'):
+            rule.data['action_match'] = self.data['actionMatch']
+        if self.data.get('actions') is not None:
+            rule.data['actions'] = self.data['actions']
+        if self.data.get('conditions') is not None:
+            rule.data['conditions'] = self.data['conditions']
+        rule.save()
+        return rule
 
 
 class ProjectRuleDetailsEndpoint(ProjectEndpoint):
     def get(self, request, project, rule_id):
         """
-        Retrieve a rules
+        Retrieve a rule
 
         Return details on an individual rule.
 
@@ -22,3 +101,33 @@ class ProjectRuleDetailsEndpoint(ProjectEndpoint):
             id=rule_id,
         )
         return Response(serialize(rule, request.user))
+
+    def put(self, request, project, rule_id):
+        """
+        Update a rule
+
+        Update various attributes for the given rule.
+
+            {method} {path}
+            {{
+              "name": "My rule name",
+              "conditions": [],
+              "actions": [],
+              "actionMatch": "all"
+            }}
+
+        """
+        rule = Rule.objects.get(
+            project=project,
+            id=rule_id,
+        )
+        serializer = RuleSerializer({
+            'actionMatch': rule.data.get('action_match', 'all'),
+        }, context={'project': project}, data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            rule = serializer.save(rule=rule)
+
+            return Response(serialize(rule, request.user))
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/rules/registry.py b/src/sentry/rules/registry.py
index 0edf4f9630..d6f2ab5990 100644
--- a/src/sentry/rules/registry.py
+++ b/src/sentry/rules/registry.py
@@ -16,6 +16,9 @@ class RuleRegistry(object):
         self._rules = defaultdict(list)
         self._map = {}
 
+    def __contains__(self, rule_id):
+        return rule_id in self._map
+
     def __iter__(self):
         for rule_type, rule_list in self._rules.iteritems():
             for rule in rule_list:
@@ -25,5 +28,8 @@ class RuleRegistry(object):
         self._map[rule.id] = rule
         self._rules[rule.rule_type].append(rule)
 
-    def get(self, rule_id):
-        return self._map.get(rule_id)
+    def get(self, rule_id, type=None):
+        cls = self._map.get(rule_id)
+        if type is not None and cls not in self._rules[type]:
+            return
+        return cls
diff --git a/tests/sentry/api/endpoints/test_project_rule_details.py b/tests/sentry/api/endpoints/test_project_rule_details.py
index e3679c0ada..932ee653de 100644
--- a/tests/sentry/api/endpoints/test_project_rule_details.py
+++ b/tests/sentry/api/endpoints/test_project_rule_details.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
+from sentry.models import Rule
 from sentry.testutils import APITestCase
 
 
@@ -24,3 +25,100 @@ class ProjectRuleDetailsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert response.data['id'] == str(rule.id)
+
+
+class UpdateProjectRuleTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        rule = Rule.objects.create(project=project, label='foo')
+
+        conditions = [{
+            'id': 'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
+            'key': 'foo',
+            'match': 'eq',
+            'value': 'bar',
+        }]
+
+        url = reverse('sentry-api-0-project-rule-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'rule_id': rule.id,
+        })
+        response = self.client.put(url, data={
+            'name': 'hello world',
+            'actionMatch': 'any',
+            'actions': [{'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}],
+            'conditions': conditions,
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(rule.id)
+
+        rule = Rule.objects.get(id=rule.id)
+        assert rule.label == 'hello world'
+        assert rule.data['action_match'] == 'any'
+        assert rule.data['actions'] == [{'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}]
+        assert rule.data['conditions'] == conditions
+
+    def test_invalid_rule_node_type(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        rule = Rule.objects.create(project=project, label='foo')
+
+        url = reverse('sentry-api-0-project-rule-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'rule_id': rule.id,
+        })
+        response = self.client.put(url, data={
+            'name': 'hello world',
+            'actionMatch': 'any',
+            'conditions': [{'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}],
+        }, format='json')
+
+        assert response.status_code == 400, response.content
+
+    def test_invalid_rule_node(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        rule = Rule.objects.create(project=project, label='foo')
+
+        url = reverse('sentry-api-0-project-rule-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'rule_id': rule.id,
+        })
+        response = self.client.put(url, data={
+            'name': 'hello world',
+            'actionMatch': 'any',
+            'actions': [{'id': 'foo'}],
+        }, format='json')
+
+        assert response.status_code == 400, response.content
+
+    def test_rule_form_not_valid(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        rule = Rule.objects.create(project=project, label='foo')
+
+        url = reverse('sentry-api-0-project-rule-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'rule_id': rule.id,
+        })
+        response = self.client.put(url, data={
+            'name': 'hello world',
+            'actionMatch': 'any',
+            'conditions': [{'id': 'sentry.rules.conditions.tagged_event.TaggedEventCondition'}],
+        }, format='json')
+
+        assert response.status_code == 400, response.content
