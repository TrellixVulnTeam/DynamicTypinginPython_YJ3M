commit 66997e3d1e38e40bb14f557376705a35cccae743
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 26 16:23:39 2012 -0800

    Add API key management interface

diff --git a/src/sentry/migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py b/src/sentry/migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py
new file mode 100644
index 0000000000..e6413c2f89
--- /dev/null
+++ b/src/sentry/migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py
@@ -0,0 +1,257 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding field 'ProjectKey.user_added'
+        db.add_column('sentry_projectkey', 'user_added',
+                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='keys_added_set', null=True, to=orm['auth.User']),
+                      keep_default=False)
+
+        # Adding field 'ProjectKey.date_added'
+        db.add_column('sentry_projectkey', 'date_added',
+                      self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, null=True),
+                      keep_default=False)
+
+
+    def backwards(self, orm):
+        # Deleting field 'ProjectKey.user_added'
+        db.delete_column('sentry_projectkey', 'user_added_id')
+
+        # Deleting field 'ProjectKey.date_added'
+        db.delete_column('sentry_projectkey', 'date_added')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filterkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'FilterKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 311a816255..348fc148c0 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -233,6 +233,10 @@ class ProjectKey(Model):
     secret_key = models.CharField(max_length=32, unique=True, null=True)
     user = models.ForeignKey(User, null=True)
 
+    # For audits
+    user_added = models.ForeignKey(User, null=True, related_name='keys_added_set')
+    date_added = models.DateTimeField(default=timezone.now, null=True)
+
     objects = BaseManager(cache_fields=(
         'public_key',
         'secret_key',
@@ -268,6 +272,14 @@ class ProjectKey(Model):
             self.project_id,
         )
 
+    @property
+    def dsn_private(self):
+        return self.get_dsn(public=False)
+
+    @property
+    def dsn_public(self):
+        return self.get_dsn(public=True)
+
 
 class ProjectOption(Model):
     """
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index c498f42ec9..0d77fae8d7 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -184,3 +184,33 @@ def can_admin_group(user, group):
         return False
 
     return True
+
+
+@requires_login
+@perm_override('can_add_projectkey')
+def can_add_project_key(user, project):
+    # must be an owner of the team
+    if project.team and not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+
+    result = plugins.first('has_perm', user, 'add_project_key', project)
+    if result is False:
+        return False
+
+    return True
+
+
+@requires_login
+@perm_override('can_remove_projectkey')
+def can_remove_project_key(user, key):
+    project = key.project
+
+    # must be an owner of the team
+    if project.team and not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+
+    result = plugins.first('has_perm', user, 'remove_project_key', project, key)
+    if result is False:
+        return False
+
+    return True
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index bb9b223ac9..6bc8a7035e 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -114,15 +114,15 @@
         <section id="content" class="{% block bodyclass %}with-sidebar{% endblock %}">
             <div class="container">
                 <div class="content">
-                    {% block alerts %}
-                        {% include "sentry/partial/alerts.html" %}
-                    {% endblock %}
-
                     {% block content_before %}
                     {% endblock %}
 
                     {% block content %}
                         <div class="main">
+                            {% block alerts %}
+                                {% include "sentry/partial/alerts.html" %}
+                            {% endblock %}
+
                             {% block main %}
                             {% endblock %}
                         </div>
diff --git a/src/sentry/templates/sentry/partial/alerts.html b/src/sentry/templates/sentry/partial/alerts.html
index e5828714ec..fa856a9529 100644
--- a/src/sentry/templates/sentry/partial/alerts.html
+++ b/src/sentry/templates/sentry/partial/alerts.html
@@ -1,10 +1,14 @@
+{% load sentry_helpers %}
+
 <div id="messages">
     {% if messages %}
         {% for message in messages %}
-            <div class="alert alert-block{% if message.tags %}{% for tag in message.tags %} alert-{{ tags }}{% endfor %}{% endif %}">
-                <a class="close" data-dismiss="alert">×</a>
-                {{ message|linebreaks }}
-            </div>
+        	{% with message.tags|split:" " as message_tags %}
+	            <div class="alert alert-block{% if message.tags %}{% for tag in message_tags %} alert-{{ tag }}{% endfor %}{% endif %}">
+	                <a class="close" data-dismiss="alert">×</a>
+	                {{ message|linebreaks }}
+	            </div>
+	        {% endwith %}
         {% endfor %}
     {% endif %}
 </div>
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/projects/client_help.html b/src/sentry/templates/sentry/projects/client_help.html
index 1c27239238..c91fff519d 100644
--- a/src/sentry/templates/sentry/projects/client_help.html
+++ b/src/sentry/templates/sentry/projects/client_help.html
@@ -8,19 +8,27 @@
     <div class="page-header">
         <h2>{% trans "Client Configuration" %}</h2>
     </div>
+
     {% if key %}
         <p>{% trans "To start sending events, configure your client with the following DSN value:" %}</p>
+
         <p><code class="clippy">{{ dsn }}</code></p>
+
         <p>{% blocktrans with 'https://github.com/getsentry/raven-js' as link %}If this is a client that only needs public access (like <a href="{{ link }}">raven-js</a>), you can use the following public DSN:{% endblocktrans %}</p>
+
         <p><code class="clippy">{{ dsn_public }}</code></p>
-        <div class="page-header">
-            <h3>{% trans "Platform Instructions" %}</h3>
-        </div>
-        <p>{% trans "Choose your platform for quick setup instructions:" %}</p>
-        {% include "sentry/partial/_client_config.html" %}
-        <p>{% blocktrans with 'http://sentry.readthedocs.org' as link %}For more information on developing clients and the Sentry API, see the <a href="{{ link }}">documentation</a>.{% endblocktrans %}</p>
     {% else %}
-        <p>{% trans "There is no key configured for your account with access to this project." %}</p>
+        {% url sentry-project-keys project.slug as link %}
+        <p>{% blocktrans %}There is no API key assigned to your account. Generate a new key or select one from the <a href="{{ link }}">API Keys page</a>.{% endblocktrans %}</p>
     {% endif %}
+
+    <div class="page-header">
+        <h3>{% trans "Platform Instructions" %}</h3>
+    </div>
+
+    <p>{% trans "Choose your platform for quick setup instructions:" %}</p>
+    {% include "sentry/partial/_client_config.html" %}
+
+    <p>{% blocktrans with 'http://sentry.readthedocs.org' as link %}For more information on developing clients and the Sentry API, see the <a href="{{ link }}">documentation</a>.{% endblocktrans %}</p>
 {% endblock %}
 
diff --git a/src/sentry/templates/sentry/projects/keys.html b/src/sentry/templates/sentry/projects/keys.html
new file mode 100644
index 0000000000..6ddb29bd6a
--- /dev/null
+++ b/src/sentry/templates/sentry/projects/keys.html
@@ -0,0 +1,60 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+{% load sentry_plugins %}
+
+{% block title %}{% trans "Manage API Keys" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-manage-project-keys project.slug %}">{% trans "Manage API Keys" %}</a></li>
+{% endblock %}
+
+{% block inner %}
+    <div class="page-header">
+        {% if can_add_key %}
+            <a href="{% url sentry-new-project-key project.slug %}" class="btn pull-right btn-primary">{% trans "Generate New Key" %}</a>
+        {% endif %}
+        <h2>
+            {% trans "Manage API Keys" %}
+        </h2>
+    </div>
+    <table class="table table-bordered table-striped">
+        <colgroup>
+            <col/>
+            <col width="100px"/>
+            <col width="100px"/>
+        </colgroup>
+        <thead>
+            <tr>
+                <th>{% trans "API Key" %}</th>
+                <th style="text-align:center">{% trans "Actions" %}</th>
+            </tr>
+        </thead>
+        <tbody>
+            {% for key in key_list %}
+                <tr>
+                    <td>
+                        <strong>{{ key.public_key }}</strong> {% if key.user %} &mdash; {{ key.user.email }}{% endif %}<br>
+                        <code class="clippy">{{ key.dsn_private }}</code><br>
+                        {% if key.user_added %}
+                            <small>Added by {{ key.user_added.email }} ({{ key.date_added|timesince }})</small>
+                        {% endif %}
+                    </td>
+                    <td style="text-align:center; vertical-align:middle;">
+                        {% if key.can_remove %}
+                            <form method="POST" action="{% url sentry-remove-project-key project.slug key.id %}" style="display:inline">
+                                {% csrf_token %}
+                                <input type="submit" class="btn btn-danger btn-small" value="{% trans "Revoke" %}">
+                            </form>
+                        {% else %}
+                            &mdash;
+                        {% endif %}
+                    </td>
+                </tr>
+            {% endfor %}
+        </tbody>
+    </table>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 3460c0557e..2bb59e852b 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -74,6 +74,9 @@
                 <a href="{% url sentry-manage-project-team project.slug %}">{% trans "Team" %}</a>
             </li>
         {% endif %}
+        <li{% if page == 'keys' %} class="active"{% endif %}>
+            <a href="{% url sentry-manage-project-keys project.slug %}">{% trans "API Keys" %}</a>
+        </li>
         <li{% if page == 'tags' %} class="active"{% endif %}>
             <a href="{% url sentry-manage-project-tags project.slug %}">{% trans "Tags" %}</a>
         </li>
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 7f89b1054b..1124dad04a 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -341,3 +341,8 @@ def titlize(value):
 @register.filter
 def is_muted(value):
     return value == STATUS_MUTED
+
+
+@register.filter
+def split(value, delim=''):
+    return value.split(delim)
diff --git a/src/sentry/web/frontend/docs.py b/src/sentry/web/frontend/docs.py
index f3d2b01d8d..be02aaee30 100644
--- a/src/sentry/web/frontend/docs.py
+++ b/src/sentry/web/frontend/docs.py
@@ -8,7 +8,7 @@ sentry.web.frontend.projects
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 
-from sentry.models import ProjectKey, MEMBER_SYSTEM
+from sentry.models import ProjectKey, MEMBER_SYSTEM 
 from sentry.web.decorators import has_access
 from sentry.web.helpers import render_to_response, render_to_string
 
@@ -28,25 +28,55 @@ PLATFORM_LIST = (
 )
 
 
+def get_key_context(user, project):
+    try:
+        key = ProjectKey.objects.get(user=user, project=project)
+    except ProjectKey.DoesNotExist:
+        key_list = list(ProjectKey.objects.filter(project=project, user__isnull=True)[0:2])
+        if len(key_list) == 1:
+            key = key_list[0]
+        else:
+            key = None
+
+    if key is None:
+        dsn = 'SENTRY_DSN'
+        dsn_public = 'SENTRY_PUBLIC_DSN'
+    else:
+        dsn = key.dsn_private
+        dsn_public = key.dsn_public
+
+    return {
+        'key': key,
+        'dsn': dsn,
+        'dsn_public': dsn_public,
+    }
+
+
+@has_access(MEMBER_SYSTEM)
+def client_help(request, project):
+    context = {
+        'page': 'client_help',
+        'project': project,
+    }
+    context.update(get_key_context(request.user, project))
+
+    return render_to_response('sentry/projects/client_help.html', context, request)
+
+
 @has_access(MEMBER_SYSTEM)
 def client_guide(request, project, platform):
     if platform not in PLATFORM_LIST:
         return HttpResponseRedirect(reverse('sentry'))
 
-    key = ProjectKey.objects.get(user=request.user, project=project)
-    dsn = key.get_dsn()
-    dsn_public = key.get_dsn(public=True)
-
     template = 'sentry/partial/client_config/%s.html' % (platform,)
 
     context = {
         'platform': platform,
         'platform_title': platform.title(),
         'project': project,
-        'dsn': dsn,
-        'dsn_public': dsn_public,
-        'page': 'client_help'
+        'page': 'client_help',
     }
+    context.update(get_key_context(request.user, project))
 
     if request.is_ajax():
         return render_to_response(template, context, request)
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 24e7ca588e..f31b819b3e 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -5,15 +5,17 @@ sentry.web.frontend.projects
 :copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from django.contrib import messages
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
+from django.views.decorators.http import require_http_methods
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import TeamMember, ProjectKey, Team, FilterKey
 from sentry.permissions import can_create_projects, can_remove_project, can_create_teams, \
-  can_add_team_member
+  can_add_team_member, can_add_project_key, can_remove_project_key
 from sentry.plugins import plugins
 from sentry.plugins.helpers import set_option, get_option
 from sentry.web.decorators import login_required, has_access
@@ -210,25 +212,62 @@ def manage_project_team(request, project):
     return render_to_response('sentry/projects/team.html', context, request)
 
 
-@has_access(MEMBER_USER)
-def client_help(request, project):
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def manage_project_keys(request, project):
+    result = plugins.first('has_perm', request.user, 'edit_project', project)
+    if result is False and not request.user.has_perm('sentry.can_change_project'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    key_list = list(ProjectKey.objects.filter(
+        project=project,
+    ).select_related('user', 'user_added').order_by('-id'))
+
+    for key in key_list:
+        key.project = project
+        key.can_remove = can_remove_project_key(request.user, key),
+
+    context = csrf(request)
+    context.update({
+        'page': 'keys',
+        'project': project,
+        'key_list': key_list,
+        'can_add_key': can_add_project_key(request.user, project),
+    })
+
+    return render_to_response('sentry/projects/keys.html', context, request)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def new_project_key(request, project):
+    if not can_add_project_key(request.user, project):
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.slug]))
+
+    ProjectKey.objects.create(
+        project=project,
+        user_added=request.user,
+    )
+
+    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.slug]))
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+@require_http_methods(['POST'])
+def remove_project_key(request, project, key_id):
     try:
-        key = ProjectKey.objects.get(user=request.user, project=project)
+        key = ProjectKey.objects.get(id=key_id)
     except ProjectKey.DoesNotExist:
-        key = None  # superuser
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.slug]))
 
-    context = {
-        'can_remove_project': can_remove_project(request.user, project),
-        'page': 'client_help',
-        'project': project,
-        'key': key,
-    }
-    if key:
-        context.update({
-            'dsn': key.get_dsn(),
-            'dsn_public': key.get_dsn(public=True),
-        })
-    return render_to_response('sentry/projects/client_help.html', context, request)
+    if not can_remove_project_key(request.user, key):
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.slug]))
+
+    key.delete()
+    messages.add_message(request, messages.SUCCESS, 'The API key (%s) was revoked.' % (key.public_key,))
+
+    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.slug]))
 
 
 @has_access(MEMBER_OWNER)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e6c11b3764..af04133892 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -77,14 +77,16 @@ urlpatterns = patterns('',
     url(r'^account/projects/new/$', projects.new_project, name='sentry-new-project'),
     url(r'^account/projects/(?P<project_id>[\w_-]+)/edit/$', projects.manage_project,
         name='sentry-manage-project'),
-    url(r'^account/projects/(?P<project_id>[\w_-]+)/team/$', projects.manage_project_team,
-        name='sentry-manage-project-team'),
-    url(r'^account/projects/(?P<project_id>[\w_-]+)/tags/$', projects.manage_project_tags,
-        name='sentry-manage-project-tags'),
-    url(r'^account/projects/(?P<project_id>[\w_-]+)/docs/$', projects.client_help,
+    url(r'^account/projects/(?P<project_id>[\w_-]+)/docs/$', docs.client_help,
         name='sentry-project-client-help'),
     url(r'^account/projects/(?P<project_id>[\w_-]+)/docs/(?P<platform>%s)/$' % ('|'.join(re.escape(r) for r in docs.PLATFORM_LIST),),
         docs.client_guide, name='sentry-docs-client'),
+    url(r'^account/projects/(?P<project_id>[\w_-]+)/keys/$', projects.manage_project_keys,
+        name='sentry-manage-project-keys'),
+    url(r'^account/projects/(?P<project_id>[\w_-]+)/keys/new/$', projects.new_project_key,
+        name='sentry-new-project-key'),
+    url(r'^account/projects/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/remove/$', projects.remove_project_key,
+        name='sentry-remove-project-key'),
     url(r'^account/projects/(?P<project_id>[\w_-]+)/plugins/$', projects.manage_plugins,
         name='sentry-manage-project-plugins'),
     url(r'^account/projects/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/$', projects.configure_project_plugin,
@@ -97,6 +99,10 @@ urlpatterns = patterns('',
         name='sentry-enable-project-plugin'),
     url(r'^account/projects/(?P<project_id>[\w_-]+)/remove/$', projects.remove_project,
         name='sentry-remove-project'),
+    url(r'^account/projects/(?P<project_id>[\w_-]+)/tags/$', projects.manage_project_tags,
+        name='sentry-manage-project-tags'),
+    url(r'^account/projects/(?P<project_id>[\w_-]+)/team/$', projects.manage_project_team,
+        name='sentry-manage-project-team'),
 
     # Global
 
