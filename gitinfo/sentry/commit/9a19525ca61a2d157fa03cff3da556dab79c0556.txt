commit 9a19525ca61a2d157fa03cff3da556dab79c0556
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Sep 17 14:48:11 2018 -0700

    feat(integrations): Gitlab installation flow (#9716)
    
    * feat(integrations): Gitlab installation flow

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b53e5c5726..115f9e3271 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1261,6 +1261,7 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.slack.SlackIntegrationProvider',
     'sentry.integrations.github.GitHubIntegrationProvider',
     'sentry.integrations.github_enterprise.GitHubEnterpriseIntegrationProvider',
+    'sentry.integrations.gitlab.GitlabIntegrationProvider',
     'sentry.integrations.jira.JiraIntegrationProvider',
     'sentry.integrations.vsts.VstsIntegrationProvider',
     'sentry.integrations.vsts_extension.VstsExtensionIntegrationProvider',
@@ -1270,6 +1271,7 @@ SENTRY_INTERNAL_INTEGRATIONS = (
     'bitbucket',
     'github',
     'github_enterprise',
+    'gitlab',
     'jira',
     'vsts',
     'vsts-extension',
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index d488f83fc4..f910d965b2 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -10,6 +10,7 @@ from .github_enterprise import *  # NOQA
 from .vsts import *  # NOQA
 from .vsts_extension import *  # NOQA
 from .bitbucket import *  # NOQA
+from .gitlab import *  # NOQA
 
 
 default_manager = IdentityManager()
@@ -27,3 +28,4 @@ register(GitHubEnterpriseIdentityProvider)  # NOQA
 register(VSTSIdentityProvider)  # NOQA
 register(VstsExtensionIdentityProvider)  # NOQA
 register(BitbucketIdentityProvider)  # NOQA
+register(GitlabIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/gitlab/__init__.py b/src/sentry/identity/gitlab/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/gitlab/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/gitlab/provider.py b/src/sentry/identity/gitlab/provider.py
new file mode 100644
index 0000000000..29650cb4a9
--- /dev/null
+++ b/src/sentry/identity/gitlab/provider.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from sentry import http
+from sentry.identity.oauth2 import OAuth2Provider
+
+
+def get_user_info(access_token, installation_data):
+    session = http.build_session()
+    resp = session.get(
+        u'https://{}/api/v4/user'.format(installation_data['url']),
+        headers={
+            'Accept': 'application/json',
+            'Authorization': 'Bearer %s' % access_token,
+        },
+        verify=installation_data['verify_ssl']
+    )
+
+    resp.raise_for_status()
+    return resp.json()
+
+
+class GitlabIdentityProvider(OAuth2Provider):
+    key = 'gitlab'
+    name = 'Gitlab'
+
+    oauth_scopes = (
+        'api',
+        'sudo',
+    )
+
+    def build_identity(self, data):
+        data = data['data']
+
+        return {
+            'type': 'gitlab',
+            'id': data['user']['id'],
+            'email': data['user']['email'],
+            'scopes': sorted(data['scope'].split(',')),
+            'data': self.get_oauth_data(data),
+        }
diff --git a/src/sentry/integrations/gitlab/__init__.py b/src/sentry/integrations/gitlab/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/gitlab/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
new file mode 100644
index 0000000000..0c8f0994f7
--- /dev/null
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -0,0 +1,219 @@
+from __future__ import absolute_import
+
+from six.moves.urllib.parse import urlparse
+from django.utils.translation import ugettext_lazy as _
+from django import forms
+
+from sentry import http
+from sentry.web.helpers import render_to_response
+from sentry.identity.pipeline import IdentityProviderPipeline
+from sentry.identity.gitlab import get_user_info
+from sentry.identity.gitlab.provider import GitlabIdentityProvider
+from sentry.integrations import IntegrationInstallation, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
+from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.utils.http import absolute_uri
+
+
+DESCRIPTION = """
+Fill me out
+"""
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    author='The Sentry Team',
+    noun=_('Installation'),
+    issue_url='https://github.com/getsentry/sentry/issues/',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/gitlab',
+    aspects={},
+)
+
+
+class GitlabIntegration(IntegrationInstallation):
+
+    def get_client(self):
+        pass
+
+
+class InstallationForm(forms.Form):
+    url = forms.CharField(
+        label=_("Installation Url"),
+        help_text=_('The "base URL" for your gitlab instance, '
+                    'includes the host and protocol.'),
+        widget=forms.TextInput(
+            attrs={'placeholder': 'https://github.example.com'}
+        ),
+    )
+    name = forms.CharField(
+        label=_("Gitlab App Name"),
+        help_text=_('The name of your OAuth Application in Gitlab. '
+                    'This can be found on the apps configuration '
+                    'page. (/profile/applications)'),
+        widget=forms.TextInput(
+            attrs={'placeholder': _('Sentry App')}
+        )
+    )
+    group = forms.CharField(
+        label=_("Gitlab Group Name"),
+        widget=forms.TextInput(
+            attrs={'placeholder': _('my-awesome-group')}
+        )
+    )
+    verify_ssl = forms.BooleanField(
+        label=_("Verify SSL"),
+        help_text=_('By default, we verify SSL certificates '
+                    'when delivering payloads to your Gitlab instance'),
+        widget=forms.CheckboxInput(),
+        required=False
+    )
+    client_id = forms.CharField(
+        label=_("Gitlab Application ID"),
+        widget=forms.TextInput(
+            attrs={'placeholder': _(
+                '5832fc6e14300a0d962240a8144466eef4ee93ef0d218477e55f11cf12fc3737')}
+        )
+    )
+    client_secret = forms.CharField(
+        label=_("Gitlab Application Secret"),
+        widget=forms.TextInput(
+            attrs={'placeholder': _('XXXXXXXXXXXXXXXXXXXXXXXXXXX')}
+        )
+    )
+
+    def __init__(self, *args, **kwargs):
+        super(InstallationForm, self).__init__(*args, **kwargs)
+        self.fields['verify_ssl'].initial = True
+
+
+class InstallationConfigView(PipelineView):
+    def dispatch(self, request, pipeline):
+        form = InstallationForm(request.POST)
+        if form.is_valid():
+            form_data = form.cleaned_data
+            form_data['url'] = urlparse(form_data['url']).netloc
+
+            pipeline.bind_state('installation_data', form_data)
+
+            pipeline.bind_state('oauth_config_information', {
+                "access_token_url": u"https://{}/oauth/token".format(form_data.get('url')),
+                "authorize_url": u"https://{}/oauth/authorize".format(form_data.get('url')),
+                "client_id": form_data.get('client_id'),
+                "client_secret": form_data.get('client_secret'),
+                "verify_ssl": form_data.get('verify_ssl')
+            })
+
+            return pipeline.next_step()
+
+        project_form = InstallationForm()
+
+        return render_to_response(
+            template='sentry/integrations/gitlab-config.html',
+            context={
+                'form': project_form,
+            },
+            request=request,
+        )
+
+
+class GitlabIntegrationProvider(IntegrationProvider):
+    key = 'gitlab'
+    name = 'Gitlab'
+    metadata = metadata
+    integration_cls = GitlabIntegration
+
+    needs_default_identity = True
+
+    features = frozenset([
+        IntegrationFeatures.ISSUE_BASIC,
+    ])
+
+    setup_dialog_config = {
+        'width': 1030,
+        'height': 1000,
+    }
+
+    def _make_identity_pipeline_view(self):
+        """
+        Make the nested identity provider view. It is important that this view is
+        not constructed until we reach this step and the
+        ``oauth_config_information`` is available in the pipeline state. This
+        method should be late bound into the pipeline vies.
+        """
+        identity_pipeline_config = dict(
+            oauth_scopes=(
+                'api',
+                'sudo',
+            ),
+            redirect_url=absolute_uri('/extensions/gitlab/setup/'),
+            **self.pipeline.fetch_state('oauth_config_information')
+        )
+
+        return NestedPipelineView(
+            bind_key='identity',
+            provider_key='gitlab',
+            pipeline_cls=IdentityProviderPipeline,
+            config=identity_pipeline_config,
+        )
+
+    def get_oauth_data(self, payload):
+        data = {'access_token': payload['access_token']}
+
+        # https://docs.gitlab.com/ee/api/oauth2.html#2-requesting-access-token
+        # doesn't seem to be correct, format we actually get:
+        # {
+        #   "access_token": "123432sfh29uhs29347",
+        #   "token_type": "bearer",
+        #   "refresh_token": "29f43sdfsk22fsj929",
+        #   "created_at": 1536798907,
+        #   "scope": "api sudo"
+        # }
+        if 'refresh_token' in payload:
+            data['refresh_token'] = payload['refresh_token']
+        if 'token_type' in payload:
+            data['token_type'] = payload['token_type']
+
+        return data
+
+    def get_group_info(self, access_token, installation_data):
+        session = http.build_session()
+        resp = session.get(
+            u'https://{}/api/v4/groups/{}'.format(
+                installation_data['url'], installation_data['group']),
+            headers={
+                'Accept': 'application/json',
+                'Authorization': 'Bearer %s' % access_token,
+            },
+            verify=installation_data['verify_ssl']
+        )
+
+        resp.raise_for_status()
+        return resp.json()
+
+    def get_pipeline_views(self):
+        return [InstallationConfigView(), lambda: self._make_identity_pipeline_view()]
+
+    def build_integration(self, state):
+        data = state['identity']['data']
+        oauth_data = self.get_oauth_data(data)
+        user = get_user_info(data['access_token'], state['installation_data'])
+        group = self.get_group_info(data['access_token'], state['installation_data'])
+        scopes = sorted(GitlabIdentityProvider.oauth_scopes)
+        base_url = state['installation_data']['url']
+
+        integration = {
+            'name': group['name'],
+            'external_id': u'{}:{}'.format(base_url, group['id']),
+            'metadata': {
+                'icon': group['avatar_url'],
+                'domain_name': group['web_url'].replace('https://', ''),
+                'scopes': scopes,
+                'verify_ssl': state['installation_data']['verify_ssl'],
+            },
+            'user_identity': {
+                'type': 'gitlab',
+                'external_id': user['id'],
+                'scopes': scopes,
+                'data': oauth_data,
+            },
+        }
+
+        return integration
diff --git a/src/sentry/integrations/gitlab/urls.py b/src/sentry/integrations/gitlab/urls.py
new file mode 100644
index 0000000000..652d744bd4
--- /dev/null
+++ b/src/sentry/integrations/gitlab/urls.py
@@ -0,0 +1,8 @@
+from __future__ import absolute_import, print_function
+
+from django.conf.urls import patterns
+
+
+urlpatterns = patterns(
+    '',
+)
diff --git a/src/sentry/templates/sentry/integrations/gitlab-config.html b/src/sentry/templates/sentry/integrations/gitlab-config.html
new file mode 100644
index 0000000000..59ba98f2a0
--- /dev/null
+++ b/src/sentry/templates/sentry/integrations/gitlab-config.html
@@ -0,0 +1,32 @@
+{% extends "sentry/bases/modal.html" %}
+{% load crispy_forms_tags %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %} narrow auth {% endblock %}
+{% block modal_header_signout %} {% endblock %}
+
+{% block title %} {% trans "Gitlab Setup" %} | {{ block.super }} {% endblock %}
+
+{% block main %}
+<h3>Gitlab Configuration</h3>
+
+<form action="" method="post" class="form-stacked">
+  {% csrf_token %}
+  <input type="hidden" name="provider" value="gitlab" />
+
+  <p>
+    Configure Gitlab to use with Sentry.io.
+  </p>
+
+  {{ form|as_crispy_errors }}
+
+  {% for field in form %}
+   {{ field|as_crispy_field }}
+  {% endfor %}
+
+  <fieldset class="form-actions">
+    <button type="submit" class="btn btn-primary" name="save_mappings" value="url">{% trans "Submit" %}</button>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 1f4dec5922..acf904c899 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -207,6 +207,7 @@ def register_extensions():
     from sentry.integrations.example import ExampleIntegrationProvider, AliasedIntegrationProvider
     from sentry.integrations.github import GitHubIntegrationProvider
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
+    from sentry.integrations.gitlab import GitlabIntegrationProvider
     from sentry.integrations.jira import JiraIntegrationProvider
     from sentry.integrations.slack import SlackIntegrationProvider
     from sentry.integrations.vsts import VstsIntegrationProvider
@@ -216,6 +217,7 @@ def register_extensions():
     integrations.register(AliasedIntegrationProvider)
     integrations.register(GitHubIntegrationProvider)
     integrations.register(GitHubEnterpriseIntegrationProvider)
+    integrations.register(GitlabIntegrationProvider)
     integrations.register(JiraIntegrationProvider)
     integrations.register(SlackIntegrationProvider)
     integrations.register(VstsIntegrationProvider)
diff --git a/tests/sentry/integrations/gitlab/__init__.py b/tests/sentry/integrations/gitlab/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/gitlab/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/gitlab/test_integration.py b/tests/sentry/integrations/gitlab/test_integration.py
new file mode 100644
index 0000000000..4a5b6bd32d
--- /dev/null
+++ b/tests/sentry/integrations/gitlab/test_integration.py
@@ -0,0 +1,118 @@
+from __future__ import absolute_import
+
+import responses
+import six
+
+from six.moves.urllib.parse import parse_qs, urlencode, urlparse
+
+from sentry.integrations.gitlab import GitlabIntegrationProvider
+from sentry.models import (
+    Identity, IdentityProvider, IdentityStatus, Integration, OrganizationIntegration,
+)
+from sentry.testutils import IntegrationTestCase
+
+
+class GitlabIntegrationTest(IntegrationTestCase):
+    provider = GitlabIntegrationProvider
+    config = {
+        'url': 'https://gitlab.example.com',
+        'name': 'Test App',
+        'group': 'cool-group',
+        'verify_ssl': True,
+        'client_id': 'client_id',
+        'client_secret': 'client_secret'
+    }
+
+    def assert_setup_flow(self, user_id='user_id_1', group_id=4):
+        responses.reset()
+        resp = self.client.get(self.init_path)
+        assert resp.status_code == 200
+        resp = self.client.post(self.init_path, data=self.config)
+        assert resp.status_code == 302
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'gitlab.example.com'
+        assert redirect.path == '/oauth/authorize'
+
+        params = parse_qs(redirect.query)
+        assert params['state']
+        assert params['redirect_uri'] == ['http://testserver/extensions/gitlab/setup/']
+        assert params['response_type'] == ['code']
+        assert params['client_id'] == ['client_id']
+        # once we've asserted on it, switch to a singular values to make life
+        # easier
+        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
+
+        access_token = 'xxxxx-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx'
+
+        responses.add(
+            responses.POST, 'https://gitlab.example.com/oauth/token',
+            json={'access_token': access_token}
+        )
+
+        responses.add(
+            responses.GET, 'https://gitlab.example.com/api/v4/user',
+            json={'id': user_id}
+        )
+
+        responses.add(
+            responses.GET, u'https://gitlab.example.com/api/v4/groups/cool-group',
+            json={
+                'id': group_id,
+                'name': 'Cool',
+                'web_url': 'https://gitlab.example.com/groups/cool-group',
+                'avatar_url': 'https://gitlab.example.com/uploads/group/avatar/4/foo.jpg',
+            }
+        )
+
+        resp = self.client.get(u'{}?{}'.format(
+            self.setup_path,
+            urlencode({
+                'code': 'oauth-code',
+                'state': authorize_params['state'],
+            })
+        ))
+
+        mock_access_token_request = responses.calls[0].request
+        req_params = parse_qs(mock_access_token_request.body)
+        assert req_params['grant_type'] == ['authorization_code']
+        assert req_params['code'] == ['oauth-code']
+        assert req_params['redirect_uri'] == [
+            'http://testserver/extensions/gitlab/setup/']
+        assert req_params['client_id'] == ['client_id']
+        assert req_params['client_secret'] == ['client_secret']
+
+        assert resp.status_code == 200
+
+        self.assertDialogSuccess(resp)
+
+    @responses.activate
+    def test_basic_flow(self):
+        self.assert_setup_flow()
+
+        integration = Integration.objects.get(provider=self.provider.key)
+
+        assert integration.external_id == 'gitlab.example.com:4'
+        assert integration.name == 'Cool'
+        assert integration.metadata == {
+            u'scopes': ['api', 'sudo'],
+            u'icon': u'https://gitlab.example.com/uploads/group/avatar/4/foo.jpg',
+            u'domain_name': u'gitlab.example.com/groups/cool-group',
+            u'verify_ssl': True,
+        }
+        oi = OrganizationIntegration.objects.get(
+            integration=integration,
+            organization=self.organization,
+        )
+        assert oi.config == {}
+
+        idp = IdentityProvider.objects.get(type='gitlab')
+        identity = Identity.objects.get(
+            idp=idp,
+            user=self.user,
+            external_id='user_id_1',
+        )
+        assert identity.status == IdentityStatus.VALID
+        assert identity.data == {
+            'access_token': 'xxxxx-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx'
+        }
