commit c1a0750deacd45bc9b3d46db45b42a474b55a730
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jun 10 14:02:37 2020 -0700

    build(webpack): Save asset sizes somewhere more useful (#19253)
    
    Instead of using Sentry transactions to track webpack-built asset sizes, send to an existing project on GCP (https://github.com/getsentry/sentry-development-metrics) so that we can see how our asset sizes change over time.

diff --git a/build-utils/sentry-instrumentation.js b/build-utils/sentry-instrumentation.js
index d344b19889..9c4f8da7cf 100644
--- a/build-utils/sentry-instrumentation.js
+++ b/build-utils/sentry-instrumentation.js
@@ -1,20 +1,28 @@
 /*eslint-env node*/
 /*eslint import/no-nodejs-modules:0 */
+const crypto = require('crypto');
+const https = require('https');
 const os = require('os');
 
 const {
   SENTRY_INSTRUMENTATION,
+  SENTRY_WEBPACK_WEBHOOK_SECRET,
   TEST_SUITE,
   TRAVIS_COMMIT,
   TRAVIS_BRANCH,
   TRAVIS_PULL_REQUEST,
   TRAVIS_PULL_REQUEST_BRANCH,
 } = process.env;
-const IS_TRAVIS = !!TRAVIS_COMMIT;
+const IS_CI = !!TRAVIS_COMMIT;
 
 const PLUGIN_NAME = 'SentryInstrumentation';
 const GB_BYTE = 1073741824;
 
+const createSignature = function(secret, payload) {
+  const hmac = crypto.createHmac('sha1', secret);
+  return `sha1=${hmac.update(payload).digest('hex')}`;
+};
+
 class SentryInstrumentation {
   constructor() {
     // Only run if SENTRY_INSTRUMENTATION` is set or when in travis, only in the javascript suite that runs webpack
@@ -28,11 +36,11 @@ class SentryInstrumentation {
 
     this.Sentry.init({
       dsn: 'https://3d282d186d924374800aa47006227ce9@sentry.io/2053674',
-      environment: IS_TRAVIS ? 'travis' : 'local',
+      environment: IS_CI ? 'ci' : 'local',
       tracesSampleRate: 1.0,
     });
 
-    if (IS_TRAVIS) {
+    if (IS_CI) {
       this.Sentry.setTag('branch', TRAVIS_PULL_REQUEST_BRANCH || TRAVIS_BRANCH);
       this.Sentry.setTag('pull_request', TRAVIS_PULL_REQUEST);
     }
@@ -50,40 +58,41 @@ class SentryInstrumentation {
    * Measures the file sizes of assets emitted from the entrypoints
    */
   measureAssetSizes(compilation) {
+    if (!SENTRY_WEBPACK_WEBHOOK_SECRET) {
+      return;
+    }
+
     [...compilation.entrypoints].forEach(([entrypointName, entry]) =>
       entry.chunks.forEach(chunk =>
         chunk.files
           .filter(assetName => !assetName.endsWith('.map'))
           .forEach(assetName => {
             const asset = compilation.assets[assetName];
-            const sizeInKb = asset.size() / 1024;
-
-            const transaction = this.Sentry.startTransaction({
-              op: 'webpack-asset',
-              name: assetName,
-              description: `webpack bundle size for ${entrypointName} -> ${assetName}`,
-              data: {
-                entrypointName,
-                file: assetName,
-                size: `${Math.round(sizeInKb)} KB`,
-              },
-              trimEnd: true,
+            const size = asset.size();
+            const file = assetName;
+            const body = JSON.stringify({
+              file,
+              entrypointName,
+              size,
+              commit: TRAVIS_COMMIT,
+              pull_request_number: TRAVIS_PULL_REQUEST,
+              environment: IS_CI ? 'ci' : '',
             });
 
-            const start = transaction.startTimestamp;
-
-            const span = transaction.startChild({
-              op: 'asset',
-              startTimestamp: start,
-              description: assetName,
-              data: {
-                entrypointName,
-                file: assetName,
-                size: `${Math.round(sizeInKb)} KB`,
+            const req = https.request({
+              host: 'product-eng-webhooks-vmrqv3f7nq-uw.a.run.app',
+              path: '/metrics/webpack/webhook',
+              method: 'POST',
+              headers: {
+                'Content-Type': 'application/json',
+                'Content-Length': Buffer.byteLength(body),
+                'x-webpack-signature': createSignature(
+                  SENTRY_WEBPACK_WEBHOOK_SECRET,
+                  body
+                ),
               },
             });
-            span.finish(start + sizeInKb / 1000);
-            transaction.finish();
+            req.end(body);
           })
       )
     );
@@ -124,20 +133,19 @@ class SentryInstrumentation {
     compiler.hooks.done.tapAsync(
       PLUGIN_NAME,
       async ({compilation, startTime, endTime}, done) => {
-        if (!this.Sentry) {
-          done();
-          return;
-        }
-        this.measureBuildTime(startTime / 1000, endTime / 1000);
-
         // Only record this once and only on Travis
         // Don't really care about asset sizes during local dev
-        if (!IS_TRAVIS && !this.initialBuild) {
+        if (IS_CI && !this.initialBuild) {
           this.measureAssetSizes(compilation);
         }
 
+        if (this.Sentry) {
+          this.measureBuildTime(startTime / 1000, endTime / 1000);
+          await this.Sentry.flush();
+        }
+
         this.initialBuild = true;
-        await this.Sentry.flush();
+
         done();
       }
     );
