commit fc8ca6f1b4a00f9c80284716ad178acc120ae238
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jan 2 12:47:33 2020 -0800

    feat(plugins): adds trello plugin using issuev2 (#16144)

diff --git a/setup.py b/setup.py
index e1d0818f45..f9265ac39d 100755
--- a/setup.py
+++ b/setup.py
@@ -112,6 +112,7 @@ setup(
             "redmine = sentry_plugins.redmine",
             "sessionstack = sentry_plugins.sessionstack",
             "teamwork = sentry_plugins.teamwork",
+            "trello = sentry_plugins.trello",
             "twilio = sentry_plugins.twilio",
         ],
         "sentry.plugins": [
@@ -136,6 +137,7 @@ setup(
             "slack = sentry_plugins.slack.plugin:SlackPlugin",
             "splunk = sentry_plugins.splunk.plugin:SplunkPlugin",
             "teamwork = sentry_plugins.teamwork.plugin:TeamworkPlugin",
+            "trello = sentry_plugins.trello.plugin:TrelloPlugin",
             "twilio = sentry_plugins.twilio.plugin:TwilioPlugin",
             "victorops = sentry_plugins.victorops.plugin:VictorOpsPlugin",
             "vsts = sentry_plugins.vsts.plugin:VstsPlugin",
diff --git a/src/sentry_plugins/trello/Trello_Instructions.md b/src/sentry_plugins/trello/Trello_Instructions.md
new file mode 100644
index 0000000000..c663db12ea
--- /dev/null
+++ b/src/sentry_plugins/trello/Trello_Instructions.md
@@ -0,0 +1,8 @@
+How to Setup Trello
+===========================
+
+1. Go to https://trello.com/app-key
+2. Copy Key at top to "Trello API Key" field in settings form
+3. Click link on page to go to token generation page
+4. Press "Allow" on bottom right
+5. Copy token to "Trello API Token" field and press "Save Changes"
diff --git a/src/sentry_plugins/trello/__init__.py b/src/sentry_plugins/trello/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry_plugins/trello/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry_plugins/trello/client.py b/src/sentry_plugins/trello/client.py
new file mode 100644
index 0000000000..8c52827789
--- /dev/null
+++ b/src/sentry_plugins/trello/client.py
@@ -0,0 +1,111 @@
+from __future__ import absolute_import
+
+
+from sentry_plugins.client import ApiClient
+
+
+ORG_BOARD_PATH = "/organizations/%s/boards"
+MEMBER_ORG_PATH = "/members/me/organizations"
+LISTS_OF_BOARD_PATH = "/boards/%s/lists"
+NEW_CARD_PATH = "/cards"
+SINGLE_CARD_PATH = "/cards/%s"
+ADD_COMMENT_PATH = "/cards/%s/actions/comments"
+MEMBER_BOARD_PATH = "/members/me/boards"
+SEARCH_PATH = "/search"
+
+CARD_FIELDS = ",".join(["name", "shortLink", "idShort"])
+
+
+class TrelloApiClient(ApiClient):
+    base_url = "https://api.trello.com/1"
+    plugin_name = "trello"
+
+    def __init__(self, api_key, token=None, **kwargs):
+        self.api_key = api_key
+        self.token = token
+        super(TrelloApiClient, self).__init__(**kwargs)
+
+    def request(self, method="GET", path="", data=None, params=None, **kwargs):
+        params = {} if params is None else params.copy()
+        params["token"] = self.token
+        params["key"] = self.api_key
+        return self._request(method, path, data=data, params=params, **kwargs)
+
+    def get_organization_boards(self, org_id_or_name, fields=None):
+        """
+        Return boards for an organization/team
+        """
+        return self.request(path=ORG_BOARD_PATH % (org_id_or_name), params={"fields": fields})
+
+    def get_member_boards(self, fields=None):
+        """
+        Return boards for a user
+        """
+        return self.request(path=MEMBER_BOARD_PATH, params={"fields": fields})
+
+    def get_boards(self, org=None):
+        """
+        Return boards for an organization/team if set, otherwise return boards for user
+        """
+        if org:
+            return self.get_organization_boards(org, fields="name")
+        return self.get_member_boards(fields="name")
+
+    def get_organization_list(self, fields=None):
+        """
+        Return organization list for user
+        """
+        return self.request(path=MEMBER_ORG_PATH, params={"fields": fields})
+
+    def get_lists_of_board(self, board_id, fields=None):
+        """
+        Return the lists on a given board
+        """
+        return self.request(path=LISTS_OF_BOARD_PATH % (board_id), params={"fields": fields})
+
+    def new_card(self, name, id_list, desc=None):
+        """
+        Create a Trello card
+        """
+        return self.request(
+            method="POST", path=NEW_CARD_PATH, data={"name": name, "idList": id_list, "desc": desc}
+        )
+
+    def get_organization_options(self):
+        """
+        Return organization options to use in a Django form
+        """
+        organizations = self.get_organization_list(fields="name")
+        return [(org["id"], org["name"]) for org in organizations]
+
+    def get_cards(self, query, org_id=None):
+        """
+        Return the cards matching a query, limited to an org if passed in
+        """
+        params = {
+            "query": query,
+            "modelTypes": "cards",
+            "cards_limit": 100,
+            "partial": "true",
+            "card_fields": CARD_FIELDS,
+        }
+        if org_id:
+            params["idOrganizations"] = org_id
+        response = self.request(path=SEARCH_PATH, params=params)
+        return response["cards"]
+
+    def get_card(self, card_id_or_short_link):
+        """
+        Return a card from an ID or short link
+        """
+        return self.request(
+            path=SINGLE_CARD_PATH % card_id_or_short_link, params={"fields": CARD_FIELDS}
+        )
+
+    def create_comment(self, card_id_or_short_link, comment):
+        """
+        Create a comment on a card
+        """
+        return self.request(
+            method="POST", path=ADD_COMMENT_PATH % card_id_or_short_link, params={"text": comment}
+        )
diff --git a/src/sentry_plugins/trello/plugin.py b/src/sentry_plugins/trello/plugin.py
new file mode 100644
index 0000000000..ef57cb0b43
--- /dev/null
+++ b/src/sentry_plugins/trello/plugin.py
@@ -0,0 +1,277 @@
+from __future__ import absolute_import
+
+import re
+from django.conf.urls import url
+from rest_framework.response import Response
+
+
+from sentry.utils.http import absolute_uri
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
+from sentry_plugins.base import CorePluginMixin
+from .client import TrelloApiClient
+
+
+SETUP_URL = "https://github.com/getsentry/sentry/blob/master/src/sentry_plugins/trello/Trello_Instructions.md"  # NOQA
+
+LABLEX_REGEX = re.compile(r"\w+/https://trello\.com/")
+
+
+class TrelloPlugin(CorePluginMixin, IssuePlugin2):
+    description = "Create Trello cards on issues"
+    slug = "trello"
+    title = "Trello"
+    conf_title = title
+    conf_key = "trello"
+    auth_provider = None
+    resource_links = [("Trello Setup Instructions", SETUP_URL)] + CorePluginMixin.resource_links
+
+    def get_config(self, project, **kwargs):
+        """
+        Return the configuration of the plugin.
+        Pull the value out of our the arguments to this function or from the DB
+        """
+
+        def get_value(field):
+            initial_values = kwargs.get("initial", {})
+            return initial_values.get(field) or self.get_option(field, project)
+
+        token_config = {
+            "name": "token",
+            "type": "secret",
+            "label": "Trello API Token",
+            "default": None,
+        }
+
+        token_val = get_value("token")
+        if token_val:
+            # The token is sensitive so we should mask the value by only sending back the first 5 characters
+            token_config["required"] = False
+            token_config["prefix"] = token_val[:5]
+            token_config["has_saved_value"] = True
+        else:
+            token_config["required"] = True
+
+        api_key = get_value("key")
+
+        key_config = {
+            "name": "key",
+            "type": "text",
+            "required": True,
+            "label": "Trello API Key",
+            "default": api_key,
+        }
+
+        config = [key_config, token_config]
+        org_value = get_value("organization")
+        include_org = kwargs.get("add_additial_fields", org_value)
+        if api_key and token_val and include_org:
+            trello_client = TrelloApiClient(api_key, token_val)
+            try:
+                org_options = trello_client.get_organization_options()
+                config.append(
+                    {
+                        "name": "organization",
+                        "label": "Trello Organization",
+                        "choices": org_options,
+                        "type": "select",
+                        "required": False,
+                        "default": org_value,
+                    }
+                )
+            except Exception as e:
+                self.raise_error(e)
+        return config
+
+    def validate_config(self, project, config, actor=None):
+        """
+        Make sure the configuration is valid by trying to query for the organizations with the auth
+        """
+        trello_client = TrelloApiClient(config["key"], config["token"])
+        try:
+            trello_client.get_organization_options()
+        except Exception as e:
+            self.raise_error(e)
+        return config
+
+    def get_group_urls(self):
+        """
+        Return the URLs and the matching views
+        """
+        return super(TrelloPlugin, self).get_group_urls() + [
+            url(
+                r"^options",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_options", plugin=self),
+            ),
+            url(
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            ),
+        ]
+
+    def is_configured(self, request, project, **kwargs):
+        return all(self.get_option(key, project) for key in ("token", "key"))
+
+    # used for boards and lists but not cards (shortLink used as ID for cards)
+    def map_to_options(self, items):
+        return [(item["id"], item["name"]) for item in items]
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        """
+        Return the fields needed for creating a new issue
+        """
+        fields = super(TrelloPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+        client = self.get_client(group.project)
+        organization = self.get_option("organization", group.project)
+
+        boards = client.get_boards(organization)
+        board_choices = self.map_to_options(boards)
+
+        return fields + [
+            {
+                "name": "board",
+                "label": "Board",
+                "type": "select",
+                "choices": board_choices,
+                "readonly": False,
+                "required": True,
+            },
+            {
+                "name": "list",
+                "depends": ["board"],
+                "label": "List",
+                "type": "select",
+                "has_autocomplete": False,
+                "required": True,
+            },
+        ]
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        """
+        Return the fields needed for linking to an existing issue
+        """
+        return [
+            {
+                "name": "issue_id",
+                "label": "Card",
+                "type": "select",
+                "has_autocomplete": True,
+                "required": True,
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": absolute_uri(
+                    group.get_absolute_url(params={"referrer": "trello_plugin"})
+                ),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the Trello card."),
+                "required": False,
+            },
+        ]
+
+    def get_client(self, project):
+        return TrelloApiClient(
+            self.get_option("key", project), token=self.get_option("token", project)
+        )
+
+    def error_message_from_json(self, data):
+        errors = data.get("errors")
+        if errors:
+            return " ".join(e["message"] for e in errors)
+        return "unknown error"
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(group.project)
+
+        try:
+            response = client.new_card(
+                id_list=form_data["list"], name=form_data["title"], desc=form_data["description"]
+            )
+        except Exception as e:
+            self.raise_error(e)
+
+        return response["shortLink"]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(group.project)
+
+        try:
+            card = client.get_card(form_data["issue_id"])
+        except Exception as e:
+            self.raise_error(e)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.create_comment(card["shortLink"], comment)
+            except Exception as e:
+                self.raise_error(e)
+
+        return {"title": card["name"], "id": card["shortLink"]}
+
+    def get_issue_label(self, group, issue, **kwargs):
+        """
+        Return label of the linked issue we show in the UI from the issue string
+        """
+        # the old version of the plugin stores the url in the issue
+        if LABLEX_REGEX.search(issue):
+            short_issue = issue.split("/", 1)[0]
+            return "Trello-%s" % short_issue
+        return "Trello-%s" % issue
+
+    def get_issue_url(self, group, issue, **kwargs):
+        """
+        Return label of the url of card in Trello based off the issue object or issue ID
+        """
+        # TODO(Steve): figure out why we sometimes get a string and sometimes a dict
+        if isinstance(issue, dict):
+            issue = issue["id"]
+        # the old version of the plugin stores the url in the issue
+        if LABLEX_REGEX.search(issue):
+            return issue.split("/", 1)[1]
+        return "https://trello.com/c/%s" % issue
+
+    def view_options(self, request, group, **kwargs):
+        """
+        Return the lists on a given Trello board
+        """
+        field = request.GET.get("option_field")
+        board = request.GET.get("board")
+
+        results = []
+        if field == "list" and board:
+            client = self.get_client(group.project)
+            try:
+                response = client.get_lists_of_board(board)
+            except Exception as e:
+                return Response(
+                    {
+                        "error_type": "validation",
+                        "errors": [{"__all__": self.message_from_error(e)}],
+                    },
+                    status=400,
+                )
+            else:
+                results = self.map_to_options(response)
+
+        return Response({field: results})
+
+    def view_autocomplete(self, request, group, **kwargs):
+        """
+        Return the cards matching a given query and the organization of the configuration
+        """
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+
+        output = []
+        if field == "issue_id" and query:
+            organization = self.get_option("organization", group.project)
+
+            client = self.get_client(group.project)
+            cards = client.get_cards(query, organization)
+            output = [
+                {"text": "(#%s) %s" % (card["idShort"], card["name"]), "id": card["shortLink"]}
+                for card in cards
+            ]
+
+        return Response({field: output})
diff --git a/tests/sentry_plugins/trello/__init__.py b/tests/sentry_plugins/trello/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/trello/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/trello/test_plugin.py b/tests/sentry_plugins/trello/test_plugin.py
new file mode 100644
index 0000000000..f7bcfa2c98
--- /dev/null
+++ b/tests/sentry_plugins/trello/test_plugin.py
@@ -0,0 +1,254 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.test import RequestFactory
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from sentry_plugins.trello.plugin import TrelloPlugin
+
+
+class TrelloPluginTestBase(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return TrelloPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+
+class TrelloPluginTest(TrelloPluginTestBase):
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "trello"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("trello", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        # test new and old format
+        assert self.plugin.get_issue_label(group, "rPPDb") == "Trello-rPPDb"
+        assert (
+            self.plugin.get_issue_label(group, "5dafd/https://trello.com/c/rPPDb/75-title")
+            == "Trello-5dafd"
+        )
+
+    def test_get_issue_url(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        # test new and old format
+        assert self.plugin.get_issue_url(group, "rPPDb") == "https://trello.com/c/rPPDb"
+        assert self.plugin.get_issue_url(group, {"id": "rPPDb"}) == "https://trello.com/c/rPPDb"
+        assert (
+            self.plugin.get_issue_url(group, "5dafd/https://trello.com/c/rPPDb/75-title")
+            == "https://trello.com/c/rPPDb/75-title"
+        )
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("token", "7c8951d1", self.project)
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("key", "39g", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+
+class TrelloPluginApiTests(TrelloPluginTestBase):
+    def setUp(self):
+        self.group = self.create_group(message="Hello world", culprit="foo.bar")
+        self.plugin.set_option("token", "7c8951d1", self.project)
+        self.plugin.set_option("key", "39g", self.project)
+        self.plugin.set_option("organization", "f187", self.project)
+
+        self.login_as(self.user)
+
+    def test_get_config_no_org(self):
+        self.plugin.unset_option("organization", self.project)
+        out = self.plugin.get_config(self.project)
+        assert out == [
+            {
+                "default": "39g",
+                "required": True,
+                "type": "text",
+                "name": "key",
+                "label": "Trello API Key",
+            },
+            {
+                "name": "token",
+                "default": None,
+                "required": False,
+                "label": "Trello API Token",
+                "prefix": "7c895",
+                "type": "secret",
+                "has_saved_value": True,
+            },
+        ]
+
+    @responses.activate
+    def test_get_config_include_additional(self):
+        self.plugin.unset_option("organization", self.project)
+
+        responses.add(
+            responses.GET,
+            "https://api.trello.com/1/members/me/organizations",
+            json=[{"name": "team 1", "id": "2d8e"}, {"name": "team 2", "id": "d0cc"}],
+        )
+        out = self.plugin.get_config(self.project, add_additial_fields=True)
+        assert out == [
+            {
+                "default": "39g",
+                "required": True,
+                "type": "text",
+                "name": "key",
+                "label": "Trello API Key",
+            },
+            {
+                "name": "token",
+                "default": None,
+                "required": False,
+                "label": "Trello API Token",
+                "prefix": "7c895",
+                "type": "secret",
+                "has_saved_value": True,
+            },
+            {
+                "name": "organization",
+                "default": None,
+                "required": False,
+                "choices": [("2d8e", "team 1"), ("d0cc", "team 2")],
+                "label": "Trello Organization",
+                "type": "select",
+            },
+        ]
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(responses.POST, "https://api.trello.com/1/cards", json={"shortLink": "rds43"})
+
+        form_data = {
+            "title": "Hello",
+            "description": "Fix this.",
+            "board": "ads23f",
+            "list": "23tds",
+        }
+        request = self.make_request(user=self.user, method="POST")
+
+        assert self.plugin.create_issue(request, self.group, form_data) == "rds43"
+        request = responses.calls[0].request
+        assert request.url == "https://api.trello.com/1/cards?token=7c8951d1&key=39g"
+        payload = json.loads(request.body)
+        assert payload == {"name": "Hello", "desc": "Fix this.", "idList": "23tds"}
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://api.trello.com/1/cards/SstgnBIQ",
+            json={"idShort": 2, "name": "MyTitle", "shortLink": "SstgnBIQ"},
+        )
+        responses.add(
+            responses.POST, "https://api.trello.com/1/cards/SstgnBIQ/actions/comments", json={}
+        )
+
+        form_data = {"comment": "please fix this", "issue_id": "SstgnBIQ"}
+        request = self.make_request(user=self.user, method="POST")
+
+        assert self.plugin.link_issue(request, self.group, form_data) == {
+            "title": "MyTitle",
+            "id": "SstgnBIQ",
+        }
+
+        request = responses.calls[0].request
+        assert (
+            request.url
+            == "https://api.trello.com/1/cards/SstgnBIQ?fields=name%2CshortLink%2CidShort&token=7c8951d1&key=39g"
+        )
+
+        request = responses.calls[1].request
+        assert (
+            request.url
+            == "https://api.trello.com/1/cards/SstgnBIQ/actions/comments?text=please+fix+this&token=7c8951d1&key=39g"
+        )
+
+    @responses.activate
+    def test_view_options(self):
+        responses.add(
+            responses.GET,
+            "https://api.trello.com/1/boards/f34/lists",
+            json=[{"id": "8f3", "name": "list 1"}, {"id": "j8f", "name": "list 2"}],
+        )
+
+        request = self.make_request(user=self.user, method="GET")
+        request.GET["option_field"] = "list"
+        request.GET["board"] = "f34"
+
+        response = self.plugin.view_options(request, self.group)
+        assert response.data == {"list": [("8f3", "list 1"), ("j8f", "list 2")]}
+
+        request = responses.calls[0].request
+        assert request.url == "https://api.trello.com/1/boards/f34/lists?token=7c8951d1&key=39g"
+
+    @responses.activate
+    def test_view_autocomplete(self):
+        responses.add(
+            responses.GET,
+            "https://api.trello.com/1/search",
+            json={
+                "cards": [
+                    {"id": "4fsdafad", "name": "KeyError", "idShort": 1, "shortLink": "0lr"},
+                    {"id": "f4usdfa", "name": "Key Missing", "idShort": 3, "shortLink": "9lf"},
+                ]
+            },
+        )
+
+        request = self.make_request(user=self.user, method="GET")
+        request.GET["autocomplete_field"] = "issue_id"
+        request.GET["autocomplete_query"] = "Key"
+
+        response = self.plugin.view_autocomplete(request, self.group)
+        assert response.data == {
+            "issue_id": [
+                {"id": "0lr", "text": "(#1) KeyError"},
+                {"id": "9lf", "text": "(#3) Key Missing"},
+            ]
+        }
+
+        request = responses.calls[0].request
+        assert (
+            request.url
+            == "https://api.trello.com/1/search?cards_limit=100&partial=true&card_fields=name%2CshortLink%2CidShort&key=39g&query=Key&modelTypes=cards&token=7c8951d1&idOrganizations=f187"
+        )
+
+    @responses.activate
+    def test_view_autocomplete_no_org(self):
+        self.plugin.unset_option("organization", self.project)
+
+        responses.add(
+            responses.GET,
+            "https://api.trello.com/1/search",
+            json={
+                "cards": [
+                    {"id": "4fsdafad", "name": "KeyError", "idShort": 1, "shortLink": "0lr"},
+                    {"id": "f4usdfa", "name": "Key Missing", "idShort": 3, "shortLink": "9lf"},
+                ]
+            },
+        )
+
+        request = self.make_request(user=self.user, method="GET")
+        request.GET["autocomplete_field"] = "issue_id"
+        request.GET["autocomplete_query"] = "Key"
+
+        response = self.plugin.view_autocomplete(request, self.group)
+        assert response.data == {
+            "issue_id": [
+                {"id": "0lr", "text": "(#1) KeyError"},
+                {"id": "9lf", "text": "(#3) Key Missing"},
+            ]
+        }
+
+        request = responses.calls[0].request
+        assert (
+            request.url
+            == "https://api.trello.com/1/search?cards_limit=100&partial=true&modelTypes=cards&token=7c8951d1&card_fields=name%2CshortLink%2CidShort&key=39g&query=Key"
+        )
