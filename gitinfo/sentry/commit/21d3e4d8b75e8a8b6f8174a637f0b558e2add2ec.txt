commit 21d3e4d8b75e8a8b6f8174a637f0b558e2add2ec
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 3 13:21:03 2013 -0700

    Add sample data generation

diff --git a/MANIFEST.in b/MANIFEST.in
index cd78887293..00aca590e5 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,6 +1,3 @@
 include setup.py README.rst MANIFEST.in LICENSE AUTHORS
-recursive-include src/sentry/templates *
-recursive-include src/sentry/locale *
-recursive-include src/sentry/static/sentry *
-recursive-include src/sentry/plugins/*/templates *
+recursive-include src/ *
 global-exclude *~
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 04f5beb843..bd5acbcf0f 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -24,6 +24,7 @@ def get_all_languages():
     return results
 
 MODULE_ROOT = os.path.dirname(__import__('sentry').__file__)
+DATA_ROOT = os.path.join(MODULE_ROOT, 'data')
 
 SORT_OPTIONS = SortedDict((
     ('priority', _('Priority')),
diff --git a/src/sentry/data/samples/java.json b/src/sentry/data/samples/java.json
new file mode 100644
index 0000000000..8e54db9a3e
--- /dev/null
+++ b/src/sentry/data/samples/java.json
@@ -0,0 +1,208 @@
+{
+    "message": "[Example] java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]",
+    "culprit": "javax.servlet.ServletException",
+    "sentry.interfaces.Exception": {
+        "values": [
+            {
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "run",
+                            "lineno": 582,
+                            "module": "org.mortbay.thread.QueuedThreadPool$PoolThread",
+                            "filename": "QueuedThreadPool.java"
+                        },
+                        {
+                            "function": "run",
+                            "lineno": 228,
+                            "module": "org.mortbay.jetty.bio.SocketConnector$Connection",
+                            "filename": "SocketConnector.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 404,
+                            "module": "org.mortbay.jetty.HttpConnection",
+                            "filename": "HttpConnection.java"
+                        },
+                        {
+                            "function": "parseAvailable",
+                            "lineno": 218,
+                            "module": "org.mortbay.jetty.HttpParser",
+                            "filename": "HttpParser.java"
+                        },
+                        {
+                            "function": "parseNext",
+                            "lineno": 756,
+                            "module": "org.mortbay.jetty.HttpParser",
+                            "filename": "HttpParser.java"
+                        },
+                        {
+                            "function": "content",
+                            "lineno": 943,
+                            "module": "org.mortbay.jetty.HttpConnection$RequestHandler",
+                            "filename": "HttpConnection.java"
+                        },
+                        {
+                            "function": "handleRequest",
+                            "lineno": 542,
+                            "module": "org.mortbay.jetty.HttpConnection",
+                            "filename": "HttpConnection.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 326,
+                            "module": "org.mortbay.jetty.Server",
+                            "filename": "Server.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 152,
+                            "module": "org.mortbay.jetty.handler.HandlerWrapper",
+                            "filename": "HandlerWrapper.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 418,
+                            "module": "org.mortbay.jetty.webapp.WebAppContext",
+                            "filename": "WebAppContext.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 765,
+                            "module": "org.mortbay.jetty.handler.ContextHandler",
+                            "filename": "ContextHandler.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 182,
+                            "module": "org.mortbay.jetty.servlet.SessionHandler",
+                            "filename": "SessionHandler.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 216,
+                            "module": "org.mortbay.jetty.security.SecurityHandler",
+                            "filename": "SecurityHandler.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 388,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler",
+                            "filename": "ServletHandler.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 1157,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "filename": "ServletHandler.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 33,
+                            "module": "com.example.myproject.OutputBufferFilter",
+                            "filename": "OutputBufferFilter.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 1157,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "filename": "ServletHandler.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 28,
+                            "module": "com.example.myproject.ExceptionHandlerFilter",
+                            "filename": "ExceptionHandlerFilter.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 1157,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "filename": "ServletHandler.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 60,
+                            "module": "com.example.myproject.OpenSessionInViewFilter",
+                            "filename": "OpenSessionInViewFilter.java"
+                        }
+                    ]
+                },
+                "type": "javax.servlet.ServletException",
+                "value": "Something bad happened"
+            },
+            {
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "doFilter",
+                            "lineno": 30,
+                            "module": "com.example.myproject.OpenSessionInViewFilter",
+                            "filename": "OpenSessionInViewFilter.java"
+                        },
+                        {
+                            "function": "doFilter",
+                            "lineno": 1166,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "filename": "ServletHandler.java"
+                        },
+                        {
+                            "function": "handle",
+                            "lineno": 511,
+                            "module": "org.mortbay.jetty.servlet.ServletHolder",
+                            "filename": "ServletHolder.java"
+                        },
+                        {
+                            "function": "service",
+                            "lineno": 820,
+                            "module": "javax.servlet.http.HttpServlet",
+                            "filename": "HttpServlet.java"
+                        },
+                        {
+                            "function": "service",
+                            "lineno": 727,
+                            "module": "javax.servlet.http.HttpServlet",
+                            "filename": "HttpServlet.java"
+                        },
+                        {
+                            "function": "doPost",
+                            "lineno": 169,
+                            "module": "com.example.myproject.MyServlet",
+                            "filename": "MyServlet.java"
+                        }
+                    ]
+                },
+                "type": "com.example.myproject.MyProjectServletException",
+                "value": ""
+            },
+            {
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "performInsert",
+                            "lineno": 57,
+                            "module": "org.hibernate.id.insert.AbstractSelectingDelegate",
+                            "filename": "AbstractSelectingDelegate.java"
+                        },
+                        {
+                            "function": "executeUpdate",
+                            "lineno": 105,
+                            "module": "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement",
+                            "filename": "NewProxyPreparedStatement.java"
+                        },
+                        {
+                            "function": "executeUpdate",
+                            "module": "org.hsqldb.jdbc.jdbcPreparedStatement"
+                        },
+                        {
+                            "function": "throwError",
+                            "module": "org.hsqldb.jdbc.Util"
+                        }
+                    ]
+                },
+                "type": "java.sql.SQLException",
+                "value": "Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]"
+            }
+        ]
+    }
+}
diff --git a/src/sentry/management/commands/create_sample_event.py b/src/sentry/management/commands/create_sample_event.py
new file mode 100644
index 0000000000..a4a224aae6
--- /dev/null
+++ b/src/sentry/management/commands/create_sample_event.py
@@ -0,0 +1,45 @@
+
+"""
+sentry.management.commands.create_sample_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.management.base import BaseCommand, CommandError, make_option
+
+
+class Command(BaseCommand):
+    help = 'Creates a sample event in Sentry (if applicable)'
+
+    option_list = BaseCommand.option_list + (
+        make_option('--project', dest='project'),
+        make_option('--platform', dest='platform'),
+    )
+
+    def handle(self, **options):
+        from django.conf import settings
+        from sentry.constants import PLATFORM_LIST
+        from sentry.models import Project
+        from sentry.utils.samples import create_sample_event
+
+        if not options['project']:
+            project = Project.objects.get(settings.SENTRY_DEFAULT_PROJECT)
+        else:
+            if options['project'].isdigit():
+                project = Project.objects.get(id=options['project'])
+            elif '/' in options['project']:
+                t_slug, p_slug = options['project'].split('/', 1)
+                project = Project.objects.get(slug=p_slug, team__slug=t_slug)
+            else:
+                raise CommandError('Project must be specified as team-slug/project-slug or a project id')
+
+        if options['platform'] not in PLATFORM_LIST:
+            raise CommandError('Invalid platform. Must specify one of: %s' % ', '.join(PLATFORM_LIST))
+
+        platform = options['platform'] or project.platform
+        event = create_sample_event(project, platform)
+        if not event:
+            raise CommandError('Unable to create an event for platform %r' % (str(platform),))
+
+        self.stdout.write('Event created: %s' % (event.group.get_absolute_url(),))
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index a858a585c7..fe4387d078 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -475,7 +475,7 @@ class GroupManager(BaseManager, ChartMixin):
         return self.save_data(project, data)
 
     @transaction.commit_on_success
-    def save_data(self, project, data):
+    def save_data(self, project, data, raw=False):
         # TODO: this function is way too damn long and needs refactored
         # the inner imports also suck so let's try to move it away from
         # the objects manager
@@ -485,7 +485,7 @@ class GroupManager(BaseManager, ChartMixin):
         from sentry.plugins import plugins
         from sentry.models import Event, Project, EventMapping
 
-        project = Project.objects.get_from_cache(pk=project)
+        project = Project.objects.get_from_cache(id=project)
 
         # First we pull out our top-level (non-data attr) kwargs
         event_id = data.pop('event_id')
@@ -593,18 +593,19 @@ class GroupManager(BaseManager, ChartMixin):
         transaction.savepoint_commit(sid, using=using)
         transaction.commit_unless_managed(using=using)
 
-        send_group_processors(
-            group=group,
-            event=event,
-            is_new=is_new,
-            is_sample=is_sample
-        )
+        if not raw:
+            send_group_processors(
+                group=group,
+                event=event,
+                is_new=is_new,
+                is_sample=is_sample
+            )
 
         if settings.SENTRY_USE_SEARCH:
             index_event.delay(event)
 
         # TODO: move this to the queue
-        if is_new:
+        if is_new and not raw:
             regression_signal.send_robust(sender=self.model, instance=group)
 
         return event
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
new file mode 100644
index 0000000000..2b9a0cfa17
--- /dev/null
+++ b/src/sentry/utils/samples.py
@@ -0,0 +1,35 @@
+"""
+sentry.utils.samples
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import os.path
+
+from sentry.constants import DATA_ROOT, PLATFORM_ROOTS
+from sentry.models import Group
+from sentry.utils import json
+
+
+def create_sample_event(project, platform=None):
+    if not platform:
+        platform = project.platform
+
+    if not platform:
+        return
+
+    platform = PLATFORM_ROOTS.get(platform, platform)
+
+    json_path = os.path.join(DATA_ROOT, 'samples', '%s.json' % (platform.encode('utf-8'),))
+
+    if not os.path.exists(json_path):
+        return
+
+    with open(json_path) as fp:
+        data = json.loads(fp.read())
+
+    data['platform'] = platform
+
+    data = Group.objects.normalize_event_data(data)
+    return Group.objects.save_data(project.id, data, raw=True)
