commit a6caffe9f0189900d164ce407c01fd90904d36a5
Author: Mark Story <mark@sentry.io>
Date:   Wed Nov 20 12:35:30 2019 -0500

    feat(discover) Move related events into a subtab (#15679)
    
    Move related events out of the primary views and into a subtab. This
    lets us defer loading and present the data in a better format.
    
    There isn't a linked issue preview anymore.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index 9d4d80bb6a..0452b912bf 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -25,11 +25,10 @@ import EventView from '../eventView';
 import {hasAggregateField, EventQuery, generateTitle} from '../utils';
 import Pagination from './pagination';
 import LineGraph from './lineGraph';
-import RelatedEvents from '../relatedEvents';
 import TagsTable from '../tagsTable';
-import EventInterfaces from '../eventInterfaces';
-import LinkedIssuePreview from '../linkedIssuePreview';
+import EventInterfaces from './eventInterfaces';
 import DiscoverBreadcrumb from '../breadcrumb';
+import {SectionHeading} from '../styles';
 
 const slugValidator = function(
   props: {[key: string]: any},
@@ -128,9 +127,9 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
               fixed: 'events chart',
             })}
           <EventInterfaces
+            organization={organization}
             event={event}
             projectId={this.projectId}
-            orgId={organization.slug}
           />
         </MainBox>
         <SidebarBox>
@@ -140,17 +139,6 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
             projectId={this.projectId}
           />
           <TagsTable tags={event.tags} />
-          {event.groupID && (
-            <LinkedIssuePreview groupId={event.groupID} eventId={event.eventID} />
-          )}
-          {event.type === 'transaction' && (
-            <RelatedEvents
-              organization={organization}
-              event={event}
-              location={location}
-              eventView={eventView}
-            />
-          )}
         </SidebarBox>
       </ContentGrid>
     );
@@ -273,9 +261,7 @@ const EventMetadata = (props: {
 
   return (
     <StyledMetadata>
-      <MetadataHeading>
-        <span>{t('Event ID')}</span>
-      </MetadataHeading>
+      <SectionHeading>{t('Event ID')}</SectionHeading>
       <MetadataContainer data-test-id="event-id">{event.eventID}</MetadataContainer>
       <MetadataContainer>
         <DateTime
@@ -296,11 +282,6 @@ const MetadataJSON = styled(ExternalLink)`
   font-size: ${p => p.theme.fontSizeMedium};
 `;
 
-const MetadataHeading = styled('h6')`
-  color: ${p => p.theme.gray3};
-  margin: ${space(1)} 0;
-`;
-
 const StyledMetadata = styled('div')`
   margin-bottom: ${space(4)};
 `;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/eventInterfaces.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/eventDetails/eventInterfaces.tsx
index 9021d4ef06..20cc0684cb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInterfaces.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/eventInterfaces.tsx
@@ -13,7 +13,9 @@ import EventExtraData from 'app/components/events/extraData';
 import EventPackageData from 'app/components/events/packageData';
 import NavTabs from 'app/components/navTabs';
 import {objectIsEmpty, toTitleCase} from 'app/utils';
-import {Event} from 'app/types';
+import {Event, Organization} from 'app/types';
+
+import RelatedItems from './relatedItems';
 
 const OTHER_SECTIONS = {
   contexts: EventContexts,
@@ -23,8 +25,8 @@ const OTHER_SECTIONS = {
 };
 
 type ActiveTabProps = {
+  organization: Organization;
   projectId: string;
-  orgId: string;
   event: Event;
   activeTab: string;
 };
@@ -34,7 +36,7 @@ type ActiveTabProps = {
  * Some but not all interface elements require a projectId.
  */
 const ActiveTab = (props: ActiveTabProps) => {
-  const {projectId, orgId, event, activeTab} = props;
+  const {organization, projectId, event, activeTab} = props;
   if (!activeTab) {
     return null;
   }
@@ -44,7 +46,7 @@ const ActiveTab = (props: ActiveTabProps) => {
     return (
       <Component
         projectId={projectId}
-        orgId={orgId}
+        orgId={organization.slug}
         event={event}
         type={entry.type}
         data={entry.data}
@@ -55,6 +57,10 @@ const ActiveTab = (props: ActiveTabProps) => {
   } else if (OTHER_SECTIONS[activeTab]) {
     const Component = OTHER_SECTIONS[activeTab];
     return <Component event={event} isShare={false} hideGuide />;
+  } else if (activeTab === 'related') {
+    return (
+      <RelatedItems event={event} projectId={projectId} organization={organization} />
+    );
   } else {
     /*eslint no-console:0*/
     window.console &&
@@ -80,7 +86,7 @@ ActiveTab.propTypes = {
 type EventInterfacesProps = {
   event: Event;
   projectId: string;
-  orgId: string;
+  organization: Organization;
 };
 type EventInterfacesState = {
   activeTab: string;
@@ -90,11 +96,6 @@ class EventInterfaces extends React.Component<
   EventInterfacesProps,
   EventInterfacesState
 > {
-  static propTypes = {
-    event: SentryTypes.Event.isRequired,
-    projectId: PropTypes.string.isRequired,
-  };
-
   constructor(props: EventInterfacesProps) {
     super(props);
     this.state = {
@@ -105,7 +106,7 @@ class EventInterfaces extends React.Component<
   handleTabChange = tab => this.setState({activeTab: tab});
 
   render() {
-    const {event, projectId, orgId} = this.props;
+    const {event, projectId, organization} = this.props;
     const {activeTab} = this.state;
 
     return (
@@ -154,13 +155,24 @@ class EventInterfaces extends React.Component<
               </li>
             );
           })}
+          <li key="related" className={activeTab === 'related' ? 'active' : undefined}>
+            <a
+              href="#"
+              onClick={evt => {
+                evt.preventDefault();
+                this.handleTabChange('related');
+              }}
+            >
+              {t('Related')}
+            </a>
+          </li>
         </NavTabs>
         <ErrorBoundary message={t('Could not render event details')}>
           <ActiveTab
             event={event}
             activeTab={activeTab}
             projectId={projectId}
-            orgId={orgId}
+            organization={organization}
           />
         </ErrorBoundary>
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/relatedItems.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/relatedItems.tsx
new file mode 100644
index 0000000000..b91d97dea5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/relatedItems.tsx
@@ -0,0 +1,183 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Organization, Event, Group, Project} from 'app/types';
+import AsyncComponent from 'app/components/asyncComponent';
+import DateTime from 'app/components/dateTime';
+import ShortId from 'app/components/shortId';
+import Link from 'app/components/links/link';
+import ProjectBadge from 'app/components/idBadge/projectBadge';
+import Times from 'app/components/group/times';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import withProjects from 'app/utils/withProjects';
+
+import {generateEventDetailsRoute, generateEventSlug} from './utils';
+import {SectionHeading} from '../styles';
+
+type DiscoverResult = {
+  id: string;
+  'project.name': string;
+  'issue.id': number;
+  'event.type': string;
+  title: string;
+  transaction: string;
+  timestamp: number;
+};
+
+type Props = {
+  organization: Organization;
+  projectId: string;
+  projects: Project[];
+  event: Event;
+} & AsyncComponent['props'];
+
+type State = {
+  issue: Group;
+  relatedEvents: {data: DiscoverResult[]};
+} & AsyncComponent['state'];
+
+class RelatedItems extends AsyncComponent<Props, State> {
+  getEndpoints(): [string, string, any][] {
+    const {event, organization} = this.props;
+    const endpoints: any = [];
+
+    if (event.type !== 'transaction') {
+      endpoints.push(['issue', `/issues/${event.groupID}/`, {}]);
+    }
+
+    const trace = event.tags.find(tag => tag.key === 'trace');
+    if (trace) {
+      endpoints.push([
+        'relatedEvents',
+        `/organizations/${organization.slug}/eventsv2/`,
+        {
+          query: {
+            field: [
+              'project.name',
+              'title',
+              'transaction',
+              'id',
+              'issue.id',
+              'event.type',
+              'timestamp',
+            ],
+            sort: ['-timestamp'],
+            query: `trace:${trace.value}`,
+          },
+        },
+      ]);
+    }
+    return endpoints;
+  }
+
+  renderRelatedIssue() {
+    const {event} = this.props;
+    const {issue} = this.state;
+    const issueUrl = `${issue.permalink}events/${event.eventID}/`;
+
+    return (
+      <Section>
+        <SectionHeading>{t('Related Issue')}</SectionHeading>
+        <Card>
+          <IconContainer>
+            <Link to={issueUrl} data-test-id="linked-issue">
+              <ShortId
+                shortId={issue.shortId}
+                avatar={<ProjectBadge project={issue.project} avatarSize={16} hideName />}
+              />
+            </Link>
+          </IconContainer>
+          <StyledLink to={issueUrl}>{issue.title}</StyledLink>
+          <TimesContainer>
+            <Times lastSeen={issue.lastSeen} firstSeen={issue.firstSeen} />
+          </TimesContainer>
+        </Card>
+      </Section>
+    );
+  }
+
+  renderRelatedEvents() {
+    const {event, organization, projects} = this.props;
+    const {relatedEvents} = this.state;
+    return (
+      <Section>
+        <SectionHeading>{t('Related Trace Events')}</SectionHeading>
+        {relatedEvents.data.length < 1 ? (
+          <Card>{t('No related events found.')}</Card>
+        ) : (
+          relatedEvents.data.map((item: DiscoverResult) => {
+            const eventSlug = generateEventSlug(item);
+            const eventUrl = {
+              pathname: generateEventDetailsRoute({eventSlug, organization}),
+              query: location.search,
+            };
+            const project = projects.find(p => p.slug === item['project.name']);
+
+            return (
+              <Card key={item.id} isCurrent={event.id === item.id}>
+                <IconContainer>
+                  <StyledProjectBadge project={project} avatarSize={14} />
+                </IconContainer>
+                <StyledLink to={eventUrl} data-test-id="linked-event">
+                  {item.title ? item.title : item.transaction}
+                </StyledLink>
+                <StyledDateTime date={item.timestamp} />
+              </Card>
+            );
+          })
+        )}
+      </Section>
+    );
+  }
+
+  renderBody() {
+    return (
+      <React.Fragment>
+        {this.state.issue && this.renderRelatedIssue()}
+        {this.state.relatedEvents && this.renderRelatedEvents()}
+      </React.Fragment>
+    );
+  }
+}
+
+const Section = styled('div')`
+  margin-bottom: ${space(2)};
+`;
+
+const Card = styled('div')<{isCurrent?: boolean; theme?: any}>`
+  display: flex;
+  background: ${p => p.theme.white};
+  flex-direction: row;
+  align-items: center;
+  font-size: ${p => p.theme.fontSizeMedium};
+  line-height: 1.4;
+  border: 1px solid ${p => (p.isCurrent ? p.theme.purpleLight : p.theme.borderLight)};
+  border-radius: ${p => p.theme.borderRadius};
+  margin-bottom: ${space(1)};
+  padding: ${space(1)};
+`;
+
+const StyledLink = styled(Link)`
+  flex-grow: 1;
+`;
+
+const IconContainer = styled('div')`
+  display: flex;
+  align-items: center;
+  margin-right: ${space(1)};
+`;
+
+const StyledProjectBadge = styled(ProjectBadge)`
+  display: inline-flex;
+`;
+
+const StyledDateTime = styled(DateTime)`
+  color: ${p => p.theme.gray2};
+`;
+
+const TimesContainer = styled('div')`
+  color: ${p => p.theme.gray2};
+`;
+
+export default withProjects(RelatedItems);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/linkedIssuePreview.tsx b/src/sentry/static/sentry/app/views/eventsV2/linkedIssuePreview.tsx
deleted file mode 100644
index e9cce5177c..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/linkedIssuePreview.tsx
+++ /dev/null
@@ -1,123 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import PropTypes from 'prop-types';
-
-import {t} from 'app/locale';
-import AsyncComponent from 'app/components/asyncComponent';
-import GroupChart from 'app/components/stream/groupChart';
-import InlineSvg from 'app/components/inlineSvg';
-import Link from 'app/components/links/link';
-import Placeholder from 'app/components/placeholder';
-import ProjectBadge from 'app/components/idBadge/projectBadge';
-import SeenByList from 'app/components/seenByList';
-import ShortId from 'app/components/shortId';
-import Times from 'app/components/group/times';
-import space from 'app/styles/space';
-import {Group} from 'app/types';
-
-type Props = {
-  groupId: string;
-  eventId: string;
-};
-
-type State = {
-  group: Group;
-};
-
-class LinkedIssuePreview extends AsyncComponent<
-  Props & AsyncComponent['props'],
-  State & AsyncComponent['state']
-> {
-  static propTypes = {
-    groupId: PropTypes.string.isRequired,
-    eventId: PropTypes.string.isRequired,
-  };
-
-  getEndpoints(): Array<[string, string]> {
-    const {groupId} = this.props;
-    const groupUrl = `/issues/${groupId}/`;
-
-    return [['group', groupUrl]];
-  }
-
-  renderLoading() {
-    return <Placeholder height="120px" bottomGutter={2} />;
-  }
-
-  renderBody() {
-    const {eventId} = this.props;
-    const {group} = this.state;
-    const issueUrl = `${group.permalink}events/${eventId}/`;
-
-    return (
-      <Container>
-        <Title>
-          <InlineSvg src="icon-link" size="12px" /> {t('Linked Issue')}
-        </Title>
-        <Section>
-          <Link to={issueUrl} data-test-id="linked-issue">
-            <StyledShortId
-              shortId={group.shortId}
-              avatar={<ProjectBadge project={group.project} avatarSize={16} hideName />}
-            />
-          </Link>
-          <StyledSeenByList seenBy={group.seenBy} maxVisibleAvatars={5} />
-        </Section>
-        <ChartContainer>
-          <GroupChart id={group.id} statsPeriod="30d" data={group} height={48} />
-        </ChartContainer>
-        <TimesSection>
-          <Times lastSeen={group.lastSeen} firstSeen={group.firstSeen} />
-        </TimesSection>
-      </Container>
-    );
-  }
-}
-
-const Container = styled('div')`
-  border: 1px solid ${p => p.theme.borderLight};
-  border-radius: ${p => p.theme.borderRadius};
-  margin-bottom: ${space(2)};
-  position: relative;
-`;
-
-const Title = styled('h4')`
-  background: #fff;
-  color: ${p => p.theme.gray3};
-  padding: 0 ${space(0.5)};
-
-  font-size: ${p => p.theme.fontSizeSmall};
-  font-weight: normal;
-
-  top: -${space(1)};
-  left: ${space(1)};
-  position: absolute;
-`;
-
-const Section = styled('div')`
-  display: flex;
-  justify-content: space-between;
-  padding: ${space(1)};
-`;
-
-const ChartContainer = styled('div')`
-  border-top: 1px solid ${p => p.theme.borderLight};
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  background: ${p => p.theme.offWhite};
-  position: relative;
-`;
-
-const StyledSeenByList = styled(SeenByList)`
-  margin: 0;
-`;
-
-const StyledShortId = styled(ShortId)`
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
-const TimesSection = styled(Section)`
-  color: ${p => p.theme.gray2};
-  font-size: ${p => p.theme.fontSizeSmall};
-`;
-
-export default LinkedIssuePreview;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx b/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx
deleted file mode 100644
index a6c5b541d5..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/relatedEvents.tsx
+++ /dev/null
@@ -1,187 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import PropTypes from 'prop-types';
-import {Location} from 'history';
-
-import {Organization, Event, Project} from 'app/types';
-import {t} from 'app/locale';
-import SentryTypes from 'app/sentryTypes';
-import AsyncComponent from 'app/components/asyncComponent';
-import InlineSvg from 'app/components/inlineSvg';
-import Link from 'app/components/links/link';
-import Placeholder from 'app/components/placeholder';
-import ProjectBadge from 'app/components/idBadge/projectBadge';
-import DateTime from 'app/components/dateTime';
-import space from 'app/styles/space';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import withProjects from 'app/utils/withProjects';
-
-import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
-import {EventQuery} from './utils';
-import EventView from './eventView';
-
-type Props = {
-  location: Location;
-  organization: Organization;
-  event: Event;
-  projects: Array<Project>;
-  eventView: EventView;
-};
-
-class RelatedEvents extends AsyncComponent<Props> {
-  static propTypes: any = {
-    event: SentryTypes.Event.isRequired,
-    location: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-    projects: PropTypes.arrayOf(SentryTypes.Project),
-  };
-
-  hasGlobalViews(): boolean {
-    return this.props.organization.features.includes('global-views');
-  }
-
-  getEndpoints(): Array<[string, string, {query: EventQuery}]> {
-    const {event, organization} = this.props;
-    const eventsUrl = `/organizations/${organization.slug}/eventsv2/`;
-    const trace = event.tags.find(tag => tag.key === 'trace');
-
-    if (!trace) {
-      return [];
-    }
-
-    const params: {query: EventQuery} = {
-      query: {
-        field: [
-          'project.name',
-          'title',
-          'transaction',
-          'message',
-          'id',
-          'issue.id',
-          'event.type',
-          'timestamp',
-        ],
-        sort: ['-timestamp'],
-        query: `trace:${trace.value}`,
-      },
-    };
-
-    return [['events', eventsUrl, params]];
-  }
-
-  renderLoading() {
-    return <Placeholder height="120px" bottomGutter={2} />;
-  }
-
-  renderError(error) {
-    // Hide the related events if the user doesn't have global-views
-    if (!this.hasGlobalViews()) {
-      return null;
-    }
-
-    return super.renderError(error);
-  }
-
-  renderBody() {
-    const {organization, projects, event, eventView} = this.props;
-    const {events} = this.state;
-    if (!events || !events.data) {
-      return null;
-    }
-
-    return (
-      <Container>
-        <Title>
-          <InlineSvg src="icon-link" size="12px" /> {t('Related Events')}
-        </Title>
-        {events.data.length < 1 ? (
-          <Card>{t('No related events found.')}</Card>
-        ) : (
-          events.data.map(item => {
-            const eventSlug = generateEventSlug(item);
-            const eventUrl = {
-              pathname: generateEventDetailsRoute({eventSlug, organization}),
-              query: eventView.generateQueryStringObject(),
-            };
-            const project = projects.find(p => p.slug === item['project.name']);
-
-            let iconSrc = 'icon-circle-exclamation';
-            if (item['event.type'] === 'transaction') {
-              iconSrc = 'icon-stats';
-            }
-
-            return (
-              <Card key={item.id} isCurrent={event.id === item.id}>
-                <CardHeader>
-                  <InlineSvg src={iconSrc} size="15" />
-                  <EventLink to={eventUrl} data-test-id="linked-event">
-                    {item.title ? item.title : item.transaction}
-                    {item.title !== item.transaction && <em>{item.transaction}</em>}
-                  </EventLink>
-                </CardHeader>
-                {item.message !== item.title && <ExtraInfo>{item.message}</ExtraInfo>}
-                <ExtraInfo>
-                  <StyledProjectBadge project={project} avatarSize={14} />
-                  <StyledDateTime date={item.timestamp} />
-                </ExtraInfo>
-              </Card>
-            );
-          })
-        )}
-      </Container>
-    );
-  }
-}
-
-const Container = styled('div')`
-  position: relative;
-`;
-
-const Card = styled('div')<{isCurrent?: boolean; theme?: any}>`
-  display: flex;
-  flex-direction: column;
-  font-size: ${p => p.theme.fontSizeMedium};
-  line-height: 1.4;
-  border: 1px solid ${p => (p.isCurrent ? p.theme.purpleLight : p.theme.borderLight)};
-  border-radius: ${p => p.theme.borderRadius};
-  margin-bottom: ${space(1)};
-  padding: ${space(1)};
-`;
-
-const CardHeader = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-
-const EventLink = styled(Link)`
-  margin-left: ${space(1)};
-  max-width: 250px;
-  ${overflowEllipsis};
-`;
-
-const Title = styled('h4')`
-  background: #fff;
-  color: ${p => p.theme.gray3};
-  padding: 0 ${space(1)};
-  margin-bottom: ${space(0.5)};
-
-  font-size: ${p => p.theme.fontSizeSmall};
-  font-weight: normal;
-`;
-
-const StyledDateTime = styled(DateTime)`
-  color: ${p => p.theme.gray2};
-`;
-
-const StyledProjectBadge = styled(ProjectBadge)`
-  margin-right: ${space(1)};
-`;
-
-const ExtraInfo = styled('div')`
-  display: flex;
-  justify-content: space-between;
-  margin-top: ${space(0.5)};
-  font-size: ${p => p.theme.fontSizeSmall};
-`;
-
-export default withProjects(RelatedEvents);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
index 88bc376277..d1afee1360 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
@@ -1,6 +1,7 @@
 import styled from 'react-emotion';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import Link from 'app/components/links/link';
+import space from 'app/styles/space';
 
 export const QueryLink = styled(Link)`
   ${overflowEllipsis};
@@ -11,3 +12,9 @@ export const QueryLink = styled(Link)`
     background-color: ${p => p.theme.offWhite};
   }
 `;
+
+export const SectionHeading = styled('h4')`
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin: ${space(1)} 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
index de171a869f..4e45394900 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
@@ -11,6 +11,7 @@ import overflowEllipsis from 'app/styles/overflowEllipsis';
 import {EventTag} from 'app/types';
 
 import {getEventTagSearchUrl} from './utils';
+import {SectionHeading} from './styles';
 
 type Props = {
   tags: Array<EventTag>;
@@ -20,7 +21,7 @@ const TagsTable = (props: Props) => {
   const {location, tags} = props;
   return (
     <div>
-      <TagHeading>{t('Event Tag Details')}</TagHeading>
+      <SectionHeading>{t('Event Tag Details')}</SectionHeading>
       <StyledTable>
         <tbody>
           {tags.map(tag => {
@@ -59,11 +60,6 @@ const StyledTable = styled('table')`
   max-width: 100%;
 `;
 
-const TagHeading = styled('h6')`
-  color: ${p => p.theme.gray3};
-  margin: ${space(1)} 0;
-`;
-
 const StyledTr = styled('tr')`
   &:nth-child(2n + 1) td {
     background: #f4f2f7;
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 0e04a8dbb1..9e2cb28d04 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -132,10 +132,6 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             header = self.browser.element('[data-test-id="event-header"] span')
             assert event_data["message"] in header.text
 
-            issue_link = self.browser.element('[data-test-id="linked-issue"]')
-            issue_event_url_fragment = "/issues/%s/events/%s/" % (event.group_id, event.event_id)
-            assert issue_event_url_fragment in issue_link.get_attribute("href")
-
             self.browser.snapshot("events-v2 - single error details view")
 
     @patch("django.utils.timezone.now")
