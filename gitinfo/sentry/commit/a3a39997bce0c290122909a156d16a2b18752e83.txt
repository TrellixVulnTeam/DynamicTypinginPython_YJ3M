commit a3a39997bce0c290122909a156d16a2b18752e83
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu May 7 15:46:51 2020 -0700

    feat(ui): Refactor `<GlobalSelectionHeader>` (#18499)
    
    This fixes a number of bugs with Global Selection Header including:
    
    * Loading and saving of last used projects/envs with local storage.
    * race conditions with enforcement of a single project and the child view being mounted (and thus firing api requests before enforcing a single project)
    * lost project context in certain situations eg after deleting a release.

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
index e8ea79bd41..6ad05e9e39 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
@@ -2,12 +2,29 @@ import * as ReactRouter from 'react-router';
 import * as Sentry from '@sentry/browser';
 import isInteger from 'lodash/isInteger';
 import omit from 'lodash/omit';
+import pick from 'lodash/pick';
 import qs from 'query-string';
 
-import {Environment} from 'app/types';
+import {
+  DATE_TIME,
+  LOCAL_STORAGE_KEY,
+  URL_PARAM,
+} from 'app/constants/globalSelectionHeader';
+import {
+  Environment,
+  GlobalSelection,
+  MinimalProject,
+  Organization,
+  Project,
+} from 'app/types';
 import {defined} from 'app/utils';
+import {
+  getDefaultSelection,
+  getStateFromQuery,
+} from 'app/components/organizations/globalSelectionHeader/utils';
 import {getUtcDateString} from 'app/utils/dates';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
+import localStorage from 'app/utils/localStorage';
 
 /**
  * Note this is the internal project.id, NOT the slug, but it is the stringified version of it
@@ -37,9 +54,6 @@ type DateTimeObject = {
   period?: string | null;
 };
 
-// Get Params type from `getParams` helper
-// type Params = Parameters<typeof getParams>[0];
-
 /**
  * Cast project ids to strings, as everything is assumed to be a string in URL params
  *
@@ -63,9 +77,138 @@ export function resetGlobalSelection() {
   GlobalSelectionActions.reset();
 }
 
+function getProjectIdFromProject(project: MinimalProject) {
+  return parseInt(project.id, 10);
+}
+
+type InitializeUrlStateParams = {
+  organization: Organization;
+  queryParams: ReactRouter.WithRouterProps['location']['query'];
+  router: ReactRouter.WithRouterProps['router'];
+  memberProjects: Project[];
+  shouldForceProject?: boolean;
+  shouldEnforceSingleProject: boolean;
+  /**
+   * If true, do not load from local storage
+   */
+  skipLastUsed?: boolean;
+  defaultSelection?: Partial<GlobalSelection>;
+  forceProject?: MinimalProject | null;
+};
+
+export function initializeUrlState({
+  organization,
+  queryParams,
+  router,
+  memberProjects,
+  skipLastUsed,
+  shouldForceProject,
+  shouldEnforceSingleProject,
+  defaultSelection,
+  forceProject,
+}: InitializeUrlStateParams) {
+  const orgSlug = organization.slug;
+  const query = pick(queryParams, [URL_PARAM.PROJECT, URL_PARAM.ENVIRONMENT]);
+  const hasProjectOrEnvironmentInUrl = Object.keys(query).length > 0;
+  const parsed = getStateFromQuery(queryParams);
+
+  let globalSelection: Omit<GlobalSelection, 'datetime'> & {
+    datetime: {
+      [K in keyof GlobalSelection['datetime']]: GlobalSelection['datetime'][K] | null;
+    };
+  } = {
+    ...getDefaultSelection(),
+    datetime: {
+      [DATE_TIME.START as 'start']: parsed.start || null,
+      [DATE_TIME.END as 'end']: parsed.end || null,
+      [DATE_TIME.PERIOD as 'period']: parsed.period || null,
+      [DATE_TIME.UTC as 'utc']: parsed.utc || null,
+    },
+    ...defaultSelection,
+  };
+
+  // We only save environment and project, so if those exist in
+  // URL, do not touch local storage
+  if (hasProjectOrEnvironmentInUrl) {
+    globalSelection.projects = parsed.project || [];
+    globalSelection.environments = parsed.environment || [];
+  } else if (!skipLastUsed) {
+    try {
+      const localStorageKey = `${LOCAL_STORAGE_KEY}:${orgSlug}`;
+      const storedValue = localStorage.getItem(localStorageKey);
+
+      if (storedValue) {
+        globalSelection = {
+          datetime: globalSelection.datetime,
+          ...JSON.parse(storedValue),
+        };
+      }
+    } catch (err) {
+      // use default if invalid
+      Sentry.captureException(err);
+      console.error(err); // eslint-disable-line no-console
+    }
+  }
+
+  const {projects, environments: environment, datetime} = globalSelection;
+  let newProject: number[] | null = null;
+  let project = projects;
+
+  /**
+   * Skip enforcing a single project if `shouldForceProject` is true,
+   * since a component is controlling what that project needs to be.
+   * This is true regardless if user has access to multi projects
+   */
+  if (shouldForceProject && forceProject) {
+    newProject = [getProjectIdFromProject(forceProject)];
+  } else if (shouldEnforceSingleProject && !shouldForceProject) {
+    /**
+     * If user does not have access to `global-views` (e.g. multi project select) *and* there is no
+     * `project` URL parameter, then we update URL params with:
+     * 1) the first project from the list of requested projects from URL params,
+     * 2) first project user is a member of from org
+     *
+     * Note this is intentionally skipped if `shouldForceProject == true` since we want to initialize store
+     * and wait for the forced project
+     */
+    if (projects && projects.length > 0) {
+      // If there is a list of projects from URL params, select first project from that list
+      newProject = typeof projects === 'string' ? [Number(projects)] : [projects[0]];
+    } else {
+      // When we have finished loading the organization into the props,  i.e. the organization slug is consistent with
+      // the URL param--Sentry will get the first project from the organization that the user is a member of.
+      newProject = [...memberProjects].slice(0, 1).map(getProjectIdFromProject);
+    }
+  }
+
+  if (newProject) {
+    globalSelection.projects = newProject;
+    project = newProject;
+  }
+
+  GlobalSelectionActions.initializeUrlState(globalSelection);
+  GlobalSelectionActions.setOrganization(organization);
+
+  // To keep URLs clean, don't push default period if url params are empty
+  const parsedWithNoDefaultPeriod = getStateFromQuery(queryParams, {
+    allowEmptyPeriod: true,
+  });
+
+  const newDatetime = {
+    ...datetime,
+    period:
+      !parsedWithNoDefaultPeriod.start &&
+      !parsedWithNoDefaultPeriod.end &&
+      !parsedWithNoDefaultPeriod.period
+        ? null
+        : datetime.period,
+    utc: !parsedWithNoDefaultPeriod.utc ? null : datetime.utc,
+  };
+  updateParamsWithoutHistory({project, environment, ...newDatetime}, router);
+}
+
 /**
- * Updates global project selection URL param if `router` is supplied
- * OTHERWISE fire action to update projects
+ * Updates store and global project selection URL param if `router` is supplied
  */
 export function updateProjects(
   projects: ProjectId[],
@@ -80,9 +223,7 @@ export function updateProjects(
     return;
   }
 
-  if (!router) {
-    GlobalSelectionActions.updateProjects(projects);
-  }
+  GlobalSelectionActions.updateProjects(projects);
   updateParams({project: projects}, router, options);
 }
 
@@ -91,8 +232,7 @@ function isProjectsValid(projects: ProjectId[]) {
 }
 
 /**
- * Updates global datetime selection URL param if `router` is supplied
- * OTHERWISE fire action to update projects
+ * Updates store and global datetime selection URL param if `router` is supplied
  *
  * @param {Object} datetime Object with start, end, range keys
  * @param {Object} [router] Router object
@@ -104,15 +244,14 @@ export function updateDateTime(
   router?: Router,
   options?: Options
 ) {
-  if (!router) {
-    GlobalSelectionActions.updateDateTime(datetime);
-  }
+  GlobalSelectionActions.updateDateTime(datetime);
+  // We only save projects/environments to local storage, do not
+  // save anything when date changes.
   updateParams(datetime, router, {...options, save: false});
 }
 
 /**
- * Updates global environment selection URL param if `router` is supplied
- * OTHERWISE fire action to update projects
+ * Updates store and updates global environment selection URL param if `router` is supplied
  *
  * @param {String[]} environments List of environments
  * @param {Object} [router] Router object
@@ -124,9 +263,7 @@ export function updateEnvironments(
   router?: Router,
   options?: Options
 ) {
-  if (!router) {
-    GlobalSelectionActions.updateEnvironments(environment);
-  }
+  GlobalSelectionActions.updateEnvironments(environment);
   updateParams({environment}, router, options);
 }
 
diff --git a/src/sentry/static/sentry/app/actions/globalSelectionActions.tsx b/src/sentry/static/sentry/app/actions/globalSelectionActions.tsx
index 403a7b6bae..e0a1a47309 100644
--- a/src/sentry/static/sentry/app/actions/globalSelectionActions.tsx
+++ b/src/sentry/static/sentry/app/actions/globalSelectionActions.tsx
@@ -2,6 +2,8 @@ import Reflux from 'reflux';
 
 export default Reflux.createActions([
   'reset',
+  'setOrganization',
+  'initializeUrlState',
   'updateProjects',
   'updateDateTime',
   'updateEnvironments',
diff --git a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
index c706eda225..2fbdc8d6d3 100644
--- a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
+++ b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
@@ -3,7 +3,8 @@ import React from 'react';
 import moment from 'moment';
 
 import {callIfFunction} from 'app/utils/callIfFunction';
-import {updateParams} from 'app/actionCreators/globalSelection';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
+import {updateDateTime} from 'app/actionCreators/globalSelection';
 import DataZoom from 'app/components/charts/components/dataZoom';
 import SentryTypes from 'app/sentryTypes';
 import ToolBox from 'app/components/charts/components/toolBox';
@@ -89,6 +90,7 @@ class ChartZoom extends React.Component {
    * Saves a callback function to be called after chart animation is completed
    */
   setPeriod = ({period, start, end}, saveHistory) => {
+    const {router, onZoom} = this.props;
     const startFormatted = getDate(start);
     const endFormatted = getDate(end);
 
@@ -103,20 +105,22 @@ class ChartZoom extends React.Component {
     //
     // Parent container can use this to change into a loading state before
     // URL parameters are changed
-    callIfFunction(this.props.onZoom, {
+    callIfFunction(onZoom, {
       period,
       start: startFormatted,
       end: endFormatted,
     });
 
     this.zooming = () => {
-      updateParams(
+      updateDateTime(
         {
           period,
-          start: startFormatted,
-          end: endFormatted,
+          start: startFormatted
+            ? getUtcToLocalDateObject(startFormatted)
+            : startFormatted,
+          end: endFormatted ? getUtcToLocalDateObject(endFormatted) : endFormatted,
         },
-        this.props.router
+        router
       );
 
       this.saveCurrentPeriod({period, start, end});
@@ -202,11 +206,11 @@ class ChartZoom extends React.Component {
       children,
       xAxisIndex,
 
-      onZoom, // eslint-disable-line no-unused-vars
-      onRestore, // eslint-disable-line no-unused-vars
-      onChartReady, // eslint-disable-line no-unused-vars
-      onDataZoom, // eslint-disable-line no-unused-vars
-      onFinished, // eslint-disable-line no-unused-vars
+      onZoom: _onZoom,
+      onRestore: _onRestore,
+      onChartReady: _onChartReady,
+      onDataZoom: _onDataZoom,
+      onFinished: _onFinished,
       ...props
     } = this.props;
 
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx
index 3c133f5caf..1d28e6e4fb 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.tsx
@@ -2,27 +2,25 @@ import {WithRouterProps} from 'react-router/lib/withRouter';
 import PropTypes from 'prop-types';
 import React from 'react';
 import debounce from 'lodash/debounce';
-import flatten from 'lodash/flatten';
-import isEqual from 'lodash/isEqual';
-import partition from 'lodash/partition';
-import pick from 'lodash/pick';
 import styled from '@emotion/styled';
 
-import {DATE_TIME_KEYS, URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {
+  GlobalSelection,
+  Environment,
+  Organization,
+  MinimalProject,
+  Project,
+} from 'app/types';
+import {PageContent} from 'app/styles/organization';
 import {callIfFunction} from 'app/utils/callIfFunction';
-import {isEqualWithDates} from 'app/utils/isEqualWithDates';
-import {GlobalSelection, Environment, Organization, Project} from 'app/types';
 import {t} from 'app/locale';
 import {
   updateDateTime,
   updateEnvironments,
-  updateParams,
-  updateParamsWithoutHistory,
   updateProjects,
 } from 'app/actionCreators/globalSelection';
 import BackToIssues from 'app/components/organizations/backToIssues';
-import ConfigStore from 'app/stores/configStore';
 import HeaderItemPosition from 'app/components/organizations/headerItemPosition';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import InlineSvg from 'app/components/inlineSvg';
@@ -33,18 +31,12 @@ import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
 
-import {getStateFromQuery} from './utils';
 import Header from './header';
 
 const PROJECTS_PER_PAGE = 50;
 
-function getProjectIdFromProject(project) {
-  return parseInt(project.id, 10);
-}
-
-type MinimalProject = Pick<Project, 'id' | 'slug'>;
-
 const defaultProps = {
   /**
    * Disable automatic routing
@@ -74,8 +66,12 @@ const defaultProps = {
 };
 
 type Props = {
+  children?: React.ReactNode; // TODO(discoverv1): This should be required when discoverv1 is removed
   organization: Organization;
 
+  memberProjects: Project[];
+  nonMemberProjects: Project[];
+
   /**
    * List of projects to display in project selector (comes from HoC)
    */
@@ -86,6 +82,16 @@ type Props = {
    */
   selection: GlobalSelection;
 
+  /**
+   * Custom default selection values (e.g. a different default period)
+   */
+  defaultSelection?: Partial<GlobalSelection>;
+
+  /**
+   * Is global selection store still loading (i.e. not ready)
+   */
+  isGlobalSelectionReady?: boolean;
+
   /**
    * Whether or not the projects are currently being loaded in
    */
@@ -122,11 +128,6 @@ type Props = {
    */
   showRelative?: boolean;
 
-  /**
-   * Allow user to clear the time range selection
-   */
-  allowClearTimeRange?: boolean;
-
   /**
    * Small info icon with tooltip hint text
    */
@@ -167,18 +168,27 @@ type Props = {
   };
 
 type State = {
-  projects: Project[] | null;
+  projects: number[] | null;
   environments: Environment[] | null;
   searchQuery: string;
 };
 
 class GlobalSelectionHeader extends React.Component<Props, State> {
-  static propTypes = {
+  static propTypes: any = {
     organization: SentryTypes.Organization,
     router: PropTypes.object,
     projects: PropTypes.arrayOf(SentryTypes.Project).isRequired,
+
+    memberProjects: PropTypes.arrayOf(SentryTypes.Project).isRequired,
+
+    nonMemberProjects: PropTypes.arrayOf(SentryTypes.Project).isRequired,
+
+    /**
+     * Slugs of projects to display in project selector (this affects the ^^^projects returned from HoC)
+     */
     specificProjectSlugs: PropTypes.arrayOf(PropTypes.string),
     disableMultipleProjectSelection: PropTypes.bool,
+    isGlobalSelectionReady: PropTypes.bool,
     loadingProjects: PropTypes.bool,
     shouldForceProject: PropTypes.bool,
     forceProject: SentryTypes.Project,
@@ -189,7 +199,6 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
     resetParamsOnChange: PropTypes.arrayOf(PropTypes.string),
     showAbsolute: PropTypes.bool,
     showRelative: PropTypes.bool,
-    allowClearTimeRange: PropTypes.bool,
     timeRangeHint: PropTypes.string,
 
     // Callbacks //
@@ -214,262 +223,9 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
     searchQuery: '',
   };
 
-  componentDidMount() {
-    if (this.props.hasCustomRouting) {
-      return;
-    }
-
-    const {
-      location,
-      params,
-      organization,
-      selection,
-      shouldForceProject,
-      forceProject,
-    } = this.props;
-
-    const hasMultipleProjectFeature = this.hasMultipleProjectSelection();
-
-    if (organization?.slug && organization?.slug !== params?.orgId) {
-      return;
-    }
-
-    const stateFromRouter = getStateFromQuery(location.query);
-    // We should update store if there are any relevant URL parameters when component is mounted
-    if (Object.values(stateFromRouter).some(i => !!i)) {
-      if (!stateFromRouter.start && !stateFromRouter.end && !stateFromRouter.period) {
-        stateFromRouter.period = DEFAULT_STATS_PERIOD;
-      }
-      const {project, environment, start, end, period, utc} = stateFromRouter;
-
-      // This will update store with values from URL parameters
-      updateDateTime({start, end, period, utc});
-
-      // environment/project here can be null i.e. if only period is set in url params
-      updateEnvironments(environment || []);
-
-      const requestedProjects = project || [];
-
-      if (hasMultipleProjectFeature) {
-        updateProjects(requestedProjects);
-      } else {
-        this.enforceSingleProject({requestedProjects, shouldForceProject, forceProject});
-      }
-    } else if (params && params.orgId === organization.slug) {
-      // Otherwise, if organization has NOT changed,
-      // we can update URL with values from store
-      //
-      // e.g. when switching to a new view that uses this component,
-      // update URL parameters to reflect current store
-      const {datetime, environments, projects} = selection;
-      const otherParams = {environment: environments, ...datetime};
-
-      if (hasMultipleProjectFeature || projects.length === 1) {
-        updateParamsWithoutHistory({project: projects, ...otherParams}, this.getRouter());
-      } else {
-        this.enforceSingleProject({shouldForceProject, forceProject}, otherParams);
-      }
-    }
-  }
-
-  shouldComponentUpdate(nextProps, nextState) {
-    // Update if state changes
-    if (this.state !== nextState) {
-      return true;
-    }
-
-    // Update if URL parameters change
-    if (this.changedQueryKeys(this.props, nextProps).length > 0) {
-      return true;
-    }
-
-    if (
-      nextProps.organization?.slug &&
-      nextProps.organization?.slug !== nextProps.params?.orgId
-    ) {
-      return false;
-    }
-
-    // Update if `forceProject` changes or loading state changes
-    if (
-      this.props.forceProject !== nextProps.forceProject ||
-      this.props.loadingProjects !== nextProps.loadingProjects
-    ) {
-      return true;
-    }
-
-    const nonDateKeys = ['projects', 'environments'];
-    // Update if selection values change
-    if (
-      !isEqual(
-        pick(this.props.selection, nonDateKeys),
-        pick(nextProps.selection, nonDateKeys)
-      ) ||
-      !isEqualWithDates(
-        pick(this.props.selection.datetime, DATE_TIME_KEYS),
-        pick(nextProps.selection.datetime, DATE_TIME_KEYS)
-      )
-    ) {
-      return true;
-    }
-
-    // update if any projects are starred or reordered
-    if (
-      this.props.projects &&
-      nextProps.projects &&
-      !isEqual(
-        this.props.projects.map(p => [p.slug, p.isBookmarked]),
-        nextProps.projects.map(p => [p.slug, p.isBookmarked])
-      )
-    ) {
-      return true;
-    }
-
-    if (this.props.organization !== nextProps.organization) {
-      return true;
-    }
-
-    return false;
-  }
-
-  componentDidUpdate(prevProps) {
-    const {hasCustomRouting, location, forceProject, shouldForceProject} = this.props;
-
-    if (hasCustomRouting) {
-      return;
-    }
-
-    const hasMultipleProjectFeature = this.hasMultipleProjectSelection();
-    let singleProjectIsEnforced = false;
-    // This means that previously forceProject was falsey (e.g. loading) and now
-    // we have the project to force.
-    //
-    // If user does not have multiple project selection, we need to save the forced
-    // project into the store (if project is not in URL params), otherwise
-    // there will be weird behavior in this component since it just picks a project
-    if (!hasMultipleProjectFeature && forceProject && !prevProps.forceProject) {
-      // Make sure a project isn't specified in query param already, since it should take precendence
-      const {project} = getStateFromQuery(location.query);
-      if (!project) {
-        singleProjectIsEnforced = true;
-        this.enforceSingleProject({shouldForceProject, forceProject});
-      }
-    }
-
-    // Projects have finished loading so now we can enforce a single project
-    if (
-      !singleProjectIsEnforced &&
-      prevProps.loadingProjects &&
-      !this.props.loadingProjects &&
-      (!hasMultipleProjectFeature || forceProject)
-    ) {
-      const {project} = getStateFromQuery(location.query);
-      if (!project) {
-        this.enforceSingleProject({shouldForceProject, forceProject});
-      }
-    }
-
-    // If component has updated (e.g. due to re-render from a router action),
-    // update store values with values from router. Router should be source of truth
-    this.updateStoreIfChange(prevProps, this.props);
-  }
-
   hasMultipleProjectSelection = () =>
     new Set(this.props.organization.features).has('global-views');
 
-  /**
-   * If user does not have access to `global-views` (e.g. multi project select), then
-   * we update URL params with 1) `props.forceProject`, 2) requested projects from URL params,
-   * 3) first project user is a member of from org
-   */
-  enforceSingleProject = (
-    {
-      requestedProjects,
-      shouldForceProject,
-      forceProject,
-    }: {
-      requestedProjects?: number[];
-      shouldForceProject?: boolean;
-      forceProject?: MinimalProject | null;
-    } = {},
-    otherParams?
-  ) => {
-    let newProject;
-
-    // This is the case where we *want* to force project, but we are still loading
-    // the forced project's details
-    if (shouldForceProject && !forceProject) {
-      return;
-    }
-
-    if (forceProject) {
-      // this takes precendence over the other options
-      newProject = [getProjectIdFromProject(forceProject)];
-    } else if (requestedProjects && requestedProjects.length > 0) {
-      // If there is a list of projects from URL params, select first project from that list
-      newProject = [requestedProjects[0]];
-    } else {
-      // When we have finished loading the organization into the props,  i.e. the organization slug is consistent with
-      // the URL param--Sentry will get the first project from the organization that the user is a member of.
-      newProject = this.getFirstProject();
-    }
-
-    updateProjects(newProject);
-    updateParamsWithoutHistory({project: newProject, ...otherParams}, this.getRouter());
-  };
-
-  /**
-   * Identifies the query params (that are relevant to this component) that have changed
-   *
-   * @return {String[]} Returns an array of param keys that have changed
-   */
-  changedQueryKeys = (prevProps, nextProps) => {
-    const urlParamKeys = Object.values(URL_PARAM);
-    const prevQuery = pick(prevProps.location.query, urlParamKeys);
-    const nextQuery = pick(nextProps.location.query, urlParamKeys);
-
-    // If no next query is specified keep the previous global selection values
-    if (Object.keys(prevQuery).length === 0 && Object.keys(nextQuery).length === 0) {
-      return [];
-    }
-
-    const changedKeys = Object.values(urlParamKeys).filter(
-      key => !isEqual(prevQuery[key], nextQuery[key])
-    );
-
-    return changedKeys;
-  };
-
-  updateStoreIfChange = (prevProps, nextProps) => {
-    // Don't do anything if query parameters have not changed
-    //
-    // e.g. if selection store changed, don't trigger more actions
-    // to update global selection store (otherwise we'll get recursive updates)
-    const changedKeys = this.changedQueryKeys(prevProps, nextProps);
-
-    if (!changedKeys.length) {
-      return;
-    }
-
-    const {project, environment, period, start, end, utc} = getStateFromQuery(
-      nextProps.location.query
-    );
-
-    if (changedKeys.includes(URL_PARAM.PROJECT)) {
-      updateProjects(project || []);
-    }
-    if (changedKeys.includes(URL_PARAM.ENVIRONMENT)) {
-      updateEnvironments(environment || []);
-    }
-    if (
-      [URL_PARAM.START, URL_PARAM.END, URL_PARAM.UTC, URL_PARAM.PERIOD].find(key =>
-        changedKeys.includes(key)
-      )
-    ) {
-      updateDateTime({start, end, period, utc});
-    }
-  };
-
   // Returns `router` from props if `hasCustomRouting` property is false
   getRouter = () => (!this.props.hasCustomRouting ? this.props.router : null);
 
@@ -477,8 +233,8 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
   getUpdateOptions = () =>
     !this.props.hasCustomRouting
       ? {
-          resetParams: this.props.resetParamsOnChange,
           save: true,
+          resetParams: this.props.resetParamsOnChange,
         }
       : {};
 
@@ -528,46 +284,12 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
     const {projects} = this.state;
 
     // Clear environments when switching projects
-    //
-    // Update both params at once, otherwise:
-    // - if you update projects first, we could get a flicker
-    //   because you'll have projects & environments before we update
-    // - if you update environments first, there could be race conditions
-    //   with value of router.location.query
-    updateParams(
-      {
-        environment: null,
-        project: projects,
-      },
-      this.getRouter(),
-      this.getUpdateOptions()
-    );
+    updateEnvironments([], this.getRouter(), this.getUpdateOptions());
+    updateProjects(projects || [], this.getRouter(), this.getUpdateOptions());
     this.setState({projects: null, environments: null});
     callIfFunction(this.props.onUpdateProjects, projects);
   };
 
-  getProjects = () => {
-    const {organization, projects} = this.props;
-    const {isSuperuser} = ConfigStore.get('user');
-    const isOrgAdmin = new Set(organization.access).has('org:admin');
-
-    const [memberProjects, nonMemberProjects] = partition(
-      projects,
-      project => project.isMember
-    );
-
-    if (isSuperuser || isOrgAdmin) {
-      return [memberProjects, nonMemberProjects];
-    }
-
-    return [memberProjects, []];
-  };
-
-  getFirstProject = () =>
-    flatten(this.getProjects())
-      .map(getProjectIdFromProject)
-      .slice(0, 1);
-
   getBackButton = () => {
     const {organization, location} = this.props;
     return (
@@ -609,15 +331,18 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
   render() {
     const {
       className,
+      children,
       shouldForceProject,
       forceProject,
+      isGlobalSelectionReady,
       loadingProjects,
       organization,
       showAbsolute,
       showRelative,
       showDateSelector,
       showEnvironmentSelector,
-      allowClearTimeRange,
+      memberProjects,
+      nonMemberProjects,
       showIssueStreamLink,
       showProjectSettingsLink,
       lockedMessageSubject,
@@ -625,117 +350,124 @@ class GlobalSelectionHeader extends React.Component<Props, State> {
       specificProjectSlugs,
       disableMultipleProjectSelection,
       projectsFooterMessage,
+      defaultSelection,
     } = this.props;
+
     const {period, start, end, utc} = this.props.selection.datetime || {};
+    const defaultPeriod = defaultSelection?.datetime?.period || DEFAULT_STATS_PERIOD;
 
     const selectedProjects = forceProject
       ? [parseInt(forceProject.id, 10)]
       : this.props.selection.projects;
 
-    const [memberProjects, nonMemberProjects] = this.getProjects();
-
     return (
-      <Header className={className}>
-        <HeaderItemPosition>
-          {showIssueStreamLink && this.getBackButton()}
-          <Projects
-            orgId={organization.slug}
-            limit={PROJECTS_PER_PAGE}
-            slugs={specificProjectSlugs}
-          >
-            {({projects, initiallyLoaded, hasMore, onSearch, fetching}) => {
-              const paginatedProjectSelectorCallbacks = {
-                onScroll: ({clientHeight, scrollHeight, scrollTop}) => {
-                  // check if no new projects are being fetched and the user has
-                  // scrolled far enough to fetch a new page of projects
-                  if (
-                    !fetching &&
-                    scrollTop + clientHeight >= scrollHeight - clientHeight &&
-                    hasMore
-                  ) {
-                    this.scrollFetchDispatcher(onSearch, {append: true});
-                  }
-                },
-                onFilterChange: event => {
-                  this.searchDispatcher(onSearch, event.target.value, {
-                    append: false,
-                  });
-                },
-                searching: fetching,
-                paginated: true,
-              };
-              return (
-                <MultipleProjectSelector
+      <React.Fragment>
+        <Header className={className}>
+          <HeaderItemPosition>
+            {showIssueStreamLink && this.getBackButton()}
+            <Projects
+              orgId={organization.slug}
+              limit={PROJECTS_PER_PAGE}
+              slugs={specificProjectSlugs}
+            >
+              {({projects, initiallyLoaded, hasMore, onSearch, fetching}) => {
+                const paginatedProjectSelectorCallbacks = {
+                  onScroll: ({clientHeight, scrollHeight, scrollTop}) => {
+                    // check if no new projects are being fetched and the user has
+                    // scrolled far enough to fetch a new page of projects
+                    if (
+                      !fetching &&
+                      scrollTop + clientHeight >= scrollHeight - clientHeight &&
+                      hasMore
+                    ) {
+                      this.scrollFetchDispatcher(onSearch, {append: true});
+                    }
+                  },
+                  onFilterChange: event => {
+                    this.searchDispatcher(onSearch, event.target.value, {
+                      append: false,
+                    });
+                  },
+                  searching: fetching,
+                  paginated: true,
+                };
+                return (
+                  <MultipleProjectSelector
+                    organization={organization}
+                    shouldForceProject={shouldForceProject}
+                    forceProject={forceProject}
+                    projects={loadingProjects ? projects : memberProjects}
+                    isGlobalSelectionReady={isGlobalSelectionReady}
+                    isLoadingProjects={!initiallyLoaded}
+                    nonMemberProjects={nonMemberProjects}
+                    value={this.state.projects || this.props.selection.projects}
+                    onChange={this.handleChangeProjects}
+                    onUpdate={this.handleUpdateProjects}
+                    multi={
+                      !disableMultipleProjectSelection &&
+                      this.hasMultipleProjectSelection()
+                    }
+                    {...(loadingProjects ? paginatedProjectSelectorCallbacks : {})}
+                    showIssueStreamLink={showIssueStreamLink}
+                    showProjectSettingsLink={showProjectSettingsLink}
+                    lockedMessageSubject={lockedMessageSubject}
+                    footerMessage={projectsFooterMessage}
+                  />
+                );
+              }}
+            </Projects>
+          </HeaderItemPosition>
+
+          {showEnvironmentSelector && (
+            <React.Fragment>
+              <HeaderSeparator />
+              <HeaderItemPosition>
+                <MultipleEnvironmentSelector
+                  organization={organization}
+                  projects={this.props.projects}
+                  loadingProjects={loadingProjects}
+                  selectedProjects={selectedProjects}
+                  value={this.props.selection.environments}
+                  onChange={this.handleChangeEnvironments}
+                  onUpdate={this.handleUpdateEnvironmments}
+                />
+              </HeaderItemPosition>
+            </React.Fragment>
+          )}
+
+          {showDateSelector && (
+            <React.Fragment>
+              <HeaderSeparator />
+              <HeaderItemPosition>
+                <TimeRangeSelector
+                  key={`period:${period}-start:${start}-end:${end}-utc:${utc}-defaultPeriod:${defaultPeriod}`}
+                  showAbsolute={showAbsolute}
+                  showRelative={showRelative}
+                  relative={period}
+                  start={start}
+                  end={end}
+                  utc={utc}
+                  onChange={this.handleChangeTime}
+                  onUpdate={this.handleUpdateTime}
                   organization={organization}
-                  shouldForceProject={shouldForceProject}
-                  forceProject={forceProject}
-                  projects={loadingProjects ? projects : memberProjects}
-                  loadingProjects={!initiallyLoaded && loadingProjects}
-                  nonMemberProjects={nonMemberProjects}
-                  value={this.state.projects || this.props.selection.projects}
-                  onChange={this.handleChangeProjects}
-                  onUpdate={this.handleUpdateProjects}
-                  multi={
-                    !disableMultipleProjectSelection && this.hasMultipleProjectSelection()
-                  }
-                  {...(loadingProjects ? paginatedProjectSelectorCallbacks : {})}
-                  showIssueStreamLink={showIssueStreamLink}
-                  showProjectSettingsLink={showProjectSettingsLink}
-                  lockedMessageSubject={lockedMessageSubject}
-                  footerMessage={projectsFooterMessage}
+                  defaultPeriod={defaultPeriod}
+                  hint={timeRangeHint}
                 />
-              );
-            }}
-          </Projects>
-        </HeaderItemPosition>
-
-        {showEnvironmentSelector && (
-          <React.Fragment>
-            <HeaderSeparator />
-            <HeaderItemPosition>
-              <MultipleEnvironmentSelector
-                organization={organization}
-                projects={this.props.projects}
-                loadingProjects={loadingProjects}
-                selectedProjects={selectedProjects}
-                value={this.state.environments || this.props.selection.environments}
-                onChange={this.handleChangeEnvironments}
-                onUpdate={this.handleUpdateEnvironmments}
-              />
-            </HeaderItemPosition>
-          </React.Fragment>
-        )}
-
-        {showDateSelector && (
-          <React.Fragment>
-            <HeaderSeparator />
-            <HeaderItemPosition>
-              <TimeRangeSelector
-                key={`period:${period}-start:${start}-end:${end}-utc:${utc}`}
-                showAbsolute={showAbsolute}
-                showRelative={showRelative}
-                relative={period}
-                start={start}
-                end={end}
-                utc={utc}
-                onChange={this.handleChangeTime}
-                onUpdate={this.handleUpdateTime}
-                organization={organization}
-                allowClearTimeRange={allowClearTimeRange}
-                hint={timeRangeHint}
-              />
-            </HeaderItemPosition>
-          </React.Fragment>
-        )}
-
-        {!showEnvironmentSelector && <HeaderItemPosition isSpacer />}
-        {!showDateSelector && <HeaderItemPosition isSpacer />}
-      </Header>
+              </HeaderItemPosition>
+            </React.Fragment>
+          )}
+
+          {!showEnvironmentSelector && <HeaderItemPosition isSpacer />}
+          {!showDateSelector && <HeaderItemPosition isSpacer />}
+        </Header>
+
+        {isGlobalSelectionReady ? children : <PageContent />}
+      </React.Fragment>
     );
   }
 }
 
-export default GlobalSelectionHeader;
+export default withGlobalSelection(GlobalSelectionHeader);
 
 const BackButtonWrapper = styled('div')`
   display: flex;
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.tsx
index 9421ba1266..0cfbb89347 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.tsx
@@ -1,29 +1,97 @@
 import * as ReactRouter from 'react-router';
 import React from 'react';
+import partition from 'lodash/partition';
 
-import {GlobalSelection, Organization, Project} from 'app/types';
+import {Organization, Project} from 'app/types';
+import ConfigStore from 'app/stores/configStore';
 import withOrganization from 'app/utils/withOrganization';
-import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withProjectsSpecified from 'app/utils/withProjectsSpecified';
 
 import GlobalSelectionHeader from './globalSelectionHeader';
+import InitializeGlobalSelectionHeader from './initializeGlobalSelectionHeader';
+
+type GlobalSelectionHeaderProps = Omit<
+  React.ComponentPropsWithoutRef<typeof GlobalSelectionHeader>,
+  'router' | 'nonMemberProjects' | 'memberProjects' | 'selection'
+>;
 
 type Props = {
   organization: Organization;
-  selection: GlobalSelection;
   projects: Project[];
-  loadingProjects: boolean;
+  hasCustomRouting?: boolean;
 } & ReactRouter.WithRouterProps &
-  React.ComponentProps<typeof GlobalSelectionHeader>;
+  GlobalSelectionHeaderProps;
 
 class GlobalSelectionHeaderContainer extends React.Component<Props> {
+  getProjects = () => {
+    const {organization, projects} = this.props;
+    const {isSuperuser} = ConfigStore.get('user');
+    const isOrgAdmin = organization.access.includes('org:admin');
+
+    const [memberProjects, nonMemberProjects] = partition(
+      projects,
+      project => project.isMember
+    );
+
+    if (isSuperuser || isOrgAdmin) {
+      return [memberProjects, nonMemberProjects];
+    }
+
+    return [memberProjects, []];
+  };
+
   render() {
-    return <GlobalSelectionHeader {...this.props} />;
+    const {
+      loadingProjects,
+      location,
+      organization,
+      router,
+      routes,
+
+      defaultSelection,
+      forceProject,
+      shouldForceProject,
+      hasCustomRouting,
+      ...props
+    } = this.props;
+    const enforceSingleProject = !organization.features.includes('global-views');
+    const [memberProjects, nonMemberProjects] = this.getProjects();
+
+    // We can initialize before ProjectsStore is fully loaded if we don't need to enforce single project.
+    return (
+      <React.Fragment>
+        {(!loadingProjects || (!shouldForceProject && !enforceSingleProject)) && (
+          <InitializeGlobalSelectionHeader
+            location={location}
+            router={router}
+            routes={routes}
+            organization={organization}
+            defaultSelection={defaultSelection}
+            forceProject={forceProject}
+            isDisabled={!!hasCustomRouting}
+            shouldForceProject={!!shouldForceProject}
+            shouldEnforceSingleProject={!hasCustomRouting && enforceSingleProject}
+            memberProjects={memberProjects}
+          />
+        )}
+        <GlobalSelectionHeader
+          {...props}
+          loadingProjects={loadingProjects}
+          location={location}
+          organization={organization}
+          router={!hasCustomRouting ? router : null}
+          routes={routes}
+          shouldForceProject={!!shouldForceProject}
+          defaultSelection={defaultSelection}
+          forceProject={forceProject}
+          memberProjects={memberProjects}
+          nonMemberProjects={nonMemberProjects}
+        />
+      </React.Fragment>
+    );
   }
 }
 
 export default withOrganization(
-  withProjectsSpecified(
-    ReactRouter.withRouter(withGlobalSelection(GlobalSelectionHeaderContainer))
-  )
+  withProjectsSpecified(ReactRouter.withRouter(GlobalSelectionHeaderContainer))
 );
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx
new file mode 100644
index 0000000000..cef661182e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/initializeGlobalSelectionHeader.tsx
@@ -0,0 +1,76 @@
+import React from 'react';
+import * as ReactRouter from 'react-router';
+
+import {initializeUrlState} from 'app/actionCreators/globalSelection';
+
+import GlobalSelectionHeader from './globalSelectionHeader';
+
+type Props = {
+  isDisabled: boolean;
+  shouldEnforceSingleProject: boolean;
+} & Pick<ReactRouter.WithRouterProps, 'location' | 'router'> &
+  Pick<
+    React.ComponentPropsWithoutRef<typeof GlobalSelectionHeader>,
+    | 'defaultSelection'
+    | 'forceProject'
+    | 'shouldForceProject'
+    | 'memberProjects'
+    | 'organization'
+  > & {
+    routes: Array<
+      ReactRouter.PlainRoute<any> & {
+        globalSelectionSkipLastUsed?: boolean;
+      }
+    >;
+  };
+
+/**
+ * Initializes GlobalSelectionHeader
+ *
+ * Calls an actionCreator to load project/environment from local storage if possible,
+ * otherwise populate with defaults.
+ *
+ * This should only happen when the header is mounted
+ * e.g. when changing views or organizations.
+ */
+class InitializeGlobalSelectionHeader extends React.Component<Props> {
+  componentDidMount() {
+    const {
+      location,
+      router,
+      routes,
+      organization,
+      defaultSelection,
+      forceProject,
+      memberProjects,
+      shouldForceProject,
+      shouldEnforceSingleProject,
+    } = this.props;
+
+    // Make an exception for routes (e.g. issue details, in the case where it is accessed directly (e.g. from email))
+    // We do not want to load the user's last used env/project in this case, otherwise will
+    // lead to very confusing behavior.
+    //
+    // `routes` is only ever undefined in tests
+    const skipLastUsed = !!routes?.find(
+      ({globalSelectionSkipLastUsed}) => globalSelectionSkipLastUsed
+    );
+    initializeUrlState({
+      organization,
+      queryParams: location.query,
+      router,
+      skipLastUsed,
+      memberProjects,
+      defaultSelection,
+      forceProject,
+      shouldForceProject,
+      shouldEnforceSingleProject,
+    });
+  }
+
+  render() {
+    return null;
+  }
+}
+
+export default InitializeGlobalSelectionHeader;
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx
index 6fa73e47bb..38cdc58b38 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx
@@ -1,14 +1,16 @@
 import {Location} from 'history';
+import identity from 'lodash/identity';
 import pick from 'lodash/pick';
 import pickBy from 'lodash/pickBy';
-import identity from 'lodash/identity';
 
+import {DATE_TIME, DATE_TIME_KEYS, URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {defined} from 'app/utils';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
-import {URL_PARAM, DATE_TIME_KEYS} from 'app/constants/globalSelectionHeader';
 
 import {getParams} from './getParams';
 
+const DEFAULT_PARAMS = getParams({});
+
 // Parses URL query parameters for values relevant to global selection header
 export function getStateFromQuery(
   query: Location['query'],
@@ -68,3 +70,15 @@ export function extractSelectionParameters(query) {
 export function extractDatetimeSelectionParameters(query) {
   return pickBy(pick(query, Object.values(DATE_TIME_KEYS)), identity);
 }
+export function getDefaultSelection() {
+  return {
+    projects: [],
+    environments: [],
+    datetime: {
+      [DATE_TIME.START]: DEFAULT_PARAMS.start || null,
+      [DATE_TIME.END]: DEFAULT_PARAMS.end || null,
+      [DATE_TIME.PERIOD]: DEFAULT_PARAMS.statsPeriod || null,
+      [DATE_TIME.UTC]: DEFAULT_PARAMS.utc || null,
+    },
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index 575e7d5826..55bf0e8a25 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -24,7 +24,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
     value: PropTypes.array,
     projects: PropTypes.array.isRequired,
     nonMemberProjects: PropTypes.array.isRequired,
-    loadingProjects: PropTypes.bool,
+    isGlobalSelectionReady: PropTypes.bool,
     onChange: PropTypes.func,
     onUpdate: PropTypes.func,
     multi: PropTypes.bool,
@@ -45,12 +45,9 @@ export default class MultipleProjectSelector extends React.PureComponent {
     lockedMessageSubject: t('page'),
   };
 
-  constructor() {
-    super();
-    this.state = {
-      hasChanges: false,
-    };
-  }
+  state = {
+    hasChanges: false,
+  };
 
   // Reset "hasChanges" state and call `onUpdate` callback
   doUpdate = () => {
@@ -183,7 +180,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
     const {
       value,
       projects,
-      loadingProjects,
+      isGlobalSelectionReady,
       nonMemberProjects,
       multi,
       organization,
@@ -216,11 +213,11 @@ export default class MultipleProjectSelector extends React.PureComponent {
       >
         {this.renderProjectName()}
       </StyledHeaderItem>
-    ) : loadingProjects ? (
+    ) : !isGlobalSelectionReady ? (
       <StyledHeaderItem
         data-test-id="global-header-project-selector"
         icon={<StyledInlineSvg src="icon-project" />}
-        loading={loadingProjects}
+        loading
       >
         {t('Loading\u2026')}
       </StyledHeaderItem>
diff --git a/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
index 122055184f..de7741692a 100644
--- a/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
@@ -1,10 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import sortBy from 'lodash/sortBy';
 import styled from '@emotion/styled';
 import {Link} from 'react-router';
 
 import {analytics} from 'app/utils/analytics';
-import {sortArray} from 'app/utils';
 import {t} from 'app/locale';
 import {alertHighlight, pulse} from 'app/styles/animations';
 import Button from 'app/components/button';
@@ -102,7 +102,7 @@ class ProjectSelector extends React.Component {
     const {multiProjects, nonMemberProjects} = this.props;
 
     return [
-      sortArray(multiProjects, project => [!project.isBookmarked, project.name]),
+      sortBy(multiProjects, project => [!project.isBookmarked, project.name]),
       nonMemberProjects || [],
     ];
   }
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index bcfa7ae0e4..96c3ae35f6 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -62,6 +62,12 @@ const SelectorItemsHook = HookOrDefault({
 
 class TimeRangeSelector extends React.PureComponent {
   static propTypes = {
+    /**
+     * When the default period is selected, it is visually dimmed and
+     * makes the selector unclearable.
+     */
+    defaultPeriod: PropTypes.string,
+
     /**
      * Show absolute date selectors
      */
@@ -112,11 +118,6 @@ class TimeRangeSelector extends React.PureComponent {
      */
     organization: SentryTypes.Organization,
 
-    /**
-     * Allow user to clear the time range selection
-     */
-    allowClearTimeRange: PropTypes.bool,
-
     /**
      * Small info icon with tooltip hint text
      */
@@ -305,13 +306,7 @@ class TimeRangeSelector extends React.PureComponent {
   };
 
   render() {
-    const {
-      showAbsolute,
-      showRelative,
-      organization,
-      allowClearTimeRange,
-      hint,
-    } = this.props;
+    const {defaultPeriod, showAbsolute, showRelative, organization, hint} = this.props;
     const {start, end, relative} = this.state;
 
     const shouldShowAbsolute = showAbsolute;
@@ -321,13 +316,10 @@ class TimeRangeSelector extends React.PureComponent {
     const summary = isAbsoluteSelected ? (
       <DateSummary utc={this.state.utc} start={start} end={end} />
     ) : (
-      getRelativeSummary(relative || DEFAULT_STATS_PERIOD)
+      getRelativeSummary(relative || defaultPeriod)
     );
 
-    const relativeSelected = isAbsoluteSelected ? null : relative || DEFAULT_STATS_PERIOD;
-
-    const allowClear =
-      typeof allowClearTimeRange === 'boolean' ? allowClearTimeRange : true;
+    const relativeSelected = isAbsoluteSelected ? null : relative || defaultPeriod;
 
     return (
       <DropdownMenu
@@ -343,12 +335,12 @@ class TimeRangeSelector extends React.PureComponent {
               icon={<IconCalendar />}
               isOpen={isOpen}
               hasSelected={
-                (!!this.props.relative && this.props.relative !== DEFAULT_STATS_PERIOD) ||
+                (!!this.props.relative && this.props.relative !== defaultPeriod) ||
                 isAbsoluteSelected
               }
               hasChanges={this.state.hasChanges}
               onClear={this.handleClear}
-              allowClear={allowClear}
+              allowClear
               hint={hint}
               {...getActorProps()}
             >
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 260c652e39..7d2267e38f 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1158,6 +1158,7 @@ function routes() {
           /organizations/:orgId/issues */}
         <Route
           path="/organizations/:orgId/issues/:groupId/"
+          globalSelectionSkipLastUsed
           componentPromise={() =>
             import(
               /* webpackChunkName: "OrganizationGroupDetails" */ 'app/views/organizationGroupDetails'
@@ -1165,8 +1166,6 @@ function routes() {
           }
           component={errorHandler(LazyLoad)}
         >
-          {/* XXX: if we change the path for group details, we *must* update `OrganizationContext`.
-            There is behavior that depends on this path and unfortunately no great way to test for this contract */}
           <IndexRoute
             componentPromise={() =>
               import(
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index e36e5f68be..9f118d1f0e 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -1,75 +1,19 @@
-import isEqual from 'lodash/isEqual';
-import pick from 'lodash/pick';
 import Reflux from 'reflux';
+import isEqual from 'lodash/isEqual';
 
-import {
-  DATE_TIME,
-  URL_PARAM,
-  LOCAL_STORAGE_KEY,
-} from 'app/constants/globalSelectionHeader';
-import {getStateFromQuery} from 'app/components/organizations/globalSelectionHeader/utils';
-import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
+import {LOCAL_STORAGE_KEY} from 'app/constants/globalSelectionHeader';
+import {getDefaultSelection} from 'app/components/organizations/globalSelectionHeader/utils';
 import {isEqualWithDates} from 'app/utils/isEqualWithDates';
-import OrganizationsStore from 'app/stores/organizationsStore';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
+import OrganizationsStore from 'app/stores/organizationsStore';
 import localStorage from 'app/utils/localStorage';
 
-const DEFAULT_PARAMS = getParams({});
-
-const getDefaultSelection = () => ({
-  projects: [],
-  environments: [],
-  datetime: {
-    [DATE_TIME.START]: DEFAULT_PARAMS.start || null,
-    [DATE_TIME.END]: DEFAULT_PARAMS.end || null,
-    [DATE_TIME.PERIOD]: DEFAULT_PARAMS.statsPeriod || null,
-    [DATE_TIME.UTC]: DEFAULT_PARAMS.utc || null,
-  },
-});
-
-const getProjectsByIds = async (organization, projectIds, api) => {
-  const query = {};
-  query.query = projectIds.map(id => `id:${id}`).join(' ');
-  return await api.requestPromise(`/organizations/${organization.slug}/projects/`, {
-    query,
-  });
-};
-
-const isValidSelection = async (selection, organization, api) => {
-  if (organization.projects) {
-    const allowedProjects = new Set(
-      organization.projects
-        .filter(project => project.hasAccess)
-        .map(p => parseInt(p.id, 10))
-    );
-    if (
-      Array.isArray(selection.projects) &&
-      selection.projects.some(project => !allowedProjects.has(project))
-    ) {
-      return false;
-    }
-    return true;
-  } else {
-    // if the selection is [-1] (all projects) or [] (my projects) return true
-    if (selection.projects.length === 0 || selection.projects[0] === -1) {
-      return true;
-    }
-    // if we do not have organization.projects then make an API call to fetch projects based on id
-    const projects = await getProjectsByIds(organization, selection.projects, api);
-    if (
-      selection.projects.length !== projects.length ||
-      projects.some(project => !project.hasAccess)
-    ) {
-      return false;
-    }
-    return true;
-  }
-};
-
 const GlobalSelectionStore = Reflux.createStore({
   init() {
     this.reset(this.selection);
     this.listenTo(GlobalSelectionActions.reset, this.onReset);
+    this.listenTo(GlobalSelectionActions.initializeUrlState, this.onInitializeUrlState);
+    this.listenTo(GlobalSelectionActions.setOrganization, this.onSetOrganization);
     this.listenTo(GlobalSelectionActions.save, this.onSave);
     this.listenTo(GlobalSelectionActions.updateProjects, this.updateProjects);
     this.listenTo(GlobalSelectionActions.updateDateTime, this.updateDateTime);
@@ -77,67 +21,40 @@ const GlobalSelectionStore = Reflux.createStore({
   },
 
   reset(state) {
-    this._hasLoaded = false;
+    // Has passed the enforcement state
+    this._hasEnforcedProject = false;
+    this._hasInitialState = false;
     this.selection = state || getDefaultSelection();
   },
 
-  /**
-   * Initializes the global selection store
-   * If there are query params apply these, otherwise check local storage
-   */
-  loadInitialData(organization, queryParams, {api, skipLastUsed} = {}) {
-    this._hasLoaded = true;
-    this.organization = organization;
-    const query = pick(queryParams, Object.values(URL_PARAM));
-    const hasQuery = Object.keys(query).length > 0;
-
-    let globalSelection = getDefaultSelection();
-
-    if (hasQuery) {
-      const parsed = getStateFromQuery(queryParams);
-      globalSelection = {
-        projects: parsed.project || [],
-        environments: parsed.environment || [],
-        datetime: {
-          [DATE_TIME.START]: parsed.start || null,
-          [DATE_TIME.END]: parsed.end || null,
-          [DATE_TIME.PERIOD]: parsed.period || null,
-          [DATE_TIME.UTC]: parsed.utc || null,
-        },
-      };
-    } else if (!skipLastUsed) {
-      try {
-        const localStorageKey = `${LOCAL_STORAGE_KEY}:${organization.slug}`;
-
-        const storedValue = localStorage.getItem(localStorageKey);
-
-        const defaultDateTime = getDefaultSelection().datetime;
+  isReady() {
+    return this._hasInitialState;
+  },
 
-        if (storedValue) {
-          globalSelection = {datetime: defaultDateTime, ...JSON.parse(storedValue)};
-        }
-      } catch (ex) {
-        console.error(ex); // eslint-disable-line no-console
-        // use default if invalid
-      }
-    }
-    this.loadSelectionIfValid(globalSelection, organization, api);
+  onSetOrganization(organization) {
+    this.organization = organization;
   },
 
-  async loadSelectionIfValid(globalSelection, organization, api) {
-    if (await isValidSelection(globalSelection, organization, api)) {
-      this.selection = globalSelection;
-      this.trigger(this.selection);
-    }
+  /**
+   * Initializes the global selection store data
+   * Use query params if they exist, otherwise check local storage
+   */
+  onInitializeUrlState(newSelection) {
+    this._hasInitialState = true;
+    this.selection = newSelection;
+    this.trigger(this.get());
   },
 
   get() {
-    return this.selection;
+    return {
+      selection: this.selection,
+      isReady: this.isReady(),
+    };
   },
 
   onReset() {
     this.reset();
-    this.trigger(this.selection);
+    this.trigger(this.get());
   },
 
   updateProjects(projects = []) {
@@ -149,7 +66,7 @@ const GlobalSelectionStore = Reflux.createStore({
       ...this.selection,
       projects,
     };
-    this.trigger(this.selection);
+    this.trigger(this.get());
   },
 
   updateDateTime(datetime) {
@@ -161,7 +78,7 @@ const GlobalSelectionStore = Reflux.createStore({
       ...this.selection,
       datetime,
     };
-    this.trigger(this.selection);
+    this.trigger(this.get());
   },
 
   updateEnvironments(environments = []) {
@@ -173,7 +90,7 @@ const GlobalSelectionStore = Reflux.createStore({
       ...this.selection,
       environments,
     };
-    this.trigger(this.selection);
+    this.trigger(this.get());
   },
 
   /**
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index a9582e9931..fe57954ee1 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -155,6 +155,8 @@ export type Project = {
   processingIssues: number;
 } & AvatarProject;
 
+export type MinimalProject = Pick<Project, 'id' | 'slug'>;
+
 export type ProjectRelease = {
   version: string;
   dateCreated: string;
diff --git a/src/sentry/static/sentry/app/types/react-router.d.ts b/src/sentry/static/sentry/app/types/react-router.d.ts
index 06f1e41349..9eefd10d58 100644
--- a/src/sentry/static/sentry/app/types/react-router.d.ts
+++ b/src/sentry/static/sentry/app/types/react-router.d.ts
@@ -1,4 +1,4 @@
-import {ComponentClass, StatelessComponent} from 'react';
+import {ComponentClass, ComponentType, StatelessComponent} from 'react';
 import {WithRouterProps} from 'react-router/lib/withRouter';
 import {InjectedRouter, Params} from 'react-router/lib/Router';
 import {Location} from 'history';
@@ -18,7 +18,10 @@ declare module 'react-router' {
     routes: PlainRoute[];
   }
 
-  type ComponentConstructor<P> = ComponentClass<P> | StatelessComponent<P>;
+  type ComponentConstructor<P> =
+    | ComponentClass<P>
+    | StatelessComponent<P>
+    | ComponentType<P>;
 
   declare function withRouter<P extends WithRouterProps>(
     component: ComponentConstructor<P>,
diff --git a/src/sentry/static/sentry/app/utils/dates.tsx b/src/sentry/static/sentry/app/utils/dates.tsx
index b27e520019..640cab9bf0 100644
--- a/src/sentry/static/sentry/app/utils/dates.tsx
+++ b/src/sentry/static/sentry/app/utils/dates.tsx
@@ -49,8 +49,6 @@ export function getUserTimezone(): string {
   return user && user.options && user.options.timezone;
 }
 
-// TODO(billy): The below functions should be refactored to a TimeRangeSelector specific utils
-
 /**
  * Given a UTC date, return a Date object in local time
  */
diff --git a/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx b/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
index 9b24cab81b..1e913a7128 100644
--- a/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
+++ b/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
@@ -7,11 +7,13 @@ import getDisplayName from 'app/utils/getDisplayName';
 import {GlobalSelection} from 'app/types';
 
 type InjectedGlobalSelectionProps = {
-  selection: GlobalSelection;
+  selection?: GlobalSelection;
+  isGlobalSelectionReady?: boolean;
 };
 
 type State = {
   selection: GlobalSelection;
+  isReady?: boolean;
 };
 
 /**
@@ -29,32 +31,22 @@ const withGlobalSelection = <P extends InjectedGlobalSelectionProps>(
     mixins: [Reflux.listenTo(GlobalSelectionStore, 'onUpdate') as any],
 
     getInitialState() {
-      return {
-        selection: GlobalSelectionStore.get(),
-      };
-    },
-
-    componentDidMount() {
-      this.updateSelection();
+      return GlobalSelectionStore.get();
     },
 
-    onUpdate() {
-      this.updateSelection();
-    },
-
-    updateSelection() {
-      const selection = GlobalSelectionStore.get();
-
-      if (this.state.selection !== selection) {
-        this.setState({selection});
+    onUpdate(selection: State) {
+      if (this.state !== selection) {
+        this.setState(selection);
       }
     },
 
     render() {
-      const {selection} = this.state;
+      const {isReady, selection} = this.state;
+
       return (
         <WrappedComponent
           selection={selection as GlobalSelection}
+          isGlobalSelectionReady={isReady}
           {...(this.props as P)}
         />
       );
diff --git a/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx b/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx
index a9519da105..1f01656d94 100644
--- a/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx
+++ b/src/sentry/static/sentry/app/utils/withProjectsSpecified.tsx
@@ -1,18 +1,21 @@
+/* eslint-disable react/prop-types */
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
-import PropTypes from 'prop-types';
 
 import getDisplayName from 'app/utils/getDisplayName';
 import ProjectsStore from 'app/stores/projectsStore';
-import SentryTypes from 'app/sentryTypes';
 import {Project} from 'app/types';
 
-type InjectedProjectsProps = {
-  projects: Project[];
-  loadingProjects?: boolean;
+type Props = {
+  projects?: Project[];
+  specificProjectSlugs?: string[];
 };
 
+type InjectedProjectsProps = {
+  loadingProjects: boolean;
+} & Props;
+
 type State = {
   projects: Project[];
   loading: boolean;
@@ -24,16 +27,8 @@ type State = {
 const withProjectsSpecified = <P extends InjectedProjectsProps>(
   WrappedComponent: React.ComponentType<P>
 ) =>
-  createReactClass<
-    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,
-    State
-  >({
+  createReactClass<Props & Omit<P, keyof InjectedProjectsProps>, State>({
     displayName: `withProjectsSpecified(${getDisplayName(WrappedComponent)})`,
-    propTypes: {
-      organization: SentryTypes.Organization,
-      project: SentryTypes.Project,
-      specificProjectSlugs: PropTypes.arrayOf(PropTypes.string),
-    },
     mixins: [Reflux.listenTo(ProjectsStore, 'onProjectUpdate') as any],
     getInitialState() {
       return ProjectsStore.getState(this.props.specificProjectSlugs);
@@ -45,8 +40,8 @@ const withProjectsSpecified = <P extends InjectedProjectsProps>(
     render() {
       return (
         <WrappedComponent
-          {...this.props}
-          projects={this.state.projects}
+          {...(this.props as P)}
+          projects={this.state.projects as Project[]}
           loadingProjects={this.state.loading}
         />
       );
diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index d4baab8473..e04b459261 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -255,9 +255,8 @@ class IncidentsListContainer extends React.Component<Props> {
     const status = getQueryStatus(query.status);
 
     return (
-      <React.Fragment>
-        <GlobalSelectionHeader organization={organization} showDateSelector={false} />
-        <DocumentTitle title={`Alerts- ${orgId} - Sentry`}>
+      <DocumentTitle title={`Alerts- ${orgId} - Sentry`}>
+        <GlobalSelectionHeader organization={organization} showDateSelector={false}>
           <PageContent>
             <PageHeader>
               <StyledPageHeading>
@@ -341,8 +340,8 @@ class IncidentsListContainer extends React.Component<Props> {
             </Alert>
             <IncidentsList {...this.props} />
           </PageContent>
-        </DocumentTitle>
-      </React.Fragment>
+        </GlobalSelectionHeader>
+      </DocumentTitle>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/dashboards/index.jsx b/src/sentry/static/sentry/app/views/dashboards/index.jsx
index 6611096cfd..c13af2fbc9 100644
--- a/src/sentry/static/sentry/app/views/dashboards/index.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/index.jsx
@@ -19,19 +19,17 @@ class Dashboards extends React.Component {
 
     return (
       <Feature features={['discover']} renderDisabled>
-        <GlobalSelectionHeader
-          organization={organization}
-          showEnvironmentSelector={false}
-        />
-        <PageContent>
-          <LightWeightNoProjectMessage organization={organization}>
-            <PageHeader>
-              <PageHeading withMargins>{t('Dashboards')}</PageHeading>
-            </PageHeader>
+        <GlobalSelectionHeader showEnvironmentSelector={false}>
+          <PageContent>
+            <LightWeightNoProjectMessage organization={organization}>
+              <PageHeader>
+                <PageHeading withMargins>{t('Dashboards')}</PageHeading>
+              </PageHeader>
 
-            {children}
-          </LightWeightNoProjectMessage>
-        </PageContent>
+              {children}
+            </LightWeightNoProjectMessage>
+          </PageContent>
+        </GlobalSelectionHeader>
       </Feature>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/discover/discover.tsx b/src/sentry/static/sentry/app/views/discover/discover.tsx
index b23208ac53..620ca63fee 100644
--- a/src/sentry/static/sentry/app/views/discover/discover.tsx
+++ b/src/sentry/static/sentry/app/views/discover/discover.tsx
@@ -463,7 +463,6 @@ export default class Discover extends React.Component<Props, State> {
           onChangeTime={this.changeTime}
           onUpdateTime={this.updateDateTimeAndRun}
         />
-
         <Body>
           <BodyContent>
             {shouldDisplayResult && (
diff --git a/src/sentry/static/sentry/app/views/events/index.jsx b/src/sentry/static/sentry/app/views/events/index.jsx
index 4cc8613156..e30033306d 100644
--- a/src/sentry/static/sentry/app/views/events/index.jsx
+++ b/src/sentry/static/sentry/app/views/events/index.jsx
@@ -62,29 +62,29 @@ class EventsContainer extends React.Component {
         hookName="feature-disabled:events-page"
         renderDisabled
       >
-        <GlobalSelectionHeader
-          organization={organization}
-          resetParamsOnChange={['cursor']}
-        />
-        <PageContent>
-          <LightWeightNoProjectMessage organization={organization}>
-            <Body>
-              <PageHeader>
-                <HeaderTitle>
-                  {t('Events')} <BetaTag />
-                </HeaderTitle>
-                <StyledSearchBar
-                  organization={organization}
-                  projectIds={selection.projects}
-                  query={(location.query && location.query.query) || ''}
-                  placeholder={t('Search for events, users, tags, and everything else.')}
-                  onSearch={this.handleSearch}
-                />
-              </PageHeader>
-              {children}
-            </Body>
-          </LightWeightNoProjectMessage>
-        </PageContent>
+        <GlobalSelectionHeader resetParamsOnChange={['cursor']}>
+          <PageContent>
+            <LightWeightNoProjectMessage organization={organization}>
+              <Body>
+                <PageHeader>
+                  <HeaderTitle>
+                    {t('Events')} <BetaTag />
+                  </HeaderTitle>
+                  <StyledSearchBar
+                    organization={organization}
+                    projectIds={selection.projects}
+                    query={(location.query && location.query.query) || ''}
+                    placeholder={t(
+                      'Search for events, users, tags, and everything else.'
+                    )}
+                    onSearch={this.handleSearch}
+                  />
+                </PageHeader>
+                {children}
+              </Body>
+            </LightWeightNoProjectMessage>
+          </PageContent>
+        </GlobalSelectionHeader>
       </Feature>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index b35814bb99..91f5e300ce 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -222,47 +222,48 @@ class Results extends React.Component<Props, State> {
     return (
       <SentryDocumentTitle title={title} objSlug={organization.slug}>
         <React.Fragment>
-          <GlobalSelectionHeader organization={organization} />
-          <StyledPageContent>
-            <LightWeightNoProjectMessage organization={organization}>
-              <ResultsHeader
-                organization={organization}
-                location={location}
-                eventView={eventView}
-              />
-              <ContentBox>
-                <Top>
-                  {this.renderError(error)}
-                  <StyledSearchBar
-                    organization={organization}
-                    projectIds={eventView.project}
-                    query={query}
-                    onSearch={this.handleSearch}
-                  />
-                  <ResultsChart
-                    api={api}
-                    router={router}
-                    organization={organization}
-                    eventView={eventView}
-                    location={location}
-                    onAxisChange={this.handleYAxisChange}
-                    onDisplayChange={this.handleDisplayChange}
-                    total={totalValues}
-                  />
-                </Top>
-                <Main>
-                  <Table
-                    organization={organization}
-                    eventView={eventView}
-                    location={location}
-                    title={title}
-                    setError={this.setError}
-                  />
-                </Main>
-                <Side>{this.renderTagsTable()}</Side>
-              </ContentBox>
-            </LightWeightNoProjectMessage>
-          </StyledPageContent>
+          <GlobalSelectionHeader>
+            <StyledPageContent>
+              <LightWeightNoProjectMessage organization={organization}>
+                <ResultsHeader
+                  organization={organization}
+                  location={location}
+                  eventView={eventView}
+                />
+                <ContentBox>
+                  <Top>
+                    {this.renderError(error)}
+                    <StyledSearchBar
+                      organization={organization}
+                      projectIds={eventView.project}
+                      query={query}
+                      onSearch={this.handleSearch}
+                    />
+                    <ResultsChart
+                      api={api}
+                      router={router}
+                      organization={organization}
+                      eventView={eventView}
+                      location={location}
+                      onAxisChange={this.handleYAxisChange}
+                      onDisplayChange={this.handleDisplayChange}
+                      total={totalValues}
+                    />
+                  </Top>
+                  <Main>
+                    <Table
+                      organization={organization}
+                      eventView={eventView}
+                      location={location}
+                      title={title}
+                      setError={this.setError}
+                    />
+                  </Main>
+                  <Side>{this.renderTagsTable()}</Side>
+                </ContentBox>
+              </LightWeightNoProjectMessage>
+            </StyledPageContent>
+          </GlobalSelectionHeader>
         </React.Fragment>
       </SentryDocumentTitle>
     );
diff --git a/src/sentry/static/sentry/app/views/issueList/container.jsx b/src/sentry/static/sentry/app/views/issueList/container.jsx
index e120bbd27f..b9634229c5 100644
--- a/src/sentry/static/sentry/app/views/issueList/container.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/container.jsx
@@ -21,15 +21,13 @@ class IssueListContainer extends React.Component {
 
     return (
       <DocumentTitle title={this.getTitle()}>
-        <React.Fragment>
-          <GlobalSelectionHeader organization={organization} />
-
+        <GlobalSelectionHeader>
           <PageContent>
             <LightWeightNoProjectMessage organization={organization}>
               {children}
             </LightWeightNoProjectMessage>
           </PageContent>
-        </React.Fragment>
+        </GlobalSelectionHeader>
       </DocumentTitle>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/monitors/index.jsx b/src/sentry/static/sentry/app/views/monitors/index.jsx
index d79a4bf7fd..900dcb1610 100644
--- a/src/sentry/static/sentry/app/views/monitors/index.jsx
+++ b/src/sentry/static/sentry/app/views/monitors/index.jsx
@@ -5,8 +5,6 @@ import Feature from 'app/components/acl/feature';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import {PageContent} from 'app/styles/organization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
-import withOrganization from 'app/utils/withOrganization';
-import SentryTypes from 'app/sentryTypes';
 
 const Body = styled('div')`
   background-color: ${p => p.theme.whiteDark};
@@ -15,28 +13,24 @@ const Body = styled('div')`
 `;
 
 class MonitorsContainer extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization,
-  };
-
   render() {
-    const {organization, children} = this.props;
+    const {children} = this.props;
 
     return (
       <Feature features={['monitors']} renderDisabled>
         <GlobalSelectionHeader
-          organization={organization}
           showEnvironmentSelector={false}
           showDateSelector={false}
           resetParamsOnChange={['cursor']}
-        />
-        <PageContent>
-          <Body>{children}</Body>
-        </PageContent>
+        >
+          <PageContent>
+            <Body>{children}</Body>
+          </PageContent>
+        </GlobalSelectionHeader>
       </Feature>
     );
   }
 }
 
-export default withOrganization(withGlobalSelection(MonitorsContainer));
+export default withGlobalSelection(MonitorsContainer);
 export {MonitorsContainer};
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 77ac365508..7ea9841306 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -13,7 +13,6 @@ import {openSudo} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import ConfigStore from 'app/stores/configStore';
-import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import HookStore from 'app/stores/hookStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -22,10 +21,10 @@ import ProjectActions from 'app/actions/projectActions';
 import SentryTypes from 'app/sentryTypes';
 import Sidebar from 'app/components/sidebar';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
-import withProfiler from 'app/utils/withProfiler';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import withOrganizations from 'app/utils/withOrganizations';
+import withProfiler from 'app/utils/withProfiler';
 
 const OrganizationContext = createReactClass({
   displayName: 'OrganizationContext',
@@ -202,16 +201,6 @@ const OrganizationContext = createReactClass({
         scope.setTag('organization.slug', organization.slug);
         scope.setContext('organization', {id: organization.id, slug: organization.slug});
       });
-      // Make an exception for issue details in the case where it is accessed directly (e.g. from email)
-      // We do not want to load the user's last used env/project in this case, otherwise will
-      // lead to very confusing behavior.
-      const skipLastUsed = !!this.props.routes.find(
-        ({path}) => path && path.includes('/organizations/:orgId/issues/:groupId/')
-      );
-      GlobalSelectionStore.loadInitialData(organization, this.props.location.query, {
-        skipLastUsed,
-        api: this.props.api,
-      });
     } else if (error) {
       // If user is superuser, open sudo window
       const user = ConfigStore.get('user');
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.tsx
index 659d890842..f4e126e7fb 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupDetails.tsx
@@ -29,6 +29,7 @@ type Props = {
   organization: Organization;
   environments: string[];
   children: React.ReactNode;
+  isGlobalSelectionReady: boolean;
   finishProfile: () => void;
 } & ReactRouter.RouteComponentProps<{orgId: string; groupId: string}, {}>;
 
@@ -37,7 +38,7 @@ type State = {
   loading: boolean;
   error: boolean;
   errorType: Error;
-  project: null | Pick<Project, 'platform' | 'id' | 'slug'>;
+  project: null | (Pick<Project, 'id' | 'slug'> & Partial<Pick<Project, 'platform'>>);
 };
 
 class GroupDetails extends React.Component<Props, State> {
@@ -59,10 +60,14 @@ class GroupDetails extends React.Component<Props, State> {
     this.fetchData();
   }
 
-  componentDidUpdate(_prevProps, prevState: State) {
+  componentDidUpdate(prevProps: Props, prevState: State) {
     if (prevState.loading && !this.state.loading) {
       callIfFunction(this.props.finishProfile);
     }
+
+    if (prevProps.isGlobalSelectionReady !== this.props.isGlobalSelectionReady) {
+      this.fetchData();
+    }
   }
 
   componentWillUnmount() {
@@ -89,7 +94,12 @@ class GroupDetails extends React.Component<Props, State> {
   }
 
   async fetchData() {
-    const {environments, api} = this.props;
+    const {environments, api, isGlobalSelectionReady} = this.props;
+
+    // Need to wait for global selection store to be ready before making request
+    if (!isGlobalSelectionReady) {
+      return;
+    }
 
     try {
       const data = await api.requestPromise(this.groupDetailsEndpoint, {
@@ -246,39 +256,38 @@ class GroupDetails extends React.Component<Props, State> {
     return (
       <DocumentTitle title={this.getTitle()}>
         <React.Fragment>
-          {!isLoading && !isError ? (
-            <GlobalSelectionHeader
-              organization={organization}
-              forceProject={project}
-              showDateSelector={false}
-              shouldForceProject
-              lockedMessageSubject={t('issue')}
-              showIssueStreamLink
-              showProjectSettingsLink
-            />
-          ) : null}
-
-          <PageContent>
-            {isLoading ? (
-              <LoadingIndicator />
-            ) : isError ? (
-              this.renderError()
-            ) : (
-              <Projects orgId={organization.slug} slugs={[project!.slug]}>
-                {({projects, initiallyLoaded, fetchError}) =>
-                  initiallyLoaded ? (
-                    fetchError ? (
-                      <LoadingError message={t('Error loading the specified project')} />
+          <GlobalSelectionHeader
+            forceProject={project}
+            showDateSelector={false}
+            shouldForceProject
+            lockedMessageSubject={t('issue')}
+            showIssueStreamLink
+            showProjectSettingsLink
+          >
+            <PageContent>
+              {isLoading ? (
+                <LoadingIndicator />
+              ) : isError ? (
+                this.renderError()
+              ) : (
+                <Projects orgId={organization.slug} slugs={[project!.slug]}>
+                  {({projects, initiallyLoaded, fetchError}) =>
+                    initiallyLoaded ? (
+                      fetchError ? (
+                        <LoadingError
+                          message={t('Error loading the specified project')}
+                        />
+                      ) : (
+                        this.renderContent(projects[0])
+                      )
                     ) : (
-                      this.renderContent(projects[0])
+                      <LoadingIndicator />
                     )
-                  ) : (
-                    <LoadingIndicator />
-                  )
-                }
-              </Projects>
-            )}
-          </PageContent>
+                  }
+                </Projects>
+              )}
+            </PageContent>
+          </GlobalSelectionHeader>
         </React.Fragment>
       </DocumentTitle>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/index.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/index.tsx
index 7a9d2eebd9..3b8bfcc7e3 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/index.tsx
@@ -10,6 +10,7 @@ import GroupDetails from './groupDetails';
 
 type Props = {
   selection: GlobalSelection;
+  isGlobalSelectionReady: boolean;
   organization: Organization;
   children: React.ReactNode;
 } & ReactRouter.RouteComponentProps<{orgId: string; groupId: string}, {}>;
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 667bc8b115..01dbe51ffb 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -13,8 +13,6 @@ import {PageContent} from 'app/styles/organization';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
 import Alert from 'app/components/alert';
 import EventView from 'app/utils/discover/eventView';
-import {getUtcToLocalDateObject} from 'app/utils/dates';
-import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import space from 'app/styles/space';
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
@@ -71,46 +69,6 @@ class PerformanceLanding extends React.Component<Props, State> {
     this.setState({error});
   };
 
-  generateGlobalSelection = () => {
-    const {location} = this.props;
-    const {eventView} = this.state;
-
-    const globalSelection = eventView.getGlobalSelection();
-    const start = globalSelection.start
-      ? getUtcToLocalDateObject(globalSelection.start)
-      : null;
-
-    const end = globalSelection.end ? getUtcToLocalDateObject(globalSelection.end) : null;
-
-    const {utc} = getParams(location.query);
-
-    return {
-      projects: globalSelection.project,
-      environments: globalSelection.environment,
-      datetime: {
-        start,
-        end,
-        period: globalSelection.statsPeriod || DEFAULT_STATS_PERIOD,
-        utc: utc === 'true',
-      },
-    };
-  };
-
-  allowClearTimeRange = (): boolean => {
-    const {datetime} = this.generateGlobalSelection();
-    const {start, end, period} = datetime;
-
-    if (period === DEFAULT_STATS_PERIOD) {
-      return false;
-    }
-
-    if ((start && end) || typeof period === 'string') {
-      return true;
-    }
-
-    return false;
-  };
-
   getViewLabel(currentView: FilterViews): string {
     switch (currentView) {
       case FilterViews.ALL_TRANSACTIONS:
@@ -155,12 +113,16 @@ class PerformanceLanding extends React.Component<Props, State> {
 
     return (
       <SentryDocumentTitle title={t('Performance')} objSlug={organization.slug}>
-        <React.Fragment>
-          <GlobalSelectionHeader
-            organization={organization}
-            selection={this.generateGlobalSelection()}
-            allowClearTimeRange={this.allowClearTimeRange()}
-          />
+        <GlobalSelectionHeader
+          defaultSelection={{
+            datetime: {
+              start: null,
+              end: null,
+              utc: false,
+              period: DEFAULT_STATS_PERIOD,
+            },
+          }}
+        >
           <PageContent>
             <LightWeightNoProjectMessage organization={organization}>
               <StyledPageHeader>
@@ -187,7 +149,7 @@ class PerformanceLanding extends React.Component<Props, State> {
               />
             </LightWeightNoProjectMessage>
           </PageContent>
-        </React.Fragment>
+        </GlobalSelectionHeader>
       </SentryDocumentTitle>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index d98236a8fd..b64e64378a 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -122,8 +122,7 @@ class TransactionSummary extends React.Component<Props, State> {
 
     return (
       <SentryDocumentTitle title={this.getDocumentTitle()} objSlug={organization.slug}>
-        <React.Fragment>
-          <GlobalSelectionHeader organization={organization} />
+        <GlobalSelectionHeader>
           <StyledPageContent>
             <LightWeightNoProjectMessage organization={organization}>
               <SummaryContent
@@ -135,7 +134,7 @@ class TransactionSummary extends React.Component<Props, State> {
               />
             </LightWeightNoProjectMessage>
           </StyledPageContent>
-        </React.Fragment>
+        </GlobalSelectionHeader>
       </SentryDocumentTitle>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/releases/detail/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
index 822fecc5ac..2778a860be 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/index.jsx
@@ -22,13 +22,11 @@ import ReleaseHeader from './releaseHeader';
 
 const ReleaseDetailsContainer = props => (
   <React.Fragment>
-    <GlobalSelectionHeader organization={props.organization} />
-    <OrganizationReleaseDetails {...props} />
+    <GlobalSelectionHeader>
+      <OrganizationReleaseDetails {...props} />
+    </GlobalSelectionHeader>
   </React.Fragment>
 );
-ReleaseDetailsContainer.propTypes = {
-  organization: SentryTypes.Organization,
-};
 
 class OrganizationReleaseDetails extends AsyncView {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/views/releases/list/index.jsx b/src/sentry/static/sentry/app/views/releases/list/index.jsx
index 53a7e6b8d7..2b6c5c49eb 100644
--- a/src/sentry/static/sentry/app/views/releases/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/index.jsx
@@ -27,11 +27,11 @@ import ReleaseListHeader from './releaseListHeader';
 import ReleaseProgress from './releaseProgress';
 
 const ReleasesContainer = props => {
-  const {organization} = props;
   return (
     <React.Fragment>
-      <GlobalSelectionHeader organization={organization} />
-      <OrganizationReleases {...props} />
+      <GlobalSelectionHeader>
+        <OrganizationReleases {...props} />
+      </GlobalSelectionHeader>
     </React.Fragment>
   );
 };
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
index 558486a560..33cf016281 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
@@ -199,20 +199,17 @@ class ReleasesV2DetailContainer extends AsyncComponent<Omit<Props, 'releaseProje
     }
 
     return (
-      <React.Fragment>
-        <GlobalSelectionHeader
-          organization={organization}
-          lockedMessageSubject={t('release')}
-          shouldForceProject={projects.length === 1}
-          forceProject={projects.length === 1 ? projects[0] : undefined}
-          specificProjectSlugs={projects.map(p => p.slug)}
-          disableMultipleProjectSelection
-          showProjectSettingsLink
-          projectsFooterMessage={this.renderProjectsFooterMessage()}
-        />
-
+      <GlobalSelectionHeader
+        lockedMessageSubject={t('release')}
+        shouldForceProject={projects.length === 1}
+        forceProject={projects.length === 1 ? projects[0] : undefined}
+        specificProjectSlugs={projects.map(p => p.slug)}
+        disableMultipleProjectSelection
+        showProjectSettingsLink
+        projectsFooterMessage={this.renderProjectsFooterMessage()}
+      >
         <ReleasesV2Detail {...this.props} releaseProjects={projects} />
-      </React.Fragment>
+      </GlobalSelectionHeader>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index 2979123c22..e40ef46e8a 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -206,15 +206,12 @@ class ReleasesList extends AsyncView<Props, State> {
     const {organization} = this.props;
 
     return (
-      <React.Fragment>
-        <GlobalSelectionHeader
-          organization={organization}
-          showAbsolute={false}
-          timeRangeHint={t(
-            'Changing this date range will recalculate the release metrics.'
-          )}
-        />
-
+      <GlobalSelectionHeader
+        showAbsolute={false}
+        timeRangeHint={t(
+          'Changing this date range will recalculate the release metrics.'
+        )}
+      >
         <PageContent>
           <LightWeightNoProjectMessage organization={organization}>
             <StyledPageHeader>
@@ -245,7 +242,7 @@ class ReleasesList extends AsyncView<Props, State> {
             )}
           </LightWeightNoProjectMessage>
         </PageContent>
-      </React.Fragment>
+      </GlobalSelectionHeader>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/userFeedback/index.tsx b/src/sentry/static/sentry/app/views/userFeedback/index.tsx
index b2a14b052d..741ae0b9fb 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/index.tsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/index.tsx
@@ -114,8 +114,7 @@ class OrganizationUserFeedback extends AsyncView<Props, State> {
     const allIssuesQuery = {...query, status: ''};
 
     return (
-      <React.Fragment>
-        <GlobalSelectionHeader organization={organization} />
+      <GlobalSelectionHeader>
         <PageContent>
           <LightWeightNoProjectMessage organization={organization}>
             <div data-test-id="user-feedback">
@@ -148,7 +147,7 @@ class OrganizationUserFeedback extends AsyncView<Props, State> {
             </div>
           </LightWeightNoProjectMessage>
         </PageContent>
-      </React.Fragment>
+      </GlobalSelectionHeader>
     );
   }
 }
diff --git a/tests/acceptance/test_organization_global_selection_header.py b/tests/acceptance/test_organization_global_selection_header.py
index a573256796..c4bafdff95 100644
--- a/tests/acceptance/test_organization_global_selection_header.py
+++ b/tests/acceptance/test_organization_global_selection_header.py
@@ -119,12 +119,9 @@ class OrganizationGlobalHeaderTest(AcceptanceTestCase, SnubaTestCase):
         # selecting an explicit project should load previously selected project
         # from local storage
         # TODO check environment as well
-        # FIXME below is currently broken
-        # self.issues_list.visit_issue_list(
-        #     self.org.slug
-        # )
-        # self.issues_list.wait_until_loaded()
-        # assert u"project={}".format(self.project_3.id) in self.browser.current_url
+        self.issues_list.visit_issue_list(self.org.slug)
+        self.issues_list.wait_until_loaded()
+        assert u"project={}".format(self.project_3.id) in self.browser.current_url
 
     def test_global_selection_header_loads_with_correct_project_with_multi_project(self):
         """
@@ -163,8 +160,7 @@ class OrganizationGlobalHeaderTest(AcceptanceTestCase, SnubaTestCase):
             # there has been no explicit project selection via UI
             self.issues_list.visit_issue_list(self.org.slug)
             assert u"project=" not in self.browser.current_url
-            # FIXME
-            # assert self.issues_list.global_selection.get_selected_project_slug() == "My Projects"
+            assert self.issues_list.global_selection.get_selected_project_slug() == "My Projects"
 
             # can select a different project
             self.issues_list.global_selection.select_project_by_slug(self.project_3.slug)
@@ -186,8 +182,7 @@ class OrganizationGlobalHeaderTest(AcceptanceTestCase, SnubaTestCase):
             self.issues_list.visit_issue_list(self.org.slug)
             self.issues_list.wait_until_loaded()
             # TODO check environment as well
-            # FIXME: This is current broken and is a bug
-            # assert u"project={}".format(self.project_3.id) in self.browser.current_url
+            assert u"project={}".format(self.project_3.id) in self.browser.current_url
             assert (
                 self.issues_list.global_selection.get_selected_project_slug() == self.project_3.slug
             )
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index cc1dd418d6..612c455a63 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -9,6 +9,7 @@ import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import OrganizationActions from 'app/actions/organizationActions';
 import ProjectsStore from 'app/stores/projectsStore';
 import * as globalActions from 'app/actionCreators/globalSelection';
+import {getItem} from 'app/utils/localStorage';
 
 const changeQuery = (routerContext, query) => ({
   ...routerContext,
@@ -24,7 +25,7 @@ const changeQuery = (routerContext, query) => ({
 });
 
 jest.mock('app/utils/localStorage', () => ({
-  getItem: () => JSON.stringify({projects: [3], environments: ['staging']}),
+  getItem: jest.fn(),
   setItem: jest.fn(),
 }));
 
@@ -51,6 +52,8 @@ describe('GlobalSelectionHeader', function() {
     jest.spyOn(globalActions, 'updateDateTime');
     jest.spyOn(globalActions, 'updateEnvironments');
     jest.spyOn(globalActions, 'updateProjects');
+    jest.spyOn(globalActions, 'updateParams');
+    jest.spyOn(globalActions, 'updateParamsWithoutHistory');
   });
 
   beforeEach(function() {
@@ -59,19 +62,26 @@ describe('GlobalSelectionHeader', function() {
       projects: organization.projects,
       loading: false,
     }));
-    GlobalSelectionStore.reset();
+
+    getItem.mockImplementation(() => null);
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      body: [],
+    });
+  });
+
+  afterEach(function() {
     [
       globalActions.updateDateTime,
       globalActions.updateProjects,
       globalActions.updateEnvironments,
+      globalActions.updateParams,
+      globalActions.updateParamsWithoutHistory,
       router.push,
       router.replace,
+      getItem,
     ].forEach(mock => mock.mockClear());
-
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/projects/',
-      body: [],
-    });
+    GlobalSelectionStore.reset();
   });
 
   it('does not update router if there is custom routing', function() {
@@ -114,18 +124,10 @@ describe('GlobalSelectionHeader', function() {
     );
 
     expect(router.push).not.toHaveBeenCalled();
-    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
-      period: '7d',
-      utc: null,
-      start: null,
-      end: null,
-    });
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
 
     await tick();
 
-    expect(GlobalSelectionStore.get()).toEqual({
+    expect(GlobalSelectionStore.get().selection).toEqual({
       datetime: {
         period: '7d',
         utc: null,
@@ -137,49 +139,6 @@ describe('GlobalSelectionHeader', function() {
     });
   });
 
-  it('updates GlobalSelection store when re-rendered with different query params', async function() {
-    const wrapper = mountWithTheme(
-      <GlobalSelectionHeader organization={organization} />,
-      changeQuery(routerContext, {
-        statsPeriod: '7d',
-      })
-    );
-
-    wrapper.setContext(
-      changeQuery(routerContext, {
-        statsPeriod: '21d',
-      }).context
-    );
-
-    await tick();
-    wrapper.update();
-
-    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
-      period: '21d',
-      utc: null,
-      start: null,
-      end: null,
-    });
-    // These should not be called because they have not changed, only date has changed
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
-
-    globalActions.updateDateTime.mockClear();
-    globalActions.updateProjects.mockClear();
-    globalActions.updateEnvironments.mockClear();
-
-    expect(GlobalSelectionStore.get()).toEqual({
-      datetime: {
-        period: '21d',
-        utc: null,
-        start: null,
-        end: null,
-      },
-      environments: [],
-      projects: [],
-    });
-  });
-
   it('updates environments when switching projects', async function() {
     const wrapper = mountWithTheme(
       <GlobalSelectionHeader
@@ -189,6 +148,9 @@ describe('GlobalSelectionHeader', function() {
       routerContext
     );
 
+    await tick();
+    wrapper.update();
+
     mockRouterPush(wrapper, router);
 
     // Open dropdown and select both projects
@@ -220,7 +182,7 @@ describe('GlobalSelectionHeader', function() {
 
     expect(wrapper.find('MultipleEnvironmentSelector Content').text()).toBe('staging');
 
-    expect(GlobalSelectionStore.get()).toEqual({
+    expect(GlobalSelectionStore.get().selection).toEqual({
       datetime: {
         period: '14d',
         utc: null,
@@ -249,7 +211,7 @@ describe('GlobalSelectionHeader', function() {
     wrapper.update();
 
     // Store should not have any environments selected
-    expect(GlobalSelectionStore.get()).toEqual({
+    expect(GlobalSelectionStore.get().selection).toEqual({
       datetime: {
         period: '14d',
         utc: null,
@@ -259,7 +221,6 @@ describe('GlobalSelectionHeader', function() {
       environments: [],
       projects: [2],
     });
-    expect(wrapper.prop('location').query).toEqual({project: '2'});
     expect(wrapper.find('MultipleEnvironmentSelector Content').text()).toBe(
       'All Environments'
     );
@@ -309,67 +270,53 @@ describe('GlobalSelectionHeader', function() {
       })
     );
 
-    expect(router.push).not.toHaveBeenCalled();
-    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
-      period: '14d',
-      utc: null,
-      start: null,
-      end: null,
-    });
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith(['prod']);
-
     await tick();
 
     expect(GlobalSelectionStore.get()).toEqual({
-      datetime: {
-        period: '14d',
-        utc: null,
-        start: null,
-        end: null,
+      isReady: true,
+      selection: {
+        datetime: {
+          period: '14d',
+          utc: null,
+          start: null,
+          end: null,
+        },
+        environments: ['prod'],
+        projects: [],
       },
-      environments: ['prod'],
-      projects: [],
     });
+    // Not called because of the default date
+    expect(router.replace).not.toHaveBeenCalled();
   });
 
-  it('updates GlobalSelection store with empty date selections', async function() {
-    const wrapper = mountWithTheme(
+  it('updates GlobalSelection store with empty dates in URL', async function() {
+    mountWithTheme(
       <GlobalSelectionHeader organization={organization} />,
       changeQuery(routerContext, {
-        statsPeriod: '7d',
+        statsPeriod: null,
       })
     );
 
-    wrapper.setContext(
-      changeQuery(routerContext, {
-        statsPeriod: null,
-      }).context
-    );
     await tick();
-    wrapper.update();
-
-    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
-      period: '7d',
-      utc: null,
-      start: null,
-      end: null,
-    });
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
 
     expect(GlobalSelectionStore.get()).toEqual({
-      datetime: {
-        period: '14d',
-        utc: null,
-        start: null,
-        end: null,
+      isReady: true,
+      selection: {
+        datetime: {
+          period: '14d',
+          utc: null,
+          start: null,
+          end: null,
+        },
+        environments: [],
+        projects: [],
       },
-      environments: [],
-      projects: [],
     });
   });
 
+  /**
+   * I don't think this test is really applicable anymore
+   */
   it('does not update store if url params have not changed', async function() {
     const wrapper = mountWithTheme(
       <GlobalSelectionHeader organization={organization} />,
@@ -398,18 +345,58 @@ describe('GlobalSelectionHeader', function() {
     expect(globalActions.updateEnvironments).not.toHaveBeenCalled();
 
     expect(GlobalSelectionStore.get()).toEqual({
-      datetime: {
-        period: '7d',
-        utc: null,
-        start: null,
-        end: null,
+      isReady: true,
+      selection: {
+        datetime: {
+          period: '7d',
+          utc: null,
+          start: null,
+          end: null,
+        },
+        environments: [],
+        projects: [],
       },
-      environments: [],
-      projects: [],
     });
   });
 
-  it('updates store when there are query params in URL', function() {
+  it('loads from local storage when no URL parameters', async function() {
+    getItem.mockImplementation(() =>
+      JSON.stringify({projects: [3], environments: ['staging']})
+    );
+    const initializationObj = initializeOrg({
+      organization: {
+        features: ['global-views'],
+      },
+      router: {
+        params: {orgId: 'org-slug'}, // we need this to be set to make sure org in context is same as current org in URL
+      },
+    });
+
+    mountWithTheme(
+      <GlobalSelectionHeader organization={initializationObj.organization} />,
+      initializationObj.routerContext
+    );
+
+    await tick(); // reflux tick
+
+    expect(GlobalSelectionStore.get().selection.projects).toEqual([3]);
+    // Since these are coming from URL, there should be no changes and
+    // router does not need to be called
+    expect(initializationObj.router.replace).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        query: {
+          environment: ['staging'],
+          project: [3],
+        },
+      })
+    );
+  });
+
+  it('does not load from local storage when there are URL params', async function() {
+    getItem.mockImplementation(() =>
+      JSON.stringify({projects: [3], environments: ['staging']})
+    );
+
     const initializationObj = initializeOrg({
       organization: {
         features: ['global-views'],
@@ -425,19 +412,22 @@ describe('GlobalSelectionHeader', function() {
       initializationObj.routerContext
     );
 
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([1, 2]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
-    expect(globalActions.updateDateTime).toHaveBeenCalled();
+    await tick(); // reflux tick
+
+    expect(GlobalSelectionStore.get().selection.projects).toEqual([1, 2]);
+    // Since these are coming from URL, there should be no changes and
+    // router does not need to be called
+    expect(initializationObj.router.replace).not.toHaveBeenCalled();
   });
 
-  it('updates store with default values when there are no query params in URL', function() {
+  it('updates store when there are query params in URL', async function() {
     const initializationObj = initializeOrg({
       organization: {
         features: ['global-views'],
       },
       router: {
         params: {orgId: 'org-slug'}, // we need this to be set to make sure org in context is same as current org in URL
-        location: {query: {}},
+        location: {query: {project: [1, 2]}},
       },
     });
 
@@ -446,14 +436,32 @@ describe('GlobalSelectionHeader', function() {
       initializationObj.routerContext
     );
 
-    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
-    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
-    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
-      end: null,
-      period: '14d',
-      start: null,
-      utc: null,
+    await tick(); // reflux tick
+
+    expect(GlobalSelectionStore.get().selection.projects).toEqual([1, 2]);
+    // Since these are coming from URL, there should be no changes and
+    // router does not need to be called
+    expect(initializationObj.router.replace).not.toHaveBeenCalled();
+  });
+
+  it('updates store with default values when there are no query params in URL', async function() {
+    const initializationObj = initializeOrg({
+      organization: {
+        features: ['global-views'],
+      },
+      router: {
+        params: {orgId: 'org-slug'}, // we need this to be set to make sure org in context is same as current org in URL
+        location: {query: {}},
+      },
     });
+
+    mountWithTheme(
+      <GlobalSelectionHeader organization={initializationObj.organization} />,
+      initializationObj.routerContext
+    );
+
+    // Router does not update because params have not changed
+    expect(initializationObj.router.replace).not.toHaveBeenCalled();
   });
 
   /**
@@ -528,7 +536,11 @@ describe('GlobalSelectionHeader', function() {
 
       ProjectsStore.loadInitialData(updatedOrganization.projects);
 
-      expect(globalActions.updateProjects).toHaveBeenLastCalledWith([123]);
+      expect(initialData.router.replace).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          query: {environment: [], project: [123]},
+        })
+      );
     });
 
     it('selects first project if more than one is requested', function() {
@@ -544,10 +556,14 @@ describe('GlobalSelectionHeader', function() {
         initializationObj.routerContext
       );
 
-      expect(globalActions.updateProjects).toHaveBeenCalledWith([1]);
+      expect(initializationObj.router.replace).toHaveBeenCalledWith(
+        expect.objectContaining({
+          query: {environment: [], project: [1]},
+        })
+      );
     });
 
-    it('selects first project if none (i.e. all) is requested', function() {
+    it('selects first project if none (i.e. all) is requested', async function() {
       const project = TestStubs.Project({id: '3'});
       const org = TestStubs.Organization({projects: [project]});
       jest
@@ -567,13 +583,17 @@ describe('GlobalSelectionHeader', function() {
         initializationObj.routerContext
       );
 
-      expect(globalActions.updateProjects).toHaveBeenCalledWith([3]);
+      expect(initializationObj.router.replace).toHaveBeenCalledWith(
+        expect.objectContaining({
+          query: {environment: [], project: [3]},
+        })
+      );
     });
   });
 
   describe('forceProject selection mode', function() {
     let wrapper;
-    beforeAll(function() {
+    beforeEach(function() {
       MockApiClient.addMockResponse({
         url: '/organizations/org-slug/projects/',
         body: [],
@@ -663,7 +683,7 @@ describe('GlobalSelectionHeader', function() {
 
         expect(initialData.router.replace).toHaveBeenLastCalledWith({
           pathname: undefined,
-          query: {project: [0]},
+          query: {environment: [], project: [0]},
         });
       });
 
@@ -692,7 +712,7 @@ describe('GlobalSelectionHeader', function() {
 
         expect(initialData.router.replace).toHaveBeenLastCalledWith({
           pathname: undefined,
-          query: {project: [1]},
+          query: {environment: [], project: [1]},
         });
 
         expect(initialData.router.replace).toHaveBeenCalledTimes(1);
@@ -733,7 +753,7 @@ describe('GlobalSelectionHeader', function() {
 
         expect(initialData.router.replace).toHaveBeenLastCalledWith({
           pathname: undefined,
-          query: {project: [1]},
+          query: {environment: [], project: [1]},
         });
       });
     });
@@ -783,7 +803,7 @@ describe('GlobalSelectionHeader', function() {
 
         expect(initialData.router.replace).toHaveBeenLastCalledWith({
           pathname: undefined,
-          query: {project: [1], statsPeriod: '90d'},
+          query: {environment: [], project: [1], statsPeriod: '90d'},
         });
       });
     });
@@ -805,14 +825,17 @@ describe('GlobalSelectionHeader', function() {
         },
       });
 
-      const createWrapper = props => {
+      const createWrapper = (props, ctx) => {
         wrapper = mountWithTheme(
           <GlobalSelectionHeader
             params={{orgId: initialData.organization.slug}}
             organization={initialData.organization}
             {...props}
           />,
-          initialData.routerContext
+          {
+            ...initialData.routerContext,
+            ...ctx,
+          }
         );
         return wrapper;
       };
@@ -826,7 +849,7 @@ describe('GlobalSelectionHeader', function() {
         initialData.router.replace.mockClear();
       });
 
-      it('does not use first project in org projects when mounting', async function() {
+      it('does not use first project in org projects when mounting (and without localStorage data)', async function() {
         createWrapper();
 
         await tick();
@@ -869,6 +892,8 @@ describe('GlobalSelectionHeader', function() {
         // forceProject generally starts undefined
         createWrapper({shouldForceProject: true});
 
+        await tick();
+
         // load the projects
         mockProjectsStoreState.projects = initialData.organization.projects;
         mockProjectsStoreState.loading = false;
@@ -881,7 +906,7 @@ describe('GlobalSelectionHeader', function() {
 
         expect(initialData.router.replace).toHaveBeenLastCalledWith({
           pathname: undefined,
-          query: {project: [1]},
+          query: {environment: [], project: [1]},
         });
 
         expect(initialData.router.replace).toHaveBeenCalledTimes(1);
@@ -889,19 +914,13 @@ describe('GlobalSelectionHeader', function() {
 
       it('does not append projectId to URL when `forceProject` becomes available but project id already exists in URL', async function() {
         // forceProject generally starts undefined
-        createWrapper({shouldForceProject: true});
+        createWrapper(
+          {shouldForceProject: true},
+          changeQuery(initialData.routerContext, {project: 321})
+        );
+
+        await tick();
 
-        wrapper.setContext({
-          router: {
-            ...initialData.router,
-            location: {
-              ...initialData.router.location,
-              query: {
-                project: 321,
-              },
-            },
-          },
-        });
         wrapper.setProps({
           forceProject: initialData.organization.projects[1],
         });
@@ -968,7 +987,7 @@ describe('GlobalSelectionHeader', function() {
       ]);
     });
 
-    it('shows "My Projects" button', function() {
+    it('shows "My Projects" button', async function() {
       initialData.organization.features.push('global-views');
       wrapper = mountWithTheme(
         <GlobalSelectionHeader
@@ -978,6 +997,9 @@ describe('GlobalSelectionHeader', function() {
         initialData.routerContext
       );
 
+      await tick();
+      wrapper.update();
+
       // open the project menu.
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
       const projectSelector = wrapper.find('MultipleProjectSelector');
@@ -993,7 +1015,7 @@ describe('GlobalSelectionHeader', function() {
       ).toEqual('View My Projects');
     });
 
-    it('shows "All Projects" button based on features', function() {
+    it('shows "All Projects" button based on features', async function() {
       initialData.organization.features.push('global-views');
       initialData.organization.features.push('open-membership');
       wrapper = mountWithTheme(
@@ -1003,6 +1025,8 @@ describe('GlobalSelectionHeader', function() {
         />,
         initialData.routerContext
       );
+      await tick();
+      wrapper.update();
 
       // open the project menu.
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
@@ -1019,7 +1043,7 @@ describe('GlobalSelectionHeader', function() {
       ).toEqual('View All Projects');
     });
 
-    it('shows "All Projects" button based on role', function() {
+    it('shows "All Projects" button based on role', async function() {
       initialData.organization.features.push('global-views');
       initialData.organization.role = 'owner';
       wrapper = mountWithTheme(
@@ -1030,6 +1054,8 @@ describe('GlobalSelectionHeader', function() {
         initialData.routerContext
       );
 
+      await tick();
+      wrapper.update();
       // open the project menu.
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
       const projectSelector = wrapper.find('MultipleProjectSelector');
@@ -1056,7 +1082,9 @@ describe('GlobalSelectionHeader', function() {
         />,
         changeQuery(initialData.routerContext, {project: -1})
       );
+
       await tick();
+      wrapper.update();
 
       // open the project menu.
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index 6dbdf5c6f9..1f77d00c93 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -11,32 +11,30 @@ jest.mock('app/utils/localStorage', () => ({
 }));
 
 describe('GlobalSelectionStore', function() {
-  const organization = TestStubs.Organization({
-    features: ['global-views'],
-    projects: [TestStubs.Project({id: '5'})],
-  });
-
   afterEach(function() {
     GlobalSelectionStore.reset();
   });
 
   it('get()', function() {
     expect(GlobalSelectionStore.get()).toEqual({
-      projects: [],
-      environments: [],
-      datetime: {period: '14d', start: null, end: null, utc: null},
+      isReady: false,
+      selection: {
+        projects: [],
+        environments: [],
+        datetime: {period: '14d', start: null, end: null, utc: null},
+      },
     });
   });
 
   it('updateProjects()', async function() {
-    expect(GlobalSelectionStore.get().projects).toEqual([]);
+    expect(GlobalSelectionStore.get().selection.projects).toEqual([]);
     updateProjects([1]);
     await tick();
-    expect(GlobalSelectionStore.get().projects).toEqual([1]);
+    expect(GlobalSelectionStore.get().selection.projects).toEqual([1]);
   });
 
   it('updateDateTime()', async function() {
-    expect(GlobalSelectionStore.get().datetime).toEqual({
+    expect(GlobalSelectionStore.get().selection.datetime).toEqual({
       period: '14d',
       start: null,
       end: null,
@@ -44,7 +42,7 @@ describe('GlobalSelectionStore', function() {
     });
     updateDateTime({period: '2h', start: null, end: null});
     await tick();
-    expect(GlobalSelectionStore.get().datetime).toEqual({
+    expect(GlobalSelectionStore.get().selection.datetime).toEqual({
       period: '2h',
       start: null,
       end: null,
@@ -57,7 +55,7 @@ describe('GlobalSelectionStore', function() {
       utc: true,
     });
     await tick();
-    expect(GlobalSelectionStore.get().datetime).toEqual({
+    expect(GlobalSelectionStore.get().selection.datetime).toEqual({
       period: null,
       start: '2018-08-08T00:00:00',
       end: '2018-09-08T00:00:00',
@@ -71,7 +69,7 @@ describe('GlobalSelectionStore', function() {
       utc: null,
     });
     await tick();
-    expect(GlobalSelectionStore.get().datetime).toEqual({
+    expect(GlobalSelectionStore.get().selection.datetime).toEqual({
       period: null,
       start: null,
       end: null,
@@ -80,37 +78,9 @@ describe('GlobalSelectionStore', function() {
   });
 
   it('updateEnvironments()', async function() {
-    expect(GlobalSelectionStore.get().environments).toEqual([]);
+    expect(GlobalSelectionStore.get().selection.environments).toEqual([]);
     updateEnvironments(['alpha']);
     await tick();
-    expect(GlobalSelectionStore.get().environments).toEqual(['alpha']);
-  });
-
-  it('loadInitialData() - queryParams', async function() {
-    GlobalSelectionStore.loadInitialData(organization, {
-      project: '5',
-      environment: ['staging'],
-    });
-
-    await tick();
-
-    expect(GlobalSelectionStore.get().projects).toEqual([5]);
-    expect(GlobalSelectionStore.get().environments).toEqual(['staging']);
-  });
-
-  it('loadInitialData() - localStorage', async function() {
-    GlobalSelectionStore.loadInitialData(organization, {});
-    await tick();
-
-    expect(GlobalSelectionStore.get().projects).toEqual([5]);
-    expect(GlobalSelectionStore.get().environments).toEqual(['staging']);
-  });
-
-  it('loadInitialData() - defaults used if invalid', async function() {
-    GlobalSelectionStore.loadInitialData(organization, {project: [2]});
-    await tick();
-
-    expect(GlobalSelectionStore.get().projects).toEqual([]);
-    expect(GlobalSelectionStore.get().environments).toEqual([]);
+    expect(GlobalSelectionStore.get().selection.environments).toEqual(['alpha']);
   });
 });
diff --git a/tests/js/spec/views/alerts/list/index.spec.jsx b/tests/js/spec/views/alerts/list/index.spec.jsx
index b38fe49771..35dfd6b888 100644
--- a/tests/js/spec/views/alerts/list/index.spec.jsx
+++ b/tests/js/spec/views/alerts/list/index.spec.jsx
@@ -3,12 +3,14 @@ import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import IncidentsList from 'app/views/alerts/list';
+import ProjectsStore from 'app/stores/projectsStore';
 
 describe('IncidentsList', function() {
   const {routerContext, organization} = initializeOrg();
   let mock;
   let projectMock;
   let wrapper;
+  let projects;
   const projects1 = ['a', 'b', 'c'];
   const projects2 = ['c', 'd'];
 
@@ -55,23 +57,31 @@ describe('IncidentsList', function() {
       body: TestStubs.IncidentStats({totalEvents: 1000, uniqueUsers: 32}),
     });
 
+    projects = [
+      TestStubs.Project({slug: 'a', platform: 'javascript'}),
+      TestStubs.Project({slug: 'b'}),
+      TestStubs.Project({slug: 'c'}),
+      TestStubs.Project({slug: 'd'}),
+    ];
+
     projectMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/projects/',
-      body: [
-        TestStubs.Project({slug: 'a', platform: 'javascript'}),
-        TestStubs.Project({slug: 'b'}),
-        TestStubs.Project({slug: 'c'}),
-        TestStubs.Project({slug: 'd'}),
-      ],
+      body: projects,
     });
   });
 
   afterEach(function() {
+    ProjectsStore.reset();
     MockApiClient.clearMockResponses();
   });
 
   it('displays list', async function() {
+    ProjectsStore.loadInitialData(projects);
     wrapper = await createWrapper();
+    await tick();
+    await tick();
+    await tick();
+    wrapper.update();
 
     const items = wrapper.find('IncidentPanelItem');
 
@@ -83,10 +93,10 @@ describe('IncidentsList', function() {
     // component to load projects for all rows.
     expect(projectMock).toHaveBeenCalledTimes(2);
 
-    expect(projectMock).toHaveBeenCalledWith(
+    expect(projectMock).toHaveBeenLastCalledWith(
       expect.anything(),
       expect.objectContaining({
-        query: {query: 'slug:a slug:b slug:c slug:d'},
+        query: {query: 'slug:a slug:b slug:c'},
       })
     );
     expect(
@@ -95,7 +105,7 @@ describe('IncidentsList', function() {
         .find('IdBadge')
         .prop('project')
     ).toMatchObject({
-      platform: 'javascript',
+      slug: 'a',
     });
 
     expect(
diff --git a/tests/js/spec/views/dashboards/dashboard.spec.jsx b/tests/js/spec/views/dashboards/dashboard.spec.jsx
index f026588f3f..621e36466e 100644
--- a/tests/js/spec/views/dashboards/dashboard.spec.jsx
+++ b/tests/js/spec/views/dashboards/dashboard.spec.jsx
@@ -72,6 +72,8 @@ describe('OrganizationDashboard', function() {
 
   it('queries and renders discover-based widgets grouped by time', async function() {
     createWrapper(TestStubs.Dashboard());
+    await tick();
+    wrapper.update();
 
     expect(discoverMock).toHaveBeenCalledTimes(2);
     expect(discoverMock).toHaveBeenCalledWith(
diff --git a/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx b/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
index fdeedaa8c3..788c38e8ec 100644
--- a/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
+++ b/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
@@ -29,13 +29,16 @@ describe('OverviewDashboard', function() {
 
   const org = organization;
 
-  const createWrapper = props => {
+  const createWrapper = async props => {
+    ProjectsStore.loadInitialData(organization.projects);
     wrapper = mountWithTheme(
       <DashboardsContainer>
         <OverviewDashboard params={{orgId: organization.slug}} {...props} />
       </DashboardsContainer>,
       routerContext
     );
+    await tick();
+    wrapper.update();
     mockRouterPush(wrapper, router);
   };
 
@@ -96,7 +99,7 @@ describe('OverviewDashboard', function() {
       eventsByReleaseWidget,
     ]);
 
-    createWrapper(dashboardData);
+    await createWrapper(dashboardData);
 
     // TODO(billy): Figure out why releases gets called twice
     expect(discoverMock).toHaveBeenCalledTimes(4);
diff --git a/tests/js/spec/views/discover/index.spec.jsx b/tests/js/spec/views/discover/index.spec.jsx
index 58c99f0674..17eae90437 100644
--- a/tests/js/spec/views/discover/index.spec.jsx
+++ b/tests/js/spec/views/discover/index.spec.jsx
@@ -2,9 +2,7 @@ import React from 'react';
 import {browserHistory} from 'react-router';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
-import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import DiscoverContainerWithStore, {DiscoverContainer} from 'app/views/discover';
-import ProjectsStore from 'app/stores/projectsStore';
 
 describe('DiscoverContainer', function() {
   beforeEach(function() {
@@ -63,26 +61,6 @@ describe('DiscoverContainer', function() {
       expect(queryBuilder.getColumns().some(column => column.name === 'tag1')).toBe(true);
       expect(queryBuilder.getColumns().some(column => column.name === 'tag2')).toBe(true);
     });
-
-    it('sets active projects from global selection', async function() {
-      ProjectsStore.loadInitialData(organization.projects);
-
-      GlobalSelectionStore.reset({
-        projects: [1],
-        environments: [],
-        datetime: {start: null, end: null, period: '14d'},
-      });
-
-      wrapper = mountWithTheme(
-        <DiscoverContainerWithStore
-          location={{query: {}, search: ''}}
-          params={{}}
-          organization={organization}
-        />,
-        TestStubs.routerContext()
-      );
-      expect(wrapper.find('MultipleProjectSelector').text()).toBe('test-project');
-    });
   });
 
   describe('saved query', function() {
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index f08499375a..2715665e1b 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -212,7 +212,7 @@ describe('EventsErrors', function() {
     let wrapper;
     let newParams;
 
-    beforeEach(function() {
+    beforeEach(async function() {
       const newLocation = {
         ...router.location,
         query: {
@@ -234,6 +234,7 @@ describe('EventsErrors', function() {
         },
       };
 
+      ProjectsStore.loadInitialData(organization.projects);
       wrapper = mountWithTheme(
         <EventsContainer
           router={newRouter}
@@ -246,6 +247,9 @@ describe('EventsErrors', function() {
       );
       mockRouterPush(wrapper, router);
 
+      await tick();
+      wrapper.update();
+
       // XXX: Note this spy happens AFTER initial render!
       tableRender = jest.spyOn(wrapper.find('EventsTable').instance(), 'render');
     });
@@ -327,7 +331,7 @@ describe('EventsContainer', function() {
     });
   });
 
-  beforeEach(function() {
+  beforeEach(async function() {
     // Search bar makes this request when mounted
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
@@ -350,6 +354,8 @@ describe('EventsContainer', function() {
       body: {count: 5},
     });
 
+    ProjectsStore.loadInitialData(organization.projects);
+
     wrapper = mountWithTheme(
       <EventsContainer
         router={router}
@@ -360,10 +366,17 @@ describe('EventsContainer', function() {
       </EventsContainer>,
       routerContext
     );
+    await tick();
+    wrapper.update();
 
     mockRouterPush(wrapper, router);
   });
 
+  afterEach(async function() {
+    ProjectsStore.reset();
+    await tick();
+  });
+
   it('performs the correct queries when there is a search query', async function() {
     wrapper.find('SmartSearchBar input').simulate('change', {target: {value: 'http'}});
     wrapper.find('SmartSearchBar input').simulate('submit');
@@ -401,17 +414,17 @@ describe('EventsContainer', function() {
   });
 
   it('updates when changing projects', async function() {
-    ProjectsStore.loadInitialData(organization.projects);
-    // ensure that the wrapper gets new project values from withProjects HOC
-    wrapper.update();
-
-    expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([]);
+    // Project id = 3 should be first selected because of ProjectsStore.getAll sorting by slug
+    expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([3]);
 
     wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
+    // TODO(billy): Fix this sorting, 2 gets moved up
+    // because the component (ProjectSelector) sorts it and
+    // orders isBookmarked to the top
     wrapper
       .find('MultipleProjectSelector AutoCompleteItem ProjectSelectorItem')
-      .first()
+      .at(0)
       .simulate('click');
 
     await tick();
diff --git a/tests/js/spec/views/events/eventsChart.spec.jsx b/tests/js/spec/views/events/eventsChart.spec.jsx
index 75f73856e5..555dffa846 100644
--- a/tests/js/spec/views/events/eventsChart.spec.jsx
+++ b/tests/js/spec/views/events/eventsChart.spec.jsx
@@ -5,13 +5,10 @@ import {chart, doZoom, mockZoomRange} from 'sentry-test/charts';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mount} from 'sentry-test/enzyme';
-import {updateParams} from 'app/actionCreators/globalSelection';
+import * as globalSelection from 'app/actionCreators/globalSelection';
 
 jest.mock('app/views/events/utils/eventsRequest', () => jest.fn(() => null));
-
-jest.mock('app/actionCreators/globalSelection', () => ({
-  updateParams: jest.fn(),
-}));
+jest.spyOn(globalSelection, 'updateDateTime');
 
 describe('EventsChart', function() {
   const {router, routerContext, org} = initializeOrg();
@@ -19,6 +16,7 @@ describe('EventsChart', function() {
   let wrapper;
 
   beforeEach(function() {
+    globalSelection.updateDateTime.mockClear();
     mockZoomRange(1543449600000, 1543708800000);
     wrapper = mount(
       <EventsChart
@@ -100,14 +98,14 @@ describe('EventsChart', function() {
     expect(chartZoomInstance.currentPeriod.end).toEqual('2018-12-02T00:00:00');
     const newParams = {
       period: null,
-      start: '2018-11-29T00:00:00',
-      end: '2018-12-02T00:00:00',
+      start: getUtcToLocalDateObject('2018-11-29T00:00:00'),
+      end: getUtcToLocalDateObject('2018-12-02T00:00:00'),
     };
-    expect(updateParams).toHaveBeenCalledWith(newParams, router);
+    expect(globalSelection.updateDateTime).toHaveBeenCalledWith(newParams, router);
     wrapper.setProps({
       period: newParams.period,
-      start: getUtcToLocalDateObject(newParams.start),
-      end: getUtcToLocalDateObject(newParams.end),
+      start: newParams.start,
+      end: newParams.end,
     });
     wrapper.update();
   });
@@ -136,7 +134,7 @@ describe('EventsChart', function() {
       start: null,
       end: null,
     };
-    expect(updateParams).toHaveBeenCalledWith(newParams, router);
+    expect(globalSelection.updateDateTime).toHaveBeenLastCalledWith(newParams, router);
     wrapper.setProps({
       period: '14d',
       start: null,
diff --git a/tests/js/spec/views/events/index.spec.jsx b/tests/js/spec/views/events/index.spec.jsx
index c5eda10aca..38b61f8737 100644
--- a/tests/js/spec/views/events/index.spec.jsx
+++ b/tests/js/spec/views/events/index.spec.jsx
@@ -50,7 +50,7 @@ describe('EventsContainer', function() {
   });
 
   describe('Header', function() {
-    beforeEach(function() {
+    beforeEach(async function() {
       GlobalSelectionStore.reset();
       ProjectsStore.loadInitialData(organization.projects);
 
@@ -69,6 +69,9 @@ describe('EventsContainer', function() {
         routerContext
       );
 
+      await tick();
+      wrapper.update();
+
       mockRouterPush(wrapper, router);
     });
 
@@ -112,18 +115,19 @@ describe('EventsContainer', function() {
         .find('CheckboxHitbox')
         .simulate('click');
 
-      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([
-        'production',
-        'staging',
-      ]);
-
-      // close dropdown
+      // Value only updates if "Apply" is clicked or menu is closed
       wrapper
         .find('MultipleEnvironmentSelector StyledInput')
         .simulate('keyDown', {key: 'Escape'});
 
       await tick();
       wrapper.update();
+
+      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([
+        'production',
+        'staging',
+      ]);
+
       expect(router.push).toHaveBeenLastCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -332,53 +336,5 @@ describe('EventsContainer', function() {
         })
       );
     });
-
-    it('updates TimeRangeSelector when changing routes', async function() {
-      let newRouter = {
-        router: {
-          ...router,
-          location: {
-            pathname: '/organizations/org-slug/events2/',
-            query: {
-              end: '2017-10-17T02:41:20',
-              start: '2017-10-03T02:41:20',
-              utc: 'true',
-            },
-          },
-        },
-      };
-      wrapper.setProps(newRouter);
-      wrapper.setContext(newRouter);
-
-      await tick();
-      wrapper.update();
-
-      expect(wrapper.find('TimeRangeSelector').text()).toEqual(
-        'Oct 3, 201702:41toOct 17, 201702:41'
-      );
-
-      newRouter = {
-        router: {
-          ...router,
-          location: {
-            pathname: '/organizations/org-slug/events/',
-            query: {
-              statsPeriod: '7d',
-              end: null,
-              start: null,
-              utc: 'true',
-            },
-          },
-        },
-      };
-
-      wrapper.setProps(newRouter);
-      wrapper.setContext(newRouter);
-
-      await tick();
-      wrapper.update();
-
-      expect(wrapper.find('TimeRangeSelector').text()).toEqual('Last 7 days');
-    });
   });
 });
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index a25f8031dd..72e73cdf04 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -1,8 +1,9 @@
-import React from 'react';
 import {browserHistory} from 'react-router';
+import React from 'react';
 
-import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import ProjectsStore from 'app/stores/projectsStore';
 import Results from 'app/views/eventsV2/results';
 
 const FIELDS = [
@@ -119,9 +120,10 @@ describe('EventsV2 > Results', function() {
 
   afterEach(function() {
     MockApiClient.clearMockResponses();
+    ProjectsStore.reset();
   });
 
-  it('loads data when moving from an invalid to valid EventView', function() {
+  it('loads data when moving from an invalid to valid EventView', async function() {
     const organization = TestStubs.Organization({
       features,
       projects: [TestStubs.Project()],
@@ -143,6 +145,10 @@ describe('EventsV2 > Results', function() {
       />,
       initialData.routerContext
     );
+
+    ProjectsStore.loadInitialData(initialData.organization.projects);
+    await tick();
+    wrapper.update();
     // No request as eventview was invalid.
     expect(eventResultsMock).not.toHaveBeenCalled();
 
@@ -157,7 +163,7 @@ describe('EventsV2 > Results', function() {
     expect(eventResultsMock).toHaveBeenCalled();
   });
 
-  it('pagination cursor should be cleared when making a search', function() {
+  it('pagination cursor should be cleared when making a search', async function() {
     const organization = TestStubs.Organization({
       features,
       projects: [TestStubs.Project()],
@@ -170,6 +176,8 @@ describe('EventsV2 > Results', function() {
       },
     });
 
+    ProjectsStore.loadInitialData(initialData.organization.projects);
+
     const wrapper = mountWithTheme(
       <Results
         organization={organization}
@@ -179,6 +187,9 @@ describe('EventsV2 > Results', function() {
       initialData.routerContext
     );
 
+    await tick();
+    wrapper.update();
+
     // ensure cursor query string is initially present in the location
     expect(initialData.router.location).toEqual({
       query: {
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index 084ebf9c42..4c5c4298fa 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -7,7 +7,6 @@ import ConfigStore from 'app/stores/configStore';
 import {OrganizationContext} from 'app/views/organizationContext';
 import ProjectsStore from 'app/stores/projectsStore';
 import TeamStore from 'app/stores/teamStore';
-import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import OrganizationStore from 'app/stores/organizationStore';
 
 jest.mock('app/stores/configStore', () => ({
@@ -49,7 +48,6 @@ describe('OrganizationContext', function() {
     });
     jest.spyOn(TeamStore, 'loadInitialData');
     jest.spyOn(ProjectsStore, 'loadInitialData');
-    jest.spyOn(GlobalSelectionStore, 'loadInitialData');
     jest.spyOn(OrganizationActionCreator, 'fetchOrganizationDetails');
   });
 
@@ -62,7 +60,6 @@ describe('OrganizationContext', function() {
     TeamStore.loadInitialData.mockRestore();
     ProjectsStore.loadInitialData.mockRestore();
     ConfigStore.get.mockRestore();
-    GlobalSelectionStore.loadInitialData.mockRestore();
     OrganizationActionCreator.fetchOrganizationDetails.mockRestore();
   });
 
@@ -89,11 +86,6 @@ describe('OrganizationContext', function() {
       true,
       true
     );
-    expect(GlobalSelectionStore.loadInitialData).toHaveBeenCalledWith(
-      org,
-      {},
-      {api, skipLastUsed: false}
-    );
   });
 
   it('fetches new org when router params change', async function() {
@@ -262,25 +254,4 @@ describe('OrganizationContext', function() {
 
     expect(getOrgMock).toHaveBeenCalledTimes(1);
   });
-
-  it('calls `GlobalSelectionStore.loadInitialData` with `skipLastUsed` option when loadigno group details route', async function() {
-    expect(GlobalSelectionStore.loadInitialData).not.toHaveBeenCalled();
-    wrapper = createWrapper({
-      routes: [{path: '/organizations/:orgId/issues/:groupId/'}],
-    });
-    // await dispatching action
-    await tick();
-    // await resolving api, and updating component
-    await tick();
-    wrapper.update();
-
-    expect(wrapper.state('loading')).toBe(false);
-    expect(wrapper.state('error')).toBe(null);
-
-    expect(GlobalSelectionStore.loadInitialData).toHaveBeenCalledWith(
-      org,
-      {},
-      {api, skipLastUsed: true}
-    );
-  });
 });
diff --git a/tests/js/spec/views/organizationGroupDetails/groupDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupDetails.spec.jsx
index 4710ed467e..13e739c1c4 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupDetails.spec.jsx
@@ -5,6 +5,7 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import GroupDetails from 'app/views/organizationGroupDetails';
+import ProjectsStore from 'app/stores/projectsStore';
 import GroupStore from 'app/stores/groupStore';
 
 jest.mock('app/views/organizationGroupDetails/header', () => jest.fn(() => null));
@@ -58,6 +59,7 @@ describe('groupDetails', function() {
 
   let issueDetailsMock;
   beforeEach(function() {
+    ProjectsStore.loadInitialData(organization.projects);
     MockComponent = jest.fn(() => null);
     issueDetailsMock = MockApiClient.addMockResponse({
       url: `/issues/${group.id}/`,
@@ -76,6 +78,7 @@ describe('groupDetails', function() {
     if (wrapper) {
       wrapper.unmount();
     }
+    ProjectsStore.reset();
     GroupStore.reset();
     GlobalSelectionStore.reset();
     MockApiClient.clearMockResponses();
@@ -85,12 +88,19 @@ describe('groupDetails', function() {
   });
 
   it('renders', async function() {
+    ProjectsStore.reset();
+    await tick();
+
     wrapper = createWrapper();
 
     await tick();
     wrapper.update();
 
-    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+    expect(MockComponent).not.toHaveBeenCalled();
+
+    ProjectsStore.loadInitialData(organization.projects);
+    await tick();
+
     expect(MockComponent).toHaveBeenLastCalledWith(
       {
         environments: [],
@@ -162,6 +172,8 @@ describe('groupDetails', function() {
 
     wrapper = createWrapper(props);
 
+    ProjectsStore.loadInitialData(props.organization.projects);
+
     await tick();
     // Reflux and stuff
     await tick();
@@ -169,8 +181,7 @@ describe('groupDetails', function() {
 
     expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
 
-    // TODO(billy): This should be 1 time, but GSH syncs the environment to store and causes re-render and thus a second request
-    expect(issueDetailsMock).toHaveBeenCalledTimes(2);
+    expect(issueDetailsMock).toHaveBeenCalledTimes(1);
     expect(issueDetailsMock).toHaveBeenLastCalledWith(
       expect.anything(),
       expect.objectContaining({
diff --git a/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx b/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
index 942b4b9460..1d75c5a6ee 100644
--- a/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
+++ b/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
 import ReleaseDetails from 'app/views/releases/detail/';
+import ProjectsStore from 'app/stores/projectsStore';
 
 describe('ReleaseDetails', function() {
   let deleteMock;
@@ -33,7 +34,8 @@ describe('ReleaseDetails', function() {
     });
   });
 
-  it('shows release details', function() {
+  it('shows release details', async function() {
+    const organization = TestStubs.Organization();
     const params = {
       orgId: 'acme',
       projectId: 'anvils',
@@ -54,6 +56,11 @@ describe('ReleaseDetails', function() {
       TestStubs.routerContext()
     );
 
+    ProjectsStore.loadInitialData(organization.projects);
+
+    await tick();
+    wrapper.update();
+
     // Click delete button
     wrapper
       .find('button[aria-label="Delete"]')
diff --git a/tests/js/spec/views/releases/list/index.spec.jsx b/tests/js/spec/views/releases/list/index.spec.jsx
index 773a1c4484..577b756f56 100644
--- a/tests/js/spec/views/releases/list/index.spec.jsx
+++ b/tests/js/spec/views/releases/list/index.spec.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
+import ProjectsStore from 'app/stores/projectsStore';
 import ReleaseList from 'app/views/releases/list/';
 
 describe('ReleaseList', function() {
@@ -8,7 +9,7 @@ describe('ReleaseList', function() {
   let props;
   let wrapper;
 
-  beforeEach(function() {
+  beforeEach(async function() {
     organization = TestStubs.Organization({
       projects: [TestStubs.Project()],
       features: ['global-views'],
@@ -44,10 +45,13 @@ describe('ReleaseList', function() {
       location: {query: {per_page: 0, query: 'derp'}},
     };
 
+    ProjectsStore.loadInitialData(organization.projects);
     wrapper = mountWithTheme(
       <ReleaseList {...props} />,
       TestStubs.routerContext([{organization}])
     );
+    await tick();
+    wrapper.update();
   });
 
   afterEach(function() {
diff --git a/tests/js/spec/views/releasesV2/list/index.spec.jsx b/tests/js/spec/views/releasesV2/list/index.spec.jsx
index 02ba7166eb..2a448a712c 100644
--- a/tests/js/spec/views/releasesV2/list/index.spec.jsx
+++ b/tests/js/spec/views/releasesV2/list/index.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
+import ProjectsStore from 'app/stores/projectsStore';
 import ReleaseList from 'app/views/releasesV2/list/';
 
 describe('ReleasesV2List', function() {
@@ -25,7 +26,8 @@ describe('ReleasesV2List', function() {
   };
   let wrapper, endpointMock;
 
-  beforeEach(function() {
+  beforeEach(async function() {
+    ProjectsStore.loadInitialData(organization.projects);
     endpointMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/releases/',
       body: [
@@ -41,9 +43,12 @@ describe('ReleasesV2List', function() {
     });
 
     wrapper = mountWithTheme(<ReleaseList {...props} />, routerContext);
+    await tick();
+    wrapper.update();
   });
 
   afterEach(function() {
+    ProjectsStore.reset();
     MockApiClient.clearMockResponses();
   });
 
diff --git a/tests/js/spec/views/userFeedback/index.spec.jsx b/tests/js/spec/views/userFeedback/index.spec.jsx
index eac85a34bb..1add8451e6 100644
--- a/tests/js/spec/views/userFeedback/index.spec.jsx
+++ b/tests/js/spec/views/userFeedback/index.spec.jsx
@@ -1,10 +1,12 @@
 import React from 'react';
 
+import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme} from 'sentry-test/enzyme';
-import OrganizationUserFeedback from 'app/views/userFeedback';
+import ProjectsStore from 'app/stores/projectsStore';
+import UserFeedback from 'app/views/userFeedback';
 
-describe('OrganizationUserFeedback', function() {
-  let organization, routerContext;
+describe('UserFeedback', function() {
+  const {organization, routerContext} = initializeOrg();
   const pageLinks =
     '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", ' +
     '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:100:0>; rel="next"; results="true"; cursor="0:100:0"';
@@ -20,25 +22,17 @@ describe('OrganizationUserFeedback', function() {
       url: '/organizations/org-slug/environments/',
       body: TestStubs.Environments(),
     });
+  });
 
-    organization = TestStubs.Organization();
-    routerContext = TestStubs.routerContext([
-      {
-        organization,
-        router: {
-          ...TestStubs.router(),
-          params: {
-            orgId: organization.slug,
-          },
-        },
-      },
-    ]);
+  afterEach(function() {
+    ProjectsStore.reset();
   });
 
-  it('renders', function() {
+  it('renders', async function() {
+    const project = TestStubs.Project({isMember: true});
     const params = {
       organization: TestStubs.Organization({
-        projects: [TestStubs.Project({isMember: true})],
+        projects: [project],
       }),
       location: {query: {}, search: ''},
       params: {
@@ -46,11 +40,17 @@ describe('OrganizationUserFeedback', function() {
       },
       finishProfile: jest.fn(),
     };
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/projects/',
+      body: [project],
+      headers: {Link: pageLinks},
+    });
+
+    ProjectsStore.loadInitialData(params.organization.projects);
 
-    const wrapper = mountWithTheme(
-      <OrganizationUserFeedback {...params} />,
-      routerContext
-    );
+    const wrapper = mountWithTheme(<UserFeedback {...params} />, routerContext);
+    await tick();
+    wrapper.update();
 
     expect(wrapper.find('CompactIssue')).toHaveLength(1);
   });
@@ -65,10 +65,7 @@ describe('OrganizationUserFeedback', function() {
         orgId: organization.slug,
       },
     };
-    const wrapper = mountWithTheme(
-      <OrganizationUserFeedback {...params} />,
-      routerContext
-    );
+    const wrapper = mountWithTheme(<UserFeedback {...params} />, routerContext);
 
     expect(wrapper.find('NoProjectMessage').exists()).toBe(true);
     expect(wrapper.find('UserFeedbackEmpty').exists()).toBe(false);
@@ -89,10 +86,7 @@ describe('OrganizationUserFeedback', function() {
         orgId: organization.slug,
       },
     };
-    const wrapper = mountWithTheme(
-      <OrganizationUserFeedback {...params} />,
-      routerContext
-    );
+    const wrapper = mountWithTheme(<UserFeedback {...params} />, routerContext);
 
     expect(wrapper.find('UserFeedbackEmpty').prop('projectIds')).toEqual([]);
   });
@@ -112,10 +106,7 @@ describe('OrganizationUserFeedback', function() {
         orgId: organization.slug,
       },
     };
-    const wrapper = mountWithTheme(
-      <OrganizationUserFeedback {...params} />,
-      routerContext
-    );
+    const wrapper = mountWithTheme(<UserFeedback {...params} />, routerContext);
 
     expect(wrapper.find('UserFeedbackEmpty').prop('projectIds')).toEqual(['112']);
   });
@@ -135,10 +126,7 @@ describe('OrganizationUserFeedback', function() {
         orgId: organization.slug,
       },
     };
-    const wrapper = mountWithTheme(
-      <OrganizationUserFeedback {...params} />,
-      routerContext
-    );
+    const wrapper = mountWithTheme(<UserFeedback {...params} />, routerContext);
 
     expect(wrapper.find('UserFeedbackEmpty').prop('projectIds')).toEqual(['112', '113']);
   });
