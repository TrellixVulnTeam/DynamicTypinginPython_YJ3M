commit 449ebe3c8fa027e5b8b98e5a34e1ed31e3f098d4
Author: Michal Kuffa <beezz@users.noreply.github.com>
Date:   Wed Jun 24 15:39:31 2020 +0200

    fix: Prevent connection attempt for repeated redis cluster retrieval (#19528)
    
    Repeated retrieval of cluster from the manager and the underlying check
    for cluster presence caused setup of the lazy objects and thus attempt
    for a connection in case of _RedisCluster cluster type.

diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 1a5ee786c9..eedf6c46fe 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -145,19 +145,20 @@ class ClusterManager(object):
     def get(self, key):
         cluster = self.__clusters.get(key)
 
-        if cluster:
-            return cluster
-
-        # TODO: This would probably be safer with a lock, but I'm not sure
-        # that it's necessary.
-        configuration = self.__options_manager.get("redis.clusters").get(key)
-        if configuration is None:
-            raise KeyError(u"Invalid cluster name: {}".format(key))
-
-        if not self.__cluster_type.supports(configuration):
-            raise KeyError(u"Invalid cluster type, expected: {}".format(self.__cluster_type))
-
-        cluster = self.__clusters[key] = self.__cluster_type.factory(**configuration)
+        # Do not access attributes of the `cluster` object to prevent
+        # setup/init of lazy objects. The _RedisCluster type will try to
+        # connect to the cluster during initialization.
+        if cluster is None:
+            # TODO: This would probably be safer with a lock, but I'm not sure
+            # that it's necessary.
+            configuration = self.__options_manager.get("redis.clusters").get(key)
+            if configuration is None:
+                raise KeyError(u"Invalid cluster name: {}".format(key))
+
+            if not self.__cluster_type.supports(configuration):
+                raise KeyError(u"Invalid cluster type, expected: {}".format(self.__cluster_type))
+
+            cluster = self.__clusters[key] = self.__cluster_type.factory(**configuration)
 
         return cluster
 
diff --git a/tests/sentry/utils/test_redis.py b/tests/sentry/utils/test_redis.py
index ac8bbf301a..6148ee5381 100644
--- a/tests/sentry/utils/test_redis.py
+++ b/tests/sentry/utils/test_redis.py
@@ -14,6 +14,7 @@ from sentry.utils.redis import (
     _RedisCluster,
     logger,
 )
+from django.utils.functional import SimpleLazyObject
 
 # Silence connection warnings
 logger.setLevel(logging.ERROR)
@@ -57,6 +58,22 @@ class ClusterManagerTestCase(TestCase):
         with pytest.raises(KeyError):
             manager.get("bar")
 
+    def test_multiple_retrieval_do_not_setup_lazy_object(self):
+        class TestClusterType:
+            def supports(self, config):
+                return True
+
+            def factory(self, **config):
+                def setupfunc():
+                    assert False, "setupfunc should not be called"
+
+                return SimpleLazyObject(setupfunc)
+
+        manager = make_manager(cluster_type=TestClusterType)
+        manager.get("foo")
+        # repeated retrieval should not trigger call to setupfunc
+        manager.get("foo")
+
 
 def test_get_cluster_from_options():
     backend = object()
