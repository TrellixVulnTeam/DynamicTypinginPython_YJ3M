commit 5a7ceb6e8228ad1ab4ddd8873aed7461b37fb7dc
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Aug 19 10:53:11 2019 -0700

    ref(onboarding): Make create sample event wait for event (#14313)

diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
index cca5b5f4f3..bd76780642 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
@@ -6,7 +6,7 @@ import {t, tct} from 'app/locale';
 import IndicatorActions from 'app/actions/indicatorActions';
 import space from 'app/styles/space';
 
-// RFormValueoves a single indicator
+// Removes a single indicator
 export function removeIndicator(indicator) {
   IndicatorActions.remove(indicator);
 }
diff --git a/src/sentry/static/sentry/app/components/errorRobot.jsx b/src/sentry/static/sentry/app/components/errorRobot.jsx
index 66b5049732..7f72c57ad1 100644
--- a/src/sentry/static/sentry/app/components/errorRobot.jsx
+++ b/src/sentry/static/sentry/app/components/errorRobot.jsx
@@ -1,14 +1,12 @@
-import {Link, browserHistory} from 'react-router';
+import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {analytics} from 'app/utils/analytics';
-import {sendSampleEvent} from 'app/actionCreators/projects';
-import Button from 'app/components/button';
 import {t} from 'app/locale';
+import Button from 'app/components/button';
+import CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';
 import withApi from 'app/utils/withApi';
 
 const ErrorRobot = createReactClass({
@@ -74,22 +72,6 @@ const ErrorRobot = createReactClass({
     }
   },
 
-  createSampleEvent() {
-    const {org, project} = this.props;
-
-    analytics('sample_event.created', {
-      org_id: parseInt(org.id, 10),
-      project_id: parseInt(project.id, 10),
-      source: 'robot',
-    });
-
-    sendSampleEvent(this.props.api, org.slug, project.slug)
-      .then(data => {
-        browserHistory.push(`/${org.slug}/${project.slug}/issues/${data.groupID}/`);
-      })
-      .catch(() => addErrorMessage(t('Unable to create sample event')));
-  },
-
   render() {
     const {loading, error, sampleIssueId} = this.state;
     const {org, project, gradient} = this.props;
@@ -104,16 +86,18 @@ const ErrorRobot = createReactClass({
         </p>
       ) : (
         <p>
-          <Button
+          <CreateSampleEventButton
             priority="link"
             borderless
             size="large"
+            organization={org}
+            project={project}
+            source="issues_list"
             disabled={!project}
-            onClick={this.createSampleEvent}
-            title={t('Select a project to create a sample event')}
+            title={!project ? t('Select a project to create a sample event') : null}
           >
             {t('Create a sample event')}
-          </Button>
+          </CreateSampleEventButton>
         </p>
       );
     }
diff --git a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.jsx b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.jsx
deleted file mode 100644
index f8be025694..0000000000
--- a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.jsx
+++ /dev/null
@@ -1,77 +0,0 @@
-import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import * as Sentry from '@sentry/browser';
-
-import {addSuccessMessage} from 'app/actionCreators/indicator';
-import {analytics} from 'app/utils/analytics';
-import {t} from 'app/locale';
-import Button from 'app/components/button';
-import SentryTypes from 'app/sentryTypes';
-import withApi from 'app/utils/withApi';
-import withOrganization from 'app/utils/withOrganization';
-
-class CreateSampleEventButton extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization.isRequired,
-    project: SentryTypes.Project.isRequired,
-    source: PropTypes.string.isRequired,
-  };
-
-  state = {
-    creating: false,
-  };
-
-  componentDidMount() {
-    const {organization, project, source} = this.props;
-
-    if (!project) {
-      return;
-    }
-
-    const data = {
-      org_id: parseInt(organization.id, 10),
-      project_id: parseInt(project.id, 10),
-      source,
-    };
-    analytics('sample_event.button_viewed', data);
-  }
-
-  createSampleEvent = async () => {
-    // TODO(dena): swap out for action creator
-    const {api, organization, project, source} = this.props;
-    const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;
-
-    analytics('sample_event.created', {
-      org_id: parseInt(organization.id, 10),
-      project_id: parseInt(project.id, 10),
-      source,
-    });
-
-    this.setState({creating: true});
-    try {
-      const data = await api.requestPromise(url, {method: 'POST'});
-
-      const issueUrl = `/organizations/${organization.slug}/issues/${data.groupID}/`;
-      browserHistory.push(issueUrl);
-    } catch (error) {
-      Sentry.withScope(scope => {
-        scope.setExtra('error', error);
-        Sentry.captureException(new Error('Failed to create sample event'));
-      });
-      addSuccessMessage(t('Unable to create a sample event'));
-    }
-    this.setState({creating: false});
-  };
-
-  render() {
-    // eslint-disable-next-line no-unused-vars
-    const {api, organization, project, source, ...props} = this.props;
-    const {creating} = this.state;
-
-    return <Button disabled={creating} onClick={this.createSampleEvent} {...props} />;
-  }
-}
-
-export default withApi(withOrganization(CreateSampleEventButton));
diff --git a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
new file mode 100644
index 0000000000..f8dd025539
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
@@ -0,0 +1,140 @@
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import * as Sentry from '@sentry/browser';
+
+import {Client} from 'app/api';
+import {Organization, Project} from 'app/types';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  clearIndicators,
+} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import {trackAdhocEvent} from 'app/utils/analytics';
+import Button from 'app/components/button';
+import SentryTypes from 'app/sentryTypes';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = React.ComponentProps<typeof Button> & {
+  api: Client;
+  organization: Organization;
+  project: Project;
+  source: string;
+};
+
+type State = {
+  creating: boolean;
+};
+
+const EVENT_POLL_RETRIES = 6;
+const EVENT_POLL_INTERVAL = 500;
+
+async function latestEventAvailable(api: Client, groupID: string) {
+  let retries = 0;
+
+  // eslint-disable-next-line no-constant-condition
+  while (true) {
+    if (retries > EVENT_POLL_RETRIES) {
+      return false;
+    }
+    await new Promise(resolve => setTimeout(resolve, EVENT_POLL_INTERVAL));
+    try {
+      await api.requestPromise(`/issues/${groupID}/events/latest/`);
+      return true;
+    } catch {
+      ++retries;
+    }
+  }
+}
+
+class CreateSampleEventButton extends React.Component<Props, State> {
+  static propTypes: any = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization.isRequired,
+    project: SentryTypes.Project,
+    source: PropTypes.string.isRequired,
+    disabled: PropTypes.bool,
+  };
+
+  state = {
+    creating: false,
+  };
+
+  componentDidMount() {
+    const {organization, project, source} = this.props;
+
+    if (!project) {
+      return;
+    }
+
+    trackAdhocEvent({
+      eventKey: 'sample_event.button_viewed',
+      org_id: organization.id,
+      project_id: project.id,
+      source,
+    });
+  }
+
+  createSampleGroup = async () => {
+    // TODO(dena): swap out for action creator
+    const {api, organization, project, source} = this.props;
+    let eventData;
+
+    addLoadingMessage(t('Processing sample event...'));
+    this.setState({creating: true});
+
+    try {
+      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;
+      eventData = await api.requestPromise(url, {method: 'POST'});
+    } catch (error) {
+      Sentry.withScope(scope => {
+        scope.setExtra('error', error);
+        Sentry.captureException(new Error('Failed to create sample event'));
+      });
+      this.setState({creating: false});
+      addErrorMessage(t('Failed to create a new sample event'));
+      return;
+    }
+
+    // Wait for the event to be fully processed and available on the group
+    // before redirecting.
+    const eventCreated = await latestEventAvailable(api, eventData.groupID);
+    clearIndicators();
+    this.setState({creating: false});
+
+    if (!eventCreated) {
+      addErrorMessage(t('Failed to load sample event'));
+      return;
+    }
+
+    trackAdhocEvent({
+      eventKey: 'sample_event.created',
+      org_id: organization.id,
+      project_id: project.id,
+      source,
+    });
+
+    browserHistory.push(
+      `/organizations/${organization.slug}/issues/${eventData.groupID}/`
+    );
+  };
+
+  render() {
+    // eslint-disable-next-line no-unused-vars
+    const {api, organization, project, source, ...props} = this.props;
+    const {creating} = this.state;
+
+    return (
+      <Button
+        {...props}
+        data-test-id="create-sample-event"
+        disabled={props.disabled || creating}
+        onClick={this.createSampleGroup}
+      />
+    );
+  }
+}
+
+export default withApi(withOrganization(CreateSampleEventButton));
diff --git a/tests/js/spec/components/createSampleEventButton.spec.jsx b/tests/js/spec/components/createSampleEventButton.spec.jsx
new file mode 100644
index 0000000000..3f5eff27a6
--- /dev/null
+++ b/tests/js/spec/components/createSampleEventButton.spec.jsx
@@ -0,0 +1,125 @@
+import {browserHistory} from 'react-router';
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';
+
+jest.useFakeTimers();
+
+describe('CreateSampleEventButton', function() {
+  const {org, project, routerContext} = initializeOrg();
+  const groupID = '123';
+
+  const wrapper = mount(
+    <CreateSampleEventButton source="test" project={project} />,
+    routerContext
+  );
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('creates a sample event', async function() {
+    const createRequest = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/create-sample/`,
+      method: 'POST',
+      body: {groupID},
+    });
+
+    wrapper
+      .find('[data-test-id="create-sample-event"]')
+      .first()
+      .simulate('click');
+
+    // The button should be disabled while creating the event
+    expect(
+      wrapper
+        .find('[data-test-id="create-sample-event"]')
+        .first()
+        .prop('disabled')
+    ).toBe(true);
+
+    // We have to await the API calls. We could norally do this using tick(),
+    // however since we have enabled fake timers to handle the spin-wait on the
+    // event creation, we cannot use tick.
+    await Promise.resolve();
+    expect(createRequest).toHaveBeenCalled();
+
+    const latestIssueRequest = MockApiClient.addMockResponse({
+      url: `/issues/${groupID}/events/latest/`,
+      body: {},
+    });
+
+    // There is a timeout before we check for the existance of the latest
+    // event. Wait for it then wait for the request to complete
+    jest.runAllTimers();
+    await Promise.resolve();
+    expect(latestIssueRequest).toHaveBeenCalled();
+
+    // Wait for the api request and latestEventAvailable to resolve
+    await Promise.resolve();
+    await Promise.resolve();
+
+    wrapper.update();
+    expect(
+      wrapper
+        .find('[data-test-id="create-sample-event"]')
+        .first()
+        .prop('disabled')
+    ).toBe(false);
+
+    expect(browserHistory.push).toHaveBeenCalledWith(
+      `/organizations/${org.slug}/issues/${groupID}/`
+    );
+  });
+
+  it('waits for the latest event to be processed', async function() {
+    const createRequest = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/create-sample/`,
+      method: 'POST',
+      body: {groupID},
+    });
+
+    wrapper
+      .find('[data-test-id="create-sample-event"]')
+      .first()
+      .simulate('click');
+
+    await Promise.resolve();
+    expect(createRequest).toHaveBeenCalled();
+
+    // Start with no latest event
+    let latestIssueRequest = MockApiClient.addMockResponse({
+      url: `/issues/${groupID}/events/latest/`,
+      statusCode: 404,
+      body: {},
+    });
+
+    // Wait for the timeout once, the first request will 404
+    jest.runAllTimers();
+    await Promise.resolve();
+    expect(latestIssueRequest).toHaveBeenCalled();
+    await Promise.resolve();
+
+    // Second request will be successful
+    MockApiClient.clearMockResponses();
+    latestIssueRequest = MockApiClient.addMockResponse({
+      url: `/issues/${groupID}/events/latest/`,
+      statusCode: 200,
+      body: {},
+    });
+
+    jest.runAllTimers();
+    await Promise.resolve();
+    expect(latestIssueRequest).toHaveBeenCalled();
+    await Promise.resolve();
+
+    // wait for latestEventAvailable to resolve
+    await Promise.resolve();
+
+    expect(browserHistory.push).toHaveBeenCalledWith(
+      `/organizations/${org.slug}/issues/${groupID}/`
+    );
+  });
+});
diff --git a/tests/js/spec/components/errorRobot.spec.jsx b/tests/js/spec/components/errorRobot.spec.jsx
index 7349b521a0..60825b8fd6 100644
--- a/tests/js/spec/components/errorRobot.spec.jsx
+++ b/tests/js/spec/components/errorRobot.spec.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
-import {browserHistory} from 'react-router';
-import {shallow} from 'enzyme';
+import {mount} from 'enzyme';
 import {Client} from 'app/api';
 import {ErrorRobot} from 'app/components/errorRobot';
 
@@ -19,19 +18,19 @@ describe('ErrorRobot', function() {
   describe('with a project', function() {
     let wrapper;
     beforeEach(function() {
-      wrapper = shallow(
+      wrapper = mount(
         <ErrorRobot
           api={new MockApiClient()}
           org={TestStubs.Organization()}
           project={TestStubs.Project()}
-        />
+        />,
+        TestStubs.routerContext()
       );
     });
 
     it('Renders a button for creating an event', function() {
-      const button = wrapper.find('Button[priority="link"]');
-      expect(button).toHaveLength(1);
-      expect(button.props().onClick).toBeDefined();
+      const button = wrapper.find('Button[data-test-id="create-sample-event"]');
+      expect(button.exists).toBeTruthy();
       expect(button.props().disabled).toBeFalsy();
       expect(getIssues).toHaveBeenCalled();
     });
@@ -41,32 +40,21 @@ describe('ErrorRobot', function() {
       expect(button).toHaveLength(1);
       expect(button.props().to).toEqual(expect.stringContaining('getting-started'));
     });
-
-    it('can create a sample event', async function() {
-      Client.addMockResponse({
-        url: '/projects/org-slug/project-slug/create-sample/',
-        method: 'POST',
-        body: {groupID: 999},
-      });
-      wrapper.find('Button[priority="link"]').simulate('click');
-      await wrapper.update();
-
-      expect(browserHistory.push).toHaveBeenCalled();
-    });
   });
 
   describe('without a project', function() {
     let wrapper;
 
     beforeEach(function() {
-      wrapper = shallow(
-        <ErrorRobot api={new MockApiClient()} org={TestStubs.Organization()} />
+      wrapper = mount(
+        <ErrorRobot api={new MockApiClient()} org={TestStubs.Organization()} />,
+        TestStubs.routerContext()
       );
     });
 
     it('Renders a disabled create event button', function() {
-      const button = wrapper.find('Button[priority="link"]');
-      expect(button).toHaveLength(1);
+      const button = wrapper.find('Button[data-test-id="create-sample-event"]');
+      expect(button.exists).toBeTruthy();
       expect(button.props().disabled).toBeTruthy();
       expect(getIssues).toHaveBeenCalledTimes(0);
     });
