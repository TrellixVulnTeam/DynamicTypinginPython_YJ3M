commit 930cbca0e99db519edca117580680c5005b17b01
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 24 13:38:47 2015 -0700

    Better handling of weak stack heuristics for JS grouping

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index adf716d8a8..67cec3a01f 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -187,6 +187,9 @@ class Frame(Interface):
 
         assert filename or function or module
 
+        if function == '?':
+            function = None
+
         context_locals = data.get('vars') or {}
         if isinstance(context_locals, (list, tuple)):
             context_locals = dict(enumerate(context_locals))
@@ -266,6 +269,11 @@ class Frame(Interface):
             can_use_context = False
         elif len(self.context_line) > 120:
             can_use_context = False
+        elif self.is_url() and not self.function:
+            # the context is too risky to use here as it could be something
+            # coming from an HTML page or it could be minified/unparseable
+            # code, so lets defer to other lesser heuristics (like lineno)
+            can_use_context = False
         elif self.function and self.is_unhashable_function():
             can_use_context = True
         else:
@@ -529,7 +537,7 @@ class Stacktrace(Interface):
         # we could improve this check using that information.
         stack_invalid = (
             len(frames) == 1 and frames[0].lineno == 1
-            and frames[0].function in ('?', None) and frames[0].is_url()
+            and not frames[0].function and frames[0].is_url()
         )
 
         if stack_invalid:
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 7ec9826960..306f35c919 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -203,6 +203,7 @@ class StacktraceTest(TestCase):
         interface = Frame.to_python({
             'context_line': 'hello world',
             'filename': 'http://foo.com/foo.py',
+            'function': 'test',
         })
         result = interface.get_hash()
         self.assertEquals(result, ['hello world'])
@@ -211,6 +212,7 @@ class StacktraceTest(TestCase):
         interface = Frame.to_python({
             'context_line': 'hello world',
             'filename': 'https://foo.com/foo.py',
+            'function': 'test',
         })
         result = interface.get_hash()
         self.assertEquals(result, ['hello world'])
@@ -219,6 +221,7 @@ class StacktraceTest(TestCase):
         interface = Frame.to_python({
             'context_line': 'hello world',
             'abs_path': 'https://foo.com/foo.py',
+            'function': 'test',
             'filename': 'foo.py',
         })
         result = interface.get_hash()
@@ -278,6 +281,18 @@ class StacktraceTest(TestCase):
         result = interface.get_hash()
         assert result != []
 
+    def test_get_hash_does_not_group_different_js_errors(self):
+        interface = Stacktrace.to_python({
+            'frames': [{
+                'context_line': '{snip}',
+                'lineno': 20,
+                'filename': 'https://foo.com/index.js',
+                'function': '?',
+            }],
+        })
+        result = interface.get_hash()
+        assert result == []
+
     @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
     def test_to_string_returns_stacktrace(self, get_stacktrace):
         event = mock.Mock(spec=Event())
