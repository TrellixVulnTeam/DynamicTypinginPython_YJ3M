commit cdd0785d24bab34c6616e10eeabd01f70b1cd145
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed May 16 11:45:24 2018 -0700

    ref(integrations): Move comment syncing to a celery task (#8408)

diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 0f4a3922cf..ed12408afd 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -14,9 +14,9 @@ from sentry.api.serializers.rest_framework.group_notes import NoteSerializer, se
 from sentry.api.fields.actor import Actor
 
 from sentry.models import (
-    Activity, GroupLink, GroupSubscription, GroupSubscriptionReason,
-    ExternalIssue, Integration, User
+    Activity, GroupLink, GroupSubscription, GroupSubscriptionReason, User
 )
+from sentry.tasks.integrations import post_comment
 from sentry.utils.functional import extract_lazy_object
 
 
@@ -101,28 +101,21 @@ class GroupNotesEndpoint(GroupEndpoint):
             data=data,
         )
 
+        activity.send_notification()
+
         # sync Sentry comments to external issues
         if features.has('organizations:internal-catchall', group.organization, actor=request.user):
-            external_issues = list(
-                ExternalIssue.objects.filter(
-                    id__in=GroupLink.objects.filter(
-                        project_id=group.project_id,
-                        group_id=group.id,
-                        linked_type=GroupLink.LinkedType.issue,
-                    ).values_list('linked_id', flat=True)
+            external_issue_ids = GroupLink.objects.filter(
+                project_id=group.project_id,
+                group_id=group.id,
+                linked_type=GroupLink.LinkedType.issue,
+            ).values_list('linked_id', flat=True)
+
+            for external_issue_id in external_issue_ids:
+                post_comment.apply_async(
+                    kwargs={
+                        'external_issue_id': external_issue_id,
+                        'data': data,
+                    }
                 )
-            )
-
-            if external_issues:
-                integrations = {
-                    i.id: i for i in Integration.objects.filter(
-                        id__in=[external_issue.integration_id for external_issue in external_issues]
-                    )
-                }
-
-                for external_issue in external_issues:
-                    integration = integrations[external_issue.integration_id]
-                    integration.get_installation().create_comment(external_issue.key, data['text'])
-
-        activity.send_notification()
         return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ccf8a09d04..3a94ed5923 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -436,7 +436,7 @@ CELERY_IMPORTS = (
     'sentry.tasks.process_buffer', 'sentry.tasks.reports', 'sentry.tasks.reprocessing',
     'sentry.tasks.scheduler', 'sentry.tasks.signals', 'sentry.tasks.store', 'sentry.tasks.unmerge',
     'sentry.tasks.symcache_update', 'sentry.tasks.servicehooks',
-    'sentry.tagstore.tasks', 'sentry.tasks.assemble'
+    'sentry.tagstore.tasks', 'sentry.tasks.assemble', 'sentry.tasks.integrations',
 )
 CELERY_QUEUES = [
     Queue('activity.notify', routing_key='activity.notify'),
@@ -458,6 +458,7 @@ CELERY_QUEUES = [
     Queue('events.reprocessing.process_event', routing_key='events.reprocessing.process_event'),
     Queue('events.reprocess_events', routing_key='events.reprocess_events'),
     Queue('events.save_event', routing_key='events.save_event'),
+    Queue('integrations', routing_key='integrations'),
     Queue('merge', routing_key='merge'),
     Queue('options', routing_key='options'),
     Queue('reports.deliver', routing_key='reports.deliver'),
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
new file mode 100644
index 0000000000..ff4d81b2c6
--- /dev/null
+++ b/src/sentry/tasks/integrations.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from sentry.tasks.base import instrumented_task, retry
+
+from sentry.models import ExternalIssue, Integration
+
+
+@instrumented_task(
+    name='sentry.tasks.integrations.post_comment',
+    queue='integrations',
+    default_retry_delay=60 * 5,
+    max_retries=5
+)
+# TODO(jess): Add more retry exclusions once ApiClients have better error handling
+@retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist))
+def post_comment(external_issue_id, data, **kwargs):
+    # sync Sentry comments to an external issue
+    external_issue = ExternalIssue.objects.get(id=external_issue_id)
+    integration = Integration.objects.get(id=external_issue.integration_id)
+    integration.get_installation().create_comment(external_issue.key, data['text'])
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index 51d21bfba8..4a3c76f163 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -202,15 +202,16 @@ class GroupNoteCreateTest(APITestCase):
         url = '/api/0/issues/{}/comments/'.format(group.id)
 
         with self.feature('organizations:internal-catchall'):
-            response = self.client.post(
-                url, format='json', data={
-                    'text': 'hello world',
-                }
-            )
-            assert response.status_code == 201, response.content
-
-            activity = Activity.objects.get(id=response.data['id'])
-            assert activity.user == self.user
-            assert activity.group == group
-            assert activity.data == {'text': 'hello world'}
-            mock_create_comment.assert_called_with('APP-123', 'hello world')
+            with self.tasks():
+                response = self.client.post(
+                    url, format='json', data={
+                        'text': 'hello world',
+                    }
+                )
+                assert response.status_code == 201, response.content
+
+                activity = Activity.objects.get(id=response.data['id'])
+                assert activity.user == self.user
+                assert activity.group == group
+                assert activity.data == {'text': 'hello world'}
+                mock_create_comment.assert_called_with('APP-123', 'hello world')
