commit ed53c3cf70a177bd6e40268077d77c162a1e11c0
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jun 22 23:03:19 2013 -0700

    Promote project global keys and allow all members access to view the default key

diff --git a/CHANGES b/CHANGES
index aed39f71b6..cbffd11d3a 100644
--- a/CHANGES
+++ b/CHANGES
@@ -24,6 +24,7 @@ Incompatible Changes
   have been removed.**
 - Nearly all data within an event now has a fixed max size. See client
   developer documentation for details.
+- Project keys are no longer created for individuals by default
 
 Protocol Version 4
 ==================
diff --git a/src/sentry/models.py b/src/sentry/models.py
index d4953cea0f..5c0a6e88ac 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -1211,16 +1211,10 @@ def create_team_and_keys_for_project(instance, created, **kwargs):
         team.save()
         update(instance, team=team)
 
-        ProjectKey.objects.get_or_create(
+    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
+        ProjectKey.objects.create(
             project=instance,
-            user=instance.owner,
         )
-    else:
-        for member in instance.team.member_set.all():
-            ProjectKey.objects.get_or_create(
-                project=instance,
-                user=member.user,
-            )
 
 
 def create_team_member_for_owner(instance, created, **kwargs):
@@ -1246,17 +1240,6 @@ def update_document(instance, created, **kwargs):
     ).update(status=instance.status)
 
 
-def create_key_for_team_member(instance, created, **kwargs):
-    if not created or kwargs.get('raw'):
-        return
-
-    for project in instance.team.project_set.all():
-        ProjectKey.objects.get_or_create(
-            project=project,
-            user=instance.user,
-        )
-
-
 def remove_key_for_team_member(instance, **kwargs):
     for project in instance.team.project_set.all():
         ProjectKey.objects.filter(
@@ -1351,12 +1334,6 @@ post_save.connect(
     dispatch_uid="update_document",
     weak=False,
 )
-post_save.connect(
-    create_key_for_team_member,
-    sender=TeamMember,
-    dispatch_uid="create_key_for_team_member",
-    weak=False,
-)
 pre_delete.connect(
     remove_key_for_team_member,
     sender=TeamMember,
diff --git a/src/sentry/templates/sentry/projects/keys.html b/src/sentry/templates/sentry/projects/keys.html
index bbf1a7b5c5..ac62450d73 100644
--- a/src/sentry/templates/sentry/projects/keys.html
+++ b/src/sentry/templates/sentry/projects/keys.html
@@ -9,7 +9,7 @@
 {% block inner %}
     <div class="page-header">
         {% if can_add_key %}
-            <a href="{% url '-key' project.team.slug project.slug %}" class="btn pull-right btn-primary">{% trans "Generate New Key" %}</a>
+            <a href="{% url 'sentry-new-project-key' project.team.slug project.slug %}" class="btn pull-right btn-primary">{% trans "Generate New Key" %}</a>
         {% endif %}
         <h2>
             {% trans "Manage API Keys" %}
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 4cd2159fac..8eb1cd5c78 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -256,3 +256,17 @@ def merge_into(self, other, callback=lambda x: x, using='default'):
 
             if send_signals:
                 post_save.send(created=True, **signal_kwargs)
+
+
+class Savepoint(object):
+    def __init__(self, using='default'):
+        self.using = using
+
+    def __enter__(self):
+        self.sid = transaction.savepoint(using=self.using)
+
+    def __exit__(self, *exc_info):
+        if exc_info:
+            transaction.savepoint_rollback(self.sid, using=self.using)
+        else:
+            transaction.savepoint_commit(self.sid, using=self.using)
diff --git a/src/sentry/web/frontend/docs.py b/src/sentry/web/frontend/docs.py
index d485c2d102..606fb36c84 100644
--- a/src/sentry/web/frontend/docs.py
+++ b/src/sentry/web/frontend/docs.py
@@ -8,37 +8,23 @@ sentry.web.frontend.projects
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 
-from sentry.conf import settings
-from sentry.constants import (MEMBER_OWNER, PLATFORM_LIST, PLATFORM_TITLES,
-    PLATFORM_ROOTS)
+from sentry.constants import (
+    PLATFORM_LIST, PLATFORM_TITLES, PLATFORM_ROOTS)
 from sentry.models import ProjectKey
 from sentry.web.decorators import has_access
 from sentry.web.helpers import render_to_response, render_to_string, get_raven_js_url
 
 
-def can_see_global_keys(user, project):
-    if user.is_superuser:
-        return True
-    if settings.PUBLIC:
-        return True
-    if not project.team:
-        return False
-    if not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
-        return False
-    return True
-
-
 def get_key_context(user, project):
     try:
         key = ProjectKey.objects.get(user=user, project=project)
     except ProjectKey.DoesNotExist:
-        if can_see_global_keys(user, project):
-            key_list = list(ProjectKey.objects.filter(project=project, user__isnull=True)[0:2])
-            if len(key_list) == 1:
-                key = key_list[0]
-            else:
-                key = None
-        else:
+        try:
+            key = ProjectKey.objects.filter(
+                project=project,
+                user__isnull=True,
+            )[0]
+        except IndexError:
             key = None
 
     if key is None:
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7428ebd562..49a257a13c 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -115,7 +115,7 @@ urlpatterns = patterns('',
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/$', projects.manage_project_keys,
         name='sentry-manage-project-keys'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/new/$', projects.new_project_key,
-        name='-key'),
+        name='sentry-new-project-key'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/remove/$', projects.remove_project_key,
         name='sentry-remove-project-key'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/$', projects.manage_plugins,
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 98f37488b7..e10a59a99e 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -70,12 +70,12 @@ class ProjectKeyTest(TestCase):
         user = User.objects.create(username='admin')
         team = Team.objects.create(name='Test', slug='test', owner=user)
         project = Project.objects.create(name='Test', slug='test', owner=user, team=team)
-        self.assertTrue(project.key_set.filter(user=user).exists())
+        assert project.key_set.filter(user__isnull=True).exists() is True
 
     def test_key_is_created_for_project_with_new_team(self):
         user = User.objects.create(username='admin')
         project = Project.objects.create(name='Test', slug='test', owner=user)
-        self.assertTrue(project.key_set.filter(user=user).exists())
+        assert project.key_set.filter(user__isnull=True).exists() is True
 
 
 class PendingTeamMemberTest(TestCase):
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index b46223a573..65f4e540b7 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -35,7 +35,7 @@ class ManageProjectKeysTest(TestCase):
 class NewProjectKeyTest(TestCase):
     @fixture
     def path(self):
-        return reverse('-key', args=[self.team.slug, self.project.id])
+        return reverse('sentry-new-project-key', args=[self.team.slug, self.project.id])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -46,7 +46,7 @@ class NewProjectKeyTest(TestCase):
 
         resp = self.client.get(self.path)
         assert resp.status_code == 302
-        create.assert_called_once_with(
+        create.assert_any_call(
             project=self.project, user_added=self.user
         )
 
