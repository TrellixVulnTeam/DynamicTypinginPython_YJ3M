commit d733a8e9d2060a7e6e8d2a34580c00304d8f4457
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Oct 22 11:36:21 2019 -0700

    feat(deletions): Handle EventAttachment and UserReport deletions (#15198)
    
    Extend group deletions to perform EventAttachment and UserReport deletions.
    We need to handle this in the same way as nodestore deletions since:
    - Events (and event deletions) are going away
    - We don't have a guarantee of a group_id being set / updated on either
    of these models

diff --git a/src/sentry/deletions/defaults/group.py b/src/sentry/deletions/defaults/group.py
index 90cd8ccec1..d9db630f1f 100644
--- a/src/sentry/deletions/defaults/group.py
+++ b/src/sentry/deletions/defaults/group.py
@@ -1,14 +1,14 @@
 from __future__ import absolute_import, print_function
 
 from sentry import eventstore, nodestore
-from sentry.models import Event
+from sentry.models import Event, EventAttachment, UserReport
 
 from ..base import BaseDeletionTask, BaseRelation, ModelDeletionTask, ModelRelation
 
 
-class GroupNodeDeletionTask(BaseDeletionTask):
+class EventDataDeletionTask(BaseDeletionTask):
     """
-    Deletes nodestore data for group
+    Deletes nodestore data, EventAttachment and UserReports for group
     """
 
     DEFAULT_CHUNK_SIZE = 10000
@@ -17,7 +17,7 @@ class GroupNodeDeletionTask(BaseDeletionTask):
         self.group_id = group_id
         self.project_id = project_id
         self.last_event = None
-        super(GroupNodeDeletionTask, self).__init__(manager, **kwargs)
+        super(EventDataDeletionTask, self).__init__(manager, **kwargs)
 
     def chunk(self):
         conditions = []
@@ -46,10 +46,14 @@ class GroupNodeDeletionTask(BaseDeletionTask):
 
         self.last_event = events[-1]
 
-        node_ids = [Event.generate_node_id(self.project_id, event.id) for event in events]
-
+        # Remove from nodestore
+        node_ids = [Event.generate_node_id(self.project_id, event.event_id) for event in events]
         nodestore.delete_multi(node_ids)
 
+        # Remove EventAttachment and UserReport
+        EventAttachment.objects.filter(event_id=event.event_id, project_id=self.project_id).delete()
+        UserReport.objects.filter(event_id=event.event_id, project_id=self.project_id).delete()
+
         return True
 
 
@@ -90,7 +94,7 @@ class GroupDeletionTask(ModelDeletionTask):
             [
                 BaseRelation(
                     {"group_id": instance.id, "project_id": instance.project_id},
-                    GroupNodeDeletionTask,
+                    EventDataDeletionTask,
                 )
             ]
         )
diff --git a/tests/sentry/deletions/test_group.py b/tests/sentry/deletions/test_group.py
index 1adb39780a..55644a48c0 100644
--- a/tests/sentry/deletions/test_group.py
+++ b/tests/sentry/deletions/test_group.py
@@ -4,6 +4,8 @@ from uuid import uuid4
 
 from sentry.models import (
     Event,
+    EventAttachment,
+    File,
     Group,
     GroupAssignee,
     GroupHash,
@@ -14,7 +16,7 @@ from sentry.models import (
     UserReport,
 )
 from sentry import nodestore
-from sentry.deletions.defaults.group import GroupNodeDeletionTask
+from sentry.deletions.defaults.group import EventDataDeletionTask
 from sentry.tasks.deletion import run_deletion
 
 from sentry.testutils import TestCase, SnubaTestCase
@@ -23,7 +25,7 @@ from sentry.testutils.helpers.datetime import iso_format, before_now
 
 class DeleteGroupTest(TestCase, SnubaTestCase):
     def test_simple(self):
-        GroupNodeDeletionTask.DEFAULT_CHUNK_SIZE = 1  # test chunking logic
+        EventDataDeletionTask.DEFAULT_CHUNK_SIZE = 1  # test chunking logic
         event_id = "a" * 32
         event_id2 = "b" * 32
         event_id3 = "c" * 32
@@ -65,7 +67,18 @@ class DeleteGroupTest(TestCase, SnubaTestCase):
 
         project = self.create_project()
 
-        UserReport.objects.create(group_id=group.id, project_id=event.project_id, name="Jane Doe")
+        UserReport.objects.create(
+            group_id=group.id, project_id=event.project_id, name="With group id"
+        )
+        UserReport.objects.create(
+            event_id=event.event_id, project_id=event.project_id, name="With event id"
+        )
+        EventAttachment.objects.create(
+            event_id=event.event_id,
+            project_id=event.project_id,
+            file=File.objects.create(name="hello.png", type="image/png"),
+            name="hello.png",
+        )
 
         GroupAssignee.objects.create(group=group, project=project, user=self.user)
         GroupHash.objects.create(project=project, group=group, hash=uuid4().hex)
@@ -84,10 +97,12 @@ class DeleteGroupTest(TestCase, SnubaTestCase):
 
         assert not Event.objects.filter(id=event.id).exists()
         assert not UserReport.objects.filter(group_id=group.id).exists()
+        assert not UserReport.objects.filter(event_id=event.event_id).exists()
+        assert not EventAttachment.objects.filter(event_id=event.event_id).exists()
+
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
         assert not GroupHash.objects.filter(group_id=group.id).exists()
         assert not Group.objects.filter(id=group.id).exists()
-
         assert not nodestore.get(node_id)
         assert not nodestore.get(node_id2)
         assert nodestore.get(node_id3), "Does not remove from second group"
