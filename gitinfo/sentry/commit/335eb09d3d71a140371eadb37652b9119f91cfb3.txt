commit 335eb09d3d71a140371eadb37652b9119f91cfb3
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Mar 23 16:32:51 2020 +0100

    feat(health): release health on session data (#17822)

diff --git a/src/sentry/api/endpoints/project_release_stats.py b/src/sentry/api/endpoints/project_release_stats.py
index b0b4ad972d..799a234a9d 100644
--- a/src/sentry/api/endpoints/project_release_stats.py
+++ b/src/sentry/api/endpoints/project_release_stats.py
@@ -84,4 +84,5 @@ class ProjectReleaseStatsEndpoint(ProjectEndpoint):
                 "Use a larger interval, or a smaller date range."
             )
 
-        return int(interval.total_seconds())
+        # The minimum interval is one hour on the server
+        return max(int(interval.total_seconds()), 3600)
diff --git a/src/sentry/snuba/sessions.py b/src/sentry/snuba/sessions.py
index 41b0618a32..4a6613b758 100644
--- a/src/sentry/snuba/sessions.py
+++ b/src/sentry/snuba/sessions.py
@@ -259,11 +259,11 @@ def get_crash_free_breakdown(project_id, release, environments=None):
         )["data"][0]
         return {
             "total_users": row["users"],
-            "crash_free_users": row["users_crashed"] / float(row["users"]) * 100
+            "crash_free_users": 100 - row["users_crashed"] / float(row["users"]) * 100
             if row["users"]
             else None,
             "total_sessions": row["sessions"],
-            "crash_free_sessions": row["sessions_crashed"] / float(row["sessions"]) * 100
+            "crash_free_sessions": 100 - row["sessions_crashed"] / float(row["sessions"]) * 100
             if row["sessions"]
             else None,
         }
@@ -306,7 +306,7 @@ def get_project_release_stats(project_id, release, stat, rollup, start, end, env
         filter_keys=filter_keys,
     )["data"]:
         ts = parse_snuba_datetime(rv["bucketed_started"])
-        bucket = int((end - ts).total_seconds() / rollup)
+        bucket = int((ts - start).total_seconds() / rollup)
         stats[bucket][1] = {
             stat: rv[stat],
             stat + "_crashed": rv[stat + "_crashed"],
diff --git a/src/sentry/static/sentry/app/components/charts/utils.tsx b/src/sentry/static/sentry/app/components/charts/utils.tsx
index 775242d850..c63c496fd6 100644
--- a/src/sentry/static/sentry/app/components/charts/utils.tsx
+++ b/src/sentry/static/sentry/app/components/charts/utils.tsx
@@ -9,7 +9,7 @@ const DEFAULT_TRUNCATE_LENGTH = 80;
 const TWENTY_FOUR_HOURS = 1440;
 const ONE_HOUR = 60;
 
-type DateTimeObject = {
+export type DateTimeObject = {
   start: Date | null;
   end: Date | null;
   period?: string;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
index 3d14358bbb..e0fd5c7879 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/index.tsx
@@ -37,6 +37,8 @@ type State = {
 } & AsyncView['state'];
 
 class ReleasesV2Detail extends AsyncView<Props, State> {
+  shouldReload = true;
+
   getTitle() {
     const {params, organization} = this.props;
     return routeTitleGen(
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
index 9d52d7b519..6dd0a26bbd 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/index.tsx
@@ -1,7 +1,8 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import * as ReactRouter from 'react-router';
 
-// import ChartZoom from 'app/components/charts/chartZoom';
+import ChartZoom from 'app/components/charts/chartZoom';
 import ReleaseSeries from 'app/components/charts/releaseSeries';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
@@ -20,6 +21,7 @@ type Props = Omit<ReleaseStatsRequestRenderProps, 'crashFreeTimeBreakdown'> & {
   selection: GlobalSelection;
   yAxis: YAxis;
   onYAxisChange: (yAxis: YAxis) => void;
+  router: ReactRouter.InjectedRouter;
 };
 
 const ReleaseChartContainer = ({
@@ -31,44 +33,45 @@ const ReleaseChartContainer = ({
   chartSummary,
   yAxis,
   onYAxisChange,
+  router,
 }: Props) => {
   const {datetime, projects} = selection;
-  const {utc} = datetime;
+  const {utc, period, start, end} = datetime;
 
   return (
     <Panel>
       <ChartWrapper>
-        {/* <ChartZoom router={router} period={period} utc={utc} start={start} end={end}>
-          {zoomRenderProps => ( */}
-        <ReleaseSeries utc={utc} projects={projects}>
-          {({releaseSeries}) => {
-            if (errored) {
-              return (
-                <ErrorPanel>
-                  <IconWarning color={theme.gray2} size="lg" />
-                </ErrorPanel>
-              );
-            }
+        <ChartZoom router={router} period={period} utc={utc} start={start} end={end}>
+          {zoomRenderProps => (
+            <ReleaseSeries utc={utc} projects={projects}>
+              {({releaseSeries}) => {
+                if (errored) {
+                  return (
+                    <ErrorPanel>
+                      <IconWarning color={theme.gray2} size="lg" />
+                    </ErrorPanel>
+                  );
+                }
 
-            return (
-              <TransitionChart loading={loading} reloading={reloading}>
-                <React.Fragment>
-                  <TransparentLoadingMask visible={reloading} />
-                  <ReleaseChart
-                    utc={utc}
-                    releaseSeries={releaseSeries}
-                    timeseriesData={chartData}
-                    // zoomRenderProps={zoomRenderProps}
-                    reloading={reloading}
-                    yAxis={yAxis}
-                  />
-                </React.Fragment>
-              </TransitionChart>
-            );
-          }}
-        </ReleaseSeries>
-        {/* )}
-        </ChartZoom> */}
+                return (
+                  <TransitionChart loading={loading} reloading={reloading}>
+                    <React.Fragment>
+                      <TransparentLoadingMask visible={reloading} />
+                      <ReleaseChart
+                        utc={utc}
+                        releaseSeries={releaseSeries}
+                        timeseriesData={chartData}
+                        zoomRenderProps={zoomRenderProps}
+                        reloading={reloading}
+                        yAxis={yAxis}
+                      />
+                    </React.Fragment>
+                  </TransitionChart>
+                );
+              }}
+            </ReleaseSeries>
+          )}
+        </ChartZoom>
       </ChartWrapper>
       <ReleaseChartControls
         summary={chartSummary}
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
index c3dc176d97..22723f825e 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
@@ -15,7 +15,7 @@ type Props = {
   utc: boolean;
   releaseSeries: Series[];
   timeseriesData: Series[];
-  // zoomRenderProps: any;
+  zoomRenderProps: any;
   yAxis: YAxis;
 };
 
@@ -50,7 +50,7 @@ class ReleaseChart extends React.Component<Props> {
   };
 
   render() {
-    const {utc, releaseSeries, timeseriesData, yAxis} = this.props;
+    const {utc, releaseSeries, timeseriesData, yAxis, zoomRenderProps} = this.props;
     const Chart =
       yAxis === 'crashFree' || yAxis === 'sessionDuration' ? AreaChart : LineChart;
 
@@ -75,7 +75,7 @@ class ReleaseChart extends React.Component<Props> {
       <Chart
         legend={legend}
         utc={utc}
-        // {zoomRenderProps}
+        {...zoomRenderProps}
         series={[...timeseriesData, ...releaseSeries]}
         isGroupedByDate
         seriesOptions={{
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
index 3ab8010ab0..55242a3b1e 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
@@ -12,14 +12,16 @@ import {GlobalSelection, CrashFreeTimeBreakdown} from 'app/types';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {percent, defined} from 'app/utils';
 import {Series} from 'app/types/echarts';
+import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {getExactDuration} from 'app/utils/formatters';
 
 import {YAxis} from './releaseChartControls';
+import {getInterval} from './utils';
 import {displayCrashFreePercent, getCrashFreePercent} from '../../../utils';
 
 const omitIgnoredProps = (props: Props) =>
   omitBy(props, (_, key) =>
-    ['api', 'version', 'orgId', 'projectSlug', 'children'].includes(key)
+    ['api', 'version', 'orgId', 'projectSlug', 'location', 'children'].includes(key)
   );
 
 type ChartData = {
@@ -165,9 +167,12 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
   }
 
   get baseQueryParams() {
-    const {location} = this.props;
+    const {location, selection} = this.props;
 
-    return pick(location.query, [...Object.values(URL_PARAM)]);
+    return {
+      ...getParams(pick(location.query, [...Object.values(URL_PARAM)])),
+      interval: getInterval(selection.datetime),
+    };
   }
 
   transformCountData(responseData, yAxis: string): Omit<Data, 'crashFreeTimeBreakdown'> {
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx
new file mode 100644
index 0000000000..2a23bc18a6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/utils.tsx
@@ -0,0 +1,14 @@
+import {getDiffInMinutes, DateTimeObject} from 'app/components/charts/utils';
+
+// In minutes
+const FOURTEEN_DAYS = 20160;
+
+export function getInterval(datetimeObj: DateTimeObject) {
+  const diffInMinutes = getDiffInMinutes(datetimeObj);
+
+  if (diffInMinutes > FOURTEEN_DAYS) {
+    return '6h';
+  } else {
+    return '1h';
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
index ef3e036a49..935a6f838b 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
@@ -43,7 +43,7 @@ class ReleaseOverview extends React.Component<Props, State> {
   };
 
   render() {
-    const {organization, params, selection, location, api} = this.props;
+    const {organization, params, selection, location, api, router} = this.props;
     const {yAxis} = this.state;
 
     return (
@@ -70,6 +70,7 @@ class ReleaseOverview extends React.Component<Props, State> {
                         onYAxisChange={this.handleYAxisChange}
                         selection={selection}
                         yAxis={yAxis}
+                        router={router}
                         {...releaseStatsProps}
                       />
                     )}
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx
index 159c6b8b0d..62e895be9b 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/totalCrashFreeUsers.tsx
@@ -10,6 +10,7 @@ import {defined} from 'app/utils';
 import Count from 'app/components/count';
 
 import {SectionHeading, Wrapper} from './styles';
+import {displayCrashFreePercent} from '../../utils';
 
 type Props = {
   crashFreeTimeBreakdown: CrashFreeTimeBreakdown;
@@ -69,7 +70,9 @@ const TotalCrashFreeUsers = ({crashFreeTimeBreakdown, startDate}: Props) => {
             <InnerRow>
               <Text>{periodToLabels[row.period]}</Text>
               <Text right>
-                {defined(row.crashFreeUsers) ? `${row.crashFreeUsers}%` : '-'}
+                {defined(row.crashFreeUsers)
+                  ? displayCrashFreePercent(row.crashFreeUsers)
+                  : '-'}
               </Text>
             </InnerRow>
           </Row>
diff --git a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
index 8782e5f2d4..077075d0a0 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/utils/index.tsx
@@ -13,6 +13,10 @@ export const displayCrashFreePercent = (
   decimalThreshold = 95,
   decimalPlaces = 3
 ): string => {
+  if (percent < 1 && percent > 0) {
+    return `<1%`;
+  }
+
   const rounded = getCrashFreePercent(percent, decimalThreshold, decimalPlaces);
 
   return `${rounded}%`;
