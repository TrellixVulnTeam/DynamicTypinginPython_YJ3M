commit 63f5f9065bd184b5b4c7110b4923b71c39cf1405
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 24 11:33:33 2016 -0700

    [danger] improve security rules (#4418)
    
    * [danger] improve security rules
    
    - less aggro 'key'
    - less aggro filename detection (e.g. email)
    
    * Improve output for security matches
    
    * attempt to ruby
    
    * attempt to ruby
    
    * attempt to ruby
    
    * attempt to ruby
    
    * fix usage of diff_for_file
    
    * use select
    
    * fix more ruby
    
    * empty? -> any?

diff --git a/Dangerfile b/Dangerfile
index 36f0cce286..124f9575c7 100644
--- a/Dangerfile
+++ b/Dangerfile
@@ -36,37 +36,28 @@
 @S_LICENSE_FILES ||= ["LICENSE"]
 
 # set the patterns to watch and warn about if they need security review
-@S_SECURITY_FILE_PATTERN ||= /Dangerfile|auth|login|permission|email|account|admin|twofactor|sudo/
-@S_SECURITY_CONTENT_PATTERN ||= /auth|login|password|permission|token|secret|security|scope|key|sudo/
+@S_SECURITY_FILE_PATTERN ||= /Dangerfile|(auth|login|permission|email|account|admin|twofactor|sudo).*\.py/
+@S_SECURITY_CONTENT_PATTERN ||= /auth|login|password|permission|token|secret|security|scope|api_key|apikey|KEY|sudo/
 
 # determine if any of the files were modified
-def didModify(files_array)
-    did_modify_files = false
-    files_array.each do |file_name|
-        if git.modified_files.include?(file_name)
-            did_modify_files = true
-        end
-    end
-    return did_modify_files
+def checkFiles(files_array)
+    files_array.select { |f| git.modified_files.include?(f) }
 end
 
-def didModifyPattern(pattern)
-    did_modify_files = false
-    if git.modified_files.find { |e| pattern =~ e }
-        did_modify_files = true
-    end
-    return did_modify_files
+def checkFilesPattern(pattern)
+    git.modified_files.select { |f| pattern =~ f }
 end
 
-def hasMatchingContentChanges(pattern)
-    return github.pr_diff =~ pattern
+def checkContents(pattern)
+    git.modified_files.select { |f| git.diff_for_file(f).patch =~ pattern }
 end
 
 # Warn about changes to dependencies or the build process
-warn("Changes to build requirements") if didModify(@S_BUILD_FILES)
+warn("Changes to build requirements") if checkFiles(@S_BUILD_FILES).any?
 
 # Warn about changes to dependencies or the build process
-if didModifyPattern(@S_SECURITY_FILE_PATTERN) || hasMatchingContentChanges(@S_SECURITY_CONTENT_PATTERN)
+securityMatches = checkFilesPattern(@S_SECURITY_FILE_PATTERN) + checkContents(@S_SECURITY_CONTENT_PATTERN)
+if securityMatches.any?
     unless github.pr_labels.include?("Security")
         github.api.update_issue(github.pr_json["head"]["repo"]["full_name"], github.pr_json["number"], {
             :labels => github.pr_labels + ["Security"],
@@ -77,8 +68,13 @@ if didModifyPattern(@S_SECURITY_FILE_PATTERN) || hasMatchingContentChanges(@S_SE
     # make this failing
     # securityTeam = github.api.organization_teams('getsentry')[0]
     # Make a note about contributors not in the organization
-    # unless github.api.team_member?(securityTeam.id, github.pr_author)
+    # unless github.api.team_member?(securityTeam.id, github.pr_author
     warn("Changes require @getsentry/security sign-off")
+    message = "### Security concerns found\n\n"
+    securityMatches.to_set.each do |m|
+        message << "- #{m}\n"
+    end
+    markdown(message)
 end
 
 # Make it more obvious that a PR is a work in progress and shouldn"t be merged yet
@@ -88,9 +84,9 @@ warn("PR is classed as Work in Progress") if github.pr_title.include? "[WIP]"
 warn("Big PR -- consider splitting it up into multiple changesets") if git.lines_of_code > @S_BIG_PR_LINES
 
 # License is immutable
-fail("Do not modify the License") if @S_LICENSE_FILES && didModify(@S_LICENSE_FILES)
+fail("Do not modify the License") if @S_LICENSE_FILES && checkFiles(@S_LICENSE_FILES).any?
 
 # Reasonable commits must update CHANGES
-if @S_CHANGE_LINES && git.lines_of_code > @S_CHANGE_LINES && !git.modified_files.include?("CHANGES") && didModifyPattern(@S_CHANGES_REQUIRED_PATTERNS)
+if @S_CHANGE_LINES && git.lines_of_code > @S_CHANGE_LINES && !git.modified_files.include?("CHANGES") && checkFilesPattern(@S_CHANGES_REQUIRED_PATTERNS).any?
     fail("You need to update CHANGES due to the size of this PR")
 end
