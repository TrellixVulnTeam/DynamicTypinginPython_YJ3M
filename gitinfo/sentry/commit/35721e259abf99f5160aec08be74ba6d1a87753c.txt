commit 35721e259abf99f5160aec08be74ba6d1a87753c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 1 16:40:21 2010 -0700

    Support full indexing on filters

diff --git a/example_project/filters.py b/example_project/filters.py
new file mode 100644
index 0000000000..c3ced95b16
--- /dev/null
+++ b/example_project/filters.py
@@ -0,0 +1,7 @@
+from sentry.filters import SentryFilter, TextWidget
+
+class IPFilter(SentryFilter):
+    label = 'IP Address'
+    column = 'data__META__REMOTE_ADDR'
+    query_param = 'ip_address'
+    widget = TextWidget
\ No newline at end of file
diff --git a/example_project/settings.py b/example_project/settings.py
index a52177f16b..98956e4766 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -2,7 +2,7 @@ import os.path
 import sys
 # Django settings for example_project project.
 
-DEBUG = False
+DEBUG = True
 TEMPLATE_DEBUG = True
 
 ADMINS = (
@@ -99,6 +99,7 @@ INSTALLED_APPS = (
     'sentry',
     'paging',
     'south',
+    'indexer',
     # Uncomment the next line to enable the admin:
     # 'django.contrib.admin',
 )
@@ -106,4 +107,11 @@ INSTALLED_APPS = (
 import logging
 logging.basicConfig(level=logging.DEBUG)
 
-SENTRY_THRASHING_TIMEOUT = 0
\ No newline at end of file
+SENTRY_THRASHING_TIMEOUT = 0
+
+SENTRY_FILTERS = (
+    'sentry.filters.LoggerFilter',
+    'sentry.filters.LevelFilter',
+    'sentry.filters.ServerNameFilter',
+    'example_project.filters.IPFilter',
+)
\ No newline at end of file
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index 2999cac49d..a87cdae746 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -2,6 +2,8 @@
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
+from indexer.models import Index
+
 from sentry.models import GroupedMessage, Message, LOG_LEVELS
 
 class Widget(object):
@@ -26,10 +28,10 @@ class ChoiceWidget(Widget):
         column = self.filter.get_query_param()
 
         output = ['<ul class="%s-list filter-list sidebar-module">' % (self.filter.column,)]
-        output.append('<li%(active)s><a href="?%(query_string)s">Any %(label)s</a></li>' % dict(
+        output.append('<li%(active)s><a href="%(query_string)s">Any %(label)s</a></li>' % dict(
             active=not value and ' class="active"' or '',
             query_string=query_string,
-            label=self.filter.get_label(),
+            label=self.filter.label,
         ))
         for key, val in choices.iteritems():
             key = unicode(key)
@@ -57,20 +59,14 @@ class SentryFilter(object):
     def get_value(self):
         return self.request.GET.get(self.get_query_param()) or ''
     
-    def get_label(self):
-        return self.label
-
-    def get_column(self):
-        return self.column
-    
     def get_query_param(self):
-        return self.get_column()
+        return getattr(self, 'query_param', self.column)
 
     def get_widget(self):
         return self.widget(self, self.request)
     
     def get_query_string(self):
-        column = self.get_column()
+        column = self.column
         query_dict = self.request.GET.copy()
         if 'p' in query_dict:
             del query_dict['p']
@@ -79,10 +75,13 @@ class SentryFilter(object):
         return '?' + query_dict.urlencode()
     
     def get_choices(self):
-        return SortedDict((l, l) for l in GroupedMessage.objects.values_list(self.get_column(), flat=True).distinct())
+        return SortedDict((l, l) for l in GroupedMessage.objects.values_list(self.column, flat=True).distinct())
     
     def get_query_set(self, queryset):
-        return queryset.filter(**{self.get_column(): self.get_value()})
+        kwargs = {self.column: self.get_value()}
+        if self.column.startswith('data__'):
+            return Index.objects.get_for_queryset(queryset, **kwargs)
+        return queryset.filter(**kwargs)
     
     def process(self, data):
         """``self.request`` is not available within this method"""
@@ -101,7 +100,7 @@ class ServerNameFilter(SentryFilter):
     column = 'server_name'
 
     def get_choices(self):
-        return SortedDict((l, l) for l in Message.objects.values_list(self.get_column(), flat=True).distinct())
+        return SortedDict((l, l) for l in Message.objects.values_list(self.column, flat=True).distinct())
 
     def get_query_set(self, queryset):
         return queryset.filter(message_set__server_name=self.get_value())
diff --git a/sentry/helpers.py b/sentry/helpers.py
index 16a004bc7b..de2378a85a 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -6,6 +6,8 @@ from django.utils.hashcompat import md5_constructor
 from django.utils.html import escape
 from django.views.debug import ExceptionReporter, linebreak_iter
 
+from indexer.models import Index
+
 import logging
 
 class ImprovedExceptionReporter(ExceptionReporter):
@@ -112,6 +114,8 @@ def get_filters():
     
     if _FILTER_CACHE is None:
         from sentry import settings
+        from sentry.models import Message
+        
         filters = []
         for filter_ in settings.FILTERS:
             module_name, class_name = filter_.rsplit('.', 1)
@@ -121,6 +125,8 @@ def get_filters():
             except Exception, exc:
                 logging.exception('Unable to import %s' % (filter_,))
                 continue
+            if filter_.column.startswith('data__'):
+                Index.objects.register_model(Message, filter_.column, index_to='group')
             filters.append(filter_)
         _FILTER_CACHE = filters
     for f in _FILTER_CACHE:
diff --git a/sentry/manager.py b/sentry/manager.py
index 9013c5c0bf..d27c818b7a 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -11,6 +11,7 @@ import sys
 
 from django.core.cache import cache
 from django.db import models
+from django.db.models import signals
 from django.template import TemplateSyntaxError
 from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
@@ -78,6 +79,7 @@ class DBLogManager(models.Manager):
                     status=0,
                     last_seen=datetime.datetime.now(),
                 )
+                # signals.post_save.send(sender=GroupedMessage, instance=group, created=False)
             instance.group = group
             instance.save()
         except Exception, exc:
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 62651e6674..32985b3a37 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -34,8 +34,8 @@
 					{% endif %}
 					
 					{% for filter in filters %}
-						<h2>{{ filter.get_label }}</h2>
-						<form method="get" action="{{ filter.get_query_string }}">
+						<h2>{{ filter.label }}</h2>
+						<form method="get" action="{{ filter.get_query_string|safe }}">
 							{{ filter.render }}
 						</form>
 					{% endfor %}
diff --git a/sentry/views.py b/sentry/views.py
index 75e82b0de9..2ce30f2c97 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -29,8 +29,6 @@ def index(request):
     except (TypeError, ValueError):
         page = 1
 
-    realtime = page == 1
-
     # this only works in postgres
     message_list = GroupedMessage.objects.filter(
         status=0,
@@ -50,20 +48,21 @@ def index(request):
     today = datetime.datetime.now()
 
     if not any_filter and page == 1:
+        realtime = True
 
-        chart_qs = Message.objects\
-                          .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                          .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                          .annotate(num=Count('id')).values_list('hour', 'num')
+        if SimpleLineChart:
+            chart_qs = Message.objects\
+                              .filter(datetime__gte=today - datetime.timedelta(hours=24))\
+                              .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
+                              .annotate(num=Count('id')).values_list('hour', 'num')
 
 
-        rows = dict(chart_qs)
-        if rows:
-            max_y = max(rows.values())
-        else:
-            max_y = 1
-        
-        if SimpleLineChart:
+            rows = dict(chart_qs)
+            if rows:
+                max_y = max(rows.values())
+            else:
+                max_y = 1
+
             chart = SimpleLineChart(384, 80, y_range=[0, max_y])
             chart.add_data([max_y]*30)
             chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
@@ -74,7 +73,8 @@ def index(request):
             chart.set_colours(['eeeeee', '999999', 'eeeeee'])
             chart.set_line_style(1, 1)
             chart_url = chart.get_url()
-
+    else:
+        realtime = False
     return render_to_response('sentry/index.html', locals())
 
 def ajax_handler(request):
