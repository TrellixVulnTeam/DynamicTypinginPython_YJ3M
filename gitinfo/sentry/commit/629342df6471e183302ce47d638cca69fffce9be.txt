commit 629342df6471e183302ce47d638cca69fffce9be
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 2 10:27:47 2015 -0800

    Remove unused group_is_public

diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index e93f97b246..5c704f21c2 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -17,36 +17,12 @@ from django.template import loader, RequestContext, Context
 
 from sentry.api.serializers.base import serialize
 from sentry.auth import access
-from sentry.auth.utils import is_active_superuser
 from sentry.constants import EVENTS_PER_PAGE
-from sentry.models import Project, Team
+from sentry.models import Team
 
 logger = logging.getLogger('sentry')
 
 
-def group_is_public(group, user):
-    """
-    Return ``True`` if the this group if the user viewing it should see a restricted view.
-
-    This check should be used in combination with project membership checks, as we're only
-    verifying if the user should have a restricted view of something they already have access
-    to.
-    """
-    # if the group isn't public, this check doesn't matter
-    if not group.is_public:
-        return False
-    # anonymous users always are viewing as if it were public
-    if not user.is_authenticated():
-        return True
-    # superusers can always view events
-    if is_active_superuser(user):
-        return False
-    # project owners can view events
-    if group.project in Project.objects.get_for_user(team=group.project.team, user=user):
-        return False
-    return True
-
-
 _LOGIN_URL = None
 
 
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
deleted file mode 100644
index 19fe19dac1..0000000000
--- a/tests/sentry/web/helpers/tests.py
+++ /dev/null
@@ -1,53 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-import mock
-
-from django.contrib.auth.models import AnonymousUser
-
-from sentry.web.helpers import group_is_public
-from sentry.testutils import TestCase
-
-
-class GroupIsPublicTest(TestCase):
-    @mock.patch('sentry.models.Project.objects.get_for_user')
-    def test_non_public_group_returns_false(self, get_project_list):
-        get_project_list.return_value = []
-        self.group.is_public = False
-        self.user.is_superuser = False
-        result = group_is_public(self.group, self.user)
-        assert result is False
-
-    @mock.patch('sentry.models.Project.objects.get_for_user')
-    def test_public_group_returns_true_with_missing_project(self, get_project_list):
-        get_project_list.return_value = []
-        self.group.is_public = True
-        self.user.is_superuser = False
-        result = group_is_public(self.group, self.user)
-        assert result is True
-        get_project_list.assert_called_once_with(team=self.group.project.team, user=self.user)
-
-    @mock.patch('sentry.models.Project.objects.get_for_user')
-    def test_public_group_returns_false_with_project_membership(self, get_project_list):
-        get_project_list.return_value = [self.group.project]
-        self.group.is_public = True
-        self.user.is_superuser = False
-        result = group_is_public(self.group, self.user)
-        assert result is False
-        get_project_list.assert_called_once_with(team=self.group.project.team, user=self.user)
-
-    @mock.patch('sentry.models.Project.objects.get_for_user')
-    def test_superuser_is_false_with_missing_project(self, get_project_list):
-        get_project_list.return_value = []
-        self.group.is_public = True
-        self.user.is_superuser = True
-        result = group_is_public(self.group, self.user)
-        assert result is False
-
-    @mock.patch('sentry.models.Project.objects.get_for_user')
-    def test_anonymous_user(self, get_project_list):
-        get_project_list.return_value = []
-        self.group.is_public = True
-        result = group_is_public(self.group, AnonymousUser())
-        assert result is True
