commit f66fabd780e155555fb917b5f2f394fbc97883e4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 25 17:05:58 2020 -0800

    ref(ts): Convert `<AccountSecurityWrapper>` (#17272)
    
    * Update/fix types for listing authenticators and user enrolled authenticators
    * change existing Authenticator type to `UserEnrolledAuthenticator`, and make `Authenticator` the response from `/authenticators` api call

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 7352072152..90de7def71 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -251,6 +251,16 @@ export type AvatarUser = {
   lastSeen?: string;
 };
 
+/**
+ * This is an authenticator that a user is enrolled in
+ */
+type UserEnrolledAuthenticator = {
+  dateUsed: EnrolledAuthenticator['lastUsedAt'];
+  dateCreated: EnrolledAuthenticator['createdAt'];
+  type: Authenticator['id'];
+  id: EnrolledAuthenticator['authId'];
+};
+
 export type User = AvatarUser & {
   lastLogin: string;
   isSuperuser: boolean;
@@ -266,7 +276,7 @@ export type User = AvatarUser & {
   isActive: boolean;
   has2fa: boolean;
   canReset2fa: boolean;
-  authenticators: Authenticator[];
+  authenticators: UserEnrolledAuthenticator[];
   dateJoined: string;
   options: {
     timezone: string;
@@ -346,12 +356,59 @@ export type GlobalSelection = {
   };
 };
 
-type Authenticator = {
-  dateUsed: string | null;
-  dateCreated: string;
-  type: string; // i.e. 'u2f'
-  id: string;
+export type Authenticator = {
+  /**
+   * String used to display on button for user as CTA to enroll
+   */
+  enrollButton: string;
+
+  /**
+   * Display name for the authenticator
+   */
   name: string;
+
+  /**
+   * Allows multiple enrollments to authenticator
+   */
+  allowMultiEnrollment: boolean;
+
+  /**
+   * String to display on button for user to remove authenticator
+   */
+  removeButton: string | null;
+
+  canValidateOtp: boolean;
+
+  /**
+   * Is user enrolled to this authenticator
+   */
+  isEnrolled: boolean;
+
+  /**
+   * String to display on button for additional information about authenticator
+   */
+  configureButton: string;
+
+  /**
+   * Type of authenticator
+   */
+  id: string;
+
+  /**
+   * Is this used as a backup interface?
+   */
+  isBackupInterface: boolean;
+
+  /**
+   * Description of the authenticator
+   */
+  description: string;
+} & Partial<EnrolledAuthenticator>;
+
+export type EnrolledAuthenticator = {
+  lastUsedAt: string | null;
+  createdAt: string;
+  authId: string;
 };
 
 export type Config = {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
deleted file mode 100644
index 55d2f7b0fd..0000000000
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
+++ /dev/null
@@ -1,70 +0,0 @@
-import {withRouter} from 'react-router';
-import React from 'react';
-import AsyncComponent from 'app/components/asyncComponent';
-
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-
-const ENDPOINT = '/users/me/authenticators/';
-
-class AccountSecurityWrapper extends AsyncComponent {
-  getEndpoints() {
-    return [
-      ['authenticators', ENDPOINT],
-      ['organizations', '/organizations/'],
-    ];
-  }
-
-  handleDisable = auth => {
-    if (!auth || !auth.authId) {
-      return;
-    }
-
-    this.setState({loading: true});
-
-    this.api
-      .requestPromise(`${ENDPOINT}${auth.authId}/`, {method: 'DELETE'})
-      .then(this.remountComponent, () => {
-        this.setState({loading: false});
-        addErrorMessage(t('Error disabling', auth.name));
-      });
-  };
-
-  handleRegenerateBackupCodes = () => {
-    this.setState({loading: true});
-
-    this.api
-      .requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {method: 'PUT'})
-      .then(this.remountComponent, () =>
-        this.addError(t('Error regenerating backup codes'))
-      );
-  };
-
-  renderBody() {
-    const {authenticators, organizations} = this.state;
-
-    const countEnrolled = authenticators.filter(
-      auth => auth.isEnrolled && !auth.isBackupInterface
-    ).length;
-    const orgsRequire2fa = organizations.filter(org => org.require2FA);
-    const deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;
-
-    // This happens when you switch between children views and the next child
-    // view is lazy loaded, it can potentially be `null` while the code split
-    // package is being fetched
-    if (this.props.children === null) {
-      return null;
-    }
-
-    return React.cloneElement(this.props.children, {
-      onDisable: this.handleDisable,
-      onRegenerateBackupCodes: this.handleRegenerateBackupCodes,
-      authenticators,
-      deleteDisabled,
-      orgsRequire2fa,
-      countEnrolled,
-    });
-  }
-}
-
-export default withRouter(AccountSecurityWrapper);
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx
new file mode 100644
index 0000000000..147584ce3a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx
@@ -0,0 +1,90 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {Authenticator, OrganizationSummary} from 'app/types';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {defined} from 'app/utils';
+import {t} from 'app/locale';
+import AsyncComponent from 'app/components/asyncComponent';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+type Props = {
+  children: React.ReactElement;
+} & RouteComponentProps<{authId: string}, {}> &
+  AsyncComponent['props'];
+
+type State = {
+  authenticators?: Authenticator[];
+  organizations?: OrganizationSummary[];
+} & AsyncComponent['state'];
+
+class AccountSecurityWrapper extends AsyncComponent<Props, State> {
+  getEndpoints(): [string, string][] {
+    return [
+      ['authenticators', ENDPOINT],
+      ['organizations', '/organizations/'],
+    ];
+  }
+
+  handleDisable = async (auth: Authenticator) => {
+    if (!auth || !auth.authId) {
+      return;
+    }
+
+    this.setState({loading: true});
+
+    try {
+      await this.api.requestPromise(`${ENDPOINT}${auth.authId}/`, {method: 'DELETE'});
+      this.remountComponent();
+    } catch (_err) {
+      addErrorMessage(t('Error disabling %s', auth.name));
+    }
+
+    this.setState({loading: false});
+  };
+
+  handleRegenerateBackupCodes = async () => {
+    this.setState({loading: true});
+
+    try {
+      await this.api.requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {
+        method: 'PUT',
+      });
+      this.remountComponent();
+    } catch (_err) {
+      addErrorMessage(t('Error regenerating backup codes'));
+    }
+
+    this.setState({loading: false});
+  };
+
+  renderBody() {
+    const {children} = this.props;
+    const {authenticators, organizations} = this.state;
+
+    const enrolled =
+      authenticators?.filter(auth => auth.isEnrolled && !auth.isBackupInterface) || [];
+    const countEnrolled = enrolled.length;
+    const orgsRequire2fa = organizations?.filter(org => org.require2FA) || [];
+    const deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;
+
+    // This happens when you switch between children views and the next child
+    // view is lazy loaded, it can potentially be `null` while the code split
+    // package is being fetched
+    if (!defined(children)) {
+      return null;
+    }
+
+    return React.cloneElement(this.props.children, {
+      onDisable: this.handleDisable,
+      onRegenerateBackupCodes: this.handleRegenerateBackupCodes,
+      authenticators,
+      deleteDisabled,
+      orgsRequire2fa,
+      countEnrolled,
+    });
+  }
+}
+
+export default AccountSecurityWrapper;
diff --git a/tests/js/spec/views/accountSecurityDetails.spec.jsx b/tests/js/spec/views/accountSecurityDetails.spec.jsx
index a837526ea1..1c07df6e41 100644
--- a/tests/js/spec/views/accountSecurityDetails.spec.jsx
+++ b/tests/js/spec/views/accountSecurityDetails.spec.jsx
@@ -41,7 +41,7 @@ describe('AccountSecurityDetails', function() {
         body: TestStubs.Authenticators().Totp(),
       });
       wrapper = mountWithTheme(
-        <AccountSecurityWrapper>
+        <AccountSecurityWrapper router={router} params={params}>
           <AccountSecurityDetails router={router} params={params} />
         </AccountSecurityWrapper>,
         routerContext
@@ -82,7 +82,7 @@ describe('AccountSecurityDetails', function() {
       });
 
       wrapper = mountWithTheme(
-        <AccountSecurityWrapper>
+        <AccountSecurityWrapper router={router} params={params}>
           <AccountSecurityDetails router={router} params={params} />
         </AccountSecurityWrapper>,
         routerContext
@@ -112,7 +112,7 @@ describe('AccountSecurityDetails', function() {
       });
 
       wrapper = mountWithTheme(
-        <AccountSecurityWrapper>
+        <AccountSecurityWrapper router={router} params={params}>
           <AccountSecurityDetails router={router} params={params} />
         </AccountSecurityWrapper>,
         routerContext
@@ -148,7 +148,7 @@ describe('AccountSecurityDetails', function() {
       });
 
       wrapper = mountWithTheme(
-        <AccountSecurityWrapper>
+        <AccountSecurityWrapper router={router} params={params}>
           <AccountSecurityDetails router={router} params={params} />
         </AccountSecurityWrapper>,
         routerContext
