commit 23913497e762630ce58fa6cdad6ad4c794d140da
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Aug 13 22:00:42 2015 -0700

    Correct stack order + labeling
    
    - Pull in stack order through exception and stacktrace interfaces
    - Add header subtext indicating stack order
    
    Fixes GH-1643, GH-1765

diff --git a/src/sentry/static/sentry/app/components/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/interfaces/exception.jsx
index c639127c01..a7acb8d3de 100644
--- a/src/sentry/static/sentry/app/components/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/exception.jsx
@@ -1,4 +1,5 @@
 import React from "react";
+import ConfigStore from "../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../proptypes";
 import RawStacktraceContent from "./rawStacktraceContent";
@@ -8,36 +9,44 @@ import {defined} from "../../utils";
 var ExceptionContent = React.createClass({
   propTypes: {
     view: React.PropTypes.string.isRequired,
-    platform: React.PropTypes.string
+    platform: React.PropTypes.string,
+    newestFirst: React.PropTypes.bool
   },
 
   render() {
+    var children = this.props.values.map((exc, excIdx) => {
+      return (
+        <div key={excIdx}>
+          <h4>
+            <span>{exc.type}</span>
+          </h4>
+          {exc.value &&
+            <pre className="exc-message">{exc.value}</pre>
+          }
+          {defined(exc.stacktrace) && (stackView === "raw" ?
+            <RawStacktraceContent
+                data={exc.stacktrace}
+                platform={this.props.platform}
+                newestFirst={this.props.newestFirst} />
+          :
+            <StacktraceContent
+                data={exc.stacktrace}
+                includeSystemFrames={stackView === "full"}
+                platform={this.props.platform}
+                newestFirst={this.props.newestFirst} />
+          )}
+        </div>
+      );
+    });
+    if (this.props.newestFirst) {
+      children.reverse();
+    }
+
     var stackView = this.props.view;
     // TODO(dcramer): implement exceptions omitted
     return (
       <div>
-        {this.props.values.map((exc, excIdx) => {
-          return (
-            <div key={excIdx}>
-              <h4>
-                <span>{exc.type}</span>
-              </h4>
-              {exc.value &&
-                <pre className="exc-message">{exc.value}</pre>
-              }
-              {defined(exc.stacktrace) && (stackView === "raw" ?
-                <RawStacktraceContent
-                    data={exc.stacktrace}
-                    platform={this.props.platform} />
-              :
-                <StacktraceContent
-                    data={exc.stacktrace}
-                    includeSystemFrames={stackView === "full"}
-                    platform={this.props.platform} />
-              )}
-            </div>
-          );
-        })}
+        {children}
       </div>
     );
   }
@@ -48,12 +57,27 @@ var ExceptionInterface = React.createClass({
     group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     type: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired
+    data: React.PropTypes.object.isRequired,
   },
 
   getInitialState() {
+    var user = ConfigStore.get("user");
+    var platform = this.props.event.platform;
+    var newestFirst;
+    switch (user.options.stacktraceOrder) {
+      case "newestFirst":
+        newestFirst = true;
+        break;
+      case "newestLast":
+        newestFirst = false;
+        break;
+      case "default":
+        newestFirst = (platform === "python");
+    }
+
     return {
-      stackView: (this.props.data.hasSystemFrames ? "app" : "full")
+      stackView: (this.props.data.hasSystemFrames ? "app" : "full"),
+      reverse: reverseOrder
     };
   },
 
@@ -68,10 +92,16 @@ var ExceptionInterface = React.createClass({
     var evt = this.props.event;
     var data = this.props.data;
     var stackView = this.state.stackView;
+    var newestFirst = this.state.newestFirst;
 
     var title = (
       <div>
-        Exception
+        {'Exception '}
+        {newestFirst ?
+          <small>(most recent call first)</small>
+        :
+          <small>(most recent call last)</small>
+        }
         <div className="btn-group">
           {data.hasSystemFrames &&
             <a className={(stackView === "app" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "app")}>App Only</a>
@@ -91,7 +121,8 @@ var ExceptionInterface = React.createClass({
         <ExceptionContent
             view={stackView}
             values={data.values}
-            platform={evt.platform} />
+            platform={evt.platform}
+            newestFirst={newestFirst} />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
index 731fbf3eb5..bec4222701 100644
--- a/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
@@ -1,4 +1,5 @@
 import React from "react";
+import ConfigStore from "../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../proptypes";
 import RawStacktraceContent from "./rawStacktraceContent";
@@ -13,8 +14,23 @@ var StacktraceInterface = React.createClass({
   },
 
   getInitialState() {
+    var user = ConfigStore.get("user");
+    var platform = this.props.event.platform;
+    var newestFirst;
+    switch (user.options.stacktraceOrder) {
+      case "newestFirst":
+        newestFirst = true;
+        break;
+      case "newestLast":
+        newestFirst = false;
+        break;
+      case "default":
+        newestFirst = (platform === "python");
+    }
+
     return {
-      stackView: (this.props.data.hasSystemFrames ? "app" : "full")
+      stackView: (this.props.data.hasSystemFrames ? "app" : "full"),
+      newestFirst: newestFirst
     };
   },
 
@@ -29,10 +45,16 @@ var StacktraceInterface = React.createClass({
     var evt = this.props.event;
     var data = this.props.data;
     var stackView = this.state.stackView;
+    var newestFirst = this.state.newestFirst;
 
     var title = (
       <div>
-        Stacktrace
+        {'Stacktrace '}
+        {newestFirst ?
+          <small>(most recent call last)</small>
+        :
+          <small>(most recent call first)</small>
+        }
         <div className="btn-group">
           {data.hasSystemFrames &&
             <a className={(stackView === "app" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "app")}>App Only</a>
@@ -52,12 +74,14 @@ var StacktraceInterface = React.createClass({
         {stackView === "raw" ?
           <RawStacktraceContent
               data={data}
-              platform={evt.platform} />
+              platform={evt.platform}
+              newestFirst={newestFirst} />
         :
           <StacktraceContent
               data={data}
               includeSystemFrames={stackView === "full"}
-              platform={evt.platform} />
+              platform={evt.platform}
+              newestFirst={newestFirst} />
         }
       </GroupEventDataSection>
     );
diff --git a/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
index b00cb1e7db..57ebe2aeae 100644
--- a/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
@@ -1,13 +1,13 @@
 import React from "react";
 //import GroupEventDataSection from "../eventDataSection";
-import ConfigStore from "../../stores/configStore";
 import Frame from "./frame";
 import {defined} from "../../utils";
 
 var StacktraceContent = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
-    includeSystemFrames: React.PropTypes.bool
+    includeSystemFrames: React.PropTypes.bool,
+    newestFirst: React.PropTypes.bool
   },
 
   getDefaultProps() {
@@ -17,7 +17,6 @@ var StacktraceContent = React.createClass({
   },
 
   render() {
-    var user = ConfigStore.get("user");
     var data = this.props.data;
     var firstFrameOmitted, lastFrameOmitted;
     var includeSystemFrames = this.props.includeSystemFrames;
@@ -44,8 +43,7 @@ var StacktraceContent = React.createClass({
       }
     });
 
-    // TODO(dcramer): Python needs to default to newest first
-    if (user.options.stacktraceOrder == "newestFirst") {
+    if (this.props.newestFirst) {
       frames.reverse();
     }
 
