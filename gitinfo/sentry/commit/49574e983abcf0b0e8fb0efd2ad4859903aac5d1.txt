commit 49574e983abcf0b0e8fb0efd2ad4859903aac5d1
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Mar 25 17:23:36 2020 -0700

    tests: log the original error for selenium when starting Chrome (#17909)

diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index 4b4976326e..0905e96240 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -315,7 +315,7 @@ def percy(request):
     return percy
 
 
-@TimedRetryPolicy.wrap(timeout=15, exceptions=(WebDriverException,))
+@TimedRetryPolicy.wrap(timeout=15, exceptions=(WebDriverException,), log_original_error=True)
 def start_chrome(**chrome_args):
     return webdriver.Chrome(**chrome_args)
 
diff --git a/src/sentry/utils/retries.py b/src/sentry/utils/retries.py
index 072b6d7acf..50192864ca 100644
--- a/src/sentry/utils/retries.py
+++ b/src/sentry/utils/retries.py
@@ -55,7 +55,7 @@ class TimedRetryPolicy(RetryPolicy):
     """
 
     def __init__(
-        self, timeout, delay=None, exceptions=(Exception,), metric_instance=None, metric_tags=None
+        self, timeout, delay=None, exceptions=(Exception,), metric_instance=None, metric_tags=None, log_original_error=False
     ):
         if delay is None:
             # 100ms +/- 50ms of randomized jitter
@@ -68,6 +68,7 @@ class TimedRetryPolicy(RetryPolicy):
         self.clock = time
         self.metric_instance = metric_instance
         self.metric_tags = metric_tags or {}
+        self.log_original_error = log_original_error
 
     def __call__(self, function):
         start = self.clock.time()
@@ -76,6 +77,8 @@ class TimedRetryPolicy(RetryPolicy):
                 try:
                     return function()
                 except self.exceptions as error:
+                    if self.log_original_error:
+                        logger.info(error)
                     delay = self.delay(i)
                     now = self.clock.time()
                     if (now + delay) > (start + self.timeout):
