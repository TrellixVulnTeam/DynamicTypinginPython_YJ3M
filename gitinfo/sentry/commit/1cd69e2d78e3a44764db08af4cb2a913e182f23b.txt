commit 1cd69e2d78e3a44764db08af4cb2a913e182f23b
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Aug 14 14:56:31 2018 -0700

    feat(require-2fa): Require 2FA setup before joining organization (#9261)

diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
index 0c699d3b66..8f7235bd5d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
@@ -1,6 +1,7 @@
 import {Link} from 'react-router';
 import React from 'react';
 import PropTypes from 'prop-types';
+import Cookies from 'js-cookie';
 import styled from 'react-emotion';
 
 import {t, tct} from 'app/locale';
@@ -53,6 +54,20 @@ class BackButton extends React.Component {
         ? t('Project')
         : t('Organization');
 
+    // if the user needs to setup 2fa as part of the org invite flow,
+    // send them back to accept the invite
+    let pendingInvite = Cookies.get('pending-invite');
+    let shouldGoBackToInvite = pendingInvite && !lastAppContext;
+
+    if (shouldGoBackToInvite) {
+      return (
+        <BackButtonWrapper href={pendingInvite}>
+          <Icon src="icon-chevron-left" size="10px" />
+          {t('Back to Invite')}
+        </BackButtonWrapper>
+      );
+    }
+
     return (
       <BackButtonWrapper
         to={
diff --git a/src/sentry/templates/sentry/accept-organization-invite.html b/src/sentry/templates/sentry/accept-organization-invite.html
index 1000de83dd..f1aa5c707e 100644
--- a/src/sentry/templates/sentry/accept-organization-invite.html
+++ b/src/sentry/templates/sentry/accept-organization-invite.html
@@ -16,7 +16,7 @@
         </div>
 
         <p style="font-size: 1.3em;">
-          {% blocktrans with org_name=organization.name %}<strong>{{ org_name }}</strong> is using Sentry to aggregate errors.{% endblocktrans %}
+          {% blocktrans %}<strong>{{ org_name }}</strong> is using Sentry to aggregate errors.{% endblocktrans %}
         </p>
 
         {% if existing_member %}
@@ -49,12 +49,22 @@
             </div>
             <a href="{{ register_url }}" class="btn btn-primary">{% trans "Create a new account" %}</a>
           </fieldset>
+
+        {% elif needs_2fa %}
+          <p>{% blocktrans %}To continue, <strong>{{ org_name }}</strong> requires all members to setup two-factor authentication.{% endblocktrans %}</p>
+
+          <p class="form-actions">
+            <a href="{% url 'sentry-account-settings-security' %}" class="btn btn-primary">
+              {% trans "Setup Two-Factor Authentication" %}
+            </a>
+          </p>
+
         {% else %}
           <form method="POST">
             {% csrf_token %}
             <p>
               <button type="submit" class="btn btn-primary">
-                {% blocktrans with org_name=organization.name %}Join the {{ org_name }} organization{% endblocktrans %}
+                {% blocktrans %}Join the {{ org_name }} organization{% endblocktrans %}
               </button>
             </p>
           </form>
diff --git a/src/sentry/web/frontend/accept_organization_invite.py b/src/sentry/web/frontend/accept_organization_invite.py
index 55db7c4a8f..f715280a5f 100644
--- a/src/sentry/web/frontend/accept_organization_invite.py
+++ b/src/sentry/web/frontend/accept_organization_invite.py
@@ -6,12 +6,14 @@ from django.core.urlresolvers import reverse
 from django.utils.crypto import constant_time_compare
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import AuditLogEntryEvent, OrganizationMember, Project
+from sentry.models import AuditLogEntryEvent, Authenticator, OrganizationMember, Project
 from sentry.signals import member_joined
 from sentry.utils import auth
 from sentry.web.frontend.base import BaseView
 
 ERR_INVITE_INVALID = _('The invite link you followed is not valid.')
+PENDING_INVITE = 'pending-invite'
+MAX_AGE = 60 * 60 * 24 * 7  # 7 days
 
 
 class AcceptInviteForm(forms.Form):
@@ -30,7 +32,7 @@ class AcceptOrganizationInviteView(BaseView):
         assert request.method in ('POST', 'GET')
 
         try:
-            om = OrganizationMember.objects.get(pk=member_id)
+            om = OrganizationMember.objects.select_related('organization').get(pk=member_id)
         except OrganizationMember.DoesNotExist:
             messages.add_message(
                 request,
@@ -65,11 +67,16 @@ class AcceptOrganizationInviteView(BaseView):
         project_list = list(qs[:25])
         project_count = qs.count()
 
+        org_requires_2fa = organization.flags.require_2fa.is_set
+        user_has_2fa = Authenticator.objects.user_has_2fa(request.user.id)
+        needs_2fa = org_requires_2fa and not user_has_2fa
+
         context = {
-            'organization': om.organization,
+            'org_name': organization.name,
             'project_list': project_list,
             'project_count': project_count,
             'needs_authentication': not request.user.is_authenticated(),
+            'needs_2fa': needs_2fa,
             'logout_url': '{}?next={}'.format(
                 reverse('sentry-logout'),
                 request.path,
@@ -92,6 +99,12 @@ class AcceptOrganizationInviteView(BaseView):
 
             return self.respond('sentry/accept-organization-invite.html', context)
 
+        if needs_2fa:
+            # redirect to setup 2fa
+            response = self.respond('sentry/accept-organization-invite.html', context)
+            response.set_cookie(PENDING_INVITE, request.path, max_age=MAX_AGE)
+            return response
+
         # if they're already a member of the organization its likely they're
         # using a shared account and either previewing this invite or
         # are incorrectly expecting this to create a new account for them
@@ -135,8 +148,11 @@ class AcceptOrganizationInviteView(BaseView):
                 member_joined.send(member=om, sender=self)
 
             request.session.pop('can_register', None)
+            response = self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
 
-            return self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
+            if PENDING_INVITE in request.COOKIES:
+                response.delete_cookie(PENDING_INVITE)
+            return response
 
         context['form'] = form
 
diff --git a/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx b/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
index 771b0a7bcc..cf20ca51ec 100644
--- a/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
+++ b/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {mount} from 'enzyme';
+import Cookies from 'js-cookie';
 
 import {BackButton} from 'app/views/settings/components/settingsBackButton';
 
@@ -71,4 +72,73 @@ describe('SettingsBackButton', function() {
       expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/org-slug/');
     });
   });
+
+  describe('With Pending Organization Invite', function() {
+    beforeAll(function() {
+      Cookies.set('pending-invite', '/test/');
+    });
+
+    it('renders "Back to Invite" when no organization and `pending-invite` cookie', function() {
+      let wrapper = mount(<BackButton params={{}} organization={{}} />);
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Invite');
+      expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
+    });
+
+    it('renders "Back to Invite" when no project slug and `pending-invite` cookie', function() {
+      let wrapper = mount(<BackButton params={{}} organization={org} />);
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Invite');
+      expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
+    });
+
+    it('renders "Back to Invite" when projectId is in route and `pending-invite` cookie', function() {
+      let wrapper = mount(
+        <BackButton params={{projectId: 'project-slug'}} organization={org} />
+      );
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Invite');
+      expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
+    });
+
+    it('renders "Back to Invite" when "last route" provided and `pending-invite` cookie', function() {
+      let wrapper = mount(
+        <BackButton
+          lastRoute="/org-slug/project-slug/foo/bar/"
+          params={{}}
+          organization={org}
+          project={project}
+        />
+      );
+      expect(wrapper.find('BackButtonWrapper').prop('href')).toBe('/test/');
+    });
+
+    it('renders "Back to Project" when `lastAppContext` is "project" and `pending-invite` cookie', function() {
+      let wrapper = mount(
+        <BackButton
+          params={{projectId: 'project-slug'}}
+          organization={org}
+          lastRoute="/foo/"
+          project={project}
+        />,
+        {
+          context: {
+            lastAppContext: 'project',
+          },
+        }
+      );
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Project');
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/foo/');
+    });
+
+    it('renders "Back to Organization" when `lastAppContext` is "organization" and `pending-invite` cookie', function() {
+      let wrapper = mount(
+        <BackButton params={{projectId: 'project-slug'}} organization={org} />,
+        {
+          context: {
+            lastAppContext: 'organization',
+          },
+        }
+      );
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Organization');
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/org-slug/');
+    });
+  });
 });
diff --git a/tests/sentry/web/frontend/test_accept_organization_invite.py b/tests/sentry/web/frontend/test_accept_organization_invite.py
index c97edbfb95..d090257f9f 100644
--- a/tests/sentry/web/frontend/test_accept_organization_invite.py
+++ b/tests/sentry/web/frontend/test_accept_organization_invite.py
@@ -1,8 +1,12 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from django.db.models import F
 
-from sentry.models import AuditLogEntry, AuditLogEntryEvent, OrganizationMember
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, Authenticator,
+    Organization, OrganizationMember, TotpInterface
+)
 from sentry.testutils import TestCase
 
 
@@ -14,6 +18,22 @@ class AcceptInviteTest(TestCase):
         )
         self.user = self.create_user('bar@example.com')
 
+    def _require_2fa_for_organization(self):
+        self.organization.update(flags=F('flags').bitor(Organization.flags.require_2fa))
+        self.assertTrue(self.organization.flags.require_2fa.is_set)
+
+    def _enroll_user_in_2fa(self):
+        interface = TotpInterface()
+        interface.enroll(self.user)
+        self.assertTrue(Authenticator.objects.user_has_2fa(self.user))
+
+    def _assert_2fa_cookie_set(self, response, om):
+        invite_link = om.get_invite_link()
+        self.assertIn(response.client.cookies['pending-invite'].value, invite_link)
+
+    def _assert_2fa_cookie_not_set(self, response):
+        self.assertNotIn('pending-invite', response.client.cookies)
+
     def test_invalid_member_id(self):
         resp = self.client.get(reverse('sentry-accept-invite', args=[1, 2]))
         assert resp.status_code == 302
@@ -51,6 +71,42 @@ class AcceptInviteTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
         assert not resp.context['needs_authentication']
 
+    def test_renders_user_needs_2fa_template(self):
+        self._require_2fa_for_organization()
+        self.assertFalse(Authenticator.objects.user_has_2fa(self.user))
+
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            token='abc',
+            organization=self.organization,
+        )
+        resp = self.client.get(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
+        assert resp.context['needs_2fa']
+
+        self._assert_2fa_cookie_set(resp, om)
+
+    def test_renders_user_has_2fa_template(self):
+        self._require_2fa_for_organization()
+        self._enroll_user_in_2fa()
+
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            token='abc',
+            organization=self.organization,
+        )
+        resp = self.client.get(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
+        assert not resp.context['needs_2fa']
+
+        self._assert_2fa_cookie_not_set(resp)
+
     def test_can_accept_while_authenticated(self):
         self.login_as(self.user)
 
@@ -87,3 +143,77 @@ class AcceptInviteTest(TestCase):
         resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
+
+    def test_can_accept_when_user_has_2fa(self):
+        self._require_2fa_for_organization()
+        self._enroll_user_in_2fa()
+
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            role='member',
+            token='abc',
+            organization=self.organization,
+        )
+
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 302
+
+        self._assert_2fa_cookie_not_set(resp)
+
+        om = OrganizationMember.objects.get(id=om.id)
+        assert om.email is None
+        assert om.user == self.user
+
+        ale = AuditLogEntry.objects.get(
+            organization=self.organization,
+            event=AuditLogEntryEvent.MEMBER_ACCEPT,
+        )
+
+        assert ale.actor == self.user
+        assert ale.target_object == om.id
+        assert ale.target_user == self.user
+        assert ale.data
+
+    def test_cannot_accept_when_user_needs_2fa(self):
+        self._require_2fa_for_organization()
+        self.assertFalse(Authenticator.objects.user_has_2fa(self.user))
+
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            role='member',
+            token='abc',
+            organization=self.organization,
+        )
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
+
+        self._assert_2fa_cookie_set(resp, om)
+
+    def test_2fa_cookie_deleted_after_accept(self):
+        self._require_2fa_for_organization()
+        self.assertFalse(Authenticator.objects.user_has_2fa(self.user))
+
+        self.login_as(self.user)
+
+        om = OrganizationMember.objects.create(
+            email='newuser@example.com',
+            role='member',
+            token='abc',
+            organization=self.organization,
+        )
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/accept-organization-invite.html')
+        self._assert_2fa_cookie_set(resp, om)
+
+        self._enroll_user_in_2fa()
+        resp = self.client.post(reverse('sentry-accept-invite', args=[om.id, om.token]))
+        assert resp.status_code == 302
+
+        # value set to empty string on deletion
+        self.assertFalse(resp.client.cookies['pending-invite'].value)
