commit 3e506ba63c1177a05e7bf1a553bb15bc048caebc
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 29 15:42:37 2015 -0700

    Add tests for link identity + fix old tests

diff --git a/tests/sentry/web/frontend/test_auth_link_identity.py b/tests/sentry/web/frontend/test_auth_link_identity.py
new file mode 100644
index 0000000000..140a41473c
--- /dev/null
+++ b/tests/sentry/web/frontend/test_auth_link_identity.py
@@ -0,0 +1,107 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
+from sentry.testutils import AuthProviderTestCase
+
+
+# TODO(dcramer): this is an integration test
+class OrganizationAuthSettingsTest(AuthProviderTestCase):
+    def test_redirects_with_no_provider(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+
+        path = reverse('sentry-auth-link-identity', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 302
+
+    def test_renders_login_form_as_anon(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+
+        path = reverse('sentry-auth-link-identity', args=[organization.slug])
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/auth-link-login.html')
+
+        assert resp.context['form']
+
+    def test_flow_as_anonymous(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('bar@example.com')
+        member = self.create_member(organization=organization, user=user)
+
+        path = reverse('sentry-auth-link-identity', args=[organization.slug])
+
+        resp = self.client.post(path, {
+            'username': self.user.username,
+            'password': 'admin',
+        }, follow=True)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/auth-link-identity.html')
+
+    def test_flow_as_existing_user(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('bar@example.com')
+        member = self.create_member(organization=organization, user=user)
+
+        path = reverse('sentry-auth-link-identity', args=[organization.slug])
+
+        self.login_as(user)
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'bar@example.com'})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
+        assert resp.status_code == 200
+
+        resp = self.client.post(path, {'op': 'confirm'})
+
+        assert resp.status_code == 302
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        assert auth_identity.user == user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index ab356c0967..e2c0cbb238 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -27,26 +27,6 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert 'provider_key' not in resp.context
         assert resp.context['CAN_REGISTER']
 
-    def test_renders_auth_provider(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-        auth_provider = AuthProvider.objects.create(
-            organization=organization,
-            provider='dummy',
-        )
-
-        path = reverse('sentry-auth-organization', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        self.assertTemplateUsed(resp, 'sentry/organization-login.html')
-
-        assert resp.context['provider_key'] == 'dummy'
-        assert not resp.context['CAN_REGISTER']
-
     def test_basic_provider_flow_as_anonymous(self):
         organization = self.create_organization(name='foo', owner=self.user)
         team = self.create_team(organization=organization)
@@ -105,112 +85,4 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
         resp = self.client.post(path)
 
-        assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
-
-        path = reverse('sentry-auth-sso')
-
-        resp = self.client.post(path, {'email': 'bar@example.com'})
-
-        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
-        assert resp.status_code == 200
-
-        resp = self.client.post(path, {'op': 'confirm'})
-
-        assert resp.status_code == 302
-
-        auth_identity = AuthIdentity.objects.get(
-            auth_provider=auth_provider,
-        )
-
-        assert auth_identity.user == user
-
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            user=user,
-        )
-
-        assert getattr(member.flags, 'sso:linked')
-        assert not getattr(member.flags, 'sso:invalid')
-
-    def test_basic_provider_flow_as_existing_user_new_account(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-        auth_provider = AuthProvider.objects.create(
-            organization=organization,
-            provider='dummy',
-        )
-        user = self.create_user('bar@example.com')
-
-        path = reverse('sentry-auth-organization', args=[organization.slug])
-
-        self.login_as(user)
-
-        resp = self.client.post(path)
-
-        assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
-
-        path = reverse('sentry-auth-sso')
-
-        resp = self.client.post(path, {'email': 'foo@example.com'})
-
-        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
-        assert resp.status_code == 200
-
-        resp = self.client.post(path, {'op': 'newuser'})
-
         assert resp.status_code == 302
-
-        auth_identity = AuthIdentity.objects.get(
-            auth_provider=auth_provider,
-        )
-
-        assert auth_identity.user != user
-        assert auth_identity.user.email == 'foo@example.com'
-
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            user=auth_identity.user,
-        )
-
-        assert getattr(member.flags, 'sso:linked')
-        assert not getattr(member.flags, 'sso:invalid')
-
-    def test_basic_provider_flow_as_existing_user_and_identity(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-        auth_provider = AuthProvider.objects.create(
-            organization=organization,
-            provider='dummy',
-        )
-        auth_identity = AuthIdentity.objects.create(
-            auth_provider=auth_provider,
-            ident='bar@example.com',
-            user=self.user,
-        )
-
-        path = reverse('sentry-auth-organization', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        resp = self.client.post(path)
-
-        assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
-
-        path = reverse('sentry-auth-sso')
-
-        resp = self.client.post(path, {'email': 'bar@example.com'})
-
-        assert resp.status_code == 302
-
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            user=self.user,
-        )
-
-        assert getattr(member.flags, 'sso:linked')
-        assert not getattr(member.flags, 'sso:invalid')
