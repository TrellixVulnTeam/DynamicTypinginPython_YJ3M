commit a4e3df9d5d88e606e3b8023feb1906e340e57a08
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 24 10:42:09 2015 -0800

    Add teams:create feature

diff --git a/CHANGES b/CHANGES
index 93485a83c9..f3e215e31c 100644
--- a/CHANGES
+++ b/CHANGES
@@ -3,6 +3,7 @@ Version 7.4.0
 
 - A new features subsystem was added, and many optional features are now run through it.
 - The 'add_organization' permission is no longer used.
+- The 'add_team' permission is no longer used.
 - SENTRY_ALLOW_REGISTRATION is deprecated in favor of SENTRY_FEATURES['auth:register'].
 - SOCIAL_AUTH_CREATE_USERS is deprecated in favor of SENTRY_FEATURES['social-auth:register'].
 - SENTRY_SERVER_EMAIL is no longer used.
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 847c83cef6..3cd3f214bf 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -527,6 +527,7 @@ SENTRY_FEATURES = {
     'auth:register': True,
     'social-auth:register': True,
     'organizations:create': True,
+    'teams:create': True,
 }
 
 SENTRY_FILTERS = (
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 6dc8eae57b..1487a82b54 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -8,6 +8,7 @@ default_manager = FeatureManager()
 default_manager.add('auth:register')
 default_manager.add('social-auth:register')
 default_manager.add('organizations:create')
+default_manager.add('teams:create', OrganizationFeature)
 
 # expose public api
 add = default_manager.add
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 88e80f37ab..7afd2cc3e2 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -13,6 +13,7 @@ from django.conf import settings
 from django.db.models import Q
 from functools import wraps
 
+from sentry import features
 from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins
 from sentry.utils.cache import cached_for_request
@@ -80,11 +81,7 @@ def can_create_teams(user, organization):
     if not is_organization_admin(user, organization):
         return False
 
-    result = plugins.first('has_perm', user, 'add_team', organization)
-    if result is False:
-        return result
-
-    return True
+    return features.has('teams:create', organization, actor=user)
 
 
 @cached_for_request
