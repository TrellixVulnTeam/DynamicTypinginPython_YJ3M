commit 817db07759020244e5ffbcdf42f5aaf7460f1b37
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Apr 10 16:09:27 2020 -0700

    fix(subscription): Filter out transactions from alert stats (#18212)
    
    Following up from https://github.com/getsentry/sentry/pull/18175, this makes sure we filter to
    `error` when we load stats from snuba.

diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 59d5b3dd26..af2fbab97a 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -40,6 +40,8 @@ from sentry.snuba.subscriptions import (
     bulk_delete_snuba_subscriptions,
     bulk_update_snuba_subscriptions,
 )
+from sentry.snuba.tasks import apply_dataset_conditions
+from sentry.utils.db import attach_foreignkey
 from sentry.utils.snuba import bulk_raw_query, SnubaQueryParams, SnubaTSResult
 from sentry.utils.compat import zip
 
@@ -301,6 +303,8 @@ def bulk_build_incident_query_params(incidents, start=None, end=None, windowed_s
     ).values_list("incident_id", "project_id"):
         incident_projects[incident_id].append(project_id)
 
+    attach_foreignkey(incidents, Incident.alert_rule)
+
     query_args_list = []
     for incident in incidents:
         params = {}
@@ -317,10 +321,15 @@ def bulk_build_incident_query_params(incidents, start=None, end=None, windowed_s
             params["project_id"] = project_ids
 
         snuba_filter = get_filter(incident.query, params)
+        conditions = resolve_discover_aliases(snuba_filter)[0].conditions
+        if incident.alert_rule:
+            conditions = apply_dataset_conditions(
+                QueryDatasets(incident.alert_rule.dataset), conditions
+            )
         snuba_args = {
             "start": snuba_filter.start,
             "end": snuba_filter.end,
-            "conditions": resolve_discover_aliases(snuba_filter)[0].conditions,
+            "conditions": conditions,
             "filter_keys": snuba_filter.filter_keys,
             "having": [],
         }
diff --git a/src/sentry/snuba/tasks.py b/src/sentry/snuba/tasks.py
index c645cdac72..82fd1e68ef 100644
--- a/src/sentry/snuba/tasks.py
+++ b/src/sentry/snuba/tasks.py
@@ -15,6 +15,18 @@ from sentry.utils import metrics
 from sentry.utils.snuba import _snuba_pool, SnubaError
 
 
+# TODO: If we want to support security events here we'll need a way to
+# differentiate within the dataset. For now we can just assume all subscriptions
+# created within this dataset are just for errors.
+DATASET_CONDITIONS = {QueryDatasets.EVENTS: [["type", "=", "error"]]}
+
+
+def apply_dataset_conditions(dataset, conditions):
+    if dataset in DATASET_CONDITIONS:
+        conditions = conditions + DATASET_CONDITIONS[dataset]
+    return conditions
+
+
 @instrumented_task(
     name="sentry.snuba.tasks.create_subscription_in_snuba",
     queue="subscriptions",
@@ -107,11 +119,7 @@ def _create_in_snuba(subscription):
     environments = list(subscription.environments.all())
     if environments:
         conditions.append(["environment", "IN", [env.name for env in environments]])
-    if subscription.dataset == QueryDatasets.EVENTS.value:
-        # TODO: If we want to support security events here we'll need a way to
-        # differentiate within the dataset. For now we can just assume all subscriptions
-        # created within this dataset are just for errors.
-        conditions.append(["type", "=", "error"])
+    conditions = apply_dataset_conditions(QueryDatasets(subscription.dataset), conditions)
     response = _snuba_pool.urlopen(
         "POST",
         "/%s/subscriptions" % (subscription.dataset,),
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 5796aba227..a7bc755e59 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -71,8 +71,9 @@ from sentry.incidents.models import (
 from sentry.snuba.models import QueryAggregations, QueryDatasets, QuerySubscription
 from sentry.models.integration import Integration
 from sentry.testutils import TestCase, SnubaTestCase
-from sentry.testutils.helpers.datetime import iso_format
+from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.utils.compat import zip
+from sentry.utils.samples import load_data
 
 
 class CreateIncidentTest(TestCase):
@@ -218,6 +219,7 @@ class BaseIncidentsTest(SnubaTestCase):
             "event_id": event_id,
             "fingerprint": [fingerprint],
             "timestamp": iso_format(timestamp),
+            "type": "error",
         }
         if user:
             data["user"] = user
@@ -253,7 +255,7 @@ class BaseIncidentEventStatsTest(BaseIncidentsTest):
 
     def validate_result(self, incident, result, expected_results, start, end, windowed_stats):
         # Duration of 300s, but no alert rule
-        time_window = 1
+        time_window = incident.alert_rule.time_window if incident.alert_rule else 1
         assert result.rollup == time_window * 60
         expected_start = start if start else incident.date_started - timedelta(minutes=1)
         expected_end = end if end else incident.current_end_date
@@ -310,6 +312,25 @@ class GetIncidentEventStatsTest(TestCase, BaseIncidentEventStatsTest):
         self.run_test(self.group_incident, [1, 1])
         self.run_test(self.group_incident, [1, 1], windowed_stats=True)
 
+    def test_with_transactions(self):
+        incident = self.project_incident
+        alert_rule = self.create_alert_rule(
+            self.organization, [self.project], query="", time_window=1
+        )
+        incident.update(alert_rule=alert_rule)
+
+        event_data = load_data("transaction")
+        event_data.update(
+            {
+                "start_timestamp": iso_format(before_now(minutes=2)),
+                "timestamp": iso_format(before_now(minutes=2)),
+            }
+        )
+        event_data["transaction"] = "/foo_transaction/"
+        self.store_event(data=event_data, project_id=self.project.id)
+
+        self.run_test(incident, [2, 1])
+
 
 @freeze_time()
 class BulkGetIncidentEventStatsTest(TestCase, BaseIncidentEventStatsTest):
