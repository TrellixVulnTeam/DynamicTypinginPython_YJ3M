commit e25cdf3dc9dff9d8cc9a36e7c85b75a19f7e799d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 20 01:16:46 2012 -0800

    Clean up some odd behavior where sometimes members arent group in certain situations

diff --git a/src/sentry/static/sentry/coffee/app.coffee b/src/sentry/static/sentry/coffee/app.coffee
index 039db2957c..b0529dd762 100644
--- a/src/sentry/static/sentry/coffee/app.coffee
+++ b/src/sentry/static/sentry/coffee/app.coffee
@@ -40,7 +40,7 @@ jQuery ->
                     url: uri
                     dataType: 'json'
                     success: (data) =>
-                        view.load([new app.Group(d) for d in data])
+                        view.load(data)
                         $parent.css('opacity', 1)
                         $tab.tab('show')
 
@@ -57,6 +57,7 @@ jQuery ->
                 maxItems: 5
                 pollUrl: uri
                 realtime: @config.realtime
+                model: app.Group
 
         getView: (id, uri) ->
             if !@views[id]
@@ -75,6 +76,7 @@ jQuery ->
                 maxItems: 50
                 realtime: true
                 pollUrl: app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/'
+                model: app.Group
 
             $('a[data-action=pause]').click (e) =>
                 e.preventDefault()
diff --git a/src/sentry/static/sentry/coffee/views.coffee b/src/sentry/static/sentry/coffee/views.coffee
index 500e85e7f1..5e82189928 100644
--- a/src/sentry/static/sentry/coffee/views.coffee
+++ b/src/sentry/static/sentry/coffee/views.coffee
@@ -70,12 +70,16 @@ jQuery ->
                 @renderMemberInContainer(member)
 
         updateMember: (member) ->
-            obj = @collection.get(member.id)
-            if member.get('count') != obj.get('count')
-                obj.set('count', member.get('count'))
+            # TODO: is there a better way to pass both non-models and models here?
+            count = member.count ? member.get('count')
+            score = member.score ? member.get('score')
 
-            if member.get('score') != obj.get('score')
-                obj.set('score', member.get('score'))
+            existing = @collection.get(member.id)
+            if existing.get('count') != count
+                existing.set('count', count)
+
+            if existing.get('score') != score
+                existing.set('score', score)
 
                 # score changed, resort
                 @collection.sort()
@@ -135,6 +139,9 @@ jQuery ->
     app.GroupListView = class GroupListView extends OrderedElementsView
 
         initialize: (data) ->
+            if !data?
+                data = {}
+            data.model = app.Group
             OrderedElementsView.prototype.initialize.call(@, data)
 
             @config =
@@ -144,6 +151,8 @@ jQuery ->
                 tickTime: data.tickTime ? 100
 
             @queue = new app.ScoredList
+                model: data.model
+
             @cursor = null
 
             @poll()
@@ -186,7 +195,7 @@ jQuery ->
                             obj.set('score', data.score)
                             @queue.sort()
                         else
-                            @queue.add(new app.Group(data))
+                            @queue.add(data)
 
                     window.setTimeout(@poll, @config.pollTime)
 
@@ -208,7 +217,8 @@ jQuery ->
             @model.on('change:historicalData', @renderSparkline)
 
         render: ->
-            @$el.html(@template(@model.toJSON()))
+            data = @model.toJSON()
+            @$el.html(@template(data))
             @$el.attr('data-id', @model.id)
             @$el.addClass(@getLevelClassName())
             if @model.get('isResolved')
diff --git a/src/sentry/static/sentry/scripts/site.js b/src/sentry/static/sentry/scripts/site.js
index 564feac473..ef9811aead 100644
--- a/src/sentry/static/sentry/scripts/site.js
+++ b/src/sentry/static/sentry/scripts/site.js
@@ -51,18 +51,7 @@
             url: uri,
             dataType: 'json',
             success: function(data) {
-              var d;
-              view.load([
-                (function() {
-                  var _i, _len, _results;
-                  _results = [];
-                  for (_i = 0, _len = data.length; _i < _len; _i++) {
-                    d = data[_i];
-                    _results.push(new app.Group(d));
-                  }
-                  return _results;
-                })()
-              ]);
+              view.load(data);
               $parent.css('opacity', 1);
               return $tab.tab('show');
             },
@@ -80,7 +69,8 @@
           id: id,
           maxItems: 5,
           pollUrl: uri,
-          realtime: this.config.realtime
+          realtime: this.config.realtime,
+          model: app.Group
         });
       };
 
@@ -111,7 +101,8 @@
           members: data.groups,
           maxItems: 50,
           realtime: true,
-          pollUrl: app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/'
+          pollUrl: app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/',
+          model: app.Group
         });
         return $('a[data-action=pause]').click(function(e) {
           var $target;
@@ -515,13 +506,15 @@
       };
 
       OrderedElementsView.prototype.updateMember = function(member) {
-        var obj;
-        obj = this.collection.get(member.id);
-        if (member.get('count') !== obj.get('count')) {
-          obj.set('count', member.get('count'));
+        var count, existing, score, _ref, _ref1;
+        count = (_ref = member.count) != null ? _ref : member.get('count');
+        score = (_ref1 = member.score) != null ? _ref1 : member.get('score');
+        existing = this.collection.get(member.id);
+        if (existing.get('count') !== count) {
+          existing.set('count', count);
         }
-        if (member.get('score') !== obj.get('score')) {
-          obj.set('score', member.get('score'));
+        if (existing.get('score') !== score) {
+          existing.set('score', score);
           return this.collection.sort();
         }
       };
@@ -593,6 +586,10 @@
 
       GroupListView.prototype.initialize = function(data) {
         var _ref, _ref1, _ref2, _ref3;
+        if (!(data != null)) {
+          data = {};
+        }
+        data.model = app.Group;
         OrderedElementsView.prototype.initialize.call(this, data);
         this.config = {
           realtime: (_ref = data.realtime) != null ? _ref : false,
@@ -600,7 +597,9 @@
           pollTime: (_ref2 = data.pollTime) != null ? _ref2 : 1000,
           tickTime: (_ref3 = data.tickTime) != null ? _ref3 : 100
         };
-        this.queue = new app.ScoredList;
+        this.queue = new app.ScoredList({
+          model: data.model
+        });
         this.cursor = null;
         this.poll();
         return window.setInterval(this.tick, this.config.tickTime);
@@ -646,7 +645,7 @@
                 obj.set('score', data.score);
                 _this.queue.sort();
               } else {
-                _this.queue.add(new app.Group(data));
+                _this.queue.add(data);
               }
             }
             return window.setTimeout(_this.poll, _this.config.pollTime);
@@ -684,8 +683,10 @@
       };
 
       GroupView.prototype.render = function() {
-        var _this = this;
-        this.$el.html(this.template(this.model.toJSON()));
+        var data,
+          _this = this;
+        data = this.model.toJSON();
+        this.$el.html(this.template(data));
         this.$el.attr('data-id', this.model.id);
         this.$el.addClass(this.getLevelClassName());
         if (this.model.get('isResolved')) {
