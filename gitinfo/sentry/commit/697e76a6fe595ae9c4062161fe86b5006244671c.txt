commit 697e76a6fe595ae9c4062161fe86b5006244671c
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue May 22 15:34:27 2018 -0700

    feat(ui): Add "Recovery Options" Modal (#8411)
    
    * Add recovery code copy, download buttons
    
    * Update recovery code description
    
    * Add RecoveryOptionsModal
    
    * Add small fixes
    
    * Change import to absolute path
    
    * Update messaging
    
    * Test redirects
    
    * Add PanelAlert

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 7b64dd82e5..02f0f75dec 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -277,9 +277,9 @@ class RecoveryCodeInterface(AuthenticatorInterface):
     interface_id = 'recovery'
     name = _('Recovery Codes')
     description = _(
-        'Recovery codes can be used to access your account in the '
-        'event you lose access to your device and cannot '
-        'receive two-factor authentication codes.'
+        'Recovery codes are the only way to access your account '
+        'if you lose your device and cannot receive two factor '
+        'authentication codes.'
     )
     enroll_button = _('Activate')
     configure_button = _('View Codes')
diff --git a/src/sentry/static/sentry/app/actionCreators/modal.jsx b/src/sentry/static/sentry/app/actionCreators/modal.jsx
index 1d78fc45b6..73af41040b 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.jsx
@@ -76,3 +76,13 @@ export function openCommandPalette(options = {}) {
       });
     });
 }
+
+export function openRecoveryOptions(options = {}) {
+  import(/* webpackChunkName: "RecoveryOptionsModal" */ 'app/components/modals/recoveryOptionsModal')
+    .then(mod => mod.default)
+    .then(Modal => {
+      openModal(deps => <Modal {...deps} {...options} />, {
+        modalClassName: 'recovery-options',
+      });
+    });
+}
diff --git a/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx b/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
new file mode 100644
index 0000000000..e08371a9ad
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
@@ -0,0 +1,117 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+import AsyncComponent from 'app/components/asyncComponent';
+import Button from 'app/components/buttons/button';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import space from 'app/styles/space';
+
+class RecoveryOptionsModal extends AsyncComponent {
+  static propTypes = {
+    closeModal: PropTypes.func,
+    onClose: PropTypes.func,
+    authenticatorName: PropTypes.string.isRequired,
+    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {
+      skipSms: false,
+    };
+  }
+
+  getEndpoints() {
+    return [['authenticators', '/users/me/authenticators/']];
+  }
+
+  handleSkipSms = () => {
+    this.setState({skipSms: true});
+  };
+
+  renderBody() {
+    let {authenticatorName, closeModal, Body, Header} = this.props;
+    let {authenticators, skipSms} = this.state;
+
+    let {recovery, sms} = authenticators.reduce((obj, item) => {
+      obj[item.id] = item;
+      return obj;
+    }, {});
+
+    let smsEnrolled = sms && sms.isEnrolled;
+    let recoveryEnrolled = recovery && recovery.isEnrolled;
+
+    return (
+      <React.Fragment>
+        <Header closeButton onHide={closeModal}>
+          {t('Two Factor Authentication Enabled')}
+        </Header>
+
+        <Body>
+          <TextBlock>
+            {t(`Two factor authentication via ${authenticatorName} has been enabled`)}
+          </TextBlock>
+          <TextBlock>
+            {t('You should now set up recovery options to secure your account.')}
+          </TextBlock>
+
+          {!skipSms && !smsEnrolled ? (
+            // set up backup phone number
+            <Alert type="warning">
+              {t('We recommend adding a phone number as a backup 2FA method.')}
+            </Alert>
+          ) : (
+            // get recovery codes
+            <Alert type="warning">
+              {t(
+                `Recovery codes are the only way to access your account if you lose
+                  your device and cannot receive two factor authentication codes.`
+              )}
+            </Alert>
+          )}
+        </Body>
+
+        {!skipSms && !smsEnrolled ? (
+          // set up backup phone number
+          <div className="modal-footer">
+            <Button onClick={this.handleSkipSms} name="skipStep" autoFocus>
+              {t('Skip this step')}
+            </Button>
+            <Button
+              priority="primary"
+              onClick={closeModal}
+              to={`/settings/account/security/${sms.id}/enroll/`}
+              name="addPhone"
+              css={{marginLeft: space(1)}}
+              autoFocus
+            >
+              {t('Add a Phone Number')}
+            </Button>
+          </div>
+        ) : (
+          // get recovery codes
+          <div className="modal-footer">
+            <Button
+              priority="primary"
+              onClick={closeModal}
+              to={
+                recoveryEnrolled
+                  ? `/settings/account/security/${recovery.authId}/`
+                  : '/settings/account/security/'
+              }
+              name="getCodes"
+              autoFocus
+            >
+              {t('Get Recovery Codes')}
+            </Button>
+          </div>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export default RecoveryOptionsModal;
diff --git a/src/sentry/static/sentry/app/icons/icon-download.svg b/src/sentry/static/sentry/app/icons/icon-download.svg
new file mode 100644
index 0000000000..d54ce39c0c
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-download.svg
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="iso-8859-1"?>
+<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
+	 viewBox="0 0 384.97 384.97" style="enable-background:new 0 0 384.97 384.97;" xml:space="preserve">
+<path stroke="black" stroke-width="20" d="M372.939,264.667c-6.641,0-12.03,5.39-12.03,12.03v84.212H24.061v-84.212c0-6.641-5.39-12.03-12.03-12.03
+    S0,270.056,0,276.697v96.242c0,6.641,5.39,12.03,12.03,12.03h360.909c6.641,0,12.03-5.39,12.03-12.03v-96.242
+    C384.97,270.056,379.58,264.667,372.939,264.667z"/>
+<path stroke="black" stroke-width="10" d="M183.703,285.202c4.68,4.632,12.512,4.68,17.191,0l84.2-83.009c4.752-4.704,4.74-12.319,0-17.011
+    c-4.74-4.704-12.439-4.704-17.179,0l-63.46,62.558V12.03c0-6.641-5.438-12.03-12.151-12.03s-12.151,5.39-12.151,12.03v235.71
+    l-63.46-62.558c-4.752-4.704-12.439-4.704-17.179,0c-4.752,4.704-4.752,12.319,0,17.011L183.703,285.202z"/>
+</svg>
diff --git a/src/sentry/static/sentry/app/icons/icon-print.svg b/src/sentry/static/sentry/app/icons/icon-print.svg
new file mode 100644
index 0000000000..3badbfacc0
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-print.svg
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="iso-8859-1"?>
+<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
+	 viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
+<path d="M482,182.58V135c0-24.813-20.187-45-45-45h-23.787L327.617,4.404c-0.018-0.018-0.039-0.035-0.057-0.054
+    c-2.659-2.638-6.352-4.277-10.328-4.339C317.154,0.01,317.079,0,317.001,0H105c-8.284,0-15,6.716-15,15v75H75
+    c-24.813,0-45,20.187-45,45v47.58C12.541,188.772,0,205.445,0,225v182c0,24.813,20.187,45,45,45h45v45c0,8.284,6.716,15,15,15h302
+    c8.284,0,15-6.716,15-15v-45h45c24.813,0,45-20.187,45-45V225C512,205.445,499.459,188.772,482,182.58z M422,120h15
+    c8.271,0,15,6.729,15,15v45h-30V120z M332,51.213L370.787,90H332V51.213z M120,30h182v75c0,8.284,6.716,15,15,15h75v60H120V30z
+        M60,135c0-8.271,6.729-15,15-15h15v60H60V135z M392,482H120V332h272V482z M482,407c0,8.271-6.729,15-15,15h-45v-90h15
+    c8.284,0,15-6.716,15-15s-6.716-15-15-15c-12.246,0-344.772,0-362,0c-8.284,0-15,6.716-15,15s6.716,15,15,15h15v90H45
+    c-8.271,0-15-6.729-15-15V225c0-8.271,6.729-15,15-15c18.142,0,401.331,0,422,0c8.271,0,15,6.729,15,15V407z"/>
+<path d="M347,362H165c-8.284,0-15,6.716-15,15s6.716,15,15,15h182c8.284,0,15-6.716,15-15S355.284,362,347,362z"/>
+<path d="M347,422H165c-8.284,0-15,6.716-15,15s6.716,15,15,15h182c8.284,0,15-6.716,15-15S355.284,422,347,422z"/>
+<path d="M105,240H75c-8.284,0-15,6.716-15,15s6.716,15,15,15h30c8.284,0,15-6.716,15-15S113.284,240,105,240z"/>
+</svg>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index f441f7100f..3614d3e87a 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -10,6 +10,7 @@ import {
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
+import {openRecoveryOptions} from 'app/actionCreators/modal';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/buttons/button';
 import CircleIndicator from 'app/components/circleIndicator';
@@ -237,7 +238,9 @@ class AccountSecurityEnroll extends AsyncView {
     let authenticatorName =
       (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
     this.props.router.push('/settings/account/security');
-    addSuccessMessage(t('%s has been added', authenticatorName));
+    openRecoveryOptions({
+      authenticatorName,
+    });
   };
 
   // Handler when we failed to add a 2fa device
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
index edc4c33fa9..d08f45a428 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
@@ -1,27 +1,26 @@
 import {Box, Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled, {css} from 'react-emotion';
+import styled from 'react-emotion';
 
 import {t} from 'app/locale';
 import Button from 'app/components/buttons/button';
+import Clipboard from 'app/components/clipboard';
 import Confirm from 'app/components/confirm';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import InlineSvg from 'app/components/inlineSvg';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import {
+  Panel,
+  PanelBody,
+  PanelHeader,
+  PanelItem,
+  PanelAlert,
+} from 'app/components/panels';
 
 const Code = styled(props => <PanelItem p={2} {...props} />)`
   font-family: ${p => p.theme.text.familyMono};
 `;
 
-const PanelWarning = styled(props => <Flex p={2} {...props} />)`
-  ${p => css`
-    background-color: ${p.theme.alert.warning.backgroundLight};
-    border-bottom: 1px solid ${p.theme.borderLight};
-    color: ${p.theme.alert.warning.textDark};
-  `};
-`;
-
 class RecoveryCodes extends React.Component {
   static propTypes = {
     isEnrolled: PropTypes.bool,
@@ -29,41 +28,76 @@ class RecoveryCodes extends React.Component {
     onRegenerateBackupCodes: PropTypes.func.isRequired,
   };
 
+  printCodes = () => {
+    let iframe = window.frames.printable;
+    iframe.document.write(this.props.codes.join('<br>'));
+    iframe.print();
+    iframe.document.close();
+  };
+
   render() {
     let {isEnrolled, codes} = this.props;
 
     if (!isEnrolled || !codes) return null;
 
+    let formattedCodes = codes.join('\n');
+
     return (
       <Panel css={{marginTop: 30}}>
-        <PanelHeader>
+        <PanelHeader hasButtons>
           <Flex align="center">
-            <Box flex="1">{t('Unused Codes')}</Box>
-            <Confirm
-              onConfirm={this.props.onRegenerateBackupCodes}
-              message={t(
-                'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'
-              )}
-            >
-              <Button priority="danger" size="small">
-                {t('Regenerate Codes')}
+            <Box>{t('Unused Codes')}</Box>
+          </Flex>
+          <Flex>
+            <Box ml={1}>
+              <Clipboard hideUnsupported value={formattedCodes}>
+                <Button size="small">
+                  <InlineSvg src="icon-copy" />
+                </Button>
+              </Clipboard>
+            </Box>
+            <Box ml={1}>
+              <Button size="small" onClick={this.printCodes}>
+                <InlineSvg src="icon-print" />
               </Button>
-            </Confirm>
+            </Box>
+            <Box ml={1}>
+              <Button
+                size="small"
+                download="sentry-recovery-codes.txt"
+                href={`data:text/plain;charset=utf-8,${formattedCodes}`}
+              >
+                <InlineSvg src="icon-download" />
+              </Button>
+            </Box>
+            <Box ml={1}>
+              <Confirm
+                onConfirm={this.props.onRegenerateBackupCodes}
+                message={t(
+                  'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'
+                )}
+              >
+                <Button priority="danger" size="small">
+                  {t('Regenerate Codes')}
+                </Button>
+              </Confirm>
+            </Box>
           </Flex>
         </PanelHeader>
         <PanelBody>
-          <PanelWarning>
-            <InlineSvg css={{fontSize: '2em'}} src="icon-warning-sm" />
-            <Flex align="center" ml={2} flex="1">
-              {t(`Make sure to keep a copy of these codes to recover your account if you lose
-              your authenticator.`)}
+          <PanelAlert type="warning">
+            <Flex align="center" ml={1} flex="1">
+              {t(
+                'Make sure to save a copy of your recovery codes and store them in a safe place.'
+              )}
             </Flex>
-          </PanelWarning>
-          {!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}
+          </PanelAlert>
+          <Box>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</Box>
           {!codes.length && (
             <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>
           )}
         </PanelBody>
+        <iframe name="printable" css={{display: 'none'}} />
       </Panel>
     );
   }
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 95fc13322d..4c7cd80856 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -326,7 +326,7 @@ window.TestStubs = {
         lastUsedAt: null,
         enrollButton: 'Activate',
         description:
-          'Recovery codes can be used to access your account in the event you lose access to your device and cannot receive two-factor authentication codes.',
+          'Recovery codes are the only way to access your account if you lose your device and cannot receive two factor authentication codes.',
         isEnrolled: true,
         removeButton: null,
         id: 'recovery',
diff --git a/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx b/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
new file mode 100644
index 0000000000..28004a0a44
--- /dev/null
+++ b/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
@@ -0,0 +1,61 @@
+import {Modal} from 'react-bootstrap';
+import React from 'react';
+
+import {mount} from 'enzyme';
+import RecoveryOptionsModal from 'app/components/modals/recoveryOptionsModal';
+
+describe('RecoveryOptionsModal', function() {
+  let closeModal = jest.fn();
+  let onClose = jest.fn();
+  let wrapper;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/users/me/authenticators/',
+      method: 'GET',
+      body: Object.values(TestStubs.Authenticators()).map(x => x()),
+    });
+    wrapper = mount(
+      <RecoveryOptionsModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        authenticatorName="Authenticator App"
+        closeModal={closeModal}
+        onClose={onClose}
+      />,
+      TestStubs.routerContext()
+    );
+  });
+
+  afterEach(function() {});
+
+  it('can redirect to recovery codes if user skips backup phone setup', async function() {
+    let getRecoveryCodes = 'RecoveryOptionsModal Button[name="getCodes"]';
+    expect(wrapper.find(getRecoveryCodes)).toHaveLength(0);
+
+    // skip backup phone setup
+    wrapper.find('RecoveryOptionsModal Button[name="skipStep"]').simulate('click');
+    expect(wrapper.find(getRecoveryCodes)).toHaveLength(1);
+
+    let mockId = 16;
+    expect(
+      wrapper.find('RecoveryOptionsModal Button[name="getCodes"]').prop('to')
+    ).toMatch(`/settings/account/security/${mockId}/`);
+
+    wrapper.find(getRecoveryCodes).simulate('click');
+    expect(closeModal).toHaveBeenCalled();
+  });
+
+  it('can redirect to backup phone setup', async function() {
+    let backupPhone = 'RecoveryOptionsModal Button[name="addPhone"]';
+
+    expect(wrapper.find(backupPhone)).toHaveLength(1);
+    expect(wrapper.find(backupPhone).prop('to')).toMatch(
+      '/settings/account/security/sms/enroll/'
+    );
+
+    wrapper.find(backupPhone).simulate('click');
+    expect(closeModal).toHaveBeenCalled();
+  });
+});
