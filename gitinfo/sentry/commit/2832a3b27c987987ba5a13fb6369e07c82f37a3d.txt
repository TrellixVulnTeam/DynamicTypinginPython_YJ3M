commit 2832a3b27c987987ba5a13fb6369e07c82f37a3d
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 23 02:55:04 2012 -0800

    Improving the email template

diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index c7fa842e57..29415aaea5 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -87,6 +87,9 @@ class Interface(object):
     def to_string(self, event):
         return ''
 
+    def get_title(self):
+        return self.__class__.__name__
+
     def get_search_context(self, event):
         """
         Returns a dictionary describing the data that should be indexed
diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index 77dcc335d4..a6461b16a4 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -64,22 +64,16 @@ class MailProcessor(Plugin):
         )
 
     def mail_admins(self, group, event, fail_silently=True):
-        interfaces = event.interfaces
-
         project = group.project
 
-        if 'sentry.interfaces.Exception' in interfaces:
-            traceback = interfaces['sentry.interfaces.Exception'].to_string(event)
-        else:
-            traceback = None
-
-        http = interfaces.get('sentry.interfaces.Http')
+        interface_list = []
+        for interface in event.interfaces.itervalues():
+            body = interface.to_string(event)
+            if not body:
+                continue
+            interface_list.append((interface.get_title(), body))
 
-        if http:
-            ip_repr = (http.env.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL')
-            subject = 'Error (%s IP): %s' % (ip_repr, http.url)
-        else:
-            subject = 'Error: %s' % (event.message,)
+        subject = event.message
 
         if event.site:
             subject = '[%s] %s' % (event.site, subject)
@@ -87,10 +81,10 @@ class MailProcessor(Plugin):
         link = '%s%s' % (settings.URL_PREFIX, group.get_absolute_url())
 
         body = render_to_string('sentry/emails/error.txt', {
-            'traceback': traceback,
             'group': self,
             'event': event,
             'link': link,
+            'interfaces': interface_list,
         })
 
         self._send_mail(subject, body, project, fail_silently=fail_silently)
diff --git a/sentry/templates/sentry/emails/error.txt b/sentry/templates/sentry/emails/error.txt
index 96d438185a..5a97c5ee62 100644
--- a/sentry/templates/sentry/emails/error.txt
+++ b/sentry/templates/sentry/emails/error.txt
@@ -1,8 +1,24 @@
-{% autoescape off %}{% if link %}
-View in detail: {{ link }}
+{% spaceless %}
+{% autoescape off %}
+A new event has been recorded in Sentry:
 
-{{ event.message }}
+    {{ event.message }}
 
-{% endif %}{% if traceback %}{{ traceback }}
+Details
+-------
 
-{% endif %}{% if request_repr %}{{ request_repr }}{% endif %}{% endautoescape %}
\ No newline at end of file
+{{ link }}
+
+Logger: {{ event.logger }}
+First Seen: {{ group.first_seen|date }}
+
+{% if interfaces %}{% for label, text in interfaces %}
+{{ label }}
+-----------
+
+{{ text }}
+
+{% endfor %}
+{% endif %}
+{% endautoescape %}
+{% endspaceless %}
\ No newline at end of file
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 022fd06c5d..6f1816917a 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -3,44 +3,69 @@
 from __future__ import absolute_import
 
 import mock
+import datetime
+from mock import Mock
+from sentry.interfaces import Stacktrace
+from sentry.models import Event, Group
 from sentry.plugins.sentry_mail import MailProcessor
 
 from tests.base import TestCase
 
 
 class MailProcessorTest(TestCase):
-    def test_should_mail(self):
-        Mock = mock.Mock
-        with mock.patch('sentry.models.ProjectOption.objects.get_value') as get_value:
-            get_value.side_effect = lambda p, k, d: d
-
-            # no admins
-            p = MailProcessor(send_to=())
-            self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
-
-            # not min level
-            p = MailProcessor(send_to=['foo@exampe.com'], min_level=2)
-            group = Mock()
-            group.level = 1
-            self.assertFalse(p.should_mail(group=group, event=Mock()))
-
-            # not in inclusion
-            p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, include_loggers=['foo'])
-            group = Mock()
-            group.level = 5
-            group.logger = 'root'
-            self.assertFalse(p.should_mail(group=group, event=Mock()))
-
-            # in exclusion
-            p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, exclude_loggers=['root'])
-            group = Mock()
-            group.level = 5
-            group.logger = 'root'
-            self.assertFalse(p.should_mail(group=group, event=Mock()))
-
-            # in exclusion
-            p = MailProcessor(send_to=['foo@exampe.com'], min_level=None)
-            group = Mock()
-            group.level = 5
-            group.logger = 'root'
-            self.assertTrue(p.should_mail(group=group, event=Mock()))
+    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    def test_should_mail_no_send_to(self):
+        p = MailProcessor(send_to=())
+        self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
+
+    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    def test_should_mail_not_min_level(self):
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=2)
+        group = Mock(spec=Group)
+        group.level = 1
+        self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    def test_should_mail_not_included(self):
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, include_loggers=['foo'])
+        group = Mock(spec=Group)
+        group.level = 5
+        group.logger = 'root'
+        self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    def test_should_mail_excluded(self):
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, exclude_loggers=['root'])
+        group = Mock(spec=Group)
+        group.level = 5
+        group.logger = 'root'
+        self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    def test_should_mail_match(self):
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None)
+        group = Mock(spec=Group)
+        group.level = 5
+        group.logger = 'root'
+        self.assertTrue(p.should_mail(group=group, event=Mock()))
+
+    @mock.patch('sentry.plugins.sentry_mail.MailProcessor._send_mail')
+    def test_mail_admins_renders_interfaces(self, _send_mail):
+        group = Mock(spec=Group)
+        group.first_seen = datetime.datetime.now()
+        group.get_absolute_url.return_value = '/example'
+        stacktrace = Mock(spec=Stacktrace)
+        stacktrace.to_string.return_value = 'foo bar'
+        stacktrace.get_title.return_value = 'Stacktrace'
+        event = Event()
+        event.message = 'hello world'
+        event.logger = 'root'
+        event.site = None
+        event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
+
+        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+            p = MailProcessor(send_to=['foo@example.com'])
+            p.mail_admins(group, event)
+
+        stacktrace.get_title.assert_called_once_with()
+        stacktrace.to_string.assert_called_once_with(event)
