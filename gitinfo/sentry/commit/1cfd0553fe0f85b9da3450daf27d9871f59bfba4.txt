commit 1cfd0553fe0f85b9da3450daf27d9871f59bfba4
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Aug 21 17:01:06 2017 -0700

    Fixed hacky logic for inferring function names in javascript from previous frames

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index b50a8fceb6..98a6620340 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -505,9 +505,15 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
         platform = frame.get('platform') or self.data.get('platform')
         return (settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT and platform == 'javascript')
 
+    def preprocess_frame(self, processable_frame):
+        # Stores the resolved token.  This is used to cross refer to other
+        # frames for function name resolution by call site.
+        processable_frame.data = {
+            'token': None,
+        }
+
     def process_frame(self, processable_frame, processing_task):
         frame = processable_frame.frame
-        last_token = None
         token = None
 
         cache = self.cache
@@ -541,8 +547,6 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                 }
             )
         elif sourcemap_view:
-            last_token = token
-
             if is_data_uri(sourcemap_url):
                 sourcemap_label = frame['abs_path']
             else:
@@ -567,6 +571,9 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                     }
                 )
 
+            # persist the token so that we can find it later
+            processable_frame.data['token'] = token
+
             # Store original data in annotation
             new_frame['data'] = dict(frame.get('data') or {}, sourcemap=sourcemap_label)
 
@@ -596,12 +603,18 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                 # Token's return zero-indexed lineno's
                 new_frame['lineno'] = token.src_line + 1
                 new_frame['colno'] = token.src_col
+                last_token = None
+                if processable_frame.previous_frame:
+                    last_token = processable_frame.previous_frame.data['token']
+
                 # The offending function is always the previous function in the stack
-                # Honestly, no idea what the bottom most frame is, so we're ignoring that atm
+                # Honestly, no idea what the bottom most frame is, so
+                # we're ignoring that atm.
+                #
+                # XXX: we should actually be parsing the source code here
+                # and not use the last token
                 if last_token:
                     new_frame['function'] = last_token.name or frame.get('function')
-                else:
-                    new_frame['function'] = token.name or frame.get('function')
 
                 filename = token.src
                 # special case webpack support
