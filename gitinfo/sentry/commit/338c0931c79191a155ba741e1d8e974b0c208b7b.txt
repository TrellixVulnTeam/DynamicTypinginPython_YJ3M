commit 338c0931c79191a155ba741e1d8e974b0c208b7b
Author: Mark Story <mark@mark-story.com>
Date:   Fri Feb 15 13:50:05 2019 -0500

    fix(issues) Autocomplete tag values based on project selections (#12038)
    
    The suggested tag keys/values should be based on the selected projects
    and not the entire organization.
    
    I chose to go with a loader prop as pushing down both projectId and
    projects as properties seemed more clunky. This change also lets the
    lower down components need fewer props to get their work done which
    I think is a good thing.
    
    Fixes APP-1116

diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index b5abd66a27..d7e148b7f9 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -6,34 +6,78 @@ import AlertActions from 'app/actions/alertActions';
 
 const MAX_TAGS = 500;
 
-export function fetchTags(orgId, projectId = null) {
+function tagFetchSuccess(tags) {
+  const trimmedTags = tags.slice(0, MAX_TAGS);
+
+  if (tags.length > MAX_TAGS) {
+    AlertActions.addAlert({
+      message: t('You have too many unique tags and some have been truncated'),
+      type: 'warn',
+    });
+  }
+  TagActions.loadTagsSuccess(trimmedTags);
+}
+
+/**
+ * Fetch tags for a single project
+ */
+export function fetchProjectTags(orgId, projectId) {
   TagStore.reset();
   TagActions.loadTags();
   const api = new Client();
-  const url = projectId
-    ? `/projects/${orgId}/${projectId}/tags/`
-    : `/organizations/${orgId}/tags/`;
-
-  api.request(url, {
-    success: tags => {
-      const trimmedTags = tags.slice(0, MAX_TAGS);
-
-      if (tags.length > MAX_TAGS) {
-        AlertActions.addAlert({
-          message: t('You have too many unique tags and some have been truncated'),
-          type: 'warn',
-        });
-      }
-      TagActions.loadTagsSuccess(trimmedTags);
-    },
-    error: TagActions.loadTagsError,
+  const url = `/projects/${orgId}/${projectId}/tags/`;
+
+  const promise = api.requestPromise(url);
+  promise.then(tagFetchSuccess, TagActions.loadTagsError);
+
+  return promise;
+}
+
+/**
+ * Fetch tags for an organization or a subset or projects.
+ */
+export function fetchTags(api, orgId, projectIds = null) {
+  TagStore.reset();
+  TagActions.loadTags();
+
+  const url = `/organizations/${orgId}/tags/`;
+  const query = projectIds ? {project: projectIds} : null;
+
+  const promise = api.requestPromise(url, {
+    method: 'GET',
+    query,
+  });
+  promise.then(tagFetchSuccess, TagActions.loadTagsError);
+
+  return promise;
+}
+
+/**
+ * Fetch tag values for an organization.
+ * The `projectIds` argument can be used to subset projects.
+ */
+export function fetchTagValues(api, orgId, tagKey, search = null, projectIds = null) {
+  const url = `/organizations/${orgId}/tags/${tagKey}/values/`;
+
+  const query = {};
+  if (search) {
+    query.query = search;
+  }
+  if (projectIds) {
+    query.project = projectIds;
+  }
+
+  return api.requestPromise(url, {
+    method: 'GET',
+    query,
   });
 }
 
-export function fetchTagValues(api, tagKey, orgId, projectId = null, query = null) {
-  const url = projectId
-    ? `/projects/${orgId}/${projectId}/tags/${tagKey}/values/`
-    : `/organizations/${orgId}/tags/${tagKey}/values/`;
+/**
+ * Fetch tag values for a single project
+ */
+export function fetchProjectTagValues(api, orgId, projectId, tagKey, query = null) {
+  const url = `/projects/${orgId}/${projectId}/tags/${tagKey}/values/`;
 
   if (query) {
     query = {query};
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index a3aefbae65..586858b392 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -17,7 +17,7 @@ import {extractSelectionParameters} from 'app/components/organizations/globalSel
 import Pagination from 'app/components/pagination';
 import {Panel, PanelBody} from 'app/components/panels';
 import StreamGroup from 'app/components/stream/group';
-import {fetchTags} from 'app/actionCreators/tags';
+import {fetchTags, fetchTagValues} from 'app/actionCreators/tags';
 import {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';
 import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
 import ConfigStore from 'app/stores/configStore';
@@ -96,7 +96,7 @@ const OrganizationStream = createReactClass({
       success: this.onRealtimePoll,
     });
 
-    fetchTags(this.props.organization.slug);
+    this.fetchTags();
     this.fetchMemberList();
 
     // Start by getting searches first so if the user is on a saved search
@@ -120,10 +120,11 @@ const OrganizationStream = createReactClass({
       }
     }
 
-    // If the project selection has changed reload the member list
-    // allowing autocomplete to be more accurate.
+    // If the project selection has changed reload the member list and tag keys
+    // allowing autocomplete and tag sidebar to be more accurate.
     if (!isEqual(prevProps.selection.projects, this.props.selection.projects)) {
       this.fetchMemberList();
+      this.fetchTags();
     }
 
     const prevQuery = prevProps.location.query;
@@ -236,6 +237,11 @@ const OrganizationStream = createReactClass({
     });
   },
 
+  fetchTags() {
+    const {organization, selection} = this.props;
+    fetchTags(this.api, organization.slug, selection.projects);
+  },
+
   fetchData() {
     GroupStore.loadInitialData([]);
 
@@ -600,6 +606,13 @@ const OrganizationStream = createReactClass({
     );
   },
 
+  tagValueLoader(key, search) {
+    const {orgId} = this.props.params;
+    const projectIds = this.getGlobalSearchProjects().map(p => p.id);
+
+    return fetchTagValues(this.api, orgId, key, search, projectIds);
+  },
+
   render() {
     if (this.state.savedSearchLoading) {
       return this.renderLoading();
@@ -618,19 +631,19 @@ const OrganizationStream = createReactClass({
     let hasReleases = false;
     let projectId = null;
     let latestRelease = null;
+
     const {selectedProject} = this.state;
+    const projects = this.getGlobalSearchProjects();
+
     if (selectedProject) {
       const features = new Set(selectedProject.features);
       hasReleases = features.has('releases');
       latestRelease = selectedProject.latestRelease;
       projectId = selectedProject.slug;
-    } else {
+    } else if (projects.length == 1) {
       // If the user has filtered down to a single project
       // we can hint the autocomplete/savedsearch picker with that.
-      const projects = this.getGlobalSearchProjects();
-      if (projects.length === 1) {
-        projectId = projects[0].slug;
-      }
+      projectId = projects[0].slug;
     }
 
     return (
@@ -652,6 +665,7 @@ const OrganizationStream = createReactClass({
             onSidebarToggle={this.onSidebarToggle}
             isSearchDisabled={this.state.isSidebarVisible}
             savedSearchList={this.state.savedSearchList}
+            tagValueLoader={this.tagValueLoader}
           />
 
           <Panel>
@@ -686,6 +700,7 @@ const OrganizationStream = createReactClass({
           query={query}
           onQueryChange={this.onSearch}
           orgId={params.orgId}
+          tagValueLoader={this.tagValueLoader}
         />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index cfc91b0962..f2054e18d7 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -26,6 +26,7 @@ class StreamFilters extends React.Component {
     onSidebarToggle: PropTypes.func,
     onSavedSearchCreate: PropTypes.func.isRequired,
     onSavedSearchSelect: PropTypes.func.isRequired,
+    tagValueLoader: PropTypes.func.isRequired,
   };
 
   static contextTypes = {
@@ -59,6 +60,7 @@ class StreamFilters extends React.Component {
       onSavedSearchCreate,
       onSavedSearchSelect,
       onSortChange,
+      tagValueLoader,
     } = this.props;
 
     return (
@@ -86,12 +88,12 @@ class StreamFilters extends React.Component {
 
               <SearchBar
                 orgId={orgId}
-                projectId={projectId}
                 query={query || ''}
                 onSearch={onSearch}
                 disabled={isSearchDisabled}
                 excludeEnvironment={true}
                 supportedTags={TagStore.getAllTags()}
+                tagValueLoader={tagValueLoader}
               />
               <a
                 className="btn btn-default toggle-stream-sidebar"
diff --git a/src/sentry/static/sentry/app/views/stream/index.jsx b/src/sentry/static/sentry/app/views/stream/index.jsx
index fa0e62c413..fb960a6ef5 100644
--- a/src/sentry/static/sentry/app/views/stream/index.jsx
+++ b/src/sentry/static/sentry/app/views/stream/index.jsx
@@ -9,7 +9,7 @@ import ProjectState from 'app/mixins/projectState';
 import TagStore from 'app/stores/tagStore';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
 import Stream from 'app/views/stream/stream';
-import {fetchTags} from 'app/actionCreators/tags';
+import {fetchProjectTags} from 'app/actionCreators/tags';
 
 const StreamContainer = createReactClass({
   displayName: 'StreamContainer',
@@ -30,7 +30,7 @@ const StreamContainer = createReactClass({
   componentWillMount() {
     const {orgId, projectId} = this.props.params;
     this.props.setProjectNavSection('stream');
-    fetchTags(orgId, projectId);
+    fetchProjectTags(orgId, projectId);
   },
 
   onTagsChange(tags) {
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index aed24fecc9..0ce9030ed7 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -3,7 +3,6 @@ import React from 'react';
 
 import {t} from 'app/locale';
 import SmartSearchBar from 'app/components/smartSearchBar';
-import {fetchTagValues} from 'app/actionCreators/tags';
 import TagStore from 'app/stores/tagStore';
 import withApi from 'app/utils/withApi';
 
@@ -54,8 +53,7 @@ class SearchBar extends React.Component {
   static propTypes = {
     api: PropTypes.object,
     orgId: PropTypes.string.isRequired,
-    // Optional to enable project scope search
-    projectId: PropTypes.string,
+    tagValueLoader: PropTypes.func.isRequired,
   };
 
   /**
@@ -63,9 +61,9 @@ class SearchBar extends React.Component {
    * with data when ready
    */
   getTagValues = (tag, query) => {
-    const {api, orgId, projectId} = this.props;
+    const {tagValueLoader} = this.props;
 
-    return fetchTagValues(api, tag.key, orgId, projectId, query).then(
+    return tagValueLoader(tag.key, query).then(
       values => values.map(({value}) => value),
       () => {
         throw new Error('Unable to fetch project tags');
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 2379efc43b..595ecfaa6b 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -14,12 +14,12 @@ const StreamSidebar = createReactClass({
 
   propTypes: {
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string,
 
     tags: PropTypes.object.isRequired,
     query: PropTypes.string,
     onQueryChange: PropTypes.func.isRequired,
     loading: PropTypes.bool,
+    tagValueLoader: PropTypes.func.isRequired,
   },
 
   getDefaultProps() {
@@ -109,7 +109,7 @@ const StreamSidebar = createReactClass({
   },
 
   render() {
-    const {loading, orgId, projectId, tags} = this.props;
+    const {loading, orgId, tagValueLoader, tags} = this.props;
     return (
       <div className="stream-sidebar">
         {loading ? (
@@ -142,7 +142,7 @@ const StreamSidebar = createReactClass({
                   tag={tag}
                   onSelect={this.onSelectTag}
                   orgId={orgId}
-                  projectId={projectId}
+                  tagValueLoader={tagValueLoader}
                 />
               );
             })}
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index be1c1ae954..1c37cd0344 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -21,6 +21,7 @@ import ConfigStore from 'app/stores/configStore';
 import EnvironmentStore from 'app/stores/environmentStore';
 import ErrorRobot from 'app/components/errorRobot';
 import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
+import {fetchProjectTagValues} from 'app/actionCreators/tags';
 import GroupStore from 'app/stores/groupStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -654,6 +655,11 @@ const Stream = createReactClass({
     return body;
   },
 
+  tagValueLoader(key, search) {
+    const {orgId, projectId} = this.props.params;
+    return fetchProjectTagValues(this.api, orgId, projectId, key, search);
+  },
+
   render() {
     // global loading
     if (this.state.loading) {
@@ -689,6 +695,7 @@ const Stream = createReactClass({
             onSidebarToggle={this.onSidebarToggle}
             isSearchDisabled={this.state.isSidebarVisible}
             savedSearchList={this.state.savedSearchList}
+            tagValueLoader={this.tagValueLoader}
           />
           <Panel>
             <StreamActions
@@ -720,6 +727,7 @@ const Stream = createReactClass({
           onQueryChange={this.onSearch}
           orgId={params.orgId}
           projectId={params.projectId}
+          tagValueLoader={this.tagValueLoader}
         />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 76ab01cb7f..e336d0bb16 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -4,18 +4,15 @@ import React from 'react';
 
 import {Client} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
-import {fetchTagValues} from 'app/actionCreators/tags';
 import {t, tct} from 'app/locale';
 import SelectControl from 'app/components/forms/selectControl';
 
-// TODO(billy): Update to use SelectAutocomplete when it is ported to use react-select
 class StreamTagFilter extends React.Component {
   static propTypes = {
     tag: PropTypes.object.isRequired,
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string,
     value: PropTypes.string,
     onSelect: PropTypes.func,
+    tagValueLoader: PropTypes.func.isRequired,
   };
 
   static tagValueToSelectFormat = ({value}) => {
@@ -56,16 +53,20 @@ class StreamTagFilter extends React.Component {
   }
 
   handleLoadOptions = () => {
-    const {orgId, projectId, tag} = this.props;
+    const {tag, tagValueLoader} = this.props;
     const {textValue} = this.state;
-    if (tag.isInput || tag.predefined) return;
-    if (!this.api) return;
+    if (tag.isInput || tag.predefined) {
+      return;
+    }
+    if (!this.api) {
+      return;
+    }
 
     this.setState({
       isLoading: true,
     });
 
-    fetchTagValues(this.api, tag.key, orgId, projectId, textValue)
+    tagValueLoader(tag.key, textValue)
       .then(resp => {
         this.setState({
           isLoading: false,
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 68d18996fa..0c6371a8ed 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -276,11 +276,34 @@ describe('OrganizationStream', function() {
       };
       wrapper.setProps({selection});
       wrapper.update();
-
       expect(fetchMembersRequest).toHaveBeenCalledTimes(2);
     });
   });
 
+  describe('componentDidUpdate fetching tags', function() {
+    beforeEach(function() {
+      wrapper = shallow(<OrganizationStream {...props} />, {
+        disableLifecycleMethods: false,
+      });
+      wrapper.instance().fetchData = jest.fn();
+    });
+
+    it('fetches tags on project change', function() {
+      // Called during componentDidMount
+      expect(fetchTagsRequest).toHaveBeenCalledTimes(1);
+
+      const selection = {
+        projects: [99],
+        environments: [],
+        datetime: {period: '24h'},
+      };
+      wrapper.setProps({selection});
+      wrapper.update();
+
+      expect(fetchTagsRequest).toHaveBeenCalledTimes(2);
+    });
+  });
+
   describe('processingIssues', function() {
     beforeEach(function() {
       wrapper = shallow(<OrganizationStream {...props} />);
diff --git a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
index 0d95f366bc..a57e87a9f6 100644
--- a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
+++ b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
@@ -43,6 +43,7 @@ exports[`Stream render() displays the group list 1`] = `
       }
       searchId={null}
       sort="date"
+      tagValueLoader={[Function]}
     />
     <Panel>
       <StreamActions
@@ -166,6 +167,7 @@ exports[`Stream render() displays the group list 1`] = `
     orgId="org-slug"
     projectId="project-slug"
     query="is:unresolved"
+    tagValueLoader={[Function]}
     tags={
       Object {
         "assigned": Object {
@@ -285,6 +287,7 @@ exports[`Stream toggles environment select all environments 1`] = `
       }
       searchId={null}
       sort="date"
+      tagValueLoader={[Function]}
     />
     <Panel>
       <StreamActions
@@ -408,6 +411,7 @@ exports[`Stream toggles environment select all environments 1`] = `
     orgId="org-slug"
     projectId="project-slug"
     query="is:unresolved"
+    tagValueLoader={[Function]}
     tags={
       Object {
         "assigned": Object {
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index b97882ea89..c369d5b79c 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -7,8 +7,7 @@ import TagStore from 'app/stores/tagStore';
 describe('SearchBar', function() {
   let sandbox;
   let options;
-  let projectTagValuesMock;
-  let orgTagValuesMock;
+  let tagValuePromise;
   let supportedTags;
   const clickInput = searchBar => searchBar.find('input[name="query"]').simulate('click');
 
@@ -23,13 +22,8 @@ describe('SearchBar', function() {
       context: {organization: {id: '123'}},
     };
 
-    projectTagValuesMock = MockApiClient.addMockResponse({
-      url: '/projects/123/456/tags/url/values/',
-      body: [],
-    });
-    orgTagValuesMock = MockApiClient.addMockResponse({
-      url: '/organizations/123/tags/url/values/',
-      body: [],
+    tagValuePromise = new Promise(function(resolve, reject) {
+      return resolve([]);
     });
   });
 
@@ -49,10 +43,15 @@ describe('SearchBar', function() {
     });
 
     it('sets state with complete tag', function() {
+      const loader = (key, value) => {
+        expect(key).toEqual('url');
+        expect(value).toEqual('fu');
+        return tagValuePromise;
+      };
       const props = {
         orgId: '123',
-        projectId: '456',
         query: 'url:"fu"',
+        tagValueLoader: loader,
         supportedTags,
       };
       const searchBar = mount(<SearchBar {...props} />, options);
@@ -60,17 +59,20 @@ describe('SearchBar', function() {
       clock.tick(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
       expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
-      expect(projectTagValuesMock).toHaveBeenCalledWith(
-        '/projects/123/456/tags/url/values/',
-        expect.objectContaining({query: {query: 'fu'}})
-      );
     });
 
     it('sets state when value has colon', function() {
+      const loader = (key, value) => {
+        expect(key).toEqual('url');
+        expect(value).toEqual('http://example.com');
+        return tagValuePromise;
+      };
+
       const props = {
         orgId: '123',
         projectId: '456',
         query: 'url:"http://example.com"',
+        tagValueLoader: loader,
         supportedTags,
       };
 
@@ -82,49 +84,23 @@ describe('SearchBar', function() {
       );
       expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
       clock.tick(301);
-
-      expect(projectTagValuesMock).toHaveBeenCalledWith(
-        '/projects/123/456/tags/url/values/',
-        expect.objectContaining({query: {query: 'http://example.com'}})
-      );
-      expect(orgTagValuesMock).not.toHaveBeenCalled();
     });
 
     it('does not request values when tag is `timesSeen`', function() {
       // This should never get called
-      const mock = MockApiClient.addMockResponse({
-        url: '/projects/123/456/tags/timesSeen/values/',
-        body: [],
-      });
+      const loader = jest.fn(x => x);
+
       const props = {
         orgId: '123',
         projectId: '456',
         query: 'timesSeen:',
+        tagValueLoader: loader,
         supportedTags,
       };
       const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
       clock.tick(301);
-      expect(mock).not.toHaveBeenCalled();
-    });
-
-    it('sets state with complete tag when there is no projectid', function() {
-      const props = {
-        orgId: '123',
-        query: 'url:"fu"',
-        supportedTags,
-      };
-      const searchBar = mount(<SearchBar {...props} />, options);
-      clickInput(searchBar);
-      clock.tick(301);
-      expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
-      expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
-
-      expect(projectTagValuesMock).not.toHaveBeenCalled();
-      expect(orgTagValuesMock).toHaveBeenCalledWith(
-        '/organizations/123/tags/url/values/',
-        expect.objectContaining({query: {query: 'fu'}})
-      );
+      expect(loader).not.toHaveBeenCalled();
     });
   });
 });
diff --git a/tests/js/spec/views/stream/tagFilter.spec.jsx b/tests/js/spec/views/stream/tagFilter.spec.jsx
index e0bf754b7c..7a916843fb 100644
--- a/tests/js/spec/views/stream/tagFilter.spec.jsx
+++ b/tests/js/spec/views/stream/tagFilter.spec.jsx
@@ -1,46 +1,31 @@
 import React from 'react';
-
 import {mount} from 'enzyme';
+
 import StreamTagFilter from 'app/views/stream/tagFilter';
 
 describe('Stream TagFilter', function() {
-  let projectApiMock;
-  let orgApiMock;
-
-  let organization;
+  let tagValueLoader;
   let project;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
-    organization = TestStubs.Organization();
     project = TestStubs.ProjectDetails();
-    projectApiMock = MockApiClient.addMockResponse({
-      url: `/projects/${organization.slug}/${project.slug}/tags/browser/values/`,
-      body: [
-        {
-          count: 0,
-          firstSeen: '2018-05-30T11:33:46.535Z',
-          key: 'browser',
-          lastSeen: '2018-05-30T11:33:46.535Z',
-          name: 'foo',
-          value: 'foo',
-        },
-      ],
-    });
 
-    orgApiMock = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/tags/browser/values/`,
-      body: [
-        {
-          count: 0,
-          firstSeen: '2018-05-30T11:33:46.535Z',
-          key: 'browser',
-          lastSeen: '2018-05-30T11:33:46.535Z',
-          name: 'foo',
-          value: 'foo',
-        },
-      ],
-    });
+    tagValueLoader = (key, search) => {
+      return new Promise(function(resolve, reject) {
+        const data = [
+          {
+            count: 0,
+            firstSeen: '2018-05-30T11:33:46.535Z',
+            key: 'browser',
+            lastSeen: '2018-05-30T11:33:46.535Z',
+            name: 'foo',
+            value: 'foo',
+          },
+        ];
+        return resolve(data);
+      });
+    };
   });
 
   it('calls API and renders options when opened', async function() {
@@ -49,10 +34,10 @@ describe('Stream TagFilter', function() {
     const wrapper = mount(
       <StreamTagFilter
         tag={tag}
-        orgId={organization.slug}
         projectId={project.slug}
         value=""
         onSelect={selectMock}
+        tagValueLoader={tagValueLoader}
       />
     );
 
@@ -62,7 +47,6 @@ describe('Stream TagFilter', function() {
     await tick();
     wrapper.update();
 
-    expect(projectApiMock).toHaveBeenCalled();
     expect(wrapper.find('div.Select-option').prop('children')).toBe('foo');
 
     wrapper.find('Option').simulate('mouseDown');
@@ -75,9 +59,9 @@ describe('Stream TagFilter', function() {
     const wrapper = mount(
       <StreamTagFilter
         tag={tag}
-        orgId={organization.slug}
         value=""
         onSelect={selectMock}
+        tagValueLoader={tagValueLoader}
       />
     );
 
@@ -87,7 +71,6 @@ describe('Stream TagFilter', function() {
     await tick();
     wrapper.update();
 
-    expect(orgApiMock).toHaveBeenCalled();
     expect(wrapper.find('div.Select-option').prop('children')).toBe('foo');
 
     wrapper.find('Option').simulate('mouseDown');
