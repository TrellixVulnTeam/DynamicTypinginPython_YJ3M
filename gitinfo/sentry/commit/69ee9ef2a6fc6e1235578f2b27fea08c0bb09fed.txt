commit 69ee9ef2a6fc6e1235578f2b27fea08c0bb09fed
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 7 18:10:12 2013 -0800

    Better handling of context when missing outer/inner in stacktraces

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index dcbb0d420e..08910f9d2f 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -383,6 +383,53 @@ class Stacktrace(Interface):
 
         return newest_first
 
+    def get_frame_context(self, frame, event, is_public=False, **kwargs):
+        if (frame.get('context_line') and frame.get('lineno') is not None
+            and (frame.get('pre_context') or frame.get('post_context'))):
+            context = get_context(
+                lineno=frame['lineno'],
+                context_line=frame['context_line'],
+                pre_context=frame.get('pre_context'),
+                post_context=frame.get('post_context'),
+                filename=frame.get('abs_path') or frame.get('filename') or frame.get('module'),
+                format=True,
+            )
+            start_lineno = context[0][0]
+        else:
+            context = []
+            start_lineno = None
+
+        if frame.get('lineno') is not None:
+            lineno = int(frame['lineno'])
+        else:
+            lineno = None
+
+        in_app = bool(frame.get('in_app', True))
+
+        frame_data = {
+            'abs_path': frame.get('abs_path'),
+            'filename': frame.get('filename'),
+            'module': frame.get('module'),
+            'function': frame.get('function'),
+            'start_lineno': start_lineno,
+            'lineno': lineno,
+            'context': context,
+            'context_line': frame.get('context_line'),
+            'in_app': in_app,
+        }
+        if not is_public:
+            frame_data['vars'] = frame.get('vars') or []
+
+        if event.platform == 'javascript' and frame.get('data'):
+            data = frame['data']
+            frame_data.update({
+                'sourcemap': data['sourcemap'].rsplit('/', 1)[-1],
+                'orig_filename': data['orig_filename'],
+                'orig_lineno': data['orig_lineno'],
+                'orig_colno': data['orig_colno'],
+            })
+        return frame_data
+
     def to_html(self, event, is_public=False, **kwargs):
         if not self.frames:
             return ''
@@ -390,52 +437,11 @@ class Stacktrace(Interface):
         system_frames = 0
         frames = []
         for frame in self.frames:
-            if frame.get('context_line') and frame.get('lineno') is not None:
-                context = get_context(
-                    lineno=frame['lineno'],
-                    context_line=frame['context_line'],
-                    pre_context=frame.get('pre_context'),
-                    post_context=frame.get('post_context'),
-                    filename=frame.get('abs_path') or frame.get('filename') or frame.get('module'),
-                    format=True,
-                )
-                start_lineno = context[0][0]
-            else:
-                context = []
-                start_lineno = None
-
-            if frame.get('lineno') is not None:
-                lineno = int(frame['lineno'])
-            else:
-                lineno = None
-
-            in_app = bool(frame.get('in_app', True))
-
-            frame_data = {
-                'abs_path': frame.get('abs_path'),
-                'filename': frame.get('filename'),
-                'module': frame.get('module'),
-                'function': frame.get('function'),
-                'start_lineno': start_lineno,
-                'lineno': lineno,
-                'context': context,
-                'in_app': in_app,
-            }
-            if not is_public:
-                frame_data['vars'] = frame.get('vars') or []
-
-            if event.platform == 'javascript' and frame.get('data'):
-                data = frame['data']
-                frame_data.update({
-                    'sourcemap': data['sourcemap'].rsplit('/', 1)[-1],
-                    'orig_filename': data['orig_filename'],
-                    'orig_lineno': data['orig_lineno'],
-                    'orig_colno': data['orig_colno'],
-                })
+            frame_data = self.get_frame_context(frame, event=event, is_public=is_public)
 
             frames.append(frame_data)
 
-            if not in_app:
+            if not frame.get('in_app'):
                 system_frames += 1
 
         if len(frames) == system_frames:
diff --git a/src/sentry/templates/sentry/partial/interfaces/stacktrace.html b/src/sentry/templates/sentry/partial/interfaces/stacktrace.html
index 2a3d1fe1c4..0cd5d9704b 100644
--- a/src/sentry/templates/sentry/partial/interfaces/stacktrace.html
+++ b/src/sentry/templates/sentry/partial/interfaces/stacktrace.html
@@ -52,6 +52,10 @@
                             <li{% if num == frame.lineno %} class="active"{% else %} class="expandable"{% endif %} onclick="$('.frame-{{ forloop.parentloop.counter0 }}').toggleClass('expanded')">{{ line }}</li>
                         {% endfor %}
                         </ol>
+                    {% elif frame.context_line %}
+                        <ol start="{{ frame.lineno }}" class="context">
+                            <li class="active">{{ frame.context_line }}</li>
+                        </ol>
                     {% endif %}
 
                     {% if frame.vars %}
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 56afea7b4c..0a10debece 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -125,8 +125,8 @@ class StacktraceTest(TestCase):
         get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=5)
         self.assertEquals(result, get_stacktrace.return_value)
 
-    @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
     @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
     def test_get_traceback_response(self, get_stacktrace):
         event = mock.Mock(spec=Event())
         event.message = 'foo'
@@ -136,18 +136,20 @@ class StacktraceTest(TestCase):
         get_stacktrace.assert_called_once_with(event, newest_first=None)
         self.assertEquals(result, 'foo\n\nbar')
 
+    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     @mock.patch('sentry.interfaces.Stacktrace.get_traceback')
     @mock.patch('sentry.interfaces.render_to_string')
-    @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
-    def test_to_html_render_call(self, render_to_string, get_traceback):
+    @mock.patch('sentry.interfaces.Stacktrace.get_frame_context')
+    def test_to_html_render_call(self, get_frame_context, render_to_string, get_traceback):
         event = mock.Mock(spec=Event())
         get_traceback.return_value = 'bar'
         interface = Stacktrace(frames=[{'lineno': 1, 'filename': 'foo.py'}])
         result = interface.to_html(event)
         get_traceback.assert_called_once_with(event, newest_first=False)
+        get_frame_context.assert_called_once_with(interface.frames[0], event=event, is_public=False)
         render_to_string.assert_called_once_with('sentry/partial/interfaces/stacktrace.html', {
             'event': event,
-            'frames': [{'function': None, 'abs_path': None, 'start_lineno': None, 'lineno': 1, 'context': [], 'vars': [], 'in_app': True, 'filename': 'foo.py'}],
+            'frames': [get_frame_context.return_value],
             'stacktrace': 'bar',
             'system_frames': 0,
             'newest_first': False,
@@ -155,8 +157,8 @@ class StacktraceTest(TestCase):
         })
         self.assertEquals(result, render_to_string.return_value)
 
-    @mock.patch('sentry.interfaces.Stacktrace.get_traceback')
     @mock.patch('sentry.interfaces.Stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch('sentry.interfaces.Stacktrace.get_traceback')
     def test_to_html_response(self, get_traceback):
         event = mock.Mock(spec=Event())
         event.message = 'foo'
