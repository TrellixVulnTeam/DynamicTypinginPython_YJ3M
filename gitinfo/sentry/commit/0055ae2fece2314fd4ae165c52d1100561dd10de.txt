commit 0055ae2fece2314fd4ae165c52d1100561dd10de
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue May 7 15:43:54 2019 -0700

    feat(incidents): Add status UI (#13069)

diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
index b55a7f3531..a481f86d65 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
@@ -14,7 +14,8 @@ import {PageContent, PageHeader} from 'app/styles/organization';
 import PageHeading from 'app/components/pageHeading';
 import BetaTag from 'app/components/betaTag';
 import space from 'app/styles/space';
-import {getStatus} from '../utils';
+
+import Status from '../status';
 
 const DEFAULT_QUERY_STATUS = 'unresolved';
 
@@ -41,7 +42,7 @@ class OrganizationIncidentsBody extends AsyncComponent {
           <Link to={`/organizations/${orgId}/incidents/${incident.identifier}/`}>
             {incident.title}
           </Link>
-          <div>{getStatus(incident.status)}</div>
+          <Status incident={incident} />
           <div>{incident.duration}</div>
           <div>{incident.usersAffected}</div>
           <div>{incident.eventCount}</div>
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
new file mode 100644
index 0000000000..e52c134573
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
@@ -0,0 +1,38 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import InlineSvg from 'app/components/inlineSvg';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+
+import {isResolved} from './utils';
+
+export default class Status extends React.Component {
+  static propTypes = {
+    incident: SentryTypes.Incident.isRequired,
+  };
+
+  render() {
+    const isIncidentResolved = isResolved(this.props.incident);
+
+    const icon = isIncidentResolved ? 'icon-circle-check' : 'icon-circle-exclamation';
+    const text = isIncidentResolved ? 'Resolved' : 'Active';
+
+    return (
+      <Container>
+        <Icon src={icon} isResolved={isIncidentResolved} />
+        {text}
+      </Container>
+    );
+  }
+}
+
+const Container = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const Icon = styled(InlineSvg)`
+  color: ${p => (p.isResolved ? p.theme.success : p.theme.error)};
+  margin-right: ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
index af5af3930d..1233b1e203 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
@@ -11,14 +11,20 @@ export function updateSubscription(api, orgId, incidentId, isSubscribed) {
   });
 }
 
-export function getStatus(status) {
-  switch (status) {
-    case 1:
-      return 'created';
-    case 2:
-      return 'closed';
-    case 0:
+/**
+ * Is incident resolved?
+ *
+ * @param {Object} incident Incident object
+ * @returns {Boolean}
+ */
+
+export function isResolved(incident) {
+  switch (incident.status) {
+    case 2: // closed
+      return true;
+    case 0: // detected
+    case 1: // created
     default:
-      return 'detected';
+      return false;
   }
 }
