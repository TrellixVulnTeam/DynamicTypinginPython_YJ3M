commit 722225c653e7559a5fc264f1762e9f7f44b84b5a
Author: Chris Fuller <cfuller@sentry.io>
Date:   Tue Oct 8 17:43:15 2019 -0400

    fix(api): Support new query tags[x] syntax (#14885)
    
    Adding explicit tag syntax, and surrounding tests.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index ab88a80212..47c35b547d 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -91,7 +91,7 @@ search               = (boolean_term / paren_term / search_term)*
 boolean_term         = (paren_term / search_term) space? (boolean_operator space? (paren_term / search_term) space?)+
 paren_term           = space? open_paren space? (paren_term / boolean_term)+ space? closed_paren space?
 search_term          = key_val_term / quoted_raw_search / raw_search
-key_val_term         = space? (time_filter / rel_time_filter / specific_time_filter
+key_val_term         = space? (tag_filter / time_filter / rel_time_filter / specific_time_filter
                        / numeric_filter / has_filter / is_filter / basic_filter)
                        space?
 raw_search           = (!key_val_term ~r"\ *([^\ ^\n ()]+)\ *" )*
@@ -111,6 +111,7 @@ numeric_filter       = search_key sep operator? ~r"[0-9]+(?=\s|$)"
 # has filter for not null type checks
 has_filter           = negation? "has" sep (search_key / search_value)
 is_filter            = negation? "is" sep search_value
+tag_filter            = negation? "tags[" search_key "]" sep search_value
 
 search_key           = key / quoted_key
 search_value         = quoted_value / value
@@ -190,12 +191,17 @@ class SearchKey(namedtuple("SearchKey", "name")):
         snuba_name = SEARCH_MAP.get(self.name)
         if snuba_name:
             return snuba_name
-        # assume custom tag if not listed
-        return "tags[%s]" % (self.name,)
+
+        # assume custom tag if not matched above, and add tags[xxx] wrapper if not present.
+        match = TAG_KEY_RE.match(self.name)
+        if match:
+            return self.name
+        else:
+            return "tags[%s]" % (self.name,)
 
     @cached_property
     def is_tag(self):
-        return self.name not in SEARCH_MAP
+        return TAG_KEY_RE.match(self.name) or self.name not in SEARCH_MAP
 
 
 class SearchValue(namedtuple("SearchValue", "raw_value")):
@@ -455,9 +461,13 @@ class SearchVisitor(NodeVisitor):
             )
 
         operator = "=" if self.is_negated(negation) else "!="
-
         return SearchFilter(search_key, operator, SearchValue(""))
 
+    def visit_tag_filter(self, node, children):
+        (negation, _, search_key, _, sep, search_value) = children
+        operator = "!=" if self.is_negated(negation) else "="
+        return SearchFilter(SearchKey(u"tags[%s]" % (search_key.name)), operator, search_value)
+
     def visit_is_filter(self, node, children):
         raise InvalidSearchQuery('"is" queries are not supported on this search')
 
@@ -645,7 +655,6 @@ def get_snuba_query_args(query=None, params=None):
             if term.key.name == PROJECT_KEY:
                 condition = ["project_id", "=", projects.get(term.value.value)]
                 kwargs["conditions"].append(condition)
-
             elif snuba_name in ("start", "end"):
                 kwargs[snuba_name] = term.value.value
             elif snuba_name in ("project_id", "issue"):
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index 36698f79e5..932e01ceb0 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -84,7 +84,6 @@ def build_query_params_from_request(request, organization, projects, environment
             query_kwargs["cursor"] = Cursor.from_string(request.GET.get("cursor"))
         except ValueError:
             raise ParseError(detail="Invalid cursor parameter.")
-
     query = request.GET.get("query", "is:unresolved").strip()
     if query:
         try:
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index de2cadd5c7..26a824e2db 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -407,6 +407,23 @@ class ParseSearchQueryTest(unittest.TestCase):
             ),
         ]
 
+    def test_custom_explicit_tag(self):
+        assert parse_search_query("tags[fruit]:apple release:1.2.1 tags[project_id]:123") == [
+            SearchFilter(
+                key=SearchKey(name="tags[fruit]"),
+                operator="=",
+                value=SearchValue(raw_value="apple"),
+            ),
+            SearchFilter(
+                key=SearchKey(name="release"), operator="=", value=SearchValue(raw_value="1.2.1")
+            ),
+            SearchFilter(
+                key=SearchKey(name="tags[project_id]"),
+                operator="=",
+                value=SearchValue(raw_value="123"),
+            ),
+        ]
+
     def test_has_tag(self):
         # unquoted key
         assert parse_search_query("has:release") == [
@@ -857,6 +874,22 @@ class GetSnubaQueryArgsTest(TestCase):
             "filter_keys": {},
         }
 
+    def test_implicit_and_explicit_tags(self):
+        assert get_snuba_query_args("tags[fruit]:apple") == {
+            "conditions": [[["ifNull", ["tags[fruit]", "''"]], "=", "apple"]],
+            "filter_keys": {},
+        }
+
+        assert get_snuba_query_args("fruit:apple") == {
+            "conditions": [[["ifNull", ["tags[fruit]", "''"]], "=", "apple"]],
+            "filter_keys": {},
+        }
+
+        assert get_snuba_query_args("tags[project_id]:123") == {
+            "conditions": [[["ifNull", ["tags[project_id]", "''"]], "=", "123"]],
+            "filter_keys": {},
+        }
+
     def test_no_search(self):
         assert get_snuba_query_args(
             params={
