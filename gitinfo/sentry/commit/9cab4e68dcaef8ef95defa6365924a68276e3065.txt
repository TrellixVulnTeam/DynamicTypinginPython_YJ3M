commit 9cab4e68dcaef8ef95defa6365924a68276e3065
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue May 1 16:16:23 2018 -0700

    feat(integrations): Add support for atlassian connect for JIRA (#8202)
    
    * feat(integrations): Add JIRA descriptor and installation endpoints
    
    * feat(integrations): Add configuration flow for linking sentry orgs to JIRA
    
    * fix: Add PyJWT dependency
    
    * feat(integrations): Add jira to list of integrations
    
    * feat: Feature flag new jira integration
    
    * pr feedback

diff --git a/requirements-base.txt b/requirements-base.txt
index bc30838ce3..07cf068a46 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -33,6 +33,7 @@ petname>=2.0,<2.1
 Pillow>=3.2.0,<=4.2.1
 progressbar2>=3.10,<3.11
 psycopg2>=2.6.0,<2.8.0
+PyJWT>=1.5.0,<1.6.0
 pytest>=3.5.0,<3.6.0
 pytest-django>=2.9.1,<2.10.0
 pytest-html>=1.9.0,<1.10.0
diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
index aa3805ed5b..5ac1243f61 100644
--- a/src/sentry/api/endpoints/organization_config_integrations.py
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -19,6 +19,7 @@ class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
                     'name': provider.name,
                     'metadata': metadata,
                     'config': provider.get_config(),
+                    'canAdd': provider.can_add,
                     'setupDialog': dict(
                         url='/organizations/{}/integrations/{}/setup/'.format(
                             organization.slug,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ea9dd756e1..80418dd69f 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1236,6 +1236,7 @@ SENTRY_USE_X_FORWARDED_FOR = True
 
 SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.slack.SlackIntegration',
+    'sentry.integrations.jira.JiraIntegration',
 )
 
 
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 2d7ea01fd8..81aabe7e36 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -37,7 +37,7 @@ class Integration(PipelineProvider):
     # a human readable name (e.g. 'Slack')
     name = None
 
-    # an IntegrationMetadata object, used to provider extra details in the
+    # an IntegrationMetadata object, used to provide extra details in the
     # configuration interface of the integration.
     metadata = None
 
@@ -47,6 +47,9 @@ class Integration(PipelineProvider):
         'height': 600,
     }
 
+    # whether or not the integration installation be initiated from Sentry
+    can_add = True
+
     def get_logger(self):
         return logging.getLogger('sentry.integration.%s' % (self.key, ))
 
diff --git a/src/sentry/integrations/jira/__init__.py b/src/sentry/integrations/jira/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/jira/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/jira/configure.py b/src/sentry/integrations/jira/configure.py
new file mode 100644
index 0000000000..95533cb1ad
--- /dev/null
+++ b/src/sentry/integrations/jira/configure.py
@@ -0,0 +1,56 @@
+from __future__ import absolute_import
+
+from django import forms
+
+from .utils import get_integration_from_request, JiraValidationError
+from sentry.web.frontend.base import BaseView
+from sentry.web.helpers import render_to_response
+
+
+# TODO(jess): support linking a single JIRA instance to multiple orgs
+class JiraConfigForm(forms.Form):
+    organization = forms.ChoiceField(
+        label='Sentry Organization',
+        choices=tuple(),
+        widget=forms.Select(attrs={'class': 'select'})
+    )
+
+    def __init__(self, organizations, *args, **kwargs):
+        super(JiraConfigForm, self).__init__(*args, **kwargs)
+        self.fields['organization'].choices = organizations
+
+
+class JiraConfigureView(BaseView):
+
+    def get_response(self, context):
+        context['ac_js_src'] = '%(base_url)s%(context_path)s/atlassian-connect/all.js' % {
+            'base_url': self.request.GET['xdm_e'],
+            'context_path': self.request.GET.get('cp', ''),
+        }
+        res = render_to_response('sentry/jira-configure.html', context, self.request)
+        res['X-Frame-Options'] = 'ALLOW-FROM %s' % self.request.GET['xdm_e']
+        return res
+
+    def handle(self, request):
+        try:
+            integration = get_integration_from_request(request)
+        except JiraValidationError:
+            return self.get_response({'error_message': 'Unable to verify installation.'})
+
+        # TODO(jess): restrict to org owners?
+        org_choices = [(o.id, o.name) for o in request.user.get_orgs()]
+
+        if request.method == 'GET':
+            form = JiraConfigForm(org_choices)
+        else:
+            form = JiraConfigForm(org_choices, request.POST)
+            if form.is_valid():
+                organization_id = form.cleaned_data['organization']
+                added = integration.add_organization(organization_id)
+                if not added:
+                    return self.get_response({
+                        'error_message': 'That Sentry organization is already linked.',
+                        'form': form,
+                    })
+
+        return self.get_response({'form': form})
diff --git a/src/sentry/integrations/jira/descriptor.py b/src/sentry/integrations/jira/descriptor.py
new file mode 100644
index 0000000000..33d143a209
--- /dev/null
+++ b/src/sentry/integrations/jira/descriptor.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from six.moves.urllib.parse import urlparse
+
+from sentry.api.base import Endpoint
+from sentry.utils.http import absolute_uri
+
+
+JIRA_KEY = '%s.jira' % (urlparse(absolute_uri()).hostname, )
+
+
+class JiraDescriptorEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    def get(self, request):
+        return self.respond(
+            {
+                'name': 'Sentry',
+                'description': 'Sentry',
+                'key': JIRA_KEY,
+                'baseUrl': absolute_uri(),
+                'vendor': {
+                    'name': 'Sentry',
+                    'url': 'https://sentry.io'
+                },
+                'authentication': {
+                    'type': 'jwt'
+                },
+                'lifecycle': {
+                    'installed': '/extensions/jira/installed/',
+                    'uninstalled': '/extensions/jira/uninstalled/',
+                },
+                'apiVersion': 1,
+                'modules': {
+                    'configurePage': {
+                        'url': '/extensions/jira/configure',
+                        'name': {
+                            'value': 'Configure Sentry Add-on'
+                        },
+                        'key': 'configure-sentry'
+                    },
+                },
+                'scopes': [
+                    'read',
+                    'write',
+                    'act_as_user',
+                ]
+            }
+        )
diff --git a/src/sentry/integrations/jira/installed.py b/src/sentry/integrations/jira/installed.py
new file mode 100644
index 0000000000..33646e542f
--- /dev/null
+++ b/src/sentry/integrations/jira/installed.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+
+from django.db import IntegrityError, transaction
+from django.views.decorators.csrf import csrf_exempt
+
+from sentry.api.base import Endpoint
+from sentry.models import Integration
+
+
+class JiraInstalledEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(JiraInstalledEndpoint, self).dispatch(request, *args, **kwargs)
+
+    def post(self, request, *args, **kwargs):
+        data = request.DATA
+        # TODO(jess): Handle updating existing integration
+        try:
+            with transaction.atomic():
+                Integration.objects.create(
+                    provider='jira',
+                    external_id=data['clientKey'],
+                    name=data['baseUrl'],
+                    metadata={
+                        'oauth_client_id': data['oauthClientId'],
+                        # public key is possibly deprecated, so we can maybe remove this
+                        'public_key': data['publicKey'],
+                        'shared_secret': data['sharedSecret'],
+                        'base_url': data['baseUrl'],
+                    }
+                )
+        except IntegrityError:
+            pass
+
+        return self.respond()
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
new file mode 100644
index 0000000000..adbcd67241
--- /dev/null
+++ b/src/sentry/integrations/jira/integration.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+
+from sentry.integrations import Integration, IntegrationMetadata
+
+alert_link = {
+    'text': 'Visit the **Atlassian Marketplace** to install this integration.',
+    # TODO(jess): update this when we have our app listed on the
+    # atlassian marketplace
+    'link': 'https://marketplace.atlassian.com/',
+}
+
+metadata = IntegrationMetadata(
+    description='Sync Sentry and JIRA issues.',
+    author='The Sentry Team',
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=JIRA%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/jira',
+    aspects={
+        'alert_link': alert_link,
+    },
+)
+
+
+class JiraIntegration(Integration):
+    key = 'jira'
+    name = 'JIRA'
+    metadata = metadata
+
+    can_add = False
+
+    def get_pipeline_views(self):
+        return []
diff --git a/src/sentry/integrations/jira/urls.py b/src/sentry/integrations/jira/urls.py
new file mode 100644
index 0000000000..48e0700813
--- /dev/null
+++ b/src/sentry/integrations/jira/urls.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import, print_function
+
+from django.conf.urls import patterns, url
+
+from .configure import JiraConfigureView
+from .descriptor import JiraDescriptorEndpoint
+from .installed import JiraInstalledEndpoint
+
+
+urlpatterns = patterns(
+    '',
+    url(r'^configure/$', JiraConfigureView.as_view()),
+    url(r'^descriptor/$', JiraDescriptorEndpoint.as_view()),
+    url(r'^installed/$', JiraInstalledEndpoint.as_view()),
+)
diff --git a/src/sentry/integrations/jira/utils.py b/src/sentry/integrations/jira/utils.py
new file mode 100644
index 0000000000..5d119e8901
--- /dev/null
+++ b/src/sentry/integrations/jira/utils.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+import hashlib
+import jwt
+
+from sentry.models import Integration
+from sentry.utils.http import percent_encode
+
+
+class JiraValidationError(Exception):
+    pass
+
+
+def get_query_hash(uri, method, query_params=None):
+    # see
+    # https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html#qsh
+    uri = uri.rstrip('/')
+    method = method.upper()
+    if query_params is None:
+        query_params = {}
+
+    sorted_query = []
+    for k, v in sorted(query_params.items()):
+        # don't include jwt query param
+        if k != 'jwt':
+            if isinstance(v, list):
+                param_val = [percent_encode(val) for val in v].join(',')
+            else:
+                param_val = percent_encode(v)
+            sorted_query.append('%s=%s' % (percent_encode(k), param_val))
+
+    query_string = '%s&%s&%s' % (method, uri, '&'.join(sorted_query))
+    return hashlib.sha256(query_string.encode('utf8')).hexdigest()
+
+
+def get_integration_from_request(request):
+    # https://developer.atlassian.com/static/connect/docs/latest/concepts/authentication.html
+    # Extract the JWT token from the request's jwt query
+    # parameter or the authorization header.
+    token = request.GET.get('jwt')
+    if token is None:
+        raise JiraValidationError('No token parameter')
+    # Decode the JWT token, without verification. This gives
+    # you a header JSON object, a claims JSON object, and a signature.
+    decoded = jwt.decode(token, verify=False)
+    # Extract the issuer ('iss') claim from the decoded, unverified
+    # claims object. This is the clientKey for the tenant - an identifier
+    # for the Atlassian application making the call
+    issuer = decoded['iss']
+    # Look up the sharedSecret for the clientKey, as stored
+    # by the add-on during the installation handshake
+    try:
+        integration = Integration.objects.get(
+            provider='jira',
+            external_id=issuer,
+        )
+    except Integration.DoesNotExist:
+        raise JiraValidationError('No integration found')
+    # Verify the signature with the sharedSecret and
+    # the algorithm specified in the header's alg field.
+    decoded_verified = jwt.decode(token, integration.metadata['shared_secret'])
+    # Verify the query has not been tampered by Creating a Query Hash
+    # and comparing it against the qsh claim on the verified token.
+
+    qsh = get_query_hash(request.path, 'GET', request.GET)
+    if qsh != decoded_verified['qsh']:
+        raise JiraValidationError('Query hash mismatch')
+
+    return integration
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx b/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
index 947e704faa..0fa0768289 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
@@ -200,8 +200,10 @@ export default class OrganizationIntegrationConfig extends AsyncView {
       link = link.replace(`{${key}}`, this.props.params[key]);
     }
 
+    let props = link.startsWith('http') ? {href: link} : {to: link};
+
     return (
-      <AlertLink to={link}>
+      <AlertLink {...props}>
         <span dangerouslySetInnerHTML={{__html: linkHtml}} />
       </AlertLink>
     );
@@ -223,11 +225,13 @@ export default class OrganizationIntegrationConfig extends AsyncView {
     const header = (
       <PanelHeader disablePadding hasButtons>
         <Box px={2}>{t('Workspaces')}</Box>
-        <Box mr={1}>
-          <Button size="xsmall" onClick={() => this.handleAddIntegration(provider)}>
-            <span className="icon icon-add" /> {t('Add Workspace')}
-          </Button>
-        </Box>
+        {provider.canAdd && (
+          <Box mr={1}>
+            <Button size="xsmall" onClick={() => this.handleAddIntegration(provider)}>
+              <span className="icon icon-add" /> {t('Add Workspace')}
+            </Button>
+          </Box>
+        )}
       </PanelHeader>
     );
 
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
index ff90df4659..e847fa3ba4 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
@@ -30,38 +30,49 @@ export default class OrganizationIntegrations extends AsyncComponent {
 
   getEndpoints() {
     let {orgId} = this.props;
-    return [['config', `/organizations/${orgId}/config/integrations/`]];
+    return [
+      ['config', `/organizations/${orgId}/config/integrations/`],
+      ['organization', `/organizations/${orgId}/`],
+    ];
   }
 
   renderBody() {
     let {orgId, projectId} = this.props;
+    let orgFeatures = new Set(this.state.organization.features);
+    let internalIntegrations = new Set(['jira']);
 
-    const integrations = this.state.config.providers.map(provider => (
-      <PanelItem key={provider.key} align="center">
-        <Box>
-          <PluginIcon size={32} pluginId={provider.key} />
-        </Box>
-        <Box px={2} flex={1}>
-          <ProviderName>
-            <Link
+    const integrations = this.state.config.providers
+      .filter(provider => {
+        return (
+          orgFeatures.has('internal-catchall') || !internalIntegrations.has(provider.key)
+        );
+      })
+      .map(provider => (
+        <PanelItem key={provider.key} align="center">
+          <Box>
+            <PluginIcon size={32} pluginId={provider.key} />
+          </Box>
+          <Box px={2} flex={1}>
+            <ProviderName>
+              <Link
+                to={`/settings/${orgId}/${projectId}/integrations/${provider.key}/`}
+                css={{color: theme.gray5}}
+              >
+                {provider.name}
+              </Link>
+            </ProviderName>
+            <TeamName>{provider.metadata.author}</TeamName>
+          </Box>
+          <Box>
+            <Button
+              size="small"
               to={`/settings/${orgId}/${projectId}/integrations/${provider.key}/`}
-              css={{color: theme.gray5}}
             >
-              {provider.name}
-            </Link>
-          </ProviderName>
-          <TeamName>{provider.metadata.author}</TeamName>
-        </Box>
-        <Box>
-          <Button
-            size="small"
-            to={`/settings/${orgId}/${projectId}/integrations/${provider.key}/`}
-          >
-            {t('Configure')}
-          </Button>
-        </Box>
-      </PanelItem>
-    ));
+              {t('Configure')}
+            </Button>
+          </Box>
+        </PanelItem>
+      ));
 
     return (
       <Panel>
diff --git a/src/sentry/templates/sentry/jira-configure.html b/src/sentry/templates/sentry/jira-configure.html
new file mode 100644
index 0000000000..9b646bf972
--- /dev/null
+++ b/src/sentry/templates/sentry/jira-configure.html
@@ -0,0 +1,29 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <script src="{{ ac_js_src }}"></script>
+</head>
+<body class="">
+  <section id="content" role="main">
+    {% if error_message %}
+        <div>{{ error_message }}</div>
+    {% endif %}
+
+    <div class="description">Choose a Sentry Organization to link to JIRA</div>
+    <form class="aui" action="" method="post">
+      {% csrf_token %}
+      {% for field in form %}
+        <div class="field-group">
+          {{ field.errors }}
+          {{ field.label_tag }} {{ field }}
+        </div>
+      {% endfor %}
+      <div class="field-group">
+        <button class="aui-button aui-button-primary" type="submit">
+            Configure Integration
+        </button>
+      </div>
+    </form>
+  </section>
+</body>
+</html>
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 97e1d30d85..e6ceff48f5 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -11,7 +11,7 @@ import six
 
 from collections import namedtuple
 from django.conf import settings
-from six.moves.urllib.parse import parse_qs, urlencode, urljoin, urlparse
+from six.moves.urllib.parse import parse_qs, quote, urlencode, urljoin, urlparse
 from functools import partial
 
 from sentry import options
@@ -256,3 +256,8 @@ def heuristic_decode(data, possible_content_type=None):
             continue
 
     return (data, inferred_content_type)
+
+
+def percent_encode(val):
+    # see https://en.wikipedia.org/wiki/Percent-encoding
+    return quote(val.encode('utf8', errors='replace')).replace('%7E', '~').replace('/', '%2F')
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5cb410909f..292dacb374 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -493,6 +493,7 @@ urlpatterns += patterns(
         name='sentry-integrations-setup'
     ),
     url(r'^extensions/cloudflare/', include('sentry.integrations.cloudflare.urls')),
+    url(r'^extensions/jira/', include('sentry.integrations.jira.urls')),
     url(r'^extensions/slack/', include('sentry.integrations.slack.urls')),
 
     url(r'^plugins/', include('sentry.plugins.base.urls')),
diff --git a/tests/js/setup.js b/tests/js/setup.js
index f9eff68867..7646669ed5 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -447,6 +447,7 @@ window.TestStubs = {
     return {
       key: 'github',
       name: 'GitHub',
+      canAdd: true,
       config: [],
       setupDialog: {
         url: '/github-integration-setup-uri/',
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index 4bc4556bbd..146742207f 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -18,6 +18,11 @@ describe('PluginNavigation Integration', function() {
       method: 'GET',
       body: {providers: [TestStubs.GitHubIntegrationProvider()]},
     });
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/`,
+      method: 'GET',
+      body: org,
+    });
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/plugins/`,
       method: 'GET',
