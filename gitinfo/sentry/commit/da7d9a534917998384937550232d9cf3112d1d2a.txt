commit da7d9a534917998384937550232d9cf3112d1d2a
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Aug 31 06:17:00 2018 -0700

    fix(api): Correct handling of transaction name as culprit (#8121)
    
    * fix(api): Correct handling of transaction name as culprit
    
    * fix(tests): Test save(), not normalize()

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index aab83bc816..f362a64892 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -551,9 +551,8 @@ class EventManager(object):
         # First we pull out our top-level (non-data attr) kwargs
         event_id = data.pop('event_id')
         level = data.pop('level')
-        culprit = data.pop('transaction', None)
-        if not culprit:
-            culprit = data.pop('culprit', None)
+        transaction_name = data.pop('transaction', None)
+        culprit = data.pop('culprit', None)
         logger_name = data.pop('logger', None)
         server_name = data.pop('server_name', None)
         site = data.pop('site', None)
@@ -569,14 +568,14 @@ class EventManager(object):
         message = data.pop('message', '')
 
         if not culprit:
-            # if we generate an implicit culprit, lets not call it a
-            # transaction
-            transaction_name = None
-            culprit = generate_culprit(data, platform=platform)
-        else:
-            transaction_name = culprit
+            if transaction_name:
+                culprit = transaction_name
+            else:
+                culprit = generate_culprit(data, platform=platform)
 
         culprit = force_text(culprit)
+        if transaction_name:
+            transaction_name = force_text(transaction_name)
 
         recorded_timestamp = data.pop('timestamp')
         date = datetime.fromtimestamp(recorded_timestamp)
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 3cf5c67688..dd0c68e304 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -248,7 +248,7 @@ class Event(Model):
     @property
     def culprit(self):
         warnings.warn('Event.culprit is deprecated. Use Group.culprit instead.')
-        return self.transaction or self.group.culprit
+        return self.group.culprit
 
     @property
     def checksum(self):
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index a45518f6e2..ec4a2a806d 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -68,17 +68,6 @@ class EventManagerTest(TransactionTestCase):
 
         assert event1.group_id != event2.group_id
 
-    def test_transaction_over_culprit(self):
-        manager = EventManager(self.make_event(
-            culprit='foo',
-            transaction='bar'
-        ))
-        manager.normalize()
-        event1 = manager.save(1)
-
-        assert event1.transaction == 'bar'
-        assert event1.culprit == 'bar'
-
     @mock.patch('sentry.event_manager.should_sample')
     def test_saves_event_mapping_when_sampled(self, should_sample):
         should_sample.return_value = True
@@ -676,6 +665,34 @@ class EventManagerTest(TransactionTestCase):
         data = manager.normalize()
         assert len(data['transaction']) == MAX_CULPRIT_LENGTH
 
+    def test_transaction_as_culprit(self):
+        manager = EventManager(self.make_event(
+            transaction='foobar',
+        ))
+        manager.normalize()
+        event = manager.save(1)
+        assert event.transaction == 'foobar'
+        assert event.culprit == 'foobar'
+
+    def test_culprit_is_not_transaction(self):
+        manager = EventManager(self.make_event(
+            culprit='foobar',
+        ))
+        manager.normalize()
+        event1 = manager.save(1)
+        assert event1.transaction is None
+        assert event1.culprit == 'foobar'
+
+    def test_transaction_and_culprit(self):
+        manager = EventManager(self.make_event(
+            transaction='foobar',
+            culprit='baz',
+        ))
+        manager.normalize()
+        event1 = manager.save(1)
+        assert event1.transaction == 'foobar'
+        assert event1.culprit == 'baz'
+
     def test_long_message(self):
         manager = EventManager(
             self.make_event(
