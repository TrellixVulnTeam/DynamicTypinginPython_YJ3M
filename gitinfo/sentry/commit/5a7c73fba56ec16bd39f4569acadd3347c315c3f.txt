commit 5a7c73fba56ec16bd39f4569acadd3347c315c3f
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Thu Apr 2 01:01:52 2020 +0800

    ref(js) remove lodash/get (#16614)
    
    * Add no lodash/get to es-lint
    
    * Remove lodash/get from contexts.jsx
    
    * Remove lodash/get from utils
    
    * Remove lodash/get from permissionSelection
    
    * Remove lodash/get from header.tsx
    
    * Remove lodash/get from sentryApplicationDetails.tsx
    
    * Remove lodash/get from modal.jsx
    
    * Remove lodash/get from navigation.jsx
    
    * Remove lodash/get from stacktraceContent.jsx
    
    * Remove lodash/get from app.jsx
    
    * Remove lodash/get from sentryAppExternalInstallation.tsx
    
    * Remove lodash/get from api.tsx
    
    * Remove lodash/get from debugmeta.jsx
    
    * Partially remove lodash/get from traceView.tsx
    
    * Remove lodash/get from spanTree.tsx
    
    * Remove lodash/get from formatters.tsx
    
    * Remove lodash/get from spanBar.tsx
    
    * Remove lodash/get from spanDetail.tsx
    
    * Add TODO
    
    * Update eslintrc message
    
    * fix remaining lodash/get
    
    Co-authored-by: Billy Vong <billy@sentry.io>

diff --git a/.eslintrc.js b/.eslintrc.js
index 0933eb2fa3..5c5cefa456 100644
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -9,7 +9,16 @@ module.exports = {
     tick: true,
     jest: true,
   },
-  rules: {},
+  rules: {
+    'no-restricted-imports': [
+      'error',
+      {
+        name: 'lodash/get',
+        message:
+          'Optional chaining `?.` and nullish coalescing operators `??` are available and preferred over using `lodash/get`',
+      },
+    ],
+  },
   overrides: [
     {
       files: ['*.ts', '*.tsx'],
diff --git a/src/sentry/static/sentry/app/actionCreators/navigation.tsx b/src/sentry/static/sentry/app/actionCreators/navigation.tsx
index 6e3a50de2b..9674815d85 100644
--- a/src/sentry/static/sentry/app/actionCreators/navigation.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/navigation.tsx
@@ -1,16 +1,17 @@
-import React from 'react';
-import get from 'lodash/get';
 import {InjectedRouter} from 'react-router/lib/Router';
+import {Location} from 'history';
+import React from 'react';
 
 import {openModal} from 'app/actionCreators/modal';
 import ContextPickerModal from 'app/components/contextPickerModal';
 import NavigationActions from 'app/actions/navigationActions';
 
-export function navigateTo(to: string, router: InjectedRouter) {
+// TODO(ts): figure out better typing for react-router here
+export function navigateTo(to: string, router: InjectedRouter & {location?: Location}) {
   // Check for placeholder params
   const needOrg = to.indexOf(':orgId') > -1;
   const needProject = to.indexOf(':projectId') > -1;
-  const comingFromProjectId = get(router, 'location.query.project');
+  const comingFromProjectId = router?.location?.query?.project;
 
   if (needOrg || needProject) {
     openModal(
@@ -20,7 +21,9 @@ export function navigateTo(to: string, router: InjectedRouter) {
           nextPath={to}
           needOrg={needOrg}
           needProject={needProject}
-          comingFromProjectId={comingFromProjectId}
+          comingFromProjectId={
+            Array.isArray(comingFromProjectId) ? '' : comingFromProjectId || ''
+          }
           onFinish={path => {
             modalProps.closeModal();
             setTimeout(() => router.push(path), 0);
diff --git a/src/sentry/static/sentry/app/api.tsx b/src/sentry/static/sentry/app/api.tsx
index 1958f24586..2c984915a4 100644
--- a/src/sentry/static/sentry/app/api.tsx
+++ b/src/sentry/static/sentry/app/api.tsx
@@ -1,6 +1,5 @@
 import isUndefined from 'lodash/isUndefined';
 import isNil from 'lodash/isNil';
-import get from 'lodash/get';
 import $ from 'jquery';
 import {Severity} from '@sentry/browser';
 
@@ -124,7 +123,7 @@ export class Client {
    */
   // TODO: refine this type later
   hasProjectBeenRenamed(response: JQueryXHR) {
-    const code = get(response, 'responseJSON.detail.code');
+    const code = response?.responseJSON?.detail?.code;
 
     // XXX(billy): This actually will never happen because we can't intercept the 302
     // jQuery ajax will follow the redirect by default...
@@ -132,7 +131,7 @@ export class Client {
       return false;
     }
 
-    const slug = get(response, 'responseJSON.detail.extra.slug');
+    const slug = response?.responseJSON?.detail?.extra?.slug;
 
     redirectToProject(slug);
     return true;
@@ -186,7 +185,7 @@ export class Client {
     textStatus: string,
     errorThrown: string
   ) {
-    const code = get(response, 'responseJSON.detail.code');
+    const code = response?.responseJSON?.detail?.code;
     const isSudoRequired = code === SUDO_REQUIRED || code === SUPERUSER_REQUIRED;
 
     if (isSudoRequired) {
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 633bec0514..5710ce090c 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import get from 'lodash/get';
 
 import {objectIsEmpty, toTitleCase, defined} from 'app/utils';
 import EventDataSection from 'app/components/events/eventDataSection';
@@ -55,7 +54,7 @@ class ContextChunk extends React.Component {
   componentDidUpdate(prevProps) {
     if (
       prevProps.type !== this.props.type ||
-      get(prevProps, 'group.id') !== get(this.props, 'group.id')
+      prevProps?.group?.id !== this.props?.group?.id
     ) {
       this.syncPlugin();
     }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 786336c4ed..44ad1897eb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -2,7 +2,6 @@ import isNil from 'lodash/isNil';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
-import get from 'lodash/get';
 
 import Access from 'app/components/acl/access';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
@@ -451,10 +450,8 @@ class DebugMetaInterface extends React.PureComponent {
       </GuideAnchor>
     );
 
-    const frames = get(
-      this.props.event.entries.find(({type}) => type === 'exception'),
-      'data.values[0].stacktrace.frames'
-    );
+    const frames = this.props.event.entries.find(({type}) => type === 'exception')?.data
+      ?.values?.[0]?.stacktrace?.frames;
     const foundFrame = frames
       ? frames.find(frame => frame.instructionAddr === this.state.filter)
       : null;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
index 7ae07ea765..110b641af0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import get from 'lodash/get';
 
 import space from 'app/styles/space';
 
@@ -412,7 +411,7 @@ class ActualMinimap extends React.PureComponent<{trace: ParsedTraceType}> {
 
     const {left: spanLeft, width: spanWidth} = this.getBounds(bounds);
 
-    const spanChildren: Array<RawSpanType> = get(childSpans, getSpanID(span), []);
+    const spanChildren: Array<RawSpanType> = childSpans?.[getSpanID(span)] ?? [];
 
     type AccType = {
       nextSpanNumber: number;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index ce18b6d1aa..ee367b4c81 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import get from 'lodash/get';
 import 'intersection-observer'; // this is a polyfill
 
 import {t} from 'app/locale';
@@ -382,7 +381,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     ) : (
       ''
     );
-    const description = get(span, 'description', getSpanID(span));
+    const description = span?.description ?? getSpanID(span);
 
     const left = treeDepth * (TOGGLE_BORDER_BOX / 2) + MARGIN_LEFT;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 00a7997aab..29bdaebc59 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import get from 'lodash/get';
 import map from 'lodash/map';
 
 import {t} from 'app/locale';
@@ -231,7 +230,7 @@ class SpanDetail extends React.Component<Props, State> {
               {span.trace_id}
             </Row>
             <Row title="Parent Span ID">{span.parent_span_id || ''}</Row>
-            <Row title="Description">{get(span, 'description', '')}</Row>
+            <Row title="Description">{span?.description ?? ''}</Row>
             <Row title="Start Date">
               {getDynamicText({
                 fixed: 'Mar 16, 2020 9:10:12 AM UTC',
@@ -260,7 +259,7 @@ class SpanDetail extends React.Component<Props, State> {
               {String(!!span.same_process_as_parent)}
             </Row>
             <Tags span={span} />
-            {map(get(span, 'data', {}), (value, key) => (
+            {map(span?.data ?? {}, (value, key) => (
               <Row title={key} key={key}>
                 {JSON.stringify(value, null, 4) || ''}
               </Row>
@@ -317,7 +316,7 @@ const Row = ({
 };
 
 const Tags = ({span}: {span: RawSpanType}) => {
-  const tags: {[tag_name: string]: string} | undefined = get(span, 'tags');
+  const tags: {[tag_name: string]: string} | undefined = span?.tags;
 
   if (!tags) {
     return null;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index 9035e6b51a..66b64669ab 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import get from 'lodash/get';
 
 import {t} from 'app/locale';
 import EventView from 'app/utils/discover/eventView';
@@ -140,7 +139,7 @@ class SpanTree extends React.Component<PropType> {
     const {orgId, eventView, event} = this.props;
 
     const spanBarColour: string = pickSpanBarColour(getSpanOperation(span));
-    const spanChildren: Array<RawSpanType> = get(childSpans, getSpanID(span), []);
+    const spanChildren: Array<RawSpanType> = childSpans?.[getSpanID(span)] ?? [];
 
     const bounds = generateBounds({
       startTimestamp: span.start_timestamp,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index 9e35ae67a3..b08c1bc824 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import get from 'lodash/get';
 import set from 'lodash/set';
 import pick from 'lodash/pick';
 import isNumber from 'lodash/isNumber';
@@ -123,14 +122,14 @@ class TraceView extends React.PureComponent<Props, State> {
 
         let tagKeys: string[] = [];
         let tagValues: string[] = [];
-        const tags: {[tag_name: string]: string} | undefined = get(span, 'tags');
+        const tags: {[tag_name: string]: string} | undefined = span?.tags;
 
         if (tags) {
           tagKeys = Object.keys(tags);
           tagValues = Object.values(tags);
         }
 
-        const data: {[data_name: string]: any} | undefined = get(span, 'data', {});
+        const data: {[data_name: string]: any} | undefined = span?.data ?? {};
 
         let dataKeys: string[] = [];
         let dataValues: string[] = [];
@@ -230,7 +229,7 @@ class TraceView extends React.PureComponent<Props, State> {
 function getTraceContext(
   event: Readonly<SentryTransactionEvent>
 ): TraceContextType | undefined {
-  const traceContext: TraceContextType | undefined = get(event, 'contexts.trace');
+  const traceContext: TraceContextType | undefined = event?.contexts?.trace;
 
   return traceContext;
 }
@@ -240,7 +239,7 @@ function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTraceType {
     (entry: {type: string}) => entry.type === 'spans'
   );
 
-  const spans: Array<RawSpanType> = get(spanEntry, 'data', []);
+  const spans: Array<RawSpanType> = spanEntry?.data ?? [];
 
   const traceContext = getTraceContext(event);
   const traceID = (traceContext && traceContext.trace_id) || '';
@@ -281,11 +280,7 @@ function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTraceType {
       return acc;
     }
 
-    const spanChildren: Array<RawSpanType> = get(
-      acc.childSpans,
-      span.parent_span_id!,
-      []
-    );
+    const spanChildren: Array<RawSpanType> = acc.childSpans?.[span.parent_span_id!] ?? [];
 
     spanChildren.push(span);
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
index 3d426adda2..410f7716ef 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
@@ -32,6 +32,12 @@ export type SentryTransactionEvent = {
   sdk?: {
     name?: string;
   };
+
+  // TODO(alberto):
+  // TODO(ts): type this
+  contexts?: {
+    trace?: any;
+  };
 };
 
 export type SpanChildrenLookupType = {[span_id: string]: Array<RawSpanType>};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 01b8720c1c..e934e13b18 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import get from 'lodash/get';
 
 import Frame from 'app/components/events/interfaces/frame/frame';
 import {t} from 'app/locale';
@@ -43,10 +42,8 @@ export default class StacktraceContent extends React.Component {
     this.props.includeSystemFrames || frame.inApp || (nextFrame && nextFrame.inApp);
 
   findImageForAddress(address) {
-    const images = get(
-      this.props.event.entries.find(entry => entry.type === 'debugmeta'),
-      'data.images'
-    );
+    const images = this.props.event.entries.find(entry => entry.type === 'debugmeta')
+      ?.data?.images;
 
     return images
       ? images.find(img => {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 5ae6536343..4a02c1875a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -2,7 +2,6 @@ import isEmpty from 'lodash/isEmpty';
 import isString from 'lodash/isString';
 import * as Sentry from '@sentry/browser';
 import queryString from 'query-string';
-import get from 'lodash/get';
 
 import {FILTER_MASK} from 'app/constants';
 import {defined} from 'app/utils';
@@ -154,11 +153,11 @@ export function getImageRange(image) {
   // The start address is normalized to a `0x` prefixed hex string. The event
   // schema also allows ingesting plain numbers, but this is converted during
   // ingestion.
-  const startAddress = parseAddress(get(image, 'image_addr'));
+  const startAddress = parseAddress(image?.image_addr);
 
   // The image size is normalized to a regular number. However, it can also be
   // `null`, in which case we assume that it counts up to the next image.
-  const endAddress = startAddress + (get(image, 'image_size') || 0);
+  const endAddress = startAddress + (image?.image_size || 0);
 
   return [startAddress, endAddress];
 }
diff --git a/src/sentry/static/sentry/app/utils/formatters.tsx b/src/sentry/static/sentry/app/utils/formatters.tsx
index 289596b63d..95d9187d29 100644
--- a/src/sentry/static/sentry/app/utils/formatters.tsx
+++ b/src/sentry/static/sentry/app/utils/formatters.tsx
@@ -1,17 +1,16 @@
-import get from 'lodash/get';
 import {Release} from '@sentry/release-parser';
 
 import {t, tn} from 'app/locale';
 import {CommitAuthor, User} from 'app/types';
 
 export function userDisplayName(user: User | CommitAuthor, includeEmail = true): string {
-  let displayName = String(get(user, 'name', t('Unknown author'))).trim();
+  let displayName = String(user?.name ?? t('Unknown author')).trim();
 
   if (displayName.length <= 0) {
     displayName = t('Unknown author');
   }
 
-  const email = String(get(user, 'email', '')).trim();
+  const email = String(user?.email ?? '').trim();
 
   if (email.length > 0 && email !== displayName && includeEmail) {
     displayName += ' (' + email + ')';
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 03d88c2442..d65e64f274 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -5,7 +5,6 @@ import {browserHistory} from 'react-router';
 import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
 import React from 'react';
-import get from 'lodash/get';
 import isEqual from 'lodash/isEqual';
 import keydown from 'react-keydown';
 
@@ -132,8 +131,8 @@ class App extends React.Component {
         return;
       }
 
-      const code = get(jqXHR, 'responseJSON.detail.code');
-      const extra = get(jqXHR, 'responseJSON.detail.extra');
+      const code = jqXHR?.responseJSON?.detail?.code;
+      const extra = jqXHR?.responseJSON?.detail?.extra;
 
       // 401s can also mean sudo is required or it's a request that is allowed to fail
       // Ignore if these are the cases
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
index a665a4c909..436a9090e3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import get from 'lodash/get';
 import isFinite from 'lodash/isFinite';
 
 import {Event} from 'app/types';
@@ -51,7 +50,7 @@ class OpsBreakdown extends React.Component<Props> {
       };
     }
 
-    const traceContext: TraceContextType | undefined = get(event, 'contexts.trace');
+    const traceContext: TraceContextType | undefined = event?.contexts?.trace;
 
     if (!traceContext) {
       return {
@@ -64,7 +63,7 @@ class OpsBreakdown extends React.Component<Props> {
       (entry: {type: string}) => entry.type === 'spans'
     );
 
-    let spans: RawSpanType[] = get(spanEntry, 'data', []);
+    let spans: RawSpanType[] = spanEntry?.data ?? [];
 
     spans =
       spans.length > 0
diff --git a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
index 9a8dac8c08..42380a3844 100644
--- a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
@@ -1,6 +1,5 @@
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
-import get from 'lodash/get';
 import styled from '@emotion/styled';
 
 import {
@@ -73,7 +72,7 @@ export default class SentryAppExternalInstallation extends AsyncView<Props, Stat
     //if the app is unpublished for a different org
     return (
       selectedOrgSlug &&
-      get(sentryApp, 'owner.slug') !== selectedOrgSlug &&
+      sentryApp?.owner?.slug !== selectedOrgSlug &&
       sentryApp.status === 'unpublished'
     );
   }
@@ -220,7 +219,7 @@ export default class SentryAppExternalInstallation extends AsyncView<Props, Stat
 
     if (this.isSentryAppUnavailableForOrg) {
       // use the slug of the owner if we have it, otherwise use 'another organization'
-      const ownerSlug = get(sentryApp, 'owner.slug', 'another organization');
+      const ownerSlug = sentryApp?.owner?.slug ?? 'another organization';
       return (
         <Alert type="error" icon="icon-circle-exclamation">
           {tct(
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
index 5047a69760..e489971663 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionSelection.tsx
@@ -2,7 +2,6 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import find from 'lodash/find';
 import flatMap from 'lodash/flatMap';
-import get from 'lodash/get';
 
 import {t} from 'app/locale';
 import {SENTRY_APP_PERMISSIONS} from 'app/constants';
@@ -118,8 +117,9 @@ export default class PermissionSelection extends React.Component<Props, State> {
   permissionStateToList() {
     const {permissions} = this.state;
     const findResource = r => find(SENTRY_APP_PERMISSIONS, ['resource', r]);
-    return flatMap(Object.entries(permissions), ([r, p]) =>
-      get(findResource(r), `choices[${p}].scopes`)
+    return flatMap(
+      Object.entries(permissions),
+      ([r, p]) => findResource(r)?.choices?.[p]?.scopes
     );
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index 298d0ec136..063cd3aa3d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 import {browserHistory} from 'react-router';
 import {Observer} from 'mobx-react';
 import omit from 'lodash/omit';
-import get from 'lodash/get';
 import scrollToElement from 'scroll-to-element';
 import {RouteComponentProps} from 'react-router/lib/Router';
 import styled from '@emotion/styled';
@@ -49,7 +48,7 @@ const getResourceFromScope = (scope: Scope): Resource | undefined => {
     const allChoices = Object.values(permObj.choices);
 
     const allScopes = allChoices.reduce(
-      (_allScopes: string[], choice) => _allScopes.concat(get(choice, 'scopes', [])),
+      (_allScopes: string[], choice) => _allScopes.concat(choice?.scopes ?? []),
       []
     );
 
@@ -171,7 +170,7 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
   handleSubmitError = err => {
     let errorMessage = t('Unknown Error');
     if (err.status >= 400 && err.status < 500) {
-      errorMessage = get(err, 'responseJSON.detail', errorMessage);
+      errorMessage = err?.responseJSON.detail ?? errorMessage;
     }
     addErrorMessage(errorMessage);
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
index 5b43d84f7c..e02a64d214 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import get from 'lodash/get';
 import uniq from 'lodash/uniq';
 
 import {t} from 'app/locale';
@@ -45,14 +44,9 @@ class ProjectOwnershipModal extends AsyncComponent {
 
     // pull frame data out of exception or the stacktrace
     let frames =
-      get(
-        eventData.entries.find(({type}) => type === 'exception'),
-        'data.values[0].stacktrace.frames'
-      ) ||
-      get(
-        eventData.entries.find(({type}) => type === 'stacktrace'),
-        'data.frames'
-      ) ||
+      eventData.entries.find(({type}) => type === 'exception')?.data?.values?.[0]
+        ?.stacktrace?.frames ||
+      eventData.entries.find(({type}) => type === 'stacktrace')?.data?.frames ||
       [];
 
     //filter frames by inApp unless there would be 0
