commit 0733f59b4a20e17b2387c6ae50a10c8de00bb924
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue May 19 14:03:25 2020 +0200

    ref(ui): Improve Event Grouping Information section (#18885)
    
    Improvements to the "Event Grouping Information" section on the event detail page.
    
    This section has been available for early adopters for almost a year now (it's collapsed by default).
    
    As part of the GA initiative, we made a few improvements:
    
    - converted to typescript
    - split into multiple smaller files
    - replaced CSS styles
    - added translations
    - refreshed design
    
    It still remains behind the grouping-info feature flag.

diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
deleted file mode 100644
index 5c55b18279..0000000000
--- a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
+++ /dev/null
@@ -1,404 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import styled from '@emotion/styled';
-import isObject from 'lodash/isObject';
-
-import AsyncComponent from 'app/components/asyncComponent';
-import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
-import DropdownButton from 'app/components/dropdownButton';
-import Tooltip from 'app/components/tooltip';
-import FeatureBadge from 'app/components/featureBadge';
-import EventDataSection from 'app/components/events/eventDataSection';
-import SentryTypes from 'app/sentryTypes';
-import {t} from 'app/locale';
-import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
-import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
-
-export const GroupingConfigItem = styled(
-  ({hidden: _hidden, active: _active, ...props}) => <code {...props} />
-)`
-  ${p => (p.hidden ? 'opacity: 0.5;' : '')}
-  ${p => (p.active ? 'font-weight: bold;' : '')}
-`;
-
-const GroupVariantList = styled('ul')`
-  padding: 0;
-  margin: 0;
-  list-style: none;
-  font-size: 14px;
-  line-height: 18px;
-`;
-
-const GroupVariantListItem = styled(({contributes: _contributes, ...props}) => (
-  <li {...props} />
-))`
-  padding: 15px 0 20px 0;
-  ${p => (p.contributes ? '' : 'color:' + p.theme.gray6)};
-
-  & + li {
-    margin-top: 15px;
-  }
-`;
-
-const GroupVariantTitle = styled('h5')`
-  margin: 0 0 10px 0;
-  color: inherit !important;
-  text-transform: uppercase;
-  font-size: 14px;
-`;
-
-const GroupingComponentBox = styled('div')`
-  padding: 10px 0 0 0;
-  margin-top: -10px;
-`;
-
-const GroupingComponentList = styled('ul')`
-  padding: 0;
-  margin: 0;
-  list-style: none;
-`;
-
-const GroupingComponentListItem = styled('li')`
-  padding: 0;
-  margin: 2px 0 1px 13px;
-`;
-
-const GroupingComponentWrapper = styled(({contributes: _contributes, ...props}) => (
-  <div {...props} />
-))`
-  ${p => (p.contributes ? '' : 'color:' + p.theme.gray6)};
-`;
-
-const GroupingValue = styled('code')`
-  display: inline-block;
-  margin: 1px 4px 1px 0;
-  font-size: 12px;
-  padding: 1px 2px;
-  color: inherit;
-`;
-
-const Toggle = styled('a')`
-  font-size: ${p => p.theme.fontSizeMedium};
-  font-weight: 700;
-  color: ${p => p.theme.foreground};
-`;
-
-const SubHeading = styled('small')`
-  text-transform: none;
-  font-weight: normal;
-  font-size: ${p => p.theme.fontSizeMedium};
-  color: ${p => p.theme.foreground};
-  margin-left: ${space(1)};
-`;
-
-class GroupingComponent extends React.Component {
-  static propTypes = {
-    component: PropTypes.object,
-    showNonContributing: PropTypes.bool,
-  };
-
-  render() {
-    const {component} = this.props;
-
-    const children = component.values.map((value, idx) => {
-      let rv;
-      if (isObject(value)) {
-        // no point rendering such nodes at all, we never show them
-        if (!value.contributes && !value.hint && value.values.length === 0) {
-          return null;
-        }
-        // non contributing values are otherwise optional
-        if (!this.props.showNonContributing && !value.contributes) {
-          return null;
-        }
-        rv = (
-          <GroupingComponent
-            component={value}
-            showNonContributing={this.props.showNonContributing}
-          />
-        );
-      } else {
-        rv = <GroupingValue>{JSON.stringify(value, null, 2)}</GroupingValue>;
-      }
-      return <GroupingComponentListItem key={idx}>{rv}</GroupingComponentListItem>;
-    });
-
-    return (
-      <GroupingComponentWrapper contributes={component.contributes}>
-        <span>
-          {component.name || component.id}
-          {component.hint && <small>{` (${component.hint})`}</small>}
-        </span>
-        <GroupingComponentList>{children}</GroupingComponentList>
-      </GroupingComponentWrapper>
-    );
-  }
-}
-
-function hasNonContributingComponent(component) {
-  if (!component.contributes) {
-    return true;
-  }
-  for (const value of component.values) {
-    if (isObject(value) && hasNonContributingComponent(value)) {
-      return true;
-    }
-  }
-  return false;
-}
-
-class GroupVariant extends React.Component {
-  static propTypes = {
-    variant: PropTypes.object,
-  };
-
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      showNonContributing: false,
-    };
-  }
-
-  toggleNonContributing = () => {
-    this.setState({
-      showNonContributing: !this.state.showNonContributing,
-    });
-  };
-
-  renderVariantDetails() {
-    const {variant} = this.props;
-    const data = [['Type', variant.type]];
-    let component = null;
-
-    if (variant.hash !== null) {
-      data.push(['Hash', variant.hash]);
-    }
-    if (variant.hashMismatch) {
-      data.push([
-        'Hash mismatch',
-        'hashing algorithm produced a hash that does not match the event',
-      ]);
-    }
-
-    switch (variant.type) {
-      case 'component':
-        component = variant.component;
-        data.push(['Grouping Config', variant.config.id]);
-        break;
-      case 'custom-fingerprint':
-        data.push(['Fingerprint values', variant.values]);
-        break;
-      case 'salted-component':
-        data.push(['Fingerprint values', variant.values]);
-        data.push(['Grouping Config', variant.config.id]);
-        component = variant.component;
-        break;
-      default:
-        break;
-    }
-
-    return (
-      <div>
-        <KeyValueList data={data} isContextData />
-        {component && (
-          <GroupingComponentBox>
-            {hasNonContributingComponent(component) && (
-              <a className="pull-right" onClick={this.toggleNonContributing}>
-                {this.state.showNonContributing
-                  ? t('hide non contributing values')
-                  : t('show non contributing values')}
-              </a>
-            )}
-            <GroupingComponent
-              component={component}
-              showNonContributing={this.state.showNonContributing}
-            />
-          </GroupingComponentBox>
-        )}
-      </div>
-    );
-  }
-
-  render() {
-    const {variant} = this.props;
-    return (
-      <GroupVariantListItem contributes={variant.hash !== null}>
-        <GroupVariantTitle>{`by ${variant.description}`}</GroupVariantTitle>
-        {this.renderVariantDetails()}
-      </GroupVariantListItem>
-    );
-  }
-}
-
-class GroupingConfigSelect extends AsyncComponent {
-  static propTypes = {
-    eventConfigId: PropTypes.string,
-    configId: PropTypes.string,
-  };
-
-  getEndpoints() {
-    return [['data', '/grouping-configs/']];
-  }
-
-  renderBody() {
-    const {configId, eventConfigId, ...props} = this.props;
-    props.value = configId;
-
-    function renderIdLabel(id) {
-      return <GroupingConfigItem active={eventConfigId === id}>{id}</GroupingConfigItem>;
-    }
-
-    return (
-      <DropdownAutoComplete
-        {...props}
-        alignMenu="left"
-        selectedItem={configId}
-        items={this.state.data
-          .filter(item => !item.hidden || item.id === eventConfigId)
-          .map(item => ({
-            value: item.id,
-            label: renderIdLabel(item.id),
-          }))}
-      >
-        {({isOpen}) => (
-          <Tooltip title="Click here to experiment with other grouping configs">
-            <DropdownButton isOpen={isOpen} size="small" style={{fontWeight: 'inherit'}}>
-              {renderIdLabel(configId)}
-            </DropdownButton>
-          </Tooltip>
-        )}
-      </DropdownAutoComplete>
-    );
-  }
-}
-
-class EventGroupingInfo extends AsyncComponent {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization.isRequired,
-    projectId: PropTypes.string.isRequired,
-    event: SentryTypes.Event.isRequired,
-    showSelector: PropTypes.bool,
-  };
-
-  getEndpoints() {
-    const {organization, event, projectId} = this.props;
-
-    let path = `/projects/${organization.slug}/${projectId}/events/${event.id}/grouping-info/`;
-    if (this.state && this.state.configOverride) {
-      path = `${path}?config=${this.state.configOverride}`;
-    }
-    return [['groupInfo', path]];
-  }
-
-  getInitialState() {
-    return {
-      isOpen: false,
-      configOverride: null,
-      ...super.getInitialState(),
-    };
-  }
-
-  toggle = () => {
-    if (this.state.isOpen) {
-      this.setState({
-        isOpen: false,
-        configOverride: null,
-      });
-    } else {
-      this.setState({
-        isOpen: true,
-      });
-    }
-  };
-
-  renderGroupInfoSummary() {
-    if (this.state.groupInfo === null) {
-      return null;
-    }
-
-    const variants = [];
-    for (const key of Object.keys(this.state.groupInfo)) {
-      const variant = this.state.groupInfo[key];
-      if (variant.hash !== null) {
-        variants.push(variant.description);
-      }
-    }
-    variants.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
-
-    return <SubHeading>{`(grouped by ${variants.join(', ') || 'nothing'})`}</SubHeading>;
-  }
-
-  renderGroupInfo() {
-    const variants = Object.values(this.state.groupInfo);
-    variants.sort((a, b) => {
-      if (a.hash && !b.hash) {
-        return -1;
-      }
-      return a.description.toLowerCase().localeCompare(b.description.toLowerCase());
-    });
-
-    const eventConfigId = this.props.event.groupingConfig.id;
-    let configId = this.state.configOverride || null;
-    if (configId === null) {
-      configId = eventConfigId;
-    }
-
-    return (
-      <GroupVariantList>
-        <div style={{float: 'right'}}>
-          {this.props.showSelector && (
-            <GroupingConfigSelect
-              name="groupingConfig"
-              eventConfigId={eventConfigId}
-              configId={configId}
-              onSelect={selection => {
-                this.setState(
-                  {
-                    configOverride: selection.value,
-                  },
-                  () => this.reloadData()
-                );
-              }}
-            />
-          )}
-        </div>
-        {variants.map(variant => (
-          <GroupVariant variant={variant} key={variant.key} />
-        ))}
-      </GroupVariantList>
-    );
-  }
-
-  renderBody() {
-    const isOpen = this.state.isOpen;
-    const title = (
-      <React.Fragment>
-        {t('Event Grouping Information')}
-        {!isOpen && this.renderGroupInfoSummary()}
-      </React.Fragment>
-    );
-    const actions = (
-      <Toggle onClick={this.toggle}>
-        {isOpen ? t('Hide Details') : t('Show Details')} <FeatureBadge type="beta" />
-      </Toggle>
-    );
-
-    return (
-      <EventDataSection
-        event={this.props.event}
-        type="grouping-info"
-        className="grouping-info"
-        title={title}
-        actions={actions}
-      >
-        <div style={{display: isOpen ? 'block' : 'none'}}>
-          {this.state.groupInfo !== null && isOpen && this.renderGroupInfo()}
-        </div>
-      </EventDataSection>
-    );
-  }
-}
-
-export default withOrganization(EventGroupingInfo);
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo/groupingComponent.tsx b/src/sentry/static/sentry/app/components/events/groupingInfo/groupingComponent.tsx
new file mode 100644
index 0000000000..29c5a6373d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo/groupingComponent.tsx
@@ -0,0 +1,98 @@
+import React from 'react';
+import isObject from 'lodash/isObject';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {EventGroupComponent} from 'app/types';
+
+import {shouldInlineComponentValue} from './utils';
+
+type Props = {
+  component: EventGroupComponent;
+  showNonContributing: boolean;
+};
+
+const GroupingComponent = ({component, showNonContributing}: Props) => {
+  const shouldInlineValue = shouldInlineComponentValue(component);
+
+  const children = (component.values as EventGroupComponent[]).map((value, idx) => {
+    let rv;
+    if (isObject(value)) {
+      // no point rendering such nodes at all, we never show them
+      if (!value.contributes && !value.hint && value.values.length === 0) {
+        return null;
+      }
+      // non contributing values are otherwise optional
+      if (!showNonContributing && !value.contributes) {
+        return null;
+      }
+      rv = (
+        <GroupingComponent component={value} showNonContributing={showNonContributing} />
+      );
+    } else {
+      rv = (
+        <GroupingValue valueType={component.name || component.id}>
+          {typeof value === 'string' || typeof value === 'number'
+            ? value
+            : JSON.stringify(value, null, 2)}
+        </GroupingValue>
+      );
+    }
+
+    return <GroupingComponentListItem key={idx}>{rv}</GroupingComponentListItem>;
+  });
+
+  return (
+    <GroupingComponentWrapper isContributing={component.contributes}>
+      <span>
+        {component.name || component.id}
+        {component.hint && <small>{` (${component.hint})`}</small>}
+      </span>
+
+      <GroupingComponentList isInline={shouldInlineValue}>
+        {children}
+      </GroupingComponentList>
+    </GroupingComponentWrapper>
+  );
+};
+
+const GroupingComponentList = styled('ul')<{isInline: boolean}>`
+  padding: 0;
+  margin: 0;
+  list-style: none;
+  &,
+  & > li {
+    display: ${p => (p.isInline ? 'inline' : 'block')};
+  }
+`;
+
+const GroupingComponentListItem = styled('li')`
+  padding: 0;
+  margin: ${space(0.25)} 0 ${space(0.25)} ${space(1.5)};
+`;
+
+const GroupingValue = styled('code')<{valueType: string}>`
+  display: inline-block;
+  margin: ${space(0.25)} ${space(0.5)} ${space(0.25)} 0;
+  font-size: ${p => p.theme.fontSizeSmall};
+  padding: 0 ${space(0.25)};
+  background: rgba(112, 163, 214, 0.1);
+  color: #4e3fb4;
+
+  ${({valueType}) =>
+    (valueType === 'function' || valueType === 'symbol') &&
+    `
+    font-weight: bold;
+    color: #2c58a8;
+  `}
+`;
+
+const GroupingComponentWrapper = styled('div')<{isContributing: boolean}>`
+  color: ${p => (p.isContributing ? null : p.theme.gray6)};
+
+  ${GroupingValue} {
+    opacity: ${p => (p.isContributing ? 1 : 0.6)};
+  }
+`;
+
+export default GroupingComponent;
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo/groupingConfigSelect.tsx b/src/sentry/static/sentry/app/components/events/groupingInfo/groupingConfigSelect.tsx
new file mode 100644
index 0000000000..4419dce467
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo/groupingConfigSelect.tsx
@@ -0,0 +1,78 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {EventGroupingConfig} from 'app/types';
+import AsyncComponent from 'app/components/asyncComponent';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import Tooltip from 'app/components/tooltip';
+import {t} from 'app/locale';
+
+import {GroupingConfigItem} from '.';
+
+type Props = AsyncComponent['props'] & {
+  eventConfigId: string;
+  configId: string;
+  onSelect: (selection: any) => void;
+};
+
+type State = AsyncComponent['state'] & {
+  configs: EventGroupingConfig[];
+};
+
+class GroupingConfigSelect extends AsyncComponent<Props, State> {
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      configs: [],
+    };
+  }
+
+  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
+    return [['configs', '/grouping-configs/']];
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {configId, eventConfigId, onSelect} = this.props;
+    const {configs} = this.state;
+
+    const options = configs
+      .filter(config => !config.hidden || config.id === eventConfigId)
+      .map(({id}) => ({
+        value: id,
+        label: (
+          <GroupingConfigItem isActive={id === eventConfigId}>{id}</GroupingConfigItem>
+        ),
+      }));
+
+    return (
+      <DropdownAutoComplete
+        value={configId}
+        onSelect={onSelect}
+        alignMenu="left"
+        selectedItem={configId}
+        items={options}
+      >
+        {({isOpen}) => (
+          <Tooltip title={t('Click here to experiment with other grouping configs')}>
+            <StyledDropdownButton isOpen={isOpen} size="small">
+              <GroupingConfigItem isActive={eventConfigId === configId}>
+                {configId}
+              </GroupingConfigItem>
+            </StyledDropdownButton>
+          </Tooltip>
+        )}
+      </DropdownAutoComplete>
+    );
+  }
+}
+
+const StyledDropdownButton = styled(DropdownButton)`
+  font-weight: inherit;
+`;
+
+export default GroupingConfigSelect;
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo/groupingVariant.tsx b/src/sentry/static/sentry/app/components/events/groupingInfo/groupingVariant.tsx
new file mode 100644
index 0000000000..de8985bef1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo/groupingVariant.tsx
@@ -0,0 +1,180 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import capitalize from 'lodash/capitalize';
+
+import {t} from 'app/locale';
+import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
+import {EventGroupVariant, EventGroupVariantType, EventGroupComponent} from 'app/types';
+import ButtonBar from 'app/components/buttonBar';
+import Button from 'app/components/button';
+import theme from 'app/utils/theme';
+import {IconCheckmark, IconClose} from 'app/icons';
+import space from 'app/styles/space';
+import Tooltip from 'app/components/tooltip';
+
+import {hasNonContributingComponent} from './utils';
+import GroupingComponent from './groupingComponent';
+
+type Props = {
+  variant: EventGroupVariant;
+};
+
+type State = {
+  showNonContributing: boolean;
+};
+
+type VariantData = [string, React.ReactNode][];
+
+class GroupVariant extends React.Component<Props, State> {
+  state = {
+    showNonContributing: false,
+  };
+
+  handleShowNonContributing = () => {
+    this.setState({showNonContributing: true});
+  };
+
+  handleHideNonContributing = () => {
+    this.setState({showNonContributing: false});
+  };
+
+  getVariantData(): [VariantData, EventGroupComponent | undefined] {
+    const {variant} = this.props;
+    const data: VariantData = [[t('Type'), variant.type]];
+    let component: EventGroupComponent | undefined;
+
+    if (variant.hash !== null) {
+      data.push([t('Hash'), variant.hash]);
+    }
+
+    if (variant.hashMismatch) {
+      data.push([
+        t('Hash mismatch'),
+        t('hashing algorithm produced a hash that does not match the event'),
+      ]);
+    }
+
+    switch (variant.type) {
+      case EventGroupVariantType.COMPONENT:
+        component = variant.component;
+        if (variant.config?.id) {
+          data.push([t('Grouping Config'), variant.config.id]);
+        }
+        break;
+      case EventGroupVariantType.CUSTOM_FINGERPRINT:
+        if (variant.values) {
+          data.push([t('Fingerprint values'), variant.values]);
+        }
+        break;
+      case EventGroupVariantType.SALTED_COMPONENT:
+        component = variant.component;
+        if (variant.values) {
+          data.push([t('Fingerprint values'), variant.values]);
+        }
+        if (variant.config?.id) {
+          data.push([t('Grouping Config'), variant.config.id]);
+        }
+        break;
+      default:
+        break;
+    }
+
+    if (component) {
+      data.push([
+        t('Grouping'),
+        <GroupingTree key={component.id}>
+          <GroupingComponent
+            component={component}
+            showNonContributing={this.state.showNonContributing}
+          />
+        </GroupingTree>,
+      ]);
+    }
+
+    return [data, component];
+  }
+
+  renderTitle() {
+    const {variant} = this.props;
+    const isContributing = variant.hash !== null;
+
+    return (
+      <Tooltip
+        title={isContributing ? t('Contributing variant') : t('Non-contributing variant')}
+      >
+        <VariantTitle>
+          <ContributionIcon isContributing={isContributing} />
+          {t('By')}{' '}
+          {variant.description
+            .split(' ')
+            .map(i => capitalize(i))
+            .join(' ')}
+        </VariantTitle>
+      </Tooltip>
+    );
+  }
+
+  renderContributionToggle() {
+    const {showNonContributing} = this.state;
+
+    return (
+      <ButtonBar merged active={showNonContributing ? 'all' : 'relevant'}>
+        <Button barId="relevant" size="xsmall" onClick={this.handleHideNonContributing}>
+          {t('Contributing values')}
+        </Button>
+        <Button barId="all" size="xsmall" onClick={this.handleShowNonContributing}>
+          {t('All values')}
+        </Button>
+      </ButtonBar>
+    );
+  }
+
+  render() {
+    const [data, component] = this.getVariantData();
+
+    return (
+      <VariantWrapper>
+        <Header>
+          {this.renderTitle()}
+          {hasNonContributingComponent(component) && this.renderContributionToggle()}
+        </Header>
+
+        <KeyValueList data={data} isContextData isSorted={false} />
+      </VariantWrapper>
+    );
+  }
+}
+
+const VariantWrapper = styled('div')`
+  margin-bottom: ${space(4)};
+`;
+
+const Header = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  margin-bottom: ${space(2)};
+`;
+
+const VariantTitle = styled('h5')`
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin: 0;
+  display: flex;
+  align-items: center;
+`;
+
+const ContributionIcon = styled(({isContributing, ...p}) =>
+  isContributing ? (
+    <IconCheckmark size="sm" isCircled color={theme.green} {...p} />
+  ) : (
+    <IconClose size="sm" isCircled color={theme.red} {...p} />
+  )
+)`
+  margin-right: ${space(1)};
+`;
+
+const GroupingTree = styled('div')`
+  color: #2f2936;
+`;
+
+export default GroupVariant;
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo/index.tsx b/src/sentry/static/sentry/app/components/events/groupingInfo/index.tsx
new file mode 100644
index 0000000000..606b51e64e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo/index.tsx
@@ -0,0 +1,178 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {Client} from 'app/api';
+import AsyncComponent from 'app/components/asyncComponent';
+import EventDataSection from 'app/components/events/eventDataSection';
+import {t} from 'app/locale';
+import withOrganization from 'app/utils/withOrganization';
+import {Organization, Event, EventGroupInfo} from 'app/types';
+import space from 'app/styles/space';
+import Button from 'app/components/button';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+import GroupVariant from './groupingVariant';
+import GroupingConfigSelect from './groupingConfigSelect';
+
+type Props = AsyncComponent['props'] & {
+  api: Client;
+  organization: Organization;
+  projectId: string;
+  event: Event;
+  showSelector: boolean;
+};
+
+type State = AsyncComponent['state'] & {
+  isOpen: boolean;
+  configOverride: string | null;
+  groupInfo: EventGroupInfo;
+};
+
+class EventGroupingInfo extends AsyncComponent<Props, State> {
+  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
+    const {organization, event, projectId} = this.props;
+
+    let path = `/projects/${organization.slug}/${projectId}/events/${event.id}/grouping-info/`;
+    if (this.state?.configOverride) {
+      path = `${path}?config=${this.state.configOverride}`;
+    }
+
+    return [['groupInfo', path]];
+  }
+
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      isOpen: false,
+      configOverride: null,
+    };
+  }
+
+  toggle = () => {
+    this.setState(state => ({
+      isOpen: !state.isOpen,
+      configOverride: state.isOpen ? null : state.configOverride,
+    }));
+  };
+
+  handleConfigSelect = selection => {
+    this.setState({configOverride: selection.value}, () => this.reloadData());
+  };
+
+  renderGroupInfoSummary() {
+    const {groupInfo} = this.state;
+
+    if (groupInfo === null) {
+      return null;
+    }
+
+    const groupedBy = Object.values(groupInfo)
+      .filter(variant => variant.hash !== null)
+      .map(variant => variant.description)
+      .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))
+      .join(', ');
+
+    return <small>{`(${t('grouped by')} ${groupedBy || t('nothing')})`}</small>;
+  }
+
+  renderGroupConfigSelect() {
+    const {configOverride} = this.state;
+    const {event} = this.props;
+
+    const configId = configOverride ?? event.groupingConfig.id;
+
+    return (
+      <GroupConfigWrapper>
+        <GroupingConfigSelect
+          eventConfigId={event.groupingConfig.id}
+          configId={configId}
+          onSelect={this.handleConfigSelect}
+        />
+      </GroupConfigWrapper>
+    );
+  }
+
+  renderGroupInfo() {
+    const {groupInfo, loading} = this.state;
+    const {showSelector} = this.props;
+
+    const variants = Object.values(groupInfo).sort((a, b) =>
+      a.hash && !b.hash
+        ? -1
+        : a.description.toLowerCase().localeCompare(b.description.toLowerCase())
+    );
+
+    return (
+      <React.Fragment>
+        {showSelector && this.renderGroupConfigSelect()}
+
+        {loading ? (
+          <LoadingIndicator />
+        ) : (
+          variants.map((variant, index) => (
+            <React.Fragment key={variant.key}>
+              <GroupVariant variant={variant} />
+              {index < variants.length - 1 && <VariantDivider />}
+            </React.Fragment>
+          ))
+        )}
+      </React.Fragment>
+    );
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {isOpen} = this.state;
+
+    const title = (
+      <React.Fragment>
+        {t('Event Grouping Information')}
+        {!isOpen && this.renderGroupInfoSummary()}
+      </React.Fragment>
+    );
+
+    const actions = (
+      <ToggleButton onClick={this.toggle} priority="link">
+        {isOpen ? t('Hide Details') : t('Show Details')}
+      </ToggleButton>
+    );
+
+    return (
+      <EventDataSection type="grouping-info" title={title} actions={actions}>
+        {isOpen && this.renderGroupInfo()}
+      </EventDataSection>
+    );
+  }
+}
+
+const ToggleButton = styled(Button)`
+  font-weight: 700;
+  color: ${p => p.theme.gray3};
+  &:hover,
+  &:focus {
+    color: ${p => p.theme.gray4};
+  }
+`;
+
+const GroupConfigWrapper = styled('div')`
+  margin-bottom: ${space(1.5)};
+  margin-top: -${space(1)};
+`;
+
+export const GroupingConfigItem = styled('span')<{
+  isHidden?: boolean;
+  isActive?: boolean;
+}>`
+  font-family: ${p => p.theme.text.familyMono};
+  opacity: ${p => (p.isHidden ? 0.5 : null)};
+  font-weight: ${p => (p.isActive ? 'bold' : null)};
+`;
+
+const VariantDivider = styled('hr')`
+  padding-top: ${space(1)};
+`;
+
+export default withOrganization(EventGroupingInfo);
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo/utils.tsx b/src/sentry/static/sentry/app/components/events/groupingInfo/utils.tsx
new file mode 100644
index 0000000000..35a9140d75
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo/utils.tsx
@@ -0,0 +1,19 @@
+import isObject from 'lodash/isObject';
+
+import {EventGroupComponent} from 'app/types';
+
+export function hasNonContributingComponent(component: EventGroupComponent | undefined) {
+  if (!component?.contributes) {
+    return true;
+  }
+  for (const value of component.values) {
+    if (isObject(value) && hasNonContributingComponent(value)) {
+      return true;
+    }
+  }
+  return false;
+}
+
+export function shouldInlineComponentValue(component: EventGroupComponent) {
+  return component.values.every(value => !isObject(value));
+}
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
index 7165defb01..6c158f9f97 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
@@ -146,7 +146,7 @@ export const fields: {[key: string]: Field} = {
     choices: ({groupingConfigs}) =>
       groupingConfigs.map(({id, hidden}) => [
         id.toString(),
-        <GroupingConfigItem key={id} hidden={hidden}>
+        <GroupingConfigItem key={id} isHidden={hidden}>
           {id}
         </GroupingConfigItem>,
       ]),
@@ -177,7 +177,10 @@ export const fields: {[key: string]: Field} = {
       );
     },
     choices: ({groupingEnhancementBases}) =>
-      groupingEnhancementBases.map(({id}) => [id.toString(), <code key={id}>{id}</code>]),
+      groupingEnhancementBases.map(({id}) => [
+        id.toString(),
+        <GroupingConfigItem key={id}>{id}</GroupingConfigItem>,
+      ]),
     help: t('The built-in base version of grouping enhancements.'),
     visible: ({features}) => features.has('set-grouping-config'),
   },
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 6edc4cec99..b88614789a 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -277,6 +277,11 @@ type SentryEventBase = {
 
   oldestEventID: string | null;
   latestEventID: string | null;
+
+  groupingConfig: {
+    id: string;
+    enhancements: string;
+  };
 };
 
 export type SentryTransactionEvent = {
@@ -1217,3 +1222,42 @@ export type PlatformIntegration = {
   link: string | null;
   name: string;
 };
+
+export type EventGroupComponent = {
+  contributes: boolean;
+  hint: string | null;
+  id: string;
+  name: string | null;
+  values: EventGroupComponent[] | string[];
+};
+export type EventGroupingConfig = {
+  base: string | null;
+  changelog: string;
+  delegates: string[];
+  hidden: boolean;
+  id: string;
+  latest: boolean;
+  risk: number;
+  strategies: string[];
+};
+
+type EventGroupVariantKey = 'custom-fingerprint' | 'app' | 'default' | 'system';
+
+export enum EventGroupVariantType {
+  CUSTOM_FINGERPRINT = 'custom-fingerprint',
+  COMPONENT = 'component',
+  SALTED_COMPONENT = 'salted-component',
+}
+
+export type EventGroupVariant = {
+  description: string;
+  hash: string | null;
+  hashMismatch: boolean;
+  key: EventGroupVariantKey;
+  type: EventGroupVariantType;
+  values?: string;
+  component?: EventGroupComponent;
+  config?: EventGroupingConfig;
+};
+
+export type EventGroupInfo = Record<EventGroupVariantKey, EventGroupVariant>;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index f5ff571b82..caaea7e38f 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1380,32 +1380,6 @@ div.commands {
   }
 }
 
-.box.grouping-info {
-  padding-top: 20px !important;
-  padding-bottom: 18px !important;
-  position: relative;
-  .clearfix;
-
-  .box-header h3 {
-    margin: 0 !important;
-    padding: 0 !important;
-  }
-
-  .box-content {
-    padding: 10px 20px;
-  }
-
-  a.grouping-info-toggle {
-    font-size: 14px;
-    font-weight: bold;
-    color: rgba(0, 0, 0, 0.7);
-
-    &:hover {
-      color: rgba(0, 0, 0, 0.9);
-    }
-  }
-}
-
 /* message details */
 .server-list,
 .url-list,
