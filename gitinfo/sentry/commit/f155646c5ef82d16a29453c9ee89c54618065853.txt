commit f155646c5ef82d16a29453c9ee89c54618065853
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Jun 30 14:19:16 2020 -0700

    feat(metric_alerts): Improve validation around alert rule level resolve thresholds (#19625)
    
    We weren't actually validating this new threshold after the recent changes, this makes sure that we
    do. We take use the alert rule level `resolve_threshold` first, then check the one provided by the
    triggers otherwise. It's still advisable to only set the alert rule level or trigger level values.

diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index 41d1cfead6..bb4999a7eb 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -418,7 +418,7 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
                 critical.get("threshold_type", AlertRuleThresholdType.ABOVE.value)
             ),
         )
-        self._validate_trigger_thresholds(threshold_type, critical)
+        self._validate_trigger_thresholds(threshold_type, critical, data.get("resolve_threshold"))
 
         if len(triggers) == 2:
             warning = triggers[1]
@@ -427,7 +427,9 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
                     "Must have matching threshold types (i.e. critical and warning "
                     "triggers must both be an upper or lower bound)"
                 )
-            self._validate_trigger_thresholds(threshold_type, warning)
+            self._validate_trigger_thresholds(
+                threshold_type, warning, data.get("resolve_threshold")
+            )
             self._validate_critical_warning_triggers(threshold_type, critical, warning)
 
         # Temporarily fetch resolve threshold from the triggers if one isn't explicitly
@@ -446,6 +448,9 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
                 )
             else:
                 data["resolve_threshold"] = None
+        else:
+            for trigger in triggers:
+                trigger["resolve_threshold"] = data["resolve_threshold"]
 
         # Triggers have passed checks. Check that all triggers have at least one action now.
         for trigger in triggers:
@@ -457,8 +462,11 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
 
         return data
 
-    def _validate_trigger_thresholds(self, threshold_type, trigger):
-        if trigger.get("resolve_threshold") is None:
+    def _validate_trigger_thresholds(self, threshold_type, trigger, resolve_threshold):
+        resolve_threshold = (
+            resolve_threshold if resolve_threshold is not None else trigger.get("resolve_threshold")
+        )
+        if resolve_threshold is None:
             return
         # Since we're comparing non-inclusive thresholds here (>, <), we need
         # to modify the values when we compare. An example of why:
@@ -470,9 +478,7 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
         else:
             alert_op, alert_add, resolve_add = operator.gt, -1, 1
 
-        if alert_op(
-            trigger["alert_threshold"] + alert_add, trigger["resolve_threshold"] + resolve_add
-        ):
+        if alert_op(trigger["alert_threshold"] + alert_add, resolve_threshold + resolve_add):
             raise serializers.ValidationError(
                 "{} alert threshold must be above resolution threshold".format(trigger["label"])
             )
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index 945da747a7..8d695ceec4 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -152,6 +152,12 @@ class TestAlertRuleSerializer(TestCase):
         alert_rule = serializer.save()
         assert alert_rule.snuba_query.aggregate == aggregate
 
+    def test_alert_rule_resolved_invalid(self):
+        self.run_fail_validation_test(
+            {"resolve_threshold": 500},
+            {"nonFieldErrors": ["critical alert threshold must be above resolution threshold"]},
+        )
+
     def test_transaction_dataset(self):
         serializer = AlertRuleSerializer(context=self.context, data=self.valid_transaction_params)
         assert serializer.is_valid(), serializer.errors
@@ -165,9 +171,10 @@ class TestAlertRuleSerializer(TestCase):
         resolve_threshold = 0.7
         params["triggers"][0]["alertThreshold"] = alert_threshold
         params["triggers"][0]["resolveThreshold"] = resolve_threshold
+        params["resolve_threshold"] = resolve_threshold
         # Drop off the warning trigger
         params["triggers"].pop()
-        serializer = AlertRuleSerializer(context=self.context, data=self.valid_transaction_params)
+        serializer = AlertRuleSerializer(context=self.context, data=params)
         assert serializer.is_valid(), serializer.errors
         alert_rule = serializer.save()
         trigger = alert_rule.alertruletrigger_set.filter(label="critical").get()
@@ -249,7 +256,7 @@ class TestAlertRuleSerializer(TestCase):
             "time_window": 10,
             "query": "level:error",
             "aggregate": "count()",
-            "resolve_threshold": 50,
+            "resolve_threshold": 99,
             "threshold_period": 1,
             "projects": [self.project.slug],
             "triggers": [
@@ -267,7 +274,7 @@ class TestAlertRuleSerializer(TestCase):
         serializer = AlertRuleSerializer(context=self.context, data=payload, partial=True)
 
         assert serializer.is_valid(), serializer.errors
-        assert serializer.validated_data["resolve_threshold"] == 50
+        assert serializer.validated_data["resolve_threshold"] == 99
 
     def test_boundary(self):
         payload = {
