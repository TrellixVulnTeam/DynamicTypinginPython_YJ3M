commit 2ec8c7328fe5ed6a65be97ff54deb67bebb47391
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 7 01:08:53 2012 -0500

    Add repair command (fixes GH-477)

diff --git a/docs/cli/index.rst b/docs/cli/index.rst
index 9213276e46..2690fc9563 100644
--- a/docs/cli/index.rst
+++ b/docs/cli/index.rst
@@ -42,3 +42,12 @@ Builtin Commands
 
     Performs all trim operations based on your configuration.
 
+.. data:: repair
+
+    Performs any needed repair against the Sentry database. This will attempt to correct
+    things like missing teams, project keys, etc.
+
+    If you specify ``--owner`` it will also update ownerless projects::
+
+        sentry repair --owner=<username>
+
diff --git a/sentry/management/commands/repair.py b/sentry/management/commands/repair.py
new file mode 100644
index 0000000000..288bf500d5
--- /dev/null
+++ b/sentry/management/commands/repair.py
@@ -0,0 +1,70 @@
+"""
+sentry.management.commands.repair
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.management.base import BaseCommand
+from optparse import make_option
+
+
+class Command(BaseCommand):
+    help = 'Attempts to repair any invalid data within Sentry'
+
+    option_list = BaseCommand.option_list + (
+        make_option('--owner', type=int, help='Username to transfer ownerless projects to.'),
+    )
+
+    def handle(self, **options):
+        from django.contrib.auth.models import User
+        from django.template.defaultfilters import slugify
+        from sentry.models import Project, Team, ProjectKey
+        from sentry.utils.models import update
+
+        if options.get('owner'):
+            owner = User.objects.get(username__iexact=options.get('owner'))
+        else:
+            owner = None
+
+        if owner:
+            print "Assigning ownerless projects to %s" % owner.username
+            # Assign unowned projects
+            for project in Project.objects.filter(owner__isnull=True):
+                update(project, owner=owner)
+                print "* Changed owner of %s" % project
+
+        # Create teams for any projects that are missing them
+        print "Creating missing teams on projects"
+        for project in Project.objects.filter(team__isnull=True, owner__isnull=False):
+            team = Team(
+                name=project.name,
+                owner=project.owner,
+            )
+            base_slug = slugify(team.name)
+            slug = base_slug
+            n = 0
+            while True:
+                if Team.objects.filter(slug=slug).exists():
+                    n += 1
+                    slug = base_slug + '-' + str(n)
+                    continue
+                team.slug = slug
+                break
+
+            team.save()
+
+            update(project, team=team)
+            print "* Created team %s for %s" % (team, project)
+
+        # Create missing project keys
+        print "Creating missing project keys"
+        for team in Team.objects.all():
+            for member in team.member_set.select_related('user'):
+                for project in team.project_set.all():
+                    created = ProjectKey.objects.get_or_create(
+                        project=project,
+                        user=member.user,
+                    )[1]
+                    if created:
+                        print "* Created key for %s on %s" % (member.user.username, project)
