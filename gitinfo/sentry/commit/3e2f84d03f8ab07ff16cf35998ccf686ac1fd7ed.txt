commit 3e2f84d03f8ab07ff16cf35998ccf686ac1fd7ed
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Apr 2 13:14:09 2020 -0700

    - Make `get_send_to` work as expected.
    - Migrate `get_sendable_users` across
    - Migrate tests into `test_adapter.py`. These are mostly just copy/pasted from the previous tests.
      We'll eventually remove the tests from the plugin once we remove it.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index f29e180ce5..32f7f8181d 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -18,6 +18,15 @@ class MailAdapter(object):
     and eventually deprecate `MailPlugin` entirely.
     """
 
+    alert_option_key = "mail:alert"
+
+    def get_sendable_users(self, project):
+        """
+        Return a collection of user IDs that are eligible to receive
+        notifications for the provided project.
+        """
+        return project.get_notification_recipients(self.alert_option_key)
+
     def get_send_to(self, project, event=None):
         """
         Returns a list of user IDs for the users that should receive
@@ -74,7 +83,7 @@ class MailAdapter(object):
                     skip_internal=True,
                 )
 
-        cache_key = "%s:send_to:%s" % (self.get_conf_key(), project.pk)
+        cache_key = "mail:send_to:{}".format(project.pk)
         send_to_list = cache.get(cache_key)
         if send_to_list is None:
             send_to_list = [s for s in self.get_sendable_users(project) if s]
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 979a3e6793..d8da15c2e0 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -11,13 +11,11 @@ from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
 from sentry import options
-from sentry.models import ProjectOwnership, User
 
 from sentry.digests.utilities import get_digest_metadata, get_personalized_digests
+from sentry.mail.adapter import MailAdapter
 from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
-from sentry.utils import metrics
-from sentry.utils.cache import cache
 from sentry.utils.committers import get_serialized_event_file_committers
 from sentry.utils.email import MessageBuilder, group_id_to_email
 from sentry.utils.http import absolute_uri
@@ -37,6 +35,7 @@ class MailPlugin(NotificationPlugin):
     author_url = "https://github.com/getsentry/sentry"
     project_default_enabled = True
     project_conf_form = None
+    mail_adapter = MailAdapter()
 
     def _subject_prefix(self):
         return options.get("mail.subject-prefix")
@@ -105,62 +104,7 @@ class MailPlugin(NotificationPlugin):
 
         This result may come from cached data.
         """
-        if not (project and project.teams.exists()):
-            logger.debug("Tried to send notification to invalid project: %r", project)
-            return []
-
-        if event:
-            owners, _ = ProjectOwnership.get_owners(project.id, event.data)
-            if owners != ProjectOwnership.Everyone:
-                if not owners:
-                    metrics.incr(
-                        "features.owners.send_to",
-                        tags={"organization": project.organization_id, "outcome": "empty"},
-                        skip_internal=True,
-                    )
-                    return []
-
-                metrics.incr(
-                    "features.owners.send_to",
-                    tags={"organization": project.organization_id, "outcome": "match"},
-                    skip_internal=True,
-                )
-                send_to_list = set()
-                teams_to_resolve = set()
-                for owner in owners:
-                    if owner.type == User:
-                        send_to_list.add(owner.id)
-                    else:
-                        teams_to_resolve.add(owner.id)
-
-                # get all users in teams
-                if teams_to_resolve:
-                    send_to_list |= set(
-                        User.objects.filter(
-                            is_active=True,
-                            sentry_orgmember_set__organizationmemberteam__team__id__in=teams_to_resolve,
-                        ).values_list("id", flat=True)
-                    )
-
-                alert_settings = project.get_member_alert_settings(self.alert_option_key)
-                disabled_users = set(
-                    user for user, setting in alert_settings.items() if setting == 0
-                )
-                return send_to_list - disabled_users
-            else:
-                metrics.incr(
-                    "features.owners.send_to",
-                    tags={"organization": project.organization_id, "outcome": "everyone"},
-                    skip_internal=True,
-                )
-
-        cache_key = "%s:send_to:%s" % (self.get_conf_key(), project.pk)
-        send_to_list = cache.get(cache_key)
-        if send_to_list is None:
-            send_to_list = [s for s in self.get_sendable_users(project) if s]
-            cache.set(cache_key, send_to_list, 60)  # 1 minute cache
-
-        return send_to_list
+        return self.mail_adapter.get_send_to(project, event)
 
     def add_unsubscribe_link(self, context, user_id, project, referrer):
         context["unsubscribe_link"] = generate_signed_link(
diff --git a/tests/sentry/mail/__init__.py b/tests/sentry/mail/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/mail/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
new file mode 100644
index 0000000000..f121ec25ed
--- /dev/null
+++ b/tests/sentry/mail/test_adapter.py
@@ -0,0 +1,155 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.models import (
+    OrganizationMember,
+    OrganizationMemberTeam,
+    ProjectOwnership,
+    User,
+    UserOption,
+)
+from sentry.event_manager import EventManager, get_event_type
+from sentry.mail.adapter import MailAdapter
+from sentry.ownership.grammar import dump_schema, Matcher, Owner, Rule
+from sentry.testutils import TestCase
+
+
+class BaseMailAdapterTest(object):
+    @fixture
+    def adapter(self):
+        return MailAdapter()
+
+
+class MailAdapterGetSendToTest(BaseMailAdapterTest, TestCase):
+    def setUp(self):
+        self.user = self.create_user(email="foo@example.com", is_active=True)
+        self.user2 = self.create_user(email="baz@example.com", is_active=True)
+        self.organization = self.create_organization(owner=self.user)
+        self.team = self.create_team(organization=self.organization)
+
+        self.project = self.create_project(name="Test", teams=[self.team])
+        OrganizationMemberTeam.objects.create(
+            organizationmember=OrganizationMember.objects.get(
+                user=self.user, organization=self.organization
+            ),
+            team=self.team,
+        )
+        self.create_member(user=self.user2, organization=self.organization, teams=[self.team])
+        ProjectOwnership.objects.create(
+            project_id=self.project.id,
+            schema=dump_schema(
+                [
+                    Rule(Matcher("path", "*.py"), [Owner("team", self.team.slug)]),
+                    Rule(Matcher("path", "*.jx"), [Owner("user", self.user2.email)]),
+                    Rule(
+                        Matcher("path", "*.cbl"),
+                        [Owner("user", self.user.email), Owner("user", self.user2.email)],
+                    ),
+                ]
+            ),
+            fallthrough=True,
+        )
+
+    def make_event_data(self, filename, url="http://example.com"):
+        mgr = EventManager(
+            {
+                "tags": [("level", "error")],
+                "stacktrace": {"frames": [{"lineno": 1, "filename": filename}]},
+                "request": {"url": url},
+            }
+        )
+        mgr.normalize()
+        data = mgr.get_data()
+        event_type = get_event_type(data)
+        data["type"] = event_type.key
+        data["metadata"] = event_type.get_metadata(data)
+        return data
+
+    def test_get_send_to_with_team_owners(self):
+        event = self.store_event(data=self.make_event_data("foo.py"), project_id=self.project.id)
+        assert sorted(set([self.user.pk, self.user2.pk])) == sorted(
+            self.adapter.get_send_to(self.project, event.data)
+        )
+
+        # Make sure that disabling mail alerts works as expected
+        UserOption.objects.set_value(
+            user=self.user2, key="mail:alert", value=0, project=self.project
+        )
+        assert set([self.user.pk]) == self.adapter.get_send_to(self.project, event.data)
+
+    def test_get_send_to_with_user_owners(self):
+        event = self.store_event(data=self.make_event_data("foo.cbl"), project_id=self.project.id)
+        assert sorted(set([self.user.pk, self.user2.pk])) == sorted(
+            self.adapter.get_send_to(self.project, event.data)
+        )
+
+        # Make sure that disabling mail alerts works as expected
+        UserOption.objects.set_value(
+            user=self.user2, key="mail:alert", value=0, project=self.project
+        )
+        assert set([self.user.pk]) == self.adapter.get_send_to(self.project, event.data)
+
+    def test_get_send_to_with_user_owner(self):
+        event = self.store_event(data=self.make_event_data("foo.jx"), project_id=self.project.id)
+        assert set([self.user2.pk]) == self.adapter.get_send_to(self.project, event.data)
+
+    def test_get_send_to_with_fallthrough(self):
+        event = self.store_event(data=self.make_event_data("foo.cpp"), project_id=self.project.id)
+        assert set([self.user.pk, self.user2.pk]) == set(
+            self.adapter.get_send_to(self.project, event.data)
+        )
+
+    def test_get_send_to_without_fallthrough(self):
+        ProjectOwnership.objects.get(project_id=self.project.id).update(fallthrough=False)
+        event = self.store_event(data=self.make_event_data("foo.cpp"), project_id=self.project.id)
+        assert [] == self.adapter.get_send_to(self.project, event.data)
+
+
+class MailAdapterGetSendableUsersTest(BaseMailAdapterTest, TestCase):
+    def test_get_sendable_users(self):
+        user = self.create_user(email="foo@example.com", is_active=True)
+        user2 = self.create_user(email="baz@example.com", is_active=True)
+        self.create_user(email="baz2@example.com", is_active=True)
+
+        # user with inactive account
+        self.create_user(email="bar@example.com", is_active=False)
+        # user not in any groups
+        self.create_user(email="bar2@example.com", is_active=True)
+
+        organization = self.create_organization(owner=user)
+        team = self.create_team(organization=organization)
+
+        project = self.create_project(name="Test", teams=[team])
+        OrganizationMemberTeam.objects.create(
+            organizationmember=OrganizationMember.objects.get(user=user, organization=organization),
+            team=team,
+        )
+        self.create_member(user=user2, organization=organization, teams=[team])
+
+        # all members
+        assert sorted(set([user.pk, user2.pk])) == sorted(self.adapter.get_sendable_users(project))
+
+        # disabled user2
+        UserOption.objects.create(key="mail:alert", value=0, project=project, user=user2)
+
+        assert user2.pk not in self.adapter.get_sendable_users(project)
+
+        user4 = User.objects.create(username="baz4", email="bar@example.com", is_active=True)
+        self.create_member(user=user4, organization=organization, teams=[team])
+        assert user4.pk in self.adapter.get_sendable_users(project)
+
+        # disabled by default user4
+        uo1 = UserOption.objects.create(
+            key="subscribe_by_default", value="0", project=project, user=user4
+        )
+
+        assert user4.pk not in self.adapter.get_sendable_users(project)
+
+        uo1.delete()
+
+        UserOption.objects.create(
+            key="subscribe_by_default", value=u"0", project=project, user=user4
+        )
+
+        assert user4.pk not in self.adapter.get_sendable_users(project)
