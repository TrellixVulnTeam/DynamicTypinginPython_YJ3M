commit febba37b0ecb41ee65374b0214f68b97722f3a96
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 9 14:18:06 2010 -0800

    Add haystack search support

diff --git a/example_project/.gitignore b/example_project/.gitignore
new file mode 100644
index 0000000000..a6e7b064dc
--- /dev/null
+++ b/example_project/.gitignore
@@ -0,0 +1 @@
+sentry_index/
\ No newline at end of file
diff --git a/example_project/settings.py b/example_project/settings.py
index af97c357b5..1c4f53f0b6 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -105,6 +105,7 @@ INSTALLED_APPS = (
     'sentry.plugins.sentry_servers',
     'sentry.plugins.sentry_sites',
     'sentry.plugins.sentry_urls',
+    # 'haystack',
     'paging',
     'south',
     'indexer',
@@ -117,17 +118,16 @@ logging.basicConfig(level=logging.DEBUG)
 
 SENTRY_THRASHING_TIMEOUT = 0
 SENTRY_TESTING = True
-SENTRY_FILTERS = (
-    'sentry.filters.StatusFilter',
-    'sentry.filters.LoggerFilter',
-    'sentry.filters.LevelFilter',
-    'sentry.filters.ServerNameFilter',
-    'sentry.filters.SiteFilter',
-    'example_project.filters.IPFilter',
-)
 SENTRY_SITE = 'example'
 SENTRY_PUBLIC = False
 
+# HAYSTACK_WHOOSH_PATH = os.path.join(PROJECT_ROOT, 'sentry_index')
+# HAYSTACK_SEARCH_ENGINE = 'whoosh'
+# HAYSTACK_SOLR_URL = 'http://127.0.0.1:8983/solr'
+# HAYSTACK_SEARCH_ENGINE = 'solr'
+
+HAYSTACK_SITECONF = 'sentry.search_indexes'
+
 try:
     import debug_toolbar
 except ImportError, exc:
diff --git a/sentry/client/base.py b/sentry/client/base.py
index f3a41f5daf..f7aa5e0a88 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -46,9 +46,8 @@ class SentryClient(object):
         for filter_ in get_filters():
             kwargs = filter_(None).process(kwargs) or kwargs
         
-        # Make sure all additional data is coerced
-        if 'data' in kwargs:
-            kwargs['data'] = transform(kwargs['data'])
+        # Make sure all data is coerced
+        kwargs = transform(kwargs)
 
         return self.send(**kwargs)
 
diff --git a/sentry/conf.py b/sentry/conf.py
index 50889d17c3..894251ea5b 100644
--- a/sentry/conf.py
+++ b/sentry/conf.py
@@ -16,13 +16,14 @@ if DATABASE_USING:
 THRASHING_TIMEOUT = getattr(settings, 'SENTRY_THRASHING_TIMEOUT', 60)
 THRASHING_LIMIT = getattr(settings, 'SENTRY_THRASHING_LIMIT', 10)
 
-FILTERS = getattr(settings, 'SENTRY_FILTERS', (
+FILTERS = getattr(settings, 'SENTRY_FILTERS', filter(None, (
+    getattr(settings, 'HAYSTACK_SEARCH_ENGINE', 'dummy') != 'dummy' and 'sentry.filters.SearchFilter' or None,
     'sentry.filters.StatusFilter',
     'sentry.filters.LoggerFilter',
     'sentry.filters.LevelFilter',
     'sentry.filters.ServerNameFilter',
     'sentry.filters.SiteFilter',
-))
+)))
 
 KEY = getattr(settings, 'SENTRY_KEY', md5_constructor(settings.SECRET_KEY).hexdigest())
 
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index 400251e69e..4b8f5a7276 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -2,6 +2,7 @@
 from django.conf import settings
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
+from django.utils.html import escape
 
 from sentry import conf
 
@@ -17,7 +18,7 @@ class TextWidget(Widget):
     def render(self, value):
         return mark_safe('<div id="search"><p class="textfield"><input type="text" name="%(name)s" value="%(value)s"/></p><p class="submit"><input type="submit" class="search-submit"/></p></div>' % dict(
             name=self.filter.get_query_param(),
-            value=value,
+            value=escape(value),
         ))
 
 class ChoiceWidget(Widget):
@@ -27,7 +28,7 @@ class ChoiceWidget(Widget):
         column = self.filter.get_query_param()
 
         output = ['<ul class="%s-list filter-list sidebar-module" rel="%s">' % (self.filter.column, column)]
-        output.append('<li%(active)s><a href="%(query_string)s">Any %(label)s</a></li>' % dict(
+        output.append('<li%(active)s><a href="%(query_string)s&amp;%(column)s=">Any %(label)s</a></li>' % dict(
             active=not value and ' class="active"' or '',
             query_string=query_string,
             label=self.filter.label,
@@ -97,6 +98,15 @@ class SentryFilter(object):
         widget = self.get_widget()
         return widget.render(self.get_value())
 
+class SearchFilter(SentryFilter):
+    label = 'Search'
+    column = 'content'
+    widget = TextWidget
+    
+    def get_query_set(self, queryset):
+        # this is really just a hack
+        return queryset
+
 class StatusFilter(SentryFilter):
     label = 'Status'
     column = 'status'
diff --git a/sentry/media/styles/global.css b/sentry/media/styles/global.css
index c8242eb2e1..620cc10ccd 100644
--- a/sentry/media/styles/global.css
+++ b/sentry/media/styles/global.css
@@ -297,6 +297,9 @@ dl.flat dd {
 /* message list */
 .messages { list-style: none; margin-left: 0; }
 .messages li { list-style: none; }
+.messages .no-messages {
+    font-weight: bold;
+}
 .messages .count {
     width: 28px;
     vertical-align: top;
@@ -510,6 +513,11 @@ dl.flat dd {
     -moz-box-shadow: inset 0 1px 5px rgba(0,0,0, .30), 0 1px 0 #fff;
     -webkit-box-shadow: inset 0 1px 5px rgba(0,0,0, .30), 0 1px 0 #fff;
     position: relative;
+    margin-bottom: 18px;
+}
+
+#search p {
+    margin-bottom: 0;
 }
 
 #search .textfield input {
diff --git a/sentry/search_indexes.py b/sentry/search_indexes.py
new file mode 100644
index 0000000000..505b17adbb
--- /dev/null
+++ b/sentry/search_indexes.py
@@ -0,0 +1,18 @@
+from haystack.indexes import *
+from haystack import site
+from sentry.models import GroupedMessage
+
+class GroupedMessageIndex(RealTimeSearchIndex):
+    text = CharField(document=True, stored=False)
+    status = CharField(stored=False, null=True)
+    first_seen = DateTimeField(model_attr='first_seen', stored=False)
+    last_seen = DateTimeField(model_attr='last_seen', stored=False)
+
+    # def get_queryset(self):
+    #     """Used when the entire index for model is updated."""
+    #     return GroupedMessage.objects.all()
+
+    def prepare_text(self, instance):
+        return '\n'.join(filter(None, [instance.message, instance.class_name, instance.traceback, instance.view]))
+
+site.register(GroupedMessage, GroupedMessageIndex)
\ No newline at end of file
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 74a6f17572..99546e1b77 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -53,38 +53,43 @@
 
                     <div id="body" class="with-sidebar column">
                         {% paginate message_list from request as message_list per_page 15 %}
-                        {% if message_list.objects %}
-                            <div class="clearfix">
-                                <div class="paging-wrap">
-                                    <form method="GET" action="">
-                                        {% for k, v in request.GET.iteritems %}
-                                            <input type="hidden" name="{{ k }}" value="{{ v }}"/>
-                                        {% endfor %}
-                                        <div class="sort-by">Sort by <select name="sort" onchange="this.form.submit()">
-                                            <option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>Priority</option>
-                                            <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>Last Seen</option>
-                                            <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>First Seen</option>
-                                        </select>
-                                        </div>
-                                    </form>
-                                    {% if has_realtime %}
-                                        <a id="sentry_realtime" class="realtime realtime-pause">Pause Feed</a>
-                                    {% endif %}
-                                    {{ message_list.paging }}
-                                </div>
+
+                        <div class="clearfix">
+                            <div class="paging-wrap">
+                                <form method="GET" action="">
+                                    {% for k, v in request.GET.iteritems %}
+                                        <input type="hidden" name="{{ k }}" value="{{ v }}"/>
+                                    {% endfor %}
+                                    <div class="sort-by">Sort by <select name="sort" onchange="this.form.submit()">
+                                        <option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>Priority</option>
+                                        <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>Last Seen</option>
+                                        <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>First Seen</option>
+                                    </select>
+                                    </div>
+                                </form>
+                                {% if has_realtime %}
+                                    <a id="sentry_realtime" class="realtime realtime-pause">Pause Feed</a>
+                                {% endif %}
+                                {{ message_list.paging }}
                             </div>
+                        </div>
+                        
+                        {% if message_list.objects %}
                             <ul class="messages" id="message_list">
                                 {% for group, priority in message_list.objects|with_priority %}
                                     {% include "sentry/partial/_group.html" %}
                                 {% endfor %}
                             </ul>
-                            <div class="clearfix">
-                                {{ message_list.paging }}
-                            </div>
                         {% else %}
-                            <ul class="messages" id="message_list"></ul>
-                            <p class="no-messages" id="no_messages">No messages match your filters.</p>
+                            <ul class="messages" id="message_list">
+                                <li class="no-messages" id="no_messages">No messages match your filters.</li>
+                            </ul>
                         {% endif %}
+
+                        <div class="clearfix">
+                            {{ message_list.paging }}
+                        </div>
+
                     </div>
                 {% endblock %}
             </div>
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index f346ee4720..9064bd5838 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -605,7 +605,7 @@ class SentryTestCase(TestCase):
         last = Message.objects.get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.ERROR)
-        self.assertEquals(last.message, 'This is a test error')
+        self.assertEquals(last.message, 'Test')
         self.assertEquals(last.data, repr(uuid))
 
 class SentryViewsTest(TestCase):
diff --git a/sentry/views.py b/sentry/views.py
index b0813ba3a7..5031a0cc3d 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -4,11 +4,12 @@ try:
 except ImportError:
     import pickle
 import datetime
-import logging
 import zlib
 
+from django.conf import settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
+from django.db.models import Q
 from django.http import HttpResponse, HttpResponseBadRequest, \
     HttpResponseForbidden, HttpResponseRedirect, Http404
 from django.shortcuts import render_to_response, get_object_or_404
@@ -19,11 +20,30 @@ from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import conf
 from sentry.helpers import get_filters
-from sentry.models import GroupedMessage, Message
+from sentry.models import GroupedMessage
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.reporter import ImprovedExceptionReporter
 
+# HACK
+if 'sentry.filters.SearchFilter' in conf.FILTERS:
+    try:
+        from haystack.query import SearchQuerySet
+    except ImportError:
+        SentrySearchQuerySet = None
+    else:
+        class SentrySearchQuerySet(SearchQuerySet):
+            "Returns actual instances rather than search results."
+
+            def __getitem__(self, k):
+                result = []
+                for r in super(SentrySearchQuerySet, self).__getitem__(k):
+                    r.object.score = r.score
+                    result.append(r.object)
+                return result
+else:
+    SentrySearchQuerySet = None
+
 def login_required(func):
     def wrapped(request, *args, **kwargs):
         if not conf.PUBLIC:
@@ -75,12 +95,24 @@ def index(request):
     except (TypeError, ValueError):
         page = 1
 
-    # this only works in postgres
-    message_list = GroupedMessage.objects.extra(
-        select={
-            'score': GroupedMessage.get_score_clause(),
-        }
-    )
+    query = request.GET.get('content')
+    is_search = query and SentrySearchQuerySet
+
+    if is_search:
+        message_list = SentrySearchQuerySet().filter(content=query)
+    else:
+        message_list = GroupedMessage.objects.extra(
+            select={
+                'score': GroupedMessage.get_score_clause(),
+            }
+        )
+        if query:
+            # You really shouldnt be doing this
+            message_list = message_list.filter(
+                Q(view__icontains=query) \
+                | Q(message__icontains=query) \
+                | Q(traceback__icontains=query)
+            )
 
     sort = request.GET.get('sort')
     if sort == 'date':
@@ -89,8 +121,8 @@ def index(request):
         message_list = message_list.order_by('-first_seen')
     else:
         sort = 'priority'
-        message_list = message_list.order_by('-score', '-last_seen')
-
+        if not is_search:
+            message_list = message_list.order_by('-score', '-last_seen')
     
     any_filter = False
     for filter_ in filters:
@@ -103,7 +135,16 @@ def index(request):
 
     has_realtime = page == 1
     
-    return render_to_response('sentry/index.html', locals())
+    return render_to_response('sentry/index.html', {
+        'has_realtime': has_realtime,
+        'message_list': message_list,
+        'today': today,
+        'query': query,
+        'sort': sort,
+        'any_filter': any_filter,
+        'request': request,
+        'filters': filters,
+    })
 
 @login_required
 def ajax_handler(request):
@@ -114,11 +155,24 @@ def ajax_handler(request):
         for filter_ in get_filters():
             filters.append(filter_(request))
 
-        message_list = GroupedMessage.objects.extra(
-            select={
-                'score': GroupedMessage.get_score_clause(),
-            }
-        )
+        query = request.GET.get('content')
+        is_search = query and SentrySearchQuerySet
+
+        if is_search:
+            message_list = SentrySearchQuerySet().filter(content=query)
+        else:
+            message_list = GroupedMessage.objects.extra(
+                select={
+                    'score': GroupedMessage.get_score_clause(),
+                }
+            )
+            if query:
+                # You really shouldnt be doing this
+                message_list = message_list.filter(
+                    Q(view__icontains=query) \
+                    | Q(message__icontains=query) \
+                    | Q(traceback__icontains=query)
+                )
         
         sort = request.GET.get('sort')
         if sort == 'date':
@@ -127,7 +181,8 @@ def ajax_handler(request):
             message_list = message_list.order_by('-first_seen')
         else:
             sort = 'priority'
-            message_list = message_list.order_by('-score', '-last_seen')
+            if not is_search:
+                message_list = message_list.order_by('-score', '-last_seen')
         
         for filter_ in filters:
             if not filter_.is_set():
