commit b7e436338840b2e2ba7b3bdf51d40f589cf64003
Author: Mark Story <mark@mark-story.com>
Date:   Wed Feb 6 16:34:47 2019 -0500

    fix(issues) Link fixes for sentry10 (#11933)
    
    Use the new path instead of the old one.
    
    Point links to new places when org is in sentry 10. I've updated the
    tests for tagDistributionMeter as they were creaky.

diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index 3d023cf68c..46652ab4bd 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -40,7 +40,7 @@ const SeenInfo = createReactClass({
   getReleaseTrackingUrl() {
     const {orgId, projectId} = this.props;
 
-    return `/${orgId}/${projectId}/settings/release-tracking/`;
+    return `/settings/${orgId}/projects/${projectId}/release-tracking/`;
   },
 
   getTooltipTitle() {
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index cb8552b032..ee941bd34c 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -234,7 +234,7 @@ const GroupSidebar = createReactClass({
   render() {
     const {group, project} = this.props;
     const projectId = project.slug;
-    const orgId = this.getOrganization().slug;
+    const organization = this.getOrganization();
 
     const subscribeBtnClass = classNames('btn btn-default btn-subscribe', {
       subscribed: group.isSubscribed,
@@ -248,7 +248,11 @@ const GroupSidebar = createReactClass({
           project={project}
           allEnvironments={this.state.allEnvironmentsGroupData}
         />
-        <ExternalIssueList group={this.props.group} project={project} orgId={orgId} />
+        <ExternalIssueList
+          group={this.props.group}
+          project={project}
+          orgId={organization.slug}
+        />
 
         {this.renderPluginIssue()}
 
@@ -268,7 +272,7 @@ const GroupSidebar = createReactClass({
                 topValues={topValues}
                 name={tag.name}
                 data-test-id="group-tag"
-                orgId={orgId}
+                organization={organization}
                 projectId={projectId}
                 group={group}
               />
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index 213bfed19f..491a21e229 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -23,7 +23,7 @@ const TagDistributionMeter = createReactClass({
     group: SentryTypes.Group.isRequired,
     tag: PropTypes.string.isRequired,
     name: PropTypes.string,
-    orgId: PropTypes.string.isRequired,
+    organization: SentryTypes.Organization.isRequired,
     projectId: PropTypes.string.isRequired,
     environment: SentryTypes.Environment,
     totalValues: PropTypes.number,
@@ -94,12 +94,16 @@ const TagDistributionMeter = createReactClass({
    */
 
   renderSegments() {
-    const {orgId, projectId, group, totalValues, topValues, tag} = this.props;
+    const {organization, projectId, group, totalValues, topValues, tag} = this.props;
+    const hasSentry10 = new Set(organization.features).has('sentry10');
 
     const totalVisible = topValues.reduce((sum, value) => sum + value.count, 0);
     const hasOther = totalVisible < totalValues;
     const otherPct = percent(totalValues - totalVisible, totalValues);
     const otherPctLabel = Math.floor(otherPct);
+    const url = hasSentry10
+      ? `/organizations/${organization.slug}/issues/${group.id}/tags/${tag}/`
+      : `/${organization.slug}/${projectId}/issues/${group.id}/tags/${tag}/`;
 
     return (
       <React.Fragment>
@@ -118,7 +122,7 @@ const TagDistributionMeter = createReactClass({
             <Tooltip key={value.value} title={tooltipHtml} tooltipOptions={{html: true}}>
               <Segment
                 style={{width: pct + '%'}}
-                to={`/${orgId}/${projectId}/issues/${group.id}/tags/${tag}/`}
+                to={url}
                 index={index}
                 first={index == 0}
                 last={!hasOther && index == topValues.length - 1}
@@ -144,7 +148,7 @@ const TagDistributionMeter = createReactClass({
               first={!topValues.length}
               last={true}
               css={{width: otherPct + '%'}}
-              to={`/${orgId}/${projectId}/issues/${group.id}/tags/${tag}/`}
+              to={url}
             >
               <Description first={!topValues.length}>
                 <Percentage>{otherPctLabel}%</Percentage>
diff --git a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
index 854bc5e484..bfe0e1e3b0 100644
--- a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
@@ -716,7 +716,7 @@ exports[`GroupReleaseStats renders 1`] = `
                 }
               >
                 <a
-                  href="/org-slug/project-slug/settings/release-tracking/"
+                  href="/settings/org-slug/projects/project-slug/release-tracking/"
                 >
                   not configured
                 </a>
@@ -769,7 +769,7 @@ exports[`GroupReleaseStats renders 1`] = `
                 }
               >
                 <a
-                  href="/org-slug/project-slug/settings/release-tracking/"
+                  href="/settings/org-slug/projects/project-slug/release-tracking/"
                 >
                   not configured
                 </a>
diff --git a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
index 307f35177c..6a826b3a02 100644
--- a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
@@ -351,7 +351,33 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     }
     key="browser"
     name="Browser"
-    orgId="org-slug"
+    organization={
+      Object {
+        "access": Array [
+          "org:read",
+          "org:write",
+          "org:admin",
+          "project:read",
+          "project:write",
+          "project:admin",
+          "team:read",
+          "team:write",
+          "team:admin",
+        ],
+        "features": Array [],
+        "id": "3",
+        "name": "Organization Name",
+        "onboardingTasks": Array [],
+        "projects": Array [],
+        "scrapeJavaScript": true,
+        "slug": "org-slug",
+        "status": Object {
+          "id": "active",
+          "name": "active",
+        },
+        "teams": Array [],
+      }
+    }
     projectId="project-slug"
     tag="browser"
     topValues={
@@ -430,7 +456,33 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     }
     key="device"
     name="Device"
-    orgId="org-slug"
+    organization={
+      Object {
+        "access": Array [
+          "org:read",
+          "org:write",
+          "org:admin",
+          "project:read",
+          "project:write",
+          "project:admin",
+          "team:read",
+          "team:write",
+          "team:admin",
+        ],
+        "features": Array [],
+        "id": "3",
+        "name": "Organization Name",
+        "onboardingTasks": Array [],
+        "projects": Array [],
+        "scrapeJavaScript": true,
+        "slug": "org-slug",
+        "status": Object {
+          "id": "active",
+          "name": "active",
+        },
+        "teams": Array [],
+      }
+    }
     projectId="project-slug"
     tag="device"
     topValues={
@@ -509,7 +561,33 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     }
     key="url"
     name="URL"
-    orgId="org-slug"
+    organization={
+      Object {
+        "access": Array [
+          "org:read",
+          "org:write",
+          "org:admin",
+          "project:read",
+          "project:write",
+          "project:admin",
+          "team:read",
+          "team:write",
+          "team:admin",
+        ],
+        "features": Array [],
+        "id": "3",
+        "name": "Organization Name",
+        "onboardingTasks": Array [],
+        "projects": Array [],
+        "scrapeJavaScript": true,
+        "slug": "org-slug",
+        "status": Object {
+          "id": "active",
+          "name": "active",
+        },
+        "teams": Array [],
+      }
+    }
     projectId="project-slug"
     tag="url"
     topValues={
@@ -588,7 +666,33 @@ exports[`GroupSidebar renders with tags renders 1`] = `
     }
     key="environment"
     name="Environment"
-    orgId="org-slug"
+    organization={
+      Object {
+        "access": Array [
+          "org:read",
+          "org:write",
+          "org:admin",
+          "project:read",
+          "project:write",
+          "project:admin",
+          "team:read",
+          "team:write",
+          "team:admin",
+        ],
+        "features": Array [],
+        "id": "3",
+        "name": "Organization Name",
+        "onboardingTasks": Array [],
+        "projects": Array [],
+        "scrapeJavaScript": true,
+        "slug": "org-slug",
+        "status": Object {
+          "id": "active",
+          "name": "active",
+        },
+        "teams": Array [],
+      }
+    }
     projectId="project-slug"
     tag="environment"
     topValues={
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index eae2343844..ba08791381 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -1,103 +1,71 @@
 import React from 'react';
-import ReactDOMServer from 'react-dom/server';
-
-import TestUtils from 'react-dom/test-utils';
+import {mount} from 'enzyme';
 
 import {TagDistributionMeter} from 'app/components/group/tagDistributionMeter';
 
 describe('TagDistributionMeter', function() {
-  let sandbox;
   let element;
   let emptyElement;
+  let organization;
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
+    organization = TestStubs.Organization();
 
-    element = TestUtils.renderIntoDocument(
+    element = mount(
       <TagDistributionMeter
         key="element"
         tag="browser"
         group={{id: '1337'}}
-        orgId="123"
+        organization={organization}
         projectId="456"
         totalValues={TestStubs.Tags()[0].totalValues}
         topValues={TestStubs.TagValues()[0].topValues}
       />
     );
 
-    emptyElement = TestUtils.renderIntoDocument(
+    emptyElement = mount(
       <TagDistributionMeter
         key="emptyElement"
         tag="browser"
         group={{id: '1337'}}
-        orgId="123"
+        organization={organization}
         projectId="456"
         totalValues={0}
       />
     );
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
-
   describe('renderBody()', function() {
-    it('should return null if loading', function(done) {
-      element.setState(
-        {
-          loading: true,
-          error: false,
-        },
-        () => {
-          expect(element.renderBody()).toBe(null);
-          done();
-        }
-      );
+    it('should return null if loading', function() {
+      element.setState({
+        loading: true,
+        error: false,
+      });
+      element.update();
+      expect(element.find('Segment')).toHaveLength(0);
     });
 
-    it('should return null if in an error state', function(done) {
-      element.setState(
-        {
-          error: true,
-          loading: false,
-        },
-        () => {
-          expect(element.renderBody()).toBe(null);
-          done();
-        }
-      );
+    it('should return null if in an error state', function() {
+      element.setState({
+        error: true,
+        loading: false,
+      });
+      element.update();
+      expect(element.find('Segment')).toHaveLength(0);
     });
 
-    it('should return "no recent data" if no total values present', function(done) {
-      emptyElement.setState(
-        {
-          error: false,
-          loading: false,
-        },
-        () => {
-          const out = emptyElement.renderBody();
-          expect(ReactDOMServer.renderToStaticMarkup(out)).toEqual(
-            '<p>No recent data.</p>'
-          );
-          done();
-        }
-      );
+    it('should return "no recent data" if no total values present', function() {
+      emptyElement.setState({
+        error: false,
+        loading: false,
+      });
+      emptyElement.update();
+      expect(emptyElement.find('p').text()).toEqual('No recent data.');
     });
 
-    it('should call renderSegments() if values present', function(done) {
-      sandbox.stub(element, 'renderSegments');
-
-      element.setState(
-        {
-          error: false,
-          loading: false,
-        },
-        () => {
-          element.renderBody();
-          expect(element.renderSegments.callCount).toBeTruthy();
-          done();
-        }
-      );
+    it('should call renderSegments() if values present', function() {
+      element.setState({loading: false, error: false});
+      expect(element.find('Segment').length).toEqual(3);
     });
   });
 });
