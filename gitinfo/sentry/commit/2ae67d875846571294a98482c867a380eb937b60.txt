commit 2ae67d875846571294a98482c867a380eb937b60
Author: Matej Minar <matej.minar@sentry.io>
Date:   Wed Jan 8 11:37:58 2020 +0100

    feat(ui): C# issue detail improvements (#16199)
    
    * feat(ui): Wider package names on Csharp platform, renamed to assemblies
    
    * feat(ui): Wider category in breadcrumbs dotted from left (csharp only)
    
    * feat(ui): Sharper Csharp stracktraces
    
    * feat(ui): Wider category in csharp breadcrumbs
    
    * fix(ui): Renamed assembly captions, Only show assembly in first frame
    
    * fix(csharp-ui): after review fixes
    
    * don't specify key's width in styled component if wide prop is false
    
    * updated snap

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
new file mode 100644
index 0000000000..258b79c0a1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/assembly.tsx
@@ -0,0 +1,114 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import InlineSvg from 'app/components/inlineSvg';
+import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+
+interface Props {
+  name: string;
+  version: string;
+  culture: string;
+  publicKeyToken: string;
+  filePath: string;
+}
+
+const Assembly: React.FC<Props> = ({
+  name,
+  version,
+  culture,
+  publicKeyToken,
+  filePath,
+}) => {
+  return (
+    <AssemblyWrapper>
+      <Icon src="icon-return-key" />
+      <AssemblyInfo>
+        <Caption>{t('Assembly')}:</Caption>
+        {name || '-'}
+      </AssemblyInfo>
+      <AssemblyInfo>
+        <Caption>{t('Version')}:</Caption>
+        {version || '-'}
+      </AssemblyInfo>
+      <AssemblyInfo>
+        <Caption>{t('Culture')}:</Caption>
+        {culture || '-'}
+      </AssemblyInfo>
+      <AssemblyInfo>
+        <Caption>{t('PublicKeyToken')}:</Caption>
+        {publicKeyToken || '-'}
+      </AssemblyInfo>
+
+      {filePath && (
+        <FilePathInfo>
+          <Caption>{t('Path')}:</Caption>
+          <TextCopyInput>{filePath}</TextCopyInput>
+        </FilePathInfo>
+      )}
+    </AssemblyWrapper>
+  );
+};
+
+// TODO(ts): we should be able to delete these after disabling react/prop-types rule in tsx functional components
+Assembly.propTypes = {
+  name: PropTypes.string.isRequired,
+  version: PropTypes.string.isRequired,
+  culture: PropTypes.string.isRequired,
+  publicKeyToken: PropTypes.string.isRequired,
+  filePath: PropTypes.string.isRequired,
+};
+
+const AssemblyWrapper = styled('div')`
+  font-size: 80%;
+  display: flex;
+  flex-wrap: wrap;
+  color: ${p => p.theme.gray5};
+  text-align: center;
+  position: relative;
+  padding: 0 ${space(3)} 0 50px;
+`;
+
+const Icon = styled(InlineSvg)`
+  transform: scaleX(-1);
+  position: absolute;
+  top: 4px;
+  left: 25px;
+`;
+
+const AssemblyInfo = styled('div')`
+  margin-right: 15px;
+  margin-bottom: 5px;
+`;
+
+const Caption = styled('span')`
+  margin-right: 5px;
+  font-weight: bold;
+`;
+
+const FilePathInfo = styled('div')`
+  display: flex;
+  align-items: center;
+  margin-bottom: 5px;
+  input {
+    width: 250px;
+    padding-top: 0;
+    padding-bottom: 0;
+    line-height: 1.5;
+    @media (max-width: ${theme.breakpoints[1]}) {
+      width: auto;
+    }
+  }
+  button > span {
+    padding: 2px 5px;
+  }
+  svg {
+    width: 0.9em;
+    height: 0.9em;
+  }
+`;
+
+export {Assembly};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index b8a70de4b0..ede5fbbe2d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -5,6 +5,7 @@ import SentryTypes from 'app/sentryTypes';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
 import Breadcrumb from 'app/components/events/interfaces/breadcrumbs/breadcrumb';
 import {t, tct} from 'app/locale';
+import {PlatformContext} from 'app/components/events/interfaces/breadcrumbs/platformContext';
 
 function Collapsed(props) {
   return (
@@ -219,12 +220,14 @@ class BreadcrumbsInterface extends React.Component {
         title={title}
         wrapTitle={false}
       >
-        <ul className="crumbs">
-          {numCollapsed > 0 && (
-            <Collapsed onClick={this.onCollapseToggle} count={numCollapsed} />
-          )}
-          {crumbContent}
-        </ul>
+        <PlatformContext.Provider value={evt.platform}>
+          <ul className="crumbs">
+            {numCollapsed > 0 && (
+              <Collapsed onClick={this.onCollapseToggle} count={numCollapsed} />
+            )}
+            {crumbContent}
+          </ul>
+        </PlatformContext.Provider>
       </EventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
index 28b13eb079..5aa6c66947 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
@@ -4,6 +4,8 @@ import styled from 'react-emotion';
 
 import Tooltip from 'app/components/tooltip';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
+import overflowEllipsisLeft from 'app/styles/overflowEllipsisLeft';
+import {PlatformContext} from 'app/components/events/interfaces/breadcrumbs/platformContext';
 
 class Category extends React.Component {
   static propTypes = {
@@ -11,8 +13,11 @@ class Category extends React.Component {
     title: PropTypes.string,
     hideIfEmpty: PropTypes.bool,
   };
+  static contextType = PlatformContext;
 
   render() {
+    const platform = this.context;
+    const ellipsisFromLeft = platform === 'csharp';
     let value = this.props.value;
     if (!value) {
       value = 'generic';
@@ -32,11 +37,16 @@ class Category extends React.Component {
     if (title.length > 10) {
       return (
         <Tooltip title={title} containerDisplayMode="block">
-          <CrumbCategory>{title}</CrumbCategory>
+          <CrumbCategory ellipsisFromLeft={ellipsisFromLeft}>{title}</CrumbCategory>
         </Tooltip>
       );
     }
-    return <CrumbCategory title={title}>{title}</CrumbCategory>;
+
+    return (
+      <CrumbCategory title={title} ellipsisFromLeft={ellipsisFromLeft}>
+        {title}
+      </CrumbCategory>
+    );
   }
 }
 
@@ -49,5 +59,5 @@ const CrumbCategory = styled('span')`
   padding-right: 10px;
   color: ${p => p.theme.gray5};
 
-  ${overflowEllipsis}
+  ${p => (p.ellipsisFromLeft ? overflowEllipsisLeft : overflowEllipsis)}
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
index a37b11bcf0..b57342c656 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
@@ -2,8 +2,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import map from 'lodash/map';
 import isObject from 'lodash/isObject';
+import styled from 'react-emotion';
 
 import Category from 'app/components/events/interfaces/breadcrumbs/category';
+import {PlatformContext} from 'app/components/events/interfaces/breadcrumbs/platformContext';
+import theme from 'app/utils/theme';
 
 class CrumbTable extends React.Component {
   static propTypes = {
@@ -11,6 +14,7 @@ class CrumbTable extends React.Component {
     kvData: PropTypes.object,
     summary: PropTypes.object,
   };
+  static contextType = PlatformContext;
 
   renderData = () => {
     if (!this.props.kvData) {
@@ -29,13 +33,16 @@ class CrumbTable extends React.Component {
   };
 
   render() {
+    const platform = this.context;
+    const widerCategory = platform === 'csharp';
+
     return (
       <table className="table key-value">
         <thead>
           <tr>
-            <td className="key">
+            <TableData className="key" wide={widerCategory}>
               <Category value={this.props.crumb.category} />
-            </td>
+            </TableData>
             <td className="value">{this.props.summary}</td>
           </tr>
         </thead>
@@ -48,4 +55,11 @@ class CrumbTable extends React.Component {
   }
 }
 
+const TableData = styled('td')`
+  @media (min-width: ${theme.breakpoints[2]}) {
+    max-width: ${p => (p.wide ? '215px !important' : null)};
+    width: ${p => (p.wide ? '215px !important' : null)};
+  }
+`;
+
 export default CrumbTable;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.jsx
new file mode 100644
index 0000000000..819b7ae425
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.jsx
@@ -0,0 +1,3 @@
+import React from 'react';
+
+export const PlatformContext = React.createContext();
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index a2ab728d5e..f849a5c605 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -18,8 +18,8 @@ class ExceptionContent extends React.Component {
   };
 
   render() {
-    const {newestFirst, event, view: stackView} = this.props;
-    const children = this.props.values.map((exc, excIdx) => {
+    const {newestFirst, event, view: stackView, platform, values} = this.props;
+    const children = values.map((exc, excIdx) => {
       return (
         <div key={excIdx} className="exception">
           <h5 className="break-word" style={{marginBottom: 5}}>
@@ -44,7 +44,9 @@ class ExceptionContent extends React.Component {
                   ? exc.stacktrace
                   : exc.rawStacktrace || exc.stacktrace
               }
-              expandFirstFrame={excIdx === 0}
+              expandFirstFrame={
+                platform === 'csharp' ? excIdx === values.length - 1 : excIdx === 0
+              }
               includeSystemFrames={stackView === 'full'}
               platform={this.props.platform}
               newestFirst={newestFirst}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 5ca26e6881..0ad76547cd 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -25,6 +25,8 @@ import {DebugMetaActions} from 'app/stores/debugMetaStore';
 import {SymbolicatorStatus} from 'app/components/events/interfaces/types';
 import InlineSvg from 'app/components/inlineSvg';
 import {combineStatus} from 'app/components/events/interfaces/debugmeta';
+import {Assembly} from 'app/components/events/interfaces/assembly';
+import {parseAssembly} from 'app/components/events/interfaces/utils';
 
 export function trimPackage(pkg) {
   const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
@@ -116,12 +118,17 @@ export class Frame extends React.Component {
     return !objectIsEmpty(this.props.registers);
   }
 
+  hasAssembly() {
+    return this.getPlatform() === 'csharp' && defined(this.props.data.package);
+  }
+
   isExpandable() {
     return (
       (!this.props.isOnlyFrame && this.props.emptySourceNotation) ||
       this.hasContextSource() ||
       this.hasContextVars() ||
-      this.hasContextRegisters()
+      this.hasContextRegisters() ||
+      this.hasAssembly()
     );
   }
 
@@ -228,7 +235,11 @@ export class Frame extends React.Component {
 
       // in case we prioritized the module name but we also have a filename info
       // we want to show a litle (?) icon that on hover shows the actual filename
-      if (shouldPrioritizeModuleName && data.filename) {
+      if (
+        shouldPrioritizeModuleName &&
+        data.filename &&
+        this.getPlatform() !== 'csharp'
+      ) {
         title.push(
           <Tooltip key={data.filename} title={data.filename}>
             <a className="in-at real-filename">
@@ -279,7 +290,7 @@ export class Frame extends React.Component {
       );
     }
 
-    if (defined(data.package)) {
+    if (defined(data.package) && this.getPlatform() !== 'csharp') {
       title.push(
         <span className="within" key="within">
           {' '}
@@ -319,13 +330,14 @@ export class Frame extends React.Component {
     const hasContextSource = this.hasContextSource();
     const hasContextVars = this.hasContextVars();
     const hasContextRegisters = this.hasContextRegisters();
+    const hasAssembly = this.hasAssembly();
     const expandable = this.isExpandable();
 
     const contextLines = isExpanded
       ? data.context
       : data.context && data.context.filter(l => l[0] === data.lineNo);
 
-    if (hasContextSource || hasContextVars || hasContextRegisters) {
+    if (hasContextSource || hasContextVars || hasContextRegisters || hasAssembly) {
       const startLineNo = hasContextSource ? data.context[0][0] : '';
       context = (
         <ol start={startLineNo} className={outerClassName}>
@@ -380,6 +392,10 @@ export class Frame extends React.Component {
               {hasContextVars && <FrameVariables data={data.vars} key="vars" />}
             </ClippedBox>
           )}
+
+          {hasAssembly && (
+            <Assembly {...parseAssembly(data.package)} filePath={data.absPath} />
+          )}
         </ol>
       );
     } else if (this.props.emptySourceNotation) {
@@ -403,6 +419,7 @@ export class Frame extends React.Component {
         title={t('Toggle context')}
         onClick={this.toggleContext}
         className="btn btn-sm btn-default btn-toggle"
+        css={this.getPlatform() === 'csharp' && {display: 'block !important'}} // remove important once we get rid of css files
       >
         <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'} />
       </a>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
index 0ea4101341..9741730c25 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
@@ -1,8 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import sortBy from 'lodash/sortBy';
+import styled from 'react-emotion';
 
 import ContextData from 'app/components/contextData';
+import theme from 'app/utils/theme';
 
 class KeyValueList extends React.Component {
   static propTypes = {
@@ -11,12 +13,14 @@ class KeyValueList extends React.Component {
     isSorted: PropTypes.bool,
     onClick: PropTypes.func,
     raw: PropTypes.bool,
+    longKeys: PropTypes.bool,
   };
 
   static defaultProps = {
     isContextData: false,
     isSorted: true,
     raw: false,
+    longKeys: false,
   };
 
   render() {
@@ -42,7 +46,9 @@ class KeyValueList extends React.Component {
             if (this.props.isContextData) {
               return [
                 <tr key={key}>
-                  <td className="key">{key}</td>
+                  <TableData className="key" wide={this.props.longKeys}>
+                    {key}
+                  </TableData>
                   <td className="val">
                     <ContextData data={!raw ? value : JSON.stringify(value)} />
                   </td>
@@ -51,7 +57,9 @@ class KeyValueList extends React.Component {
             } else {
               return [
                 <tr key={key}>
-                  <td className="key">{key}</td>
+                  <TableData className="key" wide={this.props.longKeys}>
+                    {key}
+                  </TableData>
                   <td className="val">
                     <pre className="val-string">{'' + value || ' '}</pre>
                   </td>
@@ -65,6 +73,12 @@ class KeyValueList extends React.Component {
   }
 }
 
+const TableData = styled('td')`
+  @media (min-width: ${theme.breakpoints[2]}) {
+    max-width: ${p => (p.wide ? '620px !important' : null)};
+  }
+`;
+
 KeyValueList.displayName = 'KeyValueList';
 
 export default KeyValueList;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 21da907f16..5ae6536343 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -162,3 +162,17 @@ export function getImageRange(image) {
 
   return [startAddress, endAddress];
 }
+
+export function parseAssembly(assembly) {
+  let name, version, culture, publicKeyToken;
+  const pieces = assembly ? assembly.split(',') : [];
+
+  if (pieces.length === 4) {
+    name = pieces[0];
+    version = pieces[1].split('Version=')[1];
+    culture = pieces[2].split('Culture=')[1];
+    publicKeyToken = pieces[3].split('PublicKeyToken=')[1];
+  }
+
+  return {name, version, culture, publicKeyToken};
+}
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
index 07cfa53edc..cc727121ed 100644
--- a/src/sentry/static/sentry/app/components/events/packageData.jsx
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -12,18 +12,30 @@ class EventPackageData extends React.Component {
     event: SentryTypes.Event.isRequired,
   };
 
-  shouldComponentUpdate(nextProps, nextState) {
+  shouldComponentUpdate(nextProps) {
     return this.props.event.id !== nextProps.event.id;
   }
 
   render() {
-    const packages = Object.entries(this.props.event.packages);
+    let longKeys, title;
+    const {event} = this.props;
+    const packages = Object.entries(event.packages);
+
+    switch (event.platform) {
+      case 'csharp':
+        longKeys = true;
+        title = t('Assemblies');
+        break;
+      default:
+        longKeys = false;
+        title = t('Packages');
+    }
 
     return (
-      <EventDataSection event={this.props.event} type="packages" title={t('Packages')}>
+      <EventDataSection event={event} type="packages" title={title}>
         <ClippedBox>
           <ErrorBoundary mini>
-            <KeyValueList data={packages} />
+            <KeyValueList data={packages} longKeys={longKeys} />
           </ErrorBoundary>
         </ClippedBox>
       </EventDataSection>
diff --git a/src/sentry/static/sentry/app/styles/overflowEllipsisLeft.tsx b/src/sentry/static/sentry/app/styles/overflowEllipsisLeft.tsx
new file mode 100644
index 0000000000..d1b8001dbb
--- /dev/null
+++ b/src/sentry/static/sentry/app/styles/overflowEllipsisLeft.tsx
@@ -0,0 +1,9 @@
+export default `
+  display: block;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  width: 100%;
+  direction: rtl;
+  text-align: left;
+`;
diff --git a/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap b/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
index 7a2c9c0127..4b057f1dff 100644
--- a/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
@@ -92,11 +92,12 @@ exports[`KeyValueList renders formatted 1`] = `
     <tr
       key="andthis"
     >
-      <td
+      <TableData
         className="key"
+        wide={false}
       >
         andthis
-      </td>
+      </TableData>
       <td
         className="val"
       >
@@ -108,11 +109,12 @@ exports[`KeyValueList renders formatted 1`] = `
     <tr
       key="plussomeotherstuff"
     >
-      <td
+      <TableData
         className="key"
+        wide={false}
       >
         plussomeotherstuff
-      </td>
+      </TableData>
       <td
         className="val"
       >
@@ -124,11 +126,12 @@ exports[`KeyValueList renders formatted 1`] = `
     <tr
       key="somestuff"
     >
-      <td
+      <TableData
         className="key"
+        wide={false}
       >
         somestuff
-      </td>
+      </TableData>
       <td
         className="val"
       >
@@ -153,11 +156,12 @@ exports[`KeyValueList renders raw 1`] = `
     <tr
       key="andthis"
     >
-      <td
+      <TableData
         className="key"
+        wide={false}
       >
         andthis
-      </td>
+      </TableData>
       <td
         className="val"
       >
@@ -169,11 +173,12 @@ exports[`KeyValueList renders raw 1`] = `
     <tr
       key="plussomeotherstuff"
     >
-      <td
+      <TableData
         className="key"
+        wide={false}
       >
         plussomeotherstuff
-      </td>
+      </TableData>
       <td
         className="val"
       >
@@ -185,11 +190,12 @@ exports[`KeyValueList renders raw 1`] = `
     <tr
       key="somestuff"
     >
-      <td
+      <TableData
         className="key"
+        wide={false}
       >
         somestuff
-      </td>
+      </TableData>
       <td
         className="val"
       >
diff --git a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
index 004ffc2877..01fd6eb0f2 100644
--- a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
@@ -11,26 +11,26 @@ describe('KeyValueList', function() {
 
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(0)
           .text()
       ).toEqual('a');
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(1)
           .text()
       ).toEqual('b');
 
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(0)
           .text()
       ).toEqual('x');
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(1)
           .text()
       ).toEqual('y');
@@ -42,26 +42,26 @@ describe('KeyValueList', function() {
 
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(0)
           .text()
       ).toEqual('a');
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(1)
           .text()
       ).toEqual('b');
 
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(0)
           .text()
       ).toEqual('x');
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(1)
           .text()
       ).toEqual('y');
@@ -76,26 +76,26 @@ describe('KeyValueList', function() {
 
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(0)
           .text()
       ).toEqual('a');
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(1)
           .text()
       ).toEqual('b');
 
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(0)
           .text()
       ).toEqual(' ');
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(1)
           .text()
       ).toEqual('y');
@@ -108,13 +108,13 @@ describe('KeyValueList', function() {
       // Ignore values, more interested in if keys rendered + are sorted
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(0)
           .text()
       ).toEqual('a');
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(1)
           .text()
       ).toEqual('b');
@@ -126,13 +126,13 @@ describe('KeyValueList', function() {
 
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(0)
           .text()
       ).toEqual('a');
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(0)
           .text()
       ).toEqual('false');
@@ -144,13 +144,13 @@ describe('KeyValueList', function() {
 
       expect(
         wrapper
-          .find('.key')
+          .find('td.key')
           .at(0)
           .text()
       ).toEqual('a');
       expect(
         wrapper
-          .find('.val')
+          .find('td.val')
           .at(0)
           .text()
       ).toEqual('null');
