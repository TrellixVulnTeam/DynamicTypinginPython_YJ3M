commit ab102836d4ad9f0fd86a8fec27bdddffbf0a4400
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Jun 10 13:21:33 2020 -0700

    feat(integrations): sets up initial Vercel integration (#19232)

diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
index 7dc9bcf9d2..9bda3feb51 100644
--- a/src/sentry/api/endpoints/organization_config_integrations.py
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -2,15 +2,21 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import integrations
+from sentry import integrations, features
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize, IntegrationProviderSerializer
+from sentry.utils.compat import filter
 
 
 class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
     def get(self, request, organization):
+        def is_provider_enabled(provider):
+            if not provider.requires_feature_flag:
+                return True
+            feature_flag_name = "organizations:integrations-%s" % provider.key
+            return features.has(feature_flag_name, organization, actor=request.user)
 
-        providers = list(integrations.all())
+        providers = filter(is_provider_enabled, list(integrations.all()))
 
         providers.sort(key=lambda i: i.key)
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e17925ae15..edbeb87f70 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -852,6 +852,8 @@ SENTRY_FEATURES = {
     "organizations:integrations-issue-sync": True,
     # Enable interface functionality to receive event hooks.
     "organizations:integrations-event-hooks": False,
+    # Enable the Vercel integration
+    "organizations:integrations-vercel": False,
     # Enable data forwarding functionality for organizations.
     "organizations:data-forwarding": True,
     # Enable experimental performance improvements.
@@ -1563,6 +1565,7 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     "sentry.integrations.vsts.VstsIntegrationProvider",
     "sentry.integrations.vsts_extension.VstsExtensionIntegrationProvider",
     "sentry.integrations.pagerduty.integration.PagerDutyIntegrationProvider",
+    "sentry.integrations.vercel.VercelIntegrationProvider",
 )
 
 
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index d9ca259254..75fed75015 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -76,6 +76,7 @@ default_manager.add("organizations:incidents-performance", OrganizationFeature)
 default_manager.add("organizations:integrations-event-hooks", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-issue-basic", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-issue-sync", OrganizationFeature)  # NOQA
+default_manager.add("organizations:integrations-vercel", OrganizationFeature)  # NOQA
 default_manager.add("organizations:internal-catchall", OrganizationFeature)  # NOQA
 default_manager.add("organizations:invite-members", OrganizationFeature)  # NOQA
 default_manager.add("organizations:large-debug-files", OrganizationFeature)  # NOQA
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index 27c50aaab1..81a7b80fc2 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -12,6 +12,7 @@ from .vsts_extension import *  # NOQA
 from .bitbucket import *  # NOQA
 from .gitlab import *  # NOQA
 from .google import *  # NOQA
+from .vercel import *  # NOQA
 
 default_manager = IdentityManager()
 all = default_manager.all
@@ -27,6 +28,7 @@ register(GitHubIdentityProvider)  # NOQA
 register(GitHubEnterpriseIdentityProvider)  # NOQA
 register(VSTSIdentityProvider)  # NOQA
 register(VstsExtensionIdentityProvider)  # NOQA
+register(VercelIdentityProvider)  # NOQA
 register(BitbucketIdentityProvider)  # NOQA
 register(GitlabIdentityProvider)  # NOQA
 register(GoogleIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/vercel/__init__.py b/src/sentry/identity/vercel/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/vercel/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/vercel/provider.py b/src/sentry/identity/vercel/provider.py
new file mode 100644
index 0000000000..910df60117
--- /dev/null
+++ b/src/sentry/identity/vercel/provider.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from sentry import options
+from sentry.identity.oauth2 import OAuth2Provider, OAuth2CallbackView
+
+
+class VercelIdentityProvider(OAuth2Provider):
+    key = "vercel"
+    name = "Vercel"
+
+    oauth_access_token_url = "https://api.vercel.com/v2/oauth/access_token"
+
+    def get_oauth_client_id(self):
+        return options.get("vercel.client-id")
+
+    def get_oauth_client_secret(self):
+        return options.get("vercel.client-secret")
+
+    def get_refresh_token_url(self):
+        return self.oauth_access_token_url
+
+    def get_pipeline_views(self):
+        return [
+            OAuth2CallbackView(
+                access_token_url=self.oauth_access_token_url,
+                client_id=self.get_oauth_client_id(),
+                client_secret=self.get_oauth_client_secret(),
+            ),
+        ]
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 8e9fc27802..388d6139a6 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -157,6 +157,9 @@ class IntegrationProvider(PipelineProvider):
     # can be any number of IntegrationFeatures
     features = frozenset()
 
+    # if this is hidden without the feature flag
+    requires_feature_flag = False
+
     @classmethod
     def get_installation(cls, model, organization_id, **kwargs):
         if cls.integration_cls is None:
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 291bb9e8d5..52f74b16cf 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -188,3 +188,9 @@ class AliasedIntegrationProvider(ExampleIntegrationProvider):
 class ServerExampleProvider(ExampleIntegrationProvider):
     key = "example_server"
     name = "Example Server"
+
+
+class FeatureFlagIntegration(ExampleIntegrationProvider):
+    key = "feature_flag_integration"
+    name = "Feature Flag Integration"
+    requires_feature_flag = True
diff --git a/src/sentry/integrations/vercel/__init__.py b/src/sentry/integrations/vercel/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/vercel/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/vercel/client.py b/src/sentry/integrations/vercel/client.py
new file mode 100644
index 0000000000..2a46d7ec33
--- /dev/null
+++ b/src/sentry/integrations/vercel/client.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from sentry.integrations.client import ApiClient
+
+
+class VercelClient(ApiClient):
+
+    base_url = "https://api.vercel.com"
+    integration_name = "vercel"
+
+    TEAMS_URL = "/v1/teams/%s"
+    USER_URL = "/www/user"
+
+    def __init__(self, access_token):
+        # TODO(Steve): we might need a constructor arg to denote if this is a team installation when we do API calls
+        super(VercelClient, self).__init__()
+        self.access_token = access_token
+
+    def request(self, method, path, data=None, params=None):
+        headers = {"Authorization": u"Bearer {}".format(self.access_token)}
+        return self._request(method, path, headers=headers, data=data, params=params,)
+
+    def get_team(self, team_id):
+        return self.get_cached(self.TEAMS_URL % team_id, params={"teamId": team_id})
+
+    def get_user(self):
+        return self.get_cached(self.USER_URL)["user"]
diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
new file mode 100644
index 0000000000..170c95b314
--- /dev/null
+++ b/src/sentry/integrations/vercel/integration.py
@@ -0,0 +1,95 @@
+from __future__ import absolute_import
+
+from django.utils.translation import ugettext_lazy as _
+
+
+from sentry.integrations import (
+    IntegrationInstallation,
+    IntegrationFeatures,
+    IntegrationProvider,
+    IntegrationMetadata,
+    FeatureDescription,
+)
+from sentry.pipeline import NestedPipelineView
+from sentry.identity.pipeline import IdentityProviderPipeline
+from sentry.utils.http import absolute_uri
+
+from .client import VercelClient
+
+DESCRIPTION = """
+VERCEL DESC
+"""
+
+FEATURES = [
+    FeatureDescription(
+        """
+        COMMIT DESCRIPTION
+        """,
+        IntegrationFeatures.COMMITS,
+    ),
+]
+
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    features=FEATURES,
+    author="The Sentry Team",
+    noun=_("Installation"),
+    issue_url="https://github.com/getsentry/sentry/issues/new?title=Vercel%20Integration:%20&labels=Component%3A%20Integrations",
+    source_url="https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/vercel",
+    aspects={},
+)
+
+
+class VercelIntegration(IntegrationInstallation):
+    pass
+
+
+class VercelIntegrationProvider(IntegrationProvider):
+    key = "vercel"
+    name = "Vercel"
+    requires_feature_flag = True
+    metadata = metadata
+    integration_cls = VercelIntegration
+    features = frozenset([IntegrationFeatures.COMMITS])
+    oauth_redirect_url = "/extensions/vercel/configure/"
+
+    def get_pipeline_views(self):
+        identity_pipeline_config = {"redirect_url": absolute_uri(self.oauth_redirect_url)}
+
+        identity_pipeline_view = NestedPipelineView(
+            bind_key="identity",
+            provider_key=self.key,
+            pipeline_cls=IdentityProviderPipeline,
+            config=identity_pipeline_config,
+        )
+
+        return [identity_pipeline_view]
+
+    def build_integration(self, state):
+        data = state["identity"]["data"]
+        access_token = data["access_token"]
+        client = VercelClient(access_token)
+
+        if data.get("team_id"):
+            external_id = data["team_id"]
+            installation_type = "team"
+            team = client.get_team(external_id)
+            name = team["name"]
+        else:
+            external_id = data["user_id"]
+            installation_type = "user"
+            user = client.get_user()
+            name = user["name"]
+
+        integration = {
+            "name": name,
+            "external_id": external_id,
+            "metadata": {
+                "access_token": access_token,
+                "installation_id": data["installation_id"],
+                "installation_type": installation_type,
+            },
+        }
+
+        return integration
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 9b5c480c6d..0df80c8ab3 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -143,6 +143,10 @@ register("vsts.client-secret", flags=FLAG_PRIORITIZE_DISK)
 # PagerDuty Integration
 register("pagerduty.app-id", default="")
 
+# Vercel Integration
+register("vercel.client-id", flags=FLAG_PRIORITIZE_DISK)
+register("vercel.client-secret", flags=FLAG_PRIORITIZE_DISK)
+
 # Snuba
 register("snuba.search.pre-snuba-candidates-optimizer", type=Bool, default=False)
 register("snuba.search.pre-snuba-candidates-percentage", default=0.2)
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index e8d82dcd93..a5a916efc5 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -120,6 +120,8 @@ def pytest_configure(config):
             "github-app.client-secret": "github-client-secret",
             "vsts.client-id": "vsts-client-id",
             "vsts.client-secret": "vsts-client-secret",
+            "vercel.client-id": "vercel-client-id",
+            "vercel.client-secret": "vercel-client-secret",
         }
     )
 
@@ -188,6 +190,7 @@ def register_extensions():
         AliasedIntegrationProvider,
         ExampleRepositoryProvider,
         ServerExampleProvider,
+        FeatureFlagIntegration,
     )
     from sentry.integrations.github import GitHubIntegrationProvider
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
@@ -204,6 +207,7 @@ def register_extensions():
     integrations.register(ExampleIntegrationProvider)
     integrations.register(AliasedIntegrationProvider)
     integrations.register(ServerExampleProvider)
+    integrations.register(FeatureFlagIntegration)
     integrations.register(GitHubIntegrationProvider)
     integrations.register(GitHubEnterpriseIntegrationProvider)
     integrations.register(GitlabIntegrationProvider)
diff --git a/src/sentry/web/frontend/vercel_extension_configuration.py b/src/sentry/web/frontend/vercel_extension_configuration.py
new file mode 100644
index 0000000000..90018f5703
--- /dev/null
+++ b/src/sentry/web/frontend/vercel_extension_configuration.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+
+from sentry.integrations.pipeline import IntegrationPipeline
+from sentry.web.frontend.base import BaseView
+from sentry import features
+
+
+class VercelExtensionConfigurationView(BaseView):
+    auth_required = False
+
+    def get(self, request, *args, **kwargs):
+        # TODO: check org and login status
+        org = request.user.get_orgs()[0]
+
+        # if org does not have the feature, redirect
+        if not features.has("organizations:integrations-vercel", org, actor=request.user):
+            return self.redirect("/")
+
+        pipeline = self.init_pipeline(request, org, request.GET)
+
+        return pipeline.current_step()
+
+    def init_pipeline(self, request, organization, params):
+        pipeline = IntegrationPipeline(
+            request=request, organization=organization, provider_key="vercel"
+        )
+
+        pipeline.initialize()
+        pipeline.bind_state("vercel", params)
+
+        return pipeline
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index ba97367b8c..307e39de27 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -42,6 +42,7 @@ from sentry.web.frontend.unsubscribe_incident_notifications import (
 from sentry.web.frontend.user_avatar import UserAvatarPhotoView
 from sentry.web.frontend.setup_wizard import SetupWizardView
 from sentry.web.frontend.vsts_extension_configuration import VstsExtensionConfigurationView
+from sentry.web.frontend.vercel_extension_configuration import VercelExtensionConfigurationView
 from sentry.web.frontend.js_sdk_loader import JavaScriptSdkLoader
 from sentry.web.frontend.project_event import ProjectEventRedirect
 
@@ -597,6 +598,12 @@ urlpatterns += [
         VstsExtensionConfigurationView.as_view(),
         name="vsts-extension-configuration",
     ),
+    # vercel Marketplace extension install flow
+    url(
+        r"^extensions/vercel/configure/$",
+        VercelExtensionConfigurationView.as_view(),
+        name="vercel-extension-configuration",
+    ),
     # Generic
     url(r"^$", HomeView.as_view(), name="sentry"),
     url(r"^robots\.txt$", api.robots_txt, name="sentry-api-robots-txt"),
diff --git a/tests/acceptance/test_organization_integration_detail_view.py b/tests/acceptance/test_organization_integration_detail_view.py
index f23ca44635..28761af760 100644
--- a/tests/acceptance/test_organization_integration_detail_view.py
+++ b/tests/acceptance/test_organization_integration_detail_view.py
@@ -8,6 +8,8 @@ from tests.acceptance.page_objects.organization_integration_settings import (
     ExampleIntegrationSetupWindowElement,
     OrganizationIntegrationDetailViewPage,
 )
+from sentry.features import OrganizationFeature
+from sentry import features
 
 
 class OrganizationIntegrationDetailView(AcceptanceTestCase):
@@ -17,6 +19,7 @@ class OrganizationIntegrationDetailView(AcceptanceTestCase):
 
     def setUp(self):
         super(OrganizationIntegrationDetailView, self).setUp()
+        features.add("organizations:integrations-feature_flag_integration", OrganizationFeature)
         self.login_as(self.user)
 
     def load_page(self, slug, configuration_tab=False):
diff --git a/tests/sentry/api/endpoints/test_organization_config_integrations.py b/tests/sentry/api/endpoints/test_organization_config_integrations.py
index 89dea03324..df63651ce0 100644
--- a/tests/sentry/api/endpoints/test_organization_config_integrations.py
+++ b/tests/sentry/api/endpoints/test_organization_config_integrations.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
+from sentry.features import OrganizationFeature
+from sentry import features
 
 
 class OrganizationConfigIntegrationsTest(APITestCase):
@@ -33,3 +35,44 @@ class OrganizationConfigIntegrationsTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data["providers"]) == 1
         assert response.data["providers"][0]["name"] == "Example Server"
+
+    def test_feature_flag_integration(self):
+        features.add("organizations:integrations-feature_flag_integration", OrganizationFeature)
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name="baz")
+
+        url = reverse("sentry-api-0-organization-config-integrations", args=[org.slug])
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        provider = [r for r in response.data["providers"] if r["key"] == "feature_flag_integration"]
+        assert len(provider) == 0
+
+        with self.feature("organizations:integrations-feature_flag_integration"):
+            response = self.client.get(url)
+
+            assert response.status_code == 200, response.content
+            provider = [
+                r for r in response.data["providers"] if r["key"] == "feature_flag_integration"
+            ]
+            assert len(provider) == 1
+
+    def test_vercel_integration(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name="baz")
+
+        url = reverse("sentry-api-0-organization-config-integrations", args=[org.slug])
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        provider = [r for r in response.data["providers"] if r["key"] == "vercel"]
+        assert len(provider) == 0
+
+        with self.feature("organizations:integrations-vercel"):
+            response = self.client.get(url)
+
+            assert response.status_code == 200, response.content
+            provider = [r for r in response.data["providers"] if r["key"] == "vercel"]
+            assert len(provider) == 1
diff --git a/tests/sentry/integrations/vercel/__init__.py b/tests/sentry/integrations/vercel/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/vercel/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
new file mode 100644
index 0000000000..591195a320
--- /dev/null
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+import responses
+
+from six.moves.urllib.parse import parse_qs, urlencode
+
+from sentry.integrations.vercel import VercelIntegrationProvider
+from sentry.models import (
+    Integration,
+    OrganizationIntegration,
+)
+from sentry.testutils import IntegrationTestCase
+
+
+class VercelIntegrationTest(IntegrationTestCase):
+    provider = VercelIntegrationProvider
+
+    def assert_setup_flow(self, is_team=False):
+        responses.reset()
+
+        access_json = {
+            "user_id": "my_user_id",
+            "access_token": "my_access_token",
+            "installation_id": "my_config_id",
+        }
+
+        if is_team:
+            access_json["team_id"] = "my_team_id"
+            responses.add(
+                responses.GET,
+                "https://api.vercel.com/v1/teams/my_team_id?teamId=my_team_id",
+                json={"name": "my_team_name"},
+            )
+        else:
+            responses.add(
+                responses.GET,
+                "https://api.vercel.com/www/user",
+                json={"user": {"name": "my_user_name"}},
+            )
+
+        responses.add(
+            responses.POST, "https://api.vercel.com/v2/oauth/access_token", json=access_json
+        )
+
+        resp = self.client.get(u"{}?{}".format(self.setup_path, urlencode({"code": "oauth-code"}),))
+
+        mock_request = responses.calls[0].request
+        req_params = parse_qs(mock_request.body)
+        assert req_params["grant_type"] == ["authorization_code"]
+        assert req_params["code"] == ["oauth-code"]
+        assert req_params["redirect_uri"] == ["http://testserver/extensions/vercel/configure/"]
+        assert req_params["client_id"] == ["vercel-client-id"]
+        assert req_params["client_secret"] == ["vercel-client-secret"]
+
+        assert resp.status_code == 200
+        self.assertDialogSuccess(resp)
+
+        integration = Integration.objects.get(provider=self.provider.key)
+
+        external_id = "my_team_id" if is_team else "my_user_id"
+        name = "my_team_name" if is_team else "my_user_name"
+        installation_type = "team" if is_team else "user"
+
+        assert integration.external_id == external_id
+        assert integration.name == name
+        assert integration.metadata == {
+            "access_token": "my_access_token",
+            "installation_id": "my_config_id",
+            "installation_type": installation_type,
+        }
+        assert OrganizationIntegration.objects.get(
+            integration=integration, organization=self.organization
+        )
+
+    @responses.activate
+    def test_team_flow(self):
+        self.assert_setup_flow(is_team=True)
+
+    @responses.activate
+    def test_user_flow(self):
+        self.assert_setup_flow(is_team=False)
