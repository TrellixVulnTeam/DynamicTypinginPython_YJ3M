commit a19fc7705ad43b66ed944d3ca87a14d0d9f55dce
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Nov 26 11:21:58 2018 +0100

    ref: Remove sampling for ua parsing (#10712)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 80744c5e81..4687ada488 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -11,8 +11,6 @@ import os
 import re
 import six
 import jsonschema
-import random
-import time
 
 from datetime import datetime, timedelta
 from collections import OrderedDict
@@ -22,7 +20,7 @@ from django.utils import timezone
 from django.utils.encoding import force_bytes, force_text
 from hashlib import md5
 
-from sentry import buffer, eventtypes, eventstream, features, tsdb, filters, options
+from sentry import buffer, eventtypes, eventstream, features, tsdb, filters
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS, LOG_LEVELS, LOG_LEVELS_MAP, DEFAULT_LOG_LEVEL,
     DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, VALID_PLATFORMS, MAX_TAG_VALUE_LENGTH
@@ -695,17 +693,9 @@ class EventManager(object):
                 if 'mechanism' in ex:
                     normalize_mechanism_meta(ex['mechanism'], sdk_info)
 
-        # Please note that we eventually remove this check after we validated that it
-        # doesn't impact the load. Ultimately all events should be parsed for a UA.
-        # The check if `SENTRY_PARSE_USER_AGENT` is set needs to be there to not
-        # trigger a query by trying to fetch the sample rate from the options / db.
-        if (getattr(settings, 'SENTRY_PARSE_USER_AGENT', False) and
-                random.random() <
-                options.get('event-normalization.parse-user-agent-sample-rate')):
-            start_time = time.time()
-            normalize_user_agent(data)
-            ms = int((time.time() - start_time) * 1000)
-            metrics.timing('events.normalize.user_agent.duration', ms)
+        # This function parses the User Agent from the request if present and fills
+        # contexts with it.
+        normalize_user_agent(data)
 
         if not get_path(data, "user", "ip_address"):
             # If there is no User ip_address, update it either from the Http
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index ccf0f10145..7409c73887 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import, print_function
 
 from sentry.plugins import Plugin2
 from sentry.stacktraces import find_stacktraces_in_data
-from sentry.utils.contexts_normalization import normalize_user_agent
 from sentry.utils.safe import get_path
 
 from .processor import JavaScriptStacktraceProcessor
@@ -14,8 +13,6 @@ def preprocess_event(data):
     rewrite_exception(data)
     translate_exception(data)
     fix_culprit(data)
-    if data.get('platform') == 'javascript':
-        normalize_user_agent(data)
     generate_modules(data)
     return data
 
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 44807737c1..7931b8ffea 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -151,6 +151,3 @@ register('kafka-publisher.max-event-size', default=100000)
 
 # Event Stream
 register('eventstream.kafka.send-post_process-task', type=Bool, default=True)
-
-# Event Normalization
-register('event-normalization.parse-user-agent-sample-rate', default=0.0)
