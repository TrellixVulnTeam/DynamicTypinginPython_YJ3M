commit 665d815b2655d46bafde2adcfaf095f885568405
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 9 14:20:15 2018 -0800

    ref(ui): Refactor DropdownAutoComplete into 2 components (#7529)
    
    * refactor settings breadcrumb dropdown to use DropdownAutocompleteMenu

diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index fc00a4c6e2..ff3f50c207 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -25,6 +25,9 @@ class AutoComplete extends React.Component {
     itemToString: PropTypes.func.isRequired,
     defaultHighlightedIndex: PropTypes.number,
     defaultInputValue: PropTypes.string,
+    /**
+     * Currently, this does not act as a "controlled" prop, only for initial state of dropdown
+     */
     isOpen: PropTypes.bool,
     onSelect: PropTypes.func,
   };
@@ -40,6 +43,7 @@ class AutoComplete extends React.Component {
       isOpen: !!props.isOpen,
       highlightedIndex: props.defaultHighlightedIndex || 0,
       inputValue: props.defaultInputValue || '',
+      selectedItem: null,
     };
 
     this.items = new Map();
@@ -142,7 +146,10 @@ class AutoComplete extends React.Component {
     callIfFunction(onSelect, item);
 
     this.closeMenu();
-    this.setState({inputValue: itemToString(item)});
+    this.setState({
+      selectedItem: item,
+      inputValue: itemToString(item),
+    });
   };
 
   moveHighlightedIndex = (step, e) => {
@@ -157,12 +164,22 @@ class AutoComplete extends React.Component {
     });
   };
 
+  /**
+   * Open dropdown menu
+   *
+   * This is exposed to render function
+   */
   openMenu = () => {
     this.setState({
       isOpen: true,
     });
   };
 
+  /**
+   * Close dropdown menu
+   *
+   * This is exposed to render function
+   */
   closeMenu = () => {
     this.setState({
       isOpen: false,
@@ -213,7 +230,12 @@ class AutoComplete extends React.Component {
             },
             getItemProps: this.getItemProps,
             inputValue: this.state.inputValue,
+            selectedItem: this.state.selectedItem,
             highlightedIndex: this.state.highlightedIndex,
+            actions: {
+              open: this.openMenu,
+              close: this.closeMenu,
+            },
           })}
       </DropdownMenu>
     );
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
index b6b605eeab..d9d2e8c048 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
@@ -1,204 +1,40 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from 'react-emotion';
-import _ from 'lodash';
-import AutoComplete from './autoComplete';
-import Input from '../views/settings/components/forms/controls/input';
+
+import DropdownAutoCompleteMenu from './dropdownAutoCompleteMenu';
 
 class DropdownAutoComplete extends React.Component {
   static propTypes = {
-    items: PropTypes.oneOfType([
-      // flat item array
-      PropTypes.arrayOf(
-        PropTypes.shape({
-          value: PropTypes.string,
-          label: PropTypes.node,
-        })
-      ),
-      // grouped item array
-      PropTypes.arrayOf(
-        PropTypes.shape({
-          value: PropTypes.string,
-          label: PropTypes.node,
-          items: PropTypes.arrayOf(
-            PropTypes.shape({
-              value: PropTypes.string,
-              label: PropTypes.node,
-            })
-          ),
-        })
-      ),
-    ]),
-    isOpen: PropTypes.bool,
-    onSelect: PropTypes.func,
+    ...DropdownAutoCompleteMenu.propTypes,
     children: PropTypes.func,
-    action: PropTypes.element,
   };
 
   static defaultProps = {
     isOpen: false,
   };
 
-  constructor(props) {
-    super(props);
-
-    this.state = {
-      isOpen: this.props.isOpen,
-      selectedItem: undefined,
-    };
-  }
-
-  toggleMenu = () => this.setState({isOpen: !this.state.isOpen});
-
-  openMenu = e => this.setState({isOpen: true});
-
-  onSelect = selectedItem => {
-    this.setState({selectedItem});
-    if (this.props.onSelect) this.props.onSelect(selectedItem);
-    this.toggleMenu();
-  };
-
-  filterItems = (items, inputValue) =>
-    items.filter(item => {
-      return (
-        [item.value, item.label]
-          .join(' ')
-          .toLowerCase()
-          .indexOf(inputValue.toLowerCase()) > -1
-      );
-    });
-
-  filterGroupedItems = (groups, inputValue) =>
-    groups
-      .map(group => {
-        return {
-          ...group,
-          items: this.filterItems(group.items, inputValue),
-        };
-      })
-      .filter(group => group.items.length > 0);
-
-  autoCompleteFilter = (items, inputValue) => {
-    let itemCount = 0;
-
-    if (items[0] && items[0].items) {
-      //if the first item has children, we assume it is a group
-      return _.flatMap(this.filterGroupedItems(items, inputValue), item => {
-        return [
-          {...item.group, groupLabel: true},
-          ...item.items.map(groupedItem => ({...groupedItem, index: itemCount++})),
-        ];
-      });
-    } else {
-      return this.filterItems(items, inputValue).map((item, index) => ({...item, index}));
-    }
-  };
-
   render() {
+    let {children, ...props} = this.props;
+
     return (
-      <div style={{position: 'relative', display: 'inline-block'}}>
-        {this.state.isOpen && (
-          <StyledMenu>
-            <AutoComplete itemToString={item => item.searchKey} onSelect={this.onSelect}>
-              {({
-                getRootProps,
-                getInputProps,
-                getMenuProps,
-                getItemProps,
-                inputValue,
-                selectedItem,
-                highlightedIndex,
-                isOpen,
-              }) => {
-                return (
-                  <div {...getRootProps()}>
-                    <StyledInputContainer>
-                      <StyledInput
-                        autoFocus
-                        {...getInputProps({onBlur: this.toggleMenu})}
-                      />
-                    </StyledInputContainer>
-                    <div {...getMenuProps()}>
-                      <div className="ref-autocomplete-items">
-                        {this.autoCompleteFilter(this.props.items, inputValue).map(
-                          (item, index) =>
-                            item.groupLabel ? (
-                              <StyledLabel key={item.value}>{item.label}</StyledLabel>
-                            ) : (
-                              <StyledItem
-                                key={item.value}
-                                highlightedIndex={highlightedIndex}
-                                index={item.index}
-                                {...getItemProps({item, index: item.index})}
-                              >
-                                {item.label}
-                              </StyledItem>
-                            )
-                        )}
-                      </div>
-                    </div>
-                  </div>
-                );
-              }}
-            </AutoComplete>
-            {this.props.action && (
-              <StyledActionContainer>{this.props.action}</StyledActionContainer>
-            )}
-          </StyledMenu>
-        )}
-        <div onClick={this.openMenu}>
-          {this.props.children({
-            isOpen: this.state.isOpen,
-            selectedItem: this.state.selectedItem,
-          })}
-        </div>
-      </div>
+      <DropdownAutoCompleteMenu {...props}>
+        {renderProps => {
+          // Don't pass `onClick` from `getActorProps`
+          let {
+            //eslint-disable-next-line no-unused-vars
+            onClick,
+            ...actorProps
+          } = renderProps.getActorProps();
+
+          return (
+            <div role="button" onClick={renderProps.actions.open} {...actorProps}>
+              {children(renderProps)}
+            </div>
+          );
+        }}
+      </DropdownAutoCompleteMenu>
     );
   }
 }
 
-const StyledActionContainer = styled('div')`
-  text-align: center;
-  padding: 10px;
-`;
-
-const StyledInput = styled(Input)`
-  height: 1.75em;
-  font-size: 0.75em;
-`;
-
-const StyledItem = styled('div')`
-  background-color: ${p =>
-    p.index == p.highlightedIndex ? p.theme.offWhite : 'transparent'};
-  padding: 0.25em 0.5em;
-  cursor: pointer;
-  &:hover {
-    background-color: ${p => p.theme.offWhite};
-  }
-`;
-
-const StyledInputContainer = styled('div')`
-  padding: 0.75em 0.5em;
-`;
-
-const StyledLabel = styled('div')`
-  padding: 0 0.5em;
-  background-color: ${p => p.theme.offWhite};
-  border: 1px solid ${p => p.theme.borderLight};
-  border-width: 1px 0;
-`;
-
-const StyledMenu = styled('div')`
-  background: #fff;
-  border: 1px solid ${p => p.theme.borderLight};
-  border-radius: 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius}
-    ${p => p.theme.borderRadius};
-  position: absolute;
-  top: calc(100% - 1px);
-  left: 0;
-  min-width: 250px;
-  font-size: 0.9em;
-  z-index: 1;
-`;
-
 export default DropdownAutoComplete;
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
new file mode 100644
index 0000000000..8ac9e08e6f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -0,0 +1,189 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+import _ from 'lodash';
+import AutoComplete from './autoComplete';
+import Input from '../views/settings/components/forms/controls/input';
+
+class DropdownAutoCompleteMenu extends React.Component {
+  static propTypes = {
+    items: PropTypes.oneOfType([
+      // flat item array
+      PropTypes.arrayOf(
+        PropTypes.shape({
+          value: PropTypes.string,
+          label: PropTypes.node,
+        })
+      ),
+      // grouped item array
+      PropTypes.arrayOf(
+        PropTypes.shape({
+          value: PropTypes.string,
+          label: PropTypes.node,
+          items: PropTypes.arrayOf(
+            PropTypes.shape({
+              value: PropTypes.string,
+              label: PropTypes.node,
+            })
+          ),
+        })
+      ),
+    ]),
+    action: PropTypes.element,
+    isOpen: PropTypes.bool,
+    onSelect: PropTypes.func,
+  };
+
+  static defaultProps = {
+    onSelect: () => {},
+  };
+
+  filterItems = (items, inputValue) =>
+    items.filter(item => {
+      return (
+        [item.value, item.label]
+          .join(' ')
+          .toLowerCase()
+          .indexOf(inputValue.toLowerCase()) > -1
+      );
+    });
+
+  filterGroupedItems = (groups, inputValue) =>
+    groups
+      .map(group => {
+        return {
+          ...group,
+          items: this.filterItems(group.items, inputValue),
+        };
+      })
+      .filter(group => group.items.length > 0);
+
+  autoCompleteFilter = (items, inputValue) => {
+    let itemCount = 0;
+
+    if (items[0] && items[0].items) {
+      //if the first item has children, we assume it is a group
+      return _.flatMap(this.filterGroupedItems(items, inputValue), item => {
+        return [
+          {...item.group, groupLabel: true},
+          ...item.items.map(groupedItem => ({...groupedItem, index: itemCount++})),
+        ];
+      });
+    } else {
+      return this.filterItems(items, inputValue).map((item, index) => ({...item, index}));
+    }
+  };
+
+  render() {
+    let {onSelect, children, items, action, ...props} = this.props;
+
+    return (
+      <AutoComplete
+        itemToString={item => ''}
+        onSelect={onSelect}
+        isOpen={this.props.isOpen}
+      >
+        {({
+          getActorProps,
+          getRootProps,
+          getInputProps,
+          getMenuProps,
+          getItemProps,
+          inputValue,
+          selectedItem,
+          highlightedIndex,
+          isOpen,
+          actions,
+        }) => {
+          return (
+            <AutoCompleteRoot {...getRootProps()}>
+              {children({
+                getActorProps,
+                actions,
+                isOpen,
+                selectedItem,
+              })}
+
+              {isOpen && (
+                <StyledMenu {...props} {...getMenuProps()}>
+                  <StyledInputContainer>
+                    <StyledInput autoFocus {...getInputProps()} />
+                  </StyledInputContainer>
+                  <div>
+                    {this.autoCompleteFilter(items, inputValue).map(
+                      (item, index) =>
+                        item.groupLabel ? (
+                          <StyledLabel key={item.value}>{item.label}</StyledLabel>
+                        ) : (
+                          <AutoCompleteItem
+                            key={item.value}
+                            highlightedIndex={highlightedIndex}
+                            index={item.index}
+                            {...getItemProps({item, index: item.index})}
+                          >
+                            {item.label}
+                          </AutoCompleteItem>
+                        )
+                    )}
+                    {action && <StyledActionContainer>{action}</StyledActionContainer>}
+                  </div>
+                </StyledMenu>
+              )}
+            </AutoCompleteRoot>
+          );
+        }}
+      </AutoComplete>
+    );
+  }
+}
+
+const AutoCompleteRoot = styled(({isOpen, ...props}) => <div {...props} />)`
+  position: relative;
+  display: inline-block;
+`;
+
+const StyledActionContainer = styled('div')`
+  text-align: center;
+  padding: 10px;
+`;
+
+const StyledInput = styled(Input)`
+  height: 1.75em;
+  font-size: 0.75em;
+`;
+
+const AutoCompleteItem = styled('div')`
+  background-color: ${p =>
+    p.index == p.highlightedIndex ? p.theme.offWhite : 'transparent'};
+  padding: 0.25em 0.5em;
+  cursor: pointer;
+  &:hover {
+    background-color: ${p => p.theme.offWhite};
+  }
+`;
+
+const StyledInputContainer = styled('div')`
+  padding: 0.75em 0.5em;
+`;
+
+const StyledLabel = styled('div')`
+  padding: 0 0.5em;
+  background-color: ${p => p.theme.offWhite};
+  border: 1px solid ${p => p.theme.borderLight};
+  border-width: 1px 0;
+`;
+
+const StyledMenu = styled(({isOpen, ...props}) => <div {...props} />)`
+  background: #fff;
+  border: 1px solid ${p => p.theme.borderLight};
+  border-radius: 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius}
+    ${p => p.theme.borderRadius};
+  position: absolute;
+  top: calc(100% - 1px);
+  left: 0;
+  min-width: 250px;
+  font-size: 0.9em;
+  z-index: 1;
+`;
+
+export default DropdownAutoCompleteMenu;
diff --git a/src/sentry/static/sentry/app/components/dropdownButton.jsx b/src/sentry/static/sentry/app/components/dropdownButton.jsx
index cbab7de765..de7ea866d5 100644
--- a/src/sentry/static/sentry/app/components/dropdownButton.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownButton.jsx
@@ -23,15 +23,17 @@ const StyledChevronDown = styled(props => (
   margin-right: 0.5em;
 `;
 
-const StyledButton = styled(props => <Button {...props} />)`
+const StyledButton = styled(({isOpen, ...props}) => <Button {...props} />)`
   border-bottom-right-radius: ${p => (p.isOpen ? 0 : p.theme.borderRadius)};
   border-bottom-left-radius: ${p => (p.isOpen ? 0 : p.theme.borderRadius)};
   position: relative;
   z-index: 1;
   box-shadow: none;
 
-  &, &:hover { border-bottom-color: ${p =>
-    p.isOpen ? 'transparent' : p.theme.borderDark};}
+  &,
+  &:hover {
+    border-bottom-color: ${p => (p.isOpen ? 'transparent' : p.theme.borderDark)};
+  }
 `;
 
 export default DropdownButton;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
index 9e57201062..16f5d5dde3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
@@ -1,8 +1,12 @@
+import {Flex} from 'grid-emotion';
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
 import Crumb from './crumb.styled';
+import InlineSvg from '../../../components/inlineSvg';
+import LetterAvatar from '../../../components/letterAvatar';
 import Link from '../../../components/link';
 import LoadingIndicator from '../../../components/loadingIndicator';
 import SentryTypes from '../../../proptypes';
@@ -13,35 +17,11 @@ import replaceRouterParams from '../../../utils/replaceRouterParams';
 import withLatestContext from '../../../utils/withLatestContext';
 import withProjects from '../../../utils/withProjects';
 
-import InlineSvg from '../../../components/inlineSvg';
-
 const Breadcrumbs = styled.div`
   display: flex;
   align-items: center;
 `;
 
-const MenuItem = styled(({active, ...props}) => <Link {...props} />)`
-  display: block;
-  padding: 15px;
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-
-  &:last-child {
-    border: none;
-  }
-
-  &:hover {
-    background: ${p => p.theme.offWhite};
-  }
-
-  ${p =>
-    p.active
-      ? `
-      font-weight: bold;
-    background: ${p.theme.offWhite};
-  `
-      : ''};
-`;
-
 const StyledLink = styled(Link)`
   color: ${p => p.theme.gray3};
   &:hover {
@@ -129,21 +109,20 @@ const ProjectCrumb = withProjects(
               )}
             </ProjectName>
           }
-          {...props}
-        >
-          {projects.map(project => (
-            <MenuItem
-              to={recreateRoute(route, {
+          onSelect={item => {
+            browserHistory.push(
+              recreateRoute(route, {
                 routes,
-                params: {...params, projectId: project.slug},
-              })}
-              active={project.slug === params.projectId}
-              key={project.slug}
-            >
-              {project.slug}
-            </MenuItem>
-          ))}
-        </SettingsBreadcrumbDropdown>
+                params: {...params, projectId: item.value},
+              })
+            );
+          }}
+          items={projects.map(project => ({
+            value: project.slug,
+            label: project.slug,
+          }))}
+          {...props}
+        />
       );
     }
   )
@@ -171,26 +150,34 @@ const MENUS = {
                 params: {...params, orgId: organization.slug},
               })}
             >
-              {organization.name}
+              <Flex align="center">
+                <span style={{width: 18, height: 18, marginRight: 6}}>
+                  <LetterAvatar
+                    style={{display: 'inline-block'}}
+                    displayName={organization.slug}
+                    identifier={organization.slug}
+                  />
+                </span>
+                {organization.slug}
+              </Flex>
             </StyledLink>
           }
+          onSelect={item => {
+            browserHistory.push(
+              recreateRoute(route, {
+                routes,
+                params: {...params, orgId: item.value},
+              })
+            );
+          }}
           hasMenu={hasMenu}
           route={route}
+          items={organizations.map(org => ({
+            value: org.slug,
+            label: org.slug,
+          }))}
           {...props}
-        >
-          {organizations.map(org => (
-            <MenuItem
-              to={recreateRoute(route, {
-                routes,
-                params: {...params, orgId: org.slug},
-              })}
-              active={org.slug === params.orgId}
-              key={org.slug}
-            >
-              {org.name}
-            </MenuItem>
-          ))}
-        </SettingsBreadcrumbDropdown>
+        />
       );
     }
   ),
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
index e8baebc843..3ce5057715 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
@@ -1,33 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from 'react-emotion';
 
-import DropdownMenu from '../../../components/dropdownMenu';
+import DropdownAutoCompleteMenu from '../../../components/dropdownAutoCompleteMenu';
 import SettingsBreadcrumbDivider from './settingsBreadcrumbDivider';
 import Crumb from './crumb.styled';
 
-const Menu = styled.div`
-  font-size: 16px;
-  position: absolute;
-  opacity: 0;
-  visibility: hidden;
-  top: 140%;
-  width: 200px;
-  background: #fff;
-  border: 1px solid ${p => p.theme.borderDark};
-  box-shadow: ${p => p.theme.dropShadowHeavy};
-  transition: 0.1s all ease;
-  border-radius: ${p => p.theme.borderRadius};
-  overflow: hidden;
-
-  ${p =>
-    p.isOpen
-      ? `
-  opacity: 1;
-  visibility: visible;`
-      : ''};
-`;
-
 class SettingsBreadcrumbDropdown extends React.Component {
   static propTypes = {
     hasMenu: PropTypes.bool,
@@ -35,6 +12,8 @@ class SettingsBreadcrumbDropdown extends React.Component {
     isLast: PropTypes.bool,
     enterDelay: PropTypes.number,
     name: PropTypes.node,
+    items: PropTypes.array,
+    onSelect: PropTypes.func,
   };
 
   static defaultProps = {
@@ -46,85 +25,66 @@ class SettingsBreadcrumbDropdown extends React.Component {
 
     this.entering = false;
     this.leaving = false;
-    this.state = {isOpen: false};
   }
 
   // Adds a delay when mouse hovers on actor (in this case the breadcrumb)
-  handleMouseEnterActor = () => {
+  handleMouseEnterActor = (actions, e) => {
     if (this.leaving) {
       clearTimeout(this.leaving);
     }
 
-    this.entering = setTimeout(
-      () => this.setState({isOpen: true}),
-      this.props.enterDelay
-    );
+    this.entering = setTimeout(() => actions.open(), this.props.enterDelay);
   };
 
   // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open
-  handleMouseEnter = () => {
+  handleMouseEnter = (actions, e) => {
     if (this.leaving) {
       clearTimeout(this.leaving);
     }
 
-    this.setState({isOpen: true});
+    actions.open();
   };
 
   // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for
   // mouseLeave into
-  handleMouseLeave = e => {
+  handleMouseLeave = (actions, e) => {
     if (this.entering) {
       clearTimeout(this.entering);
     }
 
-    this.leaving = setTimeout(() => this.setState({isOpen: false}), 200);
+    this.leaving = setTimeout(() => actions.open(), 200);
   };
 
   // Close immediately when actor is clicked clicked
-  handleClickActor = e => {
-    this.setState({isOpen: false});
+  handleClickActor = (actions, e) => {
+    actions.close();
   };
 
   // Close immediately when clicked outside
-  handleClose = () => {
-    this.setState({isOpen: false});
+  handleClose = actions => {
+    actions.close();
   };
 
   render() {
-    let {children, hasMenu, route, isLast, name} = this.props;
+    let {hasMenu, route, isLast, name, items, onSelect} = this.props;
     return (
-      <DropdownMenu isOpen={this.state.isOpen} onClickOutside={this.handleClose}>
-        {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
+      <DropdownAutoCompleteMenu items={items} onSelect={onSelect} isStyled>
+        {({actions, isOpen}) => {
           return (
-            <Crumb {...getRootProps({hasMenu})}>
+            <Crumb hasMenu={hasMenu}>
               <div
-                {...getActorProps({
-                  onClick: this.handleClickActor,
-                  onMouseEnter: this.handleMouseEnterActor,
-                  onMouseLeave: this.handleMouseLeave,
-                  style: {display: 'inline'},
-                })}
+                onClick={this.handleClickActor.bind(this, actions)}
+                onMouseEnter={this.handleMouseEnterActor.bind(this, actions)}
+                onMouseLeave={this.handleMouseLeave.bind(this, actions)}
+                style={{display: 'inline'}}
               >
                 {name || route.name}{' '}
               </div>
               <SettingsBreadcrumbDivider isHover={hasMenu && isOpen} isLast={isLast} />
-              {hasMenu && (
-                <Menu
-                  {...getMenuProps({
-                    isOpen,
-                    isStyled: true,
-                    onMouseEnter: this.handleMouseEnter,
-                    onMouseLeave: this.handleMouseLeave,
-                    className: 'menu',
-                  })}
-                >
-                  {children}
-                </Menu>
-              )}
             </Crumb>
           );
         }}
-      </DropdownMenu>
+      </DropdownAutoCompleteMenu>
     );
   }
 }
diff --git a/tests/js/spec/components/__snapshots__/dropdownAutoComplete.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownAutoComplete.spec.jsx.snap
deleted file mode 100644
index d39e4a2222..0000000000
--- a/tests/js/spec/components/__snapshots__/dropdownAutoComplete.spec.jsx.snap
+++ /dev/null
@@ -1,49 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`DropdownAutoComplete render() renders with a group 1`] = `
-<div
-  style={
-    Object {
-      "display": "inline-block",
-      "position": "relative",
-    }
-  }
->
-  <StyledMenu>
-    <AutoComplete
-      itemToString={[Function]}
-      onSelect={[Function]}
-    />
-  </StyledMenu>
-  <div
-    onClick={[Function]}
-  >
-    Click Me!
-  </div>
-</div>
-`;
-
-exports[`DropdownAutoComplete render() renders without a group 1`] = `
-<div
-  style={
-    Object {
-      "display": "inline-block",
-      "position": "relative",
-    }
-  }
->
-  <StyledMenu>
-    <AutoComplete
-      itemToString={[Function]}
-      onSelect={[Function]}
-    />
-  </StyledMenu>
-  <div
-    onClick={[Function]}
-  >
-    Click Me!
-  </div>
-</div>
-`;
-
-exports[`DropdownAutoComplete render() selects 1`] = `[MockFunction]`;
diff --git a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
new file mode 100644
index 0000000000..f7f4d9dd72
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
@@ -0,0 +1,19 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
+<AutoComplete
+  isOpen={true}
+  itemToString={[Function]}
+  onSelect={[Function]}
+/>
+`;
+
+exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
+<AutoComplete
+  isOpen={true}
+  itemToString={[Function]}
+  onSelect={[Function]}
+/>
+`;
+
+exports[`DropdownAutoCompleteMenu selects 1`] = `[MockFunction]`;
diff --git a/tests/js/spec/components/autoComplete.spec.jsx b/tests/js/spec/components/autoComplete.spec.jsx
index 4560ae4ea2..51cc3a4155 100644
--- a/tests/js/spec/components/autoComplete.spec.jsx
+++ b/tests/js/spec/components/autoComplete.spec.jsx
@@ -127,6 +127,15 @@ describe('AutoComplete', function() {
     expect(wrapper.state('isOpen')).toBe(false);
   });
 
+  it('can open and close dropdown menu using injected actions', function() {
+    let [injectedProps] = autoCompleteState;
+    injectedProps.actions.open();
+    expect(wrapper.state('isOpen')).toBe(true);
+
+    injectedProps.actions.close();
+    expect(wrapper.state('isOpen')).toBe(false);
+  });
+
   it('reopens dropdown menu after Escape is pressed and input is changed', function() {
     input.simulate('focus');
     expect(wrapper.state('isOpen')).toBe(true);
diff --git a/tests/js/spec/components/dropdownAutoComplete.spec.jsx b/tests/js/spec/components/dropdownAutoComplete.spec.jsx
index 486bdc4819..7e32f59608 100644
--- a/tests/js/spec/components/dropdownAutoComplete.spec.jsx
+++ b/tests/js/spec/components/dropdownAutoComplete.spec.jsx
@@ -1,97 +1,56 @@
 import React from 'react';
-import {mount, shallow} from 'enzyme';
+import {mount} from 'enzyme';
 
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 
 describe('DropdownAutoComplete', function() {
-  describe('render()', function() {
-    it('renders without a group', function() {
-      const wrapper = shallow(
-        <DropdownAutoComplete
-          isOpen={true}
-          items={[
-            {
-              value: 'apple',
-              label: <div>Apple</div>,
-            },
-            {
-              value: 'bacon',
-              label: <div>Bacon</div>,
-            },
-            {
-              value: 'corn',
-              label: <div>Corn</div>,
-            },
-          ]}
-        >
-          {() => 'Click Me!'}
-        </DropdownAutoComplete>
-      );
-      expect(wrapper).toMatchSnapshot();
-    });
-
-    it('renders with a group', function() {
-      const wrapper = shallow(
-        <DropdownAutoComplete
-          isOpen={true}
-          items={[
-            {
-              group: {
-                value: 'countries',
-                label: 'countries',
-              },
-              items: [
-                {
-                  value: 'new zealand',
-                  label: <div>New Zealand</div>,
-                },
-                {
-                  value: 'australia',
-                  label: <div>Australia</div>,
-                },
-              ],
-            },
-          ]}
-        >
-          {() => 'Click Me!'}
-        </DropdownAutoComplete>
-      );
-      expect(wrapper).toMatchSnapshot();
-    });
-
-    it('selects', function() {
-      const mock = jest.fn();
+  it('has actor wrapper', function() {
+    const wrapper = mount(
+      <DropdownAutoComplete
+        items={[
+          {
+            value: 'apple',
+            label: <div>Apple</div>,
+          },
+          {
+            value: 'bacon',
+            label: <div>Bacon</div>,
+          },
+          {
+            value: 'corn',
+            label: <div>Corn</div>,
+          },
+        ]}
+      >
+        {() => 'Click Me!'}
+      </DropdownAutoComplete>
+    );
+    expect(wrapper.find('[role="button"]')).toHaveLength(1);
+    expect(wrapper.find('[role="button"]').text()).toBe('Click Me!');
+  });
 
-      const wrapper = mount(
-        <DropdownAutoComplete
-          isOpen={true}
-          items={[
-            {
-              group: {
-                value: 'countries',
-                label: 'countries',
-              },
-              items: [
-                {
-                  value: 'new zealand',
-                  label: <div>New Zealand</div>,
-                },
-                {
-                  value: 'australia',
-                  label: <div>Australia</div>,
-                },
-              ],
-            },
-          ]}
-        >
-          {({selectedItem}) => (selectedItem ? selectedItem.label : 'Click me!')}
-        </DropdownAutoComplete>
-      );
-      wrapper
-        .find('[index]')
-        .last()
-        .simulate('click');
-      expect(mock).toMatchSnapshot();
-    });
+  it('opens dropdown menu when actor is clicked', function() {
+    const wrapper = mount(
+      <DropdownAutoComplete
+        items={[
+          {
+            value: 'apple',
+            label: <div>Apple</div>,
+          },
+          {
+            value: 'bacon',
+            label: <div>Bacon</div>,
+          },
+          {
+            value: 'corn',
+            label: <div>Corn</div>,
+          },
+        ]}
+      >
+        {() => 'Click Me!'}
+      </DropdownAutoComplete>
+    );
+    wrapper.find('[role="button"]').simulate('click');
+    expect(wrapper.find('StyledMenu')).toHaveLength(1);
   });
 });
diff --git a/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx b/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx
new file mode 100644
index 0000000000..34ea92c475
--- /dev/null
+++ b/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx
@@ -0,0 +1,95 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+
+import DropdownAutoCompleteMenu from 'app/components/dropdownAutoCompleteMenu';
+
+describe('DropdownAutoCompleteMenu', function() {
+  it('renders without a group', function() {
+    const wrapper = shallow(
+      <DropdownAutoCompleteMenu
+        isOpen={true}
+        items={[
+          {
+            value: 'apple',
+            label: <div>Apple</div>,
+          },
+          {
+            value: 'bacon',
+            label: <div>Bacon</div>,
+          },
+          {
+            value: 'corn',
+            label: <div>Corn</div>,
+          },
+        ]}
+      >
+        {() => 'Click Me!'}
+      </DropdownAutoCompleteMenu>
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders with a group', function() {
+    const wrapper = shallow(
+      <DropdownAutoCompleteMenu
+        isOpen={true}
+        items={[
+          {
+            group: {
+              value: 'countries',
+              label: 'countries',
+            },
+            items: [
+              {
+                value: 'new zealand',
+                label: <div>New Zealand</div>,
+              },
+              {
+                value: 'australia',
+                label: <div>Australia</div>,
+              },
+            ],
+          },
+        ]}
+      >
+        {() => 'Click Me!'}
+      </DropdownAutoCompleteMenu>
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('selects', function() {
+    const mock = jest.fn();
+
+    const wrapper = mount(
+      <DropdownAutoCompleteMenu
+        isOpen={true}
+        items={[
+          {
+            group: {
+              value: 'countries',
+              label: 'countries',
+            },
+            items: [
+              {
+                value: 'new zealand',
+                label: <div>New Zealand</div>,
+              },
+              {
+                value: 'australia',
+                label: <div>Australia</div>,
+              },
+            ],
+          },
+        ]}
+      >
+        {({selectedItem}) => (selectedItem ? selectedItem.label : 'Click me!')}
+      </DropdownAutoCompleteMenu>
+    );
+    wrapper
+      .find('[index]')
+      .last()
+      .simulate('click');
+    expect(mock).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 751c142736..2413c057b3 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -1,14 +1,14 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`OrganizationTeamProjects Should render 1`] = `
-.glamor-41 {
+.glamor-45 {
   background: #fff;
   border: 1px solid;
   margin-bottom: NaNpx;
   position: relative;
 }
 
-.glamor-24 {
+.glamor-28 {
   border-bottom: 1px solid;
   border-radius: 0 0;
   text-transform: uppercase;
@@ -17,13 +17,13 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   padding: 15px 20px;
 }
 
-.glamor-20 {
+.glamor-24 {
   font-size: inherit;
   text-transform: inherit;
   margin: 0;
 }
 
-.glamor-18 {
+.glamor-22 {
   font-size: 12px;
   font-weight: 600;
   text-transform: uppercase;
@@ -33,7 +33,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   margin: 0;
 }
 
-.glamor-15 {
+.glamor-19 {
   display: -webkit-box;
   display: -webkit-flex;
   display: -ms-flexbox;
@@ -48,6 +48,11 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   justify-content: space-between;
 }
 
+.glamor-15 {
+  position: relative;
+  display: inline-block;
+}
+
 .glamor-9 {
   position: relative;
   z-index: 1;
@@ -63,7 +68,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   margin-right: 0.5em;
 }
 
-.glamor-37 {
+.glamor-41 {
   box-sizing: border-box;
   padding: 0px;
   display: -webkit-box;
@@ -77,11 +82,11 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   border-bottom: 1px solid;
 }
 
-.glamor-37:last-child {
+.glamor-41:last-child {
   border: 0;
 }
 
-.glamor-33 {
+.glamor-37 {
   box-sizing: border-box;
   padding: 16px;
   -webkit-flex: 1;
@@ -89,17 +94,17 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   flex: 1;
 }
 
-.glamor-30 {
+.glamor-34 {
   color: #645574;
 }
 
-.glamor-28 {
+.glamor-32 {
   border: none;
   background-color: inherit;
   padding: 0;
 }
 
-.glamor-35 {
+.glamor-39 {
   box-sizing: border-box;
   padding: 16px;
 }
@@ -115,29 +120,29 @@ exports[`OrganizationTeamProjects Should render 1`] = `
   <div>
     <Panel>
       <div
-        className="glamor-41 glamor-42"
+        className="glamor-45 glamor-46"
       >
         <PanelHeader>
           <StyledPanelHeader>
             <Component
-              className="glamor-24 glamor-25"
+              className="glamor-28 glamor-29"
             >
               <div
-                className="glamor-24 glamor-25"
+                className="glamor-28 glamor-29"
               >
                 <StyledPanelHeading>
                   <Component
-                    className="glamor-20 glamor-17"
+                    className="glamor-24 glamor-21"
                   >
                     <PanelHeading
-                      className="glamor-20 glamor-17"
+                      className="glamor-24 glamor-21"
                     >
                       <div
-                        className="glamor-17 glamor-18 glamor-19"
+                        className="glamor-21 glamor-22 glamor-23"
                       >
                         <PanelHeaderContentContainer>
                           <div
-                            className="glamor-15 glamor-16"
+                            className="glamor-19 glamor-20"
                           >
                             Projects
                             <div
@@ -159,93 +164,120 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                 }
                                 onSelect={[Function]}
                               >
-                                <div
-                                  style={
-                                    Object {
-                                      "display": "inline-block",
-                                      "position": "relative",
-                                    }
+                                <DropdownAutoCompleteMenu
+                                  isOpen={false}
+                                  items={
+                                    Array [
+                                      Object {
+                                        "label": "project-slug-2",
+                                        "value": "3",
+                                      },
+                                    ]
                                   }
+                                  onSelect={[Function]}
                                 >
-                                  <div
-                                    onClick={[Function]}
+                                  <AutoComplete
+                                    isOpen={false}
+                                    itemToString={[Function]}
+                                    onSelect={[Function]}
                                   >
-                                    <DropdownButton
+                                    <DropdownMenu
                                       isOpen={false}
+                                      keepMenuOpen={false}
+                                      onClickOutside={[Function]}
                                     >
-                                      <StyledButton
-                                        isOpen={false}
-                                      >
+                                      <AutoCompleteRoot>
                                         <Component
-                                          className="glamor-9 glamor-10"
-                                          isOpen={false}
+                                          className="glamor-15 glamor-16"
                                         >
-                                          <Button
-                                            className="glamor-9 glamor-10"
-                                            disabled={false}
-                                            isOpen={false}
+                                          <div
+                                            className="glamor-15 glamor-16"
                                           >
-                                            <button
-                                              className="glamor-9 glamor-10 button button-default"
-                                              disabled={false}
-                                              isOpen={false}
+                                            <div
                                               onClick={[Function]}
+                                              onMouseEnter={[Function]}
+                                              onMouseLeave={[Function]}
                                               role="button"
                                             >
-                                              <FlowLayout
-                                                truncate={false}
+                                              <DropdownButton
+                                                isOpen={false}
                                               >
-                                                <div
-                                                  className="flow-layout"
+                                                <StyledButton
+                                                  isOpen={false}
                                                 >
-                                                  <span
-                                                    className="button-label"
+                                                  <Component
+                                                    className="glamor-9 glamor-10"
+                                                    isOpen={false}
                                                   >
-                                                    <StyledChevronDown>
-                                                      <Component
-                                                        className="glamor-3 glamor-0"
+                                                    <Button
+                                                      className="glamor-9 glamor-10"
+                                                      disabled={false}
+                                                    >
+                                                      <button
+                                                        className="glamor-9 glamor-10 button button-default"
+                                                        disabled={false}
+                                                        onClick={[Function]}
+                                                        role="button"
                                                       >
-                                                        <InlineSvg
-                                                          className="glamor-3 glamor-0"
-                                                          src="icon-chevron-down"
+                                                        <FlowLayout
+                                                          truncate={false}
                                                         >
-                                                          <StyledSvg
-                                                            className="glamor-3 glamor-0"
-                                                            height="1em"
-                                                            style={Object {}}
-                                                            viewBox={Object {}}
-                                                            width="1em"
+                                                          <div
+                                                            className="flow-layout"
                                                           >
-                                                            <svg
-                                                              className="glamor-0 glamor-1 glamor-2"
-                                                              height="1em"
-                                                              style={Object {}}
-                                                              viewBox={Object {}}
-                                                              width="1em"
+                                                            <span
+                                                              className="button-label"
                                                             >
-                                                              <use
-                                                                href="#test"
-                                                                xlinkHref="#test"
+                                                              <StyledChevronDown>
+                                                                <Component
+                                                                  className="glamor-3 glamor-0"
+                                                                >
+                                                                  <InlineSvg
+                                                                    className="glamor-3 glamor-0"
+                                                                    src="icon-chevron-down"
+                                                                  >
+                                                                    <StyledSvg
+                                                                      className="glamor-3 glamor-0"
+                                                                      height="1em"
+                                                                      style={Object {}}
+                                                                      viewBox={Object {}}
+                                                                      width="1em"
+                                                                    >
+                                                                      <svg
+                                                                        className="glamor-0 glamor-1 glamor-2"
+                                                                        height="1em"
+                                                                        style={Object {}}
+                                                                        viewBox={Object {}}
+                                                                        width="1em"
+                                                                      >
+                                                                        <use
+                                                                          href="#test"
+                                                                          xlinkHref="#test"
+                                                                        />
+                                                                      </svg>
+                                                                    </StyledSvg>
+                                                                  </InlineSvg>
+                                                                </Component>
+                                                              </StyledChevronDown>
+                                                              <span
+                                                                className="icon-plus"
                                                               />
-                                                            </svg>
-                                                          </StyledSvg>
-                                                        </InlineSvg>
-                                                      </Component>
-                                                    </StyledChevronDown>
-                                                    <span
-                                                      className="icon-plus"
-                                                    />
-                                                    Add Project
-                                                  </span>
-                                                </div>
-                                              </FlowLayout>
-                                            </button>
-                                          </Button>
+                                                              Add Project
+                                                            </span>
+                                                          </div>
+                                                        </FlowLayout>
+                                                      </button>
+                                                    </Button>
+                                                  </Component>
+                                                </StyledButton>
+                                              </DropdownButton>
+                                            </div>
+                                          </div>
                                         </Component>
-                                      </StyledButton>
-                                    </DropdownButton>
-                                  </div>
-                                </div>
+                                      </AutoCompleteRoot>
+                                    </DropdownMenu>
+                                  </AutoComplete>
+                                </DropdownAutoCompleteMenu>
                               </DropdownAutoComplete>
                             </div>
                           </div>
@@ -277,11 +309,11 @@ exports[`OrganizationTeamProjects Should render 1`] = `
               >
                 <Base
                   align="center"
-                  className="glamor-37 glamor-38"
+                  className="glamor-41 glamor-42"
                   p={0}
                 >
                   <div
-                    className="glamor-37 glamor-38"
+                    className="glamor-41 glamor-42"
                     is={null}
                   >
                     <Box
@@ -289,12 +321,12 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                       p={2}
                     >
                       <Base
-                        className="glamor-33"
+                        className="glamor-37"
                         flex="1"
                         p={2}
                       >
                         <div
-                          className="glamor-33"
+                          className="glamor-37"
                           is={null}
                         >
                           <ProjectItem
@@ -368,7 +400,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                   title="Add to bookmarks"
                                 >
                                   <button
-                                    className="tip glamor-28 glamor-29"
+                                    className="tip glamor-32 glamor-33"
                                     onClick={[Function]}
                                     title="Add to bookmarks"
                                   >
@@ -379,17 +411,17 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                 </InlineButton>
                               </Tooltip>
                               <Link
-                                className="glamor-30"
+                                className="glamor-34"
                                 to="/settings/organization/org-slug/project/project-slug/"
                               >
                                 <Link
-                                  className="glamor-30"
+                                  className="glamor-34"
                                   onlyActiveOnIndex={false}
                                   style={Object {}}
                                   to="/settings/organization/org-slug/project/project-slug/"
                                 >
                                   <a
-                                    className="glamor-30"
+                                    className="glamor-34"
                                     onClick={[Function]}
                                     style={Object {}}
                                   >
@@ -473,11 +505,11 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                       p={2}
                     >
                       <Base
-                        className="glamor-35"
+                        className="glamor-39"
                         p={2}
                       >
                         <div
-                          className="glamor-35"
+                          className="glamor-39"
                           is={null}
                         >
                           <Button
diff --git a/tests/js/spec/views/organizationTeamProjects.spec.jsx b/tests/js/spec/views/organizationTeamProjects.spec.jsx
index 1d817a013a..037a2b42e8 100644
--- a/tests/js/spec/views/organizationTeamProjects.spec.jsx
+++ b/tests/js/spec/views/organizationTeamProjects.spec.jsx
@@ -82,7 +82,7 @@ describe('OrganizationTeamProjects', function() {
     let add = wrapper.find('DropdownButton').first();
     add.simulate('click');
 
-    let el = wrapper.find('.ref-autocomplete-items').childAt(0);
+    let el = wrapper.find('AutoCompleteItem').first();
     el.simulate('click');
 
     wrapper.update();
diff --git a/tests/js/spec/views/projectTeamSettings.spec.jsx b/tests/js/spec/views/projectTeamSettings.spec.jsx
index 54e7955393..67f5713aab 100644
--- a/tests/js/spec/views/projectTeamSettings.spec.jsx
+++ b/tests/js/spec/views/projectTeamSettings.spec.jsx
@@ -125,10 +125,7 @@ describe('ProjectTeamsSettings', function() {
       wrapper.find('DropdownButton').simulate('click');
 
       // click a team
-      let el = wrapper
-        .find('.ref-autocomplete-items')
-        .childAt(0)
-        .childAt(0);
+      let el = wrapper.find('AutoCompleteItem').first();
       el.simulate('click');
 
       expect(mock).toHaveBeenCalledWith(
