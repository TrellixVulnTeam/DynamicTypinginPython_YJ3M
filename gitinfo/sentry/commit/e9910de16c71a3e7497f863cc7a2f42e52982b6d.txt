commit e9910de16c71a3e7497f863cc7a2f42e52982b6d
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Feb 4 00:49:03 2012 -0800

    Improve authentication flows and basic docs (fixes GH-306)

diff --git a/sentry/models.py b/sentry/models.py
index afa7982fff..e4cbf5565f 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -12,6 +12,7 @@ import logging
 import math
 import time
 import uuid
+import urlparse
 from datetime import datetime
 from indexer.models import BaseIndex
 
@@ -216,6 +217,29 @@ class ProjectDomain(Model):
     class Meta:
         unique_together = (('project', 'domain'),)
 
+    @classmethod
+    def test(cls, project, url, strict=False):
+        """
+        Tests whether the ``url`` is a trusted domain for the given project.
+        """
+        if not url:
+            return False
+        url = urlparse.urlsplit(url).hostname
+        if not url:
+            # If we fail to parse the referral url
+            return False
+        if url in ('127.0.0.1', 'localhost'):
+            return True
+        if url.endswith('.local'):
+            return True
+        url = url.split('.')
+        domains = ProjectDomain.objects.filter(project=project).values_list('domain', flat=True)
+        for d in domains:
+            d = d.split('.')
+            if url[-len(d):] == d:
+                return True
+        return False
+
 
 class View(Model):
     """
diff --git a/sentry/utils/http.py b/sentry/utils/http.py
index 7c7b099218..47f37cfb08 100644
--- a/sentry/utils/http.py
+++ b/sentry/utils/http.py
@@ -6,6 +6,7 @@ sentry.utils.http
 :license: BSD, see LICENSE for more details.
 """
 import urllib
+from urlparse import urlparse
 
 
 def safe_urlencode(params, doseq=0):
@@ -33,3 +34,13 @@ def safe_urlencode(params, doseq=0):
             new_params.append((k, unicode(v)))
 
     return urllib.urlencode(new_params, doseq)
+
+
+def is_same_domain(url1, url2):
+    """
+    Returns true if the two urls should be treated as if they're from the same
+    domain (trusted).
+    """
+    url1 = urlparse(url1)
+    url2 = urlparse(url2)
+    return url1.netloc == url2.netloc
diff --git a/sentry/web/api.py b/sentry/web/api.py
index e05c4442a6..b8ab1a2622 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -7,7 +7,6 @@ sentry.web.views
 """
 import logging
 
-from django.db.models import Q
 from django.http import HttpResponse, HttpResponseBadRequest, \
   HttpResponseForbidden
 from django.views.decorators.csrf import csrf_exempt
@@ -18,12 +17,12 @@ from sentry.coreapi import project_from_auth_vars, project_from_api_key_and_id,
   project_from_id, decode_and_decompress_data, safely_load_json_string, \
   validate_data, insert_data_to_database, APIError, APIUnauthorized, \
   extract_auth_vars, InvalidTimestamp
-from sentry.models import Group, GroupBookmark, Project, View
+from sentry.models import Group, GroupBookmark, Project, View, ProjectDomain
 from sentry.utils import json
+from sentry.utils.http import is_same_domain
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
-from sentry.web.helpers import render_to_response, \
-  get_project_list, render_to_string
+from sentry.web.helpers import render_to_response, render_to_string
 
 logger = logging.getLogger('sentry.errors.coreapi')
 
@@ -31,6 +30,34 @@ logger = logging.getLogger('sentry.errors.coreapi')
 @csrf_exempt
 @require_http_methods(['POST'])
 def store(request):
+    """
+    The primary endpoint for storing new events.
+
+    This will validate the client's authentication and data, and if
+    successfull pass on the payload to the internal database handler.
+
+    Authentication works in three flavors:
+
+    1. Explicit signed requests
+
+       These are implemented using the documented signed request protocol, and
+       require an authentication header which is signed using with the project
+       member's secret key.
+
+    2. Explicit trusted requests
+
+       Generally used for communications with client-side platforms (such as
+       JavaScript in the browser), they require the GET variables public_key
+       and project_id, as well as an HTTP_REFERER to be set from a trusted
+       domain.
+
+    3. Implicit trusted requests
+
+       Used by the Sentry core, they are only available from same-domain requests
+       and do not require any authentication information. They only require that
+       the user be authenticated, and a project_id be sent in the GET variables.
+
+    """
     try:
         auth_vars = extract_auth_vars(request)
         data = request.raw_post_data
@@ -48,12 +75,17 @@ def store(request):
         if server_version != '1.0' and not client:
             raise APIError('Client request error: Missing client version identifier.')
 
+        referrer = request.META.get('HTTP_REFERER')
+
         if auth_vars:
             project = project_from_auth_vars(auth_vars, data)
-        elif request.GET.get('api_key') and request.GET.get('project_id') and request.is_secure():
-            # ssl requests dont have to have signature verification
+        elif request.GET.get('api_key') and request.GET.get('project_id'):
+            # public requests only need referrer validation for CSRF
             project = project_from_api_key_and_id(request.GET['api_key'], request.GET['project_id'])
-        elif request.GET.get('project_id') and request.user.is_authenticated():
+            if not ProjectDomain.test(project, referrer):
+                raise APIUnauthorized()
+        elif request.GET.get('project_id') and request.user.is_authenticated() and \
+             is_same_domain(request.build_absolute_uri(), referrer):
             # authenticated users are simply trusted to provide the right id
             project = project_from_id(request)
         else:
diff --git a/tests/utils/http/__init__.py b/tests/utils/http/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/utils/http/tests.py b/tests/utils/http/tests.py
new file mode 100644
index 0000000000..8353eafd1f
--- /dev/null
+++ b/tests/utils/http/tests.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.utils.http import is_same_domain
+
+from tests.base import TestCase
+
+
+class SameDomainTestCase(TestCase):
+    def test_is_same_domain(self):
+        url1 = 'http://example.com/foo/bar'
+        url2 = 'http://example.com/biz/baz'
+
+        self.assertTrue(is_same_domain(url1, url2))
+
+    def test_is_same_domain_diff_scheme(self):
+        url1 = 'https://example.com/foo/bar'
+        url2 = 'http://example.com/biz/baz'
+
+        self.assertTrue(is_same_domain(url1, url2))
+
+    def test_is_same_domain_diff_port(self):
+        url1 = 'http://example.com:80/foo/bar'
+        url2 = 'http://example.com:13/biz/baz'
+
+        self.assertFalse(is_same_domain(url1, url2))
