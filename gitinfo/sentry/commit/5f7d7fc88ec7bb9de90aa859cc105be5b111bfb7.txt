commit 5f7d7fc88ec7bb9de90aa859cc105be5b111bfb7
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jul 25 13:27:11 2018 -0700

    feat(health): Add component to perform requests for Health (#9179)

diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthContext.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthContext.jsx
new file mode 100644
index 0000000000..4ef924b532
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/healthContext.jsx
@@ -0,0 +1,9 @@
+import React from 'react';
+
+const HealthContext = React.createContext({
+  projects: [],
+  environments: [],
+  daterange: '7d',
+});
+
+export default HealthContext;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
new file mode 100644
index 0000000000..9444300554
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
@@ -0,0 +1,121 @@
+import {isEqual} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {doHealthRequest} from 'app/actionCreators/health';
+import SentryTypes from 'app/sentryTypes';
+import withApi from 'app/utils/withApi';
+import withLatestContext from 'app/utils/withLatestContext';
+
+import HealthContext from './healthContext';
+
+class HealthRequestWithParams extends React.Component {
+  static propTypes = {
+    /**
+     * Health tag (this will use a BASE_URL defined in health actionCreators
+     */
+    tag: PropTypes.string.isRequired,
+
+    organization: SentryTypes.Organization.isRequired,
+
+    api: PropTypes.object,
+
+    /**
+     * List of project ids to query
+     */
+    projects: PropTypes.arrayOf(PropTypes.number),
+
+    /**
+     * List of environments to query
+     */
+    environments: PropTypes.arrayOf(PropTypes.string),
+
+    /**
+     * Time period in query. Currently only supports relative dates
+     *
+     * e.g. 24h, 7d, 30d
+     */
+    period: PropTypes.string,
+
+    /**
+     * Include data for previous period
+     */
+    includePrevious: PropTypes.bool,
+
+    /**
+     * Should we query for timeseries data
+     */
+    timeseries: PropTypes.bool,
+
+    /**
+     * topK value
+     */
+    topk: PropTypes.number,
+  };
+
+  static defaultProps = {
+    period: '7d',
+    includePrevious: true,
+    timeseries: true,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      data: null,
+    };
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps) {
+    if (isEqual(prevProps, this.props)) return;
+
+    this.fetchData();
+  }
+
+  fetchData() {
+    let {api, ...props} = this.props;
+    doHealthRequest(api, props).then(({data}) => {
+      this.setState({
+        data,
+      });
+    });
+  }
+
+  render() {
+    let {children} = this.props;
+    let {data} = this.state;
+    return children({
+      // Loading if data is null
+      loading: data === null,
+      data,
+    });
+  }
+}
+
+const HealthRequest = withLatestContext(
+  withApi(
+    class extends React.Component {
+      render() {
+        return (
+          <HealthContext.Consumer>
+            {({projects, environments, period}) => (
+              <HealthRequestWithParams
+                projects={projects}
+                environments={environments}
+                period={period}
+                {...this.props}
+              />
+            )}
+          </HealthContext.Consumer>
+        );
+      }
+    }
+  )
+);
+
+export default HealthRequest;
+export {HealthRequestWithParams};
diff --git a/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx b/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
new file mode 100644
index 0000000000..0a4dbb830e
--- /dev/null
+++ b/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
@@ -0,0 +1,88 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {doHealthRequest} from 'app/actionCreators/health';
+import {HealthRequestWithParams} from 'app/views/organizationHealth/util/healthRequest';
+
+jest.mock('app/actionCreators/health', () => {
+  return {
+    doHealthRequest: jest.fn(() => Promise.resolve({data: {foo: 'bar'}})),
+  };
+});
+
+describe('HealthRequest', function() {
+  const project = TestStubs.Project();
+  const organization = TestStubs.Organization();
+  const mock = jest.fn(() => null);
+  const wrapper = mount(
+    <HealthRequestWithParams
+      api={{}}
+      projects={[project.id]}
+      environments={[]}
+      period="24h"
+      organization={organization}
+      tag="release"
+    >
+      {mock}
+    </HealthRequestWithParams>
+  );
+
+  it('makes requests', async function() {
+    expect(mock).toHaveBeenCalledWith({loading: true, data: null});
+
+    expect(mock).toHaveBeenLastCalledWith({
+      loading: false,
+      data: {foo: 'bar'},
+    });
+
+    expect(doHealthRequest).toHaveBeenCalled();
+  });
+
+  it('makes a new request if projects prop changes', async function() {
+    doHealthRequest.mockClear();
+
+    wrapper.setProps({projects: [123]});
+    expect(doHealthRequest).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        projects: [123],
+      })
+    );
+  });
+
+  it('makes a new request if environments prop changes', async function() {
+    doHealthRequest.mockClear();
+
+    wrapper.setProps({environments: ['dev']});
+    expect(doHealthRequest).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        environments: ['dev'],
+      })
+    );
+  });
+
+  it('makes a new request if period prop changes', async function() {
+    doHealthRequest.mockClear();
+
+    wrapper.setProps({period: '7d'});
+    expect(doHealthRequest).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        period: '7d',
+      })
+    );
+  });
+
+  it('makes a new request if timeseries prop changes', async function() {
+    doHealthRequest.mockClear();
+
+    wrapper.setProps({timeseries: false});
+    expect(doHealthRequest).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        timeseries: false,
+      })
+    );
+  });
+});
