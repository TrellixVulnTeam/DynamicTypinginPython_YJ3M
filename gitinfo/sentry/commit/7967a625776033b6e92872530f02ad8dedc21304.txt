commit 7967a625776033b6e92872530f02ad8dedc21304
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Mar 18 01:51:21 2014 -0700

    Refactor sudo into not requiring response object and all login() elevates perms

diff --git a/src/sentry/middleware/sudo.py b/src/sentry/middleware/sudo.py
index 65b59d3254..5fad69729e 100644
--- a/src/sentry/middleware/sudo.py
+++ b/src/sentry/middleware/sudo.py
@@ -5,9 +5,21 @@ sentry.middleware.sudo
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from sentry.utils.sudo import has_sudo_privileges
+from sentry.utils.sudo import has_sudo_privileges, SUDO_COOKIE_NAME
 
 
 class SudoMiddleware(object):
     def process_request(self, request):
         request.is_sudo = lambda: has_sudo_privileges(request)
+
+    def process_response(self, request, response):
+        if hasattr(request, '_sentry_sudo_token'):
+            token = request._sentry_sudo_token
+            max_age = request._sentry_sudo_max_age
+            response.set_cookie(
+                SUDO_COOKIE_NAME, token,
+                max_age=max_age,  # If max_age is None, it's a session cookie
+                secure=request.is_secure(),
+                httponly=True,  # Not accessible by JavaScript
+            )
+        return response
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 50d600236c..d667e35d35 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -7,7 +7,17 @@ sentry.utils.auth
 """
 from django.conf import settings
 from django.contrib.auth.backends import ModelBackend
+from django.contrib.auth import login as _login
 from sentry.models import User
+from sentry.utils.sudo import grant_sudo_privileges
+
+
+def login(request, user):
+    """
+    Always grant users sudo privileges when logging in
+    """
+    grant_sudo_privileges(request)
+    return _login(request, user)
 
 
 def parse_auth_header(header):
diff --git a/src/sentry/utils/sudo.py b/src/sentry/utils/sudo.py
index 3070c6730d..55c22941a6 100644
--- a/src/sentry/utils/sudo.py
+++ b/src/sentry/utils/sudo.py
@@ -16,7 +16,7 @@ from django.utils.crypto import get_random_string
 SUDO_COOKIE_NAME = getattr(settings, 'SUDO_COOKIE_NAME', 'sudo')
 
 
-def grant_sudo_privileges(request, response=None, max_age=3600):
+def grant_sudo_privileges(request, max_age=3600):
     """
     Assigns a random token to the user's session that allows them to have elevated permissions
     """
@@ -25,17 +25,9 @@ def grant_sudo_privileges(request, response=None, max_age=3600):
     request.session[SUDO_COOKIE_NAME] = token
     request.session.modified = True
     request._sentry_sudo = True
-
-    if response is None:
-        return token
-
-    response.set_cookie(
-        SUDO_COOKIE_NAME, token,
-        max_age=max_age,  # If max_age is None, it's a session cookie
-        secure=request.is_secure(),
-        httponly=True,  # Not accessible by JavaScript
-    )
-    return response
+    request._sentry_sudo_token = token
+    request._sentry_sudo_max_age = max_age
+    return token
 
 
 def has_sudo_privileges(request):
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 5455323f8d..6e63dd2083 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -8,7 +8,7 @@ sentry.web.frontend.accounts
 import itertools
 
 from django.contrib import messages
-from django.contrib.auth import login as login_user, authenticate
+from django.contrib.auth import authenticate
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import transaction
@@ -26,7 +26,7 @@ from sentry.web.forms.accounts import (
     RegistrationForm, RecoverPasswordForm, ChangePasswordRecoverForm,
     ProjectEmailOptionsForm, AuthenticationForm, SudoForm)
 from sentry.web.helpers import render_to_response
-from sentry.utils.auth import get_auth_providers
+from sentry.utils.auth import get_auth_providers, login as login_user
 from sentry.utils.safe import safe_execute
 from sentry.utils.sudo import grant_sudo_privileges, sudo_required
 
@@ -42,8 +42,7 @@ def login(request):
     form = AuthenticationForm(request, request.POST or None)
     if form.is_valid():
         login_user(request, form.get_user())
-        response = login_redirect(request)
-        return grant_sudo_privileges(request, response)
+        return login_redirect(request)
 
     request.session.set_test_cookie()
 
@@ -70,8 +69,8 @@ def sudo(request):
     form = SudoForm(request.user, request.POST or None)
     if request.method == 'POST':
         if form.is_valid():
-            response = HttpResponseRedirect(redirect_to)
-            return grant_sudo_privileges(request, response)
+            grant_sudo_privileges(request)
+            return HttpResponseRedirect(redirect_to)
 
     context = {
         'form': form,
@@ -101,8 +100,7 @@ def register(request):
 
         login_user(request, user)
 
-        response = login_redirect(request)
-        return grant_sudo_privileges(request, response)
+        return login_redirect(request)
 
     return render_to_response('sentry/register.html', {
         'form': form,
@@ -185,8 +183,7 @@ def recover_confirm(request, user_id, hash):
 
                 password_hash.delete()
 
-                response = login_redirect(request)
-                return grant_sudo_privileges(request, response)
+                return login_redirect(request)
         else:
             form = ChangePasswordRecoverForm()
 
