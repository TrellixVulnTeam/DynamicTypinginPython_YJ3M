commit f8e10ddc991583c611a2efb63c390483957ffa2a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 5 22:24:07 2014 -0700

    Add retry support to Riak

diff --git a/src/sentry/nodestore/riak/backend.py b/src/sentry/nodestore/riak/backend.py
index 8930440c3b..cde805d349 100644
--- a/src/sentry/nodestore/riak/backend.py
+++ b/src/sentry/nodestore/riak/backend.py
@@ -11,10 +11,24 @@ from __future__ import absolute_import
 import riak
 import riak.resolver
 
+from time import time
+
 from sentry.nodestore.base import NodeStorage
 from sentry.utils.cache import memoize
 
 
+# Riak commonly has timeouts or non-200 HTTP errors. Being that almost
+# always our messages are immutable, it's safe to simply retry in many
+# cases
+def retry(attempts, func, *args, **kwargs):
+    for _ in xrange(attempts):
+        try:
+            return func(*args, **kwargs)
+        except Exception as exc:
+            time.sleep(0.01)
+    raise
+
+
 class RiakNodeStorage(NodeStorage):
     """
     A Riak-based backend for storing node data.
@@ -42,12 +56,12 @@ class RiakNodeStorage(NodeStorage):
     def create(self, data):
         node_id = self.generate_id()
         obj = self.bucket.new(data=data, key=node_id)
-        obj.store()
+        retry(3, obj.store)
         return obj.key
 
     def delete(self, id):
         obj = self.bucket.new(key=id)
-        obj.delete()
+        retry(3, obj.delete)
 
     def get(self, id):
         # just fetch it from a random backend, we're not aiming for consistency
@@ -70,7 +84,7 @@ class RiakNodeStorage(NodeStorage):
 
     def set(self, id, data):
         obj = self.bucket.new(key=id, data=data)
-        obj.store()
+        retry(3, obj.store)
 
     def cleanup(self, cutoff_timestamp):
         # TODO(dcramer): we should either index timestamps or have this run
