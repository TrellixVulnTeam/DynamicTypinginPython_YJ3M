commit 40ca2ef13bd2fcff843dd5c27ce09a11c2db1942
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 27 00:57:48 2011 -0700

    Added project filter

diff --git a/example_project/settings.py b/example_project/settings.py
index baf254e892..91669a690a 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -120,6 +120,7 @@ SENTRY_SITE = 'example'
 SENTRY_PUBLIC = True
 
 SENTRY_FILTERS = (
+    'sentry.filters.ProjectFilter',
     'example_project.filters.IPFilter',
     'sentry.filters.StatusFilter',
     'sentry.filters.LoggerFilter',
@@ -140,7 +141,7 @@ else:
     INSTALLED_APPS = INSTALLED_APPS + (
         'debug_toolbar',
     )
-    
+
     MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + (
         'debug_toolbar.middleware.DebugToolbarMiddleware',
     )
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 2423bb8741..bcec0205a6 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -24,6 +24,7 @@ THRASHING_TIMEOUT = 60
 THRASHING_LIMIT = 10
 
 FILTERS = (
+    'sentry.filters.ProjectFilter',
     'sentry.filters.StatusFilter',
     'sentry.filters.LoggerFilter',
     'sentry.filters.LevelFilter',
diff --git a/sentry/filters.py b/sentry/filters.py
index 79e795fa43..2cf5b36071 100644
--- a/sentry/filters.py
+++ b/sentry/filters.py
@@ -64,22 +64,22 @@ class SentryFilter(object):
     # This must be a string
     default = ''
     show_label = True
-    
+
     def __init__(self, request):
         self.request = request
-    
+
     def is_set(self):
         return bool(self.get_value())
-    
+
     def get_value(self):
         return self.request.GET.get(self.get_query_param(), self.default) or ''
-    
+
     def get_query_param(self):
         return getattr(self, 'query_param', self.column)
 
     def get_widget(self):
         return self.widget(self, self.request)
-    
+
     def get_query_string(self):
         column = self.column
         query_dict = self.request.GET.copy()
@@ -88,24 +88,24 @@ class SentryFilter(object):
         if column in query_dict:
             del query_dict[self.column]
         return '?' + query_dict.urlencode()
-    
+
     def get_choices(self):
         from sentry.models import FilterValue
         return SortedDict((l, l) for l in FilterValue.objects.filter(key=self.column)\
                                                      .values_list('value', flat=True)\
                                                      .order_by('value'))
-    
+
     def get_query_set(self, queryset):
         from sentry.models import MessageIndex
         kwargs = {self.column: self.get_value()}
         if self.column.startswith('data__'):
             return MessageIndex.objects.get_for_queryset(queryset, **kwargs)
         return queryset.filter(**kwargs)
-    
+
     def process(self, data):
         """``self.request`` is not available within this method"""
         return data
-    
+
     def render(self):
         widget = self.get_widget()
         return widget.render(self.get_value())
@@ -158,9 +158,43 @@ class SiteFilter(SentryFilter):
 class LevelFilter(SentryFilter):
     label = 'Level'
     column = 'level'
-    
+
     def get_choices(self):
         return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
-    
+
     def get_query_set(self, queryset):
         return queryset.filter(level__gte=self.get_value())
+
+class SiteFilter(SentryFilter):
+    label = 'Site'
+    column = 'site'
+
+    def process(self, data):
+        if 'site' in data:
+            return data
+        if settings.SITE is None:
+            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
+                from django.contrib.sites.models import Site
+                try:
+                    settings.SITE = Site.objects.get_current().name
+                except Site.DoesNotExist:
+                    settings.SITE = ''
+            else:
+                settings.SITE = ''
+        if settings.SITE:
+            data['site'] = settings.SITE
+        return data
+
+    def get_query_set(self, queryset):
+        return queryset.filter(message_set__site=self.get_value()).distinct()
+
+class ProjectFilter(SentryFilter):
+    label = 'Project'
+    column = 'project'
+
+    def get_choices(self):
+        from sentry.web.views import get_project_list
+        return SortedDict((str(k.pk), k.name) for k in get_project_list(self.request.user))
+
+    def get_query_set(self, queryset):
+        return queryset.filter(project=self.get_value()).distinct()
\ No newline at end of file
diff --git a/sentry/management/__init__.py b/sentry/management/__init__.py
index e117fa3c30..b5dea28f45 100644
--- a/sentry/management/__init__.py
+++ b/sentry/management/__init__.py
@@ -21,7 +21,11 @@ def create_default_project(app, created_models, verbosity=2, **kwargs):
         if not created:
             return
 
-        project.member_set.add(owner, is_superuser=True)
+        models.ProjectMember.objects.create(
+            project=project,
+            user=owner,
+            is_superuser=True,
+        )
 
         if verbosity > 0:
             print 'Created default Sentry project owned by %s' % owner
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index 0a694bfb26..82191ad3f5 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -37,7 +37,7 @@ class ActionProvider:
 
     selected  Boolean indicating whether the action is the one
               currently being performed
-    
+
     ========  ========================================================
     """
     __metaclass__ = PluginMount
@@ -56,7 +56,7 @@ class GroupActionProvider:
     # TODO: should be able to specify modal support
 
     __metaclass__ = PluginMount
-    
+
     new_window = False
 
     @classmethod
