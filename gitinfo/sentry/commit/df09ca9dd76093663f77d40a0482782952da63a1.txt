commit df09ca9dd76093663f77d40a0482782952da63a1
Author: Zac Propersi <3389111+logicalbomb@users.noreply.github.com>
Date:   Wed Feb 27 16:52:44 2019 -0800

    fix(search): Strip enclosing quotation marks on raw query term (#12169)
    
    * fix(search): Strip enclosing quotation marks on raw query term
    
    Users have sent in searches surrounded by quotation marks which
    becomes a literal search in Snuba. This will make a best effort
    attempt at stripping enclosing quotation marks.
    
    Fixes APP-1152

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 386b3e1ac7..e1af207115 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -230,10 +230,18 @@ class SearchVisitor(NodeVisitor):
         return search_term[0]
 
     def visit_raw_search(self, node, children):
+        value = node.text
+
+        while value.startswith('"') and value.endswith('"') and value != '"':
+            value = value[1:-1]
+
+        if not value:
+            return None
+
         return SearchFilter(
             SearchKey('message'),
             "=",
-            SearchValue(node.text),
+            SearchValue(value),
         )
 
     def visit_numeric_filter(self, node, children):
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index e35bd97253..f541560030 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -441,6 +441,87 @@ class ParseSearchQueryTest(TestCase):
             ),
         ]
 
+    def test_quotes_filtered_on_raw(self):
+        # Enclose the full raw query? Strip it.
+        assert parse_search_query('thinger:unknown "what is this?"') == [
+            SearchFilter(
+                key=SearchKey(name='thinger'),
+                operator='=',
+                value=SearchValue(raw_value='unknown'),
+            ),
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='what is this?'),
+            ),
+        ]
+
+        # Enclose the full query? Strip it and the whole query is raw.
+        assert parse_search_query('"thinger:unknown what is this?"') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='thinger:unknown what is this?'),
+            ),
+        ]
+
+        # Allow a single quotation at end
+        assert parse_search_query('end"') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='end"'),
+            ),
+        ]
+
+        # Allow a single quotation at beginning
+        assert parse_search_query('"beginning') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='"beginning'),
+            ),
+        ]
+
+        # Allow a single quotation
+        assert parse_search_query('"') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='"'),
+            ),
+        ]
+
+        # Empty quotations become a dropped term
+        assert parse_search_query('""') == []
+
+        # Allow a search for space
+        assert parse_search_query('" "') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value=' '),
+            ),
+        ]
+
+        # Strip in a balanced manner
+        assert parse_search_query('""woof"') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='"woof'),
+            ),
+        ]
+
+        # Don't try this at home kids
+        assert parse_search_query('"""""""""') == [
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='"'),
+            ),
+        ]
+
 
 class GetSnubaQueryArgsTest(TestCase):
     def test_simple(self):
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 1aa5dbbeab..26bcbb9661 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -1256,6 +1256,13 @@ class SnubaSearchTest(SnubaTestCase):
         )
         assert set(results) == set([self.group1])
 
+    def test_query_enclosed_in_quotes(self):
+        results = self.make_query(search_filter_query='"foo"', query='"foo"')
+        assert set(results) == set([self.group1])
+
+        results = self.make_query(search_filter_query='"bar"', query='"bar"')
+        assert set(results) == set([self.group2])
+
     @xfail_if_not_postgres('Wildcard searching only supported in Postgres')
     def test_wildcard(self):
         escaped_event = self.store_event(
