commit 3f1a0e8597f72398961f880382043053dd924bcb
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 30 15:43:48 2010 -0700

    Refactor: move settings module into conf module

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 4ada6b06de..ba94bc2441 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -14,7 +14,7 @@ from django.template import TemplateSyntaxError
 from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
-from sentry import settings
+from sentry import conf
 from sentry.helpers import construct_checksum, varmap, transform, get_installed_apps, urlread
 
 logger = logging.getLogger('sentry.errors')
@@ -24,14 +24,14 @@ class SentryClient(object):
         from sentry.helpers import get_filters
 
         kwargs.setdefault('level', logging.ERROR)
-        kwargs.setdefault('server_name', settings.NAME)
+        kwargs.setdefault('server_name', conf.NAME)
 
         checksum = construct_checksum(**kwargs)
 
-        if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
+        if conf.THRASHING_TIMEOUT and conf.THRASHING_LIMIT:
             cache_key = 'sentry:%s:%s' % (kwargs.get('class_name'), checksum)
-            added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
-            if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
+            added = cache.add(cache_key, 1, conf.THRASHING_TIMEOUT)
+            if not added and cache.incr(cache_key) > conf.THRASHING_LIMIT:
                 return
 
         for filter_ in get_filters():
@@ -44,14 +44,14 @@ class SentryClient(object):
         return self.send(**kwargs)
 
     def send(self, **kwargs):
-        if settings.REMOTE_URL:
-            for url in settings.REMOTE_URL:
+        if conf.REMOTE_URL:
+            for url in conf.REMOTE_URL:
                 data = {
                     'data': base64.b64encode(pickle.dumps(kwargs).encode('zlib')),
-                    'key': settings.KEY,
+                    'key': conf.KEY,
                 }
                 try:
-                    response = urlread(url, GET=data, timeout=settings.REMOTE_TIMEOUT)
+                    response = urlread(url, GET=data, timeout=conf.REMOTE_TIMEOUT)
                 except urllib2.URLError, e:
                     logger.error('Unable to reach Sentry log server: %s' % (e,), exc_info=sys.exc_info(), extra={'remote_url': url})
                     logger.log(kwargs.pop('level', None) or logging.ERROR, kwargs.pop('message', None))
@@ -130,8 +130,8 @@ class SentryClient(object):
         if not kwargs.get('view'):
             # This should be cached
             modules = get_installed_apps()
-            if settings.INCLUDE_PATHS:
-                modules = set(list(modules) + settings.INCLUDE_PATHS)
+            if conf.INCLUDE_PATHS:
+                modules = set(list(modules) + conf.INCLUDE_PATHS)
 
             def iter_tb_frames(tb):
                 while tb:
@@ -152,7 +152,7 @@ class SentryClient(object):
             for frame in iter_tb_frames(exc_traceback):
                 view = '.'.join([frame.f_globals['__name__'], frame.f_code.co_name])
                 if contains(modules, view):
-                    if not (contains(settings.EXCLUDE_PATHS, view) and best_guess):
+                    if not (contains(conf.EXCLUDE_PATHS, view) and best_guess):
                         best_guess = view
                 elif best_guess:
                     break
diff --git a/sentry/client/celery/settings.py b/sentry/client/celery/conf.py
similarity index 100%
rename from sentry/client/celery/settings.py
rename to sentry/client/celery/conf.py
diff --git a/sentry/client/celery/tasks.py b/sentry/client/celery/tasks.py
index 0de083b93c..a4adde8a51 100644
--- a/sentry/client/celery/tasks.py
+++ b/sentry/client/celery/tasks.py
@@ -1,7 +1,7 @@
 from celery.decorators import task
 from sentry.client.base import SentryClient
-from sentry.client.celery import settings
+from sentry.client.celery import conf
 
-@task(routing_key=settings.CELERY_ROUTING_KEY)
+@task(routing_key=conf.CELERY_ROUTING_KEY)
 def send(data):
     return SentryClient().send(**data)
diff --git a/sentry/client/models.py b/sentry/client/models.py
index a9c3c1f889..600ff8e912 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -6,7 +6,7 @@ from django.core.signals import got_request_exception
 from django.db import  transaction
 from django.http import Http404
 
-from sentry import settings
+from sentry import conf
 from sentry.client.base import SentryClient
 
 logger = logging.getLogger('sentry.errors')
@@ -14,9 +14,9 @@ logger = logging.getLogger('sentry.errors')
 _client = (None, None)
 def get_client():
     global _client
-    if _client[0] != settings.CLIENT:
-        module, class_name = settings.CLIENT.rsplit('.', 1)
-        _client = (settings.CLIENT, getattr(__import__(module, {}, {}, class_name), class_name)())
+    if _client[0] != conf.CLIENT:
+        module, class_name = conf.CLIENT.rsplit('.', 1)
+        _client = (conf.CLIENT, getattr(__import__(module, {}, {}, class_name), class_name)())
     return _client[1]
 client = get_client()
 
@@ -25,11 +25,11 @@ def sentry_exception_handler(sender, request=None, **kwargs):
     try:
         exc_type, exc_value, exc_traceback = sys.exc_info()
 
-        if not settings.CATCH_404_ERRORS \
+        if not conf.CATCH_404_ERRORS \
                 and issubclass(exc_type, Http404):
             return
 
-        if settings.DEBUG or getattr(exc_type, 'skip_sentry', False):
+        if conf.DEBUG or getattr(exc_type, 'skip_sentry', False):
             return
 
         if transaction.is_dirty():
diff --git a/sentry/settings.py b/sentry/conf.py
similarity index 100%
rename from sentry/settings.py
rename to sentry/conf.py
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index b66ab49d7f..96a67d4647 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -1,9 +1,9 @@
 # Widget api is pretty ugly
-from django.conf import settings as django_settings
+from django.conf import settings
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
-from sentry import settings
+from sentry import conf
 
 class Widget(object):
     def __init__(self, filter, request):
@@ -126,17 +126,17 @@ class SiteFilter(SentryFilter):
     def process(self, data):
         if 'site' in data:
             return data
-        if settings.SITE is None:
-            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
+        if conf.SITE is None:
+            if 'django.contrib.sites' in settings.INSTALLED_APPS:
                 from django.contrib.sites.models import Site
                 try:
-                    settings.SITE = Site.objects.get_current().name
+                    conf.SITE = Site.objects.get_current().name
                 except Site.DoesNotExist:
-                    settings.SITE = ''
+                    conf.SITE = ''
             else:
-                settings.SITE = ''
-        if settings.SITE:
-            data['site'] = settings.SITE
+                conf.SITE = ''
+        if conf.SITE:
+            data['site'] = conf.SITE
         return data
 
     def get_query_set(self, queryset):
@@ -147,4 +147,4 @@ class LevelFilter(SentryFilter):
     column = 'level'
     
     def get_choices(self):
-        return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
\ No newline at end of file
+        return SortedDict((str(k), v) for k, v in conf.LOG_LEVELS)
\ No newline at end of file
diff --git a/sentry/helpers.py b/sentry/helpers.py
index b97d5c9262..fcc2f5d42e 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -6,15 +6,16 @@ import django
 from django.conf import settings
 from django.utils.hashcompat import md5_constructor
 
+from sentry import conf
+
 _FILTER_CACHE = None
 def get_filters():
     global _FILTER_CACHE
     
     if _FILTER_CACHE is None:
-        from sentry import settings
         
         filters = []
-        for filter_ in settings.FILTERS:
+        for filter_ in conf.FILTERS:
             module_name, class_name = filter_.rsplit('.', 1)
             try:
                 module = __import__(module_name, {}, {}, class_name)
diff --git a/sentry/manager.py b/sentry/manager.py
index fa702737f0..350f81abb4 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -8,10 +8,10 @@ from django.db.models import signals
 from django.template import TemplateSyntaxError
 from django.views.debug import ExceptionReporter
 
-from sentry import settings
+from sentry import conf
 from sentry.helpers import construct_checksum, transform, varmap
 
-assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
+assert not conf.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
 logger = logging.getLogger('sentry.errors')
 
@@ -20,8 +20,8 @@ class SentryManager(models.Manager):
 
     def get_query_set(self):
         qs = super(SentryManager, self).get_query_set()
-        if settings.DATABASE_USING:
-            qs = qs.using(settings.DATABASE_USING)
+        if conf.DATABASE_USING:
+            qs = qs.using(conf.DATABASE_USING)
         return qs
 
     def from_kwargs(self, **kwargs):
@@ -33,7 +33,7 @@ class SentryManager(models.Manager):
         view = kwargs.pop('view', None)
         logger_name = kwargs.pop('logger', 'root')
         url = kwargs.pop('url', None)
-        server_name = kwargs.pop('server_name', settings.CLIENT)
+        server_name = kwargs.pop('server_name', conf.CLIENT)
         site = kwargs.pop('site', None)
         data = kwargs.pop('data', {}) or {}
 
diff --git a/sentry/models.py b/sentry/models.py
index 6a6ce96a33..8c52767196 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -9,7 +9,7 @@ import sys
 import traceback
 import warnings
 
-from django.conf import settings as dj_settings
+from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models, transaction
 from django.db.models import Count
@@ -18,7 +18,7 @@ from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import settings
+from sentry import conf
 from sentry.client.base import SentryClient
 from sentry.helpers import cached_property, construct_checksum, get_db_engine, get_installed_apps, transform
 from sentry.manager import GroupedMessageManager, SentryManager
@@ -26,7 +26,7 @@ from sentry.reporter import FakeRequest
 
 _reqs = ('paging', 'indexer')
 for r in _reqs:
-    if r not in dj_settings.INSTALLED_APPS:
+    if r not in settings.INSTALLED_APPS:
         raise ImproperlyConfigured("Put '%s' in your "
             "INSTALLED_APPS setting in order to use the sentry application." % r)
 
@@ -74,7 +74,7 @@ class GzippedDictField(models.TextField):
 class MessageBase(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
-    level           = models.PositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
+    level           = models.PositiveIntegerField(choices=conf.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
     view            = models.CharField(max_length=255, blank=True, null=True)
@@ -161,7 +161,7 @@ class GroupedMessage(MessageBase):
         return 'times_seen'
 
     def mail_admins(self, request=None, fail_silently=True):
-        if not settings.ADMINS:
+        if not conf.ADMINS:
             return
         
         from django.core.mail import send_mail
@@ -171,7 +171,7 @@ class GroupedMessage(MessageBase):
 
         obj_request = message.request
 
-        subject = 'Error (%s IP): %s' % ((obj_request.META.get('REMOTE_ADDR') in dj_settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'), obj_request.path)
+        subject = 'Error (%s IP): %s' % ((obj_request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'), obj_request.path)
         try:
             request_repr = repr(obj_request)
         except:
@@ -180,7 +180,7 @@ class GroupedMessage(MessageBase):
         if request:
             link = request.build_absolute_url(self.get_absolute_url())
         else:
-            link = '%s%s' % (settings.URL_PREFIX, self.get_absolute_url())
+            link = '%s%s' % (conf.URL_PREFIX, self.get_absolute_url())
 
         body = render_to_string('sentry/emails/error.txt', {
             'request_repr': request_repr,
@@ -190,8 +190,8 @@ class GroupedMessage(MessageBase):
             'link': link,
         })
         
-        send_mail(dj_settings.EMAIL_SUBJECT_PREFIX + subject, body,
-                  dj_settings.SERVER_EMAIL, settings.ADMINS,
+        send_mail(settings.EMAIL_SUBJECT_PREFIX + subject, body,
+                  settings.SERVER_EMAIL, conf.ADMINS,
                   fail_silently=fail_silently)
     
     @property
diff --git a/sentry/routers.py b/sentry/routers.py
index 4e031bef37..e4dc051e2b 100644
--- a/sentry/routers.py
+++ b/sentry/routers.py
@@ -1,15 +1,15 @@
-from sentry import settings
+from sentry import conf
 
 class SentryRouter(object):
     def db_for_write(self, model, **hints):
         if model._meta.app_label == 'sentry':
-            return settings.DATABASE_USING
+            return conf.DATABASE_USING
 
     def db_for_read(self, model, **hints):
         return self.db_for_write(model, **hints)
 
     def allow_syncdb(self, db, model):
-        sentry_db = settings.DATABASE_USING
+        sentry_db = conf.DATABASE_USING
         if not sentry_db:
             return None
         if model._meta.app_label == 'sentry' and db != sentry_db:
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index 6732557e7f..51095d0a10 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -71,7 +71,7 @@
 		</ul>
 
 		<ul class="nav" id="group_nav">
-			<li{% if not page %} class="active"{% endif %}><a href="{% url sentry-group group.pk %}">Details</a></li>
+			<li{% ifequal page 'details' %} class="active"{% endifequal %}><a href="{% url sentry-group group.pk %}">Details</a></li>
 			<li{% ifequal page 'messages' %} class="active"{% endifequal %}><a href="{% url sentry-group-messages group.pk %}">Messages</a></li>
 			<li{% ifequal page 'urls' %} class="active"{% endifequal %}><a href="{% url sentry-group-urls group.pk %}">URLs</a></li>
 			<li{% ifequal page 'servers' %} class="active"{% endifequal %}><a href="{% url sentry-group-servers group.pk %}">Servers</a></li>
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index bf3cec3f53..9d6ed2da32 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -11,6 +11,7 @@ import os.path
 import sys
 import threading
 
+from django.conf import settings
 from django.contrib.auth.models import User
 from django.core import mail
 from django.core.handlers.wsgi import WSGIRequest, WSGIHandler
@@ -23,7 +24,7 @@ from django.template import TemplateSyntaxError
 from django.utils.encoding import smart_unicode
 from django.utils import simplejson
 
-from sentry import settings
+from sentry import conf
 from sentry.helpers import transform
 from sentry.models import Message, GroupedMessage
 from sentry.client.base import SentryClient
@@ -44,7 +45,6 @@ class TestServerThread(threading.Thread):
 
     def run(self):
         """Sets up test server and database and loops over handling http requests."""
-        from django.conf import settings
         try:
             handler = basehttp.AdminMediaHandler(WSGIHandler())
             server_address = (self.address, self.port)
@@ -260,7 +260,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, 'This is an error')
         
     def testAlternateDatabase(self):
-        settings.DATABASE_USING = 'default'
+        conf.DATABASE_USING = 'default'
         
         try:
             Message.objects.get(id=999999979)
@@ -277,7 +277,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
 
-        settings.DATABASE_USING = None
+        conf.DATABASE_USING = None
     
     def testIncorrectUnicode(self):
         self.setUpHandler()
@@ -338,8 +338,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(error.data['url'], 'a'*210)
     
     def testThrashing(self):
-        settings.THRASHING_LIMIT = 10
-        settings.THRASHING_TIMEOUT = 60
+        conf.THRASHING_LIMIT = 10
+        conf.THRASHING_TIMEOUT = 60
         
         Message.objects.all().delete()
         GroupedMessage.objects.all().delete()
@@ -347,7 +347,7 @@ class SentryTestCase(TestCase):
         for i in range(0, 50):
             get_client().create_from_text('hi')
         
-        self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
+        self.assertEquals(Message.objects.count(), conf.THRASHING_LIMIT)
     
     def testSignals(self):
         request = RF.get("/", REMOTE_ADDR="127.0.0.1:8000")
@@ -386,8 +386,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, smart_unicode(exc))
 
     def testNoThrashing(self):
-        prev = settings.THRASHING_LIMIT
-        settings.THRASHING_LIMIT = 0
+        prev = conf.THRASHING_LIMIT
+        conf.THRASHING_LIMIT = 0
         
         Message.objects.all().delete()
         GroupedMessage.objects.all().delete()
@@ -397,7 +397,7 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(Message.objects.count(), 50)
 
-        settings.THRASHING_LIMIT = prev
+        conf.THRASHING_LIMIT = prev
 
     def testDatabaseMessage(self):
         from django.db import connection
@@ -436,7 +436,6 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
 
     def testRequestMiddlwareException(self):
-        from django.conf import settings
         orig = list(settings.MIDDLEWARE_CLASSES)
         settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenRequestMiddleware',]
         
@@ -454,7 +453,6 @@ class SentryTestCase(TestCase):
 
     # XXX: Django doesn't handle response middleware exceptions (yet)
     # def testResponseMiddlwareException(self):
-    #     from django.conf import settings
     #     orig = list(settings.MIDDLEWARE_CLASSES)
     #     settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenResponseMiddleware',]
     #     
@@ -471,7 +469,6 @@ class SentryTestCase(TestCase):
     #     settings.MIDDLEWARE_CLASSES = orig
 
     def testViewMiddlewareException(self):
-        from django.conf import settings
         orig = list(settings.MIDDLEWARE_CLASSES)
         settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenViewMiddleware',]
         
@@ -488,10 +485,10 @@ class SentryTestCase(TestCase):
         settings.MIDDLEWARE_CLASSES = orig
 
     def testSettingName(self):
-        orig_name = settings.NAME
-        orig_site = settings.SITE
-        settings.NAME = 'foo'
-        settings.SITE = 'bar'
+        orig_name = conf.NAME
+        orig_site = conf.SITE
+        conf.NAME = 'foo'
+        conf.SITE = 'bar'
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
 
@@ -506,8 +503,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.site, 'bar')
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
         
-        settings.NAME = orig_name
-        settings.SITE = orig_site
+        conf.NAME = orig_name
+        conf.SITE = orig_site
 
     def testExclusionViewPath(self):
         try: Message.objects.get(pk=1341324)
@@ -518,7 +515,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.view, 'sentry.tests.tests.testExclusionViewPath')
 
     def testBestGuessView(self):
-        settings.EXCLUDE_PATHS = ['sentry.tests.tests']
+        conf.EXCLUDE_PATHS = ['sentry.tests.tests']
         
         try: Message.objects.get(pk=1341324)
         except: get_client().create_from_exception()
@@ -527,10 +524,10 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry.tests.tests.testBestGuessView')
         
-        settings.EXCLUDE_PATHS = []
+        conf.EXCLUDE_PATHS = []
 
     def testExcludeModulesView(self):
-        settings.EXCLUDE_PATHS = ['sentry.tests.views.decorated_raise_exc']
+        conf.EXCLUDE_PATHS = ['sentry.tests.views.decorated_raise_exc']
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc-decor'))
         
@@ -538,7 +535,7 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
         
-        settings.EXCLUDE_PATHS = []
+        conf.EXCLUDE_PATHS = []
 
     def testVaryingMessages(self):
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc') + '?message=foo')
@@ -548,7 +545,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(GroupedMessage.objects.count(), 1)
 
     def testIncludeModules(self):
-        settings.INCLUDE_PATHS = ['django.shortcuts.get_object_or_404']
+        conf.INCLUDE_PATHS = ['django.shortcuts.get_object_or_404']
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-django-exc'))
         
@@ -556,7 +553,7 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'django.shortcuts.get_object_or_404')
         
-        settings.INCLUDE_PATHS = []
+        conf.INCLUDE_PATHS = []
 
     def testTemplateNameAsView(self):
         self.assertRaises(TemplateSyntaxError, self.client.get, reverse('sentry-template-exc'))
@@ -570,10 +567,10 @@ class SentryViewsTest(TestCase):
     fixtures = ['sentry/tests/fixtures/views.json']
     
     def setUp(self):
-        settings.DATABASE_USING = None
+        conf.DATABASE_USING = None
         self._handlers = None
         self._level = None
-        settings.DEBUG = False
+        conf.DEBUG = False
         self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
         self.user.set_password('admin')
         self.user.save()
@@ -647,7 +644,7 @@ class RemoteSentryTest(TestCase):
     
     def setUp(self):
         self.server_thread = None
-        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
+        conf.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
         logger = logging.getLogger('sentry')
         for h in logger.handlers:
             logger.removeHandler(h)
@@ -655,7 +652,7 @@ class RemoteSentryTest(TestCase):
 
     def tearDown(self):
         self.stop_test_server()
-        settings.REMOTE_URL = None
+        conf.REMOTE_URL = None
 
     def testNoKey(self):
         resp = self.client.post(reverse('sentry-store'))
@@ -664,14 +661,14 @@ class RemoteSentryTest(TestCase):
 
     def testNoData(self):
         resp = self.client.post(reverse('sentry-store'), {
-            'key': settings.KEY,
+            'key': conf.KEY,
         })
         self.assertEquals(resp.status_code, 403)
         self.assertEquals(resp.content, 'Missing data')
 
     def testBadData(self):
         resp = self.client.post(reverse('sentry-store'), {
-            'key': settings.KEY,
+            'key': conf.KEY,
             'data': 'hello world',
         })
         self.assertEquals(resp.status_code, 403)
@@ -681,7 +678,7 @@ class RemoteSentryTest(TestCase):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
-            'key': settings.KEY,
+            'key': conf.KEY,
         })
         self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
@@ -694,7 +691,7 @@ class RemoteSentryTest(TestCase):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs))),
-            'key': settings.KEY,
+            'key': conf.KEY,
         })
         self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
@@ -715,7 +712,7 @@ class RemoteSentryTest(TestCase):
         
         resp = self.client.post(reverse('sentry-store'), {
             'data': data,
-            'key': settings.KEY,
+            'key': conf.KEY,
         })
         self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
@@ -766,7 +763,7 @@ class SentryMailTest(TestCase):
     urls = 'sentry.tests.urls'
     
     def setUp(self):
-        settings.ADMINS = ('%s@localhost' % getpass.getuser(),)
+        conf.ADMINS = ('%s@localhost' % getpass.getuser(),)
     
     def test_mail_admins(self):
         group = GroupedMessage.objects.get()
@@ -781,7 +778,7 @@ class SentryMailTest(TestCase):
         self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /group/1')
 
     def test_mail_on_creation(self):
-        settings.MAIL = True
+        conf.MAIL = True
         
         self.assertEquals(len(mail.outbox), 0)
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
@@ -796,7 +793,7 @@ class SentryMailTest(TestCase):
         self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /trigger-500')
 
     def test_mail_on_duplication(self):
-        settings.MAIL = True
+        conf.MAIL = True
         
         self.assertEquals(len(mail.outbox), 0)
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
@@ -820,7 +817,7 @@ class SentryMailTest(TestCase):
         self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /trigger-500')
 
     def test_url_prefix(self):
-        settings.URL_PREFIX = 'http://example.com'
+        conf.URL_PREFIX = 'http://example.com'
 
         group = GroupedMessage.objects.get()
         group.mail_admins(fail_silently=False)
@@ -831,7 +828,6 @@ class SentryMailTest(TestCase):
 
 class SentryHelpersTest(TestCase):
     def test_get_db_engine(self):
-        from django.conf import settings
         from sentry.helpers import get_db_engine
         _databases = getattr(settings, 'DATABASES', {}).copy()
         _engine = settings.DATABASE_ENGINE
@@ -856,10 +852,10 @@ class SentryClientTest(TestCase):
     urls = 'sentry.tests.urls'
 
     def setUp(self):
-        self._client = settings.CLIENT
+        self._client = conf.CLIENT
         
     def tearDown(self):
-        settings.CLIENT = self._client
+        conf.CLIENT = self._client
     
     def test_get_client(self):
         from sentry.client.base import SentryClient
@@ -867,15 +863,15 @@ class SentryClientTest(TestCase):
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
     
-        settings.CLIENT = 'sentry.client.log.LoggingSentryClient'
+        conf.CLIENT = 'sentry.client.log.LoggingSentryClient'
         
         self.assertEquals(get_client().__class__, LoggingSentryClient)
         self.assertEquals(get_client(), get_client())
     
-        settings.CLIENT = 'sentry.client.base.SentryClient'
+        conf.CLIENT = 'sentry.client.base.SentryClient'
     
     def test_logging_client(self):
-        settings.CLIENT = 'sentry.client.log.LoggingSentryClient'
+        conf.CLIENT = 'sentry.client.log.LoggingSentryClient'
         
         client = get_client()
         
@@ -900,7 +896,7 @@ class SentryClientTest(TestCase):
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
 
-        settings.CLIENT = 'sentry.client.celery.CelerySentryClient'
+        conf.CLIENT = 'sentry.client.celery.CelerySentryClient'
 
         self.assertEquals(get_client().__class__, CelerySentryClient)
         self.assertEquals(get_client(), get_client())
@@ -911,7 +907,7 @@ class SentryClientTest(TestCase):
         self.assertEqual(message.class_name, 'Exception')
         self.assertEqual(message.message, 'view exception')
 
-        settings.CLIENT = 'sentry.client.base.SentryClient'
+        conf.CLIENT = 'sentry.client.base.SentryClient'
         
 class SentryManageTest(TestCase):
     fixtures = ['sentry/tests/fixtures/cleanup.json']
diff --git a/sentry/urls.py b/sentry/urls.py
index 146a93b229..dcad211d76 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -3,7 +3,7 @@ import os
 from django.conf import settings
 from django.conf.urls.defaults import *
 
-from sentry.settings import KEY
+from sentry.conf import KEY
 from sentry import views
 from sentry.feeds import MessageFeed, SummaryFeed
 
diff --git a/sentry/views.py b/sentry/views.py
index 58a58edc9a..4e110c29f7 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -8,7 +8,7 @@ from math import log
 import logging
 import zlib
 
-from django.conf import settings as dj_settings
+from django.conf import settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db.models import Count
@@ -21,7 +21,7 @@ from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
-from sentry import settings
+from sentry import conf
 from sentry.models import GroupedMessage, Message
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
@@ -34,10 +34,8 @@ def get_filters():
     global _FILTER_CACHE
     
     if _FILTER_CACHE is None:
-        from sentry import settings
-        
         filters = []
-        for filter_ in settings.FILTERS:
+        for filter_ in conf.FILTERS:
             module_name, class_name = filter_.rsplit('.', 1)
             try:
                 module = __import__(module_name, {}, {}, class_name)
@@ -224,6 +222,7 @@ def group(request, group_id):
     
     json_data = iter_data(obj)
     
+    page = 'details'
     
     return render_to_response('sentry/group/details.html', locals())
 
@@ -290,7 +289,7 @@ def group_servers(request, group_id):
 @csrf_exempt
 def store(request):
     key = request.POST.get('key')
-    if key != settings.KEY:
+    if key != conf.KEY:
         return HttpResponseForbidden('Invalid credentials')
     
     data = request.POST.get('data')
