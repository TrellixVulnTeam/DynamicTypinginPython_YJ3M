commit f393e1aa2ee8175e7b0c721214b2f4db7f3ed5b0
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Sep 20 14:29:13 2017 -0700

    perf(similarity): Add metrics wrapper for instrumentation (#6163)

diff --git a/src/sentry/similarity/__init__.py b/src/sentry/similarity/__init__.py
index ec939da17b..dfad9fd50f 100644
--- a/src/sentry/similarity/__init__.py
+++ b/src/sentry/similarity/__init__.py
@@ -7,6 +7,7 @@ from django.conf import settings
 
 from sentry.interfaces.stacktrace import Frame
 from sentry.similarity.backends.dummy import DummyIndexBackend
+from sentry.similarity.backends.metrics import MetricsWrapper
 from sentry.similarity.backends.redis import RedisMinHashIndexBackend
 from sentry.similarity.encoder import Encoder
 from sentry.similarity.features import (
@@ -76,14 +77,17 @@ def _make_index_backend(cluster=None):
             logger.info('No redis cluster provided for similarity, using {!r}.'.format(index))
             return index
 
-    return RedisMinHashIndexBackend(
-        cluster,
-        'sim:1',
-        MinHashSignatureBuilder(16, 0xFFFF),
-        8,
-        60 * 60 * 24 * 30,
-        3,
-        5000,
+    return MetricsWrapper(
+        RedisMinHashIndexBackend(
+            cluster,
+            'sim:1',
+            MinHashSignatureBuilder(16, 0xFFFF),
+            8,
+            60 * 60 * 24 * 30,
+            3,
+            5000,
+        ),
+        scope_tag_name='project_id',
     )
 
 
diff --git a/src/sentry/similarity/backends/metrics.py b/src/sentry/similarity/backends/metrics.py
new file mode 100644
index 0000000000..5979dfa8e9
--- /dev/null
+++ b/src/sentry/similarity/backends/metrics.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+from sentry.similarity.backends.abstract import AbstractIndexBackend
+from sentry.utils.metrics import timer
+
+
+class MetricsWrapper(AbstractIndexBackend):
+    def __init__(self, backend, template='similarity.{}', scope_tag_name='scope'):
+        self.backend = backend
+        self.template = template
+        self.scope_tag_name = scope_tag_name
+
+    def __getattr__(self, name):
+        return getattr(self.backend, name)
+
+    def __instrumented_method_call(self, method, scope, *args, **kwargs):
+        with timer(self.template.format(method), tags={self.scope_tag_name: scope}):
+            return getattr(self.backend, method)(scope, *args, **kwargs)
+
+    def record(self, *args, **kwargs):
+        return self.__instrumented_method_call('record', *args, **kwargs)
+
+    def classify(self, *args, **kwargs):
+        return self.__instrumented_method_call('classify', *args, **kwargs)
+
+    def compare(self, *args, **kwargs):
+        return self.__instrumented_method_call('compare', *args, **kwargs)
+
+    def merge(self, *args, **kwargs):
+        return self.__instrumented_method_call('merge', *args, **kwargs)
+
+    def delete(self, *args, **kwargs):
+        return self.__instrumented_method_call('delete', *args, **kwargs)
+
+    def scan(self, *args, **kwargs):
+        return self.__instrumented_method_call('scan', *args, **kwargs)
+
+    def flush(self, *args, **kwargs):
+        return self.__instrumented_method_call('flush', *args, **kwargs)
+
+    def export(self, *args, **kwargs):
+        return self.__instrumented_method_call('export', *args, **kwargs)
+
+    def import_(self, *args, **kwargs):
+        return self.__instrumented_method_call('import_', *args, **kwargs)
