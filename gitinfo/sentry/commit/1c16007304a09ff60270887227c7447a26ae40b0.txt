commit 1c16007304a09ff60270887227c7447a26ae40b0
Author: Jess MacQueen <jess@getsentry.com>
Date:   Fri May 6 12:01:33 2016 -0700

    add tests for new avatars

diff --git a/src/sentry/api/endpoints/useravatar.py b/src/sentry/api/endpoints/useravatar.py
index 77c72867ff..c6e0ad5f7b 100644
--- a/src/sentry/api/endpoints/useravatar.py
+++ b/src/sentry/api/endpoints/useravatar.py
@@ -55,6 +55,10 @@ class UserAvatarEndpoint(UserEndpoint):
             avatar.file = photo
 
         avatar_type = request.DATA.get('avatar_type')
+
+        if not avatar.file and avatar_type == 'upload':
+            return Response(status=status.HTTP_400_BAD_REQUEST)
+
         if avatar_type:
             avatar.avatar_type = avatar_type
 
diff --git a/src/sentry/models/useravatar.py b/src/sentry/models/useravatar.py
index ad444a3576..df5ac719c5 100644
--- a/src/sentry/models/useravatar.py
+++ b/src/sentry/models/useravatar.py
@@ -37,7 +37,7 @@ class UserAvatar(Model):
 
     def save(self, *args, **kwargs):
         if not self.ident:
-            self.ident = uuid.uuid4()
+            self.ident = str(uuid.uuid4())
         return super(UserAvatar, self).save(*args, **kwargs)
 
     def delete(self, *args, **kwargs):
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
new file mode 100644
index 0000000000..540f179086
--- /dev/null
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -0,0 +1,86 @@
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import Avatar from 'app/components/avatar';
+
+describe('Avatar', function() {
+  const USER = {
+    id: 1,
+    name: 'Jane Doe',
+    email: 'janedoe@example.com'
+  };
+
+  beforeEach(function () {
+    this.sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(function () {
+    this.sandbox.restore();
+  });
+
+  describe('render()', function() {
+    it('should show a gravatar when avatar type is gravatar', function() {
+      let user = Object.assign({}, USER, {
+        avatar: {
+          avatarType: 'gravatar',
+          avatar_uuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+        }
+      });
+      let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
+      this.sandbox.stub(avatar, 'buildGravatarUrl');
+      this.sandbox.stub(avatar, 'buildProfileUrl');
+      avatar.renderImg();
+      expect(avatar.buildGravatarUrl.calledOnce).to.be.ok;
+      expect(avatar.buildProfileUrl.called).to.not.be.ok;
+    });
+
+    it('should show an upload when avatar type is upload', function() {
+      let user = Object.assign({}, USER, {
+        avatar: {
+          avatarType: 'upload',
+          avatar_uuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+        }
+      });
+      let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
+      this.sandbox.stub(avatar, 'buildGravatarUrl');
+      this.sandbox.stub(avatar, 'buildProfileUrl');
+      avatar.renderImg();
+      expect(avatar.buildProfileUrl.calledOnce).to.be.ok;
+      expect(avatar.buildGravatarUrl.called).to.not.be.ok;
+    });
+
+    it('should not show upload or gravatar when avatar type is letter', function() {
+      let user = Object.assign({}, USER, {
+        avatar: {
+          avatarType: 'letter_avatar',
+          avatar_uuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+        }
+      });
+      let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
+      this.sandbox.stub(avatar, 'buildGravatarUrl');
+      this.sandbox.stub(avatar, 'buildProfileUrl');
+      avatar.renderImg();
+      expect(avatar.buildProfileUrl.called).to.not.be.ok;
+      expect(avatar.buildGravatarUrl.called).to.not.be.ok;
+    });
+
+    it('should show a gravatar when no avatar type is set and user has an email address', function() {
+      let avatar = TestUtils.renderIntoDocument(<Avatar user={USER}/>);
+      this.sandbox.stub(avatar, 'buildGravatarUrl');
+      this.sandbox.stub(avatar, 'buildProfileUrl');
+      avatar.renderImg();
+      expect(avatar.buildGravatarUrl.calledOnce).to.be.ok;
+      expect(avatar.buildProfileUrl.called).to.not.be.ok;
+    });
+
+    it('should not show a gravatar when no avatar type is set and user has no email address', function() {
+      let user = Object.assign({}, USER);
+      delete user.email;
+      let avatar = TestUtils.renderIntoDocument(<Avatar user={user}/>);
+      this.sandbox.stub(avatar, 'buildGravatarUrl');
+      this.sandbox.stub(avatar, 'buildProfileUrl');
+      avatar.renderImg();
+      expect(avatar.buildGravatarUrl.called).to.not.be.ok;
+      expect(avatar.buildProfileUrl.called).to.not.be.ok;
+    });
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_user_avatar.py b/tests/sentry/api/endpoints/test_user_avatar.py
new file mode 100644
index 0000000000..47af0ecd7d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_avatar.py
@@ -0,0 +1,65 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import UserAvatar
+from sentry.testutils import APITestCase
+
+
+class UserAvatarTest(APITestCase):
+    def test_get(self):
+        user = self.create_user(email='a@example.com')
+        avatar = UserAvatar.objects.create(user=user)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-avatar', kwargs={
+            'user_id': 'me',
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(user.id)
+        assert response.data['avatar']['avatarType'] == 'letter_avatar'
+        assert response.data['avatar']['avatar_uuid'] == avatar.ident
+
+    def test_put(self):
+        user = self.create_user(email='a@example.com')
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-avatar', kwargs={
+            'user_id': 'me',
+        })
+        response = self.client.put(url, data={'avatar_type': 'gravatar'}, format='json')
+
+        avatar = UserAvatar.objects.get(user=user)
+        assert response.status_code == 200, response.content
+        assert avatar.avatar_type == 'gravatar'
+
+    def test_put_bad(self):
+        user = self.create_user(email='a@example.com')
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-avatar', kwargs={
+            'user_id': 'me',
+        })
+        response = self.client.put(url, data={'avatar_type': 'upload'}, format='json')
+
+        avatar = UserAvatar.objects.get(user=user)
+        assert response.status_code == 400
+        assert avatar.avatar_type == 'letter_avatar'
+
+    def test_put_forbidden(self):
+        user = self.create_user(email='a@example.com')
+        user2 = self.create_user(email='b@example.com')
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-user-avatar', kwargs={
+            'user_id': user2.id,
+        })
+        response = self.client.put(url, data={'avatar_type': 'gravatar'}, format='json')
+
+        assert response.status_code == 403
