commit 537ec18c05342f37470fc80f0f812df810586dde
Author: Chris Fuller <chris@iprogramstuff.com>
Date:   Mon Sep 16 10:54:32 2019 -0400

    fix(ui): Refresh issue tags when environment selection is changed (#14601)
    
    * fix(ui): Refresh issue tags when environment selection is changed. Improved GlobalSelectionLink (can now merge queries, fallback works).

diff --git a/src/sentry/static/sentry/app/components/globalSelectionLink.jsx b/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
index cbeb060764..c5c2926fd9 100644
--- a/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
+++ b/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
@@ -1,7 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {Link as RouterLink} from 'react-router';
-
+import qs from 'query-string';
 import {extractSelectionParameters} from 'app/components/organizations/globalSelectionHeader/utils';
 
 /**
@@ -22,27 +22,38 @@ export default class GlobalSelectionLink extends React.Component {
 
   render() {
     const {location} = this.context;
+    const {to} = this.props;
 
-    const query = extractSelectionParameters(location.query);
+    const globalQuery = extractSelectionParameters(location.query);
+    const hasGlobalQuery = Object.keys(globalQuery).length > 0;
+    const query = to && to.query ? {...globalQuery, ...to.query} : globalQuery;
 
     if (location) {
-      const hasQuery = Object.keys(query).length > 0;
-
-      let {to} = this.props;
-
-      if (hasQuery) {
+      let toWithGlobalQuery;
+      if (hasGlobalQuery) {
         if (typeof to === 'string') {
-          to = {pathname: to, query};
+          toWithGlobalQuery = {pathname: to, query};
+        } else {
+          toWithGlobalQuery = {...to, query};
         }
       }
-
-      const routerProps = to ? {...this.props, to} : {...this.props};
+      const routerProps = hasGlobalQuery
+        ? {...this.props, to: toWithGlobalQuery}
+        : {...this.props, to};
 
       return <RouterLink {...routerProps}>{this.props.children}</RouterLink>;
     } else {
-      const {to, ...props} = this.props;
+      let queryStringObject = {...qs.parse(to.search), ...globalQuery};
+      if (to && to.query) {
+        queryStringObject = {...queryStringObject, ...to.query};
+      }
+
+      const url =
+        (typeof to === 'string' ? to : to.pathname) +
+        '?' +
+        qs.stringify(queryStringObject);
       return (
-        <a {...props} href={to}>
+        <a {...this.props} href={url}>
           {this.props.children}
         </a>
       );
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
index 51c08eb049..4ca9ab4edb 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
@@ -1,4 +1,3 @@
-import {Link} from 'react-router';
 import {sortBy, property, isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -9,6 +8,7 @@ import withApi from 'app/utils/withApi';
 import Avatar from 'app/components/avatar';
 import DeviceName from 'app/components/deviceName';
 import ExternalLink from 'app/components/links/externalLink';
+import GlobalSelectionLink from 'app/components/globalSelectionLink';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Pagination from 'app/components/pagination';
@@ -44,7 +44,6 @@ class GroupTagValues extends React.Component {
 
   fetchData = async () => {
     const {params, query} = this.props;
-
     this.setState({
       loading: true,
       error: false,
@@ -117,7 +116,7 @@ class GroupTagValues extends React.Component {
             <span className="label">{pct}%</span>
           </td>
           <td>
-            <Link
+            <GlobalSelectionLink
               to={{
                 pathname: issuesPath,
                 query: {query},
@@ -133,7 +132,7 @@ class GroupTagValues extends React.Component {
               ) : (
                 <DeviceName>{tagValue.name}</DeviceName>
               )}
-            </Link>
+            </GlobalSelectionLink>
             {tagValue.email && (
               <ExternalLink href={`mailto:${tagValue.email}`} className="external-icon">
                 <em className="icon-envelope" />
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTags.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTags.jsx
index 15b0857b41..c324d75b91 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTags.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import {Link} from 'react-router';
 import {Box, Flex} from 'grid-emotion';
+import {isEqual} from 'lodash';
 
 import SentryTypes from 'app/sentryTypes';
 import Count from 'app/components/count';
@@ -14,12 +14,14 @@ import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import Alert from 'app/components/alert';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
+import GlobalSelectionLink from 'app/components/globalSelectionLink';
 
 class GroupTags extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     group: SentryTypes.Group.isRequired,
     api: PropTypes.object.isRequired,
+    environments: PropTypes.arrayOf(PropTypes.string).isRequired,
   };
 
   constructor() {
@@ -35,14 +37,20 @@ class GroupTags extends React.Component {
     this.fetchData();
   }
 
+  componentDidUpdate(prevProps) {
+    if (!isEqual(prevProps.environments, this.props.environments)) {
+      this.fetchData();
+    }
+  }
+
   fetchData = () => {
-    const {api, group} = this.props;
+    const {api, group, environments} = this.props;
     this.setState({
       loading: true,
       error: false,
     });
-
-    api.request('/issues/' + group.id + '/tags/', {
+    api.request(`/issues/${group.id}/tags/`, {
+      query: {environment: environments},
       success: data => {
         this.setState({
           tagList: data,
@@ -83,7 +91,7 @@ class GroupTags extends React.Component {
           const query = tagValue.query || `${tag.key}:"${tagValue.value}"`;
           return (
             <li key={tagValueIdx} data-test-id={tag.key}>
-              <Link
+              <GlobalSelectionLink
                 className="tag-bar"
                 to={{
                   pathname: `${baseUrl}${group.id}/events/`,
@@ -97,7 +105,7 @@ class GroupTags extends React.Component {
                 <span className="tag-bar-count">
                   <Count value={tagValue.count} />
                 </span>
-              </Link>
+              </GlobalSelectionLink>
             </li>
           );
         });
@@ -108,12 +116,12 @@ class GroupTags extends React.Component {
               <PanelHeader hasButtons style={{textTransform: 'none'}}>
                 <div style={{fontSize: 16}}>{tag.key}</div>
                 <Flex>
-                  <Link
+                  <GlobalSelectionLink
                     className="btn btn-default btn-sm"
                     to={`${baseUrl}${group.id}/tags/${tag.key}/`}
                   >
                     {t('More Details')}
-                  </Link>
+                  </GlobalSelectionLink>
                 </Flex>
               </PanelHeader>
               <PanelBody disablePadding={false}>
diff --git a/tests/js/spec/components/globalSelectionLink.spec.jsx b/tests/js/spec/components/globalSelectionLink.spec.jsx
index 687a6dad0c..7b4a81d80f 100644
--- a/tests/js/spec/components/globalSelectionLink.spec.jsx
+++ b/tests/js/spec/components/globalSelectionLink.spec.jsx
@@ -47,4 +47,52 @@ describe('GlobalSelectionLink', function() {
 
     expect(wrapper).toMatchSnapshot();
   });
+
+  it('combines query parameters with custom query', function() {
+    const query = {
+      project: ['foo', 'bar'],
+      environment: 'staging',
+    };
+    const customQuery = {query: 'something'};
+    const wrapper = shallow(
+      <GlobalSelectionLink to={{pathname: path, query: customQuery}}>
+        Go somewhere!
+      </GlobalSelectionLink>,
+      {
+        context: {
+          location: {
+            query,
+          },
+        },
+      }
+    );
+
+    const updatedToProp = wrapper.find('Link').prop('to');
+
+    expect(updatedToProp).toEqual({
+      pathname: path,
+      query: {project: ['foo', 'bar'], environment: 'staging', query: 'something'},
+    });
+  });
+
+  it('combines query parameters with no query', function() {
+    const query = {
+      project: ['foo', 'bar'],
+      environment: 'staging',
+    };
+    const wrapper = shallow(
+      <GlobalSelectionLink to={{pathname: path}}>Go somewhere!</GlobalSelectionLink>,
+      {
+        context: {
+          location: {
+            query,
+          },
+        },
+      }
+    );
+
+    const updatedToProp = wrapper.find('Link').prop('to');
+
+    expect(updatedToProp).toEqual({pathname: path, query});
+  });
 });
diff --git a/tests/js/spec/views/organizationGroupDetails/groupTags.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupTags.spec.jsx
index b111136701..5232948f5d 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupTags.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupTags.spec.jsx
@@ -7,9 +7,9 @@ import GroupTags from 'app/views/organizationGroupDetails/groupTags';
 describe('GroupTags', function() {
   const {routerContext, router} = initializeOrg();
   const group = TestStubs.Group();
-
+  let tagsMock;
   beforeEach(function() {
-    MockApiClient.addMockResponse({
+    tagsMock = MockApiClient.addMockResponse({
       url: '/issues/1/tags/',
       body: TestStubs.Tags(),
     });
@@ -20,11 +20,19 @@ describe('GroupTags', function() {
       <GroupTags
         group={group}
         query={{}}
+        environments={['dev']}
         params={{orgId: 'org-slug', groupId: group.id}}
       />,
       routerContext
     );
 
+    expect(tagsMock).toHaveBeenCalledWith(
+      '/issues/1/tags/',
+      expect.objectContaining({
+        query: {environment: ['dev']},
+      })
+    );
+
     wrapper
       .find('li[data-test-id="user"] Link')
       .first()
