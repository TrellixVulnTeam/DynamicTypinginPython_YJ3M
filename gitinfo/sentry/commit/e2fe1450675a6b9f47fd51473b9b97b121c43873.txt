commit e2fe1450675a6b9f47fd51473b9b97b121c43873
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon May 4 13:34:04 2020 -0700

    feat(ecosystem): adds doc integrations and sentry apps as global search results (#18578)

diff --git a/src/sentry/static/sentry/app/components/search/searchResult.jsx b/src/sentry/static/sentry/app/components/search/searchResult.jsx
index 6ea631c580..c59d6c2c8b 100644
--- a/src/sentry/static/sentry/app/components/search/searchResult.jsx
+++ b/src/sentry/static/sentry/app/components/search/searchResult.jsx
@@ -138,7 +138,7 @@ class SearchResult extends React.Component {
     }
 
     if (isIntegration) {
-      return <StyledPluginIcon pluginId={model.key || model.id} />;
+      return <StyledPluginIcon pluginId={model.slug} />;
     }
 
     return null;
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index 467b979bbd..dc2db3c1a6 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -11,6 +11,7 @@ import {singleLineRenderer as markedSingleLine} from 'app/utils/marked';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import withLatestContext from 'app/utils/withLatestContext';
+import {documentIntegrationList} from 'app/views/organizationIntegrations/constants';
 
 // event ids must have string length of 32
 const shouldSearchEventIds = query => typeof query === 'string' && query.length === 32;
@@ -90,7 +91,13 @@ async function createPluginResults(pluginsPromise, orgId) {
     })
     .map(plugin => ({
       title: plugin.isHidden ? `${plugin.name} (Legacy)` : plugin.name,
-      description: plugin.description,
+      description: (
+        <span
+          dangerouslySetInnerHTML={{
+            __html: markedSingleLine(plugin.description),
+          }}
+        />
+      ),
       model: plugin,
       sourceType: 'plugin',
       resultType: 'integration',
@@ -120,6 +127,42 @@ async function createIntegrationResults(integrationsPromise, orgId) {
   );
 }
 
+async function createSentryAppResults(sentryAppPromise, orgId) {
+  const sentryApps = (await sentryAppPromise) || [];
+  return sentryApps.map(sentryApp => ({
+    title: sentryApp.name,
+    description: (
+      <span
+        dangerouslySetInnerHTML={{
+          __html: markedSingleLine(sentryApp.overview || ''),
+        }}
+      />
+    ),
+    model: sentryApp,
+    sourceType: 'sentryApp',
+    resultType: 'integration',
+    to: `/settings/${orgId}/sentry-apps/${sentryApp.slug}/`,
+  }));
+}
+
+//Not really async but we need to return a promise
+async function creatDocIntegrationResults(orgId) {
+  return documentIntegrationList.map(integration => ({
+    title: integration.name,
+    description: (
+      <span
+        dangerouslySetInnerHTML={{
+          __html: markedSingleLine(integration.description),
+        }}
+      />
+    ),
+    model: integration,
+    sourceType: 'docIntegration',
+    resultType: 'integration',
+    to: `/settings/${orgId}/document-integrations/${integration.slug}/`,
+  }));
+}
+
 async function createShortIdLookupResult(shortIdLookupPromise) {
   const shortIdLookup = await shortIdLookupPromise;
   if (!shortIdLookup) {
@@ -232,6 +275,7 @@ class ApiSource extends React.Component {
         `/organizations/${orgId}/members/`,
         `/organizations/${orgId}/plugins/configs/`,
         `/organizations/${orgId}/config/integrations/`,
+        '/sentry-apps/?status=published',
       ];
 
       directUrls = [
@@ -307,6 +351,7 @@ class ApiSource extends React.Component {
       members,
       plugins,
       integrations,
+      sentryApps,
     ] = searchRequests;
     const [shortIdLookup, eventIdLookup] = directRequests;
 
@@ -318,6 +363,7 @@ class ApiSource extends React.Component {
         members,
         plugins,
         integrations,
+        sentryApps,
       ]),
       this.getDirectResults([shortIdLookup, eventIdLookup]),
     ]);
@@ -340,7 +386,15 @@ class ApiSource extends React.Component {
   async getSearchableResults(requests) {
     const {params, organization} = this.props;
     const orgId = (params && params.orgId) || (organization && organization.slug);
-    const [organizations, projects, teams, members, plugins, integrations] = requests;
+    const [
+      organizations,
+      projects,
+      teams,
+      members,
+      plugins,
+      integrations,
+      sentryApps,
+    ] = requests;
     const searchResults = flatten(
       await Promise.all([
         createOrganizationResults(organizations),
@@ -349,6 +403,8 @@ class ApiSource extends React.Component {
         createMemberResults(members, orgId),
         createIntegrationResults(integrations, orgId),
         createPluginResults(plugins, orgId),
+        createSentryAppResults(sentryApps, orgId),
+        creatDocIntegrationResults(orgId),
       ])
     );
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
index 4648a3dfac..763e8e8000 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
@@ -64,10 +64,8 @@ export const POPULARITY_WEIGHT: {
   rocketchat: 8,
 } as const;
 
-export const documentIntegrations: {
-  [key: string]: DocumentIntegration;
-} = {
-  fullstory: {
+export const documentIntegrationList: DocumentIntegration[] = [
+  {
     slug: 'fullstory',
     name: 'FullStory',
     author: 'Sentry',
@@ -93,7 +91,7 @@ export const documentIntegrations: {
       },
     ],
   },
-  datadog: {
+  {
     slug: 'datadog',
     name: 'Datadog',
     author: 'Datadog',
@@ -116,7 +114,7 @@ export const documentIntegrations: {
       {title: 'Documentation', url: 'https://docs.datadoghq.com/integrations/sentry/'},
     ],
   },
-  msteams: {
+  {
     slug: 'msteams',
     name: 'Microsoft Teams',
     author: 'Microsoft',
@@ -143,7 +141,7 @@ export const documentIntegrations: {
       },
     ],
   },
-  asayer: {
+  {
     slug: 'asayer',
     name: 'Asayer',
     author: 'Sentry',
@@ -161,7 +159,7 @@ export const documentIntegrations: {
       {title: 'Documentation', url: 'https://docs.asayer.io/integrations/sentry'},
     ],
   },
-  rocketchat: {
+  {
     slug: 'rocketchat',
     name: 'Rocket.Chat',
     author: 'Rocket.Chat',
@@ -186,4 +184,10 @@ export const documentIntegrations: {
       },
     ],
   },
-};
+];
+
+export const documentIntegrations: {
+  [key: string]: DocumentIntegration;
+} = Object.fromEntries(
+  documentIntegrationList.map(integration => [integration.slug, integration])
+);
diff --git a/tests/js/spec/components/modals/commandPaletteModal.spec.jsx b/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
index d2c6879943..eb5c2ac252 100644
--- a/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
+++ b/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
@@ -49,6 +49,10 @@ describe('Command Palette Modal', function() {
       url: '/organizations/org-slug/plugins/configs/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/sentry-apps/?status=published',
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: '/internal/health/',
       body: {
diff --git a/tests/js/spec/components/search/sources/apiSource.spec.jsx b/tests/js/spec/components/search/sources/apiSource.spec.jsx
index 1e22475722..80b1448348 100644
--- a/tests/js/spec/components/search/sources/apiSource.spec.jsx
+++ b/tests/js/spec/components/search/sources/apiSource.spec.jsx
@@ -65,6 +65,10 @@ describe('ApiSource', function() {
       url: '/organizations/org-slug/config/integrations/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/sentry-apps/?status=published',
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/shortids/foo-t/',
       body: [],
diff --git a/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx b/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
index 46f5731d73..8044dcea22 100644
--- a/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
+++ b/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
@@ -56,6 +56,10 @@ describe('SettingsSearch', function() {
       query: 'foo',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/sentry-apps/?status=published',
+      body: [],
+    });
   });
 
   it('renders', async function() {
