commit 45978dc1aec9f5c6bf2cde30e443521dd2f299f2
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jan 31 09:48:18 2018 -0800

    feat(ui): Change "Saved Searches" to use `Panel` (#6985)

diff --git a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
index 136bf67638..d525563ecb 100644
--- a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
@@ -1,145 +1,115 @@
+import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
+import styled from 'react-emotion';
 
 import {t} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
+import Button from '../components/buttons/button';
 import Confirm from '../components/confirm';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
-import OrganizationState from '../mixins/organizationState';
+import Panel from './settings/components/panel';
+import PanelBody from './settings/components/panelBody';
+import PanelHeader from './settings/components/panelHeader';
+import Row from './settings/components/row';
 import SettingsPageHeader from './settings/components/settingsPageHeader';
+import SentryTypes from '../proptypes';
 
-const SavedSearchRow = createReactClass({
-  displayName: 'SavedSearchRow',
+const InputColumn = props => <Flex flex="1" justify="center" {...props} />;
 
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+const SearchTitle = styled.div`
+  font-size: 18px;
+  margin-bottom: 5px;
+`;
+
+class SavedSearchRow extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-    access: PropTypes.object.isRequired,
+    canModify: PropTypes.bool.isRequired,
     onDefault: PropTypes.func.isRequired,
     onUserDefault: PropTypes.func.isRequired,
     onRemove: PropTypes.func.isRequired,
-  },
+  };
 
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-    };
-  },
+  handleRemove = () => {
+    let {data, onRemove} = this.props;
+    onRemove({data});
+  };
 
-  handleRemove() {
-    if (this.state.loading) return;
-
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/searches/${data.id}/`, {
-      method: 'DELETE',
-      success: (d, _, jqXHR) => {
-        this.props.onRemove();
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
+  handleDefault = () => {
+    let {data, onDefault} = this.props;
+    onDefault({
+      data,
+      isDefault: true,
     });
-  },
+  };
 
-  handleUpdate(params, cb) {
-    if (this.state.loading) return;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/searches/${data.id}/`, {
-      method: 'PUT',
-      data: params,
-      success: (d, _, jqXHR) => {
-        IndicatorStore.remove(loadingIndicator);
-        cb();
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
+  handleUserDefault = () => {
+    let {data, onUserDefault} = this.props;
+    onUserDefault({
+      data,
+      isUserDefault: true,
     });
-  },
-
-  handleDefault() {
-    this.handleUpdate(
-      {
-        isDefault: true,
-      },
-      this.props.onDefault
-    );
-  },
-
-  handleUserDefault() {
-    this.handleUpdate(
-      {
-        isUserDefault: true,
-      },
-      this.props.onUserDefault
-    );
-  },
+  };
 
   render() {
-    let data = this.props.data;
+    let {data, canModify} = this.props;
+
     return (
-      <tr>
-        <td>
-          <h5 style={{marginBottom: 5}}>{data.name}</h5>
+      <Row p={0} py={2} align="center">
+        <Flex flex="1" px={2} direction="column">
+          <SearchTitle>{data.name}</SearchTitle>
           <code>{data.query}</code>
-        </td>
-        <td style={{textAlign: 'center'}}>
-          <input
-            type="radio"
-            name="userDefault"
-            checked={data.isUserDefault}
-            onChange={this.handleUserDefault}
-          />
-        </td>
-        {this.props.access.has('project:write') && (
-          <td style={{textAlign: 'center'}}>
+        </Flex>
+        <Flex flex="1">
+          <InputColumn>
             <input
               type="radio"
-              name="default"
-              checked={data.isDefault}
-              onChange={this.handleDefault}
+              name="userDefault"
+              checked={data.isUserDefault}
+              onChange={this.handleUserDefault}
             />
-          </td>
-        )}
-        {this.props.access.has('project:write') && (
-          <td style={{textAlign: 'right'}}>
-            <Confirm
-              message={t('Are you sure you want to remove this?')}
-              onConfirm={this.handleRemove}
-              disabled={this.state.loading}
-            >
-              <a className="btn btn-sm btn-default">
-                <span className="icon icon-trash" /> &nbsp;{t('Remove')}
-              </a>
-            </Confirm>
-          </td>
-        )}
-      </tr>
+          </InputColumn>
+
+          {canModify && (
+            <InputColumn>
+              <input
+                type="radio"
+                name="default"
+                checked={data.isDefault}
+                onChange={this.handleDefault}
+              />
+            </InputColumn>
+          )}
+
+          {canModify && (
+            <InputColumn>
+              <Confirm
+                message={t('Are you sure you want to remove this?')}
+                onConfirm={this.handleRemove}
+              >
+                <Button size="small">
+                  <span className="icon icon-trash" />
+                </Button>
+              </Confirm>
+            </InputColumn>
+          )}
+        </Flex>
+      </Row>
     );
-  },
-});
+  }
+}
 
 const ProjectSavedSearches = createReactClass({
   displayName: 'ProjectSavedSearches',
-  mixins: [ApiMixin, OrganizationState],
+  contextTypes: {
+    organization: SentryTypes.Organization,
+  },
+
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -173,33 +143,68 @@ const ProjectSavedSearches = createReactClass({
     });
   },
 
-  handleRemovedSearch(data) {
-    let savedSearchList = this.state.savedSearchList;
-    this.setState({
-      savedSearchList: savedSearchList.filter(search => {
-        return search.id !== data.id;
-      }),
-    });
-  },
+  handleUpdate(params) {
+    let {orgId, projectId} = this.props.params;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {data, isDefault, isUserDefault} = params;
+    let key = typeof isDefault !== 'undefined' ? 'isDefault' : 'isUserDefault';
+    let {savedSearchList} = this.state;
+    let newSearchList = savedSearchList.map(search => ({
+      ...search,
+      [key]: data.id === search.id,
+    }));
 
-  handleDefaultSearch(data) {
-    let savedSearchList = this.state.savedSearchList;
-    savedSearchList.forEach(search => {
-      search.isDefault = data.id === search.id;
-    });
-    this.setState({
-      savedSearchList,
-    });
+    this.setState(
+      {
+        savedSearchList: newSearchList,
+      },
+      () => {
+        this.api.request(`/projects/${orgId}/${projectId}/searches/${data.id}/`, {
+          method: 'PUT',
+          data: {
+            isDefault,
+            isUserDefault,
+          },
+          error: () => {
+            this.setState({
+              savedSearchList,
+            });
+            IndicatorStore.addError(t('Error updating search'));
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          },
+        });
+      }
+    );
   },
 
-  handleUserDefaultSearch(data) {
-    let savedSearchList = this.state.savedSearchList;
-    savedSearchList.forEach(search => {
-      search.isUserDefault = data.id === search.id;
-    });
-    this.setState({
-      savedSearchList,
+  handleRemovedSearch(params) {
+    let {orgId, projectId} = this.props.params;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {data} = params;
+    let {savedSearchList} = this.state;
+    let newSearchList = savedSearchList.filter(search => {
+      return search.id !== data.id;
     });
+
+    this.setState(
+      {
+        savedSearchList: newSearchList,
+      },
+      () => {
+        this.api.request(`/projects/${orgId}/${projectId}/searches/${data.id}/`, {
+          method: 'DELETE',
+          error: () => {
+            this.setState({
+              savedSearchList,
+            });
+            IndicatorStore.addError(t('Error removing search'));
+          },
+          complete: () => IndicatorStore.remove(loadingIndicator),
+        });
+      }
+    );
   },
 
   renderBody() {
@@ -215,9 +220,9 @@ const ProjectSavedSearches = createReactClass({
 
   renderLoading() {
     return (
-      <div className="box">
+      <Panel>
         <LoadingIndicator />
-      </div>
+      </Panel>
     );
   },
 
@@ -232,38 +237,43 @@ const ProjectSavedSearches = createReactClass({
 
   renderResults() {
     let {orgId, projectId} = this.props.params;
-    let access = this.getAccess();
+    let {organization} = this.context;
+    let access = organization && new Set(organization.access);
+    let canModify = (organization && access.has('project:write')) || false;
+
     return (
-      <div className="panel panel-default horizontal-scroll">
-        <table className="table">
-          <thead>
-            <tr>
-              <th>{t('Search')}</th>
-              <th style={{textAlign: 'center', width: 140}}>My Default</th>
-              {access.has('project:write') && (
-                <th style={{textAlign: 'center', width: 140}}>Team Default</th>
-              )}
-              {access.has('project:write') && <th style={{width: 120}} />}
-            </tr>
-          </thead>
-          <tbody>
-            {this.state.savedSearchList.map(search => {
-              return (
-                <SavedSearchRow
-                  access={access}
-                  key={search.id}
-                  orgId={orgId}
-                  projectId={projectId}
-                  data={search}
-                  onUserDefault={this.handleUserDefaultSearch.bind(this, search)}
-                  onDefault={this.handleDefaultSearch.bind(this, search)}
-                  onRemove={this.handleRemovedSearch.bind(this, search)}
-                />
-              );
-            })}
-          </tbody>
-        </table>
-      </div>
+      <Panel>
+        <PanelHeader disablePadding>
+          <Flex>
+            <Flex flex="1" px={2}>
+              {t('Search')}
+            </Flex>
+            <Flex flex="1">
+              <InputColumn>{t('My Default')}</InputColumn>
+              {canModify && <InputColumn>{t('Team Default')}</InputColumn>}
+              {canModify && <InputColumn>{t('Remove')}</InputColumn>}
+            </Flex>
+          </Flex>
+        </PanelHeader>
+
+        <PanelBody>
+          {this.state.savedSearchList.map(search => {
+            return (
+              <SavedSearchRow
+                access={access}
+                key={search.id}
+                canModify={canModify}
+                orgId={orgId}
+                projectId={projectId}
+                data={search}
+                onUserDefault={this.handleUpdate}
+                onDefault={this.handleUpdate}
+                onRemove={this.handleRemovedSearch}
+              />
+            );
+          })}
+        </PanelBody>
+      </Panel>
     );
   },
 
@@ -279,3 +289,4 @@ const ProjectSavedSearches = createReactClass({
 });
 
 export default ProjectSavedSearches;
+export {SavedSearchRow};
diff --git a/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap
new file mode 100644
index 0000000000..0bb64fc8ea
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap
@@ -0,0 +1,924 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ProjectSavedSearches renders 1`] = `
+.glamor-4 {
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0;
+  margin: -20px 0 30px;
+}
+
+.glamor-2 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-0 {
+  font-size: 20px;
+  font-weight: bold;
+  margin: 20px 0;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-59 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: 30px;
+  position: relative;
+}
+
+.glamor-25 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  text-transform: uppercase;
+  font-size: 13px;
+  line-height: 1;
+  padding: 15px 0;
+}
+
+.glamor-21 {
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-19 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-16 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+}
+
+.glamor-6 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+}
+
+.glamor-14 {
+  box-sizing: border-box;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+}
+
+.glamor-8 {
+  box-sizing: border-box;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-box-pack: center;
+  -webkit-justify-content: center;
+  -ms-flex-pack: center;
+  justify-content: center;
+}
+
+.glamor-39 {
+  box-sizing: border-box;
+  padding: 0px;
+  padding-top: 16px;
+  padding-bottom: 16px;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border-bottom: 1px solid;
+}
+
+.glamor-39:last-child {
+  border: 0;
+}
+
+.glamor-29 {
+  box-sizing: border-box;
+  padding-left: 16px;
+  padding-right: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-flex-direction: column;
+  -ms-flex-direction: column;
+  flex-direction: column;
+}
+
+.glamor-27 {
+  font-size: 18px;
+  margin-bottom: 5px;
+}
+
+<ProjectSavedSearches
+  params={
+    Object {
+      "orgId": "org-slug",
+      "projectId": "project-slug",
+    }
+  }
+>
+  <div>
+    <SettingsPageHeading
+      title="Saved Searches"
+    >
+      <Styled(div)>
+        <div
+          className="glamor-4 glamor-5"
+        >
+          <Flex
+            align="center"
+          >
+            <Base
+              align="center"
+              className="glamor-2"
+            >
+              <div
+                className="glamor-2"
+                is={null}
+              >
+                <Styled(div)>
+                  <div
+                    className="glamor-0 glamor-1"
+                  >
+                    Saved Searches
+                  </div>
+                </Styled(div)>
+              </div>
+            </Base>
+          </Flex>
+        </div>
+      </Styled(div)>
+    </SettingsPageHeading>
+    <Styled(div)>
+      <div
+        className="glamor-59 glamor-60"
+      >
+        <PanelHeader
+          disablePadding={true}
+        >
+          <Styled(div)
+            disablePadding={true}
+          >
+            <div
+              className="glamor-25 glamor-26"
+            >
+              <Styled(Component)>
+                <Component
+                  className="glamor-21 glamor-18"
+                >
+                  <Styled(div)
+                    className="glamor-21 glamor-18"
+                  >
+                    <div
+                      className="glamor-18 glamor-19 glamor-20"
+                    >
+                      <Flex>
+                        <Base
+                          className="glamor-16"
+                        >
+                          <div
+                            className="glamor-16"
+                            is={null}
+                          >
+                            <Flex
+                              flex="1"
+                              px={2}
+                            >
+                              <Base
+                                className="glamor-6"
+                                flex="1"
+                                px={2}
+                              >
+                                <div
+                                  className="glamor-6"
+                                  is={null}
+                                >
+                                  Search
+                                </div>
+                              </Base>
+                            </Flex>
+                            <Flex
+                              flex="1"
+                            >
+                              <Base
+                                className="glamor-14"
+                                flex="1"
+                              >
+                                <div
+                                  className="glamor-14"
+                                  is={null}
+                                >
+                                  <InputColumn>
+                                    <Flex
+                                      flex="1"
+                                      justify="center"
+                                    >
+                                      <Base
+                                        className="glamor-8"
+                                        flex="1"
+                                        justify="center"
+                                      >
+                                        <div
+                                          className="glamor-8"
+                                          is={null}
+                                        >
+                                          My Default
+                                        </div>
+                                      </Base>
+                                    </Flex>
+                                  </InputColumn>
+                                  <InputColumn>
+                                    <Flex
+                                      flex="1"
+                                      justify="center"
+                                    >
+                                      <Base
+                                        className="glamor-8"
+                                        flex="1"
+                                        justify="center"
+                                      >
+                                        <div
+                                          className="glamor-8"
+                                          is={null}
+                                        >
+                                          Team Default
+                                        </div>
+                                      </Base>
+                                    </Flex>
+                                  </InputColumn>
+                                  <InputColumn>
+                                    <Flex
+                                      flex="1"
+                                      justify="center"
+                                    >
+                                      <Base
+                                        className="glamor-8"
+                                        flex="1"
+                                        justify="center"
+                                      >
+                                        <div
+                                          className="glamor-8"
+                                          is={null}
+                                        >
+                                          Remove
+                                        </div>
+                                      </Base>
+                                    </Flex>
+                                  </InputColumn>
+                                </div>
+                              </Base>
+                            </Flex>
+                          </div>
+                        </Base>
+                      </Flex>
+                    </div>
+                  </Styled(div)>
+                </Component>
+              </Styled(Component)>
+            </div>
+          </Styled(div)>
+        </PanelHeader>
+        <PanelBody
+          direction="column"
+          disablePadding={true}
+          flex={false}
+        >
+          <div
+            className=""
+          >
+            <SavedSearchRow
+              access={
+                Set {
+                  "org:read",
+                  "org:write",
+                  "org:admin",
+                  "project:read",
+                  "project:write",
+                  "project:admin",
+                  "team:read",
+                  "team:write",
+                  "team:admin",
+                }
+              }
+              canModify={true}
+              data={
+                Object {
+                  "dateCreated": "2017-11-14T02:22:58.026Z",
+                  "id": "2",
+                  "isDefault": true,
+                  "isPrivate": false,
+                  "isUserDefault": false,
+                  "name": "Needs Triage",
+                  "query": "is:unresolved is:unassigned",
+                }
+              }
+              key="2"
+              onDefault={[Function]}
+              onRemove={[Function]}
+              onUserDefault={[Function]}
+              orgId="org-slug"
+              projectId="project-slug"
+            >
+              <Row
+                align="center"
+                p={0}
+                py={2}
+              >
+                <Styled(Base)
+                  align="center"
+                  p={0}
+                  py={2}
+                >
+                  <Base
+                    align="center"
+                    className="glamor-39 glamor-40"
+                    p={0}
+                    py={2}
+                  >
+                    <div
+                      className="glamor-39 glamor-40"
+                      is={null}
+                    >
+                      <Flex
+                        direction="column"
+                        flex="1"
+                        px={2}
+                      >
+                        <Base
+                          className="glamor-29"
+                          direction="column"
+                          flex="1"
+                          px={2}
+                        >
+                          <div
+                            className="glamor-29"
+                            is={null}
+                          >
+                            <Styled(div)>
+                              <div
+                                className="glamor-27 glamor-28"
+                              >
+                                Needs Triage
+                              </div>
+                            </Styled(div)>
+                            <code>
+                              is:unresolved is:unassigned
+                            </code>
+                          </div>
+                        </Base>
+                      </Flex>
+                      <Flex
+                        flex="1"
+                      >
+                        <Base
+                          className="glamor-14"
+                          flex="1"
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <InputColumn>
+                              <Flex
+                                flex="1"
+                                justify="center"
+                              >
+                                <Base
+                                  className="glamor-8"
+                                  flex="1"
+                                  justify="center"
+                                >
+                                  <div
+                                    className="glamor-8"
+                                    is={null}
+                                  >
+                                    <input
+                                      checked={false}
+                                      name="userDefault"
+                                      onChange={[Function]}
+                                      type="radio"
+                                    />
+                                  </div>
+                                </Base>
+                              </Flex>
+                            </InputColumn>
+                            <InputColumn>
+                              <Flex
+                                flex="1"
+                                justify="center"
+                              >
+                                <Base
+                                  className="glamor-8"
+                                  flex="1"
+                                  justify="center"
+                                >
+                                  <div
+                                    className="glamor-8"
+                                    is={null}
+                                  >
+                                    <input
+                                      checked={true}
+                                      name="default"
+                                      onChange={[Function]}
+                                      type="radio"
+                                    />
+                                  </div>
+                                </Base>
+                              </Flex>
+                            </InputColumn>
+                            <InputColumn>
+                              <Flex
+                                flex="1"
+                                justify="center"
+                              >
+                                <Base
+                                  className="glamor-8"
+                                  flex="1"
+                                  justify="center"
+                                >
+                                  <div
+                                    className="glamor-8"
+                                    is={null}
+                                  >
+                                    <Confirm
+                                      cancelText="Cancel"
+                                      confirmText="Confirm"
+                                      message="Are you sure you want to remove this?"
+                                      onConfirm={[Function]}
+                                      priority="primary"
+                                    >
+                                      <Button
+                                        disabled={false}
+                                        onClick={[Function]}
+                                        size="small"
+                                      >
+                                        <button
+                                          className="button button-default button-sm"
+                                          disabled={false}
+                                          onClick={[Function]}
+                                          role="button"
+                                        >
+                                          <FlowLayout
+                                            truncate={false}
+                                          >
+                                            <div
+                                              className="flow-layout"
+                                            >
+                                              <span
+                                                className="button-label"
+                                              >
+                                                <span
+                                                  className="icon icon-trash"
+                                                />
+                                              </span>
+                                            </div>
+                                          </FlowLayout>
+                                        </button>
+                                      </Button>
+                                      <Modal
+                                        animation={false}
+                                        autoFocus={true}
+                                        backdrop={true}
+                                        bsClass="modal"
+                                        dialogComponentClass={[Function]}
+                                        enforceFocus={true}
+                                        keyboard={true}
+                                        manager={
+                                          ModalManager {
+                                            "add": [Function],
+                                            "containers": Array [],
+                                            "data": Array [],
+                                            "handleContainerOverflow": true,
+                                            "hideSiblingNodes": true,
+                                            "isTopModal": [Function],
+                                            "modals": Array [],
+                                            "remove": [Function],
+                                          }
+                                        }
+                                        onHide={[Function]}
+                                        renderBackdrop={[Function]}
+                                        restoreFocus={true}
+                                        show={false}
+                                      >
+                                        <Modal
+                                          autoFocus={true}
+                                          backdrop={true}
+                                          backdropClassName="modal-backdrop"
+                                          containerClassName="modal-open"
+                                          enforceFocus={true}
+                                          keyboard={true}
+                                          manager={
+                                            ModalManager {
+                                              "add": [Function],
+                                              "containers": Array [],
+                                              "data": Array [],
+                                              "handleContainerOverflow": true,
+                                              "hideSiblingNodes": true,
+                                              "isTopModal": [Function],
+                                              "modals": Array [],
+                                              "remove": [Function],
+                                            }
+                                          }
+                                          onEntering={[Function]}
+                                          onExited={[Function]}
+                                          onHide={[Function]}
+                                          renderBackdrop={[Function]}
+                                          restoreFocus={true}
+                                          show={false}
+                                        />
+                                      </Modal>
+                                    </Confirm>
+                                  </div>
+                                </Base>
+                              </Flex>
+                            </InputColumn>
+                          </div>
+                        </Base>
+                      </Flex>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </Row>
+            </SavedSearchRow>
+            <SavedSearchRow
+              access={
+                Set {
+                  "org:read",
+                  "org:write",
+                  "org:admin",
+                  "project:read",
+                  "project:write",
+                  "project:admin",
+                  "team:read",
+                  "team:write",
+                  "team:admin",
+                }
+              }
+              canModify={true}
+              data={
+                Object {
+                  "dateCreated": "2017-11-14T02:22:58.022Z",
+                  "id": "1",
+                  "isDefault": false,
+                  "isPrivate": false,
+                  "isUserDefault": true,
+                  "name": "Unresolved Issues",
+                  "query": "is:unresolved",
+                }
+              }
+              key="1"
+              onDefault={[Function]}
+              onRemove={[Function]}
+              onUserDefault={[Function]}
+              orgId="org-slug"
+              projectId="project-slug"
+            >
+              <Row
+                align="center"
+                p={0}
+                py={2}
+              >
+                <Styled(Base)
+                  align="center"
+                  p={0}
+                  py={2}
+                >
+                  <Base
+                    align="center"
+                    className="glamor-39 glamor-40"
+                    p={0}
+                    py={2}
+                  >
+                    <div
+                      className="glamor-39 glamor-40"
+                      is={null}
+                    >
+                      <Flex
+                        direction="column"
+                        flex="1"
+                        px={2}
+                      >
+                        <Base
+                          className="glamor-29"
+                          direction="column"
+                          flex="1"
+                          px={2}
+                        >
+                          <div
+                            className="glamor-29"
+                            is={null}
+                          >
+                            <Styled(div)>
+                              <div
+                                className="glamor-27 glamor-28"
+                              >
+                                Unresolved Issues
+                              </div>
+                            </Styled(div)>
+                            <code>
+                              is:unresolved
+                            </code>
+                          </div>
+                        </Base>
+                      </Flex>
+                      <Flex
+                        flex="1"
+                      >
+                        <Base
+                          className="glamor-14"
+                          flex="1"
+                        >
+                          <div
+                            className="glamor-14"
+                            is={null}
+                          >
+                            <InputColumn>
+                              <Flex
+                                flex="1"
+                                justify="center"
+                              >
+                                <Base
+                                  className="glamor-8"
+                                  flex="1"
+                                  justify="center"
+                                >
+                                  <div
+                                    className="glamor-8"
+                                    is={null}
+                                  >
+                                    <input
+                                      checked={true}
+                                      name="userDefault"
+                                      onChange={[Function]}
+                                      type="radio"
+                                    />
+                                  </div>
+                                </Base>
+                              </Flex>
+                            </InputColumn>
+                            <InputColumn>
+                              <Flex
+                                flex="1"
+                                justify="center"
+                              >
+                                <Base
+                                  className="glamor-8"
+                                  flex="1"
+                                  justify="center"
+                                >
+                                  <div
+                                    className="glamor-8"
+                                    is={null}
+                                  >
+                                    <input
+                                      checked={false}
+                                      name="default"
+                                      onChange={[Function]}
+                                      type="radio"
+                                    />
+                                  </div>
+                                </Base>
+                              </Flex>
+                            </InputColumn>
+                            <InputColumn>
+                              <Flex
+                                flex="1"
+                                justify="center"
+                              >
+                                <Base
+                                  className="glamor-8"
+                                  flex="1"
+                                  justify="center"
+                                >
+                                  <div
+                                    className="glamor-8"
+                                    is={null}
+                                  >
+                                    <Confirm
+                                      cancelText="Cancel"
+                                      confirmText="Confirm"
+                                      message="Are you sure you want to remove this?"
+                                      onConfirm={[Function]}
+                                      priority="primary"
+                                    >
+                                      <Button
+                                        disabled={false}
+                                        onClick={[Function]}
+                                        size="small"
+                                      >
+                                        <button
+                                          className="button button-default button-sm"
+                                          disabled={false}
+                                          onClick={[Function]}
+                                          role="button"
+                                        >
+                                          <FlowLayout
+                                            truncate={false}
+                                          >
+                                            <div
+                                              className="flow-layout"
+                                            >
+                                              <span
+                                                className="button-label"
+                                              >
+                                                <span
+                                                  className="icon icon-trash"
+                                                />
+                                              </span>
+                                            </div>
+                                          </FlowLayout>
+                                        </button>
+                                      </Button>
+                                      <Modal
+                                        animation={false}
+                                        autoFocus={true}
+                                        backdrop={true}
+                                        bsClass="modal"
+                                        dialogComponentClass={[Function]}
+                                        enforceFocus={true}
+                                        keyboard={true}
+                                        manager={
+                                          ModalManager {
+                                            "add": [Function],
+                                            "containers": Array [],
+                                            "data": Array [],
+                                            "handleContainerOverflow": true,
+                                            "hideSiblingNodes": true,
+                                            "isTopModal": [Function],
+                                            "modals": Array [],
+                                            "remove": [Function],
+                                          }
+                                        }
+                                        onHide={[Function]}
+                                        renderBackdrop={[Function]}
+                                        restoreFocus={true}
+                                        show={false}
+                                      >
+                                        <Modal
+                                          autoFocus={true}
+                                          backdrop={true}
+                                          backdropClassName="modal-backdrop"
+                                          containerClassName="modal-open"
+                                          enforceFocus={true}
+                                          keyboard={true}
+                                          manager={
+                                            ModalManager {
+                                              "add": [Function],
+                                              "containers": Array [],
+                                              "data": Array [],
+                                              "handleContainerOverflow": true,
+                                              "hideSiblingNodes": true,
+                                              "isTopModal": [Function],
+                                              "modals": Array [],
+                                              "remove": [Function],
+                                            }
+                                          }
+                                          onEntering={[Function]}
+                                          onExited={[Function]}
+                                          onHide={[Function]}
+                                          renderBackdrop={[Function]}
+                                          restoreFocus={true}
+                                          show={false}
+                                        />
+                                      </Modal>
+                                    </Confirm>
+                                  </div>
+                                </Base>
+                              </Flex>
+                            </InputColumn>
+                          </div>
+                        </Base>
+                      </Flex>
+                    </div>
+                  </Base>
+                </Styled(Base)>
+              </Row>
+            </SavedSearchRow>
+          </div>
+        </PanelBody>
+      </div>
+    </Styled(div)>
+  </div>
+</ProjectSavedSearches>
+`;
+
+exports[`ProjectSavedSearches renders empty 1`] = `
+.glamor-4 {
+  font-size: 14px;
+  box-shadow: inset 0 -1px 0;
+  margin: -20px 0 30px;
+}
+
+.glamor-2 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+}
+
+.glamor-0 {
+  font-size: 20px;
+  font-weight: bold;
+  margin: 20px 0;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+<ProjectSavedSearches
+  params={
+    Object {
+      "orgId": "org-slug",
+      "projectId": "project-slug",
+    }
+  }
+>
+  <div>
+    <SettingsPageHeading
+      title="Saved Searches"
+    >
+      <Styled(div)>
+        <div
+          className="glamor-4 glamor-5"
+        >
+          <Flex
+            align="center"
+          >
+            <Base
+              align="center"
+              className="glamor-2"
+            >
+              <div
+                className="glamor-2"
+                is={null}
+              >
+                <Styled(div)>
+                  <div
+                    className="glamor-0 glamor-1"
+                  >
+                    Saved Searches
+                  </div>
+                </Styled(div)>
+              </div>
+            </Base>
+          </Flex>
+        </div>
+      </Styled(div)>
+    </SettingsPageHeading>
+    <div
+      className="box empty-stream"
+    >
+      <span
+        className="icon icon-exclamation"
+      />
+      <p>
+        There are no saved searches for this project.
+      </p>
+    </div>
+  </div>
+</ProjectSavedSearches>
+`;
diff --git a/tests/js/spec/views/projectSavedSearches.spec.jsx b/tests/js/spec/views/projectSavedSearches.spec.jsx
new file mode 100644
index 0000000000..c5c411109c
--- /dev/null
+++ b/tests/js/spec/views/projectSavedSearches.spec.jsx
@@ -0,0 +1,235 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {mount} from 'enzyme';
+
+import ProjectSavedSearches from 'app/views/projectSavedSearches';
+
+describe('ProjectSavedSearches', function() {
+  let wrapper;
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  beforeEach(function() {
+    MockApiClient.mockAsync = false;
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/searches/`,
+      method: 'GET',
+      body: TestStubs.Searches(),
+    });
+
+    wrapper = mount(
+      <ProjectSavedSearches params={{orgId: org.slug, projectId: project.slug}} />,
+      {
+        context: {
+          organization: org,
+          location: TestStubs.location(),
+          router: TestStubs.router(),
+        },
+        childContextTypes: {
+          organization: PropTypes.object,
+          location: PropTypes.object,
+          router: PropTypes.object,
+        },
+      }
+    );
+  });
+
+  it('renders empty', function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/searches/`,
+      method: 'GET',
+      body: [],
+    });
+
+    wrapper = mount(
+      <ProjectSavedSearches params={{orgId: org.slug, projectId: project.slug}} />,
+      {
+        context: {
+          organization: org,
+          location: TestStubs.location(),
+          router: TestStubs.router(),
+        },
+        childContextTypes: {
+          organization: PropTypes.object,
+          location: PropTypes.object,
+          router: PropTypes.object,
+        },
+      }
+    );
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders', function() {
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('removes a search query', function() {
+    let removed = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/searches/2/`,
+      method: 'DELETE',
+    });
+
+    expect(removed).not.toHaveBeenCalled();
+
+    wrapper
+      .find('Button')
+      .first()
+      .simulate('click');
+
+    $(document.body)
+      .find('.modal button:contains("Confirm")')
+      .click();
+
+    expect(removed).toHaveBeenCalled();
+  });
+
+  it('rolls back update default on error', function() {
+    let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
+    let remove = MockApiClient.addMockResponse({
+      url,
+      method: 'DELETE',
+      statusCode: 400,
+    });
+
+    MockApiClient.mockAsync = true;
+
+    // Initially has two rows
+    expect(wrapper.find('SavedSearchRow')).toHaveLength(2);
+
+    expect(remove).not.toHaveBeenCalled();
+
+    // Remove first row
+    wrapper
+      .find('Button')
+      .first()
+      .simulate('click');
+
+    $(document.body)
+      .find('.modal button:contains("Confirm")')
+      .click();
+
+    wrapper.update();
+
+    // Should update have 1 row remaining
+    expect(wrapper.find('SavedSearchRow')).toHaveLength(1);
+
+    // calls API, API returns an error
+
+    setTimeout(() => {
+      wrapper.update();
+
+      // Reverts back to initial state
+      expect(wrapper.find('SavedSearchRow')).toHaveLength(2);
+    }, 1);
+
+    MockApiClient.mockAsync = false;
+  });
+
+  it('updates a search query to default', function() {
+    let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
+    let update = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+    });
+
+    expect(update).not.toHaveBeenCalled();
+
+    wrapper
+      .find('input[type="radio"]')
+      .first()
+      .simulate('change');
+
+    expect(update).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          isUserDefault: true,
+        },
+      })
+    );
+
+    expect(
+      wrapper
+        .find('input[type="radio"]')
+        .first()
+        .prop('checked')
+    ).toBe(true);
+
+    // Update Team default
+    wrapper
+      .find('input[type="radio"]')
+      .at(1)
+      .simulate('change');
+
+    expect(update).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          isDefault: true,
+        },
+      })
+    );
+
+    expect(
+      wrapper
+        .find('input[type="radio"]')
+        .at(1)
+        .prop('checked')
+    ).toBe(true);
+  });
+
+  it('rolls back update default on error', function() {
+    let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
+    let update = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+      statusCode: 400,
+    });
+
+    MockApiClient.mockAsync = true;
+
+    // User default initial value is false
+    expect(
+      wrapper
+        .find('input[type="radio"]')
+        .first()
+        .prop('checked')
+    ).toBe(false);
+
+    expect(update).not.toHaveBeenCalled();
+
+    // Select as user default
+    wrapper
+      .find('input[type="radio"]')
+      .first()
+      .simulate('change');
+
+    // Should update and be checked
+    expect(
+      wrapper
+        .find('input[type="radio"]')
+        .first()
+        .prop('checked')
+    ).toBe(true);
+
+    // calls API, API returns an error
+
+    setTimeout(() => {
+      wrapper.update();
+
+      // Reverts back to initial state
+      expect(
+        wrapper
+          .find('input[type="radio"]')
+          .first()
+          .prop('checked')
+      ).toBe(false);
+    }, 1);
+
+    MockApiClient.mockAsync = false;
+  });
+});
