commit bafeb33ac981676e678dbd7d6e61cfc4b5847674
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Sep 10 18:16:40 2019 -0700

    feat(api): Change alert rule deletion to be at the org level
    
    Updates deleting an alert rule to be at the org level. This mostly involves removing related
    subscriptions from the alert rule. Added `bulk_delete_snuba_subscriptions` so that we can handle
    bulk removing them efficiently. Will add actual batching behaviour in a later pr.

diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 6188aad414..463085a435 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -33,7 +33,7 @@ from sentry.models import Commit, Release
 from sentry.incidents import tasks
 from sentry.snuba.subscriptions import (
     bulk_create_snuba_subscriptions,
-    delete_snuba_subscription,
+    bulk_delete_snuba_subscriptions,
     update_snuba_subscription,
 )
 from sentry.utils.committers import get_event_file_committers
@@ -716,21 +716,16 @@ def delete_alert_rule(alert_rule):
         AlertRuleStatus.DELETION_IN_PROGRESS.value,
     ):
         raise AlreadyDeletedError()
-    # TODO: We're assuming only one subscription for the moment
-    subscription = (
-        AlertRuleQuerySubscription.objects.select_related("query_subscription")
-        .get(alert_rule=alert_rule)
-        .query_subscription
-    )
 
-    alert_rule.update(
-        # Randomize the name here so that we don't get unique constraint issues
-        # while waiting for the deletion to process
-        name=uuid4().get_hex(),
-        status=AlertRuleStatus.PENDING_DELETION.value,
-    )
+    with transaction.atomic():
+        alert_rule.update(
+            # Randomize the name here so that we don't get unique constraint issues
+            # while waiting for the deletion to process
+            name=uuid4().get_hex(),
+            status=AlertRuleStatus.PENDING_DELETION.value,
+        )
+        bulk_delete_snuba_subscriptions(list(alert_rule.query_subscriptions.all()))
     tasks.delete_alert_rule.apply_async(kwargs={"alert_rule_id": alert_rule.id})
-    delete_snuba_subscription(subscription)
 
 
 def validate_alert_rule_query(query):
diff --git a/src/sentry/snuba/subscriptions.py b/src/sentry/snuba/subscriptions.py
index 869157f4d1..fc54ef2326 100644
--- a/src/sentry/snuba/subscriptions.py
+++ b/src/sentry/snuba/subscriptions.py
@@ -111,10 +111,21 @@ def update_snuba_subscription(subscription, query, aggregation, time_window, res
     return subscription
 
 
+def bulk_delete_snuba_subscriptions(subscriptions):
+    """
+    Deletes a list of snuba query subscriptions.
+    :param subscriptions: The subscriptions to delete
+    :return:
+    """
+    for subscription in subscriptions:
+        # TODO: Batch this up properly once we move to tasks.
+        delete_snuba_subscription(subscription)
+
+
 def delete_snuba_subscription(subscription):
     """
     Deletes a subscription to a snuba query.
-    :param subscription_id: The uuid of the subscription to delete
+    :param subscription: The subscription to delete
     :return:
     """
     with transaction.atomic():
diff --git a/tests/sentry/snuba/test_subscriptions.py b/tests/sentry/snuba/test_subscriptions.py
index b11e322ac6..74d414d660 100644
--- a/tests/sentry/snuba/test_subscriptions.py
+++ b/tests/sentry/snuba/test_subscriptions.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from sentry.snuba.models import QueryAggregations, QueryDatasets, QuerySubscription
 from sentry.snuba.subscriptions import (
+    bulk_delete_snuba_subscriptions,
     create_snuba_subscription,
     delete_snuba_subscription,
     update_snuba_subscription,
@@ -55,6 +56,31 @@ class UpdateSnubaSubscriptionTest(TestCase):
         assert subscription.resolution == resolution
 
 
+class BulkDeleteSnubaSubscriptionTest(TestCase):
+    def test(self):
+        subscription = create_snuba_subscription(
+            self.project,
+            "something",
+            QueryDatasets.EVENTS,
+            "level:error",
+            QueryAggregations.TOTAL,
+            10,
+            1,
+        )
+        other_subscription = create_snuba_subscription(
+            self.create_project(organization=self.organization),
+            "something",
+            QueryDatasets.EVENTS,
+            "level:error",
+            QueryAggregations.TOTAL,
+            10,
+            1,
+        )
+        subscription_ids = [subscription.id, other_subscription.id]
+        bulk_delete_snuba_subscriptions([subscription, other_subscription])
+        assert not QuerySubscription.objects.filter(id__in=subscription_ids).exists()
+
+
 class DeleteSnubaSubscriptionTest(TestCase):
     def test(self):
         subscription = create_snuba_subscription(
