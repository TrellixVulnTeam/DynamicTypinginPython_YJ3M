commit a2f8687374213886ffc5dcb687b320b87a53270c
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 18 12:30:24 2014 -0800

    Standardize entries

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 73f358a5e8..b91b7edd28 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -6,27 +6,11 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import Event
-from sentry.web.helpers import group_is_public
 
 
 class EventDetailsEndpoint(Endpoint):
     doc_section = DocSection.EVENTS
 
-    def _get_entries(self, request, event):
-        # XXX(dcramer): These are called entries for future-proofing
-        is_public = group_is_public(event.group, request.user)
-
-        interface_list = []
-        for interface in event.interfaces.itervalues():
-            entry = {
-                'data': interface.to_json(),
-                'type': interface.get_alias(),
-            }
-            interface_list.append((interface, entry))
-        interface_list.sort(key=lambda x: x[0].get_display_score(), reverse=True)
-
-        return [i[1] for i in interface_list]
-
     def get(self, request, event_id):
         """
         Retrieve an event
@@ -68,6 +52,4 @@ class EventDetailsEndpoint(Endpoint):
         else:
             data['previousEventID'] = None
 
-        data['entries'] = self._get_entries(request, event)
-
         return Response(data)
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index df11ad1ed6..da23da68bf 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -28,14 +28,10 @@ class GroupEventsEndpoint(Endpoint):
             group=group
         )
 
-        def on_results(event_list):
-            Event.objects.bind_nodes(event_list, 'data')
-            return serialize(event_list, request.user)
-
         return self.paginate(
             request=request,
             queryset=events,
             # TODO(dcramer): we want to sort by datetime
             order_by='-id',
-            on_results=on_results,
+            on_results=lambda x: serialize(x, request.user),
         )
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 4a26a5cdaa..60491451c0 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -6,6 +6,29 @@ from sentry.models import Event
 
 @register(Event)
 class EventSerializer(Serializer):
+    def _get_entries(self, event, user):
+        # XXX(dcramer): These are called entries for future-proofing
+        interface_list = []
+        for interface in event.interfaces.itervalues():
+            entry = {
+                'data': interface.to_json(),
+                'type': interface.get_alias(),
+            }
+            interface_list.append((interface, entry))
+        interface_list.sort(key=lambda x: x[0].get_display_score(), reverse=True)
+
+        return [i[1] for i in interface_list]
+
+    def get_attrs(self, item_list, user):
+        Event.objects.bind_nodes(item_list, 'data')
+
+        results = {}
+        for item in item_list:
+            results[item] = {
+                'entries': self._get_entries(item, user)
+            }
+        return results
+
     def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
@@ -15,7 +38,7 @@ class EventSerializer(Serializer):
                 'name': obj.project.name,
                 'slug': obj.project.slug,
             },
-            'data': dict(obj.data),
+            'entries': attrs['entries'],
             'message': obj.message,
             'checksum': obj.checksum,
             'platform': obj.platform,
