commit eb58ad737c953c800bd5ef70996ddcaa30fd6831
Author: Kamil Og√≥rek <kamil.ogorek@gmail.com>
Date:   Thu Mar 8 12:44:18 2018 +0100

    fix(filters): Filter legacy IE Mobile browsers same way as IE Desktop

diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index 2bf67f294f..498d08fdb0 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -182,6 +182,10 @@ class LegacyBrowsersFilter(Filter):
         if not browser['family']:
             return False
 
+        # IE Desktop and IE Mobile use the same engines, therefore we can treat them as one
+        if browser['family'] == "IE Mobile":
+            browser['family'] = "IE"
+
         # handle old style config
         if opts == '1':
             return self.filter_default(browser)
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 223589a6f0..6fabd54263 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -19,8 +19,12 @@ USER_AGENTS = {
     'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC; Tablet PC 2.0)',
     'ie_9':
     'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))',
+    'iemobile_9':
+    'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; NOKIA; Lumia 710)',
     'ie_10':
     'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)',
+    'iemobile_10':
+    'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)',
     'opera_11':
     'Opera/9.80 (Windows NT 5.1; U; it) Presto/2.7.62 Version/11.00',
     'opera_12':
@@ -207,9 +211,7 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data(
-            'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19'
-        )
+        data = self.get_mock_data(USER_AGENTS['android_4'])
         assert self.apply_filter(data) is False
 
     def test_filters_ie_9_by_default(self):
@@ -218,7 +220,16 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data('Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))')
+        data = self.get_mock_data(USER_AGENTS['ie_9'])
+        assert self.apply_filter(data) is True
+
+    def test_filters_iemobile_9_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
+        data = self.get_mock_data(USER_AGENTS['iemobile_9'])
         assert self.apply_filter(data) is True
 
     def test_does_not_filter_ie_10_by_default(self):
@@ -230,15 +241,22 @@ class LegacyBrowsersFilterTest(TestCase):
         data = self.get_mock_data(USER_AGENTS['ie_10'])
         assert self.apply_filter(data) is False
 
-    def test_filters_opera_12_by_default(self):
+    def test_does_not_filter_iemobile_10_by_default(self):
         ProjectOption.objects.set_value(
             project=self.project,
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data(
-            'Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16'
+        data = self.get_mock_data(USER_AGENTS['iemobile_10'])
+        assert self.apply_filter(data) is False
+
+    def test_filters_opera_12_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
         )
+        data = self.get_mock_data(USER_AGENTS['opera_12'])
         assert self.apply_filter(data) is True
 
     def test_does_not_filter_chrome_by_default(self):
@@ -247,9 +265,7 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data(
-            'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'
-        )
+        data = self.get_mock_data(USER_AGENTS['chrome'])
         assert self.apply_filter(data) is False
 
     def test_does_not_filter_edge_by_default(self):
@@ -258,9 +274,7 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data(
-            'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136'
-        )
+        data = self.get_mock_data(USER_AGENTS['edge'])
         assert self.apply_filter(data) is False
 
     def test_filter_opera(self):
@@ -305,6 +319,13 @@ class LegacyBrowsersFilterTest(TestCase):
         data = self.get_mock_data(USER_AGENTS['ie_9'])
         assert self.apply_filter(data) is True
 
+    def test_does_filter_iemobile_9(self):
+        ProjectOption.objects.set_value(
+            project=self.project, key='filters:legacy-browsers', value={'ie9'}
+        )
+        data = self.get_mock_data(USER_AGENTS['iemobile_9'])
+        assert self.apply_filter(data) is True
+
     def test_does_filter_ie10(self):
         ProjectOption.objects.set_value(
             project=self.project, key='filters:legacy-browsers', value={'ie10'}
@@ -319,6 +340,20 @@ class LegacyBrowsersFilterTest(TestCase):
         browser = ua['user_agent']
         assert self.filter_cls(self.project).filter_ie_pre_9(browser) is False
 
+    def test_does_filter_iemobile_10(self):
+        ProjectOption.objects.set_value(
+            project=self.project, key='filters:legacy-browsers', value={'ie10'}
+        )
+        data = self.get_mock_data(USER_AGENTS['iemobile_10'])
+        assert self.apply_filter(data) is True
+
+    def test_does_not_filter_iemobile_10(self):
+        data = self.get_mock_data(USER_AGENTS['iemobile_10'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_ie_pre_9(browser) is False
+
     def test_filters_safari(self):
         ProjectOption.objects.set_value(
             project=self.project, key='filters:legacy-browsers', value={'safari_pre_6'}
