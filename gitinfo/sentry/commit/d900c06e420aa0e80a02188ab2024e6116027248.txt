commit d900c06e420aa0e80a02188ab2024e6116027248
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 31 00:30:12 2016 +0200

    Add two paths for system symbol handling

diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 4001953f5c..f7d3e56a67 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -26,6 +26,7 @@ def find_system_symbol(img, instruction_addr, system_info=None):
     return DSymSymbol.objects.lookup_symbol(
         instruction_addr=instruction_addr,
         image_addr=img['image_addr'],
+        image_vmaddr=img['image_vmaddr'],
         uuid=img['uuid'],
         cpu_name=get_cpu_name(img['cpu_type'],
                               img['cpu_subtype']),
@@ -104,7 +105,7 @@ class Symbolizer(object):
                 symbol = demangle_symbol(symbol) or symbol
                 rv = dict(frame, symbol_name=symbol, filename=None,
                           line=0, column=0, uuid=img['uuid'],
-                          object_name=img['object_name'])
+                          object_name=img['name'])
                 return self._process_frame(rv, img)
 
         if report_error is not None and error is not None:
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index c77da2b392..a49635f69d 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -197,14 +197,18 @@ class DSymSymbolManager(BaseManager):
         cur.close()
 
     def lookup_symbol(self, instruction_addr, image_addr, uuid,
-                      cpu_name=None, object_path=None, system_info=None):
+                      cpu_name=None, object_path=None, system_info=None,
+                      image_vmaddr=None):
         """Finds a system symbol."""
-        addr = instruction_addr - image_addr
+        addr_abs = None
+        if image_vmaddr is not None:
+            addr_abs = image_vmaddr + instruction_addr - image_addr
+        addr_rel = instruction_addr - image_addr
 
         uuid = str(uuid).lower()
         cur = connection.cursor()
         try:
-            # First try: exact match on uuid
+            # First try: exact match on uuid (addr_rel)
             cur.execute('''
                 select s.symbol
                   from sentry_dsymsymbol s,
@@ -215,12 +219,29 @@ class DSymSymbolManager(BaseManager):
                        s.address >= o.vmaddr
               order by address desc
                  limit 1;
-            ''', [uuid, addr])
+            ''', [uuid, addr_rel])
             rv = cur.fetchone()
             if rv:
                 return rv[0]
 
-            # Second try: exact match on path and arch
+            # Second try: exact match on uuid (addr_abs)
+            if addr_abs is not None:
+                cur.execute('''
+                    select s.symbol
+                      from sentry_dsymsymbol s,
+                           sentry_dsymobject o
+                     where o.uuid = %s and
+                           s.object_id = o.id and
+                           s.address <= %s and
+                           s.address >= %s
+                  order by address desc
+                     limit 1;
+                ''', [uuid, addr_abs, image_vmaddr])
+                rv = cur.fetchone()
+                if rv:
+                    return rv[0]
+
+            # Third try: exact match on path and arch (addr_rel)
             sdk_info = get_sdk_from_system_info(system_info)
             if sdk_info is None or \
                cpu_name is None or \
@@ -249,10 +270,41 @@ class DSymSymbolManager(BaseManager):
                  limit 1;
             ''', [sdk_info['sdk_name'], sdk_info['dsym_type'],
                   sdk_info['version_major'], sdk_info['version_minor'],
-                  sdk_info['version_patchlevel'], cpu_name, object_path, addr])
+                  sdk_info['version_patchlevel'], cpu_name, object_path,
+                  addr_rel])
             rv = cur.fetchone()
             if rv:
                 return rv[0]
+
+            # Fourth try: exact match on path and arch (addr_abs)
+            if addr_abs is not None:
+                cur.execute('''
+                    select s.symbol
+                      from sentry_dsymsymbol s,
+                           sentry_dsymobject o,
+                           sentry_dsymsdk k,
+                           sentry_dsymbundle b
+                     where b.sdk_id = k.id and
+                           b.object_id = o.id and
+                           s.object_id = o.id and
+                           k.sdk_name = %s and
+                           k.dsym_type = %s and
+                           k.version_major = %s and
+                           k.version_minor = %s and
+                           k.version_patchlevel = %s and
+                           o.cpu_name = %s and
+                           o.object_path = %s and
+                           s.address <= %s and
+                           s.address >= %s
+                  order by address desc
+                     limit 1;
+                ''', [sdk_info['sdk_name'], sdk_info['dsym_type'],
+                      sdk_info['version_major'], sdk_info['version_minor'],
+                      sdk_info['version_patchlevel'], cpu_name, object_path,
+                      addr_abs, image_vmaddr])
+                rv = cur.fetchone()
+                if rv:
+                    return rv[0]
         finally:
             cur.close()
 
