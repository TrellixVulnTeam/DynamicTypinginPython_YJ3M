commit 7f4e0c7447c73a0e5097297bcb59651c6d4377fe
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Thu Jul 2 14:15:14 2020 -0700

    feat(Vercel): Add basic UI hook (#19587)
    
    * feat(Vercel): Add basic UI hook

diff --git a/src/sentry/integrations/vercel/uihook.py b/src/sentry/integrations/vercel/uihook.py
new file mode 100644
index 0000000000..4b28b3fc70
--- /dev/null
+++ b/src/sentry/integrations/vercel/uihook.py
@@ -0,0 +1,79 @@
+from __future__ import absolute_import
+
+import json
+import logging
+
+from django.http import HttpResponse
+from django.views.decorators.csrf import csrf_exempt
+
+from sentry.api.base import Endpoint
+from sentry.constants import ObjectStatus
+from sentry.models import Integration, Organization, OrganizationIntegration, OrganizationStatus
+from sentry.utils.http import absolute_uri
+from sentry.web.api import allow_cors_options
+from sentry.web.helpers import render_to_response
+
+logger = logging.getLogger("sentry.integrations.vercel")
+
+
+class VercelUIHook(Endpoint):
+    auth_required = False
+
+    @csrf_exempt
+    @allow_cors_options
+    def dispatch(self, request):
+        if request.method == "OPTIONS":
+            return HttpResponse(status=200)
+        if request.method != "POST":
+            return HttpResponse(status=405)
+        body_unicode = request.body.decode("utf-8")
+        body = json.loads(body_unicode)
+        configuration_id = body["configurationId"]
+        user_id = body["user"]["id"]
+        team_id = body["teamId"]
+        external_id = team_id or user_id
+        try:
+            integration = Integration.objects.get(
+                external_id=external_id, provider="vercel", status=ObjectStatus.ACTIVE
+            )
+        except Integration.DoesNotExist:
+            logger.info(
+                "vercel.integration.does-not-exist", extra={"external_id": external_id},
+            )
+            return HttpResponse("The requested integration does not exist.")
+        try:
+            organization = Organization.objects.get(
+                id=integration.metadata["configurations"][configuration_id]["organization_id"],
+                status=OrganizationStatus.ACTIVE,
+            )
+        except KeyError:
+            logger.info(
+                "vercel.integration.key-error",
+                extra={"external_id": external_id, "integration_id": integration.id},
+            )
+            return HttpResponse("Cannot fetch organization.")
+        except Organization.DoesNotExist:
+            logger.info(
+                "vercel.organization.does-not-exist",
+                extra={"external_id": external_id, "integration_id": integration.id},
+            )
+            return HttpResponse("Organization does not exist")
+        try:
+            OrganizationIntegration.objects.get(
+                organization=organization.id, integration=integration.id
+            )
+        except OrganizationIntegration.DoesNotExist:
+            logger.info(
+                "vercel.organization-integration.does-not-exist",
+                extra={"organization_id": organization.id, "integration_id": integration.id},
+            )
+            return HttpResponse("The requested integration does not exist.")
+
+        link = absolute_uri(
+            "/settings/%s/integrations/vercel/%s/" % (organization.slug, integration.id)
+        )
+        return render_to_response(
+            "sentry/vercel-ui-hook.vercel",
+            request=request,
+            context={"org": organization.slug, "link": link},
+        )
diff --git a/src/sentry/integrations/vercel/urls.py b/src/sentry/integrations/vercel/urls.py
index dcd4d1777f..61065ac0a1 100644
--- a/src/sentry/integrations/vercel/urls.py
+++ b/src/sentry/integrations/vercel/urls.py
@@ -4,6 +4,7 @@ from django.conf.urls import url
 
 from .webhook import VercelWebhookEndpoint
 from .uninstall import VercelUninstallEndpoint
+from .uihook import VercelUIHook
 from sentry.web.frontend.vercel_extension_configuration import VercelExtensionConfigurationView
 
 
@@ -11,4 +12,5 @@ urlpatterns = [
     url(r"^webhook/$", VercelWebhookEndpoint.as_view()),
     url(r"^configure/$", VercelExtensionConfigurationView.as_view()),
     url(r"^delete/$", VercelUninstallEndpoint.as_view()),
+    url(r"^ui-hook/$", VercelUIHook.as_view()),
 ]
diff --git a/src/sentry/templates/sentry/vercel-ui-hook.vercel b/src/sentry/templates/sentry/vercel-ui-hook.vercel
new file mode 100644
index 0000000000..9835190c02
--- /dev/null
+++ b/src/sentry/templates/sentry/vercel-ui-hook.vercel
@@ -0,0 +1,9 @@
+<Page>
+{% block main %}
+    <Box display="flex" justifyContent="space-between">
+      <P>
+        â€¢ <Link href="{{ link }}">Add to project for {{ org }}</Link><BR />
+      </P>
+    </Box>
+{% endblock %}
+</Page>
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index 3b9fb5d77b..2dc2e0b32f 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
-import responses
 import json
+import responses
+import six
 
 from six.moves.urllib.parse import parse_qs
 from sentry.integrations.vercel import VercelIntegrationProvider
@@ -16,6 +17,7 @@ from sentry.models import (
 )
 from sentry.shared_integrations.exceptions import IntegrationError
 from sentry.testutils import IntegrationTestCase
+from sentry.utils.http import absolute_uri
 
 
 class VercelIntegrationTest(IntegrationTestCase):
@@ -312,3 +314,41 @@ class VercelIntegrationTest(IntegrationTestCase):
         dsn.update(id=dsn.id, status=ProjectKeyStatus.INACTIVE)
         with self.assertRaises(IntegrationError):
             installation.update_organization_config(data)
+
+    @responses.activate
+    def test_ui_hook_options(self):
+        """Test that the response to the UI hook CORS pre-flight OPTIONS request is handled correctly"""
+
+        uihook_url = "/extensions/vercel/ui-hook/"
+        resp = self.client.options(path=uihook_url)
+        assert resp.status_code == 200
+
+    @responses.activate
+    def test_ui_hook_post(self):
+        """Test that the response to the UI hook POST request is handled correctly"""
+
+        uihook_url = "/extensions/vercel/ui-hook/"
+        with self.tasks():
+            self.assert_setup_flow()
+        integration = Integration.objects.get(provider=self.provider.key)
+        integration.update(
+            external_id="hIwec0PQ34UDEma7XmhCRQ3x",
+            metadata={
+                "configurations": {
+                    "icfg_Gdv8qI5s0h3T3xeLZvifuhCb": {"organization_id": self.organization.id}
+                }
+            },
+        )
+        data = b"""{"configurationId":"icfg_Gdv8qI5s0h3T3xeLZvifuhCb", "teamId":{}, "user":{"id":"hIwec0PQ34UDEma7XmhCRQ3x"}}"""
+
+        resp = self.client.post(path=uihook_url, data=data, content_type="application/json")
+        assert resp.status_code == 200
+        assert (
+            six.binary_type(
+                absolute_uri(
+                    "/settings/%s/integrations/vercel/%s/"
+                    % (self.organization.slug, integration.id)
+                )
+            )
+            in resp.content
+        )
