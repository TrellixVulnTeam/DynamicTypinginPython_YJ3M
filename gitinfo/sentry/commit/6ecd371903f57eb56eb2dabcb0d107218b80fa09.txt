commit 6ecd371903f57eb56eb2dabcb0d107218b80fa09
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed May 16 19:05:45 2018 -0700

    ref(integrations): Filter integrations by provider key (#8473)

diff --git a/src/sentry/api/endpoints/organization_integrations.py b/src/sentry/api/endpoints/organization_integrations.py
index 634bbf0eae..4141149e51 100644
--- a/src/sentry/api/endpoints/organization_integrations.py
+++ b/src/sentry/api/endpoints/organization_integrations.py
@@ -12,8 +12,13 @@ class OrganizationIntegrationsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationIntegrationsPermission, )
 
     def get(self, request, organization):
+        integrations = Integration.objects.filter(organizations=organization)
+
+        if 'provider_key' in request.GET:
+            integrations = integrations.filter(provider=request.GET['provider_key'])
+
         return self.paginate(
-            queryset=Integration.objects.filter(organizations=organization),
+            queryset=integrations,
             request=request,
             order_by='name',
             on_results=lambda x: serialize(x, request.user),
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx b/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
index eb67eca88e..60f27e9056 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrationConfig.jsx
@@ -114,11 +114,14 @@ export default class OrganizationIntegrationConfig extends AsyncView {
   }
 
   getEndpoints() {
-    const {orgId} = this.props.params;
+    const {orgId, providerKey} = this.props.params;
 
     return [
       ['config', `/organizations/${orgId}/config/integrations/`],
-      ['itemList', `/organizations/${orgId}/integrations/`],
+      [
+        'integrations',
+        `/organizations/${orgId}/integrations/?provider_key=${providerKey}`,
+      ],
     ];
   }
 
@@ -157,14 +160,14 @@ export default class OrganizationIntegrationConfig extends AsyncView {
 
     // Merge the new integration into the list. If we're updating an
     // integration ovewrrite the old integration.
-    const keyedItems = keyBy(this.state.itemList, i => i.id);
-    const itemList = sortArray(
+    const keyedItems = keyBy(this.state.integrations, i => i.id);
+    const integrations = sortArray(
       Object.values({...keyedItems, [data.id]: data}),
       i => i.name
     );
 
     IndicatorStore.addSuccess(t('Integration Added'));
-    this.setState({itemList});
+    this.setState({integrations});
   };
 
   handleDeleteIntegration = integration => {
@@ -175,7 +178,9 @@ export default class OrganizationIntegrationConfig extends AsyncView {
       method: 'DELETE',
       success: () => {
         this.setState({
-          itemList: this.state.itemList.filter(item => item.id !== integration.id),
+          integrations: this.state.integrations.filter(
+            item => item.id !== integration.id
+          ),
         });
         IndicatorStore.addSuccess(t('Integration removed'));
       },
@@ -210,9 +215,7 @@ export default class OrganizationIntegrationConfig extends AsyncView {
   }
 
   renderBody() {
-    const {providerKey} = this.props.params;
-
-    const integrations = this.state.itemList.filter(i => i.provider.key === providerKey);
+    const integrations = this.state.integrations;
     const provider = this.getProvider();
 
     if (provider === null) {
diff --git a/tests/js/spec/views/organizationIntegrationConfig.spec.jsx b/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
index a0268c8ce4..ea1eb8baa7 100644
--- a/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
@@ -23,7 +23,7 @@ describe('OrganizationIntegrationConfig', function() {
     describe('without any integrations', function() {
       beforeEach(function() {
         Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/`,
+          url: `/organizations/${org.slug}/integrations/?provider_key=${provider.key}`,
           body: [],
         });
         Client.addMockResponse({
@@ -41,6 +41,10 @@ describe('OrganizationIntegrationConfig', function() {
       });
 
       it('Displays an error for an invalid provider key', function() {
+        Client.addMockResponse({
+          url: `/organizations/${org.slug}/integrations/?provider_key=bad-key`,
+          body: [],
+        });
         const invalidKeyParams = {...params, providerKey: 'bad-key'};
         const wrapper = shallow(
           <OrganizationIntegrationConfig params={invalidKeyParams} />,
@@ -53,7 +57,7 @@ describe('OrganizationIntegrationConfig', function() {
     describe('with one integration', function() {
       beforeEach(function() {
         Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/`,
+          url: `/organizations/${org.slug}/integrations/?provider_key=${provider.key}`,
           body: [integration],
         });
         Client.addMockResponse({
@@ -109,7 +113,7 @@ describe('OrganizationIntegrationConfig', function() {
           },
         });
 
-        expect(wrapper.instance().state.itemList).toHaveLength(2);
+        expect(wrapper.instance().state.integrations).toHaveLength(2);
       });
 
       it('Merges existing integrations', function() {
@@ -135,8 +139,8 @@ describe('OrganizationIntegrationConfig', function() {
           },
         });
 
-        expect(wrapper.instance().state.itemList).toHaveLength(1);
-        expect(wrapper.instance().state.itemList[0]).toBe(updatedIntegration);
+        expect(wrapper.instance().state.integrations).toHaveLength(1);
+        expect(wrapper.instance().state.integrations[0]).toBe(updatedIntegration);
       });
 
       it('Deletes an integration', function() {
