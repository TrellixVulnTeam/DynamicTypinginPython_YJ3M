commit d53381560b58b74f67762bd1dff01fe553a3f8ff
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 7 18:05:45 2011 -0700

    Settings refactor to ensure we import defaults correctly

diff --git a/docs/install/index.rst b/docs/install/index.rst
index b42ffcdf04..4bbe1096e1 100644
--- a/docs/install/index.rst
+++ b/docs/install/index.rst
@@ -110,6 +110,16 @@ Sentry provides the start, stop, and restart commands available via the command
 
 .. note: The ``start`` command will also automatically run the ``upgrade`` command, which handles data and schema migrations.
 
+The configuration for the server is based on ``sentry.conf.server``, which contains a basic Django project configuration, as well
+as the default Sentry configuration values. It will use SQLite for the database, and Haystack using Whoosh. If you specify your own
+configuration via --config, you will likely want to preface the file with importing the global defaults::
+
+	#!/usr/bin/env python
+	# filename: /etc/sentry.conf.py
+	from sentry.conf.defaults import *
+
+.. note: The default database is SQLite, which generally does not perform very well.
+
 The following settings are available for the built-in webserver:
 
 ********
diff --git a/runtests.py b/runtests.py
index 2b4b5eae67..d0545a393b 100644
--- a/runtests.py
+++ b/runtests.py
@@ -2,6 +2,7 @@
 import logging
 import sys
 from os.path import dirname, abspath, join
+from optparse import OptionParser
 
 logging.getLogger('sentry').addHandler(logging.StreamHandler())
 
@@ -66,7 +67,7 @@ if not settings.configured:
 
 from django.test.simple import run_tests
 
-def runtests(*test_args):
+def runtests(failfast=False, *test_args):
     if 'south' in settings.INSTALLED_APPS:
         from south.management.commands import patch_for_test_db_setup
         patch_for_test_db_setup()
@@ -75,9 +76,14 @@ def runtests(*test_args):
         test_args = ['sentry']
     parent = dirname(abspath(__file__))
     sys.path.insert(0, parent)
-    failures = run_tests(test_args, verbosity=1, interactive=True)
+    failures = run_tests(test_args, verbosity=1, interactive=False, failfast=failfast)
     sys.exit(failures)
 
 
 if __name__ == '__main__':
-    runtests(*sys.argv[1:])
\ No newline at end of file
+    parser = OptionParser()
+    parser.add_option('--failfast', action='store_true', default=False, dest='failfast')
+
+    (options, args) = parser.parse_args()
+
+    runtests(*args, failfast=options.failfast)
\ No newline at end of file
diff --git a/sentry/client/base.py b/sentry/client/base.py
index 8acd426694..3c5fad3977 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -15,7 +15,7 @@ from django.utils import simplejson
 from django.views.debug import ExceptionReporter
 
 import sentry
-from sentry import conf
+from sentry.conf import settings
 from sentry.utils import construct_checksum, varmap, transform, get_installed_apps, force_unicode, \
                            get_versions, shorten, get_signature, get_auth_header
 
@@ -52,7 +52,7 @@ class SentryClient(object):
                 kwargs['url'] = request.build_absolute_uri()
 
         kwargs.setdefault('level', logging.ERROR)
-        kwargs.setdefault('server_name', conf.NAME)
+        kwargs.setdefault('server_name', settings.NAME)
 
         # save versions of all installed apps
         if 'data' not in kwargs or '__sentry__' not in (kwargs['data'] or {}):
@@ -92,9 +92,9 @@ class SentryClient(object):
         else:
             checksum = kwargs['checksum']
 
-        if conf.THRASHING_TIMEOUT and conf.THRASHING_LIMIT:
+        if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
             cache_key = 'sentry:%s:%s' % (kwargs.get('class_name') or '', checksum)
-            added = cache.add(cache_key, 1, conf.THRASHING_TIMEOUT)
+            added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
             if not added:
                 try:
                     thrash_count = cache.incr(cache_key)
@@ -103,7 +103,7 @@ class SentryClient(object):
                     # if we are, hope that the next error has a successful
                     # cache.incr call.
                     thrash_count = 0
-                if thrash_count > conf.THRASHING_LIMIT:
+                if thrash_count > settings.THRASHING_LIMIT:
                     message_id = cache.get('%s:last_message_id' % cache_key)
                     if request:
                         # attach the sentry object to the request
@@ -131,24 +131,24 @@ class SentryClient(object):
                 'id': message_id,
             }
         
-        if conf.THRASHING_TIMEOUT and conf.THRASHING_LIMIT:
+        if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
             # store the last message_id incase we hit thrashing limits
-            cache.set('%s:last_message_id' % cache_key, message_id, conf.THRASHING_LIMIT+5)
+            cache.set('%s:last_message_id' % cache_key, message_id, settings.THRASHING_LIMIT+5)
         
         return message_id
 
     def send_remote(self, url, data, headers={}):
         req = urllib2.Request(url, headers=headers)
         try:
-            response = urllib2.urlopen(req, data, conf.REMOTE_TIMEOUT).read()
+            response = urllib2.urlopen(req, data, settings.REMOTE_TIMEOUT).read()
         except:
             response = urllib2.urlopen(req, data).read()
         return response
 
     def send(self, **kwargs):
         "Sends the message to the server."
-        if conf.REMOTE_URL:
-            for url in conf.REMOTE_URL:
+        if settings.REMOTE_URL:
+            for url in settings.REMOTE_URL:
                 message = base64.b64encode(simplejson.dumps(kwargs).encode('zlib'))
                 timestamp = time.time()
                 signature = get_signature(message, timestamp)
@@ -185,7 +185,7 @@ class SentryClient(object):
             'logger': record.name,
             'level': record.levelno,
             'message': force_unicode(record.msg),
-            'server_name': conf.NAME,
+            'server_name': settings.NAME,
         })
         
         # construct the checksum with the unparsed message
@@ -228,8 +228,8 @@ class SentryClient(object):
         if not kwargs.get('view'):
             # This should be cached
             modules = get_installed_apps()
-            if conf.INCLUDE_PATHS:
-                modules = set(list(modules) + conf.INCLUDE_PATHS)
+            if settings.INCLUDE_PATHS:
+                modules = set(list(modules) + settings.INCLUDE_PATHS)
 
             def iter_tb_frames(tb):
                 while tb:
@@ -254,7 +254,7 @@ class SentryClient(object):
                 except:
                     continue
                 if contains(modules, view):
-                    if not (contains(conf.EXCLUDE_PATHS, view) and best_guess):
+                    if not (contains(settings.EXCLUDE_PATHS, view) and best_guess):
                         best_guess = view
                 elif best_guess:
                     break
diff --git a/sentry/client/models.py b/sentry/client/models.py
index cb3baf52c2..5302da1c4d 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -7,16 +7,16 @@ import warnings
 from django.core.signals import got_request_exception
 from django.db import  transaction
 
-from sentry import conf
+from sentry.conf import settings
 
 logger = logging.getLogger('sentry.errors')
 
 _client = (None, None)
 def get_client():
     global _client
-    if _client[0] != conf.CLIENT:
-        module, class_name = conf.CLIENT.rsplit('.', 1)
-        _client = (conf.CLIENT, getattr(__import__(module, {}, {}, class_name), class_name)())
+    if _client[0] != settings.CLIENT:
+        module, class_name = settings.CLIENT.rsplit('.', 1)
+        _client = (settings.CLIENT, getattr(__import__(module, {}, {}, class_name), class_name)())
     return _client[1]
 client = get_client()
 
@@ -25,7 +25,7 @@ def sentry_exception_handler(request=None, **kwargs):
     try:
         exc_type, exc_value, exc_traceback = sys.exc_info()
 
-        if conf.DEBUG or getattr(exc_type, 'skip_sentry', False):
+        if settings.DEBUG or getattr(exc_type, 'skip_sentry', False):
             return
 
         if transaction.is_dirty():
diff --git a/sentry/conf/__init__.py b/sentry/conf/__init__.py
index e708c08d1a..e69de29bb2 100644
--- a/sentry/conf/__init__.py
+++ b/sentry/conf/__init__.py
@@ -1,32 +0,0 @@
-import warnings
-
-from django.conf import settings
-from django.utils.hashcompat import md5_constructor
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.conf.defaults import *
-
-# Some sane overrides to better mix with Django
-DEBUG = getattr(settings, 'DEBUG', False) and not getattr(settings, 'SENTRY_TESTING', False)
-KEY = getattr(settings, 'SENTRY_KEY', md5_constructor(settings.SECRET_KEY).hexdigest())
-
-for k in dir(settings):
-    if k.startswith('SENTRY_'):
-        locals()[k.split('SENTRY_', 1)[1]] = getattr(settings, k)
-
-LOG_LEVELS = ((k, _(v)) for k, v in LOG_LEVELS)
-
-if REMOTE_URL:
-    if isinstance(REMOTE_URL, basestring):
-        REMOTE_URL = [REMOTE_URL]
-    elif not isinstance(REMOTE_URL, (list, tuple)):
-        raise ValueError("Sentry setting 'REMOTE_URL' must be of type list.")
-
-def configure(**kwargs):
-    for k, v in kwargs.iteritems():
-        if k.upper() != k:
-            warnings.warn('Invalid setting, \'%s\' which is not defined by Sentry' % k)
-        elif k not in locals():
-            warnings.warn('Setting \'%s\' which is not defined by Sentry' % k)
-        else:
-            locals[k] = v
diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index 0f3b22eba3..df3bf1d35e 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -2,6 +2,8 @@
 These settings act as the default (base) settings for the Sentry-provided web-server
 """
 
+from django.conf.global_settings import *
+
 import hashlib
 import os
 import os.path
@@ -103,7 +105,7 @@ INSTALLED_APPS = (
 import logging
 logging.basicConfig(level=logging.DEBUG)
 
-# SENTRY_SEARCH_ENGINE = 'whoosh'
-# SENTRY_SEARCH_OPTIONS = {
-#     'path': os.path.join(PROJECT_ROOT, 'sentry_index'),
-# }
+SENTRY_SEARCH_ENGINE = 'whoosh'
+SENTRY_SEARCH_OPTIONS = {
+    'path': os.path.join(PROJECT_ROOT, 'sentry_index'),
+}
diff --git a/sentry/conf/settings.py b/sentry/conf/settings.py
new file mode 100644
index 0000000000..599531eebb
--- /dev/null
+++ b/sentry/conf/settings.py
@@ -0,0 +1,32 @@
+from sentry.conf.defaults import *
+
+from django.conf import settings
+from django.utils.hashcompat import md5_constructor
+from django.utils.translation import ugettext_lazy as _
+
+import warnings
+
+# Some sane overrides to better mix with Django
+DEBUG = getattr(settings, 'DEBUG', False) and not getattr(settings, 'SENTRY_TESTING', False)
+KEY = getattr(settings, 'SENTRY_KEY', md5_constructor(settings.SECRET_KEY).hexdigest())
+
+for k in dir(settings):
+    if k.startswith('SENTRY_'):
+        locals()[k.split('SENTRY_', 1)[1]] = getattr(settings, k)
+
+LOG_LEVELS = ((k, _(v)) for k, v in LOG_LEVELS)
+
+if REMOTE_URL:
+    if isinstance(REMOTE_URL, basestring):
+        REMOTE_URL = [REMOTE_URL]
+    elif not isinstance(REMOTE_URL, (list, tuple)):
+        raise ValueError("Sentry setting 'REMOTE_URL' must be of type list.")
+
+def configure(**kwargs):
+    for k, v in kwargs.iteritems():
+        if k.upper() != k:
+            warnings.warn('Invalid setting, \'%s\' which is not defined by Sentry' % k)
+        elif k not in locals():
+            warnings.warn('Setting \'%s\' which is not defined by Sentry' % k)
+        else:
+            locals[k] = v
diff --git a/sentry/filters.py b/sentry/filters.py
index 8973deff92..2ccc97495b 100644
--- a/sentry/filters.py
+++ b/sentry/filters.py
@@ -1,12 +1,12 @@
 # Widget api is pretty ugly
 from __future__ import absolute_import
 
-from django.conf import settings
+from django.conf import settings as django_settings
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 from django.utils.html import escape
 
-from sentry import conf
+from sentry.conf import settings
 
 class Widget(object):
     def __init__(self, filter, request):
@@ -131,17 +131,17 @@ class SiteFilter(SentryFilter):
     def process(self, data):
         if 'site' in data:
             return data
-        if conf.SITE is None:
-            if 'django.contrib.sites' in settings.INSTALLED_APPS:
+        if settings.SITE is None:
+            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
                 from django.contrib.sites.models import Site
                 try:
-                    conf.SITE = Site.objects.get_current().name
+                    settings.SITE = Site.objects.get_current().name
                 except Site.DoesNotExist:
-                    conf.SITE = ''
+                    settings.SITE = ''
             else:
-                conf.SITE = ''
-        if conf.SITE:
-            data['site'] = conf.SITE
+                settings.SITE = ''
+        if settings.SITE:
+            data['site'] = settings.SITE
         return data
 
     def get_query_set(self, queryset):
@@ -152,7 +152,7 @@ class LevelFilter(SentryFilter):
     column = 'level'
     
     def get_choices(self):
-        return SortedDict((str(k), v) for k, v in conf.LOG_LEVELS)
+        return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
     
     def get_query_set(self, queryset):
         return queryset.filter(level__gte=self.get_value())
\ No newline at end of file
diff --git a/sentry/models.py b/sentry/models.py
index 219e6db1dd..d69a78a73b 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -10,13 +10,13 @@ import math
 
 from datetime import datetime
 
-from django.conf import settings
+from django.conf import settings as django_settings
 from django.db import models
 from django.db.models import Count
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import conf
+from sentry.conf import settings
 from sentry.utils import cached_property, construct_checksum, transform, get_filters, \
                          MockDjangoRequest
 from sentry.utils.manager import GroupedMessageManager, SentryManager
@@ -67,7 +67,7 @@ class GzippedDictField(models.TextField):
 class MessageBase(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
-    level           = models.PositiveIntegerField(choices=conf.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
+    level           = models.PositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
     view            = models.CharField(max_length=200, blank=True, null=True)
@@ -139,7 +139,7 @@ class GroupedMessage(MessageBase):
         return int(math.log(self.times_seen) * 600 + int(self.last_seen.strftime('%s')))
 
     def mail_admins(self, request=None, fail_silently=True):
-        if not conf.ADMINS:
+        if not settings.ADMINS:
             return
         
         from django.core.mail import send_mail
@@ -149,7 +149,7 @@ class GroupedMessage(MessageBase):
 
         obj_request = message.request
 
-        subject = '%sError (%s IP): %s' % (settings.EMAIL_SUBJECT_PREFIX, (obj_request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'), obj_request.path)
+        subject = '%sError (%s IP): %s' % (django_settings.EMAIL_SUBJECT_PREFIX, (obj_request.META.get('REMOTE_ADDR') in django_settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'), obj_request.path)
         if message.site:
             subject  = '[%s] %s' % (message.site, subject)
         try:
@@ -160,7 +160,7 @@ class GroupedMessage(MessageBase):
         if request:
             link = request.build_absolute_url(self.get_absolute_url())
         else:
-            link = '%s%s' % (conf.URL_PREFIX, self.get_absolute_url())
+            link = '%s%s' % (settings.URL_PREFIX, self.get_absolute_url())
 
         body = render_to_string('sentry/emails/error.txt', {
             'request_repr': request_repr,
@@ -171,7 +171,7 @@ class GroupedMessage(MessageBase):
         })
         
         send_mail(subject, body,
-                  settings.SERVER_EMAIL, conf.ADMINS,
+                  django_settings.SERVER_EMAIL, settings.ADMINS,
                   fail_silently=fail_silently)
     
     @property
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 3adb57a683..68d80ce8b7 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -69,7 +69,6 @@ class CreateRedmineIssue(GroupActionProvider):
                     else:
                         form.errors['__all__'] = 'Bad response from Redmine: %s %s' % (e.code, e.msg)
                 except urllib2.URLError, e:
-                    print dir(e), e.__dict__
                     form.errors['__all__'] = 'Unable to reach Redmine host: %s' % (e.reason,)
                 else:
                     data = simplejson.loads(response)
diff --git a/sentry/plugins/sentry_redmine/tests/__init__.py b/sentry/plugins/sentry_redmine/tests/__init__.py
index 8a4d3dd6e7..0f8067975f 100644
--- a/sentry/plugins/sentry_redmine/tests/__init__.py
+++ b/sentry/plugins/sentry_redmine/tests/__init__.py
@@ -28,8 +28,8 @@ class CreateIssueTest(TestCase):
         self.user.save()
         self.client.login(username='admin', password='admin')
         
-        conf.REDMINE_URL = 'http://localhost:3000'
-        conf.REDMINE_PROJECT_SLUG = 'sentry'
+        settings.REDMINE_URL = 'http://localhost:3000'
+        settings.REDMINE_PROJECT_SLUG = 'sentry'
 
     def test_basic_response(self):
         group = GroupedMessage.objects.all()[0]
@@ -39,8 +39,8 @@ class CreateIssueTest(TestCase):
         self.assertTemplateUsed(response, 'sentry/plugins/redmine/create_issue.html')
 
     def test_anonymous_issue_creation(self):
-        conf.REDMINE_USERNAME = None
-        conf.REDMINE_PASSWORD = None
+        settings.REDMINE_USERNAME = None
+        settings.REDMINE_PASSWORD = None
 
         group = GroupedMessage.objects.all()[0]
 
@@ -57,8 +57,8 @@ class CreateIssueTest(TestCase):
         self.assertTrue(group.data['redmine']['issue_id'] > 0)
 
     def test_http_auth_issue_creation(self):
-        conf.REDMINE_USERNAME = 'sentry'
-        conf.REDMINE_PASSWORD = 'sentry'
+        settings.REDMINE_USERNAME = 'sentry'
+        settings.REDMINE_PASSWORD = 'sentry'
 
         group = GroupedMessage.objects.all()[0]
 
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index 1c8a5a37d6..00a75ec512 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -18,21 +18,21 @@ class SentryServer(DaemonRunner):
 
     def __init__(self, host=None, port=None, pidfile=None,
                  logfile=None):
-        from sentry import conf
+        from sentry.conf import settings
 
         if not logfile:
-            logfile = conf.WEB_LOG_FILE
+            logfile = settings.WEB_LOG_FILE
 
         self.daemon_context = DaemonContext()
         self.daemon_context.stdout = open(logfile, 'w+')
         self.daemon_context.stderr = open(logfile, 'w+', buffering=0)
 
-        self.pidfile = make_pidlockfile(pidfile or conf.WEB_PID_FILE, self.pidfile_timeout)
+        self.pidfile = make_pidlockfile(pidfile or settings.WEB_PID_FILE, self.pidfile_timeout)
 
         self.daemon_context.pidfile = self.pidfile
 
-        self.host = host or conf.WEB_HOST
-        self.port = port or conf.WEB_PORT
+        self.host = host or settings.WEB_HOST
+        self.port = port or settings.WEB_PORT
 
         # HACK: set app to self so self.app.run() works
         self.app = self
@@ -69,12 +69,12 @@ def cleanup(days=30, logger=None, site=None, server=None):
     qs.delete()
 
 def upgrade():
-    from sentry import conf
+    from sentry.conf import settings
     
-    call_command('syncdb', database=conf.DATABASE_USING or 'default', interactive=False)
+    call_command('syncdb', database=settings.DATABASE_USING or 'default', interactive=False)
 
     if 'south' in settings.INSTALLED_APPS:
-        call_command('migrate', database=conf.DATABASE_USING or 'default', interactive=False)
+        call_command('migrate', database=settings.DATABASE_USING or 'default', interactive=False)
 
 def main():
     command_list = ('start', 'stop', 'restart', 'cleanup', 'upgrade')
diff --git a/sentry/search_indexes.py b/sentry/search_indexes.py
index cbc89e0e3a..17cf98ae9d 100644
--- a/sentry/search_indexes.py
+++ b/sentry/search_indexes.py
@@ -2,19 +2,19 @@ import haystack
 from haystack.indexes import *
 from haystack.sites import SearchSite
 
-from sentry import conf
+from sentry.conf import settings
 from sentry.utils import to_unicode
 from sentry.models import GroupedMessage
 
-if conf.SEARCH_ENGINE:
+if settings.SEARCH_ENGINE:
     # Ensure we stop here if we havent configure Sentry to work under haystack
 
-    backend = haystack.load_backend(conf.SEARCH_ENGINE)
+    backend = haystack.load_backend(settings.SEARCH_ENGINE)
 
     class SentrySearchSite(SearchSite): pass
 
     site = SentrySearchSite()
-    site.backend = backend.SearchBackend(site, **conf.SEARCH_OPTIONS)
+    site.backend = backend.SearchBackend(site, **settings.SEARCH_OPTIONS)
 
     class GroupedMessageIndex(RealTimeSearchIndex):
         text = CharField(document=True, stored=False)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 5bb8d7eb81..28451337dd 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -14,7 +14,7 @@ import time
 import threading
 import warnings
 
-from django.conf import settings
+from django.conf import settings as django_settings
 from django.contrib.auth.models import User
 from django.core import mail
 from django.core.handlers.wsgi import WSGIHandler
@@ -27,7 +27,7 @@ from django.template import TemplateSyntaxError
 from django.utils import simplejson
 from django.utils.encoding import smart_unicode
 
-from sentry import conf
+from sentry.conf import settings
 from sentry.utils import transform, get_signature, get_auth_header
 from sentry.models import Message, GroupedMessage
 from sentry.client.base import SentryClient
@@ -64,8 +64,8 @@ class TestServerThread(threading.Thread):
             return
 
         # Must do database stuff in this new thread if database in memory.
-        if settings.DATABASE_ENGINE == 'sqlite3' \
-            and (not settings.TEST_DATABASE_NAME or settings.TEST_DATABASE_NAME == ':memory:'):
+        if django_settings.DATABASE_ENGINE == 'sqlite3' \
+            and (not django_settings.TEST_DATABASE_NAME or django_settings.TEST_DATABASE_NAME == ':memory:'):
             # Import the fixture data into the test database.
             if hasattr(self, 'fixtures'):
                 # We have to use this slightly awkward syntax due to the fact
@@ -98,7 +98,7 @@ class SentryTestCase(TestCase):
     urls = 'sentry.tests.urls'
 
     def setUp(self):
-        self._middleware = settings.MIDDLEWARE_CLASSES
+        self._middleware = django_settings.MIDDLEWARE_CLASSES
         self._handlers = None
         self._level = None
         self.logger = logging.getLogger('sentry')
@@ -108,7 +108,7 @@ class SentryTestCase(TestCase):
 
     def tearDown(self):
         self.tearDownHandler()
-        settings.MIDDLEWARE_CLASSES = self._middleware
+        django_settings.MIDDLEWARE_CLASSES = self._middleware
         
     def setUpHandler(self):
         self.tearDownHandler()
@@ -195,7 +195,7 @@ class SentryTestCase(TestCase):
         self.tearDownHandler()
 
     # def test404Middleware(self):
-    #     settings.MIDDLEWARE_CLASSES = settings.MIDDLEWARE_CLASSES + ('sentry.client.middleware.Sentry404CatchMiddleware',)
+    #     django_settings.MIDDLEWARE_CLASSES = django_settings.MIDDLEWARE_CLASSES + ('sentry.client.middleware.Sentry404CatchMiddleware',)
     #     
     #     response = self.client.get("/404/this-page-does-not-exist", REMOTE_ADDR="127.0.0.1:8000")
     #     self.assertTemplateUsed(response, '404.html')
@@ -245,7 +245,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, 'This is an error')
         
     def testAlternateDatabase(self):
-        conf.DATABASE_USING = 'default'
+        settings.DATABASE_USING = 'default'
         
         try:
             Message.objects.get(id=999999979)
@@ -262,7 +262,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
 
-        conf.DATABASE_USING = None
+        settings.DATABASE_USING = None
     
     def testIncorrectUnicode(self):
         self.setUpHandler()
@@ -329,8 +329,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(error.data['url'], 'a'*210)
     
     def testThrashing(self):
-        conf.THRASHING_LIMIT = 10
-        conf.THRASHING_TIMEOUT = 60
+        settings.THRASHING_LIMIT = 10
+        settings.THRASHING_TIMEOUT = 60
         
         Message.objects.all().delete()
         GroupedMessage.objects.all().delete()
@@ -346,7 +346,7 @@ class SentryTestCase(TestCase):
             this_message_id = get_client().create_from_text('hi')
             self.assertEquals(this_message_id, message_id)
         
-        self.assertEquals(Message.objects.count(), conf.THRASHING_LIMIT)
+        self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
     
     def testSignals(self):
         try:
@@ -381,8 +381,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, smart_unicode(exc))
 
     def testNoThrashing(self):
-        prev = conf.THRASHING_LIMIT
-        conf.THRASHING_LIMIT = 0
+        prev = settings.THRASHING_LIMIT
+        settings.THRASHING_LIMIT = 0
         
         Message.objects.all().delete()
         GroupedMessage.objects.all().delete()
@@ -392,7 +392,7 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(Message.objects.count(), 50)
 
-        conf.THRASHING_LIMIT = prev
+        settings.THRASHING_LIMIT = prev
 
     def testDatabaseMessage(self):
         from django.db import connection
@@ -431,8 +431,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
 
     def testRequestMiddlwareException(self):
-        orig = list(settings.MIDDLEWARE_CLASSES)
-        settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenRequestMiddleware',]
+        orig = list(django_settings.MIDDLEWARE_CLASSES)
+        django_settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenRequestMiddleware',]
         
         self.assertRaises(ImportError, self.client.get, reverse('sentry'))
         self.assertEquals(Message.objects.count(), 1)
@@ -444,12 +444,12 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, 'request')
         self.assertEquals(last.view, 'sentry.tests.middleware.process_request')
         
-        settings.MIDDLEWARE_CLASSES = orig
+        django_settings.MIDDLEWARE_CLASSES = orig
 
     # XXX: Django doesn't handle response middleware exceptions (yet)
     # def testResponseMiddlwareException(self):
-    #     orig = list(settings.MIDDLEWARE_CLASSES)
-    #     settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenResponseMiddleware',]
+    #     orig = list(django_settings.MIDDLEWARE_CLASSES)
+    #     django_settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenResponseMiddleware',]
     #     
     #     self.assertRaises(ImportError, self.client.get, reverse('sentry'))
     #     self.assertEquals(Message.objects.count(), 1)
@@ -461,11 +461,11 @@ class SentryTestCase(TestCase):
     #     self.assertEquals(last.message, 'response')
     #     self.assertEquals(last.view, 'sentry.tests.middleware.process_response')
     #     
-    #     settings.MIDDLEWARE_CLASSES = orig
+    #     django_settings.MIDDLEWARE_CLASSES = orig
 
     def testViewMiddlewareException(self):
-        orig = list(settings.MIDDLEWARE_CLASSES)
-        settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenViewMiddleware',]
+        orig = list(django_settings.MIDDLEWARE_CLASSES)
+        django_settings.MIDDLEWARE_CLASSES = orig + ['sentry.tests.middleware.BrokenViewMiddleware',]
         
         self.assertRaises(ImportError, self.client.get, reverse('sentry'))
         self.assertEquals(Message.objects.count(), 1)
@@ -477,13 +477,13 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.message, 'view')
         self.assertEquals(last.view, 'sentry.tests.middleware.process_view')
         
-        settings.MIDDLEWARE_CLASSES = orig
+        django_settings.MIDDLEWARE_CLASSES = orig
 
     def testSettingName(self):
-        orig_name = conf.NAME
-        orig_site = conf.SITE
-        conf.NAME = 'foo'
-        conf.SITE = 'bar'
+        orig_name = settings.NAME
+        orig_site = settings.SITE
+        settings.NAME = 'foo'
+        settings.SITE = 'bar'
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
 
@@ -498,8 +498,8 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.site, 'bar')
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
         
-        conf.NAME = orig_name
-        conf.SITE = orig_site
+        settings.NAME = orig_name
+        settings.SITE = orig_site
 
     def testExclusionViewPath(self):
         try: Message.objects.get(pk=1341324)
@@ -510,7 +510,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.view, 'sentry.tests.tests.testExclusionViewPath')
 
     def testBestGuessView(self):
-        conf.EXCLUDE_PATHS = ['sentry.tests.tests']
+        settings.EXCLUDE_PATHS = ['sentry.tests.tests']
         
         try: Message.objects.get(pk=1341324)
         except: get_client().create_from_exception()
@@ -519,10 +519,10 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry.tests.tests.testBestGuessView')
         
-        conf.EXCLUDE_PATHS = []
+        settings.EXCLUDE_PATHS = []
 
     def testExcludeModulesView(self):
-        conf.EXCLUDE_PATHS = ['sentry.tests.views.decorated_raise_exc']
+        settings.EXCLUDE_PATHS = ['sentry.tests.views.decorated_raise_exc']
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc-decor'))
         
@@ -530,7 +530,7 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
         
-        conf.EXCLUDE_PATHS = []
+        settings.EXCLUDE_PATHS = []
 
     def testVaryingMessages(self):
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc') + '?message=foo')
@@ -540,7 +540,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(GroupedMessage.objects.count(), 1)
 
     def testIncludeModules(self):
-        conf.INCLUDE_PATHS = ['django.shortcuts.get_object_or_404']
+        settings.INCLUDE_PATHS = ['django.shortcuts.get_object_or_404']
         
         self.assertRaises(Exception, self.client.get, reverse('sentry-django-exc'))
         
@@ -548,7 +548,7 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'django.shortcuts.get_object_or_404')
         
-        conf.INCLUDE_PATHS = []
+        settings.INCLUDE_PATHS = []
 
     def testTemplateNameAsView(self):
         self.assertRaises(TemplateSyntaxError, self.client.get, reverse('sentry-template-exc'))
@@ -647,11 +647,11 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.data['module'], 'sentry')
 
     def test404Middleware(self):
-        existing = settings.MIDDLEWARE_CLASSES
+        existing = django_settings.MIDDLEWARE_CLASSES
         
-        settings.MIDDLEWARE_CLASSES = (
+        django_settings.MIDDLEWARE_CLASSES = (
             'sentry.client.middleware.Sentry404CatchMiddleware',
-        ) + settings.MIDDLEWARE_CLASSES
+        ) + django_settings.MIDDLEWARE_CLASSES
         
         resp = self.client.get('/non-existant-page')
         self.assertEquals(resp.status_code, 404)
@@ -663,16 +663,16 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.level, logging.INFO)
         self.assertEquals(last.logger, 'http404')
 
-        settings.MIDDLEWARE_CLASSES = existing
+        django_settings.MIDDLEWARE_CLASSES = existing
 
     def testResponseErrorIdMiddleware(self):
         # TODO: test with 500s
-        existing = settings.MIDDLEWARE_CLASSES
+        existing = django_settings.MIDDLEWARE_CLASSES
         
-        settings.MIDDLEWARE_CLASSES = (
+        django_settings.MIDDLEWARE_CLASSES = (
             'sentry.client.middleware.SentryResponseErrorIdMiddleware',
             'sentry.client.middleware.Sentry404CatchMiddleware',
-        ) + settings.MIDDLEWARE_CLASSES
+        ) + django_settings.MIDDLEWARE_CLASSES
         
         resp = self.client.get('/non-existant-page')
         self.assertEquals(resp.status_code, 404)
@@ -680,7 +680,7 @@ class SentryTestCase(TestCase):
         self.assertTrue(headers.get('X-Sentry-ID'))
         self.assertTrue(Message.objects.filter(message_id=headers['X-Sentry-ID']).exists())
 
-        settings.MIDDLEWARE_CLASSES = existing
+        django_settings.MIDDLEWARE_CLASSES = existing
 
     def testExtraStorage(self):
         from sentry.utils import MockDjangoRequest
@@ -800,10 +800,10 @@ class SentryViewsTest(TestCase):
     fixtures = ['sentry/tests/fixtures/views.json']
     
     def setUp(self):
-        conf.DATABASE_USING = None
+        settings.DATABASE_USING = None
         self._handlers = None
         self._level = None
-        conf.DEBUG = False
+        settings.DEBUG = False
         self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
         self.user.set_password('admin')
         self.user.save()
@@ -876,7 +876,7 @@ class RemoteSentryTest(TestCase):
     
     def setUp(self):
         self.server_thread = None
-        conf.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
+        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
         logger = logging.getLogger('sentry')
         for h in logger.handlers:
             logger.removeHandler(h)
@@ -884,7 +884,7 @@ class RemoteSentryTest(TestCase):
 
     def tearDown(self):
         self.stop_test_server()
-        conf.REMOTE_URL = None
+        settings.REMOTE_URL = None
 
     def testNoKey(self):
         resp = self.client.post(reverse('sentry-store'))
@@ -892,13 +892,13 @@ class RemoteSentryTest(TestCase):
 
     def testNoData(self):
         resp = self.client.post(reverse('sentry-store'), {
-            'key': conf.KEY,
+            'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 400)
 
     def testBadData(self):
         resp = self.client.post(reverse('sentry-store'), {
-            'key': conf.KEY,
+            'key': settings.KEY,
             'data': 'hello world',
         })
         self.assertEquals(resp.status_code, 403)
@@ -908,7 +908,7 @@ class RemoteSentryTest(TestCase):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
-            'key': conf.KEY,
+            'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
@@ -921,7 +921,7 @@ class RemoteSentryTest(TestCase):
         kwargs = {u'message': 'hello', u'server_name': 'not_dcramer.local', u'level': 40, u'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
-            'key': conf.KEY,
+            'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 200, resp.content)
         instance = Message.objects.get()
@@ -935,7 +935,7 @@ class RemoteSentryTest(TestCase):
         kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%s.%f')}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
-            'key': conf.KEY,
+            'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 200, resp.content)
         instance = Message.objects.get()
@@ -949,7 +949,7 @@ class RemoteSentryTest(TestCase):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
             'data': base64.b64encode(pickle.dumps(transform(kwargs))),
-            'key': conf.KEY,
+            'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
@@ -971,7 +971,7 @@ class RemoteSentryTest(TestCase):
         
         resp = self.client.post(reverse('sentry-store'), {
             'data': data,
-            'key': conf.KEY,
+            'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
@@ -1044,7 +1044,7 @@ class SentryMailTest(TestCase):
     urls = 'sentry.tests.urls'
     
     def setUp(self):
-        conf.ADMINS = ('%s@localhost' % getpass.getuser(),)
+        settings.ADMINS = ('%s@localhost' % getpass.getuser(),)
     
     def test_mail_admins(self):
         group = GroupedMessage.objects.get()
@@ -1059,7 +1059,7 @@ class SentryMailTest(TestCase):
         self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /group/1')
 
     def test_mail_on_creation(self):
-        conf.MAIL = True
+        settings.MAIL = True
         
         self.assertEquals(len(mail.outbox), 0)
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
@@ -1074,7 +1074,7 @@ class SentryMailTest(TestCase):
         self.assertEquals(out.subject, '[example.com] [Django] Error (EXTERNAL IP): /trigger-500')
 
     def test_mail_on_duplication(self):
-        conf.MAIL = True
+        settings.MAIL = True
         
         self.assertEquals(len(mail.outbox), 0)
         self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
@@ -1098,7 +1098,7 @@ class SentryMailTest(TestCase):
         self.assertEquals(out.subject, '[example.com] [Django] Error (EXTERNAL IP): /trigger-500')
 
     def test_url_prefix(self):
-        conf.URL_PREFIX = 'http://example.com'
+        settings.URL_PREFIX = 'http://example.com'
 
         group = GroupedMessage.objects.get()
         group.mail_admins(fail_silently=False)
@@ -1110,24 +1110,24 @@ class SentryMailTest(TestCase):
 class SentryHelpersTest(TestCase):
     def test_get_db_engine(self):
         from sentry.utils import get_db_engine
-        _databases = getattr(settings, 'DATABASES', {}).copy()
-        _engine = settings.DATABASE_ENGINE
+        _databases = getattr(django_settings, 'DATABASES', {}).copy()
+        _engine = django_settings.DATABASE_ENGINE
         
-        settings.DATABASE_ENGINE = ''
-        settings.DATABASES['default'] = {'ENGINE': 'blah.sqlite3'}
+        django_settings.DATABASE_ENGINE = ''
+        django_settings.DATABASES['default'] = {'ENGINE': 'blah.sqlite3'}
         
         self.assertEquals(get_db_engine(), 'sqlite3')
 
-        settings.DATABASE_ENGINE = 'mysql'
+        django_settings.DATABASE_ENGINE = 'mysql'
 
         self.assertEquals(get_db_engine(), 'sqlite3')
 
-        settings.DATABASES['default'] = {'ENGINE': 'blah.mysql'}
+        django_settings.DATABASES['default'] = {'ENGINE': 'blah.mysql'}
 
         self.assertEquals(get_db_engine(), 'mysql')
         
-        settings.DATABASES = _databases
-        settings.DATABASE_ENGINE = _engine
+        django_settings.DATABASES = _databases
+        django_settings.DATABASE_ENGINE = _engine
 
     def test_transform_handles_gettext_lazy(self):
         from sentry.utils import transform
@@ -1153,10 +1153,10 @@ class SentryClientTest(TestCase):
     urls = 'sentry.tests.urls'
 
     def setUp(self):
-        self._client = conf.CLIENT
+        self._client = settings.CLIENT
         
     def tearDown(self):
-        conf.CLIENT = self._client
+        settings.CLIENT = self._client
     
     def test_get_client(self):
         from sentry.client.log import LoggingSentryClient
@@ -1164,15 +1164,15 @@ class SentryClientTest(TestCase):
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
     
-        conf.CLIENT = 'sentry.client.log.LoggingSentryClient'
+        settings.CLIENT = 'sentry.client.log.LoggingSentryClient'
         
         self.assertEquals(get_client().__class__, LoggingSentryClient)
         self.assertEquals(get_client(), get_client())
     
-        conf.CLIENT = 'sentry.client.base.SentryClient'
+        settings.CLIENT = 'sentry.client.base.SentryClient'
     
     def test_logging_client(self):
-        conf.CLIENT = 'sentry.client.log.LoggingSentryClient'
+        settings.CLIENT = 'sentry.client.log.LoggingSentryClient'
         
         client = get_client()
         
@@ -1198,7 +1198,7 @@ class SentryClientTest(TestCase):
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
 
-        conf.CLIENT = 'sentry.client.celery.CelerySentryClient'
+        settings.CLIENT = 'sentry.client.celery.CelerySentryClient'
 
         self.assertEquals(get_client().__class__, CelerySentryClient)
         self.assertEquals(get_client(), get_client())
@@ -1209,7 +1209,7 @@ class SentryClientTest(TestCase):
         self.assertEqual(message.class_name, 'Exception')
         self.assertEqual(message.message, 'view exception')
 
-        conf.CLIENT = 'sentry.client.base.SentryClient'
+        settings.CLIENT = 'sentry.client.base.SentryClient'
 
     # XXX: need to fix behavior with threads so this test works correctly
     # def test_async_client(self):
@@ -1218,7 +1218,7 @@ class SentryClientTest(TestCase):
     #     self.assertEquals(get_client().__class__, SentryClient)
     #     self.assertEquals(get_client(), get_client())
     # 
-    #     conf.CLIENT = 'sentry.client.async.AsyncSentryClient'
+    #     settings.CLIENT = 'sentry.client.async.AsyncSentryClient'
     # 
     #     self.assertEquals(get_client().__class__, AsyncSentryClient)
     #     self.assertEquals(get_client(), get_client())
@@ -1229,7 +1229,7 @@ class SentryClientTest(TestCase):
     #     self.assertEqual(message.class_name, 'Exception')
     #     self.assertEqual(message.message, 'view exception')
     # 
-    #     conf.CLIENT = 'sentry.client.base.SentryClient'
+    #     settings.CLIENT = 'sentry.client.base.SentryClient'
 
 class SentryCommandTest(TestCase):
     fixtures = ['sentry/tests/fixtures/cleanup.json']
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index f0ae6fa57e..cc0b147cd5 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -7,12 +7,12 @@ from pprint import pformat
 from types import ClassType, TypeType
 
 import django
-from django.conf import settings
+from django.conf import settings as django_settings
 from django.utils.encoding import force_unicode
 from django.utils.hashcompat import md5_constructor, sha_constructor
 
 import sentry
-from sentry import conf
+from sentry.conf import settings
 
 _FILTER_CACHE = None
 def get_filters():
@@ -21,7 +21,7 @@ def get_filters():
     if _FILTER_CACHE is None:
         
         filters = []
-        for filter_ in conf.FILTERS:
+        for filter_ in settings.FILTERS:
             if filter_.endswith('sentry.filters.SearchFilter'):
                 continue
             module_name, class_name = filter_.rsplit('.', 1)
@@ -40,10 +40,10 @@ def get_filters():
 def get_db_engine(alias='default'):
     has_multidb = django.VERSION >= (1, 2)
     if has_multidb:
-        value = settings.DATABASES[alias]['ENGINE']
+        value = django_settings.DATABASES[alias]['ENGINE']
     else:
         assert alias == 'default', 'You cannot fetch a database engine other than the default on Django < 1.2'
-        value = settings.DATABASE_ENGINE
+        value = django_settings.DATABASE_ENGINE
     return value.rsplit('.', 1)[-1]
 
 def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
@@ -133,7 +133,7 @@ def get_installed_apps():
     Generate a list of modules in settings.INSTALLED_APPS.
     """
     out = set()
-    for app in settings.INSTALLED_APPS:
+    for app in django_settings.INSTALLED_APPS:
         out.add(app)
     return out
 
@@ -203,7 +203,7 @@ class cached_property(object):
 
 def get_versions(module_list=None):
     if not module_list:
-        module_list = settings.INSTALLED_APPS + ['django']
+        module_list = django_settings.INSTALLED_APPS + ['django']
 
     ext_module_list = set()
     for m in module_list:
@@ -233,13 +233,13 @@ def get_versions(module_list=None):
 
 def shorten(var):
     var = transform(var)
-    if isinstance(var, basestring) and len(var) > conf.MAX_LENGTH_STRING:
-        var = var[:conf.MAX_LENGTH_STRING] + '...'
-    elif isinstance(var, (list, tuple, set, frozenset)) and len(var) > conf.MAX_LENGTH_LIST:
+    if isinstance(var, basestring) and len(var) > settings.MAX_LENGTH_STRING:
+        var = var[:settings.MAX_LENGTH_STRING] + '...'
+    elif isinstance(var, (list, tuple, set, frozenset)) and len(var) > settings.MAX_LENGTH_LIST:
         # TODO: we should write a real API for storing some metadata with vars when
         # we get around to doing ref storage
         # TODO: when we finish the above, we should also implement this for dicts
-        var = list(var)[:conf.MAX_LENGTH_LIST] + ['...', '(%d more elements)' % (len(var) - conf.MAX_LENGTH_LIST,)]
+        var = list(var)[:settings.MAX_LENGTH_LIST] + ['...', '(%d more elements)' % (len(var) - settings.MAX_LENGTH_LIST,)]
     return var
 
 def is_float(var):
@@ -250,7 +250,7 @@ def is_float(var):
     return True
 
 def get_signature(message, timestamp):
-    return hmac.new(conf.KEY, '%s %s' % (timestamp, message), sha_constructor).hexdigest()
+    return hmac.new(settings.KEY, '%s %s' % (timestamp, message), sha_constructor).hexdigest()
 
 def get_auth_header(signature, timestamp, client):
     return 'Sentry sentry_signature=%s, sentry_timestamp=%s, sentry_client=%s' % (
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 92741d9683..8b9fcf4257 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -6,10 +6,10 @@ import warnings
 from django.db import models
 from django.db.models import signals
 
-from sentry import conf
+from sentry.conf import settings
 from sentry.utils import construct_checksum, get_db_engine
 
-assert not conf.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
+assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
 logger = logging.getLogger('sentry.errors')
 
@@ -40,8 +40,8 @@ class SentryManager(models.Manager):
 
     def get_query_set(self):
         qs = super(SentryManager, self).get_query_set()
-        if conf.DATABASE_USING:
-            qs = qs.using(conf.DATABASE_USING)
+        if settings.DATABASE_USING:
+            qs = qs.using(settings.DATABASE_USING)
         return qs
 
     def from_kwargs(self, **kwargs):
@@ -53,7 +53,7 @@ class SentryManager(models.Manager):
         view = kwargs.pop('view', None)
         logger_name = kwargs.pop('logger', 'root')
         url = kwargs.pop('url', None)
-        server_name = kwargs.pop('server_name', conf.CLIENT)
+        server_name = kwargs.pop('server_name', settings.CLIENT)
         site = kwargs.pop('site', None)
         data = kwargs.pop('data', {}) or {}
         message_id = kwargs.pop('message_id', None)
diff --git a/sentry/utils/router.py b/sentry/utils/router.py
index e4dc051e2b..2dd361a3ed 100644
--- a/sentry/utils/router.py
+++ b/sentry/utils/router.py
@@ -1,15 +1,15 @@
-from sentry import conf
+from sentry.conf import settings
 
 class SentryRouter(object):
     def db_for_write(self, model, **hints):
         if model._meta.app_label == 'sentry':
-            return conf.DATABASE_USING
+            return settings.DATABASE_USING
 
     def db_for_read(self, model, **hints):
         return self.db_for_write(model, **hints)
 
     def allow_syncdb(self, db, model):
-        sentry_db = conf.DATABASE_USING
+        sentry_db = settings.DATABASE_USING
         if not sentry_db:
             return None
         if model._meta.app_label == 'sentry' and db != sentry_db:
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index e0b90124a1..43bd4cf3fc 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -3,7 +3,7 @@ import re
 
 from django.conf.urls.defaults import *
 
-from sentry.conf import KEY
+from sentry.conf.settings import KEY
 from sentry.web import views, feeds
 
 SENTRY_ROOT = os.path.dirname(__file__) 
diff --git a/sentry/web/views.py b/sentry/web/views.py
index b09fba1216..95f54ccfb6 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -22,7 +22,7 @@ from django.utils.encoding import smart_str
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
-from sentry import conf
+from sentry.conf import settings
 from sentry.utils import get_filters, is_float, get_signature, parse_auth_header
 from sentry.models import GroupedMessage, Message
 from sentry.plugins import GroupActionProvider
@@ -35,7 +35,7 @@ def render_to_response(template, context={}):
     from django.shortcuts import render_to_response
 
     context.update({
-        'has_search': bool(conf.SEARCH_ENGINE),
+        'has_search': bool(settings.SEARCH_ENGINE),
     })
     return render_to_response(template, context)
 
@@ -63,7 +63,7 @@ def get_search_query_set(query):
 
 def login_required(func):
     def wrapped(request, *args, **kwargs):
-        if not conf.PUBLIC:
+        if not settings.PUBLIC:
             if not request.user.is_authenticated():
                 return HttpResponseRedirect(reverse('sentry-login'))
             if not request.user.has_perm('sentry.can_view'):
@@ -112,7 +112,7 @@ def search(request):
         page = 1
 
     query = request.GET.get('q')
-    has_search = bool(conf.SEARCH_ENGINE)
+    has_search = bool(settings.SEARCH_ENGINE)
 
     if query:
         if uuid_re.match(query):
@@ -391,7 +391,7 @@ def store(request):
         # Legacy request (deprecated as of 2.0)
         key = request.POST.get('key')
         
-        if key != conf.KEY:
+        if key != settings.KEY:
             warnings.warn('A client is sending the `key` parameter, which will be removed in Sentry 2.0', DeprecationWarning)
             return HttpResponseForbidden('Invalid credentials')
 
@@ -461,7 +461,7 @@ def static_media(request, path):
     import stat
     import urllib
 
-    document_root = os.path.join(conf.ROOT, 'static')
+    document_root = os.path.join(settings.ROOT, 'static')
     
     path = posixpath.normpath(urllib.unquote(path))
     path = path.lstrip('/')
diff --git a/sentry/wsgi.py b/sentry/wsgi.py
index 1434697864..f51859c6ea 100644
--- a/sentry/wsgi.py
+++ b/sentry/wsgi.py
@@ -17,7 +17,6 @@ import django.core.handlers.wsgi
 # Run WSGI handler for the application
 application = django.core.handlers.wsgi.WSGIHandler()
 
-from django.conf import settings
 if settings.SESSION_FILE_PATH:
     try:
         os.makedirs(settings.SESSION_FILE_PATH)
