commit eb93f663724d157840f7d5c781eedf12781f564c
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon May 8 12:57:14 2017 -0700

    delete repos without commits immediately, reduce delay to an hour for others (#5352)
    
    * delete repos without commits immediately, reduce delay to an hour for others
    
    * keep repo deletion async
    
    * remove unneeded comment
    
    * fix tests

diff --git a/src/sentry/api/endpoints/organization_repository_details.py b/src/sentry/api/endpoints/organization_repository_details.py
index 6d13dd2fd7..526c8c48ab 100644
--- a/src/sentry/api/endpoints/organization_repository_details.py
+++ b/src/sentry/api/endpoints/organization_repository_details.py
@@ -11,12 +11,16 @@ from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.constants import ObjectStatus
-from sentry.models import Repository
+from sentry.models import Commit, Repository
 from sentry.tasks.deletion import delete_repository
 
 delete_logger = logging.getLogger('sentry.deletions.api')
 
 
+def get_transaction_id():
+    return uuid4().hex
+
+
 class RepositorySerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=(
         ('visible', 'visible'),
@@ -72,8 +76,14 @@ class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
         if updated:
             repo.status = ObjectStatus.PENDING_DELETION
 
-            transaction_id = uuid4().hex
-            countdown = 86400
+            transaction_id = get_transaction_id()
+            # if repo doesn't have commits, delete immediately
+            has_commits = Commit.objects.filter(
+                repository_id=repo.id,
+                organization_id=organization.id,
+            ).exists()
+
+            countdown = 3600 if has_commits else 0
 
             delete_repository.apply_async(
                 kwargs={
diff --git a/tests/sentry/api/endpoints/test_organization_repository_details.py b/tests/sentry/api/endpoints/test_organization_repository_details.py
index f57ddbc5e0..09fef303f0 100644
--- a/tests/sentry/api/endpoints/test_organization_repository_details.py
+++ b/tests/sentry/api/endpoints/test_organization_repository_details.py
@@ -1,14 +1,50 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from django.core.urlresolvers import reverse
 
 from sentry.constants import ObjectStatus
-from sentry.models import Repository
+from sentry.models import Commit, Repository
 from sentry.testutils import APITestCase
 
 
 class OrganizationRepositoryDeleteTest(APITestCase):
-    def test_simple(self):
+    @patch('sentry.api.endpoints.organization_repository_details.get_transaction_id')
+    @patch('sentry.api.endpoints.organization_repository_details.delete_repository')
+    def test_delete_no_commits(self, mock_delete_repository, mock_get_transaction_id):
+        mock_get_transaction_id.return_value = '1'
+
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        repo = Repository.objects.create(
+            name='example',
+            organization_id=org.id,
+        )
+
+        url = reverse('sentry-api-0-organization-repository-details', args=[
+            org.slug, repo.id,
+        ])
+        response = self.client.delete(url)
+        assert response.status_code == 202, (response.status_code, response.content)
+
+        repo = Repository.objects.get(id=repo.id)
+        assert repo.status == ObjectStatus.PENDING_DELETION
+
+        mock_delete_repository.apply_async.assert_called_with(
+            kwargs={
+                'object_id': repo.id,
+                'transaction_id': '1',
+                'actor_id': self.user.id,
+            },
+            countdown=0,
+        )
+
+    @patch('sentry.api.endpoints.organization_repository_details.get_transaction_id')
+    @patch('sentry.api.endpoints.organization_repository_details.delete_repository')
+    def test_delete_with_commits(self, mock_delete_repository, mock_get_transaction_id):
+        mock_get_transaction_id.return_value = '1'
         self.login_as(user=self.user)
 
         org = self.create_organization(owner=self.user, name='baz')
@@ -16,6 +52,11 @@ class OrganizationRepositoryDeleteTest(APITestCase):
             name='example',
             organization_id=org.id,
         )
+        Commit.objects.create(
+            repository_id=repo.id,
+            key='a' * 40,
+            organization_id=org.id,
+        )
 
         url = reverse('sentry-api-0-organization-repository-details', args=[
             org.slug, repo.id,
@@ -26,3 +67,11 @@ class OrganizationRepositoryDeleteTest(APITestCase):
 
         repo = Repository.objects.get(id=repo.id)
         assert repo.status == ObjectStatus.PENDING_DELETION
+        mock_delete_repository.apply_async.assert_called_with(
+            kwargs={
+                'object_id': repo.id,
+                'transaction_id': '1',
+                'actor_id': self.user.id,
+            },
+            countdown=3600,
+        )
