commit cae4e610027363998e3a2842c8d02fd4657c57ce
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 21 09:31:21 2018 -0800

    feat(ui): Change RangeSlider to have `allowedValues` + cleanup (#7295)
    
    * refactor module paths of common "styles", and form "controls"
    * rangeSlider - allowedValues + add tests
    * change PanelAlert to accept margin sizes

diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index cfeeded81f..ca576a20cc 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -10,9 +10,10 @@ import {
   PasswordField,
   BooleanField,
 } from 'sentry-ui/forms';
+import NewBooleanField from 'settings-ui/forms/booleanField';
 import RadioField from 'settings-ui/forms/radioField';
-import RadioGroup from 'settings-ui/forms/radioGroup';
-import RangeSlider from 'settings-ui/forms/rangeSlider';
+import RadioGroup from 'settings-ui/forms/controls/radioGroup';
+import RangeSlider from 'settings-ui/forms/controls/rangeSlider';
 import Form from 'settings-ui/forms/form';
 import FormField from 'settings-ui/forms/formField';
 import TextField from 'settings-ui/forms/textField';
@@ -61,10 +62,37 @@ storiesOf('Forms/Form', module)
     ))
   );
 
-storiesOf('Forms/Fields', module)
+storiesOf('Forms/Fields/Old', module)
+  .add(
+    'PasswordField',
+    withInfo({
+      text: 'Password input',
+      propTablesExclude: [LegacyForm],
+    })(() => (
+      <LegacyForm>
+        <PasswordField hasSavedValue name="password" label="password" />
+      </LegacyForm>
+    ))
+  )
+  .add(
+    'BooleanField',
+    withInfo({
+      text: 'Boolean field (i.e. checkbox)',
+      propTablesExclude: [LegacyForm],
+    })(() => (
+      <LegacyForm>
+        <BooleanField name="field" />
+      </LegacyForm>
+    ))
+  );
+
+storiesOf('Forms/Fields/New', module)
   .add(
     'TextField',
-    withInfo('Simple text input')(() => (
+    withInfo({
+      text: 'Simple text input',
+      propTablesExclude: [Form],
+    })(() => (
       <Form initialData={{context: {location: 'cat'}}}>
         <TextField
           name="simpletextfield"
@@ -80,25 +108,23 @@ storiesOf('Forms/Fields', module)
       </Form>
     ))
   )
-  .add(
-    'PasswordField',
-    withInfo('Password input')(() => (
-      <LegacyForm>
-        <PasswordField hasSavedValue name="password" label="password" />
-      </LegacyForm>
-    ))
-  )
   .add(
     'BooleanField',
-    withInfo('Boolean field (i.e. checkbox)')(() => (
-      <LegacyForm>
-        <BooleanField name="field" />
-      </LegacyForm>
+    withInfo({
+      text: 'Boolean field (i.e. checkbox)',
+      propTablesExclude: [Form],
+    })(() => (
+      <Form>
+        <NewBooleanField name="field" label="New Boolean Field" />
+      </Form>
     ))
   )
   .add(
     'RadioField',
-    withInfo('Radio field')(() => (
+    withInfo({
+      text: 'Radio field',
+      propTablesExclude: [Form],
+    })(() => (
       <Form>
         <RadioField
           name="radio"
@@ -114,7 +140,10 @@ storiesOf('Forms/Fields', module)
   )
   .add(
     'Non-inline field',
-    withInfo('Radio field')(() => (
+    withInfo({
+      text: 'Radio Group used w/ FormField',
+      propTablesExclude: [Form],
+    })(() => (
       <Form>
         <FormField name="radio" label="Radio Field" inline={false}>
           {({value, label, onChange}) => (
@@ -139,12 +168,13 @@ storiesOf('Forms/Fields', module)
       <div style={{backgroundColor: '#fff', padding: 20}}>
         <RangeSlider
           name="rangeField"
-          label="Toaster Strudle"
-          plural="Toaster Strudles"
           min={1}
           max={10}
           step={1}
-          initialValue={1}
+          value={1}
+          formatLabel={value => {
+            return `${value} Toaster Strudle${value > 1 ? 's' : ''}`;
+          }}
         />
       </div>
     ))
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/animations.jsx b/src/sentry/static/sentry/app/styles/animations.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/forms/styled/animations.jsx
rename to src/sentry/static/sentry/app/styles/animations.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx b/src/sentry/static/sentry/app/styles/input.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/forms/styled/styles.jsx
rename to src/sentry/static/sentry/app/styles/input.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
index aded7391c7..b3a4fa28cb 100644
--- a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
@@ -13,7 +13,7 @@ import LoadingIndicator from '../../../components/loadingIndicator';
 import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
 import PanelHeader from '../components/panelHeader';
-import RadioGroup from '../components/forms/radioGroup';
+import RadioGroup from '../components/forms/controls/radioGroup';
 import SentryTypes from '../../../proptypes';
 
 const AccountAvatar = createReactClass({
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/input.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/input.jsx
new file mode 100644
index 0000000000..b550235345
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/input.jsx
@@ -0,0 +1,9 @@
+import styled from 'react-emotion';
+
+import {inputStyles} from '../../../../../styles/input';
+
+const Input = styled.input`
+  ${inputStyles};
+`;
+
+export default Input;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.jsx
similarity index 97%
rename from src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.jsx
index e655239487..184c8f4858 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 import styled from 'react-emotion';
 import PropTypes from 'prop-types';
 
-import {growIn} from './styled/animations';
+import {growIn} from '../../../../../styles/animations';
 
 const RadioGroup = ({value, choices, label, onChange, ...props}) => {
   const isSelected = id => {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
similarity index 50%
rename from src/sentry/static/sentry/app/views/settings/components/forms/rangeSlider.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index f16afdc00a..0fafdb3b8a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -107,47 +107,108 @@ const Label = styled.label`
 
 class RangeSlider extends React.Component {
   static propTypes = {
-    initialValue: PropTypes.number.isRequired,
+    value: PropTypes.number.isRequired,
     name: PropTypes.string.isRequired,
     min: PropTypes.number.isRequired,
     max: PropTypes.number.isRequired,
-    step: PropTypes.number.isRequired,
-    label: PropTypes.string,
-    plural: PropTypes.string,
+    step: PropTypes.number,
+    onChange: PropTypes.func,
+
+    /**
+     * Render prop for slider's label
+     * Is passed the value as an argument
+     */
+    formatLabel: PropTypes.func,
+
+    /**
+     * Array of allowed values. Make sure `value` is in this list.
+     * THIS NEEDS TO BE SORTED
+     */
+    allowedValues: PropTypes.arrayOf(PropTypes.number),
+
+    /**
+     * This is called when *any* MouseUp or KeyUp event happens.
+     * Used for "smart" Fields to trigger a "blur" event. `onChange` can
+     * be triggered quite frequently
+     */
+    onBlur: PropTypes.func,
   };
 
   constructor(props) {
     super(props);
-    this.state = {value: props.initialValue};
-    this.handleValue = this.handleValue.bind(this);
+
+    let state = {sliderValue: props.value};
+    if (props.allowedValues) {
+      // With `allowedValues` sliderValue will be the index to value in `allowedValues`
+      // This is so we can snap the rangeSlider using `step`
+      // This means that the range slider will have a uniform `step` in the UI
+      // and scale won't match `allowedValues
+      // e.g. with allowedValues = [0, 100, 1000, 10000] - in UI we'll have values = [0, 3] w/ step of 1
+      // so it always snaps at 25% width
+      state.sliderValue = props.allowedValues.indexOf(props.value);
+    }
+
+    this.state = state;
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if (typeof nextProps.value !== 'undefined') {
+      this.setState({value: nextProps.value});
+    }
   }
 
-  handleValue = e => {
+  handleInput = e => {
+    let {allowedValues} = this.props;
+    let sliderValue = parseInt(e.target.value, 10);
+    let value;
+
+    if (allowedValues) {
+      // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`
+      value = allowedValues[sliderValue];
+    } else {
+      value = sliderValue;
+    }
+
     this.setState({
-      value: e.currentTarget.value,
+      sliderValue,
     });
+
+    if (this.props.onChange) {
+      this.props.onChange(value, e);
+    }
   };
 
   render() {
-    let {name, label, plural, min, max, step} = this.props;
-    let {value} = this.state;
+    let {name, min, max, step, allowedValues, formatLabel} = this.props;
+    let {sliderValue} = this.state;
+    let actualValue = sliderValue;
+    let displayValue = actualValue;
+
+    if (allowedValues) {
+      step = 1;
+      min = 0;
+      max = allowedValues.length - 1;
+      actualValue = allowedValues[sliderValue];
+      displayValue = typeof actualValue !== 'undefined' ? actualValue : 'Invalid value';
+    }
 
-    let renderedLabel;
-    value == 1 ? (renderedLabel = label) : (renderedLabel = plural);
+    displayValue =
+      typeof formatLabel === 'function' ? formatLabel(actualValue) : displayValue;
 
     return (
       <div>
-        <Label for={name}>
-          {value} {renderedLabel}
-        </Label>
+        <Label for={name}>{displayValue}</Label>
         <Slider
           type="range"
           name={name}
           min={min}
           max={max}
           step={step}
-          onInput={this.handleValue}
-          defaultValue={value}
+          onInput={this.handleInput}
+          onChange={() => {}}
+          onMouseUp={e => this.props.onBlur(e)}
+          onKeyUp={e => this.props.onBlur(e)}
+          value={sliderValue}
         />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/textarea.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/textarea.jsx
new file mode 100644
index 0000000000..7eaaafe4d6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/textarea.jsx
@@ -0,0 +1,8 @@
+import styled from 'react-emotion';
+
+import {inputStyles} from '../../../../../styles/input';
+
+const TextArea = styled.textarea`
+  ${inputStyles};
+`;
+export default TextArea;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 16b624301e..d58c70d64e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -6,7 +6,7 @@ import ReactDOM from 'react-dom';
 import styled from 'react-emotion';
 
 import {defined} from '../../../../../utils';
-import {pulse, fadeOut} from '../styled/animations';
+import {pulse, fadeOut} from '../../../../../styles/animations';
 import FormFieldControl from './formFieldControl';
 import FormFieldControlState from './formFieldControlState';
 import FormFieldDescription from './formFieldDescription';
@@ -16,7 +16,7 @@ import FormFieldRequiredBadge from './formFieldRequiredBadge';
 import FormFieldWrapper from './formFieldWrapper';
 import FormState from '../../../../../components/forms/state';
 import InlineSvg from '../../../../../components/inlineSvg';
-import Spinner from '../styled/spinner';
+import Spinner from '../spinner';
 import returnButton from '../returnButton';
 
 // This wraps Control + ControlError message
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
index eaa08989d0..ab106eea0b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import FormField from './formField';
-import Input from './styled/input';
+import Input from './controls/input';
 
 export default class InputField extends React.Component {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
index 63dde73247..89519155a9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 
-import RadioGroup from './radioGroup';
+import RadioGroup from './controls/radioGroup';
 import InputField from './inputField';
 
 class RadioField extends React.Component {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
new file mode 100644
index 0000000000..7d8ea41bde
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
@@ -0,0 +1,29 @@
+import React from 'react';
+
+import InputField from './inputField';
+import RangeSlider from './controls/rangeSlider';
+
+export default class RangeField extends React.Component {
+  onChange = (onChange, onBlur, value, e) => {
+    // We need to toggle current value because Switch is not an input
+    onChange(value, e);
+    // onBlur(value, e);
+  };
+
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        field={({onChange, onBlur, value, disabled, ...props}) => (
+          <RangeSlider
+            {...props}
+            isDisabled={disabled}
+            value={value}
+            onBlur={onBlur}
+            onChange={this.onChange.bind(this, onChange, onBlur)}
+          />
+        )}
+      />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/spinner.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/spinner.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/forms/styled/spinner.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/spinner.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/input.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/input.jsx
deleted file mode 100644
index 3063434a49..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/forms/styled/input.jsx
+++ /dev/null
@@ -1,9 +0,0 @@
-import styled from 'react-emotion';
-
-import {inputStyles} from './styles';
-
-const SettingsInputField = styled.input`
-  ${inputStyles};
-`;
-
-export default SettingsInputField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/textarea.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/textarea.jsx
deleted file mode 100644
index b09e8c7be0..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/forms/styled/textarea.jsx
+++ /dev/null
@@ -1,8 +0,0 @@
-import styled from 'react-emotion';
-
-import {inputStyles} from './styles';
-
-const SettingsInputField = styled.textarea`
-  ${inputStyles};
-`;
-export default SettingsInputField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
index ff9fd59297..e6dc8307bf 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import styled from 'react-emotion';
 
-import {inputStyles} from './styled/styles';
+import {inputStyles} from '../../../../styles/input';
 import {selectText} from '../../../../utils/selectText';
 import Button from '../../../../components/buttons/button';
 import Clipboard from '../../../../components/clipboard';
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx
index 345466953c..def24fd282 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textareaField.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 import InputField from './inputField';
-import Textarea from './styled/textarea';
+import Textarea from './controls/textarea';
 
 export default class TextareaField extends InputField {
   render() {
diff --git a/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx b/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx
index 5919131b38..e2393a5441 100644
--- a/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx
@@ -1,11 +1,38 @@
+import {withTheme} from 'emotion-theming';
+import PropTypes from 'prop-types';
+import React from 'react';
 import styled from 'react-emotion';
 
 import Alert from '../../../components/alert';
 
-const PanelAlert = styled(Alert)`
-  margin: ${p =>
-    `-${p.theme.grid * 2 + 1}px -${p.theme.grid * 2 + 1}px ${p.theme.grid * 3}px`};
+// Margin bottom should probably be a different prop
+const StyledPanelAlert = styled(Alert)`
+  margin: ${p => `-${p.m * 2 + 1}px -${p.m * 2 + 1}px ${p.mb * 3}px`};
   border-radius: 0;
 `;
 
-export default PanelAlert;
+class PanelAlert extends React.Component {
+  static propTypes = {
+    /**
+     * Number of grid units to use for component's negative margin.
+     */
+    m: PropTypes.number,
+    /**
+     * margin-bottom
+     */
+    mb: PropTypes.number,
+    theme: PropTypes.object,
+  };
+
+  static defaultProps = {};
+
+  render() {
+    let {m, mb, theme, ...props} = this.props;
+    let marginSize = typeof m !== 'undefined' ? m : theme.grid;
+    let marginBottom = typeof mb !== 'undefined' ? mb : theme.grid;
+
+    return <StyledPanelAlert {...props} m={marginSize} mb={marginBottom} />;
+  }
+}
+
+export default withTheme(PanelAlert);
diff --git a/tests/js/spec/components/forms/radioGroup.spec.jsx b/tests/js/spec/components/forms/radioGroup.spec.jsx
index eefd60a000..64fc608d5c 100644
--- a/tests/js/spec/components/forms/radioGroup.spec.jsx
+++ b/tests/js/spec/components/forms/radioGroup.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount, shallow} from 'enzyme';
 
-import RadioGroup from 'app/views/settings/components/forms/radioGroup';
+import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';
 
 describe('RadioGroup', function() {
   describe('render()', function() {
diff --git a/tests/js/spec/components/rangeSlider.spec.jsx b/tests/js/spec/components/rangeSlider.spec.jsx
new file mode 100644
index 0000000000..1d52b48f17
--- /dev/null
+++ b/tests/js/spec/components/rangeSlider.spec.jsx
@@ -0,0 +1,91 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
+
+describe('RangeSlider', function() {
+  let creator = props => (
+    <RangeSlider name="test" value={5} min={0} max={10} onChange={() => {}} {...props} />
+  );
+
+  it('changes value', function() {
+    let wrapper = shallow(creator());
+    expect(wrapper.state('sliderValue')).toBe(5);
+    wrapper.find('Slider').simulate('input', {target: {value: 7}});
+    expect(wrapper.state('sliderValue')).toBe(7);
+  });
+
+  it('has right label', function() {
+    let wrapper = mount(creator());
+    expect(wrapper.find('Label').text()).toBe('5');
+    wrapper.find('Slider').simulate('input', {target: {value: 7}});
+    expect(wrapper.find('Label').text()).toBe('7');
+  });
+
+  it('can use formatLabel', function() {
+    let wrapper = mount(
+      creator({
+        formatLabel: value => (
+          <div className="test">{value === 7 ? 'SEVEN!' : value + 1}</div>
+        ),
+      })
+    );
+    expect(wrapper.find('.test')).toHaveLength(1);
+    expect(wrapper.find('.test').text()).toBe('6');
+    wrapper.find('Slider').simulate('input', {target: {value: 7}});
+    expect(wrapper.find('.test').text()).toBe('SEVEN!');
+  });
+
+  it('calls onChange', function() {
+    let onChange = jest.fn();
+    let wrapper = shallow(
+      creator({
+        onChange,
+      })
+    );
+    expect(onChange).not.toHaveBeenCalled();
+    wrapper.find('Slider').simulate('input', {target: {value: 7}});
+    expect(onChange).toHaveBeenCalledWith(7, expect.anything());
+  });
+
+  it('can provide a list of allowedValues', function() {
+    let onChange = jest.fn();
+    let wrapper = mount(
+      creator({
+        // support unsorted arrays?
+        allowedValues: [0, 100, 1000, 10000, 20000],
+        value: 1000,
+        onChange,
+      })
+    );
+
+    // With `allowedValues` sliderValue will be the index to value in `allowedValues`
+    expect(wrapper.state('sliderValue')).toBe(2);
+    expect(wrapper.find('Label').text()).toBe('1000');
+
+    wrapper.find('Slider').simulate('input', {target: {value: 0}});
+    expect(wrapper.state('sliderValue')).toBe(0);
+    expect(wrapper.find('Label').text()).toBe('0');
+
+    // onChange will callback with a value from `allowedValues`
+    expect(onChange).toHaveBeenCalledWith(0, expect.anything());
+  });
+
+  it('handles invalid values', function() {
+    let onChange = jest.fn();
+    let wrapper = mount(
+      creator({
+        // support unsorted arrays?
+        allowedValues: [0, 100, 1000, 10000, 20000],
+        value: 1000,
+        onChange,
+      })
+    );
+
+    wrapper.find('Slider').simulate('input', {target: {value: -1}});
+    expect(wrapper.state('sliderValue')).toBe(-1);
+    expect(wrapper.find('Label').text()).toBe('Invalid value');
+
+    // onChange will callback with a value from `allowedValues`
+    expect(onChange).toHaveBeenCalledWith(undefined, expect.anything());
+  });
+});
