commit b93513aae33ad023b2dde0ece223d12769077cef
Author: Jess MacQueen <jess@getsentry.com>
Date:   Tue May 10 21:31:18 2016 -0700

    remove null on ident, make serializer more efficient, add choices to avatar_type

diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 8b5fc94141..4855417889 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -9,6 +9,15 @@ from sentry.utils.avatar import get_gravatar_url
 
 @register(User)
 class UserSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        avatars = {
+            a.user_id: a
+            for a in UserAvatar.objects.filter(
+                user__in=item_list
+            )
+        }
+        return {u: {'avatar': avatars.get(u.id)} for u in item_list if u}
+
     def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
@@ -42,15 +51,13 @@ class UserSerializer(Serializer):
                 'clock24Hours': options.get('clock_24_hours') or False,
             }
 
-        try:
-            avatar = UserAvatar.objects.get(user=obj)
-        except UserAvatar.DoesNotExist:
-            avatar = {'avatarType': 'letter_avatar', 'avatarUuid': None}
-        else:
+        if attrs.get('avatar'):
             avatar = {
-                'avatarType': avatar.get_avatar_type(),
-                'avatarUuid': avatar.ident if avatar.file else None
+                'avatarType': attrs['avatar'].get_avatar_type_display(),
+                'avatarUuid': attrs['avatar'].ident if attrs['avatar'].file else None
             }
+        else:
+            avatar = {'avatarType': 'letter_avatar', 'avatarUuid': None}
         d['avatar'] = avatar
 
         return d
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 8b2836465a..5dfd43e1d5 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -96,7 +96,7 @@ class User(BaseModel, AbstractBaseUser):
     def get_avatar_type(self):
         avatar = self.avatar.first()
         if avatar:
-            return avatar.get_avatar_type()
+            return avatar.get_avatar_type_display()
         return 'letter_avatar'
 
     def merge_to(from_user, to_user):
diff --git a/src/sentry/models/useravatar.py b/src/sentry/models/useravatar.py
index 38225ef03a..b5ae5a8978 100644
--- a/src/sentry/models/useravatar.py
+++ b/src/sentry/models/useravatar.py
@@ -28,8 +28,8 @@ class UserAvatar(Model):
 
     user = FlexibleForeignKey('sentry.User', unique=True, related_name='avatar')
     file = FlexibleForeignKey('sentry.File', unique=True, null=True, on_delete=models.SET_NULL)
-    ident = models.CharField(max_length=32, unique=True, db_index=True, null=True)
-    avatar_type = models.PositiveSmallIntegerField(default=0)
+    ident = models.CharField(max_length=32, unique=True, db_index=True)
+    avatar_type = models.PositiveSmallIntegerField(default=0, choices=AVATAR_TYPES)
 
     class Meta:
         app_label = 'sentry'
@@ -45,9 +45,6 @@ class UserAvatar(Model):
             self.file.delete()
         return super(UserAvatar, self).delete(*args, **kwargs)
 
-    def get_avatar_type(self):
-        return [n for i, n in self.AVATAR_TYPES if i == self.avatar_type][0]
-
     def get_cache_key(self, size):
         return 'avatar:%s:%s' % (self.user_id, size)
 
diff --git a/src/sentry/south_migrations/0251_auto__add_useravatar.py b/src/sentry/south_migrations/0251_auto__add_useravatar.py
index 6320dbe270..38ec0b0940 100644
--- a/src/sentry/south_migrations/0251_auto__add_useravatar.py
+++ b/src/sentry/south_migrations/0251_auto__add_useravatar.py
@@ -13,7 +13,7 @@ class Migration(SchemaMigration):
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(related_name='avatar', unique=True, to=orm['sentry.User'])),
             ('file', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.File'], unique=True, null=True, on_delete=models.SET_NULL)),
-            ('ident', self.gf('django.db.models.fields.CharField')(max_length=32, unique=True, null=True, db_index=True)),
+            ('ident', self.gf('django.db.models.fields.CharField')(unique=True, max_length=32, db_index=True)),
             ('avatar_type', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0)),
         ))
         db.send_create_signal('sentry', ['UserAvatar'])
@@ -89,7 +89,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 17, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 18, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -568,7 +568,7 @@ class Migration(SchemaMigration):
             'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
             'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
         },
         'sentry.useroption': {
diff --git a/src/sentry/south_migrations/0252_default_users_to_gravatar.py b/src/sentry/south_migrations/0252_default_users_to_gravatar.py
index 2e87145bba..2f6b66a234 100644
--- a/src/sentry/south_migrations/0252_default_users_to_gravatar.py
+++ b/src/sentry/south_migrations/0252_default_users_to_gravatar.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
+import uuid
+
 from south.utils import datetime_utils as datetime
 from south.db import db
 from south.v2 import DataMigration
@@ -11,8 +13,9 @@ class Migration(DataMigration):
         for user in orm.User.objects.all():
             orm.UserAvatar.objects.create(user=user,
                                           file=None,
-                                          ident=None,
+                                          ident=uuid.uuid4().hex,
                                           avatar_type=2)
+
     def backwards(self, orm):
         "Write your backwards methods here."
 
@@ -81,7 +84,7 @@ class Migration(DataMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 17, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 5, 18, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -560,7 +563,7 @@ class Migration(DataMigration):
             'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
             'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
         },
         'sentry.useroption': {
diff --git a/tests/sentry/api/endpoints/test_user_avatar.py b/tests/sentry/api/endpoints/test_user_avatar.py
index 83f952cb28..81ce36bf13 100644
--- a/tests/sentry/api/endpoints/test_user_avatar.py
+++ b/tests/sentry/api/endpoints/test_user_avatar.py
@@ -34,7 +34,7 @@ class UserAvatarTest(APITestCase):
 
         avatar = UserAvatar.objects.get(user=user)
         assert response.status_code == 200, response.content
-        assert avatar.get_avatar_type() == 'gravatar'
+        assert avatar.get_avatar_type_display() == 'gravatar'
 
     def test_put_bad(self):
         user = self.create_user(email='a@example.com')
@@ -48,11 +48,11 @@ class UserAvatarTest(APITestCase):
 
         avatar = UserAvatar.objects.get(user=user)
         assert response.status_code == 400
-        assert avatar.get_avatar_type() == 'letter_avatar'
+        assert avatar.get_avatar_type_display() == 'letter_avatar'
 
         response = self.client.put(url, data={'avatar_type': 'foo'}, format='json')
         assert response.status_code == 400
-        assert avatar.get_avatar_type() == 'letter_avatar'
+        assert avatar.get_avatar_type_display() == 'letter_avatar'
 
     def test_put_forbidden(self):
         user = self.create_user(email='a@example.com')
