commit b80194fa5016e745588720fe64bd4066b393d3e1
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 13 11:33:31 2010 -0700

    Added panels and widget argument to GroupActionProvider. Refactor servers and urls into plugins. Moved redmine plugin into sentry_redmine.

diff --git a/README.rst b/README.rst
index 0976ac3c26..40ff860899 100644
--- a/README.rst
+++ b/README.rst
@@ -226,6 +226,22 @@ Set up a viewer server (or use your existing application server) and add sentry
 
 Now enjoy your beautiful new error tracking at ``/sentry/``.
 
+=======
+Plugins
+=======
+
+_The plugin interface is a work in progress and will most likely change before a final version._
+
+Add plugins to your installed apps, and voila::
+
+	INSTALLED_APPS = [
+	  ...
+	  'sentry.plugins.sentry_servers',
+	  'sentry.plugins.sentry_urls',
+	]
+
+More and better docs coming soon.
+
 ===
 API
 ===
diff --git a/example_project/settings.py b/example_project/settings.py
index dd2d6af933..901c8eed3e 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -100,7 +100,9 @@ INSTALLED_APPS = (
     'django.contrib.messages',
     'sentry',
     'sentry.client',
-    'sentry.plugins.redmine',
+    'sentry.plugins.sentry_redmine',
+    'sentry.plugins.sentry_servers',
+    'sentry.plugins.sentry_urls',
     'paging',
     'south',
     'indexer',
@@ -122,6 +124,7 @@ SENTRY_FILTERS = (
     'example_project.filters.IPFilter',
 )
 SENTRY_SITE = 'example'
+SENTRY_PUBLIC = True
 
 try:
     import debug_toolbar
diff --git a/runtests.py b/runtests.py
index 44fc8b064f..b6ff12a1ad 100644
--- a/runtests.py
+++ b/runtests.py
@@ -32,7 +32,7 @@ if not settings.configured:
             'sentry.client.celery',
             
             # included plugin tests
-            # 'sentry.plugins.redmine',
+            # 'sentry.plugins.sentry_redmine',
 
             # No fucking idea why I have to do this
             'sentry.tests',
diff --git a/sentry/conf.py b/sentry/conf.py
index 8409e4bd9f..2ceba4acdd 100644
--- a/sentry/conf.py
+++ b/sentry/conf.py
@@ -71,4 +71,8 @@ EXCLUDE_PATHS = getattr(settings, 'SENTRY_EXCLUDE_PATHS', [])
 INCLUDE_PATHS = getattr(settings, 'SENTRY_INCLUDE_PATHS', [])
 
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
-URL_PREFIX = getattr(settings, 'SENTRY_URL_PREFIX', None)
\ No newline at end of file
+URL_PREFIX = getattr(settings, 'SENTRY_URL_PREFIX', None)
+
+# Allow access to Sentry without authentication.
+PUBLIC = getattr(settings, 'SENTRY_PUBLIC', False)
+PUBLIC
\ No newline at end of file
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index 14320fccf1..00b1ec66c1 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -63,12 +63,21 @@ class GroupActionProvider:
         if not self.selected:
             return
         return self.view(request, group)
-    
+
     def view(self):
         """
         Handles the view logic. If no response is given, we continue to the next action provider.
         """
 
+    def panels(self, request, panel_list, group):
+        """Modifies the panel list for a grouped message."""
+        return panel_list
+
+    def widget(self, request, group):
+        """
+        Renders as a widget in the group details sidebar.
+        """
+
 class GroupListProvider:
     __metaclass__ = PluginMount
 
diff --git a/sentry/plugins/redmine/__init__.py b/sentry/plugins/sentry_redmine/__init__.py
similarity index 100%
rename from sentry/plugins/redmine/__init__.py
rename to sentry/plugins/sentry_redmine/__init__.py
diff --git a/sentry/plugins/redmine/conf.py b/sentry/plugins/sentry_redmine/conf.py
similarity index 100%
rename from sentry/plugins/redmine/conf.py
rename to sentry/plugins/sentry_redmine/conf.py
diff --git a/sentry/plugins/redmine/models.py b/sentry/plugins/sentry_redmine/models.py
similarity index 100%
rename from sentry/plugins/redmine/models.py
rename to sentry/plugins/sentry_redmine/models.py
diff --git a/sentry/plugins/redmine/templates/sentry/plugins/redmine/create_issue.html b/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
similarity index 100%
rename from sentry/plugins/redmine/templates/sentry/plugins/redmine/create_issue.html
rename to sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
diff --git a/sentry/plugins/redmine/tests/__init__.py b/sentry/plugins/sentry_redmine/tests/__init__.py
similarity index 90%
rename from sentry/plugins/redmine/tests/__init__.py
rename to sentry/plugins/sentry_redmine/tests/__init__.py
index 95cc062f24..97fde9a2c8 100644
--- a/sentry/plugins/redmine/tests/__init__.py
+++ b/sentry/plugins/sentry_redmine/tests/__init__.py
@@ -3,8 +3,8 @@ from django.core.urlresolvers import reverse
 from django.test import TestCase
 
 from sentry.models import GroupedMessage
-from sentry.plugins.redmine import conf
-from sentry.plugins.redmine.models import CreateRedmineIssue
+from sentry.plugins.sentry_redmine import conf
+from sentry.plugins.sentry_redmine.models import CreateRedmineIssue
 
 class CreateIssueTest(TestCase):
     fixtures = ['sentry/plugins/redmine/tests/fixtures/regression.json']
diff --git a/sentry/plugins/redmine/tests/fixtures/regression.json b/sentry/plugins/sentry_redmine/tests/fixtures/regression.json
similarity index 100%
rename from sentry/plugins/redmine/tests/fixtures/regression.json
rename to sentry/plugins/sentry_redmine/tests/fixtures/regression.json
diff --git a/sentry/plugins/sentry_servers/__init__.py b/sentry/plugins/sentry_servers/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
new file mode 100644
index 0000000000..c8237e0e55
--- /dev/null
+++ b/sentry/plugins/sentry_servers/models.py
@@ -0,0 +1,23 @@
+from django.shortcuts import render_to_response
+from django.template.loader import render_to_string
+
+from sentry.plugins import GroupActionProvider
+
+class ServerGroupPanel(GroupActionProvider):
+    """Adds additional support for showing information about servers including:
+    
+    * A panel which shows all servers a message was seen on.
+    * A sidebar module which shows the servers most actively seen on.
+    """
+    
+    title = 'Servers'
+
+    def panels(self, request, panel_list, group):
+        panel_list.append((self.title, self.__class__.get_url(group.pk)))
+        return panel_list
+
+    def view(self, request, group):
+        return render_to_response('sentry/plugins/sentry_servers/index.html', locals())
+    
+    def widget(self, request, group):
+        return render_to_string('sentry/plugins/sentry_servers/widget.html', locals())
\ No newline at end of file
diff --git a/sentry/templates/sentry/group/server_list.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
similarity index 100%
rename from sentry/templates/sentry/group/server_list.html
rename to sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
new file mode 100644
index 0000000000..1731acd9a2
--- /dev/null
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
@@ -0,0 +1,13 @@
+{% load sentry_helpers %}
+
+{% with group.unique_servers|slice:"10" as unique_servers %}
+	{% if unique_servers %}
+		<h2>Servers</h2>
+
+		<ul class="server-list">
+			{% for server, priority in unique_servers|with_priority:"times_seen" %}
+				<li class="priority-{{ priority }}"><span class="count">{{ server.times_seen }}</span> {{ server.server_name }}</li>
+			{% endfor %}
+		</ul>
+	{% endif %}
+{% endwith %}
\ No newline at end of file
diff --git a/sentry/plugins/sentry_urls/__init__.py b/sentry/plugins/sentry_urls/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/plugins/sentry_urls/models.py b/sentry/plugins/sentry_urls/models.py
new file mode 100644
index 0000000000..18c554643c
--- /dev/null
+++ b/sentry/plugins/sentry_urls/models.py
@@ -0,0 +1,23 @@
+from django.shortcuts import render_to_response
+from django.template.loader import render_to_string
+
+from sentry.plugins import GroupActionProvider
+
+class ServerUrlsPanel(GroupActionProvider):
+    """Adds additional support for showing information about urls including:
+    
+    * A panel which shows all urls a message was seen on.
+    * A sidebar module which shows the urls most actively seen on.
+    """
+    
+    title = 'URLs'
+
+    def panels(self, request, panel_list, group):
+        panel_list.append((self.title, self.__class__.get_url(group.pk)))
+        return panel_list
+
+    def view(self, request, group):
+        return render_to_response('sentry/plugins/sentry_urls/index.html', locals())
+    
+    def widget(self, request, group):
+        return render_to_string('sentry/plugins/sentry_urls/widget.html', locals())
\ No newline at end of file
diff --git a/sentry/templates/sentry/group/url_list.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
similarity index 100%
rename from sentry/templates/sentry/group/url_list.html
rename to sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
new file mode 100644
index 0000000000..fe05c168d5
--- /dev/null
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
@@ -0,0 +1,13 @@
+{% load sentry_helpers %}
+
+{% with group.unique_urls|slice:"10" as unique_urls %}
+	{% if unique_urls %}
+		<h2>URLs</h2>
+
+		<ul class="url-list">
+			{% for link, priority in unique_urls|with_priority:"times_seen" %}
+				<li class="priority-{{ priority }}"><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
+			{% endfor %}
+		</ul>
+	{% endif %}
+{% endwith %}
\ No newline at end of file
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index 51095d0a10..d425fcbd65 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -23,37 +23,21 @@
 		<h2>Meta</h2>
 
 		<dl class="flat">
-			<dt>First Seen:</dt>
-			<dd>{{ group.first_seen }}</dd>
-			<dt>Last Seen:</dt>
-			<dd>{{ group.last_seen }}</dd>
+			<dt>Logger:</dt>
+			<dd><a href="{% url sentry %}?logger={{ group.logger }}">{{ group.logger }}</a></dd>
+			<dt>Level:</dt>
+			<dd><a href="{% url sentry %}?level={{ group.level }}">{{ group.get_level_display }}</a></dd>
 			<dt>Status:</dt>
 			<dd>{{ group.get_status_display|title }}</dd>
+			<dt>First Seen:</dt>
+			<dd>{{ group.first_seen|date }}<br/><small>{{ group.first_seen|timesince }}</small> ago</dd>
+			<dt>Last Seen:</dt>
+			<dd>{{ group.last_seen|date }}<br/><small>{{ group.last_seen|timesince }}</small> ago</dd>
 		</dl>
-
-		{% with group.unique_servers|slice:"10" as unique_servers %}
-			{% if unique_servers %}
-				<h2>Servers <a href="{% url sentry-group-servers group.pk %}" class="morelink">&raquo;</a></h2>
-
-				<ul class="server-list">
-					{% for server, priority in unique_servers|with_priority:"times_seen" %}
-						<li class="priority-{{ priority }}"><span class="count">{{ server.times_seen }}</span> {{ server.server_name }}</li>
-					{% endfor %}
-				</ul>
-			{% endif %}
-		{% endwith %}
-
-		{% with group.unique_urls|slice:"10" as unique_urls %}
-			{% if unique_urls %}
-				<h2>URLs <a href="{% url sentry-group-urls group.pk %}" class="morelink">&raquo;</a></h2>
-
-				<ul class="url-list">
-					{% for link, priority in unique_urls|with_priority:"times_seen" %}
-						<li class="priority-{{ priority }}"><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
-					{% endfor %}
-				</ul>
-			{% endif %}
-		{% endwith %}
+		
+		{% for html in group|get_widgets:request %}
+			{{ html|safe }}
+		{% endfor %}
 	</div>
 
 	<div id="body" class="with-sidebar">
@@ -73,8 +57,9 @@
 		<ul class="nav" id="group_nav">
 			<li{% ifequal page 'details' %} class="active"{% endifequal %}><a href="{% url sentry-group group.pk %}">Details</a></li>
 			<li{% ifequal page 'messages' %} class="active"{% endifequal %}><a href="{% url sentry-group-messages group.pk %}">Messages</a></li>
-			<li{% ifequal page 'urls' %} class="active"{% endifequal %}><a href="{% url sentry-group-urls group.pk %}">URLs</a></li>
-			<li{% ifequal page 'servers' %} class="active"{% endifequal %}><a href="{% url sentry-group-servers group.pk %}">Servers</a></li>
+			{% for label, link, is_active in group|get_panels:request %}
+				<li{% if is_active %} class="active"{% endif %}><a href="{{ link }}">{{ label }}</a></li>
+			{% endfor %}
 		</ul>
 		
 		{% block inner %}
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index f86ce37163..fadceaf1c9 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -30,6 +30,8 @@
 			</div>
 		</div> 
 		<div id="content">
+			{% block content_before %}
+			{% endblock %}
 			<div class="container">
 				{% block content %}
 					<div id="sidebar" class="column">
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index cff57c2e55..c8bf533067 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -82,6 +82,23 @@ register.simple_tag(sentry_version)
 
 def get_actions(group):
     for cls in GroupActionProvider.plugins.itervalues():
-        action = cls(group.pk)
-        yield action.url, action.title
-register.filter(get_actions)
\ No newline at end of file
+        inst = cls(group.pk)
+        yield inst.url, inst.title
+register.filter(get_actions)
+
+def get_panels(group, request):
+    panel_list = []
+    for cls in GroupActionProvider.plugins.itervalues():
+        inst = cls(group.pk)
+        panel_list = inst.panels(request, panel_list, group)
+    for panel in panel_list:
+        yield panel[0], panel[1], request.META['PATH_INFO'] == panel[1]
+register.filter(get_panels)
+
+def get_widgets(group, request):
+    for cls in GroupActionProvider.plugins.itervalues():
+        inst = cls(group.pk)
+        resp = inst.widget(request, group)
+        if resp:
+            yield resp
+register.filter(get_widgets)
\ No newline at end of file
diff --git a/sentry/urls.py b/sentry/urls.py
index 180f00a79a..6e4d4badd1 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -29,8 +29,6 @@ urlpatterns = patterns('',
     url(r'^group/(\d+)$', views.group, name='sentry-group'),
     url(r'^group/(\d+)/messages$', views.group_message_list, name='sentry-group-messages'),
     url(r'^group/(\d+)/messages/(\d+)$', views.group_message_details, name='sentry-group-message'),
-    url(r'^group/(\d+)/urls$', views.group_urls, name='sentry-group-urls'),
-    url(r'^group/(\d+)/servers$', views.group_servers, name='sentry-group-servers'),
     url(r'^group/(\d+)/actions/([\w_-]+)', views.group_plugin_action, name='sentry-group-plugin-action'),
 
     url(r'^$', views.index, name='sentry'),
diff --git a/sentry/views.py b/sentry/views.py
index 62e1ece0d6..78992cabfa 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -48,10 +48,11 @@ def get_filters():
 
 def login_required(func):
     def wrapped(request, *args, **kwargs):
-        if not request.user.is_authenticated():
-            return HttpResponseRedirect(reverse('sentry-login'))
-        if not request.user.has_perm('sentry_groupedmessage.can_view'):
-            return HttpResponseRedirect(reverse('sentry-login'))
+        if not conf.PUBLIC:
+            if not request.user.is_authenticated():
+                return HttpResponseRedirect(reverse('sentry-login'))
+            if not request.user.has_perm('sentry_groupedmessage.can_view'):
+                return HttpResponseRedirect(reverse('sentry-login'))
         return func(request, *args, **kwargs)
     wrapped.__doc__ = func.__doc__
     wrapped.__name__ = func.__name__
@@ -262,22 +263,6 @@ def group_message_details(request, group_id, message_id):
     
     return render_to_response('sentry/group/message.html', locals())
 
-@login_required
-def group_urls(request, group_id):
-    group = get_object_or_404(GroupedMessage, pk=group_id)
-
-    page = 'urls'
-    
-    return render_to_response('sentry/group/url_list.html', locals())
-
-@login_required
-def group_servers(request, group_id):
-    group = get_object_or_404(GroupedMessage, pk=group_id)
-
-    page = 'servers'
-    
-    return render_to_response('sentry/group/server_list.html', locals())
-
 @csrf_exempt
 def store(request):
     key = request.POST.get('key')
