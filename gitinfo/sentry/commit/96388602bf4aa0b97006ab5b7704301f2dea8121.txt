commit 96388602bf4aa0b97006ab5b7704301f2dea8121
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon Mar 30 13:20:11 2020 +0200

    ref(ui): Reduced padding and size of the input elements (#17975)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
index 01c06cc30f..db31a1880f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
@@ -274,19 +274,28 @@ class DataPrivacyRulesPanel extends React.Component<Props, State> {
               >
                 {t('Add Rule')}
               </StyledLink>
+              {!hideButtonBar && (
+                <StyledButtonBar gap={1.5}>
+                  <Button
+                    size="small"
+                    onClick={this.handleCancelForm}
+                    disabled={disabled}
+                  >
+                    {t('Cancel')}
+                  </Button>
+                  <Button
+                    size="small"
+                    priority="primary"
+                    onClick={this.handleSaveForm}
+                    disabled={disabled}
+                  >
+                    {t('Save Rules')}
+                  </Button>
+                </StyledButtonBar>
+              )}
             </PanelAction>
           </PanelBody>
         </Panel>
-        {!hideButtonBar && (
-          <StyledButtonBar gap={1.5}>
-            <Button onClick={this.handleCancelForm} disabled={disabled}>
-              {t('Cancel')}
-            </Button>
-            <Button priority="primary" onClick={this.handleSaveForm} disabled={disabled}>
-              {t('Save Rules')}
-            </Button>
-          </StyledButtonBar>
-        )}
       </React.Fragment>
     );
   }
@@ -300,7 +309,10 @@ const StyledPanelHeader = styled(PanelHeader)`
 `;
 
 const PanelAction = styled('div')`
-  padding: ${space(2)} ${space(3)};
+  padding: ${space(1.5)} ${space(2)};
+  display: grid;
+  grid-template-columns: auto 1fr;
+  align-items: center;
 `;
 
 const StyledButtonBar = styled(ButtonBar)`
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
index 79ea2def10..96d1d547e1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
@@ -99,7 +99,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
               label: getMethodTypeSelectorFieldLabel(value),
               value,
             }))}
-            height={40}
+            height={34}
             value={method}
             onChange={({value}) => this.handleChange('method', value)}
             isDisabled={disabled}
@@ -113,7 +113,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
               label: getRuleTypeSelectorFieldLabel(value),
               value,
             }))}
-            height={40}
+            height={34}
             value={type}
             onChange={({value}) => this.handleChange('type', value)}
             isDisabled={disabled}
@@ -128,9 +128,6 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
               this.handleChange('from', value);
             }}
             value={from}
-            inputStyle={{
-              height: '100%',
-            }}
             onBlur={this.handleValidation('from')}
             error={errors.from}
             disabled={disabled}
@@ -143,9 +140,6 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
                 this.handleChange('customRegularExpression', value);
               }}
               value={customRegularExpression}
-              inputStyle={{
-                height: '100%',
-              }}
               onBlur={this.handleValidation('customRegularExpression')}
               error={errors.customRegularExpression}
               disabled={disabled}
@@ -153,7 +147,12 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
           )}
         </WrapperFields>
         {onDelete && (
-          <StyledIconTrash disabled={disabled} onClick={this.handleDelete}>
+          <StyledIconTrash
+            disabled={disabled}
+            size="small"
+            onClick={this.handleDelete}
+            fullHeight={type === RULE_TYPE.PATTERN}
+          >
             <IconDelete />
           </StyledIconTrash>
         )}
@@ -165,23 +164,26 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
 export default DataPrivacyRulesForm;
 
 const Wrapper = styled('div')<{hasError?: boolean}>`
-  padding: ${p => `${space(p.hasError ? 4 : 2)} ${space(3)}`};
+  padding: ${p => `${space(p.hasError ? 2 : 1.5)} ${space(2)}`};
   display: grid;
   grid-gap: ${space(2)};
-  grid-template-columns: 1fr 40px;
-  align-items: center;
+  grid-template-columns: 1fr;
+  align-items: flex-start;
   border-bottom: 1px solid ${p => p.theme.borderDark};
+
+  @media (min-width: ${p => p.theme.breakpoints[3]}) {
+    grid-template-columns: 1fr 40px;
+  }
 `;
 
 const WrapperFields = styled('div')`
   display: grid;
   grid-gap: ${space(2)};
-  align-items: center;
+  align-items: flex-start;
   justify-items: start;
 
-  @media (min-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-columns: minmax(157px, 1fr) minmax(300px, 1fr);
-    justify-items: end;
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    grid-template-columns: 1fr 1fr;
   }
 
   @media (min-width: ${p => p.theme.breakpoints[3]}) {
@@ -189,31 +191,36 @@ const WrapperFields = styled('div')`
         300px,
         1fr
       );
-    justify-items: start;
   }
 `;
 
 const From = styled('div')<{disabled?: boolean}>`
   color: ${p => (p.disabled ? p.theme.disabled : p.theme.gray5)};
+  height: 34px;
+  align-items: center;
+  display: flex;
 `;
 
 const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
   width: 100%;
-  height: 100%;
   ${p =>
     p.isDisabled &&
     `
       cursor: not-allowed;
       pointer-events: auto;
     `}
+
+  > *:first-child {
+    min-height: 34px;
+  }
 `;
 
 const StyledTextField = styled(TextField)<{error?: string}>`
   width: 100%;
-  height: 40px;
-  > * {
-    height: 100%;
-    min-height: 100%;
+  height: 34px;
+  font-size: ${p => p.theme.fontSizeSmall};
+  input {
+    height: 34px;
   }
   ${p =>
     !p.error &&
@@ -228,8 +235,13 @@ const CustomRegularExpression = styled(StyledTextField)`
   font-family: ${p => p.theme.text.familyMono};
 `;
 
-const StyledIconTrash = styled(Button)`
+const StyledIconTrash = styled(Button)<{fullHeight?: boolean}>`
   color: ${p => p.theme.gray3};
-  width: 40px;
   height: 100%;
+  width: 100%;
+
+  @media (min-width: ${p => p.theme.breakpoints[3]}) {
+    width: 40px;
+    height: ${p => (p.fullHeight ? '100%' : '34px')};
+  }
 `;
