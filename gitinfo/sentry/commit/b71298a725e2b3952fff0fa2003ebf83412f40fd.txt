commit b71298a725e2b3952fff0fa2003ebf83412f40fd
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Dec 4 11:29:14 2015 -0800

    Various improvements to my issues
    
    - Add Unresolved selector (default)
    - Link/Label project name

diff --git a/src/sentry/api/endpoints/organization_member_issues_assigned.py b/src/sentry/api/endpoints/organization_member_issues_assigned.py
index d2042a0752..f1b815f895 100644
--- a/src/sentry/api/endpoints/organization_member_issues_assigned.py
+++ b/src/sentry/api/endpoints/organization_member_issues_assigned.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+from rest_framework.response import Response
+
 from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import Group, OrganizationMemberTeam, Project
+from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
 
 
 class OrganizationMemberIssuesAssignedEndpoint(OrganizationMemberEndpoint):
@@ -26,6 +28,14 @@ class OrganizationMemberIssuesAssignedEndpoint(OrganizationMemberEndpoint):
             select={'sort_by': 'sentry_groupasignee.date_added'},
         ).order_by('-sort_by')
 
+        status = request.GET.get('status', 'unresolved')
+        if status == 'unresolved':
+            queryset = queryset.filter(
+                status=GroupStatus.UNRESOLVED,
+            )
+        elif status:
+            return Response({'status': 'Invalid status choice'}, status=400)
+
         return self.paginate(
             request=request,
             queryset=queryset,
diff --git a/src/sentry/api/endpoints/organization_member_issues_bookmarked.py b/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
index 4f435b27e7..6fad9b33f1 100644
--- a/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
+++ b/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+from rest_framework.response import Response
+
 from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import Group, OrganizationMemberTeam, Project
+from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
 
 
 class OrganizationMemberIssuesBookmarkedEndpoint(OrganizationMemberEndpoint):
@@ -26,6 +28,14 @@ class OrganizationMemberIssuesBookmarkedEndpoint(OrganizationMemberEndpoint):
             select={'sort_by': 'sentry_groupbookmark.date_added'},
         ).order_by('-sort_by')
 
+        status = request.GET.get('status', 'unresolved')
+        if status == 'unresolved':
+            queryset = queryset.filter(
+                status=GroupStatus.UNRESOLVED,
+            )
+        elif status:
+            return Response({'status': 'Invalid status choice'}, status=400)
+
         return self.paginate(
             request=request,
             queryset=queryset,
diff --git a/src/sentry/api/endpoints/organization_member_issues_viewed.py b/src/sentry/api/endpoints/organization_member_issues_viewed.py
index c3a6220aa4..d921b378bc 100644
--- a/src/sentry/api/endpoints/organization_member_issues_viewed.py
+++ b/src/sentry/api/endpoints/organization_member_issues_viewed.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+from rest_framework.response import Response
+
 from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import Group, OrganizationMemberTeam, Project
+from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
 
 
 class OrganizationMemberIssuesViewedEndpoint(OrganizationMemberEndpoint):
@@ -26,6 +28,14 @@ class OrganizationMemberIssuesViewedEndpoint(OrganizationMemberEndpoint):
             select={'sort_by': 'sentry_groupseen.last_seen'},
         ).order_by('-sort_by')
 
+        status = request.GET.get('status', 'unresolved')
+        if status == 'unresolved':
+            queryset = queryset.filter(
+                status=GroupStatus.UNRESOLVED,
+            )
+        elif status:
+            return Response({'status': 'Invalid status choice'}, status=400)
+
         return self.paginate(
             request=request,
             queryset=queryset,
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index 2956560be7..6903b69431 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -78,7 +78,9 @@ const CompactIssue = React.createClass({
           </h3>
           <div className="event-extra">
             <ul>
-              <li className="project-name"><a href="">Project Name</a></li>
+              <li className="project-name">
+                <Link to={`/${orgId}/${projectId}/`}>{data.project.name}</Link>
+              </li>
               <li className="hidden">
                 <span className="icon icon-clock"></span>
                 <TimeSince date={data.lastSeen} />
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index 898fe138af..85d3e151e5 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -14,6 +14,7 @@ const IssueList = React.createClass({
   getDefaultProps() {
     return {
       pagination: true,
+      query: {},
     };
   },
 
@@ -31,7 +32,9 @@ const IssueList = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (this.props.params.orgId !== nextProps.params.orgId) {
+    let location = this.props.location;
+    let nextLocation = nextProps.location;
+    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
       this.remountComponent();
     }
   },
@@ -41,8 +44,10 @@ const IssueList = React.createClass({
   },
 
   fetchData() {
+    this.api.clear();
     this.api.request(this.props.endpoint, {
       method: 'GET',
+      query: this.props.query,
       success: (data, _, jqXHR) => {
         GroupStore.add(data);
 
diff --git a/src/sentry/static/sentry/app/components/organizationIssueList.jsx b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
new file mode 100644
index 0000000000..625b6c6bc4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
@@ -0,0 +1,63 @@
+import React from 'react';
+import {Link} from 'react-router';
+
+import GroupStore from '../stores/groupStore';
+import IssueList from './issueList';
+import OrganizationHomeContainer from './organizations/homeContainer';
+import {t} from '../locale';
+
+const OrganizationIssueList = React.createClass({
+  getInitialState() {
+    return this.getQueryStringState(this.props);
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.location.search !== this.props.location.search) {
+      this.setState(this.getQueryStringState(nextProps), this.fetchData);
+    }
+  },
+
+  componentWillUnmount() {
+    GroupStore.reset();
+  },
+
+  getQueryStringState(props) {
+    let location = props.location;
+    let status = (location.query.hasOwnProperty('status')
+      ? location.query.status
+      : 'unresolved');
+    return {
+      status: status,
+    };
+  },
+
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/`;
+  },
+
+  render() {
+    let path = this.props.location.pathname;
+    let {status} = this.state;
+    return (
+      <OrganizationHomeContainer>
+        <div className="pull-right">
+          <div className="btn-group">
+            <Link to={path}
+                  className={'btn btn-default' + (status === 'unresolved' ? ' active' : '')}>
+              {t('Unresolved')}
+            </Link>
+            <Link to={path}
+                  query={{status: ''}}
+                  className={'btn btn-default' + (status === '' ? ' active' : '')}>
+              {t('All Issues')}
+            </Link>
+          </div>
+        </div>
+        <h3>{this.props.title}</h3>
+        <IssueList endpoint={this.props.endpoint} query={{status: this.state.status}} {...this.props} />
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default OrganizationIssueList;
diff --git a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
index 348e517d28..46be0112b5 100644
--- a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
@@ -1,26 +1,24 @@
 import React from 'react';
 
-import GroupStore from '../../stores/groupStore';
-import IssueList from '../../components/issueList';
-import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationIssueList from '../../components/organizationIssueList';
 
 const AssignedToMe = React.createClass({
-  componentWillUnmount() {
-    GroupStore.reset();
-  },
-
   getEndpoint() {
     return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/`;
   },
 
+  getTitle() {
+    return 'Assigned to Me';
+  },
+
   render() {
     return (
-      <OrganizationHomeContainer>
-        <h3>Assigned to Me</h3>
-        <IssueList endpoint={this.getEndpoint()} {...this.props} />
-      </OrganizationHomeContainer>
+      <OrganizationIssueList
+        title={this.getTitle()}
+        endpoint={this.getEndpoint()}
+        {...this.props} />
     );
-  }
+  },
 });
 
 export default AssignedToMe;
diff --git a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
index 47824c943a..ed586c8085 100644
--- a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
@@ -1,26 +1,24 @@
 import React from 'react';
 
-import GroupStore from '../../stores/groupStore';
-import IssueList from '../../components/issueList';
-import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationIssueList from '../../components/organizationIssueList';
 
 const Bookmarked = React.createClass({
-  componentWillUnmount() {
-    GroupStore.reset();
-  },
-
   getEndpoint() {
     return `/organizations/${this.props.params.orgId}/members/me/issues/bookmarked/`;
   },
 
+  getTitle() {
+    return 'Bookmarks';
+  },
+
   render() {
     return (
-      <OrganizationHomeContainer>
-        <h3>Bookmarks</h3>
-        <IssueList endpoint={this.getEndpoint()} {...this.props} />
-      </OrganizationHomeContainer>
+      <OrganizationIssueList
+        title={this.getTitle()}
+        endpoint={this.getEndpoint()}
+        {...this.props} />
     );
-  }
+  },
 });
 
 export default Bookmarked;
diff --git a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
index e8d87b8aa4..22e2bd3deb 100644
--- a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
@@ -1,26 +1,24 @@
 import React from 'react';
 
-import GroupStore from '../../stores/groupStore';
-import IssueList from '../../components/issueList';
-import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationIssueList from '../../components/organizationIssueList';
 
 const Viewed = React.createClass({
-  componentWillUnmount() {
-    GroupStore.reset();
-  },
-
   getEndpoint() {
     return `/organizations/${this.props.params.orgId}/members/me/issues/viewed/`;
   },
 
+  getTitle() {
+    return 'History';
+  },
+
   render() {
     return (
-      <OrganizationHomeContainer>
-        <h3>History</h3>
-        <IssueList endpoint={this.getEndpoint()} {...this.props} />
-      </OrganizationHomeContainer>
+      <OrganizationIssueList
+        title={this.getTitle()}
+        endpoint={this.getEndpoint()}
+        {...this.props} />
     );
-  }
+  },
 });
 
 export default Viewed;
