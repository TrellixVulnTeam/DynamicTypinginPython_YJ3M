commit 39b537ac6d5fdacff00958d761559b1a356f6a3d
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue Mar 31 22:44:03 2020 +0200

    fix(ui): Release stats chart summary count from api, fixed average (#17990)
    
    * fix(ui): Release stats chart summary count from api, fixed average
    
    * mdash
    
    * ref(ui): Refactor YAxis to enum

diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
index 22723f825e..42cb361db5 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChart.tsx
@@ -38,21 +38,43 @@ class ReleaseChart extends React.Component<Props> {
   formatTooltipValue = (value: string | number | null) => {
     const {yAxis} = this.props;
     switch (yAxis) {
-      case 'sessionDuration':
-        return typeof value === 'number' ? getExactDuration(value, true) : value;
-      case 'crashFree':
-        return defined(value) ? `${value}%` : '-';
-      case 'sessions':
-      case 'users':
+      case YAxis.SESSION_DURATION:
+        return typeof value === 'number' ? getExactDuration(value, true) : '\u2015';
+      case YAxis.CRASH_FREE:
+        return defined(value) ? `${value}%` : '\u2015';
+      case YAxis.SESSIONS:
+      case YAxis.USERS:
       default:
         return typeof value === 'number' ? value.toLocaleString() : value;
     }
   };
 
+  configureYAxis = () => {
+    const {yAxis} = this.props;
+    switch (yAxis) {
+      case YAxis.CRASH_FREE:
+        return {
+          max: 100,
+          scale: true,
+          axisLabel: {
+            formatter: '{value}%',
+            color: theme.gray1,
+          },
+        };
+      case YAxis.SESSION_DURATION:
+      case YAxis.SESSIONS:
+      case YAxis.USERS:
+      default:
+        return undefined;
+    }
+  };
+
   render() {
     const {utc, releaseSeries, timeseriesData, yAxis, zoomRenderProps} = this.props;
     const Chart =
-      yAxis === 'crashFree' || yAxis === 'sessionDuration' ? AreaChart : LineChart;
+      yAxis === YAxis.CRASH_FREE || yAxis === YAxis.SESSION_DURATION
+        ? AreaChart
+        : LineChart;
 
     const legend = {
       right: 16,
@@ -87,18 +109,7 @@ class ReleaseChart extends React.Component<Props> {
           top: '32px',
           bottom: '12px',
         }}
-        yAxis={
-          yAxis === 'crashFree'
-            ? {
-                max: 100,
-                scale: true,
-                axisLabel: {
-                  formatter: '{value}%',
-                  color: theme.gray1,
-                },
-              }
-            : undefined
-        }
+        yAxis={this.configureYAxis()}
         tooltip={{valueFormatter: this.formatTooltipValue}}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
index a9b7a394a9..be4bbf541b 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseChartControls.tsx
@@ -12,7 +12,12 @@ import {
 import DropdownButton from 'app/components/dropdownButton';
 import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
 
-export type YAxis = 'sessions' | 'users' | 'crashFree' | 'sessionDuration';
+export enum YAxis {
+  SESSIONS = 'sessions',
+  USERS = 'users',
+  CRASH_FREE = 'crashFree',
+  SESSION_DURATION = 'sessionDuration',
+}
 
 type Props = {
   summary: React.ReactNode;
@@ -23,32 +28,32 @@ type Props = {
 const ReleaseChartControls = ({summary, yAxis, onYAxisChange}: Props) => {
   const yAxisOptions = [
     {
-      value: 'sessions',
+      value: YAxis.SESSIONS,
       label: t('Session Count'),
     },
     {
-      value: 'sessionDuration',
+      value: YAxis.SESSION_DURATION,
       label: t('Session Duration'),
     },
     {
-      value: 'users',
+      value: YAxis.USERS,
       label: t('User Count'),
     },
     {
-      value: 'crashFree',
+      value: YAxis.CRASH_FREE,
       label: t('Crash Free Rate'),
     },
   ];
 
   const getSummaryHeading = () => {
     switch (yAxis) {
-      case 'users':
+      case YAxis.USERS:
         return t('Total Active Users');
-      case 'crashFree':
+      case YAxis.CRASH_FREE:
         return t('Average Rate');
-      case 'sessionDuration':
+      case YAxis.SESSION_DURATION:
         return t('Average Duration');
-      case 'sessions':
+      case YAxis.SESSIONS:
       default:
         return t('Total Sessions');
     }
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
index 56545a7e94..0fbff91030 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/chart/releaseStatsRequest.tsx
@@ -3,6 +3,7 @@ import pick from 'lodash/pick';
 import omitBy from 'lodash/omitBy';
 import isEqual from 'lodash/isEqual';
 import meanBy from 'lodash/meanBy';
+import mean from 'lodash/mean';
 import {Location} from 'history';
 
 import {Client} from 'app/api';
@@ -90,12 +91,12 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
     }));
 
     try {
-      if (yAxis === 'crashFree') {
+      if (yAxis === YAxis.CRASH_FREE) {
         data = await this.fetchRateData();
       } else {
         // session duration uses same endpoint as sessions
         data = await this.fetchCountData(
-          yAxis === 'sessionDuration' ? 'sessions' : yAxis
+          yAxis === YAxis.SESSION_DURATION ? YAxis.SESSIONS : yAxis
         );
       }
     } catch {
@@ -127,9 +128,9 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
     });
 
     const transformedData =
-      yAxis === 'sessionDuration'
+      yAxis === YAxis.SESSION_DURATION
         ? this.transformSessionDurationData(response.stats)
-        : this.transformCountData(response.stats, yAxis);
+        : this.transformCountData(response.stats, yAxis, response.statTotals);
 
     return {...transformedData, crashFreeTimeBreakdown: response.usersBreakdown};
   };
@@ -141,13 +142,13 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
       api.requestPromise(this.statsPath, {
         query: {
           ...this.baseQueryParams,
-          type: 'users',
+          type: YAxis.USERS,
         },
       }),
       api.requestPromise(this.statsPath, {
         query: {
           ...this.baseQueryParams,
-          type: 'sessions',
+          type: YAxis.SESSIONS,
         },
       }),
     ]);
@@ -175,8 +176,11 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
     };
   }
 
-  transformCountData(responseData, yAxis: string): Omit<Data, 'crashFreeTimeBreakdown'> {
-    let summary = 0;
+  transformCountData(
+    responseData,
+    yAxis: string,
+    responseTotals
+  ): Omit<Data, 'crashFreeTimeBreakdown'> {
     // here we can configure colors of the chart
     const chartData: ChartData = {
       crashed: {
@@ -200,14 +204,16 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
     responseData.forEach(entry => {
       const [timeframe, values] = entry;
       const date = timeframe * 1000;
-      summary += values[yAxis];
       chartData.crashed.data.push({name: date, value: values[`${yAxis}_crashed`]});
       chartData.abnormal.data.push({name: date, value: values[`${yAxis}_abnormal`]});
       chartData.errored.data.push({name: date, value: values[`${yAxis}_errored`]});
       chartData.total.data.push({name: date, value: values[yAxis]});
     });
 
-    return {chartData: Object.values(chartData), chartSummary: summary.toLocaleString()};
+    return {
+      chartData: Object.values(chartData),
+      chartSummary: responseTotals[yAxis].toLocaleString(),
+    };
   }
 
   transformRateData(
@@ -261,10 +267,13 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
       return {averagePercent, percentageData};
     };
 
-    const usersPercentages = calculateDatePercentage(responseUsersData, 'users');
+    const usersPercentages = calculateDatePercentage(responseUsersData, YAxis.USERS);
     chartData.users.data = usersPercentages.percentageData;
 
-    const sessionsPercentages = calculateDatePercentage(responseSessionsData, 'sessions');
+    const sessionsPercentages = calculateDatePercentage(
+      responseSessionsData,
+      YAxis.SESSIONS
+    );
     chartData.sessions.data = sessionsPercentages.percentageData;
 
     const summary = tct('[usersPercent] users, [sessionsPercent] sessions', {
@@ -282,17 +291,19 @@ class ReleaseStatsRequest extends React.Component<Props, State> {
       data: [],
     };
 
-    responseData.forEach(entry => {
-      const [timeframe, values] = entry;
-      const date = timeframe * 1000;
-      chartData.data.push({name: date, value: Math.round(values.duration_p50)});
-    });
-
     const sessionDurationAverage = Math.round(
-      meanBy(
-        chartData.data.filter(item => defined(item.value)),
-        'value'
-      )
+      mean(
+        responseData
+          .map(([timeframe, values]) => {
+            chartData.data.push({
+              name: timeframe * 1000,
+              value: Math.round(values.duration_p50),
+            });
+
+            return values.duration_p50;
+          })
+          .filter(duration => defined(duration))
+      ) || 0
     );
     const summary = getExactDuration(sessionDurationAverage ?? 0);
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
index 7610558b72..7a2d938654 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/index.tsx
@@ -56,7 +56,7 @@ class ReleaseOverview extends AsyncView<Props> {
   getYAxis(): YAxis {
     const {yAxis} = this.props.location.query;
 
-    return typeof yAxis === 'string' ? (yAxis as YAxis) : 'sessions';
+    return typeof yAxis === 'string' ? (yAxis as YAxis) : YAxis.SESSIONS;
   }
 
   render() {
