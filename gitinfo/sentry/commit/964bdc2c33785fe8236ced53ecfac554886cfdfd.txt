commit 964bdc2c33785fe8236ced53ecfac554886cfdfd
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 29 13:33:50 2015 +0200

    Add global loading indicator to stream actions

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 055aff68c5..acab55342c 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -88,14 +88,41 @@ class Client {
     return this.activeRequests[id];
   }
 
-  bulkDelete(params) {
+  _chain() {
+    var funcs = [];
+    for (var i = 0; i < arguments.length; i++) {
+      if (typeof arguments[i] !== "undefined") {
+        funcs.push(arguments[i]);
+      }
+    }
+
+    return () => {
+      funcs.forEach((func) => {
+        funcs[i].apply(this, arguments);
+      });
+    };
+  }
+
+  _wrapRequest(path, options, extraParams) {
+    if (typeof extraParams === "undefined") {
+      extraParams = {};
+    }
+
+    options.success = this._chain(options.success, extraParams.success);
+    options.error = this._chain(options.error, extraParams.error);
+    options.complete = this._chain(options.complete, extraParams.complete);
+
+    return this.request(path, options);
+  }
+
+  bulkDelete(params, options) {
     var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
     GroupActions.delete(id, params.itemIds);
 
-    return this.request(path, {
+    return this._wrapRequest(path, {
       query: query,
       method: "DELETE",
       success: (response) => {
@@ -104,17 +131,17 @@ class Client {
       error: (error) => {
         GroupActions.deleteError(id, params.itemIds, error);
       }
-    });
+    }, options);
   }
 
-  bulkUpdate(params) {
+  bulkUpdate(params, options) {
     var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
     GroupActions.update(id, params.itemIds, params.data);
 
-    return this.request(path, {
+    return this._wrapRequest(path, {
       query: query,
       method: "PUT",
       data: params.data,
@@ -124,17 +151,17 @@ class Client {
       error: (error) => {
         GroupActions.updateError(id, params.itemIds, error, params.failSilently);
       }
-    });
+    }, options);
   }
 
-  merge(params) {
+  merge(params, options) {
     var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
     var query = (params.itemIds ? {id: params.itemIds} : undefined);
     var id = this.uniqueId();
 
     GroupActions.merge(id, params.itemIds);
 
-    return this.request(path, {
+    return this._wrapRequest(path, {
       query: query,
       method: "PUT",
       data: {merge: 1},
@@ -144,16 +171,16 @@ class Client {
       error: (error) => {
         GroupActions.mergeError(id, params.itemIds, error);
       }
-    });
+    }, options);
   }
 
-  assignTo(params) {
+  assignTo(params, options) {
     var path = "/groups/" + params.id + "/";
     var id = this.uniqueId();
 
     GroupActions.assignTo(id, params.id, {email: params.email});
 
-    return this.request(path, {
+    return this._wrapRequest(path, {
       method: "PUT",
       data: {assignedTo: params.email},
       success: (response) => {
@@ -162,16 +189,16 @@ class Client {
       error: (error) => {
         GroupActions.assignToError(id, params.id, error);
       }
-    });
+    }, options);
   }
 
-  joinTeam(params) {
+  joinTeam(params, options) {
     var path = "/organizations/" + params.orgId + "/members/" + (params.memberId || 'me') + "/teams/" + params.teamId + "/";
     var id = this.uniqueId();
 
     TeamActions.update(id, params.teamId);
 
-    return this.request(path, {
+    return this._wrapRequest(path, {
       method: "POST",
       success: (response) => {
         TeamActions.updateSuccess(id, params.teamId, response);
@@ -179,16 +206,16 @@ class Client {
       error: (error) => {
         TeamActions.updateError(id, params.teamId, error);
       }
-    });
+    }, options);
   }
 
-  leaveTeam(params) {
+  leaveTeam(params, options) {
     var path = "/organizations/" + params.orgId + "/members/" + (params.memberId || 'me') + "/teams/" + params.teamId + "/";
     var id = this.uniqueId();
 
     TeamActions.update(id, params.teamId);
 
-    return this.request(path, {
+    return this._wrapRequest(path, {
       method: "DELETE",
       success: (response) => {
         TeamActions.updateSuccess(id, params.teamId, response);
@@ -196,7 +223,7 @@ class Client {
       error: (error) => {
         TeamActions.updateError(id, params.teamId, error);
       }
-    });
+    }, options);
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index c4242a0eb3..ffe67979ee 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -8,6 +8,7 @@ var api = require("../../api");
 var GroupListStore = require("../../stores/groupStore");
 var DateTimeField = require("../../modules/datepicker/DateTimeField");
 var DropdownLink = require("../../components/dropdownLink");
+var IndicatorStore = require("../../stores/indicatorStore");
 var MenuItem = require("../../components/menuItem");
 var Modal = require("react-bootstrap/Modal");
 var OverlayMixin = require("react-bootstrap/OverlayMixin");
@@ -365,6 +366,8 @@ var StreamActions = React.createClass({
   },
   onResolve(groupList, event) {
     this.actionSelectedGroups((itemIds) => {
+      var loadingIndicator = IndicatorStore.add('Saving changes..');
+
       api.bulkUpdate({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -372,11 +375,17 @@ var StreamActions = React.createClass({
         data: {
           status: 'resolved'
         }
+      }, {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       });
     });
   },
   onBookmark(groupList, event) {
     this.actionSelectedGroups((itemIds) => {
+      var loadingIndicator = IndicatorStore.add('Saving changes..');
+
       api.bulkUpdate({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -384,10 +393,16 @@ var StreamActions = React.createClass({
         data: {
           isBookmarked: true
         }
+      }, {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       });
     });
   },
   onRemoveBookmark(groupList, event) {
+    var loadingIndicator = IndicatorStore.add('Saving changes..');
+
     this.actionSelectedGroups((itemIds) => {
       api.bulkUpdate({
         orgId: this.props.orgId,
@@ -396,24 +411,40 @@ var StreamActions = React.createClass({
         data: {
           isBookmarked: false
         }
+      }, {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       });
     });
   },
   onDelete(groupList, event) {
+    var loadingIndicator = IndicatorStore.add('Removing events..');
+
     this.actionSelectedGroups((itemIds) => {
       api.bulkDelete({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
         itemIds: itemIds
+      }, {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       });
     });
   },
   onMerge(groupList, event) {
+    var loadingIndicator = IndicatorStore.add('Merging events..');
+
     this.actionSelectedGroups((itemIds) => {
       api.merge({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
         itemIds: itemIds,
+      }, {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       });
     });
   },
