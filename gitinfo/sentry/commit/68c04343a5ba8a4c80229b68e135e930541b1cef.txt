commit 68c04343a5ba8a4c80229b68e135e930541b1cef
Author: Mark Story <mark@sentry.io>
Date:   Thu Oct 17 12:29:09 2019 -0400

    feat(discover2) Hide tracing related functions and fields in query builder (#15114)
    
    Hide the transaction related fields and aggregate functions for
    customers not in the tracing alpha.
    
    Refs SEN-1156

diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index b33c4af273..af0a381539 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -17,7 +17,7 @@ import {QueryLink} from './styles';
 
 export const MODAL_QUERY_KEYS = ['eventSlug'] as const;
 export const PIN_ICON = `image://${pinIcon}`;
-export const AGGREGATE_ALIASES = ['last_seen', 'latest_event'] as const;
+export const AGGREGATE_ALIASES = ['p95', 'p75', 'last_seen', 'latest_event'] as const;
 
 export const DEFAULT_EVENT_VIEW_V1: Readonly<EventViewv1> = {
   name: t('All Events'),
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 65e6a899c3..8be0a1df48 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -137,3 +137,13 @@ export const FIELDS = {
   p95: 'number',
 };
 export type Field = keyof typeof FIELDS | '';
+
+// This list should be removed with the tranaction-events feature flag.
+export const TRACING_FIELDS = [
+  'avg',
+  'sum',
+  'transaction.duration',
+  'transaction.op',
+  'p95',
+  'p75',
+];
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index b5cc4c6c65..73525d7f3e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -4,9 +4,16 @@ import styled from 'react-emotion';
 import {t} from 'app/locale';
 import {Form, SelectField, TextField} from 'app/components/forms';
 import InlineSvg from 'app/components/inlineSvg';
+import {Organization} from 'app/types';
 import space from 'app/styles/space';
 
-import {AGGREGATIONS, FIELDS, Aggregation, Field} from '../eventQueryParams';
+import {
+  AGGREGATIONS,
+  FIELDS,
+  TRACING_FIELDS,
+  Aggregation,
+  Field,
+} from '../eventQueryParams';
 import {TableColumn} from './types';
 
 type ModalActions = {
@@ -14,7 +21,10 @@ type ModalActions = {
   updateColumn: (indexColumnOrder: number, column: TableColumn<ReactText>) => void;
 };
 
-export function renderTableModalEditColumnFactory(actions: ModalActions) {
+export function renderTableModalEditColumnFactory(
+  organization: Organization,
+  actions: ModalActions
+) {
   return {
     renderModalBodyWithForm: (
       indexColumnOrder?: number,
@@ -24,6 +34,7 @@ export function renderTableModalEditColumnFactory(actions: ModalActions) {
     ) => {
       return (
         <TableModalEditColumnBodyForm
+          organization={organization}
           indexColumnOrder={indexColumnOrder}
           column={column}
           actions={{
@@ -42,6 +53,7 @@ export function renderTableModalEditColumnFactory(actions: ModalActions) {
 export default renderTableModalEditColumnFactory;
 
 type TableModalEditColumnFormProps = {
+  organization: Organization;
   indexColumnOrder?: number;
   column?: TableColumn<ReactText>;
 
@@ -61,22 +73,24 @@ class TableModalEditColumnBodyForm extends React.Component<
 > {
   state = {
     aggregations: filterAggregationByField(
+      this.props.organization,
       this.props.column ? this.props.column.field : ''
     ),
     fields: filterFieldByAggregation(
+      this.props.organization,
       this.props.column ? this.props.column.aggregation : ''
     ),
   };
 
   onChangeAggregation = (value: Aggregation) => {
     this.setState({
-      fields: filterFieldByAggregation(value),
+      fields: filterFieldByAggregation(this.props.organization, value),
     });
   };
 
   onChangeField = (value: Field) => {
     this.setState({
-      aggregations: filterAggregationByField(value),
+      aggregations: filterAggregationByField(this.props.organization, value),
     });
   };
 
@@ -164,16 +178,20 @@ const TableModalEditColumnFooter = () => (
   </FooterContent>
 );
 
-function filterAggregationByField(f?: Field): Aggregation[] {
+function filterAggregationByField(organization: Organization, f?: Field): Aggregation[] {
+  let functionList = Object.keys(AGGREGATIONS);
+  if (!organization.features.includes('transaction-events')) {
+    functionList = functionList.filter(item => !TRACING_FIELDS.includes(item));
+  }
   if (!f || !FIELDS[f]) {
-    return Object.keys(AGGREGATIONS) as Aggregation[];
+    return functionList as Aggregation[];
   }
 
   if (FIELDS[f] === 'never') {
     return [];
   }
 
-  return Object.keys(AGGREGATIONS).reduce(
+  return functionList.reduce(
     (accumulator, a) => {
       if (
         AGGREGATIONS[a].type.includes(FIELDS[f]) ||
@@ -189,12 +207,17 @@ function filterAggregationByField(f?: Field): Aggregation[] {
   );
 }
 
-function filterFieldByAggregation(a?: Aggregation): Field[] {
+function filterFieldByAggregation(organization: Organization, a?: Aggregation): Field[] {
+  let fieldList = Object.keys(FIELDS);
+  if (!organization.features.includes('transaction-events')) {
+    fieldList = fieldList.filter(item => !TRACING_FIELDS.includes(item));
+  }
+
   if (!a || !AGGREGATIONS[a]) {
-    return Object.keys(FIELDS) as Field[];
+    return fieldList as Field[];
   }
 
-  return Object.keys(FIELDS).reduce(
+  return fieldList.reduce(
     (accumulator, f) => {
       if (!FIELDS[f] || FIELDS[f] === 'never') {
         return accumulator;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index d3b7dd1218..21d66823d5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -190,12 +190,12 @@ class TableView extends React.Component<TableViewProps, TableState> {
   };
 
   render() {
-    const {isLoading, error, tableData} = this.props;
+    const {organization, isLoading, error, tableData} = this.props;
     const {columnOrder, columnSortBy} = this.state;
     const {
       renderModalBodyWithForm,
       renderModalFooter,
-    } = renderTableModalEditColumnFactory({
+    } = renderTableModalEditColumnFactory(organization, {
       createColumn: this._createColumn,
       updateColumn: this._updateColumn,
     });
