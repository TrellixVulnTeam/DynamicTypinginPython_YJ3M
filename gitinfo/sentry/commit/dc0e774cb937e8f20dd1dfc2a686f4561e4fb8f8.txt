commit dc0e774cb937e8f20dd1dfc2a686f4561e4fb8f8
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 19 22:58:21 2014 -0700

    Add optional recaptcha support
    
    - Happens after single failed attempt
    - Login, Registration, Lost Password views

diff --git a/conftest.py b/conftest.py
index a524102bda..2008bd6d2d 100644
--- a/conftest.py
+++ b/conftest.py
@@ -14,6 +14,8 @@ def pytest_configure(config):
     if not settings.configured:
         os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
 
+    os.environ['RECAPTCHA_TESTING'] = 'True'
+
     test_db = os.environ.get('DB', 'sqlite')
     if test_db == 'mysql':
         settings.DATABASES['default'].update({
@@ -87,6 +89,9 @@ def pytest_configure(config):
     settings.SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
     settings.SENTRY_TSDB_OPTIONS = {}
 
+    settings.RECAPTCHA_PUBLIC_KEY = 'a' * 40
+    settings.RECAPTCHA_PRIVATE_KEY = 'b' * 40
+
     # django mail uses socket.getfqdn which doesn't play nice if our
     # networking isn't stable
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
diff --git a/setup.py b/setup.py
index 314d4e02e1..b609fd2cec 100755
--- a/setup.py
+++ b/setup.py
@@ -73,6 +73,7 @@ install_requires = [
     'django-crispy-forms>=1.2.3,<1.3.0',
     'django-paging>=0.2.5,<0.3.0',
     'django-picklefield>=0.3.0,<0.4.0',
+    'django-recaptcha>=1.0.0,<1.1.0',
     'django-social-auth>=0.7.28,<0.8.0',
     'django-static-compiler>=0.3.0,<0.4.0',
     'django-statsd-mozilla>=0.3.8.0,<0.3.9.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b5d4a4499b..bc2e7b8b88 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -153,6 +153,7 @@ INSTALLED_APPS = (
     'django.contrib.sites',
     'django.contrib.staticfiles',
 
+    'captcha',
     'crispy_forms',
     'djcelery',
     'gunicorn',
@@ -449,6 +450,13 @@ REST_FRAMEWORK = {
     'TEST_REQUEST_DEFAULT_FORMAT': 'json',
 }
 
+# django-recaptcha
+
+RECAPTCHA_PUBLIC_KEY = None
+RECAPTCHA_PRIVATE_KEY = None
+
+# django-statsd
+
 STATSD_CLIENT = 'django_statsd.clients.null'
 
 # Sentry and Raven configuration
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 79c1b7ba05..dc5f99d06e 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -8,12 +8,13 @@ sentry.web.forms.accounts
 
 import pytz
 
+from captcha.fields import ReCaptchaField
 from datetime import datetime
-
 from django import forms
-from django.contrib.auth.forms import AuthenticationForm as AuthenticationForm_
+from django.conf import settings
+from django.contrib.auth import authenticate, get_user_model
+from django.utils.text import capfirst
 from django.utils.translation import ugettext_lazy as _
-
 from six.moves import range
 
 from sentry.constants import LANGUAGES
@@ -21,6 +22,35 @@ from sentry.models import UserOption, User
 from sentry.utils.auth import find_users
 
 
+# at runtime we decide whether we should support recaptcha
+# TODO(dcramer): there **must** be a better way to do this
+if settings.RECAPTCHA_PUBLIC_KEY:
+    class CaptchaForm(forms.Form):
+        def __init__(self, *args, **kwargs):
+            captcha = kwargs.pop('captcha', True)
+            super(CaptchaForm, self).__init__(*args, **kwargs)
+            if captcha:
+                self.fields['captcha'] = ReCaptchaField()
+
+    class CaptchaModelForm(forms.ModelForm):
+        def __init__(self, *args, **kwargs):
+            captcha = kwargs.pop('captcha', True)
+            super(CaptchaModelForm, self).__init__(*args, **kwargs)
+            if captcha:
+                self.fields['captcha'] = ReCaptchaField()
+
+else:
+    class CaptchaForm(forms.Form):
+        def __init__(self, *args, **kwargs):
+            kwargs.pop('captcha', None)
+            super(CaptchaForm, self).__init__(*args, **kwargs)
+
+    class CaptchaModelForm(forms.ModelForm):
+        def __init__(self, *args, **kwargs):
+            kwargs.pop('captcha', None)
+            super(CaptchaModelForm, self).__init__(*args, **kwargs)
+
+
 def _get_timezone_choices():
     results = []
     for tz in pytz.common_timezones:
@@ -36,12 +66,67 @@ def _get_timezone_choices():
 TIMEZONE_CHOICES = _get_timezone_choices()
 
 
-class AuthenticationForm(AuthenticationForm_):
+class AuthenticationForm(CaptchaForm):
     username = forms.CharField(
         label=_('Username or email'), max_length=128)
+    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)
+
+    error_messages = {
+        'invalid_login': _("Please enter a correct %(username)s and password. "
+                           "Note that both fields may be case-sensitive."),
+        'no_cookies': _("Your Web browser doesn't appear to have cookies "
+                        "enabled. Cookies are required for logging in."),
+        'inactive': _("This account is inactive."),
+    }
+
+    def __init__(self, request=None, *args, **kwargs):
+        """
+        If request is passed in, the form will validate that cookies are
+        enabled. Note that the request (a HttpRequest object) must have set a
+        cookie with the key TEST_COOKIE_NAME and value TEST_COOKIE_VALUE before
+        running this validation.
+        """
+        self.request = request
+        self.user_cache = None
+        super(AuthenticationForm, self).__init__(*args, **kwargs)
+
+        # Set the label for the "username" field.
+        UserModel = get_user_model()
+        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)
+        if not self.fields['username'].label:
+            self.fields['username'].label = capfirst(self.username_field.verbose_name)
+
+    def clean(self):
+        username = self.cleaned_data.get('username')
+        password = self.cleaned_data.get('password')
+
+        if username and password:
+            self.user_cache = authenticate(username=username,
+                                           password=password)
+            if self.user_cache is None:
+                raise forms.ValidationError(
+                    self.error_messages['invalid_login'] % {
+                        'username': self.username_field.verbose_name
+                    })
+            elif not self.user_cache.is_active:
+                raise forms.ValidationError(self.error_messages['inactive'])
+        self.check_for_test_cookie()
+        return self.cleaned_data
+
+    def check_for_test_cookie(self):
+        if self.request and not self.request.session.test_cookie_worked():
+            raise forms.ValidationError(self.error_messages['no_cookies'])
+
+    def get_user_id(self):
+        if self.user_cache:
+            return self.user_cache.id
+        return None
+
+    def get_user(self):
+        return self.user_cache
 
 
-class RegistrationForm(forms.ModelForm):
+class RegistrationForm(CaptchaModelForm):
     username = forms.EmailField(
         label=_('Email'), max_length=128,
         widget=forms.TextInput(attrs={'placeholder': 'you@example.com'}))
@@ -69,6 +154,25 @@ class RegistrationForm(forms.ModelForm):
         return user
 
 
+class RecoverPasswordForm(CaptchaForm):
+    user = forms.CharField(label=_('Username or email'))
+
+    def clean_user(self):
+        value = self.cleaned_data.get('user')
+        if value:
+            users = find_users(value)
+            if not users:
+                raise forms.ValidationError(_("We were unable to find a matching user."))
+            if len(users) > 1:
+                raise forms.ValidationError(_("Multiple accounts were found matching this email address."))
+            return users[0]
+        return None
+
+
+class ChangePasswordRecoverForm(forms.Form):
+    password = forms.CharField(widget=forms.PasswordInput())
+
+
 class NotificationSettingsForm(forms.Form):
     alert_email = forms.EmailField(help_text=_('Designate an alternative email address to send email notifications to.'), required=False)
     subscribe_by_default = forms.ChoiceField(
@@ -221,25 +325,6 @@ class AppearanceSettingsForm(forms.Form):
         return self.user
 
 
-class RecoverPasswordForm(forms.Form):
-    user = forms.CharField(label=_('Username or email'))
-
-    def clean_user(self):
-        value = self.cleaned_data.get('user')
-        if value:
-            users = find_users(value)
-            if not users:
-                raise forms.ValidationError(_("We were unable to find a matching user."))
-            if len(users) > 1:
-                raise forms.ValidationError(_("Multiple accounts were found matching this email address."))
-            return users[0]
-        return None
-
-
-class ChangePasswordRecoverForm(forms.Form):
-    password = forms.CharField(widget=forms.PasswordInput())
-
-
 class ProjectEmailOptionsForm(forms.Form):
     alert = forms.BooleanField(required=False)
     email = forms.EmailField(required=False, widget=forms.HiddenInput())
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index a8f6646a02..1036f9029b 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -16,7 +16,6 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.cache import never_cache
 from django.views.decorators.csrf import csrf_protect
 from django.utils import timezone
-
 from sudo.decorators import sudo_required
 
 from sentry.constants import MEMBER_USER
@@ -40,11 +39,20 @@ def login(request):
     if request.user.is_authenticated():
         return login_redirect(request)
 
-    form = AuthenticationForm(request, request.POST or None)
+    form = AuthenticationForm(request, request.POST or None,
+                              captcha=bool(request.session.get('needs_captcha')))
     if form.is_valid():
         login_user(request, form.get_user())
+
+        request.session.pop('needs_captcha', None)
+
         return login_redirect(request)
 
+    elif request.POST and not request.session.get('needs_captcha'):
+        request.session['needs_captcha'] = 1
+        form = AuthenticationForm(request, request.POST or None, captcha=True)
+        form.errors.pop('captcha', None)
+
     request.session.set_test_cookie()
 
     context = csrf(request)
@@ -67,7 +75,8 @@ def register(request):
     if not (settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register')):
         return HttpResponseRedirect(reverse('sentry'))
 
-    form = RegistrationForm(request.POST or None)
+    form = RegistrationForm(request.POST or None,
+                            captcha=bool(request.session.get('needs_captcha')))
     if form.is_valid():
         user = form.save()
 
@@ -79,8 +88,15 @@ def register(request):
 
         login_user(request, user)
 
+        request.session.pop('needs_captcha', None)
+
         return login_redirect(request)
 
+    elif request.POST and not request.session.get('needs_captcha'):
+        request.session['needs_captcha'] = 1
+        form = RegistrationForm(request.POST or None, captcha=True)
+        form.errors.pop('captcha', None)
+
     return render_to_response('sentry/register.html', {
         'form': form,
         'AUTH_PROVIDERS': get_auth_providers(),
@@ -109,7 +125,8 @@ def logout(request):
 
 
 def recover(request):
-    form = RecoverPasswordForm(request.POST or None)
+    form = RecoverPasswordForm(request.POST or None,
+                               captcha=bool(request.session.get('needs_captcha')))
     if form.is_valid():
         password_hash, created = LostPasswordHash.objects.get_or_create(
             user=form.cleaned_data['user']
@@ -121,10 +138,17 @@ def recover(request):
     if form.is_valid():
         password_hash.send_recover_mail()
 
+        request.session.pop('needs_captcha', None)
+
         return render_to_response('sentry/account/recover/sent.html', {
             'email': password_hash.user.email,
         }, request)
 
+    elif request.POST and not request.session.get('needs_captcha'):
+        request.session['needs_captcha'] = 1
+        form = RecoverPasswordForm(request.POST or None, captcha=True)
+        form.errors.pop('captcha', None)
+
     context = {
         'form': form,
     }
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index cafe6fa780..7f3b8fa487 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -34,8 +34,9 @@ class LoginTest(TestCase):
             'password': 'bizbar',
         })
         assert resp.status_code == 200
-        assert resp.context['form'].errors['__all__'] == \
-            [u'Please enter a correct username and password. Note that both fields may be case-sensitive.']
+        assert resp.context['form'].errors['__all__'] == [
+            u'Please enter a correct username and password. Note that both fields may be case-sensitive.'
+        ]
 
     def test_valid_credentials(self):
         # load it once for test cookie
