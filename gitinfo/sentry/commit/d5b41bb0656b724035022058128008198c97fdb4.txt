commit d5b41bb0656b724035022058128008198c97fdb4
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 14 22:51:38 2012 -0800

    Initial refactor of commands to utilize Logan

diff --git a/CHANGES b/CHANGES
index f471145981..ed7c130ea2 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,14 @@
+Version 3.0.0
+-------------
+
+Version 3 of Sentry is centered around a restructure of the internal services and
+the architecture for running those.
+
+* Sentry no longer provides the ability to daemonize processes. This should now be
+  done at the system level.
+* All of Sentry's CLI is now handled through Logan (https://github.com/dcramer/logan),
+  which simply pipes commands to Django's internal system utilizing custom configuration.
+
 Version 2.9.0
 -------------
 
diff --git a/docs/cli/index.rst b/docs/cli/index.rst
index 96ff024082..9c2a25a371 100644
--- a/docs/cli/index.rst
+++ b/docs/cli/index.rst
@@ -7,6 +7,9 @@ perform most required operations that are unachievable within the web UI.
 For a list of commands, you can also use ``sentry help``, or ``sentry [command] --help``
 for help on a specific command.
 
+.. note:: The script is powered by a library called `Logan <https://github.com/dcramer/logan>`_
+          and simply acts as a conduit to django-admin.py.
+
 Builtin Commands
 ----------------
 
@@ -22,39 +25,21 @@ Builtin Commands
 
 .. data:: start [services]
 
-    Starts all background services.
+    Starts a Sentry service. By default this value is 'http'.
 
-    If services are passed, only starts the given services.
+    Other services are 'worker', for a queue worker, and 'udp',
+    for the UDP server.
 
     ::
 
-        sentry start --daemon
-
-.. data:: stop [services]
-
-    Stops all background services.
-
-    If services are passed, only stops the given services.
-
-.. data:: restart [services]
-
-    Stops all background services.
-
-    If services are passed, only restarts the given services.
+        sentry start worker
 
 .. data:: upgrade
 
-    Performs any needed database migrations.
+    Performs any needed database migrations. This is similar to running
+    ``django-admin.py syncdb --migrate``.
 
 .. data:: cleanup
 
     Performs all trim operations based on your configuration.
 
-.. data:: manage [command] [args]
-
-    A wrapper around ``django-admin.py`` (aka ``manage.py``).
-
-    ::
-
-        sentry manage createsuperuser
-
diff --git a/sentry/commands/__init__.py b/sentry/commands/__init__.py
deleted file mode 100644
index 4bf9e89273..0000000000
--- a/sentry/commands/__init__.py
+++ /dev/null
@@ -1,11 +0,0 @@
-"""
-sentry.commands
-~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from sentry.commands.cleanup import cleanup
-from sentry.commands.manage import manage
-from sentry.commands.control import start, stop, restart
-from sentry.commands.upgrade import upgrade
diff --git a/sentry/commands/cleanup.py b/sentry/commands/cleanup.py
deleted file mode 100644
index 63370a033a..0000000000
--- a/sentry/commands/cleanup.py
+++ /dev/null
@@ -1,37 +0,0 @@
-"""
-sentry.commands.cleanup
-~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from sentry.commands.utils import options, opt
-
-
-@options(
-    opt('--days', default='30', type=int, help='Numbers of days to truncate on.'),
-    opt('--logger', help='Limit truncation to only entries from logger.'),
-    opt('--site', help='Limit truncation to only entries from site.'),
-    opt('--server', help='Limit truncation to only entries from server.'),
-    opt('--level', help='Limit truncation to only entries greater than or equal to level (e.g. DEBUG).'),
-    opt('--project', type=int, help='Limit truncation to only entries from project.'),
-    opt('--resolved', dest='resolved', action='store_true', help='Limit truncation to only entries that are resolved.'),
-    opt('--unresolved', dest='resolved', action='store_false', help='Limit truncation to only entries that are unresolved.'),
-)
-def cleanup(days=30, logger=None, site=None, server=None, level=None,
-            project=None, resolved=None):
-    import logging
-    from sentry.queue.tasks.cleanup import cleanup
-
-    if level is not None and not str(level).isdigit():
-        level = getattr(logging, level.upper())
-
-    cleanup(
-        days=days,
-        logger=logger,
-        site=site,
-        server=server,
-        level=level,
-        project=project,
-        resolved=resolved,
-    )
diff --git a/sentry/commands/control.py b/sentry/commands/control.py
deleted file mode 100644
index ed071d0be0..0000000000
--- a/sentry/commands/control.py
+++ /dev/null
@@ -1,109 +0,0 @@
-"""
-sentry.commands.control
-~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from sentry.commands.utils import options, opt, consume_args
-from sentry.services import http, worker, daemon, udp
-import os
-import os.path
-
-
-services = {
-    'http': http.SentryHTTPServer,
-    'worker': worker.SentryWorker,
-    'udp': udp.SentryUDPServer,
-}
-
-
-def get_service_from_args(args):
-    if len(args) == 2:
-        service = args[1]
-    else:
-        service = 'http'
-
-    if service not in services:
-        raise ValueError(service)
-
-    return service
-
-
-def get_daemon_for_service(service, daemonize=True, **options):
-    from sentry.conf import settings
-
-    service_class = services[service]
-
-    app = service_class(**options)
-
-    kwargs = {
-        'app': app,
-        'detach_process': daemonize,
-    }
-    if daemonize:
-        log = open(os.path.join(settings.LOG_DIR, '%s.log' % (service,)), 'w+')
-        kwargs.update({
-            'pidfile': os.path.join(settings.RUN_DIR, '%s.pid' % (service,)),
-            'stderr': log,
-            'stdout': log,
-        })
-
-    proc = daemon.Daemon(**kwargs)
-
-    return proc
-
-
-@options(
-    opt('--daemon', '-d', action='store_true', default=False, dest='daemonize'),
-    opt('--no-daemon', '-f', action='store_false', default=False, dest='daemonize'),
-    opt('--debug', action='store_true', default=False, dest='debug'),
-)
-@consume_args
-def start(args, daemonize=False, debug=False):
-    from sentry.conf import settings
-
-    if not os.path.exists(settings.LOG_DIR):
-        os.makedirs(settings.LOG_DIR)
-
-    if not os.path.exists(settings.RUN_DIR):
-        os.makedirs(settings.RUN_DIR)
-
-    # Ensure we force an environment upgrade before we start the server
-
-    service = get_service_from_args(args)
-
-    # Special handling for http
-    if args[0] == 'http':
-        proc = service(
-            debug=debug,
-            daemonize=daemonize,
-            pidfile=os.path.join(settings.RUN_DIR, '%s.pid' % (args[0],)),
-            logfile=os.path.join(settings.LOG_DIR, '%s.log' % (args[0],)),
-        )
-    else:
-        proc = get_daemon_for_service(service, daemonize, debug=debug)
-
-    proc.start()
-
-
-@consume_args
-def stop(args):
-    # TODO: we should improve upon this so it just discovers the PID
-    # for an app and sends the signal
-    service = get_service_from_args(args)
-
-    proc = get_daemon_for_service(service)
-
-    proc.stop()
-
-
-@consume_args
-def restart(args):
-    # TODO: we should improve upon this so it just discovers the PID
-    # for an app and sends the signal
-    service = get_service_from_args(args)
-
-    proc = get_daemon_for_service(service)
-
-    proc.restart()
diff --git a/sentry/commands/manage.py b/sentry/commands/manage.py
deleted file mode 100644
index dc18239da8..0000000000
--- a/sentry/commands/manage.py
+++ /dev/null
@@ -1,25 +0,0 @@
-"""
-sentry.commands.manage
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from sentry.commands.utils import consume_args
-
-
-@consume_args
-def manage(args):
-    from django.core.management import ManagementUtility
-    utility = ManagementUtility(args)
-    utility.execute()
-
-
-def update_migrations():
-    """
-    Creates schemamigrations for sentry.
-    """
-    from django.core.management import ManagementUtility
-    args = 'manage.py schemamigration sentry --auto'.split(' ')
-    utility = ManagementUtility(args)
-    utility.execute()
diff --git a/sentry/commands/upgrade.py b/sentry/commands/upgrade.py
deleted file mode 100644
index b522939d70..0000000000
--- a/sentry/commands/upgrade.py
+++ /dev/null
@@ -1,53 +0,0 @@
-"""
-sentry.commands.upgrade
-~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from django.core.management import call_command
-from django.conf import settings
-from sentry.commands.utils import options, opt
-
-
-@options(
-    opt('--interactive', default=False, action='store_true'),
-    opt('--delete-ghost-migrations', default=True, dest='delete_ghosts'),
-)
-def upgrade(interactive=True, delete_ghosts=True):
-    call_command('syncdb', database='default', interactive=interactive)
-
-    if 'south' in settings.INSTALLED_APPS:
-        call_command('migrate', database='default', interactive=interactive, delete_ghosts=delete_ghosts)
-
-    register_views()
-
-
-def register_views():
-    from sentry.views import View as ViewHandler
-    from sentry.models import View
-
-    for viewhandler in ViewHandler.objects.all():
-        path = '%s.%s' % (viewhandler.__module__, viewhandler.__class__.__name__)
-
-        defaults = dict(
-            verbose_name=viewhandler.verbose_name,
-            verbose_name_plural=viewhandler.verbose_name_plural,
-        )
-
-        # TODO: this should handle race conditions
-        view, created = View.objects.get_or_create(
-            path=path,
-            defaults=defaults,
-        )
-        if created:
-            continue
-
-        save = False
-        for k, v in defaults.iteritems():
-            if getattr(view, k) != getattr(viewhandler, k):
-                save = True
-                setattr(view, k, v)
-
-        if save:
-            view.save()
diff --git a/sentry/commands/utils.py b/sentry/commands/utils.py
deleted file mode 100644
index 2d16bdd082..0000000000
--- a/sentry/commands/utils.py
+++ /dev/null
@@ -1,22 +0,0 @@
-"""
-sentry.commands.utils
-~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from optparse import make_option
-
-opt = make_option
-
-
-def options(*options):
-    def wrapped(func):
-        func.options = options
-        return func
-    return wrapped
-
-
-def consume_args(func):
-    func.consume_args = True
-    return func
diff --git a/sentry/management/__init__.py b/sentry/management/__init__.py
index 6c87a58ee9..124db14fff 100644
--- a/sentry/management/__init__.py
+++ b/sentry/management/__init__.py
@@ -5,100 +5,3 @@ sentry.management
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-
-import logging
-
-from django.contrib.auth.models import User
-from django.db.models.signals import post_syncdb, post_save
-
-from sentry.conf import settings
-from sentry.models import Project, MessageIndex, SearchDocument, \
-  Group, Event, FilterValue, MessageFilterValue, MessageCountByMinute, \
-  MEMBER_OWNER, MEMBER_USER, MEMBER_SYSTEM
-
-
-def register_indexes():
-    """
-    Grabs all required indexes from filters and registers them.
-    """
-    from sentry.filters import Filter
-    logger = logging.getLogger('sentry.setup')
-    for cls in (f for f in Filter.objects.all() if f.column.startswith('data__')):
-        MessageIndex.objects.register_index(cls.column, index_to='group')
-        logger.debug('Registered index for for %r' % cls.column)
-register_indexes()
-
-
-def create_default_project(created_models, verbosity=2, **kwargs):
-    if Project in created_models:
-        try:
-            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id')[0]
-        except IndexError:
-            owner = None
-
-        project, created = Project.objects.get_or_create(
-            id=1,
-            defaults=dict(
-                public=True,
-                name='Default',
-                owner=owner,
-            )
-        )
-        if not created:
-            return
-
-        if verbosity > 0:
-            print 'Created default Sentry project owned by %s' % owner
-
-        # Iterate all groups to update their relations
-        for model in (Group, Event, FilterValue, MessageFilterValue,
-                      MessageCountByMinute):
-            if verbosity > 0:
-                print ('Backfilling project ids for %s.. ' % model),
-            model.objects.filter(project__isnull=True).update(
-                project=project,
-            )
-            if verbosity > 0:
-                print 'done!'
-
-
-def create_project_member_for_owner(instance, created, **kwargs):
-    if not created:
-        return
-
-    if not instance.owner:
-        return
-
-    instance.member_set.create(
-        user=instance.owner,
-        type=globals()[settings.DEFAULT_PROJECT_ACCESS]
-    )
-
-
-def update_document(instance, created, **kwargs):
-    if created:
-        return
-
-    SearchDocument.objects.filter(
-        project=instance.project,
-        group=instance,
-    ).update(status=instance.status)
-
-# Signal registration
-post_syncdb.connect(
-    create_default_project,
-    dispatch_uid="create_default_project",
-    weak=False,
-)
-post_save.connect(
-    create_project_member_for_owner,
-    sender=Project,
-    dispatch_uid="create_project_member_for_owner",
-    weak=False,
-)
-post_save.connect(
-    update_document,
-    sender=Group,
-    dispatch_uid="update_document",
-    weak=False,
-)
\ No newline at end of file
diff --git a/sentry/management/commands/__init__.py b/sentry/management/commands/__init__.py
new file mode 100644
index 0000000000..a97899b930
--- /dev/null
+++ b/sentry/management/commands/__init__.py
@@ -0,0 +1,7 @@
+"""
+sentry.management.commands
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
diff --git a/sentry/management/commands/cleanup.py b/sentry/management/commands/cleanup.py
new file mode 100644
index 0000000000..013c224414
--- /dev/null
+++ b/sentry/management/commands/cleanup.py
@@ -0,0 +1,35 @@
+"""
+sentry.management.commands.cleanup
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.management.base import BaseCommand
+from optparse import make_option
+
+
+class Command(BaseCommand):
+    help = 'Performs any pending database migrations and upgrades'
+
+    option_list = BaseCommand.option_list + (
+        make_option('--days', default='30', type=int, help='Numbers of days to truncate on.'),
+        make_option('--logger', help='Limit truncation to only entries from logger.'),
+        make_option('--site', help='Limit truncation to only entries from site.'),
+        make_option('--server', help='Limit truncation to only entries from server.'),
+        make_option('--level', help='Limit truncation to only entries greater than or equal to level (e.g. DEBUG).'),
+        make_option('--project', type=int, help='Limit truncation to only entries from project.'),
+        make_option('--resolved', dest='resolved', action='store_true', help='Limit truncation to only entries that are resolved.'),
+        make_option('--unresolved', dest='resolved', action='store_false', help='Limit truncation to only entries that are unresolved.'),
+    )
+
+    def handle(self, **options):
+        import logging
+        from sentry.queue.tasks.cleanup import cleanup
+
+        level = options['level']
+
+        if level is not None and not str(level).isdigit():
+            options['level'] = getattr(logging, level.upper())
+
+        cleanup(**options)
diff --git a/sentry/management/commands/start.py b/sentry/management/commands/start.py
new file mode 100644
index 0000000000..29cddb4f6c
--- /dev/null
+++ b/sentry/management/commands/start.py
@@ -0,0 +1,57 @@
+"""
+sentry.management.commands.start
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.management import call_command
+from django.core.management.base import BaseCommand, CommandError
+
+from optparse import make_option
+
+from sentry.conf import settings
+from sentry.services import http, worker, udp
+
+import os
+
+services = {
+    'http': http.SentryHTTPServer,
+    'worker': worker.SentryWorker,
+    'udp': udp.SentryUDPServer,
+}
+
+
+class Command(BaseCommand):
+    args = '<service>'
+    help = 'Starts the specified service'
+
+    option_list = BaseCommand.option_list + (
+        make_option('--debug',
+            action='store_true',
+            dest='debug',
+            default=False),
+    )
+
+    def handle(self, service_name='http', **options):
+        if not os.path.exists(settings.LOG_DIR):
+            os.makedirs(settings.LOG_DIR)
+
+        if not os.path.exists(settings.RUN_DIR):
+            os.makedirs(settings.RUN_DIR)
+
+        # Ensure we perform an upgrade before starting any service
+        print "Performing upgrade before service startup..."
+        call_command('upgrade', verbosity=0)
+
+        try:
+            service_class = services[service_name]
+        except KeyError:
+            raise CommandError('%r is not a valid service' % service_name)
+
+        service = service_class(
+            debug=options['debug'],
+        )
+
+        print "Running service: %r" % service_name
+        service.run()
diff --git a/sentry/management/commands/upgrade.py b/sentry/management/commands/upgrade.py
new file mode 100644
index 0000000000..8ca07de352
--- /dev/null
+++ b/sentry/management/commands/upgrade.py
@@ -0,0 +1,16 @@
+"""
+sentry.management.commands.upgrade
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.management import call_command
+from django.core.management.base import BaseCommand
+
+
+class Command(BaseCommand):
+    help = 'Performs any pending database migrations and upgrades'
+
+    def handle(self, **options):
+        call_command('syncdb', migrate=True)
diff --git a/sentry/models.py b/sentry/models.py
index 07a94a64d4..d8750be853 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -16,11 +16,11 @@ import urlparse
 from datetime import datetime
 from indexer.models import BaseIndex
 
-
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import F
+from django.db.models.signals import post_syncdb, post_save
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
@@ -563,5 +563,91 @@ class SearchToken(Model):
 class MessageIndex(BaseIndex):
     model = Event
 
-# Import modules to register various things
-from . import management
+
+## Register Signals
+
+def register_indexes():
+    """
+    Grabs all required indexes from filters and registers them.
+    """
+    from sentry.filters import Filter
+    logger = logging.getLogger('sentry.setup')
+    for cls in (f for f in Filter.objects.all() if f.column.startswith('data__')):
+        MessageIndex.objects.register_index(cls.column, index_to='group')
+        logger.debug('Registered index for for %r' % cls.column)
+register_indexes()
+
+
+def create_default_project(created_models, verbosity=2, **kwargs):
+    if Project in created_models:
+        try:
+            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id')[0]
+        except IndexError:
+            owner = None
+
+        project, created = Project.objects.get_or_create(
+            id=1,
+            defaults=dict(
+                public=True,
+                name='Default',
+                owner=owner,
+            )
+        )
+        if not created:
+            return
+
+        if verbosity > 0:
+            print 'Created default Sentry project owned by %s' % owner
+
+        # Iterate all groups to update their relations
+        for model in (Group, Event, FilterValue, MessageFilterValue,
+                      MessageCountByMinute):
+            if verbosity > 0:
+                print ('Backfilling project ids for %s.. ' % model),
+            model.objects.filter(project__isnull=True).update(
+                project=project,
+            )
+            if verbosity > 0:
+                print 'done!'
+
+
+def create_project_member_for_owner(instance, created, **kwargs):
+    if not created:
+        return
+
+    if not instance.owner:
+        return
+
+    instance.member_set.create(
+        user=instance.owner,
+        type=globals()[settings.DEFAULT_PROJECT_ACCESS]
+    )
+
+
+def update_document(instance, created, **kwargs):
+    if created:
+        return
+
+    SearchDocument.objects.filter(
+        project=instance.project,
+        group=instance,
+    ).update(status=instance.status)
+
+# Signal registration
+post_syncdb.connect(
+    create_default_project,
+    dispatch_uid="create_default_project",
+    weak=False,
+)
+post_save.connect(
+    create_project_member_for_owner,
+    sender=Project,
+    dispatch_uid="create_project_member_for_owner",
+    weak=False,
+)
+post_save.connect(
+    update_document,
+    sender=Group,
+    dispatch_uid="update_document",
+    weak=False,
+)
\ No newline at end of file
diff --git a/sentry/scripts/__init__.py b/sentry/scripts/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
deleted file mode 100644
index 9bf366b340..0000000000
--- a/sentry/scripts/runner.py
+++ /dev/null
@@ -1,184 +0,0 @@
-#!/usr/bin/env python
-"""
-sentry.scripts.runner
-~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-import base64
-import datetime
-import errno
-import imp
-import os
-import os.path
-import sys
-
-from django.conf import settings as django_settings
-from optparse import OptionParser
-from sentry import VERSION, environment, commands
-
-
-ALL_COMMANDS = (
-    # General use commands
-    'init',
-    'upgrade',
-    'start',
-    'stop',
-    'restart',
-    'cleanup',
-
-    # These should probably be hidden by default
-    'manage',
-)
-
-KEY_LENGTH = 40
-
-DEFAULT_CONFIG_PATH = os.environ.get('SENTRY_CONFIG',
-  os.path.expanduser(os.path.join('~', '.sentry', 'sentry.conf.py')))
-
-CONFIG_TEMPLATE = """
-import os.path
-
-from sentry.conf.server import *
-
-ROOT = os.path.dirname(__file__)
-
-DATABASES = {
-    'default': {
-        # You can swap out the engine for MySQL easily by changing this value
-        # to ``django.db.backends.mysql`` or to PostgreSQL with
-        # ``django.db.backends.postgresql_psycopg2``
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': os.path.join(ROOT, 'sentry.db'),
-        'USER': 'postgres',
-        'PASSWORD': '',
-        'HOST': '',
-        'PORT': '',
-    }
-}
-
-SENTRY_KEY = %(default_key)r
-
-# Set this to false to require authentication
-SENTRY_PUBLIC = True
-
-SENTRY_WEB_HOST = '0.0.0.0'
-SENTRY_WEB_PORT = 9000
-SENTRY_LOG_DIR = os.path.abspath(os.path.join(ROOT, 'log'))
-SENTRY_RUN_DIR = os.path.abspath(os.path.join(ROOT, 'run'))
-"""
-
-
-def copy_default_settings(filepath):
-    """
-    Creates a default settings file at ``filepath``.
-    """
-    dirname = os.path.dirname(filepath)
-    if not os.path.exists(dirname):
-        os.makedirs(dirname)
-
-    with open(filepath, 'w') as fp:
-        key = base64.b64encode(os.urandom(KEY_LENGTH))
-
-        output = CONFIG_TEMPLATE % dict(default_key=key)
-        fp.write(output)
-
-
-def settings_from_file(filename, silent=False):
-    """
-    Configures django settings from an arbitrary (non sys.path) filename.
-    """
-    mod = imp.new_module('config')
-    mod.__file__ = filename
-    try:
-        execfile(filename, mod.__dict__)
-    except IOError, e:
-        if silent and e.errno in (errno.ENOENT, errno.EISDIR):
-            return False
-        e.strerror = 'Unable to load configuration file (%s)' % e.strerror
-        raise
-
-    tuple_settings = ("INSTALLED_APPS", "TEMPLATE_DIRS")
-
-    if not django_settings.configured:
-        django_settings.configure()
-
-    for setting in dir(mod):
-        if setting == setting.upper():
-            setting_value = getattr(mod, setting)
-            if setting in tuple_settings and type(setting_value) == str:
-                setting_value = (setting_value,)  # In case the user forgot the comma.
-            setattr(django_settings, setting, setting_value)
-
-
-def main():
-    args = sys.argv
-    if len(args) < 2 or args[1] not in ALL_COMMANDS:
-        print "usage: sentry [command] [options]"
-        print
-        print "Available subcommands:"
-        for cmd in ALL_COMMANDS:
-            print "  ", cmd
-        sys.exit(1)
-
-    parser = OptionParser(version="%%prog %s" % VERSION)
-    if args[1] == 'init':
-        (options, args) = parser.parse_args()
-
-        config_path = ' '.join(args[1:]) or DEFAULT_CONFIG_PATH
-
-        if os.path.exists(config_path):
-            resp = None
-            while resp not in ('Y', 'n'):
-                resp = raw_input('File already exists at %r, overwrite? [nY] ' % config_path)
-                if resp == 'n':
-                    print "Aborted!"
-                    return
-
-        try:
-            copy_default_settings(config_path)
-        except OSError, e:
-            raise e.__class__, 'Unable to write default settings file to %r' % config_path
-
-        print "Configuration file created at %r" % config_path
-
-        return
-
-    parser.add_option('--config', metavar='CONFIG', default=DEFAULT_CONFIG_PATH)
-
-    command = getattr(commands, args[1])
-
-    for option in getattr(command, 'options', []):
-        parser.add_option(option)
-
-    (options, args) = parser.parse_args()
-
-    config_path = options.config
-
-    # We hardcode skipping this check via init
-    if not os.path.exists(config_path):
-        raise ValueError("Configuration file does not exist. Use 'init' to initialize the file.")
-
-    environment['config'] = config_path
-    environment['start_date'] = datetime.datetime.utcnow()
-
-    settings_from_file(config_path)
-
-    # set debug
-    if getattr(options, 'debug', False):
-        django_settings.DEBUG = True
-
-    # filter out reserved options
-    kwargs = dict((k, v) for k, v in options.__dict__.iteritems() if k != 'config')
-
-    # execute command
-    if getattr(command, 'consume_args', False):
-        command(args, **kwargs)
-    else:
-        command(**kwargs)
-
-    sys.exit(0)
-
-if __name__ == '__main__':
-    main()
diff --git a/sentry/services/http.py b/sentry/services/http.py
index 41428c1c92..6618605bcd 100644
--- a/sentry/services/http.py
+++ b/sentry/services/http.py
@@ -45,8 +45,7 @@ class SentryApplication(DjangoApplication):
 class SentryHTTPServer(Service):
     name = 'http'
 
-    def __init__(self, host=None, port=None, debug=False, daemonize=False, pidfile=None,
-                 logfile=None):
+    def __init__(self, host=None, port=None, debug=False):
         from sentry.conf import settings
 
         self.host = host or settings.WEB_HOST
@@ -68,9 +67,7 @@ class SentryHTTPServer(Service):
             'bind': '%s:%s' % (self.host, self.port),
             'worker_class': 'eventlet',
             'debug': debug,
-            'daemon': daemonize,
-            'pidfile': pidfile,
-            'errorlog': logfile,
+            'daemon': False,
             # 'post_fork': post_fork,
         }
         options.update(settings.WEB_OPTIONS or {})
@@ -84,5 +81,3 @@ class SentryHTTPServer(Service):
             sys.stderr.write("\nError: %s\n\n" % e)
             sys.stderr.flush()
             sys.exit(1)
-
-    start = run
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
index eeb02a0858..b1200bed19 100644
--- a/sentry/services/udp.py
+++ b/sentry/services/udp.py
@@ -28,13 +28,17 @@ class SentryUDPServer(Service):
     def handle(self, data, address):
         from sentry.utils.auth import parse_auth_header
         from sentry.coreapi import (project_from_auth_vars, decode_and_decompress_data, safely_load_json_string,
-                                    validate_data, insert_data_to_database, APIError)
+                                    validate_data, insert_data_to_database, APIError, InvalidTimestamp)
         try:
             try:
                 auth_header, data = data.split("\n\n", 1)
             except ValueError:
                 raise APIError("missing auth header")
-            project = project_from_auth_vars(parse_auth_header(auth_header), data)
+
+            auth_vars = parse_auth_header(auth_header)
+            project = project_from_auth_vars(auth_vars, data)
+
+            client = auth_vars.get('sentry_client')
 
             if not data.startswith('{'):
                 data = decode_and_decompress_data(data)
diff --git a/sentry/utils/runner.py b/sentry/utils/runner.py
new file mode 100644
index 0000000000..08aee064d7
--- /dev/null
+++ b/sentry/utils/runner.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python
+from logan.runner import run_app
+from sentry import environment
+
+import base64
+import datetime
+import os
+
+KEY_LENGTH = 40
+
+CONFIG_TEMPLATE = """
+import os.path
+
+ROOT = os.path.dirname(__file__)
+
+DATABASES = {
+    'default': {
+        # You can swap out the engine for MySQL easily by changing this value
+        # to ``django.db.backends.mysql`` or to PostgreSQL with
+        # ``django.db.backends.postgresql_psycopg2``
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(ROOT, 'sentry.db'),
+        'USER': 'postgres',
+        'PASSWORD': '',
+        'HOST': '',
+        'PORT': '',
+    }
+}
+
+SENTRY_KEY = %(default_key)r
+
+# Set this to false to require authentication
+SENTRY_PUBLIC = True
+
+SENTRY_WEB_HOST = '0.0.0.0'
+SENTRY_WEB_PORT = 9000
+SENTRY_LOG_DIR = os.path.abspath(os.path.join(ROOT, 'log'))
+SENTRY_RUN_DIR = os.path.abspath(os.path.join(ROOT, 'run'))
+"""
+
+
+def generate_settings():
+    """
+    This command is run when ``default_path`` doesn't exist, or ``init`` is
+    run and returns a string representing the default data to put into their
+    settings file.
+    """
+    output = CONFIG_TEMPLATE % dict(
+        default_key=base64.b64encode(os.urandom(KEY_LENGTH)),
+    )
+
+    return output
+
+
+def initialize_app(config):
+    environment['config'] = config.get('config_path')
+    environment['start_date'] = datetime.datetime.utcnow()
+
+
+def main():
+    run_app(
+        project='sentry',
+        default_config_path='~/.sentry/sentry.conf.py',
+        default_settings='sentry.conf.defaults',
+        settings_initializer=generate_settings,
+        settings_envvar='SENTRY_CONF',
+        initializer=initialize_app,
+    )
diff --git a/setup.py b/setup.py
index 3a33fc65ea..fc8a486430 100755
--- a/setup.py
+++ b/setup.py
@@ -38,6 +38,7 @@ install_requires = [
     'eventlet>=0.9.15',
     'kombu>=1.5.1',
     'gunicorn>=0.13.4',
+    'logan>=0.1.0',
     'python-daemon>=1.6',
     'pytz>=2011n',
     'raven>=1.4.3',
@@ -46,7 +47,7 @@ install_requires = [
 
 setup(
     name='sentry',
-    version='2.9.0',
+    version='3.0.0',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/sentry',
@@ -60,10 +61,11 @@ setup(
     test_suite='runtests.runtests',
     license='BSD',
     include_package_data=True,
-    entry_points="""
-    [console_scripts]
-    sentry = sentry.scripts.runner:main
-    """,
+    entry_points={
+        'console_scripts': [
+            'sentry = sentry.utils.runner:main',
+        ],
+    },
     classifiers=[
         'Framework :: Django',
         'Intended Audience :: Developers',
