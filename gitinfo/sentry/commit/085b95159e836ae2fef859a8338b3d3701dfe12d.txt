commit 085b95159e836ae2fef859a8338b3d3701dfe12d
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Jan 22 17:20:28 2019 -0800

    feat(dashboards): Dashboards api endpoint. (#11397)
    
    * Added first draft of dashboards.
    
    * Added post to the endpoint.
    
    * Added a bit more to serializers.
    
    * Added a url for the endpoint.
    
    * Fleshed out the api endpoint better added a test. Need help with the json blob.
    
    * removed widget serializer.
    
    * Added new changes to dashboards.
    
    * Added contains to dashboard title query.
    
    * starting to clean up tests with changes made to models.
    
    * Changed response to 409 for an integrityerror
    
    * various rvisions
    
    * small edits to organization dashboards.:
    
    * Minor edits based off Marks review.
    
    * reorderd things in dashboard.py
    
    * removed json as its in its own pr.
    
    * fixed test.
    
    * updated doc string
    
    * Moved dashboard rest serializer to the endpoint since that was the only place it was used.:

diff --git a/src/sentry/api/endpoints/organization_dashboards.py b/src/sentry/api/endpoints/organization_dashboards.py
new file mode 100644
index 0000000000..14dc477b12
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_dashboards.py
@@ -0,0 +1,74 @@
+from __future__ import absolute_import
+
+from django.db import IntegrityError, transaction
+from rest_framework import serializers
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.models import Dashboard
+from rest_framework.response import Response
+
+
+class DashboardSerializer(serializers.Serializer):
+    title = serializers.CharField(required=True)
+
+
+class OrganizationDashboardsEndpoint(OrganizationEndpoint):
+    doc_section = DocSection.ORGANIZATIONS
+
+    def get(self, request, organization):
+        """
+        Retrieve an Organizations Dashboards
+        `````````````````````````````````````
+        Retrieve a list of dashboards that are associated with the given organization.
+        :pparam string organization_slug: the slug of the organization the
+                                          dashboards belongs to.
+        :qparam string query: the title of the dashboard being searched for.
+        :auth: required
+        """
+        dashboards = Dashboard.objects.filter(
+            organization_id=organization.id
+        )
+        query = request.GET.get('query')
+        if query:
+            dashboards = dashboards.filter(
+                title__icontains=query,
+            )
+
+        return self.paginate(
+            request=request,
+            queryset=dashboards,
+            order_by='title',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    def post(self, request, organization):
+        """
+        Create a New Dashboard for an Organization
+        ``````````````````````````````````````````
+        Create a new dashboard for the given Organization
+        :pparam string organization_slug: the slug of the organization the
+                                          dashboards belongs to.
+        :param string title: the title of the dashboard.
+        """
+        serializer = DashboardSerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        try:
+            with transaction.atomic():
+                dashboard = Dashboard.objects.create(
+                    organization_id=organization.id,
+                    title=result['title'],
+                    created_by=request.user,
+                )
+        except IntegrityError:
+            return Response('This dashboard already exists', status=409)
+
+        return Response(serialize(dashboard, request.user), status=201)
diff --git a/src/sentry/api/serializers/models/dashboard.py b/src/sentry/api/serializers/models/organization_dashboard.py
similarity index 100%
rename from src/sentry/api/serializers/models/dashboard.py
rename to src/sentry/api/serializers/models/organization_dashboard.py
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index eeda2bf9d8..152d34b2a0 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 from django.conf.urls import include, patterns, url
 
 from .endpoints.accept_project_transfer import AcceptProjectTransferEndpoint
+from .endpoints.organization_dashboards import OrganizationDashboardsEndpoint
 from .endpoints.relay_heartbeat import RelayHeartbeatEndpoint
 from .endpoints.relay_projectconfigs import RelayProjectConfigsEndpoint
 from .endpoints.relay_publickeys import RelayPublicKeysEndpoint
@@ -418,6 +419,11 @@ urlpatterns = patterns(
         OrganizationDashboardDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-dashboard-details',
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/dashboards/$',
+        OrganizationDashboardsEndpoint.as_view(),
+        name='sentry-api-0-organization-dashboards'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/health/top/$',
         OrganizationHealthTopEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_dashboards.py b/tests/sentry/api/endpoints/test_organization_dashboards.py
new file mode 100644
index 0000000000..0cdc9a24e5
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_dashboards.py
@@ -0,0 +1,92 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Dashboard
+from sentry.testutils import APITestCase
+
+
+class OrganizationDashboardsTest(APITestCase):
+    def setUp(self):
+        super(OrganizationDashboardsTest, self).setUp()
+        self.login_as(self.user)
+        self.url = reverse(
+            'sentry-api-0-organization-dashboards',
+            kwargs={'organization_slug': self.organization.slug}
+        )
+        self.dashboard_1 = Dashboard.objects.create(
+            title='Dashboard 1',
+            created_by=self.user,
+            organization=self.organization,
+        )
+        self.dashboard_2 = Dashboard.objects.create(
+            title='Dashboard 2',
+            created_by=self.user,
+            organization=self.organization,
+        )
+
+    def assert_equal_dashboards(self, dashboard, data):
+        assert data['id'] == six.text_type(dashboard.id)
+        assert data['organization'] == six.text_type(dashboard.organization.id)
+        assert data['title'] == dashboard.title
+        assert data['createdBy'] == six.text_type(dashboard.created_by.id)
+
+    def test_get(self):
+        response = self.client.get(self.url)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+
+        self.assert_equal_dashboards(self.dashboard_1, response.data[0])
+        self.assert_equal_dashboards(self.dashboard_2, response.data[1])
+
+    def test_post(self):
+        response = self.client.post(
+            self.url,
+            data={
+                'title': 'Dashboard from Post',
+            }
+        )
+        assert response.status_code == 201
+        dashboard = Dashboard.objects.get(
+            organization=self.organization,
+            title='Dashboard from Post'
+        )
+        assert dashboard.created_by == self.user
+
+    def test_query(self):
+        dashboard = Dashboard.objects.create(
+            title='Dashboard 11',
+            created_by=self.user,
+            organization=self.organization,
+        )
+        response = self.client.get(self.url, data={'query': '1'})
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        self.assert_equal_dashboards(self.dashboard_1, response.data[0])
+        self.assert_equal_dashboards(dashboard, response.data[1])
+
+    def test_query_no_results(self):
+        response = self.client.get(self.url, data={'query': 'not-in-there'})
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
+
+    def test_invalid_data(self):
+        response = self.client.post(
+            self.url,
+            data={
+                'malformed-data': 'Dashboard from Post',
+            }
+        )
+        assert response.status_code == 400
+
+    def test_integrity_error(self):
+        response = self.client.post(
+            self.url,
+            data={
+                'title': self.dashboard_1.title,
+            }
+        )
+        assert response.status_code == 409
+        assert response.data == 'This dashboard already exists'
