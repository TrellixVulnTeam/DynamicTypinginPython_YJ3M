commit ac96ebcc74235e8889fb0acfe5c75e37611188c9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jul 11 10:38:16 2016 -0700

    Swap release-based stats into issue details
    
    Replaces the stats graphs (which are pure event counts) with stacked bars based on the current release. This allows users to more easily identify if the issues are happening primarily on the current release, or on an older version.
    
    - Adds project environments endpoint
    - Adds issue environment details endpoint
    - Environment selector on issue details will now represent only data for the given selection (for graphs, first seen, and last seen)
    - Adds a 'default environment' option in project settings to choose the default value for the selector
    
    @getsentry/api @getsentry/ui

diff --git a/bin/load-mocks b/bin/load-mocks
index ffd7b5e89d..0fbee969df 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -4,6 +4,7 @@ from sentry.runner import configure
 configure()
 
 import itertools
+import random
 
 from datetime import datetime, timedelta
 from django.conf import settings
@@ -17,7 +18,8 @@ from sentry import roles
 from sentry.app import tsdb, buffer
 from sentry.models import (
     Activity, Broadcast, File, GroupMeta, Organization, OrganizationAccessRequest,
-    OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport
+    OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport,
+    GroupRelease
 )
 from sentry.utils.samples import create_sample_event
 
@@ -37,6 +39,14 @@ LEVELS = itertools.cycle([
     'warning',
 ])
 
+ENVIRONMENTS = itertools.cycle([
+    'production',
+    'production',
+    'staging',
+    'alpha',
+    'beta',
+])
+
 
 def create_system_time_series():
     now = datetime.utcnow().replace(tzinfo=utc)
@@ -70,25 +80,58 @@ def create_system_time_series():
         now = now - timedelta(hours=1)
 
 
-def create_sample_time_series(event):
+def create_sample_time_series(event, release=None):
     group = event.group
+    project = group.project
 
     now = datetime.utcnow().replace(tzinfo=utc)
 
+    if release:
+        grouprelease = GroupRelease.get_or_create(
+            group=group,
+            release=release,
+            environment=event.get_tag('environment') or '',
+            datetime=now,
+        )
+
     for _ in xrange(60):
         count = randint(1, 10)
         tsdb.incr_multi((
-            (tsdb.models.project, group.project.id),
+            (tsdb.models.project, project.id),
             (tsdb.models.group, group.id),
         ), now, count)
         tsdb.incr_multi((
-            (tsdb.models.organization_total_received, group.project.organization_id),
-            (tsdb.models.project_total_received, group.project.id),
+            (tsdb.models.organization_total_received, project.organization_id),
+            (tsdb.models.project_total_received, project.id),
         ), now, int(count * 1.1))
         tsdb.incr_multi((
-            (tsdb.models.organization_total_rejected, group.project.organization_id),
-            (tsdb.models.project_total_rejected, group.project.id),
+            (tsdb.models.organization_total_rejected, project.organization_id),
+            (tsdb.models.project_total_rejected, project.id),
         ), now, int(count * 0.1))
+
+        frequencies = [
+            (tsdb.models.frequent_projects_by_organization, {
+                project.organization_id: {
+                    project.id: count,
+                },
+            }),
+            (tsdb.models.frequent_issues_by_project, {
+                project.id: {
+                    group.id: count,
+                },
+            }),
+        ]
+        if release:
+            frequencies.append(
+                (tsdb.models.frequent_releases_by_groups, {
+                    group.id: {
+                        grouprelease.id: count,
+                    },
+                })
+            )
+
+        tsdb.record_frequency_multi(frequencies, now)
+
         now = now - timedelta(seconds=1)
 
     for _ in xrange(24 * 30):
@@ -105,6 +148,30 @@ def create_sample_time_series(event):
             (tsdb.models.organization_total_rejected, group.project.organization_id),
             (tsdb.models.project_total_rejected, group.project.id),
         ), now, int(count * 0.1))
+
+        frequencies = [
+            (tsdb.models.frequent_projects_by_organization, {
+                project.organization_id: {
+                    project.id: count,
+                },
+            }),
+            (tsdb.models.frequent_issues_by_project, {
+                project.id: {
+                    group.id: count,
+                },
+            }),
+        ]
+        if release:
+            frequencies.append(
+                (tsdb.models.frequent_releases_by_groups, {
+                    group.id: {
+                        grouprelease.id: count,
+                    },
+                })
+            )
+
+        tsdb.record_frequency_multi(frequencies, now)
+
         now = now - timedelta(hours=1)
 
 
@@ -301,6 +368,7 @@ def main(num_events=1):
                     platform=platform,
                     release=release.version,
                     level=LEVELS.next(),
+                    environment=ENVIRONMENTS.next(),
                     message='This is a mostly useless example %s exception' % platform,
                     checksum=md5(platform + str(_)).hexdigest(),
                     breadcrumbs=get_sample_breadcrumbs(prior_event_id=last_event.id if last_event else None),
@@ -311,6 +379,7 @@ def main(num_events=1):
                     project=project,
                     platform='python',
                     release=release.version,
+                    environment=ENVIRONMENTS.next(),
                 )
 
                 event2 = create_sample_event(
@@ -318,6 +387,7 @@ def main(num_events=1):
                     platform='javascript',
                     release=release.version,
                     breadcrumbs=get_sample_breadcrumbs(prior_event_id=event1.event_id),
+                    environment=ENVIRONMENTS.next(),
                     sdk={
                         'name': 'raven-js',
                         'version': '2.1.0',
@@ -330,23 +400,27 @@ def main(num_events=1):
                     project=project,
                     platform='ruby',
                     release=release.version,
+                    environment=ENVIRONMENTS.next(),
                 )
 
                 event5 = create_sample_event(
                     project=project,
                     platform='cocoa',
                     release=release.version,
+                    environment=ENVIRONMENTS.next(),
                 )
 
                 create_sample_event(
                     project=project,
                     platform='php',
                     release=release.version,
+                    environment=ENVIRONMENTS.next(),
                     message='This is a an example PHP event with an extremely long and annoying title\nIt also happens to contain some newlines in it,\nthus making it even more annoying.',
                 )
 
             create_sample_event(
                 project=project,
+                environment=ENVIRONMENTS.next(),
                 platform='csp',
             )
 
@@ -371,11 +445,11 @@ def main(num_events=1):
 
             print('    > Loading time series data'.format(project_name))
 
-            create_sample_time_series(event1)
-            create_sample_time_series(event2)
+            create_sample_time_series(event1, release=release)
+            create_sample_time_series(event2, release=release)
             create_sample_time_series(event3)
-            create_sample_time_series(event4)
-            create_sample_time_series(event5)
+            create_sample_time_series(event4, release=release)
+            create_sample_time_series(event5, release=release)
 
             if hasattr(buffer, 'process_pending'):
                 print('    > Processing pending buffers')
diff --git a/src/sentry/api/endpoints/group_environment_details.py b/src/sentry/api/endpoints/group_environment_details.py
new file mode 100644
index 0000000000..2f489fe92e
--- /dev/null
+++ b/src/sentry/api/endpoints/group_environment_details.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import StatsMixin
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.grouprelease import (
+    GroupReleaseWithStatsSerializer
+)
+from sentry.models import GroupRelease
+
+
+class GroupEnvironmentDetailsEndpoint(GroupEndpoint, StatsMixin):
+    def get(self, request, group, environment):
+        # XXX(dcramer): we have no great way to pass the empty env
+        if environment == 'none':
+            environment = ''
+
+        try:
+            first_release = GroupRelease.objects.filter(
+                group_id=group.id,
+                environment=environment,
+            ).order_by('first_seen')[0]
+        except IndexError:
+            first_release = None
+
+        try:
+            last_release = GroupRelease.objects.filter(
+                group_id=group.id,
+                environment=environment,
+            ).order_by('-first_seen')[0]
+        except IndexError:
+            last_release = None
+
+        stats_args = self._parse_args(request)
+
+        context = {
+            'environment': {
+                'name': environment,
+            },
+            'firstRelease': serialize(first_release, request.user),
+            'lastRelease': serialize(
+                last_release, request.user, GroupReleaseWithStatsSerializer(
+                    since=stats_args['start'],
+                    until=stats_args['end'],
+                )
+            ),
+        }
+        return Response(context)
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 2e3e66c49e..232a762cb4 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -138,6 +138,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:sensitive_fields': project.get_option('sentry:sensitive_fields', []),
             'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
             'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
+            'sentry:default_environment': project.get_option('sentry:default_environment'),
         }
         data['activePlugins'] = active_plugins
         data['team'] = serialize(project.team, request.user)
diff --git a/src/sentry/api/endpoints/project_environments.py b/src/sentry/api/endpoints/project_environments.py
new file mode 100644
index 0000000000..b56b0e28c2
--- /dev/null
+++ b/src/sentry/api/endpoints/project_environments.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.tagvalue import EnvironmentTagValueSerializer
+from sentry.models import TagValue
+
+
+class ProjectEnvironmentsEndpoint(ProjectEndpoint):
+    def get(self, request, project):
+        queryset = TagValue.objects.filter(
+            project=project.id,
+            key='environment',
+        ).order_by('value')
+
+        return Response(serialize(
+            list(queryset), request.user, EnvironmentTagValueSerializer()))
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 7942e8ad18..4921f263dc 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -202,10 +202,10 @@ class StreamGroupSerializer(GroupSerializer):
     def get_attrs(self, item_list, user):
         attrs = super(StreamGroupSerializer, self).get_attrs(item_list, user)
 
-        # we need to compute stats at 1d (1h resolution), and 14d
-        group_ids = [g.id for g in item_list]
-
         if self.stats_period:
+            # we need to compute stats at 1d (1h resolution), and 14d
+            group_ids = [g.id for g in item_list]
+
             segments, interval = self.STATS_PERIOD_CHOICES[self.stats_period]
             now = timezone.now()
             stats = tsdb.get_range(
diff --git a/src/sentry/api/serializers/models/grouprelease.py b/src/sentry/api/serializers/models/grouprelease.py
new file mode 100644
index 0000000000..32186bb3e0
--- /dev/null
+++ b/src/sentry/api/serializers/models/grouprelease.py
@@ -0,0 +1,88 @@
+from __future__ import absolute_import
+
+from collections import namedtuple
+from datetime import timedelta
+from django.utils import timezone
+
+from sentry.app import tsdb
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import GroupRelease, Release
+
+StatsPeriod = namedtuple('StatsPeriod', ('segments', 'interval'))
+
+
+@register(GroupRelease)
+class GroupReleaseSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        release_list = list(Release.objects.filter(
+            id__in=[i.release_id for i in item_list],
+        ))
+        releases = {
+            r.id: d
+            for r, d in zip(release_list, serialize(release_list, user))
+        }
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'release': releases.get(item.release_id),
+            }
+        return result
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'release': attrs['release'],
+            'environment': obj.environment,
+            'firstSeen': obj.first_seen,
+            'lastSeen': obj.last_seen,
+        }
+
+
+class GroupReleaseWithStatsSerializer(GroupReleaseSerializer):
+    STATS_PERIODS = {
+        '24h': StatsPeriod(24, timedelta(hours=1)),
+        '30d': StatsPeriod(30, timedelta(hours=24)),
+    }
+
+    def __init__(self, since=None, until=None):
+        self.since = since
+        self.until = until
+
+    def get_attrs(self, item_list, user):
+        attrs = super(GroupReleaseWithStatsSerializer, self).get_attrs(
+            item_list, user)
+
+        items = {}
+        for item in item_list:
+            items.setdefault(item.group_id, []).append(item.id)
+            attrs[item]['stats'] = {}
+
+        for key, (segments, interval) in self.STATS_PERIODS.iteritems():
+            until = self.until or timezone.now()
+            since = self.since or until - ((segments - 1) * interval)
+
+            try:
+                stats = tsdb.get_frequency_series(
+                    model=tsdb.models.frequent_releases_by_groups,
+                    items=items,
+                    start=since,
+                    end=until,
+                    rollup=int(interval.total_seconds()),
+                )
+            except NotImplementedError:
+                # TODO(dcramer): probably should log this, but not worth
+                # erring out
+                stats = {}
+
+            for item in item_list:
+                attrs[item]['stats'][key] = [
+                    (k, v[item.id])
+                    for k, v in stats.get(item.group_id, {})
+                ]
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        result = super(GroupReleaseWithStatsSerializer, self).serialize(
+            obj, attrs, user)
+        result['stats'] = attrs['stats']
+        return result
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 8ae1b00491..7d895323eb 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -36,10 +36,19 @@ class ProjectSerializer(Serializer):
             default_subscribe = (
                 user_options.get('subscribe_by_default', '1') == '1'
             )
+
+            default_environments = {
+                o.project_id: o.value
+                for o in ProjectOption.objects.filter(
+                    key='sentry:default_environment',
+                    project__in=project_ids,
+                )
+            }
         else:
             bookmarks = set()
             user_options = {}
             default_subscribe = False
+            default_environments = {}
 
         reviewed_callsigns = {
             p.project_id: p.value
@@ -64,6 +73,7 @@ class ProjectSerializer(Serializer):
                     (item.id, 'mail:alert'),
                     default_subscribe,
                 )),
+                'default_environment': default_environments.get(item.id),
                 'reviewed-callsign': reviewed_callsigns.get(item.id),
                 'platforms': platforms_by_project[item.id],
             }
@@ -85,6 +95,7 @@ class ProjectSerializer(Serializer):
             'name': obj.name,
             'isPublic': obj.public,
             'isBookmarked': attrs['is_bookmarked'],
+            'defaultEnvironment': attrs['default_environment'],
             'callSign': obj.callsign,
             'color': obj.color,
             # TODO(mitsuhiko): eventually remove this when we will treat
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index 0544ba3efc..629234f11d 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -57,3 +57,11 @@ class TagValueSerializer(Serializer):
             'lastSeen': obj.last_seen,
             'firstSeen': obj.first_seen,
         }
+
+
+class EnvironmentTagValueSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': str(obj.id),
+            'name': obj.value,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d8b4934272..65705193bb 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -8,6 +8,7 @@ from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
+from .endpoints.group_environment_details import GroupEnvironmentDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
 from .endpoints.group_events_oldest import GroupEventsOldestEndpoint
@@ -44,6 +45,7 @@ from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
 from .endpoints.project_docs import ProjectDocsEndpoint
 from .endpoints.project_docs_platform import ProjectDocsPlatformEndpoint
+from .endpoints.project_environments import ProjectEnvironmentsEndpoint
 from .endpoints.project_events import ProjectEventsEndpoint
 from .endpoints.project_event_details import ProjectEventDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
@@ -209,6 +211,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/docs/(?P<platform>[\w-]+)/$',
         ProjectDocsPlatformEndpoint.as_view(),
         name='sentry-api-0-project-docs-platform'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/environments/$',
+        ProjectEnvironmentsEndpoint.as_view(),
+        name='sentry-api-0-project-environments'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/$',
         ProjectEventsEndpoint.as_view(),
         name='sentry-api-0-project-events'),
@@ -307,6 +312,9 @@ urlpatterns = patterns(
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/stats/$',
         GroupStatsEndpoint.as_view(),
         name='sentry-api-0-group-stats'),
+    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/environments/(?P<environment>[^/]+)/$',
+        GroupEnvironmentDetailsEndpoint.as_view(),
+        name='sentry-api-0-group-environment-details'),
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/tags/$',
         GroupTagsEndpoint.as_view(),
         name='sentry-api-0-group-tags'),
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
index b2f59fcbdb..d5344ea4d5 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -29,7 +29,7 @@ const EventTags = React.createClass({
           group={this.props.group}
           event={this.props.event}
           title={t('Tags')}
-          ype="tags">
+          type="tags">
         <Pills>
           {tags.map((tag) => {
             return (
diff --git a/src/sentry/static/sentry/app/components/group/chart.jsx b/src/sentry/static/sentry/app/components/group/chart.jsx
index bd9eaa3002..9c20268108 100644
--- a/src/sentry/static/sentry/app/components/group/chart.jsx
+++ b/src/sentry/static/sentry/app/components/group/chart.jsx
@@ -4,7 +4,6 @@ import PropTypes from '../../proptypes';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 import {t} from '../../locale';
 
-
 const GroupChart = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -57,4 +56,3 @@ const GroupChart = React.createClass({
 });
 
 export default GroupChart;
-
diff --git a/src/sentry/static/sentry/app/components/group/participants.jsx b/src/sentry/static/sentry/app/components/group/participants.jsx
new file mode 100644
index 0000000000..06c4e7b3cd
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/participants.jsx
@@ -0,0 +1,31 @@
+import React from 'react';
+
+import Avatar from '../avatar';
+
+const GroupParticipants = React.createClass({
+  propTypes: {
+    participants: React.PropTypes.array.isRequired,
+  },
+
+  render() {
+    let participants = this.props.participants;
+
+    return (
+      <div>
+        <h6><span>{participants.length} {'Participant' +
+                                         (participants.length === 1 ? '' : 's')}</span></h6>
+        <ul className="faces">
+          {participants.map((user) => {
+            return (
+              <li>
+                <Avatar size={32} user={user} />
+              </li>
+            );
+          })}
+        </ul>
+      </div>
+    );
+  },
+});
+
+export default GroupParticipants;
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
new file mode 100644
index 0000000000..ceac52d1b5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -0,0 +1,111 @@
+import React from 'react';
+
+import StackedBarChart from '../stackedBarChart';
+import PropTypes from '../../proptypes';
+import {t} from '../../locale';
+import {defined, intcomma} from '../../utils';
+
+const GroupReleaseChart = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    release: React.PropTypes.shape({
+      version: React.PropTypes.string.isRequired,
+    }),
+    releaseStats: React.PropTypes.object,
+    statsPeriod: React.PropTypes.string.isRequired,
+    environment: React.PropTypes.string,
+    firstSeen: React.PropTypes.string,
+    lastSeen: React.PropTypes.string,
+    title: React.PropTypes.string
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      // environment comes from grouprelease, so we can hack
+      this.props.environment !== nextProps.environment ||
+      this.props.group.id !== nextProps.group.id
+    );
+  },
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = chart.getTimeLabel(point);
+    let totalY = 0;
+    for (let i = 0; i < point.y.length; i++) {
+      totalY += point.y[i];
+    }
+
+    return (
+      '<div style="width:150px">' +
+        `<div class="time-label">${timeLabel}</div>` +
+        `<div class="value-label">${intcomma(totalY)} events</div>` +
+      '</div>'
+    );
+  },
+
+  render() {
+    let className = 'bar-chart group-chart ' + (this.props.className || '');
+
+    let group = this.props.group;
+    let stats = group.stats[this.props.statsPeriod];
+    if (!stats || !stats.length) return null;
+
+    let releaseStats = this.props.releaseStats;
+    let releasePoints = {};
+    if (defined(releaseStats)) {
+      releaseStats[this.props.statsPeriod].forEach((point) => {
+        releasePoints[point[0]] = point[1];
+      });
+    }
+
+    let points = stats.map((point) => {
+      let rData = releasePoints[point[0]] || 0;
+      let remaining = point[1] - rData;
+      return {
+        x: point[0],
+        y: [
+          rData,
+          remaining >= 0 ? remaining : 0,
+        ],
+      };
+    });
+
+    let markers = [];
+
+    if (this.props.firstSeen) {
+      let firstSeenX = new Date(this.props.firstSeen).getTime() / 1000;
+      if (firstSeenX >= points[0].x) {
+        markers.push({
+          label: t('First seen'),
+          x: firstSeenX,
+          className: 'first-seen'
+        });
+      }
+    }
+
+    if (this.props.lastSeen) {
+      let lastSeenX = new Date(this.props.lastSeen).getTime() / 1000;
+      if (lastSeenX >= points[0].x) {
+        markers.push({
+          label: t('Last seen'),
+          x: lastSeenX,
+          className: 'last-seen'
+        });
+      }
+    }
+
+    return (
+      <div className={className}>
+        <h6><span>{this.props.title}</span></h6>
+        <StackedBarChart
+          points={points}
+          height={150}
+          className="sparkline"
+          markers={markers}
+          barClasses={['active', 'inactive']}
+          tooltip={this.renderTooltip} />
+      </div>
+    );
+  }
+});
+
+export default GroupReleaseChart;
diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
new file mode 100644
index 0000000000..325886aabe
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -0,0 +1,233 @@
+import React from 'react';
+import {History} from 'react-router';
+
+import ApiMixin from '../../mixins/apiMixin';
+import DropdownLink from '../dropdownLink';
+import EnvironmentStore from '../../stores/environmentStore';
+import LoadingIndicator from '../loadingIndicator';
+import LoadingError from '../loadingError';
+import GroupState from '../../mixins/groupState';
+import GroupReleaseChart from './releaseChart';
+import MenuItem from '../menuItem';
+import SeenInfo from './seenInfo';
+import {toTitleCase} from '../../utils';
+import {t} from '../../locale';
+
+const DEFAULT_ENV_NAME = '(Default Environment)';
+
+const PRODUCTION_ENV_NAMES = new Set([
+  'production',
+  'prod',
+  'release',
+  'master',
+  'trunk',
+]);
+
+// TODO(dcramer): this should listen to EnvironmentStore
+// changes
+const GroupReleaseStats = React.createClass({
+  propTypes: {
+    defaultEnvironment: React.PropTypes.string,
+    group: React.PropTypes.object,
+  },
+
+  mixins: [
+    ApiMixin,
+    GroupState,
+    History,
+  ],
+
+  getDefaultProps() {
+    return {
+      defaultEnvironment: '',
+    };
+  },
+
+  getInitialState() {
+    let envList = EnvironmentStore.getAll();
+    let queryParams = this.props.location.query;
+
+    let selectedEnvironment = (
+        queryParams.hasOwnProperty('environment') ?
+        queryParams.environment :
+        this.props.defaultEnvironment);
+
+    if (selectedEnvironment && envList.filter(e => e.name === selectedEnvironment).length === 0) {
+      selectedEnvironment = null;
+    }
+
+    if (!selectedEnvironment) {
+      let prodEnvs = envList.filter(e => PRODUCTION_ENV_NAMES.has(e.name));
+      selectedEnvironment = prodEnvs.length && prodEnvs[0].name;
+    }
+
+    if (!selectedEnvironment) {
+      selectedEnvironment = envList.length && envList[0].name;
+    }
+
+    return {
+      loading: true,
+      error: false,
+      data: null,
+      envList: envList,
+      environment: selectedEnvironment || '',
+    };
+  },
+
+  componentWillMount() {
+    if (this.state.loading) {
+      this.fetchData();
+    }
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let queryParams = nextProps.location.query;
+    if (queryParams.environment !== this.props.location.query.environment) {
+      this.setState({
+        environment: queryParams.environment,
+        loading: true,
+        error: false,
+      }, this.fetchData);
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      this.state.loading !== nextState.loading ||
+      this.state.error !== nextState.error ||
+      this.state.environment !== nextState.environment ||
+      this.props.group.id !== nextProps.group.id
+    );
+  },
+
+  fetchData() {
+    let group = this.props.group;
+    let env = this.state.environment || 'none';
+    let stats = this.props.group.stats['24h'];
+
+    let since = stats[0][0];
+    let until = stats[stats.length - 1][0];
+
+    this.api.request(`/issues/${group.id}/environments/${env}/`, {
+      query: {
+        since: since,
+        until: until,
+      },
+      success: (data) => {
+        this.setState({
+          data: data,
+          loading: false,
+          error: false,
+        });
+      },
+      error: () => {
+        this.setState({
+          data: null,
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  switchEnv(env) {
+    if (this.state.environment === env)
+      return;
+
+    let queryParams = Object.assign({}, this.props.location.query);
+    queryParams.environment = env;
+
+    this.history.pushState(null, this.props.location.pathname, queryParams);
+  },
+
+  render() {
+    let group = this.props.group;
+    let projectId = this.getProject().slug;
+    let orgId = this.getOrganization().slug;
+    let environment = this.state.environment;
+    let data = this.state.data || {};
+    let firstSeen = (
+      data.firstRelease ? data.firstRelease.firstSeen : group.firstSeen
+    );
+    let lastSeen = (
+      data.lastRelease ? data.lastRelease.lastSeen : group.lastSeen
+    );
+
+    let envList = this.state.envList;
+
+    console.log(environment);
+    return (
+      <div className="env-stats">
+        <h6><span>
+          <DropdownLink title={environment ? toTitleCase(environment) : DEFAULT_ENV_NAME}>
+            {envList.map((e) => {
+              return (
+                <MenuItem
+                    key={e.name}
+                    isActive={environment === e.name}
+                    onClick={this.switchEnv.bind(this, e.name)}>{toTitleCase(e.name)}</MenuItem>
+              );
+            })}
+            {envList.length === 0 &&
+              <MenuItem
+                  key=""
+                  isActive={environment === ''}
+                  onClick={this.switchEnv.bind(this, '')}>{DEFAULT_ENV_NAME}</MenuItem>
+            }
+          </DropdownLink>
+        </span></h6>
+        <div className="env-content">
+          {this.state.loading ?
+            <LoadingIndicator />
+          : (this.state.error ?
+            <LoadingError />
+          :
+            <div>
+              <GroupReleaseChart
+                  group={group}
+                  environment={environment}
+                  release={data.lastRelease ? data.lastRelease.release : null}
+                  releaseStats={data.lastRelease ? data.lastRelease.stats : null}
+                  statsPeriod="24h"
+                  title={t('Last 24 Hours')}
+                  firstSeen={firstSeen}
+                  lastSeen={lastSeen} />
+
+              <GroupReleaseChart
+                  group={group}
+                  environment={environment}
+                  release={data.lastRelease ? data.lastRelease.release : null}
+                  releaseStats={data.lastRelease ? data.lastRelease.stats : null}
+                  statsPeriod="30d"
+                  title={t('Last 30 Days')}
+                  className="bar-chart-small"
+                  firstSeen={firstSeen}
+                  lastSeen={lastSeen} />
+
+              <h6 className="first-seen">
+                <span>{t('First seen')}</span>
+              </h6>
+
+              <SeenInfo
+                  orgId={orgId}
+                  projectId={projectId}
+                  date={firstSeen}
+                  release={data.firstRelease ? data.firstRelease.release : null} />
+
+              <h6 className="last-seen">
+                <span>{t('Last seen')}</span>
+              </h6>
+              <SeenInfo
+                  orgId={orgId}
+                  projectId={projectId}
+                  date={lastSeen}
+                  release={data.lastRelease ? data.lastRelease.release : null} />
+            </div>
+          )}
+        </div>
+      </div>
+    );
+  }
+});
+
+export default GroupReleaseStats;
diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index 1778a531ae..488f37a2f7 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -7,7 +7,7 @@ import {t} from '../../locale';
 
 const SeenInfo = React.createClass({
   propTypes: {
-    date: React.PropTypes.any.isRequired,
+    date: React.PropTypes.any,
     release: React.PropTypes.shape({
       version: React.PropTypes.string.isRequired
     }),
@@ -15,18 +15,43 @@ const SeenInfo = React.createClass({
     projectId: React.PropTypes.string.isRequired
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      (this.props.release || {}).version !== (nextProps.release || {}).version ||
+      this.props.date !== nextProps.date
+    );
+  },
+
+  getReleaseTrackingUrl() {
+    let {orgId, projectId} = this.props;
+
+    return `/${orgId}/${projectId}/settings/release-tracking/`;
+  },
+
   render() {
-    let {date, release} = this.props;
+    let {date, release, orgId, projectId} = this.props;
     return (
       <dl>
         <dt key={0}>{t('When')}:</dt>
-        <dd key={1}><TimeSince date={date} /></dd>
+        {date ?
+          <dd key={1}><TimeSince date={date} /></dd>
+        :
+          <dd key={1}>n/a</dd>
+        }
         <dt key={2}>{t('Date')}:</dt>
-        <dd key={3}><DateTime date={date} seconds={true} /></dd>
-        {utils.defined(release) && [
-          <dt key={4}>{t('Release')}:</dt>,
-          <dd key={5}><Version orgId={this.props.orgId} projectId={this.props.projectId} version={release.version} /></dd>
-        ]}
+        {date ?
+          <dd key={3}><DateTime date={date} seconds={true} /></dd>
+        :
+          <dd key={3}>n/a</dd>
+        }
+        <dt key={4}>{t('Release')}:</dt>
+        {utils.defined(release) ?
+          <dd key={5}><Version orgId={orgId} projectId={projectId} version={release.version} /></dd>
+        : (date ?
+          <dd key={5}><small style={{marginLeft: 5, fontStyle: 'italic'}}><a href={this.getReleaseTrackingUrl()}>not configured</a></small></dd>
+        :
+          <dd key={5}>n/a</dd>
+        )}
       </dl>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 6656580eaf..fc0ff70f86 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -1,55 +1,36 @@
 import React from 'react';
 
 import ApiMixin from '../../mixins/apiMixin';
-import Avatar from '../avatar';
-import GroupChart from './chart';
+import GroupParticipants from './participants';
+import GroupReleaseStats from './releaseStats';
 import GroupState from '../../mixins/groupState';
 import IndicatorStore from '../../stores/indicatorStore';
-import SeenInfo from './seenInfo';
 import TagDistributionMeter from './tagDistributionMeter';
 import {t} from '../../locale';
 
-const GroupParticipants = React.createClass({
-  propTypes: {
-    participants: React.PropTypes.array,
-  },
-
-  render() {
-    let participants = this.props.participants;
-
-    return (
-      <div>
-        <h6><span>{participants.length} {'Participant' +
-                                         (participants.length === 1 ? '' : 's')}</span></h6>
-        <ul className="faces">
-          {participants.map((user) => {
-            return (
-              <li>
-                <Avatar size={32} user={user} />
-              </li>
-            );
-          })}
-        </ul>
-      </div>
-    );
-  },
-});
-
 const GroupSidebar = React.createClass({
   propTypes: {
     group: React.PropTypes.object,
   },
 
+  contextTypes: {
+    location: React.PropTypes.object
+  },
+
   mixins: [
     ApiMixin,
     GroupState
   ],
 
-  getInitialState() {
-    return {
-      participants: this.props.group.participants
-    };
-  },
+  // shouldComponentUpdate(nextProps, nextState) {
+  //   return (
+  //     this.state.loading !== nextState.loading ||
+  //     this.state.error !== nextState.error ||
+  //     this.props.release !== nextProps.release ||
+  //     this.props.environment !== nextProps.environment ||
+  //     this.props.group.id !== nextProps.group.id
+  //   );
+  // },
 
   toggleSubscription() {
     let group = this.props.group;
@@ -77,36 +58,19 @@ const GroupSidebar = React.createClass({
   },
 
   render() {
+    let project = this.getProject();
+    let projectId = project.slug;
     let orgId = this.getOrganization().slug;
-    let projectId = this.getProject().slug;
+    let defaultEnvironment = project.defaultEnvironment;
     let group = this.getGroup();
-    let participants = this.state.participants;
+    let participants = (this.state || {}).participants || [];
 
     return (
       <div className="group-stats">
-        <GroupChart statsPeriod="24h" group={group}
-                    title={t('Last 24 Hours')}
-                    firstSeen={group.firstSeen}
-                    lastSeen={group.lastSeen} />
-        <GroupChart statsPeriod="30d" group={group}
-                    title={t('Last 30 Days')}
-                    className="bar-chart-small"
-                    firstSeen={group.firstSeen}
-                    lastSeen={group.lastSeen} />
-
-        <h6 className="first-seen"><span>{t('First seen')}</span></h6>
-        <SeenInfo
-            orgId={orgId}
-            projectId={projectId}
-            date={group.firstSeen}
-            release={group.firstRelease} />
-
-        <h6 className="last-seen"><span>{t('Last seen')}</span></h6>
-        <SeenInfo
-            orgId={orgId}
-            projectId={projectId}
-            date={group.lastSeen}
-            release={group.lastRelease} />
+        <GroupReleaseStats
+            group={group}
+            location={this.context.location}
+            defaultEnvironment={defaultEnvironment} />
 
         <h6><span>{t('Tags')}</span></h6>
         {group.tags.map((data) => {
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index e5357bef06..3a6f1c92fb 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -36,6 +36,15 @@ const TagDistributionMeter = React.createClass({
     this.fetchData();
   },
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      this.state.loading !== nextState.loading ||
+      this.state.error !== nextState.error ||
+      this.props.tag !== nextProps.tag ||
+      this.props.name !== nextProps.name
+    );
+  },
+
   fetchData() {
     let url = '/issues/' + this.props.group.id + '/tags/' + encodeURIComponent(this.props.tag) + '/';
 
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index 01a780de7e..bfd9ba5fbf 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -1,6 +1,6 @@
 import moment from 'moment';
 import React from 'react';
-import {valueIsEqual} from '../utils';
+import {intcomma, valueIsEqual} from '../utils';
 import TooltipMixin from '../mixins/tooltip';
 
 const StackedBarChart = React.createClass({
@@ -19,12 +19,14 @@ const StackedBarChart = React.createClass({
       x: React.PropTypes.number.isRequired,
       label: React.PropTypes.string
     })),
+    tooltip: React.PropTypes.func,
     barClasses: React.PropTypes.array
   },
 
   mixins: [
     TooltipMixin(function () {
-      let barChartInstance = this;
+      let chart = this;
+
       return {
         html: true,
         placement: this.props.placement,
@@ -38,9 +40,14 @@ const StackedBarChart = React.createClass({
         title: function (instance) {
           // `this` is the targeted element
           let pointIdx = this.getAttribute('data-point-index');
+          let tooltipFunc = chart.props.tooltip || chart.renderTooltip;
 
           if (pointIdx)
-            return barChartInstance.renderTooltip(pointIdx);
+            return tooltipFunc(
+              chart.props.points[pointIdx],
+              pointIdx,
+              chart,
+          );
           else
             return this.getAttribute('data-title');
         }
@@ -63,7 +70,8 @@ const StackedBarChart = React.createClass({
       points: [],
       markers: [],
       width: null,
-      barClasses: ['chart-bar']
+      barClasses: ['chart-bar'],
+      tooltip: this.renderTooltip,
     };
   },
 
@@ -177,8 +185,7 @@ const StackedBarChart = React.createClass({
     );
   },
 
-  renderTooltip(pointIdx) {
-    let point = this.props.points[pointIdx];
+  renderTooltip(point, pointIdx) {
     let timeLabel = this.getTimeLabel(point);
     let totalY = 0;
     for (let i = 0; i < point.y.length; i++) {
@@ -186,8 +193,8 @@ const StackedBarChart = React.createClass({
     }
     let title = (
       '<div style="width:130px">' +
-        totalY + ' ' + this.props.label + '<br/>' +
-        timeLabel +
+        `<div class="time-label">${timeLabel}</div>` +
+        `<div class="value-label">${intcomma(totalY)} ${this.props.label}</div>` +
       '</div>'
     );
     if (point.label) {
diff --git a/src/sentry/static/sentry/app/stores/environmentStore.jsx b/src/sentry/static/sentry/app/stores/environmentStore.jsx
new file mode 100644
index 0000000000..5e206d91c3
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/environmentStore.jsx
@@ -0,0 +1,28 @@
+import Reflux from 'reflux';
+
+const EnvironmentStore = Reflux.createStore({
+  init() {
+    this.items = [];
+  },
+
+  loadInitialData(items) {
+    this.items = items;
+    this.trigger(this.items, 'initial');
+  },
+
+  getByName(name) {
+    name = '' + name;
+    for (let i = 0; i < this.items.length; i++) {
+      if (this.items[i].name === name) {
+        return this.items[i];
+      }
+    }
+    return null;
+  },
+
+  getAll() {
+    return this.items;
+  }
+});
+
+export default EnvironmentStore;
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 64ac11ce4d..f7c7f83bc1 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -105,6 +105,10 @@ const compareArrays = function(arr1, arr2, compFunc) {
   return true;
 };
 
+const intcomma = function(x) {
+    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
+};
+
 export default {
   getQueryParams() {
     let hashes, hash;
@@ -196,6 +200,7 @@ export default {
   arrayIsEqual: arrayIsEqual,
   objectMatchesSubset: objectMatchesSubset,
   compareArrays: compareArrays,
+  intcomma: intcomma,
   modelsEqual: modelsEqual,
   valueIsEqual: valueIsEqual,
   parseLinkHeader: require('./utils/parseLinkHeader'),
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index 40e9780276..6636bfb95c 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -45,6 +45,10 @@ let GroupEventToolbar  = React.createClass({
     }),
   ],
 
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
   getDateTooltip() {
     let evt = this.props.event;
     let user = ConfigStore.get('user');
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index 2543f25e87..d0aac05f2a 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -35,6 +35,7 @@ const GroupEventDetails = React.createClass({
     }
   },
 
+
   fetchData() {
     let eventId = this.props.params.eventId || 'latest';
 
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 5cb5ec70cd..97e1d1b802 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -3,6 +3,7 @@ import Reflux from 'reflux';
 
 import ApiMixin from '../mixins/apiMixin';
 import DocumentTitle from 'react-document-title';
+import EnvironmentStore from '../stores/environmentStore';
 import MemberListStore from '../stores/memberListStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
@@ -129,6 +130,12 @@ const ProjectDetails = React.createClass({
         }
       });
 
+      this.api.request(this.getEnvironmentListEndpoint(), {
+        success: (data) => {
+          EnvironmentStore.loadInitialData(data);
+        }
+      });
+
       this.setState({
         loading: false,
         error: false,
@@ -149,9 +156,14 @@ const ProjectDetails = React.createClass({
     }
   },
 
+  getEnvironmentListEndpoint() {
+    let {orgId, projectId} = this.props.params;
+    return `/projects/${orgId}/${projectId}/environments/`;
+  },
+
   getMemberListEndpoint() {
-    let params = this.props.params;
-    return '/projects/' + params.orgId + '/' + params.projectId + '/members/';
+    let {orgId, projectId} = this.props.params;
+    return `/projects/${orgId}/${projectId}/members/`;
   },
 
   setProjectNavSection(section) {
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 9f244b2173..e4e1ea2ee6 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -304,19 +304,6 @@
 
 // Group Overview
 
-.group-overview {
-  .bar-chart {
-    figure a {
-      height: 70px;
-    }
-  }
-  .bar-chart-small {
-    figure a {
-      height: 40px;
-    }
-  }
-}
-
 .group-stats-column {
   float: right;
 }
@@ -324,6 +311,46 @@
 .group-stats {
   font-size: 14px;
 
+  .env-stats {
+    > h6 {
+      color: @gray-dark;
+
+      > span {
+        background: @white;
+        padding-right: 7px;
+      }
+
+      &:before {
+        display: block;
+        position: absolute;
+        content: "";
+        border-top: 1px solid lighten(@trim, 3);
+        left: 0;
+        right: 0;
+        top: 50%;
+        z-index: -1;
+      }
+    }
+
+    .env-content {
+      margin-bottom: 20px;
+
+      h6 {
+        font-size: 11px;
+        text-transform: uppercase;
+        color: #888;
+
+        &:before {
+          display: none;
+        }
+      }
+
+      dl:last-child {
+        margin-bottom: 5px;
+      }
+    }
+  }
+
   h6 {
     font-size: 14px;
     margin-bottom: 15px;
@@ -355,10 +382,10 @@
         display: block;
         position: absolute;
         content: "";
-        border-radius: 9px;
-        .square(9px);
+        border-radius: 8px;
+        .square(8px);
         right: 0;
-        top: 3px;
+        top: 0;
       }
 
       &.first-seen:after {
@@ -377,10 +404,21 @@
     span {
       background: @purple-light;
       #gradient > .vertical(@purple-light, @purple);
+
+      &.inactive {
+        background: @gray-lightest;
+        #gradient > .vertical(@gray-lightest, @gray-lightest);
+      }
     }
 
     &:hover span {
-      background: @blue;
+      background: @purple-dark;
+      #gradient > .vertical(@purple, @purple-dark);
+
+      &.inactive {
+        background: @gray-lighter;
+        #gradient > .vertical(@gray-lighter, @gray-lighter);
+      }
     }
   }
 
diff --git a/src/sentry/static/sentry/less/includes.less b/src/sentry/static/sentry/less/includes.less
index 18b3835ee3..f9aac4a915 100644
--- a/src/sentry/static/sentry/less/includes.less
+++ b/src/sentry/static/sentry/less/includes.less
@@ -7,3 +7,4 @@
 @import url("./includes/simple-slider.less");
 @import url("./includes/typeahead.less");
 @import url("./includes/animate.less");
+@import url("./includes/tooltips.less");
diff --git a/src/sentry/static/sentry/less/includes/tooltips.less b/src/sentry/static/sentry/less/includes/tooltips.less
new file mode 100644
index 0000000000..93606e4977
--- /dev/null
+++ b/src/sentry/static/sentry/less/includes/tooltips.less
@@ -0,0 +1,19 @@
+@tooltip-bg: @purple;
+@tooltip-color: @white;
+@tooltip-max-width: 200px;
+
+.tooltip-inner {
+  font-weight: bold;
+  // border: 1px solid @trim;
+
+  .time-label {
+    font-size: 11px;
+    padding: 3px 5px;
+    margin-left: -5px;
+    margin-right: -5px;
+    background: @purple-dark;
+  }
+  .value-label {
+    padding: 3px 0;
+  }
+}
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 434aace2de..d34503cde5 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3073,7 +3073,6 @@ ul.radio-inputs {
   color: @tooltip-color;
 }
 
-
 /**
 * Tag List
 * ============================================================================
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 432c948441..b6d94c421a 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -48,6 +48,7 @@
         <h3>{% trans "Event Settings" %}</h3>
       </div>
       <div class="box-content with-padding">
+        {{ form.default_environment|as_crispy_field }}
         {{ form.resolve_age|as_crispy_field }}
         <p><small><strong>Note: Enabling auto resolve will immediately resolve anything that has not been seen within this period of time. There is no undo!</strong></small></p>
         {{ form.scrub_data|as_crispy_field }}
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index ad26fab972..dd6536242a 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -98,6 +98,7 @@ def create_sample_event(project, platform=None, default=None, raw=True,
         return
 
     data.update(kwargs)
+    data.setdefault('environment', 'production')
 
     manager = EventManager(data)
     manager.normalize()
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index bf6db2591e..6961027534 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -69,6 +69,13 @@ class EditProjectForm(forms.ModelForm):
     # Options that are overridden by Organization level settings
     org_overrides = ('scrub_data', 'scrub_defaults', 'scrub_ip_address')
 
+    default_environment = forms.CharField(
+        label=_('Default Environment'),
+        help_text=_('The default selected environment when viewing issues.'),
+        widget=forms.TextInput(attrs={'placeholder': _('e.g. production')}),
+        required=False,
+    )
+
     class Meta:
         fields = ('name', 'team', 'slug')
         model = Project
@@ -189,6 +196,7 @@ class ProjectSettingsView(ProjectView):
                 'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
                 'scrape_javascript': bool(project.get_option('sentry:scrape_javascript', True)),
                 'blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
+                'default_environment': project.get_option('sentry:default_environment'),
             },
         )
 
@@ -206,7 +214,8 @@ class ProjectSettingsView(ProjectView):
                     'sensitive_fields',
                     'scrub_ip_address',
                     'scrape_javascript',
-                    'blacklisted_ips'):
+                    'blacklisted_ips',
+                    'default_environment'):
                 # Value can't be overridden if set on the org level
                 if opt in form.org_overrides and organization.get_option('sentry:%s' % (opt,), False):
                     continue
diff --git a/tests/sentry/api/endpoints/test_group_environment_details.py b/tests/sentry/api/endpoints/test_group_environment_details.py
new file mode 100644
index 0000000000..a270a6f749
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_environment_details.py
@@ -0,0 +1,60 @@
+from __future__ import absolute_import, print_function
+
+from sentry.models import GroupRelease, Release
+from sentry.testutils import APITestCase
+
+
+class GroupEnvironmentDetailsTest(APITestCase):
+    def test_no_data_empty_env(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = '/api/0/issues/{}/environments/none/'.format(group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['lastRelease'] is None
+        assert response.data['firstRelease'] is None
+        assert response.data['environment'] == {'name': ''}
+
+    def test_no_data_named_env(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = '/api/0/issues/{}/environments/production/'.format(group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['lastRelease'] is None
+        assert response.data['firstRelease'] is None
+        assert response.data['environment'] == {'name': 'production'}
+
+    def test_with_data_named_env(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+
+        release = Release.objects.create(
+            project=project,
+            version='abcdef',
+        )
+
+        GroupRelease.objects.create(
+            release_id=release.id,
+            group_id=group.id,
+            project_id=project.id,
+            environment='production',
+        )
+
+        url = '/api/0/issues/{}/environments/production/'.format(group.id)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['lastRelease']['release']['version'] == release.version
+        assert response.data['lastRelease'].get('stats')
+        assert response.data['firstRelease']['release']['version'] == release.version
+        assert not response.data['firstRelease'].get('stats')
+        assert response.data['environment'] == {'name': 'production'}
diff --git a/tests/sentry/api/endpoints/test_project_environments.py b/tests/sentry/api/endpoints/test_project_environments.py
new file mode 100644
index 0000000000..41bd287d2d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_environments.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import TagValue
+from sentry.testutils import APITestCase
+
+
+class ProjectEnvironmentsTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+
+        TagValue.objects.create(
+            project=project,
+            key='environment',
+            value='production',
+        )
+
+        TagValue.objects.create(
+            project=project,
+            key='environment',
+            value='staging',
+        )
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-project-environments', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0]['name'] == 'production'
+        assert response.data[1]['name'] == 'staging'
