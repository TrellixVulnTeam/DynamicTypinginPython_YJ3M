commit fb6ff4bb8ffa0c28c21228b90be121a833230634
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu May 9 12:48:49 2019 -0700

    feat(incidents): Implement create new incident workflow (#13135)
    
    Connect "Create new Incident" modal to API. Redirect to incident details after successful creation (currently does not work because details endpoint is not implemented)
    
    Fixes SEN-525

diff --git a/src/sentry/static/sentry/app/actionCreators/incident.jsx b/src/sentry/static/sentry/app/actionCreators/incident.jsx
new file mode 100644
index 0000000000..ae4b840e69
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/incident.jsx
@@ -0,0 +1,38 @@
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  clearIndicators,
+} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+
+/**
+ * Creates a new incident
+ *
+ * @param {Object} api API Client
+ * @param {Object} organization Organization object
+ * @param {String} title Title of the incident
+ * @param {String[]} groups List of group ids
+ */
+export async function createIncident(api, organization, title, groups) {
+  addLoadingMessage(t('Creating new incident...'));
+
+  try {
+    const resp = await api.requestPromise(
+      `/organizations/${organization.slug}/incidents/`,
+      {
+        method: 'POST',
+        data: {
+          title,
+          groups,
+          dateStarted: new Date(),
+          query: '',
+        },
+      }
+    );
+    clearIndicators();
+    return resp;
+  } catch (err) {
+    addErrorMessage(t('Unable to create incident'));
+    throw err;
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx b/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx
index 88a1aeb9db..916a7c1e9f 100644
--- a/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx
@@ -1,30 +1,52 @@
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {createIncident} from 'app/actionCreators/incident';
 import {t} from 'app/locale';
 import Form from 'app/views/settings/components/forms/form';
-// import SentryTypes from 'app/sentryTypes';
+import SentryTypes from 'app/sentryTypes';
 import TextField from 'app/views/settings/components/forms/textField';
+import withApi from 'app/utils/withApi';
 
 class CreateIncidentModal extends React.Component {
   static propTypes = {
+    api: PropTypes.object.isRequired,
+    issues: PropTypes.arrayOf(PropTypes.string),
     closeModal: PropTypes.func,
     onClose: PropTypes.func,
     Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
     Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
-    // organization: SentryTypes.Organization.isRequired,
+    organization: SentryTypes.Organization.isRequired,
   };
 
-  handleSubmit = (data, onSuccess, onError) => {
-    // TODO(billy): Actually create incident and handle success follow up
+  handleSubmit = async (data, onSuccess, onError, _e, setFormSavingState) => {
+    const {api, organization, issues} = this.props;
+
+    setFormSavingState();
+
+    try {
+      const incident = await createIncident(api, organization, data.title, issues);
+      onSuccess(incident);
+    } catch (err) {
+      onError(err);
+    }
   };
 
   handleSuccess = data => {
-    if (this.props.onClose) {
-      this.props.onClose(data);
+    const {organization, onClose, closeModal} = this.props;
+
+    if (onClose) {
+      onClose(data);
     }
 
-    this.props.closeModal();
+    closeModal();
+
+    if (data) {
+      browserHistory.push(
+        `/organizations/${organization.slug}/incidents/${data.identifier}/`
+      );
+    }
   };
 
   render() {
@@ -43,7 +65,7 @@ class CreateIncidentModal extends React.Component {
             requireChanges
           >
             <TextField
-              name="name"
+              name="title"
               label={t('Incident Name')}
               placeholder={t('Incident Name')}
               help={t('Give a name to help identify the incident')}
@@ -59,4 +81,4 @@ class CreateIncidentModal extends React.Component {
   }
 }
 
-export default CreateIncidentModal;
+export default withApi(CreateIncidentModal);
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index bd525c6131..8e92447f8a 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -397,7 +397,9 @@ const StreamActions = createReactClass({
                   className="btn btn-default btn-sm hidden-sm hidden-xs"
                   title={t('Create new incident')}
                   disabled={!anySelected}
-                  onAction={() => openCreateIncidentModal({organization})}
+                  onAction={() =>
+                    openCreateIncidentModal({organization, issues: Array.from(issues)})
+                  }
                 >
                   <InlineSvg src="icon-circle-add" />
                 </ActionLink>
diff --git a/tests/js/spec/components/modals/createIncidentModal.spec.jsx b/tests/js/spec/components/modals/createIncidentModal.spec.jsx
new file mode 100644
index 0000000000..fc43380ecb
--- /dev/null
+++ b/tests/js/spec/components/modals/createIncidentModal.spec.jsx
@@ -0,0 +1,67 @@
+import {Modal} from 'react-bootstrap';
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {mount} from 'enzyme';
+import CreateIncidentModal from 'app/components/modals/createIncidentModal';
+
+describe('CreateIncidentModal', function() {
+  const org = TestStubs.Organization();
+  const closeModal = jest.fn();
+  const onClose = jest.fn();
+  const onSuccess = jest.fn();
+
+  beforeEach(function() {
+    onClose.mockReset();
+    onSuccess.mockReset();
+  });
+
+  afterEach(function() {
+    browserHistory.push.mockReset();
+  });
+
+  it('creates and redirects to newly created incident', async function() {
+    const mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/',
+      method: 'POST',
+      body: {
+        identifier: '11111',
+      },
+    });
+    const wrapper = mount(
+      <CreateIncidentModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        organization={org}
+        closeModal={closeModal}
+        onClose={onClose}
+        issues={['123', '456']}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.find('Input[name="title"]').simulate('change', {target: {value: 'Oh no'}});
+
+    wrapper.find('Form').simulate('submit');
+
+    expect(mock).toHaveBeenCalledWith(
+      '/organizations/org-slug/incidents/',
+      expect.objectContaining({
+        data: {
+          dateStarted: new Date(),
+          groups: ['123', '456'],
+          query: '',
+          title: 'Oh no',
+        },
+        method: 'POST',
+      })
+    );
+    await tick();
+    expect(onClose).toHaveBeenCalled();
+    expect(closeModal).toHaveBeenCalled();
+
+    expect(browserHistory.push).toHaveBeenCalledWith(
+      '/organizations/org-slug/incidents/11111/'
+    );
+  });
+});
