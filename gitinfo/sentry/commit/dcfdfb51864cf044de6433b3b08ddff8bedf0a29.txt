commit dcfdfb51864cf044de6433b3b08ddff8bedf0a29
Author: josh <josh@jrl.ninja>
Date:   Thu Oct 3 14:16:53 2019 -0700

    py3(drf): bump djangorestframework to 3.1.x (#14881)

diff --git a/requirements-base.txt b/requirements-base.txt
index aca9cdacdf..42a19c8f64 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -13,7 +13,7 @@ django-jsonfield>=0.9.13,<0.9.14
 django-picklefield>=0.3.0,<1.1.0
 django-sudo>=2.1.0,<3.0.0
 Django>=1.8,<1.9
-djangorestframework==3.0.5
+djangorestframework==3.1.3
 email-reply-parser>=0.2.0,<0.3.0
 enum34>=1.1.6,<1.2.0
 exam>=0.5.1
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index c589f02d01..0ee2969ecc 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -27,6 +27,7 @@ class TotpRestSerializer(serializers.Serializer):
         help_text="Code from authenticator",
         required=True,
         max_length=20,
+        trim_whitespace=False,
     )
 
 
@@ -36,6 +37,7 @@ class SmsRestSerializer(serializers.Serializer):
         help_text="Phone number to send SMS code",
         required=True,
         max_length=20,
+        trim_whitespace=False,
     )
     otp = serializers.CharField(
         label="Authenticator code",
@@ -44,6 +46,7 @@ class SmsRestSerializer(serializers.Serializer):
         allow_null=True,
         allow_blank=True,
         max_length=20,
+        trim_whitespace=False,
     )
 
 
@@ -54,10 +57,11 @@ class U2fRestSerializer(serializers.Serializer):
         allow_null=True,
         allow_blank=True,
         max_length=60,
+        trim_whitespace=False,
         default=lambda: petname.Generate(2, " ", letters=10).title(),
     )
-    challenge = serializers.CharField(required=True)
-    response = serializers.CharField(required=True)
+    challenge = serializers.CharField(required=True, trim_whitespace=False)
+    response = serializers.CharField(required=True, trim_whitespace=False)
 
 
 serializer_map = {"totp": TotpRestSerializer, "sms": SmsRestSerializer, "u2f": U2fRestSerializer}
diff --git a/src/sentry/api/endpoints/user_password.py b/src/sentry/api/endpoints/user_password.py
index 9f49fdc2b3..cd26bea51f 100644
--- a/src/sentry/api/endpoints/user_password.py
+++ b/src/sentry/api/endpoints/user_password.py
@@ -10,9 +10,9 @@ from sentry.security import capture_security_activity
 
 
 class UserPasswordSerializer(serializers.Serializer):
-    password = serializers.CharField(required=True)
-    passwordNew = serializers.CharField(required=True)
-    passwordVerify = serializers.CharField(required=True)
+    password = serializers.CharField(required=True, trim_whitespace=False)
+    passwordNew = serializers.CharField(required=True, trim_whitespace=False)
+    passwordVerify = serializers.CharField(required=True, trim_whitespace=False)
 
     def validate_password(self, value):
         user = self.context["user"]
diff --git a/src/sentry/api/handlers.py b/src/sentry/api/handlers.py
index a64d6f3e83..4c959d6ae5 100644
--- a/src/sentry/api/handlers.py
+++ b/src/sentry/api/handlers.py
@@ -6,10 +6,10 @@ from rest_framework.exceptions import Throttled
 from sentry.utils.snuba import RateLimitExceeded
 
 
-def custom_exception_handler(exc):
+def custom_exception_handler(exc, context):
     if isinstance(exc, RateLimitExceeded):
         # If Snuba throws a RateLimitExceeded then it'll likely be available
         # after another second.
         exc = Throttled(wait=1)
 
-    return exception_handler(exc)
+    return exception_handler(exc, context)
diff --git a/src/sentry/api/serializers/rest_framework/release.py b/src/sentry/api/serializers/rest_framework/release.py
index 6f523cebdf..bd2a5ac08c 100644
--- a/src/sentry/api/serializers/rest_framework/release.py
+++ b/src/sentry/api/serializers/rest_framework/release.py
@@ -61,7 +61,9 @@ class ReleaseSerializer(serializers.Serializer):
 
 
 class ReleaseWithVersionSerializer(ReleaseSerializer):
-    version = serializers.CharField(max_length=MAX_VERSION_LENGTH, required=True)
+    version = serializers.CharField(
+        max_length=MAX_VERSION_LENGTH, trim_whitespace=False, required=True
+    )
     owner = UserField(required=False)
 
     def validate_version(self, value):
diff --git a/src/sentry/api/validators/auth.py b/src/sentry/api/validators/auth.py
index 6130a8220a..ddc60cee86 100644
--- a/src/sentry/api/validators/auth.py
+++ b/src/sentry/api/validators/auth.py
@@ -4,10 +4,10 @@ from rest_framework import serializers
 
 
 class AuthVerifyValidator(serializers.Serializer):
-    password = serializers.CharField(required=False)
+    password = serializers.CharField(required=False, trim_whitespace=False)
     # For u2f
-    challenge = serializers.CharField(required=False)
-    response = serializers.CharField(required=False)
+    challenge = serializers.CharField(required=False, trim_whitespace=False)
+    response = serializers.CharField(required=False, trim_whitespace=False)
 
     def validate(self, data):
         if "password" in data:
diff --git a/tests/sentry/api/test_handlers.py b/tests/sentry/api/test_handlers.py
index 573b51b4d9..d55959cd4d 100644
--- a/tests/sentry/api/test_handlers.py
+++ b/tests/sentry/api/test_handlers.py
@@ -26,4 +26,4 @@ class TestRateLimited(APITestCase):
         self.login_as(self.user)
         resp = self.get_response()
         assert resp.status_code == 429
-        assert resp.data["detail"] == "Request was throttled. Expected available in 1 second."
+        assert resp.data["detail"] == "Request was throttled. Expected available in 1.0 second."
