commit 9cc6ffb9796195864e38dc85027f38d964dda1db
Author: Mark Story <mark@sentry.io>
Date:   Thu Dec 5 16:00:17 2019 -0500

    ref(discover) Move query results into a separate route (#15918)
    
    Since the addition of pagination and filtering saved queries we've been
    running into more bugs that are caused by conflicting state between the
    two modes of the page (query list & results). Moving the results to
    a separate page lets us be more explicit about switching views and clear
    out query string state.

diff --git a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
index 9cd1a0c232..8ed0f11416 100644
--- a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
@@ -19,6 +19,24 @@ export function fetchSavedQueries(api: Client, orgId: string): Promise<SavedQuer
   return promise;
 }
 
+export function fetchSavedQuery(
+  api: Client,
+  orgId: string,
+  queryId: string
+): Promise<SavedQuery> {
+  const promise: Promise<SavedQuery> = api.requestPromise(
+    `/organizations/${orgId}/discover/saved/${queryId}/`,
+    {
+      method: 'GET',
+    }
+  );
+
+  promise.catch(() => {
+    addErrorMessage(t('Unable to load saved query'));
+  });
+  return promise;
+}
+
 export function createSavedQuery(
   api: Client,
   orgId: string,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index eb8edb1d68..30f6df5bda 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1176,6 +1176,13 @@ function routes() {
               }
               component={errorHandler(LazyLoad)}
             />
+            <Route
+              path="results/"
+              componentPromise={() =>
+                import(/* webpackChunkName: "DiscoverV2Results" */ 'app/views/eventsV2/results')
+              }
+              component={errorHandler(LazyLoad)}
+            />
             <Route
               path=":eventSlug/"
               componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
index 0d16e5ae1d..84428d2447 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -44,7 +44,7 @@ class DiscoverBreadcrumb extends React.Component<Props> {
 
     if (eventView && eventView.isValid()) {
       const eventTarget = {
-        pathname: `/organizations/${organization.slug}/eventsv2/`,
+        pathname: `/organizations/${organization.slug}/eventsv2/results/`,
         query: eventView.generateQueryStringObject(),
       };
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
index 9c937abb51..4b90c70329 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -18,8 +18,7 @@ type Props = {
   api: Client;
   organization: Organization;
   eventView: EventView;
-  savedQueries: SavedQuery[];
-  onQueryChange: () => void;
+  savedQuery: SavedQuery | undefined;
 };
 
 const NAME_DEFAULT = t('Untitled query');
@@ -32,7 +31,7 @@ class EventInputName extends React.Component<Props> {
   private refInput = React.createRef<InlineInput>();
 
   onBlur = (event: React.ChangeEvent<HTMLInputElement>) => {
-    const {api, organization, eventView, savedQueries} = this.props;
+    const {api, organization, savedQuery} = this.props;
     const nextQueryName = (event.target.value || '').trim();
 
     // Do not update automatically if
@@ -50,7 +49,6 @@ class EventInputName extends React.Component<Props> {
       return;
     }
 
-    const savedQuery = savedQueries.find(s => s.id === eventView.id);
     if (!savedQuery || savedQuery.name === nextQueryName) {
       return;
     }
@@ -64,7 +62,6 @@ class EventInputName extends React.Component<Props> {
 
     handleUpdateQueryName(api, organization, nextEventView).then(
       (updatedQuery: SavedQuery) => {
-        this.props.onQueryChange();
         const view = EventView.fromSavedQuery(updatedQuery);
         browserHistory.push({
           pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/events.tsx b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
deleted file mode 100644
index aa0904c5bd..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/events.tsx
+++ /dev/null
@@ -1,153 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import * as ReactRouter from 'react-router';
-import {Location} from 'history';
-import omit from 'lodash/omit';
-import uniqBy from 'lodash/uniqBy';
-
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-import {Organization} from 'app/types';
-import SearchBar from 'app/views/events/searchBar';
-import {Panel} from 'app/components/panels';
-import EventsChart from 'app/views/events/eventsChart';
-import getDynamicText from 'app/utils/getDynamicText';
-import space from 'app/styles/space';
-
-import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
-
-import Table from './table';
-import Tags from './tags';
-import EventView, {Field} from './eventView';
-
-const CHART_AXIS_OPTIONS = [
-  {label: 'count', value: 'count(id)'},
-  {label: 'users', value: 'count_unique(user)'},
-];
-
-type EventsProps = {
-  router: ReactRouter.InjectedRouter;
-  location: Location;
-  organization: Organization;
-  eventView: EventView;
-};
-
-export default class Events extends React.Component<EventsProps> {
-  handleSearch = (query: string) => {
-    const {router, location} = this.props;
-
-    const queryParams = getParams({
-      ...(location.query || {}),
-      query,
-    });
-
-    // do not propagate pagination when making a new search
-    const searchQueryParams = omit(queryParams, 'cursor');
-
-    router.push({
-      pathname: location.pathname,
-      query: searchQueryParams,
-    });
-  };
-
-  handleYAxisChange = (value: string) => {
-    const {router, location} = this.props;
-
-    const newQuery = {
-      ...location.query,
-      yAxis: value,
-    };
-
-    router.push({
-      pathname: location.pathname,
-      query: newQuery,
-    });
-
-    trackAnalyticsEvent({
-      eventKey: 'discover_v2.y_axis_change',
-      eventName: "Discoverv2: Change chart's y axis",
-      organization_id: this.props.organization.id,
-      y_axis_value: value,
-    });
-  };
-
-  renderTagsTable = () => {
-    const {organization, eventView, location} = this.props;
-
-    if (eventView.tags.length <= 0) {
-      return null;
-    }
-
-    return <Tags eventView={eventView} organization={organization} location={location} />;
-  };
-
-  render() {
-    const {organization, eventView, location, router} = this.props;
-    const query = location.query.query || '';
-
-    // Make option set and add the default options in.
-    const yAxisOptions = uniqBy(
-      eventView
-        .getAggregateFields()
-        // Exclude last_seen and latest_event as they don't produce useful graphs.
-        .filter(
-          (field: Field) => ['last_seen', 'latest_event'].includes(field.field) === false
-        )
-        .map((field: Field) => {
-          return {label: field.title, value: field.field};
-        })
-        .concat(CHART_AXIS_OPTIONS),
-      'value'
-    );
-
-    return (
-      <React.Fragment>
-        <Top>
-          <StyledSearchBar
-            organization={organization}
-            projectIds={eventView.project}
-            query={query}
-            onSearch={this.handleSearch}
-          />
-          <Panel>
-            {getDynamicText({
-              value: (
-                <EventsChart
-                  router={router}
-                  query={eventView.getEventsAPIPayload(location).query}
-                  organization={organization}
-                  showLegend
-                  yAxisOptions={yAxisOptions}
-                  yAxisValue={eventView.yAxis}
-                  onYAxisChange={this.handleYAxisChange}
-                  project={eventView.project as number[]}
-                  environment={eventView.environment as string[]}
-                />
-              ),
-              fixed: 'events chart',
-            })}
-          </Panel>
-        </Top>
-        <Main eventView={eventView}>
-          <Table organization={organization} eventView={eventView} location={location} />
-        </Main>
-        <Side eventView={eventView}>{this.renderTagsTable()}</Side>
-      </React.Fragment>
-    );
-  }
-}
-
-const StyledSearchBar = styled(SearchBar)`
-  margin-bottom: ${space(2)};
-`;
-
-const Top = styled('div')`
-  grid-column: 1/3;
-`;
-
-const Main = styled('div')<{eventView: EventView}>`
-  grid-column: ${p => (p.eventView.tags.length <= 0 ? '1/3' : '1/2')};
-`;
-
-const Side = styled('div')<{eventView: EventView}>`
-  grid-column: ${p => (p.eventView.tags.length <= 0 ? 'none' : '2/3')};
-`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 7595dad901..d02a1b9764 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -17,7 +17,6 @@ import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import Banner from 'app/components/banner';
 import Button from 'app/components/button';
-import Feature from 'app/components/acl/feature';
 import SearchBar from 'app/components/searchBar';
 import NoProjectMessage from 'app/components/noProjectMessage';
 
@@ -25,14 +24,10 @@ import {PageContent} from 'app/styles/organization';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
-import Events from './events';
-import SavedQueryButtonGroup from './savedQuery';
 import EventView from './eventView';
-import EventInputName from './eventInputName';
 import {DEFAULT_EVENT_VIEW} from './data';
 import QueryList from './queryList';
-import DiscoverBreadcrumb from './breadcrumb';
-import {getPrebuiltQueries, generateTitle, decodeScalar} from './utils';
+import {getPrebuiltQueries, decodeScalar} from './utils';
 
 const BANNER_DISMISSED_KEY = 'discover-banner-dismissed';
 
@@ -157,10 +152,8 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     }
   }
 
-  getDocumentTitle = (eventView: EventView): string => {
-    return generateTitle({
-      eventView,
-    });
+  handleQueryChange = () => {
+    this.fetchData({reloading: true});
   };
 
   handleClick = () => {
@@ -168,10 +161,16 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     this.setState({isBannerHidden: true});
   };
 
-  // When a query is saved or deleted we need to re-fetch the
-  // saved query list as we don't use a reflux store.
-  handleQueryChange = () => {
-    this.fetchData({reloading: true});
+  handleSearchQuery = (searchQuery: string) => {
+    const {location} = this.props;
+    ReactRouter.browserHistory.push({
+      pathname: location.pathname,
+      query: {
+        ...location.query,
+        cursor: undefined,
+        query: String(searchQuery).trim() || undefined,
+      },
+    });
   };
 
   renderBanner() {
@@ -181,12 +180,11 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
       return null;
     }
 
-    const {location} = this.props;
-
+    const {location, organization} = this.props;
     const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
 
     const to = {
-      pathname: location.pathname,
+      pathname: `/organizations/${organization.slug}/eventsV2/results`,
       query: {
         ...eventView.generateQueryStringObject(),
       },
@@ -215,35 +213,13 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
-  handleSearchQuery = (searchQuery: string) => {
-    const {location} = this.props;
-    ReactRouter.browserHistory.push({
-      pathname: location.pathname,
-      query: {
-        ...location.query,
-        cursor: undefined,
-        query: String(searchQuery).trim() || undefined,
-      },
-    });
-  };
-
   renderActions() {
-    const {location} = this.props;
-
-    const StyledSearchBar = styled(SearchBar)`
-      margin-right: ${space(1)};
-      flex-grow: 1;
-    `;
-
-    const StyledActions = styled('div')`
-      display: flex;
-      margin-bottom: ${space(3)};
-    `;
+    const {location, organization} = this.props;
 
     const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
 
     const to = {
-      pathname: location.pathname,
+      pathname: `/organizations/${organization.slug}/eventsV2/results/`,
       query: {
         ...eventView.generateQueryStringObject(),
       },
@@ -264,128 +240,56 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
-  renderQueryList() {
+  render() {
     const {location, organization} = this.props;
     const {loading, savedQueries, savedQueriesPageLinks} = this.state;
-    const StyledPageHeader = styled('div')`
-      display: flex;
-      align-items: center;
-      font-size: ${p => p.theme.headerFontSize};
-      color: ${p => p.theme.gray4};
-      height: 40px;
-      margin-bottom: ${space(1)};
-    `;
-
-    return (
-      <PageContent>
-        <StyledPageHeader>{t('Discover')}</StyledPageHeader>
-        {this.renderBanner()}
-        {this.renderActions()}
-        {loading && this.renderLoading()}
-        {!loading && (
-          <QueryList
-            pageLinks={savedQueriesPageLinks}
-            savedQueries={savedQueries}
-            savedQuerySearchQuery={this.getSavedQuerySearchQuery()}
-            location={location}
-            organization={organization}
-            onQueryChange={this.handleQueryChange}
-          />
-        )}
-      </PageContent>
-    );
-  }
-
-  renderQueryBuilder(eventView: EventView) {
-    const {organization, location, router} = this.props;
-    const {savedQueries, reloading} = this.state;
-    const ContentBox = styled(PageContent)`
-      margin: 0;
-
-      @media (min-width: ${p => p.theme.breakpoints[1]}) {
-        display: grid;
-        grid-template-rows: 1fr auto;
-        grid-template-columns: 65% auto;
-        grid-column-gap: ${space(3)};
-      }
-
-      @media (min-width: ${p => p.theme.breakpoints[2]}) {
-        grid-template-columns: auto 350px;
-      }
-    `;
-
-    const HeaderBox = styled(ContentBox)`
-      background-color: ${p => p.theme.white};
-      border-bottom: 1px solid ${p => p.theme.borderDark};
-      grid-row-gap: ${space(1)};
-    `;
-
-    const Controller = styled('div')`
-      justify-self: end;
-      grid-row: 1/3;
-      grid-column: 2/3;
-    `;
-
-    return (
-      <div>
-        <HeaderBox>
-          <DiscoverBreadcrumb
-            eventView={eventView}
-            organization={organization}
-            location={location}
-          />
-          <EventInputName
-            savedQueries={savedQueries}
-            organization={organization}
-            eventView={eventView}
-            onQueryChange={this.handleQueryChange}
-          />
-          <Controller>
-            <SavedQueryButtonGroup
-              location={location}
-              organization={organization}
-              eventView={eventView}
-              savedQueries={savedQueries}
-              savedQueriesLoading={reloading}
-              onQueryChange={this.handleQueryChange}
-            />
-          </Controller>
-        </HeaderBox>
-        <ContentBox>
-          <Events
-            organization={organization}
-            location={location}
-            router={router}
-            eventView={eventView}
-          />
-        </ContentBox>
-      </div>
-    );
-  }
-
-  render() {
-    const {organization, location} = this.props;
-    const eventView = EventView.fromLocation(location);
-    const hasQuery = eventView.isValid();
 
     return (
-      <Feature features={['events-v2']} organization={organization} renderDisabled>
-        <SentryDocumentTitle
-          title={this.getDocumentTitle(eventView)}
-          objSlug={organization.slug}
-        >
-          <React.Fragment>
-            <GlobalSelectionHeader organization={organization} />
-            <NoProjectMessage organization={organization}>
-              {!hasQuery && this.renderQueryList()}
-              {hasQuery && this.renderQueryBuilder(eventView)}
-            </NoProjectMessage>
-          </React.Fragment>
-        </SentryDocumentTitle>
-      </Feature>
+      <SentryDocumentTitle title={t('Discover')} objSlug={organization.slug}>
+        <React.Fragment>
+          <GlobalSelectionHeader organization={organization} />
+          <NoProjectMessage organization={organization}>
+            <PageContent>
+              <StyledPageHeader>{t('Discover')}</StyledPageHeader>
+              {this.renderBanner()}
+              {this.renderActions()}
+              {loading && this.renderLoading()}
+              {!loading && (
+                <QueryList
+                  pageLinks={savedQueriesPageLinks}
+                  savedQueries={savedQueries}
+                  savedQuerySearchQuery={this.getSavedQuerySearchQuery()}
+                  location={location}
+                  organization={organization}
+                  onQueryChange={this.handleQueryChange}
+                />
+              )}
+            </PageContent>
+          </NoProjectMessage>
+        </React.Fragment>
+      </SentryDocumentTitle>
     );
   }
 }
 
+const StyledPageHeader = styled('div')`
+  display: flex;
+  align-items: center;
+  font-size: ${p => p.theme.headerFontSize};
+  color: ${p => p.theme.gray4};
+  height: 40px;
+  margin-bottom: ${space(1)};
+`;
+
+const StyledSearchBar = styled(SearchBar)`
+  margin-right: ${space(1)};
+  flex-grow: 1;
+`;
+
+const StyledActions = styled('div')`
+  display: flex;
+  margin-bottom: ${space(3)};
+`;
+
 export default withOrganization(DiscoverLanding);
 export {DiscoverLanding};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index 26da910057..8994641bfd 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -72,7 +72,7 @@ class QueryList extends React.Component<Props> {
 
   renderQueries() {
     const {pageLinks} = this.props;
-    const links = parseLinkHeader(pageLinks);
+    const links = parseLinkHeader(pageLinks || '');
     let cards: React.ReactNode[] = [];
 
     // If we're on the first page (no-previous page exists)
@@ -111,8 +111,9 @@ class QueryList extends React.Component<Props> {
         moment(eventView.start).format('MMM D, YYYY h:mm A') +
         ' - ' +
         moment(eventView.end).format('MMM D, YYYY h:mm A');
+
       const to = {
-        pathname: location.pathname,
+        pathname: `/organizations/${organization.slug}/eventsV2/results/`,
         query: {
           ...location.query,
           // remove any landing page cursor
@@ -167,7 +168,7 @@ class QueryList extends React.Component<Props> {
         ' - ' +
         moment(eventView.end).format('MMM D, YYYY h:mm A');
       const to = {
-        pathname: location.pathname,
+        pathname: `/organizations/${organization.slug}/eventsV2/results/`,
         query: {
           ...location.query,
           // remove any landing page cursor
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
new file mode 100644
index 0000000000..08b71bdfd5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -0,0 +1,221 @@
+import React from 'react';
+import styled from 'react-emotion';
+import * as ReactRouter from 'react-router';
+import {Location} from 'history';
+import omit from 'lodash/omit';
+import uniqBy from 'lodash/uniqBy';
+
+import {Organization} from 'app/types';
+
+import {Panel} from 'app/components/panels';
+import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import NoProjectMessage from 'app/components/noProjectMessage';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+
+import {PageContent} from 'app/styles/organization';
+import space from 'app/styles/space';
+
+import SearchBar from 'app/views/events/searchBar';
+import EventsChart from 'app/views/events/eventsChart';
+
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import getDynamicText from 'app/utils/getDynamicText';
+import withOrganization from 'app/utils/withOrganization';
+
+import Table from './table';
+import Tags from './tags';
+import ResultsHeader from './resultsHeader';
+import EventView, {Field} from './eventView';
+import {generateTitle} from './utils';
+
+const CHART_AXIS_OPTIONS = [
+  {label: 'count', value: 'count(id)'},
+  {label: 'users', value: 'count_unique(user)'},
+];
+
+type Props = {
+  router: ReactRouter.InjectedRouter;
+  location: Location;
+  organization: Organization;
+};
+
+type State = {
+  eventView: EventView;
+};
+
+class Results extends React.Component<Props, State> {
+  static getDerivedStateFromProps(nextProps: Props): State {
+    const eventView = EventView.fromLocation(nextProps.location);
+    return {eventView};
+  }
+
+  state = {
+    eventView: EventView.fromLocation(this.props.location),
+  };
+
+  handleSearch = (query: string) => {
+    const {router, location} = this.props;
+
+    const queryParams = getParams({
+      ...(location.query || {}),
+      query,
+    });
+
+    // do not propagate pagination when making a new search
+    const searchQueryParams = omit(queryParams, 'cursor');
+
+    router.push({
+      pathname: location.pathname,
+      query: searchQueryParams,
+    });
+  };
+
+  handleYAxisChange = (value: string) => {
+    const {router, location} = this.props;
+
+    const newQuery = {
+      ...location.query,
+      yAxis: value,
+    };
+
+    router.push({
+      pathname: location.pathname,
+      query: newQuery,
+    });
+
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.y_axis_change',
+      eventName: "Discoverv2: Change chart's y axis",
+      organization_id: this.props.organization.id,
+      y_axis_value: value,
+    });
+  };
+
+  getDocumentTitle(): string {
+    const {eventView} = this.state;
+    if (!eventView) {
+      return '';
+    }
+    return generateTitle({eventView});
+  }
+
+  renderTagsTable = () => {
+    const {organization, location} = this.props;
+    const {eventView} = this.state;
+
+    if (eventView.tags.length <= 0) {
+      return null;
+    }
+
+    return <Tags eventView={eventView} organization={organization} location={location} />;
+  };
+
+  render() {
+    const {organization, location, router} = this.props;
+    const {eventView} = this.state;
+    const query = location.query.query || '';
+
+    // Make option set and add the default options in.
+    const yAxisOptions = uniqBy(
+      eventView
+        .getAggregateFields()
+        // Exclude last_seen and latest_event as they don't produce useful graphs.
+        .filter(
+          (field: Field) => ['last_seen', 'latest_event'].includes(field.field) === false
+        )
+        .map((field: Field) => {
+          return {label: field.title, value: field.field};
+        })
+        .concat(CHART_AXIS_OPTIONS),
+      'value'
+    );
+
+    return (
+      <SentryDocumentTitle title={this.getDocumentTitle()} objSlug={organization.slug}>
+        <React.Fragment>
+          <GlobalSelectionHeader organization={organization} />
+          <NoProjectMessage organization={organization}>
+            <ResultsHeader
+              organization={organization}
+              location={location}
+              eventView={eventView}
+            />
+            <div>
+              <ContentBox>
+                <Top>
+                  <StyledSearchBar
+                    organization={organization}
+                    projectIds={eventView.project}
+                    query={query}
+                    onSearch={this.handleSearch}
+                  />
+                  <Panel>
+                    {getDynamicText({
+                      value: (
+                        <EventsChart
+                          router={router}
+                          query={eventView.getEventsAPIPayload(location).query}
+                          organization={organization}
+                          showLegend
+                          yAxisOptions={yAxisOptions}
+                          yAxisValue={eventView.yAxis}
+                          onYAxisChange={this.handleYAxisChange}
+                          project={eventView.project as number[]}
+                          environment={eventView.environment as string[]}
+                        />
+                      ),
+                      fixed: 'events chart',
+                    })}
+                  </Panel>
+                </Top>
+                <Main eventView={eventView}>
+                  <Table
+                    organization={organization}
+                    eventView={eventView}
+                    location={location}
+                  />
+                </Main>
+                <Side eventView={eventView}>{this.renderTagsTable()}</Side>
+              </ContentBox>
+            </div>
+          </NoProjectMessage>
+        </React.Fragment>
+      </SentryDocumentTitle>
+    );
+  }
+}
+
+const StyledSearchBar = styled(SearchBar)`
+  margin-bottom: ${space(2)};
+`;
+
+const Top = styled('div')`
+  grid-column: 1/3;
+  flex-grow: 0;
+`;
+
+const Main = styled('div')<{eventView: EventView}>`
+  grid-column: ${p => (p.eventView.tags.length <= 0 ? '1/3' : '1/2')};
+`;
+
+const Side = styled('div')<{eventView: EventView}>`
+  grid-column: ${p => (p.eventView.tags.length <= 0 ? 'none' : '2/3')};
+`;
+
+const ContentBox = styled(PageContent)`
+  margin: 0;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    grid-template-rows: 1fr auto;
+    grid-template-columns: 65% auto;
+    grid-column-gap: ${space(3)};
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: auto 350px;
+  }
+`;
+
+export default withOrganization(Results);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
new file mode 100644
index 0000000000..c0e130429d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -0,0 +1,115 @@
+import React from 'react';
+import styled from 'react-emotion';
+import {Location} from 'history';
+
+import {Organization, SavedQuery} from 'app/types';
+import {fetchSavedQuery} from 'app/actionCreators/discoverSavedQueries';
+
+import {Client} from 'app/api';
+import {PageContent} from 'app/styles/organization';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+import DiscoverBreadcrumb from './breadcrumb';
+import EventInputName from './eventInputName';
+import EventView from './eventView';
+import SavedQueryButtonGroup from './savedQuery';
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  location: Location;
+  eventView: EventView;
+};
+
+type State = {
+  savedQuery: SavedQuery | undefined;
+  loading: boolean;
+};
+
+class ResultsHeader extends React.Component<Props, State> {
+  state = {
+    savedQuery: undefined,
+    loading: true,
+  };
+
+  componentDidMount() {
+    if (this.props.eventView.id) {
+      this.fetchData();
+    }
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    if (prevProps.eventView !== this.props.eventView) {
+      this.fetchData();
+    }
+  }
+
+  fetchData() {
+    const {api, eventView, organization} = this.props;
+    if (typeof eventView.id === 'string') {
+      this.setState({loading: true});
+      fetchSavedQuery(api, organization.slug, eventView.id).then(savedQuery => {
+        this.setState({savedQuery, loading: false});
+      });
+    }
+  }
+
+  render() {
+    const {organization, location, eventView} = this.props;
+    const {savedQuery, loading} = this.state;
+
+    return (
+      <HeaderBox>
+        <DiscoverBreadcrumb
+          eventView={eventView}
+          organization={organization}
+          location={location}
+        />
+        <EventInputName
+          savedQuery={savedQuery}
+          organization={organization}
+          eventView={eventView}
+        />
+        <Controller>
+          <SavedQueryButtonGroup
+            location={location}
+            organization={organization}
+            eventView={eventView}
+            savedQuery={savedQuery}
+            savedQueryLoading={loading}
+          />
+        </Controller>
+      </HeaderBox>
+    );
+  }
+}
+
+const HeaderBox = styled(PageContent)`
+  background-color: ${p => p.theme.white};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  grid-row-gap: ${space(1)};
+
+  /* app container is a flex box */
+  flex-grow: 0;
+  margin: 0;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    grid-template-rows: 1fr auto;
+    grid-template-columns: 65% auto;
+    grid-column-gap: ${space(3)};
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: auto 350px;
+  }
+`;
+
+const Controller = styled('div')`
+  justify-self: end;
+  grid-row: 1/3;
+  grid-column: 2/3;
+`;
+
+export default withApi(ResultsHeader);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index af63c96f76..a8bdd5fe2d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -31,35 +31,31 @@ type Props = {
   location: Location;
   organization: Organization;
   eventView: EventView;
-  savedQueries: SavedQuery[];
-  savedQueriesLoading: boolean;
-  onQueryChange: () => void;
+  savedQuery: SavedQuery | undefined;
+  savedQueryLoading: boolean;
 };
 
 type State = {
   isNewQuery: boolean;
   isEditingQuery: boolean;
 
-  queryId: string | undefined;
   queryName: string;
 };
 
 class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
   static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
-    const {eventView: nextEventView, savedQueries, savedQueriesLoading} = nextProps;
+    const {eventView: nextEventView, savedQuery, savedQueryLoading} = nextProps;
 
     // For a new unsaved query
-    const savedQuery = savedQueries.find(q => q.id === nextEventView.id);
     if (!savedQuery) {
       return {
         isNewQuery: true,
         isEditingQuery: false,
-        queryId: undefined,
         queryName: prevState.queryName || '',
       };
     }
 
-    if (savedQueriesLoading) {
+    if (savedQueryLoading) {
       return prevState;
     }
 
@@ -70,7 +66,6 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
       return {
         isNewQuery: false,
         isEditingQuery: false,
-        queryId: nextEventView.id,
         queryName: '',
       };
     }
@@ -81,7 +76,6 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     return {
       isNewQuery: false,
       isEditingQuery: !isEqualQuery,
-      queryId: nextEventView.id,
 
       // HACK(leedongwei): See comment at SavedQueryButtonGroup.onFocusInput
       queryName: prevState.queryName || '',
@@ -108,7 +102,6 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     isNewQuery: true,
     isEditingQuery: false,
 
-    queryId: undefined,
     queryName: '',
   };
 
@@ -142,13 +135,12 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
 
     // Checks if "Save as" button is clicked from a clean state, or it is
     // clicked while modifying an existing query
-    const isNewQuery = !this.state.queryId;
+    const isNewQuery = !eventView.id;
 
     handleCreateQuery(api, organization, nextEventView, isNewQuery).then(
-      (savedQuery: any) => {
+      (savedQuery: SavedQuery) => {
         const view = EventView.fromSavedQuery(savedQuery);
 
-        this.props.onQueryChange();
         this.setState({queryName: ''});
         browserHistory.push({
           pathname: location.pathname,
@@ -164,9 +156,13 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
 
     const {api, organization, eventView} = this.props;
 
-    handleUpdateQuery(api, organization, eventView).then(() => {
-      this.props.onQueryChange();
+    handleUpdateQuery(api, organization, eventView).then((savedQuery: SavedQuery) => {
+      const view = EventView.fromSavedQuery(savedQuery);
       this.setState({queryName: ''});
+      browserHistory.push({
+        pathname: location.pathname,
+        query: view.generateQueryStringObject(),
+      });
     });
   };
 
@@ -177,7 +173,6 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     const {api, location, organization, eventView} = this.props;
 
     handleDeleteQuery(api, organization, eventView).then(() => {
-      this.props.onQueryChange();
       browserHistory.push({
         pathname: location.pathname,
         query: {},
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 9fa12422d8..94b9758b5c 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -153,7 +153,8 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
 
         self.login_as(self.user)
-        self.path = u"/organizations/{}/eventsv2/".format(self.org.slug)
+        self.landing_path = u"/organizations/{}/eventsv2/".format(self.org.slug)
+        self.result_path = u"/organizations/{}/eventsv2/results/".format(self.org.slug)
 
     def wait_until_loaded(self):
         self.browser.wait_until_not(".loading-indicator")
@@ -161,19 +162,19 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
     def test_events_default_landing(self):
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path)
+            self.browser.get(self.landing_path)
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - default landing")
 
     def test_all_events_query_empty_state(self):
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + all_events_query())
+            self.browser.get(self.result_path + "?" + all_events_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - all events query - empty state")
 
         with self.feature(FEATURE_NAMES):
             # expect table to expand to the right when no tags are provided
-            self.browser.get(self.path + "?" + all_events_query(tag=[]))
+            self.browser.get(self.result_path + "?" + all_events_query(tag=[]))
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - all events query - empty state - no tags")
 
@@ -193,19 +194,19 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         )
 
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + all_events_query())
+            self.browser.get(self.result_path + "?" + all_events_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - all events query - list")
 
         with self.feature(FEATURE_NAMES):
             # expect table to expand to the right when no tags are provided
-            self.browser.get(self.path + "?" + all_events_query(tag=[]))
+            self.browser.get(self.result_path + "?" + all_events_query(tag=[]))
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - all events query - list - no tags")
 
     def test_errors_query_empty_state(self):
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + errors_query())
+            self.browser.get(self.result_path + "?" + errors_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - errors query - empty state")
 
@@ -258,19 +259,19 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         )
 
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + errors_query())
+            self.browser.get(self.result_path + "?" + errors_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - errors")
 
     def test_transactions_query_empty_state(self):
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + transactions_query())
+            self.browser.get(self.result_path + "?" + transactions_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - transactions query - empty state")
 
         with self.feature(FEATURE_NAMES):
             # expect table to expand to the right when no tags are provided
-            self.browser.get(self.path + "?" + transactions_query(tag=[]))
+            self.browser.get(self.result_path + "?" + transactions_query(tag=[]))
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - transactions query - empty state - no tags")
 
@@ -283,7 +284,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         self.store_event(data=event_data, project_id=self.project.id, assert_no_errors=True)
 
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + transactions_query())
+            self.browser.get(self.result_path + "?" + transactions_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - transactions query - list")
 
@@ -307,7 +308,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
         with self.feature(FEATURE_NAMES):
             # Get the list page.
-            self.browser.get(self.path + "?" + all_events_query())
+            self.browser.get(self.result_path + "?" + all_events_query())
             self.wait_until_loaded()
 
             # Click the event link to open the events detail view
@@ -341,7 +342,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
         with self.feature(FEATURE_NAMES):
             # Get the list page
-            self.browser.get(self.path + "?" + errors_query() + "&statsPeriod=24h")
+            self.browser.get(self.result_path + "?" + errors_query() + "&statsPeriod=24h")
             self.wait_until_loaded()
 
             # Click the event link to open the event detail view
@@ -368,7 +369,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
         with self.feature(FEATURE_NAMES):
             # Get the list page
-            self.browser.get(self.path + "?" + transactions_query())
+            self.browser.get(self.result_path + "?" + transactions_query())
             self.wait_until_loaded()
 
             # Click the event link to open the event detail view
@@ -387,7 +388,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         query_name = "A new custom query"
         with self.feature(FEATURE_NAMES):
             # Go directly to the query builder view
-            self.browser.get(self.path + "?" + urlencode(query, doseq=True))
+            self.browser.get(self.result_path + "?" + urlencode(query, doseq=True))
             self.wait_until_loaded()
 
             # Open the save as drawer
@@ -407,11 +408,9 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         # Saved query should exist.
         assert DiscoverSavedQuery.objects.filter(name=query_name).exists()
 
-    @pytest.mark.xfail(reason="renaming is broken right now.")
-    @patch("django.utils.timezone.now")
-    def test_view_and_rename_saved_query(self, mock_now):
+    def test_view_and_rename_saved_query(self):
         # Create saved query to rename
-        DiscoverSavedQuery.objects.create(
+        query = DiscoverSavedQuery.objects.create(
             name="Custom query",
             organization=self.org,
             version=2,
@@ -419,18 +418,24 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         )
         with self.feature(FEATURE_NAMES):
             # View the query list
-            self.browser.get(self.path)
+            self.browser.get(self.landing_path)
             self.wait_until_loaded()
 
-            new_name = "Renamed query!"
-            input = self.browser.element('[name="discover2-query-name"]')
+            # Look at the results for our query.
+            self.browser.element('[data-test-id="card-{}"]'.format(query.name)).click()
+            self.wait_until_loaded()
+
+            input = self.browser.element('div[name="discover2-query-name"]')
             input.click()
-            input.send_keys(new_name)
+            input.send_keys("updated!")
+
             # Move focus somewhere else to trigger a blur and update the query
-            input.parent.click()
+            self.browser.element("table").click()
 
-            new_card_selector = '[data-test-id="card-{}"]'.format(new_name)
+            new_name = "Custom queryupdated!"
+            new_card_selector = 'div[name="discover2-query-name"][value="{}"]'.format(new_name)
             self.browser.wait_until(new_card_selector)
+            self.browser.save_screenshot("./rename.png")
 
         # Assert the name was updated.
         assert DiscoverSavedQuery.objects.filter(name=new_name).exists()
@@ -445,7 +450,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         )
         with self.feature(FEATURE_NAMES):
             # View the query list
-            self.browser.get(self.path)
+            self.browser.get(self.landing_path)
             self.wait_until_loaded()
 
             # Get the card with the new query
@@ -472,7 +477,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         )
         with self.feature(FEATURE_NAMES):
             # View the query list
-            self.browser.get(self.path)
+            self.browser.get(self.landing_path)
             self.wait_until_loaded()
 
             # Get the card with the new query
diff --git a/tests/js/spec/views/eventsV2/index.spec.jsx b/tests/js/spec/views/eventsV2/index.spec.jsx
index 8a52bef612..d369006901 100644
--- a/tests/js/spec/views/eventsV2/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/index.spec.jsx
@@ -1,33 +1,9 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
-import {initializeOrg} from 'sentry-test/initializeOrg';
-
 import {DiscoverLanding} from 'app/views/eventsV2/landing';
 
-const FIELDS = [
-  {
-    field: 'title',
-    title: 'Custom Title',
-  },
-  {
-    field: 'timestamp',
-    title: 'Custom Time',
-  },
-  {
-    field: 'user',
-    title: 'Custom User',
-  },
-];
-
-const generateFields = () => {
-  return {
-    fieldnames: FIELDS.map(i => i.title),
-    field: FIELDS.map(i => i.field),
-  };
-};
-
-describe('EventsV2', function() {
+describe('EventsV2 > Landing', function() {
   const eventTitle = 'Oh no something bad';
   const features = ['events-v2'];
 
@@ -84,7 +60,7 @@ describe('EventsV2', function() {
     const wrapper = mountWithTheme(
       <DiscoverLanding
         organization={TestStubs.Organization({features})}
-        location={{query: {...generateFields()}}}
+        location={{query: {}}}
         router={{}}
       />,
       TestStubs.routerContext()
@@ -93,56 +69,4 @@ describe('EventsV2', function() {
     const content = wrapper.find('SentryDocumentTitle');
     expect(content.text()).toContain('You need at least one project to use this view');
   });
-
-  it('pagination cursor should be cleared when making a search', function() {
-    const organization = TestStubs.Organization({
-      features,
-      projects: [TestStubs.Project()],
-    });
-
-    const initialData = initializeOrg({
-      organization,
-      router: {
-        location: {query: {...generateFields(), cursor: '0%3A50%3A0'}},
-      },
-    });
-
-    const wrapper = mountWithTheme(
-      <DiscoverLanding
-        organization={organization}
-        params={{orgId: organization.slug}}
-        location={initialData.router.location}
-        router={initialData.router}
-      />,
-      initialData.routerContext
-    );
-
-    // ensure cursor query string is initially present in the location
-
-    expect(initialData.router.location).toEqual({
-      query: {
-        ...generateFields(),
-        cursor: '0%3A50%3A0',
-      },
-    });
-
-    // perform a search
-
-    const search = wrapper.find('#smart-search-input').first();
-
-    search.simulate('change', {target: {value: 'geo:canada'}}).simulate('submit', {
-      preventDefault() {},
-    });
-
-    // cursor query string should be omitted from the query string
-
-    expect(initialData.router.push).toHaveBeenCalledWith({
-      pathname: undefined,
-      query: {
-        ...generateFields(),
-        query: 'geo:canada',
-        statsPeriod: '14d',
-      },
-    });
-  });
 });
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
new file mode 100644
index 0000000000..55c28e6b3d
--- /dev/null
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -0,0 +1,125 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+
+import Results from 'app/views/eventsV2/results';
+
+const FIELDS = [
+  {
+    field: 'title',
+    title: 'Custom Title',
+  },
+  {
+    field: 'timestamp',
+    title: 'Custom Time',
+  },
+  {
+    field: 'user',
+    title: 'Custom User',
+  },
+];
+
+const generateFields = () => {
+  return {
+    fieldnames: FIELDS.map(i => i.title),
+    field: FIELDS.map(i => i.field),
+  };
+};
+
+describe('EventsV2 > Results', function() {
+  const eventTitle = 'Oh no something bad';
+  const features = ['events-v2'];
+
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/eventsv2/',
+      body: {
+        meta: {
+          id: 'string',
+          title: 'string',
+          'project.name': 'string',
+          timestamp: 'date',
+          'user.id': 'string',
+        },
+        data: [
+          {
+            id: 'deadbeef',
+            'user.id': 'alberto leal',
+            title: eventTitle,
+            'project.name': 'project-slug',
+            timestamp: '2019-05-23T22:12:48+00:00',
+          },
+        ],
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events/project-slug:deadbeef/',
+      method: 'GET',
+      body: {
+        id: '1234',
+        size: 1200,
+        eventID: 'deadbeef',
+        title: 'Oh no something bad',
+        message: 'It was not good',
+        dateCreated: '2019-05-23T22:12:48+00:00',
+        entries: [
+          {
+            type: 'message',
+            message: 'bad stuff',
+            data: {},
+          },
+        ],
+        tags: [{key: 'browser', value: 'Firefox'}],
+      },
+    });
+  });
+
+  it('pagination cursor should be cleared when making a search', function() {
+    const organization = TestStubs.Organization({
+      features,
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {...generateFields(), cursor: '0%3A50%3A0'}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+
+    // ensure cursor query string is initially present in the location
+    expect(initialData.router.location).toEqual({
+      query: {
+        ...generateFields(),
+        cursor: '0%3A50%3A0',
+      },
+    });
+
+    // perform a search
+    const search = wrapper.find('#smart-search-input').first();
+
+    search.simulate('change', {target: {value: 'geo:canada'}}).simulate('submit', {
+      preventDefault() {},
+    });
+
+    // cursor query string should be omitted from the query string
+    expect(initialData.router.push).toHaveBeenCalledWith({
+      pathname: undefined,
+      query: {
+        ...generateFields(),
+        query: 'geo:canada',
+        statsPeriod: '14d',
+      },
+    });
+  });
+});
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 71e887ecc2..8baf3a2cd8 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -11,20 +11,13 @@ const SELECTOR_BUTTON_SAVED = 'ButtonSaved';
 const SELECTOR_BUTTON_UPDATE = '[data-test-id="discover2-savedquery-button-update"]';
 const SELECTOR_BUTTON_DELETE = '[data-test-id="discover2-savedquery-button-delete"]';
 
-function generateWrappedComponent(
-  location,
-  organization,
-  eventView,
-  savedQueries,
-  onQueryChange
-) {
+function generateWrappedComponent(location, organization, eventView, savedQuery) {
   return mountWithTheme(
     <SavedQueryButtonGroup
       location={location}
       organization={organization}
       eventView={eventView}
-      savedQueries={savedQueries}
-      onQueryChange={onQueryChange}
+      savedQuery={savedQuery}
     />,
     TestStubs.routerContext()
   );
@@ -49,17 +42,14 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
   errorsViewModified.name = 'Modified Name';
   errorsViewModified.fields[0].title = 'Modified Field Name';
 
-  const errorsSavedQuery = errorsViewSaved.toNewQuery();
-  const savedQueries = [errorsSavedQuery];
+  const savedQuery = errorsViewSaved.toNewQuery();
 
   describe('building on a new query', () => {
-    let onQueryChange;
     const mockUtils = jest
       .spyOn(utils, 'handleCreateQuery')
-      .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+      .mockImplementation(() => Promise.resolve(savedQuery));
 
     beforeEach(() => {
-      onQueryChange = jest.fn();
       mockUtils.mockClear();
     });
 
@@ -68,8 +58,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         location,
         organization,
         errorsView,
-        savedQueries,
-        onQueryChange
+        undefined
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -88,8 +77,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         location,
         organization,
         errorsView,
-        savedQueries,
-        onQueryChange
+        undefined
       );
 
       // Click on ButtonSaveAs to open dropdown
@@ -114,7 +102,6 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         }),
         true
       );
-      expect(onQueryChange).toHaveBeenCalled();
     });
 
     it('rejects if query.name is empty', async () => {
@@ -122,8 +109,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         location,
         organization,
         errorsView,
-        savedQueries,
-        onQueryChange
+        undefined
       );
 
       // Click on ButtonSaveAs to open dropdown
@@ -148,18 +134,16 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       // expect(wrapper.state('queryName')).toBe('');
 
       expect(mockUtils).not.toHaveBeenCalled();
-      expect(onQueryChange).not.toHaveBeenCalled();
     });
   });
 
   describe('viewing a saved query', () => {
-    let mockUtils, onQueryChange;
+    let mockUtils;
 
     beforeEach(() => {
       mockUtils = jest
         .spyOn(utils, 'handleDeleteQuery')
-        .mockImplementation(() => Promise.resolve(errorsSavedQuery));
-      onQueryChange = jest.fn();
+        .mockImplementation(() => Promise.resolve(savedQuery));
     });
 
     afterEach(() => {
@@ -171,8 +155,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         location,
         organization,
         errorsViewSaved,
-        savedQueries,
-        onQueryChange
+        savedQuery
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -191,8 +174,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         location,
         organization,
         errorsViewSaved,
-        savedQueries,
-        onQueryChange
+        savedQuery
       );
 
       const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE).first();
@@ -203,20 +185,18 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         expect.objectContaining({id: '1'})
       );
-      expect(onQueryChange).toHaveBeenCalled();
     });
   });
 
   describe('modifying a saved query', () => {
-    let mockUtils, onQueryChange;
+    let mockUtils;
 
     it('renders the correct set of buttons', () => {
       const wrapper = generateWrappedComponent(
         location,
         organization,
         errorsViewModified,
-        [errorsViewSaved.toNewQuery()],
-        onQueryChange
+        errorsViewSaved.toNewQuery()
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -234,8 +214,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       beforeEach(() => {
         mockUtils = jest
           .spyOn(utils, 'handleUpdateQuery')
-          .mockImplementation(() => Promise.resolve(errorsSavedQuery));
-        onQueryChange = jest.fn();
+          .mockImplementation(() => Promise.resolve(savedQuery));
       });
 
       afterEach(() => {
@@ -247,8 +226,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           location,
           organization,
           errorsViewModified,
-          savedQueries,
-          onQueryChange
+          savedQuery
         );
 
         // Click on Save in the Dropdown
@@ -262,7 +240,6 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
             ...errorsViewModified,
           })
         );
-        expect(onQueryChange).toHaveBeenCalled();
       });
     });
 
@@ -270,7 +247,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       beforeEach(() => {
         mockUtils = jest
           .spyOn(utils, 'handleCreateQuery')
-          .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+          .mockImplementation(() => Promise.resolve(savedQuery));
       });
 
       afterEach(() => {
@@ -282,8 +259,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           location,
           organization,
           errorsViewModified,
-          savedQueries,
-          onQueryChange
+          savedQuery
         );
 
         // Click on ButtonSaveAs to open dropdown
@@ -308,7 +284,6 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           }),
           false
         );
-        expect(onQueryChange).toHaveBeenCalled();
       });
     });
   });
