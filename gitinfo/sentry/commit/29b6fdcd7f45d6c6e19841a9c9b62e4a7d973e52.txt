commit 29b6fdcd7f45d6c6e19841a9c9b62e4a7d973e52
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Sep 3 16:56:39 2011 -0700

    Reimplement sampling without modifying the Message table. Denormalized filter value counts and graph timeline counts.

diff --git a/CHANGES b/CHANGES
index 92b658f7aa..e9f283162a 100644
--- a/CHANGES
+++ b/CHANGES
@@ -3,6 +3,9 @@
 * You can now pass ``extra={'stack': True}`` to logging methods to capture
   the current frames and their locals.
 * Code refactoring in various places related to stack extraction.
+* Denormalized graph data in MessageCountByDate.
+* Denormalized filter counts into MessageFilterValue
+* Added message sampling (adapter from Yuri Baburov's patch).
 
 1.9.0
 
diff --git a/sentry/migrations/0013_auto__add_field_message_sample_rate.py b/sentry/migrations/0013_auto__add_messagecountbyminute__add_unique_messagecountbyminute_group_.py
similarity index 59%
rename from sentry/migrations/0013_auto__add_field_message_sample_rate.py
rename to sentry/migrations/0013_auto__add_messagecountbyminute__add_unique_messagecountbyminute_group_.py
index 3df5997536..bbfc654fda 100644
--- a/sentry/migrations/0013_auto__add_field_message_sample_rate.py
+++ b/sentry/migrations/0013_auto__add_messagecountbyminute__add_unique_messagecountbyminute_group_.py
@@ -1,73 +1,118 @@
-# encoding: utf-8
-import datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-class Migration(SchemaMigration):
-
-    def forwards(self, orm):
-        
-        # Adding field 'Message.sample_rate'
-        db.add_column('sentry_message', 'sample_rate', self.gf('django.db.models.fields.IntegerField')(default=1), keep_default=False)
-
-
-    def backwards(self, orm):
-        
-        # Deleting field 'Message.sample_rate'
-        db.delete_column('sentry_message', 'sample_rate')
-
-
-    models = {
-        'sentry.filtervalue': {
-            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        },
-        'sentry.groupedmessage': {
-            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
-            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'sentry.message': {
-            'Meta': {'object_name': 'Message'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
-            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
-            'sample_rate': ('django.db.models.fields.IntegerField', [], {'default': '1'}),
-            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
-            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
-            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
-            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'sentry.messageindex': {
-            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
-            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
-        }
-    }
-
-    complete_apps = ['sentry']
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'MessageCountByMinute'
+        db.create_table('sentry_messagecountbyminute', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('group', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.GroupedMessage'])),
+            ('date', self.gf('django.db.models.fields.DateTimeField')()),
+            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
+        ))
+        db.send_create_signal('sentry', ['MessageCountByMinute'])
+
+        # Adding unique constraint on 'MessageCountByMinute', fields ['group', 'date']
+        db.create_unique('sentry_messagecountbyminute', ['group_id', 'date'])
+
+        # Adding model 'MessageFilterValue'
+        db.create_table('sentry_messagefiltervalue', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('group', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.GroupedMessage'])),
+            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
+            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
+            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
+        ))
+        db.send_create_signal('sentry', ['MessageFilterValue'])
+
+        # Adding unique constraint on 'MessageFilterValue', fields ['key', 'value', 'group']
+        db.create_unique('sentry_messagefiltervalue', ['key', 'value', 'group_id'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'MessageFilterValue', fields ['key', 'value', 'group']
+        db.delete_unique('sentry_messagefiltervalue', ['key', 'value', 'group_id'])
+
+        # Removing unique constraint on 'MessageCountByMinute', fields ['group', 'date']
+        db.delete_unique('sentry_messagecountbyminute', ['group_id', 'date'])
+
+        # Deleting model 'MessageCountByMinute'
+        db.delete_table('sentry_messagecountbyminute')
+
+        # Deleting model 'MessageFilterValue'
+        db.delete_table('sentry_messagefiltervalue')
+
+
+    models = {
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 28f31031f7..8034479948 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -31,6 +31,13 @@ STATUS_LEVELS = (
     (1, _('resolved')),
 )
 
+# These are predefined builtin's
+FILTER_KEYS = (
+    ('server_name', _('server name')),
+    ('logger', _('logger')),
+    ('site', _('site')),
+)
+
 logger = logging.getLogger('sentry.errors')
 
 class GzippedDictField(models.TextField):
@@ -181,26 +188,26 @@ class GroupedMessage(MessageBase):
     
     @property
     def unique_urls(self):
-        return self.message_set.filter(url__isnull=False)\
-                   .values_list('url', 'logger', 'view', 'checksum')\
-                   .annotate(times_seen=Sum('sample_rate'))\
-                   .values('url', 'times_seen')\
+        return self.messagefiltervalue_set.filter(key='url', value__isnull=False)\
+                   .values_list('value')\
+                   .annotate(times_seen=Sum('times_seen'))\
+                   .values_list('value', 'times_seen')\
                    .order_by('-times_seen')
 
     @property
     def unique_servers(self):
-        return self.message_set.filter(server_name__isnull=False)\
-                   .values_list('server_name', 'logger', 'view', 'checksum')\
-                   .annotate(times_seen=Sum('sample_rate'))\
-                   .values('server_name', 'times_seen')\
+        return self.messagefiltervalue_set.filter(key='logger', value__isnull=False)\
+                   .values_list('value')\
+                   .annotate(times_seen=Sum('times_seen'))\
+                   .values_list('value', 'times_seen')\
                    .order_by('-times_seen')
 
     @property
     def unique_sites(self):
-        return self.message_set.filter(site__isnull=False)\
-                   .values_list('site', 'logger', 'view', 'checksum')\
-                   .annotate(times_seen=Sum('sample_rate'))\
-                   .values('site', 'times_seen')\
+        return self.messagefiltervalue_set.filter(key='site', value__isnull=False)\
+                   .values_list('value')\
+                   .annotate(times_seen=Sum('times_seen'))\
+                   .values_list('value', 'times_seen')\
                    .order_by('-times_seen')
 
     def get_version(self):
@@ -218,7 +225,6 @@ class Message(MessageBase):
     url             = models.URLField(verify_exists=False, null=True, blank=True)
     server_name     = models.CharField(max_length=128, db_index=True)
     site            = models.CharField(max_length=128, db_index=True, null=True)
-    sample_rate     = models.IntegerField(default=1) # how much exceptions were not added because of this one
 
     class Meta:
         verbose_name = _('message')
@@ -280,18 +286,29 @@ class Message(MessageBase):
         return module, self.data['__sentry__']['version']
 
 class FilterValue(models.Model):
-    FILTER_KEYS = (
-        ('server_name', _('server name')),
-        ('logger', _('logger')),
-        ('site', _('site')),
-    )
-    
     key = models.CharField(choices=FILTER_KEYS, max_length=32)
     value = models.CharField(max_length=200)
     
     class Meta:
         unique_together = (('key', 'value'),)
 
+class MessageFilterValue(models.Model):
+    group = models.ForeignKey(GroupedMessage)
+    times_seen = models.PositiveIntegerField(default=0)
+    key = models.CharField(choices=FILTER_KEYS, max_length=32)
+    value = models.CharField(max_length=200)
+    
+    class Meta:
+        unique_together = (('key', 'value', 'group'),)
+
+class MessageCountByMinute(Model):
+    group = models.ForeignKey(GroupedMessage)
+    date = models.DateTimeField() # normalized to HH:MM:00
+    times_seen = models.PositiveIntegerField(default=0)
+    
+    class Meta:
+        unique_together = (('group', 'date'),)
+
 ### django-indexer
 
 class MessageIndex(BaseIndex):
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
index 652cafb9a8..3e58578374 100644
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
@@ -9,8 +9,8 @@
         {{ server_list.paging }}
     </div>
     <ul class="server-list">
-        {% for server in server_list.objects %}
-            <li><span class="count">{{ server.times_seen }}</span> <a href="{% url sentry %}?server_name={{ server.server_name }}">{{ server.server_name }}</a></li>
+        {% for server_name, times_seen in server_list.objects %}
+            <li><span class="count">{{ times_seen }}</span> <a href="{% url sentry %}?server_name={{ server_name }}">{{ server_name }}</a></li>
         {% endfor %}
     </ul>
     <div class="clearfix">
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
index 524a8a1d2a..765681c28d 100644
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/widget.html
@@ -6,7 +6,7 @@
 
         <ul class="server-list">
             {% for server, priority in unique_servers|with_priority:"times_seen" %}
-                <li class="priority-{{ priority }}"><span class="count">{{ server.times_seen }}</span> <a href="{% url sentry %}?server_name={{ server.server_name }}">{{ server.server_name }}</a></li>
+                <li class="priority-{{ priority }}"><span class="count">{{ server.1 }}</span> <a href="{% url sentry %}?server_name={{ server.0 }}">{{ server.0 }}</a></li>
             {% endfor %}
         </ul>
     {% endif %}
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
index 888f472886..9649d92542 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
+++ b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
@@ -9,8 +9,8 @@
         {{ site_list.paging }}
     </div>
     <ul class="server-list">
-        {% for site in site_list.objects %}
-            <li><span class="count">{{ site.times_seen }}</span> <a href="{% url sentry %}?site={{ site.site }}">{{ site.site }}</a></li>
+        {% for site, times_seen in site_list.objects %}
+            <li><span class="count">{{ times_seen }}</span> <a href="{% url sentry %}?site={{ site }}">{{ site }}</a></li>
         {% endfor %}
     </ul>
     <div class="clearfix">
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
index 7bd59fc907..4fff6d10fe 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
+++ b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/widget.html
@@ -6,7 +6,7 @@
 
         <ul class="server-list">
             {% for site, priority in unique_sites|with_priority:"times_seen" %}
-                <li class="priority-{{ priority }}"><span class="count">{{ site.times_seen }}</span> <a href="{% url sentry %}?site={{ site.site }}">{{ site.site }}</a></li>
+                <li class="priority-{{ priority }}"><span class="count">{{ site.1 }}</span> <a href="{% url sentry %}?site={{ site.0 }}">{{ site.0 }}</a></li>
             {% endfor %}
         </ul>
     {% endif %}
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
index 4e949a3007..bf50192af2 100644
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
@@ -9,8 +9,8 @@
         {{ url_list.paging }}
     </div>
     <ul class="url-list">
-        {% for link in url_list.objects %}
-            <li><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
+        {% for url, times_seen in url_list.objects %}
+            <li><span class="count">{{ times_seen }}</span> <a href="{{ url }}">{{ url }}</a></li>
         {% endfor %}
     </ul>
     <div class="clearfix">
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
index f396604571..a55ad62ef9 100644
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/widget.html
@@ -6,7 +6,7 @@
 
         <ul class="url-list">
             {% for link, priority in unique_urls|with_priority:"times_seen" %}
-                <li class="priority-{{ priority }}"><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
+                <li class="priority-{{ priority }}"><span class="count">{{ link.1 }}</span> <a href="{{ link.0 }}">{{ link.0 }}</a></li>
             {% endfor %}
         </ul>
     {% endif %}
diff --git a/sentry/search_indexes.py b/sentry/search_indexes.py
index 17cf98ae9d..43911dc952 100644
--- a/sentry/search_indexes.py
+++ b/sentry/search_indexes.py
@@ -43,13 +43,13 @@ if settings.SEARCH_ENGINE:
             return '\n'.join(map(to_unicode, filter(None, chunks)))
 
         def prepare_server(self, instance):
-            return [to_unicode(s['server_name']) for s in instance.unique_servers]
+            return [to_unicode(s[0]) for s in instance.unique_servers]
 
         def prepare_site(self, instance):
-            return [to_unicode(s['site']) for s in instance.unique_sites]
+            return [to_unicode(s[0]) for s in instance.unique_sites]
 
         def prepare_url(self, instance):
-            return [to_unicode(s['url']) for s in instance.unique_urls]
+            return [to_unicode(s[0]) for s in instance.unique_urls]
 
 
     site.register(GroupedMessage, GroupedMessageIndex)
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index cd82164529..a85aad4f96 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -4,7 +4,7 @@ import logging
 import warnings
 
 from django.db import models
-from django.db.models import signals, Sum
+from django.db.models import signals, Sum, F
 
 from sentry.conf import settings
 from sentry.utils import construct_checksum, get_db_engine
@@ -38,8 +38,10 @@ class ScoreClause(object):
         return (sql, [])
 
 
-def count_limit(count): # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
-    if count <= 200: # 200
+def count_limit(count):
+    # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
+    # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
+    if count <= 50: # 200
         return 1
     if count <= 1000: # 400
         return 2
@@ -129,7 +131,7 @@ class SentryManager(models.Manager):
                 group.last_seen = now
                 group.times_seen += 1
                 GroupedMessage.objects.filter(pk=group.pk).update(
-                    times_seen=models.F('times_seen') + 1,
+                    times_seen=F('times_seen') + 1,
                     status=0,
                     last_seen=now,
                     score=ScoreClause(group),
@@ -145,7 +147,6 @@ class SentryManager(models.Manager):
             sample_rate = min(count_limit(group.times_seen), time_limit(silence))
 
             instance = Message(
-                sample_rate=sample_rate,
                 message_id=message_id,
                 view=view,
                 logger=logger_name,
@@ -158,14 +159,35 @@ class SentryManager(models.Manager):
                 datetime=now,
                 **kwargs
             )
+
             if group.times_seen % sample_rate == 0:
                 instance.save()
-            if server_name:
-                FilterValue.objects.get_or_create(key='server_name', value=server_name)
-            if site:
-                FilterValue.objects.get_or_create(key='site', value=site)
-            if logger_name:
-                FilterValue.objects.get_or_create(key='logger', value=logger_name)
+
+            normalized_to_hour = now.replace(second=0, microsecond=0)
+
+            affected = group.messagecountbyminute_set.filter(date=normalized_to_hour).update(times_seen=F('times_seen') + 1)
+            if not affected:
+                group.messagecountbyminute_set.create(
+                    date=normalized_to_hour,
+                    times_seen=1,
+                )
+
+            for key, value in (
+                    ('server_name', server_name),
+                    ('site', site),
+                    ('logger', logger_name)
+                ):
+                if value:
+                    FilterValue.objects.get_or_create(key=key, value=value)
+
+                affected = group.messagefiltervalue_set.filter(key=key, value=value).update(times_seen=F('times_seen') + 1)
+            if not affected:
+                group.messagefiltervalue_set.create(
+                    key=key,
+                    value=value,
+                    times_seen=1,
+                )
+
         except Exception, exc:
             # TODO: should we mail admins when there are failures?
             try:
@@ -202,10 +224,10 @@ class GroupedMessageManager(SentryManager):
         today = datetime.datetime.now().replace(microsecond=0, second=0, minute=0)
         min_date = today - datetime.timedelta(hours=hours)
 
-        chart_qs = list(group.message_set.all()\
+        chart_qs = list(group.messagecountbyminute_set.all()\
                           .filter(datetime__gte=min_date)\
                           .extra(select={'grouper': method}).values('grouper')\
-                          .annotate(num=Sum('sample_rate')).values_list('grouper', 'num')\
+                          .annotate(num=Sum('times_seen')).values_list('grouper', 'num')\
                           .order_by('grouper'))
 
         if not chart_qs:
diff --git a/tests/tests.py b/tests/tests.py
index 8b58e4ebbe..2c61117d85 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -323,7 +323,7 @@ class SentryTestCase(BaseTestCase):
 
         self.assertEquals(error.url, 'a'*200)
         self.assertEquals(error.data['url'], 'a'*210)
-    
+        
     def test_thrashing(self):
         settings.THRASHING_LIMIT = 10
         settings.THRASHING_TIMEOUT = 60
@@ -799,6 +799,22 @@ class SentryTestCase(BaseTestCase):
         self.assertEquals(last.data['tuple'][-2], '...')
         self.assertEquals(last.data['tuple'][-1], '(450 more elements)')
 
+    # def test_sampling(self):
+    #     settings.THRASHING_LIMIT = 0
+    #     settings.THRASHING_TIMEOUT = 0
+    # 
+    #     Message.objects.all().delete()
+    #     GroupedMessage.objects.all().delete()
+    #     
+    #     message_id = None
+    #     for i in xrange(0, 1000):
+    #         get_client().create_from_text('hi')
+    #     
+    #     self.assertEquals(GroupedMessage.objects.count(), 1)
+    #     group = GroupedMessage.objects.get()
+    #     self.assertEquals(group.times_seen, 1000)
+    #     self.assertNotEquals(Message.objects.count(), 400)
+
 class SentryViewsTest(BaseTestCase):
     fixtures = ['tests/fixtures/views.json']
     
