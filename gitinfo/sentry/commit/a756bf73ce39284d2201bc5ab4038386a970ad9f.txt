commit a756bf73ce39284d2201bc5ab4038386a970ad9f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Oct 30 11:06:06 2018 -0700

    fix(environments): Fix environment filtering on group events page (#10277)
    
    Another attempt to fix environment filtering on this page.
    Fix refetching data on environment changes, but ignore for other
    non-environment querystring changes. Also properly handle changing
    environment if one is specified via the search field.
    
    Fixes ISSUE-169 and ISSUE-177

diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index e6e4ec9aca..425d7b4618 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -1,6 +1,8 @@
 import {browserHistory} from 'react-router';
 import React from 'react';
 import createReactClass from 'create-react-class';
+import {isEqual, omit} from 'lodash';
+import qs from 'query-string';
 
 import {Panel, PanelBody} from 'app/components/panels';
 import {
@@ -8,11 +10,10 @@ import {
   getQueryStringWithEnvironment,
   getQueryStringWithoutEnvironment,
 } from 'app/utils/queryString';
-import {setActiveEnvironment} from 'app/actionCreators/environments';
+import {setActiveEnvironmentName} from 'app/actionCreators/environments';
 import {t, tct} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
-import EnvironmentStore from 'app/stores/environmentStore';
 import EventsTable from 'app/components/eventsTable/eventsTable';
 import GroupState from 'app/mixins/groupState';
 import LoadingError from 'app/components/loadingError';
@@ -41,20 +42,19 @@ const GroupEvents = createReactClass({
       error: false,
       pageLinks: '',
       query: queryParams.query || '',
+      environment: this.props.environment,
     };
 
     // If an environment is specified in the query, update the global environment
     // Otherwise if a global environment is present update the query
-    const queryEnvironment = EnvironmentStore.getByName(
-      getQueryEnvironment(queryParams.query || '')
-    );
+    const queryEnvironment = getQueryEnvironment(queryParams.query || '');
 
     if (queryEnvironment) {
-      setActiveEnvironment(queryEnvironment);
+      setActiveEnvironmentName(queryEnvironment);
     } else if (this.props.environment) {
       const newQuery = getQueryStringWithEnvironment(
         initialState.query,
-        this.props.environment.name
+        initialState.environment.name
       );
       this.handleSearch(newQuery);
     }
@@ -67,17 +67,14 @@ const GroupEvents = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    // If query has changed, update the environment with the query environment
-    if (nextProps.location.search !== this.props.location.search) {
-      const queryParams = nextProps.location.query;
-
-      const queryEnvironment = EnvironmentStore.getByName(
-        getQueryEnvironment(queryParams.query || '')
-      );
+    // omit when environment changes in query string since we handle that separately
+    const searchHasChanged = !isEqual(
+      omit(qs.parse(nextProps.location.search), 'environment'),
+      omit(qs.parse(this.props.location.search), 'environment')
+    );
 
-      if (queryEnvironment) {
-        setActiveEnvironment(queryEnvironment);
-      }
+    if (searchHasChanged) {
+      const queryParams = nextProps.location.query;
 
       this.setState(
         {
@@ -87,21 +84,29 @@ const GroupEvents = createReactClass({
       );
     }
 
-    // If environment has changed, update query with new environment
+    // If environment has changed, refetch data
     if (nextProps.environment !== this.props.environment) {
-      const newQueryString = getQueryStringWithEnvironment(
-        nextProps.location.query.query || '',
-        nextProps.environment ? nextProps.environment.name : null
+      this.setState(
+        {
+          environment: nextProps.environment,
+        },
+        this.fetchData
       );
-      this.handleSearch(newQueryString);
     }
   },
 
   handleSearch(query) {
+    const queryEnvironment = getQueryEnvironment(query);
+
+    if (queryEnvironment) {
+      setActiveEnvironmentName(queryEnvironment);
+    }
+
     query = getQueryStringWithoutEnvironment(query);
     let targetQueryParams = {...this.props.location.query};
     if (query !== '') targetQueryParams.query = query;
     let {groupId, orgId, projectId} = this.props.params;
+
     browserHistory.push({
       pathname: `/${orgId}/${projectId}/issues/${groupId}/events/`,
       query: targetQueryParams,
@@ -113,8 +118,15 @@ const GroupEvents = createReactClass({
       loading: true,
       error: false,
     });
+
     const query = {...this.props.location.query, limit: 50, query: this.state.query};
 
+    if (this.state.environment) {
+      query.environment = this.state.environment.name;
+    } else {
+      delete query.environment;
+    }
+
     this.api.request(`/issues/${this.props.params.groupId}/events/`, {
       query,
       method: 'GET',
@@ -136,7 +148,7 @@ const GroupEvents = createReactClass({
   },
 
   renderNoQueryResults() {
-    const {environment} = this.props;
+    const {environment} = this.state;
     const message = environment
       ? tct('Sorry, no events match your search query in the [env] environment.', {
           env: environment.displayName,
@@ -151,7 +163,7 @@ const GroupEvents = createReactClass({
   },
 
   renderEmpty() {
-    const {environment} = this.props;
+    const {environment} = this.state;
     const message = environment
       ? tct("There don't seem to be any events in the [env] environment yet.", {
           env: environment.displayName,
diff --git a/tests/js/spec/views/groupEvents.spec.jsx b/tests/js/spec/views/groupEvents.spec.jsx
index 9500cf293a..6f03276f05 100644
--- a/tests/js/spec/views/groupEvents.spec.jsx
+++ b/tests/js/spec/views/groupEvents.spec.jsx
@@ -62,20 +62,35 @@ describe('groupEvents', function() {
     });
   });
 
-  it('can change environment', function() {
-    const component = shallow(
-      <GroupEvents
-        params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
-        location={{query: {}}}
-        environment={TestStubs.Environments()[0]}
-      />,
-      {
-        context: {...TestStubs.router(), group: TestStubs.Group()},
-        childContextTypes: {
-          router: PropTypes.object,
-        },
-      }
-    );
-    component.setProps({environment: TestStubs.Environments()[1]});
+  describe('changing environment', function() {
+    let component, eventsMock;
+    beforeEach(function() {
+      component = shallow(
+        <GroupEvents
+          params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
+          location={{query: {}}}
+          environment={TestStubs.Environments()[0]}
+        />,
+        {
+          context: {...TestStubs.router(), group: TestStubs.Group()},
+          childContextTypes: {
+            router: PropTypes.object,
+          },
+        }
+      );
+
+      eventsMock = MockApiClient.addMockResponse({
+        url: '/issues/1/events/',
+      });
+    });
+    it('select environment', function() {
+      component.setProps({environment: TestStubs.Environments()[1]});
+      expect(eventsMock.mock.calls[0][1].query.environment).toEqual('staging');
+    });
+
+    it('select all environments', function() {
+      component.setProps({environment: null});
+      expect(eventsMock.mock.calls[0][1].query.environment).toEqual(undefined);
+    });
   });
 });
