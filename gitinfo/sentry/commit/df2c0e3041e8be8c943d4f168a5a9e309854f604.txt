commit df2c0e3041e8be8c943d4f168a5a9e309854f604
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Jul 16 12:46:55 2018 -0700

    feat(integrations): Support inbound status sync core (#9016)

diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 2e1da9c9dc..283893c1df 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -69,6 +69,18 @@ class ExampleIntegration(Integration, IssueSyncMixin):
     def sync_status_outbound(self, external_issue, is_resolved, project_id):
         pass
 
+    def get_external_project_id(self, data):
+        """
+        Given webhook data, pull out external project id
+        """
+        return data['project_id']
+
+    def get_external_issue_status(self, data):
+        """
+        Given webhook data, pull out external issue status
+        """
+        return data['status']
+
 
 class ExampleIntegrationProvider(IntegrationProvider):
     """
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index eb89b3dee0..09aba24dd9 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -1,11 +1,17 @@
 from __future__ import absolute_import
 
+import logging
 import six
 
-from sentry.models import Event
+from sentry.models import (
+    Activity, Event, Group, GroupStatus, IntegrationExternalProject,
+    OrganizationIntegration
+)
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
 
+logger = logging.getLogger('sentry.integrations.issues')
+
 
 class IssueBasicMixin(object):
 
@@ -143,3 +149,96 @@ class IssueSyncMixin(IssueBasicMixin):
         Propagate a sentry issue's status to a linked issue's status.
         """
         raise NotImplementedError
+
+    def get_external_project_id(self, data):
+        """
+        Given webhook data, pull out external project id
+        """
+        raise NotImplementedError
+
+    def get_external_issue_status(self, data):
+        """
+        Given webhook data, pull out external issue status
+        """
+        raise NotImplementedError
+
+    def update_group_status(self, groups, status, activity_type):
+        updated = Group.objects.filter(
+            id__in=[g.id for g in groups],
+        ).exclude(
+            status=status,
+        ).update(
+            status=status,
+        )
+        if updated:
+            for group in groups:
+                Activity.objects.create(
+                    project=group.project,
+                    group=group,
+                    type=activity_type,
+                )
+
+    def sync_status_inbound(self, issue_key, data):
+        affected_groups = list(
+            Group.objects.get_groups_by_external_issue(
+                self.model, issue_key,
+            ).select_related('project'),
+        )
+
+        org_integration_to_org_map = dict(
+            OrganizationIntegration.objects.filter(
+                integration=self.model,
+            ).values_list('id', 'organization_id'),
+        )
+
+        external_projects = list(
+            IntegrationExternalProject.objects.filter(
+                organization_integration_id__in=org_integration_to_org_map.keys(),
+                external_id=self.get_external_project_id(data),
+            ),
+        )
+
+        external_projects_by_org = {
+            org_integration_to_org_map[int_external_p.organization_integration_id]: int_external_p
+            for int_external_p in external_projects
+        }
+
+        groups_to_resolve = []
+        groups_to_unresolve = []
+
+        for group in affected_groups:
+            external_project = external_projects_by_org.get(group.project.organization_id)
+            if external_project is None:
+                continue
+            issue_status = self.get_external_issue_status(data)
+
+            # TODO(jess): make sure config validation doesn't
+            # allow these to be the same
+            if external_project.resolved_status == external_project.unresolved_status:
+                logger.warning(
+                    'sync-config-conflict', extra={
+                        'organization_id': group.project.organization_id,
+                        'integration_id': self.model.id,
+                        'provider': self.model.get_provider(),
+                    }
+                )
+                continue
+
+            if issue_status == external_project.unresolved_status:
+                groups_to_unresolve.append(group)
+            elif issue_status == external_project.resolved_status:
+                groups_to_resolve.append(group)
+
+        if groups_to_resolve:
+            self.update_group_status(
+                groups_to_resolve,
+                GroupStatus.RESOLVED,
+                Activity.SET_RESOLVED,
+            )
+
+        if groups_to_unresolve:
+            self.update_group_status(
+                groups_to_unresolve,
+                GroupStatus.UNRESOLVED,
+                Activity.SET_UNRESOLVED
+            )
diff --git a/tests/sentry/integrations/test_issues.py b/tests/sentry/integrations/test_issues.py
new file mode 100644
index 0000000000..2959e386c5
--- /dev/null
+++ b/tests/sentry/integrations/test_issues.py
@@ -0,0 +1,93 @@
+from __future__ import absolute_import
+
+from sentry.models import (
+    Group, GroupStatus, Integration, GroupLink, ExternalIssue,
+    IntegrationExternalProject, OrganizationIntegration
+)
+from sentry.testutils import TestCase
+
+
+class IssueSyncIntegration(TestCase):
+    def test_status_sync_inbound_resolve(self):
+        group = self.group
+        assert group.status == GroupStatus.UNRESOLVED
+
+        integration = Integration.objects.create(
+            provider='example',
+            external_id='123456',
+        )
+        integration.add_organization(group.organization.id)
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=group.organization.id,
+            integration_id=integration.id,
+            key='APP-123',
+        )
+
+        GroupLink.objects.create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )
+
+        IntegrationExternalProject.objects.create(
+            organization_integration_id=OrganizationIntegration.objects.filter(
+                integration=integration,
+            ).values_list('id', flat=True).get(),
+            external_id='APP',
+            resolved_status='12345',
+        )
+
+        installation = integration.get_installation()
+
+        installation.sync_status_inbound(external_issue.key, {
+            'project_id': 'APP',
+            'status': '12345',
+        })
+
+        assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
+
+    def test_status_sync_inbound_unresolve(self):
+        group = self.group
+        group.status = GroupStatus.RESOLVED
+        group.save()
+        assert group.status == GroupStatus.RESOLVED
+
+        integration = Integration.objects.create(
+            provider='example',
+            external_id='123456',
+        )
+        integration.add_organization(group.organization.id)
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=group.organization.id,
+            integration_id=integration.id,
+            key='APP-123',
+        )
+
+        GroupLink.objects.create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )
+
+        IntegrationExternalProject.objects.create(
+            organization_integration_id=OrganizationIntegration.objects.filter(
+                integration=integration,
+            ).values_list('id', flat=True).get(),
+            external_id='APP',
+            unresolved_status='12345',
+        )
+
+        installation = integration.get_installation()
+
+        installation.sync_status_inbound(external_issue.key, {
+            'project_id': 'APP',
+            'status': '12345',
+        })
+
+        assert Group.objects.get(id=group.id).status == GroupStatus.UNRESOLVED
