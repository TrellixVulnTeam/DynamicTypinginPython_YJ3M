commit 19eaf9b3a280f98d3a18f9ba8332f5344d374ab5
Author: Ted Kaemming <ted@kaemming.com>
Date:   Mon Jul 11 13:20:59 2016 -0700

    Add `get_most_frequent_series` method to TSDB.

diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index faf95bad09..fac432509c 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -260,6 +260,20 @@ class BaseTSDB(object):
         """
         raise NotImplementedError
 
+    def get_most_frequent_series(self, model, keys, start, end=None, rollup=None, limit=None):
+        """
+        Retrieve the most frequently seen items in a frequency table for each
+        interval in a series. (This is in contrast with ``get_most_frequent``,
+        which returns the most frequent item seen over the entire requested
+        range.)
+
+        Result are returned as a mapping, where the key is the key requested
+        and the value is a list of ``(timestamp, {item: score, ...})``) pairs
+        over the series. The maximum number of items returned for each interval
+        is the index capacity if no ``limit`` is provided.
+        """
+        raise NotImplementedError
+
     def get_frequency_series(self, model, items, start, end=None, rollup=None):
         """
         Retrieve the frequency of known items in a table over time.
diff --git a/src/sentry/tsdb/dummy.py b/src/sentry/tsdb/dummy.py
index 29613efa60..16dff91514 100644
--- a/src/sentry/tsdb/dummy.py
+++ b/src/sentry/tsdb/dummy.py
@@ -38,6 +38,10 @@ class DummyTSDB(BaseTSDB):
     def get_most_frequent(self, model, keys, start, end=None, rollup=None, limit=None):
         return {key: [] for key in keys}
 
+    def get_most_frequent_series(self, model, keys, start, end=None, rollup=None, limit=None):
+        rollup, series = self.get_optimal_rollup_series(start, end, rollup)
+        return {key: [(timestamp, {}) for timestamp in series] for key in keys}
+
     def get_frequency_series(self, model, items, start, end=None, rollup=None):
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 4f7df0c7c2..10c253aaae 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -427,12 +427,11 @@ class RedisTSDB(BaseTSDB):
 
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
-        commands = {}
-
         arguments = ['RANKED']
         if limit is not None:
             arguments.append(int(limit))
 
+        commands = {}
         for key in keys:
             ks = []
             for timestamp in series:
@@ -440,12 +439,38 @@ class RedisTSDB(BaseTSDB):
             commands[key] = [(CountMinScript, ks, arguments)]
 
         results = {}
-
         for key, responses in self.cluster.execute_commands(commands).items():
             results[key] = [(member, float(score)) for member, score in responses[0].value]
 
         return results
 
+    def get_most_frequent_series(self, model, keys, start, end=None, rollup=None, limit=None):
+        if not self.enable_frequency_sketches:
+            raise NotImplementedError("Frequency sketches are disabled.")
+
+        rollup, series = self.get_optimal_rollup_series(start, end, rollup)
+
+        arguments = ['RANKED']
+        if limit is not None:
+            arguments.append(int(limit))
+
+        commands = {}
+        for key in keys:
+            commands[key] = [(
+                CountMinScript,
+                self.make_frequency_table_keys(model, rollup, timestamp, key),
+                arguments,
+            ) for timestamp in series]
+
+        def unpack_response(response):
+            return {item: float(score) for item, score in response.value}
+
+        results = {}
+        for key, responses in self.cluster.execute_commands(commands).items():
+            results[key] = zip(series, map(unpack_response, responses))
+
+        return results
+
     def get_frequency_series(self, model, items, start, end=None, rollup=None):
         if not self.enable_frequency_sketches:
             raise NotImplementedError("Frequency sketches are disabled.")
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index edd5f4eed2..33ea0aa17b 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -157,6 +157,8 @@ class RedisTSDBTest(TestCase):
         now = datetime.utcnow().replace(tzinfo=pytz.UTC)
         model = TSDBModel.frequent_projects_by_organization
 
+        rollup = 3600
+
         self.db.record_frequency_multi(
             (
                 (model, {
@@ -191,7 +193,7 @@ class RedisTSDBTest(TestCase):
             model,
             ('organization:1', 'organization:2'),
             now,
-            rollup=3600,
+            rollup=rollup,
         ) == {
             'organization:1': [
                 ('project:3', 3.0),
@@ -206,7 +208,7 @@ class RedisTSDBTest(TestCase):
             ('organization:1', 'organization:2'),
             now,
             limit=1,
-            rollup=3600,
+            rollup=rollup,
         ) == {
             'organization:1': [
                 ('project:3', 3.0),
@@ -219,7 +221,7 @@ class RedisTSDBTest(TestCase):
             ('organization:1', 'organization:2'),
             now - timedelta(hours=1),
             now,
-            rollup=3600,
+            rollup=rollup,
         ) == {
             'organization:1': [
                 ('project:3', 3.0 + 3.0),
@@ -232,8 +234,44 @@ class RedisTSDBTest(TestCase):
             ],
         }
 
-        rollup = 3600
         timestamp = int(to_timestamp(now) // rollup) * rollup
+
+        assert self.db.get_most_frequent_series(
+            model,
+            (
+                'organization:1',
+                'organization:2',
+                'organization:3',
+            ),
+            now - timedelta(hours=1),
+            now,
+            rollup=rollup,
+        ) == {
+            'organization:1': [
+                (timestamp - rollup, {
+                    'project:1': 1.0,
+                    'project:2': 2.0,
+                    'project:3': 3.0,
+                    'project:4': 4.0,
+                }),
+                (timestamp, {
+                    'project:1': 1.0,
+                    'project:2': 2.0,
+                    'project:3': 3.0,
+                }),
+            ],
+            'organization:2': [
+                (timestamp - rollup, {
+                    'project:5': 1.5,
+                }),
+                (timestamp, {}),
+            ],
+            'organization:3': [
+                (timestamp - rollup, {}),
+                (timestamp, {}),
+            ],
+        }
+
         assert self.db.get_frequency_series(
             model,
             {
@@ -276,7 +314,7 @@ class RedisTSDBTest(TestCase):
             },
             now - timedelta(hours=1),
             now,
-            rollup=3600,
+            rollup=rollup,
         ) == {
             'organization:1': {
                 "project:1": 1.0 + 1.0,
