commit 8fe068e0c91bc0315897e4096ec1d4a0b25aa860
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Oct 15 15:04:27 2019 -0700

    feat(invites): Make invite modal permission aware (#15039)
    
    The member invite modal has learned to create invite requests. Members
    may now use this modal to suggest that a user be invited.

diff --git a/src/sentry/api/endpoints/organization_invite_request_details.py b/src/sentry/api/endpoints/organization_invite_request_details.py
new file mode 100644
index 0000000000..a3f32a0661
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_invite_request_details.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+
+from sentry.api.bases.organization import OrganizationEndpoint
+
+
+class OrganizationInviteRequestDetailsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        # TODO(epurkhiser): Add listing of invite requests
+        pass
+
+    def put(self, request, organization):
+        # TODO(epurkhiser): Handle accepting invite
+        pass
diff --git a/src/sentry/api/endpoints/organization_invite_request_index.py b/src/sentry/api/endpoints/organization_invite_request_index.py
new file mode 100644
index 0000000000..5cf0dc8990
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_invite_request_index.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+from django.db import transaction
+from rest_framework.response import Response
+
+from sentry.app import locks
+from sentry import roles, features
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
+from sentry.api.serializers import serialize
+from sentry.models import AuditLogEntryEvent, OrganizationMember, InviteStatus
+from sentry.utils.retries import TimedRetryPolicy
+
+from .organization_member_index import OrganizationMemberSerializer, save_team_assignments
+
+
+class InviteRequestPermissions(OrganizationPermission):
+    scope_map = {
+        "GET": ["member:read", "member:write", "member:admin"],
+        "POST": ["member:read", "member:write", "member:admin"],
+    }
+
+
+class OrganizationInviteRequestIndexEndpoint(OrganizationEndpoint):
+    permission_classes = (InviteRequestPermissions,)
+
+    def get(self, request, organization):
+        # TODO(epurkhiser): Add listing of invite requests
+        pass
+
+    def post(self, request, organization):
+        """
+        Add a invite request to Organization
+        ````````````````````````````````````
+
+        Creates an invite request given an email and sugested role / teams.
+
+        :pparam string organization_slug: the slug of the organization the member will belong to
+        :param string email: the email address to invite
+        :param string role: the suggested role of the new member
+        :param array teams: the suggested slugs of the teams the member should belong to.
+
+        :auth: required
+        """
+        if not features.has("organizations:invite-members", organization, actor=request.user):
+            return Response(
+                {"organization": "Your organization is not allowed to invite members"}, status=403
+            )
+
+        serializer = OrganizationMemberSerializer(
+            data=request.data,
+            context={"organization": organization, "allowed_roles": roles.get_all()},
+        )
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.validated_data
+
+        with transaction.atomic():
+            om = OrganizationMember.objects.create(
+                organization=organization,
+                email=result["email"],
+                role=result["role"],
+                inviter=request.user,
+                invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+            )
+
+            if result["teams"]:
+                lock = locks.get(u"org:member:{}".format(om.id), duration=5)
+                with TimedRetryPolicy(10)(lock.acquire):
+                    save_team_assignments(om, result["teams"])
+
+            self.create_audit_entry(
+                request=request,
+                organization_id=organization.id,
+                target_object=om.id,
+                data=om.get_audit_log_data(),
+                event=AuditLogEntryEvent.INVITE_REQUEST_ADD,
+            )
+
+        return Response(serialize(om), status=201)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 5e3507a818..fd5f4c57d0 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -117,8 +117,8 @@ from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
 from .endpoints.organization_issues_resolved_in_release import (
     OrganizationIssuesResolvedInReleaseEndpoint,
 )
-from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
+from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_issues_assigned import OrganizationMemberIssuesAssignedEndpoint
 from .endpoints.organization_member_issues_bookmarked import (
     OrganizationMemberIssuesBookmarkedEndpoint,
@@ -128,6 +128,8 @@ from .endpoints.organization_member_team_details import OrganizationMemberTeamDe
 from .endpoints.organization_member_unreleased_commits import (
     OrganizationMemberUnreleasedCommitsEndpoint,
 )
+from .endpoints.organization_invite_request_index import OrganizationInviteRequestIndexEndpoint
+from .endpoints.organization_invite_request_details import OrganizationInviteRequestDetailsEndpoint
 from .endpoints.organization_monitors import OrganizationMonitorsEndpoint
 from .endpoints.organization_onboarding_tasks import OrganizationOnboardingTaskEndpoint
 from .endpoints.organization_pinned_searches import OrganizationPinnedSearchEndpoint
@@ -784,6 +786,16 @@ urlpatterns = patterns(
                     OrganizationMemberIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-member-index",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/invite-requests/$",
+                    OrganizationInviteRequestIndexEndpoint.as_view(),
+                    name="sentry-api-0-organization-invite-request-index",
+                ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/invite-requests/(?P<member_id>[^\/]+)/$",
+                    OrganizationInviteRequestDetailsEndpoint.as_view(),
+                    name="sentry-api-0-organization-invite-request-detail",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/monitors/$",
                     OrganizationMonitorsEndpoint.as_view(),
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index afad9a547d..842b735558 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -94,6 +94,8 @@ class AuditLogEntryEvent(object):
     INTERNAL_INTEGRATION_ADD_TOKEN = 135
     INTERNAL_INTEGRATION_REMOVE_TOKEN = 136
 
+    INVITE_REQUEST_ADD = 140
+
 
 class AuditLogEntry(Model):
     __core__ = False
@@ -174,6 +176,7 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.TRIAL_STARTED, "trial.started"),
             (AuditLogEntryEvent.PLAN_CHANGED, "plan.changed"),
             (AuditLogEntryEvent.PLAN_CANCELLED, "plan.cancelled"),
+            (AuditLogEntryEvent.INVITE_REQUEST_ADD, "invite-request.create"),
         )
     )
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
@@ -372,5 +375,7 @@ class AuditLogEntry(Model):
             return "created a token for internal integration %s" % (self.data["sentry_app"])
         elif self.event == AuditLogEntryEvent.INTERNAL_INTEGRATION_REMOVE_TOKEN:
             return "revoked a token for internal integration %s" % (self.data["sentry_app"])
+        elif self.event == AuditLogEntryEvent.INVITE_REQUEST_ADD:
+            return "request added to invite %s" % (self.data["email"],)
 
         return ""
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 5f1f8ec3aa..ee7f45fd49 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -37,6 +37,13 @@ class InviteStatus(Enum):
     REQUESTED_TO_JOIN = 2
 
 
+invite_status_names = {
+    InviteStatus.APPROVED.value: "approved",
+    InviteStatus.REQUESTED_TO_BE_INVITED.value: "requested_to_be_invited",
+    InviteStatus.REQUESTED_TO_JOIN.value: "requested_to_join",
+}
+
+
 class OrganizationMemberTeam(BaseModel):
     """
     Identifies relationships between organization members and the teams they are on.
@@ -314,6 +321,7 @@ class OrganizationMember(Model):
             "teams_slugs": [t["slug"] for t in teams],
             "has_global_access": self.has_global_access,
             "role": self.role,
+            "invite_status": invite_status_names[self.invite_status],
         }
 
     def get_teams(self):
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
index bfcd869618..9345cae34e 100644
--- a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/index.tsx
@@ -11,6 +11,7 @@ import AsyncComponent from 'app/components/asyncComponent';
 import {Organization} from 'app/types';
 import withLatestContext from 'app/utils/withLatestContext';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import Tooltip from 'app/components/tooltip';
 
 import {InviteRow, InviteStatus, NormalizedInvite} from './types';
 import InviteRowControl from './inviteRowControl';
@@ -75,11 +76,12 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
       inviteStatus: {...state.inviteStatus, [invite.email]: {sent: false}},
     }));
 
+    const endpoint = this.willInvite
+      ? `/organizations/${slug}/members/`
+      : `/organizations/${slug}/invite-requests/`;
+
     try {
-      await this.api.requestPromise(`/organizations/${slug}/members/`, {
-        method: 'POST',
-        data,
-      });
+      await this.api.requestPromise(endpoint, {method: 'POST', data});
     } catch (err) {
       const errorResponse = err.responseJSON;
 
@@ -177,7 +179,9 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
       return (
         <StatusMessage>
           <LoadingIndicator mini relative hideMessage size={16} />
-          {t('Sending organization invitations...')}
+          {this.willInvite
+            ? t('Sending organization invitations...')
+            : t('Sending invite requests...')}
         </StatusMessage>
       );
     }
@@ -188,16 +192,17 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
       const errorCount = statuses.filter(i => i.error).length;
 
       const invites = <strong>{tn('%d invite', '%d invites', sentCount)}</strong>;
+      const tctComponents = {
+        invites,
+        failed: errorCount,
+      };
 
       return (
         <StatusMessage status="success">
           <InlineSvg src="icon-checkmark-sm" size="16px" />
           {errorCount > 0
-            ? tct('Sent [invites], [failed] failed to send.', {
-                invites,
-                failed: errorCount,
-              })
-            : tct('Sent [invites]', {invites})}
+            ? tct('Sent [invites], [failed] failed to send.', tctComponents)
+            : tct('Sent [invites]', tctComponents)}
         </StatusMessage>
       );
     }
@@ -214,6 +219,20 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
     return null;
   }
 
+  get willInvite() {
+    return this.props.organization.access.includes('member:write');
+  }
+
+  get inviteButtonLabel() {
+    if (this.invites.length > 0) {
+      return this.willInvite
+        ? tn('Send invite', 'Send invites (%d)', this.invites.length)
+        : tn('Send invite request', 'Send invite requests (%d)', this.invites.length);
+    }
+
+    return this.willInvite ? t('Send invite') : t('Send invite request');
+  }
+
   render() {
     const {Footer, closeModal, organization} = this.props;
     const {pendingInvites, sendingInvites, complete, inviteStatus, member} = this.state;
@@ -225,8 +244,27 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
         <Heading>
           <InlineSvg src="icon-mail" size="36px" />
           {t('Invite New Members')}
+          {!this.willInvite && (
+            <Tooltip
+              title={t(
+                `You do not have permission to directly invite members. Email
+                 addresses entered here will be forwarded to organization
+                 managers and owners; they will be prompted to approve the
+                 invitation.`
+              )}
+            >
+              <InlineSvg src="icon-circle-question" size="16px" />
+            </Tooltip>
+          )}
         </Heading>
-        <Subtext>{t('Invite new members by email to join your organization.')}</Subtext>
+        <Subtext>
+          {this.willInvite
+            ? t('Invite new members by email to join your organization.')
+            : t(
+                `You can’t directly invite users because you don’t have
+                 permissions, but we’ll send a request on your behalf!`
+              )}
+        </Subtext>
 
         <InviteeHeadings>
           <div>{t('Email addresses')}</div>
@@ -242,6 +280,7 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
             role={role}
             teams={[...teams]}
             roleOptions={member ? member.roles : MEMBER_ROLES}
+            roleDisabledUnallowed={this.willInvite}
             teamOptions={organization.teams}
             inviteStatus={inviteStatus}
             onRemove={() => this.removeInviteRow(i)}
@@ -296,9 +335,7 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
                   disabled={!this.isValidInvites || disableInputs}
                   onClick={this.sendInvites}
                 >
-                  {this.invites.length > 0
-                    ? tn('Send invite', 'Send invites (%d)', this.invites.length)
-                    : t('Send invites')}
+                  {this.inviteButtonLabel}
                 </Button>
               </React.Fragment>
             )}
@@ -310,9 +347,9 @@ class InviteMembersModal extends AsyncComponent<Props, State> {
 }
 
 const Heading = styled('h1')`
-  display: grid;
+  display: inline-grid;
   grid-gap: ${space(1.5)};
-  grid-template-columns: max-content 1fr;
+  grid-auto-flow: column;
   align-items: center;
   font-weight: 400;
   font-size: ${p => p.theme.headerFontSize};
@@ -362,16 +399,11 @@ const StatusMessage = styled('div')<{status?: 'success' | 'error'}>`
   grid-gap: ${space(1)};
   align-items: center;
   font-size: ${p => p.theme.fontSizeMedium};
-
   color: ${p => (p.status === 'error' ? p.theme.red : p.theme.gray3)};
 
-  ${p =>
-    p.status === 'success' &&
-    css`
-      ${InlineSvg} {
-        color: ${p.theme.green};
-      }
-    `};
+  > :first-child {
+    ${p => p.status === 'success' && `color: ${p.theme.green}`};
+  }
 `;
 
 const modalClassName = css`
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
index 32857e4739..0017fdbd1f 100644
--- a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/inviteRowControl.tsx
@@ -17,6 +17,7 @@ type Props = {
   role: string;
   teams: string[];
   roleOptions: MemberRole[];
+  roleDisabledUnallowed: boolean;
   teamOptions: Team[];
   inviteStatus: InviteStatus;
   onRemove: () => void;
@@ -34,6 +35,7 @@ const InviteRowControl = ({
   role,
   teams,
   roleOptions,
+  roleDisabledUnallowed,
   teamOptions,
   inviteStatus,
   onRemove,
@@ -65,6 +67,7 @@ const InviteRowControl = ({
         disabled={disabled}
         value={role}
         roles={roleOptions}
+        disableUnallowed={roleDisabledUnallowed}
         onChange={onChangeRole}
       />
     </div>
diff --git a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
index a23d914e7b..0848df627d 100644
--- a/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
+++ b/src/sentry/static/sentry/app/components/modals/inviteMembersModal/roleSelectControl.tsx
@@ -7,12 +7,18 @@ import {MemberRole} from 'app/types';
 
 type Props = SelectControl['props'] & {
   roles: MemberRole[];
+  disableUnallowed: boolean;
 };
 
-const RoleSelector = ({roles, ...props}: Props) => (
+const RoleSelector = ({roles, disableUnallowed, ...props}: Props) => (
   <RoleSelectControl
     options={
-      roles && roles.map(r => ({value: r.id, label: r.name, disabled: !r.allowed}))
+      roles &&
+      roles.map(r => ({
+        value: r.id,
+        label: r.name,
+        disabled: disableUnallowed && !r.allowed,
+      }))
     }
     optionRenderer={option => {
       const {name, desc} = roles.find(r => r.id === option.value)!;
diff --git a/tests/js/spec/components/modals/inviteMembersModal.spec.jsx b/tests/js/spec/components/modals/inviteMembersModal.spec.jsx
index f233828ff7..2b102a6189 100644
--- a/tests/js/spec/components/modals/inviteMembersModal.spec.jsx
+++ b/tests/js/spec/components/modals/inviteMembersModal.spec.jsx
@@ -5,18 +5,24 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import InviteMembersModal from 'app/components/modals/inviteMembersModal';
 
 describe('InviteMembersModal', function() {
-  const org = TestStubs.Organization();
+  const org = TestStubs.Organization({access: ['member:write']});
+
+  const noWriteOrg = TestStubs.Organization({
+    access: [],
+  });
 
   const roles = [
     {
       id: 'admin',
       name: 'Admin',
       desc: 'This is the admin role',
+      allowed: true,
     },
     {
       id: 'member',
       name: 'Member',
       desc: 'This is the member role',
+      allowed: true,
     },
   ];
 
@@ -221,7 +227,7 @@ describe('InviteMembersModal', function() {
     const faildCreateMemberMock = MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/members/`,
       method: 'POST',
-      statusCode: 401,
+      statusCode: 400,
     });
 
     const wrapper = mountWithTheme(
@@ -257,4 +263,60 @@ describe('InviteMembersModal', function() {
       wrapper.find('SelectControl EmailLabel InlineSvg[src="icon-warning-sm"]').exists()
     ).toBe(true);
   });
+
+  describe('member invite request mode', function() {
+    it('has adjusted wording', function() {
+      const wrapper = mountWithTheme(
+        <InviteMembersModal
+          Body={Modal.Body}
+          Header={Modal.Header}
+          Footer={Modal.Footer}
+          organization={noWriteOrg}
+        />,
+        TestStubs.routerContext()
+      );
+
+      expect(wrapper.find('Button[data-test-id="send-invites"]').text()).toBe(
+        'Send invite request'
+      );
+
+      expect(wrapper.find('Heading Tooltip').exists()).toBe(true);
+    });
+
+    it('POSTS to the invite-request endpoint', function() {
+      const createInviteRequestMock = MockApiClient.addMockResponse({
+        url: `/organizations/${org.slug}/invite-requests/`,
+        method: 'POST',
+      });
+
+      const wrapper = mountWithTheme(
+        <InviteMembersModal
+          Body={Modal.Body}
+          Header={Modal.Header}
+          Footer={Modal.Footer}
+          organization={noWriteOrg}
+        />,
+        TestStubs.routerContext()
+      );
+
+      const inviteRowProps = wrapper
+        .find('StyledInviteRow')
+        .first()
+        .props();
+
+      inviteRowProps.onChangeEmails([{value: 'test1@test.com'}]);
+      inviteRowProps.onChangeRole({value: 'admin'});
+      inviteRowProps.onChangeTeams([{value: 'team1'}]);
+      wrapper
+        .find('StyledInviteRow')
+        .first()
+        .props()
+        .onChangeEmails([{value: 'test2@test.com'}]);
+
+      wrapper.update();
+      wrapper.find('FooterContent Button[priority="primary"]').simulate('click');
+
+      expect(createInviteRequestMock).toHaveBeenCalledTimes(1);
+    });
+  });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_index.py b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
new file mode 100644
index 0000000000..59d6b036a6
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
@@ -0,0 +1,66 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+from sentry.models import OrganizationMember, OrganizationMemberTeam, InviteStatus
+
+
+class OrganizationInviteRequestCreateTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user("foo@localhost")
+
+        self.org = self.create_organization()
+        self.team = self.create_team(organization=self.org)
+        self.member = self.create_member(user=self.user, organization=self.org, role="member")
+
+        self.login_as(user=self.user)
+
+        self.url = reverse(
+            "sentry-api-0-organization-invite-request-index",
+            kwargs={"organization_slug": self.org.slug},
+        )
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+        response = self.client.post(
+            self.url, {"email": "eric@localhost", "role": "member", "teams": [self.team.slug]}
+        )
+
+        assert response.status_code == 201
+        assert response.data["email"] == "eric@localhost"
+
+        member = OrganizationMember.objects.get(organization=self.org, email=response.data["email"])
+        assert member.user is None
+        assert member.role == "member"
+        assert member.inviter == self.user
+        assert member.invite_status == InviteStatus.REQUESTED_TO_BE_INVITED.value
+
+        teams = OrganizationMemberTeam.objects.filter(organizationmember=member)
+
+        assert len(teams) == 1
+        assert teams[0].team_id == self.team.id
+
+    def test_higher_role(self):
+        self.login_as(user=self.user)
+        response = self.client.post(
+            self.url, {"email": "eric@localhost", "role": "owner", "teams": [self.team.slug]}
+        )
+
+        assert response.status_code == 201
+        assert response.data["email"] == "eric@localhost"
+
+        member = OrganizationMember.objects.get(organization=self.org, email=response.data["email"])
+        assert member.role == "owner"
+
+    def test_existing_member(self):
+        self.login_as(user=self.user)
+
+        user2 = self.create_user("foobar@example.com")
+        self.create_member(user=user2, organization=self.org)
+
+        resp = self.client.post(
+            self.url, {"email": user2.email, "role": "member", "teams": [self.team.slug]}
+        )
+
+        assert resp.status_code == 400
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 7778584b20..c112f6ea14 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -5,11 +5,58 @@ from mock import patch
 from django.core.urlresolvers import reverse
 from django.core import mail
 
-from sentry.testutils import APITestCase
+from sentry import roles
+from sentry.api.endpoints.organization_member_index import OrganizationMemberSerializer
+from sentry.testutils import APITestCase, TestCase
 from sentry.models import InviteStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.testutils.helpers import Feature
 
 
+class OrganizationMemberSerializerTest(TestCase):
+    def test_valid(self):
+        context = {"organization": self.organization, "allowed_roles": [roles.get("member")]}
+        data = {"email": "eric@localhost", "role": "member", "teams": [self.team.slug]}
+
+        serializer = OrganizationMemberSerializer(context=context, data=data)
+        assert serializer.is_valid()
+
+    def test_gets_teams_objects(self):
+        context = {"organization": self.organization, "allowed_roles": [roles.get("member")]}
+        data = {"email": "eric@localhost", "role": "member", "teams": [self.team.slug]}
+
+        serializer = OrganizationMemberSerializer(context=context, data=data)
+        assert serializer.is_valid()
+        assert serializer.validated_data["teams"][0] == self.team
+
+    def test_invalid_email(self):
+        context = {"organization": self.organization, "allowed_roles": [roles.get("member")]}
+        data = {"email": self.user.email, "role": "member", "teams": []}
+
+        serializer = OrganizationMemberSerializer(context=context, data=data)
+        assert not serializer.is_valid()
+        assert serializer.errors == {
+            "email": ["The user %s is already a member" % (self.user.email,)]
+        }
+
+    def test_invalid_team_invites(self):
+        context = {"organization": self.organization, "allowed_roles": [roles.get("member")]}
+        data = {"email": "eric@localhost", "role": "member", "teams": ["faketeam"]}
+
+        serializer = OrganizationMemberSerializer(context=context, data=data)
+
+        assert not serializer.is_valid()
+        assert serializer.errors == {"teams": ["Invalid teams"]}
+
+    def test_invalid_role(self):
+        context = {"organization": self.organization, "allowed_roles": [roles.get("member")]}
+        data = {"email": "eric@localhost", "role": "owner", "teams": []}
+
+        serializer = OrganizationMemberSerializer(context=context, data=data)
+
+        assert not serializer.is_valid()
+        assert serializer.errors == {"role": ["You do not have permission to invite that role."]}
+
+
 class OrganizationMemberListTest(APITestCase):
     def setUp(self):
         self.owner_user = self.create_user("foo@localhost", username="foo")
@@ -322,14 +369,6 @@ class OrganizationMemberListTest(APITestCase):
         assert response.status_code == 201
         assert response.data["email"] == "eric@localhost"
 
-    def test_invalid_team_invites(self):
-        self.login_as(user=self.owner_user)
-        response = self.client.post(
-            self.url, {"email": "eric@localhost", "role": "owner", "teams": ["faketeam"]}
-        )
-
-        assert response.status_code == 400
-
 
 class OrganizationMemberListPostTest(APITestCase):
     endpoint = "sentry-api-0-organization-member-index"
