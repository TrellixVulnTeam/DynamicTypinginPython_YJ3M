commit 7a482c26ee8f5b8beccde0924ff7cb7bd2b4de9c
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Nov 23 11:32:05 2018 +0100

    feat(event): Handle null values more gracefully in events (#10735)

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 309f63418a..68405431e7 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -8,6 +8,7 @@ from semaphore import meta_with_chunks
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import Event, EventError, EventAttachment
+from sentry.utils.safe import get_path
 
 
 CRASH_FILE_TYPES = set(['event.minidump'])
@@ -85,13 +86,13 @@ class EventSerializer(Serializer):
         return (data, meta_with_chunks(data, api_meta))
 
     def _get_tags_with_meta(self, event):
-        meta = (event.data.get('_meta') or {}).get('tags') or {}
+        meta = get_path(event.data, '_meta', 'tags') or {}
 
         tags = sorted(
             [{
                 'key': k.split('sentry:', 1)[-1],
                 'value': v,
-                '_meta': meta.get(k) or meta.get(six.text_type(i), {}).get('1') or None,
+                '_meta': meta.get(k) or get_path(meta, six.text_type(i), '1') or None,
             } for i, (k, v) in enumerate(event.data.get('tags') or ())],
             key=lambda x: x['key']
         )
@@ -105,21 +106,22 @@ class EventSerializer(Serializer):
 
     def _get_attr_with_meta(self, event, attr, default=None):
         value = event.data.get(attr, default)
-        meta = (event.data.get('_meta') or {}).get(attr)
+        meta = get_path(event.data, '_meta', attr)
         return (value, meta_with_chunks(value, meta))
 
     def _get_message_with_meta(self, event):
-        meta = event.data.get('_meta') or {}
+        meta = event.data.get('_meta')
+
+        message = get_path(event.data, 'logentry', 'formatted')
+        msg_meta = get_path(meta, 'logentry', 'formatted')
+
+        if not message:
+            message = get_path(event.data, 'logentry', 'message')
+            msg_meta = get_path(meta, 'logentry', 'message')
 
-        if 'logentry' not in event.data:
-            message = event.message
-            msg_meta = meta.get('message')
-        elif 'formatted' in event.data['logentry']:
-            message = event.data['logentry']['formatted']
-            msg_meta = meta.get('logentry', {}).get('formatted')
-        else:
-            message = event.data['logentry']['message']
-            msg_meta = meta.get('logentry', {}).get('message')
+        if not message:
+            message = get_path(event.data, 'message')
+            msg_meta = get_path(meta, 'message')
 
         return (message, meta_with_chunks(message, msg_meta))
 
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index ec3b1db757..2fa423b7cb 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -23,6 +23,7 @@ from sentry.db.models import (
 from sentry.interfaces.base import get_interfaces
 from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
+from sentry.utils.safe import get_path
 from sentry.utils.strings import truncatechars
 
 
@@ -101,10 +102,9 @@ class Event(Model):
         # being used by plugin code and once the message rename is through
         # plugins should instead swithc to the actual message attribute or
         # this method could return what currently is real_message.
-        msg_interface = self.data.get('logentry', {
-            'message': self.message,
-        })
-        return msg_interface.get('formatted', msg_interface['message'])
+        return get_path(self.data, 'logentry', 'formatted') \
+            or get_path(self.data, 'logentry', 'message') \
+            or self.message
 
     def get_event_type(self):
         """
@@ -157,17 +157,13 @@ class Event(Model):
 
     @memoize
     def ip_address(self):
-        user_data = self.data.get('user', self.data.get('user'))
-        if user_data:
-            value = user_data.get('ip_address')
-            if value:
-                return value
-
-        http_data = self.data.get('request', self.data.get('http'))
-        if http_data and 'env' in http_data:
-            value = http_data['env'].get('REMOTE_ADDR')
-            if value:
-                return value
+        ip_address = get_path(self.data, 'user', 'ip_address')
+        if ip_address:
+            return ip_address
+
+        remote_addr = get_path(self.data, 'request', 'env', 'REMOTE_ADDR')
+        if remote_addr:
+            return remote_addr
 
         return None
 
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index f20ecfb607..b805017a6b 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -87,8 +87,6 @@ class EventSerializerTest(TestCase):
         assert result['_meta']['message'] == {'': {'err': ['some error']}}
 
     def test_message_legacy(self):
-        # TODO: This test case can be removed once validation is implemented by
-        # libsemaphore and enforced on all payloads
         event = self.create_event(
             data={
                 'message': 'foo',
@@ -102,8 +100,7 @@ class EventSerializerTest(TestCase):
         del event.data['logentry']
 
         result = serialize(event)
-        assert result['message'] == 'foo'
-        assert result['_meta']['message'] == {'': {'err': ['some error']}}
+        assert result['message'] is None
 
     def test_tags_tuples(self):
         event = self.create_event(
@@ -155,6 +152,27 @@ class EventSerializerTest(TestCase):
         assert result['_meta']['tags']['0']['value'] == {'': {'err': ['bar error']}}
         assert result['_meta']['tags']['1']['value'] == {'': {'err': ['foo error']}}
 
+    def test_none_interfaces(self):
+        event = self.create_event(data={
+            'breadcrumbs': None,
+            'exception': None,
+            'logentry': None,
+            'request': None,
+            'user': None,
+            'contexts': None,
+            'sdk': None,
+            '_meta': None,
+        })
+
+        result = serialize(event)
+        assert not any(e['type'] == 'breadcrumbs' for e in result['entries'])
+        assert not any(e['type'] == 'exception' for e in result['entries'])
+        assert not any(e['type'] == 'message' for e in result['entries'])
+        assert not any(e['type'] == 'request' for e in result['entries'])
+        assert result['user'] is None
+        assert result['sdk'] is None
+        assert result['contexts'] == {}
+
 
 class SharedEventSerializerTest(TestCase):
     def test_simple(self):
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 2c6cf53c8b..31849e40b7 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -125,6 +125,38 @@ class EventTest(TestCase):
         with self.assertNumQueries(0):
             event.get_environment() == environment
 
+    def test_ip_address(self):
+        event = self.create_event(data={
+            'user': {'ip_address': '127.0.0.1'},
+            'request': {'url': 'http://some.com', 'env': {'REMOTE_ADDR': '::1'}}
+        })
+        assert event.ip_address == '127.0.0.1'
+
+        event = self.create_event(data={
+            'user': {'ip_address': None},
+            'request': {'url': 'http://some.com', 'env': {'REMOTE_ADDR': '::1'}}
+        })
+        assert event.ip_address == '::1'
+
+        event = self.create_event(data={
+            'user': None,
+            'request': {'url': 'http://some.com', 'env': {'REMOTE_ADDR': '::1'}}
+        })
+        assert event.ip_address == '::1'
+
+        event = self.create_event(data={
+            'request': {'url': 'http://some.com', 'env': {'REMOTE_ADDR': '::1'}}
+        })
+        assert event.ip_address == '::1'
+
+        event = self.create_event(data={
+            'request': {'url': 'http://some.com', 'env': {'REMOTE_ADDR': None}}
+        })
+        assert event.ip_address is None
+
+        event = self.create_event()
+        assert event.ip_address is None
+
 
 class EventGetLegacyMessageTest(TestCase):
     def test_message(self):
@@ -152,3 +184,17 @@ class EventGetLegacyMessageTest(TestCase):
             },
         )
         assert event.get_legacy_message() == 'foo bar'
+
+    def test_none(self):
+        event = self.create_event(
+            data={'logentry': None},
+        )
+        assert event.get_legacy_message() == '<unlabeled event>'
+
+        event = self.create_event(
+            data={'logentry': {
+                'formatted': None,
+                'message': None,
+            }},
+        )
+        assert event.get_legacy_message() == '<unlabeled event>'
