commit 67f3b28183944d87e829e145cdf3d3a1b75e8fa0
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Mar 2 11:55:15 2020 +0100

    feat(pii): Expose organization option for Advanced Datascrubber Settings (#17399)
    
    Just add another textbox to general organization settings, such as in project options: getsentry/relay#453
    
    We merge the two PII configs analogous to how legacy datascrubber settings are merged into one config.
    
    This requires some backend hackery to be able to distinguish organization scrubbing from project scrubbing in the PII tooltips. Merging two PII configs is not trivial, but other options such as running the PII scrubber multiple times would require us to change the Relay project config schema.

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index b74aa1c6d5..fedd50e1eb 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -82,6 +82,7 @@ ORG_OPTIONS = (
         bool,
         org_serializers.REQUIRE_SCRUB_IP_ADDRESS_DEFAULT,
     ),
+    ("relayPiiConfig", "sentry:relay_pii_config", six.text_type, None),
     ("trustedRelays", "sentry:trusted-relays", list, org_serializers.TRUSTED_RELAYS_DEFAULT),
     ("allowJoinRequests", "sentry:join_requests", bool, org_serializers.JOIN_REQUESTS_DEFAULT),
 )
diff --git a/src/sentry/datascrubbing.py b/src/sentry/datascrubbing.py
index 31fa99fe84..dcdf6e9ded 100644
--- a/src/sentry/datascrubbing.py
+++ b/src/sentry/datascrubbing.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import copy
 import sentry_relay
 import six
 
@@ -41,3 +42,58 @@ def scrub_data(project_config, event):
         event = sentry_relay.pii_strip_event(config, event)
 
     return event
+
+
+def merge_pii_configs(prefixes_and_configs):
+    """
+    Merge two PII configs into one, prefixing all custom rules with a prefix in the name.
+
+    This is used to apply organization and project configs at once,
+    and still get unique references to rule names.
+    """
+    merged_config = {}
+
+    for prefix, partial_config in prefixes_and_configs:
+        if not partial_config:
+            continue
+
+        rules = partial_config.get("rules") or {}
+        for rule_name, rule in six.iteritems(rules):
+            prefixed_rule_name = "{}{}".format(prefix, rule_name)
+            merged_config.setdefault("rules", {})[
+                prefixed_rule_name
+            ] = _prefix_rule_references_in_rule(rules, rule, prefix)
+
+        for selector, applications in six.iteritems(partial_config.get("applications") or {}):
+            merged_applications = merged_config.setdefault("applications", {}).setdefault(
+                selector, []
+            )
+
+            for application in applications:
+                if application in rules:
+                    prefixed_rule_name = "{}{}".format(prefix, application)
+                    merged_applications.append(prefixed_rule_name)
+                else:
+                    merged_applications.append(application)
+
+    return merged_config
+
+
+def _prefix_rule_references_in_rule(custom_rules, rule_def, prefix):
+    if not isinstance(rule_def, dict):
+        return rule_def
+
+    if rule_def.get("type") == "multiple" and rule_def.get("rules"):
+        rule_def = copy.deepcopy(rule_def)
+        rule_def["rules"] = list(
+            "{}{}".format(prefix, x) if x in custom_rules else x for x in rule_def["rules"]
+        )
+    elif (
+        rule_def.get("type") == "multiple"
+        and rule_def.get("rule")
+        and rule_def["rule"] in custom_rules
+    ):
+        rule_def = copy.deepcopy(rule_def)
+        rule_def["rule"] = "{}{}".format(prefix, rule_def["rule"])
+
+    return rule_def
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 1ba950f695..6625392112 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -14,10 +14,12 @@ from sentry.grouping.api import get_grouping_config_dict_for_project
 from sentry.interfaces.security import DEFAULT_DISALLOWED_SOURCES
 from sentry.message_filters import get_all_filters
 from sentry.models.organizationoption import OrganizationOption
+from sentry.utils.safe import safe_execute
 from sentry.utils.data_filters import FilterTypes, FilterStatKeys, get_filter_key
 from sentry.utils.http import get_origins
 from sentry.utils.sdk import configure_scope
 from sentry.relay.utils import to_camel_case_name
+from sentry.datascrubbing import merge_pii_configs
 
 
 def get_project_key_config(project_key):
@@ -256,12 +258,28 @@ class ProjectConfig(_ConfigBase):
 
 
 def _get_pii_config(project):
-    value = project.get_option("sentry:relay_pii_config")
-    if value is not None:
-        try:
-            return utils.json.loads(value)
-        except (TypeError, ValueError):
-            return None
+    def _decode(value):
+        if value is not None:
+            return safe_execute(utils.json.loads, value)
+
+    # Order of merging is important here. We want to apply organization rules
+    # before project rules. For example:
+    #
+    # * Organization rule: remove substrings "mypassword"
+    # * Project rule: remove substrings "my"
+    #
+    # If we were to apply project rules before organization rules, "password"
+    # would leak. We effectively disabled an organization rule using a project rule.
+    #
+    # Of course organization rules can also break project rules the same way,
+    # but we communicate in the UI that organization options take precedence
+    # here.
+    return merge_pii_configs(
+        [
+            ("organization:", _decode(project.organization.get_option("sentry:relay_pii_config"))),
+            ("project:", _decode(project.get_option("sentry:relay_pii_config"))),
+        ]
+    )
 
 
 def _get_datascrubbing_settings(project, org_options):
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index af4e9dee2b..5ff3cad389 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -1,5 +1,7 @@
+import React from 'react';
+
 import {extractMultilineFields} from 'app/utils';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import slugify from 'app/utils/slugify';
 import {
   STORE_CRASH_REPORTS_VALUES,
@@ -185,6 +187,33 @@ const formGroups = [
           ),
         },
       },
+      {
+        name: 'relayPiiConfig',
+        type: 'string',
+        label: t('Advanced datascrubber configuration'),
+        placeholder: t('Paste a JSON configuration here.'),
+        multiline: true,
+        autosize: true,
+        maxRows: 20,
+        help: tct(
+          'Advanced JSON-based configuration for datascrubbing. Applied in addition to the settings above. This list of rules can be extended on a per-project level, but never overridden. [learn_more:Learn more]',
+          {
+            learn_more: <a href="https://getsentry.github.io/relay/pii-config/" />,
+          }
+        ),
+        visible: ({features}) => features.has('datascrubbers-v2'),
+        validate: ({id, form}) => {
+          if (form[id] === '') {
+            return [];
+          }
+          try {
+            JSON.parse(form[id]);
+          } catch (e) {
+            return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
+          }
+          return [];
+        },
+      },
       {
         name: 'scrapeJavaScript',
         type: 'boolean',
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 48475d4806..46bc2c0335 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -201,6 +201,7 @@ class OrganizationUpdateTest(APITestCase):
             "safeFields": [u"email"],
             "storeCrashReports": 10,
             "scrubIPAddresses": True,
+            "relayPiiConfig": '{"applications": {"$string": []}}',
             "scrapeJavaScript": False,
             "defaultRole": "owner",
             "require2FA": True,
@@ -231,6 +232,7 @@ class OrganizationUpdateTest(APITestCase):
         assert options.get("sentry:require_scrub_ip_address")
         assert options.get("sentry:sensitive_fields") == ["password"]
         assert options.get("sentry:safe_fields") == ["email"]
+        assert options.get("sentry:relay_pii_config") == '{"applications": {"$string": []}}'
         assert options.get("sentry:store_crash_reports") == 10
         assert options.get("sentry:scrape_javascript") is False
         assert options.get("sentry:join_requests") is False
diff --git a/tests/sentry/relay/snapshots/test_config/test_get_project_config.pysnap b/tests/sentry/relay/snapshots/test_config/test_get_project_config.pysnap
new file mode 100644
index 0000000000..af3cfcafe1
--- /dev/null
+++ b/tests/sentry/relay/snapshots/test_config/test_get_project_config.pysnap
@@ -0,0 +1,104 @@
+---
+created: '2020-03-01T13:24:46.984214Z'
+creator: sentry
+source: tests/sentry/relay/test_config.py
+---
+allowedDomains:
+- '*'
+datascrubbingSettings:
+  excludeFields: []
+  scrubData: true
+  scrubDefaults: true
+  scrubIpAddresses: false
+  sensitiveFields: []
+eventRetention: null
+filterSettings:
+  browserExtensions:
+    isEnabled: false
+  csp:
+    disallowedSources:
+    - about
+    - ms-browser-extension
+    - chrome://*
+    - chrome-extension://*
+    - chromeinvokeimmediate://*
+    - chromenull://*
+    - safari-extension://*
+    - mxaddon-pkg://*
+    - jar://*
+    - webviewprogressproxy://*
+    - ms-browser-extension://*
+    - tmtbff://*
+    - mbinit://*
+    - symres://*
+    - resource://*
+    - moz-extension://*
+    - '*.metrext.com'
+    - static.image2play.com
+    - '*.tlscdn.com'
+    - 73a5b0806e464be8bd4e694c744624f0.com
+    - 020dfefc4ac745dab7594f2f771c1ded.com
+    - '*.superfish.com'
+    - addons.mozilla.org
+    - v.zilionfast.in
+    - widgets.amung.us
+    - '*.superfish.com'
+    - xls.searchfun.in
+    - istatic.datafastguru.info
+    - v.zilionfast.in
+    - localhost
+    - resultshub-a.akamaihd.net
+    - pulseadnetwork.com
+    - gateway.zscalertwo.net
+    - www.passpack.com
+    - middlerush-a.akamaihd.net
+    - www.websmartcenter.com
+    - a.linkluster.com
+    - saveyoutime.ru
+    - cdncache-a.akamaihd.net
+    - x.rafomedia.com
+    - savingsslider-a.akamaihd.net
+    - injections.adguard.com
+    - icontent.us
+    - amiok.org
+    - connectionstrenth.com
+    - siteheart.net
+    - netanalitics.space
+    - printapplink.com
+    - godlinkapp.com
+    - devappstor.com
+    - hoholikik.club
+    - smartlink.cool
+    - promfflinkdev.com
+  legacyBrowsers:
+    isEnabled: false
+  localhost:
+    isEnabled: false
+  webCrawlers:
+    isEnabled: true
+groupingConfig:
+  enhancements: eJybzDhxY3J-bm5-npWRgaGlroGxrpHxBABcTQcY
+  id: newstyle:2019-10-29
+piiConfig:
+  applications:
+    $string:
+    - organization:remove_ips_and_macs
+    - project:remove_ips_and_macs
+  rules:
+    organization:remove_ips_and_macs:
+      hide_rule: false
+      redaction:
+        method: remove
+      rules:
+      - '@ip'
+      - '@mac'
+      type: multiple
+    project:remove_ips_and_macs:
+      hide_rule: false
+      redaction:
+        method: remove
+      rules:
+      - '@ip'
+      - '@mac'
+      type: multiple
+trustedRelays: []
diff --git a/tests/sentry/relay/test_config.py b/tests/sentry/relay/test_config.py
new file mode 100644
index 0000000000..bc552edeff
--- /dev/null
+++ b/tests/sentry/relay/test_config.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.relay.config import get_project_config
+
+PII_CONFIG = """
+{
+  "rules": {
+    "remove_ips_and_macs": {
+      "type": "multiple",
+      "rules": [
+        "@ip",
+        "@mac"
+      ],
+      "hide_rule": false,
+      "redaction": {
+        "method": "remove"
+      }
+    }
+  },
+  "applications": {
+    "$string": ["remove_ips_and_macs"]
+  }
+}
+"""
+
+
+@pytest.mark.django_db
+def test_get_project_config(default_project, insta_snapshot):
+    # We could use the default_project fixture here, but we would like to avoid 1) hitting the db 2) creating a mock
+    default_project.update_option("sentry:relay_pii_config", PII_CONFIG)
+    default_project.organization.update_option("sentry:relay_pii_config", PII_CONFIG)
+    cfg = get_project_config(default_project)
+
+    insta_snapshot(cfg.config)
diff --git a/tests/sentry/tasks/test_store.py b/tests/sentry/tasks/test_store.py
index 4bd8637251..6e11c4a7a8 100644
--- a/tests/sentry/tasks/test_store.py
+++ b/tests/sentry/tasks/test_store.py
@@ -231,9 +231,26 @@ def test_hash_discarded_raised(default_project, mock_refund, mock_incr, register
         )
 
 
+@pytest.fixture(params=["org", "project"])
+def options_model(request, default_organization, default_project):
+    if request.param == "org":
+        return default_organization
+    elif request.param == "project":
+        return default_project
+    else:
+        raise ValueError(request.param)
+
+
 @pytest.mark.django_db
+@pytest.mark.parametrize("setting_method", ["datascrubbers", "piiconfig"])
 def test_scrubbing_after_processing(
-    default_project, default_organization, mock_save_event, register_plugin, mock_default_cache
+    default_project,
+    default_organization,
+    mock_save_event,
+    register_plugin,
+    mock_default_cache,
+    setting_method,
+    options_model,
 ):
     @register_plugin
     class TestPlugin(Plugin2):
@@ -256,8 +273,15 @@ def test_scrubbing_after_processing(
         def is_enabled(self, project=None):
             return True
 
-    default_project.update_option("sentry:sensitive_fields", ["a"])
-    default_project.update_option("sentry:scrub_data", True)
+    if setting_method == "datascrubbers":
+        options_model.update_option("sentry:sensitive_fields", ["a"])
+        options_model.update_option("sentry:scrub_data", True)
+    elif setting_method == "piiconfig":
+        options_model.update_option(
+            "sentry:relay_pii_config", '{"applications": {"extra.aaa": ["@anything:replace"]}}'
+        )
+    else:
+        raise ValueError(setting_method)
 
     data = {
         "project": default_project.id,
@@ -274,7 +298,10 @@ def test_scrubbing_after_processing(
 
     (_, (key, event, duration), _), = mock_default_cache.set.mock_calls
     assert key == "e:1"
-    assert event["extra"] == {u"aaa": u"[Filtered]", u"aaa2": u"event preprocessor"}
+    assert event["extra"] == {
+        u"aaa": u"[Filtered]" if setting_method == "datascrubbers" else u"[redacted]",
+        u"aaa2": u"event preprocessor",
+    }
     assert duration == 3600
 
     mock_save_event.delay.assert_called_once_with(
diff --git a/tests/sentry/test_datascrubbing.py b/tests/sentry/test_datascrubbing.py
index 40dadd211c..e71685beb0 100644
--- a/tests/sentry/test_datascrubbing.py
+++ b/tests/sentry/test_datascrubbing.py
@@ -1,12 +1,24 @@
 # coding: utf-8
 from __future__ import absolute_import
 
+import copy
 import pytest
 
 from sentry.datascrubbing import scrub_data
 from sentry.relay.config import ProjectConfig
 
 
+def merge_pii_configs(prefixes_and_configs):
+    from sentry.datascrubbing import merge_pii_configs as f
+
+    prefixes_and_configs_bak = copy.deepcopy(prefixes_and_configs)
+    rv = f(prefixes_and_configs)
+
+    # No accidental mutation
+    assert prefixes_and_configs == prefixes_and_configs_bak
+    return rv
+
+
 @pytest.mark.parametrize("field", [u"aaa", u"aää", u"a a", u"a\na", u"a'a"])
 def test_scrub_data(field):
     project_config = ProjectConfig(
@@ -68,3 +80,63 @@ def test_scrub_data(field):
             u"extra": {field: u"[Filtered]"},
         }
     )
+
+
+def test_merge_pii_configs_simple():
+    assert merge_pii_configs([("p:", {}), ("o:", {})]) == {}
+
+    assert merge_pii_configs(
+        [("p:", {"applications": {"$string": ["@ip:remove"]}}), ("o:", {})]
+    ) == {"applications": {"$string": ["@ip:remove"]}}
+
+
+def test_merge_pii_configs_rule_references():
+    my_rules = {
+        "remove_ips_alias": {
+            "type": "alias",
+            "rule": "@ip",
+            "hide_rule": False,
+            "redaction": {"method": "remove"},
+        },
+        "remove_ips_and_macs": {
+            "type": "multiple",
+            "rules": ["remove_ips_alias", "@mac"],
+            "hide_rule": False,
+            "redaction": {"method": "remove"},
+        },
+    }
+
+    assert merge_pii_configs(
+        [
+            ("o:", {"rules": my_rules, "applications": {"$string": ["remove_ips_and_macs"]}}),
+            ("p:", {"rules": my_rules, "applications": {"$string": ["remove_ips_alias"]}}),
+        ]
+    ) == {
+        "applications": {"$string": ["o:remove_ips_and_macs", "p:remove_ips_alias"]},
+        "rules": {
+            "o:remove_ips_and_macs": {
+                "hide_rule": False,
+                "redaction": {"method": "remove"},
+                "rules": ["o:remove_ips_alias", "@mac"],
+                "type": "multiple",
+            },
+            "o:remove_ips_alias": {
+                "hide_rule": False,
+                "redaction": {"method": "remove"},
+                "rule": "@ip",
+                "type": "alias",
+            },
+            "p:remove_ips_and_macs": {
+                "hide_rule": False,
+                "redaction": {"method": "remove"},
+                "rules": ["p:remove_ips_alias", "@mac"],
+                "type": "multiple",
+            },
+            "p:remove_ips_alias": {
+                "hide_rule": False,
+                "redaction": {"method": "remove"},
+                "rule": "@ip",
+                "type": "alias",
+            },
+        },
+    }
