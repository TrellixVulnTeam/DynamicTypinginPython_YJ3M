commit 8984d1cd09b361c7e0ad18cdf288d176b0d72cc9
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 28 14:39:31 2018 -0800

    feat(ui): Refesh UI for Project CSP Reports (#7317)

diff --git a/src/sentry/static/sentry/app/data/forms/cspReports.jsx b/src/sentry/static/sentry/app/data/forms/cspReports.jsx
new file mode 100644
index 0000000000..af558d245d
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/cspReports.jsx
@@ -0,0 +1,43 @@
+// Export route to make these forms searchable by label/help
+import {t} from '../../locale';
+
+export const route = '/settings/organization/:orgId/project/:projectId/csp/';
+
+const formGroups = [
+  {
+    // Form "section"/"panel"
+    title: 'Settings',
+    fields: [
+      {
+        name: 'sentry:csp_ignored_sources_defaults',
+        type: 'boolean',
+
+        label: t('Use default ignored sources'),
+        help: t(
+          'Our default list will attempt to ignore common issues and reduce noise.'
+        ),
+        getData: data => ({
+          options: data,
+        }),
+      },
+
+      // XXX: Org details endpoints accept these multiline inputs as a list, where as it looks like project details accepts it as a string with newlines
+      {
+        name: 'sentry:csp_ignored_sources',
+        type: 'string',
+        multiline: true,
+        placeholder: 'e.g. file://*, *.example.com, example.com, etc...',
+        label: t('Additional ignored sources'),
+        help: t(
+          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
+        ),
+        extraHelp: t('Separate multiple entries with a newline.'),
+        getData: data => ({
+          options: data,
+        }),
+      },
+    ],
+  },
+];
+
+export default formGroups;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 52257bc21a..79fabbb2a9 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -62,7 +62,6 @@ import ProjectAlertSettings from './views/projectAlertSettings';
 import ProjectEnvironments from './views/projectEnvironments';
 import ProjectTags from './views/projectTags';
 import ProjectChooser from './views/projectChooser';
-import ProjectCspSettings from './views/projectCspSettings';
 import ProjectDashboard from './views/projectDashboard';
 import ProjectDataForwarding from './views/projectDataForwarding';
 import ProjectDebugSymbols from './views/projectDebugSymbols';
@@ -338,7 +337,14 @@ const projectSettingsRoutes = (
       name="User Feedback"
       component={errorHandler(ProjectUserReportSettings)}
     />
-    <Route path="csp/" name="CSP Reports" component={errorHandler(ProjectCspSettings)} />
+    <Route
+      key="csp/"
+      path="csp/"
+      name="CSP Reports"
+      componentPromise={() =>
+        import(/*webpackChunkName: "ProjectCspReports"*/ './views/settings/project/projectCspReports')}
+      component={errorHandler(LazyLoad)}
+    />
     <Route path="plugins/" name="Integrations" component={errorHandler(ProjectPlugins)} />
     <Route
       path="plugins/:pluginId/"
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
deleted file mode 100644
index dc7f1cfa84..0000000000
--- a/src/sentry/static/sentry/app/views/projectCspSettings.jsx
+++ /dev/null
@@ -1,340 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {FormState, TextareaField, BooleanField} from '../components/forms';
-import {t, tct} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
-import ExternalLink from '../components/externalLink';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingIndicator from '../components/loadingIndicator';
-import SettingsPageHeader from './settings/components/settingsPageHeader';
-import TextBlock from './settings/components/text/textBlock';
-
-const ProjectCspSettingsForm = createReactClass({
-  displayName: 'ProjectCspSettingsForm',
-
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    initialData: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    let formData = {};
-    // We only want to work with a certain set of project options here
-    for (let key of Object.keys(this.props.initialData)) {
-      if (key.lastIndexOf('sentry:csp_') === 0) {
-        formData[key] = this.props.initialData[key];
-      }
-    }
-    return {
-      formData,
-      errors: {},
-    };
-  },
-
-  onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
-    this.setState({
-      formData,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    if (this.state.state === FormState.SAVING) {
-      return;
-    }
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {orgId, projectId} = this.props;
-        this.api.request(`/projects/${orgId}/${projectId}/`, {
-          method: 'PUT',
-          data: {options: this.state.formData},
-          success: data => {
-            this.setState({
-              state: FormState.READY,
-              errors: {},
-            });
-          },
-          error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON,
-            });
-          },
-          complete: () => {
-            IndicatorStore.remove(loadingIndicator);
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    let errors = this.state.errors;
-    return (
-      <form onSubmit={this.onSubmit} className="form-stacked">
-        {this.state.state === FormState.ERROR && (
-          <div className="alert alert-error alert-block">
-            {t(
-              'Unable to save your changes. Please ensure all fields are valid and try again.'
-            )}
-          </div>
-        )}
-        <fieldset>
-          <BooleanField
-            key="ignored-sources-defaults"
-            name="ignored-sources-defaults"
-            label={t('Use Default Ignored Sources')}
-            help={t(
-              'Our default list will attempt to ignore common issues and reduce noise.'
-            )}
-            value={this.state.formData['sentry:csp_ignored_sources_defaults']}
-            error={errors['sentry:csp_ignored_sources_defaults']}
-            onChange={this.onFieldChange.bind(
-              this,
-              'sentry:csp_ignored_sources_defaults'
-            )}
-          />
-          <TextareaField
-            key="ignored-sources"
-            name="ignored-sources"
-            rows={5}
-            label={t('Additional Ignored Sources')}
-            help={t('Separate multiple entries with a newline.')}
-            value={this.state.formData['sentry:csp_ignored_sources']}
-            placeholder="e.g. file://*, *.example.com, example.com, etc"
-            error={errors['sentry:csp_ignored_sources']}
-            onChange={this.onFieldChange.bind(this, 'sentry:csp_ignored_sources')}
-          />
-        </fieldset>
-        <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary" disabled={isSaving}>
-            {t('Save Changes')}
-          </button>
-        </fieldset>
-      </form>
-    );
-  },
-});
-
-const ProjectCspSettings = createReactClass({
-  displayName: 'ProjectCspSettings',
-
-  propTypes: {
-    setProjectNavSection: PropTypes.func,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      expected: 2,
-      error: false,
-      keyList: [],
-      projectOptions: {},
-    };
-  },
-
-  componentWillMount() {
-    this.props.setProjectNavSection('settings');
-    this.fetchData();
-  },
-
-  // TODO(dcramer): abstract this into a shared helper as its common for route handlers
-  componentWillReceiveProps(nextProps) {
-    let location = this.props.location;
-    let nextLocation = nextProps.location;
-    if (
-      location.pathname != nextLocation.pathname ||
-      location.search != nextLocation.search
-    ) {
-      this.remountComponent();
-    }
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
-      success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0,
-          keyList: data,
-        });
-      },
-      error: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          error: true,
-          loading: expected > 0,
-        });
-      },
-    });
-
-    this.api.request(`/projects/${orgId}/${projectId}/`, {
-      success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0,
-          projectOptions: data.options,
-        });
-      },
-      error: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          error: true,
-          loading: expected > 0,
-        });
-      },
-    });
-  },
-
-  getInstructions() {
-    let endpoint = this.state.keyList.length
-      ? this.state.keyList[0].dsn.csp
-      : 'https://sentry.example.com/api/csp-report/';
-
-    return (
-      'def middleware(request, response):\n' +
-      "    response['Content-Security-Policy'] = \\\n" +
-      '        "default-src *; " \\\n' +
-      "        \"script-src 'self' 'unsafe-eval' 'unsafe-inline' cdn.example.com cdn.ravenjs.com; \" \\\n" +
-      "        \"style-src 'self' 'unsafe-inline' cdn.example.com; \" \\\n" +
-      '        "img-src * data:; " \\\n' +
-      '        "report-uri ' +
-      endpoint +
-      '"\n' +
-      '    return response\n'
-    );
-  },
-
-  getReportOnlyInstructions() {
-    let endpoint = this.state.keyList.length
-      ? this.state.keyList[0].dsn.csp
-      : 'https://sentry.example.com/api/csp-report/';
-
-    return (
-      'def middleware(request, response):\n' +
-      "    response['Content-Security-Policy-Report-Only'] = \\\n" +
-      '        "default-src \'self\'; " \\\n' +
-      '        "report-uri ' +
-      endpoint +
-      '"\n' +
-      '    return response\n'
-    );
-  },
-
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
-
-  render() {
-    if (this.state.loading) return this.renderLoading();
-
-    let {orgId, projectId} = this.props.params;
-
-    return (
-      <div>
-        <SettingsPageHeader title={t('CSP Reports')} />
-
-        <div className="alert alert-block alert-info">
-          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!`)}
-        </div>
-
-        <TextBlock>
-          {tct(
-            `[link:Content Security Policy]
-          (CSP) is a security standard which helps prevent cross-site scripting (XSS),
-          clickjacking and other code injection attacks resulting from execution of
-          malicious content in the trusted web page context. It's enforced by browser
-          vendors, and Sentry supports capturing CSP violations using the standard
-          reporting hooks.`,
-            {
-              link: (
-                <ExternalLink href="https://en.wikipedia.org/wiki/Content_Security_Policy" />
-              ),
-            }
-          )}
-        </TextBlock>
-
-        <div className="box">
-          <div className="box-header">
-            <h3>{t('Settings')}</h3>
-          </div>
-          <div className="box-content with-padding">
-            <ProjectCspSettingsForm
-              orgId={orgId}
-              projectId={projectId}
-              initialData={this.state.projectOptions}
-            />
-          </div>
-        </div>
-
-        <div className="box">
-          <div className="box-header">
-            <h3>{t('Integration')}</h3>
-          </div>
-
-          <div className="box-content with-padding">
-            <p>
-              To configure <acronym title="Content Security Policy">CSP</acronym> reports
-              in Sentry, you'll need to send a header from your server describing your
-              policy, as well specifying the authenticated Sentry endpoint.
-            </p>
-
-            <p>
-              For example, in Python you might achieve this via a simple web middleware:
-            </p>
-
-            <pre>{this.getInstructions()}</pre>
-
-            <p>
-              Alternatively you can setup CSP reports to simply send reports rather than
-              actually enforcing the policy:
-            </p>
-
-            <pre>{this.getReportOnlyInstructions()}</pre>
-
-            <p>
-              We recommend setting this up to only run on a percentage of requests, as
-              otherwise you may find that you've quickly exhausted your quota. For more
-              information, take a look at{' '}
-              <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">
-                the article on html5rocks.com
-              </a>
-              .
-            </p>
-          </div>
-        </div>
-      </div>
-    );
-  },
-});
-
-export default ProjectCspSettings;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectCspReports.jsx b/src/sentry/static/sentry/app/views/settings/project/projectCspReports.jsx
new file mode 100644
index 0000000000..eb197dbbce
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectCspReports.jsx
@@ -0,0 +1,162 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t, tct} from '../../../locale';
+import AsyncView from '../../asyncView';
+import ExternalLink from '../../../components/externalLink';
+import Form from '../components/forms/form';
+import JsonForm from '../components/forms/jsonForm';
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import TextBlock from '../components/text/textBlock';
+import formGroups from '../../../data/forms/cspReports';
+
+const CodeBlock = styled.pre`
+  word-break: break-all;
+  white-space: pre-wrap;
+`;
+const TextBlockNoMargin = styled(TextBlock)`
+  margin-bottom: 0;
+`;
+
+class ProjectCspReports extends AsyncView {
+  static propTypes = {
+    setProjectNavSection: PropTypes.func,
+  };
+
+  componentWillMount() {
+    super.componentWillMount();
+    this.props.setProjectNavSection('settings');
+  }
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [
+      ['keyList', `/projects/${orgId}/${projectId}/keys/`],
+      ['project', `/projects/${orgId}/${projectId}/`],
+    ];
+  }
+
+  getInstructions() {
+    let endpoint = this.state.keyList.length
+      ? this.state.keyList[0].dsn.csp
+      : 'https://sentry.example.com/api/csp-report/';
+
+    return (
+      'def middleware(request, response):\n' +
+      "    response['Content-Security-Policy'] = \\\n" +
+      '        "default-src *; " \\\n' +
+      "        \"script-src 'self' 'unsafe-eval' 'unsafe-inline' cdn.example.com cdn.ravenjs.com; \" \\\n" +
+      "        \"style-src 'self' 'unsafe-inline' cdn.example.com; \" \\\n" +
+      '        "img-src * data:; " \\\n' +
+      '        "report-uri ' +
+      endpoint +
+      '"\n' +
+      '    return response\n'
+    );
+  }
+
+  getReportOnlyInstructions() {
+    let endpoint = this.state.keyList.length
+      ? this.state.keyList[0].dsn.csp
+      : 'https://sentry.example.com/api/csp-report/';
+
+    return (
+      'def middleware(request, response):\n' +
+      "    response['Content-Security-Policy-Report-Only'] = \\\n" +
+      '        "default-src \'self\'; " \\\n' +
+      '        "report-uri ' +
+      endpoint +
+      '"\n' +
+      '    return response\n'
+    );
+  }
+
+  renderBody() {
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('CSP Reports')} />
+
+        <div className="alert alert-block alert-info">
+          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
+          adopter!`)}
+        </div>
+
+        <TextBlock>
+          {tct(
+            `[link:Content Security Policy]
+          (CSP) is a security standard which helps prevent cross-site scripting (XSS),
+          clickjacking and other code injection attacks resulting from execution of
+          malicious content in the trusted web page context. It's enforced by browser
+          vendors, and Sentry supports capturing CSP violations using the standard
+          reporting hooks.`,
+            {
+              link: (
+                <ExternalLink href="https://en.wikipedia.org/wiki/Content_Security_Policy" />
+              ),
+            }
+          )}
+        </TextBlock>
+
+        <Form
+          saveOnBlur
+          apiMethod="PUT"
+          initialData={this.state.project.options}
+          apiEndpoint={`/projects/${orgId}/${projectId}/`}
+        >
+          <JsonForm forms={formGroups} />
+        </Form>
+
+        <Panel>
+          <PanelHeader>{t('Integration')}</PanelHeader>
+
+          <PanelBody disablePadding={false}>
+            <TextBlock>
+              {tct(
+                `To configure [csp:CSP] reports
+              in Sentry, you'll need to send a header from your server describing your
+              policy, as well specifying the authenticated Sentry endpoint.`,
+                {
+                  csp: <acronym title="Content Security Policy" />,
+                }
+              )}
+            </TextBlock>
+
+            <TextBlockNoMargin>
+              {t(
+                'For example, in Python you might achieve this via a simple web middleware'
+              )}
+            </TextBlockNoMargin>
+            <CodeBlock>{this.getInstructions()}</CodeBlock>
+
+            <TextBlockNoMargin>
+              {t(`Alternatively you can setup CSP reports to simply send reports rather than
+              actually enforcing the policy`)}
+            </TextBlockNoMargin>
+            <CodeBlock>{this.getReportOnlyInstructions()}</CodeBlock>
+
+            <TextBlockNoMargin css={{marginTop: 30}}>
+              {tct(
+                `We recommend setting this up to only run on a percentage of requests, as
+              otherwise you may find that you've quickly exhausted your quota. For more
+              information, take a look at [link:the article on html5rocks.com].`,
+                {
+                  link: (
+                    <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/" />
+                  ),
+                }
+              )}
+            </TextBlockNoMargin>
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default ProjectCspReports;
diff --git a/tests/js/spec/views/projectCspReports.spec.jsx b/tests/js/spec/views/projectCspReports.spec.jsx
new file mode 100644
index 0000000000..ec0270aa43
--- /dev/null
+++ b/tests/js/spec/views/projectCspReports.spec.jsx
@@ -0,0 +1,104 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ProjectCspReports from 'app/views/settings/project/projectCspReports';
+
+describe('ProjectCspReports', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let url = `/projects/${org.slug}/${project.slug}/`;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/`,
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url,
+      method: 'GET',
+      body: {
+        options: {},
+      },
+    });
+  });
+
+  it('can enable default ignored sources', function() {
+    let wrapper = mount(
+      <ProjectCspReports
+        organization={org}
+        project={project}
+        setProjectNavSection={() => {}}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    let mock = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+    });
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Click Regenerate Token
+    wrapper.find('Switch').simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          options: {
+            'sentry:csp_ignored_sources_defaults': true,
+          },
+        },
+      })
+    );
+  });
+
+  it('can set additional ignored sources', function() {
+    let wrapper = mount(
+      <ProjectCspReports
+        organization={org}
+        project={project}
+        setProjectNavSection={() => {}}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    let mock = MockApiClient.addMockResponse({
+      url,
+      method: 'PUT',
+    });
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Click Regenerate Token
+    wrapper
+      .find('textarea')
+      .simulate('change', {
+        target: {
+          value: `test
+test2`,
+        },
+      })
+      .simulate('blur');
+
+    expect(mock).toHaveBeenCalledWith(
+      url,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          // XXX: Org details endpoints accept these multiline inputs as a list, where as it looks like project details accepts it as a string with newlines
+          options: {
+            'sentry:csp_ignored_sources': `test
+test2`,
+          },
+        },
+      })
+    );
+  });
+});
