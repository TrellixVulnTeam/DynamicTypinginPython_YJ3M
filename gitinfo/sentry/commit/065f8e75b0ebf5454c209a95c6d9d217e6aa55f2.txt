commit 065f8e75b0ebf5454c209a95c6d9d217e6aa55f2
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 12 15:44:37 2017 -0700

    fix(cloudflare): Handle existing option when populating enums

diff --git a/src/sentry/integrations/cloudflare/webhook.py b/src/sentry/integrations/cloudflare/webhook.py
index fcf453e839..dcb2f9b58b 100644
--- a/src/sentry/integrations/cloudflare/webhook.py
+++ b/src/sentry/integrations/cloudflare/webhook.py
@@ -102,18 +102,23 @@ class CloudflareWebhookEndpoint(Endpoint):
             key=lambda x: x.slug
         )
 
+        enum_choices = [six.text_type(o.id) for o in organizations]
+
         data['install']['schema']['properties']['organization'] = {
             'type': 'string',
             'title': 'Sentry Organization',
             'order': 1,
-            'enum': [six.text_type(o.id) for o in organizations],
+            'enum': enum_choices,
             'enumNames': {
                 six.text_type(o.id): o.slug for o in organizations
             },
             'required': True,
         }
-        if organizations:
-            data['install']['options']['organization'] = data['install']['schema']['properties']['organization']['enum'][0]
+        if not enum_choices:
+            return self.on_organization_clear(request, data, is_test)
+        else:
+            if data['install']['options'].get('organization') not in enum_choices:
+                data['install']['options']['organization'] = enum_choices[0]
             return self.on_organization_change(request, data, is_test)
 
         return Response({
@@ -121,6 +126,18 @@ class CloudflareWebhookEndpoint(Endpoint):
             'proceed': True
         })
 
+    @requires_auth
+    def on_organization_clear(self, request, data, is_test):
+        data['install']['schema']['properties'].pop('project', None)
+        data['install']['schema']['properties'].pop('dsn', None)
+        data['install']['options'].pop('organization', None)
+        data['install']['options'].pop('project', None)
+        data['install']['options'].pop('dsn', None)
+        return Response({
+            'install': data['install'],
+            'proceed': True
+        })
+
     @requires_auth
     def on_organization_change(self, request, data, is_test):
         org = self.organization_from_json(request, data)
@@ -130,18 +147,23 @@ class CloudflareWebhookEndpoint(Endpoint):
             team__in=Team.objects.get_for_user(org, request.user, scope='project:write'),
         ), key=lambda x: x.slug)
 
+        enum_choices = [six.text_type(o.id) for o in projects]
+
         data['install']['schema']['properties']['project'] = {
             'type': 'string',
             'title': 'Sentry Project',
             'order': 2,
-            'enum': [six.text_type(o.id) for o in projects],
+            'enum': enum_choices,
             'enumNames': {
                 six.text_type(o.id): o.slug for o in projects
             },
             'required': True,
         }
-        if projects:
-            data['install']['options']['project'] = data['install']['schema']['properties']['project']['enum'][0]
+        if not enum_choices:
+            return self.on_project_clear(request, data, is_test)
+        else:
+            if data['install']['options'].get('project') not in enum_choices:
+                data['install']['options']['project'] = enum_choices[0]
             return self.on_project_change(request, data, is_test)
 
         return Response({
@@ -149,6 +171,16 @@ class CloudflareWebhookEndpoint(Endpoint):
             'proceed': True
         })
 
+    @requires_auth
+    def on_project_clear(self, request, data, is_test):
+        data['install']['schema']['properties'].pop('dsn', None)
+        data['install']['options'].pop('project', None)
+        data['install']['options'].pop('dsn', None)
+        return Response({
+            'install': data['install'],
+            'proceed': True
+        })
+
     @requires_auth
     def on_project_change(self, request, data, is_test):
         project = self.project_from_json(request, data)
@@ -157,23 +189,35 @@ class CloudflareWebhookEndpoint(Endpoint):
             project=project,
         ), key=lambda x: x.public_key)
 
+        enum_choices = [o.get_dsn(public=True) for o in keys]
+
         data['install']['schema']['properties']['dsn'] = {
             'type': 'string',
             'title': 'DSN',
             'description': 'Your automatically configured DSN for communicating with Sentry.',
             'placeholder': 'https://public_key@sentry.io/1',
             'order': 3,
-            'enum': [o.get_dsn(public=True) for o in keys],
+            'enum': enum_choices,
             'required': True,
         }
-        if keys:
-            data['install']['options']['dsn'] = data['install']['schema']['properties']['dsn']['enum'][0]
+        if not enum_choices:
+            return self.on_dsn_clear(request, data, is_test)
+        elif data['install']['options'].get('dsn') not in enum_choices:
+            data['install']['options']['dsn'] = enum_choices[0]
 
         return Response({
             'install': data['install'],
             'proceed': True
         })
 
+    @requires_auth
+    def on_dsn_clear(self, request, data, is_test):
+        data['install']['options'].pop('dsn', None)
+        return Response({
+            'install': data['install'],
+            'proceed': True
+        })
+
     def post(self, request):
         signature = request.META.get('HTTP_X_SIGNATURE_HMAC_SHA256_HEX')
         variant = request.META.get('HTTP_X_SIGNATURE_KEY_VARIANT')
diff --git a/tests/sentry/integrations/cloudflare/test_webhook.py b/tests/sentry/integrations/cloudflare/test_webhook.py
index b790484409..f797e5f31f 100644
--- a/tests/sentry/integrations/cloudflare/test_webhook.py
+++ b/tests/sentry/integrations/cloudflare/test_webhook.py
@@ -201,6 +201,25 @@ class OptionChangeAccountWebhookTest(BaseWebhookTest):
         resp = self.post_webhook(webhook_data)
 
         assert resp.status_code == 200, resp.content
+        assert resp.data['proceed']
+        assert resp.data['install']['schema']['properties']['organization']['enum'] == [
+            six.text_type(self.org.id)]
+        assert resp.data['install']['options']['organization'] == six.text_type(self.org.id)
+        assert resp.data['install']['schema']['properties']['project']['enum'] == [
+            six.text_type(self.project.id)]
+        assert resp.data['install']['options']['project'] == six.text_type(self.project.id)
+        assert resp.data['install']['schema']['properties']['dsn']['enum'] == [
+            self.key.get_dsn(public=True)]
+        assert resp.data['install']['options']['dsn'] == six.text_type(
+            self.key.get_dsn(public=True))
+
+    def test_with_invalid_organization_selected(self):
+        webhook_data = json.loads(self.load_fixture(
+            'cloudflare/option-change-account-webhook.json'))
+        webhook_data['install']['options']['organization'] = -1
+
+        resp = self.post_webhook(webhook_data)
+
         assert resp.status_code == 200, resp.content
         assert resp.data['proceed']
         assert resp.data['install']['schema']['properties']['organization']['enum'] == [
@@ -213,3 +232,26 @@ class OptionChangeAccountWebhookTest(BaseWebhookTest):
             self.key.get_dsn(public=True)]
         assert resp.data['install']['options']['dsn'] == six.text_type(
             self.key.get_dsn(public=True))
+
+    def test_with_existing_project_selected_and_no_keys(self):
+        project2 = self.create_project(name='b', team=self.team)
+        # kill the automatically generated keys
+        ProjectKey.objects.filter(project=project2).delete()
+
+        webhook_data = json.loads(self.load_fixture(
+            'cloudflare/option-change-account-webhook.json'))
+        webhook_data['install']['options']['organization'] = six.text_type(self.org.id)
+        webhook_data['install']['options']['project'] = six.text_type(project2.id)
+
+        resp = self.post_webhook(webhook_data)
+
+        assert resp.status_code == 200, resp.content
+        assert resp.data['proceed']
+        assert resp.data['install']['schema']['properties']['organization']['enum'] == [
+            six.text_type(self.org.id)]
+        assert resp.data['install']['options']['organization'] == six.text_type(self.org.id)
+        assert resp.data['install']['schema']['properties']['project']['enum'] == [
+            six.text_type(self.project.id), six.text_type(project2.id)]
+        assert resp.data['install']['options']['project'] == six.text_type(project2.id)
+        assert resp.data['install']['schema']['properties']['dsn']['enum'] == []
+        assert 'dsn' not in resp.data['install']['options']
