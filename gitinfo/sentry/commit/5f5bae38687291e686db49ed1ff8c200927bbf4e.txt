commit 5f5bae38687291e686db49ed1ff8c200927bbf4e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 1 18:00:43 2015 -0800

    Implement sort by dropdown

diff --git a/src/sentry/static/sentry/app-react/components/dropdownLink.jsx b/src/sentry/static/sentry/app-react/components/dropdownLink.jsx
new file mode 100644
index 0000000000..a33c95e504
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/dropdownLink.jsx
@@ -0,0 +1,124 @@
+/*** @jsx React.DOM */
+var React = require('react');
+var joinClasses = require('react-bootstrap/utils/joinClasses');
+var classSet = require('react-bootstrap/utils/classSet');
+var cloneWithProps = require('react-bootstrap/utils/cloneWithProps');
+
+var createChainedFunction = require('react-bootstrap/utils/createChainedFunction');
+var BootstrapMixin = require('react-bootstrap/BootstrapMixin');
+var DropdownStateMixin = require('react-bootstrap/DropdownStateMixin');
+var Button = require('react-bootstrap/Button');
+var ButtonGroup = require('react-bootstrap/ButtonGroup');
+var DropdownMenu = require('react-bootstrap/DropdownMenu');
+var ValidComponentChildren = require('react-bootstrap/utils/ValidComponentChildren');
+
+
+var DropdownButton = React.createClass({
+  mixins: [BootstrapMixin, DropdownStateMixin],
+
+  propTypes: {
+    pullRight: React.PropTypes.bool,
+    dropup:    React.PropTypes.bool,
+    title:     React.PropTypes.node,
+    href:      React.PropTypes.string,
+    onClick:   React.PropTypes.func,
+    onSelect:  React.PropTypes.func,
+    navItem:   React.PropTypes.bool
+  },
+
+  render: function () {
+    var className = 'dropdown-toggle btn';
+
+    var renderMethod = this.props.navItem ?
+      'renderNavItem' : 'renderButtonGroup';
+
+    return this[renderMethod]([
+      <a
+        {...this.props}
+        ref="dropdownButton"
+        className={joinClasses(this.props.className, className)}
+        onClick={this.handleDropdownClick}
+        key={0}
+        navDropdown={this.props.navItem}
+        navItem={null}
+        title={null}
+        pullRight={null}
+        dropup={null}>
+        {this.props.title}{' '}
+        <span aria-hidden="true" className="icon-arrow-down" />
+      </a>,
+      <DropdownMenu
+        ref="menu"
+        aria-labelledby={this.props.id}
+        pullRight={this.props.pullRight}
+        key={1}>
+        {ValidComponentChildren.map(this.props.children, this.renderMenuItem)}
+      </DropdownMenu>
+    ]);
+  },
+
+  renderButtonGroup: function (children) {
+    var groupClasses = {
+        'open': this.state.open,
+        'dropup': this.props.dropup
+      };
+
+    return (
+      <ButtonGroup
+        bsSize={this.props.bsSize}
+        className={classSet(groupClasses)}>
+        {children}
+      </ButtonGroup>
+    );
+  },
+
+  renderNavItem: function (children) {
+    var classes = {
+        'dropdown': true,
+        'open': this.state.open,
+        'dropup': this.props.dropup
+      };
+
+    return (
+      <li className={classSet(classes)}>
+        {children}
+      </li>
+    );
+  },
+
+  renderMenuItem: function (child, index) {
+    // Only handle the option selection if an onSelect prop has been set on the
+    // component or it's child, this allows a user not to pass an onSelect
+    // handler and have the browser preform the default action.
+    var handleOptionSelect = this.props.onSelect || child.props.onSelect ?
+      this.handleOptionSelect : null;
+
+    return cloneWithProps(
+      child,
+      {
+        // Capture onSelect events
+        onSelect: createChainedFunction(child.props.onSelect, handleOptionSelect),
+
+        // Force special props to be transferred
+        key: child.key ? child.key : index,
+        ref: child.ref
+      }
+    );
+  },
+
+  handleDropdownClick: function (e) {
+    e.preventDefault();
+
+    this.setDropdownState(!this.state.open);
+  },
+
+  handleOptionSelect: function (key) {
+    if (this.props.onSelect) {
+      this.props.onSelect(key);
+    }
+
+    this.setDropdownState(false);
+  }
+});
+
+module.exports = DropdownButton;
diff --git a/src/sentry/static/sentry/app-react/components/menuItem.jsx b/src/sentry/static/sentry/app-react/components/menuItem.jsx
new file mode 100644
index 0000000000..ed5f2d4ee0
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/menuItem.jsx
@@ -0,0 +1,61 @@
+/*** @jsx React.DOM */
+var React = require('react');
+var joinClasses = require('react-bootstrap/utils/joinClasses');
+var classSet = require('react-bootstrap/utils/classSet');
+
+var MenuItem = React.createClass({
+  propTypes: {
+    header:    React.PropTypes.bool,
+    divider:   React.PropTypes.bool,
+    href:      React.PropTypes.string,
+    title:     React.PropTypes.string,
+    onSelect:  React.PropTypes.func,
+    eventKey:  React.PropTypes.any,
+    isActive:  React.PropTypes.bool
+  },
+
+  getDefaultProps: function () {
+    return {
+      href: '#'
+    };
+  },
+
+  handleClick: function (e) {
+    if (this.props.onSelect) {
+      e.preventDefault();
+      this.props.onSelect(this.props.eventKey);
+    }
+  },
+
+  renderAnchor: function () {
+    return (
+      <a onClick={this.handleClick} href={this.props.href} title={this.props.title} tabIndex="-1">
+        {this.props.children}
+      </a>
+    );
+  },
+
+  render: function () {
+    var classes = {
+      'dropdown-header': this.props.header,
+      'divider': this.props.divider,
+      'active': this.props.isActive
+    };
+
+    var children = null;
+    if (this.props.header) {
+      children = this.props.children;
+    } else if (!this.props.divider) {
+      children = this.renderAnchor();
+    }
+
+    return (
+      <li {...this.props} role="presentation" title={null} href={null}
+        className={joinClasses(this.props.className, classSet(classes))}>
+        {children}
+      </li>
+    );
+  }
+});
+
+module.exports = MenuItem;
diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index b14f55719e..dbbb5548b4 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -4,7 +4,10 @@ var $ = require("jquery");
 
 var utils = require("../utils");
 
+var joinClasses = require('react-bootstrap/utils/joinClasses');
 var Count = require("./count");
+var DropdownLink = require("./dropdownLink");
+var MenuItem = require("./menuItem");
 var Modal = require("react-bootstrap/Modal");
 var OverlayMixin = require("react-bootstrap/OverlayMixin");
 var TimeSince = require("./timeSince");
@@ -245,6 +248,25 @@ var Actions = React.createClass({
     onMerge: React.PropTypes.func.isRequired
   },
   render: function() {
+    var params = utils.getQueryParams();
+    var sortBy = params.sort || 'date';
+    var sortLabel;
+
+    switch (sortBy) {
+      case 'new':
+        sortLabel = 'First Seen';
+        break;
+      case 'priority':
+        sortLabel = 'Priority';
+        break;
+      case 'freq':
+        sortLabel = 'Frequency';
+        break;
+      default:
+        sortLabel = 'Last Seen';
+        sortBy = 'date';
+    }
+
     return (
       <div className="stream-actions">
         <div className="stream-actions-left stream-actions-cell">
@@ -324,18 +346,15 @@ var Actions = React.createClass({
               <span className="icon icon-pause"></span>
             </a>
           </div>
-          <div className="btn-group">
-            <a href="#" className="btn dropdown-toggle btn-sm" data-toggle="dropdown">
-              <span className="hidden-sm hidden-xs">Sort by:</span> sortLabel
-              <span aria-hidden="true" className="icon-arrow-down"></span>
-            </a>
-            <ul className="dropdown-menu">
-              <li className="active"><a href="?sort=priority">Priority</a></li>
-              <li><a href="?sort=date">Last Seen</a></li>
-              <li><a href="?sort=new">First Seen</a></li>
-              <li><a href="?sort=freq">Frequency</a></li>
-            </ul>
-          </div>
+          <DropdownLink
+            key="sort"
+            className="btn-sm dropdown-toggle"
+            title={<span><span className="hidden-sm hidden-xs">Sort by:</span> {sortLabel}</span>}>
+            <MenuItem href="?sort=priority" isActive={sortBy === 'priority'}>Priority</MenuItem>
+            <MenuItem href="?sort=date" isActive={sortBy === 'date'}>Last Seen</MenuItem>
+            <MenuItem href="?sort=new" isActive={sortBy === 'new'}>First Seen</MenuItem>
+            <MenuItem href="?sort=freq" isActive={sortBy === 'freq'}>Occurances</MenuItem>
+          </DropdownLink>
           <div className="btn-group">
             <a href="#" className="btn dropdown-toggle btn-sm" onclick="" data-toggle="dropdown">
               All time
