commit 9aecc29714a90f50e5f5da31cfc9439eddc32589
Author: William Mak <william@wmak.io>
Date:   Wed Apr 22 18:02:20 2020 -0400

    fix(discover) - TopEvents wasn't loading when a field was Null
    
    - When a field was Null it wasn't being included in the filter, this was
      incorrect because it wasn't restricting results enough
    - As well as properly translating issue as a field when constructing the
      filter

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 90ce596391..a1de283ea6 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -837,8 +837,10 @@ def top_events_timeseries(
         # project is handled by filter_keys already
         if field in ["project", "project.id"]:
             continue
+        if field == "issue":
+            field = FIELD_ALIASES["issue"]["column_alias"]
         values = list({event.get(field) for event in top_events["data"] if field in event})
-        if values and all(value is not None for value in values):
+        if values:
             # timestamp needs special handling, creating a big OR instead
             if field == "timestamp":
                 snuba_filter.conditions.append([["timestamp", "=", value] for value in values])
@@ -847,6 +849,12 @@ def top_events_timeseries(
                 snuba_filter.conditions.append(
                     [[resolve_column(user_field), "IN", values] for user_field in user_fields]
                 )
+            elif None in values:
+                non_none_values = [value for value in values if value is not None]
+                condition = [[["isNull", [resolve_column(field)]], "=", 1]]
+                if non_none_values:
+                    condition.append([resolve_column(field), "IN", non_none_values])
+                snuba_filter.conditions.append(condition)
             else:
                 snuba_filter.conditions.append([resolve_column(field), "IN", values])
 
@@ -867,7 +875,9 @@ def top_events_timeseries(
     result = transform_results(result, translated_columns, snuba_filter, selected_columns)
 
     translated_columns["project_id"] = "project"
-    translated_groupby = [translated_columns.get(field, field) for field in snuba_filter.groupby]
+    translated_groupby = [
+        translated_columns.get(groupby, groupby) for groupby in snuba_filter.groupby
+    ]
 
     if "user" in selected_columns:
         # Determine user related fields to prune based on what wasn't selected, since transform_results does the same
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index db3babbdad..46763ab40d 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -661,7 +661,7 @@ class OrganizationEventsStatsTopNEvents(APITestCase, SnubaTestCase):
                 "data": {
                     "message": "not so bad",
                     "timestamp": iso_format(self.day_ago + timedelta(minutes=2)),
-                    "fingerprint": ["group5"],
+                    "fingerprint": ["group6"],
                     "user": {"email": "bar@example.com"},
                 },
                 "project": self.project,
@@ -1098,3 +1098,67 @@ class OrganizationEventsStatsTopNEvents(APITestCase, SnubaTestCase):
             [{"count": 3}],
             [{"count": 0}],
         ]
+
+    def test_top_events_none_filter(self):
+        """ When a field is None in one of the top events, make sure we filter by it
+
+            In this case event[4] is a transaction and has no issue
+        """
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={
+                    "start": iso_format(self.day_ago),
+                    "end": iso_format(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "interval": "1h",
+                    "yAxis": "count()",
+                    "orderby": ["-count()"],
+                    "field": ["count()", "issue"],
+                    "topEvents": 5,
+                },
+                format="json",
+            )
+
+        data = response.data
+
+        assert response.status_code == 200, response.content
+        assert len(data) == 5
+
+        for index, event in enumerate(self.events[:5]):
+            if event.group is None:
+                issue = "unknown"
+            else:
+                issue = event.group.qualified_short_id
+
+            results = data[issue]
+            assert [{"count": self.event_data[index]["count"]}] in [
+                attrs for time, attrs in results["data"]
+            ]
+
+    def test_top_events_one_field_with_none(self):
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={
+                    "start": iso_format(self.day_ago),
+                    "end": iso_format(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "interval": "1h",
+                    "yAxis": "count()",
+                    "orderby": ["-count()"],
+                    "query": "event.type:transaction",
+                    "field": ["count()", "issue"],
+                    "topEvents": 5,
+                },
+                format="json",
+            )
+
+        data = response.data
+
+        assert response.status_code == 200, response.content
+        assert len(data) == 1
+
+        results = data["unknown"]
+        assert [attrs for time, attrs in results["data"]] == [
+            [{"count": 3}],
+            [{"count": 0}],
+        ]
