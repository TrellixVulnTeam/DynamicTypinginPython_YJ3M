commit 6034228d518b8a84493e8b27836072acb6d57710
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 4 16:37:42 2013 -0700

    More fixes for access group filtering

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 1389936043..3e1ee23cc3 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -823,6 +823,7 @@ class ProjectManager(BaseManager, ChartMixin):
         if team and user.is_superuser:
             projects = set(base_qs)
         else:
+            projects_qs = base_qs
             if not settings.PUBLIC:
                 # If the user is authenticated, include their memberships
                 teams = Team.objects.get_for_user(
@@ -832,7 +833,7 @@ class ProjectManager(BaseManager, ChartMixin):
                 if team and team not in teams:
                     projects_qs = self.none()
                 elif not team:
-                    projects_qs = base_qs.filter(team__in=teams)
+                    projects_qs = projects_qs.filter(team__in=teams)
 
             projects = set(projects_qs)
 
@@ -1191,14 +1192,14 @@ class TagKeyManager(BaseManager):
 
 
 class TeamManager(BaseManager):
-    def get_for_user(self, user, access=None, access_groups=True):
+    def get_for_user(self, user, access=None, access_groups=True, with_projects=False):
         """
         Returns a SortedDict of all teams a user has some level of access to.
 
         Each <Team> returned has a ``membership`` attribute which holds the
         <TeamMember> instance.
         """
-        from sentry.models import TeamMember, AccessGroup
+        from sentry.models import TeamMember, AccessGroup, Project
 
         results = SortedDict()
 
@@ -1233,4 +1234,13 @@ class TeamManager(BaseManager):
             for team in sorted(all_teams, key=lambda x: x.name):
                 results[team.slug] = team
 
+        if with_projects:
+            # these kinds of queries make people sad :(
+            new_results = SortedDict()
+            for team in results.itervalues():
+                project_list = Project.objects.get_for_user(
+                    user, team=team)[:20]
+                new_results[team.slug] = (team, project_list)
+            results = new_results
+
         return results
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 749c99ff24..751e1faf91 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -64,10 +64,10 @@
                                 </a>
                                 <nav class="dropdown-menu">
                                     <!-- <input type="text" value="search by project name"> <a href="#" class="btn">New</a> -->
-                                    {% for t in TEAM_LIST|reorder_teams:team %}
+                                    {% for t, p_list in TEAM_LIST|reorder_teams:team %}
                                         <h6><a href="{% url 'sentry' t.slug %}">{{ t.name }}</a></h6>
                                         <ul class="project-list">
-                                            {% for p in t.project_set.all %}
+                                            {% for p in p_list %}
                                                 <li{% if p.id == project.id %} class="active"{% endif %}>
                                                     <a href="{% url 'sentry-stream' t.slug p.slug %}" title="{{ p.name }}">{{ p.name }}</a>
                                                 </li>
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 3136699af2..1844eb5503 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -424,7 +424,10 @@ def recent_alerts(context, project, asvar):
 
 @register.filter
 def reorder_teams(team_list, team):
-    yield team
-    for t in team_list:
-        if t != team:
-            yield t
+    pending = []
+    for t, p_list in team_list:
+        if t == team:
+            pending.insert(0, (t, p_list))
+        else:
+            pending.append((t, p_list))
+    return pending
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index 87e2964aba..386f2e373a 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -11,7 +11,7 @@ from django.core.urlresolvers import reverse
 from django.utils.datastructures import SortedDict
 from django.utils.translation import ugettext as _
 
-from sentry.models import Team, Project
+from sentry.models import Team
 from sentry.permissions import can_create_teams
 from sentry.plugins import plugins
 from sentry.plugins.base import Response
@@ -29,7 +29,7 @@ def find_static_files(ignore_patterns=()):
 
 @login_required
 def dashboard(request, template='dashboard.html'):
-    team_list = Team.objects.get_for_user(request.user)
+    team_list = Team.objects.get_for_user(request.user, with_projects=True)
     if not team_list:
         if can_create_teams(request.user):
             return HttpResponseRedirect(reverse('sentry-new-team'))
@@ -39,15 +39,8 @@ def dashboard(request, template='dashboard.html'):
             'message': _('You are not a member of any teams in Sentry and you do not have access to create a new team.'),
         }, request)
 
-    # these kinds of queries make people sad :(
-    results = []
-    for team in team_list.itervalues():
-        project_list = Project.objects.get_for_user(
-            request.user, team=team)[:20]
-        results.append((team, project_list))
-
     return render_to_response('sentry/select_team.html', {
-        'team_list': results,
+        'team_list': team_list.values(),
     }, request)
 
 
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 0521dbb6af..9e6d86e864 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -114,15 +114,21 @@ def get_default_context(request, existing_context=None, team=None):
             'request': request,
         })
         if team:
+            # TODO: remove this extra query
             context.update({
-                'can_admin_team': Team.objects.get_for_user(request.user, MEMBER_OWNER),
+                'can_admin_team': [team in Team.objects.get_for_user(request.user, MEMBER_OWNER)],
             })
 
-        if not existing_context or 'PROJECT_LIST' not in existing_context:
-            project_list = Project.objects.get_for_user(request.user, team=team)
-            context['PROJECT_LIST'] = project_list
         if not existing_context or 'TEAM_LIST' not in existing_context:
-            context['TEAM_LIST'] = Team.objects.get_for_user(request.user).values()
+            context['TEAM_LIST'] = Team.objects.get_for_user(
+                request.user, with_projects=True).values()
+
+        if not existing_context or 'PROJECT_LIST' not in existing_context:
+            # HACK:
+            for t, p_list in context['TEAM_LIST']:
+                if t == team:
+                    context['PROJECT_LIST'] = p_list
+                    break
 
     return context
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 6ba0d68189..2bfff17f03 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -311,12 +311,12 @@ class ProjectManagerTest(TestCase):
         self.user.is_superuser = False
         get_for_user.return_value = {self.project2.team.id: self.project2.team}
         project_list = Project.objects.get_for_user(self.user)
-        get_for_user.assert_called_once_with(self.user, None)
+        get_for_user.assert_called_once_with(self.user, None, access_groups=False)
         assert project_list == [self.project2]
 
         get_for_user.reset_mock()
         project_list = Project.objects.get_for_user(self.user, MEMBER_USER)
-        get_for_user.assert_called_once_with(self.user, MEMBER_USER)
+        get_for_user.assert_called_once_with(self.user, MEMBER_USER, access_groups=False)
         assert project_list == [self.project2]
 
 
