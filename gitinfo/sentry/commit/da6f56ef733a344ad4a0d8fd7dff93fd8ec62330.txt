commit da6f56ef733a344ad4a0d8fd7dff93fd8ec62330
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Nov 13 16:23:41 2015 -0500

    Can now select member via 'Enter' key (fixes #2309)

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index c604fcaa8d..bbeef7264f 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -107,6 +107,15 @@ const AssigneeSelector = React.createClass({
     });
   },
 
+  onInputKeyDown(evt) {
+    if (evt.key === 'Enter' && this.state.filter) {
+      let members = AssigneeSelector.filterMembers(this.state.memberList, this.state.filter);
+      if (members.length > 0) {
+        this.assignTo(members[0]);
+      }
+    }
+  },
+
   onDropdownOpen() {
     ReactDOM.findDOMNode(this.refs.filter).focus();
   },
@@ -183,6 +192,7 @@ const AssigneeSelector = React.createClass({
               <MenuItem noAnchor={true} key="filter">
                 <input type="text" className="form-control input-sm"
                        placeholder="Filter people" ref="filter"
+                       onKeyDown={this.onInputKeyDown}
                        onKeyUp={this.onFilterChange} />
               </MenuItem>
               {assignedTo ?
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 482c441257..121bf68133 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -1,16 +1,34 @@
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
 import AssigneeSelector from 'app/components/assigneeSelector';
 
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+import GroupStore from 'app/stores/groupStore';
+import MemberListStore from 'app/stores/memberListStore';
+
+import stubReactComponents from '../../helpers/stubReactComponent';
+
 describe('AssigneeSelector', function() {
-  describe('statics', function () {
-    const USER_1 = {
-      name: 'Jane Doe',
-      email: 'janedoe@example.com'
-    };
-    const USER_2 = {
-      name: 'John Smith',
-      email: 'johnsmith@example.com'
-    };
+  const USER_1 = {
+    name: 'Jane Doe',
+    email: 'janedoe@example.com'
+  };
+  const USER_2 = {
+    name: 'John Smith',
+    email: 'johnsmith@example.com'
+  };
+
+  beforeEach(function () {
+    this.sandbox = sinon.sandbox.create();
+    stubReactComponents(this.sandbox, [LoadingIndicator]);
+  });
 
+  afterEach(function () {
+    this.sandbox.restore();
+  });
+
+  describe('statics', function () {
     const filterMembers = AssigneeSelector.filterMembers;
 
     describe('filterMembers()', function () {
@@ -34,5 +52,51 @@ describe('AssigneeSelector', function() {
       });
     });
   });
+
+  describe('onInputKeyDown()', function () {
+    beforeEach(function () {
+      this.sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
+      this.sandbox.stub(GroupStore, 'get').returns({
+        id: 1337,
+        assignedTo: null
+      });
+
+      var assigneeSelector = this.assigneeSelector =
+        TestUtils.renderIntoDocument(<AssigneeSelector id={1337}/>);
+
+      this.sandbox.stub(assigneeSelector, 'assignTo');
+    });
+
+    it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function () {
+      var assigneeSelector = this.assigneeSelector;
+      assigneeSelector.state.filter = 'Jane';
+
+      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
+        {key: 'Enter', keyCode: 13, which: 13}
+      );
+      expect(assigneeSelector.assignTo.calledOnce).to.be.ok;
+      expect(assigneeSelector.assignTo.lastCall.args[0]).to.have.property('name', 'Jane Doe');
+    });
+
+    it('should do nothing when the Enter key is pressed, but filter is the empty string', function () {
+      var assigneeSelector = this.assigneeSelector;
+      assigneeSelector.state.filter = '';
+
+      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
+        {key: 'Enter', keyCode: 13, which: 13}
+      );
+      expect(assigneeSelector.assignTo.notCalled).to.be.ok;
+    });
+
+    it('should do nothing if a non-Enter key is pressed', function () {
+      var assigneeSelector = this.assigneeSelector;
+      assigneeSelector.state.filter = 'Jane';
+
+      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
+        {key: 'h', keyCode: 72, which: 72}
+      );
+      expect(assigneeSelector.assignTo.notCalled).to.be.ok;
+    });
+  });
 });
 
