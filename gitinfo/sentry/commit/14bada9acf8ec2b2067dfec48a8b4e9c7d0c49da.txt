commit 14bada9acf8ec2b2067dfec48a8b4e9c7d0c49da
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 4 21:12:03 2012 -0800

    Add coverage for User and Template legacy data

diff --git a/sentry/manager.py b/sentry/manager.py
index 58acec518e..80feb10ca3 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -201,6 +201,7 @@ class GroupManager(models.Manager, ChartMixin):
 
         if 'template' in sentry:
             template = sentry['template']
+            print get_template_info(template)
             result['sentry.interfaces.Template'] = Template(
                 **get_template_info(template)
             ).serialize()
diff --git a/sentry/utils/template_info.py b/sentry/utils/template_info.py
index d21fc2d5e5..a2ea236637 100644
--- a/sentry/utils/template_info.py
+++ b/sentry/utils/template_info.py
@@ -1,21 +1,39 @@
+"""
+sentry.utils.template_info
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+def linebreak_iter(template_source):
+    yield 0
+    p = template_source.find('\n')
+    while p >= 0:
+        yield p + 1
+        p = template_source.find('\n', p + 1)
+    yield len(template_source) + 1
+
+
 def get_template_info(template_info):
-    template_source, start, end, name = template_info
+    source, start, end, name = template_info
 
     lineno = None
     upto = 0
     source_lines = []
-    for num, next in enumerate(linebreak_iter(template_source)):
+    for num, next in enumerate(linebreak_iter(source)):
         if start >= upto and end <= next:
             lineno = num
-        source_lines.append((num, template_source[upto:next]))
+        source_lines.append((num, source[upto:next]))
         upto = next
 
     if not source_lines or lineno is None:
         return {}
 
-    pre_context = source_lines[max(lineno-3, 0):lineno]
-    post_context = source_lines[lineno+1:lineno+4]
-    context_line = source_lines[lineno]
+    pre_context = source_lines[max(lineno - 3, 0):lineno]
+    post_context = source_lines[(lineno + 1):(lineno + 4)]
+    context_line = source_lines[lineno][1]
 
     return {
         'filename': name,
@@ -24,11 +42,3 @@ def get_template_info(template_info):
         'lineno': lineno,
         'post_context': post_context,
     }
-
-def linebreak_iter(template_source):
-    yield 0
-    p = template_source.find('\n')
-    while p >= 0:
-        yield p+1
-        p = template_source.find('\n', p+1)
-    yield len(template_source) + 1
\ No newline at end of file
diff --git a/tests/tests.py b/tests/tests.py
index a0ad73f639..21966331dc 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -175,3 +175,41 @@ class SentryManagerTest(TestCase):
         frame = stack['frames'][0]
         self.assertEquals(frame['filename'], 'foo.py')
         self.assertEquals(frame['function'], 'hello_world')
+
+        result = Group.objects.convert_legacy_kwargs({'data': {
+            '__sentry__': {
+                'user': {
+                    'is_authenticated': True,
+                    'id': 1,
+                },
+            }
+        }})
+        self.assertTrue('sentry.interfaces.User' in result)
+        user = result['sentry.interfaces.User']
+        self.assertTrue('is_authenticated' in user)
+        self.assertEquals(user['is_authenticated'], True)
+        self.assertTrue('id' in user)
+        self.assertEquals(user['id'], 1)
+
+        result = Group.objects.convert_legacy_kwargs({'data': {
+            '__sentry__': {
+                'template': [
+                    "foo\nbar\nbaz\nbiz\nbin",
+                    5,
+                    3,
+                    'foo.html',
+                ],
+            }
+        }})
+        self.assertTrue('sentry.interfaces.Template' in result)
+        user = result['sentry.interfaces.Template']
+        # 'post_context': [(2, 'bar\n'), (3, 'baz\n'), (4, 'biz\n')], 'pre_context': [(0, '')], 'lineno': 1, 'context_line': (1, 'foo\n'), 'filename': 'foo.html'}
+
+        self.assertTrue('pre_context' in user)
+        self.assertEquals(user['pre_context'], [(0, ''), (1, 'foo\n')])
+        self.assertTrue('post_context' in user)
+        self.assertEquals(user['post_context'], [(3, 'baz\n'), (4, 'biz\n'), (5, 'bin')])
+        self.assertTrue('lineno' in user)
+        self.assertEquals(user['lineno'], 2)
+        self.assertTrue('context_line' in user)
+        self.assertEquals(user['context_line'], 'bar\n')
