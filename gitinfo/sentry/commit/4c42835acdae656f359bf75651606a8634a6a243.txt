commit 4c42835acdae656f359bf75651606a8634a6a243
Author: Dora <dora.l.chan@gmail.com>
Date:   Wed Dec 18 13:48:59 2019 -0800

    feat(discv2): event tag summary (#16120)
    
    * refactoring summary
    
    * refactoring
    
    * danny helped me fix the index
    
    * fixing percent color
    
    * removed white and added empty
    
    * refactor
    
    * dannys suggestions

diff --git a/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx b/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
index 3a945286ae..1ec7438fb6 100644
--- a/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
+++ b/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
@@ -5,6 +5,7 @@ import styled from 'react-emotion';
 import isPropValid from '@emotion/is-prop-valid';
 
 import {t} from 'app/locale';
+import space from 'app/styles/space';
 import {percent} from 'app/utils';
 import Tooltip from 'app/components/tooltip';
 
@@ -38,23 +39,59 @@ export default class TagDistributionMeter extends React.Component {
     renderError: () => null,
   };
 
+  renderTitle() {
+    const {segments, totalValues, title, isLoading, hasError} = this.props;
+
+    if (!Array.isArray(segments) || segments.length <= 0) {
+      return (
+        <Title>
+          <TitleType>{title}</TitleType>
+        </Title>
+      );
+    }
+
+    const largestSegment = segments[0];
+    const pct = percent(largestSegment.count, totalValues);
+    const pctLabel = Math.floor(pct);
+
+    return (
+      <Title>
+        <TitleType>{title}</TitleType>
+        <TitleDescription>
+          <Label>{largestSegment.name}</Label>
+          {isLoading || hasError ? null : <Percent>{pctLabel}%</Percent>}
+        </TitleDescription>
+      </Title>
+    );
+  }
+
   renderSegments() {
-    const {segments, totalValues, onTagClick, title} = this.props;
+    const {
+      segments,
+      onTagClick,
+      title,
+      isLoading,
+      hasError,
+      totalValues,
+      renderLoading,
+      renderError,
+      renderEmpty,
+    } = this.props;
 
-    const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);
-    const hasOther = totalVisible < totalValues;
+    if (isLoading) {
+      return renderLoading();
+    }
 
-    if (hasOther) {
-      segments.push({
-        isOther: true,
-        name: t('Other'),
-        value: 'other',
-        count: totalValues - totalVisible,
-      });
+    if (hasError) {
+      return <SegmentBar>{renderError()}</SegmentBar>;
+    }
+
+    if (totalValues === 0) {
+      return <SegmentBar>{renderEmpty()}</SegmentBar>;
     }
 
     return (
-      <Segments>
+      <SegmentBar>
         {segments.map((value, index) => {
           const pct = percent(value.count, totalValues);
           const pctLabel = Math.floor(pct);
@@ -78,134 +115,97 @@ export default class TagDistributionMeter extends React.Component {
                       onTagClick(title, value);
                     }
                   }}
-                >
-                  <Description first={index === 0}>
-                    <Percentage>{pctLabel}%</Percentage>
-                    <Label>{value.name}</Label>
-                  </Description>
-                </Segment>
+                />
               </Tooltip>
             </div>
           );
         })}
-      </Segments>
+      </SegmentBar>
     );
   }
 
-  renderTag() {
-    const {
-      isLoading,
-      hasError,
-      totalValues,
-      renderLoading,
-      renderError,
-      renderEmpty,
-    } = this.props;
-
-    if (isLoading) {
-      return renderLoading();
-    }
+  render() {
+    const {segments, totalValues} = this.props;
 
-    if (hasError) {
-      return renderError();
-    }
+    const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);
+    const hasOther = totalVisible < totalValues;
 
-    if (!totalValues) {
-      return renderEmpty();
+    if (hasOther) {
+      segments.push({
+        isOther: true,
+        name: t('Other'),
+        value: 'other',
+        count: totalValues - totalVisible,
+      });
     }
 
-    return this.renderSegments();
-  }
-
-  render() {
-    const {title} = this.props;
-
     return (
-      <DistributionGraph>
-        <Title>{title}</Title>
-        {this.renderTag()}
-      </DistributionGraph>
+      <TagSummary>
+        {this.renderTitle()}
+        {this.renderSegments()}
+      </TagSummary>
     );
   }
 }
 
-const DistributionGraph = styled('div')`
-  position: relative;
-  font-size: 13px;
-  margin-bottom: 10px;
-`;
+const COLORS = [
+  '#3A3387',
+  '#5F40A3',
+  '#8C4FBD',
+  '#B961D3',
+  '#DE76E4',
+  '#EF91E8',
+  '#F7B2EC',
+  '#FCD8F4',
+  '#FEEBF9',
+];
 
-const Title = styled('div')`
-  position: relative;
-  font-size: 13px;
-  margin: 10px 0 8px;
-  font-weight: bold;
-  z-index: 5;
-  line-height: 1;
+const TagSummary = styled('div')`
+  margin-bottom: ${space(1)};
 `;
 
-const colors = [
-  '#7c7484',
-  '#867f90',
-  '#918a9b',
-  '#9b96a7',
-  '#a6a1b3',
-  '#b0acbe',
-  '#bbb7ca',
-  '#c5c3d6',
-  '#d0cee1',
-  '#dad9ed',
-];
-
-const Segments = styled('div')`
+const SegmentBar = styled('div')`
   display: flex;
-  border-radius: ${p => p.theme.borderRadius};
   overflow: hidden;
+  border-radius: 2px;
 `;
 
-const Segment = styled(Link, {shouldForwardProp: isPropValid})`
-  display: block;
-  width: 100%;
-  height: 16px;
-  color: inherit;
-
-  &:hover,
-  &.focus-visible {
-    background: ${p => p.theme.purple};
-    outline: none;
-  }
-
-  background-color: ${p => (p.isOther ? colors[colors.length - 1] : colors[p.index])};
+const Title = styled('div', {shouldForwardProp: isPropValid})`
+  display: flex;
+  font-size: ${p => p.theme.fontSizeSmall};
+  justify-content: space-between;
 `;
 
-const Description = styled('span', {shouldForwardProp: isPropValid})`
-  position: absolute;
-  text-align: right;
-  top: -1px;
-  right: 0;
-  line-height: 1;
-  z-index: 1;
-  width: 100%;
-  display: ${p => (p.first ? 'block' : 'none')};
-
-  &:hover {
-    display: block;
-    z-index: 2;
-  }
+const TitleType = styled('div')`
+  color: ${p => p.theme.gray4};
+  font-weight: bold;
 `;
 
-const Percentage = styled('span')`
-  display: inline-block;
-  margin-right: 6px;
+const TitleDescription = styled('div')`
+  display: flex;
   color: ${p => p.theme.gray2};
-  vertical-align: middle;
+  text-align: right;
 `;
 
-const Label = styled('span')`
-  display: inline-block;
+const Label = styled('div')`
+  display: inline;
   white-space: nowrap;
   overflow: hidden;
   text-overflow: ellipsis;
-  max-width: 45%;
-  vertical-align: middle;
+  width: 150px;
+`;
+
+const Percent = styled('div')`
+  font-weight: bold;
+  padding-left: ${space(0.5)};
+  color: ${p => p.theme.gray4};
+`;
+
+const Segment = styled(Link, {shouldForwardProp: isPropValid})`
+  display: block;
+  width: 100%;
+  height: 16px;
+  color: inherit;
+  outline: none;
+  background-color: ${p => (p.isOther ? COLORS[COLORS.length - 1] : COLORS[p.index])};
 `;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index da480c9d50..e0b6e46b20 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -155,7 +155,7 @@ class Tags extends React.Component<Props, State> {
 }
 
 const StyledHeading = styled(SectionHeading)`
-  margin: 0 0 ${space(2)} 0;
+  margin: 0 0 ${space(1.5)} 0;
 `;
 
 const TagSection = styled('div')`
