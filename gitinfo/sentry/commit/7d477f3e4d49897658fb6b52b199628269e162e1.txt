commit 7d477f3e4d49897658fb6b52b199628269e162e1
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 16 12:00:20 2015 -0800

    Initial work introducing stores into stream

diff --git a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx b/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
new file mode 100644
index 0000000000..3f23a412b1
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
@@ -0,0 +1,9 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var aggregateListActions = Reflux.createActions([
+  "setAssignedTo"
+]);
+
+module.exports = aggregateListActions;
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index e1c98cfc34..d6f9f4efbe 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -2,6 +2,7 @@
 
 var React = require("react");
 
+var aggregateListActions = require("../actions/aggregateListActions");
 var DropdownLink = require("./dropdownLink");
 var MenuItem = require("./menuItem");
 
@@ -11,8 +12,18 @@ var AssigneeSelector = React.createClass({
       id: React.PropTypes.string.isRequired
     }).isRequired,
     memberList: React.PropTypes.instanceOf(Array).isRequired,
-    onAssignTo: React.PropTypes.func.isRequired
   },
+
+  getInitialState: function() {
+    return {
+      loading: false
+    };
+  },
+
+  onAssignTo: function(member) {
+    aggregateListActions.setAssignedTo(this.props.aggregate.id, member.email);
+  },
+
   render: function() {
     var agg = this.props.aggregate;
 
@@ -25,7 +36,7 @@ var AssigneeSelector = React.createClass({
     this.props.memberList.forEach(function(item){
       memberNodes.push(
         <MenuItem key={item.id}
-                  onSelect={this.props.onAssignTo.bind(this, item)} >
+                  onSelect={this.onAssignTo.bind(this, item)} >
           <img src={item.avatarUrl} className="avatar" />
           {item.name || item.email}
         </MenuItem>
diff --git a/src/sentry/static/sentry/app/components/stream.jsx b/src/sentry/static/sentry/app/components/stream.jsx
index beefe1112d..6a70cc2228 100644
--- a/src/sentry/static/sentry/app/components/stream.jsx
+++ b/src/sentry/static/sentry/app/components/stream.jsx
@@ -1,7 +1,10 @@
 /*** @jsx React.DOM */
 var React = require("react");
+var Reflux = require("reflux");
 var $ = require("jquery");
 
+var aggregateListActions = require("../actions/aggregateListActions");
+var aggregateListStore = require("../stores/aggregateListStore");
 var alertActions = require("../actions/alertActions");
 var AssigneeSelector = require("./assigneeSelector");
 var BarChart = require("./barChart");
@@ -19,7 +22,6 @@ var Aggregate = React.createClass({
     }).isRequired,
     memberList: React.PropTypes.instanceOf(Array),
     onSelect: React.PropTypes.func.isRequired,
-    onAssignTo: React.PropTypes.func.isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
     isSelected: React.PropTypes.bool
   },
@@ -70,8 +72,7 @@ var Aggregate = React.createClass({
         <div className="event-assignee event-cell hidden-xs hidden-sm">
           <AssigneeSelector
             aggregate={data}
-            memberList={this.props.memberList}
-            onAssignTo={this.props.onAssignTo} />
+            memberList={this.props.memberList} />
         </div>
         <div className="hidden-sm hidden-xs event-graph align-right event-cell">
           <BarChart points={chartData} className="sparkline" />
@@ -136,6 +137,8 @@ StreamPoller.prototype.poll = function() {
 };
 
 var Stream = React.createClass({
+  mixins: [Reflux.connect(aggregateListStore, "aggList")],
+
   propTypes: {
     aggList: React.PropTypes.array.isRequired,
     project: React.PropTypes.shape({
@@ -145,9 +148,10 @@ var Stream = React.createClass({
     initialQuery: React.PropTypes.string,
     pageLinks: React.PropTypes.string
   },
+
   getInitialState: function() {
     return {
-      aggList: new utils.Collection(this.props.aggList, {
+      aggList: new utils.Collection([], {
         equals: function(self, other) {
           return self.id === other.id;
         },
@@ -159,9 +163,10 @@ var Stream = React.createClass({
       statsPeriod: '24h',
       query: this.props.initialQuery,
       pageLinks: this.props.pageLinks,
-      realtimeActive: true
+      realtimeActive: false
     };
   },
+
   componentDidMount: function() {
     this._poller = new StreamPoller({
       success: this.handleRealtimePoll,
@@ -170,10 +175,14 @@ var Stream = React.createClass({
     if (this.state.realtimeActive) {
       this._poller.enable();
     }
+
+    aggregateListStore.loadInitialData(this.props.aggList);
   },
+
   componentWillUnmount: function() {
     this._poller.disable();
   },
+
   componentDidUpdate: function(prevProps, prevState) {
     if (prevState.realtimeActive !== this.state.realtimeActive) {
       if (this.state.realtimeActive) {
@@ -183,6 +192,7 @@ var Stream = React.createClass({
       }
     }
   },
+
   getPollingEndpoint: function() {
     var params = utils.getQueryParams();
     params.query = this.props.initialQuery;
@@ -191,6 +201,7 @@ var Stream = React.createClass({
 
     return '/api/0/projects/' + this.props.project.id + '/groups/?' + querystring;
   },
+
   handleSelect: function(aggId, event) {
     var checked = $(event.target).is(':checked');
     var aggList = this.state.aggList;
@@ -222,6 +233,7 @@ var Stream = React.createClass({
       multiSelected: numSelected > 1
     });
   },
+
   handleSelectAll: function(event){
     var checked = $(event.target).is(':checked');
     var aggList = this.state.aggList;
@@ -238,6 +250,7 @@ var Stream = React.createClass({
       multiSelected: numSelected > 1
     });
   },
+
   actionAggregates: function(aggList, options) {
     var url = options.url || '/api/0/projects/' + this.props.project.id + '/groups/';
 
@@ -286,25 +299,6 @@ var Stream = React.createClass({
       multiSelected: false
     });
   },
-  handleAssignTo: function(agg, member) {
-    $.ajax({
-      url: '/api/0/groups/' + agg.id + '/',
-      method: 'PUT',
-      data: JSON.stringify({
-        assignedTo: member.email
-      }),
-      contentType: 'application/json',
-      success: function(data){
-        this.state.aggList.update(data);
-        this.setState({
-          aggList: this.state.aggList
-        });
-      }.bind(this),
-      error: function(){
-        alertActions.addAlert('Unable to change assignee. Please try again.', 'error');
-      }.bind(this)
-    });
-  },
   handleResolve: function(aggList, event){
     return this.actionAggregates(aggList, {
       data: {status: 'resolved'}
@@ -363,7 +357,6 @@ var Stream = React.createClass({
                    isSelected={node.isSelected}
                    memberList={this.props.memberList}
                    onSelect={this.handleSelect.bind(this, node.id)}
-                   onAssignTo={this.handleAssignTo.bind(this, node)}
                    statsPeriod={this.state.statsPeriod} />
       );
     }.bind(this));
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
new file mode 100644
index 0000000000..4880fc05c8
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -0,0 +1,52 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var alertActions = require("../actions/alertActions");
+var aggregateListActions = require('../actions/aggregateListActions');
+var utils = require("../utils");
+
+var ERR_CHANGE_ASSIGNEE = 'Unable to change assignee. Please try again.';
+
+var aggregateListStore = Reflux.createStore({
+  listenables: aggregateListActions,
+
+  init: function() {
+    // TODO(dcramer): what we want to actually do is keep this as a simple
+    // list and have stream add/remove items as they're modified within stream
+    // itself
+    this.items = new utils.Collection([], {
+      equals: function(self, other) {
+        return self.id === other.id;
+      },
+      limit: 50
+    });
+  },
+
+  // TODO(dcramer): this should actually come from an action of some sorts
+  loadInitialData: function(items) {
+    this.items.empty();
+    this.items.push(items);
+    this.trigger(this.items, 'initial');
+  },
+
+  onSetAssignedTo: function(itemId, userEmail) {
+    $.ajax({
+      url: '/api/0/groups/' + itemId + '/',
+      method: 'PUT',
+      data: JSON.stringify({
+        assignedTo: userEmail
+      }),
+      contentType: 'application/json',
+      success: function(data){
+        this.items.update(data);
+        this.trigger(this.items, 'assignedTo', itemId, userEmail);
+      }.bind(this),
+      error: function(){
+        alertActions.addAlert(ERR_CHANGE_ASSIGNEE, 'error');
+      }.bind(this)
+    });
+  }
+});
+
+module.exports = aggregateListStore;
