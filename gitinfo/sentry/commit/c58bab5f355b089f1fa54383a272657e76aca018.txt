commit c58bab5f355b089f1fa54383a272657e76aca018
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 22 21:17:06 2011 -0800

    Pep8

diff --git a/sentry/__init__.py b/sentry/__init__.py
index 28c354df1d..3f9b259260 100644
--- a/sentry/__init__.py
+++ b/sentry/__init__.py
@@ -10,4 +10,4 @@ try:
     VERSION = __import__('pkg_resources') \
         .get_distribution('django-sentry').version
 except Exception, e:
-    VERSION = 'unknown'
\ No newline at end of file
+    VERSION = 'unknown'
diff --git a/sentry/exceptions.py b/sentry/exceptions.py
index 5e9552acf6..da76ebd286 100644
--- a/sentry/exceptions.py
+++ b/sentry/exceptions.py
@@ -1,5 +1,6 @@
 class InvalidData(Exception):
     pass
 
+
 class InvalidInterface(InvalidData):
-    pass
\ No newline at end of file
+    pass
diff --git a/sentry/filters.py b/sentry/filters.py
index c900dd4bff..381633f46e 100644
--- a/sentry/filters.py
+++ b/sentry/filters.py
@@ -17,6 +17,7 @@ from django.utils.html import escape
 from sentry.conf import settings
 from sentry.models import Group, Event, FilterValue, MessageIndex
 
+
 class Widget(object):
     def __init__(self, filter, request):
         self.filter = filter
@@ -25,6 +26,7 @@ class Widget(object):
     def get_query_string(self):
         return self.filter.get_query_string()
 
+
 class TextWidget(Widget):
     def render(self, value, placeholder='', **kwargs):
         return mark_safe('<div class="filter-text"><p class="textfield"><input type="text" name="%(name)s" value="%(value)s" placeholder="%(placeholder)s"/></p><p class="submit"><input type="submit" class="search-submit"/></p></div>' % dict(
@@ -33,6 +35,7 @@ class TextWidget(Widget):
             placeholder=escape(placeholder or 'enter %s' % self.filter.label.lower()),
         ))
 
+
 class ChoiceWidget(Widget):
     allow_any = True
 
@@ -61,6 +64,7 @@ class ChoiceWidget(Widget):
         output.append('</ul>')
         return mark_safe('\n'.join(output))
 
+
 class SentryFilter(object):
     label = ''
     column = ''
@@ -113,12 +117,15 @@ class SentryFilter(object):
         widget = self.get_widget()
         return widget.render(self.get_value())
 
+
 class EventFilter(SentryFilter):
     types = [Event]
 
+
 class GroupFilter(SentryFilter):
     types = [Group]
 
+
 class StatusFilter(GroupFilter):
     label = 'Status'
     column = 'status'
@@ -130,10 +137,12 @@ class StatusFilter(GroupFilter):
             (1, 'Resolved'),
         ])
 
+
 class LoggerFilter(SentryFilter):
     label = 'Logger'
     column = 'logger'
 
+
 class ServerNameFilter(SentryFilter):
     label = 'Server Name'
     column = 'server_name'
@@ -144,6 +153,7 @@ class ServerNameFilter(SentryFilter):
         else:
             return queryset.filter(event_set__server_name=self.get_value()).distinct()
 
+
 class SiteFilter(SentryFilter):
     label = 'Site'
     column = 'site'
@@ -170,6 +180,7 @@ class SiteFilter(SentryFilter):
         else:
             return queryset.filter(event_set__site=self.get_value()).distinct()
 
+
 class LevelFilter(SentryFilter):
     label = 'Level'
     column = 'level'
@@ -180,6 +191,7 @@ class LevelFilter(SentryFilter):
     def get_query_set(self, queryset):
         return queryset.filter(level=self.get_value())
 
+
 class SiteFilter(SentryFilter):
     label = 'Site'
     column = 'site'
diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index a20f036eaf..3e0e4274ff 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -13,16 +13,19 @@ import urlparse
 
 from sentry.web.helpers import render_to_string
 
+
 # unserialization concept is based on pickle
 class _EmptyClass(object):
     pass
 
+
 def unserialize(klass, data):
     value = _EmptyClass()
     value.__class__ = klass
     value.__setstate__(data)
     return value
 
+
 class Interface(object):
     """
     An interface is a structured represntation of data, which may
@@ -51,6 +54,7 @@ class Interface(object):
     def to_string(self, event):
         return ''
 
+
 class Message(Interface):
     def __init__(self, message, params):
         self.message = message
@@ -62,6 +66,7 @@ class Message(Interface):
             'params': self.params,
         }
 
+
 class Query(Interface):
     def __init__(self, query, engine):
         self.query = query
@@ -73,6 +78,7 @@ class Query(Interface):
             'engine': self.engine,
         }
 
+
 class Stacktrace(Interface):
     """
     {
@@ -124,6 +130,7 @@ class Stacktrace(Interface):
 
         return '\n'.join(result)
 
+
 class Exception(Interface):
     def __init__(self, type, value, module=None):
         # The exception type name (e.g. TypeError)
@@ -147,6 +154,7 @@ class Exception(Interface):
             'exception_module': self.module,
         })
 
+
 class Http(Interface):
     """
     {
@@ -207,6 +215,7 @@ class Http(Interface):
             'env': self.env,
         })
 
+
 class Template(Interface):
     """
     {
@@ -249,6 +258,7 @@ class Template(Interface):
             'post_context': self.post_context,
         })
 
+
 class User(Interface):
     """
     {
@@ -257,4 +267,4 @@ class User(Interface):
         username: 'foo',
         email: 'foo@example.com'
     }
-    """
\ No newline at end of file
+    """
diff --git a/sentry/models.py b/sentry/models.py
index b1669960d1..1ed3082876 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -47,19 +47,21 @@ FILTER_KEYS = (
 
 logger = logging.getLogger('sentry.errors')
 
+
 class Project(Model):
-    name            = models.CharField(max_length=200)
-    owner           = models.ForeignKey(User, related_name="owned_project_set", null=True)
-    public          = models.BooleanField(default=False)
-    date_added      = models.DateTimeField(default=datetime.now)
+    name = models.CharField(max_length=200)
+    owner = models.ForeignKey(User, related_name="owned_project_set", null=True)
+    public = models.BooleanField(default=False)
+    date_added = models.DateTimeField(default=datetime.now)
+
 
 class ProjectMember(Model):
-    project         = models.ForeignKey(Project, related_name="member_set")
-    user            = models.ForeignKey(User, related_name="project_set")
-    is_superuser    = models.BooleanField(default=False)
-    public_key      = models.CharField(max_length=32, unique=True, null=True)
-    secret_key      = models.CharField(max_length=32, unique=True, null=True)
-    permissions     = BitField(flags=(
+    project = models.ForeignKey(Project, related_name="member_set")
+    user = models.ForeignKey(User, related_name="project_set")
+    is_superuser = models.BooleanField(default=False)
+    public_key = models.CharField(max_length=32, unique=True, null=True)
+    secret_key = models.CharField(max_length=32, unique=True, null=True)
+    permissions = BitField(flags=(
         'read_message',
         'change_message_status',
         'add_member',
@@ -67,7 +69,7 @@ class ProjectMember(Model):
         'delete_member',
         'add_message',
     ))
-    date_added      = models.DateTimeField(default=datetime.now)
+    date_added = models.DateTimeField(default=datetime.now)
 
     class Meta:
         unique_together = (('project', 'user'),)
@@ -88,21 +90,23 @@ class ProjectMember(Model):
     def generate_api_key(cls):
         return uuid.uuid4().hex
 
+
 class ProjectDomain(Model):
-    project         = models.ForeignKey(Project, related_name="domain_set")
-    domain          = models.CharField(max_length=128)
+    project = models.ForeignKey(Project, related_name="domain_set")
+    domain = models.CharField(max_length=128)
 
     class Meta:
         unique_together = (('project', 'domain'),)
 
+
 class MessageBase(Model):
-    project         = models.ForeignKey(Project, null=True)
-    logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
-    level           = models.PositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
-    message         = models.TextField()
-    culprit         = models.CharField(max_length=200, blank=True, null=True, db_column='view')
-    checksum        = models.CharField(max_length=32, db_index=True)
-    data            = GzippedDictField(blank=True, null=True)
+    project = models.ForeignKey(Project, null=True)
+    logger = models.CharField(max_length=64, blank=True, default='root', db_index=True)
+    level = models.PositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
+    message = models.TextField()
+    culprit = models.CharField(max_length=200, blank=True, null=True, db_column='view')
+    checksum = models.CharField(max_length=32, db_index=True)
+    data = GzippedDictField(blank=True, null=True)
 
     class Meta:
         abstract = True
@@ -125,16 +129,17 @@ class MessageBase(Model):
             return self.culprit
         return truncatechars(self.message.split('\n')[0], 100)
 
+
 class Group(MessageBase):
-    status          = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
-    times_seen      = models.PositiveIntegerField(default=1, db_index=True)
-    last_seen       = models.DateTimeField(default=datetime.now, db_index=True)
-    first_seen      = models.DateTimeField(default=datetime.now, db_index=True)
-    time_spent_total= models.FloatField(default=0)
-    time_spent_count= models.IntegerField(default=0)
-    score           = models.IntegerField(default=0)
+    status = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
+    times_seen = models.PositiveIntegerField(default=1, db_index=True)
+    last_seen = models.DateTimeField(default=datetime.now, db_index=True)
+    first_seen = models.DateTimeField(default=datetime.now, db_index=True)
+    time_spent_total = models.FloatField(default=0)
+    time_spent_count = models.IntegerField(default=0)
+    score = models.IntegerField(default=0)
 
-    objects         = GroupManager()
+    objects = GroupManager()
 
     class Meta:
         unique_together = (('project', 'logger', 'culprit', 'checksum'),)
@@ -188,7 +193,7 @@ class Group(MessageBase):
             subject = '%sError: %s' % (settings.EMAIL_SUBJECT_PREFIX, event.message)
 
         if event.site:
-            subject  = '[%s] %s' % (event.site, subject)
+            subject = '[%s] %s' % (event.site, subject)
 
         if request:
             link = request.build_absolute_url(self.get_absolute_url())
@@ -238,13 +243,14 @@ class Group(MessageBase):
         module = self.data.get('module', 'ver')
         return module, self.data['version']
 
+
 class Event(MessageBase):
-    event_id        = models.CharField(max_length=32, null=True, unique=True, db_column="message_id")
-    group           = models.ForeignKey(Group, blank=True, null=True, related_name="event_set")
-    datetime        = models.DateTimeField(default=datetime.now, db_index=True)
-    time_spent      = models.FloatField(null=True)
-    server_name     = models.CharField(max_length=128, db_index=True)
-    site            = models.CharField(max_length=128, db_index=True, null=True)
+    event_id = models.CharField(max_length=32, null=True, unique=True, db_column="message_id")
+    group = models.ForeignKey(Group, blank=True, null=True, related_name="event_set")
+    datetime = models.DateTimeField(default=datetime.now, db_index=True)
+    time_spent = models.FloatField(null=True)
+    server_name = models.CharField(max_length=128, db_index=True)
+    site = models.CharField(max_length=128, db_index=True, null=True)
 
     class Meta:
         verbose_name = _('message')
@@ -310,6 +316,7 @@ class Event(MessageBase):
         module = self.data['__sentry__'].get('module', 'ver')
         return module, self.data['__sentry__']['version']
 
+
 class FilterValue(models.Model):
     """
     Stores references to available filters.
@@ -324,6 +331,7 @@ class FilterValue(models.Model):
     def __unicode__(self):
         return u'key=%s, value=%s' % (self.key, self.value)
 
+
 class MessageFilterValue(models.Model):
     """
     Stores the total number of messages seen by a group matching
@@ -342,6 +350,7 @@ class MessageFilterValue(models.Model):
         return u'group_id=%s, times_seen=%s, key=%s, value=%s' % (self.group_id, self.times_seen,
                                                                   self.key, self.value)
 
+
 class MessageCountByMinute(Model):
     """
     Stores the total number of messages seen by a group at 5 minute intervals
@@ -351,10 +360,10 @@ class MessageCountByMinute(Model):
 
     project = models.ForeignKey(Project, null=True)
     group = models.ForeignKey(Group)
-    date = models.DateTimeField() # normalized to HH:MM:00
+    date = models.DateTimeField()  # normalized to HH:MM:00
     times_seen = models.PositiveIntegerField(default=0)
-    time_spent_total= models.FloatField(default=0)
-    time_spent_count= models.IntegerField(default=0)
+    time_spent_total = models.FloatField(default=0)
+    time_spent_count = models.IntegerField(default=0)
 
     class Meta:
         unique_together = (('project', 'group', 'date'),)
@@ -373,6 +382,7 @@ class MessageIndex(BaseIndex):
 # This comes later due to recursive imports
 from sentry.utils import get_filters
 
+
 def register_indexes():
     """
     Grabs all required indexes from filters and registers them.
@@ -384,6 +394,7 @@ def register_indexes():
             logger.debug('Registered index for for %s' % filter_.column)
 register_indexes()
 
+
 def create_default_project(created_models, verbosity=2, **kwargs):
     if Project in created_models:
         try:
