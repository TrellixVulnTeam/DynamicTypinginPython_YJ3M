commit 32c0f164daee38d61de1aa02ed0ef0319cc09858
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Nov 19 12:32:45 2018 -0800

    feat(org-events): Add UTC to URL params (#10629)
    
    * Refactors `useUtc` prop name to `utc` to be consistent with URL (and to
    compress URL params a bit)
    * move default utc prop into TimeRangeSelector

diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
index 3eb32acc8a..57c21d0feb 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
@@ -55,7 +55,7 @@ class DateRange extends React.Component {
     /**
      * Use UTC
      */
-    useUtc: PropTypes.bool,
+    utc: PropTypes.bool,
 
     /**
      * handle UTC checkbox change
@@ -74,24 +74,24 @@ class DateRange extends React.Component {
     maxPickableDays: MAX_PICKABLE_DAYS,
   };
 
-  static getTimeStringFromDate = (date, useUtc) => {
-    return getFormattedDate(date, 'HH:mm', {local: !useUtc});
+  static getTimeStringFromDate = (date, utc) => {
+    return getFormattedDate(date, 'HH:mm', {local: !utc});
   };
 
   handleSelectDateRange = ({selection}) => {
-    const {useUtc, onChange} = this.props;
+    const {utc, onChange} = this.props;
     const {startDate, endDate} = selection;
 
     let start = startDate;
     let end = endDate;
 
     if (start) {
-      start = setDateToTime(start, DEFAULT_DAY_START_TIME, {local: !useUtc});
+      start = setDateToTime(start, DEFAULT_DAY_START_TIME, {local: !utc});
     }
 
     if (end) {
       end = setDateToTime(end, DEFAULT_DAY_END_TIME, {
-        local: !useUtc,
+        local: !utc,
       });
     }
 
@@ -115,7 +115,7 @@ class DateRange extends React.Component {
     });
 
     onChange({
-      start: setDateToTime(start, startTime, {local: !this.props.useUtc}),
+      start: setDateToTime(start, startTime, {local: !this.props.utc}),
       end,
     });
   };
@@ -131,7 +131,7 @@ class DateRange extends React.Component {
 
     onChange({
       start,
-      end: setDateToTime(end, endTime, {local: !this.props.useUtc}),
+      end: setDateToTime(end, endTime, {local: !this.props.utc}),
     });
   };
 
@@ -139,25 +139,25 @@ class DateRange extends React.Component {
     const {
       className,
       maxPickableDays,
-      useUtc,
+      utc,
       start,
       end,
       showTimePicker,
       onChangeUtc,
     } = this.props;
 
-    const startTime = DateRange.getTimeStringFromDate(new Date(start), useUtc);
-    const endTime = DateRange.getTimeStringFromDate(new Date(end), useUtc);
+    const startTime = DateRange.getTimeStringFromDate(new Date(start), utc);
+    const endTime = DateRange.getTimeStringFromDate(new Date(end), utc);
 
     // Restraints on the time range that you can select
     // Can't select dates in the future b/c we're not fortune tellers (yet)
     const minDate = getCoercedUtcOrLocalDate(
       getStartOfPeriodAgo(maxPickableDays, 'days'),
       {
-        local: !useUtc,
+        local: !utc,
       }
     );
-    const maxDate = getCoercedUtcOrLocalDate(new Date(), {local: !useUtc});
+    const maxDate = getCoercedUtcOrLocalDate(new Date(), {local: !utc});
 
     return (
       <div className={className} data-test-id="date-range">
@@ -165,10 +165,8 @@ class DateRange extends React.Component {
           rangeColors={[theme.purple]}
           ranges={[
             {
-              startDate: start
-                ? getCoercedUtcOrLocalDate(start, {local: !useUtc})
-                : start,
-              endDate: end ? getCoercedUtcOrLocalDate(end, {local: !useUtc}) : end,
+              startDate: start ? getCoercedUtcOrLocalDate(start, {local: !utc}) : start,
+              endDate: end ? getCoercedUtcOrLocalDate(end, {local: !utc}) : end,
               key: 'selection',
             },
           ]}
@@ -188,7 +186,7 @@ class DateRange extends React.Component {
               {t('Use UTC')}
               <Checkbox
                 onChange={onChangeUtc}
-                checked={useUtc}
+                checked={utc}
                 style={{
                   margin: '0 0 0 0.5em',
                 }}
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
index 62e0735a1f..fe8330d09a 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
@@ -33,16 +33,16 @@ class DateSummary extends React.Component {
      */
     end: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
 
-    useUtc: PropTypes.bool,
+    utc: PropTypes.bool,
   };
 
   formatDate(date) {
-    return getFormattedDate(date, 'll', {local: !this.props.useUtc});
+    return getFormattedDate(date, 'll', {local: !this.props.utc});
   }
 
   formatTime(date, withSeconds = false) {
     return getFormattedDate(date, `HH:mm${withSeconds ? ':ss' : ''}`, {
-      local: !this.props.useUtc,
+      local: !this.props.utc,
     });
   }
 
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index 0d48232408..96058c5502 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -3,7 +3,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {DEFAULT_RELATIVE_PERIODS, DEFAULT_STATS_PERIOD} from 'app/constants';
+import {
+  DEFAULT_RELATIVE_PERIODS,
+  DEFAULT_STATS_PERIOD,
+  DEFAULT_USE_UTC,
+} from 'app/constants';
 import {analytics} from 'app/utils/analytics';
 import {getLocalToUtc, getPeriodAgo, getUtcInLocal} from 'app/utils/dates';
 import {parsePeriodToHours} from 'app/utils';
@@ -52,7 +56,7 @@ class TimeRangeSelector extends React.PureComponent {
     /**
      * Default initial value for using UTC
      */
-    useUtc: PropTypes.bool,
+    utc: PropTypes.bool,
 
     /**
      * Callback when value changes
@@ -68,12 +72,13 @@ class TimeRangeSelector extends React.PureComponent {
   static defaultProps = {
     showAbsolute: true,
     showRelative: false,
+    utc: DEFAULT_USE_UTC,
   };
 
   constructor(props) {
     super(props);
     this.state = {
-      useUtc: props.useUtc,
+      utc: props.utc,
       isOpen: false,
     };
   }
@@ -114,6 +119,7 @@ class TimeRangeSelector extends React.PureComponent {
         'hours'
       ).toDate(),
       end: new Date(),
+      utc: this.state.utc,
     });
   };
 
@@ -123,6 +129,7 @@ class TimeRangeSelector extends React.PureComponent {
       relative: value,
       start: null,
       end: null,
+      utc: this.state.utc,
     });
     this.handleUpdate();
   };
@@ -134,6 +141,7 @@ class TimeRangeSelector extends React.PureComponent {
       relative: null,
       start,
       end,
+      utc: this.state.utc,
     });
   };
 
@@ -141,19 +149,20 @@ class TimeRangeSelector extends React.PureComponent {
     const {onChange, start, end} = this.props;
 
     this.setState(state => {
-      const useUtc = !state.useUtc;
+      const utc = !state.utc;
       analytics('dateselector.utc_changed', {
-        utc: useUtc,
+        utc,
       });
 
       onChange({
         relative: null,
-        start: useUtc ? getLocalToUtc(start) : getUtcInLocal(start),
-        end: useUtc ? getLocalToUtc(end) : getUtcInLocal(end),
+        start: utc ? getLocalToUtc(start) : getUtcInLocal(start),
+        end: utc ? getLocalToUtc(end) : getUtcInLocal(end),
+        utc,
       });
 
       return {
-        useUtc,
+        utc,
       };
     });
   };
@@ -168,7 +177,7 @@ class TimeRangeSelector extends React.PureComponent {
     const summary = relative ? (
       `${DEFAULT_RELATIVE_PERIODS[relative]}`
     ) : (
-      <DateSummary useUtc={this.state.useUtc} start={start} end={end} />
+      <DateSummary utc={this.state.utc} start={start} end={end} />
     );
 
     return (
@@ -215,7 +224,7 @@ class TimeRangeSelector extends React.PureComponent {
                 {isAbsoluteSelected && (
                   <DateRange
                     showTimePicker
-                    useUtc={this.state.useUtc}
+                    utc={this.state.utc}
                     start={start}
                     end={end}
                     onChange={this.handleSelectDateRange}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index c961d92e7c..b0e19bb74c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -356,7 +356,6 @@ export default class OrganizationDiscover extends React.Component {
               <TimeRangeSelector
                 showAbsolute={true}
                 showRelative={true}
-                useUtc={true}
                 start={start}
                 end={end}
                 relative={currentQuery.range}
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index aed042f683..1d4b80afad 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -5,7 +5,7 @@ import moment from 'moment';
 import {HealthRequestWithParams} from 'app/views/organizationHealth/util/healthRequest';
 import {t} from 'app/locale';
 import AreaChart from 'app/components/charts/areaChart';
-import EventsContext from 'app/views/organizationEvents/eventsContext';
+import EventsContext from 'app/views/organizationEvents/utils/eventsContext';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
index 6a0ae66ea2..06ea3edc47 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
@@ -8,13 +8,14 @@ import {t} from 'app/locale';
 import {PanelBody, Panel, PanelHeader} from 'app/components/panels';
 import DateTime from 'app/components/dateTime';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
-import EventsContext from 'app/views/organizationEvents/eventsContext';
 import IdBadge from 'app/components/idBadge';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import SentryTypes from 'app/sentryTypes';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
+import EventsContext from './utils/eventsContext';
+
 class EventsTable extends React.Component {
   static propTypes = {
     reloading: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 746c70e4b1..81f9e9382d 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -4,11 +4,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {DEFAULT_STATS_PERIOD, DEFAULT_USE_UTC} from 'app/constants';
 import {defined} from 'app/utils';
 import {getLocalDateObject, getUtcDateString} from 'app/utils/dates';
 import {getParams} from 'app/views/organizationEvents/utils';
-import EventsContext from 'app/views/organizationEvents/eventsContext';
+import EventsContext from 'app/views/organizationEvents/utils/eventsContext';
 import Feature from 'app/components/acl/feature';
 import Header from 'app/components/organizations/header';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
@@ -26,7 +26,7 @@ class OrganizationEventsContainer extends React.Component {
     router: PropTypes.object,
   };
 
-  static getInitialStateFromRouter(props) {
+  static getStateFromRouter(props) {
     const {query} = props.router.location;
     const hasAbsolute = !!query.start && !!query.end;
     let project = [];
@@ -50,17 +50,13 @@ class OrganizationEventsContainer extends React.Component {
       end = getLocalDateObject(end);
     }
 
-    const values = {
+    return {
       project,
       environment,
       period: query.statsPeriod || (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
       start: start || null,
       end: end || null,
-    };
-
-    return {
-      ...values,
-      queryValues: {...values},
+      utc: typeof query.utc !== 'undefined' ? query.utc === 'true' : DEFAULT_USE_UTC,
     };
   }
 
@@ -71,7 +67,25 @@ class OrganizationEventsContainer extends React.Component {
       updateParams: this.updateParams,
     };
 
-    this.state = OrganizationEventsContainer.getInitialStateFromRouter(props);
+    const values = OrganizationEventsContainer.getStateFromRouter(props);
+    this.state = {
+      ...values,
+      queryValues: {
+        ...values,
+      },
+    };
+  }
+
+  componentWillReceiveProps(nextProps, nextState) {
+    if (this.props.location !== nextProps.location) {
+      const values = OrganizationEventsContainer.getStateFromRouter(nextProps);
+
+      // eslint-disable-next-line react/no-did-update-set-state
+      this.setState({
+        ...values,
+        queryValues: {...values},
+      });
+    }
   }
 
   updateParams = obj => {
@@ -112,14 +126,15 @@ class OrganizationEventsContainer extends React.Component {
     }));
   };
 
-  handleChangeTime = ({start, end, relative}) => {
-    this.setState({start, end, period: relative});
+  handleChangeTime = ({start, end, relative, utc}) => {
+    this.setState({start, end, period: relative, utc});
   };
 
   handleUpdatePeriod = () => {
-    this.setState(({period, start, end, ...state}) => {
+    this.setState(({period, start, end, utc, ...state}) => {
       let newValueObj = {
         ...(defined(period) ? {period} : {start, end}),
+        utc,
       };
 
       this.updateParams(newValueObj);
@@ -159,7 +174,7 @@ class OrganizationEventsContainer extends React.Component {
 
   render() {
     const {organization, children} = this.props;
-    const {period, start, end} = this.state;
+    const {period, start, end, utc} = this.state;
 
     const projects =
       organization.projects && organization.projects.filter(({isMember}) => isMember);
@@ -197,6 +212,7 @@ class OrganizationEventsContainer extends React.Component {
                   relative={period}
                   start={start}
                   end={end}
+                  utc={utc}
                   onChange={this.handleChangeTime}
                   onUpdate={this.handleUpdatePeriod}
                 />
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsContext.jsx
similarity index 57%
rename from src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
rename to src/sentry/static/sentry/app/views/organizationEvents/utils/eventsContext.jsx
index 6db2cc98dd..5f5056dcde 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsContext.jsx
@@ -1,11 +1,14 @@
 import React from 'react';
 
+import {DEFAULT_STATS_PERIOD, DEFAULT_USE_UTC} from 'app/constants';
+
 const EventsContext = React.createContext({
   project: [],
   environment: [],
-  period: '7d',
+  period: DEFAULT_STATS_PERIOD,
   start: null,
   end: null,
+  utc: DEFAULT_USE_UTC,
 });
 
 export default EventsContext;
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap b/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
index b0742baea5..1163a51c91 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
+++ b/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
@@ -4,7 +4,7 @@ exports[`DateSummary renders 1`] = `
 <DateSummary
   end={2017-10-17T02:38:00.000Z}
   start={2017-10-14T02:38:00.000Z}
-  useUtc={true}
+  utc={true}
 >
   <DateGroupWrapper
     align="center"
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
index 99e924aa1e..219baf5ca5 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
@@ -124,7 +124,7 @@ describe('DateRange', function() {
           start={start}
           end={end}
           showTimePicker
-          useUtc
+          utc
           onChange={onChange}
           onChangeUtc={jest.fn()}
         />,
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
index 65557eba84..c99c98d96b 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
@@ -11,7 +11,7 @@ describe('DateSummary', function() {
   let routerContext = TestStubs.routerContext();
 
   const createWrapper = (props = {}) =>
-    mount(<DateSummary useUtc start={start} end={end} {...props} />, routerContext);
+    mount(<DateSummary utc start={start} end={end} {...props} />, routerContext);
 
   it('renders', async function() {
     wrapper = createWrapper();
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
index 8ecd89fc44..3e49b883cf 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
@@ -39,6 +39,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-03T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
     };
     expect(onChange).toHaveBeenLastCalledWith(newProps);
     wrapper.setProps(newProps);
@@ -48,7 +49,7 @@ describe('TimeRangeSelector', function() {
   });
 
   it('selects absolute item with utc enabled', async function() {
-    wrapper = createWrapper({useUtc: true});
+    wrapper = createWrapper({utc: true});
     await wrapper.find('HeaderItem').simulate('click');
 
     expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(0);
@@ -58,6 +59,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-03T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
     };
     expect(onChange).toHaveBeenLastCalledWith(newProps);
     wrapper.setProps(newProps);
@@ -77,6 +79,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
     });
 
     wrapper.find('SelectorItem[value="14d"]').simulate('click');
@@ -84,6 +87,7 @@ describe('TimeRangeSelector', function() {
       relative: '14d',
       start: null,
       end: null,
+      utc: true,
     });
 
     wrapper.setProps({relative: '14d', start: null, end: null});
@@ -93,13 +97,14 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-03T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
     });
   });
 
   it('switches from relative to absolute while maintaining equivalent date range (in utc)', async function() {
     wrapper = createWrapper({
       relative: '7d',
-      useUtc: true,
+      utc: true,
     });
     await wrapper.find('HeaderItem').simulate('click');
 
@@ -108,6 +113,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
     });
 
     wrapper.find('SelectorItem[value="14d"]').simulate('click');
@@ -115,6 +121,7 @@ describe('TimeRangeSelector', function() {
       relative: '14d',
       start: null,
       end: null,
+      utc: true,
     });
 
     wrapper.setProps({relative: '14d', start: null, end: null});
@@ -124,6 +131,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-03T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
     });
   });
 
@@ -133,7 +141,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T00:00:00.000Z'),
       end: new Date('2017-10-17T23:59:59.000Z'),
-      useUtc: true,
+      utc: true,
     });
     wrapper.find('HeaderItem').simulate('click');
 
@@ -143,6 +151,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T04:00:00.000Z'),
       end: new Date('2017-10-18T03:59:59.000Z'),
+      utc: false,
     };
     expect(onChange).toHaveBeenLastCalledWith(state);
     wrapper.setProps(state);
@@ -153,6 +162,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T00:00:00.000Z'),
       end: new Date('2017-10-17T23:59:59.000Z'),
+      utc: true,
     };
     expect(onChange).toHaveBeenLastCalledWith(state);
     wrapper.setProps(state);
@@ -163,6 +173,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T04:00:00.000Z'),
       end: new Date('2017-10-18T03:59:59.000Z'),
+      utc: false,
     });
   });
 });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 511706442d..7e05f3850c 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -186,9 +186,9 @@ describe('OrganizationEvents', function() {
     });
   });
 
-  it('changes to absolute time', async function() {
-    const start = new Date('2017-10-01T04:00:00.000Z');
-    const end = new Date('2017-10-02T03:59:59.000Z');
+  it('changes to absolute time (utc is default)', async function() {
+    const start = new Date('2017-10-01T00:00:00.000Z');
+    const end = new Date('2017-10-01T23:59:59.000Z');
 
     wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
@@ -209,8 +209,9 @@ describe('OrganizationEvents', function() {
     expect(router.push).toHaveBeenCalledWith({
       pathname: '/organizations/org-slug/events/',
       query: {
-        start: '2017-10-01T04:00:00',
-        end: '2017-10-02T03:59:59',
+        start: '2017-10-01T00:00:00',
+        end: '2017-10-01T23:59:59',
+        utc: true,
       },
     });
   });
