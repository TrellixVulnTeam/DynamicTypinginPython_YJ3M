commit 73d7712f6310b8e3721553e6963b24cdc6f6c928
Author: Jess MacQueen <jess@getsentry.com>
Date:   Tue Jun 21 17:06:53 2016 -0700

    add basic unlinking of issues
    
    add ability to link existing issues
    
    also create activity record for linking an existing issue

diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 1594d23047..e17b8ef698 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -32,11 +32,14 @@ class NewIssueForm(forms.Form):
 class IssueTrackingPlugin(Plugin):
     # project_conf_form = BaseIssueOptionsForm
     new_issue_form = NewIssueForm
+    link_issue_form = None
 
     create_issue_template = 'sentry/plugins/bases/issue/create_issue.html'
     not_configured_template = 'sentry/plugins/bases/issue/not_configured.html'
     needs_auth_template = 'sentry/plugins/bases/issue/needs_auth.html'
     auth_provider = None
+    can_unlink_issues = False
+    can_link_existing_issues = False
 
     def _get_group_body(self, request, group, event, **kwargs):
         result = []
@@ -99,6 +102,12 @@ class IssueTrackingPlugin(Plugin):
         """
         return 'Create %s Issue' % self.get_title()
 
+    def get_unlink_issue_title(self, **kwargs):
+        """
+        Return a string for the "Unlink plugin issue" action label.
+        """
+        return 'Unlink %s Issue' % self.get_title()
+
     def get_new_issue_form(self, request, group, event, **kwargs):
         """
         Return a Form for the "Create new issue" page.
@@ -112,6 +121,12 @@ class IssueTrackingPlugin(Plugin):
         """
         return []
 
+    def get_link_existing_issue_form(self, request, group, event, **kwargs):
+        if not self.link_issue_form:
+            return None
+        return self.link_issue_form(request.POST or None,
+                                    initial=self.get_initial_link_form_data(request, group, event))
+
     def get_issue_url(self, group, issue_id, **kwargs):
         """
         Given an issue_id (string) return an absolute URL to the issue's details
@@ -119,6 +134,12 @@ class IssueTrackingPlugin(Plugin):
         """
         raise NotImplementedError
 
+    def get_issue_title_by_id(self, request, group, issue_id):
+        """
+        Given an issue_id return the issue's title.
+        """
+        raise NotImplementedError
+
     def get_issue_label(self, group, issue_id, **kwargs):
         """
         Given an issue_id (string) return a string representing the issue.
@@ -133,18 +154,32 @@ class IssueTrackingPlugin(Plugin):
         """
         raise NotImplementedError
 
+    def link_issue(self, request, group, form_data, **kwargs):
+        """
+        Can be overridden for any actions needed when linking issues
+        (like adding a comment to an existing issue).
+        """
+        pass
+
     def get_initial_form_data(self, request, group, event, **kwargs):
         return {
             'description': self._get_group_description(request, group, event),
             'title': self._get_group_title(request, group, event),
         }
 
+    def get_initial_link_form_data(self, request, group, event, **kwargs):
+        return {}
+
     def has_auth_configured(self, **kwargs):
         if not self.auth_provider:
             return True
 
         return self.auth_provider in get_auth_providers()
 
+    def handle_unlink_issue(self, request, group, **kwargs):
+        GroupMeta.objects.unset_value(group, '%s:tid' % self.get_conf_key())
+        return self.redirect(group.get_absolute_url())
+
     def view(self, request, group, **kwargs):
         has_auth_configured = self.has_auth_configured()
         if not (has_auth_configured and self.is_configured(project=group.project, request=request)):
@@ -167,47 +202,89 @@ class IssueTrackingPlugin(Plugin):
             })
 
         if GroupMeta.objects.get_value(group, '%s:tid' % self.get_conf_key(), None):
+            if self.can_unlink_issues and request.GET.get('unlink'):
+                return self.handle_unlink_issue(request, group, **kwargs)
             return None
 
         prefix = self.get_conf_key()
         event = group.get_latest_event()
         Event.objects.bind_nodes([event], 'data')
 
-        form = self.get_new_issue_form(request, group, event)
-        if form.is_valid():
-            try:
-                issue_id = self.create_issue(
+        op = request.POST.get('op', 'create')
+
+        create_form = self.get_new_issue_form(request, group, event)
+        link_form = None
+        if self.can_link_existing_issues:
+            link_form = self.get_link_existing_issue_form(request, group, event)
+
+        if op == 'create':
+            if create_form.is_valid():
+                try:
+                    issue_id = self.create_issue(
+                        group=group,
+                        form_data=create_form.cleaned_data,
+                        request=request,
+                    )
+                except forms.ValidationError as e:
+                    create_form.errors['__all__'] = [u'Error creating issue: %s' % e]
+
+            if create_form.is_valid():
+                GroupMeta.objects.set_value(group, '%s:tid' % prefix, issue_id)
+
+                issue_information = {
+                    'title': create_form.cleaned_data['title'],
+                    'provider': self.get_title(),
+                    'location': self.get_issue_url(group, issue_id),
+                    'label': self.get_issue_label(group=group, issue_id=issue_id),
+                }
+                Activity.objects.create(
+                    project=group.project,
                     group=group,
-                    form_data=form.cleaned_data,
-                    request=request,
+                    type=Activity.CREATE_ISSUE,
+                    user=request.user,
+                    data=issue_information,
                 )
-            except forms.ValidationError as e:
-                form.errors['__all__'] = [u'Error creating issue: %s' % e]
-
-        if form.is_valid():
-            GroupMeta.objects.set_value(group, '%s:tid' % prefix, issue_id)
-
-            issue_information = {
-                'title': form.cleaned_data['title'],
-                'provider': self.get_title(),
-                'location': self.get_issue_url(group, issue_id),
-                'label': self.get_issue_label(group=group, issue_id=issue_id),
-            }
-            Activity.objects.create(
-                project=group.project,
-                group=group,
-                type=Activity.CREATE_ISSUE,
-                user=request.user,
-                data=issue_information,
-            )
-
-            issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin)
-            return self.redirect(group.get_absolute_url())
+
+                issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin)
+                return self.redirect(group.get_absolute_url())
+
+        elif op == 'link':
+            if link_form.is_valid():
+                try:
+                    self.link_issue(
+                        group=group,
+                        form_data=link_form.cleaned_data,
+                        request=request,
+                    )
+                except forms.ValidationError as e:
+                    link_form.errors['__all__'] = [u'Error creating issue: %s' % e]
+
+            if link_form.is_valid():
+                issue_id = int(link_form.cleaned_data['issue_id'])
+                GroupMeta.objects.set_value(group, '%s:tid' % prefix, issue_id)
+                issue_information = {
+                    'title': self.get_issue_title_by_id(request, group, issue_id),
+                    'provider': self.get_title(),
+                    'location': self.get_issue_url(group, issue_id),
+                    'label': self.get_issue_label(group=group, issue_id=issue_id),
+                }
+                Activity.objects.create(
+                    project=group.project,
+                    group=group,
+                    type=Activity.CREATE_ISSUE,
+                    user=request.user,
+                    data=issue_information,
+                )
+
+                return self.redirect(group.get_absolute_url())
 
         context = {
-            'form': form,
+            'create_form': create_form,
             'title': self.get_new_issue_title(),
             'read_only_fields': self.get_new_issue_read_only_fields(group=group),
+            'can_link_existing_issues': self.can_link_existing_issues,
+            'link_form': link_form,
+            'op': op
         }
 
         return self.render(self.create_issue_template, context)
@@ -218,6 +295,9 @@ class IssueTrackingPlugin(Plugin):
         prefix = self.get_conf_key()
         if not GroupMeta.objects.get_value(group, '%s:tid' % prefix, None):
             action_list.append((self.get_new_issue_title(), self.get_url(group)))
+        elif self.can_unlink_issues:
+            action_list.append((self.get_unlink_issue_title(),
+                                '%s?unlink=1' % self.get_url(group).rstrip('/')))
         return action_list
 
     def tags(self, request, group, tag_list, **kwargs):
diff --git a/src/sentry/templates/sentry/plugins/bases/issue/create_issue.html b/src/sentry/templates/sentry/plugins/bases/issue/create_issue.html
index b7b62a34f2..65c1072f53 100644
--- a/src/sentry/templates/sentry/plugins/bases/issue/create_issue.html
+++ b/src/sentry/templates/sentry/plugins/bases/issue/create_issue.html
@@ -6,28 +6,64 @@
 {% block title %}{{ title }} | {{ block.super }}{% endblock %}
 
 {% block main %}
+
     <div class="page-header">
         <h3>{{ title }}</h3>
     </div>
 
-    {% for field in read_only_fields %}
-        <div class="form-group">
-            <label class="control-label">{{ field.label }}</label>
-            <div>{{ field.value }}</div>
+    {% if can_link_existing_issues %}
+        <ul class="nav nav-tabs">
+            <li {% if op == "create" %}class="active"{% endif %}>
+                <a href="#create" data-toggle="tab">{% trans "Create New" %}</a>
+            </li>
+            <li {% if op == "link" %}class="active"{% endif %}>
+                <a href="#link" data-toggle="tab">{% trans "Link Existing" %}</a>
+            </li>
+        </ul>
+    {% endif %}
+
+    <div class="tab-content">
+
+        {% for field in read_only_fields %}
+            <div class="form-group">
+                <label class="control-label">{{ field.label }}</label>
+                <div>{{ field.value }}</div>
+            </div>
+        {% endfor %}
+
+        <div class="tab-pane{% if op == "create" %} active{% endif %}" id="create">
+            <form class="form-stacked" action="" method="post">
+                {% csrf_token %}
+                {{ create_form|as_crispy_errors }}
+                <input type="hidden" name="next" value="{{ next }}" />
+                <input type="hidden" name="op" value="create" />
+                <fieldset>
+                    {% for field in create_form %}
+                        {{ field|as_crispy_field }}
+                    {% endfor %}
+                </fieldset>
+                <p class="actions">
+                    <button type="submit" class="btn btn-primary">{% trans "Create Issue" %}</button>
+                </p>
+            </form>
         </div>
-    {% endfor %}
-
-    <form class="form-stacked" action="" method="post">
-        {% csrf_token %}
-        {{ form|as_crispy_errors }}
-        <input type="hidden" name="next" value="{{ next }}" />
-        <fieldset>
-            {% for field in form %}
-                {{ field|as_crispy_field }}
-            {% endfor %}
-        </fieldset>
-        <p class="actions">
-            <button type="submit" class="btn btn-primary">{% trans "Create Issue" %}</button>
-        </p>
-    </form>
+
+        <div class="tab-pane{% if op == "link" %} active{% endif %}" id="link">
+            <form class="form-stacked" action="" method="post">
+                {% csrf_token %}
+                {{ link_form|as_crispy_errors }}
+                <input type="hidden" name="next" value="{{ next }}" />
+                <input type="hidden" name="op" value="link" />
+                <fieldset>
+                    {% for field in link_form %}
+                        {{ field|as_crispy_field }}
+                    {% endfor %}
+                </fieldset>
+                <p class="actions">
+                    <button type="submit" class="btn btn-primary">{% trans "Link Issue" %}</button>
+                </p>
+            </form>
+        </div>
+
+    </div>
 {% endblock %}
