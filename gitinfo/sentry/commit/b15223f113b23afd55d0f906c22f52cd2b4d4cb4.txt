commit b15223f113b23afd55d0f906c22f52cd2b4d4cb4
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 21 22:02:07 2013 -0700

    Remove the ability to suspend members

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index b3cb969087..11e1a2b68d 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -20,7 +20,7 @@ from django.utils.encoding import smart_str
 from sentry.app import env
 from sentry.conf import settings
 from sentry.exceptions import InvalidTimestamp
-from sentry.models import Project, ProjectKey, TeamMember, Team, User
+from sentry.models import Project, ProjectKey
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
@@ -128,21 +128,6 @@ def project_from_auth_vars(auth_vars):
 
     project = Project.objects.get_from_cache(pk=pk.project_id)
 
-    if pk.user_id:
-        try:
-            team = Team.objects.get_from_cache(pk=project.team_id)
-        except Team.DoesNotExist:
-            raise APIUnauthorized('Member does not have access to project')
-
-        # We have to refetch this as it may have been caught
-        pk.user = User.objects.get_from_cache(id=pk.user_id)
-        if not pk.user.is_active:
-            raise APIUnauthorized('Account is not active')
-
-        if not TeamMember.objects.filter(
-                team=team, user=pk.user_id, is_active=True).exists():
-            raise APIUnauthorized('Member does not have access to project')
-
     return project, pk.user
 
 
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 8a57533512..e5070f5e61 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -1209,7 +1209,6 @@ class TeamManager(BaseManager):
         else:
             qs = TeamMember.objects.filter(
                 user=user,
-                is_active=True,
             ).select_related('team')
             if access is not None:
                 qs = qs.filter(type__lte=access)
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 3b500c656d..c9c40253d4 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -180,7 +180,6 @@ class TeamMember(Model):
     """
     team = models.ForeignKey(Team, related_name="member_set")
     user = models.ForeignKey(django_settings.AUTH_USER_MODEL, related_name="sentry_teammember_set")
-    is_active = models.BooleanField(default=True)
     type = models.IntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
     date_added = models.DateTimeField(default=timezone.now)
 
diff --git a/src/sentry/templates/sentry/teams/members/index.html b/src/sentry/templates/sentry/teams/members/index.html
index 6722deb835..5cca5b69f8 100644
--- a/src/sentry/templates/sentry/teams/members/index.html
+++ b/src/sentry/templates/sentry/teams/members/index.html
@@ -30,7 +30,7 @@
         <colgroup>
             <col/>
             <col width="100px"/>
-            <col width="180px"/>
+            <col width="90px"/>
         </colgroup>
         <thead>
             <tr>
@@ -60,12 +60,6 @@
                     {% else %}
                         <td style="text-align:center;">
                             <a href="{% url 'sentry-remove-team-member' team.slug member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
-
-                            {% if member.is_active %}
-                                <a href="{% url 'sentry-suspend-team-member' team.slug member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
-                            {% else %}
-                                <a href="{% url 'sentry-restore-team-member' team.slug member.pk %}" class="btn btn-small">{% trans "Restore" %}</a>
-                            {% endif %}
                         </td>
                     {% endif %}
                 </tr>
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index e254b503f8..545002a194 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -348,52 +348,6 @@ def remove_team_member(request, team, member_id):
     return render_with_team_context(team, 'sentry/teams/members/remove.html', context, request)
 
 
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def suspend_team_member(request, team, member_id):
-    try:
-        member = team.member_set.get(pk=member_id)
-    except TeamMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    if member.user == team.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    result = plugins.first('has_perm', request.user, 'suspend_team_member', member)
-    if result is False and not request.user.has_perm('sentry.can_change_teammember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.update(is_active=False)
-
-    messages.add_message(request, messages.SUCCESS,
-        _('The team member was suspended.'))
-
-    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def restore_team_member(request, team, member_id):
-    try:
-        member = team.member_set.get(pk=member_id)
-    except TeamMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    if member.user == team.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    result = plugins.first('has_perm', request.user, 'restore_team_member', member)
-    if result is False and not request.user.has_perm('sentry.can_change_teammember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.update(is_active=True)
-
-    messages.add_message(request, messages.SUCCESS,
-        _('The team member was made active.'))
-
-    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def remove_pending_team_member(request, team, member_id):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 9e53489c1b..ae33dcfaf3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -95,10 +95,6 @@ urlpatterns = patterns('',
         name='sentry-edit-team-member'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/remove/$', teams.remove_team_member,
         name='sentry-remove-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/suspend/$', teams.suspend_team_member,
-        name='sentry-suspend-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/restore/$', teams.restore_team_member,
-        name='sentry-restore-team-member'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/pending/(?P<member_id>\d+)/remove/$', teams.remove_pending_team_member,
         name='sentry-remove-pending-team-member'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/pending/(?P<member_id>\d+)/reinvite/$', teams.reinvite_pending_team_member,
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 37c6828d05..ff5a61ac84 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -82,21 +82,6 @@ class ProjectFromAuthVarsTest(BaseAPITest):
         result = project_from_auth_vars(auth_vars)
         self.assertEquals(result, (self.project, self.pk.user))
 
-    def test_inactive_user(self):
-        user = self.pm.user
-        user.is_active = False
-        user.save()
-
-        auth_vars = {'sentry_key': self.pk.public_key}
-        self.assertRaises(APIUnauthorized, project_from_auth_vars, auth_vars)
-
-    def test_inactive_member(self):
-        self.pm.is_active = False
-        self.pm.save()
-
-        auth_vars = {'sentry_key': self.pk.public_key}
-        self.assertRaises(APIUnauthorized, project_from_auth_vars, auth_vars)
-
     def test_invalid_key(self):
         auth_vars = {'sentry_key': 'z'}
         self.assertRaises(APIForbidden, project_from_auth_vars, auth_vars)
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index d5320efbd6..04503fd006 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -167,39 +167,6 @@ class RemoveTeamTest(BaseTeamTest):
         self.assertFalse(Team.objects.filter(pk=self.team.pk).exists())
 
 
-class SuspendTeamMemberTest(BaseTeamTest):
-    def test_cannot_suspend_owner(self):
-        resp = self.client.post(reverse('sentry-suspend-team-member', args=[self.team.slug, self.tm.id]))
-        self.assertEquals(resp.status_code, 302)
-        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]))
-        tm = self.team.member_set.get(pk=self.tm2.id)
-        self.assertTrue(tm.is_active)
-
-    def test_does_suspend(self):
-        resp = self.client.get(reverse('sentry-suspend-team-member', args=[self.team.slug, self.tm2.id]))
-        self.assertEquals(resp.status_code, 302)
-        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]))
-        tm = self.team.member_set.get(pk=self.tm2.id)
-        self.assertFalse(tm.is_active)
-
-
-class RestoreTeamMemberTest(BaseTeamTest):
-    def test_cannot_restore_owner(self):
-        resp = self.client.post(reverse('sentry-restore-team-member', args=[self.team.slug, self.tm.id]))
-        self.assertEquals(resp.status_code, 302)
-        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]))
-        tm = self.team.member_set.get(pk=self.tm2.id)
-        self.assertTrue(tm.is_active)
-
-    def test_does_restore(self):
-        self.tm2.update(is_active=False)
-        resp = self.client.get(reverse('sentry-restore-team-member', args=[self.team.slug, self.tm2.id]))
-        self.assertEquals(resp.status_code, 302)
-        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]))
-        tm = self.team.member_set.get(pk=self.tm2.id)
-        self.assertTrue(tm.is_active)
-
-
 class NewTeamMemberTest(BaseTeamTest):
     @fixture
     def path(self):
