commit f967887acff8d0c40868d470c1efd747feffa2dc
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Dec 6 13:51:38 2016 -0800

    Support larger intervals in event frequency conditions. (#4640)

diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index 93b22d8eff..99daef38aa 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -15,18 +15,22 @@ from django.utils import timezone
 from sentry.rules.conditions.base import EventCondition
 
 
-class Interval(object):
-    ONE_MINUTE = '1m'
-    ONE_HOUR = '1h'
-    ONE_DAY = '1d'
+intervals = {
+    '1m': ('one minute', timedelta(minutes=1)),
+    '1h': ('one hour', timedelta(hours=1)),
+    '1d': ('one day', timedelta(hours=24)),
+    '1w': ('one week', timedelta(days=7)),
+    '30d': ('30 days', timedelta(days=30)),
+}
 
 
 class EventFrequencyForm(forms.Form):
-    interval = forms.ChoiceField(choices=(
-        (Interval.ONE_MINUTE, 'one minute'),
-        (Interval.ONE_HOUR, 'one hour'),
-        (Interval.ONE_DAY, 'one day'),
-    ))
+    interval = forms.ChoiceField(choices=[
+        (key, label) for key, (label, duration) in sorted(
+            intervals.items(),
+            key=lambda (key, (label, duration)): duration
+        )
+    ])
     value = forms.IntegerField(widget=forms.TextInput(attrs={
         'placeholder': '100',
         'type': 'number'
@@ -64,19 +68,11 @@ class BaseEventFrequencyCondition(EventCondition):
         raise NotImplementedError  # subclass must implement
 
     def get_rate(self, event, interval):
+        _, duration = intervals[interval]
         end = timezone.now()
-        if interval == Interval.ONE_MINUTE:
-            start = end - timedelta(minutes=1)
-        elif interval == Interval.ONE_HOUR:
-            start = end - timedelta(hours=1)
-        elif interval == Interval.ONE_DAY:
-            start = end - timedelta(hours=24)
-        else:
-            raise ValueError(interval)
-
         return self.query(
             event,
-            start,
+            end - duration,
             end,
         )
 
diff --git a/tests/sentry/rules/conditions/test_event_frequency.py b/tests/sentry/rules/conditions/test_event_frequency.py
index 6753be6c0f..796218d673 100644
--- a/tests/sentry/rules/conditions/test_event_frequency.py
+++ b/tests/sentry/rules/conditions/test_event_frequency.py
@@ -9,7 +9,7 @@ import six
 
 from sentry.app import tsdb
 from sentry.rules.conditions.event_frequency import (
-    EventFrequencyCondition, EventUniqueUserFrequencyCondition, Interval
+    EventFrequencyCondition, EventUniqueUserFrequencyCondition
 )
 from sentry.testutils.cases import RuleTestCase
 
@@ -25,7 +25,7 @@ class FrequencyConditionMixin(object):
         event = self.get_event()
         value = 10
         rule = self.get_rule({
-            'interval': Interval.ONE_MINUTE,
+            'interval': '1m',
             'value': six.text_type(value),
         })
 
@@ -50,7 +50,7 @@ class FrequencyConditionMixin(object):
         event = self.get_event()
         value = 10
         rule = self.get_rule({
-            'interval': Interval.ONE_HOUR,
+            'interval': '1h',
             'value': six.text_type(value),
         })
 
@@ -75,7 +75,7 @@ class FrequencyConditionMixin(object):
         event = self.get_event()
         value = 10
         rule = self.get_rule({
-            'interval': Interval.ONE_DAY,
+            'interval': '1d',
             'value': six.text_type(value),
         })
 
@@ -99,7 +99,7 @@ class FrequencyConditionMixin(object):
 
         event = self.get_event()
         rule = self.get_rule({
-            'interval': Interval.ONE_MINUTE,
+            'interval': '1m',
             'value': six.text_type('0'),
         })
 
