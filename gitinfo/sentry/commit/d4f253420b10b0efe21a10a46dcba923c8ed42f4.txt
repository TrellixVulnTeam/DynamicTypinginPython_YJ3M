commit d4f253420b10b0efe21a10a46dcba923c8ed42f4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Dec 6 09:55:38 2018 -0800

    feat(events-stream): Add zoom back to charts (APP-832) (#10904)

diff --git a/src/sentry/static/sentry/app/actionCreators/events.jsx b/src/sentry/static/sentry/app/actionCreators/events.jsx
index 99bf93e0c6..08657b6d76 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.jsx
@@ -70,8 +70,8 @@ export const doEventsRequest = (
   api,
   {
     organization,
-    projects,
-    environments,
+    project,
+    environment,
     period,
     start,
     end,
@@ -84,8 +84,8 @@ export const doEventsRequest = (
   const shouldDoublePeriod = includePrevious;
   const urlQuery = {
     interval,
-    project: projects,
-    environment: environments,
+    project,
+    environment,
     query,
   };
 
diff --git a/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx b/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
index 4c670c3e2b..4422bfa71c 100644
--- a/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
@@ -2,6 +2,7 @@ import 'echarts/lib/component/dataZoom';
 
 const DEFAULT = {
   type: 'inside',
+  zoomOnMouseWheel: 'shift',
   throttle: 50,
 };
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 50bbcdc0a5..e1556e1579 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -80,6 +80,7 @@ class OrganizationEvents extends AsyncView {
   }
 
   shouldComponentUpdate(nextProps, nextState) {
+    // Always update if state changes
     if (this.state !== nextState) {
       return true;
     }
@@ -88,6 +89,7 @@ class OrganizationEvents extends AsyncView {
       key => !isEqual(this.props.location[key], nextProps.location[key])
     );
 
+    // Always update if query parameters change
     if (isDiff) {
       return true;
     }
@@ -119,6 +121,12 @@ class OrganizationEvents extends AsyncView {
     return `Events - ${this.props.organization.slug}`;
   }
 
+  handleZoom = () => this.setState({zoomed: true});
+
+  // Table is considered to be updated when table is in a
+  // reloading state due to chart zoom, but reloading has been finished
+  handleTableUpdateComplete = () => this.setState({zoomed: false});
+
   renderRowCounts() {
     const {events, eventsPageLinks} = this.state;
     return parseRowFromLinks(eventsPageLinks, events.length);
@@ -141,14 +149,16 @@ class OrganizationEvents extends AsyncView {
       <React.Fragment>
         {error && super.renderError(new Error('Unable to load all required endpoints'))}
         <Panel>
-          <EventsChart loading={loading || reloading} organization={organization} />
+          <EventsChart organization={organization} onZoom={this.handleZoom} />
         </Panel>
 
         <EventsTable
           loading={!reloading && loading}
           reloading={reloading}
+          zoomChanged={this.state.zoomed}
           events={events}
           organization={organization}
+          onUpdateComplete={this.handleTableUpdateComplete}
         />
 
         {!loading &&
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 28d4e7e181..75e37285f2 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -1,69 +1,213 @@
+import {pick, isDate, isEqualWith} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import moment from 'moment';
 
+import {getFormattedDate} from 'app/utils/dates';
 import {t} from 'app/locale';
+import DataZoom from 'app/components/charts/components/dataZoom';
 import LineChart from 'app/components/charts/lineChart';
-import EventsContext from 'app/views/organizationEvents/utils/eventsContext';
-import EventsRequest from 'app/views/organizationEvents/utils/eventsRequest';
 import SentryTypes from 'app/sentryTypes';
+import ToolBox from 'app/components/charts/components/toolBox';
 import withApi from 'app/utils/withApi';
 
+import EventsRequest from './utils/eventsRequest';
+import EventsContext from './utils/eventsContext';
+
 const DEFAULT_GET_CATEGORY = () => t('Events');
 
-class EventsChart extends React.PureComponent {
+const dateComparator = (value, other) => {
+  if (isDate(value) && isDate(other)) {
+    return +value === +other;
+  }
+
+  // returning undefined will use default comparator
+  return undefined;
+};
+
+const isEqualWithDates = (a, b) => isEqualWith(a, b, dateComparator);
+const getDate = date =>
+  date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;
+
+class EventsChart extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
     actions: PropTypes.object,
     period: PropTypes.string,
+    start: PropTypes.instanceOf(Date),
+    end: PropTypes.instanceOf(Date),
     utc: PropTypes.bool,
+
+    // Callback for when chart has been zoomed
+    onZoom: PropTypes.func,
   };
 
-  handleDataZoom = (evt, chart) => {
-    const model = chart.getModel();
-    const {xAxis, series} = model.option;
-    const axis = xAxis[0];
-    const [firstSeries] = series;
+  constructor(props) {
+    super(props);
 
-    const start = moment(firstSeries.data[axis.rangeStart][0]).format(
-      moment.HTML5_FMT.DATETIME_LOCAL_MS
-    );
+    // Zoom history
+    this.history = [];
+
+    // Initialize current period instance state for zoom history
+    this.saveCurrentPeriod(props);
+  }
+
+  // Need to be aggressive about not re-rendering because eCharts handles zoom so we
+  // don't want the component to update (unless parameters besides time period were changed)
+  shouldComponentUpdate(nextProps, nextState) {
+    const periodKeys = ['period', 'start', 'end'];
+    const nextPeriod = pick(nextProps, periodKeys);
+    const currentPeriod = pick(this.props, periodKeys);
+
+    // do not update if we are zooming or if period via props does not change
+    if (nextProps.zoom || isEqualWithDates(currentPeriod, nextPeriod)) {
+      return false;
+    }
+
+    return true;
+  }
+
+  componentDidUpdate() {
+    // When component updates, make sure we sync current period state
+    // for use in zoom history
+    this.saveCurrentPeriod(this.props);
+  }
+
+  useHourlyInterval = () => {
+    const {period, start, end} = this.props;
+
+    if (typeof period === 'string') {
+      return period.endsWith('h') || period === '1d';
+    }
+
+    return moment(end).diff(start, 'hours') <= 24;
+  };
 
-    // Add a day so we go until the end of the day (e.g. next day at midnight)
-    const end = moment(firstSeries.data[axis.rangeEnd][0])
-      .add(1, 'day')
-      .subtract(1, 'second')
-      .format(moment.HTML5_FMT.DATETIME_LOCAL_MS);
+  /**
+   * Save current period state from period in props to be used
+   * in handling chart's zoom history state
+   */
+  saveCurrentPeriod = props => {
+    this.currentPeriod = {
+      period: props.period,
+      start: getDate(props.start),
+      end: getDate(props.end),
+    };
+  };
+
+  /**
+   * Sets the new period due to a zoom related action
+   *
+   * Saves the current period to an instance property so that we
+   * can control URL state when zoom history is being manipulated
+   * by the chart controls.
+   *
+   * Saves a callback function to be called after chart animation is completed
+   */
+  setPeriod = ({period, start, end}, saveHistory) => {
+    const startFormatted = getDate(start);
+    const endFormatted = getDate(end);
+
+    // Save period so that we can revert back to it when using echarts "back" navigation
+    if (saveHistory) {
+      this.history.push(this.currentPeriod);
+    }
+
+    // Callback to let parent component know zoom has changed
+    // This is required for some more perceived responsiveness since
+    // we delay updating URL state so that chart animation can finish
+    //
+    // Parent container can use this to change into a loading state before
+    // URL parameters are changed
+    if (this.props.onZoom) {
+      this.props.onZoom({
+        period,
+        start: startFormatted,
+        end: endFormatted,
+      });
+    }
+
+    this.zooming = () => {
+      this.props.actions.updateParams({
+        statsPeriod: period,
+        start: startFormatted,
+        end: endFormatted,
+        zoom: '1',
+      });
 
-    this.props.actions.updateParams({
-      statsPeriod: null,
-      start,
-      end,
+      this.saveCurrentPeriod({period, start, end});
+    };
+  };
+
+  /**
+   * Enable zoom immediately instead of having to toggle to zoom
+   */
+  handleChartReady = chart => {
+    chart.dispatchAction({
+      type: 'takeGlobalCursor',
+      key: 'dataZoomSelect',
+      dataZoomSelectActive: true,
     });
   };
 
-  handleChartClick = series => {
-    if (!series) {
+  /**
+   * Restores the chart to initial viewport/zoom level
+   *
+   * Updates URL state to reflect initial params
+   */
+  handleZoomRestore = (evt, chart) => {
+    if (!this.history.length) {
       return;
     }
 
-    const firstSeries = series;
+    this.setPeriod(this.history[0]);
+
+    // reset history
+    this.history = [];
+  };
+
+  handleDataZoom = (evt, chart) => {
+    const model = chart.getModel();
+    const {xAxis, series} = model.option;
+    const axis = xAxis[0];
+    const [firstSeries] = series;
+
+    // if `rangeStart` and `rangeEnd` are null, then we are going back
+    if (axis.rangeStart === null && axis.rangeEnd === null) {
+      const previousPeriod = this.history.pop();
 
-    const date = moment(firstSeries.name);
-    const start = date.format(moment.HTML5_FMT.DATETIME_LOCAL_MS);
+      if (!previousPeriod) {
+        return;
+      }
 
-    // Add a day so we go until the end of the day (e.g. next day at midnight)
-    const end = date
-      .add(1, 'day')
-      .subtract(1, 'second')
-      .format(moment.HTML5_FMT.DATETIME_LOCAL_MS);
+      this.setPeriod(previousPeriod);
+    } else {
+      // TODO: handle hourly intervals
+      const start = moment.utc(firstSeries.data[axis.rangeStart][0]);
 
-    this.props.actions.updateParams({
-      statsPeriod: null,
-      start,
-      end,
-    });
+      // Add a day so we go until the end of the day (e.g. next day at midnight)
+      const end = moment
+        .utc(firstSeries.data[axis.rangeEnd][0])
+        .add(1, this.useHourlyInterval() ? 'hour' : 'day')
+        .subtract(1, 'second');
+
+      this.setPeriod({period: null, start, end}, true);
+    }
+  };
+
+  /**
+   * Chart event when *any* rendering+animation finishes
+   *
+   * `this.zooming` acts as a callback function so that
+   * we can let the native zoom animation on the chart complete
+   * before we update URL state and re-render
+   */
+  handleChartFinished = () => {
+    if (typeof this.zooming === 'function') {
+      this.zooming();
+      this.zooming = null;
+    }
   };
 
   render() {
@@ -71,14 +215,10 @@ class EventsChart extends React.PureComponent {
 
     let interval = '1d';
     let xAxisOptions = {};
-    if ((typeof period === 'string' && period.endsWith('h')) || period === '1d') {
+    if (this.useHourlyInterval()) {
       interval = '1h';
       xAxisOptions.axisLabel = {
-        formatter: value =>
-          moment
-            .utc(value)
-            .local()
-            .format('LT'),
+        formatter: value => getFormattedDate(value, 'LT', {local: !utc}),
       };
     }
 
@@ -97,6 +237,7 @@ class EventsChart extends React.PureComponent {
           {({timeseriesData, previousTimeseriesData}) => {
             return (
               <LineChart
+                onChartReady={this.handleChartReady}
                 isGroupedByDate
                 useUtc={utc}
                 interval={interval === '1h' ? 'hour' : 'day'}
@@ -110,6 +251,26 @@ class EventsChart extends React.PureComponent {
                   right: '18px',
                 }}
                 xAxis={xAxisOptions}
+                dataZoom={DataZoom()}
+                toolBox={ToolBox(
+                  {},
+                  {
+                    dataZoom: {
+                      title: {
+                        zoom: '',
+                        back: '',
+                      },
+                    },
+                    restore: {
+                      title: ' ',
+                    },
+                  }
+                )}
+                onEvents={{
+                  datazoom: this.handleDataZoom,
+                  restore: this.handleZoomRestore,
+                  finished: this.handleChartFinished,
+                }}
               />
             );
           }}
@@ -128,8 +289,8 @@ const EventsChartContainer = withRouter(
             {context => (
               <EventsChart
                 {...context}
-                projects={context.project || []}
-                environments={context.environment || []}
+                project={context.project || []}
+                environment={context.environment || []}
                 {...this.props}
               />
             )}
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
index 93a4429bc5..e8f8673b35 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
@@ -1,4 +1,3 @@
-import {isEqual} from 'lodash';
 import {withRouter, Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -16,13 +15,74 @@ import space from 'app/styles/space';
 
 import EventsContext from './utils/eventsContext';
 
+class EventsTableBody extends React.PureComponent {
+  static propTypes = {
+    events: PropTypes.array,
+    organization: SentryTypes.Organization,
+    utc: PropTypes.bool,
+    projectsMap: PropTypes.object,
+  };
+
+  render() {
+    const {events, organization, utc, projectsMap} = this.props;
+
+    return events.map((event, eventIdx) => {
+      const project = projectsMap.get(event.projectID);
+      const trimmedMessage = event.message.split('\n')[0].substr(0, 100);
+      return (
+        <TableRow key={`${project.slug}-${event.eventID}`} first={eventIdx == 0}>
+          <TableData>
+            <EventTitle>
+              <Link
+                href={`/${organization.slug}/${project.slug}/events/${event.eventID}/`}
+              >
+                {trimmedMessage}
+              </Link>
+            </EventTitle>
+          </TableData>
+
+          <TableData>
+            <Project to={`/${organization.slug}/${project.slug}/`}>
+              <IdBadge
+                project={project}
+                avatarSize={16}
+                displayName={<span>{project.slug}</span>}
+                avatarProps={{consistentWidth: true}}
+              />
+            </Project>
+          </TableData>
+
+          <TableData>
+            <IdBadge user={event.user} hideEmail avatarSize={16} />
+          </TableData>
+
+          <TableData>
+            <StyledDateTime utc={utc} date={new Date(event.dateCreated)} />
+          </TableData>
+        </TableRow>
+      );
+    });
+  }
+}
+
 class EventsTable extends React.Component {
   static propTypes = {
+    // Initial loading state
     loading: PropTypes.bool,
+
+    // When initial data has been loaded, but params have changed
     reloading: PropTypes.bool,
+
+    // Special state when chart has been zoomed
+    zoomChanged: PropTypes.bool,
+
     events: PropTypes.array,
     organization: SentryTypes.Organization,
     utc: PropTypes.bool,
+
+    // When Table is in loading state due to chart zoom but has
+    // completed its new API request
+    onUpdateComplete: PropTypes.func,
   };
 
   constructor(props) {
@@ -33,41 +93,36 @@ class EventsTable extends React.Component {
   }
 
   shouldComponentUpdate(nextProps) {
+    // Update if any of these "loading"-type props change so we can display loader
     if (
       this.props.reloading !== nextProps.reloading ||
+      this.props.zoomChanged !== nextProps.zoomChanged ||
       this.props.loading !== nextProps.loading
     ) {
       return true;
     }
 
+    // If org or events has not changed, then don't re-render
+    // Shallow compare events
     if (
       this.props.organization === nextProps.organization &&
-      isEqual(this.props.events, nextProps.events)
+      this.props.events === nextProps.events
     ) {
       return false;
     }
 
+    // Otherwise update
     return true;
   }
 
-  getEventTitle(event) {
-    const {organization} = this.props;
-    const project = this.projectsMap.get(event.projectID);
-    const trimmedMessage = event.message.split('\n')[0].substr(0, 100);
-
-    if (!project) {
-      return trimmedMessage;
+  componentDidUpdate(prevProps) {
+    if (this.props.onUpdateComplete && prevProps.zoomChanged && this.props.reloading) {
+      this.props.onUpdateComplete();
     }
-
-    return (
-      <Link href={`/${organization.slug}/${project.slug}/events/${event.eventID}/`}>
-        {trimmedMessage}
-      </Link>
-    );
   }
 
   render() {
-    const {events, organization, loading, reloading, utc} = this.props;
+    const {events, organization, loading, reloading, zoomChanged, utc} = this.props;
     const hasEvents = events && !!events.length;
 
     return (
@@ -84,36 +139,13 @@ class EventsTable extends React.Component {
         {!loading && !hasEvents && <EmptyStateWarning>No events</EmptyStateWarning>}
         {hasEvents && (
           <StyledPanelBody>
-            {reloading && <StyledLoadingIndicator overlay />}
-            {events.map((event, eventIdx) => {
-              const project = this.projectsMap.get(event.projectID);
-              return (
-                <TableRow key={`${project.slug}-${event.eventID}`} first={eventIdx == 0}>
-                  <TableData>
-                    <EventTitle>{this.getEventTitle(event)}</EventTitle>
-                  </TableData>
-
-                  <TableData>
-                    <Project to={`/${organization.slug}/${project.slug}/`}>
-                      <IdBadge
-                        project={project}
-                        avatarSize={16}
-                        displayName={<span>{project.slug}</span>}
-                        avatarProps={{consistentWidth: true}}
-                      />
-                    </Project>
-                  </TableData>
-
-                  <TableData>
-                    <IdBadge user={event.user} hideEmail avatarSize={16} />
-                  </TableData>
-
-                  <TableData>
-                    <StyledDateTime utc={utc} date={new Date(event.dateCreated)} />
-                  </TableData>
-                </TableRow>
-              );
-            })}
+            {(reloading || zoomChanged) && <StyledLoadingIndicator overlay />}
+            <EventsTableBody
+              projectsMap={this.projectsMap}
+              events={events}
+              organization={organization}
+              utc={utc}
+            />
           </StyledPanelBody>
         )}
       </Panel>
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index ac8c342efa..72c7bcb5f8 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -94,6 +94,7 @@ class OrganizationEventsContainer extends React.Component {
 
       // params from URL will be a string
       utc: typeof query.utc !== 'undefined' ? query.utc === 'true' : DEFAULT_USE_UTC,
+      zoom: typeof query.zoom !== 'undefined' ? query.zoom === '1' : null,
     };
   }
 
@@ -177,13 +178,14 @@ class OrganizationEventsContainer extends React.Component {
     let newValueObj = {
       ...(defined(period) ? {period} : {start, end}),
       utc,
+      zoom: null,
     };
 
     this.updateParams(newValueObj);
   };
 
   handleUpdate = type => {
-    let newValueObj = {[type]: this.state[type]};
+    let newValueObj = {[type]: this.state[type], zoom: null};
     this.updateParams(newValueObj);
   };
 
@@ -198,6 +200,7 @@ class OrganizationEventsContainer extends React.Component {
       query: {
         ...(location.query || {}),
         query,
+        zoom: null,
       },
     });
   };
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
index 41f01be406..4531bb5629 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
@@ -12,7 +12,7 @@ const propNamesToIgnore = ['api', 'children', 'organizations', 'project', 'loadi
 const omitIgnoredProps = props =>
   omitBy(props, (value, key) => propNamesToIgnore.includes(key));
 
-class EventsRequest extends React.Component {
+class EventsRequest extends React.PureComponent {
   static propTypes = {
     /**
      * API client instance
@@ -24,12 +24,12 @@ class EventsRequest extends React.Component {
     /**
      * List of project ids to query
      */
-    projects: PropTypes.arrayOf(PropTypes.number),
+    project: PropTypes.arrayOf(PropTypes.number),
 
     /**
      * List of environments to query
      */
-    environments: PropTypes.arrayOf(PropTypes.string),
+    environment: PropTypes.arrayOf(PropTypes.string),
 
     /**
      * Relative time period for query.
diff --git a/tests/js/helpers/charts.jsx b/tests/js/helpers/charts.jsx
new file mode 100644
index 0000000000..98b23d814d
--- /dev/null
+++ b/tests/js/helpers/charts.jsx
@@ -0,0 +1,47 @@
+let data = [
+  [1543276800000, 0],
+  [1543363200000, 0],
+  [1543449600000, 36],
+  [1543536000000, 40],
+  [1543622400000, 0],
+  [1543708800000, 17],
+  [1543795200000, 104],
+  [1543881600000, 13],
+];
+let model = {
+  xAxis: [
+    {
+      rangeStart: 2,
+      rangeEnd: 5,
+    },
+  ],
+  series: [
+    {
+      data,
+    },
+  ],
+};
+
+export const chart = {
+  getModel: jest.fn(() => ({option: model})),
+};
+
+// eslint-disable-next-line
+export const doZoom = (wrapper, chart = chart) => {
+  wrapper.instance().handleDataZoom({}, chart);
+  wrapper.instance().handleChartFinished();
+};
+
+export const mockZoomRange = (rangeStart, rangeEnd) => {
+  chart.getModel.mockImplementation(() => ({
+    option: {
+      ...model,
+      xAxis: [
+        {
+          rangeStart,
+          rangeEnd,
+        },
+      ],
+    },
+  }));
+};
diff --git a/tests/js/spec/actionCreators/events.spec.jsx b/tests/js/spec/actionCreators/events.spec.jsx
index 1739fd2c95..bbb65457b7 100644
--- a/tests/js/spec/actionCreators/events.spec.jsx
+++ b/tests/js/spec/actionCreators/events.spec.jsx
@@ -7,8 +7,8 @@ describe('Events ActionCreator', function() {
   const project = TestStubs.Project();
   const opts = {
     organization,
-    projects: [project.id],
-    environments: [],
+    project: [project.id],
+    environment: [],
   };
 
   let mock;
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index d74efea7c3..5d1157e927 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -1,7 +1,13 @@
 import React from 'react';
-import {mount} from 'enzyme';
 
+import {EventsChart} from 'app/views/organizationEvents/eventsChart';
+import {EventsTable} from 'app/views/organizationEvents/eventsTable';
 import {OrganizationEvents, parseRowFromLinks} from 'app/views/organizationEvents/events';
+import {OrganizationEventsContainer} from 'app/views/organizationEvents';
+import {getLocalDateObject} from 'app/utils/dates';
+import {mount} from 'enzyme';
+
+import {chart, doZoom} from '../../../helpers/charts';
 
 jest.mock('app/utils/withLatestContext');
 
@@ -15,11 +21,19 @@ const pageTwoLinks =
 
 describe('OrganizationEventsErrors', function() {
   const project = TestStubs.Project({isMember: true});
-  const org = TestStubs.Organization({projects: [project]});
+  const org = TestStubs.Organization({projects: [project], features: ['global-views']});
+  const routerContext = TestStubs.routerContext([{organization: org}]);
   let eventsMock;
   let eventsStatsMock;
   let eventsMetaMock;
 
+  beforeAll(function() {
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/environments/`,
+      body: TestStubs.Environments(),
+    });
+  });
+
   beforeEach(function() {
     // Search bar makes this request when mounted
     MockApiClient.addMockResponse({
@@ -56,7 +70,7 @@ describe('OrganizationEventsErrors', function() {
     });
     let wrapper = mount(
       <OrganizationEvents organization={org} location={{query: {}}} />,
-      TestStubs.routerContext()
+      routerContext
     );
     await tick();
     wrapper.update();
@@ -69,7 +83,7 @@ describe('OrganizationEventsErrors', function() {
   it('renders events table', async function() {
     let wrapper = mount(
       <OrganizationEvents organization={org} location={{query: {}}} />,
-      TestStubs.routerContext()
+      routerContext
     );
     await tick();
     wrapper.update();
@@ -92,7 +106,7 @@ describe('OrganizationEventsErrors', function() {
           },
         }}
       />,
-      TestStubs.routerContext()
+      routerContext
     );
 
     expect(eventsMock).toHaveBeenCalledWith(
@@ -127,6 +141,96 @@ describe('OrganizationEventsErrors', function() {
       })
     );
   });
+
+  describe('Events Integration', function() {
+    const location = {
+      pathname: '/organizations/org-slug/events/',
+      query: {},
+    };
+    const router = TestStubs.router({
+      location,
+    });
+    let chartRender = jest.spyOn(EventsChart.prototype, 'render');
+    let tableRender = jest.spyOn(EventsTable.prototype, 'render');
+    let wrapper;
+    let newParams;
+
+    beforeEach(function() {
+      chartRender.mockClear();
+      tableRender.mockClear();
+
+      wrapper = mount(
+        <OrganizationEventsContainer
+          router={router}
+          organization={org}
+          selection={{projects: []}}
+        >
+          <OrganizationEvents
+            location={location}
+            organization={org}
+            selection={{projects: []}}
+          />
+        </OrganizationEventsContainer>,
+        routerContext
+      );
+    });
+
+    it('renders', function() {
+      expect(chartRender).toHaveBeenCalledTimes(1);
+      expect(tableRender).toHaveBeenCalledTimes(1);
+    });
+
+    it('zooms using chart', async function() {
+      expect(tableRender).toHaveBeenCalledTimes(1);
+      expect(chartRender).toHaveBeenCalledTimes(1);
+
+      await tick();
+      wrapper.update();
+
+      doZoom(wrapper.find('EventsChart').first(), chart);
+      wrapper.update();
+
+      // After zooming, chart should not re-render, but table does
+      expect(chartRender).toHaveBeenCalledTimes(1);
+
+      // Table should be in loading state
+      expect(tableRender).toHaveBeenCalledTimes(2);
+      expect(wrapper.find('EventsTable').prop('zoomChanged')).toBe(true);
+
+      newParams = {
+        zoom: '1',
+        start: '2018-11-29T00:00:00',
+        end: '2018-12-02T23:59:59',
+      };
+
+      expect(router.push).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          query: newParams,
+        })
+      );
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            ...router.location,
+            query: newParams,
+          },
+        },
+      });
+
+      wrapper.update();
+      expect(wrapper.state('start')).toEqual(getLocalDateObject('2018-11-29T00:00:00'));
+      expect(wrapper.state('end')).toEqual(getLocalDateObject('2018-12-02T23:59:59'));
+
+      expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(
+        getLocalDateObject('2018-11-29T00:00:00')
+      );
+      expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(
+        getLocalDateObject('2018-12-02T23:59:59')
+      );
+    });
+  });
 });
 
 describe('parseRowFromLinks', function() {
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
new file mode 100644
index 0000000000..7ebd43517f
--- /dev/null
+++ b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
@@ -0,0 +1,158 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {EventsChart} from 'app/views/organizationEvents/eventsChart';
+import {getLocalDateObject} from 'app/utils/dates';
+import {chart, doZoom, mockZoomRange} from '../../../helpers/charts';
+
+jest.mock('app/views/organizationEvents/utils/eventsRequest', () => jest.fn(() => null));
+
+describe('EventsChart', function() {
+  let wrapper;
+  let org = TestStubs.Organization();
+  let updateParams = jest.fn();
+  let render = jest.spyOn(EventsChart.prototype, 'render');
+
+  beforeEach(function() {
+    render.mockClear();
+    mockZoomRange(2, 5);
+    wrapper = mount(
+      <EventsChart
+        api={MockApiClient}
+        location={{query: {}}}
+        organization={org}
+        project={[]}
+        environment={[]}
+        actions={{updateParams}}
+        period="14d"
+        start={null}
+        end={null}
+        utc={false}
+      />
+    );
+  });
+
+  it('renders', function() {
+    expect(render).toHaveBeenCalledTimes(1);
+  });
+
+  it('re-renders if period from props changes', function() {
+    wrapper.setProps({period: '7d'});
+    wrapper.update();
+    expect(render).toHaveBeenCalledTimes(2);
+  });
+
+  it('re-renders if project from props changes', function() {
+    wrapper.setProps({project: [2]});
+    wrapper.update();
+    expect(render).toHaveBeenCalledTimes(1);
+  });
+
+  it('does not re-render if zoomed', function() {
+    doZoom(wrapper, chart);
+    let newParams = {
+      statsPeriod: null,
+      start: '2018-11-29T00:00:00',
+      end: '2018-12-02T23:59:59',
+      zoom: '1',
+    };
+    expect(updateParams).toHaveBeenCalledWith(newParams);
+    wrapper.setProps({
+      period: newParams.statsPeriod,
+      start: getLocalDateObject(newParams.start),
+      end: getLocalDateObject(newParams.end),
+      zoom: '1',
+    });
+    wrapper.update();
+
+    expect(render).toHaveBeenCalledTimes(1);
+  });
+
+  it('has correct history entries when zooming', function() {
+    let newParams;
+
+    doZoom(wrapper, chart);
+    expect(wrapper.instance().history).toEqual([
+      {
+        period: '14d',
+        start: null,
+        end: null,
+      },
+    ]);
+    expect(wrapper.instance().currentPeriod.period).toEqual(null);
+    expect(wrapper.instance().currentPeriod.start).toEqual('2018-11-29T00:00:00');
+    expect(wrapper.instance().currentPeriod.end).toEqual('2018-12-02T23:59:59');
+
+    // Zoom again
+    mockZoomRange(3, 5);
+    doZoom(wrapper, chart);
+    expect(wrapper.instance().currentPeriod.period).toEqual(null);
+    expect(wrapper.instance().currentPeriod.start).toEqual('2018-11-30T00:00:00');
+    expect(wrapper.instance().currentPeriod.end).toEqual('2018-12-02T23:59:59');
+
+    expect(wrapper.instance().history[0]).toEqual({
+      period: '14d',
+      start: null,
+      end: null,
+    });
+    expect(wrapper.instance().history[1].start).toEqual('2018-11-29T00:00:00');
+    expect(wrapper.instance().history[1].end).toEqual('2018-12-02T23:59:59');
+
+    // go back in history
+    mockZoomRange(null, null);
+    doZoom(wrapper, chart);
+    expect(wrapper.instance().currentPeriod.period).toEqual(null);
+    expect(wrapper.instance().currentPeriod.start).toEqual('2018-11-29T00:00:00');
+    expect(wrapper.instance().currentPeriod.end).toEqual('2018-12-02T23:59:59');
+    newParams = {
+      statsPeriod: null,
+      start: '2018-11-29T00:00:00',
+      end: '2018-12-02T23:59:59',
+      zoom: '1',
+    };
+    expect(updateParams).toHaveBeenCalledWith(newParams);
+    wrapper.setProps({
+      period: newParams.statsPeriod,
+      start: getLocalDateObject(newParams.start),
+      end: getLocalDateObject(newParams.end),
+      zoom: '1',
+    });
+    wrapper.update();
+
+    expect(render).toHaveBeenCalledTimes(1);
+  });
+
+  it('updates url params when restoring zoom level on chart', function() {
+    let newParams;
+
+    doZoom(wrapper, chart);
+    // Zoom again
+    mockZoomRange(3, 5);
+    doZoom(wrapper, chart);
+    mockZoomRange(4, 5);
+    doZoom(wrapper, chart);
+
+    expect(wrapper.instance().history).toHaveLength(3);
+
+    // Restore history
+    wrapper.instance().handleZoomRestore();
+    wrapper.instance().handleChartFinished();
+    expect(wrapper.instance().currentPeriod).toEqual({
+      period: '14d',
+      start: null,
+      end: null,
+    });
+    newParams = {
+      statsPeriod: '14d',
+      start: null,
+      end: null,
+      zoom: '1',
+    };
+    expect(updateParams).toHaveBeenCalledWith(newParams);
+    wrapper.setProps(newParams);
+    wrapper.update();
+
+    expect(wrapper.instance().history).toHaveLength(0);
+    expect(render).toHaveBeenCalledTimes(1);
+  });
+});
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index cb0fa569bf..caeb147966 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -12,6 +12,7 @@ describe('OrganizationEvents', function() {
     features: ['global-views'],
     projects: [project, TestStubs.Project({isMember: true, slug: 'new-project', id: 3})],
   });
+  const routerContext = TestStubs.routerContext([{organization}]);
 
   beforeAll(async function() {
     MockApiClient.addMockResponse({
@@ -27,334 +28,336 @@ describe('OrganizationEvents', function() {
     await tick();
   });
 
-  beforeEach(function() {
-    router = TestStubs.router({
-      location: {
-        pathname: '/organizations/org-slug/events/',
-        query: {},
-      },
+  describe('Header', function() {
+    beforeEach(function() {
+      router = TestStubs.router({
+        location: {
+          pathname: '/organizations/org-slug/events/',
+          query: {},
+        },
+      });
+
+      wrapper = mount(
+        <OrganizationEventsContainer
+          router={router}
+          organization={organization}
+          selection={{projects: []}}
+        >
+          <div />
+        </OrganizationEventsContainer>,
+        routerContext
+      );
     });
 
-    wrapper = mount(
-      <OrganizationEventsContainer
-        router={router}
-        organization={organization}
-        selection={{projects: []}}
-      >
-        <div />
-      </OrganizationEventsContainer>,
-      TestStubs.routerContext([
-        {
-          organization,
-        },
-      ])
-    );
-  });
+    it('renders', function() {
+      expect(wrapper.find('OrganizationEventsContent')).toHaveLength(1);
+    });
 
-  it('renders', function() {
-    expect(wrapper.find('OrganizationEventsContent')).toHaveLength(1);
-  });
+    it('updates router when changing environments', async function() {
+      expect(wrapper.state('environment')).toEqual([]);
 
-  it('updates router when changing environments', async function() {
-    expect(wrapper.state('environment')).toEqual([]);
+      wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+      await tick();
+      wrapper.update();
 
-    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    await tick();
-    wrapper.update();
-
-    wrapper
-      .find('EnvironmentSelectorItem')
-      .at(0)
-      .simulate('click');
-
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        environment: ['production'],
-        statsPeriod: '14d',
-      },
-    });
+      wrapper
+        .find('EnvironmentSelectorItem')
+        .at(0)
+        .simulate('click');
 
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          ...router.location,
-          query: {
-            environment: ['production'],
-            statsPeriod: '14d',
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          environment: ['production'],
+          statsPeriod: '14d',
+        },
+      });
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            ...router.location,
+            query: {
+              environment: ['production'],
+              statsPeriod: '14d',
+            },
           },
         },
-      },
-    });
-
-    expect(wrapper.state('queryValues')).toEqual(
-      expect.objectContaining({environment: ['production']})
-    );
-
-    // Select a second environment, "staging"
-    await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    wrapper.update();
-    wrapper
-      .find('EnvironmentSelectorItem')
-      .at(1)
-      .find('MultiSelect')
-      .simulate('click');
-    // selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
-    expect(wrapper.state('environment')).toEqual(['production', 'staging']);
-
-    // close dropdown
-    wrapper
-      .find('MultipleEnvironmentSelector StyledInput')
-      .simulate('keyDown', {key: 'Escape'});
-    expect(router.push).toHaveBeenLastCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        environment: ['production', 'staging'],
-        statsPeriod: '14d',
-      },
-    });
-
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          ...router.location,
-          query: {
-            environment: ['production', 'staging'],
-            statsPeriod: '14d',
+      });
+
+      expect(wrapper.state('queryValues')).toEqual(
+        expect.objectContaining({environment: ['production']})
+      );
+
+      // Select a second environment, "staging"
+      await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+      wrapper.update();
+      wrapper
+        .find('EnvironmentSelectorItem')
+        .at(1)
+        .find('MultiSelect')
+        .simulate('click');
+      // selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
+      expect(wrapper.state('environment')).toEqual(['production', 'staging']);
+
+      // close dropdown
+      wrapper
+        .find('MultipleEnvironmentSelector StyledInput')
+        .simulate('keyDown', {key: 'Escape'});
+      expect(router.push).toHaveBeenLastCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          environment: ['production', 'staging'],
+          statsPeriod: '14d',
+        },
+      });
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            ...router.location,
+            query: {
+              environment: ['production', 'staging'],
+              statsPeriod: '14d',
+            },
           },
         },
-      },
-    });
-
-    expect(wrapper.state('queryValues')).toEqual(
-      expect.objectContaining({environment: ['production', 'staging']})
-    );
-
-    // Can clear
-    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    await tick();
-    wrapper.update();
-    wrapper.find('MultipleEnvironmentSelector HeaderItem StyledClose').simulate('click');
-
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          ...router.location,
-          query: {
-            environment: [],
-            statsPeriod: '14d',
+      });
+
+      expect(wrapper.state('queryValues')).toEqual(
+        expect.objectContaining({environment: ['production', 'staging']})
+      );
+
+      // Can clear
+      wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+      await tick();
+      wrapper.update();
+      wrapper
+        .find('MultipleEnvironmentSelector HeaderItem StyledClose')
+        .simulate('click');
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            ...router.location,
+            query: {
+              environment: [],
+              statsPeriod: '14d',
+            },
           },
         },
-      },
-    });
+      });
 
-    expect(wrapper.state('queryValues')).toEqual(
-      expect.objectContaining({environment: []})
-    );
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        environment: [],
-        statsPeriod: '14d',
-      },
+      expect(wrapper.state('queryValues')).toEqual(
+        expect.objectContaining({environment: []})
+      );
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          environment: [],
+          statsPeriod: '14d',
+        },
+      });
     });
-  });
 
-  it('updates router when changing projects', function() {
-    expect(wrapper.state('project')).toEqual([]);
+    it('updates router when changing projects', function() {
+      expect(wrapper.state('project')).toEqual([]);
 
-    wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+      wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
-    wrapper
-      .find('MultipleProjectSelector AutoCompleteItem')
-      .at(0)
-      .simulate('click');
-
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        project: [2],
-        statsPeriod: '14d',
-      },
-    });
+      wrapper
+        .find('MultipleProjectSelector AutoCompleteItem')
+        .at(0)
+        .simulate('click');
 
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          pathname: '/organizations/org-slug/events/',
-          query: {
-            project: [2],
-            statsPeriod: '14d',
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          project: [2],
+          statsPeriod: '14d',
+        },
+      });
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            pathname: '/organizations/org-slug/events/',
+            query: {
+              project: [2],
+              statsPeriod: '14d',
+            },
           },
         },
-      },
-    });
+      });
 
-    expect(wrapper.state('queryValues')).toEqual(expect.objectContaining({project: [2]}));
-  });
+      expect(wrapper.state('queryValues')).toEqual(
+        expect.objectContaining({project: [2]})
+      );
+    });
 
-  it('selects multiple projects', async function() {
-    expect(wrapper.state('project')).toEqual([]);
+    it('selects multiple projects', async function() {
+      expect(wrapper.state('project')).toEqual([]);
 
-    wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
+      wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
-    wrapper
-      .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
-      .at(0)
-      .simulate('click');
-    expect(wrapper.state('project')).toEqual([2]);
+      wrapper
+        .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
+        .at(0)
+        .simulate('click');
+      expect(wrapper.state('project')).toEqual([2]);
 
-    wrapper
-      .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
-      .at(1)
-      .simulate('click');
-    expect(wrapper.state('project')).toEqual([2, 3]);
+      wrapper
+        .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
+        .at(1)
+        .simulate('click');
+      expect(wrapper.state('project')).toEqual([2, 3]);
 
-    wrapper.find('MultipleProjectSelector StyledChevron').simulate('click');
+      wrapper.find('MultipleProjectSelector StyledChevron').simulate('click');
 
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        project: [2, 3],
-        statsPeriod: '14d',
-      },
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          project: [2, 3],
+          statsPeriod: '14d',
+        },
+      });
     });
-  });
 
-  it('changes to absolute time (utc is default)', async function() {
-    const start = new Date('2017-10-01T00:00:00.000Z');
-    const end = new Date('2017-10-01T23:59:59.000Z');
+    it('changes to absolute time (utc is default)', async function() {
+      const start = new Date('2017-10-01T00:00:00.000Z');
+      const end = new Date('2017-10-01T23:59:59.000Z');
 
-    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
-    await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+      await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
 
-    // Oct 1st
-    wrapper
-      .find('DayCell')
-      .at(0)
-      .simulate('mouseUp');
+      // Oct 1st
+      wrapper
+        .find('DayCell')
+        .at(0)
+        .simulate('mouseUp');
 
-    expect(wrapper.state('period')).toEqual(null);
-    expect(wrapper.state('start')).toEqual(start);
-    expect(wrapper.state('end')).toEqual(end);
+      expect(wrapper.state('period')).toEqual(null);
+      expect(wrapper.state('start')).toEqual(start);
+      expect(wrapper.state('end')).toEqual(end);
 
-    wrapper.find('TimeRangeSelector StyledChevron').simulate('click');
+      wrapper.find('TimeRangeSelector StyledChevron').simulate('click');
 
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        start: '2017-10-01T00:00:00',
-        end: '2017-10-01T23:59:59',
-        utc: 'true',
-      },
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          start: '2017-10-01T00:00:00',
+          end: '2017-10-01T23:59:59',
+          utc: 'true',
+        },
+      });
     });
-  });
-
-  it('does not update router when toggling environment selector without changes', async function() {
-    expect(router.push).toHaveBeenCalledTimes(1);
 
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          ...router.location,
-          query: {
-            environment: ['production'],
-            statsPeriod: '14d',
-            utc: 'true',
+    it('does not update router when toggling environment selector without changes', async function() {
+      expect(router.push).toHaveBeenCalledTimes(1);
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            ...router.location,
+            query: {
+              environment: ['production'],
+              statsPeriod: '14d',
+              utc: 'true',
+            },
           },
         },
-      },
+      });
+
+      // Toggle MultipleProjectSelector
+      wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+      wrapper
+        .find('MultipleEnvironmentSelector StyledInput')
+        .simulate('keyDown', {key: 'Escape'});
+      expect(router.push).toHaveBeenCalledTimes(1);
     });
 
-    // Toggle MultipleProjectSelector
-    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    wrapper
-      .find('MultipleEnvironmentSelector StyledInput')
-      .simulate('keyDown', {key: 'Escape'});
-    expect(router.push).toHaveBeenCalledTimes(1);
-  });
-
-  it('updates router when changing periods', async function() {
-    expect(wrapper.state('start')).toEqual(null);
-    expect(wrapper.state('end')).toEqual(null);
-    expect(wrapper.state('period')).toEqual('14d');
-
-    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+    it('updates router when changing periods', async function() {
+      expect(wrapper.state('start')).toEqual(null);
+      expect(wrapper.state('end')).toEqual(null);
+      expect(wrapper.state('period')).toEqual('14d');
 
-    expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(0);
-    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
-    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        end: '2017-10-17T02:41:20',
-        start: '2017-10-03T02:41:20',
-        utc: 'true',
-      },
-    });
+      expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(0);
+      wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          pathname: '/organizations/org-slug/events/',
-          query: {
-            end: '2017-10-17T02:41:20',
-            start: '2017-10-03T02:41:20',
-            utc: 'true',
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          end: '2017-10-17T02:41:20',
+          start: '2017-10-03T02:41:20',
+          utc: 'true',
+        },
+      });
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            pathname: '/organizations/org-slug/events/',
+            query: {
+              end: '2017-10-17T02:41:20',
+              start: '2017-10-03T02:41:20',
+              utc: 'true',
+            },
           },
         },
-      },
-    });
-
-    expect(wrapper.state('queryValues')).toEqual(
-      expect.objectContaining({
-        end: new Date('2017-10-17T02:41:20.000Z'),
-        start: new Date('2017-10-03T02:41:20.000Z'),
-        utc: true,
-      })
-    );
-
-    // Can switch back to relative date
-    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
-    wrapper.find('SelectorItem[value="7d"]').simulate('click');
-    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
-
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/events/',
-      query: {
-        statsPeriod: '7d',
-        utc: 'true',
-      },
-    });
-
-    wrapper.setProps({
-      router: {
-        ...router,
-        location: {
-          pathname: '/organizations/org-slug/events/',
-          query: {
-            statsPeriod: '7d',
-            utc: 'true',
+      });
+
+      expect(wrapper.state('queryValues')).toEqual(
+        expect.objectContaining({
+          end: new Date('2017-10-17T02:41:20.000Z'),
+          start: new Date('2017-10-03T02:41:20.000Z'),
+          utc: true,
+        })
+      );
+
+      // Can switch back to relative date
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('SelectorItem[value="7d"]').simulate('click');
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+      expect(router.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/events/',
+        query: {
+          statsPeriod: '7d',
+          utc: 'true',
+        },
+      });
+
+      wrapper.setProps({
+        router: {
+          ...router,
+          location: {
+            pathname: '/organizations/org-slug/events/',
+            query: {
+              statsPeriod: '7d',
+              utc: 'true',
+            },
           },
         },
-      },
+      });
+
+      expect(wrapper.state('queryValues')).toEqual(
+        expect.objectContaining({
+          end: null,
+          start: null,
+          period: '7d',
+          utc: true,
+        })
+      );
     });
-
-    expect(wrapper.state('queryValues')).toEqual(
-      expect.objectContaining({
-        end: null,
-        start: null,
-        period: '7d',
-        utc: true,
-      })
-    );
   });
 });
