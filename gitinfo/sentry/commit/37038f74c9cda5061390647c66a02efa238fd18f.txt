commit 37038f74c9cda5061390647c66a02efa238fd18f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Mar 19 11:26:57 2018 -0700

    Revert "ref(tagstore): Replacement all managers to reduce query loads from UPDATEs"
    
    This reverts commit c0a8772aebc4d91e322e8c6975877dce570588c7.

diff --git a/src/sentry/tagstore/query.py b/src/sentry/tagstore/query.py
deleted file mode 100644
index 017d85e2e7..0000000000
--- a/src/sentry/tagstore/query.py
+++ /dev/null
@@ -1,40 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.db.models import sql
-from django.db.models.query import QuerySet
-from sentry.db.models import BaseManager
-
-
-class NoTransactionUpdateQuerySet(QuerySet):
-    def update(self, **kwargs):
-        """
-        Updates all elements in the current QuerySet, setting all the given
-        fields to the appropriate values.
-        """
-        # HACK(mattrobenolt): This is copy/pasted directly from
-        # https://github.com/django/django/blob/stable/1.6.x/django/db/models/query.py#L482-L496
-        # with 1 important change. It removes the `transaction.commit_on_success_unless_managed`
-        # block. The effect of this is we now can perform a simple `UPDATE` query without
-        # incurring the overhead of 4 statements and an explicit transaction. This is a safe
-        # assumption made by Django, but we can forego it for performance.
-        assert self.query.can_filter(), \
-            "Cannot update a query once a slice has been taken."
-        self._for_write = True
-        query = self.query.clone(sql.UpdateQuery)
-        query.add_update_values(kwargs)
-        rows = query.get_compiler(self.db).execute_sql(None)
-        self._result_cache = None
-        return rows
-    update.alters_data = True
-
-
-class TagStoreManager(BaseManager):
-    def __init__(self, select_related=()):
-        self._always_select_related = select_related
-        super(TagStoreManager, self).__init__()
-
-    def get_queryset(self):
-        qs = NoTransactionUpdateQuerySet(self.model, using=self._db)
-        if self._always_select_related:
-            qs = qs.select_related(*self._always_select_related)
-        return qs
diff --git a/src/sentry/tagstore/v2/models/grouptagkey.py b/src/sentry/tagstore/v2/models/grouptagkey.py
index d26f2e4e31..3ae8d6dac4 100644
--- a/src/sentry/tagstore/v2/models/grouptagkey.py
+++ b/src/sentry/tagstore/v2/models/grouptagkey.py
@@ -13,9 +13,13 @@ from django.db import router, transaction, DataError, connections
 
 from sentry.api.serializers import Serializer, register
 from sentry.db.models import (
-    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, FlexibleForeignKey, sane_repr
+    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, BaseManager, FlexibleForeignKey, sane_repr
 )
-from sentry.tagstore.query import TagStoreManager
+
+
+class GroupTagKeyManager(BaseManager):
+    def get_queryset(self):
+        return super(GroupTagKeyManager, self).get_queryset().select_related('_key')
 
 
 class GroupTagKey(Model):
@@ -31,7 +35,7 @@ class GroupTagKey(Model):
     _key = FlexibleForeignKey('tagstore.TagKey', db_column='key_id')
     values_seen = BoundedPositiveIntegerField(default=0)
 
-    objects = TagStoreManager(select_related=('_key',))
+    objects = GroupTagKeyManager()
 
     class Meta:
         app_label = 'tagstore'
diff --git a/src/sentry/tagstore/v2/models/grouptagvalue.py b/src/sentry/tagstore/v2/models/grouptagvalue.py
index 8d63d396d9..da5ff21f42 100644
--- a/src/sentry/tagstore/v2/models/grouptagvalue.py
+++ b/src/sentry/tagstore/v2/models/grouptagvalue.py
@@ -14,9 +14,14 @@ from django.utils import timezone
 
 from sentry.api.serializers import Serializer, register
 from sentry.db.models import (
-    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, FlexibleForeignKey, sane_repr
+    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, BaseManager, FlexibleForeignKey, sane_repr
 )
-from sentry.tagstore.query import TagStoreManager
+
+
+class GroupTagValueManager(BaseManager):
+    def get_queryset(self):
+        return super(GroupTagValueManager, self)\
+            .get_queryset().select_related('_value', '_key')
 
 
 class GroupTagValue(Model):
@@ -36,7 +41,7 @@ class GroupTagValue(Model):
     first_seen = models.DateTimeField(
         default=timezone.now, db_index=True, null=True)
 
-    objects = TagStoreManager(select_related=('_value', '_key'))
+    objects = GroupTagValueManager()
 
     class Meta:
         app_label = 'tagstore'
diff --git a/src/sentry/tagstore/v2/models/tagkey.py b/src/sentry/tagstore/v2/models/tagkey.py
index bc08c2d136..f94edcd652 100644
--- a/src/sentry/tagstore/v2/models/tagkey.py
+++ b/src/sentry/tagstore/v2/models/tagkey.py
@@ -15,7 +15,6 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.api.serializers import Serializer, register
 from sentry.tagstore import TagKeyStatus
-from sentry.tagstore.query import TagStoreManager
 from sentry.constants import MAX_TAG_KEY_LENGTH
 from sentry.db.models import (Model, BoundedPositiveIntegerField, BoundedBigIntegerField, sane_repr)
 from sentry.utils.cache import cache
@@ -41,8 +40,6 @@ class TagKey(Model):
         default=TagKeyStatus.VISIBLE
     )
 
-    objects = TagStoreManager()
-
     class Meta:
         app_label = 'tagstore'
         unique_together = (('project_id', 'environment_id', 'key'), )
diff --git a/src/sentry/tagstore/v2/models/tagvalue.py b/src/sentry/tagstore/v2/models/tagvalue.py
index bc20a6947a..3d4a892772 100644
--- a/src/sentry/tagstore/v2/models/tagvalue.py
+++ b/src/sentry/tagstore/v2/models/tagvalue.py
@@ -16,13 +16,17 @@ from sentry.api.serializers import Serializer, register
 from sentry.constants import MAX_TAG_VALUE_LENGTH
 from sentry.db.models import (
     Model, BoundedPositiveIntegerField, BoundedBigIntegerField, GzippedDictField,
-    FlexibleForeignKey, sane_repr
+    BaseManager, FlexibleForeignKey, sane_repr
 )
-from sentry.tagstore.query import TagStoreManager
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
 
 
+class TagValueManager(BaseManager):
+    def get_queryset(self):
+        return super(TagValueManager, self).get_queryset().select_related('_key')
+
+
 class TagValue(Model):
     """
     Stores references to available filters.
@@ -39,7 +43,7 @@ class TagValue(Model):
     first_seen = models.DateTimeField(
         default=timezone.now, db_index=True, null=True)
 
-    objects = TagStoreManager(select_related=('_key',))
+    objects = TagValueManager()
 
     class Meta:
         app_label = 'tagstore'
