commit 34d9645a5952d154bc2db4e96cc1b197c81691bd
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri May 13 18:24:02 2016 +0200

    Added basic 2fa sign-in flow

diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index 495b9d09a6..6dcbce6e38 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -5,6 +5,7 @@ from django.contrib.auth.models import AnonymousUser
 from rest_framework.response import Response
 
 from sentry.api.authentication import QuietBasicAuthentication
+from sentry.models import Authenticator
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
 from sentry.utils import auth
@@ -54,6 +55,14 @@ class AuthIndexEndpoint(Endpoint):
         if not request.user.is_authenticated():
             return Response(status=400)
 
+        # If 2fa login is enabled then we cannot sign in with username and
+        # password through this api endpoint.
+        if Authenticator.objects.user_has_2fa(request.user):
+            return Response({
+                '2fa_required': True,
+                'message': 'Cannot sign-in with basic auth when 2fa is enabled.'
+            }, status=400)
+
         # Must use the real request object that Django knows about
         auth.login(request._request, request.user)
 
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 8c8bd41a5c..789e7ac4de 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -103,7 +103,7 @@ class RecoveryCodeInterface(AuthenticatorInterface):
 
     def validate_otp(self, otp):
         mask = self.config['used']
-        code = otp.strip().replace('-', '')
+        code = otp.strip().replace('-', '').upper()
         for idx, ref_code in enumerate(self.codes):
             if code == ref_code:
                 if mask & (1 << idx):
diff --git a/src/sentry/templates/sentry/twofactor.html b/src/sentry/templates/sentry/twofactor.html
new file mode 100644
index 0000000000..99389e0bf3
--- /dev/null
+++ b/src/sentry/templates/sentry/twofactor.html
@@ -0,0 +1,32 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Two-Factor Authentication" %} | {{ block.super }}{% endblock %}
+
+{% block auth_main %}
+  <div class="tab-content">
+    <div class="tab-pane active" id="login">
+      <h3>Two-Factor Authentication</h3>
+      <p>
+        Your account is protected with two-factor authentication.  To continue
+        with the sign-in you need to provide the access code from your
+        authenticator or a recovery code if you have one.
+      </p>
+      <form class="form-stacked" action="" method="post" autocomplete="off">
+        {% csrf_token %}
+
+        {{ form|as_crispy_errors }}
+
+        {% for field in form %}
+          {{ field|as_crispy_field }}
+        {% endfor %}
+
+        <fieldset class="form-actions">
+          <button type="submit" class="btn btn-primary">{% trans "Continue" %}</button>
+        </fieldset>
+      </form>
+    </div>
+  </div>
+{% endblock %}
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 551ab4edbc..e2dca76600 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -7,6 +7,7 @@ sentry.utils.auth
 """
 from __future__ import absolute_import
 
+import time
 import logging
 
 from django.conf import settings
@@ -14,7 +15,7 @@ from django.contrib.auth import login as _login
 from django.contrib.auth.backends import ModelBackend
 from django.core.urlresolvers import reverse
 
-from sentry.models import User
+from sentry.models import User, Authenticator
 
 logger = logging.getLogger('sentry.auth')
 
@@ -38,9 +39,34 @@ def get_auth_providers():
     ]
 
 
+def get_pending_2fa_user(request):
+    rv = request.session.get('_pending_2fa')
+    if rv is None:
+        return
+
+    user_id, created_at = rv
+    if created_at < time.time() - 60 * 5:
+        return None
+
+    try:
+        return User.objects.get(pk=user_id)
+    except User.DoesNotExist:
+        pass
+
+
+def has_pending_2fa(request):
+    return request.session.get('_pending_2fa') is not None
+
+
 def get_login_redirect(request, default=None):
     if default is None:
         default = reverse('sentry')
+
+    # If there is a pending 2fa authentication bound to the session then
+    # we need to go to the 2fa dialog.
+    if has_pending_2fa(request):
+        return reverse('sentry-2fa-dialog')
+
     login_url = request.session.pop('_next', None) or default
     if login_url.startswith(('http://', 'https://')):
         login_url = default
@@ -70,9 +96,19 @@ def find_users(username, with_valid_password=True):
     return []
 
 
-def login(request, user):
-    log_auth_success(request, user.username)
-    _login(request, user)
+def login(request, user, passed_2fa=False):
+    has_2fa = Authenticator.objects.user_has_2fa(user)
+    if has_2fa and not passed_2fa:
+        request.session['_pending_2fa'] = [user.id, time.time()]
+    else:
+        # If there is no authentication backend, just attach the first
+        # one and hope it goes through.  This apparently is a thing we
+        # have been doing for a long time, just moved it to a more
+        # reasonable place.
+        if not hasattr(user, 'backend'):
+            user.backend = settings.AUTHENTICATION_BACKENDS[0]
+        _login(request, user)
+        log_auth_success(request, user.username)
 
 
 def log_auth_success(request, username):
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 0c50a1bfc8..eca7ba8cc7 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -413,3 +413,11 @@ class ProjectEmailOptionsForm(forms.Form):
         else:
             UserOption.objects.unset_value(
                 self.user, self.project, 'mail:email')
+
+
+class TwoFactorForm(forms.Form):
+    otp = forms.CharField(
+        label=_('One-time password'), max_length=20, widget=forms.TextInput(
+            attrs={'placeholder': _('Code from authenticator'),
+        }),
+    )
diff --git a/src/sentry/web/frontend/twofactor.py b/src/sentry/web/frontend/twofactor.py
new file mode 100644
index 0000000000..1d3b09e14c
--- /dev/null
+++ b/src/sentry/web/frontend/twofactor.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from django.http import HttpResponseRedirect
+from django.core.urlresolvers import reverse
+
+from sentry.web.frontend.base import BaseView
+from sentry.web.forms.accounts import TwoFactorForm
+from sentry.web.helpers import render_to_response
+from sentry.utils import auth
+from sentry.models import Authenticator
+
+
+class TwoFactorAuthView(BaseView):
+    auth_required = False
+
+    def perform_signin(self, request, user):
+        auth.login(request, user, passed_2fa=True)
+        return HttpResponseRedirect(auth.get_login_redirect(request))
+
+    def handle(self, request):
+        user = auth.get_pending_2fa_user(request)
+        if user is None or request.user.is_authenticated():
+            return HttpResponseRedirect(reverse('sentry'))
+
+        # If for whatever reason we ended up here but the user has no 2FA
+        # enabled, we just continue successfully.
+        if not Authenticator.objects.user_has_2fa(user):
+            return self.perform_signin(request, user)
+
+        otp = request.POST.get('otp')
+        if otp:
+            if Authenticator.objects.validate_otp(user, otp):
+                return self.perform_signin(request, user)
+
+        form = TwoFactorForm()
+        return render_to_response('sentry/twofactor.html', {
+            'form': form,
+        }, request, status=200)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index f86af7658c..df87271e89 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -18,6 +18,7 @@ from sentry.web.frontend.accept_organization_invite import \
     AcceptOrganizationInviteView
 from sentry.web.frontend.admin_queue import AdminQueueView
 from sentry.web.frontend.auth_login import AuthLoginView
+from sentry.web.frontend.twofactor import TwoFactorAuthView
 from sentry.web.frontend.auth_logout import AuthLogoutView
 from sentry.web.frontend.auth_organization_login import \
     AuthOrganizationLoginView
@@ -160,6 +161,8 @@ urlpatterns += patterns(
         name='sentry-auth-link-identity'),
     url(r'^auth/login/$', AuthLoginView.as_view(),
         name='sentry-login'),
+    url(r'^auth/login/2fa/$', TwoFactorAuthView.as_view(),
+        name='sentry-2fa-dialog'),
     url(r'^auth/login/(?P<organization_slug>[^/]+)/$', AuthOrganizationLoginView.as_view(),
         name='sentry-auth-organization'),
     url(r'^auth/sso/$', AuthProviderLoginView.as_view(),
