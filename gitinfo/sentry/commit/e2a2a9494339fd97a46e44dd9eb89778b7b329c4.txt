commit e2a2a9494339fd97a46e44dd9eb89778b7b329c4
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Nov 4 14:43:14 2019 +0100

    feat(glob): Switch to rust based globbing (#15419)
    
    This changes the behavior slightly for invalid range globs which previously were differently handled.

diff --git a/src/sentry/grouping/enhancement-configs/common@2019-03-23.txt b/src/sentry/grouping/enhancement-configs/common@2019-03-23.txt
index 8d77b8ef4d..d1959d1b52 100644
--- a/src/sentry/grouping/enhancement-configs/common@2019-03-23.txt
+++ b/src/sentry/grouping/enhancement-configs/common@2019-03-23.txt
@@ -56,7 +56,7 @@ family:native function:kscm_*                                     -app -group
 family:native function:sentrycrashcm_*                            -app -group
 family:native function:kscrash_*                                  -app -group
 family:native function:sentrycrash_*                              -app -group
-family:native function:"?[KSCrash *"                              -app -group
-family:native function:"?[SentryCrash *"                          -app -group
-family:native function:"?[SentryClient *"                         -app -group
-family:native function:"?[RNSentry *"                             -app -group
+family:native function:"?[[]KSCrash *"                              -app -group
+family:native function:"?[[]SentryCrash *"                          -app -group
+family:native function:"?[[]SentryClient *"                         -app -group
+family:native function:"?[[]RNSentry *"                             -app -group
diff --git a/src/sentry/grouping/enhancement-configs/legacy@2019-03-12.txt b/src/sentry/grouping/enhancement-configs/legacy@2019-03-12.txt
index d3eaf03ded..b49d223239 100644
--- a/src/sentry/grouping/enhancement-configs/legacy@2019-03-12.txt
+++ b/src/sentry/grouping/enhancement-configs/legacy@2019-03-12.txt
@@ -26,6 +26,6 @@ family:native package:**/Frameworks/Sentry.framework/**              -app
 # Sentry internal functions in Cocoa SDK
 family:native function:kscm_*                                        -app -group
 family:native function:kscrash_*                                     -app -group
-family:native function:"?[KSCrash *"                                 -app -group
-family:native function:"?[SentryClient *"                            -app -group
-family:native function:"?[RNSentry *"                                -app -group
+family:native function:"?[[]KSCrash *"                              -app -group
+family:native function:"?[[]SentryClient *"                         -app -group
+family:native function:"?[[]RNSentry *"                             -app -group
diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index 2e4a94c38a..2dcb0279a5 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
 from collections import namedtuple
-from fnmatch import fnmatch
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError  # noqa
 from sentry.utils.safe import get_path
+from sentry.utils.glob import glob_match
 
 __all__ = ("parse_rules", "dump_schema", "load_schema")
 
@@ -90,7 +90,7 @@ class Matcher(namedtuple("Matcher", "type pattern")):
             url = data["request"]["url"]
         except KeyError:
             return False
-        return fnmatch(url, self.pattern)
+        return glob_match(url, self.pattern, ignorecase=True)
 
     def test_path(self, data):
         for frame in _iter_frames(data):
@@ -99,11 +99,7 @@ class Matcher(namedtuple("Matcher", "type pattern")):
             if not filename:
                 continue
 
-            # fnmatch keeps it's own internal cache, so
-            # there isn't any optimization we can do here
-            # by using fnmatch.translate before and compiling
-            # our own regex.
-            if fnmatch(filename, self.pattern):
+            if glob_match(filename, self.pattern, ignorecase=True, path_normalize=True):
                 return True
 
         return False
diff --git a/src/sentry/utils/glob.py b/src/sentry/utils/glob.py
index 2725dd7e78..f4edac4916 100644
--- a/src/sentry/utils/glob.py
+++ b/src/sentry/utils/glob.py
@@ -1,57 +1,14 @@
 from __future__ import absolute_import
 
-import re
-from functools32 import lru_cache
-
-
-@lru_cache(maxsize=500)
-def _translate(pat, doublestar=False):
-    i, n = 0, len(pat)
-    res = []
-    while i < n:
-        c = pat[i]
-        i = i + 1
-        if c == "*":
-            if doublestar:
-                if pat[i : i + 1] == "*":
-                    res.append(".*")
-                    i += 1
-                else:
-                    res.append("[^/]*")
-            else:
-                res.append(".*")
-        elif c == "?":
-            res.append(".")
-        elif c == "[":
-            j = i
-            if j < n and pat[j] == "!":
-                j = j + 1
-            if j < n and pat[j] == "]":
-                j = j + 1
-            while j < n and pat[j] != "]":
-                j = j + 1
-            if j >= n:
-                res.append("\\[")
-            else:
-                stuff = pat[i:j].replace("\\", "\\\\")
-                i = j + 1
-                if stuff[0] == "!":
-                    stuff = "^" + stuff[1:]
-                elif stuff[0] == "^":
-                    stuff = "\\" + stuff
-                res.append("[%s]" % stuff)
-        else:
-            res.append(re.escape(c))
-    res.append("\Z(?ms)")
-    return re.compile("".join(res))
+import semaphore
 
 
 def glob_match(value, pat, doublestar=False, ignorecase=False, path_normalize=False):
     """A beefed up version of fnmatch.fnmatch"""
-    if ignorecase:
-        value = value.lower()
-        pat = pat.lower()
-    if path_normalize:
-        value = value.replace("\\", "/")
-        pat = pat.replace("\\", "/")
-    return _translate(pat, doublestar=doublestar).match(value) is not None
+    return semaphore.is_glob_match(
+        value,
+        pat,
+        double_star=doublestar,
+        case_insensitive=ignorecase,
+        path_normalize=path_normalize,
+    )
diff --git a/tests/sentry/utils/test_glob.py b/tests/sentry/utils/test_glob.py
index 678e20171b..7bb6140413 100644
--- a/tests/sentry/utils/test_glob.py
+++ b/tests/sentry/utils/test_glob.py
@@ -29,12 +29,19 @@ class GlobInput(object):
         [GlobInput("foo/hello.PY", "**/*.py", doublestar=True), False],
         [GlobInput("foo/hello.PY", "**/*.py", ignorecase=True), True],
         [GlobInput("foo/hello.PY", "**/*.py", doublestar=True, ignorecase=True), True],
-        [GlobInput("foo\\hello.PY", "**/*.py", ignorecase=True), False],
-        [GlobInput("foo\\hello.PY", "**/*.py", doublestar=True, ignorecase=True), False],
-        [GlobInput("foo\\hello.PY", "**/*.py", ignorecase=True, path_normalize=True), True],
+        [GlobInput("root\\foo\\hello.PY", "root/**/*.py", ignorecase=True), False],
+        [GlobInput("root\\foo\\hello.PY", "root/**/*.py", doublestar=True, ignorecase=True), False],
+        [
+            GlobInput("root\\foo\\hello.PY", "root/**/*.py", ignorecase=True, path_normalize=True),
+            True,
+        ],
         [
             GlobInput(
-                "foo\\hello.PY", "**/*.py", doublestar=True, ignorecase=True, path_normalize=True
+                "root\\foo\\hello.PY",
+                "root/**/*.py",
+                doublestar=True,
+                ignorecase=True,
+                path_normalize=True,
             ),
             True,
         ],
