commit 12a819c27ad4344d118787ac0934101a776290bc
Author: Matte Noble <me@mattenoble.com>
Date:   Mon Apr 8 12:47:15 2019 -0700

    fix(app-platform): Allow empty permissions (#12639)

diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index 7d027c5826..1527e12d9a 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -14,8 +14,9 @@ from sentry.models.sentryapp import VALID_EVENT_RESOURCES, REQUIRED_EVENT_PERMIS
 class ApiScopesField(serializers.WritableField):
     def validate(self, data):
         valid_scopes = ApiScopes()
+
         if data is None:
-            raise ValidationError('Must provide scopes')
+            return
 
         for scope in data:
             if scope not in valid_scopes:
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index 5869ebc3e5..25c453c169 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -13,7 +13,7 @@ class Creator(Mediator):
     name = Param(six.string_types)
     author = Param(six.string_types)
     organization = Param('sentry.models.Organization')
-    scopes = Param(Iterable)
+    scopes = Param(Iterable, default=lambda self: [])
     events = Param(Iterable, default=lambda self: [])
     webhook_url = Param(six.string_types)
     redirect_url = Param(six.string_types, required=False)
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 510d59fcf0..f3cba16071 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -184,20 +184,19 @@ class PostSentryAppsTest(SentryAppsTest):
             {'schema': ["['#general'] is too short"]}
 
     @with_feature('organizations:sentry-apps')
-    def test_missing_name(self):
+    def test_allows_empty_schema(self):
         self.login_as(self.user)
-        response = self._post(name=None)
+        response = self._post(schema={})
 
-        assert response.status_code == 422, response.content
-        assert 'name' in response.data
+        assert response.status_code == 201, response.content
 
     @with_feature('organizations:sentry-apps')
-    def test_missing_scopes(self):
+    def test_missing_name(self):
         self.login_as(self.user)
-        response = self._post(scopes=None)
+        response = self._post(name=None)
 
         assert response.status_code == 422, response.content
-        assert 'scopes' in response.data
+        assert 'name' in response.data
 
     @with_feature('organizations:sentry-apps')
     def test_invalid_events(self):
@@ -223,6 +222,14 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.status_code == 422, response.content
         assert 'webhookUrl' in response.data
 
+    @with_feature('organizations:sentry-apps')
+    def test_allows_empty_permissions(self):
+        self.login_as(self.user)
+        response = self._post(scopes=None)
+
+        assert response.status_code == 201, response.content
+        assert response.data['scopes'] == []
+
     def _post(self, **kwargs):
         body = {
             'name': 'MyApp',
