commit 58f95cf00fe3eba8465462c5a515f65605d34c76
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 19 14:19:01 2016 -0700

    Rebrand Rules as Alerts / Alert Rules (#3947)
    
    * Rebrand Rules as Alerts / Alert Rules
    
    This renames "Rules" to "Alerts", and changes the context of Rules to be "Alert Rules". It also removes server-side components for rule list and delete rule, and moves them into React.
    
    It also combines the notifications and alerts settings pages and migrates notification plugins to React-based config.
    
    /cc @getsentry/team
    
    * Remove unused server views
    
    * Compatibility with updated plugin API
    
    * Remove bad import
    
    * Update to match current API
    
    * Fix warnings due to router context
    
    * Improve field defaults
    
    * Define DisplayName
    
    * Only update plugin config if data changes
    
    * Optimize props receive
    
    * Optimize load path of plugin config
    
    * Update acceptance tests
    
    * Fix rule details URLs
    
    * Lint
    
    * Stylistic changes
    
    * Tweaks to tests
    
    * Expand alert tests
    
    * Various test fixes
    
    * Add rule fixture to test
    
    * Fix test
    
    * Expose IndicatorStore
    
    * Various fixes

diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 64213f12c7..23b20039c3 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -55,6 +55,16 @@ class ProjectEventPermission(ProjectPermission):
     }
 
 
+class ProjectSettingPermission(ProjectPermission):
+    scope_map = {
+        'GET': ['project:read', 'project:write', 'project:delete'],
+        'POST': ['project:write', 'project:delete'],
+        'PUT': ['project:write', 'project:delete'],
+        'DELETE': ['project:write', 'project:delete'],
+
+    }
+
+
 class ProjectEndpoint(Endpoint):
     permission_classes = (ProjectPermission,)
 
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 37a8541650..24e72d5865 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -14,6 +14,7 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.plugin import PluginSerializer
+from sentry.app import digests
 from sentry.models import (
     AuditLogEntryEvent, Group, GroupStatus, Project, ProjectBookmark,
     ProjectStatus, UserOption
@@ -80,6 +81,13 @@ class ProjectAdminSerializer(serializers.Serializer):
     isSubscribed = serializers.BooleanField()
     name = serializers.CharField(max_length=200)
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50)
+    digestsMinDelay = serializers.IntegerField(min_value=60, max_value=3600)
+    digestsMaxDelay = serializers.IntegerField(min_value=60, max_value=3600)
+
+    def validate_digestsMaxDelay(self, attrs, source):
+        if attrs[source] < attrs['digestsMinDelay']:
+            raise serializers.ValidationError('The maximum delay on digests must be higher than the minimum.')
+        return attrs
 
 
 class RelaxedProjectPermission(ProjectPermission):
@@ -144,6 +152,15 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         data['team'] = serialize(project.team, request.user)
         data['organization'] = serialize(project.organization, request.user)
 
+        data.update({
+            'digestsMinDelay': project.get_option(
+                'digests:mail:minimum_delay', digests.minimum_delay,
+            ),
+            'digestsMaxDelay': project.get_option(
+                'digests:mail:maximum_delay', digests.maximum_delay,
+            ),
+        })
+
         include = set(filter(bool, request.GET.get('include', '').split(',')))
         if 'stats' in include:
             data['stats'] = {
@@ -169,6 +186,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         :param boolean isBookmarked: in case this API call is invoked with a
                                      user context this allows changing of
                                      the bookmark flag.
+        :param int digestsMinDelay:
+        :param int digestsMaxDelay:
         :param object options: optional options to override in the
                                project settings.
         :auth: required
@@ -216,6 +235,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 user=request.user,
             ).delete()
 
+        if result.get('digestsMinDelay'):
+            project.update_option('digests:mail:minimum_delay', result['digestsMinDelay'])
+        if result.get('digestsMaxDelay'):
+            project.update_option('digests:mail:maximum_delay', result['digestsMaxDelay'])
+
         if result.get('isSubscribed'):
             UserOption.objects.set_value(request.user, project, 'mail:alert', 1)
         elif result.get('isSubscribed') is False:
@@ -266,6 +290,14 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
             'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
         }
+        data.update({
+            'digestsMinDelay': project.get_option(
+                'digests:mail:minimum_delay', digests.minimum_delay,
+            ),
+            'digestsMaxDelay': project.get_option(
+                'digests:mail:maximum_delay', digests.maximum_delay,
+            ),
+        })
 
         return Response(data)
 
diff --git a/src/sentry/api/endpoints/project_rule_details.py b/src/sentry/api/endpoints/project_rule_details.py
index dff4c7fcf6..3f1ad5303f 100644
--- a/src/sentry/api/endpoints/project_rule_details.py
+++ b/src/sentry/api/endpoints/project_rule_details.py
@@ -3,13 +3,15 @@ from __future__ import absolute_import
 from rest_framework import status
 from rest_framework.response import Response
 
-from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.bases.project import ProjectEndpoint, ProjectSettingPermission
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import RuleSerializer
 from sentry.models import Rule, RuleStatus
 
 
 class ProjectRuleDetailsEndpoint(ProjectEndpoint):
+    permission_classes = [ProjectSettingPermission]
+
     def get(self, request, project, rule_id):
         """
         Retrieve a rule
diff --git a/src/sentry/api/endpoints/project_rules.py b/src/sentry/api/endpoints/project_rules.py
index abcbf1321f..81c357f832 100644
--- a/src/sentry/api/endpoints/project_rules.py
+++ b/src/sentry/api/endpoints/project_rules.py
@@ -22,7 +22,7 @@ class ProjectRulesEndpoint(ProjectEndpoint):
         queryset = Rule.objects.filter(
             project=project,
             status__in=[RuleStatus.ACTIVE, RuleStatus.INACTIVE],
-        )
+        ).select_related('project')
 
         return self.paginate(
             request=request,
diff --git a/src/sentry/api/serializers/models/rule.py b/src/sentry/api/serializers/models/rule.py
index 09e642e2c0..b0607a9fbe 100644
--- a/src/sentry/api/serializers/models/rule.py
+++ b/src/sentry/api/serializers/models/rule.py
@@ -6,6 +6,17 @@ from sentry.api.serializers import Serializer, register
 from sentry.models import Rule
 
 
+def _generate_rule_label(project, rule, data):
+    from sentry.rules import rules
+
+    rule_cls = rules.get(data['id'])
+    if rule_cls is None:
+        return
+
+    rule_inst = rule_cls(project, data=data, rule=rule)
+    return rule_inst.render_label()
+
+
 @register(Rule)
 class RuleSerializer(Serializer):
     def serialize(self, obj, attrs, user):
@@ -13,8 +24,16 @@ class RuleSerializer(Serializer):
             # XXX(dcramer): we currently serialize unsaved rule objects
             # as part of the rule editor
             'id': six.text_type(obj.id) if obj.id else None,
-            'conditions': obj.data.get('conditions', []),
-            'actions': obj.data.get('actions', []),
+            'conditions': [
+                dict({
+                    'name': _generate_rule_label(obj.project, obj, o),
+                }, **o) for o in obj.data.get('conditions', [])
+            ],
+            'actions': [
+                dict({
+                    'name': _generate_rule_label(obj.project, obj, o),
+                }, **o) for o in obj.data.get('actions', [])
+            ],
             'actionMatch': obj.data.get('action_match', 'all'),
             'name': obj.label,
             'dateCreated': obj.date_added,
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index 01dbf2deb7..68f5fceafd 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -7,8 +7,26 @@ class FormField extends React.Component {
   }
 }
 
+FormField.propTypes = {
+  label: React.PropTypes.string.isRequired,
+  name: React.PropTypes.string.isRequired,
+
+  defaultValue: React.PropTypes.any,
+  disabled: React.PropTypes.bool,
+  error: React.PropTypes.string,
+  help: React.PropTypes.oneOfType([
+    React.PropTypes.string,
+    React.PropTypes.element,
+  ]),
+  onChange: React.PropTypes.func,
+  required: React.PropTypes.bool,
+  value: React.PropTypes.any,
+};
+
 FormField.defaultProps = {
+  disabled: false,
   onChange: (value) => {},
+  required: false,
 };
 
 export default FormField;
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 950e89f79a..5081eb023e 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -5,7 +5,7 @@ import FormField from './formField';
 
 import {defined} from '../../utils';
 
-export default class InputField extends FormField {
+class InputField extends FormField {
   constructor(props) {
     super(props);
 
@@ -59,6 +59,7 @@ export default class InputField extends FormField {
           onChange={this.onChange}
           disabled={this.props.disabled}
           ref="input"
+          required={this.props.required}
           value={this.state.value} />
     );
   }
@@ -93,3 +94,9 @@ export default class InputField extends FormField {
     );
   }
 }
+
+InputField.propTypes = Object.assign({
+  placeholder: React.PropTypes.string,
+}, FormField.propTypes);
+
+export default InputField;
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
index fec4684e33..c34a69ae96 100644
--- a/src/sentry/static/sentry/app/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -3,14 +3,16 @@ import React from 'react';
 
 import InputField from './inputField';
 
-export default class Select2Field extends InputField {
+class Select2Field extends InputField {
   getField() {
     return (
       <select id={this.getId()}
           className="form-control"
           ref="input"
+          placeholder={this.props.placeholder}
           onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
+          required={this.props.required}
           value={this.state.value}>
         {this.props.choices.map((choice) => {
           return (
@@ -35,5 +37,10 @@ export default class Select2Field extends InputField {
   componentWillUnmount() {
     jQuery(this.refs.select).select2('destroy');
   }
-
 }
+
+Select2Field.propTypes = Object.assign({
+  choices: React.PropTypes.array.isRequired,
+}, InputField.propTypes);
+
+export default Select2Field;
diff --git a/src/sentry/static/sentry/app/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
index 9d7c81088b..b7fb37b444 100644
--- a/src/sentry/static/sentry/app/components/forms/textareaField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
@@ -4,12 +4,15 @@ import InputField from './inputField';
 export default class TextareaField extends InputField {
   getField() {
     return (
-      <textarea {...this.props}
-          id={this.getId()}
-          ref="input"
-          className="form-control"
-          value={this.state.value}
-          onChange={this.onChange.bind(this)} />
+      <textarea
+        id={this.getId()}
+        ref="input"
+        className="form-control"
+        value={this.state.value}
+        disabled={this.props.disabled}
+        required={this.props.required}
+        placeholder={this.props.placeholder}
+        onChange={this.onChange.bind(this)} />
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index 6aeb04a49f..220876dfa8 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -1,6 +1,8 @@
 import React from 'react';
-import AlertActions from '../actions/alertActions';
+import _ from 'underscore';
+
 import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import plugins from '../plugins';
 import {t} from '../locale';
@@ -9,20 +11,45 @@ const PluginConfig = React.createClass({
   propTypes: {
     organization: React.PropTypes.object.isRequired,
     project: React.PropTypes.object.isRequired,
-    data: React.PropTypes.object.isRequired
+    data: React.PropTypes.object.isRequired,
+    onDisablePlugin: React.PropTypes.func,
   },
 
   mixins: [ApiMixin],
 
+  getDefaultProps() {
+    return {
+      onDisablePlugin: window.location.reload
+    };
+  },
+
+  getInitialState() {
+    return {
+      loading: !plugins.isLoaded(this.props.data)
+    };
+  },
+
   componentWillMount() {
     this.loadPlugin(this.props.data);
   },
 
   componentWillReceiveProps(nextProps) {
-    this.loadPlugin(nextProps.data);
+    if (!_.isEqual(nextProps.data, this.props.data)) {
+      this.loadPlugin(nextProps.data);
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      !_.isEqual(nextState, this.state) ||
+      !_.isEqual(nextProps.data, this.props.data)
+    );
   },
 
   loadPlugin(data) {
+    if (plugins.isLoaded(data))
+      return;
+
     this.setState({
       loading: true,
     }, () => {
@@ -32,26 +59,23 @@ const PluginConfig = React.createClass({
     });
   },
 
-  getPluginEndpoint(data) {
-    let org = this.props.organization;
-    let project = this.props.project;
+  getPluginEndpoint() {
+    let {organization, project, data} = this.props;
     return (
-      `/projects/${org.slug}/${project.slug}/plugins/${data.id}/`
+      `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`
     );
   },
 
-  disablePlugin(data) {
-    this.api.request(this.getPluginEndpoint(data), {
+  disablePlugin() {
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(this.getPluginEndpoint(), {
       method: 'DELETE',
       success: () => {
-        // When this whole page is a react view, this won't be necessary
-        window.location.reload();
+        this.props.onDisablePlugin();
+        IndicatorStore.remove(loadingIndicator);
       },
       error: (error) => {
-        AlertActions.addAlert({
-          message: t('There was an error disabling the plugin'),
-          type: 'error'
-        });
+        IndicatorStore.add(t('Unable to disable plugin. Please try again.'), 'error');
       }
     });
   },
@@ -59,12 +83,17 @@ const PluginConfig = React.createClass({
   render() {
     let data = this.props.data;
 
+            // <button className="btn btn-sm btn-default pull-right"
+            //         onClick={this.disablePlugin.bind(this, data)}>{t('Disable')}</button>}
     return (
-      <div className="box">
+      <div className={`box ref-plugin-config-${data.id}`}>
         <div className="box-header">
           {data.canDisable && data.enabled &&
-            <button className="btn btn-sm btn-default pull-right"
-                    onClick={this.disablePlugin.bind(this, data)}>{t('Disable')}</button>}
+            <div className="pull-right">
+              <a className="btn btn-sm btn-default"
+                 onClick={this.disablePlugin}>{t('Disable')}</a>
+            </div>
+          }
           <h3>{data.name}</h3>
         </div>
         <div className="box-content with-padding">
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index e44fcdd134..fc84d816c9 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -70,6 +70,7 @@ export default {
     FlotChart: require('./components/flotChart'),
     HookStore: require('./stores/hookStore'),
     Indicators: require('./components/indicators'),
+    IndicatorStore: require('./stores/indicatorStore'),
     LoadingError: require('./components/loadingError'),
     LoadingIndicator: require('./components/loadingIndicator'),
     ListLink: require('./components/listLink'),
diff --git a/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx b/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx
index a8fdca8518..fbb00f780d 100644
--- a/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx
+++ b/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx
@@ -1,3 +1,7 @@
 import BasePlugin from './basePlugin';
 
-export class DefaultPlugin extends BasePlugin {}
+class DefaultPlugin extends BasePlugin {}
+
+DefaultPlugin.displayName = 'DefaultPlugin';
+
+export {DefaultPlugin};
diff --git a/src/sentry/static/sentry/app/plugins/index.jsx b/src/sentry/static/sentry/app/plugins/index.jsx
index 237f09dd26..673517d448 100644
--- a/src/sentry/static/sentry/app/plugins/index.jsx
+++ b/src/sentry/static/sentry/app/plugins/index.jsx
@@ -10,6 +10,7 @@ export default {
 
     add: registry.add.bind(registry),
     get: registry.get.bind(registry),
+    isLoaded: registry.isLoaded.bind(registry),
     load: registry.load.bind(registry),
     loadAll: registry.loadAll.bind(registry),
 };
diff --git a/src/sentry/static/sentry/app/plugins/registry.jsx b/src/sentry/static/sentry/app/plugins/registry.jsx
index 12f611dcd1..ea1677ccbb 100644
--- a/src/sentry/static/sentry/app/plugins/registry.jsx
+++ b/src/sentry/static/sentry/app/plugins/registry.jsx
@@ -7,6 +7,10 @@ export default class Registry {
     this.assetCache = {};
   }
 
+  isLoaded(data) {
+    return defined(this.plugins[data.id]);
+  }
+
   loadAll(dataList, callback) {
     let remaining = dataList.length;
     let pluginList = [];
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 590022cf6a..a378ff6e3e 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -31,6 +31,8 @@ import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import AllTeamsList from './views/organizationTeams/allTeamsList';
+import ProjectAlertSettings from './views/projectAlertSettings';
+import ProjectAlertRules from './views/projectAlertRules';
 import ProjectChooser from './views/projectChooser';
 import ProjectCspSettings from './views/projectCspSettings';
 import ProjectDashboard from './views/projectDashboard';
@@ -138,6 +140,8 @@ function routes() {
           </Route>
           <Route path="user-feedback/" component={errorHandler(ProjectUserReports)} />
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
+            <Route path="alerts/" component={errorHandler(ProjectAlertSettings)} />
+            <Route path="alerts/rules/" component={errorHandler(ProjectAlertRules)} />
             <Route path="install/" component={errorHandler(ProjectInstall)}>
               <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
               <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
diff --git a/src/sentry/static/sentry/app/views/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
new file mode 100644
index 0000000000..293fc61503
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
@@ -0,0 +1,224 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
+import ListLink from '../components/listLink';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const RuleRow = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    onDelete: React.PropTypes.func.isRequired,
+  },
+
+  mixins: [
+    ApiMixin,
+  ],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  onDelete() {
+    if (!confirm('Are you sure you want to remove this rule?'))
+      return;
+    if (this.state.loading)
+      return;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/rules/${data.id}/`, {
+      method: 'DELETE',
+      success: (d, _, jqXHR) => {
+        this.props.onDelete();
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+      }
+    });
+  },
+
+  render() {
+    let {orgId, projectId, data} = this.props;
+    let editLink = `/${orgId}/${projectId}/settings/alerts/rules/${data.id}/`;
+    return (
+      <div className="box">
+        <div className="box-header">
+          <div className="pull-right">
+            <a className="btn btn-sm btn-default"
+                href={editLink}>{t('Edit Rule')}</a>
+            <a className="btn btn-sm btn-default"
+               onClick={this.onDelete}>
+              <span className="icon-trash" style={{marginRight: 3}} />
+            </a>
+          </div>
+          <h3><a href={editLink}>{data.name}</a></h3>
+        </div>
+        <div className="box-content with-padding">
+          <div className="row">
+            <div className="col-md-6">
+              {data.conditions.length !== 0 &&
+                <div>
+                  <h6>When <strong>{data.actionMatch}</strong> of these conditions are met:</h6>
+                  <table className="conditions-list table">
+                  {data.conditions.map((condition) => {
+                    return (
+                      <tr>
+                        <td>{condition.name}</td>
+                      </tr>
+                    );
+                  })}
+                  </table>
+                </div>
+              }
+            </div>
+            <div className="col-md-6">
+              {data.actions.length !== 0 &&
+                <div>
+                  <h6>Take these actions:</h6>
+                  <table className="actions-list table">
+                  {data.actions.map((action) => {
+                    return (
+                      <tr>
+                        <td>{action.name}</td>
+                      </tr>
+                    );
+                  })}
+                  </table>
+                </div>
+              }
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+const ProjectAlertRules = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      ruleList: [],
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/rules/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          ruleList: data
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  onDeleteRule(rule) {
+    this.setState({
+      ruleList: this.state.ruleList.filter(r => r.id !== rule.id)
+    });
+  },
+
+  renderBody() {
+    let body;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.ruleList.length)
+      body = this.renderResults();
+    else
+      body = this.renderEmpty();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('There are no alerts configured for this project.')}</p>
+      </div>
+    );
+  },
+
+  renderResults() {
+    let {orgId, projectId} = this.props.params;
+    return (
+      <div className="rules-list">
+        {this.state.ruleList.map((rule) => {
+          return (
+            <RuleRow
+              key={rule.id}
+              data={rule}
+              orgId={orgId}
+              projectId={projectId}
+              onDelete={this.onDeleteRule.bind(this, rule)} />
+          );
+        })}
+      </div>
+    );
+  },
+
+  render() {
+    let {orgId, projectId} = this.props.params;
+    return (
+      <div>
+        <a href={`/${orgId}/${projectId}/settings/alerts/new/`}
+           className="btn pull-right btn-primary btn-sm">
+          <span className="icon-plus" />
+          {t('New Alert Rule')}
+        </a>
+        <h2>{t('Alerts')}</h2>
+
+        <ul className="nav nav-tabs" style={{borderBottom: '1px solid #ddd'}}>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/`}
+                    index={true}>{t('Settings')}</ListLink>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/rules/`}>{t('Rules')}</ListLink>
+        </ul>
+
+        {this.renderBody()}
+      </div>
+    );
+  }
+});
+
+export default ProjectAlertRules;
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
new file mode 100644
index 0000000000..b3d412d491
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -0,0 +1,281 @@
+import React from 'react';
+import underscore from 'underscore';
+
+import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
+import ListLink from '../components/listLink';
+import PluginConfig from '../components/pluginConfig';
+import {FormState, RangeField} from '../components/forms';
+import {t} from '../locale';
+
+const ProjectDigestSettings = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    initialData: React.PropTypes.object,
+    onSave: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: Object.assign({}, this.props.initialData),
+      errors: {},
+    };
+  },
+
+  onFieldChange(name, value) {
+    this.setState({
+      formData: {
+        ...this.state.formData,
+        [name]: value,
+      }
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let {orgId, projectId} = this.props;
+      this.api.request(`/projects/${orgId}/${projectId}/`, {
+        method: 'PUT',
+        data: this.state.formData,
+        success: (data) => {
+          this.props.onSave(data);
+          this.setState({
+            state: FormState.READY,
+            errors: {},
+          });
+        },
+        error: (error) => {
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
+      });
+    });
+  },
+
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let {errors, formData} = this.state;
+    let hasChanges = !underscore.isEqual(this.props.initialData, formData);
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Digests')}</h3>
+        </div>
+        <div className="box-content with-padding">
+          <p>
+            {t(
+              'Sentry will automatically digest alerts sent ' +
+              'by some services to avoid flooding your inbox ' +
+              'with individual issue notifications. To control ' +
+              'how frequently notifications are delivered, use ' +
+              'the sliders below.'
+            )}
+          </p>
+          <form onSubmit={this.onSubmit} className="form-stacked">
+            {this.state.state === FormState.ERROR &&
+              <div className="alert alert-error alert-block">
+                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+              </div>
+            }
+            <div className="row">
+              <div className="col-md-6">
+                <RangeField
+                  min={60}
+                  max={3600}
+                  step={60}
+                  defaultValue={300}
+                  label={t('Minimum delivery frequency')}
+                  help={t('Notifications will be delivered at most this often.')}
+                  name="digestsMinDelay"
+                  value={formData.digestsMinDelay}
+                  error={errors.digestsMinDelay}
+                  formatLabel={RangeField.formatMinutes}
+                  onChange={this.onFieldChange.bind(this, 'digestsMinDelay')} />
+              </div>
+              <div className="col-md-6">
+                <RangeField
+                  min={60}
+                  max={3600}
+                  step={60}
+                  defaultValue={3600}
+                  label={t('Maximum delivery frequency')}
+                  help={t('Notifications will be delivered at least this often.')}
+                  name="digestsMaxDelay"
+                  value={formData.digestsMaxDelay}
+                  error={errors.digestsMaxDelay}
+                  formatLabel={RangeField.formatMinutes}
+                  onChange={this.onFieldChange.bind(this, 'digestsMaxDelay')} />
+              </div>
+            </div>
+
+            <fieldset className="form-actions align-right">
+              <button type="submit" className="btn btn-primary"
+                      disabled={isSaving || !hasChanges}>{t('Save Changes')}</button>
+            </fieldset>
+          </form>
+        </div>
+      </div>
+    );
+  },
+});
+
+const InactivePlugins = React.createClass({
+  propTypes: {
+    plugins: React.PropTypes.array.isRequired,
+    onEnablePlugin: React.PropTypes.func.isRequired,
+  },
+
+  enablePlugin(plugin) {
+    return this.props.onEnablePlugin(plugin, true);
+  },
+
+  render() {
+    let plugins = this.props.plugins;
+    if (plugins.length === 0)
+      return null;
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Inactive Integrations')}</h3>
+        </div>
+        <div className="box-content with-padding">
+          <ul className="integration-list">
+            {plugins.map((plugin) => {
+              return (
+                <li key={plugin.id}>
+                  <button onClick={this.enablePlugin.bind(this, plugin)} className={`ref-plugin-enable-${plugin.id}`}>
+                    {plugin.name}
+                  </button>
+                </li>
+              );
+            })}
+          </ul>
+        </div>
+      </div>
+    );
+  }
+});
+
+const ProjectAlertSettings = React.createClass({
+  propTypes: {
+    // these are not declared as required of issues with cloned elements
+    // not initially defining them (though they are bound before) ever
+    // rendered
+    organization: React.PropTypes.object,
+    project: React.PropTypes.object,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      project: this.props.project,
+    };
+  },
+
+  onDigestsChange(data) {
+    // TODO(dcramer): propagate this in a more correct way
+    this.setState({
+      project: {
+        ...this.state.project,
+        digestsMinDelay: data.digestsMinDelay,
+        digestsMaxDelay: data.digestsMaxDelay,
+      },
+    });
+  },
+
+  enablePlugin(plugin) {
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/plugins/${plugin.id}/`, {
+      method: 'POST',
+      data: this.state.formData,
+      success: (data) => {
+        // TODO(dcramer): propagate this in a more correct way
+        plugin = this.state.project.plugins.find(p => p.id === plugin.id);
+        plugin.enabled = true;
+        this.setState({project: this.state.project});
+      },
+      error: (error) => {
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  onDisablePlugin(plugin) {
+    // TODO(dcramer): propagate this in a more correct way
+    plugin = this.state.project.plugins.find(p => p.id === plugin.id);
+    plugin.enabled = false;
+    this.setState({project: this.state.project});
+  },
+
+  render() {
+    let {orgId, projectId} = this.props.params;
+    let organization = this.props.organization;
+    let project = this.state.project;
+    let plugins = project.plugins.filter(p => p.type == 'notification');
+    return (
+      <div>
+        <a href={`/${orgId}/${projectId}/settings/alerts/new/`}
+           className="btn pull-right btn-primary btn-sm">
+          <span className="icon-plus" />
+          {t('New Alert Rule')}
+        </a>
+        <h2>{t('Alerts')}</h2>
+
+        <ul className="nav nav-tabs" style={{borderBottom: '1px solid #ddd'}}>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/`}
+                    index={true}>{t('Settings')}</ListLink>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/rules/`}>{t('Rules')}</ListLink>
+        </ul>
+
+        <ProjectDigestSettings
+          orgId={orgId}
+          projectId={projectId}
+          initialData={{
+            'digestsMinDelay': project.digestsMinDelay,
+            'digestsMaxDelay': project.digestsMaxDelay
+          }}
+          onSave={this.onDigestsChange} />
+
+        {plugins.filter(p => p.enabled).map((data) => {
+          return (
+            <PluginConfig
+              data={data}
+              organization={organization}
+              project={project}
+              key={data.id}
+              onDisablePlugin={this.onDisablePlugin.bind(this, data)} />
+          );
+        })}
+
+        <InactivePlugins
+          plugins={plugins.filter(p => !p.enabled)}
+          onEnablePlugin={this.enablePlugin} />
+
+      </div>
+    );
+  }
+});
+
+export default ProjectAlertSettings;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index ea472791ec..ff411046b8 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -77,6 +77,7 @@ const ProjectSettings = React.createClass({
     let features = new Set(project.features);
     let rootInstallPath = `/${orgId}/${projectId}/settings/install/`;
     let isEarlyAdopter = this.context.organization.isEarlyAdopter;
+    let path = this.props.location.pathname;
 
     return (
       <div className="row">
@@ -84,11 +85,11 @@ const ProjectSettings = React.createClass({
           <h6 className="nav-header">{t('Configuration')}</h6>
           <ul className="nav nav-stacked">
             <li><a href={`${settingsUrlRoot}/`}>{t('General')}</a></li>
-            <li><a href={`${settingsUrlRoot}/notifications/`}>{t('Notifications')}</a></li>
+            <ListLink to={`/${orgId}/${projectId}/settings/alerts/`}
+                      isActive={to => path.indexOf(to) === 0}>{t('Alerts')}</ListLink>
             {features.has('quotas') &&
               <li><a href={`${settingsUrlRoot}/quotas/`}>{t('Rate Limits')}</a></li>
             }
-            <li><a href={`${settingsUrlRoot}/rules/`}>{t('Rules')}</a></li>
             <li><a href={`${settingsUrlRoot}/tags/`}>{t('Tags')}</a></li>
             <li><a href={`${settingsUrlRoot}/issue-tracking/`}>{t('Issue Tracking')}</a></li>
             <li><a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a></li>
@@ -97,12 +98,10 @@ const ProjectSettings = React.createClass({
           </ul>
           <h6 className="nav-header">{t('Data')}</h6>
           <ul className="nav nav-stacked">
-            <ListLink to={rootInstallPath} isActive={function (to) {
-              let pathname = this.context.location.pathname;
-
+            <ListLink to={rootInstallPath} isActive={(to) => {
               // Because react-router 1.0 removes router.isActive(route)
-              return pathname === rootInstallPath || /install\/[\w\-]+\/$/.test(pathname);
-            }.bind(this)}>{t('Error Tracking')}</ListLink>
+              return path === rootInstallPath || /install\/[\w\-]+\/$/.test(path);
+            }}>{t('Error Tracking')}</ListLink>
             {isEarlyAdopter &&
               <ListLink to={`/${orgId}/${projectId}/settings/csp/`}>{t('CSP Reports')}</ListLink>
             }
@@ -121,7 +120,8 @@ const ProjectSettings = React.createClass({
         <div className="col-md-10">
           {React.cloneElement(this.props.children, {
             setProjectNavSection: this.props.setProjectNavSection,
-            project: project
+            project: project,
+            organization: this.context.organization,
           })}
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 7305281642..f8aa5863a6 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -66,7 +66,7 @@ const RuleEditor = React.createClass({
     let rule = this.props.rule;
     let project = this.props.project;
     let org = this.props.organization;
-    let endpoint = '/projects/' + org.slug + '/' + project.slug + '/rules/';
+    let endpoint = `/projects/${org.slug}/${project.slug}/rules/`;
     if (rule.id) {
       endpoint += rule.id + '/';
     }
@@ -76,7 +76,7 @@ const RuleEditor = React.createClass({
       method: (rule.id ? 'PUT' : 'POST'),
       data: data,
       success: () => {
-        window.location.href = (rule.id ? '../../' : '../');
+        window.location.href = '../';
       },
       error: (response) => {
         this.setState({
@@ -106,7 +106,7 @@ const RuleEditor = React.createClass({
         <div className="box rule-detail">
           <div className="box-header">
             <h3>
-              {rule.id ? 'Edit Rule' : 'New Rule'}
+              {rule.id ? 'Edit Alert Rule' : 'New Alert Rule'}
             </h3>
           </div>
           <div className="box-content with-padding">
@@ -116,12 +116,13 @@ const RuleEditor = React.createClass({
               </div>
             }
             <h6>{t('Rule name')}:</h6>
-            <input ref="name"
-                   type="text" className="form-control"
-                   defaultValue={name}
-                   required={true}
-                   placeholder={t('My Rule Name')} />
-            <hr/>
+            <div className="control-group">
+              <input ref="name"
+                     type="text" className="form-control"
+                     defaultValue={name}
+                     required={true}
+                     placeholder={t('My Rule Name')} />
+            </div>
 
             <div className="node-match-selector">
               <h6>
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
index 68515cc914..0205128d8b 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
@@ -64,8 +64,6 @@ const RuleNodeList = React.createClass({
     return (
       <div className={this.props.className}>
         <table className="node-list table" style={{marginBottom: '10px'}}>
-          <col />
-          <col style={{textAlign: 'right'}} />
           <tbody>
             {this.state.items.map((item, idx) => {
               return (
@@ -78,7 +76,7 @@ const RuleNodeList = React.createClass({
           </tbody>
         </table>
         <fieldset className="node-selector">
-          <SelectInput onChange={this.onAddRow}>
+          <SelectInput onChange={this.onAddRow} style={{width: '100%'}}>
             <option key="blank" />
             {this.props.nodes.map((node) => {
               return (
diff --git a/src/sentry/templates/sentry/account/notifications.html b/src/sentry/templates/sentry/account/notifications.html
index c8132cd5d1..2cc2ca375a 100644
--- a/src/sentry/templates/sentry/account/notifications.html
+++ b/src/sentry/templates/sentry/account/notifications.html
@@ -92,7 +92,7 @@
             {% endifchanged %}
             <tr>
               <td>
-                <a href="{% url 'sentry-project-notifications' project.organization.slug project.slug %}">{{ project.organization.slug}} / {{ project.slug }}</a>
+                <a href="{% absolute_uri '/{}/{}/settings/alerts/' project.organization.slug project.slug %}">{{ project.organization.slug}} / {{ project.slug }}</a>
               </td>
               <td style="text-align:center">{{ form.alert }}</td>
               <td style="text-align:center">{{ form.workflow }}</td>
diff --git a/src/sentry/templates/sentry/project-notifications.html b/src/sentry/templates/sentry/project-notifications.html
deleted file mode 100644
index 323077f48f..0000000000
--- a/src/sentry/templates/sentry/project-notifications.html
+++ /dev/null
@@ -1,147 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{% trans "Notifications" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <h2>{% trans "Notifications" %}</h2>
-  <form action="" method="POST" class="form-stacked">
-    {% csrf_token %}
-    <input type="hidden" name="op" value="save-settings" />
-
-    {% if not is_user_subbed %}
-    <div class="box" style="border:0">
-      <div class="alert">
-        {% url 'sentry-account-settings-notifications' as account_notification_url %}
-        <p>You are currently not subscribed to this project. To subscribe, go to <a href="{{ account_notification_url }}">Account Notifications</a>.</p>
-      </div>
-    </div>
-    {% endif %}
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Rules" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {% url 'sentry-project-rules' organization.slug project.slug as link %}
-        <p>{% blocktrans %}Sentry will notify users subscribed to this project based on the <a href="{{ link }}">rules configured for this project</a>.{% endblocktrans %}</p>
-
-      </div>
-    </div>
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "General" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {{ general_form|as_crispy_errors }}
-
-        {% for field in general_form %}
-            {{ field|as_crispy_field }}
-        {% endfor %}
-      </div>
-    </div>
-
-    {% if digests_form %}
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Digests" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        <p>
-          Sentry will automatically digest notifications sent by some services to avoid flooding your inbox with individual issue notifications.
-          To control how frequently notifications are delivered, use the sliders below.
-        </p>
-
-        {{ digests_form|as_crispy_errors }}
-
-        <div class="row">
-          {% for field in digests_form %}
-            <div class="col-md-6">
-              {{ field|as_crispy_field }}
-            </div>
-          {% endfor %}
-        </div>
-      </div>
-    </div>
-    {% endif %}
-
-    <fieldset class="form-actions">
-      <button type="submit" class="btn btn-primary btn-lg">{% trans "Save Changes" %}</button>
-    </fieldset>
-  </form>
-
-  <script>
-  (function(){
-    var formatMinutes = function(val) {
-      val = parseInt(val, 10);
-      return val + ' minute' + (val != 1 ? 's' : '');
-    };
-
-    $('input[type=range]').each(function(n, el){
-      var $el = $(el),
-          min = parseInt($el.attr('min'), 10),
-          max = parseInt($el.attr('max'), 10),
-          step = parseInt($el.attr('step'), 10),
-          $value = $('<span class="value"></span>');
-
-      $el.on('slider:ready', function(event, data) {
-        console.log(data);
-        $value.appendTo(data.el);
-        $value.html(formatMinutes(data.value));
-      }).on('slider:changed', function(event, data) {
-        $value.html(formatMinutes(data.value));
-      }).simpleSlider({
-        range: [min, max],
-        step: step,
-        snap: true
-      });
-    });
-  }());
-</script>
-
-  {% for plugin, content in enabled_plugins %}
-    <div class="box">
-      <div class="box-header">
-        {% if plugin.can_disable %}
-          <form method="POST" class="pull-right">
-            {% csrf_token %}
-            <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
-            <button type="submit" class="btn btn-sm btn-default" name="op" value="disable">Disable</button>
-          </form>
-        {% endif %}
-        <h3>{{ plugin.get_title }}</h3>
-      </div>
-      <div class="box-content with-padding">
-        {{ content }}
-        </form>
-      </div>
-    </div>
-  {% endfor %}
-
-  {% if other_plugins %}
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Inactive Integrations" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        <ul class="integration-list">
-          {% for plugin in other_plugins %}
-            <li>
-              <form method="POST">
-                {% csrf_token %}
-                <input type="hidden" name="op" value="enable" />
-                <input type="hidden" name="plugin" value="{{ plugin.slug }}" />
-                <button type="submit">{{ plugin.get_title }}</button>
-              </form>
-            </li>
-          {% endfor %}
-        </ul>
-      </div>
-    </div>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index fd6b053aeb..5d0fed0f4b 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -43,6 +43,15 @@
       </div>
     </div>
 
+    <div class="box">
+      <div class="box-header">
+        <h3>{% trans "Email" %}</h3>
+      </div>
+      <div class="box-content with-padding">
+        {{ form.mail_subject_prefix|as_crispy_field }}
+      </div>
+    </div>
+
     <div class="box">
       <div class="box-header">
         <h3>{% trans "Event Settings" %}</h3>
@@ -171,17 +180,14 @@
     <li{% if page == 'details' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project' project.organization.slug project.slug %}">{% trans "General" %}</a>
     </li>
-    <li{% if page == 'notifications' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-project-notifications' project.organization.slug project.slug %}">{% trans "Notifications" %}</a>
+    <li{% if page == 'alerts' %} class="active"{% endif %}>
+        <a href="{% absolute_uri '/{}/{}/settings/alerts/' project.organization.slug project.slug %}">{% trans "Alerts" %}</a>
     </li>
     {% feature projects:quotas project %}
     <li{% if page == 'quotas' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project-quotas' project.organization.slug project.slug %}">{% trans "Rate Limits" %}</a>
     </li>
     {% endfeature %}
-    <li{% if page == 'rules' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-project-rules' project.organization.slug project.slug %}">{% trans "Rules" %}</a>
-    </li>
     <li{% if page == 'tags' %} class="active"{% endif %}>
         <a href="{% url 'sentry-manage-project-tags' project.organization.slug project.slug %}">{% trans "Tags" %}</a>
     </li>
diff --git a/src/sentry/templates/sentry/projects/rules/list.html b/src/sentry/templates/sentry/projects/rules/list.html
deleted file mode 100644
index 310595d87f..0000000000
--- a/src/sentry/templates/sentry/projects/rules/list.html
+++ /dev/null
@@ -1,61 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load i18n %}
-
-{% block main %}
-    <a href="{% url 'sentry-new-project-rule' project.organization.slug project.slug %}" class="btn pull-right btn-primary btn-sm">
-        <span class="icon-plus"></span>
-        {% trans "New Rule" %}
-    </a>
-    <h2>{% trans "Rules" %}</h2>
-
-    {% if rule_list %}
-        <div class="rules-list">
-            {% for rule in rule_list %}
-                <div class="box">
-                    <div class="box-header">
-                        <div class="pull-right">
-                            <a href="{% url 'sentry-edit-project-rule' project.organization.slug project.slug rule.id %}"class="btn btn-sm btn-default">Edit Rule</a>
-                            <form style="display:inline" method="POST" action="{% url 'sentry-remove-project-rule' project.organization.slug project.slug rule.id %}">
-                                {% csrf_token %}
-                                <button type="submit" class="btn btn-sm btn-default"
-                                        onclick="return confirm('Are you sure you want to remove this rule?')"><span class="icon-trash" style="margin-right: 3px;"></span></button>
-                            </form>
-                        </div>
-                        <h3><a href="{% url 'sentry-edit-project-rule' project.organization.slug project.slug rule.id %}">{{ rule.label }}</a></h3>
-                    </div>
-                    <div class="box-content with-padding">
-                        <div class="row">
-                            <div class="col-md-6">
-                                {% if rule.conditions %}
-                                    <h6>When <strong>{{ rule.match }}</strong> of these conditions are met:</h6>
-                                    <table class="conditions-list table">
-                                    {% for condition in rule.conditions %}
-                                        <tr>
-                                            <td>{{ condition }}</td>
-                                        </tr>
-                                    {% endfor %}
-                                    </table>
-                                {% endif %}
-                            </div>
-                            <div class="col-md-6">
-                                {% if rule.actions %}
-                                    <h6>Take these actions:</h6>
-                                    <table class="actions-list table">
-                                    {% for action in rule.actions %}
-                                        <tr>
-                                            <td>{{ action }}</td>
-                                        </tr>
-                                    {% endfor %}
-                                    </table>
-                                {% endif %}
-                            </div>
-                        </div>
-                    </div>
-                </div>
-            {% endfor %}
-        </div>
-    {% else %}
-        <p>You have not yet created any rules. Rules allow you to tweak the behavior of Sentry in various situations, such as sending notifications.</p>
-    {% endif %}
-{% endblock %}
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index fd78a3abd5..b24c79706f 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -51,13 +51,19 @@ class Browser(object):
         self.driver.delete(self.route(path), *args, **kwargs)
         return self
 
+    def element(self, selector):
+        return self.driver.find_element_by_css_selector(selector)
+
     def element_exists(self, selector):
         try:
-            self.driver.find_elements_by_css_selector(selector)
+            self.element(selector)
         except NoSuchElementException:
             return False
         return True
 
+    def click(self, selector):
+        self.element(selector).click()
+
     def wait_until(self, selector, timeout=3):
         """
         Waits until ``selector`` is found in the browser, or until ``timeout``
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 50194bee24..df3f67fd41 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -15,12 +15,6 @@ from sentry.models import ProjectOption
 from sentry.web.forms.fields import RangeField
 
 
-class NotificationSettingsForm(forms.Form):
-    subject_prefix = forms.CharField(
-        label=_('Mail Subject Prefix'), required=False,
-        help_text=_('Choose a custom prefix for emails from this project.'))
-
-
 class DigestSettingsForm(forms.Form):
     minimum_delay = RangeField(
         label=_('Minimum delivery frequency'),
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
deleted file mode 100644
index ec95192d29..0000000000
--- a/src/sentry/web/frontend/project_notifications.py
+++ /dev/null
@@ -1,153 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.http import HttpResponseRedirect, HttpResponse
-from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
-
-from sentry import constants
-from sentry import options
-from sentry.app import digests
-from sentry.digests import get_option_key as get_digest_option_key
-from sentry.plugins import plugins, NotificationPlugin
-from sentry.web.forms.projects import (
-    DigestSettingsForm,
-    NotificationSettingsForm,
-)
-from sentry.web.frontend.base import ProjectView
-
-OK_SETTINGS_SAVED = _('Your settings were saved successfully.')
-
-
-class ProjectNotificationsView(ProjectView):
-    required_scope = 'project:write'
-
-    def _iter_plugins(self):
-        for plugin in plugins.all(version=1):
-            if not isinstance(plugin, NotificationPlugin):
-                continue
-            yield plugin
-
-    def _handle_enable_plugin(self, request, project):
-        plugin = plugins.get(request.POST['plugin'])
-        plugin.enable(project)
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            constants.OK_PLUGIN_ENABLED.format(name=plugin.get_title()),
-        )
-
-    def _handle_disable_plugin(self, request, project):
-        plugin = plugins.get(request.POST['plugin'])
-        plugin.disable(project)
-        messages.add_message(
-            request, messages.SUCCESS,
-            constants.OK_PLUGIN_DISABLED.format(name=plugin.get_title()),
-        )
-
-    def handle(self, request, organization, team, project):
-        op = request.POST.get('op')
-        if op == 'enable':
-            self._handle_enable_plugin(request, project)
-            return HttpResponseRedirect(request.path)
-        elif op == 'disable':
-            self._handle_disable_plugin(request, project)
-            return HttpResponseRedirect(request.path)
-
-        if op == 'save-settings':
-            if digests.enabled(project):
-                digests_form = DigestSettingsForm(
-                    data=request.POST,
-                    prefix='digests',
-                    initial={
-                        'minimum_delay': project.get_option(
-                            get_digest_option_key('mail', 'minimum_delay'),
-                            digests.minimum_delay / 60,
-                        ),
-                        'maximum_delay': project.get_option(
-                            get_digest_option_key('mail', 'maximum_delay'),
-                            digests.maximum_delay / 60,
-                        ),
-                    },
-                )
-            else:
-                digests_form = None
-
-            general_form = NotificationSettingsForm(
-                data=request.POST,
-                prefix='general',
-                initial={
-                    'subject_prefix': project.get_option(
-                        'mail:subject_prefix', options.get('mail.subject-prefix')),
-                },
-            )
-            if general_form.is_valid() and (digests_form.is_valid() if digests_form is not None else True):
-                project.update_option('mail:subject_prefix', general_form.cleaned_data['subject_prefix'])
-                if digests_form is not None:
-                    project.update_option(
-                        get_digest_option_key('mail', 'minimum_delay'),
-                        digests_form.cleaned_data['minimum_delay'] * 60,
-                    )
-                    project.update_option(
-                        get_digest_option_key('mail', 'maximum_delay'),
-                        digests_form.cleaned_data['maximum_delay'] * 60,
-                    )
-                messages.add_message(
-                    request, messages.SUCCESS,
-                    OK_SETTINGS_SAVED)
-                return HttpResponseRedirect(request.path)
-        else:
-            if digests.enabled(project):
-                digests_form = DigestSettingsForm(
-                    prefix='digests',
-                    initial={
-                        'minimum_delay': project.get_option(
-                            get_digest_option_key('mail', 'minimum_delay'),
-                            digests.minimum_delay,
-                        ) / 60,
-                        'maximum_delay': project.get_option(
-                            get_digest_option_key('mail', 'maximum_delay'),
-                            digests.maximum_delay,
-                        ) / 60,
-                    },
-                )
-            else:
-                digests_form = None
-
-            general_form = NotificationSettingsForm(
-                prefix='general',
-                initial={
-                    'subject_prefix': project.get_option(
-                        'mail:subject_prefix', options.get('mail.subject-prefix')),
-                },
-            )
-
-        enabled_plugins = []
-        other_plugins = []
-        for plugin in self._iter_plugins():
-            if plugin.is_enabled(project):
-                content = plugin.get_notification_doc_html()
-
-                form = plugin.project_conf_form
-                if form is not None:
-                    view = plugin.configure(request=request, project=project)
-                    if isinstance(view, HttpResponse):
-                        return view
-                    enabled_plugins.append((plugin, mark_safe(content + view)))
-                elif content:
-                    enabled_plugins.append((plugin, mark_safe(content)))
-            elif plugin.can_configure_for_project(project):
-                other_plugins.append(plugin)
-
-        is_user_subbed = project.is_user_subscribed_to_mail_alerts(request.user)
-
-        context = {
-            'page': 'notifications',
-            'enabled_plugins': enabled_plugins,
-            'other_plugins': other_plugins,
-            'general_form': general_form,
-            'digests_form': digests_form,
-            'is_user_subbed': is_user_subbed
-        }
-
-        return self.respond('sentry/project-notifications.html', context)
diff --git a/src/sentry/web/frontend/project_rule_edit.py b/src/sentry/web/frontend/project_rule_edit.py
index 0fce6175d5..e536cce62b 100644
--- a/src/sentry/web/frontend/project_rule_edit.py
+++ b/src/sentry/web/frontend/project_rule_edit.py
@@ -1,11 +1,10 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.rules import rules
 from sentry.models import Rule, RuleStatus
 from sentry.web.frontend.base import ProjectView
 from sentry.utils import json
+from sentry.utils.http import absolute_uri
 
 
 class ProjectRuleEditView(ProjectView):
@@ -20,8 +19,8 @@ class ProjectRuleEditView(ProjectView):
                     status__in=[RuleStatus.ACTIVE, RuleStatus.INACTIVE],
                 )
             except Rule.DoesNotExist:
-                path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
-                return self.redirect(path)
+                path = '/{}/{}/settings/alerts/rules/'.format(organization.slug, project.slug)
+                return self.redirect(absolute_uri(path))
         else:
             rule = Rule(project=project)
 
diff --git a/src/sentry/web/frontend/project_rule_remove.py b/src/sentry/web/frontend/project_rule_remove.py
deleted file mode 100644
index a01d84ad6e..0000000000
--- a/src/sentry/web/frontend/project_rule_remove.py
+++ /dev/null
@@ -1,27 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from django.contrib import messages
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import Rule
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectRuleRemoveView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project, rule_id):
-        path = reverse('sentry-project-rules', args=[organization.slug, project.slug])
-
-        try:
-            rule = Rule.objects.get(project=project, id=rule_id)
-        except Rule.DoesNotExist:
-            return self.redirect(path)
-
-        rule.delete()
-
-        messages.add_message(request, messages.SUCCESS,
-            _('The rule was removed.'))
-
-        return self.redirect(path)
diff --git a/src/sentry/web/frontend/project_rules.py b/src/sentry/web/frontend/project_rules.py
deleted file mode 100644
index 48e2063fa3..0000000000
--- a/src/sentry/web/frontend/project_rules.py
+++ /dev/null
@@ -1,50 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.rules import rules
-from sentry.models import Rule, RuleStatus
-from sentry.web.frontend.base import ProjectView
-
-
-def _generate_rule_label(project, rule, data):
-    rule_cls = rules.get(data['id'])
-    if rule_cls is None:
-        return
-
-    rule_inst = rule_cls(project, data=data, rule=rule)
-    return rule_inst.render_label()
-
-
-class ProjectRulesView(ProjectView):
-    required_scope = 'project:write'
-
-    def get(self, request, organization, team, project):
-        queryset = Rule.objects.filter(
-            project=project,
-            status__in=[RuleStatus.ACTIVE, RuleStatus.INACTIVE],
-        )
-        rule_list = []
-        for rule in queryset:
-            conditions = []
-            for data in rule.data['conditions']:
-                conditions.append(_generate_rule_label(project, rule, data))
-            conditions = list(filter(bool, conditions))
-
-            actions = []
-            for data in rule.data['actions']:
-                actions.append(_generate_rule_label(project, rule, data))
-            actions = list(filter(bool, actions))
-
-            rule_list.append({
-                'id': rule.id,
-                'label': rule.label,
-                'match': rule.data.get('action_match', 'all'),
-                'actions': actions,
-                'conditions': conditions,
-            })
-
-        context = {
-            'page': 'rules',
-            'rule_list': rule_list,
-        }
-
-        return self.respond('sentry/projects/rules/list.html', context)
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 2082f37c22..95c4f28916 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -8,6 +8,7 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 from uuid import uuid1
 
+from sentry import options
 from sentry.models import AuditLogEntryEvent, Project, Team
 from sentry.web.forms.fields import (
     CustomTypedChoiceField, RangeField, OriginsField, IPNetworksField,
@@ -88,6 +89,9 @@ class EditProjectForm(forms.ModelForm):
         widget=forms.TextInput(attrs={'placeholder': _('e.g. production')}),
         required=False,
     )
+    mail_subject_prefix = forms.CharField(
+        label=_('Subject Prefix'), required=False,
+        help_text=_('Choose a custom prefix for emails from this project.'))
 
     class Meta:
         fields = ('name', 'team', 'slug')
@@ -218,6 +222,8 @@ class ProjectSettingsView(ProjectView):
                 'scrape_javascript': bool(project.get_option('sentry:scrape_javascript', True)),
                 'blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
                 'default_environment': project.get_option('sentry:default_environment'),
+                'mail_subject_prefix': project.get_option(
+                    'mail:subject_prefix', options.get('mail.subject-prefix')),
             },
         )
 
@@ -244,11 +250,15 @@ class ProjectSettingsView(ProjectView):
                 # Value can't be overridden if set on the org level
                 if opt in form.org_overrides and organization.get_option(opt_key, False):
                     continue
+                if opt == 'mail_subject_prefix':
+                    key = 'mail:subject_prefix'
+                else:
+                    key = 'sentry:%s' % (opt,)
                 value = form.cleaned_data.get(opt)
                 if value is None:
-                    project.delete_option(opt_key)
+                    project.delete_option(key)
                 else:
-                    project.update_option(opt_key, value)
+                    project.update_option(key, value)
 
             project.update_option('sentry:reviewed-callsign', True)
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 4a4696e3e3..1997742548 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -53,7 +53,6 @@ from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.organization_settings import OrganizationSettingsView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
 from sentry.web.frontend.project_keys import ProjectKeysView
-from sentry.web.frontend.project_notifications import ProjectNotificationsView
 from sentry.web.frontend.project_plugin_configure import \
     ProjectPluginConfigureView
 from sentry.web.frontend.project_plugin_disable import ProjectPluginDisableView
@@ -64,8 +63,6 @@ from sentry.web.frontend.project_quotas import ProjectQuotasView
 from sentry.web.frontend.project_release_tracking import \
     ProjectReleaseTrackingView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
-from sentry.web.frontend.project_rule_remove import ProjectRuleRemoveView
-from sentry.web.frontend.project_rules import ProjectRulesView
 from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.project_tags import ProjectTagsView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
@@ -415,22 +412,12 @@ urlpatterns += patterns(
         ProjectQuotasView.as_view(),
         name='sentry-manage-project-quotas'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/notifications/$',
-        ProjectNotificationsView.as_view(),
-        name='sentry-project-notifications'),
-
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/$',
-        ProjectRulesView.as_view(),
-        name='sentry-project-rules'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/(?P<rule_id>\d+)/edit/$',
-        ProjectRuleEditView.as_view(),
-        name='sentry-edit-project-rule'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/(?P<rule_id>\d+)/remove/$',
-        ProjectRuleRemoveView.as_view(),
-        name='sentry-remove-project-rule'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/rules/new/$',
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/alerts/rules/new/$',
         ProjectRuleEditView.as_view(),
         name='sentry-new-project-rule'),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/alerts/rules/(?P<rule_id>\d+)/$',
+        ProjectRuleEditView.as_view(),
+        name='sentry-edit-project-rule'),
 
     url(r'^avatar/(?P<avatar_id>[^\/]+)/$',
         UserAvatarPhotoView.as_view(),
diff --git a/tests/acceptance/test_project_alert_settings.py b/tests/acceptance/test_project_alert_settings.py
new file mode 100644
index 0000000000..b2e3006a1b
--- /dev/null
+++ b/tests/acceptance/test_project_alert_settings.py
@@ -0,0 +1,66 @@
+from __future__ import absolute_import
+
+from sentry.models import Rule
+from sentry.testutils import AcceptanceTestCase
+
+
+class ProjectAlertSettingsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ProjectAlertSettingsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+
+        action_data = {
+            'id': 'sentry.rules.actions.notify_event.NotifyEventAction',
+        }
+        condition_data = {
+            'id': 'sentry.rules.conditions.every_event.EveryEventCondition',
+        }
+
+        Rule.objects.filter(project=self.project).delete()
+
+        Rule.objects.create(
+            project=self.project,
+            data={
+                'conditions': [condition_data],
+                'actions': [action_data],
+            }
+        )
+
+        self.login_as(self.user)
+        self.path1 = '/{}/{}/settings/alerts/'.format(self.org.slug, self.project.slug)
+        self.path2 = '/{}/{}/settings/alerts/rules/'.format(self.org.slug, self.project.slug)
+
+    def test_settings_load(self):
+        self.browser.get(self.path1)
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('project alert settings')
+        self.browser.wait_until('.ref-plugin-enable-webhooks')
+        self.browser.click('.ref-plugin-enable-webhooks')
+        self.browser.wait_until('.ref-plugin-config-webhooks')
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('project alert settings webhooks enabled')
+
+    def test_rules_load(self):
+        self.browser.get(self.path2)
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.wait_until('.rules-list')
+        self.browser.snapshot('project alert rules')
diff --git a/tests/sentry/web/frontend/test_project_notifications.py b/tests/sentry/web/frontend/test_project_notifications.py
deleted file mode 100644
index bbb42166f9..0000000000
--- a/tests/sentry/web/frontend/test_project_notifications.py
+++ /dev/null
@@ -1,28 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ProjectNotificationsTest(TestCase):
-    def setUp(self):
-        super(ProjectNotificationsTest, self).setUp()
-        self.owner = self.create_user()
-        self.organization = self.create_organization(owner=self.owner)
-        self.team = self.create_team(organization=self.organization)
-        self.project = self.create_project(team=self.team)
-
-    @fixture
-    def path(self):
-        return reverse('sentry-project-notifications', args=[
-            self.organization.slug, self.project.slug,
-        ])
-
-    def test_renders_with_context(self):
-        self.login_as(self.owner)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/project-notifications.html')
-        assert resp.context['project'] == self.project
diff --git a/tests/sentry/web/frontend/test_project_rules.py b/tests/sentry/web/frontend/test_project_rules.py
deleted file mode 100644
index 38d2c2132c..0000000000
--- a/tests/sentry/web/frontend/test_project_rules.py
+++ /dev/null
@@ -1,26 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ProjectRuleTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-project-rules', args=[self.organization.slug, self.project.slug])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_simple(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/projects/rules/list.html')
-        assert resp.context['organization'] == self.organization
-        assert resp.context['team'] == self.team
-        assert resp.context['project'] == self.project
-        assert resp.context['rule_list']
