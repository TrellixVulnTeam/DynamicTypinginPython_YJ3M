commit 90c3327ce1e7c5f463355cec24ba6f73988f44a3
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Tue Jan 30 15:15:07 2018 -0800

    test(teams): Add tests for team serializer hasAccess

diff --git a/tests/sentry/api/serializers/test_team.py b/tests/sentry/api/serializers/test_team.py
index 0b593f3d42..5b5557284f 100644
--- a/tests/sentry/api/serializers/test_team.py
+++ b/tests/sentry/api/serializers/test_team.py
@@ -27,6 +27,106 @@ class TeamSerializerTest(TestCase):
             'id': six.text_type(team.id),
         }
 
+    def test_member_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization)
+        team = self.create_team(organization=organization)
+
+        result = serialize(team, user)
+        result.pop('dateCreated')
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(team, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is False
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(team, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
+    def test_admin_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization, role='admin')
+        team = self.create_team(organization=organization)
+
+        result = serialize(team, user)
+        result.pop('dateCreated')
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(team, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is False
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(team, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
+    def test_manager_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization, role='manager')
+        team = self.create_team(organization=organization)
+
+        result = serialize(team, user)
+        result.pop('dateCreated')
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(team, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(team, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
+    def test_owner_access(self):
+        user = self.create_user(username='foo')
+        organization = self.create_organization()
+        self.create_member(user=user, organization=organization, role='owner')
+        team = self.create_team(organization=organization)
+
+        result = serialize(team, user)
+        result.pop('dateCreated')
+
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        organization.flags.allow_joinleave = False
+        organization.save()
+        result = serialize(team, user)
+        # after changing to allow_joinleave=False
+        assert result['hasAccess'] is True
+        assert result['isMember'] is False
+
+        self.create_team_membership(user=user, team=team)
+        result = serialize(team, user)
+        # after giving them access to team
+        assert result['hasAccess'] is True
+        assert result['isMember'] is True
+
 
 class TeamWithProjectsSerializerTest(TestCase):
     def test_simple(self):
