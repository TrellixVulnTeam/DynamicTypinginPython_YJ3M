commit 26b3fe8375d4029cedf700b3c73ffb3c176360ec
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 19 19:11:48 2013 -0700

    Add node deletion support (automatic via group deletion)

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index ac90193a73..56fd80c9f4 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -13,6 +13,7 @@ import logging
 import warnings
 
 from django.db import models
+from django.db.models.signals import post_delete
 
 from sentry.utils.cache import memoize
 from sentry.utils.compat import pickle
@@ -76,6 +77,22 @@ class NodeField(GzippedDictField):
     """
     __metaclass__ = models.SubfieldBase
 
+    def contribute_to_class(self, cls, name):
+        super(NodeField, self).contribute_to_class(cls, name)
+        post_delete.connect(
+            self.on_delete,
+            sender=self.model,
+            weak=False)
+
+    def on_delete(self, instance, **kwargs):
+        from sentry import app
+
+        value = getattr(instance, self.name)
+        if not value.id:
+            return
+
+        app.nodestore.delete(value.id)
+
     def to_python(self, value):
         if isinstance(value, basestring) and value:
             try:
diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index 06cd44845f..13911cd118 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -20,6 +20,12 @@ class NodeStorage(object):
         self.set(node_id, data)
         return node_id
 
+    def delete(self, id):
+        """
+        >>> nodestore.delete('key1')
+        """
+        raise NotImplementedError
+
     def get(self, id):
         """
         >>> data = nodestore.get('key1')
diff --git a/src/sentry/nodestore/django/backend.py b/src/sentry/nodestore/django/backend.py
index cf5f1381e2..49310e2184 100644
--- a/src/sentry/nodestore/django/backend.py
+++ b/src/sentry/nodestore/django/backend.py
@@ -17,6 +17,9 @@ from .models import Node
 
 
 class DjangoNodeStorage(NodeStorage):
+    def delete(self, id):
+        Node.objects.filter(id=id).delete()
+
     def get(self, id):
         try:
             return Node.objects.get(id=id).data
diff --git a/src/sentry/nodestore/multi/backend.py b/src/sentry/nodestore/multi/backend.py
index 99ad574ba5..6c225795b5 100644
--- a/src/sentry/nodestore/multi/backend.py
+++ b/src/sentry/nodestore/multi/backend.py
@@ -67,3 +67,14 @@ class MultiNodeStorage(NodeStorage):
 
         if should_raise:
             raise
+
+    def delete(self, id):
+        should_raise = False
+        for backend in self.backends:
+            try:
+                backend.delete(id)
+            except Exception:
+                should_raise = True
+
+        if should_raise:
+            raise
diff --git a/src/sentry/nodestore/riak/backend.py b/src/sentry/nodestore/riak/backend.py
index 608ed5fdda..2b9ad2faa2 100644
--- a/src/sentry/nodestore/riak/backend.py
+++ b/src/sentry/nodestore/riak/backend.py
@@ -32,6 +32,10 @@ class RiakNodeStorage(NodeStorage):
         obj.store()
         return obj.key
 
+    def delete(self, id):
+        obj = self.bucket.new(key=id)
+        obj.delete()
+
     def get(self, id):
         # just fetch it from a random backend, we're not aiming for consistency
         obj = self.bucket.get(key=id)
diff --git a/tests/sentry/nodestore/django/backend/tests.py b/tests/sentry/nodestore/django/backend/tests.py
index 1b13f3ff71..d44893831c 100644
--- a/tests/sentry/nodestore/django/backend/tests.py
+++ b/tests/sentry/nodestore/django/backend/tests.py
@@ -19,7 +19,7 @@ class DjangoNodeStorageTest(TestCase):
             }
         )
 
-        result = self.ns.get('d2502ebbd7df41ceba8d3275595cac33')
+        result = self.ns.get(node.id)
         assert result == node.data
 
     def test_get_multi(self):
@@ -74,3 +74,14 @@ class DjangoNodeStorageTest(TestCase):
         assert Node.objects.get(id=node_id).data == {
             'foo': 'bar',
         }
+
+    def test_delete(self):
+        node = Node.objects.create(
+            id='d2502ebbd7df41ceba8d3275595cac33',
+            data={
+                'foo': 'bar',
+            }
+        )
+
+        self.ns.delete(node.id)
+        assert not Node.objects.filter(id=node.id).exists()
