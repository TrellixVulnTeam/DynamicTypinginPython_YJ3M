commit 6b2aafb285b6cdac7e98b4d9afe70f75accd223f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Feb 7 10:59:57 2019 -0800

    feat: Add redirect to project user feedback page for Sentry 10 (#11956)

diff --git a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
index b6a99f9b56..5ee706d177 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
@@ -1,7 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
-import {Link} from 'react-router';
+import {Link, browserHistory} from 'react-router';
 import qs from 'query-string';
 import {omit, isEqual} from 'lodash';
 import SentryTypes from 'app/sentryTypes';
@@ -14,6 +14,7 @@ import EventUserFeedback from 'app/components/events/userFeedback';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {t, tct} from 'app/locale';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
+import withOrganization from 'app/utils/withOrganization';
 
 import UserFeedbackContainer from './container';
 
@@ -21,12 +22,17 @@ const ProjectUserFeedback = createReactClass({
   displayName: 'ProjectUserFeedback',
 
   propTypes: {
+    organization: SentryTypes.Organization.isRequired,
     defaultQuery: PropTypes.string,
     defaultStatus: PropTypes.string,
     setProjectNavSection: PropTypes.func,
     environment: SentryTypes.Environment,
   },
 
+  contextTypes: {
+    project: SentryTypes.Project,
+  },
+
   mixins: [ApiMixin],
 
   getDefaultProps() {
@@ -50,6 +56,16 @@ const ProjectUserFeedback = createReactClass({
   },
 
   componentWillMount() {
+    // Redirect any Sentry 10 user that has followed an old link and ended up here
+    const {organization, params: {orgId}} = this.props;
+    const hasSentry10 = new Set(organization.features).has('sentry10');
+    if (hasSentry10) {
+      const projectId = this.context.project.id;
+      browserHistory.replace(
+        `/organizations/${orgId}/user-feedback/?project=${projectId}`
+      );
+    }
+
     this.props.setProjectNavSection('user-feedback');
     this.fetchData();
   },
@@ -210,4 +226,4 @@ const ProjectUserFeedback = createReactClass({
 });
 
 export {ProjectUserFeedback};
-export default withEnvironmentInQueryString(ProjectUserFeedback);
+export default withOrganization(withEnvironmentInQueryString(ProjectUserFeedback));
diff --git a/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx b/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx
index 10f75daa78..a1f49c98fc 100644
--- a/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx
+++ b/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx
@@ -30,7 +30,7 @@ describe('projectUserFeedback', function() {
       },
     };
     const wrapper = shallow(
-      <ProjectUserFeedback {...params} />,
+      <ProjectUserFeedback {...params} organization={TestStubs.Organization()} />,
       TestStubs.routerContext()
     );
     expect(wrapper).toMatchSnapshot();
