commit 45d696248595ac60729f0a6aad198c9ca48191e6
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Apr 28 13:46:16 2020 +0200

    ref: Remove batch_buffers_incr (#18481)
    
    This function is no longer used in sentry and our proprietary usage is soon gone.

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 7963009f76..a6b00ed768 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import six
 
-import contextlib
 import threading
 from time import time
 from binascii import crc32
@@ -25,32 +24,6 @@ _local_buffers = None
 _local_buffers_lock = threading.Lock()
 
 
-@contextlib.contextmanager
-def batch_buffers_incr():
-    global _local_buffers
-
-    with _local_buffers_lock:
-        assert _local_buffers is None
-        _local_buffers = {}
-
-    yield
-
-    with _local_buffers_lock:
-        from sentry.app import buffer
-
-        buffers_to_flush = _local_buffers
-        _local_buffers = None
-
-        for (filters, model), (columns, extra, signal_only) in buffers_to_flush.items():
-            buffer.incr(
-                model=model,
-                columns=columns,
-                filters=dict(filters),
-                extra=extra,
-                signal_only=signal_only,
-            )
-
-
 class PendingBuffer(object):
     def __init__(self, size):
         assert size > 0
@@ -188,28 +161,6 @@ class RedisBuffer(Buffer):
         - Add hashmap key to pending flushes
         """
 
-        if _local_buffers is not None:
-            with _local_buffers_lock:
-                if _local_buffers is not None:
-                    frozen_filters = tuple(sorted(filters.items()))
-                    key = (frozen_filters, model)
-
-                    stored_columns, stored_extra, stored_signal_only = _local_buffers.get(
-                        key, ({}, None, None)
-                    )
-
-                    for k, v in columns.items():
-                        stored_columns[k] = stored_columns.get(k, 0) + v
-
-                    if extra is not None:
-                        stored_extra = extra
-
-                    if signal_only is not None:
-                        stored_signal_only = signal_only
-
-                    _local_buffers[key] = stored_columns, stored_extra, stored_signal_only
-                    return
-
         # TODO(dcramer): longer term we'd rather not have to serialize values
         # here (unless it's to JSON)
         key = self._make_key(model, filters)
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 282afb1f2d..6c9199d7b9 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -7,7 +7,7 @@ from sentry.utils.compat import mock
 
 from datetime import datetime
 from django.utils import timezone
-from sentry.buffer.redis import RedisBuffer, batch_buffers_incr
+from sentry.buffer.redis import RedisBuffer
 from sentry.models import Group, Project
 from sentry.testutils import TestCase
 
@@ -121,34 +121,6 @@ class RedisBufferTest(TestCase):
         pending = client.zrange("b:p", 0, -1)
         assert pending == ["foo"]
 
-    @mock.patch("sentry.buffer.redis.RedisBuffer._make_key", mock.Mock(return_value="foo"))
-    @mock.patch("sentry.buffer.redis.process_incr", mock.Mock())
-    def test_batching_incr_saves_to_redis(self):
-        now = datetime(2017, 5, 3, 6, 6, 6, tzinfo=timezone.utc)
-        client = self.buf.cluster.get_routing_client()
-        model = mock.Mock()
-        model.__name__ = "Mock"
-        columns = {"times_seen": 1}
-        filters = {"pk": 1, "datetime": now}
-        with mock.patch("sentry.app.buffer", self.buf):
-            with batch_buffers_incr():
-                self.buf.incr(model, columns, filters, extra={"foo": "bar", "datetime": now})
-
-                # changes should only be visible on batching_buffers_incr() exit
-                assert not client.hgetall("foo")
-
-                self.buf.incr(model, columns, filters, extra={"foo": "baz", "datetime": now})
-
-        result = client.hgetall("foo")
-        f = result.pop("f")
-        assert pickle.loads(f) == {"pk": 1, "datetime": now}
-        assert pickle.loads(result.pop("e+datetime")) == now
-        assert pickle.loads(result.pop("e+foo")) == "baz"
-        assert result == {"i+times_seen": "2", "m": "mock.mock.Mock"}
-
-        pending = client.zrange("b:p", 0, -1)
-        assert pending == ["foo"]
-
     @mock.patch("sentry.buffer.redis.RedisBuffer._make_key", mock.Mock(return_value="foo"))
     @mock.patch("sentry.buffer.redis.process_incr")
     @mock.patch("sentry.buffer.redis.process_pending")
@@ -231,24 +203,3 @@ class RedisBufferTest(TestCase):
             "s": "1"
         }
     """
-
-    @mock.patch("sentry.buffer.redis.RedisBuffer._make_key", mock.Mock(return_value="foo"))
-    @mock.patch("sentry.buffer.redis._local_buffers", dict())
-    def test_signal_only_saved_local_buffs(self):
-        now = datetime(2017, 5, 3, 6, 6, 6, tzinfo=timezone.utc)
-        model = mock.Mock()
-        model.__name__ = "Mock"
-        columns = {"times_seen": 1}
-        filters = {"pk": 1, "datetime": now}
-
-        self.buf.incr(
-            model, columns, filters, extra={"foo": "bar", "datetime": now}, signal_only=True
-        )
-
-        from sentry.buffer.redis import _local_buffers
-
-        frozen_filters = tuple(sorted(filters.items()))
-        key = (frozen_filters, model)
-        values = _local_buffers[key]
-
-        assert values[-1]  # signal_only stored last
