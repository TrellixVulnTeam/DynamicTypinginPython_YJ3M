commit d09190610ce4b163ddf158192d6b367f20b2056b
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Dec 2 20:33:08 2012 -0800

    Update registration and invite flows to be more consistent

diff --git a/src/sentry/templates/sentry/login.html b/src/sentry/templates/sentry/login.html
index 8e3a197f50..3e9c5a8640 100644
--- a/src/sentry/templates/sentry/login.html
+++ b/src/sentry/templates/sentry/login.html
@@ -36,6 +36,11 @@
                     {% endfor %}
 
                     <fieldset class="form-actions">
+                        {% if CAN_REGISTER %}
+                            <div class="pull-right" style="margin-top: 5px;">
+                                <a href="{% url sentry-register %}">{% trans "Create a new account" %}</a>
+                            </div>
+                        {% endif %}
                         <button type="submit" class="btn btn-primary">{% trans "Login" %}</button>
                     </fieldset>
                 </form>
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 11a5795b68..8d454a8105 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -31,6 +31,7 @@ from sentry.utils.safe import safe_execute
 @never_cache
 def login(request):
     from django.contrib.auth.forms import AuthenticationForm
+    from sentry.conf import settings
 
     if request.user.is_authenticated():
         return login_redirect(request)
@@ -42,13 +43,12 @@ def login(request):
 
     request.session.set_test_cookie()
 
-    AUTH_PROVIDERS = get_auth_providers()
-
     context = csrf(request)
     context.update({
         'form': form,
         'next': request.session.get('_next'),
-        'AUTH_PROVIDERS': AUTH_PROVIDERS,
+        'CAN_REGISTER': settings.ALLOW_REGISTRATION or request.session.get('can_register'),
+        'AUTH_PROVIDERS': get_auth_providers(),
         'SOCIAL_AUTH_CREATE_USERS': dj_settings.SOCIAL_AUTH_CREATE_USERS,
     })
     return render_to_response('sentry/login.html', context, request)
@@ -79,6 +79,8 @@ def register(request):
 
     return render_to_response('sentry/register.html', {
         'form': form,
+        'AUTH_PROVIDERS': get_auth_providers(),
+        'SOCIAL_AUTH_CREATE_USERS': dj_settings.SOCIAL_AUTH_CREATE_USERS,
     }, request)
 
 
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index aac0085a1c..9d066a3fe7 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -242,6 +242,7 @@ class NewTeamMemberTest(BaseTeamTest):
 
 class AcceptInviteTest(BaseTeamTest):
     def test_renders_unauthenticated_template(self):
+        self.client.logout()
         ptm = PendingTeamMember.objects.create(
             email='newuser@example.com',
             token='foobar',
@@ -251,7 +252,7 @@ class AcceptInviteTest(BaseTeamTest):
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/teams/members/accept_invite_unauthenticated.html')
 
-    def test_accepts_invite_and_redirects_if_authenticated(self):
+    def test_renders_authenticated_template(self):
         ptm = PendingTeamMember.objects.create(
             email='newuser@example.com',
             token='foobar',
@@ -259,4 +260,4 @@ class AcceptInviteTest(BaseTeamTest):
         )
         resp = self.client.get(reverse('sentry-accept-invite', args=[ptm.id, ptm.token]))
         self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/teams/members/accept_invite_unauthenticated.html')
+        self.assertTemplateUsed(resp, 'sentry/teams/members/accept_invite.html')
