commit 154f166e0d26df37a878c157b16ea7550e1f5e6e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Jan 4 16:34:33 2018 -0800

    fix(db): RangeQuerySetWrapper may exit too early
    
    RQSW was fetching `result.{order_by}` after yielding the result to the
    caller. It then subsequently checks `if cur_value is None` before
    breaking the loop.
    
    What this means is that if you have a loop and you happen to delete the
    last object within the chunk, `result.pk` ends up being `None` since
    `result.delete()` ends up binding `None` to `pk`.
    
    This changes the logic to pluck off the value before yielding and using
    the `pk` strictly for comparisons as well, since this is exactly what
    `model == model` does internally. But doesn't break when `.pk`
    might have been mutated.

diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index a57ac472f2..54b446661b 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -72,7 +72,7 @@ class RangeQuerySetWrapper(object):
             queryset = queryset.order_by(self.order_by)
 
         # we implement basic cursor pagination for columns that are not unique
-        last_object = None
+        last_object_pk = None
         has_results = True
         while has_results:
             if (max_value and cur_value >= max_value) or (limit and num >= limit):
@@ -93,14 +93,19 @@ class RangeQuerySetWrapper(object):
                 cb(results)
 
             for result in results:
-                if result == last_object:
+                if last_object_pk is not None and result.pk == last_object_pk:
                     continue
 
-                yield result
-
+                # Need to bind value before yielding, because the caller
+                # may mutate the value and we're left with a bad value.
+                # This is commonly the case if iterating over and
+                # deleting, because a Model.delete() mutates the `id`
+                # to `None` causing the loop to exit early.
                 num += 1
+                last_object_pk = result.pk
                 cur_value = getattr(result, self.order_by)
-                last_object = result
+
+                yield result
 
             if cur_value is None:
                 break
diff --git a/tests/sentry/utils/query/tests.py b/tests/sentry/utils/query/tests.py
index a58808387e..2a9c00fcc5 100644
--- a/tests/sentry/utils/query/tests.py
+++ b/tests/sentry/utils/query/tests.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.models import User
 from sentry.testutils import TestCase
-from sentry.utils.query import merge_into
+from sentry.utils.query import merge_into, RangeQuerySetWrapper
 
 
 class MergeIntoTest(TestCase):
@@ -14,3 +14,28 @@ class MergeIntoTest(TestCase):
 
         # make sure we didn't remove the instance
         assert User.objects.filter(id=user_1.id).exists()
+
+
+class RangeQuerySetWrapperTest(TestCase):
+    def test_basic(self):
+        total = 10
+
+        for _ in xrange(total):
+            self.create_user()
+
+        qs = User.objects.all()
+
+        assert len(list(RangeQuerySetWrapper(qs, step=2))) == total
+        assert len(list(RangeQuerySetWrapper(qs, limit=5))) == 5
+
+    def test_loop_and_delete(self):
+        total = 10
+        for _ in xrange(total):
+            self.create_user()
+
+        qs = User.objects.all()
+
+        for user in RangeQuerySetWrapper(qs, step=2):
+            user.delete()
+
+        assert User.objects.all().count() == 0
