commit da7dfb280fcf004eecdcacbbe519fe714880ef7e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 31 12:41:54 2017 +0100

    Restructured native processing a bit to clearer define optional vs required

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 2ac04a9639..14f0be96cd 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -406,7 +406,9 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         try:
             sfrm = self.sym.symbolize_frame(sym_frame, self.sdk_info)
         except SymbolicationFailed as e:
-            if e.is_user_fixable or e.is_sdk_failure:
+            # User fixable but fatal errors are reported as processing
+            # issues.
+            if e.is_user_fixable and e.is_fatal:
                 report_processing_issue(self.data,
                     scope='native',
                     object='dsym:%s' % e.image_uuid,
@@ -418,14 +420,15 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     }
                 )
 
-                # This in many ways currently does not really do anything.
-                # The reason is that once a processing issue is reported
-                # the event will only be stored as a raw event and no
-                # group will be generated.  As a result it also means that
-                # we will not have any user facing event or error showing
-                # up at all.  We want to keep this here though in case we
-                # do not want to report some processing issues (eg:
-                # optional dsyms)
+            # This in many ways currently does not really do anything.
+            # The reason is that once a processing issue is reported
+            # the event will only be stored as a raw event and no
+            # group will be generated.  As a result it also means that
+            # we will not have any user facing event or error showing
+            # up at all.  We want to keep this here though in case we
+            # do not want to report some processing issues (eg:
+            # optional dsyms)
+            if e.is_user_fixable or e.is_sdk_failure:
                 errors.append({
                     'type': e.type,
                     'image_uuid': e.image_uuid,
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index b85479e137..ced0d0637f 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -14,8 +14,13 @@ from sentry.models import DSymSymbol, EventError
 from sentry.constants import MAX_SYM
 
 
+FATAL_ERRORS = (
+    EventError.NATIVE_MISSING_DSYM,
+    EventError.NATIVE_BAD_DSYM,
+)
 USER_FIXABLE_ERRORS = (
     EventError.NATIVE_MISSING_DSYM,
+    EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM,
     EventError.NATIVE_BAD_DSYM,
     EventError.NATIVE_MISSING_SYMBOL,
 )
@@ -65,6 +70,11 @@ class SymbolicationFailed(Exception):
         """These are errors that a user can fix themselves."""
         return self.type in USER_FIXABLE_ERRORS
 
+    @property
+    def is_fatal(self):
+        """If this is true then a processing issues has to be reported."""
+        return self.type in FATAL_ERRORS
+
     @property
     def is_sdk_failure(self):
         """An error that most likely happened because of a bad SDK."""
