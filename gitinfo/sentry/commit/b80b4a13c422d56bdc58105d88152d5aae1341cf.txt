commit b80b4a13c422d56bdc58105d88152d5aae1341cf
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jan 6 16:49:19 2020 -0800

    test: Remove create_event (#16283)

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 79b760e95e..9e4c255649 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -20,7 +20,6 @@ __all__ = (
 )
 
 import base64
-import calendar
 import contextlib
 import os
 import os.path
@@ -63,13 +62,10 @@ from sentry.auth.superuser import (
 from sentry.constants import MODULE_ROOT
 from sentry.eventstream.snuba import SnubaEventStream
 from sentry.models import (
-    GroupEnvironment,
-    GroupHash,
     GroupMeta,
     ProjectOption,
     Repository,
     DeletedOrganization,
-    Environment,
     Organization,
     TotpInterface,
     Dashboard,
@@ -863,42 +859,6 @@ class SnubaTestCase(BaseTestCase):
             ],
         }
 
-    def create_event(self, *args, **kwargs):
-        """\
-        Takes the results from the existing `create_event` method and
-        inserts into the local test Snuba cluster so that tests can be
-        run against the same event data.
-
-        Note that we create a GroupHash as necessary because `create_event`
-        doesn't run them through the 'real' event pipeline. In a perfect
-        world all test events would go through the full regular pipeline.
-        """
-        # XXX: Use `store_event` instead of this!
-        event = Factories.create_event(*args, **kwargs)
-
-        data = event.data.data
-        tags = dict(data.get("tags", []))
-
-        if not data.get("received"):
-            data["received"] = calendar.timegm(event.datetime.timetuple())
-
-        if "environment" in tags:
-            environment = Environment.get_or_create(event.project, tags["environment"])
-
-            GroupEnvironment.objects.get_or_create(
-                environment_id=environment.id, group_id=event.group_id
-            )
-
-        primary_hash = event.get_primary_hash()
-
-        grouphash, _ = GroupHash.objects.get_or_create(
-            project=event.project, group=event.group, hash=primary_hash
-        )
-
-        self.snuba_insert(self.__wrap_event(event, data, grouphash.hash))
-
-        return event
-
     def snuba_insert(self, events):
         "Write a (wrapped) event (or events) to Snuba."
 
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 8cc09746b1..2f071ea1c4 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import, print_function, unicode_literals
 
 from django.conf import settings
 
-import copy
 import io
 import os
 import petname
@@ -45,8 +44,6 @@ from sentry.mediators import (
 from sentry.models import (
     Activity,
     Environment,
-    Event,
-    EventError,
     Group,
     Organization,
     OrganizationMember,
@@ -74,7 +71,6 @@ from sentry.models.integrationfeature import Feature, IntegrationFeature
 from sentry.signals import project_created
 from sentry.snuba.models import QueryAggregations
 from sentry.utils import json
-from sentry.utils.canonical import CanonicalKeyDict
 
 loremipsum = Generator()
 
@@ -469,52 +465,6 @@ class Factories(object):
 
         return useremail
 
-    @staticmethod
-    def create_event(group=None, project=None, event_id=None, normalize=True, **kwargs):
-        # XXX: Do not use this method for new tests! Prefer `store_event`.
-        if event_id is None:
-            event_id = uuid4().hex
-        kwargs.setdefault("project", project if project else group.project)
-        kwargs.setdefault("data", copy.deepcopy(DEFAULT_EVENT_DATA))
-        kwargs.setdefault("platform", kwargs["data"].get("platform", "python"))
-        kwargs.setdefault("message", kwargs["data"].get("message", "message"))
-        if kwargs.get("tags"):
-            tags = kwargs.pop("tags")
-            if isinstance(tags, dict):
-                tags = list(tags.items())
-            kwargs["data"]["tags"] = tags
-        if kwargs.get("stacktrace"):
-            stacktrace = kwargs.pop("stacktrace")
-            kwargs["data"]["stacktrace"] = stacktrace
-
-        user = kwargs.pop("user", None)
-        if user is not None:
-            kwargs["data"]["user"] = user
-
-        kwargs["data"].setdefault("errors", [{"type": EventError.INVALID_DATA, "name": "foobar"}])
-
-        # maintain simple event Factories by supporting the legacy message
-        # parameter just like our API would
-        if "logentry" not in kwargs["data"]:
-            kwargs["data"]["logentry"] = {"message": kwargs["message"] or "<unlabeled event>"}
-
-        if normalize:
-            manager = EventManager(CanonicalKeyDict(kwargs["data"]))
-            manager.normalize()
-            kwargs["data"] = manager.get_data()
-            kwargs["data"].update(manager.materialize_metadata())
-            kwargs["message"] = manager.get_search_message()
-
-        # This is needed so that create_event saves the event in nodestore
-        # under the correct key. This is usually dont in EventManager.save()
-        kwargs["data"].setdefault("node_id", Event.generate_node_id(kwargs["project"].id, event_id))
-
-        event = Event(event_id=event_id, group=group, **kwargs)
-        # emulate EventManager refs
-        event.data.bind_ref(event)
-        event.data.save()
-        return event
-
     @staticmethod
     def store_event(data, project_id, assert_no_errors=True):
         # Like `create_event`, but closer to how events are actually
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 7e60edadaf..6570e509b6 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -148,11 +148,6 @@ class Fixtures(object):
     def create_useremail(self, *args, **kwargs):
         return Factories.create_useremail(*args, **kwargs)
 
-    def create_event(self, event_id=None, group=None, *args, **kwargs):
-        if group is None:
-            group = self.group
-        return Factories.create_event(event_id=event_id, group=group, *args, **kwargs)
-
     def store_event(self, *args, **kwargs):
         return Factories.store_event(*args, **kwargs)
 
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
index de84138373..aaddc47b1f 100644
--- a/src/sentry/utils/pytest/fixtures.py
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -211,8 +211,9 @@ def default_group(factories, default_project):
 @pytest.mark.django_db
 @pytest.fixture(scope="function")
 def default_event(factories, default_group):
-    return factories.create_event(
-        group=default_group, event_id="a" * 32, message="\u3053\u3093\u306b\u3061\u306f"
+    return factories.store_event(
+        data={"event_id": "a" * 32, "message": "\u3053\u3093\u306b\u3061\u306f"},
+        project_id=default_project.id,
     )
 
 
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 5d9264ce53..2c8a6481e1 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -187,8 +187,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
         assert second_task is not None
 
-        second_event = self.create_event(
-            project=second_project, platform="python", message="python error message"
+        second_event = self.store_event(
+            data={"platform": "python", "message": "python error message"},
+            project_id=second_project.id,
         )
         first_event_received.send(
             project=second_project, event=second_event, sender=type(second_project)
