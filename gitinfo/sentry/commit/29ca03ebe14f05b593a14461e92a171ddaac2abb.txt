commit 29ca03ebe14f05b593a14461e92a171ddaac2abb
Author: Leander Rodrigues <leandergrodrigues@gmail.com>
Date:   Fri Feb 21 11:15:59 2020 -0800

    feat(async-csv): Implement streaming downloads on Issue By Tag view (#17140)
    
    Add download interface for Issue By Tags view (with feature-flag)

diff --git a/src/sentry/api/endpoints/data_export_details.py b/src/sentry/api/endpoints/data_export_details.py
index c05300d002..b70841871c 100644
--- a/src/sentry/api/endpoints/data_export_details.py
+++ b/src/sentry/api/endpoints/data_export_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
+from django.http import StreamingHttpResponse
 
 from sentry import features
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationEventPermission
@@ -11,10 +12,6 @@ from sentry.models import ExportedData
 class DataExportDetailsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationEventPermission,)
 
-    def download(self, data_export):
-        # TODO(Leander): Implement safe downloads
-        return
-
     def get(self, request, organization, **kwargs):
         """
         Retrieve information about the temporary file record.
@@ -31,3 +28,12 @@ class DataExportDetailsEndpoint(OrganizationEndpoint):
             return Response(serialize(data_export, request.user))
         except ExportedData.DoesNotExist:
             return Response(status=404)
+
+    def download(self, data_export):
+        file = data_export.file
+        raw_file = file.getfile()
+        response = StreamingHttpResponse(
+            iter(lambda: raw_file.read(4096), b""), content_type="text/csv"
+        )
+        response["Content-Disposition"] = u'attachment; filename="{}"'.format(file.name)
+        return response
diff --git a/src/sentry/static/sentry/app/components/dataExport.tsx b/src/sentry/static/sentry/app/components/dataExport.tsx
new file mode 100644
index 0000000000..d3b2d663c4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/dataExport.tsx
@@ -0,0 +1,79 @@
+import React from 'react';
+
+import {Client} from 'app/api';
+import Feature from 'app/components/acl/feature';
+import Tooltip from 'app/components/tooltip';
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+type DataExportPayload = {
+  queryType: number;
+  queryInfo: any; // TODO(ts): Formalize different possible payloads
+};
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  payload: DataExportPayload;
+};
+
+type State = {
+  inProgress: boolean;
+  dataExportId?: number;
+};
+
+const TooltipMessages = {
+  start: "We'll get all your data in one place and email you when it's ready",
+  progress: "We'll email you when it's ready",
+} as const;
+
+class DataExport extends React.Component<Props, State> {
+  state: State = {
+    inProgress: false,
+  };
+
+  startDataExport = async () => {
+    const {
+      api,
+      organization: {slug},
+      payload: {queryType, queryInfo},
+    } = this.props;
+    const {id: dataExportId} = await api.requestPromise(
+      `/organizations/${slug}/data-export/`,
+      {
+        method: 'POST',
+        data: {
+          query_type: queryType,
+          query_info: queryInfo,
+        },
+      }
+    );
+    this.setState({inProgress: true, dataExportId});
+  };
+
+  render() {
+    const {inProgress, dataExportId} = this.state;
+    return (
+      <Feature features={['data-export']}>
+        {inProgress && dataExportId ? (
+          <Tooltip title={TooltipMessages.progress}>
+            <button className="btn btn-default btn-sm" disabled>
+              {t('Queued up!')}
+            </button>
+          </Tooltip>
+        ) : (
+          <Tooltip title={TooltipMessages.start}>
+            <button className="btn btn-default btn-sm" onClick={this.startDataExport}>
+              {t('Export All to CSV')}
+            </button>
+          </Tooltip>
+        )}
+      </Feature>
+    );
+  }
+}
+
+export {DataExport};
+export default withApi(withOrganization(DataExport));
diff --git a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
index 76463c5775..77848fe5cc 100644
--- a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
+++ b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
@@ -53,10 +53,6 @@ class DataDownload extends AsyncView<Props, State> {
     return [['download', `/organizations/${orgId}/data-export/${dataExportId}/`]];
   }
 
-  handleDownload(): void {
-    // TODO(Leander): Send request to download endpoint
-  }
-
   renderExpired(): React.ReactNode {
     return (
       <React.Fragment>
@@ -85,8 +81,11 @@ class DataDownload extends AsyncView<Props, State> {
 
   renderValid(): React.ReactNode {
     const {download} = this.state;
-    // TODO(Leander): Fix this default fallback behavior
-    const d = new Date(download.dateExpired || '');
+    const {orgId, dataExportId} = this.props.params;
+    if (!download.dateExpired) {
+      return null;
+    }
+    const d = new Date(download.dateExpired);
     return (
       <React.Fragment>
         <h3>{t('Finally!')}</h3>
@@ -100,7 +99,7 @@ class DataDownload extends AsyncView<Props, State> {
           icon="icon-download"
           size="large"
           borderless
-          onClick={() => this.handleDownload()}
+          href={`/api/0/organizations/${orgId}/data-export/${dataExportId}/?download=true`}
         >
           {t('Download CSV')}
         </Button>
@@ -137,7 +136,6 @@ class DataDownload extends AsyncView<Props, State> {
 const ContentContainer = styled('div')`
   text-align: center;
   margin: ${space(4)} auto;
-  /* TODO(Leander): Responsive sizing */
   width: 350px;
   padding: ${space(4)};
   background: ${p => p.theme.whiteDark};
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
index 00a4ec496f..0384d7ef8f 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
@@ -13,6 +13,7 @@ import ExternalLink from 'app/components/links/externalLink';
 import GlobalSelectionLink from 'app/components/globalSelectionLink';
 import Pagination from 'app/components/pagination';
 import TimeSince from 'app/components/timeSince';
+import DataExport from 'app/components/dataExport';
 import space from 'app/styles/space';
 import {Group, Tag, TagValue} from 'app/types';
 
@@ -111,10 +112,20 @@ class GroupTagValues extends AsyncComponent<
           {tag.key === 'user' ? t('Affected Users') : tag.name}
           <a
             href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}
-            className="btn btn-default btn-sm m-left"
+            className="btn btn-default btn-sm m-left m-right"
           >
-            {t('Export to CSV')}
+            {t('Export Page to CSV')}
           </a>
+          <DataExport
+            payload={{
+              queryType: 2,
+              queryInfo: {
+                project_id: group.project.id,
+                group_id: group.id,
+                key: tagKey,
+              },
+            }}
+          />
         </h3>
         <table className="table table-striped">
           <thead>
@@ -141,6 +152,9 @@ const TableWrapper = styled('div')`
   .m-left {
     margin-left: ${space(1.5)};
   }
+  .m-right {
+    margin-right: ${space(1.5)};
+  }
 `;
 
 const TableHeader = styled('th')<{width: number}>`
diff --git a/tests/js/spec/components/dataExport.spec.jsx b/tests/js/spec/components/dataExport.spec.jsx
new file mode 100644
index 0000000000..0b59870763
--- /dev/null
+++ b/tests/js/spec/components/dataExport.spec.jsx
@@ -0,0 +1,74 @@
+import React from 'react';
+import {mount} from 'sentry-test/enzyme';
+
+import WrappedDataExport, {DataExport} from 'app/components/dataExport';
+
+describe('DataExport', function() {
+  const mockUnauthorizedOrg = TestStubs.Organization({
+    features: [],
+  });
+  const mockAuthorizedOrg = TestStubs.Organization({
+    features: ['data-export'],
+  });
+  const mockPayload = {
+    queryType: 2,
+    queryInfo: {project_id: '1', group_id: '1027', key: 'user'},
+  };
+  const mockRouterContext = mockOrganization =>
+    TestStubs.routerContext([
+      {
+        organization: mockOrganization,
+      },
+    ]);
+
+  it('should not render anything for an unauthorized organization', function() {
+    const wrapper = mount(
+      <WrappedDataExport payload={mockPayload} />,
+      mockRouterContext(mockUnauthorizedOrg)
+    );
+    expect(wrapper.isEmptyRender()).toBe(true);
+  });
+
+  it('should render the button for an authorized organization', function() {
+    const wrapper = mount(
+      <WrappedDataExport payload={mockPayload} />,
+      mockRouterContext(mockAuthorizedOrg)
+    );
+    expect(wrapper.isEmptyRender()).toBe(false);
+    expect(wrapper.text()).toBe('Export All to CSV');
+  });
+
+  it('should send a request and disable itself when clicked', async function() {
+    const url = `/organizations/${mockAuthorizedOrg.slug}/data-export/`;
+    const postDataExport = MockApiClient.addMockResponse({
+      url,
+      method: 'POST',
+      body: {id: 721},
+    });
+    const wrapper = mount(
+      <WrappedDataExport payload={mockPayload} />,
+      mockRouterContext(mockAuthorizedOrg)
+    );
+    wrapper.find('button').simulate('click');
+    expect(wrapper.find(DataExport).state()).toEqual({
+      inProgress: false,
+    });
+    expect(postDataExport).toHaveBeenCalledWith(url, {
+      data: {
+        query_type: mockPayload.queryType,
+        query_info: mockPayload.queryInfo,
+      },
+      method: 'POST',
+      error: expect.anything(),
+      success: expect.anything(),
+    });
+    await tick();
+    wrapper.update();
+    expect(wrapper.text()).toBe('Queued up!');
+    expect(wrapper.find('button').is('[disabled]')).toBe(true);
+    expect(wrapper.find(DataExport).state()).toEqual({
+      inProgress: true,
+      dataExportId: 721,
+    });
+  });
+});
