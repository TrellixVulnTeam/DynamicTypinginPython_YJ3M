commit 91af3a1b8397745d662ee2786136f77898a1e031
Author: josh <josh@jrl.ninja>
Date:   Mon Feb 24 23:33:19 2020 +0000

    test: optional testing on Python 3.6 (#17120)

diff --git a/.travis.yml b/.travis.yml
index e59e31f718..c7b91271cd 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -205,6 +205,30 @@ matrix:
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
+    # XXX: this needs to be the same as postgres_default (other than python, name, env, and the rb package override)
+    # NOTE: Migrations need to also be ported to py3.6, but the errors just clog up everything.
+    #       So for now, we're unblocking that by not having MIGRATIONS_TEST_MIGRATE=1.
+    # Allowed to fail!
+    - python: 3.6
+      name: 'Python 3.6 backend (no migrations) [Postgres]'
+      env: TEST_SUITE=postgres DB=postgres SENTRY_PYTHON3=1
+      services:
+        - memcached
+        - redis-server
+        - postgresql
+      before_install:
+        - *pip_install
+        - docker run -d --network host --name clickhouse-server --ulimit nofile=262144:262144 yandex/clickhouse-server:19.11
+        - docker run -d --network host --name snuba --env SNUBA_SETTINGS=test --env CLICKHOUSE_SERVER=localhost:9000 getsentry/snuba
+        - docker ps -a
+      install:
+        - python setup.py install_egg_info
+        - pip install -U -e ".[dev]"
+        - pip uninstall -y rb
+        - pip install -e git+https://github.com/joshuarli/rb.git@505ad7665baba66c7c492b01b0e83d433ed2eb8e#egg=rb
+      before_script:
+        - psql -c 'create database sentry;' -U postgres
+
     # Deploy 'storybook' (component & style guide)
     - name: 'Storybook Deploy'
       language: node_js
@@ -227,6 +251,9 @@ matrix:
       after_success: skip
       after_failure: skip
 
+  allow_failures:
+    - name: 'Python 3.6 backend (no migrations) [Postgres]'
+
 notifications:
   webhooks:
     urls:
diff --git a/conftest.py b/conftest.py
index f20ad9a0df..139e2be950 100644
--- a/conftest.py
+++ b/conftest.py
@@ -4,6 +4,7 @@ import os
 import sys
 from hashlib import md5
 
+import six
 import pytest
 
 pytest_plugins = ["sentry.utils.pytest"]
@@ -50,7 +51,10 @@ def install_sentry_plugins():
 def pytest_collection_modifyitems(config, items):
     for item in items:
         total_groups = int(os.environ.get("TOTAL_TEST_GROUPS", 1))
-        group_num = int(md5(item.location[0]).hexdigest(), 16) % total_groups
+        # TODO(joshuarli): six 1.12.0 adds ensure_binary: six.ensure_binary(item.location[0])
+        group_num = (
+            int(md5(six.text_type(item.location[0]).encode("utf-8")).hexdigest(), 16) % total_groups
+        )
         marker = "group_%s" % group_num
         config.addinivalue_line("markers", marker)
         item.add_marker(getattr(pytest.mark, marker))
diff --git a/setup.py b/setup.py
index 426af0a825..15687b50b5 100755
--- a/setup.py
+++ b/setup.py
@@ -1,14 +1,12 @@
 #!/usr/bin/env python
 from __future__ import absolute_import
 
+import os
 import sys
 
-if sys.version_info[:2] != (2, 7):
+if not os.environ.get("SENTRY_PYTHON3") and sys.version_info[:2] != (2, 7):
     sys.exit("Error: Sentry requires Python 2.7.")
 
-import os
-import os.path
-
 from distutils.command.build import build as BuildCommand
 from setuptools import setup, find_packages
 from setuptools.command.sdist import sdist as SDistCommand
diff --git a/src/sentry/analytics/event.py b/src/sentry/analytics/event.py
index e51e041a33..a413e4317d 100644
--- a/src/sentry/analytics/event.py
+++ b/src/sentry/analytics/event.py
@@ -68,7 +68,7 @@ class Map(Attribute):
 
 
 class Event(object):
-    __slots__ = ["uuid", "attributes", "data", "datetime", "type"]
+    __slots__ = ["uuid", "data", "datetime"]
 
     type = None
 
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 7a9653ec32..eeef974f95 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import io
 import os
 import six
 from six.moves import zip
@@ -575,11 +576,11 @@ def _load_configs():
     base = os.path.join(os.path.abspath(os.path.dirname(__file__)), "enhancement-configs")
     for fn in os.listdir(base):
         if fn.endswith(".txt"):
-            with open(os.path.join(base, fn)) as f:
+            with io.open(os.path.join(base, fn), "rt", encoding="utf-8") as f:
                 # We cannot use `:` in filenames on Windows but we already have ids with
                 # `:` in their names hence this trickery.
                 fn = fn.replace("@", ":")
-                rv[fn[:-4]] = Enhancements.from_config_string(f.read().decode("utf-8"), id=fn[:-4])
+                rv[fn[:-4]] = Enhancements.from_config_string(f.read(), id=fn[:-4])
     return rv
 
 
diff --git a/src/sentry/models/exporteddata.py b/src/sentry/models/exporteddata.py
index 7845fd2572..16be3bcd83 100644
--- a/src/sentry/models/exporteddata.py
+++ b/src/sentry/models/exporteddata.py
@@ -22,7 +22,7 @@ from sentry.utils.http import absolute_uri
 DEFAULT_EXPIRATION = timedelta(weeks=4)
 
 
-class ExportStatus(six.binary_type, Enum):
+class ExportStatus(six.text_type, Enum):
     Early = "EARLY"  # The download is being prepared
     Valid = "VALID"  # The download is ready for the user
     Expired = "EXPIRED"  # The download has been deleted
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index cee80fcc4b..ce19e69ba9 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import collections
 from copy import deepcopy
+import itertools
+
 import six
 
 from sentry.tsdb.base import BaseTSDB, TSDBModel
@@ -125,9 +127,11 @@ class SnubaTSDB(BaseTSDB):
 
     # ``model_query_settings`` is a translation of TSDB models into required settings for querying snuba
     model_query_settings = dict(
-        project_filter_model_query_settings.items()
-        + outcomes_partial_query_settings.items()
-        + non_outcomes_query_settings.items()
+        itertools.chain(
+            project_filter_model_query_settings.items(),
+            outcomes_partial_query_settings.items(),
+            non_outcomes_query_settings.items(),
+        )
     )
 
     project_filter_model_query_settings_lower_rollup = {
@@ -185,8 +189,10 @@ class SnubaTSDB(BaseTSDB):
     }
 
     lower_rollup_query_settings = dict(
-        project_filter_model_query_settings_lower_rollup.items()
-        + other_lower_rollup_query_settings.items()
+        itertools.chain(
+            project_filter_model_query_settings_lower_rollup.items(),
+            other_lower_rollup_query_settings.items(),
+        )
     )
 
     def __init__(self, **options):
diff --git a/src/sentry/utils/services.py b/src/sentry/utils/services.py
index 3df6d30254..9b0d65c1d5 100644
--- a/src/sentry/utils/services.py
+++ b/src/sentry/utils/services.py
@@ -99,11 +99,12 @@ class LazyServiceWrapper(LazyObject):
 
     def expose(self, context):
         base = self._base
+        base_instance = base()
         for key in itertools.chain(base.__all__, ("validate", "setup")):
-            if inspect.ismethod(getattr(base, key)):
+            if inspect.ismethod(getattr(base_instance, key)):
                 context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)
             else:
-                context[key] = getattr(base, key)
+                context[key] = getattr(base_instance, key)
 
 
 def resolve_callable(value):
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index f1ce32f2d8..1a73d8e37c 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -4,8 +4,9 @@ from __future__ import absolute_import
 
 import os.path
 import responses
-from sentry.utils.compat.mock import patch
+from base64 import b64encode
 
+from sentry.utils.compat.mock import patch
 from sentry import eventstore
 from sentry.models import File, Release, ReleaseFile
 from sentry.testutils import TestCase, SnubaTestCase
@@ -13,12 +14,10 @@ from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.utils import json
 
 
+# TODO(joshuarli): six 1.12.0 adds ensure_binary
+# might also want to put this in utils since we pretty much expect the result to be py3 str and not bytes
 BASE64_SOURCEMAP = "data:application/json;base64," + (
-    '{"version":3,"file":"generated.js","sources":["/test.js"],"names":[],"mappings":"AAAA","sourcesContent":["console.log(\\"hello, World!\\")"]}'.encode(
-        "base64"
-    ).replace(
-        "\n", ""
-    )
+    b64encode(u'{"version":3,"file":"generated.js","sources":["/test.js"],"names":[],"mappings":"AAAA","sourcesContent":["console.log(\\"hello, World!\\")"]}'.encode("utf-8")).decode("utf-8").replace("\n", "")
 )
 
 
diff --git a/tests/sentry/utils/hashlib/tests.py b/tests/sentry/utils/hashlib/tests.py
index 0628fecdd7..64cc6b372a 100644
--- a/tests/sentry/utils/hashlib/tests.py
+++ b/tests/sentry/utils/hashlib/tests.py
@@ -14,7 +14,7 @@ HASHLIB_VALUES_TESTS = (
     ("seed", True, "1057fb936dc9056388c0b9b48dd0c7df"),
     ("seed", False, "07aae33053c0f3487882d61353780682"),
     ("seed", 42, "d1ce9a19d659ae70a6b76ef6029ae542"),
-    ("seed", six.binary_type("test"), "334e3fd2f66966a5c785d825c5f03494"),
+    ("seed", six.binary_type("test".encode("utf-8")), "334e3fd2f66966a5c785d825c5f03494"),
     ("seed", six.text_type("test"), "ce35c0ce0d38976f61a5ca951de74a16"),
     ("seed", (4, 2), "d03b32e798444249d726158594d370f6"),
     ("seed", {"test": 42}, "c545cf1c4ab09eff4a1e0fa5209f1645"),
diff --git a/tests/sentry/utils/test_concurrent.py b/tests/sentry/utils/test_concurrent.py
index 529b231aa8..a12983f7e5 100644
--- a/tests/sentry/utils/test_concurrent.py
+++ b/tests/sentry/utils/test_concurrent.py
@@ -1,8 +1,10 @@
 from __future__ import absolute_import
 
+import sys
+
 import pytest
-import thread
 from six.moves.queue import Full
+from six.moves import _thread
 from concurrent.futures import CancelledError, Future
 from contextlib import contextmanager
 from threading import Event
@@ -17,8 +19,9 @@ from sentry.utils.concurrent import (
 )
 
 
+@pytest.mark.skipif(sys.version_info[0] == 3, reason="TODO(python3): stalls on python3")
 def test_execute():
-    assert execute(thread.get_ident).result() != thread.get_ident()
+    assert execute(_thread.get_ident).result() != _thread.get_ident()
 
     with pytest.raises(Exception):
         assert execute(mock.Mock(side_effect=Exception("Boom!"))).result()
