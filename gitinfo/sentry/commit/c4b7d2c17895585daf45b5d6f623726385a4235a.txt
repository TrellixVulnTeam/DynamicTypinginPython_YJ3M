commit c4b7d2c17895585daf45b5d6f623726385a4235a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 25 17:57:16 2015 -0700

    Support creating new rules via API (refs GH-1837)

diff --git a/src/sentry/api/endpoints/project_rule_details.py b/src/sentry/api/endpoints/project_rule_details.py
index 3ad9a614c3..6156c5ea5e 100644
--- a/src/sentry/api/endpoints/project_rule_details.py
+++ b/src/sentry/api/endpoints/project_rule_details.py
@@ -1,89 +1,12 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers, status
+from rest_framework import status
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import RuleSerializer
 from sentry.models import Rule
-from sentry.rules import rules
-
-
-ValidationError = serializers.ValidationError
-
-
-class RuleNodeField(serializers.WritableField):
-    def __init__(self, type):
-        super(RuleNodeField, self).__init__()
-        self.type_name = type
-
-    def to_native(self, obj):
-        return obj
-
-    def from_native(self, data):
-        if not isinstance(data, dict):
-            msg = 'Incorrect type. Expected a mapping, but got %s'
-            raise ValidationError(msg % type(data).__name__)
-
-        if 'id' not in data:
-            raise ValidationError("Missing attribute 'id'")
-
-        cls = rules.get(data['id'], self.type_name)
-        if cls is None:
-            msg = "Invalid node. Could not find '%s'"
-            raise ValidationError(msg % data['id'])
-
-        if not cls(self.context['project'], data).validate_form():
-            raise ValidationError('Node did not pass validation')
-
-        return data
-
-
-class ListField(serializers.WritableField):
-    def __init__(self, child):
-        self.child = child
-        super(ListField, self).__init__()
-
-    def initialize(self, **kwargs):
-        super(ListField, self).initialize(**kwargs)
-        self.child.initialize(**kwargs)
-
-    def to_native(self, obj):
-        return obj
-
-    def from_native(self, data):
-        if not isinstance(data, list):
-            msg = 'Incorrect type. Expected a mapping, but got %s'
-            raise ValidationError(msg % type(data).__name__)
-
-        return map(self.child.from_native, data)
-
-
-class RuleSerializer(serializers.Serializer):
-    name = serializers.CharField(max_length=64)
-    actionMatch = serializers.ChoiceField(choices=(
-        ('all', 'all'),
-        ('any', 'any'),
-        ('none', 'none'),
-    ))
-    actions = ListField(
-        child=RuleNodeField(type='action/event'),
-    )
-    conditions = ListField(
-        child=RuleNodeField(type='condition/event'),
-    )
-
-    def save(self, rule):
-        if self.data.get('name'):
-            rule.label = self.data['name']
-        if self.data.get('actionMatch'):
-            rule.data['action_match'] = self.data['actionMatch']
-        if self.data.get('actions') is not None:
-            rule.data['actions'] = self.data['actions']
-        if self.data.get('conditions') is not None:
-            rule.data['conditions'] = self.data['conditions']
-        rule.save()
-        return rule
 
 
 class ProjectRuleDetailsEndpoint(ProjectEndpoint):
diff --git a/src/sentry/api/endpoints/project_rules.py b/src/sentry/api/endpoints/project_rules.py
index 5ed035921d..96ebab80a0 100644
--- a/src/sentry/api/endpoints/project_rules.py
+++ b/src/sentry/api/endpoints/project_rules.py
@@ -1,7 +1,11 @@
 from __future__ import absolute_import
 
+from rest_framework import status
+from rest_framework.response import Response
+
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import RuleSerializer
 from sentry.models import Rule
 
 
@@ -25,3 +29,30 @@ class ProjectRulesEndpoint(ProjectEndpoint):
             order_by='-id',
             on_results=lambda x: serialize(x, request.user),
         )
+
+    def post(self, request, project):
+        """
+        Create a rule
+
+        Create a new rule for the given project.
+
+            {method} {path}
+            {{
+              "name": "My rule name",
+              "conditions": [],
+              "actions": [],
+              "actionMatch": "all"
+            }}
+
+        """
+        serializer = RuleSerializer(
+            context={'project': project},
+            data=request.DATA,
+        )
+
+        if serializer.is_valid():
+            rule = serializer.save(rule=Rule())
+
+            return Response(serialize(rule, request.user))
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/serializers/rest_framework/__init__.py b/src/sentry/api/serializers/rest_framework/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/api/serializers/rest_framework/list.py b/src/sentry/api/serializers/rest_framework/list.py
new file mode 100644
index 0000000000..fdc0fa8291
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/list.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from rest_framework.serializers import WritableField, ValidationError
+
+
+class ListField(WritableField):
+    def __init__(self, child):
+        self.child = child
+        super(ListField, self).__init__()
+
+    def initialize(self, **kwargs):
+        super(ListField, self).initialize(**kwargs)
+        self.child.initialize(**kwargs)
+
+    def to_native(self, obj):
+        return obj
+
+    def from_native(self, data):
+        if not isinstance(data, list):
+            msg = 'Incorrect type. Expected a mapping, but got %s'
+            raise ValidationError(msg % type(data).__name__)
+
+        return map(self.child.from_native, data)
diff --git a/src/sentry/api/serializers/rest_framework/rule.py b/src/sentry/api/serializers/rest_framework/rule.py
new file mode 100644
index 0000000000..059df8f4ac
--- /dev/null
+++ b/src/sentry/api/serializers/rest_framework/rule.py
@@ -0,0 +1,64 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+
+from sentry.rules import rules
+
+from . import ListField
+
+ValidationError = serializers.ValidationError
+
+
+class RuleNodeField(serializers.WritableField):
+    def __init__(self, type):
+        super(RuleNodeField, self).__init__()
+        self.type_name = type
+
+    def to_native(self, obj):
+        return obj
+
+    def from_native(self, data):
+        if not isinstance(data, dict):
+            msg = 'Incorrect type. Expected a mapping, but got %s'
+            raise ValidationError(msg % type(data).__name__)
+
+        if 'id' not in data:
+            raise ValidationError("Missing attribute 'id'")
+
+        cls = rules.get(data['id'], self.type_name)
+        if cls is None:
+            msg = "Invalid node. Could not find '%s'"
+            raise ValidationError(msg % data['id'])
+
+        if not cls(self.context['project'], data).validate_form():
+            raise ValidationError('Node did not pass validation')
+
+        return data
+
+
+class RuleSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=64)
+    actionMatch = serializers.ChoiceField(choices=(
+        ('all', 'all'),
+        ('any', 'any'),
+        ('none', 'none'),
+    ))
+    actions = ListField(
+        child=RuleNodeField(type='action/event'),
+    )
+    conditions = ListField(
+        child=RuleNodeField(type='condition/event'),
+    )
+
+    def save(self, rule):
+        rule.project = self.context['project']
+        if self.data.get('name'):
+            rule.label = self.data['name']
+        if self.data.get('actionMatch'):
+            rule.data['action_match'] = self.data['actionMatch']
+        if self.data.get('actions') is not None:
+            rule.data['actions'] = self.data['actions']
+        if self.data.get('conditions') is not None:
+            rule.data['conditions'] = self.data['conditions']
+        rule.save()
+        return rule
diff --git a/tests/sentry/api/endpoints/test_project_rules.py b/tests/sentry/api/endpoints/test_project_rules.py
index c20ec64447..5d08f1d633 100644
--- a/tests/sentry/api/endpoints/test_project_rules.py
+++ b/tests/sentry/api/endpoints/test_project_rules.py
@@ -24,3 +24,65 @@ class ProjectRuleListTest(APITestCase):
 
         rule_count = Rule.objects.filter(project=project1).count()
         assert len(response.data) == rule_count
+
+
+class CreateProjectRuleTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        conditions = [{
+            'id': 'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
+            'key': 'foo',
+            'match': 'eq',
+            'value': 'bar',
+        }]
+
+        actions = [{'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}]
+
+        url = reverse('sentry-api-0-project-rules', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.post(url, data={
+            'name': 'hello world',
+            'actionMatch': 'any',
+            'actions': actions,
+            'conditions': conditions,
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id']
+
+        rule = Rule.objects.get(id=response.data['id'])
+        assert rule.label == 'hello world'
+        assert rule.data['action_match'] == 'any'
+        assert rule.data['actions'] == actions
+        assert rule.data['conditions'] == conditions
+
+    def test_missing_name(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        conditions = [{
+            'id': 'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
+            'key': 'foo',
+            'match': 'eq',
+            'value': 'bar',
+        }]
+
+        actions = [{'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}]
+
+        url = reverse('sentry-api-0-project-rules', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.post(url, data={
+            'actionMatch': 'any',
+            'actions': actions,
+            'conditions': conditions,
+        }, format='json')
+
+        assert response.status_code == 400, response.content
