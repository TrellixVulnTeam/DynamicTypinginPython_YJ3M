commit 51bb5802dcfc7672538d3df0b2e3cc2c9126a649
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Oct 6 14:31:01 2015 -0700

    Make sure latest/oldest events also take into account the id
    
    Fixes GH-2105

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index aefd2f8fd2..aff572ee0d 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -51,13 +51,13 @@ class EventDetailsEndpoint(Endpoint):
             base_qs.filter(
                 datetime__gte=event.datetime,
             ).order_by('datetime')[0:5],
-            key=lambda x: (x.datetime, x.id),
+            key=Event.ordering_key,
         )
         prev_events = sorted(
             base_qs.filter(
                 datetime__lte=event.datetime,
             ).order_by('-datetime')[0:5],
-            key=lambda x: (x.datetime, x.id),
+            key=Event.ordering_key,
             reverse=True,
         )
 
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index cead62a651..fb9781e230 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import
 
 import warnings
 
+from operator import attrgetter
 from collections import OrderedDict
 from django.db import models
 from django.utils import timezone
@@ -42,6 +43,9 @@ class Event(Model):
 
     objects = BaseManager()
 
+    # Key to use when ordering a list of events manually
+    ordering_key = attrgetter('datetime', 'id')
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_message'
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 30105be406..a9329705f4 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -196,29 +196,34 @@ class Group(Model):
         return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
 
     def get_latest_event(self):
-        # TODO(mattrobenolt): Deal with conflict resolution if
-        # multiple events have the same same exact datetime
         from sentry.models import Event
 
         if not hasattr(self, '_latest_event'):
-            try:
-                self._latest_event = Event.objects.filter(
+            latest_events = sorted(
+                Event.objects.filter(
                     group=self,
-                ).order_by('-datetime')[0]
+                ).order_by('-datetime')[0:5],
+                key=Event.ordering_key,
+                reverse=True,
+            )
+            try:
+                self._latest_event = latest_events[0]
             except IndexError:
                 self._latest_event = None
         return self._latest_event
 
     def get_oldest_event(self):
-        # TODO(mattrobenolt): Deal with conflict resolution if
-        # multiple events have the same same exact datetime
         from sentry.models import Event
 
         if not hasattr(self, '_oldest_event'):
-            try:
-                self._oldest_event = Event.objects.filter(
+            oldest_events = sorted(
+                Event.objects.filter(
                     group=self,
-                ).order_by('datetime')[0]
+                ).order_by('datetime')[0:5],
+                key=Event.ordering_key,
+            )
+            try:
+                self._oldest_event = oldest_events[0]
             except IndexError:
                 self._oldest_event = None
         return self._oldest_event
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 5f6c0b2fdc..f6022f6c82 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
+from datetime import timedelta, datetime
 from django.utils import timezone
 
 from sentry.models import GroupStatus
@@ -27,3 +27,54 @@ class GroupTest(TestCase):
         group.project.update_option('sentry:resolve_age', 1)
 
         assert group.is_resolved()
+
+    def test_get_oldest_latest_event_no_events(self):
+        group = self.create_group()
+        assert group.get_latest_event() is None
+        assert group.get_oldest_event() is None
+
+    def test_get_oldest_latest_events(self):
+        group = self.create_group()
+        for i in xrange(0, 3):
+            self.create_event(
+                event_id=str(i),
+                group=group,
+                datetime=datetime(2013, 8, 13, 3, 8, i),
+            )
+
+        assert group.get_latest_event().event_id == '2'
+        assert group.get_oldest_event().event_id == '0'
+
+    def test_get_oldest_latest_identical_timestamps(self):
+        group = self.create_group()
+        for i in xrange(0, 3):
+            self.create_event(
+                event_id=str(i),
+                group=group,
+                datetime=datetime(2013, 8, 13, 3, 8, 50),
+            )
+
+        assert group.get_latest_event().event_id == '2'
+        assert group.get_oldest_event().event_id == '0'
+
+    def test_get_oldest_latest_almost_identical_timestamps(self):
+        group = self.create_group()
+        self.create_event(
+            event_id='0',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 0),  # earliest
+        )
+        for i in xrange(1, 3):
+            self.create_event(
+                event_id=str(i),
+                group=group,
+                datetime=datetime(2013, 8, 13, 3, 8, 30),  # all in the middle
+            )
+        self.create_event(
+            event_id='3',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 59),  # latest
+        )
+
+        assert group.get_latest_event().event_id == '3'
+        assert group.get_oldest_event().event_id == '0'
