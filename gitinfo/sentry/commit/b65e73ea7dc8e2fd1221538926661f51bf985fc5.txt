commit b65e73ea7dc8e2fd1221538926661f51bf985fc5
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Apr 16 13:36:10 2019 -0700

    ref(search):  Move `first_seen` to Django search. (#12573)
    
    * First attempt at putting first_seen in the django search.
    
    * rough  draft of new condition.
    
    * Add extra filter to scalarconditons
    
    * removed comments
    
    * Fixed problems created by merge
    
    * Removed last aggregate test.
    
    * Added environment ids in first_release

diff --git a/src/sentry/search/snuba/backend.py b/src/sentry/search/snuba/backend.py
index 8b474ccc6d..761b13c3e4 100644
--- a/src/sentry/search/snuba/backend.py
+++ b/src/sentry/search/snuba/backend.py
@@ -52,7 +52,7 @@ aggregation_defs = {
 }
 issue_only_fields = set([
     'query', 'status', 'bookmarked_by', 'assigned_to', 'unassigned',
-    'subscribed_by', 'active_at', 'first_release',
+    'subscribed_by', 'active_at', 'first_release', 'first_seen',
 ])
 
 
@@ -110,8 +110,9 @@ class ScalarCondition(Condition):
         '<': 'lt',
     }
 
-    def __init__(self, field):
+    def __init__(self, field, extra=None):
         self.field = field
+        self.extra = extra
 
     def _get_operator(self, search_filter):
         django_operator = self.OPERATOR_TO_DJANGO.get(search_filter.operator, '')
@@ -121,12 +122,13 @@ class ScalarCondition(Condition):
 
     def apply(self, queryset, search_filter):
         django_operator = self._get_operator(search_filter)
-
         qs_method = queryset.exclude if search_filter.operator == '!=' else queryset.filter
 
-        return qs_method(
-            **{'{}{}'.format(self.field, django_operator): search_filter.value.raw_value}
-        )
+        q_dict = {'{}{}'.format(self.field, django_operator): search_filter.value.raw_value}
+        if self.extra:
+            q_dict.update(self.extra)
+
+        return qs_method(**q_dict)
 
 
 def assigned_to_filter(actor, projects):
@@ -299,18 +301,22 @@ class SnubaSearchBackend(SearchBackend):
 
         # TODO: It's possible `first_release` could be handled by Snuba.
         if environments is not None:
+            environment_ids = [environment.id for environment in environments]
             group_queryset = group_queryset.filter(
-                groupenvironment__environment_id__in=[
-                    environment.id for environment in environments
-                ],
+                groupenvironment__environment_id__in=environment_ids
             )
             group_queryset = QuerySetBuilder({
                 'first_release': QCallbackCondition(
                     lambda version: Q(
                         groupenvironment__first_release__organization_id=projects[0].organization_id,
                         groupenvironment__first_release__version=version,
+                        groupenvironment__environment_id__in=environment_ids,
                     )
                 ),
+                'first_seen': ScalarCondition(
+                    'groupenvironment__first_seen',
+                    {'groupenvironment__environment_id__in': environment_ids}
+                ),
             }).build(group_queryset, search_filters)
         else:
             group_queryset = QuerySetBuilder({
@@ -320,6 +326,7 @@ class SnubaSearchBackend(SearchBackend):
                         first_release__version=version,
                     ),
                 ),
+                'first_seen': ScalarCondition('first_seen'),
             }).build(group_queryset, search_filters)
 
         now = timezone.now()
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 2440f60bf8..147b68918f 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -41,6 +41,7 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
         self.backend = SnubaSearchBackend()
         self.base_datetime = (datetime.utcnow() - timedelta(days=3)).replace(tzinfo=pytz.utc)
 
+        event1_timestamp = (self.base_datetime - timedelta(days=21)).isoformat()[:19]
         self.event1 = self.store_event(
             data={
                 'fingerprint': ['put-me-in-group1'],
@@ -50,7 +51,7 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
                 'tags': {
                     'server': 'example.com',
                 },
-                'timestamp': (self.base_datetime - timedelta(days=21)).isoformat()[:19],
+                'timestamp': event1_timestamp,
                 'stacktrace': {
                     'frames': [{
                         'module': 'group1'
@@ -109,7 +110,6 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
         )
 
         self.group2 = Group.objects.get(id=self.event2.group.id)
-
         assert self.group2.first_seen == self.group2.last_seen == self.event2.datetime
 
         self.group2.status = GroupStatus.RESOLVED
@@ -147,6 +147,17 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
             'staging': self.event2.get_environment(),
         }
 
+    def store_event(self, data, *args, **kwargs):
+        event = super(SnubaSearchTest, self).store_event(data, *args, **kwargs)
+        environment_name = data.get('environment')
+        if environment_name:
+            GroupEnvironment.objects.filter(
+                group_id=event.group_id,
+                environment__name=environment_name,
+                first_seen__gt=event.datetime,
+            ).update(first_seen=event.datetime)
+        return event
+
     def set_up_multi_project(self):
         self.project2 = self.create_project(organization=self.project.organization)
         self.event_p2 = self.store_event(
@@ -705,34 +716,39 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
         assert set(results) == set([self.group1])
 
     def test_age_filter_with_environment(self):
+        # add time instead to make it greater than or less than as needed.
+        group1_first_seen = GroupEnvironment.objects.get(
+            environment=self.environments['production'],
+            group=self.group1,
+        ).first_seen
+
         results = self.make_query(
             environments=[self.environments['production']],
-            age_from=self.group1.first_seen,
+            age_from=group1_first_seen,
             age_from_inclusive=True,
-            search_filter_query='firstSeen:>=%s' % date_to_query_format(self.group1.first_seen),
+            search_filter_query='firstSeen:>=%s' % date_to_query_format(group1_first_seen),
         )
         assert set(results) == set([self.group1])
 
         results = self.make_query(
             environments=[self.environments['production']],
-            age_to=self.group1.first_seen,
+            age_to=group1_first_seen,
             age_to_inclusive=True,
-            search_filter_query='firstSeen:<=%s' % date_to_query_format(self.group1.first_seen),
+            search_filter_query='firstSeen:<=%s' % date_to_query_format(group1_first_seen),
         )
         assert set(results) == set([self.group1])
 
         results = self.make_query(
             environments=[self.environments['production']],
-            age_from=self.group1.first_seen,
+            age_from=group1_first_seen,
             age_from_inclusive=False,
-            search_filter_query='firstSeen:>%s' % date_to_query_format(self.group1.first_seen),
+            search_filter_query='firstSeen:>%s' % date_to_query_format(group1_first_seen),
         )
         assert set(results) == set([])
-
         self.store_event(
             data={
                 'fingerprint': ['put-me-in-group1'],
-                'timestamp': (self.group1.first_seen + timedelta(days=1)).isoformat()[:19],
+                'timestamp': (group1_first_seen + timedelta(days=1)).isoformat()[:19],
                 'message': 'group1',
                 'stacktrace': {
                     'frames': [{
@@ -746,17 +762,17 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
 
         results = self.make_query(
             environments=[self.environments['production']],
-            age_from=self.group1.first_seen,
+            age_from=group1_first_seen,
             age_from_inclusive=False,
-            search_filter_query='firstSeen:>%s' % date_to_query_format(self.group1.first_seen),
+            search_filter_query='firstSeen:>%s' % date_to_query_format(group1_first_seen),
         )
         assert set(results) == set([])
 
         results = self.make_query(
             environments=[Environment.objects.get(name='development')],
-            age_from=self.group1.first_seen,
+            age_from=group1_first_seen,
             age_from_inclusive=False,
-            search_filter_query='firstSeen:>%s' % date_to_query_format(self.group1.first_seen),
+            search_filter_query='firstSeen:>%s' % date_to_query_format(group1_first_seen),
         )
         assert set(results) == set([self.group1])
 
@@ -1152,22 +1168,6 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
             **common_args
         )
 
-        self.make_query(
-            search_filter_query='age:>=%s foo' % date_to_query_format(timezone.now()),
-            query='foo',
-            age_from=timezone.now(),
-            sort_by='new',
-        )
-        assert query_mock.call_args == mock.call(
-            orderby=['-first_seen', 'issue'],
-            aggregations=[
-                ['toUInt64(min(timestamp)) * 1000', '', 'first_seen'],
-                ['uniq', 'issue', 'total'],
-            ],
-            having=[['first_seen', '>=', Any(int)]],
-            **common_args
-        )
-
     def test_pre_and_post_filtering(self):
         prev_max_pre = options.get('snuba.search.max-pre-snuba-candidates')
         options.set('snuba.search.max-pre-snuba-candidates', 1)
