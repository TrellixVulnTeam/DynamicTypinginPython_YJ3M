commit deec3e6da0dada36f095fe10e42ded39b4a5f31a
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Mar 15 19:15:42 2016 -0700

    Reword Redis cluster configuration warnings to be more user-friendly.

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 65cf71f635..3b3984551c 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -27,7 +27,7 @@ class RedisBuffer(Buffer):
     pending_key = 'b:p'
 
     def __init__(self, **options):
-        self.cluster, options = get_cluster_from_options(self, options)
+        self.cluster, options = get_cluster_from_options('SENTRY_BUFFER_OPTIONS', options)
 
     def validate(self):
         try:
diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
index 48735bff04..7837ae865c 100644
--- a/src/sentry/cache/redis.py
+++ b/src/sentry/cache/redis.py
@@ -18,7 +18,7 @@ class RedisCache(BaseCache):
     key_expire = 60 * 60  # 1 hour
 
     def __init__(self, **options):
-        self.cluster, options = get_cluster_from_options(self, options)
+        self.cluster, options = get_cluster_from_options('SENTRY_CACHE_OPTIONS', options)
         self.client = self.cluster.get_routing_client()
 
         super(RedisCache, self).__init__(**options)
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 7d8a934809..b10e7f7994 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -109,7 +109,7 @@ class RedisBackend(Backend):
 
     """
     def __init__(self, **options):
-        self.cluster, options = get_cluster_from_options(self, options)
+        self.cluster, options = get_cluster_from_options('SENTRY_DIGESTS_OPTIONS', options)
 
         self.namespace = options.pop('namespace', 'd')
 
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 32fd831a94..8d67a5fccf 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -23,7 +23,7 @@ class RedisQuota(Quota):
     grace = 60
 
     def __init__(self, **options):
-        self.cluster, options = get_cluster_from_options(self, options)
+        self.cluster, options = get_cluster_from_options('SENTRY_QUOTA_OPTIONS', options)
         super(RedisQuota, self).__init__(**options)
         self.namespace = 'quota'
 
diff --git a/src/sentry/ratelimits/redis.py b/src/sentry/ratelimits/redis.py
index aa803a8cb6..8c1479fd35 100644
--- a/src/sentry/ratelimits/redis.py
+++ b/src/sentry/ratelimits/redis.py
@@ -11,7 +11,7 @@ class RedisRateLimiter(RateLimiter):
     ttl = 60
 
     def __init__(self, **options):
-        self.cluster, options = get_cluster_from_options(self, options)
+        self.cluster, options = get_cluster_from_options('SENTRY_RATELIMITER_OPTIONS', options)
 
     def validate(self):
         try:
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index c70d5b625f..f826542a3d 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -93,7 +93,7 @@ class RedisTSDB(BaseTSDB):
     DEFAULT_SKETCH_PARAMETERS = SketchParameters(3, 128, 50)
 
     def __init__(self, prefix='ts:', vnodes=64, **options):
-        self.cluster, options = get_cluster_from_options(self, options)
+        self.cluster, options = get_cluster_from_options('SENTRY_TSDB_OPTIONS', options)
         self.prefix = prefix
         self.vnodes = vnodes
         self.enable_frequency_sketches = options.pop('enable_frequency_sketches', False)
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 07b13bcc38..8924f17e74 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -12,6 +12,7 @@ from redis.connection import ConnectionPool
 from sentry import options
 from sentry.exceptions import InvalidConfiguration
 from sentry.utils import warnings
+from sentry.utils.warnings import DeprecatedSettingWarning
 from sentry.utils.versioning import Version, check_versions
 
 _pool_cache = {}
@@ -79,7 +80,7 @@ class ClusterManager(object):
 clusters = ClusterManager(options.default_manager)
 
 
-def get_cluster_from_options(backend, options, cluster_manager=clusters):
+def get_cluster_from_options(setting, options, cluster_manager=clusters):
     cluster_option_name = 'cluster'
     default_cluster_name = 'default'
     cluster_constructor_option_names = frozenset(('hosts',))
@@ -96,14 +97,16 @@ def get_cluster_from_options(backend, options, cluster_manager=clusters):
             )
         else:
             warnings.warn(
-                'Providing Redis cluster configuration options ({}) to {!r} is '
-                'deprecated, please update your configuration to use named Redis '
-                'clusters ({!r}).'.format(
-                    ', '.join(map(repr, cluster_constructor_option_names)),
-                    backend,
-                    cluster_option_name,
+                DeprecatedSettingWarning(
+                    '{} parameter of {}'.format(
+                        ', '.join(map(repr, cluster_constructor_option_names)),
+                        setting,
+                    ),
+                    '{}["{}"]'.format(
+                        setting,
+                        cluster_option_name,
+                    ),
                 ),
-                DeprecationWarning,
                 stacklevel=2
             )
         cluster = rb.Cluster(pool_cls=_shared_pool, **cluster_options)
