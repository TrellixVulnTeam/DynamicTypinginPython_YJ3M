commit 612c79cd5acef2e86e4df649902739afadc4497f
Author: Matej Minar <matej.minar@sentry.io>
Date:   Tue Jan 7 10:04:37 2020 +0100

    ref(ts): Convert <ListLink> to typescript (#16206)

diff --git a/src/sentry/static/sentry/app/components/links/listLink.jsx b/src/sentry/static/sentry/app/components/links/listLink.jsx
deleted file mode 100644
index 2607820e9f..0000000000
--- a/src/sentry/static/sentry/app/components/links/listLink.jsx
+++ /dev/null
@@ -1,65 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import omit from 'lodash/omit';
-import {Link} from 'react-router';
-import classNames from 'classnames';
-
-class ListLink extends React.Component {
-  static displayName = 'ListLink';
-
-  static propTypes = {
-    activeClassName: PropTypes.string.isRequired,
-    to: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,
-    query: PropTypes.object,
-    onClick: PropTypes.func,
-    index: PropTypes.bool,
-
-    // If supplied by parent component, decides whether link element
-    // is "active" or not ... overriding default behavior of strict
-    // route matching
-    isActive: PropTypes.func,
-  };
-
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-  };
-
-  static defaultProps = {
-    activeClassName: 'active',
-    index: false,
-  };
-
-  isActive = () => {
-    return (this.props.isActive || this.context.router.isActive)(
-      {pathname: this.props.to, query: this.props.query},
-      this.props.index
-    );
-  };
-
-  getClassName = () => {
-    const _classNames = {};
-
-    if (this.props.className) {
-      _classNames[this.props.className] = true;
-    }
-
-    if (this.isActive()) {
-      _classNames[this.props.activeClassName] = true;
-    }
-
-    return classNames(_classNames);
-  };
-
-  render() {
-    const carriedProps = omit(this.props, 'activeClassName', 'isActive', 'index');
-    return (
-      <li className={this.getClassName()}>
-        <Link {...carriedProps} onlyActiveOnIndex={this.props.index}>
-          {this.props.children}
-        </Link>
-      </li>
-    );
-  }
-}
-
-export default ListLink;
diff --git a/src/sentry/static/sentry/app/components/links/listLink.tsx b/src/sentry/static/sentry/app/components/links/listLink.tsx
new file mode 100644
index 0000000000..b5ed81442d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/links/listLink.tsx
@@ -0,0 +1,68 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import omit from 'lodash/omit';
+import {Link} from 'react-router';
+import classNames from 'classnames';
+import {LocationDescriptor} from 'history';
+
+type Props = {
+  to: LocationDescriptor;
+  index: boolean;
+  activeClassName: string;
+  className?: string;
+  query?: string;
+  onClick?: () => void;
+  // If supplied by parent component, decides whether link element
+  // is "active" or not ... overriding default behavior of strict
+  // route matching
+  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;
+};
+
+class ListLink extends React.Component<Props> {
+  static displayName = 'ListLink';
+
+  static contextTypes = {
+    router: PropTypes.object.isRequired,
+  };
+
+  static defaultProps: Partial<Props> = {
+    activeClassName: 'active',
+    index: false,
+  };
+
+  isActive = () => {
+    const {isActive, to, query, index} = this.props;
+
+    return (isActive || this.context.router.isActive)({pathname: to, query}, index);
+  };
+
+  getClassName = () => {
+    const _classNames = {};
+    const {className, activeClassName} = this.props;
+
+    if (className) {
+      _classNames[className] = true;
+    }
+
+    if (this.isActive()) {
+      _classNames[activeClassName] = true;
+    }
+
+    return classNames(_classNames);
+  };
+
+  render() {
+    const {index, children} = this.props;
+    const carriedProps = omit(this.props, 'activeClassName', 'isActive', 'index');
+
+    return (
+      <li className={this.getClassName()}>
+        <Link {...carriedProps} onlyActiveOnIndex={index}>
+          {children}
+        </Link>
+      </li>
+    );
+  }
+}
+
+export default ListLink;
