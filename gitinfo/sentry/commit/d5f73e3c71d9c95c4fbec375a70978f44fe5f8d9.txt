commit d5f73e3c71d9c95c4fbec375a70978f44fe5f8d9
Author: Jan Michael Auer <account@jauer.org>
Date:   Wed Oct 24 13:14:37 2018 +0200

    ref: Remove DSymApps (#10246)

diff --git a/src/sentry/api/endpoints/debug_files.py b/src/sentry/api/endpoints/debug_files.py
index 3a2e39bac9..05599e9d7d 100644
--- a/src/sentry/api/endpoints/debug_files.py
+++ b/src/sentry/api/endpoints/debug_files.py
@@ -8,7 +8,6 @@ import posixpath
 from django.db import transaction
 from django.db.models import Q
 from rest_framework.response import Response
-from rest_framework import serializers
 
 from sentry import ratelimits
 
@@ -17,12 +16,10 @@ from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import ListField
+from sentry.constants import KNOWN_DIF_TYPES
 from sentry.models import ChunkFileState, FileBlobOwner, ProjectDebugFile, \
-    VersionDSymFile, DSymApp, DIF_PLATFORMS, create_files_from_dif_zip, \
-    get_assemble_status, set_assemble_status
+    create_files_from_dif_zip, get_assemble_status, set_assemble_status
 from sentry.utils import json
-from sentry.constants import KNOWN_DIF_TYPES
 
 try:
     from django.http import (
@@ -35,18 +32,6 @@ logger = logging.getLogger('sentry.api')
 ERR_FILE_EXISTS = 'A file matching this debug identifier already exists'
 
 
-class AssociateDsymSerializer(serializers.Serializer):
-    checksums = ListField(child=serializers.CharField(max_length=40))
-    platform = serializers.ChoiceField(choices=zip(
-        DIF_PLATFORMS.keys(),
-        DIF_PLATFORMS.keys(),
-    ))
-    name = serializers.CharField(max_length=250)
-    appId = serializers.CharField(max_length=250)
-    version = serializers.CharField(max_length=40)
-    build = serializers.CharField(max_length=40, required=False)
-
-
 def upload_from_request(request, project):
     if 'file' not in request.FILES:
         return Response({'detail': 'Missing uploaded file'}, status=400)
@@ -210,42 +195,9 @@ class AssociateDSymFilesEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
     permission_classes = (ProjectReleasePermission, )
 
+    # Legacy endpoint, kept for backwards compatibility
     def post(self, request, project):
-        serializer = AssociateDsymSerializer(data=request.DATA)
-        if not serializer.is_valid():
-            return Response(serializer.errors, status=400)
-
-        data = serializer.object
-
-        associated = []
-        dsym_app = DSymApp.objects.create_or_update_app(
-            sync_id=None,
-            app_id=data['appId'],
-            project=project,
-            data={'name': data['name']},
-            platform=DIF_PLATFORMS[data['platform']],
-        )
-
-        # There can be concurrent deletes on the underlying file object
-        # that the project dsym file references.  This means that we can
-        # get errors if we don't prefetch this when serializing.  Additionally
-        # performance wise it's a better idea to fetch this in one go.
-        difs = ProjectDebugFile.objects.find_by_checksums(
-            data['checksums'], project).select_related('file')
-
-        for dif in difs:
-            version_dsym_file, created = VersionDSymFile.objects.get_or_create(
-                dsym_file=dif,
-                version=data['version'],
-                build=data.get('build'),
-                defaults=dict(dsym_app=dsym_app),
-            )
-            if created:
-                associated.append(dif)
-
-        return Response({
-            'associatedDsymFiles': serialize(associated, request.user),
-        })
+        return Response({'associatedDsymFiles': []})
 
 
 def find_missing_chunks(organization, chunks):
diff --git a/src/sentry/api/serializers/models/debug_file.py b/src/sentry/api/serializers/models/debug_file.py
index 7e49f9f01b..be621b1e36 100644
--- a/src/sentry/api/serializers/models/debug_file.py
+++ b/src/sentry/api/serializers/models/debug_file.py
@@ -2,8 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.api.serializers import Serializer, register, serialize
-from sentry.models import (ProjectDebugFile, VersionDSymFile, DSymApp, DIF_PLATFORMS_REVERSE)
+from sentry.api.serializers import Serializer, register
+from sentry.models import ProjectDebugFile
 
 
 @register(ProjectDebugFile)
@@ -23,34 +23,3 @@ class DebugFileSerializer(Serializer):
             'data': obj.data or {},
         }
         return d
-
-
-@register(VersionDSymFile)
-class VersionDSymFileSerializer(Serializer):
-    def serialize(self, obj, attrs, user):
-        d = {
-            'id': six.text_type(obj.id),
-            'version': obj.version,
-            'build': obj.build,
-            'dateAdded': obj.date_added,
-            'dsymAppId': obj.dsym_app_id,
-            'dsym': serialize(obj.dsym_file)
-        }
-        return d
-
-
-@register(DSymApp)
-class DSymAppSerializer(Serializer):
-    def serialize(self, obj, attrs, user):
-        d = {
-            'id': six.text_type(obj.id),
-            'iconUrl': obj.data.get('icon_url', None),
-            'appId': six.text_type(obj.app_id),
-            'name': obj.data.get('name', None),
-            'platform': DIF_PLATFORMS_REVERSE.get(obj.platform) or 'unknown',
-            # XXX: this should be renamed.  It's currently only used in
-            # the not yet merged itunes connect plugin (ios, tvos etc.)
-            'platforms': ', '.join(obj.data.get('platforms', [])),
-            'lastSync': obj.last_synced,
-        }
-        return d
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index edaa46efac..e5628b46d6 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -8,13 +8,10 @@ from symbolic import parse_addr, find_best_instruction, arch_get_ip_reg_name, \
     ObjectLookup
 
 from sentry import options
-from django.db import transaction, IntegrityError
-from sentry.models import VersionDSymFile, DifPlatform, DSymApp
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed
-from sentry.lang.native.utils import \
-    get_sdk_from_event, cpu_name_from_data, \
-    rebase_addr, version_build_from_data
+from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data, \
+    rebase_addr
 from sentry.lang.native.systemsymbols import lookup_system_symbols
 from sentry.utils import metrics
 from sentry.stacktraces import StacktraceProcessor
@@ -136,38 +133,10 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             if pf.cache_value is None and pf.data['debug_id'] is not None
         )
 
-        app_info = version_build_from_data(self.data)
-        if app_info is not None:
-            def on_referenced(dif):
-                dsym_app = DSymApp.objects.create_or_update_app(
-                    sync_id=None,
-                    app_id=app_info.id,
-                    project=self.project,
-                    data={'name': app_info.name},
-                    platform=DifPlatform.APPLE,
-                    no_fetch=True
-                )
-                try:
-                    with transaction.atomic():
-                        version_dsym_file, created = VersionDSymFile.objects.get_or_create(
-                            dsym_file=dif,
-                            version=app_info.version,
-                            build=app_info.build,
-                            defaults=dict(dsym_app=dsym_app),
-                        )
-                except IntegrityError:
-                    # XXX: this can currently happen because we only
-                    # support one app per debug file.  Since this can
-                    # happen in some cases anyways we ignore it.
-                    pass
-        else:
-            on_referenced = None
-
         self.sym = Symbolizer(
             self.project,
             self.object_lookup,
             referenced_images=referenced_images,
-            on_dif_referenced=on_referenced
         )
 
         if options.get('symbolserver.enabled'):
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 0bf3619207..c920d9727f 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -121,23 +121,6 @@ def cpu_name_from_data(data):
     return unique_cpu_name
 
 
-def version_build_from_data(data):
-    """Returns release and build string from the given data if it exists."""
-    app_context = data.get('contexts', {}).get('app', {})
-    if app_context is not None:
-        if (app_context.get('app_identifier', None) and
-                app_context.get('app_version', None) and
-                app_context.get('app_build', None) and
-                app_context.get('app_name', None)):
-            return AppInfo(
-                app_context.get('app_identifier', None),
-                app_context.get('app_version', None),
-                app_context.get('app_build', None),
-                app_context.get('app_name', None),
-            )
-    return None
-
-
 def rebase_addr(instr_addr, obj):
     return parse_addr(instr_addr) - parse_addr(obj.addr)
 
diff --git a/src/sentry/models/debugfile.py b/src/sentry/models/debugfile.py
index 12d18e1243..b5ff912a7b 100644
--- a/src/sentry/models/debugfile.py
+++ b/src/sentry/models/debugfile.py
@@ -18,13 +18,10 @@ import shutil
 import hashlib
 import logging
 import tempfile
-from requests.exceptions import RequestException
 
 from jsonfield import JSONField
 from django.db import models, transaction, IntegrityError
 from django.db.models.fields.related import OneToOneRel
-from django.utils import timezone
-from django.utils.translation import ugettext_lazy as _
 
 from symbolic import FatObject, SymbolicError, ObjectErrorUnsupportedObject, \
     SYMCACHE_LATEST_VERSION, SymCache, SymCacheErrorMissingDebugInfo, \
@@ -103,7 +100,7 @@ class VersionDSymFile(Model):
     dsym_app = FlexibleForeignKey('sentry.DSymApp')
     version = models.CharField(max_length=32)
     build = models.CharField(max_length=32, null=True)
-    date_added = models.DateTimeField(default=timezone.now)
+    date_added = models.DateTimeField(default=0)
 
     class Meta:
         app_label = 'sentry'
@@ -111,82 +108,17 @@ class VersionDSymFile(Model):
         unique_together = (('dsym_file', 'version', 'build'), )
 
 
-# TODO(dcramer): pull in enum library
-class DifPlatform(object):
-    GENERIC = 0
-    APPLE = 1
-    ANDROID = 2
-
-
-DIF_PLATFORMS = {
-    'generic': DifPlatform.GENERIC,
-    'apple': DifPlatform.APPLE,
-    'android': DifPlatform.ANDROID,
-}
-DIF_PLATFORMS_REVERSE = dict((v, k) for (k, v) in six.iteritems(DIF_PLATFORMS))
-
-
-def _auto_enrich_data(data, app_id, platform):
-    # If we don't have an icon URL we can try to fetch one from iTunes
-    if 'icon_url' not in data and platform == DifPlatform.APPLE:
-        from sentry.http import safe_urlopen
-        try:
-            rv = safe_urlopen(
-                'https://itunes.apple.com/lookup', params={
-                    'bundleId': app_id,
-                }
-            )
-        except RequestException:
-            pass
-        else:
-            if rv.ok:
-                rv = rv.json()
-                if rv.get('results'):
-                    data['icon_url'] = rv['results'][0]['artworkUrl512']
-
-
-class DSymAppManager(BaseManager):
-    def create_or_update_app(
-        self, sync_id, app_id, project, data=None, platform=DifPlatform.GENERIC,
-        no_fetch=False
-    ):
-        if data is None:
-            data = {}
-        if not no_fetch:
-            _auto_enrich_data(data, app_id, platform)
-        existing_app = DSymApp.objects.filter(app_id=app_id, project=project).first()
-        if existing_app is not None:
-            now = timezone.now()
-            existing_app.update(
-                sync_id=sync_id,
-                data=data,
-                last_synced=now,
-            )
-            return existing_app
-
-        return BaseManager.create(
-            self, sync_id=sync_id, app_id=app_id, data=data, project=project, platform=platform
-        )
-
-
 class DSymApp(Model):
     __core__ = False
 
-    objects = DSymAppManager()
+    objects = BaseManager()
     project = FlexibleForeignKey('sentry.Project')
     app_id = models.CharField(max_length=64)
     sync_id = models.CharField(max_length=64, null=True)
     data = JSONField()
-    platform = BoundedPositiveIntegerField(
-        default=0,
-        choices=(
-            (DifPlatform.GENERIC, _('Generic')),
-            (DifPlatform.APPLE, _('Apple')),
-            (DifPlatform.ANDROID, _('Android')),
-        )
-    )
-    last_synced = models.DateTimeField(default=timezone.now)
-    date_added = models.DateTimeField(default=timezone.now)
+    platform = BoundedPositiveIntegerField(default=0)
+    last_synced = models.DateTimeField(default=0)
+    date_added = models.DateTimeField(default=0)
 
     class Meta:
         app_label = 'sentry'
diff --git a/tests/sentry/api/endpoints/test_debug_files.py b/tests/sentry/api/endpoints/test_debug_files.py
index e242de95fd..aef89ac845 100644
--- a/tests/sentry/api/endpoints/test_debug_files.py
+++ b/tests/sentry/api/endpoints/test_debug_files.py
@@ -8,7 +8,7 @@ from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
-from sentry.models import ProjectDebugFile, VersionDSymFile
+from sentry.models import ProjectDebugFile
 
 # This is obviously a freely generated UUID and not the checksum UUID.
 # This is permissible if users want to send different UUIDs
@@ -108,14 +108,8 @@ class DebugFilesUploadTest(APITestCase):
         )
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data['associatedDsymFiles'][0]['uuid'] == PROGUARD_UUID
-
-        vdf = VersionDSymFile.objects.get()
-        assert vdf.version == '1.0'
-        assert vdf.build == '1'
-        assert vdf.dsym_app.app_id == 'com.example.myapp'
-        assert vdf.dsym_file.debug_id == PROGUARD_UUID
+        assert 'associatedDsymFiles' in response.data
+        assert response.data['associatedDsymFiles'] == []
 
     def test_associate_proguard_dsym_no_build(self):
         project = self.create_project(name='foo')
@@ -162,14 +156,8 @@ class DebugFilesUploadTest(APITestCase):
         )
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data['associatedDsymFiles'][0]['uuid'] == PROGUARD_UUID
-
-        vdf = VersionDSymFile.objects.get()
-        assert vdf.version == '1.0'
-        assert vdf.build is None
-        assert vdf.dsym_app.app_id == 'com.example.myapp'
-        assert vdf.dsym_file.debug_id == PROGUARD_UUID
+        assert 'associatedDsymFiles' in response.data
+        assert response.data['associatedDsymFiles'] == []
 
     def test_dsyms_requests(self):
         project = self.create_project(name='foo')
@@ -210,9 +198,8 @@ class DebugFilesUploadTest(APITestCase):
         )
 
         assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data['associatedDsymFiles'][0]['uuid'] == PROGUARD_UUID
-        download_id = response.data['associatedDsymFiles'][0]['id']
+        assert 'associatedDsymFiles' in response.data
+        assert response.data['associatedDsymFiles'] == []
 
         url = reverse(
             'sentry-api-0-dsym-files',
@@ -234,6 +221,7 @@ class DebugFilesUploadTest(APITestCase):
         assert dsym['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
         assert dsym['symbolType'] == 'proguard'
         assert dsym['uuid'] == '6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1'
+        download_id = dsym['id']
 
         # Test download
         response = self.client.get(url + "?id=" + download_id)
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index c8d4cac4b5..196b48df5c 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 import os
 
 from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data, \
-    version_build_from_data, merge_minidump_event
+    merge_minidump_event
 
 
 def test_get_sdk_from_event():
@@ -60,77 +60,6 @@ def test_cpu_name_from_data():
     assert cpu_name == 'arm64'
 
 
-def test_version_build_from_data():
-
-    app_info = version_build_from_data(
-        {
-            'contexts': {
-                'app': {
-                    'app_build': "2",
-                    'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
-                    'app_id': "45BA82DF-F3E3-37F7-9D88-12A1AAB719E7",
-                    'app_version': "1.0",
-                    'app_identifier': "com.rokkincat.SentryExample",
-                    'app_name': "SwiftExample",
-                    'app_start_time': "2017-03-28T15:14:01Z",
-                    'type': "app",
-                    'build_type': "simulator"
-                }
-            }
-        }
-    )
-    assert app_info.version == '1.0'
-    assert app_info.build == '2'
-    assert app_info.name == 'SwiftExample'
-    assert app_info.id == 'com.rokkincat.SentryExample'
-
-    app_info = version_build_from_data(
-        {
-            'contexts': {
-                'app': {
-                    'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
-                    'app_id': "45BA82DF-F3E3-37F7-9D88-12A1AAB719E7",
-                    'app_version': "1.0",
-                    'app_identifier': "com.rokkincat.SentryExample",
-                    'app_name': "SwiftExample",
-                    'app_start_time': "2017-03-28T15:14:01Z",
-                    'type': "app",
-                    'build_type': "simulator"
-                }
-            }
-        }
-    )
-    assert app_info is None
-
-    app_info = version_build_from_data(
-        {
-            'contexts': {
-                'app': {
-                    'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
-                    'app_id': "45BA82DF-F3E3-37F7-9D88-12A1AAB719E7",
-                    'app_identifier': "com.rokkincat.SentryExample",
-                    'app_name': "SwiftExample",
-                    'app_start_time': "2017-03-28T15:14:01Z",
-                    'type': "app",
-                    'build_type': "simulator"
-                }
-            }
-        }
-    )
-    assert app_info is None
-
-    app_info = version_build_from_data(
-        {
-            'contexts': {
-                'bal': {
-                    'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
-                }
-            }
-        }
-    )
-    assert app_info is None
-
-
 def test_cpu_name_from_data_inferred_type():
     cpu_name = cpu_name_from_data(
         {
