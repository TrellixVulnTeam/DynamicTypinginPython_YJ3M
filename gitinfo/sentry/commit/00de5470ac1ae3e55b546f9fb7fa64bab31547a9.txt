commit 00de5470ac1ae3e55b546f9fb7fa64bab31547a9
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 4 15:43:36 2014 -0400

    Remove writes and usage of *CountByMinute

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index c28ec0d407..ed3270a726 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -8,17 +8,14 @@ sentry.manager
 
 from __future__ import absolute_import
 
-import datetime
 import hashlib
 import logging
-import time
 import warnings
 import uuid
 
 from django.conf import settings
 from django.contrib.auth.models import UserManager
 from django.db import transaction, IntegrityError
-from django.db.models import Sum
 from django.utils import timezone
 from django.utils.datastructures import SortedDict
 
@@ -26,7 +23,7 @@ from raven.utils.encoding import to_string
 
 from sentry import app
 from sentry.constants import (
-    STATUS_RESOLVED, STATUS_UNRESOLVED, MINUTE_NORMALIZATION,
+    STATUS_RESOLVED, STATUS_UNRESOLVED,
     LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH,
     MEMBER_USER
 )
@@ -36,8 +33,7 @@ from sentry.signals import regression_signal
 from sentry.tasks.index import index_event
 from sentry.tsdb.base import TSDBModel
 from sentry.utils.cache import memoize
-from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
-from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
+from sentry.utils.db import get_db_engine, attach_foreignkey
 from sentry.utils.safe import safe_execute, trim, trim_dict, trim_frames
 from sentry.utils.strings import strip
 
@@ -107,106 +103,7 @@ class UserManager(BaseManager, UserManager):
     pass
 
 
-class ChartMixin(object):
-    def get_chart_data_for_group(self, instances, max_days=90, key=None):
-        if not instances:
-            if key is None:
-                return []
-            return {}
-
-        if hasattr(instances[0], '_state'):
-            db = instances[0]._state.db or 'default'
-        else:
-            db = 'default'
-
-        field = self.model.groupcountbyminute_set.related
-        column = field.field.name
-        queryset = field.model.objects.filter(**{
-            '%s__in' % column: instances,
-        })
-
-        return self._get_chart_data(queryset, max_days, db, key=key)
-
-    def get_chart_data(self, instance, max_days=90, key=None):
-        if hasattr(instance, '_state'):
-            db = instance._state.db or 'default'
-        else:
-            db = 'default'
-
-        queryset = instance.groupcountbyminute_set
-
-        return self._get_chart_data(queryset, max_days, db, key=key)
-
-    def _get_chart_data(self, queryset, max_days=90, db='default', key=None):
-        if not has_charts(db):
-            if key is None:
-                return []
-            return {}
-
-        today = timezone.now().replace(microsecond=0, second=0)
-
-        # the last interval is not accurate, so we exclude it
-        # TODO: it'd be ideal to normalize the last datapoint so that we can include it
-        # and not have ~inaccurate data for up to MINUTE_NORMALIZATION
-        today -= datetime.timedelta(minutes=MINUTE_NORMALIZATION)
-
-        if max_days >= 14:
-            g_type = 'date'
-            d_type = 'days'
-            points = max_days
-            modifier = 1
-            today = today.replace(hour=0)
-        elif max_days >= 1:
-            g_type = 'hour'
-            d_type = 'hours'
-            points = max_days * 24
-            modifier = 1
-            today = today.replace(minute=0)
-        else:
-            g_type = 'minute'
-            d_type = 'minutes'
-            modifier = MINUTE_NORMALIZATION
-            points = max_days * 24 * (60 / modifier)
-
-        min_date = today - datetime.timedelta(days=max_days)
-
-        method = get_sql_date_trunc('date', db, grouper=g_type)
-
-        chart_qs = queryset.filter(
-            date__gte=min_date,
-        ).extra(
-            select={'grouper': method},
-        ).annotate(
-            num=Sum('times_seen'),
-        )
-
-        if key:
-            chart_qs = chart_qs.values_list(key, 'grouper', 'num').order_by(key, 'grouper')
-        else:
-            chart_qs = chart_qs.values_list('grouper', 'num').order_by('grouper')
-
-        if key is None:
-            rows = {None: dict(chart_qs)}
-        else:
-            rows = {}
-            for item, grouper, num in chart_qs:
-                if item not in rows:
-                    rows[item] = {}
-                rows[item][grouper] = num
-
-        results = {}
-        for item, tsdata in rows.iteritems():
-            results[item] = []
-            for point in xrange(points, -1, -1):
-                dt = today - datetime.timedelta(**{d_type: point * modifier})
-                results[item].append((int(time.mktime((dt).timetuple())) * 1000, tsdata.get(dt, 0)))
-
-        if key is None:
-            return results[None]
-        return results
-
-
-class GroupManager(BaseManager, ChartMixin):
+class GroupManager(BaseManager):
     use_for_related_fields = True
 
     def normalize_event_data(self, data):
@@ -490,8 +387,6 @@ class GroupManager(BaseManager, ChartMixin):
         return True
 
     def _create_group(self, event, tags=None, **kwargs):
-        from sentry.models import ProjectCountByMinute, GroupCountByMinute
-
         date = event.datetime
         time_spent = event.time_spent
         project = event.project
@@ -565,19 +460,6 @@ class GroupManager(BaseManager, ChartMixin):
             is_sample = True
 
         # Rounded down to the nearest interval
-        normalized_datetime = normalize_datetime(date)
-
-        app.buffer.incr(GroupCountByMinute, update_kwargs, {
-            'group': group,
-            'project': project,
-            'date': normalized_datetime,
-        })
-
-        app.buffer.incr(ProjectCountByMinute, update_kwargs, {
-            'project': project,
-            'date': normalized_datetime,
-        })
-
         try:
             self.add_tags(group, tags)
         except Exception as e:
@@ -651,7 +533,7 @@ class GroupManager(BaseManager, ChartMixin):
         return ', '.join('sentry_groupedmessage."%s"' % (f.column,) for f in self.model._meta.fields)
 
 
-class ProjectManager(BaseManager, ChartMixin):
+class ProjectManager(BaseManager):
     def get_for_user(self, user=None, access=None, hidden=False, team=None,
                      superuser=True):
         """
@@ -695,35 +577,6 @@ class ProjectManager(BaseManager, ChartMixin):
 
         return sorted(projects, key=lambda x: x.name.lower())
 
-    def get_chart_data(self, instance, max_days=90, key=None):
-        if hasattr(instance, '_state'):
-            db = instance._state.db or 'default'
-        else:
-            db = 'default'
-
-        queryset = instance.projectcountbyminute_set
-
-        return self._get_chart_data(queryset, max_days, db, key=key)
-
-    def get_chart_data_for_group(self, instances, max_days=90, key=None):
-        if not instances:
-            if key is None:
-                return []
-            return {}
-
-        if hasattr(instances[0], '_state'):
-            db = instances[0]._state.db or 'default'
-        else:
-            db = 'default'
-
-        field = self.model.projectcountbyminute_set.related
-        column = field.field.name
-        queryset = field.model.objects.filter(**{
-            '%s__in' % column: instances,
-        })
-
-        return self._get_chart_data(queryset, max_days, db, key=key)
-
 
 class TeamManager(BaseManager):
     def get_for_user(self, user, access=None, access_groups=True, with_projects=False):
diff --git a/src/sentry/templatetags/sentry_admin_helpers.py b/src/sentry/templatetags/sentry_admin_helpers.py
index 235684d127..7cbd2e5dba 100644
--- a/src/sentry/templatetags/sentry_admin_helpers.py
+++ b/src/sentry/templatetags/sentry_admin_helpers.py
@@ -8,7 +8,6 @@ sentry.templatetags.sentry_admin_helpers
 import datetime
 
 from django import template
-from django.db.models import Sum
 from django.utils import timezone
 
 register = template.Library()
@@ -16,14 +15,17 @@ register = template.Library()
 
 @register.filter
 def with_event_counts(project_list):
-    from sentry.models import ProjectCountByMinute
-    results = dict(ProjectCountByMinute.objects.filter(
-        project__in=project_list,
-        date__gte=timezone.now() - datetime.timedelta(days=1),
-    ).values_list('project').annotate(
-        total_events=Sum('times_seen'),
-    ).values_list('project', 'total_events'))
+    from sentry.app import tsdb
+
+    end = timezone.now()
+    start = end - datetime.timedelta(days=1)
+
+    tsdb_results = tsdb.get_range(
+        model=tsdb.models.project,
+        keys=[p.id for p in project_list],
+        start=start,
+        end=end,
+    )
 
     for project in project_list:
-        num = results.get(project.pk, 0)
-        yield project, num
+        yield project, sum(t[1] for t in tsdb_results[project.id])
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 82e785f4f6..3f85f1b9aa 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -29,7 +29,7 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 
 from sentry.constants import STATUS_MUTED, EVENTS_PER_PAGE, MEMBER_OWNER
-from sentry.models import Team, Group, Option, GroupTagValue
+from sentry.models import Team, Option, GroupTagValue
 from sentry.web.helpers import group_is_public
 from sentry.utils import to_unicode
 from sentry.utils.avatar import get_gravatar_url
@@ -332,14 +332,8 @@ def with_metadata(group_list, request):
     else:
         bookmarks = set()
 
-    if group_list:
-        historical_data = Group.objects.get_chart_data_for_group(
-            instances=group_list,
-            max_days=1,
-            key='group',
-        )
-    else:
-        historical_data = {}
+    # TODO(dcramer): this is obsolete and needs to pull from the tsdb backend
+    historical_data = {}
 
     for g in group_list:
         yield g, {
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index 2ddb0408a0..10d6c9f4ff 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -9,7 +9,6 @@ from datetime import datetime
 from dateutil.parser import parse
 from django.db import connections
 
-from sentry.constants import MINUTE_NORMALIZATION
 from sentry.utils.db import get_db_engine
 
 DATE_TRUNC_GROUPERS = {
@@ -53,9 +52,3 @@ def parse_date(datestr, timestr):
             return parse(datetimestr)
         except Exception:
             return
-
-
-def normalize_datetime(datetime, minutes=MINUTE_NORMALIZATION):
-    minutes = (datetime.minute - (datetime.minute % minutes))
-    normalized_datetime = datetime.replace(second=0, microsecond=0, minute=minutes)
-    return normalized_datetime
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 141ff95b36..b32d2f6b50 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -6,11 +6,12 @@ sentry.utils.javascript
 :license: BSD, see LICENSE for more details.
 """
 from collections import defaultdict
-
+from datetime import timedelta
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 from django.utils.html import escape
 
-from sentry.app import env
+from sentry.app import env, tsdb
 from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
 from sentry.models import (
     Group, GroupBookmark, GroupTagKey, GroupSeen, ProjectOption
@@ -88,10 +89,14 @@ class GroupTransformer(Transformer):
             seen_groups = {}
 
         if objects:
-            historical_data = Group.objects.get_chart_data_for_group(
-                instances=objects,
-                max_days=1,
-                key='group',
+            end = timezone.now()
+            start = end - timedelta(days=1)
+
+            historical_data = tsdb.get_range(
+                model=tsdb.models.group,
+                keys=[g.id for g in objects],
+                start=start,
+                end=end,
             )
         else:
             historical_data = {}
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 62dce119ea..ce8d8ba7e2 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -21,7 +21,6 @@ from django.utils import timezone
 from django.utils.translation import ugettext as _
 from django.views.decorators.cache import never_cache, cache_control
 from django.views.decorators.csrf import csrf_exempt
-from django.views.decorators.vary import vary_on_cookie
 from django.views.generic.base import View as BaseView
 
 from raven.contrib.django.models import client as Raven
@@ -37,13 +36,11 @@ from sentry.coreapi import (
     decompress_deflate, decompress_gzip)
 from sentry.exceptions import InvalidData, InvalidOrigin, InvalidRequest
 from sentry.models import (
-    Group, GroupBookmark, Project, ProjectCountByMinute, TagValue, Activity,
-    User)
+    Group, GroupBookmark, Project, TagValue, Activity, User)
 from sentry.signals import event_received
 from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
 from sentry.utils import json
-from sentry.utils.cache import cache
 from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
 from sentry.utils.safe import safe_execute
@@ -608,43 +605,6 @@ def clear(request, team, project):
     return response
 
 
-@vary_on_cookie
-@csrf_exempt
-@has_access
-def chart(request, team=None, project=None):
-    gid = request.REQUEST.get('gid')
-    days = int(request.REQUEST.get('days', '90'))
-    if gid:
-        try:
-            group = Group.objects.get(pk=gid)
-        except Group.DoesNotExist:
-            return HttpResponseForbidden()
-
-        data = Group.objects.get_chart_data(group, max_days=days)
-    elif project:
-        data = Project.objects.get_chart_data(project, max_days=days)
-    elif team:
-        cache_key = 'api.chart:team=%s,days=%s' % (team.id, days)
-
-        data = cache.get(cache_key)
-        if data is None:
-            project_list = list(Project.objects.filter(team=team))
-            data = Project.objects.get_chart_data_for_group(project_list, max_days=days)
-            cache.set(cache_key, data, 300)
-    else:
-        cache_key = 'api.chart:user=%s,days=%s' % (request.user.id, days)
-
-        data = cache.get(cache_key)
-        if data is None:
-            project_list = Project.objects.get_for_user(request.user)
-            data = Project.objects.get_chart_data_for_group(project_list, max_days=days)
-            cache.set(cache_key, data, 300)
-
-    response = HttpResponse(json.dumps(data))
-    response['Content-Type'] = 'application/json'
-    return response
-
-
 @never_cache
 @csrf_exempt
 @has_access
@@ -765,10 +725,9 @@ def get_stats(request, team=None, project=None):
     cutoff = datetime.timedelta(minutes=minutes)
     cutoff_dt = timezone.now() - cutoff
 
-    num_events = ProjectCountByMinute.objects.filter(
-        project__in=project_list,
-        date__gte=cutoff_dt,
-    ).aggregate(t=Sum('times_seen'))['t'] or 0
+    # TODO(dcramer): this is used in an unreleased feature. reimplement it using
+    # new API and tsdb
+    num_events = 0
 
     # XXX: This is too slow if large amounts of groups are resolved
     num_resolved = Group.objects.filter(
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 0763edfd44..8b3cbbe3e1 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -250,8 +250,6 @@ urlpatterns += patterns('',
         name='sentry-api-bookmark'),
     url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/clear/$', api.clear,
         name='sentry-api-clear'),
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?:(?P<project_id>[\w_-]+)/)?chart/$', api.chart,
-        name='sentry-api-chart'),
     url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>[\w_-]+)/remove/$', api.remove_group,
         name='sentry-api-remove-group'),
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 0d4ff68828..c97313e85e 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -10,8 +10,7 @@ from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.interfaces import Interface
 from sentry.manager import get_checksum_from_event
 from sentry.models import (
-    Event, Group, Project, GroupCountByMinute, ProjectCountByMinute,
-    Team, EventMapping, User, AccessGroup, GroupTagValue
+    Event, Group, Project, Team, EventMapping, User, AccessGroup, GroupTagValue
 )
 from sentry.testutils import TestCase
 
@@ -90,28 +89,6 @@ class SentryManagerTest(TestCase):
         Group.objects.from_kwargs(1, event_id=1, message='foo')
         self.assertEquals(Event.objects.count(), 1)
 
-    def test_does_update_groupcountbyminute(self):
-        event = Group.objects.from_kwargs(1, message='foo')
-        inst = GroupCountByMinute.objects.filter(group=event.group)
-        self.assertTrue(inst.exists())
-        inst = inst.get()
-        self.assertEquals(inst.times_seen, 1)
-
-        event = Group.objects.from_kwargs(1, message='foo')
-        inst = GroupCountByMinute.objects.get(group=event.group)
-        self.assertEquals(inst.times_seen, 2)
-
-    def test_does_update_projectcountbyminute(self):
-        event = Group.objects.from_kwargs(1, message='foo')
-        inst = ProjectCountByMinute.objects.filter(project=event.project)
-        self.assertTrue(inst.exists())
-        inst = inst.get()
-        self.assertEquals(inst.times_seen, 1)
-
-        event = Group.objects.from_kwargs(1, message='foo')
-        inst = ProjectCountByMinute.objects.get(project=event.project)
-        self.assertEquals(inst.times_seen, 2)
-
     def test_updates_group(self):
         Group.objects.from_kwargs(1, message='foo', checksum='a' * 32)
         event = Group.objects.from_kwargs(1, message='foo bar', checksum='a' * 32)
diff --git a/tests/sentry/tasks/cleanup/tests.py b/tests/sentry/tasks/cleanup/tests.py
index 40c497c80d..963e0816c4 100644
--- a/tests/sentry/tasks/cleanup/tests.py
+++ b/tests/sentry/tasks/cleanup/tests.py
@@ -3,15 +3,11 @@
 from __future__ import absolute_import
 
 from celery.task import Task
-from sentry.models import (Event, Group, GroupCountByMinute,
-    GroupTagValue, ProjectCountByMinute, TagValue, TagKey)
+from sentry.models import Event, Group, GroupTagValue, TagValue, TagKey
 from sentry.tasks.cleanup import cleanup
 from sentry.testutils import TestCase
 
-ALL_MODELS = (
-    Event, Group, ProjectCountByMinute, GroupCountByMinute, GroupTagValue,
-    TagValue, TagKey
-)
+ALL_MODELS = (Event, Group, GroupTagValue, TagValue, TagKey)
 
 
 class SentryCleanupTest(TestCase):
