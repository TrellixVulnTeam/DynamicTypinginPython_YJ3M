commit 6c89be202fffd8b916fd8a73eb881c66850fc890
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 5 13:32:40 2013 -0800

    Fire buffer_incr_complete signal and bind it to updates on the users_seen column

diff --git a/src/sentry/buffer/base.py b/src/sentry/buffer/base.py
index 46ebf70b79..658fc1b642 100644
--- a/src/sentry/buffer/base.py
+++ b/src/sentry/buffer/base.py
@@ -8,6 +8,7 @@ sentry.buffer.base
 
 from django.db.models import F
 from sentry.utils.queue import maybe_async
+from sentry.signals import buffer_incr_complete
 from sentry.tasks.process_buffer import process_incr
 
 
@@ -42,7 +43,16 @@ class Buffer(object):
         update_kwargs = dict((c, F(c) + v) for c, v in columns.iteritems())
         if extra:
             update_kwargs.update(extra)
-        model.objects.create_or_update(
+
+        _, created = model.objects.create_or_update(
             defaults=update_kwargs,
             **filters
         )
+
+        buffer_incr_complete.send_robust(
+            model=model,
+            columns=columns,
+            extra=extra,
+            created=created,
+            sender=model,
+        )
diff --git a/src/sentry/models.py b/src/sentry/models.py
index f321ceeafd..e40e1db0a2 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -39,6 +39,7 @@ from sentry.constants import (STATUS_LEVELS, MEMBER_TYPES,  # NOQA
 from sentry.manager import GroupManager, ProjectManager, \
   MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager, \
   UserOptionManager, FilterKeyManager, TeamManager
+from sentry.signals import buffer_incr_complete
 from sentry.utils import cached_property, \
   MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField, update
@@ -941,6 +942,18 @@ def set_language_on_logon(request, user, **kwargs):
     if language and hasattr(request, 'session'):
         request.session['django_language'] = language
 
+
+@buffer_incr_complete.connect(sender=MessageFilterValue)
+def record_user_count(columns, extra, created, **kwargs):
+    from sentry import app
+
+    if not created:
+        # if it's not a new row, it's not a unique user
+        return
+
+    app.buffer.incr(Group, {'users_seen': 1})
+
+
 # Signal registration
 post_syncdb.connect(
     create_default_project,
@@ -977,6 +990,17 @@ pre_delete.connect(
     dispatch_uid="remove_key_for_team_member",
     weak=False,
 )
-user_logged_in.connect(set_language_on_logon)
+user_logged_in.connect(
+    set_language_on_logon,
+    dispatch_uid="set_language_on_logon",
+    weak=False
+)
+
+buffer_incr_complete.connect(
+    record_user_count,
+    sender=MessageFilterValue,
+    dispatch_uid="record_user_count",
+    weak=False
+)
 
 add_introspection_rules([], ["^social_auth\.fields\.JSONField"])
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 46152fa8a1..1da5a0358c 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -1,3 +1,23 @@
-import django
+from django.dispatch import Signal
 
-regression_signal = django.dispatch.Signal(providing_args=["instance"])
+
+class BetterSignal(Signal):
+    def connect(self, receiver=None, **kwargs):
+        """
+        Support decorator syntax:
+
+        >>> @signal.connect(sender=type)
+        >>> def my_receiver(**kwargs):
+        >>>     pass
+
+        """
+        def wrapped(func):
+            return super(BetterSignal, self).connect(func, **kwargs)
+
+        if receiver is None:
+            return wrapped
+        return wrapped(receiver)
+
+
+regression_signal = BetterSignal(providing_args=["instance"])
+buffer_incr_complete = BetterSignal(providing_args=["model", "columns", "extra", "result"])
