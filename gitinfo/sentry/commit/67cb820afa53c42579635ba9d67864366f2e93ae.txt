commit 67cb820afa53c42579635ba9d67864366f2e93ae
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Jun 9 16:23:41 2020 -0400

    feat(discover): Per-cell enhancements  (#19230)

diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index cc3ca3cc67..0a18150ede 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -49,6 +49,11 @@ const EXTERNAL_QUERY_STRING_KEYS: Readonly<Array<keyof LocationQuery>> = [
   'cursor',
 ];
 
+const setSortOrder = (sort: Sort, kind: 'desc' | 'asc'): Sort => ({
+  kind,
+  field: sort.field,
+});
+
 const reverseSort = (sort: Sort): Sort => ({
   kind: sort.kind === 'desc' ? 'asc' : 'desc',
   field: sort.field,
@@ -63,7 +68,11 @@ const isSortEqualToField = (
   return sort.field === sortKey;
 };
 
-const fieldToSort = (field: Field, tableMeta: MetaType | undefined): Sort | undefined => {
+const fieldToSort = (
+  field: Field,
+  tableMeta: MetaType | undefined,
+  kind?: 'desc' | 'asc'
+): Sort | undefined => {
   const sortKey = getSortKeyFromField(field, tableMeta);
 
   if (!sortKey) {
@@ -71,7 +80,7 @@ const fieldToSort = (field: Field, tableMeta: MetaType | undefined): Sort | unde
   }
 
   return {
-    kind: 'desc',
+    kind: kind || 'desc',
     field: sortKey,
   };
 };
@@ -922,7 +931,7 @@ class EventView {
     return this.sorts.find(sort => isSortEqualToField(sort, field, tableMeta));
   }
 
-  sortOnField(field: Field, tableMeta: MetaType): EventView {
+  sortOnField(field: Field, tableMeta: MetaType, kind?: 'desc' | 'asc'): EventView {
     // check if field can be sorted
     if (!isFieldSortable(field, tableMeta)) {
       return this;
@@ -938,7 +947,9 @@ class EventView {
       const currentSort = this.sorts[needleIndex];
 
       const sorts = [...newEventView.sorts];
-      sorts[needleIndex] = reverseSort(currentSort);
+      sorts[needleIndex] = kind
+        ? setSortOrder(currentSort, kind)
+        : reverseSort(currentSort);
 
       newEventView.sorts = sorts;
 
@@ -949,7 +960,7 @@ class EventView {
     const newEventView = this.clone();
 
     // invariant: this is not falsey, since sortKey exists
-    const sort = fieldToSort(field, tableMeta)!;
+    const sort = fieldToSort(field, tableMeta, kind)!;
 
     newEventView.sorts = [sort];
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx
index 8a38b6541c..d764ebbf63 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/cellAction.tsx
@@ -6,25 +6,35 @@ import * as PopperJS from 'popper.js';
 import {Manager, Reference, Popper} from 'react-popper';
 
 import {t} from 'app/locale';
+import {defined} from 'app/utils';
 import {IconEllipsis} from 'app/icons';
-import EventView from 'app/utils/discover/eventView';
+import EventView, {MetaType} from 'app/utils/discover/eventView';
 import space from 'app/styles/space';
 import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
-import {OrganizationSummary} from 'app/types';
+import {OrganizationSummary, Project} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {getAggregateAlias} from 'app/utils/discover/fields';
+import {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';
+import withProjects from 'app/utils/withProjects';
 
 import {TableColumn, TableDataRow} from './types';
 
 enum Actions {
   ADD = 'add',
   EXCLUDE = 'exclude',
+  SHOW_GREATER_THAN = 'show_greater_than',
+  SHOW_LESS_THAN = 'show_less_than',
+  TRANSACTION = 'transaction',
+  RELEASE = 'release',
 }
 
 type Props = {
   eventView: EventView;
   organization: OrganizationSummary;
+  projects: Project[];
   column: TableColumn<keyof TableDataRow>;
   dataRow: TableDataRow;
+  tableMeta: MetaType;
   children: React.ReactNode;
 };
 
@@ -33,7 +43,7 @@ type State = {
   isOpen: boolean;
 };
 
-export default class CellAction extends React.Component<Props, State> {
+class CellAction extends React.Component<Props, State> {
   constructor(props: Props) {
     super(props);
     let portal = document.getElementById('cell-action-portal');
@@ -94,9 +104,20 @@ export default class CellAction extends React.Component<Props, State> {
     });
   };
 
-  handleUpdateSearch = (action: Actions, value: React.ReactText) => {
-    const {eventView, column, organization} = this.props;
+  handleCellAction = (action: Actions, value: React.ReactText) => {
+    const {eventView, column, organization, tableMeta, projects, dataRow} = this.props;
+
     const query = tokenizeSearch(eventView.query);
+
+    let nextView = eventView.clone();
+
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.results.cellaction',
+      eventName: 'Discoverv2: Cell Action Clicked',
+      organization_id: parseInt(organization.id, 10),
+      action,
+    });
+
     switch (action) {
       case Actions.ADD:
         // Remove exclusion if it exists.
@@ -105,7 +126,7 @@ export default class CellAction extends React.Component<Props, State> {
         break;
       case Actions.EXCLUDE:
         // Remove positive if it exists.
-        delete query[`${column.name}`];
+        delete query[column.name];
         // Negations should stack up.
         const negation = `!${column.name}`;
         if (!query.hasOwnProperty(negation)) {
@@ -113,16 +134,64 @@ export default class CellAction extends React.Component<Props, State> {
         }
         query[negation].push(`${value}`);
         break;
+      case Actions.SHOW_GREATER_THAN: {
+        // Remove query token if it already exists
+        delete query[column.name];
+        query[column.name] = [`>${value}`];
+        const field = {field: column.name, width: column.width};
+
+        // sort descending order
+        nextView = nextView.sortOnField(field, tableMeta, 'desc');
+
+        break;
+      }
+      case Actions.SHOW_LESS_THAN: {
+        // Remove query token if it already exists
+        delete query[column.name];
+        query[column.name] = [`<${value}`];
+        const field = {field: column.name, width: column.width};
+
+        // sort ascending order
+        nextView = nextView.sortOnField(field, tableMeta, 'asc');
+
+        break;
+      }
+      case Actions.TRANSACTION: {
+        const maybeProject = projects.find(project => project.slug === dataRow.project);
+
+        const projectID = maybeProject ? [maybeProject.id] : undefined;
+
+        const next = transactionSummaryRouteWithQuery({
+          orgSlug: organization.slug,
+          transaction: String(value),
+          projectID,
+          query: {},
+        });
+
+        browserHistory.push(next);
+        return;
+      }
+      case Actions.RELEASE: {
+        const maybeProject = projects.find(project => {
+          return project.slug === dataRow.project;
+        });
+
+        browserHistory.push({
+          pathname: `/organizations/${organization.slug}/releases/${encodeURIComponent(
+            value
+          )}/`,
+          query: {
+            ...nextView.getGlobalSelection(),
+
+            project: maybeProject ? maybeProject.id : undefined,
+          },
+        });
+
+        return;
+      }
       default:
         throw new Error(`Unknown action type. ${action}`);
     }
-    trackAnalyticsEvent({
-      eventKey: 'discover_v2.results.cellaction',
-      eventName: 'Discoverv2: Cell Action Clicked',
-      organization_id: parseInt(organization.id, 10),
-      action,
-    });
-    const nextView = eventView.clone();
     nextView.query = stringifyQueryObject(query);
 
     browserHistory.push(nextView.getResultsViewUrlTarget(organization.slug));
@@ -133,11 +202,108 @@ export default class CellAction extends React.Component<Props, State> {
     this.setState({isOpen: !this.state.isOpen});
   };
 
-  renderMenu() {
+  renderMenuButtons() {
     const {dataRow, column} = this.props;
+
+    const fieldAlias = getAggregateAlias(column.name);
+    const value = dataRow[fieldAlias];
+
+    const actions: React.ReactNode[] = [];
+
+    if (column.type !== 'duration') {
+      actions.push(
+        <ActionItem
+          key="add-to-filter"
+          data-test-id="add-to-filter"
+          onClick={() => this.handleCellAction(Actions.ADD, value)}
+        >
+          {t('Add to filter')}
+        </ActionItem>
+      );
+
+      actions.push(
+        <ActionItem
+          key="exclude-from-filter"
+          data-test-id="exclude-from-filter"
+          onClick={() => this.handleCellAction(Actions.EXCLUDE, value)}
+        >
+          {t('Exclude from filter')}
+        </ActionItem>
+      );
+    }
+
+    if (column.type !== 'string' && column.type !== 'boolean') {
+      actions.push(
+        <ActionItem
+          key="show-values-greater-than"
+          data-test-id="show-values-greater-than"
+          onClick={() => this.handleCellAction(Actions.SHOW_GREATER_THAN, value)}
+        >
+          {t('Show values greater than')}
+        </ActionItem>
+      );
+
+      actions.push(
+        <ActionItem
+          key="show-values-less-than"
+          data-test-id="show-values-less-than"
+          onClick={() => this.handleCellAction(Actions.SHOW_LESS_THAN, value)}
+        >
+          {t('Show values less than')}
+        </ActionItem>
+      );
+    }
+
+    if (column.column.kind === 'field' && column.column.field === 'transaction') {
+      actions.push(
+        <ActionItem
+          key="transaction-summary"
+          data-test-id="transaction-summary"
+          onClick={() => this.handleCellAction(Actions.TRANSACTION, value)}
+        >
+          {t('Go to summary')}
+        </ActionItem>
+      );
+    }
+
+    if (column.column.kind === 'field' && column.column.field === 'release') {
+      actions.push(
+        <ActionItem
+          key="release"
+          data-test-id="release"
+          onClick={() => this.handleCellAction(Actions.RELEASE, value)}
+        >
+          {t('Go to release')}
+        </ActionItem>
+      );
+    }
+
+    if (actions.length === 0) {
+      return null;
+    }
+
+    return (
+      <MenuButtons
+        onClick={event => {
+          // prevent clicks from propagating further
+          event.stopPropagation();
+        }}
+      >
+        {actions}
+      </MenuButtons>
+    );
+  }
+
+  renderMenu() {
     const {isOpen} = this.state;
 
-    const value = dataRow[column.name];
+    const menuButtons = this.renderMenuButtons();
+
+    if (menuButtons === null) {
+      // do not render the menu if there are no per cell actions
+      return null;
+    }
+
     const modifiers: PopperJS.Modifiers = {
       hide: {
         enabled: false,
@@ -166,20 +332,7 @@ export default class CellAction extends React.Component<Props, State> {
                 data-placement={placement}
                 style={arrowProps.style}
               />
-              <MenuButtons>
-                <ActionItem
-                  data-test-id="add-to-filter"
-                  onClick={() => this.handleUpdateSearch(Actions.ADD, value)}
-                >
-                  {t('Add to filter')}
-                </ActionItem>
-                <ActionItem
-                  data-test-id="exclude-from-filter"
-                  onClick={() => this.handleUpdateSearch(Actions.EXCLUDE, value)}
-                >
-                  {t('Exclude from filter')}
-                </ActionItem>
-              </MenuButtons>
+              {menuButtons}
             </Menu>
           )}
         </Popper>,
@@ -207,6 +360,21 @@ export default class CellAction extends React.Component<Props, State> {
     const {children} = this.props;
     const {isHovering} = this.state;
 
+    const {dataRow, column} = this.props;
+    const fieldAlias = getAggregateAlias(column.name);
+    const value = dataRow[fieldAlias];
+
+    // do not display per cell actions for count() and count_unique()
+    const shouldIgnoreColumn =
+      column.column.kind === 'function' &&
+      (column.column.function[0] === 'count' ||
+        column.column.function[0] === 'count_unique');
+
+    if (!defined(value) || shouldIgnoreColumn) {
+      // per cell actions do not apply to values that are null
+      return <React.Fragment>{children}</React.Fragment>;
+    }
+
     return (
       <Container
         onMouseEnter={this.handleMouseEnter}
@@ -219,6 +387,8 @@ export default class CellAction extends React.Component<Props, State> {
   }
 }
 
+export default withProjects(CellAction);
+
 const Container = styled('div')`
   position: relative;
   width: 100%;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 2d124a8850..d8a79870fb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -169,7 +169,15 @@ class TableView extends React.Component<TableViewProps> {
           location={location}
           tableMeta={tableData.meta}
         >
-          {fieldRenderer(dataRow, {organization, location})}
+          <CellAction
+            organization={organization}
+            eventView={eventView}
+            column={column}
+            dataRow={dataRow}
+            tableMeta={tableData.meta}
+          >
+            {fieldRenderer(dataRow, {organization, location})}
+          </CellAction>
         </ExpandAggregateRow>
       );
     }
@@ -181,6 +189,7 @@ class TableView extends React.Component<TableViewProps> {
         eventView={eventView}
         column={column}
         dataRow={dataRow}
+        tableMeta={tableData.meta}
       >
         {fieldRenderer(dataRow, {organization, location})}
       </CellAction>
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index c96210dd75..998ec59c60 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -1930,6 +1930,25 @@ describe('EventView.sortOnField()', function() {
     expect(eventView2).toMatchObject(nextState);
   });
 
+  it('enforce sort order on sorted field', function() {
+    const eventView = new EventView(state);
+    expect(eventView).toMatchObject(state);
+
+    const field = state.fields[0];
+
+    const eventView2 = eventView.sortOnField(field, meta, 'asc');
+    expect(eventView2).toMatchObject({
+      ...state,
+      sorts: [{field: 'count', kind: 'asc'}],
+    });
+
+    const eventView3 = eventView.sortOnField(field, meta, 'desc');
+    expect(eventView3).toMatchObject({
+      ...state,
+      sorts: [{field: 'count', kind: 'desc'}],
+    });
+  });
+
   it('sort on new field', function() {
     const modifiedState = {
       ...state,
@@ -1951,6 +1970,24 @@ describe('EventView.sortOnField()', function() {
     };
 
     expect(eventView2).toMatchObject(nextState);
+
+    // enforce asc sort order
+
+    const eventView3 = eventView.sortOnField(field, meta, 'asc');
+
+    expect(eventView3).toMatchObject({
+      ...modifiedState,
+      sorts: [{field: 'title', kind: 'asc'}],
+    });
+
+    // enforce desc sort order
+
+    const eventView4 = eventView.sortOnField(field, meta, 'desc');
+
+    expect(eventView4).toMatchObject({
+      ...modifiedState,
+      sorts: [{field: 'title', kind: 'desc'}],
+    });
   });
 });
 
diff --git a/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx b/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx
index dc68872702..7ab79fec10 100644
--- a/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx
+++ b/tests/js/spec/views/eventsV2/table/cellAction.spec.jsx
@@ -7,14 +7,19 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import CellAction from 'app/views/eventsV2/table/cellAction';
 import EventView from 'app/utils/discover/eventView';
 
-function makeWrapper(eventView, initial) {
-  const data = {transaction: 'best-transaction', count: 19};
+function makeWrapper(eventView, initial, columnIndex = 0) {
+  const data = {
+    transaction: 'best-transaction',
+    count: 19,
+    timestamp: '2020-06-09T01:46:25+00:00',
+    release: 'F2520C43515BD1F0E8A6BD46233324641A370BF6',
+  };
   return mountWithTheme(
     <CellAction
       organization={initial.organization}
       dataRow={data}
       eventView={eventView}
-      column={eventView.getColumns()[0]}
+      column={eventView.getColumns()[columnIndex]}
     >
       <strong>some content</strong>
     </CellAction>
@@ -25,8 +30,8 @@ describe('Discover -> CellAction', function() {
     query: {
       id: '42',
       name: 'best query',
-      field: ['transaction', 'count()'],
-      widths: ['123', '456'],
+      field: ['transaction', 'count()', 'timestamp', 'release'],
+      widths: ['437', '647', '416', '905'],
       sort: ['title'],
       query: 'event.type:transaction',
       project: [123],
@@ -70,7 +75,7 @@ describe('Discover -> CellAction', function() {
     });
   });
 
-  describe('action buttons basics', function() {
+  describe('per cell actions', function() {
     let wrapper;
     beforeEach(function() {
       wrapper = makeWrapper(view, initial);
@@ -120,5 +125,69 @@ describe('Discover -> CellAction', function() {
         }),
       });
     });
+
+    it('go to summary button goes to transaction summary page', function() {
+      wrapper.find('button[data-test-id="transaction-summary"]').simulate('click');
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/performance/summary/',
+        query: expect.objectContaining({
+          query: undefined,
+          project: undefined,
+          transaction: 'best-transaction',
+        }),
+      });
+    });
+
+    it('go to release button goes to release health page', function() {
+      wrapper = makeWrapper(view, initial, 3);
+      // Show button and menu.
+      wrapper.find('Container').simulate('mouseEnter');
+      wrapper.find('MenuButton').simulate('click');
+
+      wrapper.find('button[data-test-id="release"]').simulate('click');
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname:
+          '/organizations/org-slug/releases/F2520C43515BD1F0E8A6BD46233324641A370BF6/',
+        query: expect.objectContaining({
+          project: undefined,
+        }),
+      });
+    });
+
+    it('greater than button adds condition', function() {
+      wrapper = makeWrapper(view, initial, 2);
+      // Show button and menu.
+      wrapper.find('Container').simulate('mouseEnter');
+      wrapper.find('MenuButton').simulate('click');
+
+      wrapper.find('button[data-test-id="show-values-greater-than"]').simulate('click');
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/discover/results/',
+        query: expect.objectContaining({
+          query: 'event.type:transaction timestamp:>2020-06-09T01:46:25+00:00',
+          sort: ['-timestamp'],
+        }),
+      });
+    });
+
+    it('less than button adds condition', function() {
+      wrapper = makeWrapper(view, initial, 2);
+      // Show button and menu.
+      wrapper.find('Container').simulate('mouseEnter');
+      wrapper.find('MenuButton').simulate('click');
+
+      wrapper.find('button[data-test-id="show-values-less-than"]').simulate('click');
+
+      expect(browserHistory.push).toHaveBeenCalledWith({
+        pathname: '/organizations/org-slug/discover/results/',
+        query: expect.objectContaining({
+          query: 'event.type:transaction timestamp:<2020-06-09T01:46:25+00:00',
+          sort: ['timestamp'],
+        }),
+      });
+    });
   });
 });
