commit ec016ed4345d3f3a390e795aa53079f26c3ec6f4
Author: Mark Story <mark@sentry.io>
Date:   Tue Jul 30 10:47:31 2019 -0400

    fix(ui) Improve UX on event modal window (#14187)
    
    * Enable `esc` to close the modal
    * Allow clicks on the overlay to close the modal.
    * Reposition the X so it isn't under scrollbars in chrome.
    * Fix double scrollbar in chrome.
    
    Refs SEN-874

diff --git a/src/sentry/static/sentry/app/components/modalDialog.jsx b/src/sentry/static/sentry/app/components/modalDialog.jsx
index 40da249f7c..67dd194e6c 100644
--- a/src/sentry/static/sentry/app/components/modalDialog.jsx
+++ b/src/sentry/static/sentry/app/components/modalDialog.jsx
@@ -23,6 +23,11 @@ class ModalDialog extends React.Component {
      */
     dismissButton: PropTypes.func,
 
+    /**
+     * Set to false to disable modal dismissal when the overlay is clicked.
+     */
+    dismissOnOverlayClick: PropTypes.bool,
+
     /**
      * Callback invoked when the modal is closed if set.
      */
@@ -38,13 +43,67 @@ class ModalDialog extends React.Component {
 
   static defaultProps = {
     isOpen: true,
+    dismissOnOverlayClick: true,
   };
 
+  componentDidMount() {
+    if (this.props.isOpen) {
+      this.setupOpenState();
+    }
+  }
+
+  componentDidUpdate(prevProps) {
+    if (this.props.isOpen !== prevProps.isOpen) {
+      if (this.props.isOpen) {
+        this.setupOpenState();
+      } else {
+        this.teardownOpenState();
+      }
+    }
+  }
+
+  componentWillUnmount() {
+    this.teardownOpenState();
+  }
+
+  previousOverflow = null;
+
+  setupOpenState() {
+    document.addEventListener('keydown', this.handleKeyDown);
+
+    // Prevent body element from scrolling.
+    this.previousOverflow = document.body.style.overflow;
+    document.body.style.overflow = 'hidden';
+  }
+
+  teardownOpenState() {
+    document.removeEventListener('keydown', this.handleKeyDown);
+
+    // Restore body scrolling.
+    if (this.previousOverflow) {
+      document.body.style.overflow = this.previousOverflow;
+    }
+  }
+
   handleClose = event => {
     event.preventDefault();
     callIfFunction(this.props.onDismiss);
   };
 
+  handleKeyDown = event => {
+    // Pushed ESC
+    if (event.keyCode === 27) {
+      this.handleClose(event);
+    }
+  };
+
+  handleOverlayClick = event => {
+    if (this.props.dismissOnOverlayClick) {
+      this.handleClose(event);
+      return;
+    }
+  };
+
   renderDismiss() {
     const {dismissButton} = this.props;
     if (dismissButton) {
@@ -62,7 +121,7 @@ class ModalDialog extends React.Component {
 
     return (
       <ModalScrollTrap>
-        <ModalOverlay />
+        <ModalOverlay onClick={this.handleOverlayClick} />
         <ModalContainer
           data-test-id="modal-dialog"
           aria-modal="true"
@@ -124,8 +183,8 @@ const CircleButton = styled('button')`
   border: 1px solid ${p => p.theme.borderDark};
 
   position: absolute;
-  top: -${p => p.size / 2}px;
-  right: -${p => p.size / 2}px;
+  top: -${p => p.size / 2 - 5}px;
+  right: -${p => p.size / 2 - 5}px;
 `;
 
 const DismissButton = props => {
