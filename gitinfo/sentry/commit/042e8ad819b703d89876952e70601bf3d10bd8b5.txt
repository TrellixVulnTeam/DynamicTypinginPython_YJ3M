commit 042e8ad819b703d89876952e70601bf3d10bd8b5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 22 15:58:10 2015 -0700

    Initial working approve/deny flows

diff --git a/bin/load-mocks b/bin/load-mocks
index 3f8f596b78..65634662f8 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -9,7 +9,8 @@ from random import randint
 
 from sentry.app import tsdb
 from sentry.models import (
-    AccessGroup, Activity, User, Organization, Project, Team
+    AccessGroup, Activity, User, Organization, OrganizationAccessRequest,
+    OrganizationMember, Project, Team
 )
 from sentry.utils.samples import create_sample_event
 
@@ -72,6 +73,11 @@ def main():
         },
     )
 
+    dummy_member, _ = OrganizationMember.objects.get_or_create(
+        user=dummy_user,
+        organization=org,
+    )
+
     for team_name, project_names in mocks:
         print('> Mocking team {}'.format(team_name))
         team, _ = Team.objects.get_or_create(
@@ -123,6 +129,11 @@ def main():
         accessgroup.projects.add(project)
         accessgroup.members.add(dummy_user)
 
+        OrganizationAccessRequest.objects.create(
+            member=dummy_member,
+            team=team,
+        )
+
     Activity.objects.create(
         type=Activity.RELEASE,
         project=project,
diff --git a/src/sentry/api/endpoints/organization_access_request_details.py b/src/sentry/api/endpoints/organization_access_request_details.py
new file mode 100644
index 0000000000..5451a0422a
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_access_request_details.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationAccessRequest,
+    OrganizationMemberTeam
+)
+
+
+class AccessRequestSerializer(serializers.Serializer):
+    isApproved = serializers.BooleanField()
+
+
+class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
+    def put(self, request, organization, request_id):
+        """
+        Approve or deny a request
+
+        Approve or deny a request.
+
+            {method} {path}
+
+        """
+        try:
+            access_request = OrganizationAccessRequest.objects.get(
+                id=request_id,
+                team__organization=organization,
+            )
+        except OrganizationAccessRequest.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = AccessRequestSerializer(data=request.DATA, partial=True)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        is_approved = serializer.object.get('isApproved')
+        if is_approved is None:
+            return Response(status=400)
+
+        if not access_request.member.has_global_access:
+            affected, _ = OrganizationMemberTeam.objects.create_or_update(
+                organizationmember=access_request.member,
+                team=access_request.team,
+                defaults={
+                    'is_active': is_approved,
+                }
+            )
+            if affected:
+                omt = OrganizationMemberTeam.objects.get(
+                    organizationmember=access_request.member,
+                    team=access_request.team,
+                )
+
+                if is_approved:
+                    event = AuditLogEntryEvent.MEMBER_JOIN_TEAM
+                else:
+                    event = AuditLogEntryEvent.MEMBER_LEAVE_TEAM
+
+                AuditLogEntry.objects.create(
+                    organization=organization,
+                    actor=request.user,
+                    ip_address=request.META['REMOTE_ADDR'],
+                    target_object=omt.id,
+                    target_user=access_request.member.user,
+                    event=event,
+                    data=omt.get_audit_log_data(),
+                )
+
+        access_request.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index d2fda3619b..e868bc3603 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -8,7 +8,10 @@ from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    OrganizationMemberTeam, Team
+)
 
 ERR_INSUFFICIENT_ROLE = 'You cannot modify a member other than yourself.'
 
@@ -105,6 +108,16 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         omt.is_active = True
         omt.save()
 
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=request.user,
+            ip_address=request.META['REMOTE_ADDR'],
+            target_object=omt.id,
+            target_user=request.user,
+            event=AuditLogEntryEvent.MEMBER_JOIN_TEAM,
+            data=omt.get_audit_log_data(),
+        )
+
         return Response(serialize(team), status=201)
 
     def delete(self, request, organization, member_id, team_slug):
@@ -159,4 +172,14 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             omt.is_active = False
             omt.save()
 
+            AuditLogEntry.objects.create(
+                organization=organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=omt.id,
+                target_user=request.user,
+                event=AuditLogEntryEvent.MEMBER_LEAVE_TEAM,
+                data=omt.get_audit_log_data(),
+            )
+
         return Response(status=204)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 6fb686bceb..b6ab31510e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -19,6 +19,7 @@ from .endpoints.helppage_index import HelpPageIndexEndpoint
 from .endpoints.index import IndexEndpoint
 from .endpoints.internal_stats import InternalStatsEndpoint
 from .endpoints.legacy_project_redirect import LegacyProjectRedirectEndpoint
+from .endpoints.organization_access_request_details import OrganizationAccessRequestDetailsEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
@@ -70,6 +71,9 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/$',
         OrganizationDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-details'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/access-requests/(?P<request_id>\d+)/$',
+        OrganizationAccessRequestDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-access-request-details'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/members/$',
         OrganizationMemberIndexEndpoint.as_view(),
         name='sentry-api-0-organization-member-index'),
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 7a87aa556b..89fb5f20da 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -22,6 +22,8 @@ class AuditLogEntryEvent(object):
     MEMBER_ACCEPT = 3
     MEMBER_EDIT = 4
     MEMBER_REMOVE = 5
+    MEMBER_JOIN_TEAM = 6
+    MEMBER_LEAVE_TEAM = 7
 
     ORG_ADD = 10
     ORG_EDIT = 11
@@ -67,6 +69,8 @@ class AuditLogEntry(Model):
         (AuditLogEntryEvent.MEMBER_ACCEPT, 'member.accept-invite'),
         (AuditLogEntryEvent.MEMBER_REMOVE, 'member.remove'),
         (AuditLogEntryEvent.MEMBER_EDIT, 'member.edit'),
+        (AuditLogEntryEvent.MEMBER_JOIN_TEAM, 'member.join-team'),
+        (AuditLogEntryEvent.MEMBER_LEAVE_TEAM, 'member.leave-team'),
 
         (AuditLogEntryEvent.TEAM_ADD, 'team.create'),
         (AuditLogEntryEvent.TEAM_EDIT, 'team.edit'),
@@ -123,6 +127,14 @@ class AuditLogEntry(Model):
             return 'removed member %s' % (self.data.get('email') or self.target_user.get_display_name(),)
         elif self.event == AuditLogEntryEvent.MEMBER_EDIT:
             return 'edited member %s' % (self.data.get('email') or self.target_user.get_display_name(),)
+        elif self.event == AuditLogEntryEvent.MEMBER_JOIN_TEAM:
+            if self.target_user == self.actor:
+                return 'joined team %s' % (self.data['team_slug'],)
+            return 'added %s to team %s' % (self.data.get('email'), self.data['team_slug'],)
+        elif self.event == AuditLogEntryEvent.MEMBER_LEAVE_TEAM:
+            if self.target_user == self.actor:
+                return 'left team %s' % (self.data['team_slug'],)
+            return 'removed %s from team %s' % (self.data.get('email'), self.data['team_slug'],)
 
         elif self.event == AuditLogEntryEvent.ORG_ADD:
             return 'created the organization'
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index bbdebbe9d7..a8dd7f1b6e 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -47,6 +47,14 @@ class OrganizationMemberTeam(BaseModel):
 
     __repr__ = sane_repr('team_id', 'organizationmember_id')
 
+    def get_audit_log_data(self):
+        return {
+            'team_slug': self.team.slug,
+            'member_id': self.organizationmember_id,
+            'email': self.organizationmember.get_email(),
+            'is_active': self.is_active,
+        }
+
 
 class OrganizationMember(Model):
     """
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index e66a205c80..db7f92a637 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -96,4 +96,4 @@ class User(BaseModel, AbstractBaseUser):
             obj.update(user=to_user)
 
     def get_display_name(self):
-        return self.first_name or self.email
+        return self.first_name or self.email or self.username
diff --git a/src/sentry/templates/sentry/organization-access-requests.html b/src/sentry/templates/sentry/organization-access-requests.html
index e69de29bb2..9334712022 100644
--- a/src/sentry/templates/sentry/organization-access-requests.html
+++ b/src/sentry/templates/sentry/organization-access-requests.html
@@ -0,0 +1,60 @@
+{% extends "sentry/bases/organization.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Pending Access Requests" %} | {{ block.super }}{% endblock %}
+
+{% block org_members_nav %}active{% endblock %}
+
+{% block inner %}
+  <div class="page-header">
+    <h2>{% trans "Pending Access Requests" %}</h2>
+  </div>
+
+  {% if request_list %}
+    <p>The following access requests are waiting approval by an organization admin.</p>
+
+    <ul class="access-request-list">
+      {% for access_request in request_list %}
+        <li>
+          <div class="pull-right">
+            <a href="#" class="btn btn-primary"
+               data-action="approve" data-id="{{ access_request.id }}">Approve</a>
+            <a href="#" class="btn btn-default"
+               data-action="deny" data-id="{{ access_request.id }}">Deny</a>
+          </div>
+          <strong>{{ access_request.member.user.get_display_name }}</strong> requests access to the <strong>{{ access_request.team.name }}</strong> team.
+        </li>
+      {% endfor %}
+    </ul>
+  {% else %}
+    <p>There are no pending access requests.</p>
+  {% endif %}
+
+  <script>
+  $(function(){
+    $('.access-request-list > li a').click(function(e){
+      var $el = $(this);
+      if (!$el.data('action')) {
+        return;
+      }
+      e.preventDefault();
+
+      $.ajax({
+        method: 'PUT',
+        url: app.config.urlPrefix + '/api/0/organizations/' + app.config.organizationId + '/access-requests/' + $el.data('id') + '/',
+        contentType: 'application/json',
+        data: JSON.stringify({
+          isApproved: $el.data('action') === 'approve'
+        }),
+        success: function() {
+          $el.parents('li').remove();
+        },
+        error: function() {
+          window.alert('We were unable to act on the access request. Maybe someone else beat you to it?');
+        }
+      });
+    });
+  });
+  </script>
+{% endblock %}
diff --git a/src/sentry/web/frontend/organization_access_requests.py b/src/sentry/web/frontend/organization_access_requests.py
index bc5a76dadb..ef122fff27 100644
--- a/src/sentry/web/frontend/organization_access_requests.py
+++ b/src/sentry/web/frontend/organization_access_requests.py
@@ -12,7 +12,7 @@ class OrganizationAccessRequestsView(OrganizationView):
     def get(self, request, organization):
         access_requests = OrganizationAccessRequest.objects.filter(
             team__organization=organization,
-        ).select_related('team', 'user')
+        ).select_related('team', 'member__user')
 
         context = {
             'request_list': list(access_requests),
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 6d77aa1d0a..f311465806 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -44,6 +44,7 @@ from sentry.web.frontend.help_page import HelpPageView
 from sentry.web.frontend.help_platform_details import HelpPlatformDetailsView
 from sentry.web.frontend.help_platform_index import HelpPlatformIndexView
 from sentry.web.frontend.mailgun_inbound_webhook import MailgunInboundWebhookView
+from sentry.web.frontend.organization_access_requests import OrganizationAccessRequestsView
 from sentry.web.frontend.organization_api_keys import OrganizationApiKeysView
 from sentry.web.frontend.organization_api_key_settings import OrganizationApiKeySettingsView
 from sentry.web.frontend.organization_audit_log import OrganizationAuditLogView
@@ -194,6 +195,8 @@ urlpatterns += patterns('',
         name='sentry-create-organization'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/access-groups/$', AccessGroupMigrationView.as_view(),
         name='sentry-organization-access-group-migration'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/access-requests/$', OrganizationAccessRequestsView.as_view(),
+        name='sentry-organization-access-requests'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/$', OrganizationApiKeysView.as_view(),
         name='sentry-organization-api-keys'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/(?P<key_id>[\w_-]+)$', OrganizationApiKeySettingsView.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_access_request_details.py b/tests/sentry/api/endpoints/test_organization_access_request_details.py
new file mode 100644
index 0000000000..26bb804c03
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_access_request_details.py
@@ -0,0 +1,82 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import (
+    OrganizationAccessRequest, OrganizationMemberTeam, OrganizationMemberType
+)
+from sentry.testutils import APITestCase
+
+
+class UpdateOrganizationAccessRequestTest(APITestCase):
+    def test_approve_request(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        access_request = OrganizationAccessRequest.objects.create(
+            member=member,
+            team=team,
+        )
+
+        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'isApproved': 1})
+
+        assert resp.status_code == 204
+
+        assert OrganizationMemberTeam.objects.filter(
+            organizationmember=member,
+            team=team,
+            is_active=True,
+        ).exists()
+
+        assert not OrganizationAccessRequest.objects.filter(
+            id=access_request.id,
+        ).exists()
+
+    def test_deny_request(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        access_request = OrganizationAccessRequest.objects.create(
+            member=member,
+            team=team,
+        )
+
+        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+
+        self.login_as(self.user)
+
+        resp = self.client.put(path, data={'isApproved': 0})
+
+        assert resp.status_code == 204
+
+        assert not OrganizationMemberTeam.objects.filter(
+            organizationmember=member,
+            team=team,
+            is_active=True,
+        ).exists()
+
+        assert not OrganizationAccessRequest.objects.filter(
+            id=access_request.id,
+        ).exists()
