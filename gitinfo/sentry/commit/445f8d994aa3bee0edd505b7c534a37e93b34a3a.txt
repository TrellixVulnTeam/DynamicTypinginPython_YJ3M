commit 445f8d994aa3bee0edd505b7c534a37e93b34a3a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Aug 28 23:26:17 2015 +0200

    Finished API docs in the projects section.

diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index 0a4e6d0c0e..2024419f0a 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -46,6 +46,7 @@ class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
                                    used unless you are familiar with Sentry's
                                    internals as it's restricted to pre-defined
                                    values.
+        :auth: required
         """
         group = request.GET.get('group')
         if not group:
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index ae0e3c4e8d..f562d42779 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -12,6 +12,15 @@ from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
+@scenario('GetProject')
+def get_project_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/projects/%s/%s/' % (
+            runner.org.slug, runner.default_project.slug)
+    )
+
+
 @scenario('DeleteProject')
 def delete_project_scenario(runner):
     with runner.isolated_project('Plain Proxy') as project:
@@ -22,6 +31,23 @@ def delete_project_scenario(runner):
         )
 
 
+@scenario('UpdateProject')
+def update_project_scenario(runner):
+    with runner.isolated_project('Plain Proxy') as project:
+        runner.request(
+            method='PUT',
+            path='/projects/%s/%s/' % (
+                runner.org.slug, project.slug),
+            data={
+                'name': 'Plane Proxy',
+                'slug': 'plane-proxy',
+                'options': {
+                    'sentry:origins': 'http://example.com\nhttp://example.invalid',
+                }
+            }
+        )
+
+
 def clean_newline_inputs(value):
     result = []
     for v in value.split('\n'):
@@ -40,12 +66,18 @@ class ProjectSerializer(serializers.ModelSerializer):
 class ProjectDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
 
+    @attach_scenarios([get_project_scenario])
     def get(self, request, project):
         """
         Retrieve a Project
         ``````````````````
 
         Return details on an individual project.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          project belongs to.
+        :pparam string project_slug: the slug of the project to delete.
+        :auth: required
         """
         data = serialize(project, request.user)
         data['options'] = {
@@ -59,6 +91,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
 
         return Response(data)
 
+    @attach_scenarios([update_project_scenario])
     @sudo_required
     def put(self, request, project):
         """
@@ -66,7 +99,16 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         ````````````````
 
         Update various attributes and configurable settings for the given
-        project.
+        project.  Only supplied values are updated.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          project belongs to.
+        :pparam string project_slug: the slug of the project to delete.
+        :param string name: the new name for the project.
+        :param string slug: the new slug for the project.
+        :param object options: optional options to override in the
+                               project settings.
+        :auth: required
         """
         serializer = ProjectSerializer(project, data=request.DATA, partial=True)
 
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index b3f69f1895..d5d698b850 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -11,7 +11,7 @@ from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
-@scenario('DeleteClientKeys')
+@scenario('DeleteClientKey')
 def delete_key_scenario(runner):
     key = runner.utils.create_client_key(runner.default_project)
     runner.request(
@@ -22,6 +22,18 @@ def delete_key_scenario(runner):
     )
 
 
+@scenario('UpdateClientKey')
+def update_key_scenario(runner):
+    key = runner.utils.create_client_key(runner.default_project)
+    runner.request(
+        method='PUT',
+        path='/projects/%s/%s/keys/%s/' % (
+            runner.org.slug, runner.default_project.slug,
+            key.public_key),
+        data={'name': 'Quite Positive Key'}
+    )
+
+
 class KeySerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=False)
 
@@ -29,12 +41,21 @@ class KeySerializer(serializers.Serializer):
 class ProjectKeyDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
 
+    @attach_scenarios([update_key_scenario])
     def put(self, request, project, key_id):
         """
         Update a Client Key
         ```````````````````
 
-        Update a client key.
+        Update a client key.  This can be used to rename a key.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          client keys belong to.
+        :pparam string project_slug: the slug of the project the client keys
+                                     belong to.
+        :pparam string key_id: the ID of the key to update.
+        :param string name: the new name for the client key.
+        :auth: required
         """
         try:
             key = ProjectKey.objects.get(
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index 7f56a3d9a2..c8b313fb6f 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -5,17 +5,29 @@ from rest_framework.response import Response
 from sentry.app import tsdb
 from sentry.api.base import DocSection, StatsMixin
 from sentry.api.bases.project import ProjectEndpoint
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('RetrieveEventCountsProjcet')
+def retrieve_event_counts_project(runner):
+    runner.request(
+        method='GET',
+        path='/projects/%s/%s/stats/' % (
+            runner.org.slug, runner.default_project.slug)
+    )
 
 
 class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
     doc_section = DocSection.PROJECTS
 
+    @attach_scenarios([retrieve_event_counts_project])
     def get(self, request, project):
         """
         Retrieve Event Counts for a Project
         ```````````````````````````````````
 
-        **Draft:** This endpoint may change in the future without notice.
+        .. caution::
+           This endpoint may change in the future without notice.
 
         Return a set of points representing a normalized timestamp and the
         number of events seen in the period.
@@ -23,14 +35,20 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
         Query ranges are limited to Sentry's configured time-series
         resolutions.
 
-        Parameters:
-
-        - since: a timestamp to set the start of the query
-        - until: a timestamp to set the end of the query
-        - resolution: an explicit resolution to search for (i.e. 10s)
-
-        **Note:** resolution should not be used unless you're familiar
-        with Sentry internals as it's restricted to pre-defined values.
+        :pparam string organization_slug: the slug of the organization.
+        :pparam string project_slug: the slug of the project.
+        :qparam string stat: the name of the stat to query (``"received"``,
+                             ``"rejected"``)
+        :qparam timestamp since: a timestamp to set the start of the query
+                                 in seconds since UNIX epoch.
+        :qparam timestamp until: a timestamp to set the end of the query
+                                 in seconds since UNIX epoch.
+        :qparam string resolution: an explicit resolution to search
+                                   for (eg: ``10s``).  This should not be
+                                   used unless you are familiar with Sentry's
+                                   internals as it's restricted to pre-defined
+                                   values.
+        :auth: required
         """
         data = tsdb.get_range(
             model=tsdb.models.project,
diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
index 71a5acf428..364ed90c44 100644
--- a/src/sentry/api/endpoints/project_tagkey_values.py
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -15,10 +15,14 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
         List a Tag's Values
         ```````````````````
 
-        Return a list of values associated with this key.
-
-        The ``query`` parameter can be used to to perform a "starts with"
-        match on values.
+        Return a list of values associated with this key.  The `query`
+        parameter can be used to to perform a "starts with" match on
+        values.
+
+        :pparam string organization_slug: the slug of the organization.
+        :pparam string project_slug: the slug of the project.
+        :pparam string key: the tag key to look up.
+        :auth: required
         """
         if key in ('release', 'user', 'filename', 'function'):
             lookup_key = 'sentry:{0}'.format(key)
