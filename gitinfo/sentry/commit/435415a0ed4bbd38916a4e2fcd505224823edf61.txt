commit 435415a0ed4bbd38916a4e2fcd505224823edf61
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Jun 8 14:29:21 2017 +0200

    Added basic proguard support

diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index 9b6228eff3..558ca4b785 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -1,7 +1,12 @@
 from __future__ import absolute_import
 
+import six
+
+from libsourcemap import ProguardView
 from sentry.plugins import Plugin2
 from sentry.stacktraces import StacktraceProcessor
+from sentry.models import ProjectDSymFile, EventError
+from sentry.reprocessing import report_processing_issue
 
 
 FRAME_CACHE_VERSION = 1
@@ -12,9 +17,13 @@ class JavaStacktraceProcessor(StacktraceProcessor):
     def __init__(self, *args, **kwargs):
         StacktraceProcessor.__init__(self, *args, **kwargs)
         debug_meta = self.data.get('debug_meta')
+        self.images = set()
         if debug_meta:
             self.available = True
             self.debug_meta = debug_meta
+            for img in debug_meta['images']:
+                if img['type'] == 'proguard':
+                    self.images.add(img['uuid'])
         else:
             self.available = False
 
@@ -23,18 +32,81 @@ class JavaStacktraceProcessor(StacktraceProcessor):
         return (
             platform == 'java' and
             self.available and
-            'function' in frame
+            'function' in frame and
+            'module' in frame
         )
 
     def preprocess_frame(self, processable_frame):
-        pass
+        processable_frame.set_cache_key_from_values((
+            FRAME_CACHE_VERSION,
+            processable_frame.frame['module'],
+            processable_frame.frame['function'],
+        ))
 
     def preprocess_step(self, processing_task):
         if not self.available:
             return False
 
+        self.dsym_paths = ProjectDSymFile.dsymcache.fetch_dsyms(
+            self.project, self.images)
+        self.mapping_views = []
+
+        for image_uuid, dsym_path in six.iteritems(self.images):
+            error_type = None
+
+            if image_uuid not in self.dsym_paths:
+                error_type = EventError.PROGUARD_MISSING_MAPPING
+            else:
+                view = ProguardView.from_path(dsym_path)
+                if not view.has_line_info:
+                    error_type = EventError.PROGUARD_MISSING_LINENO
+                else:
+                    self.mapping_views.append(view)
+
+            if error_type is None:
+                continue
+
+            self.data.setdefault('errors', []).append({
+                'type': error_type,
+                'mapping_uuid': image_uuid,
+            })
+            report_processing_issue(self.data,
+                scope='proguard',
+                object='mapping:%s' % image_uuid,
+                type=error_type,
+                data={
+                    'mapping_uuid': image_uuid,
+                }
+            )
+
     def process_frame(self, processable_frame, processing_task):
-        pass
+        new_module = None
+        new_function = None
+        frame = processable_frame.frame
+
+        if processable_frame.cache_value is None:
+            alias = '%s:%s' % (frame['module'], frame['function'])
+            for view in self.mapping_views:
+                original = view.lookup(alias, frame.get('lineno'))
+                if original != alias:
+                    new_module, new_function = original.split(':', 1)
+                    break
+
+            if new_module and new_function:
+                processable_frame.set_cache_value([new_module, new_function])
+
+        else:
+            new_module, new_function = processable_frame.cache_value
+
+        if not new_module or not new_function:
+            return
+
+        raw_frame = dict(frame)
+        new_frame = dict(frame)
+        new_frame['module'] = new_module
+        new_frame['function'] = new_function
+
+        return [new_frame], [raw_frame], []
 
 
 class JavaPlugin(Plugin2):
diff --git a/src/sentry/lang/native/dsymcache.py b/src/sentry/lang/native/dsymcache.py
deleted file mode 100644
index cbd69cc6a8..0000000000
--- a/src/sentry/lang/native/dsymcache.py
+++ /dev/null
@@ -1,111 +0,0 @@
-from __future__ import absolute_import
-
-import os
-import uuid
-import time
-import errno
-import six
-import shutil
-
-from sentry import options
-from sentry.models import find_dsym_file
-
-
-ONE_DAY = 60 * 60 * 24
-ONE_DAY_AND_A_HALF = int(ONE_DAY * 1.5)
-
-
-class DSymCache(object):
-
-    @property
-    def dsym_cache_path(self):
-        return options.get('dsym.cache-path')
-
-    def get_project_path(self, project):
-        return os.path.join(self.dsym_cache_path, six.text_type(project.id))
-
-    def fetch_dsyms(self, project, uuids, on_dsym_file_referenced=None):
-        rv = {}
-        for image_uuid in uuids:
-            path = self.fetch_dsym(project, image_uuid,
-                on_dsym_file_referenced=on_dsym_file_referenced)
-            if path is not None:
-                rv[image_uuid] = path
-        return rv
-
-    def try_bump_timestamp(self, path, old_stat):
-        now = int(time.time())
-        if old_stat.st_ctime < now - ONE_DAY:
-            os.utime(path, (now, now))
-        return path
-
-    def fetch_dsym(self, project, image_uuid, on_dsym_file_referenced=None):
-        image_uuid = image_uuid.lower()
-        dsym_path = os.path.join(self.get_project_path(project), image_uuid)
-        try:
-            os.stat(dsym_path)
-        except OSError as e:
-            if e.errno != errno.ENOENT:
-                raise
-        else:
-            return dsym_path
-
-        dsf = find_dsym_file(project, image_uuid)
-        if dsf is None:
-            return None
-
-        if on_dsym_file_referenced is not None:
-            on_dsym_file_referenced(dsf)
-
-        try:
-            os.makedirs(os.path.dirname(dsym_path))
-        except OSError:
-            pass
-
-        with dsf.file.getfile() as sf:
-            suffix = '_%s' % uuid.uuid4()
-            done = False
-            try:
-                with open(dsym_path + suffix, 'w') as df:
-                    shutil.copyfileobj(sf, df)
-                os.rename(dsym_path + suffix, dsym_path)
-                done = True
-            finally:
-                # Use finally here because it does not lie about the
-                # error on exit
-                if not done:
-                    try:
-                        os.remove(dsym_path + suffix)
-                    except Exception:
-                        pass
-
-        return dsym_path
-
-    def clear_old_entries(self):
-        try:
-            cache_folders = os.listdir(self.dsym_cache_path)
-        except OSError:
-            return
-
-        cutoff = int(time.time()) - ONE_DAY_AND_A_HALF
-
-        for cache_folder in cache_folders:
-            cache_folder = os.path.join(self.dsym_cache_path, cache_folder)
-            try:
-                items = os.listdir(cache_folder)
-            except OSError:
-                continue
-            for cached_file in items:
-                cached_file = os.path.join(cache_folder, cached_file)
-                try:
-                    mtime = os.path.getmtime(cached_file)
-                except OSError:
-                    continue
-                if mtime < cutoff:
-                    try:
-                        os.remove(cached_file)
-                    except OSError:
-                        pass
-
-
-dsymcache = DSymCache()
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 2ffd8d5f55..753f84664c 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -37,7 +37,9 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             self.available = True
             self.debug_meta = debug_meta
             self.sdk_info = get_sdk_from_event(self.data)
-            self.image_lookup = ImageLookup(self.debug_meta['images'])
+            self.image_lookup = ImageLookup([
+                img for img in self.debug_meta['images']
+                if img['type'] == 'apple'])
         else:
             self.available = False
 
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 0f4b89908d..21515bdc47 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -6,10 +6,9 @@ import six
 from symsynd import demangle_symbol, SymbolicationError, get_cpu_name, \
     ImageLookup, Symbolizer as SymsyndSymbolizer
 
-from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
 from sentry.utils.compat import implements_to_string
-from sentry.models import EventError
+from sentry.models import EventError, ProjectDSymFile
 from sentry.constants import MAX_SYM, NATIVE_UNKNOWN_STRING
 
 
@@ -109,7 +108,7 @@ class Symbolizer(object):
         if to_load is None:
             to_load = self.image_lookup.get_uuids()
 
-        self.dsym_paths = dsymcache.fetch_dsyms(
+        self.dsym_paths = ProjectDSymFile.dsymcache.fetch_dsyms(
             project, to_load, on_dsym_file_referenced=on_dsym_file_referenced)
 
         self.cpu_name = cpu_name
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index b108433d78..8a2f54fbbb 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -11,6 +11,8 @@ from __future__ import absolute_import
 import os
 import six
 import uuid
+import time
+import errno
 import shutil
 import hashlib
 import tempfile
@@ -23,6 +25,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from symsynd import DebugInfo, DebugInfoError
 
+from sentry import options
 from sentry.db.models import FlexibleForeignKey, Model, \
     sane_repr, BaseManager, BoundedPositiveIntegerField
 from sentry.models.file import File
@@ -31,6 +34,8 @@ from sentry.constants import KNOWN_DSYM_TYPES
 from sentry.reprocessing import resolve_processing_issue
 
 
+ONE_DAY = 60 * 60 * 24
+ONE_DAY_AND_A_HALF = int(ONE_DAY * 1.5)
 DSYM_MIMETYPES = dict((v, k) for k, v in KNOWN_DSYM_TYPES.items())
 
 
@@ -322,3 +327,99 @@ def find_dsym_file(project, image_uuid):
         ).select_related('file').get()
     except ProjectDSymFile.DoesNotExist:
         pass
+
+
+class DSymCache(object):
+
+    @property
+    def dsym_cache_path(self):
+        return options.get('dsym.cache-path')
+
+    def get_project_path(self, project):
+        return os.path.join(self.dsym_cache_path, six.text_type(project.id))
+
+    def fetch_dsyms(self, project, uuids, on_dsym_file_referenced=None):
+        rv = {}
+        for image_uuid in uuids:
+            path = self.fetch_dsym(project, image_uuid,
+                on_dsym_file_referenced=on_dsym_file_referenced)
+            if path is not None:
+                rv[image_uuid] = path
+        return rv
+
+    def try_bump_timestamp(self, path, old_stat):
+        now = int(time.time())
+        if old_stat.st_ctime < now - ONE_DAY:
+            os.utime(path, (now, now))
+        return path
+
+    def fetch_dsym(self, project, image_uuid, on_dsym_file_referenced=None):
+        image_uuid = image_uuid.lower()
+        dsym_path = os.path.join(self.get_project_path(project), image_uuid)
+        try:
+            os.stat(dsym_path)
+        except OSError as e:
+            if e.errno != errno.ENOENT:
+                raise
+        else:
+            return dsym_path
+
+        dsf = find_dsym_file(project, image_uuid)
+        if dsf is None:
+            return None
+
+        if on_dsym_file_referenced is not None:
+            on_dsym_file_referenced(dsf)
+
+        try:
+            os.makedirs(os.path.dirname(dsym_path))
+        except OSError:
+            pass
+
+        with dsf.file.getfile() as sf:
+            suffix = '_%s' % uuid.uuid4()
+            done = False
+            try:
+                with open(dsym_path + suffix, 'w') as df:
+                    shutil.copyfileobj(sf, df)
+                os.rename(dsym_path + suffix, dsym_path)
+                done = True
+            finally:
+                # Use finally here because it does not lie about the
+                # error on exit
+                if not done:
+                    try:
+                        os.remove(dsym_path + suffix)
+                    except Exception:
+                        pass
+
+        return dsym_path
+
+    def clear_old_entries(self):
+        try:
+            cache_folders = os.listdir(self.dsym_cache_path)
+        except OSError:
+            return
+
+        cutoff = int(time.time()) - ONE_DAY_AND_A_HALF
+
+        for cache_folder in cache_folders:
+            cache_folder = os.path.join(self.dsym_cache_path, cache_folder)
+            try:
+                items = os.listdir(cache_folder)
+            except OSError:
+                continue
+            for cached_file in items:
+                cached_file = os.path.join(cache_folder, cached_file)
+                try:
+                    mtime = os.path.getmtime(cached_file)
+                except OSError:
+                    continue
+                if mtime < cutoff:
+                    try:
+                        os.remove(cached_file)
+                    except OSError:
+                        pass
+
+
+ProjectDSymFile.dsymcache = DSymCache()
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 76208c8cb2..a47d872e30 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -51,6 +51,8 @@ class EventError(object):
     NATIVE_MISSING_SYMBOL = 'native_missing_symbol'
     NATIVE_SIMULATOR_FRAME = 'native_simulator_frame'
     NATIVE_UNKNOWN_IMAGE = 'native_unknown_image'
+    PROGUARD_MISSING_MAPPING = 'proguard_missing_mapping'
+    PROGUARD_MISSING_LINENO = 'proguard_missing_lineno'
 
     _messages = {
         INVALID_DATA: u'Discarded invalid value for parameter \'{name}\'',
@@ -84,7 +86,9 @@ class EventError(object):
         NATIVE_MISSING_SYSTEM_DSYM: u'A system debug symbol file was missing.',
         NATIVE_MISSING_SYMBOL: u'Unable to resolve a symbol.',
         NATIVE_SIMULATOR_FRAME: u'Encountered an unprocessable simulator frame.',
-        NATIVE_UNKNOWN_IMAGE: u'An binary image is referenced that is unknown.'
+        NATIVE_UNKNOWN_IMAGE: u'An binary image is referenced that is unknown.',
+        PROGUARD_MISSING_MAPPING: u'A proguard mapping file was missing.',
+        PROGUARD_MISSING_LINENO: u'A proguard mapping file does not contain line info.',
     }
 
     @classmethod
diff --git a/src/sentry/tasks/dsymcache.py b/src/sentry/tasks/dsymcache.py
index 7c5c135466..6710fe4ec9 100644
--- a/src/sentry/tasks/dsymcache.py
+++ b/src/sentry/tasks/dsymcache.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import, print_function
 
 from sentry.tasks.base import instrumented_task
-from sentry.lang.native.dsymcache import dsymcache
+from sentry.models import ProjectDSymFile
 
 
 @instrumented_task(name='sentry.tasks.clear_old_cached_dsyms',
                    time_limit=15,
                    soft_time_limit=10)
 def clear_old_cached_dsyms():
-    dsymcache.clear_old_entries()
+    ProjectDSymFile.dsymcache.clear_old_entries()
