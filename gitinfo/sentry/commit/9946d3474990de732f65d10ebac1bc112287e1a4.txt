commit 9946d3474990de732f65d10ebac1bc112287e1a4
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed Oct 17 14:06:08 2018 -0700

    feat(app-platform): App platform/sentry app install endpoint (#10139)
    
    * feat(app-platform): Add sentry app installations endpoint

diff --git a/src/sentry/api/endpoints/organization_sentry_app_installations.py b/src/sentry/api/endpoints/organization_sentry_app_installations.py
new file mode 100644
index 0000000000..b3cc6c0156
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_sentry_app_installations.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+from django.utils.translation import ugettext_lazy as _
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.bases import OrganizationEndpoint
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.features.helpers import requires_feature
+from sentry.mediators.sentry_app_installations import Creator
+from sentry.models import SentryAppInstallation
+
+
+class OrganizationSentryAppInstallationsSerializer(serializers.Serializer):
+    slug = serializers.RegexField(
+        r'^[a-z0-9_\-]+$',
+        max_length=50,
+        error_messages={
+            'invalid': _('Enter a valid slug consisting of lowercase letters, '
+                         'numbers, underscores or hyphens.'),
+        },
+    )
+
+    def validate(self, attrs):
+        if not attrs.get('slug'):
+            raise serializers.ValidationError('Sentry App slug is required')
+        return attrs
+
+
+class OrganizationSentryAppInstallationsEndpoint(OrganizationEndpoint):
+    @requires_feature('organizations:internal-catchall')
+    def get(self, request, organization):
+        queryset = SentryAppInstallation.objects.filter(
+            organization=organization,
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-date_added',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    @requires_feature('organizations:internal-catchall')
+    def post(self, request, organization):
+        serializer = OrganizationSentryAppInstallationsSerializer(data=request.DATA)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        slug = serializer.object.get('slug')
+        install, _ = Creator.run(
+            organization=organization,
+            slug=slug,
+        )
+        return Response(serialize(install))
diff --git a/src/sentry/api/serializers/models/sentry_app_installation.py b/src/sentry/api/serializers/models/sentry_app_installation.py
new file mode 100644
index 0000000000..4b1a059622
--- /dev/null
+++ b/src/sentry/api/serializers/models/sentry_app_installation.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import SentryAppInstallation
+
+
+@register(SentryAppInstallation)
+class SentryAppInstallationSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'app': obj.sentry_app.slug,
+            'organization': obj.organization.slug,
+            'uuid': obj.uuid,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index afbcbb5b3a..e535826342 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -92,6 +92,7 @@ from .endpoints.organization_config_integrations import OrganizationConfigIntegr
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
 from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
+from .endpoints.organization_sentry_app_installations import OrganizationSentryAppInstallationsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
@@ -605,6 +606,11 @@ urlpatterns = patterns(
         OrganizationReleaseCommitsEndpoint.as_view(),
         name='sentry-api-0-organization-release-commits'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/sentry-app-installations/$',
+        OrganizationSentryAppInstallationsEndpoint.as_view(),
+        name='sentry-api-0-organization-sentry-app-installations'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/stats/$',
         OrganizationStatsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py b/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
new file mode 100644
index 0000000000..a6224d4b25
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
@@ -0,0 +1,171 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.constants import SentryAppStatus
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+from sentry.mediators.sentry_apps import Creator as SentryAppCreator
+from sentry.mediators.sentry_app_installations import Creator
+
+
+class OrganizationSentryAppInstallationsTest(APITestCase):
+    def setUp(self):
+        self.superuser = self.create_user(email='a@example.com', is_superuser=True)
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user)
+        self.super_org = self.create_organization(owner=self.superuser)
+        self.published_app = SentryAppCreator.run(
+            name='Test',
+            organization=self.super_org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        self.published_app.update(status=SentryAppStatus.PUBLISHED)
+        self.installation, _ = Creator.run(
+            slug=self.published_app.slug,
+            organization=self.super_org,
+        )
+        self.unpublished_app = SentryAppCreator.run(
+            name='Testin',
+            organization=self.org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        self.installation2, _ = Creator.run(
+            slug=self.unpublished_app.slug,
+            organization=self.org,
+        )
+        self.url = reverse(
+            'sentry-api-0-organization-sentry-app-installations',
+            args=[
+                self.org.slug])
+
+
+class GetOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallationsTest):
+    @with_feature('organizations:internal-catchall')
+    def test_superuser_sees_all_installs(self):
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert response.data == [{
+            'app': self.unpublished_app.slug,
+            'organization': self.org.slug,
+            'uuid': self.installation2.uuid,
+        }]
+
+        url = reverse(
+            'sentry-api-0-organization-sentry-app-installations',
+            args=[self.super_org.slug],
+        )
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+        assert response.data == [{
+            'app': self.published_app.slug,
+            'organization': self.super_org.slug,
+            'uuid': self.installation.uuid,
+        }]
+
+    @with_feature('organizations:internal-catchall')
+    def test_users_only_sees_installs_on_their_org(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert response.data == [{
+            'app': self.unpublished_app.slug,
+            'organization': self.org.slug,
+            'uuid': self.installation2.uuid,
+        }]
+
+        url = reverse(
+            'sentry-api-0-organization-sentry-app-installations',
+            args=[self.super_org.slug],
+        )
+        response = self.client.get(url, format='json')
+        assert response.status_code == 403
+
+    def test_no_access_without_internal_catchall(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url, format='json')
+        assert response.status_code == 404
+
+
+class PostOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallationsTest):
+    @with_feature('organizations:internal-catchall')
+    def test_install_unpublished_app(self):
+        self.login_as(user=self.user)
+        app = SentryAppCreator.run(
+            name='Sample',
+            organization=self.org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        response = self.client.post(
+            self.url,
+            data={'slug': app.slug},
+            format='json',
+        )
+        expected = {
+            'app': app.slug,
+            'organization': self.org.slug,
+        }
+
+        assert response.status_code == 200, response.content
+        assert six.viewitems(expected) <= six.viewitems(response.data)
+
+    @with_feature('organizations:internal-catchall')
+    def test_install_published_app(self):
+        self.login_as(user=self.user)
+        app = SentryAppCreator.run(
+            name='Sample',
+            organization=self.org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        app.update(status=SentryAppStatus.PUBLISHED)
+        response = self.client.post(
+            self.url,
+            data={'slug': app.slug},
+            format='json',
+        )
+        expected = {
+            'app': app.slug,
+            'organization': self.org.slug,
+        }
+
+        assert response.status_code == 200, response.content
+        assert six.viewitems(expected) <= six.viewitems(response.data)
+
+    @with_feature('organizations:internal-catchall')
+    def test_members_cannot_install_apps(self):
+        user = self.create_user('bar@example.com')
+        self.create_member(
+            organization=self.org,
+            user=user,
+            role='member',
+        )
+        self.login_as(user)
+        app = SentryAppCreator.run(
+            name='Sample',
+            organization=self.org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        app.update(status=SentryAppStatus.PUBLISHED)
+        response = self.client.post(
+            self.url,
+            data={'slug': app.slug},
+            format='json',
+        )
+        assert response.status_code == 403
+
+    def test_no_access_without_internal_catchall(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url, format='json')
+        assert response.status_code == 404
