commit 6736d5c6189d8e27fed40de79ddb56159b671043
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 12 07:44:08 2014 -0700

    Remove global STATUS_ constants usage
    
    - Add ProjectStatus
    - Cleanup deletion endpoints
    - Remove assign/bookmark/resolve endpoints
    
    Conflicts:
            src/sentry/api/endpoints/group_details.py
            src/sentry/api/endpoints/project_group_index.py
            src/sentry/constants.py
            src/sentry/event_manager.py
            src/sentry/models/group.py
            src/sentry/web/api.py
            tests/sentry/api/endpoints/test_group_details.py

diff --git a/src/sentry/api/endpoints/group_assign.py b/src/sentry/api/endpoints/group_assign.py
deleted file mode 100644
index f26a280aa3..0000000000
--- a/src/sentry/api/endpoints/group_assign.py
+++ /dev/null
@@ -1,64 +0,0 @@
-from __future__ import absolute_import
-
-from django.utils import timezone
-from rest_framework import serializers, status
-from rest_framework.response import Response
-
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.db.models import create_or_update
-from sentry.models import Group, GroupAssignee, Activity
-
-
-class GroupAssigneeSerializer(serializers.ModelSerializer):
-    user = serializers.SlugRelatedField(slug_field='username')
-
-    class Meta:
-        model = GroupAssignee
-        fields = ('user',)
-
-
-class GroupAssignEndpoint(Endpoint):
-    def post(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
-        serializer = GroupAssigneeSerializer(data=request.DATA)
-
-        if serializer.is_valid():
-            user = serializer.object.user
-            now = timezone.now()
-
-            assignee, created = GroupAssignee.objects.get_or_create(
-                group=group,
-                defaults={
-                    'project': group.project,
-                    'user': user,
-                    'date_added': now,
-                }
-            )
-
-            if not created:
-                affected = GroupAssignee.objects.filter(
-                    group=group,
-                ).exclude(user=user).update(
-                    user=user, date_added=now
-                )
-            else:
-                affected = True
-
-            if affected:
-                create_or_update(
-                    Activity,
-                    project=group.project,
-                    group=group,
-                    type=Activity.ASSIGNED,
-                    user=request.user,
-                )
-
-            return Response()
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/group_bookmark.py b/src/sentry/api/endpoints/group_bookmark.py
deleted file mode 100644
index 5c09dfe8da..0000000000
--- a/src/sentry/api/endpoints/group_bookmark.py
+++ /dev/null
@@ -1,26 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.models import Group, GroupBookmark
-
-from rest_framework.response import Response
-
-
-class GroupBookmarkEndpoint(Endpoint):
-    def post(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
-        bookmark = GroupBookmark(
-            project=group.project,
-            group=group,
-            user=request.user,
-        )
-
-        bookmark.save()
-
-        return Response()
diff --git a/src/sentry/api/endpoints/group_resolve.py b/src/sentry/api/endpoints/group_resolve.py
deleted file mode 100644
index 998f9afc73..0000000000
--- a/src/sentry/api/endpoints/group_resolve.py
+++ /dev/null
@@ -1,41 +0,0 @@
-from __future__ import absolute_import
-
-from django.utils import timezone
-from rest_framework.response import Response
-
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.db.models import create_or_update
-from sentry.constants import STATUS_RESOLVED
-from sentry.models import Group, Activity
-
-
-class GroupResolveEndpoint(Endpoint):
-    def post(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
-        now = timezone.now()
-
-        group.resolved_at = now
-
-        happened = Group.objects.filter(
-            id=group.id,
-        ).exclude(status=STATUS_RESOLVED).update(
-            status=STATUS_RESOLVED,
-            resolved_at=now,
-        )
-
-        if happened:
-            create_or_update(
-                Activity,
-                project=group.project,
-                group=group,
-                type=Activity.SET_RESOLVED,
-                user=request.user,
-            )
-
-        return Response()
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index fb9998c216..309a65a22d 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -7,9 +7,9 @@ from sentry.api.base import Endpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import MEMBER_ADMIN, STATUS_HIDDEN
+from sentry.constants import MEMBER_ADMIN
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Project
+    AuditLogEntry, AuditLogEntryEvent, Project, ProjectStatus
 )
 from sentry.tasks.deletion import delete_project
 
@@ -80,8 +80,8 @@ class ProjectDetailsEndpoint(Endpoint):
         if not (request.user.is_superuser or project.team.owner_id == request.user.id):
             return Response('{"error": "form"}', status=status.HTTP_403_FORBIDDEN)
 
-        if project.status != STATUS_HIDDEN:
-            project.update(status=STATUS_HIDDEN)
+        if project.status == ProjectStatus.VISIBLE:
+            project.update(status=ProjectStatus.PENDING_DELETION)
             delete_project.delay(object_id=project.id)
 
             AuditLogEntry.objects.create(
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 67434070ef..2603c2acf6 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -10,7 +10,9 @@ from sentry.app import search
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import DEFAULT_SORT_OPTION, STATUS_CHOICES
+from sentry.constants import (
+    DEFAULT_SORT_OPTION, STATUS_CHOICES
+)
 from sentry.db.models.query import create_or_update
 from sentry.models import (
     Activity, Group, GroupBookmark, GroupMeta, GroupStatus, Project, TagKey
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 08d20106b7..808e4f3ad0 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.conf import settings
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -77,23 +76,17 @@ class TeamDetailsEndpoint(Endpoint):
 
         assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
-        if team.project_set.filter(id=settings.SENTRY_PROJECT).exists():
-            return Response('{"error": "Cannot remove team containing default project."}',
-                            status=status.HTTP_403_FORBIDDEN)
+        if team.status == TeamStatus.VISIBLE:
+            team.update(status=TeamStatus.PENDING_DELETION)
+            delete_team.delay(object_id=team.id, countdown=60 * 5)
 
-        team.update(status=TeamStatus.PENDING_DELETION)
-
-        # we delay the task for 5 minutes so we can implement an undo
-        kwargs = {'object_id': team.id}
-        delete_team.apply_async(kwargs=kwargs, countdown=60 * 5)
-
-        AuditLogEntry.objects.create(
-            organization=team.organization,
-            actor=request.user,
-            ip_address=request.META['REMOTE_ADDR'],
-            target_object=team.id,
-            event=AuditLogEntryEvent.TEAM_REMOVE,
-            data=team.get_audit_log_data(),
-        )
+            AuditLogEntry.objects.create(
+                organization=team.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=team.id,
+                event=AuditLogEntryEvent.TEAM_REMOVE,
+                data=team.get_audit_log_data(),
+            )
 
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/team_groups_new.py b/src/sentry/api/endpoints/team_groups_new.py
index 131120d7b7..c02147b2a9 100644
--- a/src/sentry/api/endpoints/team_groups_new.py
+++ b/src/sentry/api/endpoints/team_groups_new.py
@@ -7,8 +7,7 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import STATUS_UNRESOLVED
-from sentry.models import Group, Project, Team
+from sentry.models import Group, GroupStatus, Project, Team
 
 
 class TeamGroupsNewEndpoint(Endpoint):
@@ -38,7 +37,7 @@ class TeamGroupsNewEndpoint(Endpoint):
 
         group_list = list(Group.objects.filter(
             project__in=project_dict.keys(),
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             active_at__gte=cutoff_dt,
         ).extra(
             select={'sort_value': 'score'},
diff --git a/src/sentry/api/endpoints/team_groups_trending.py b/src/sentry/api/endpoints/team_groups_trending.py
index 8d08a101d2..f778c9943c 100644
--- a/src/sentry/api/endpoints/team_groups_trending.py
+++ b/src/sentry/api/endpoints/team_groups_trending.py
@@ -7,8 +7,7 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import STATUS_UNRESOLVED
-from sentry.models import Group, Project, Team
+from sentry.models import Group, GroupStatus, Project, Team
 
 
 class TeamGroupsTrendingEndpoint(Endpoint):
@@ -38,7 +37,7 @@ class TeamGroupsTrendingEndpoint(Endpoint):
 
         group_list = list(Group.objects.filter(
             project__in=project_dict.keys(),
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             last_seen__gte=cutoff_dt,
         ).extra(
             select={'sort_value': 'score'},
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index db3826a2d5..9fd14d7e91 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -7,9 +7,9 @@ from django.utils import timezone
 
 from sentry.api.serializers import Serializer, register
 from sentry.app import tsdb
-from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
+from sentry.constants import TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupTagKey, GroupSeen
+    Group, GroupBookmark, GroupTagKey, GroupSeen, GroupStatus
 )
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
@@ -85,9 +85,9 @@ class GroupSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         status = obj.get_status()
-        if status == STATUS_RESOLVED:
+        if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
-        elif status == STATUS_MUTED:
+        elif status == GroupStatus.MUTED:
             status_label = 'muted'
         else:
             status_label = 'unresolved'
@@ -107,7 +107,7 @@ class GroupSerializer(Serializer):
             'firstSeen': obj.first_seen,
             'lastSeen': obj.last_seen,
             'timeSpent': obj.avg_time_spent,
-            'isResolved': obj.get_status() == STATUS_RESOLVED,
+            'isResolved': obj.get_status() == GroupStatus.RESOLVED,
             'status': status_label,
             'isPublic': obj.is_public,
             # 'score': getattr(obj, 'sort_value', 0),
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index de3fe00c02..cb2297d9d5 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -6,10 +6,7 @@ from .endpoints.auth_index import AuthIndexEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
-from .endpoints.group_assign import GroupAssignEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
-from .endpoints.group_resolve import GroupResolveEndpoint
-from .endpoints.group_bookmark import GroupBookmarkEndpoint
 from .endpoints.group_markseen import GroupMarkSeenEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
@@ -103,15 +100,6 @@ urlpatterns = patterns(
     url(r'^groups/(?P<group_id>\d+)/$',
         GroupDetailsEndpoint.as_view(),
         name='sentry-api-0-group-details'),
-    url(r'^groups/(?P<group_id>\d+)/assign/$',
-        GroupAssignEndpoint.as_view(),
-        name='sentry-api-0-group-assign'),
-    url(r'^groups/(?P<group_id>\d+)/resolve/$',
-        GroupResolveEndpoint.as_view(),
-        name='sentry-api-0-group-resolve'),
-    url(r'^groups/(?P<group_id>\d+)/bookmark/$',
-        GroupBookmarkEndpoint.as_view(),
-        name='sentry-api-0-group-bookmark'),
     url(r'^groups/(?P<group_id>\d+)/markseen/$',
         GroupMarkSeenEndpoint.as_view(),
         name='sentry-api-0-group-markseen'),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 9f9f7f2298..39edca687e 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -44,12 +44,6 @@ SEARCH_SORT_OPTIONS = SortedDict((
     ('new', _('First Seen')),
 ))
 
-STATUS_VISIBLE = 0
-STATUS_HIDDEN = 1
-
-STATUS_ACTIVE = 0
-STATUS_INACTIVE = 1
-
 # XXX: Deprecated: use GroupStatus instead
 STATUS_UNRESOLVED = 0
 STATUS_RESOLVED = 1
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index d5678dac76..265e6b3c90 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -20,9 +20,11 @@ from uuid import uuid4
 
 from sentry.app import buffer, tsdb
 from sentry.constants import (
-    STATUS_UNRESOLVED, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
+    LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
+)
+from sentry.models import (
+    Event, EventMapping, Group, GroupHash, GroupStatus, Project
 )
-from sentry.models import Event, EventMapping, Group, GroupHash, Project
 from sentry.plugins import plugins
 from sentry.signals import regression_signal
 from sentry.utils.logging import suppress_exceptions
@@ -484,12 +486,12 @@ class EventManager(object):
                 # add 30 seconds to the regression window to account for
                 # races here
                 active_at__gte=date - timedelta(seconds=5),
-            ).update(active_at=date, status=STATUS_UNRESOLVED))
+            ).update(active_at=date, status=GroupStatus.UNRESOLVED))
 
             transaction.commit_unless_managed(using=group._state.db)
 
             group.active_at = date
-            group.status = STATUS_UNRESOLVED
+            group.status = GroupStatus.UNRESOLVED
 
         group.last_seen = extra['last_seen']
 
diff --git a/src/sentry/models/alert.py b/src/sentry/models/alert.py
index 7b3dde53ae..39a3333ddb 100644
--- a/src/sentry/models/alert.py
+++ b/src/sentry/models/alert.py
@@ -13,13 +13,17 @@ from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
 from sentry.db.models import (
     Model, GzippedDictField, BoundedPositiveIntegerField, sane_repr
 )
 from sentry.utils.http import absolute_uri
 
 
+class AlertStatus(object):
+    UNRESOLVED = 0
+    RESOLVED = 1
+
+
 class Alert(Model):
     project = models.ForeignKey('sentry.Project')
     group = models.ForeignKey('sentry.Group', null=True)
@@ -28,8 +32,8 @@ class Alert(Model):
     data = GzippedDictField(null=True)
     related_groups = models.ManyToManyField('sentry.Group', through='sentry.AlertRelatedGroup', related_name='related_alerts')
     status = BoundedPositiveIntegerField(default=0, choices=(
-        (STATUS_UNRESOLVED, _('Unresolved')),
-        (STATUS_RESOLVED, _('Resolved')),
+        (AlertStatus.UNRESOLVED, _('Unresolved')),
+        (AlertStatus.RESOLVED, _('Resolved')),
     ), db_index=True)
 
     class Meta:
@@ -45,7 +49,7 @@ class Alert(Model):
             project=project_id,
             group_id__isnull=True,
             datetime__gte=timezone.now() - timedelta(minutes=60),
-            status=STATUS_UNRESOLVED,
+            status=AlertStatus.UNRESOLVED,
         ).order_by('-datetime')
 
     @classmethod
@@ -86,7 +90,7 @@ class Alert(Model):
 
     @property
     def is_resolved(self):
-        return (self.status == STATUS_RESOLVED
+        return (self.status == AlertStatus.RESOLVED
                 or self.datetime < timezone.now() - timedelta(minutes=60))
 
     def get_absolute_url(self):
diff --git a/src/sentry/models/grouprulestatus.py b/src/sentry/models/grouprulestatus.py
index 17e6364242..6d6ad6af5c 100644
--- a/src/sentry/models/grouprulestatus.py
+++ b/src/sentry/models/grouprulestatus.py
@@ -10,15 +10,17 @@ from __future__ import absolute_import
 from django.db import models
 from django.utils import timezone
 
-from sentry.constants import STATUS_ACTIVE
 from sentry.db.models import Model, sane_repr
 
 
 class GroupRuleStatus(Model):
+    ACTIVE = 0
+    INACTIVE = 1
+
     project = models.ForeignKey('sentry.Project')
     rule = models.ForeignKey('sentry.Rule')
     group = models.ForeignKey('sentry.Group')
-    status = models.PositiveSmallIntegerField(default=STATUS_ACTIVE)
+    status = models.PositiveSmallIntegerField(default=ACTIVE)
     date_added = models.DateTimeField(default=timezone.now)
 
     class Meta:
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index ec968094ff..d52497ce37 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -16,9 +16,7 @@ from django.db.models import F, Q
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import (
-    PLATFORM_TITLES, PLATFORM_LIST, STATUS_VISIBLE, STATUS_HIDDEN
-)
+from sentry.constants import PLATFORM_TITLES, PLATFORM_LIST
 from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, Model, sane_repr
 )
@@ -65,6 +63,13 @@ class ProjectManager(BaseManager):
         return sorted(project_list, key=lambda x: x.name.lower())
 
 
+# TODO(dcramer): pull in enum library
+class ProjectStatus(object):
+    VISIBLE = 0
+    PENDING_DELETION = 1
+    DELETION_IN_PROGRESS = 2
+
+
 class Project(Model):
     """
     Projects are permission based namespaces which generally
@@ -82,8 +87,9 @@ class Project(Model):
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
     status = BoundedPositiveIntegerField(default=0, choices=(
-        (STATUS_VISIBLE, _('Active')),
-        (STATUS_HIDDEN, _('Hidden')),
+        (ProjectStatus.VISIBLE, _('Active')),
+        (ProjectStatus.PENDING_DELETION, _('Pending Deletion')),
+        (ProjectStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), db_index=True)
     platform = models.CharField(max_length=32, choices=PLATFORM_CHOICES, null=True)
 
diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index f2d52cc4ea..ebd2ba40c1 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -479,7 +479,7 @@ class IPlugin(local):
 
     def is_regression(self, group, event, **kwargs):
         """
-        Called on new events when the group's status is STATUS_RESOLVED.
+        Called on new events when the group's status is resolved.
         Return True if this event is a regression, False if it is not,
         None to defer to other plugins.
 
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index e9fb4340b9..e665ec7dd1 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -81,10 +81,9 @@ def delete_team(object_id, **kwargs):
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
 def delete_project(object_id, **kwargs):
-    from sentry.constants import STATUS_HIDDEN
     from sentry.models import (
-        Project, ProjectKey, TagKey, TagValue, GroupTagKey, GroupTagValue,
-        Activity, EventMapping, Event, Group
+        Project, ProjectKey, ProjectStatus, TagKey, TagValue, GroupTagKey,
+        GroupTagValue, Activity, EventMapping, Event, Group
     )
 
     try:
@@ -92,8 +91,8 @@ def delete_project(object_id, **kwargs):
     except Project.DoesNotExist:
         return
 
-    if p.status != STATUS_HIDDEN:
-        p.update(status=STATUS_HIDDEN)
+    if p.status != ProjectStatus.DELETION_IN_PROGRESS:
+        p.update(status=ProjectStatus.DELETION_IN_PROGRESS)
 
     logger = delete_project.get_logger()
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index f3639f7784..be46988d88 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -13,7 +13,6 @@ import logging
 from django.conf import settings
 from hashlib import md5
 
-from sentry.constants import STATUS_ACTIVE, STATUS_INACTIVE
 from sentry.plugins import plugins
 from sentry.rules import EventState, rules
 from sentry.tasks.base import instrumented_task
@@ -88,7 +87,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
             group=event.group,
             defaults={
                 'project': project,
-                'status': STATUS_INACTIVE,
+                'status': GroupRuleStatus.INACTIVE,
             },
         )
 
@@ -96,7 +95,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
             is_new=is_new,
             is_regression=is_regression,
             is_sample=is_sample,
-            rule_is_active=rule_status.status == STATUS_ACTIVE,
+            rule_is_active=rule_status.status == GroupRuleStatus.ACTIVE,
         )
 
         condition_iter = (
@@ -115,18 +114,18 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
                                match, rule.id)
             continue
 
-        if passed and rule_status.status == STATUS_INACTIVE:
+        if passed and rule_status.status == GroupRuleStatus.INACTIVE:
             # we only fire if we're able to say that the state has changed
             GroupRuleStatus.objects.filter(
                 id=rule_status.id,
-                status=STATUS_INACTIVE,
-            ).update(status=STATUS_ACTIVE)
-        elif not passed and rule_status.status == STATUS_ACTIVE:
+                status=GroupRuleStatus.INACTIVE,
+            ).update(status=GroupRuleStatus.ACTIVE)
+        elif not passed and rule_status.status == GroupRuleStatus.ACTIVE:
             # update the state to suggest this rule can fire again
             GroupRuleStatus.objects.filter(
                 id=rule_status.id,
-                status=STATUS_ACTIVE,
-            ).update(status=STATUS_INACTIVE)
+                status=GroupRuleStatus.ACTIVE,
+            ).update(status=GroupRuleStatus.INACTIVE)
 
         if passed:
             execute_rule.apply_async(
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 5f0bf91bc0..28ef5afad4 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -14,9 +14,9 @@ from django.utils import timezone
 from django.utils.html import escape
 
 from sentry.app import env, tsdb
-from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
+from sentry.constants import TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupTagKey, GroupSeen, ProjectOption
+    Group, GroupBookmark, GroupTagKey, GroupSeen, GroupStatus, ProjectOption
 )
 from sentry.templatetags.sentry_plugins import get_tags
 from sentry.utils import json
@@ -147,9 +147,9 @@ class GroupTransformer(Transformer):
 
     def transform(self, obj, request=None):
         status = obj.get_status()
-        if status == STATUS_RESOLVED:
+        if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
-        elif status == STATUS_MUTED:
+        elif status == GroupStatus.MUTED:
             status_label = 'muted'
         else:
             status_label = 'unresolved'
@@ -173,7 +173,7 @@ class GroupTransformer(Transformer):
             'timeSpent': obj.avg_time_spent,
             'canResolve': request and request.user.is_authenticated(),
             'status': status_label,
-            'isResolved': obj.get_status() == STATUS_RESOLVED,
+            'isResolved': obj.get_status() == GroupStatus.RESOLVED,
             'isPublic': obj.is_public,
             'score': getattr(obj, 'sort_value', 0),
             'project': {
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index bc91ae4834..3e1f8e00f6 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -31,9 +31,7 @@ from raven.contrib.django.models import client as Raven
 
 from sentry import app
 from sentry.app import tsdb
-from sentry.constants import (
-    MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED,
-    EVENTS_PER_PAGE)
+from sentry.constants import MEMBER_USER, EVENTS_PER_PAGE
 from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
@@ -42,7 +40,9 @@ from sentry.coreapi import (
 from sentry.exceptions import InvalidData, InvalidOrigin, InvalidRequest
 from sentry.event_manager import EventManager
 from sentry.models import (
-    Group, GroupBookmark, GroupTagValue, Project, TagValue, Activity, User)
+    Group, GroupBookmark, GroupStatus, GroupTagValue, Project, TagValue,
+    Activity, User
+)
 from sentry.signals import event_received
 from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
@@ -420,11 +420,11 @@ def resolve(request, organization, project):
 
     happened = Group.objects.filter(
         pk=group.pk,
-    ).exclude(status=STATUS_RESOLVED).update(
-        status=STATUS_RESOLVED,
+    ).exclude(status=GroupStatus.RESOLVED).update(
+        status=GroupStatus.RESOLVED,
         resolved_at=now,
     )
-    group.status = STATUS_RESOLVED
+    group.status = GroupStatus.RESOLVED
     group.resolved_at = now
 
     if happened:
@@ -495,7 +495,7 @@ def resolve_group(request, organization, project, group_id):
         return HttpResponseForbidden()
 
     happened = group.update(
-        status=STATUS_RESOLVED,
+        status=GroupStatus.RESOLVED,
         resolved_at=timezone.now(),
     )
     if happened:
@@ -520,7 +520,7 @@ def mute_group(request, organization, project, group_id):
         return HttpResponseForbidden()
 
     happened = group.update(
-        status=STATUS_MUTED,
+        status=GroupStatus.MUTED,
         resolved_at=timezone.now(),
     )
     if happened:
@@ -545,7 +545,7 @@ def unresolve_group(request, organization, project, group_id):
         return HttpResponseForbidden()
 
     happened = group.update(
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
         active_at=timezone.now(),
     )
     if happened:
@@ -661,9 +661,9 @@ def bookmark(request, organization, project):
 def clear(request, organization, project):
     queryset = Group.objects.filter(
         project=project,
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
     )
-    rows_affected = queryset.update(status=STATUS_RESOLVED)
+    rows_affected = queryset.update(status=GroupStatus.RESOLVED)
     if rows_affected > 1000:
         logger.warning(
             'Large resolve on %s of %s rows', project.slug, rows_affected)
@@ -701,7 +701,7 @@ def get_group_trends(request, organization, team):
     cutoff_dt = timezone.now() - cutoff
 
     group_list = list(base_qs.filter(
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
         last_seen__gte=cutoff_dt
     ).extra(select={'sort_value': 'score'}).order_by('-score')[:limit])
 
@@ -732,7 +732,7 @@ def get_new_groups(request, organization, team):
 
     group_list = list(Group.objects.filter(
         project__in=project_dict.keys(),
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
         active_at__gte=cutoff_dt,
     ).extra(select={'sort_value': 'score'}).order_by('-score', '-first_seen')[:limit])
 
@@ -763,7 +763,7 @@ def get_resolved_groups(request, organization, team):
 
     group_list = list(Group.objects.filter(
         project__in=project_list,
-        status=STATUS_RESOLVED,
+        status=GroupStatus.RESOLVED,
         resolved_at__gte=cutoff_dt,
     ).order_by('-score')[:limit])
 
@@ -812,7 +812,7 @@ def get_stats(request, organization, team=None, project=None):
     # TODO(dcramer); move this into tsdb
     num_resolved = Group.objects.filter(
         project__in=project_list,
-        status=STATUS_RESOLVED,
+        status=GroupStatus.RESOLVED,
         resolved_at__gte=start,
     ).aggregate(t=Sum('times_seen'))['t'] or 0
 
diff --git a/src/sentry/web/frontend/alerts.py b/src/sentry/web/frontend/alerts.py
index cf4574fca0..7a6fcb4927 100644
--- a/src/sentry/web/frontend/alerts.py
+++ b/src/sentry/web/frontend/alerts.py
@@ -13,8 +13,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils import timezone
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import Alert
+from sentry.models import Alert, AlertStatus
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response
 
@@ -24,7 +23,7 @@ from sentry.web.helpers import render_to_response
 def alert_list(request, organization, team=None, project=None):
     alert_list = Alert.objects.filter(
         group__isnull=True,
-        status=STATUS_UNRESOLVED,
+        status=AlertStatus.UNRESOLVED,
         datetime__gte=timezone.now() - timedelta(days=3),
     ).order_by('-datetime')
 
@@ -74,6 +73,6 @@ def resolve_alert(request, organization, project, alert_id):
     except Alert.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry-alerts', args=[organization.slug, project.slug]))
 
-    alert.update(status=STATUS_RESOLVED)
+    alert.update(status=AlertStatus.RESOLVED)
 
     return HttpResponseRedirect(reverse('sentry-alert-details', args=[organization.slug, project.slug, alert.id]))
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
index c5520e9311..e303cf45ea 100644
--- a/src/sentry/web/frontend/remove_project.py
+++ b/src/sentry/web/frontend/remove_project.py
@@ -6,9 +6,8 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import STATUS_HIDDEN
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType
+    AuditLogEntry, AuditLogEntryEvent, ProjectStatus, OrganizationMemberType
 )
 from sentry.permissions import can_remove_project
 from sentry.tasks.deletion import delete_project
@@ -47,8 +46,8 @@ class RemoveProjectView(ProjectView):
         form = self.get_form(request)
 
         if form.is_valid():
-            if project.status != STATUS_HIDDEN:
-                project.update(status=STATUS_HIDDEN)
+            if project.status == ProjectStatus.VISIBLE:
+                project.update(status=ProjectStatus.PENDING_DELETION)
                 delete_project.delay(object_id=project.id)
 
                 AuditLogEntry.objects.create(
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 7e924589d6..2f8f763a28 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -34,7 +34,7 @@ class RemoveTeamView(TeamView):
         form = self.get_form(request)
 
         if form.is_valid():
-            if team.status != TeamStatus.PENDING_DELETION:
+            if team.status == TeamStatus.VISIBLE:
                 team.update(status=TeamStatus.PENDING_DELETION)
                 delete_team.delay(object_id=team.id, countdown=60 * 5)
 
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 645ceb35be..dffa4775e1 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -16,7 +16,7 @@ from django.template import loader, RequestContext, Context
 from django.utils.safestring import mark_safe
 
 from sentry import options
-from sentry.constants import EVENTS_PER_PAGE, STATUS_HIDDEN
+from sentry.constants import EVENTS_PER_PAGE
 from sentry.models import Project, Team, ProjectOption
 
 logger = logging.getLogger('sentry.errors')
@@ -73,7 +73,6 @@ def get_default_context(request, existing_context=None, team=None):
         'EVENTS_PER_PAGE': EVENTS_PER_PAGE,
         'URL_PREFIX': settings.SENTRY_URL_PREFIX,
         'PLUGINS': plugins,
-        'STATUS_HIDDEN': STATUS_HIDDEN,
         'ALLOWED_HOSTS': settings.ALLOWED_HOSTS,
     }
 
diff --git a/tests/sentry/api/endpoints/test_group_assign.py b/tests/sentry/api/endpoints/test_group_assign.py
deleted file mode 100644
index 7803be4b55..0000000000
--- a/tests/sentry/api/endpoints/test_group_assign.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from django.core.urlresolvers import reverse
-
-from sentry.models import Activity, GroupAssignee
-from sentry.testutils import APITestCase
-
-
-class GroupAssignTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-
-        url = reverse('sentry-api-0-group-assign', kwargs={
-            'group_id': group.id
-        })
-
-        response = self.client.post(url, format='json')
-
-        assert response.status_code == 400, response.content
-
-        response = self.client.post(url, data={'user': self.user.username}, format='json')
-
-        assert response.status_code == 200, response.content
-
-        assert GroupAssignee.objects.filter(
-            group=group, user=self.user
-        ).exists()
-
-        assert Activity.objects.filter(
-            group=group, user=self.user, type=Activity.ASSIGNED,
-        ).count() == 1
-
-        response = self.client.post(url, data={'user': self.user.username}, format='json')
-
-        assert response.status_code == 200, response.content
-
-        assert Activity.objects.filter(
-            group=group, user=self.user, type=Activity.ASSIGNED,
-        ).count() == 1
diff --git a/tests/sentry/api/endpoints/test_group_bookmark.py b/tests/sentry/api/endpoints/test_group_bookmark.py
deleted file mode 100644
index ecb714ba92..0000000000
--- a/tests/sentry/api/endpoints/test_group_bookmark.py
+++ /dev/null
@@ -1,22 +0,0 @@
-from django.core.urlresolvers import reverse
-
-from sentry.models import GroupBookmark
-from sentry.testutils import APITestCase
-
-
-class GroupBookmarkTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-
-        url = reverse('sentry-api-0-group-bookmark', kwargs={
-            'group_id': group.id
-        })
-        response = self.client.post(url, format='json')
-
-        assert response.status_code == 200, response.content
-
-        # ensure we've created the bookmark
-        assert GroupBookmark.objects.filter(
-            group=group, user=self.user).exists()
diff --git a/tests/sentry/api/endpoints/test_group_resolve.py b/tests/sentry/api/endpoints/test_group_resolve.py
deleted file mode 100644
index 54eb6b2c48..0000000000
--- a/tests/sentry/api/endpoints/test_group_resolve.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from django.core.urlresolvers import reverse
-from sentry.constants import STATUS_RESOLVED
-from sentry.models import Group
-from sentry.testutils import APITestCase
-
-
-class GroupResolveTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-
-        url = reverse('sentry-api-0-group-resolve', kwargs={
-            'group_id': group.id,
-        })
-        response = self.client.post(url, format='json')
-        assert response.status_code == 200, response.content
-
-        group = Group.objects.get(
-            id=group.id,
-            project=group.project.id,
-        )
-        assert group.status == STATUS_RESOLVED
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index a6c1113b94..c34e19ae00 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -4,8 +4,7 @@ import mock
 
 from django.core.urlresolvers import reverse
 
-from sentry.constants import STATUS_HIDDEN
-from sentry.models import Project
+from sentry.models import Project, ProjectStatus
 from sentry.testutils import APITestCase
 
 
@@ -51,7 +50,7 @@ class ProjectDeleteTest(APITestCase):
         mock_delete_project.delay.assert_called_once_with(
             object_id=project.id)
 
-        assert Project.objects.get(id=project.id).status == STATUS_HIDDEN
+        assert Project.objects.get(id=project.id).status == ProjectStatus.PENDING_DELETION
 
     @mock.patch('sentry.api.endpoints.project_details.delete_project')
     def test_internal_project(self, mock_delete_project):
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 4506dea5ff..2595ab9458 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -3,8 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.constants import STATUS_MUTED, STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import Group, GroupBookmark
+from sentry.models import Group, GroupBookmark, GroupStatus
 from sentry.testutils import APITestCase
 
 
@@ -22,12 +21,12 @@ class GroupListTest(APITestCase):
 
 class GroupUpdateTest(APITestCase):
     def test_global_status_update(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
@@ -38,28 +37,28 @@ class GroupUpdateTest(APITestCase):
         assert response.status_code == 204
 
         new_group1 = Group.objects.get(id=group1.id)
-        assert new_group1.status == STATUS_RESOLVED
+        assert new_group1.status == GroupStatus.RESOLVED
         assert new_group1.resolved_at is None
 
         new_group2 = Group.objects.get(id=group2.id)
-        assert new_group2.status == STATUS_RESOLVED
+        assert new_group2.status == GroupStatus.RESOLVED
         assert new_group2.resolved_at is not None
 
         new_group3 = Group.objects.get(id=group3.id)
-        assert new_group3.status == STATUS_RESOLVED
+        assert new_group3.status == GroupStatus.RESOLVED
         assert new_group3.resolved_at is not None
 
         new_group4 = Group.objects.get(id=group4.id)
-        assert new_group4.status == STATUS_UNRESOLVED
+        assert new_group4.status == GroupStatus.UNRESOLVED
         assert new_group4.resolved_at is None
 
     def test_selective_status_update(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
@@ -80,23 +79,23 @@ class GroupUpdateTest(APITestCase):
 
         new_group2 = Group.objects.get(id=group2.id)
         assert new_group2.resolved_at is not None
-        assert new_group2.status == STATUS_RESOLVED
+        assert new_group2.status == GroupStatus.RESOLVED
 
         new_group3 = Group.objects.get(id=group3.id)
         assert new_group3.resolved_at is None
-        assert new_group3.status == STATUS_MUTED
+        assert new_group3.status == GroupStatus.MUTED
 
         new_group4 = Group.objects.get(id=group4.id)
         assert new_group4.resolved_at is None
-        assert new_group4.status == STATUS_UNRESOLVED
+        assert new_group4.status == GroupStatus.UNRESOLVED
 
     def test_set_bookmarked(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
@@ -161,12 +160,12 @@ class GroupDeleteTest(APITestCase):
         assert response.status_code == 400
 
     def test_delete_by_id(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
@@ -177,7 +176,9 @@ class GroupDeleteTest(APITestCase):
             group2=group2,
             group4=group4,
         )
-        response = self.client.delete(url, format='json')
+
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            response = self.client.delete(url, format='json')
         assert response.status_code == 204
 
         new_group1 = Group.objects.filter(id=group1.id)
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index 6619473c9f..25d7b533ac 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -60,24 +60,11 @@ class TeamDeleteTest(APITestCase):
 
         assert team.status == TeamStatus.PENDING_DELETION
 
-        delete_team.apply_async.assert_called_once_with(
-            kwargs={"object_id": team.id},
+        delete_team.delay.assert_called_once_with(
+            object_id=team.id,
             countdown=60 * 5,
         )
 
-    def test_internal_project(self):
-        team = self.create_team()
-        project = self.create_project(team=team)
-
-        self.login_as(user=self.user)
-
-        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
-
-        with self.settings(SENTRY_PROJECT=project.id):
-            response = self.client.delete(url)
-
-        assert response.status_code == 403
-
     def test_as_member(self):
         team = self.create_team(owner=self.user)
         project = self.create_project(team=team)  # NOQA
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 26d2b649d7..5f6c0b2fdc 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -3,19 +3,19 @@ from __future__ import absolute_import
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED, STATUS_MUTED
+from sentry.models import GroupStatus
 from sentry.testutils import TestCase
 
 
 class GroupTest(TestCase):
     def test_is_resolved(self):
-        group = self.create_group(status=STATUS_RESOLVED)
+        group = self.create_group(status=GroupStatus.RESOLVED)
         assert group.is_resolved()
 
-        group.status = STATUS_MUTED
+        group.status = GroupStatus.MUTED
         assert not group.is_resolved()
 
-        group.status = STATUS_UNRESOLVED
+        group.status = GroupStatus.UNRESOLVED
         assert not group.is_resolved()
 
         group.last_seen = timezone.now() - timedelta(hours=12)
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 42cd72070b..6a173b1b64 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -4,8 +4,7 @@ from __future__ import absolute_import
 
 from datetime import datetime, timedelta
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import GroupBookmark, GroupTagValue
+from sentry.models import GroupBookmark, GroupStatus, GroupTagValue
 from sentry.search.django.backend import DjangoSearchBackend
 from sentry.testutils import TestCase
 
@@ -25,7 +24,7 @@ class DjangoSearchBackendTest(TestCase):
             checksum='a' * 32,
             message='foo',
             times_seen=5,
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             last_seen=datetime(2013, 8, 13, 3, 8, 24, 880386),
             first_seen=datetime(2013, 7, 13, 3, 8, 24, 880386),
         )
@@ -43,7 +42,7 @@ class DjangoSearchBackendTest(TestCase):
             checksum='b' * 32,
             message='bar',
             times_seen=10,
-            status=STATUS_RESOLVED,
+            status=GroupStatus.RESOLVED,
             last_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
             first_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
         )
@@ -109,11 +108,11 @@ class DjangoSearchBackendTest(TestCase):
         assert results[1] == self.group1
 
     def test_status(self):
-        results = self.backend.query(self.project1, status=STATUS_UNRESOLVED)
+        results = self.backend.query(self.project1, status=GroupStatus.UNRESOLVED)
         assert len(results) == 1
         assert results[0] == self.group1
 
-        results = self.backend.query(self.project1, status=STATUS_RESOLVED)
+        results = self.backend.query(self.project1, status=GroupStatus.RESOLVED)
         assert len(results) == 1
         assert results[0] == self.group2
 
diff --git a/tests/sentry/search/elastic_search/test_backend.py b/tests/sentry/search/elastic_search/test_backend.py
index 5376b24f76..2f300aa382 100644
--- a/tests/sentry/search/elastic_search/test_backend.py
+++ b/tests/sentry/search/elastic_search/test_backend.py
@@ -6,8 +6,7 @@ import pytest
 
 from datetime import datetime, timedelta
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import GroupBookmark, GroupTagValue
+from sentry.models import GroupBookmark, GroupStatus, GroupTagValue
 from sentry.search.elastic_search.backend import ElasticSearchBackend
 from sentry.testutils import TestCase
 from sentry.testutils.skips import requires_elastic_search
@@ -40,7 +39,7 @@ class ElasticSearchTest(TestCase):
             checksum='a' * 32,
             message='foo',
             times_seen=5,
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             last_seen=datetime(2013, 8, 13, 3, 8, 24, 880386),
             first_seen=datetime(2013, 7, 13, 3, 8, 24, 880386),
         )
@@ -58,7 +57,7 @@ class ElasticSearchTest(TestCase):
             checksum='b' * 32,
             message='bar',
             times_seen=10,
-            status=STATUS_RESOLVED,
+            status=GroupStatus.RESOLVED,
             last_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
             first_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
         )
@@ -126,11 +125,11 @@ class ElasticSearchTest(TestCase):
         assert results[1] == self.group1
 
     def test_status(self):
-        results = self.backend.query(self.project1, status=STATUS_UNRESOLVED)
+        results = self.backend.query(self.project1, status=GroupStatus.UNRESOLVED)
         assert len(results) == 1
         assert results[0] == self.group1
 
-        results = self.backend.query(self.project1, status=STATUS_RESOLVED)
+        results = self.backend.query(self.project1, status=GroupStatus.RESOLVED)
         assert len(results) == 1
         assert results[0] == self.group2
 
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index d435bb86a2..611d97ad91 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.constants import STATUS_RESOLVED
+from sentry.models import GroupStatus
 from sentry.testutils import TestCase
 from sentry.search.utils import parse_query
 
@@ -36,7 +36,7 @@ class ParseQueryTest(TestCase):
 
     def test_is_resolved(self):
         result = parse_query('is:resolved', self.user)
-        assert result == {'status': STATUS_RESOLVED, 'tags': {}, 'query': ''}
+        assert result == {'status': GroupStatus.RESOLVED, 'tags': {}, 'query': ''}
 
     def test_assigned_me(self):
         result = parse_query('assigned:me', self.user)
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index e8b8d6109d..c43ee3fe70 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -8,9 +8,9 @@ from mock import patch
 
 from django.conf import settings
 
-from sentry.constants import MAX_CULPRIT_LENGTH, STATUS_RESOLVED
+from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.event_manager import EventManager, get_hashes_for_event
-from sentry.models import Event, Group, EventMapping
+from sentry.models import Event, Group, GroupStatus, EventMapping
 from sentry.testutils import TestCase
 
 
@@ -115,7 +115,7 @@ class EventManagerTest(TestCase):
             event = manager.save(1)
 
         group = Group.objects.get(id=event.group_id)
-        group.status = STATUS_RESOLVED
+        group.status = GroupStatus.RESOLVED
         group.save()
         assert group.is_resolved()
 
@@ -143,7 +143,7 @@ class EventManagerTest(TestCase):
             event = manager.save(1)
 
         group = Group.objects.get(id=event.group_id)
-        group.status = STATUS_RESOLVED
+        group.status = GroupStatus.RESOLVED
         group.save()
         assert group.is_resolved()
 
diff --git a/tests/sentry/web/frontend/test_remove_project.py b/tests/sentry/web/frontend/test_remove_project.py
index 756da67b4e..cabfeb63d6 100644
--- a/tests/sentry/web/frontend/test_remove_project.py
+++ b/tests/sentry/web/frontend/test_remove_project.py
@@ -4,8 +4,7 @@ import mock
 
 from django.core.urlresolvers import reverse
 
-from sentry.constants import STATUS_HIDDEN
-from sentry.models import Project
+from sentry.models import Project, ProjectStatus
 from sentry.testutils import TestCase, PermissionTestCase
 
 
@@ -60,4 +59,4 @@ class RemoveProjectTest(TestCase):
         assert resp.status_code == 302
         delete_project.delay.assert_called_once_with(
             object_id=self.project.id)
-        assert Project.objects.get(id=self.project.id).status == STATUS_HIDDEN
+        assert Project.objects.get(id=self.project.id).status == ProjectStatus.PENDING_DELETION
