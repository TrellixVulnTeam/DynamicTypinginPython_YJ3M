commit 9cc9c10092b0798e7e848450e0d0b58fd974f0d7
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Feb 19 17:30:42 2016 -0800

    Implement shared Redis clusters.
    
    This replaces `SENTRY_REDIS_OPTIONS` and per-backend configuration with
    named Redis clusters, configured from the value of the `redis.clusters`
    key in `sentry.options`. The preferred method of configuring Redis-based
    backends is by providing a *cluster name*, rather than the cluster
    configuration parameters.
    
    This deprecates:
    
    - `SENTRY_REDIS_OPTIONS` in favor of the `redis.clusters` option.
    - Passing `hosts` to any backend in favor of `cluster`.
    - `sentry.utils.make_rb_cluster` in favor of retrieving clusters defined
      in configuration via the clsuter manager.
    
    This also updates all tests to retrieve Redis clusters via the cluster
    manager, instead of via cluster configuration or direct construction via
    `rb.Cluster` or `StrictRedis`. This also consolidates all test cluster
    setup and teardown to the test wrapper methods.
    
    Resolves GH-2530 and references GH-2693.

diff --git a/api-docs/sentry.conf.py b/api-docs/sentry.conf.py
index 00df2ab814..fba0460861 100644
--- a/api-docs/sentry.conf.py
+++ b/api-docs/sentry.conf.py
@@ -5,21 +5,8 @@ import os
 import getpass
 
 
-# for this api docs only.  We
 SENTRY_APIDOCS_REDIS_PORT = 12355
 SENTRY_APIDOCS_WEB_PORT = 12356
-SENTRY_APIDOCS_REDIS_CONF = {
-    'host': '127.0.0.1',
-    'port': SENTRY_APIDOCS_REDIS_PORT,
-}
-SENTRY_APIDOCS_REDIS_OPTIONS = {
-    'hosts': {
-        0: SENTRY_APIDOCS_REDIS_CONF,
-        1: SENTRY_APIDOCS_REDIS_CONF,
-        2: SENTRY_APIDOCS_REDIS_CONF,
-        3: SENTRY_APIDOCS_REDIS_CONF,
-    }
-}
 
 SENTRY_URL_PREFIX = 'https://app.getsentry.com/'
 
@@ -38,12 +25,6 @@ DATABASES = {
 }
 SENTRY_USE_BIG_INTS = True
 
-SENTRY_BUFFER_OPTIONS = SENTRY_APIDOCS_REDIS_OPTIONS
-SENTRY_CACHE_OPTIONS = SENTRY_APIDOCS_REDIS_OPTIONS
-SENTRY_QUOTA_OPTIONS = SENTRY_APIDOCS_REDIS_OPTIONS
-SENTRY_RATELIMITER_OPTIONS = SENTRY_APIDOCS_REDIS_OPTIONS
-SENTRY_TSDB_OPTIONS = SENTRY_APIDOCS_REDIS_OPTIONS
-
 SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
 
 CELERY_ALWAYS_EAGER = True
@@ -80,5 +61,12 @@ SERVER_EMAIL = 'sentry@getsentry.com'
 
 SECRET_KEY = 'super secret secret key'
 
-SENTRY_OPTIONS['system.admin-email'] = 'admin@getsentry.com'
-SENTRY_OPTIONS['system.url-prefix'] = SENTRY_URL_PREFIX
+SENTRY_OPTIONS.update({
+    'redis.clusters': {
+        'default': {
+            'hosts': {i: {'port': SENTRY_APIDOCS_REDIS_PORT} for i in xrange(0, 4)},
+        },
+    },
+    'system.admin-email': 'admin@getsentry.com',
+    'system.url-prefix': SENTRY_URL_PREFIX,
+})
diff --git a/docs/buffer.rst b/docs/buffer.rst
index 2318d15662..dab7524591 100644
--- a/docs/buffer.rst
+++ b/docs/buffer.rst
@@ -20,8 +20,6 @@ To specify a backend, simply modify the ``SENTRY_BUFFER`` and
 .. code-block:: python
 
     SENTRY_BUFFER = 'sentry.buffer.base.Buffer'
-    SENTRY_BUFFER_OPTIONS = {}
-
 
 Redis
 `````
@@ -29,36 +27,17 @@ Redis
 Configuring the Redis backend **requires the queue** or you won't see any
 gains (in fact you'll just negatively impact your performance).
 
-Configuration is fairly straight forward:
+Configuration is straight forward:
 
 .. code-block:: python
 
     SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
-    SENTRY_BUFFER_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': 'localhost',
-                'port': 6379
-            }
-        }
-    }
 
-You also have the ability to specify multiple nodes and have keys automatically
-distributed. It's unlikely that you'll need this functionality, but if you do, a simple
-configuration might look like this:
+By default, this will use the ``default`` named Redis cluster. To use a
+different cluster, provide the ``cluster`` option, as such:
 
 .. code-block:: python
 
     SENTRY_BUFFER_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': '192.168.1.1'
-            },
-            1: {
-                'host': '192.168.1.2'
-            }
-        },
+        'cluster': 'buffer',
     }
-
-With the default configuration this will distribute keys using a simple
-partition router (relatively even distribution).
diff --git a/docs/installation.rst b/docs/installation.rst
index e3428dfec5..f3d27c0b1f 100644
--- a/docs/installation.rst
+++ b/docs/installation.rst
@@ -211,22 +211,25 @@ you can configure the nodes in very different ones to enable more
 aggressive/optimized LRU.
 
 That said, if you're running a small install you can probably get away
-with just setting up the defaults::
-
-    SENTRY_REDIS_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': '127.0.0.1',
-                'port': 6379,
-                'timeout': 3,
-                #'password': 'redis auth password'
-            }
-        }
-    }
+with just setting up the defaults in ``config.yml``::
+
+    redis.clusters:
+      default:
+        hosts:
+          0:
+            host: 127.0.0.1
+            port: 6379
+            # password: "my-secret-password"
 
 All built-in Redis implementations (other than the queue) will use these
 default settings, but each individual service also will allow you to
-override it's cluster settings.
+override it's cluster settings by passing the name of the cluster to use as the
+``cluster`` option.
+
+Cluster options are passed directly to rb (a Redis routing library) as keyword
+arguments to the ``Cluster`` constructor. A more thorough discussion of the
+availabile configuration parameters can be found at the `rb GitHub repository
+<https://github.com/getsentry/rb>`_.
 
 See the individual documentation for :doc:`the queue <queue/>`,
 :doc:`update buffers <buffer>`, :doc:`quotas <throttling>`, and
diff --git a/docs/throttling.rst b/docs/throttling.rst
index 30e7bc742d..78f13d1dcc 100644
--- a/docs/throttling.rst
+++ b/docs/throttling.rst
@@ -23,33 +23,16 @@ the connection information:
 .. code-block:: python
 
     SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'
-    SENTRY_QUOTA_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': 'localhost',
-                'port': 6379
-            }
-        }
-    }
 
-You also have the ability to specify multiple nodes and have keys automatically
-distributed. It's unlikely that you'll need this functionality, but if you do, a simple
-configuration might look like this:
+By default, this will use the ``default`` named Redis cluster. To use a
+different cluster, provide the ``cluster`` option, as such:
 
 .. code-block:: python
 
     SENTRY_QUOTA_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': '192.168.1.1'
-            },
-            1: {
-                'host': '192.168.1.2'
-            }
-        },
+        'cluster': 'quota',
     }
 
-
 You can also configure the system-wide maximum per-minute rate limit:
 
 .. code-block:: python
@@ -71,17 +54,17 @@ Configuration
 
 Like event quotas, the primary implementation uses Redis:
 
-
 .. code-block:: python
 
     SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'
+
+By default, this will use the ``default`` named Redis cluster. To use a
+different cluster, provide the ``cluster`` option, as such:
+
+.. code-block:: python
+
     SENTRY_RATELIMITER_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': 'localhost',
-                'port': 6379
-            }
-        }
+        'cluster': 'ratelimiter',
     }
 
 
diff --git a/docs/tsdb.rst b/docs/tsdb.rst
index 684158a14c..62e60cb9d6 100644
--- a/docs/tsdb.rst
+++ b/docs/tsdb.rst
@@ -14,7 +14,6 @@ To specify a backend, simply modify the ``SENTRY_TSDB`` and
 .. code-block:: python
 
     SENTRY_TSDB = 'sentry.tsdb.dummy.DummyTSDB'
-    SENTRY_TSDB_OPTIONS = {}
 
 
 The Redis Backend
@@ -25,32 +24,13 @@ Configuration is fairly straight forward:
 .. code-block:: python
 
     SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
-    SENTRY_TSDB_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': 'localhost',
-                'port': 6379
-            }
-        }
-    }
 
-Because the Redis buffer relies on the Nydus package, this gives you the
-ability to specify multiple nodes and have keys automatically distributed.
-It's unlikely that you'll need this functionality, but if you do, a simple
-configuration might look like this:
+By default, this will use the ``default`` named Redis cluster. To use a
+different cluster, provide the ``cluster`` option, as such:
 
 .. code-block:: python
 
     SENTRY_TSDB_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': '192.168.1.1'
-            }
-            1: {
-                'host': '192.168.1.2'
-            }
-        },
+        'cluster': 'tsdb',
     }
 
-With the default configuration this will distribute keys using a simple
-partition router (relatively even distribution).
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 7ad9424b44..7f18c72cfb 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -7,10 +7,10 @@ sentry.buffer.redis
 """
 from __future__ import absolute_import
 
-from django.conf import settings
+from time import time
+
 from django.db import models
 from django.utils.encoding import force_bytes
-from time import time
 
 from sentry.buffer import Buffer
 from sentry.exceptions import InvalidConfiguration
@@ -19,7 +19,7 @@ from sentry.utils import metrics
 from sentry.utils.compat import pickle
 from sentry.utils.hashlib import md5
 from sentry.utils.imports import import_string
-from sentry.utils.redis import make_rb_cluster
+from sentry.utils.redis import get_cluster_from_options
 
 
 class RedisBuffer(Buffer):
@@ -27,14 +27,7 @@ class RedisBuffer(Buffer):
     pending_key = 'b:p'
 
     def __init__(self, **options):
-        if not options:
-            # inherit default options from REDIS_OPTIONS
-            options = settings.SENTRY_REDIS_OPTIONS
-
-        options.setdefault('hosts', {
-            0: {},
-        })
-        self.cluster = make_rb_cluster(options['hosts'])
+        self.cluster, options = get_cluster_from_options(self, options)
 
     def validate(self):
         try:
diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
index 4e28c554b1..48735bff04 100644
--- a/src/sentry/cache/redis.py
+++ b/src/sentry/cache/redis.py
@@ -8,10 +8,8 @@ sentry.cache.redis
 
 from __future__ import absolute_import
 
-from django.conf import settings
-
 from sentry.utils import json
-from sentry.utils.redis import make_rb_cluster
+from sentry.utils.redis import get_cluster_from_options
 
 from .base import BaseCache
 
@@ -19,18 +17,11 @@ from .base import BaseCache
 class RedisCache(BaseCache):
     key_expire = 60 * 60  # 1 hour
 
-    def __init__(self, version=None, prefix=None, **options):
-        if not options:
-            # inherit default options from REDIS_OPTIONS
-            options = settings.SENTRY_REDIS_OPTIONS
-
-        options.setdefault('hosts', {
-            0: {},
-        })
-        self.cluster = make_rb_cluster(options['hosts'])
+    def __init__(self, **options):
+        self.cluster, options = get_cluster_from_options(self, options)
         self.client = self.cluster.get_routing_client()
 
-        super(RedisCache, self).__init__(version=version, prefix=prefix)
+        super(RedisCache, self).__init__(**options)
 
     def set(self, key, value, timeout, version=None):
         key = self.make_key(key, version=version)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1fadbfab4b..37e09108e2 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -703,9 +703,6 @@ SENTRY_ALLOW_ORIGIN = None
 # Enable scraping of javascript context for source code
 SENTRY_SCRAPE_JAVASCRIPT_CONTEXT = True
 
-# Redis connection information (see Nydus documentation)
-SENTRY_REDIS_OPTIONS = {}
-
 # Buffer backend
 SENTRY_BUFFER = 'sentry.buffer.Buffer'
 SENTRY_BUFFER_OPTIONS = {}
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 6ab93ef719..7d8a934809 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -6,29 +6,16 @@ import random
 import time
 from contextlib import contextmanager
 
-from django.conf import settings
-from redis.exceptions import (
-    ResponseError,
-    WatchError,
-)
+from redis.exceptions import ResponseError, WatchError
 
-from sentry.digests import (
-    Record,
-    ScheduleEntry,
-)
-from sentry.digests.backends.base import (
-    Backend,
-    InvalidState,
-)
+from sentry.digests import Record, ScheduleEntry
+from sentry.digests.backends.base import Backend, InvalidState
 from sentry.utils.cache import Lock
 from sentry.utils.redis import (
-    check_cluster_versions,
-    load_script,
-    make_rb_cluster as _make_rb_cluster,
+    check_cluster_versions, get_cluster_from_options, load_script
 )
 from sentry.utils.versioning import Version
 
-
 logger = logging.getLogger('sentry.digests')
 
 SCHEDULE_PATH_COMPONENT = 's'
@@ -41,12 +28,6 @@ TIMELINE_PATH_COMPONENT = 't'
 TIMELINE_RECORD_PATH_COMPONENT = 'r'
 
 
-def make_rb_cluster(hosts, **kwargs):
-    if kwargs:
-        logger.warning('Discarding unused Redis cluster options: %r', kwargs.keys())
-    return _make_rb_cluster(hosts)
-
-
 def ilen(iterator):
     i = 0
     for i, _ in enumerate(iterator):
@@ -128,13 +109,7 @@ class RedisBackend(Backend):
 
     """
     def __init__(self, **options):
-        super(RedisBackend, self).__init__(**options)
-
-        hosts = options.pop('hosts', None)
-        if hosts is None:
-            self.cluster = make_rb_cluster(**settings.SENTRY_REDIS_OPTIONS)
-        else:
-            self.cluster = make_rb_cluster(hosts)
+        self.cluster, options = get_cluster_from_options(self, options)
 
         self.namespace = options.pop('namespace', 'd')
 
@@ -147,6 +122,8 @@ class RedisBackend(Backend):
         # too early.
         self.ttl = options.pop('ttl', 60 * 60)
 
+        super(RedisBackend, self).__init__(**options)
+
     def validate(self):
         logger.debug('Validating Redis version...')
         check_cluster_versions(
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 82e38b9a52..340b2b35b8 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -7,8 +7,6 @@ sentry.options
 """
 from __future__ import absolute_import, print_function
 
-from sentry.cache import default_cache
-
 from .store import OptionsStore
 from .manager import OptionsManager
 from .manager import (  # NOQA
@@ -20,7 +18,8 @@ __all__ = (
     'get', 'set', 'delete', 'register', 'UnknownOption',
 )
 
-default_store = OptionsStore(cache=default_cache)
+# See notes in ``runner.initializer`` regarding lazy cache configuration.
+default_store = OptionsStore(cache=None)
 default_store.connect_signals()
 
 default_manager = OptionsManager(store=default_store)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 3ea544f83d..e000b47fb4 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -7,11 +7,11 @@ sentry.options.defaults
 """
 from __future__ import absolute_import, print_function
 
-
-from sentry.options import register, FLAG_NOSTORE, FLAG_REQUIRED, FLAG_PRIORITIZE_DISK
+from sentry.options import (
+    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_PRIORITIZE_DISK, FLAG_REQUIRED, register
+)
 from sentry.utils.types import Dict
 
-
 register('cache.backend', flags=FLAG_NOSTORE)
 register('cache.options', type=Dict, flags=FLAG_NOSTORE)
 register('system.admin-email', flags=FLAG_REQUIRED)
@@ -19,7 +19,21 @@ register('system.databases', type=Dict, flags=FLAG_NOSTORE)
 register('system.debug', default=False, flags=FLAG_NOSTORE)
 register('system.rate-limit', default=0, flags=FLAG_PRIORITIZE_DISK)
 register('system.secret-key', flags=FLAG_NOSTORE)
-register('redis.options', type=Dict, flags=FLAG_NOSTORE)
+register(
+    'redis.clusters',
+    type=Dict,
+    default={
+        'default': {
+            'hosts': {
+                0: {
+                    'host': '127.0.0.1',
+                    'port': 6379,
+                }
+            },
+        },
+    },
+    flags=FLAG_NOSTORE | FLAG_IMMUTABLE
+)
 
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
 register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index b38e1327ca..32fd831a94 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -7,16 +7,11 @@ sentry.quotas.redis
 """
 from __future__ import absolute_import
 
-from django.conf import settings
 from time import time
 
 from sentry.exceptions import InvalidConfiguration
-from sentry.quotas.base import Quota, RateLimited, NotRateLimited
-from sentry.utils.redis import (
-    load_script,
-    make_rb_cluster,
-)
-
+from sentry.quotas.base import NotRateLimited, Quota, RateLimited
+from sentry.utils.redis import get_cluster_from_options, load_script
 
 is_rate_limited = load_script('quotas/is_rate_limited.lua')
 
@@ -28,12 +23,8 @@ class RedisQuota(Quota):
     grace = 60
 
     def __init__(self, **options):
-        if not options:
-            # inherit default options from REDIS_OPTIONS
-            options = settings.SENTRY_REDIS_OPTIONS
+        self.cluster, options = get_cluster_from_options(self, options)
         super(RedisQuota, self).__init__(**options)
-        options.setdefault('hosts', {0: {}})
-        self.cluster = make_rb_cluster(options['hosts'])
         self.namespace = 'quota'
 
     def validate(self):
diff --git a/src/sentry/ratelimits/redis.py b/src/sentry/ratelimits/redis.py
index 292da3264a..aa803a8cb6 100644
--- a/src/sentry/ratelimits/redis.py
+++ b/src/sentry/ratelimits/redis.py
@@ -1,23 +1,17 @@
 from __future__ import absolute_import
 
-from django.conf import settings
 from time import time
 
 from sentry.exceptions import InvalidConfiguration
 from sentry.ratelimits.base import RateLimiter
-from sentry.utils.redis import make_rb_cluster
+from sentry.utils.redis import get_cluster_from_options
 
 
 class RedisRateLimiter(RateLimiter):
     ttl = 60
 
     def __init__(self, **options):
-        if not options:
-            # inherit default options from REDIS_OPTIONS
-            options = settings.SENTRY_REDIS_OPTIONS
-        options.setdefault('hosts', {0: {}})
-
-        self.cluster = make_rb_cluster(options['hosts'])
+        self.cluster, options = get_cluster_from_options(self, options)
 
     def validate(self):
         try:
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index dddd526f13..2d7ecd5cbf 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -8,6 +8,7 @@ sentry.runner.initializer
 from __future__ import absolute_import, print_function
 
 import os
+
 import click
 
 
@@ -67,7 +68,6 @@ options_mapper = {
     'system.databases': 'DATABASES',
     'system.debug': 'DEBUG',
     'system.secret-key': 'SECRET_KEY',
-    'redis.options': 'SENTRY_REDIS_OPTIONS',
 }
 
 
@@ -120,6 +120,8 @@ def initialize_app(config, skip_backend_validation=False):
 
     apply_legacy_settings(settings)
 
+    bind_cache_to_option_store()
+
     install_plugin_apps(settings)
 
     # Commonly setups don't correctly configure themselves for production envs
@@ -196,6 +198,20 @@ def fix_south(settings):
         settings.SOUTH_DATABASE_ADAPTERS[key] = 'south.db.postgresql_psycopg2'
 
 
+def bind_cache_to_option_store():
+    # The default ``OptionsStore`` instance is initialized without the cache
+    # backend attached. The store itself utilizes the cache during normal
+    # operation, but can't use the cache before the options (which typically
+    # includes the cache configuration) have been bootstrapped from the legacy
+    # settings and/or configuration values. Those options should have been
+    # loaded at this point, so we can plug in the cache backend before
+    # continuing to initialize the remainder of the application.
+    from sentry.cache import default_cache
+    from sentry.options import default_store
+
+    default_store.cache = default_cache
+
+
 def show_big_error(message):
     click.echo('', err=True)
     click.secho('!! %s !!' % ('!' * min(len(message), 80),), err=True, fg='red')
@@ -230,6 +246,24 @@ def apply_legacy_settings(settings):
                       "Use SENTRY_OPTIONS instead, key 'system.rate-limit'", DeprecationWarning)
         settings.SENTRY_OPTIONS['system.rate-limit'] = settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE
 
+    if hasattr(settings, 'SENTRY_REDIS_OPTIONS'):
+        if 'redis.clusters' in settings.SENTRY_OPTIONS:
+            raise Exception("Cannot specify both SENTRY_OPTIONS['redis.clusters'] option and SENTRY_REDIS_OPTIONS setting.")
+        else:
+            import warnings
+            warnings.warn("SENTRY_REDIS_OPTIONS is deprecated. Use SENTRY_OPTIONS instead, key 'redis.clusters'", DeprecationWarning)
+            settings.SENTRY_OPTIONS['redis.clusters'] = {
+                'default': settings.SENTRY_REDIS_OPTIONS,
+            }
+    else:
+        # Provide backwards compatibility to plugins expecting there to be a
+        # ``SENTRY_REDIS_OPTIONS`` setting by using the ``default`` cluster.
+        # This should be removed when ``SENTRY_REDIS_OPTIONS`` is officially
+        # deprecated. (This also assumes ``FLAG_NOSTORE`` on the configuration
+        # option.)
+        from sentry import options
+        settings.SENTRY_REDIS_OPTIONS = options.get('redis.clusters')['default']
+
     if not hasattr(settings, 'SENTRY_URL_PREFIX'):
         from sentry import options
         url_prefix = options.get('system.url-prefix', silent=True)
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index fd58bf9a7d..18139aa4e3 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -49,22 +49,6 @@ SENTRY_USE_BIG_INTS = True
 # and thus various UI optimizations should be enabled.
 SENTRY_SINGLE_ORGANIZATION = True
 
-#########
-# Redis #
-#########
-
-# Generic Redis configuration used as defaults for various things including:
-# Buffers, Quotas, TSDB
-
-SENTRY_REDIS_OPTIONS = {
-    'hosts': {
-        0: {
-            'host': '127.0.0.1',
-            'port': 6379,
-        }
-    }
-}
-
 #########
 # Cache #
 #########
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 68079beea7..5724fc6b19 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -15,14 +15,13 @@ from datetime import timedelta
 from hashlib import md5
 
 import six
-from django.conf import settings
 from django.utils import timezone
 from pkg_resources import resource_string
 from redis.client import Script
 
 from sentry.tsdb.base import BaseTSDB
 from sentry.utils.dates import to_timestamp
-from sentry.utils.redis import check_cluster_versions, make_rb_cluster
+from sentry.utils.redis import check_cluster_versions, get_cluster_from_options
 from sentry.utils.versioning import Version
 
 logger = logging.getLogger(__name__)
@@ -93,17 +92,11 @@ class RedisTSDB(BaseTSDB):
     """
     DEFAULT_SKETCH_PARAMETERS = SketchParameters(3, 128, 50)
 
-    def __init__(self, hosts=None, prefix='ts:', vnodes=64, **kwargs):
-        # inherit default options from REDIS_OPTIONS
-        defaults = settings.SENTRY_REDIS_OPTIONS
-
-        if hosts is None:
-            hosts = defaults.get('hosts', {0: {}})
-
-        self.cluster = make_rb_cluster(hosts)
+    def __init__(self, prefix='ts:', vnodes=64, **options):
+        self.cluster, options = get_cluster_from_options(self, options)
         self.prefix = prefix
         self.vnodes = vnodes
-        super(RedisTSDB, self).__init__(**kwargs)
+        super(RedisTSDB, self).__init__(**options)
 
     def validate(self):
         logger.debug('Validating Redis version...')
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 86c4655f72..03e9eaddb6 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -4,7 +4,6 @@ import mock
 import os
 
 from django.conf import settings
-from redis import StrictRedis
 
 
 def pytest_configure(config):
@@ -70,9 +69,6 @@ def pytest_configure(config):
     # enable draft features
     settings.SENTRY_ENABLE_EMAIL_REPLIES = True
 
-    # disable error reporting by default
-    settings.SENTRY_REDIS_OPTIONS = {'hosts': {0: {'db': 9}}}
-
     settings.SENTRY_ALLOW_ORIGIN = '*'
 
     settings.SENTRY_TSDB = 'sentry.tsdb.inmemory.InMemoryTSDB'
@@ -96,19 +92,37 @@ def pytest_configure(config):
 
     settings.SOUTH_TESTS_MIGRATE = bool(os.environ.get('USE_SOUTH'))
 
+    if not hasattr(settings, 'SENTRY_OPTIONS'):
+        settings.SENTRY_OPTIONS = {}
+
+    settings.SENTRY_OPTIONS['redis.clusters'] = {
+        'default': {
+            'hosts': {
+                0: {
+                    'db': 9,
+                },
+            },
+        }
+    }
+
     # django mail uses socket.getfqdn which doesn't play nice if our
     # networking isn't stable
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
     patcher.start()
 
-    client = StrictRedis(db=9)
-    client.flushdb()
+    from sentry.runner.initializer import initialize_receivers, fix_south, bind_cache_to_option_store
 
-    from sentry.runner.initializer import initialize_receivers, fix_south
     fix_south(settings)
 
+    bind_cache_to_option_store()
+
     initialize_receivers()
 
+    from sentry.utils.redis import clusters
+
+    with clusters.get('default').all() as client:
+        client.flushdb()
+
     # force celery registration
     from sentry.celery import app  # NOQA
 
@@ -117,8 +131,10 @@ def pytest_runtest_teardown(item):
     from sentry.app import tsdb
     tsdb.flush()
 
-    client = StrictRedis(db=9)
-    client.flushdb()
+    from sentry.utils.redis import clusters
+
+    with clusters.get('default').all() as client:
+        client.flushdb()
 
     from celery.task.control import discard_all
     discard_all()
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index d5f12a3914..6337ca5a16 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -1,19 +1,18 @@
 from __future__ import absolute_import
 
+import functools
 import posixpath
-from pkg_resources import resource_string
+import warnings
 from threading import Lock
 
 import rb
-from redis.connection import ConnectionPool
+from pkg_resources import resource_string
 from redis.client import Script
+from redis.connection import ConnectionPool
 
+from sentry import options
 from sentry.exceptions import InvalidConfiguration
-from sentry.utils.versioning import (
-    Version,
-    check_versions,
-)
-
+from sentry.utils.versioning import Version, check_versions
 
 _pool_cache = {}
 _pool_lock = Lock()
@@ -43,11 +42,72 @@ def _shared_pool(**opts):
         return pool
 
 
-def make_rb_cluster(hosts):
-    """Returns a rb cluster that internally shares the pools more
-    intelligetly.
-    """
-    return rb.Cluster(hosts, pool_cls=_shared_pool)
+_make_rb_cluster = functools.partial(rb.Cluster, pool_cls=_shared_pool)
+
+
+def make_rb_cluster(*args, **kwargs):
+    warnings.warn(
+        'Direct Redis cluster construction is deprecated, please use named clusters.',
+        DeprecationWarning,
+    )
+    return _make_rb_cluster(*args, **kwargs)
+
+
+class ClusterManager(object):
+    def __init__(self, options_manager):
+        self.__clusters = {}
+        self.__options_manager = options_manager
+
+    def get(self, key):
+        cluster = self.__clusters.get(key)
+
+        if cluster is None:
+            # TODO: This would probably be safer with a lock, but I'm not sure
+            # that it's necessary.
+            configuration = self.__options_manager.get('redis.clusters').get(key)
+            if configuration is None:
+                raise KeyError('Invalid cluster name: {}'.format(key))
+
+            cluster = self.__clusters[key] = _make_rb_cluster(**configuration)
+
+        return cluster
+
+
+clusters = ClusterManager(options.default_manager)
+
+
+def get_cluster_from_options(backend, options, cluster_manager=clusters):
+    cluster_option_name = 'cluster'
+    default_cluster_name = 'default'
+    cluster_constructor_option_names = frozenset(('hosts',))
+
+    options = options.copy()
+    cluster_options = {key: options.pop(key) for key in set(options.keys()).intersection(cluster_constructor_option_names)}
+    if cluster_options:
+        if cluster_option_name in options:
+            raise InvalidConfiguration(
+                'Cannot provide both named cluster ({!r}) and cluster configuration ({}) options.'.format(
+                    cluster_option_name,
+                    ', '.join(map(repr, cluster_constructor_option_names)),
+                )
+            )
+        else:
+            warnings.warn(
+                'Providing Redis cluster configuration options ({}) to {!r} is '
+                'deprecated, please update your configuration to use named Redis '
+                'clusters ({!r}).'.format(
+                    ', '.join(map(repr, cluster_constructor_option_names)),
+                    backend,
+                    cluster_option_name,
+                ),
+                DeprecationWarning,
+                stacklevel=2
+            )
+        cluster = rb.Cluster(pool_cls=_shared_pool, **cluster_options)
+    else:
+        cluster = cluster_manager.get(options.pop(cluster_option_name, default_cluster_name))
+
+    return cluster, options
 
 
 def check_cluster_versions(cluster, required, recommended=Version((3, 0, 4)), label=None):
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 6b15e06020..46f47f55a6 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -11,14 +11,7 @@ from sentry.testutils import TestCase
 
 class RedisBufferTest(TestCase):
     def setUp(self):
-        self.buf = RedisBuffer(hosts={
-            0: {'db': 9}
-        })
-
-    def test_default_host_is_local(self):
-        buf = RedisBuffer()
-        self.assertEquals(len(buf.cluster.hosts), 1)
-        self.assertEquals(buf.cluster.hosts[0].host, 'localhost')
+        self.buf = RedisBuffer()
 
     def test_coerce_val_handles_foreignkeys(self):
         assert self.buf._coerce_val(Project(id=1)) == '1'
diff --git a/tests/sentry/cache/test_redis.py b/tests/sentry/cache/test_redis.py
index bc8a6a564b..bae8d6a3cd 100644
--- a/tests/sentry/cache/test_redis.py
+++ b/tests/sentry/cache/test_redis.py
@@ -8,9 +8,7 @@ from sentry.testutils import TestCase
 
 class RedisCacheTest(TestCase):
     def setUp(self):
-        self.backend = RedisCache(hosts={
-            0: {'db': 9}
-        })
+        self.backend = RedisCache()
 
     def test_integration(self):
         self.backend.set('foo', {'foo': 'bar'}, 50)
diff --git a/tests/sentry/digests/backends/test_redis.py b/tests/sentry/digests/backends/test_redis.py
index 02e0898ddb..e8fbd8e492 100644
--- a/tests/sentry/digests/backends/test_redis.py
+++ b/tests/sentry/digests/backends/test_redis.py
@@ -6,7 +6,6 @@ import mock
 import time
 
 from exam import fixture
-from redis.client import StrictRedis
 
 from sentry.digests import (
     Record,
@@ -23,6 +22,7 @@ from sentry.digests.backends.redis import (
     make_timeline_key,
     truncate_timeline,
 )
+from sentry.utils.redis import clusters
 from sentry.testutils import TestCase
 
 
@@ -34,17 +34,6 @@ def get_set_size(cluster, key):
 
 
 class BaseRedisBackendTestCase(TestCase):
-    DEFAULT_BACKEND_OPTIONS = {
-        'hosts': {
-            0: {'db': 9},
-        },
-    }
-
-    def get_backend(self, options={}):
-        kwargs = self.DEFAULT_BACKEND_OPTIONS.copy()
-        kwargs.update(options)
-        return RedisBackend(**kwargs)
-
     @fixture
     def records(self):
         for i in itertools.count():
@@ -53,7 +42,8 @@ class BaseRedisBackendTestCase(TestCase):
 
 class RedisScriptTestCase(BaseRedisBackendTestCase):
     def test_ensure_timeline_scheduled_script(self):
-        client = StrictRedis(db=9)
+        cluster = clusters.get('default')
+        client = cluster.get_local_client(cluster.hosts.keys()[0])
 
         timeline = 'timeline'
         timestamp = 100.0
@@ -105,7 +95,8 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
             assert ensure_timeline_scheduled(client, keys, (timeline, timestamp - 100, increment, 10)) is None
 
     def test_truncate_timeline_script(self):
-        client = StrictRedis(db=9)
+        cluster = clusters.get('default')
+        client = cluster.get_local_client(cluster.hosts.keys()[0])
 
         timeline = 'timeline'
 
@@ -132,7 +123,7 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
 class RedisBackendTestCase(BaseRedisBackendTestCase):
     def test_add_record(self):
         timeline = 'timeline'
-        backend = self.get_backend()
+        backend = RedisBackend()
 
         timeline_key = make_timeline_key(backend.namespace, timeline)
         connection = backend.cluster.get_local_client_for_key(timeline_key)
@@ -156,10 +147,7 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
     def test_truncation(self):
         timeline = 'timeline'
         capacity = 5
-        backend = self.get_backend({
-            'capacity': capacity,
-            'truncation_chance': 0.5,
-        })
+        backend = RedisBackend(capacity=capacity, truncation_chance=0.5)
 
         timeline_key = make_timeline_key(backend.namespace, timeline)
         connection = backend.cluster.get_local_client_for_key(timeline_key)
@@ -178,7 +166,7 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
                 backend.add(timeline, next(self.records))
 
     def test_scheduling(self):
-        backend = self.get_backend()
+        backend = RedisBackend()
 
         waiting_set_key = make_schedule_key(backend.namespace, SCHEDULE_STATE_WAITING)
         ready_set_key = make_schedule_key(backend.namespace, SCHEDULE_STATE_READY)
@@ -208,7 +196,7 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
 
     def test_delete(self):
         timeline = 'timeline'
-        backend = self.get_backend()
+        backend = RedisBackend()
 
         timeline_key = make_timeline_key(backend.namespace, timeline)
         digest_key = make_digest_key(timeline_key)
@@ -245,7 +233,7 @@ class ExpectedError(Exception):
 
 class DigestTestCase(BaseRedisBackendTestCase):
     def test_digesting(self):
-        backend = self.get_backend()
+        backend = RedisBackend()
 
         # XXX: This assumes the that adding records and scheduling are working
         # correctly to set up the state needed for this test!
@@ -296,7 +284,7 @@ class DigestTestCase(BaseRedisBackendTestCase):
         assert client.get(make_last_processed_timestamp_key(timeline_key)) is None
 
     def test_digesting_failure_recovery(self):
-        backend = self.get_backend()
+        backend = RedisBackend()
 
         # XXX: This assumes the that adding records and scheduling are working
         # correctly to set up the state needed for this test!
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 84f8025a94..19dda8e9fb 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -18,7 +18,9 @@ from sentry.testutils import TestCase
 class OptionsManagerTest(TestCase):
     @fixture
     def store(self):
-        return OptionsStore(cache=RedisCache())
+        return OptionsStore(
+            cache=RedisCache()
+        )
 
     @fixture
     def manager(self):
diff --git a/tests/sentry/options/test_store.py b/tests/sentry/options/test_store.py
index ce5f41c21e..7199ec1739 100644
--- a/tests/sentry/options/test_store.py
+++ b/tests/sentry/options/test_store.py
@@ -17,7 +17,9 @@ from sentry.testutils import TestCase
 class OptionsStoreTest(TestCase):
     @fixture
     def store(self):
-        return OptionsStore(cache=RedisCache())
+        return OptionsStore(
+            cache=RedisCache()
+        )
 
     @fixture
     def key(self):
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 9f73157584..c1b8224d5b 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -6,19 +6,20 @@ import time
 
 import mock
 from exam import fixture, patcher
-from redis.client import StrictRedis
 
 from sentry.quotas.redis import (
     is_rate_limited,
     RedisQuota,
 )
 from sentry.testutils import TestCase
+from sentry.utils.redis import clusters
 
 
 def test_is_rate_limited_script():
     now = int(time.time())
 
-    client = StrictRedis(db=9)
+    cluster = clusters.get('default')
+    client = cluster.get_local_client(cluster.hosts.keys()[0])
 
     # The item should not be rate limited by either key.
     assert map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120))) == [False, False]
@@ -40,12 +41,7 @@ def test_is_rate_limited_script():
 
 
 class RedisQuotaTest(TestCase):
-    @fixture
-    def quota(self):
-        inst = RedisQuota(hosts={
-            0: {'db': 9}
-        })
-        return inst
+    quota = fixture(RedisQuota)
 
     @patcher.object(RedisQuota, 'get_project_quota')
     def get_project_quota(self):
@@ -59,11 +55,6 @@ class RedisQuotaTest(TestCase):
         inst.return_value = 0
         return inst
 
-    def test_default_host_is_local(self):
-        quota = RedisQuota()
-        self.assertEquals(len(quota.cluster.hosts), 1)
-        self.assertEquals(quota.cluster.hosts[0].host, 'localhost')
-
     def test_uses_defined_quotas(self):
         self.get_project_quota.return_value = 200
         self.get_organization_quota.return_value = 300
diff --git a/tests/sentry/ratelimits/test_redis.py b/tests/sentry/ratelimits/test_redis.py
index 25aa983888..fe7bddf1a7 100644
--- a/tests/sentry/ratelimits/test_redis.py
+++ b/tests/sentry/ratelimits/test_redis.py
@@ -8,9 +8,7 @@ from sentry.testutils import TestCase
 
 class RedisRateLimiterTest(TestCase):
     def setUp(self):
-        self.backend = RedisRateLimiter(hosts={
-            0: {'db': 9}
-        })
+        self.backend = RedisRateLimiter()
 
     def test_integration(self):
         assert not self.backend.is_limited(self.project, 'foo', 1)
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 8605cce0cd..735c61006b 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -15,18 +15,16 @@ from sentry.utils.dates import to_timestamp
 
 class RedisTSDBTest(TestCase):
     def setUp(self):
-        self.db = RedisTSDB(hosts={
-            0: {'db': 9}
-        }, rollups=(
-            # time in seconds, samples to keep
-            (10, 30),  # 5 minutes at 10 seconds
-            (ONE_MINUTE, 120),  # 2 hours at 1 minute
-            (ONE_HOUR, 24),  # 1 days at 1 hour
-            (ONE_DAY, 30),  # 30 days at 1 day
-        ), vnodes=64)
-
-        with self.db.cluster.all() as client:
-            client.flushdb()
+        self.db = RedisTSDB(
+            rollups=(
+                # time in seconds, samples to keep
+                (10, 30),  # 5 minutes at 10 seconds
+                (ONE_MINUTE, 120),  # 2 hours at 1 minute
+                (ONE_HOUR, 24),  # 1 days at 1 hour
+                (ONE_DAY, 30),  # 30 days at 1 day
+            ),
+            vnodes=64
+        )
 
     def test_make_counter_key(self):
         result = self.db.make_counter_key(TSDBModel.project, 1368889980, 1)
diff --git a/tests/sentry/utils/test_redis.py b/tests/sentry/utils/test_redis.py
new file mode 100644
index 0000000000..579647e6a5
--- /dev/null
+++ b/tests/sentry/utils/test_redis.py
@@ -0,0 +1,84 @@
+import functools
+
+import pytest
+
+from sentry.exceptions import InvalidConfiguration
+from sentry.testutils.cases import TestCase
+from sentry.utils.redis import (
+    ClusterManager, _shared_pool, get_cluster_from_options
+)
+
+make_manager = functools.partial(
+    ClusterManager,
+    {
+        'redis.clusters': {
+            'foo': {
+                'hosts': {
+                    0: {'db': 0},
+                },
+            },
+            'bar': {
+                'hosts': {
+                    0: {'db': 0},
+                    1: {'db': 1},
+                }
+            },
+        },
+    },
+)
+
+
+class ClusterManagerTestCase(TestCase):
+    def test_get(self):
+        manager = make_manager()
+        assert manager.get('foo') is manager.get('foo')
+        assert manager.get('foo') is not manager.get('bar')
+        assert manager.get('foo').pool_cls is _shared_pool
+        with pytest.raises(KeyError):
+            manager.get('invalid')
+
+
+def test_get_cluster_from_options():
+    backend = object()
+    manager = make_manager()
+
+    cluster, options = get_cluster_from_options(
+        backend,
+        {
+            'cluster': 'foo',
+            'foo': 'bar',
+        },
+        cluster_manager=manager,
+    )
+
+    assert cluster is manager.get('foo')
+    assert cluster.pool_cls is _shared_pool
+    assert options == {'foo': 'bar'}
+
+    cluster, options = get_cluster_from_options(
+        backend,
+        {
+            'hosts': {
+                0: {'db': 0},
+            },
+            'foo': 'bar',
+        },
+        cluster_manager=manager,
+    )
+
+    assert cluster is not manager.get('foo')  # kind of a silly assertion
+    assert cluster.pool_cls is _shared_pool
+    assert options == {'foo': 'bar'}
+
+    with pytest.raises(InvalidConfiguration):
+        cluster, options = get_cluster_from_options(
+            backend,
+            {
+                'hosts': {
+                    0: {'db': 0},
+                },
+                'cluster': 'foo',
+                'foo': 'bar',
+            },
+            cluster_manager=manager,
+        )
