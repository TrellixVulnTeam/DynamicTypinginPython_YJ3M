commit 04c553777d535207b8fbfea7f9b509596777835b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Apr 23 09:28:26 2019 -0700

    feat(request-errors): More specific request error names (#12880)
    
    This will change the exception type/name to be based on the HTTP status code string. e.g. 404 will be "NotFoundError"

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index e8ae97a419..6c9ceec2cb 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,5 +1,5 @@
-import $ from 'jquery';
 import {isUndefined, isNil} from 'lodash';
+import $ from 'jquery';
 import * as Sentry from '@sentry/browser';
 
 import {
@@ -9,9 +9,9 @@ import {
 } from 'app/constants/apiErrorCodes';
 import {metric} from 'app/utils/analytics';
 import {openSudo, redirectToProject} from 'app/actionCreators/modal';
-import GroupActions from 'app/actions/groupActions';
-import RequestError from 'app/utils/requestError';
 import {uniqueId} from 'app/utils/guid';
+import GroupActions from 'app/actions/groupActions';
+import createRequestError from 'app/utils/requestError/createRequestError';
 import * as tracing from 'app/utils/tracing';
 
 export class Request {
@@ -198,7 +198,7 @@ export class Client {
       }
     }
 
-    const errorObject = new RequestError(options.method, path);
+    const errorObject = new Error();
 
     this.activeRequests[id] = new Request(
       $.ajax({
@@ -236,10 +236,16 @@ export class Client {
 
           Sentry.withScope(scope => {
             // `requestPromise` can pass its error object
-            const errorObjectToUse = options.requestError || errorObject;
+            const preservedError = options.preservedError || errorObject;
+
+            const errorObjectToUse = createRequestError(
+              resp,
+              preservedError.stack,
+              options.method,
+              path
+            );
 
-            errorObjectToUse.setResponse(resp);
-            errorObjectToUse.removeFrames(4);
+            errorObjectToUse.removeFrames(2);
 
             // Setting this to warning because we are going to capture all failed requests
             scope.setLevel('warning');
@@ -270,19 +276,19 @@ export class Client {
     // This *should* get logged to Sentry only if the promise rejection is not handled
     // (since SDK captures unhandled rejections). Ideally we explicitly ignore rejection
     // or handle with a user friendly error message
-    const requestError = new RequestError(options.method, path);
+    const preservedError = new Error();
 
     return new Promise((resolve, reject) => {
       this.request(path, {
         ...options,
-        requestError,
+        preservedError,
         success: (data, ...args) => {
           includeAllArgs ? resolve([data, ...args]) : resolve(data);
         },
         error: (resp, ...args) => {
           // Since this method calls `this.request`, and its error handler
           // modifies the error object, we don't update it
-          reject(requestError);
+          reject(preservedError);
         },
       });
     });
diff --git a/src/sentry/static/sentry/app/utils/requestError/createRequestError.jsx b/src/sentry/static/sentry/app/utils/requestError/createRequestError.jsx
new file mode 100644
index 0000000000..293fd2d016
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/requestError/createRequestError.jsx
@@ -0,0 +1,42 @@
+import RequestError from './requestError';
+
+const ERROR_MAP = {
+  0: 'CancelledError',
+  400: 'BadRequestError',
+  401: 'UnauthorizedError',
+  403: 'ForbiddenError',
+  404: 'NotFoundError',
+  426: 'UpgradeRequiredError',
+  429: 'TooManyRequestsError',
+  500: 'InternalServerError',
+  501: 'NotImplementedError',
+  502: 'BadGatewayError',
+  503: 'ServiceUnavailableError',
+  504: 'GatewayTimeoutError',
+};
+
+/**
+ * Create a RequestError whose name is equal to HTTP status text defined above
+ *
+ * @param {Object} resp A XHR response object
+ * @param {String} stack The stacktrace to use. Helpful for async calls and we want to preserve a different stack.
+ */
+export default function createRequestError(resp, stack, ...args) {
+  const err = new RequestError(...args);
+
+  if (resp) {
+    const errorName = ERROR_MAP[resp.status];
+
+    if (errorName) {
+      err.setName(errorName);
+    }
+
+    err.setResponse(resp);
+  }
+
+  if (stack) {
+    err.setStack(stack);
+  }
+
+  return err;
+}
diff --git a/src/sentry/static/sentry/app/utils/requestError.jsx b/src/sentry/static/sentry/app/utils/requestError/requestError.jsx
similarity index 85%
rename from src/sentry/static/sentry/app/utils/requestError.jsx
rename to src/sentry/static/sentry/app/utils/requestError/requestError.jsx
index 8a98a8c4b6..81ad58f99a 100644
--- a/src/sentry/static/sentry/app/utils/requestError.jsx
+++ b/src/sentry/static/sentry/app/utils/requestError/requestError.jsx
@@ -9,8 +9,6 @@ export default class RequestError extends Error {
    * Updates Error with XHR response
    */
   setResponse(resp) {
-    this.resp = resp;
-
     if (resp) {
       this.setMessage(
         `${this.message} ${resp.status !== 'undefined' ? resp.status : 'n/a'}`
@@ -19,8 +17,10 @@ export default class RequestError extends Error {
       // Some callback handlers expect these properties on the error object
       if (resp.responseJSON) {
         this.responseJSON = resp.responseJSON;
-        this.status = resp.status;
       }
+
+      this.status = resp.status;
+      this.statusText = resp.statusText;
     }
   }
 
@@ -28,6 +28,14 @@ export default class RequestError extends Error {
     this.message = message;
   }
 
+  setStack(newStack) {
+    this.stack = newStack;
+  }
+
+  setName(name) {
+    this.name = name;
+  }
+
   removeFrames(numLinesToRemove) {
     // Drop some frames so stacktrace starts at callsite
     //
