commit 9308dd325bc617af047bb70a31ac29298e8c0eb9
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon May 2 17:03:33 2016 +0200

    Converted to latest specification

diff --git a/bin/load-mocks b/bin/load-mocks
index 53e34947dc..7a335f4acf 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -130,42 +130,36 @@ def get_sample_breadcrumbs(prior_event_id=None):
                 }
             },
             {
-                "type": "log",
                 "timestamp": milliseconds_ago(now, 4000),
                 "message": "This is an info log message",
             },
             {
-                "type": "log",
                 "timestamp": milliseconds_ago(now, 3300),
                 "message": "This is a warning log message",
-                "category": "warning",
-                "classifier": 'django.utils.log'
+                "level": "warning",
+                "category": 'django.utils.log'
             },
             {
-                "type": "log",
                 "timestamp": milliseconds_ago(now, 2700),
                 "message": "This is an error log message",
-                "category": "error",
-                "classifier": 'django.utils.log'
+                "level": "error",
+                "category": 'django.utils.log'
             },
             {
                 "type": "http",
-                "category": "io",
+                "category": "requests",
                 "timestamp": milliseconds_ago(now, 1300),
                 "message": "POST http://example.com [200]"
             },
             {
                 "type": "query",
-                "category": "io",
+                "category": "django.db",
                 "timestamp": milliseconds_ago(now, 1200),
-                "message": u'SELECT "auth_user"."password", "auth_user"."last_login", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."email", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."is_managed", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = %s',
-                "message_args": [1],
-                "duration": 0.002,
-                "classifier": u'django.db'
+                "message": u'SELECT "auth_user"."password", "auth_user"."last_login", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."email", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."is_managed", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1',
+                "duration": 0.002
             },
             {
                 "type": "click",
-                "category": "user",
                 "timestamp": milliseconds_ago(now, 1000),
                 "message": "div > form[name=\"post\"] > button.btn.btn-small[name=\"submit\"]"
             }
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index ac7dddab17..df5086334f 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -79,7 +79,7 @@ class Breadcrumbs(Interface):
 
     @classmethod
     def normalize_crumb(cls, crumb):
-        ty = crumb.get('type') or 'info'
+        ty = crumb.get('type') or 'default'
         ts = parse_new_timestamp(crumb.get('timestamp'))
         if ts is None:
             raise InterfaceValidationError('Unable to determine timestamp '
@@ -90,21 +90,21 @@ class Breadcrumbs(Interface):
             'timestamp': to_timestamp(ts),
         }
 
+        level = crumb.get('level')
+        if level not in (None, 'info'):
+            rv['level'] = level
+
         msg = crumb.get('message')
         if msg is not None:
             rv['message'] = trim(unicode(msg), 4096)
-            msg_args = crumb.get('message_args')
-            if msg_args:
-                rv['message_args'] = trim(list(msg_args), 2048)
 
-        for key in 'category', 'classifier':
-            val = crumb.get(key)
-            if val is not None:
-                rv[key] = trim(unicode(val), 256)
+        category = crumb.get('category')
+        if category is not None:
+            rv['category'] = trim(unicode(category), 256)
 
         duration = crumb.get('duration')
         if duration is not None:
-            rv['duration'] = float(duration)
+            rv['data'] = float(duration)
 
         if 'data' in crumb:
             rv['data'] = trim(crumb['data'], 4096)
@@ -123,11 +123,9 @@ class Breadcrumbs(Interface):
                 'type': x['type'],
                 'timestamp': to_datetime(x['timestamp']),
                 'duration': x.get('duration'),
+                'level': x.get('level', 'info'),
                 'message': x.get('message'),
-                'message_args': x.get('message_args'),
-                'category': _get_implied_category(x.get('category'), x['type']),
-                'classifier': x.get('classifier'),
-                'duration': x.get('duration'),
+                'category': x.get('category'),
                 'data': x.get('data') or {},
             }
         return {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/classifier.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/category.jsx
similarity index 79%
rename from src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/classifier.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/category.jsx
index 06b021fe3a..487f5bc27c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/classifier.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/category.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-const Classifier = React.createClass({
+const Category = React.createClass({
   propTypes: {
     value: React.PropTypes.string.isRequired,
     title: React.PropTypes.string,
@@ -22,9 +22,9 @@ const Classifier = React.createClass({
       title = value;
     }
     return (
-      <span className="crumb-classifier">({title})</span>
+      <span className="crumb-category">({title})</span>
     );
   }
 });
 
-export default Classifier;
+export default Category;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx
new file mode 100644
index 0000000000..6bcd391567
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx
@@ -0,0 +1,103 @@
+import React from 'react';
+import moment from 'moment';
+import _ from 'underscore';
+
+import Category from './category';
+import Duration from '../../../duration';
+
+const CrumbComponent = React.createClass({
+  propTypes: {
+    crumb: React.PropTypes.object.isRequired,
+  },
+
+  renderSummary() {
+    let {crumb} = this.props;
+    let {message, type} = crumb;
+
+    return (
+      <div className="summary">
+        {message && <pre><code>{message}</code></pre>}
+        {crumb.category && <Category value={crumb.category}/>}
+        {crumb.duration &&
+          <span className="crumb-timing">
+            [<Duration seconds={crumb.duration}/>]
+          </span>
+        }
+      </div>
+    );
+  },
+
+  getClassName() {
+    let {crumb} = this.props;
+    let rv = 'crumb crumb-default crumb-' + crumb.level;
+    if (crumb.type !== 'default') {
+      rv += ' crumb-' + crumb.type.replace(/[\s_]+/g, '-').toLowerCase();
+    }
+    return rv;
+  },
+
+  getTitle() {
+    // TODO(mitsuhiko): refactor to support different types better
+    let crumb = this.props.crumb;
+    if (crumb.type === 'default') {
+      return null;
+    }
+    return crumb.type.split(/[_-\s]+/g).map((word) => {
+      return word.substr(0, 1).toUpperCase() + word.substr(1);
+    }).join(' ');
+  },
+
+  getLevel() {
+    // TODO(mitsuhiko): refactor to support different types better
+    let crumb = this.props.crumb;
+    if ((crumb.type !== 'default' && crumb.level === 'info') ||
+        crumb.type === 'error') {
+      return null;
+    }
+    return (
+      <span className="crumb-level">{crumb.level}</span>
+    );
+  },
+
+  render() {
+    let crumb = this.props.crumb;
+    let body = _.chain(crumb.data)
+      .map((val, key) => [val, key])
+      .map(([val, key]) => {
+        return (
+          <tr key={key}>
+            <td className="key">{key}</td>
+            <td className="value"><pre>{val + ''}</pre></td>
+          </tr>
+        );
+      })
+      .value();
+
+    return (
+      <li className={this.getClassName()}>
+        <span className="icon-container">
+          <span className="icon"/>
+        </span>
+        <span className="dt">{moment(crumb.timestamp).format('HH:mm:ss')}</span>
+        <table className="table key-value">
+          <thead>
+            <tr>
+              <td className="key">
+                {this.getTitle()}
+                {this.getLevel()}
+              </td>
+              <td className="value">{this.renderSummary()}</td>
+            </tr>
+          </thead>
+          {crumb.data &&
+            <tbody>
+              {body}
+            </tbody>
+          }
+        </table>
+      </li>
+    );
+  }
+});
+
+export default CrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx
deleted file mode 100644
index ea7d3353a0..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/default.jsx
+++ /dev/null
@@ -1,78 +0,0 @@
-import React from 'react';
-import moment from 'moment';
-import _ from 'underscore';
-
-import Classifier from './classifier';
-import Duration from '../../../duration';
-
-import QueryCrumbBody from './query';
-
-const DefaultCrumbComponent = React.createClass({
-  propTypes: {
-    crumb: React.PropTypes.object.isRequired,
-  },
-
-  renderMessage() {
-    let {crumb} = this.props;
-    let {message, type} = crumb;
-
-    return (
-      <pre>
-        {type === 'query' ?
-          <QueryCrumbBody data={crumb}/> :
-          <code>{message}</code>
-        }
-        {crumb.classifier && <Classifier value={crumb.classifier}/>}
-        {crumb.duration &&
-          <span className="timing">
-            [<Duration seconds={crumb.duration}/>]
-          </span>
-        }
-      </pre>
-    );
-  },
-
-  render() {
-    let crumb = this.props.crumb;
-
-    let message = crumb.message || crumb.data && crumb.data.message;
-
-    let category = crumb.category || 'default';
-    let body = _.chain(crumb.data)
-      .map((val, key) => [val, key])
-      .filter(([val, key]) => key !== 'message' && key !== 'level' && key !== 'classifier')
-      .map(([val, key]) => {
-        return (
-          <tr key={key}>
-            <td className="key">{key}</td>
-            <td className="value"><pre>{val + ''}</pre></td>
-          </tr>
-        );
-      })
-      .value();
-
-    return (
-      <li className={'crumb crumb-' + category}>
-        <span className="icon-container">
-          <span className="icon"/>
-        </span>
-        <span className="dt">{moment(crumb.timestamp).format('HH:mm:ss')}</span>
-        <table className="table key-value">
-          <thead>
-            <tr>
-              <td className="key">{crumb.type}</td>
-              <td className="value">{message && this.renderMessage()}</td>
-            </tr>
-          </thead>
-          {crumb.data &&
-            <tbody>
-              {body}
-            </tbody>
-          }
-        </table>
-      </li>
-    );
-  }
-});
-
-export default DefaultCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/error.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/error.jsx
deleted file mode 100644
index 9ad85d349b..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/error.jsx
+++ /dev/null
@@ -1,31 +0,0 @@
-import React from 'react';
-
-import KeyValueList from '../keyValueList';
-
-function Error(props) {
-  let {type, value, message, eventId} = props.data;
-
-  let list = [];
-  if (value) {
-    list.push(['message', value]);
-  }
-  if (message) {
-    list.push(['message', message]);
-  }
-  if (eventId) {
-    list.push(['event_id', eventId]);
-  }
-
-  return (
-    <div>
-      <h5>{type || 'Error'}</h5>
-      <KeyValueList data={list} isSorted={false} />
-    </div>
-  );
-}
-
-Error.propTypes = {
-  data: React.PropTypes.object.isRequired
-};
-
-export default Error;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/httpRequest.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/httpRequest.jsx
deleted file mode 100644
index b0dae3029e..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/httpRequest.jsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import React from 'react';
-
-import Classifier from './classifier';
-import KeyValueList from '../keyValueList';
-
-const HttpRequestCrumbComponent = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  test() {
-    return 42;
-  },
-
-  render() {
-    let data = this.props.data;
-
-    let list = [];
-    list.push([data.method, data.url]);
-
-    if(data.response) {
-      list.push(['response', data.response.statusCode]);
-    }
-
-    return (
-      <div>
-        <h5>HTTP Request
-          <Classifier value={data.classifier} title="%s request" hideIfEmpty={true}/>
-        </h5>
-        <KeyValueList data={list} isSorted={false} />
-      </div>
-    );
-  }
-});
-
-export default HttpRequestCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/message.jsx
deleted file mode 100644
index a94968e6ea..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/message.jsx
+++ /dev/null
@@ -1,25 +0,0 @@
-import React from 'react';
-
-import Classifier from './classifier';
-
-const MessageCrumbComponent = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let data = this.props.data;
-    let levelClasses = 'level level-' + data.level;
-
-    return (
-      <p>
-        {data.level ? <span className={levelClasses}>{data.level}</span> : null}
-        <span className="message-text">{' ' + data.message + ' '}</span>
-        {data.logger ? <span className="logger">[{data.logger}]</span> : null}
-        <Classifier value={data.classifier} title="%s" hideIfEmpty={true}/>
-      </p>
-    );
-  }
-});
-
-export default MessageCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/navigation.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/navigation.jsx
deleted file mode 100644
index dfe7fe26ad..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/navigation.jsx
+++ /dev/null
@@ -1,26 +0,0 @@
-import React from 'react';
-
-import KeyValueList from '../keyValueList';
-
-const NavigationCrumbComponent = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let data = this.props.data;
-
-    let list = [];
-    list.push(['from', data.from]);
-    list.push(['to', data.to]);
-
-    return (
-      <div>
-        <h5>Navigation</h5>
-        <KeyValueList data={list} isSorted={false} />
-      </div>
-    );
-  }
-});
-
-export default NavigationCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx
deleted file mode 100644
index 2356425f89..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/query.jsx
+++ /dev/null
@@ -1,115 +0,0 @@
-import React from 'react';
-
-function summarizeSqlQuery(sql) {
-  // select
-  let match;
-
-  match = sql.match(/^\s*(select\s+(?:\s+all\b|distinct\b)?)(.*?)\bfrom\s+["`]?([^\s,."`]+)/im);
-  if (match) {
-    let selectors = match[2].split(/,/g);
-    let selector = selectors[0].split(/\bas\b/i)[0].trim();
-    if (selectors.length > 1) {
-      selector += ', …';
-    }
-    return (
-      <span className="sql-summary">
-        <span className="keyword statement">{match[1].toUpperCase()}</span>{' '}
-        <span className="literal">{selector}</span>{' '}
-        <span className="keyword">FROM</span>{' '}
-        <span className="literal">{match[3].trim()}</span>
-      </span>
-    );
-  }
-
-  match = sql.match(/^\s*(insert\s+into|delete\s+from|update)\s+["`]?([^\s,."`]+)/im);
-  if (match) {
-    return (
-      <span className="sql-summary">
-        <span className="keyword statement">{match[1].toUpperCase()}</span>{' '}
-        <span className="literal">{match[2]}</span>
-      </span>
-    );
-  }
-
-  match = sql.match(/^\s*(\S+)/);
-  if (match) {
-    return (
-      <span className="sql-summary">
-        <span className="keyword statement">{match[1]}</span>
-      </span>
-    );
-  }
-
-  return null;
-}
-
-const QueryCrumbBody = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  getInitialState() {
-    return {
-      showFullQuery: false
-    };
-  },
-
-  toggleFullQuery() {
-    this.setState({
-      showFullQuery: !this.state.showFullQuery
-    });
-  },
-
-  formatSqlParam(value) {
-    if (value === null) {
-      return 'NULL';
-    }
-    return value.toString();
-  },
-
-  renderQuery() {
-    let {data} = this.props;
-    let query = data.message;
-    let params = [1];
-
-    if (typeof query !== 'string') {
-      return (
-        <span className="query">
-          <code className="full-query">
-            <span className="json">{JSON.stringify(query, null, 2)}</span>
-          </code>
-        </span>
-      );
-    }
-
-    let querySummary = summarizeSqlQuery(query);
-    let placeholderIdx = 0;
-    let queryElements = query.split(/(%s)/).map((item, idx) => {
-      return item === '%s'
-        ? <span key={idx} className="param">{
-            params ? this.formatSqlParam(params[placeholderIdx++]) : item}</span>
-        : <span key={idx} className="literal">{item}</span>
-      ;
-    });
-
-    return (
-      <span className="query" onClick={querySummary ? this.toggleFullQuery : null}>
-        {querySummary && !this.state.showFullQuery ?
-          <code className="query-summary expand">
-            {querySummary}
-            <span className="elipsis">…</span>
-          </code> : null
-        }
-        {!querySummary || this.state.showFullQuery ?
-          <code className={'full-query' + (querySummary ? ' expand' : '')
-            }>{queryElements}</code> : null}
-      </span>
-    );
-  },
-
-  render() {
-    return this.renderQuery();
-  }
-});
-
-export default QueryCrumbBody;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/rpc.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/rpc.jsx
deleted file mode 100644
index 4d0f1e2653..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/rpc.jsx
+++ /dev/null
@@ -1,21 +0,0 @@
-import React from 'react';
-
-import Classifier from './classifier';
-
-const RpcCrumbComponent = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let data = this.props.data;
-    return (
-      <p>
-        <strong>Remote call to</strong> <code>{data.endpoint}</code>
-        <Classifier value={data.classifier} title="%s call"/>
-      </p>
-    );
-  }
-});
-
-export default RpcCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/uiEvent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/uiEvent.jsx
deleted file mode 100644
index 9349c18eae..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/uiEvent.jsx
+++ /dev/null
@@ -1,28 +0,0 @@
-import React from 'react';
-
-import Classifier from './classifier';
-import KeyValueList from '../keyValueList';
-
-const UiEventComponent = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    let data = this.props.data;
-
-    let list = [];
-    list.push([data.type, data.target || 'undefined target']);
-
-    return (
-      <div>
-        <h5>UI Event
-          <Classifier value={data.classifier} title="%s call" hideIfEmpty={true}/>
-        </h5>
-        <KeyValueList data={list} isSorted={false} />
-      </div>
-    );
-  }
-});
-
-export default UiEventComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index eb957ecbc3..f69c89fdce 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
 
-import DefaultCrumb from './breadcrumbComponents/default';
+import CrumbComponent from './breadcrumbComponents/crumb';
 
 function Collapsed(props) {
   return (
@@ -15,6 +15,7 @@ function Collapsed(props) {
     </li>
   );
 }
+
 Collapsed.propTypes = {
   onClick: React.PropTypes.func.isRequired,
   count: React.PropTypes.number.isRequired
@@ -54,7 +55,7 @@ const BreadcrumbsInterface = React.createClass({
     // reverse array to get consistent idx between collapsed/expanded state
     // (indexes begin and increment from last breadcrumb)
     return crumbs.reverse().map((item, idx) => {
-      return <DefaultCrumb key={idx} crumb={item} />;
+      return <CrumbComponent key={idx} crumb={item} />;
     }).reverse(); // un-reverse rendered result
   },
 
@@ -77,11 +78,12 @@ const BreadcrumbsInterface = React.createClass({
     // TODO: what about non-exceptions (e.g. generic messages)?
     let exception = evt.entries.find(entry => entry.type === 'exception');
     if (exception) {
-      let {type, value} = exception.data.values[0];
+      let {type, value, module} = exception.data.values[0];
       // make copy of values array / don't mutate props
       all = all.slice(0).concat([{
         type: 'error',
-        category: 'error',
+        level: 'error',
+        category: module || null,
         message: type + ': ' + value,
         timestamp: evt.dateCreated
       }]);
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index e9be99daf0..bbb4cd593c 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1580,7 +1580,7 @@ ul.crumbs {
       right: 20px
     }
 
-    span.crumb-classifier,
+    span.crumb-category,
     span.timing {
       padding-left: 6px;
       color: @gray;
@@ -1589,13 +1589,25 @@ ul.crumbs {
       text-transform: none;
     }
 
+    span.crumb-level {
+      background: @gray;
+      border-radius: 2px;
+      font-size: 11px;
+      font-weight: bold;
+      color: white;
+      padding: 2px 4px;
+    }
+
+    * + span.crumb-level {
+      margin-left: 6px;
+    }
+
     .table.key-value {
       margin-bottom: 0;
       background: none;
 
       thead td:first-child {
         font-weight: bold;
-        text-transform: capitalize;
       }
 
       td {
@@ -1620,6 +1632,16 @@ ul.crumbs {
       }
     }
 
+    div.summary {
+      pre {
+        display: inline-block;
+      }
+
+      * {
+        vertical-align: middle;
+      }
+    }
+
     &.crumbs-collapsed {
       background: @white-dark;
       margin: 0 1px;
@@ -1671,7 +1693,31 @@ ul.crumbs {
       }
     }
 
-    &.crumb-location {
+    &.crumb-default {
+      padding-top: 7px;
+      clear: both;
+
+      .icon-container {
+        border-color: @gray-dark;
+      }
+
+      .icon {
+        color: @gray-dark;
+        top: 5px;
+        left: 6px;
+
+        &:before {
+          content: "\e909";
+        }
+      }
+
+      span.logger {
+        padding-left: 8px;
+        color: @gray;
+      }
+    }
+
+    &.crumb-navigation {
       .icon-container {
         border-color: @blue-dark;
 
@@ -1684,7 +1730,7 @@ ul.crumbs {
       }
     }
 
-    &.crumb-io {
+    &.crumb-http {
       .icon-container {
         border-color: @green-dark;
 
@@ -1699,30 +1745,6 @@ ul.crumbs {
       }
     }
 
-    &.crumb-default {
-      padding-top: 7px;
-      clear: both;
-
-      .icon-container {
-        border-color: @gray-dark;
-      }
-
-      .icon {
-        color: @gray-dark;
-        top: 5px;
-        left: 6px;
-
-        &:before {
-          content: "\e909";
-        }
-      }
-
-      span.logger {
-        padding-left: 8px;
-        color: @gray;
-      }
-    }
-
     &.crumb-user {
       .icon-container {
         border-color: @purple-dark;
@@ -1739,6 +1761,9 @@ ul.crumbs {
     }
 
     &.crumb-warning {
+      .crumb-level {
+        background: @yellow-orange;
+      }
 
       .icon-container {
         border-color: @yellow-orange-dark;
@@ -1754,11 +1779,21 @@ ul.crumbs {
       }
     }
 
-    &.crumb-error {
+    &.crumb-debug {
+      .crumb-level {
+        background: @blue;
+      }
+    }
+
+    &.crumb-error, &.crumb-critical {
       background: #fffcfb;
       border: 1px solid #E7C0BC;
       margin: -1px 0;
 
+      .crumb-level {
+        background: @red;
+      }
+
       .icon {
         color: @red;
         left: 5.5px;
