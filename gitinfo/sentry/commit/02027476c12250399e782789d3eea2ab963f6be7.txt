commit 02027476c12250399e782789d3eea2ab963f6be7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Mar 11 17:48:06 2019 +0100

    ref(grouping): Move grouping code out of interfaces (#12354)
    
    Initial pass of moving the grouping code out of the interface into a separate system in Sentry
    to pave the way for grouping versioning.

diff --git a/src/sentry/event_hashing.py b/src/sentry/event_hashing.py
deleted file mode 100644
index cdd4aade5b..0000000000
--- a/src/sentry/event_hashing.py
+++ /dev/null
@@ -1,388 +0,0 @@
-from __future__ import absolute_import
-
-import re
-import six
-
-from hashlib import md5
-
-from django.utils.encoding import force_bytes
-
-HASH_RE = re.compile(r'^[0-9a-f]{32}$')
-DEFAULT_FINGERPRINT_VALUES = frozenset(['{{ default }}', '{{default}}'])
-
-
-DEFAULT_HINTS = {
-    'salt': 'a static salt',
-}
-
-# When a component ID appears here it has a human readable name which also
-# makes it a major component.  A major component is described as such for
-# the UI.
-KNOWN_MAJOR_COMPONENT_NAMES = {
-    'app': 'in-app',
-    'exception': 'exception',
-    'stacktrace': 'stacktrace',
-    'threads': 'thread',
-    'hostname': 'hostname',
-    'violation': 'violation',
-    'uri': 'URL',
-    'message': 'message',
-}
-
-
-def _calculate_contributes(values):
-    for value in values or ():
-        if not isinstance(value, GroupingComponent) or value.contributes:
-            return True
-    return False
-
-
-class GroupingComponent(object):
-    """A grouping component is a recursive structure that is flattened
-    into components to make a hash for grouping purposes.
-    """
-
-    def __init__(self, id, hint=None, contributes=None, values=None):
-        self.id = id
-        if hint is None:
-            hint = DEFAULT_HINTS.get(id)
-        self.hint = hint
-        if contributes is None:
-            contributes = _calculate_contributes(values)
-        self.contributes = contributes
-        if values is None:
-            values = []
-        self.values = values
-
-    @property
-    def name(self):
-        return KNOWN_MAJOR_COMPONENT_NAMES.get(self.id)
-
-    @property
-    def description(self):
-        items = []
-
-        def _walk_components(c, stack):
-            stack.append(c.name)
-            for value in c.values:
-                if isinstance(value, GroupingComponent) and value.contributes:
-                    _walk_components(value, stack)
-            parts = filter(None, stack)
-            items.append(parts)
-            stack.pop()
-
-        _walk_components(self, [])
-        items.sort(key=lambda x: (len(x), x))
-
-        if items and items[-1]:
-            return ' '.join(items[-1])
-        return self.name or 'others'
-
-    def get_subcomponent(self, id):
-        """Looks up a subcomponent by the id and returns the first or `None`."""
-        return next(self.iter_subcomponents(id), None)
-
-    def iter_subcomponents(self, id, recursive=False):
-        """Finds all subcomponents matching an id, optionally recursively."""
-        for value in self.values:
-            if isinstance(value, GroupingComponent):
-                if value.id == id:
-                    yield value
-                if recursive:
-                    for subcomponent in value.iter_subcomponents(id, recursive=True):
-                        yield subcomponent
-
-    def update(self, hint=None, contributes=None, values=None):
-        """Updates an already existing component with new values."""
-        if hint is not None:
-            self.hint = hint
-        if values is not None:
-            if contributes is None:
-                contributes = _calculate_contributes(values)
-            self.values = values
-        if contributes is not None:
-            self.contributes = contributes
-
-    def iter_values(self):
-        """Recursively walks the component and flattens it into a list of
-        values.
-        """
-        if self.contributes:
-            for value in self.values:
-                if isinstance(value, GroupingComponent):
-                    for x in value.iter_values():
-                        yield x
-                else:
-                    yield value
-
-    def get_hash(self):
-        """Returns the hash of the values if it contributes."""
-        if self.contributes:
-            return hash_from_values(self.iter_values())
-
-    def as_dict(self):
-        """Converts the component tree into a dictionary."""
-        rv = {
-            'id': self.id,
-            'name': self.name,
-            'contributes': self.contributes,
-            'hint': self.hint,
-            'values': []
-        }
-        for value in self.values:
-            if isinstance(value, GroupingComponent):
-                rv['values'].append(value.as_dict())
-            else:
-                # this basically assumes that a value is only a primitive
-                # and never an object or list.  This should be okay
-                # because we verify this.
-                rv['values'].append(value)
-        return rv
-
-    def __repr__(self):
-        return 'GroupingComponent(%r, hint=%r, contributes=%r, values=%r)' % (
-            self.id,
-            self.hint,
-            self.contributes,
-            self.values,
-        )
-
-
-class BaseVariant(object):
-    # The type of the variant that is reported to the UI.
-    type = None
-
-    # This is true if `get_hash` does not return `None`.
-    contributes = True
-
-    def get_hash(self):
-        return None
-
-    @property
-    def description(self):
-        return self.type
-
-    def _get_metadata_as_dict(self):
-        return {}
-
-    def as_dict(self):
-        rv = {
-            'type': self.type,
-            'description': self.description,
-            'hash': self.get_hash(),
-        }
-        rv.update(self._get_metadata_as_dict())
-        return rv
-
-    def __repr__(self):
-        return '<%s %r (%s)>' % (
-            self.__class__.__name__,
-            self.get_hash(),
-            self.type,
-        )
-
-
-class ChecksumVariant(BaseVariant):
-    """A checksum variant returns a single hardcoded hash."""
-    type = 'checksum'
-
-    def __init__(self, hash, hashed=False):
-        self.hash = hash
-        self.hashed = hashed
-
-    @property
-    def description(self):
-        if self.hashed:
-            return 'hashed legacy checksum'
-        return 'legacy checksum'
-
-    def get_hash(self):
-        return self.hash
-
-
-class FallbackVariant(BaseVariant):
-    id = 'fallback'
-    contributes = True
-
-    def get_hash(self):
-        return hash_from_values([])
-
-
-class ComponentVariant(BaseVariant):
-    """A component variant is a variant that produces a hash from the
-    `GroupComponent` it encloses.
-    """
-    type = 'component'
-
-    def __init__(self, component):
-        self.component = component
-
-    @property
-    def description(self):
-        return self.component.description
-
-    @property
-    def contributes(self):
-        return self.component.contributes
-
-    def get_hash(self):
-        return self.component.get_hash()
-
-    def _get_metadata_as_dict(self):
-        return {
-            'component': self.component.as_dict(),
-        }
-
-
-class CustomFingerprintVariant(BaseVariant):
-    """A completely custom fingerprint."""
-    type = 'custom-fingerprint'
-
-    def __init__(self, values):
-        self.values = values
-
-    @property
-    def description(self):
-        return 'custom fingerprint'
-
-    def get_hash(self):
-        return hash_from_values(self.values)
-
-    def _get_metadata_as_dict(self):
-        return {
-            'values': self.values,
-        }
-
-
-class SaltedComponentVariant(BaseVariant):
-    """A salted version of a component."""
-    type = 'salted-component'
-
-    def __init__(self, values, component):
-        self.values = values
-        self.component = component
-
-    @property
-    def description(self):
-        return 'modified ' + self.component.description
-
-    @property
-    def contributes(self):
-        return self.component.contributes
-
-    def get_hash(self):
-        if not self.component.contributes:
-            return None
-        final_values = []
-        for value in self.values:
-            if value in DEFAULT_FINGERPRINT_VALUES:
-                final_values.extend(self.component.iter_values())
-            else:
-                final_values.append(value)
-        return hash_from_values(final_values)
-
-    def _get_metadata_as_dict(self):
-        return {
-            'values': self.values,
-            'component': self.component.as_dict(),
-        }
-
-
-def hash_from_values(values):
-    result = md5()
-    for value in values:
-        result.update(force_bytes(value, errors='replace'))
-    return result.hexdigest()
-
-
-def get_calculated_grouping_variants_for_event(event):
-    """Given an event this returns a dictionary of the matching grouping
-    variants.  Checksum and fingerprinting logic are not handled by this
-    function which is handled by `get_grouping_variants_for_event`.
-    """
-    # This sorts the interfaces by the interface score which gives it the
-    # priority which we depend on.
-    interfaces = event.get_interfaces()
-
-    winning_strategy = None
-    precedence_hint = None
-    per_variant_components = {}
-
-    for (strategy_name, interface) in six.iteritems(interfaces):
-        rv = interface.get_grouping_component_variants(event.platform)
-        for (variant, component) in six.iteritems(rv):
-            per_variant_components.setdefault(variant, []).append(component)
-
-            if winning_strategy is None:
-                if component.contributes:
-                    winning_strategy = strategy_name
-                    precedence_hint = '%s takes precedence' % (
-                        '%s of %s' % (strategy_name, variant) if
-                        variant != 'default' else
-                        strategy_name
-                    )
-            elif component.contributes and winning_strategy != strategy_name:
-                component.update(
-                    contributes=False,
-                    hint=precedence_hint
-                )
-
-    rv = {}
-    for (variant, components) in six.iteritems(per_variant_components):
-        component = GroupingComponent(
-            id=variant,
-            values=components,
-        )
-        if not component.contributes and precedence_hint:
-            component.update(hint=precedence_hint)
-        rv[variant] = component
-
-    return rv
-
-
-def get_grouping_variants_for_event(event):
-    """Returns a dict of all grouping variants for this event."""
-    # If a checksum is set the only variant that comes back from this
-    # event is the checksum variant.
-    checksum = event.data.get('checksum')
-    if checksum:
-        if HASH_RE.match(checksum):
-            return {
-                'checksum': ChecksumVariant(checksum),
-            }
-        return {
-            'checksum': ChecksumVariant(checksum),
-            'hashed-checksum': ChecksumVariant(hash_from_values(checksum), hashed=True),
-        }
-
-    # Otherwise we go to the various forms of fingerprint handling.
-    fingerprint = event.data.get('fingerprint') or ['{{ default }}']
-    defaults_referenced = sum(1 if d in DEFAULT_FINGERPRINT_VALUES else 0 for d in fingerprint)
-
-    # If no defaults are referenced we produce a single completely custom
-    # fingerprint.
-    if defaults_referenced == 0:
-        return {
-            'custom-fingerprint': CustomFingerprintVariant(fingerprint),
-        }
-
-    # At this point we need to calculate the default event values.  If the
-    # fingerprint is salted we will wrap it.
-    components = get_calculated_grouping_variants_for_event(event)
-    rv = {}
-
-    # If the fingerprints are unsalted, we can return them right away.
-    if defaults_referenced == 1 and len(fingerprint) == 1:
-        for (key, component) in six.iteritems(components):
-            rv[key] = ComponentVariant(component)
-
-    # Otherwise we need to salt each of the components.
-    else:
-        for (key, component) in six.iteritems(components):
-            rv[key] = SaltedComponentVariant(fingerprint, component)
-
-    # Ensure we have a fallback hash if nothing else works out
-    if not any(x.contributes for x in six.itervalues(rv)):
-        rv['fallback'] = FallbackVariant()
-
-    return rv
diff --git a/src/sentry/eventtypes/security.py b/src/sentry/eventtypes/security.py
index dcac14fe80..8e0d558104 100644
--- a/src/sentry/eventtypes/security.py
+++ b/src/sentry/eventtypes/security.py
@@ -17,7 +17,7 @@ class CspEvent(BaseEvent):
 
         return {
             'directive': csp.effective_directive,
-            'uri': csp._normalized_blocked_uri,
+            'uri': csp.normalized_blocked_uri,
             'message': csp.get_message(),
         }
 
diff --git a/src/sentry/grouping/__init__.py b/src/sentry/grouping/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/grouping/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/grouping/api.py b/src/sentry/grouping/api.py
new file mode 100644
index 0000000000..fc1bbf128c
--- /dev/null
+++ b/src/sentry/grouping/api.py
@@ -0,0 +1,104 @@
+from __future__ import absolute_import
+
+import re
+import six
+
+from sentry.grouping.strategies.base import CONFIGURATIONS
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.variants import ChecksumVariant, FallbackVariant, \
+    ComponentVariant, CustomFingerprintVariant, SaltedComponentVariant
+from sentry.grouping.utils import DEFAULT_FINGERPRINT_VALUES, hash_from_values
+
+
+HASH_RE = re.compile(r'^[0-9a-f]{32}$')
+
+
+def get_calculated_grouping_variants_for_event(event, config_name=None):
+    """Given an event this returns a dictionary of the matching grouping
+    variants.  Checksum and fingerprinting logic are not handled by this
+    function which is handled by `get_grouping_variants_for_event`.
+    """
+    winning_strategy = None
+    precedence_hint = None
+    per_variant_components = {}
+
+    config = CONFIGURATIONS[config_name or 'legacy']
+
+    for strategy in config.iter_strategies():
+        rv = strategy.get_grouping_component_variants(event, config=config)
+        for (variant, component) in six.iteritems(rv):
+            per_variant_components.setdefault(variant, []).append(component)
+
+            if winning_strategy is None:
+                if component.contributes:
+                    winning_strategy = strategy.name
+                    precedence_hint = '%s takes precedence' % (
+                        '%s of %s' % (strategy.name, variant) if
+                        variant != 'default' else
+                        strategy.name
+                    )
+            elif component.contributes and winning_strategy != strategy.name:
+                component.update(
+                    contributes=False,
+                    hint=precedence_hint
+                )
+
+    rv = {}
+    for (variant, components) in six.iteritems(per_variant_components):
+        component = GroupingComponent(
+            id=variant,
+            values=components,
+        )
+        if not component.contributes and precedence_hint:
+            component.update(hint=precedence_hint)
+        rv[variant] = component
+
+    return rv
+
+
+def get_grouping_variants_for_event(event):
+    """Returns a dict of all grouping variants for this event."""
+    # If a checksum is set the only variant that comes back from this
+    # event is the checksum variant.
+    checksum = event.data.get('checksum')
+    if checksum:
+        if HASH_RE.match(checksum):
+            return {
+                'checksum': ChecksumVariant(checksum),
+            }
+        return {
+            'checksum': ChecksumVariant(checksum),
+            'hashed-checksum': ChecksumVariant(hash_from_values(checksum), hashed=True),
+        }
+
+    # Otherwise we go to the various forms of fingerprint handling.
+    fingerprint = event.data.get('fingerprint') or ['{{ default }}']
+    defaults_referenced = sum(1 if d in DEFAULT_FINGERPRINT_VALUES else 0 for d in fingerprint)
+
+    # If no defaults are referenced we produce a single completely custom
+    # fingerprint.
+    if defaults_referenced == 0:
+        return {
+            'custom-fingerprint': CustomFingerprintVariant(fingerprint),
+        }
+
+    # At this point we need to calculate the default event values.  If the
+    # fingerprint is salted we will wrap it.
+    components = get_calculated_grouping_variants_for_event(event)
+    rv = {}
+
+    # If the fingerprints are unsalted, we can return them right away.
+    if defaults_referenced == 1 and len(fingerprint) == 1:
+        for (key, component) in six.iteritems(components):
+            rv[key] = ComponentVariant(component)
+
+    # Otherwise we need to salt each of the components.
+    else:
+        for (key, component) in six.iteritems(components):
+            rv[key] = SaltedComponentVariant(fingerprint, component)
+
+    # Ensure we have a fallback hash if nothing else works out
+    if not any(x.contributes for x in six.itervalues(rv)):
+        rv['fallback'] = FallbackVariant()
+
+    return rv
diff --git a/src/sentry/grouping/component.py b/src/sentry/grouping/component.py
new file mode 100644
index 0000000000..025c9d0dbd
--- /dev/null
+++ b/src/sentry/grouping/component.py
@@ -0,0 +1,140 @@
+from __future__ import absolute_import
+
+from sentry.grouping.utils import hash_from_values
+
+
+DEFAULT_HINTS = {
+    'salt': 'a static salt',
+}
+
+# When a component ID appears here it has a human readable name which also
+# makes it a major component.  A major component is described as such for
+# the UI.
+KNOWN_MAJOR_COMPONENT_NAMES = {
+    'app': 'in-app',
+    'exception': 'exception',
+    'stacktrace': 'stacktrace',
+    'threads': 'thread',
+    'hostname': 'hostname',
+    'violation': 'violation',
+    'uri': 'URL',
+    'message': 'message',
+}
+
+
+def _calculate_contributes(values):
+    for value in values or ():
+        if not isinstance(value, GroupingComponent) or value.contributes:
+            return True
+    return False
+
+
+class GroupingComponent(object):
+    """A grouping component is a recursive structure that is flattened
+    into components to make a hash for grouping purposes.
+    """
+
+    def __init__(self, id, hint=None, contributes=None, values=None):
+        self.id = id
+        if hint is None:
+            hint = DEFAULT_HINTS.get(id)
+        self.hint = hint
+        if contributes is None:
+            contributes = _calculate_contributes(values)
+        self.contributes = contributes
+        if values is None:
+            values = []
+        self.values = values
+
+    @property
+    def name(self):
+        return KNOWN_MAJOR_COMPONENT_NAMES.get(self.id)
+
+    @property
+    def description(self):
+        items = []
+
+        def _walk_components(c, stack):
+            stack.append(c.name)
+            for value in c.values:
+                if isinstance(value, GroupingComponent) and value.contributes:
+                    _walk_components(value, stack)
+            parts = filter(None, stack)
+            items.append(parts)
+            stack.pop()
+
+        _walk_components(self, [])
+        items.sort(key=lambda x: (len(x), x))
+
+        if items and items[-1]:
+            return ' '.join(items[-1])
+        return self.name or 'others'
+
+    def get_subcomponent(self, id):
+        """Looks up a subcomponent by the id and returns the first or `None`."""
+        return next(self.iter_subcomponents(id), None)
+
+    def iter_subcomponents(self, id, recursive=False):
+        """Finds all subcomponents matching an id, optionally recursively."""
+        for value in self.values:
+            if isinstance(value, GroupingComponent):
+                if value.id == id:
+                    yield value
+                if recursive:
+                    for subcomponent in value.iter_subcomponents(id, recursive=True):
+                        yield subcomponent
+
+    def update(self, hint=None, contributes=None, values=None):
+        """Updates an already existing component with new values."""
+        if hint is not None:
+            self.hint = hint
+        if values is not None:
+            if contributes is None:
+                contributes = _calculate_contributes(values)
+            self.values = values
+        if contributes is not None:
+            self.contributes = contributes
+
+    def iter_values(self):
+        """Recursively walks the component and flattens it into a list of
+        values.
+        """
+        if self.contributes:
+            for value in self.values:
+                if isinstance(value, GroupingComponent):
+                    for x in value.iter_values():
+                        yield x
+                else:
+                    yield value
+
+    def get_hash(self):
+        """Returns the hash of the values if it contributes."""
+        if self.contributes:
+            return hash_from_values(self.iter_values())
+
+    def as_dict(self):
+        """Converts the component tree into a dictionary."""
+        rv = {
+            'id': self.id,
+            'name': self.name,
+            'contributes': self.contributes,
+            'hint': self.hint,
+            'values': []
+        }
+        for value in self.values:
+            if isinstance(value, GroupingComponent):
+                rv['values'].append(value.as_dict())
+            else:
+                # this basically assumes that a value is only a primitive
+                # and never an object or list.  This should be okay
+                # because we verify this.
+                rv['values'].append(value)
+        return rv
+
+    def __repr__(self):
+        return 'GroupingComponent(%r, hint=%r, contributes=%r, values=%r)' % (
+            self.id,
+            self.hint,
+            self.contributes,
+            self.values,
+        )
diff --git a/src/sentry/grouping/strategies/__init__.py b/src/sentry/grouping/strategies/__init__.py
new file mode 100644
index 0000000000..99fdadf569
--- /dev/null
+++ b/src/sentry/grouping/strategies/__init__.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+
+def _import_all():
+    import pkgutil
+    for _, module, _ in pkgutil.iter_modules(__path__):
+        if module == 'configurations':
+            continue
+        __import__('%s.%s' % (__name__, module))
+
+    # import these last
+    __import__('%s.configurations' % __name__)
+
+
+_import_all()
+del _import_all
diff --git a/src/sentry/grouping/strategies/base.py b/src/sentry/grouping/strategies/base.py
new file mode 100644
index 0000000000..67efb6e6ac
--- /dev/null
+++ b/src/sentry/grouping/strategies/base.py
@@ -0,0 +1,216 @@
+from __future__ import absolute_import
+
+from sentry.grouping.component import GroupingComponent
+
+
+STRATEGIES = {}
+CONFIGURATIONS = {}
+
+
+def strategy(id, variants, interfaces, name=None, score=None):
+    """Registers a strategy"""
+    if name is None:
+        if len(interfaces) != 1:
+            raise RuntimeError('%r requires a name' % id)
+        name = interfaces[0]
+
+    def decorator(f):
+        STRATEGIES[id] = rv = Strategy(
+            id=id,
+            name=name,
+            interfaces=interfaces,
+            variants=variants,
+            score=score,
+            func=f,
+        )
+        return rv
+    return decorator
+
+
+def register_strategy_config(id, strategies, delegates=None):
+    """Registers a strategy config."""
+    rv = StrategyConfiguration(id, strategies, delegates)
+    CONFIGURATIONS[rv.id] = rv
+    return rv
+
+
+def lookup_strategy(strategy_id):
+    """Looks up a strategy by id."""
+    try:
+        return STRATEGIES[strategy_id]
+    except KeyError:
+        raise LookupError('Unknown strategy %r' % strategy_id)
+
+
+class Strategy(object):
+    """Baseclass for all strategies."""
+
+    def __init__(self, id, name, interfaces, variants, score, func):
+        self.id = id
+        self.name = name
+        self.interfaces = interfaces
+        self.mandatory_variants = []
+        self.optional_variants = []
+        self.variants = []
+        for variant in variants:
+            if variant[:1] == '!':
+                self.mandatory_variants.append(variant[1:])
+            else:
+                self.optional_variants.append(variant)
+            self.variants.append(variant)
+        self.score = score
+        self.func = func
+        self.variant_processor_func = None
+
+    def __repr__(self):
+        return '<%s id=%r variants=%r>' % (
+            self.__class__.__name__,
+            self.id,
+            self.variants,
+        )
+
+    def _invoke(self, func, *args, **kwargs):
+        # We forcefully override strategy here.  This lets a strategy
+        # function always access its metadata and directly forward it to
+        # subcomponents without having to filter out strategy.
+        kwargs['strategy'] = self
+        if kwargs.get('config') is None:
+            kwargs['config'] = NOTHING_CONFIG
+        return func(*args, **kwargs)
+
+    def __call__(self, *args, **kwargs):
+        return self._invoke(self.func, *args, **kwargs)
+
+    def variant_processor(self, func):
+        """Registers a variant reducer function that can be used to postprocess
+        all variants created from this strategy.
+        """
+        self.variant_processor_func = func
+        return func
+
+    def get_grouping_component(self, event, variant, config=None):
+        """Given a specific variant this calculates the grouping component.
+        """
+        args = []
+        for iface_path in self.interfaces:
+            iface = event.interfaces.get(iface_path)
+            if iface is None:
+                return None
+            args.append(iface)
+        return self(event=event, variant=variant, config=config, *args)
+
+    def get_grouping_component_variants(self, event, config=None):
+        """This returns a dictionary of all components by variant that this
+        strategy can produce.
+        """
+        rv = {}
+        # trivial case: we do not have mandatory variants and can handle
+        # them all the same.
+        if not self.mandatory_variants:
+            for variant in self.variants:
+                component = self.get_grouping_component(event, variant, config)
+                if component is not None:
+                    rv[variant] = component
+
+        else:
+            mandatory_component_hashes = {}
+            prevent_contribution = None
+
+            for variant in self.mandatory_variants:
+                component = self.get_grouping_component(event, variant, config)
+                if component is None:
+                    continue
+                if component.contributes:
+                    mandatory_component_hashes[component.get_hash()] = variant
+                rv[variant] = component
+
+            prevent_contribution = not mandatory_component_hashes
+
+            for variant in self.optional_variants:
+                # We also only want to create another variant if it
+                # produces different results than the mandatory components
+                component = self.get_grouping_component(event, variant, config)
+                if component is None:
+                    continue
+
+                # In case this variant contributes we need to check two things
+                # here: if we did not have a system match we need to prevent
+                # it from contributing.  Additionally if it matches the system
+                # component we also do not want the variant to contribute but
+                # with a different message.
+                if component.contributes:
+                    if prevent_contribution:
+                        component.update(
+                            contributes=False,
+                            hint='ignored because %s variant is not used' % (
+                                mandatory_component_hashes.values()[0]
+                                if len(mandatory_component_hashes) == 1 else
+                                'other mandatory'
+                            )
+                        )
+                    else:
+                        hash = component.get_hash()
+                        duplicate_of = mandatory_component_hashes.get(hash)
+                        if duplicate_of is not None:
+                            component.update(
+                                contributes=False,
+                                hint='ignored because hash matches %s variant' % duplicate_of
+                            )
+                rv[variant] = component
+
+        if self.variant_processor_func is not None:
+            rv = self._invoke(self.variant_processor_func, rv,
+                              event=event, config=config)
+        return rv
+
+
+class StrategyConfiguration(object):
+
+    def __init__(self, id, strategies, delegates=None):
+        self.id = id
+        self.strategies = {}
+        self.delegates = {}
+
+        for strategy_id in strategies:
+            strategy = lookup_strategy(strategy_id)
+            if strategy.score is None:
+                raise RuntimeError('Unscored strategy %s added to %s' %
+                                   (strategy_id, id))
+            self.strategies[strategy_id] = strategy
+
+        for strategy_id in delegates or ():
+            strategy = lookup_strategy(strategy_id)
+            for interface in strategy.interfaces:
+                if interface in self.delegates:
+                    raise RuntimeError('duplicate interface match for '
+                                       'delegate %r (conflict on %r)' %
+                                       (self.id, interface))
+                self.delegates[interface] = strategy
+
+    def __repr__(self):
+        return '<%s %r>' % (
+            self.__class__.__name__,
+            self.id,
+        )
+
+    def iter_strategies(self):
+        """Iterates over all strategies by highest score to lowest."""
+        return iter(sorted(self.strategies.values(), key=lambda x: -x.score))
+
+    def get_grouping_component(self, interface, *args, **kwargs):
+        """Invokes a delegate grouping strategy.  If no such delegate is
+        configured a fallback grouping component is returned.
+        """
+        path = interface.path
+        strategy = self.delegates.get(path)
+        if strategy is not None:
+            kwargs['config'] = self
+            return strategy(interface, *args, **kwargs)
+        return GroupingComponent(
+            id=path,
+            hint='grouping algorithm does not consider this value',
+        )
+
+
+# A noop config that is passed by default
+NOTHING_CONFIG = register_strategy_config('nothing', {})
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
new file mode 100644
index 0000000000..3888354ea6
--- /dev/null
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+from sentry.grouping.strategies.base import register_strategy_config
+
+
+register_strategy_config(
+    id='legacy',
+    strategies=[
+        'expect-ct:v1',
+        'expect-staple:v1',
+        'hpkp:v1',
+        'csp:v1',
+        'threads:v1',
+        'stacktrace:v1',
+        'chained-exception:v1',
+        'template:v1',
+        'message:v1',
+    ],
+    delegates=[
+        'frame:v1',
+        'stacktrace:v1',
+        'single-exception:v1',
+    ]
+)
diff --git a/src/sentry/grouping/strategies/exception.py b/src/sentry/grouping/strategies/exception.py
new file mode 100644
index 0000000000..f9d3382d0b
--- /dev/null
+++ b/src/sentry/grouping/strategies/exception.py
@@ -0,0 +1,128 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+@strategy(
+    id='single-exception:v1',
+    interfaces=['singleexception'],
+    variants=['!system', 'app'],
+)
+def single_exception_v1(exception, config, **meta):
+    type_component = GroupingComponent(
+        id='type',
+        values=[exception.type] if exception.type else [],
+        contributes=False
+    )
+    value_component = GroupingComponent(
+        id='value',
+        values=[exception.value] if exception.value else [],
+        contributes=False
+    )
+    stacktrace_component = GroupingComponent(id='stacktrace')
+
+    if exception.stacktrace is not None:
+        stacktrace_component = config.get_grouping_component(
+            exception.stacktrace, **meta)
+        if stacktrace_component.contributes:
+            if exception.type:
+                type_component.update(contributes=True)
+                if exception.value:
+                    value_component.update(hint='stacktrace and type take precedence')
+            elif exception.value:
+                value_component.update(hint='stacktrace takes precedence')
+
+    if not stacktrace_component.contributes:
+        if exception.type:
+            type_component.update(contributes=True)
+        if exception.value:
+            value_component.update(contributes=True)
+
+    return GroupingComponent(
+        id='exception',
+        values=[
+            stacktrace_component,
+            type_component,
+            value_component,
+        ]
+    )
+
+
+@strategy(
+    id='chained-exception:v1',
+    interfaces=['exception'],
+    variants=['!system', 'app'],
+    score=2000,
+)
+def chained_exception_v1(chained_exception, config, **meta):
+    # Case 1: we have a single exception, use the single exception
+    # component directly
+    exceptions = chained_exception.exceptions()
+    if len(exceptions) == 1:
+        return config.get_grouping_component(exceptions[0], **meta)
+
+    # Case 2: try to build a new component out of the individual
+    # errors however with a trick.  In case any exeption has a
+    # stacktrace we want to ignore all other exceptions.
+    any_stacktraces = False
+    values = []
+    for exception in exceptions:
+        exception_component = config.get_grouping_component(exception, **meta)
+        stacktrace_component = exception_component.get_subcomponent('stacktrace')
+        if stacktrace_component is not None and \
+           stacktrace_component.contributes:
+            any_stacktraces = True
+        values.append(exception_component)
+
+    if any_stacktraces:
+        for value in values:
+            stacktrace_component = value.get_subcomponent('stacktrace')
+            if stacktrace_component is None or not stacktrace_component.contributes:
+                value.update(
+                    contributes=False,
+                    hint='exception has no stacktrace',
+                )
+
+    return GroupingComponent(
+        id='chained-exception',
+        values=values,
+    )
+
+
+@chained_exception_v1.variant_processor
+def chained_exception_v1_variant_processor(variants, config, **meta):
+    if len(variants) <= 1:
+        return variants
+    any_stacktrace_contributes = False
+    non_contributing_components = []
+    stacktrace_variants = set()
+
+    # In case any of the variants has a contributing stacktrace, we want
+    # to make all other variants non contributing.  Thr e
+    for (key, component) in six.iteritems(variants):
+        if any(s.contributes for s in component.iter_subcomponents(
+                id='stacktrace', recursive=True)):
+            any_stacktrace_contributes = True
+            stacktrace_variants.add(key)
+        else:
+            non_contributing_components.append(component)
+
+    if any_stacktrace_contributes:
+        if len(stacktrace_variants) == 1:
+            hint_suffix = 'but the %s variant does' % next(iter(stacktrace_variants))
+        else:
+            # this branch is basically dead because we only have two
+            # variants right now, but this is so this does not break in
+            # the future.
+            hint_suffix = 'others do'
+        for component in non_contributing_components:
+            component.update(
+                contributes=False,
+                hint='ignored because this variant does not contain a '
+                'stacktrace, but %s' % hint_suffix
+            )
+
+    return variants
diff --git a/src/sentry/grouping/strategies/message.py b/src/sentry/grouping/strategies/message.py
new file mode 100644
index 0000000000..52011fedd2
--- /dev/null
+++ b/src/sentry/grouping/strategies/message.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+@strategy(
+    id='message:v1',
+    interfaces=['message'],
+    variants=['default'],
+    score=0,
+)
+def message_v1(message_interface, **meta):
+    return GroupingComponent(
+        id='message',
+        values=[message_interface.message or message_interface.formatted],
+    )
diff --git a/src/sentry/grouping/strategies/security.py b/src/sentry/grouping/strategies/security.py
new file mode 100644
index 0000000000..c13e929ff2
--- /dev/null
+++ b/src/sentry/grouping/strategies/security.py
@@ -0,0 +1,82 @@
+from __future__ import absolute_import
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+def _security_v1(reported_id, obj):
+    return GroupingComponent(
+        id=reported_id,
+        values=[
+            GroupingComponent(id='salt', values=[reported_id]),
+            GroupingComponent(id='hostname', values=[obj.hostname]),
+        ]
+    )
+
+
+@strategy(
+    id='expect-ct:v1',
+    interfaces=['expectct'],
+    variants=['default'],
+    score=1000,
+)
+def expect_ct_v1(expectct_interface, **meta):
+    return _security_v1('expect-ct', expectct_interface)
+
+
+@strategy(
+    id='expect-staple:v1',
+    interfaces=['expectstaple'],
+    variants=['default'],
+    score=1001,
+)
+def expect_staple_v1(expectstaple_interface, **meta):
+    return _security_v1('expect-staple', expectstaple_interface)
+
+
+@strategy(
+    id='hpkp:v1',
+    interfaces=['hpkp'],
+    variants=['default'],
+    score=1002,
+)
+def hpkp_v1(hpkp_interface, **meta):
+    return _security_v1('hpkp', hpkp_interface)
+
+
+@strategy(
+    id='csp:v1',
+    interfaces=['csp'],
+    variants=['default'],
+    score=1003,
+)
+def csp_v1(csp_interface, **meta):
+    violation_component = GroupingComponent(id='violation')
+    uri_component = GroupingComponent(id='uri')
+
+    if csp_interface.local_script_violation_type:
+        violation_component.update(
+            values=["'%s'" % csp_interface.local_script_violation_type],
+        )
+        uri_component.update(
+            contributes=False,
+            hint='violation takes precedence',
+            values=[csp_interface.normalized_blocked_uri],
+        )
+    else:
+        violation_component.update(
+            contributes=False,
+            hint='not a local script violation',
+        )
+        uri_component.update(
+            values=[csp_interface.normalized_blocked_uri]
+        )
+
+    return GroupingComponent(
+        id='csp',
+        values=[
+            GroupingComponent(id='salt', values=[csp_interface.effective_directive]),
+            violation_component,
+            uri_component,
+        ],
+    )
diff --git a/src/sentry/grouping/strategies/stacktrace.py b/src/sentry/grouping/strategies/stacktrace.py
new file mode 100644
index 0000000000..55fd41f2d2
--- /dev/null
+++ b/src/sentry/grouping/strategies/stacktrace.py
@@ -0,0 +1,391 @@
+from __future__ import absolute_import
+
+import re
+import posixpath
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+_ruby_anon_func = re.compile(r'_\d{2,}')
+_filename_version_re = re.compile(
+    r"""(?:
+    v?(?:\d+\.)*\d+|   # version numbers, v1, 1.0.0
+    [a-f0-9]{7,8}|     # short sha
+    [a-f0-9]{32}|      # md5
+    [a-f0-9]{40}       # sha1
+)/""", re.X | re.I
+)
+
+# OpenJDK auto-generated classes for reflection access:
+#   sun.reflect.GeneratedSerializationConstructorAccessor123
+#   sun.reflect.GeneratedConstructorAccessor456
+# Note that this doesn't cover the following pattern for the sake of
+# backward compatibility (to not to change the existing grouping):
+#   sun.reflect.GeneratedMethodAccessor789
+_java_reflect_enhancer_re = re.compile(
+    r'''(sun\.reflect\.Generated(?:Serialization)?ConstructorAccessor)\d+''',
+    re.X
+)
+
+# Java Spring specific anonymous classes.
+# see: http://mydailyjava.blogspot.co.at/2013/11/cglib-missing-manual.html
+_java_cglib_enhancer_re = re.compile(r'''(\$\$[\w_]+?CGLIB\$\$)[a-fA-F0-9]+(_[0-9]+)?''', re.X)
+
+# Handle Javassist auto-generated classes and filenames:
+#   com.example.api.entry.EntriesResource_$$_javassist_74
+#   com.example.api.entry.EntriesResource_$$_javassist_seam_74
+#   EntriesResource_$$_javassist_seam_74.java
+_java_assist_enhancer_re = re.compile(r'''(\$\$_javassist)(?:_seam)?(?:_[0-9]+)?''', re.X)
+
+# Clojure anon functions are compiled down to myapp.mymodule$fn__12345
+_clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
+
+# fields that need to be the same between frames for them to be considered
+# recursive calls
+RECURSION_COMPARISON_FIELDS = [
+    'abs_path',
+    'package',
+    'module',
+    'filename',
+    'function',
+    'lineno',
+    'colno',
+]
+
+
+def is_url_v1(filename):
+    return filename.startswith(('file:', 'http:', 'https:', 'applewebdata:'))
+
+
+def is_url_frame_v1(frame):
+    if not frame.abs_path:
+        return False
+    # URLs can be generated such that they are:
+    #   blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0
+    # https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
+    if frame.abs_path.startswith('blob:'):
+        return True
+    return is_url_v1(frame.abs_path)
+
+
+def is_unhashable_module_v1(frame, platform):
+    # Fix for the case where module is a partial copy of the URL
+    # and should not be hashed
+    if (platform == 'javascript' and '/' in frame.module
+            and frame.abs_path and frame.abs_path.endswith(frame.module)):
+        return True
+    elif platform == 'java' and '$$Lambda$' in frame.module:
+        return True
+    return False
+
+
+def is_unhashable_function_v1(frame):
+    # TODO(dcramer): lambda$ is Java specific
+    # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
+    # queries and JSON data)
+    return frame.function.startswith(('lambda$', '[Anonymous'))
+
+
+def is_recursion_v1(frame1, frame2):
+    "Returns a boolean indicating whether frames are recursive calls."
+    for field in RECURSION_COMPARISON_FIELDS:
+        if getattr(frame1, field, None) != getattr(frame2, field, None):
+            return False
+
+    return True
+
+
+def remove_module_outliers_v1(module, platform):
+    """Remove things that augment the module but really should not."""
+    if platform == 'java':
+        if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
+            return 'sun.reflect.GeneratedMethodAccessor', 'removed reflection marker'
+        old_module = module
+        module = _java_reflect_enhancer_re.sub(r'\1<auto>', module)
+        module = _java_cglib_enhancer_re.sub(r'\1<auto>', module)
+        module = _java_assist_enhancer_re.sub(r'\1<auto>', module)
+        module = _clojure_enhancer_re.sub(r'\1<auto>', module)
+        if old_module != module:
+            return module, 'removed codegen marker'
+    return module, None
+
+
+def remove_filename_outliers_v1(filename, platform):
+    """
+    Attempt to normalize filenames by removing common platform outliers.
+
+    - Sometimes filename paths contain build numbers
+    """
+    # On cocoa we generally only want to use the last path component as
+    # the filename.  The reason for this is that the chances are very high
+    # that full filenames contain information we do want to strip but
+    # currently can't (for instance because the information we get from
+    # the dwarf files does not contain prefix information) and that might
+    # contain things like /Users/foo/Dropbox/...
+    if platform == 'cocoa':
+        return posixpath.basename(filename), 'stripped to basename'
+
+    removed = []
+    if platform == 'java':
+        new_filename = _java_assist_enhancer_re.sub(r'\1<auto>', filename)
+        if new_filename != filename:
+            removed.append('javassist parts')
+            filename = new_filename
+
+    new_filename = _filename_version_re.sub('<version>/', filename)
+    if new_filename != filename:
+        removed.append('version')
+        filename = new_filename
+
+    if removed:
+        return filename, 'removed %s' % ' and '.join(removed)
+    return filename, None
+
+
+def remove_function_outliers_v1(function):
+    """
+    Attempt to normalize functions by removing common platform outliers.
+
+    - Ruby generates (random?) integers for various anonymous style functions
+      such as in erb and the active_support library.
+    - Block functions have metadata that we don't care about.
+    """
+    if function.startswith('block '):
+        return 'block', 'ruby block'
+    new_function = _ruby_anon_func.sub('_<anon>', function)
+    if new_function != function:
+        return new_function, 'trimmed integer suffix'
+    return new_function, None
+
+
+@strategy(
+    id='frame:v1',
+    interfaces=['frame'],
+    variants=['!system', 'app'],
+)
+def frame_v1(frame, event, **meta):
+    platform = frame.platform or event.platform
+
+    # In certain situations we want to disregard the entire frame.
+    contributes = None
+    hint = None
+
+    # Safari throws [native code] frames in for calls like ``forEach``
+    # whereas Chrome ignores these. Let's remove it from the hashing algo
+    # so that they're more likely to group together
+    filename_component = GroupingComponent(id='filename')
+    if frame.filename == '<anonymous>':
+        filename_component.update(
+            contributes=False,
+            values=[frame.filename],
+            hint='anonymous filename discarded'
+        )
+    elif frame.filename == '[native code]':
+        contributes = False
+        hint = 'native code indicated by filename'
+    elif frame.filename:
+        if is_url_frame_v1(frame):
+            filename_component.update(
+                contributes=False,
+                values=[frame.filename],
+                hint='ignored because filename is a URL',
+            )
+        # XXX(dcramer): dont compute hash using frames containing the 'Caused by'
+        # text as it contains an exception value which may may contain dynamic
+        # values (see raven-java#125)
+        elif frame.filename.startswith('Caused by: '):
+            filename_component.update(
+                values=[frame.filename],
+                contributes=False,
+                hint='ignored because invalid'
+            )
+        else:
+            hashable_filename, hashable_filename_hint = \
+                remove_filename_outliers_v1(frame.filename, platform)
+            filename_component.update(
+                values=[hashable_filename],
+                hint=hashable_filename_hint
+            )
+
+    # if we have a module we use that for grouping.  This will always
+    # take precedence over the filename, even if the module is
+    # considered unhashable.
+    module_component = GroupingComponent(id='module')
+    if frame.module:
+        if is_unhashable_module_v1(frame, platform):
+            module_component.update(
+                values=[GroupingComponent(
+                    id='salt',
+                    values=['<module>'],
+                    hint='normalized generated module name'
+                )],
+                hint='ignored module',
+            )
+        else:
+            module_name, module_hint = \
+                remove_module_outliers_v1(frame.module, platform)
+            module_component.update(
+                values=[module_name],
+                hint=module_hint
+            )
+        if frame.filename:
+            filename_component.update(
+                values=[frame.filename],
+                contributes=False,
+                hint='module takes precedence'
+            )
+
+    # Context line when available is the primary contributor
+    context_line_component = GroupingComponent(id='context-line')
+    if frame.context_line is not None:
+        if len(frame.context_line) > 120:
+            context_line_component.update(hint='discarded because line too long')
+        elif is_url_frame_v1(frame) and not frame.function:
+            context_line_component.update(hint='discarded because from URL origin')
+        else:
+            context_line_component.update(values=[frame.context_line])
+
+    symbol_component = GroupingComponent(id='symbol')
+    function_component = GroupingComponent(id='function')
+    lineno_component = GroupingComponent(id='lineno')
+
+    # The context line grouping information is the most reliable one.
+    # If we did not manage to find some information there, we want to
+    # see if we can come up with some extra information.  We only want
+    # to do that if we managed to get a module of filename.
+    if not context_line_component.contributes and \
+       (module_component.contributes or filename_component.contributes):
+        if frame.symbol:
+            symbol_component.update(values=[frame.symbol])
+            if frame.function:
+                function_component.update(
+                    contributes=False,
+                    values=[frame.function],
+                    hint='symbol takes precedence'
+                )
+            if frame.lineno:
+                lineno_component.update(
+                    contributes=False,
+                    values=[frame.lineno],
+                    hint='symbol takes precedence'
+                )
+        elif frame.function:
+            if is_unhashable_function_v1(frame):
+                function_component.update(values=[
+                    GroupingComponent(
+                        id='salt',
+                        values=['<function>'],
+                        hint='normalized lambda function name'
+                    )
+                ])
+            else:
+                function, function_hint = remove_function_outliers_v1(frame.function)
+                function_component.update(
+                    values=[function],
+                    hint=function_hint
+                )
+            if frame.lineno:
+                lineno_component.update(
+                    contributes=False,
+                    values=[frame.lineno],
+                    hint='function takes precedence'
+                )
+        elif frame.lineno:
+            lineno_component.update(values=[frame.lineno])
+    else:
+        if frame.symbol:
+            symbol_component.update(
+                contributes=False,
+                values=[frame.symbol],
+                hint='symbol is used only if module or filename are available'
+            )
+        if frame.function:
+            function_component.update(
+                contributes=False,
+                values=[frame.function],
+                hint='function name is used only if module or filename are available'
+            )
+        if frame.lineno:
+            lineno_component.update(
+                contributes=False,
+                values=[frame.lineno],
+                hint='line number is used only if module or filename are available'
+            )
+
+    return GroupingComponent(
+        id='frame',
+        values=[
+            module_component,
+            filename_component,
+            context_line_component,
+            symbol_component,
+            function_component,
+            lineno_component,
+        ],
+        contributes=contributes,
+        hint=hint,
+    )
+
+
+@strategy(
+    id='stacktrace:v1',
+    interfaces=['stacktrace'],
+    variants=['!system', 'app'],
+    score=1800,
+)
+def stacktrace_v1(stacktrace, config, variant, **meta):
+    frames = stacktrace.frames
+    contributes = None
+    hint = None
+    all_frames_considered_in_app = False
+
+    # TODO(dcramer): this should apply only to platform=javascript
+    # Browser JS will often throw errors (from inlined code in an HTML page)
+    # which contain only a single frame, no function name, and have the HTML
+    # document as the filename. In this case the hash is often not usable as
+    # the context cannot be trusted and the URL is dynamic (this also means
+    # the line number cannot be trusted).
+    if (len(frames) == 1 and not frames[0].function and frames[0].is_url()):
+        contributes = False
+        hint = 'ignored single frame stack'
+    elif variant == 'app':
+        total_frames = len(frames)
+        in_app_count = sum(1 if f.in_app else 0 for f in frames)
+        if in_app_count == 0:
+            in_app_count = total_frames
+            all_frames_considered_in_app = True
+
+        # if app frames make up less than 10% of the stacktrace discard
+        # the hash as invalid
+        if total_frames > 0 and in_app_count / float(total_frames) < 0.10:
+            contributes = False
+            hint = 'less than 10% of frames are in-app'
+
+    values = []
+    prev_frame = None
+    for frame in frames:
+        frame_component = config.get_grouping_component(frame, variant=variant, **meta)
+        if variant == 'app' and not frame.in_app and not all_frames_considered_in_app:
+            frame_component.update(
+                contributes=False,
+                hint='non app frame',
+            )
+        elif prev_frame is not None and is_recursion_v1(frame, prev_frame):
+            frame_component.update(
+                contributes=False,
+                hint='ignored due to recursion',
+            )
+        elif variant == 'app' and not frame.in_app and all_frames_considered_in_app:
+            frame_component.update(
+                hint='frame considered in-app because no frame is in-app'
+            )
+        values.append(frame_component)
+        prev_frame = frame
+
+    return GroupingComponent(
+        id='stacktrace',
+        values=values,
+        contributes=contributes,
+        hint=hint,
+    )
diff --git a/src/sentry/grouping/strategies/template.py b/src/sentry/grouping/strategies/template.py
new file mode 100644
index 0000000000..539ab74006
--- /dev/null
+++ b/src/sentry/grouping/strategies/template.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+@strategy(
+    id='template:v1',
+    interfaces=['template'],
+    variants=['default'],
+    score=1100,
+)
+def message_v1(template, **meta):
+    filename_component = GroupingComponent(id='filename')
+    if template.filename is not None:
+        filename_component.update(values=[template.filename])
+
+    context_line_component = GroupingComponent(id='context-line')
+    if template.context_line is not None:
+        context_line_component.update(values=[template.context_line])
+
+    return GroupingComponent(
+        id='template',
+        values=[
+            filename_component,
+            context_line_component,
+        ]
+    )
diff --git a/src/sentry/grouping/strategies/threads.py b/src/sentry/grouping/strategies/threads.py
new file mode 100644
index 0000000000..c539463466
--- /dev/null
+++ b/src/sentry/grouping/strategies/threads.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from sentry.grouping.component import GroupingComponent
+from sentry.grouping.strategies.base import strategy
+
+
+@strategy(
+    id='threads:v1',
+    interfaces=['threads'],
+    variants=['!system', 'app'],
+    score=1900,
+)
+def threads_v1(threads_interface, config, **meta):
+    thread_count = len(threads_interface.values)
+    if thread_count != 1:
+        return GroupingComponent(
+            id='threads',
+            contributes=False,
+            hint='ignored because contains %d threads' % thread_count,
+        )
+
+    stacktrace = threads_interface.values[0].get('stacktrace')
+    if not stacktrace:
+        return GroupingComponent(
+            id='threads',
+            contributes=False,
+            hint='thread has no stacktrace',
+        )
+
+    return GroupingComponent(
+        id='threads',
+        values=[config.get_grouping_component(stacktrace, **meta)],
+    )
diff --git a/src/sentry/grouping/utils.py b/src/sentry/grouping/utils.py
new file mode 100644
index 0000000000..79f1e214a3
--- /dev/null
+++ b/src/sentry/grouping/utils.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from hashlib import md5
+
+from django.utils.encoding import force_bytes
+
+DEFAULT_FINGERPRINT_VALUES = frozenset(['{{ default }}', '{{default}}'])
+
+
+def hash_from_values(values):
+    result = md5()
+    for value in values:
+        result.update(force_bytes(value, errors='replace'))
+    return result.hexdigest()
diff --git a/src/sentry/grouping/variants.py b/src/sentry/grouping/variants.py
new file mode 100644
index 0000000000..f371c0e2c8
--- /dev/null
+++ b/src/sentry/grouping/variants.py
@@ -0,0 +1,143 @@
+from __future__ import absolute_import
+
+from sentry.grouping.utils import hash_from_values, DEFAULT_FINGERPRINT_VALUES
+
+
+class BaseVariant(object):
+    # The type of the variant that is reported to the UI.
+    type = None
+
+    # This is true if `get_hash` does not return `None`.
+    contributes = True
+
+    def get_hash(self):
+        return None
+
+    @property
+    def description(self):
+        return self.type
+
+    def _get_metadata_as_dict(self):
+        return {}
+
+    def as_dict(self):
+        rv = {
+            'type': self.type,
+            'description': self.description,
+            'hash': self.get_hash(),
+        }
+        rv.update(self._get_metadata_as_dict())
+        return rv
+
+    def __repr__(self):
+        return '<%s %r (%s)>' % (
+            self.__class__.__name__,
+            self.get_hash(),
+            self.type,
+        )
+
+
+class ChecksumVariant(BaseVariant):
+    """A checksum variant returns a single hardcoded hash."""
+    type = 'checksum'
+
+    def __init__(self, hash, hashed=False):
+        self.hash = hash
+        self.hashed = hashed
+
+    @property
+    def description(self):
+        if self.hashed:
+            return 'hashed legacy checksum'
+        return 'legacy checksum'
+
+    def get_hash(self):
+        return self.hash
+
+
+class FallbackVariant(BaseVariant):
+    id = 'fallback'
+    contributes = True
+
+    def get_hash(self):
+        return hash_from_values([])
+
+
+class ComponentVariant(BaseVariant):
+    """A component variant is a variant that produces a hash from the
+    `GroupComponent` it encloses.
+    """
+    type = 'component'
+
+    def __init__(self, component):
+        self.component = component
+
+    @property
+    def description(self):
+        return self.component.description
+
+    @property
+    def contributes(self):
+        return self.component.contributes
+
+    def get_hash(self):
+        return self.component.get_hash()
+
+    def _get_metadata_as_dict(self):
+        return {
+            'component': self.component.as_dict(),
+        }
+
+
+class CustomFingerprintVariant(BaseVariant):
+    """A completely custom fingerprint."""
+    type = 'custom-fingerprint'
+
+    def __init__(self, values):
+        self.values = values
+
+    @property
+    def description(self):
+        return 'custom fingerprint'
+
+    def get_hash(self):
+        return hash_from_values(self.values)
+
+    def _get_metadata_as_dict(self):
+        return {
+            'values': self.values,
+        }
+
+
+class SaltedComponentVariant(BaseVariant):
+    """A salted version of a component."""
+    type = 'salted-component'
+
+    def __init__(self, values, component):
+        self.values = values
+        self.component = component
+
+    @property
+    def description(self):
+        return 'modified ' + self.component.description
+
+    @property
+    def contributes(self):
+        return self.component.contributes
+
+    def get_hash(self):
+        if not self.component.contributes:
+            return None
+        final_values = []
+        for value in self.values:
+            if value in DEFAULT_FINGERPRINT_VALUES:
+                final_values.extend(self.component.iter_values())
+            else:
+                final_values.append(value)
+        return hash_from_values(final_values)
+
+    def _get_metadata_as_dict(self):
+        return {
+            'values': self.values,
+            'component': self.component.as_dict(),
+        }
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 67495029ae..308d459491 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -199,80 +199,6 @@ class Interface(object):
     def to_json(self):
         return prune_empty_keys(self._data)
 
-    def get_grouping_component(self, platform=None, variant=None):
-        """Based on the variant passed this must return either `None` if the
-        variant is not supported or a `sentry.event_hashing.GroupingComponent`.
-        """
-        return None
-
-    def get_grouping_component_variants(self, platform=None):
-        """This returns a dictionary of all variants this interface has
-        grouping components for.  Note that this can also produce components
-        that are not contributing.
-
-        This will use all the variants mentioned in `grouping_variants` on the
-        class.  This might recursively invoke nested interface in which case
-        extra care needs to be taken that variants are passed appropriately.
-        Special handling is applied to the `system` variant.  If the system
-        variant is defined it will be probed first.  If there is no match on
-        `system` then all other variants are skipped as well.
-        """
-        rv = {}
-
-        # In case the system variant (which is special) is not being
-        # produced by this interface we can make a simplified logic here
-        # where all variants contribute equially and without special
-        # handling
-        if 'system' not in self.grouping_variants:
-            for variant in self.grouping_variants:
-                component = self.get_grouping_component(platform, variant)
-                if component is not None:
-                    rv[variant] = component
-            return rv
-
-        # The system handling is special because we first need to match
-        # the system variant, and in case this contributes we want to
-        # let all other variants also contribute (for as long as the hash
-        # is different).  In case however the system component does not
-        # exist or does not contribute, we want to also have all other
-        # variants not contribute either.
-        system_component = self.get_grouping_component(platform, variant='system')
-
-        prevent_contribution = True
-        if system_component is not None:
-            rv['system'] = system_component
-            prevent_contribution = not system_component.contributes
-
-        for variant in self.grouping_variants:
-            if variant == 'system':
-                continue
-
-            # We also only want to create another variant if it
-            # produces different results than the system component
-            component = self.get_grouping_component(platform, variant=variant)
-            if component is None:
-                continue
-
-            # In case this variant contributes we need to check two things
-            # here: if we did not have a system match we need to prevent
-            # it from contributing.  Additionally if it matches the system
-            # component we also do not want the variant to contribute but
-            # with a different message.
-            if component.contributes:
-                if prevent_contribution:
-                    component.update(
-                        contributes=False,
-                        hint='ignored because system variant is not used'
-                    )
-                elif system_component.get_hash() == component.get_hash():
-                    component.update(
-                        contributes=False,
-                        hint='ignored because hash matches system variant'
-                    )
-            rv[variant] = component
-
-        return rv
-
     def get_title(self):
         return _(type(self).__name__)
 
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index b8a0016e40..02bee58692 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -20,7 +20,6 @@ from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
 from sentry.utils import json
 from sentry.utils.safe import get_path, trim
-from sentry.event_hashing import GroupingComponent
 
 _type_value_re = re.compile('^(\w+):(.*)$')
 
@@ -855,8 +854,6 @@ class SingleException(Interface):
     >>>     }
     >>> }
     """
-    score = 2000
-    path = 'exception'
     grouping_variants = ['system', 'app']
 
     @classmethod
@@ -981,49 +978,6 @@ class SingleException(Interface):
             'stacktrace': stacktrace_meta,
         }
 
-    def get_grouping_component(self, platform=None, variant=None):
-        type_component = GroupingComponent(
-            id='type',
-            values=[self.type] if self.type else [],
-            contributes=False
-        )
-        value_component = GroupingComponent(
-            id='value',
-            values=[self.value] if self.value else [],
-            contributes=False
-        )
-        stacktrace_component = GroupingComponent(id='stacktrace')
-
-        if self.stacktrace is not None:
-            stacktrace_component = self.stacktrace.get_grouping_component(
-                platform, variant)
-            if stacktrace_component.contributes:
-                if self.type:
-                    type_component.update(contributes=True)
-                    if self.value:
-                        value_component.update(hint='stacktrace and type take precedence')
-                elif self.value:
-                    value_component.update(hint='stacktrace takes precedence')
-
-        if not stacktrace_component.contributes:
-            if self.type:
-                type_component.update(contributes=True)
-            if self.value:
-                value_component.update(contributes=True)
-
-        return GroupingComponent(
-            id='exception',
-            values=[
-                stacktrace_component,
-                type_component,
-                value_component,
-            ]
-        )
-
-    def get_grouping_component_variants(self, platform=None):
-        return uncontribute_non_stacktrace_variants(
-            Interface.get_grouping_component_variants(self, platform))
-
 
 class Exception(Interface):
     """
@@ -1061,17 +1015,17 @@ class Exception(Interface):
     score = 2000
     grouping_variants = ['system', 'app']
 
-    def _values(self):
+    def exceptions(self):
         return get_path(self.values, filter=True)
 
     def __getitem__(self, key):
-        return self._values()[key]
+        return self.exceptions()[key]
 
     def __iter__(self):
-        return iter(self._values())
+        return iter(self.exceptions())
 
     def __len__(self):
-        return len(self._values())
+        return len(self.exceptions())
 
     @classmethod
     def to_python(cls, data):
@@ -1110,44 +1064,6 @@ class Exception(Interface):
             'exc_omitted': self.exc_omitted,
         })
 
-    def get_grouping_component(self, platform=None, variant=None):
-        # Case 1: we have a single exception, use the single exception
-        # component directly
-        exceptions = self._values()
-        if len(exceptions) == 1:
-            return exceptions[0].get_grouping_component(platform, variant)
-
-        # Case 2: try to build a new component out of the individual
-        # errors however with a trick.  In case any exeption has a
-        # stacktrace we want to ignore all other exceptions.
-        any_stacktraces = False
-        values = []
-        for exception in exceptions:
-            exception_component = exception.get_grouping_component(platform, variant)
-            stacktrace_component = exception_component.get_subcomponent('stacktrace')
-            if stacktrace_component is not None and \
-               stacktrace_component.contributes:
-                any_stacktraces = True
-            values.append(exception_component)
-
-        if any_stacktraces:
-            for value in values:
-                stacktrace_component = value.get_subcomponent('stacktrace')
-                if stacktrace_component is None or not stacktrace_component.contributes:
-                    value.update(
-                        contributes=False,
-                        hint='exception has no stacktrace',
-                    )
-
-        return GroupingComponent(
-            id='chained-exception',
-            values=values,
-        )
-
-    def get_grouping_component_variants(self, platform=None):
-        return uncontribute_non_stacktrace_variants(
-            Interface.get_grouping_component_variants(self, platform))
-
     def get_api_context(self, is_public=False):
         return {
             'values': [v.get_api_context(is_public=is_public) for v in self.values if v],
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index 80de5deb4c..e35e168ea5 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -15,7 +15,6 @@ import six
 from django.conf import settings
 
 from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
-from sentry.event_hashing import GroupingComponent
 from sentry.utils import json
 from sentry.utils.safe import trim
 
@@ -90,11 +89,5 @@ class Message(Interface):
             'params': self.params or None
         })
 
-    def get_grouping_component(self, platform=None, variant=None):
-        return GroupingComponent(
-            id='message',
-            values=[self.message or self.formatted],
-        )
-
     def to_string(self, event, is_public=False, **kwargs):
         return self.formatted or self.message
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index 596ecab425..b7cb989f50 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -22,7 +22,6 @@ from sentry.utils.cache import memoize
 from sentry.utils.http import is_valid_origin
 from sentry.utils.safe import trim
 from sentry.web.helpers import render_to_string
-from sentry.event_hashing import GroupingComponent
 
 # Default block list sourced from personal experience as well as
 # reputable blogs from Twitter and Dropbox
@@ -172,15 +171,6 @@ class Hpkp(SecurityReport):
     def get_culprit(self):
         return None
 
-    def get_grouping_component(self, platform=None, variant=None):
-        return GroupingComponent(
-            id='hpkp',
-            values=[
-                GroupingComponent(id='salt', values=['hpkp']),
-                GroupingComponent(id='hostname', values=[self.hostname]),
-            ]
-        )
-
     def get_message(self):
         return u"Public key pinning validation failed for '{self.hostname}'".format(self=self)
 
@@ -242,15 +232,6 @@ class ExpectStaple(SecurityReport):
     def get_culprit(self):
         return self.hostname
 
-    def get_grouping_component(self, platform=None, variant=None):
-        return GroupingComponent(
-            id='expect-staple',
-            values=[
-                GroupingComponent(id='salt', values=['expect-staple']),
-                GroupingComponent(id='hostname', values=[self.hostname]),
-            ]
-        )
-
     def get_message(self):
         return u"Expect-Staple failed for '{self.hostname}'".format(self=self)
 
@@ -310,15 +291,6 @@ class ExpectCT(SecurityReport):
     def get_culprit(self):
         return self.hostname
 
-    def get_grouping_component(self, platform=None, variant=None):
-        return GroupingComponent(
-            id='expect-ct',
-            values=[
-                GroupingComponent(id='salt', values=['expect-ct']),
-                GroupingComponent(id='hostname', values=[self.hostname]),
-            ]
-        )
-
     def get_message(self):
         return u"Expect-CT failed for '{self.hostname}'".format(self=self)
 
@@ -372,37 +344,6 @@ class Csp(SecurityReport):
 
         return cls.to_python(kwargs)
 
-    def get_grouping_component(self, platform=None, variant=None):
-        violation_component = GroupingComponent(id='violation')
-        uri_component = GroupingComponent(id='uri')
-
-        if self._local_script_violation_type:
-            violation_component.update(
-                values=["'%s'" % self._local_script_violation_type],
-            )
-            uri_component.update(
-                contributes=False,
-                hint='violation takes precedence',
-                values=[self._normalized_blocked_uri],
-            )
-        else:
-            violation_component.update(
-                contributes=False,
-                hint='not a local script violation',
-            )
-            uri_component.update(
-                values=[self._normalized_blocked_uri]
-            )
-
-        return GroupingComponent(
-            id='csp',
-            values=[
-                GroupingComponent(id='salt', values=[self.effective_directive]),
-                violation_component,
-                uri_component,
-            ],
-        )
-
     def get_message(self):
         templates = {
             'child-src': (u"Blocked 'child' from '{uri}'", "Blocked inline 'child'"),
@@ -424,8 +365,8 @@ class Csp(SecurityReport):
         }
         default_template = ('Blocked {directive!r} from {uri!r}', 'Blocked inline {directive!r}')
 
-        directive = self._local_script_violation_type or self.effective_directive
-        uri = self._normalized_blocked_uri
+        directive = self.local_script_violation_type or self.effective_directive
+        uri = self.normalized_blocked_uri
         index = 1 if uri == self.LOCAL else 0
 
         try:
@@ -495,7 +436,7 @@ class Csp(SecurityReport):
         return uri
 
     @memoize
-    def _normalized_blocked_uri(self):
+    def normalized_blocked_uri(self):
         return self._normalize_uri(self.blocked_uri)
 
     @memoize
@@ -542,13 +483,13 @@ class Csp(SecurityReport):
         return self._unsplit(scheme, value)
 
     @memoize
-    def _local_script_violation_type(self):
+    def local_script_violation_type(self):
         """
         If this is a locally-sourced script-src error, gives the type.
         """
         if (self.violated_directive
                 and self.effective_directive == 'script-src'
-                and self._normalized_blocked_uri == self.LOCAL):
+                and self.normalized_blocked_uri == self.LOCAL):
             if "'unsafe-inline'" in self.violated_directive:
                 return "unsafe-inline"
             elif "'unsafe-eval'" in self.violated_directive:
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index bffc01f64b..31cf787954 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -12,7 +12,6 @@ __all__ = ('Stacktrace', )
 
 import re
 import six
-import posixpath
 from itertools import islice, chain
 
 from django.conf import settings
@@ -25,58 +24,12 @@ from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.models import UserOption
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
-from sentry.event_hashing import GroupingComponent
-
-_ruby_anon_func = re.compile(r'_\d{2,}')
-_filename_version_re = re.compile(
-    r"""(?:
-    v?(?:\d+\.)*\d+|   # version numbers, v1, 1.0.0
-    [a-f0-9]{7,8}|     # short sha
-    [a-f0-9]{32}|      # md5
-    [a-f0-9]{40}       # sha1
-)/""", re.X | re.I
-)
+
 
 # Native function trim re.  For now this is a simple hack until we have the
 # language hints in which will let us trim this down better.
 _native_function_trim_re = re.compile(r'^(.[^(]*)\(')
 
-# OpenJDK auto-generated classes for reflection access:
-#   sun.reflect.GeneratedSerializationConstructorAccessor123
-#   sun.reflect.GeneratedConstructorAccessor456
-# Note that this doesn't cover the following pattern for the sake of
-# backward compatibility (to not to change the existing grouping):
-#   sun.reflect.GeneratedMethodAccessor789
-_java_reflect_enhancer_re = re.compile(
-    r'''(sun\.reflect\.Generated(?:Serialization)?ConstructorAccessor)\d+''',
-    re.X
-)
-
-# Java Spring specific anonymous classes.
-# see: http://mydailyjava.blogspot.co.at/2013/11/cglib-missing-manual.html
-_java_cglib_enhancer_re = re.compile(r'''(\$\$[\w_]+?CGLIB\$\$)[a-fA-F0-9]+(_[0-9]+)?''', re.X)
-
-# Handle Javassist auto-generated classes and filenames:
-#   com.example.api.entry.EntriesResource_$$_javassist_74
-#   com.example.api.entry.EntriesResource_$$_javassist_seam_74
-#   EntriesResource_$$_javassist_seam_74.java
-_java_assist_enhancer_re = re.compile(r'''(\$\$_javassist)(?:_seam)?(?:_[0-9]+)?''', re.X)
-
-# Clojure anon functions are compiled down to myapp.mymodule$fn__12345
-_clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
-
-# fields that need to be the same between frames for them to be considered
-# recursive calls
-RECURSION_COMPARISON_FIELDS = [
-    'abs_path',
-    'package',
-    'module',
-    'filename',
-    'function',
-    'lineno',
-    'colno',
-]
-
 
 def max_addr(cur, addr):
     if addr is None:
@@ -132,7 +85,7 @@ def to_hex_addr(addr):
     return rv
 
 
-def get_context(lineno, context_line, pre_context=None, post_context=None, filename=None):
+def get_context(lineno, context_line, pre_context=None, post_context=None):
     if lineno is None:
         return []
 
@@ -163,10 +116,6 @@ def get_context(lineno, context_line, pre_context=None, post_context=None, filen
             context.append((at_lineno, line))
             at_lineno += 1
 
-    # HACK:
-    if filename and is_url(filename) and '.' not in filename.rsplit('/', 1)[-1]:
-        filename = 'index.html'
-
     return context
 
 
@@ -191,69 +140,6 @@ def is_url(filename):
     return filename.startswith(('file:', 'http:', 'https:', 'applewebdata:'))
 
 
-def remove_function_outliers(function):
-    """
-    Attempt to normalize functions by removing common platform outliers.
-
-    - Ruby generates (random?) integers for various anonymous style functions
-      such as in erb and the active_support library.
-    - Block functions have metadata that we don't care about.
-    """
-    if function.startswith('block '):
-        return 'block', 'ruby block'
-    new_function = _ruby_anon_func.sub('_<anon>', function)
-    if new_function != function:
-        return new_function, 'trimmed integer suffix'
-    return new_function, None
-
-
-def remove_filename_outliers(filename, platform=None):
-    """
-    Attempt to normalize filenames by removing common platform outliers.
-
-    - Sometimes filename paths contain build numbers
-    """
-    # On cocoa we generally only want to use the last path component as
-    # the filename.  The reason for this is that the chances are very high
-    # that full filenames contain information we do want to strip but
-    # currently can't (for instance because the information we get from
-    # the dwarf files does not contain prefix information) and that might
-    # contain things like /Users/foo/Dropbox/...
-    if platform == 'cocoa':
-        return posixpath.basename(filename), 'stripped to basename'
-
-    removed = []
-    if platform == 'java':
-        new_filename = _java_assist_enhancer_re.sub(r'\1<auto>', filename)
-        if new_filename != filename:
-            removed.append('javassist parts')
-            filename = new_filename
-
-    new_filename = _filename_version_re.sub('<version>/', filename)
-    if new_filename != filename:
-        removed.append('version')
-        filename = new_filename
-
-    if removed:
-        return filename, 'removed %s' % ' and '.join(removed)
-    return filename, None
-
-
-def remove_module_outliers(module, platform=None):
-    """Remove things that augment the module but really should not."""
-    if platform == 'java':
-        if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
-            return 'sun.reflect.GeneratedMethodAccessor', 'removed reflection marker'
-        old_module = module
-        module = _java_reflect_enhancer_re.sub(r'\1<auto>', module)
-        module = _java_cglib_enhancer_re.sub(r'\1<auto>', module)
-        module = _java_assist_enhancer_re.sub(r'\1<auto>', module)
-        module = _clojure_enhancer_re.sub(r'\1<auto>', module)
-        if old_module != module:
-            return module, 'removed codegen marker'
-    return module, None
-
-
 def slim_frame_data(frames, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
     """
     Removes various excess metadata from middle frames which go beyond
@@ -324,15 +210,6 @@ def handle_nan(value):
     return value
 
 
-def is_recursion(frame1, frame2):
-    "Returns a boolean indicating whether frames are recursive calls."
-    for field in RECURSION_COMPARISON_FIELDS:
-        if getattr(frame1, field, None) != getattr(frame2, field, None):
-            return False
-
-    return True
-
-
 class Frame(Interface):
     grouping_variants = ['system', 'app']
 
@@ -473,166 +350,6 @@ class Frame(Interface):
             'colno': self.colno
         })
 
-    def get_grouping_component(self, platform=None, variant=None):
-        platform = self.platform or platform
-
-        # In certain situations we want to disregard the entire frame.
-        contributes = None
-        hint = None
-
-        # Safari throws [native code] frames in for calls like ``forEach``
-        # whereas Chrome ignores these. Let's remove it from the hashing algo
-        # so that they're more likely to group together
-        filename_component = GroupingComponent(id='filename')
-        if self.filename == '<anonymous>':
-            filename_component.update(
-                contributes=False,
-                values=[self.filename],
-                hint='anonymous filename discarded'
-            )
-        elif self.filename == '[native code]':
-            contributes = False
-            hint = 'native code indicated by filename'
-        elif self.filename:
-            if self.is_url():
-                filename_component.update(
-                    contributes=False,
-                    values=[self.filename],
-                    hint='ignored because filename is a URL',
-                )
-            elif self.is_caused_by():
-                filename_component.update(
-                    values=[self.filename],
-                    contributes=False,
-                    hint='ignored because invalid'
-                )
-            else:
-                hashable_filename, hashable_filename_hint = \
-                    remove_filename_outliers(self.filename, platform)
-                filename_component.update(
-                    values=[hashable_filename],
-                    hint=hashable_filename_hint
-                )
-
-        # if we have a module we use that for grouping.  This will always
-        # take precedence over the filename, even if the module is
-        # considered unhashable.
-        module_component = GroupingComponent(id='module')
-        if self.module:
-            if self.is_unhashable_module(platform):
-                module_component.update(
-                    values=[GroupingComponent(
-                        id='salt',
-                        values=['<module>'],
-                        hint='normalized generated module name'
-                    )],
-                    hint='ignored module',
-                )
-            else:
-                module_name, module_hint = \
-                    remove_module_outliers(self.module, platform)
-                module_component.update(
-                    values=[module_name],
-                    hint=module_hint
-                )
-            if self.filename:
-                filename_component.update(
-                    values=[self.filename],
-                    contributes=False,
-                    hint='module takes precedence'
-                )
-
-        # Context line when available is the primary contributor
-        context_line_component = GroupingComponent(id='context-line')
-        if self.context_line is not None:
-            if len(self.context_line) > 120:
-                context_line_component.update(hint='discarded because line too long')
-            elif self.is_url() and not self.function:
-                context_line_component.update(hint='discarded because from URL origin')
-            else:
-                context_line_component.update(values=[self.context_line])
-
-        symbol_component = GroupingComponent(id='symbol')
-        function_component = GroupingComponent(id='function')
-        lineno_component = GroupingComponent(id='lineno')
-
-        # The context line grouping information is the most reliable one.
-        # If we did not manage to find some information there, we want to
-        # see if we can come up with some extra information.  We only want
-        # to do that if we managed to get a module of filename.
-        if not context_line_component.contributes and \
-           (module_component.contributes or filename_component.contributes):
-            if self.symbol:
-                symbol_component.update(values=[self.symbol])
-                if self.function:
-                    function_component.update(
-                        contributes=False,
-                        values=[self.function],
-                        hint='symbol takes precedence'
-                    )
-                if self.lineno:
-                    lineno_component.update(
-                        contributes=False,
-                        values=[self.lineno],
-                        hint='symbol takes precedence'
-                    )
-            elif self.function:
-                if self.is_unhashable_function():
-                    function_component.update(values=[
-                        GroupingComponent(
-                            id='salt',
-                            values=['<function>'],
-                            hint='normalized lambda function name'
-                        )
-                    ])
-                else:
-                    function, function_hint = remove_function_outliers(self.function)
-                    function_component.update(
-                        values=[function],
-                        hint=function_hint
-                    )
-                if self.lineno:
-                    lineno_component.update(
-                        contributes=False,
-                        values=[self.lineno],
-                        hint='function takes precedence'
-                    )
-            elif self.lineno:
-                lineno_component.update(values=[self.lineno])
-        else:
-            if self.symbol:
-                symbol_component.update(
-                    contributes=False,
-                    values=[self.symbol],
-                    hint='symbol is used only if module or filename are available'
-                )
-            if self.function:
-                function_component.update(
-                    contributes=False,
-                    values=[self.function],
-                    hint='function name is used only if module or filename are available'
-                )
-            if self.lineno:
-                lineno_component.update(
-                    contributes=False,
-                    values=[self.lineno],
-                    hint='line number is used only if module or filename are available'
-                )
-
-        return GroupingComponent(
-            id='frame',
-            values=[
-                module_component,
-                filename_component,
-                context_line_component,
-                symbol_component,
-                function_component,
-                lineno_component,
-            ],
-            contributes=contributes,
-            hint=hint,
-        )
-
     def get_api_context(self, is_public=False, pad_addr=None):
         data = {
             'filename': self.filename,
@@ -649,7 +366,6 @@ class Frame(Interface):
                 context_line=self.context_line,
                 pre_context=self.pre_context,
                 post_context=self.post_context,
-                filename=self.filename or self.module,
             ),
             'lineNo': self.lineno,
             'colNo': self.colno,
@@ -695,7 +411,6 @@ class Frame(Interface):
                 context_line=meta.get('context_line'),
                 pre_context=meta.get('pre_context'),
                 post_context=meta.get('post_context'),
-                filename=meta.get('filename') if self.filename else meta.get('module'),
             ),
             'lineNo': meta.get('lineno'),
             'colNo': meta.get('colno'),
@@ -950,62 +665,6 @@ class Stacktrace(Interface):
             'registers': self.registers,
         })
 
-    def get_grouping_component(self, platform=None, variant=None):
-        frames = self.frames
-        contributes = None
-        hint = None
-        all_frames_considered_in_app = False
-
-        # TODO(dcramer): this should apply only to platform=javascript
-        # Browser JS will often throw errors (from inlined code in an HTML page)
-        # which contain only a single frame, no function name, and have the HTML
-        # document as the filename. In this case the hash is often not usable as
-        # the context cannot be trusted and the URL is dynamic (this also means
-        # the line number cannot be trusted).
-        if (len(frames) == 1 and not frames[0].function and frames[0].is_url()):
-            contributes = False
-            hint = 'ignored single frame stack'
-        elif variant == 'app':
-            total_frames = len(frames)
-            in_app_count = sum(1 if f.in_app else 0 for f in frames)
-            if in_app_count == 0:
-                in_app_count = total_frames
-                all_frames_considered_in_app = True
-
-            # if app frames make up less than 10% of the stacktrace discard
-            # the hash as invalid
-            if total_frames > 0 and in_app_count / float(total_frames) < 0.10:
-                contributes = False
-                hint = 'less than 10% of frames are in-app'
-
-        values = []
-        prev_frame = None
-        for frame in frames:
-            frame_component = frame.get_grouping_component(platform, variant)
-            if variant == 'app' and not frame.in_app and not all_frames_considered_in_app:
-                frame_component.update(
-                    contributes=False,
-                    hint='non app frame',
-                )
-            elif prev_frame is not None and is_recursion(frame, prev_frame):
-                frame_component.update(
-                    contributes=False,
-                    hint='ignored due to recursion',
-                )
-            elif variant == 'app' and not frame.in_app and all_frames_considered_in_app:
-                frame_component.update(
-                    hint='frame considered in-app because no frame is in-app'
-                )
-            values.append(frame_component)
-            prev_frame = frame
-
-        return GroupingComponent(
-            id='stacktrace',
-            values=values,
-            contributes=contributes,
-            hint=hint,
-        )
-
     def to_string(self, event, is_public=False, **kwargs):
         return self.get_stacktrace(event, system_frames=False, max_frames=10)
 
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 34f18942e0..4b0a690453 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -13,7 +13,6 @@ from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.interfaces.stacktrace import get_context
 from sentry.utils.safe import trim
-from sentry.event_hashing import GroupingComponent
 
 
 class Template(Interface):
@@ -59,30 +58,12 @@ class Template(Interface):
         }
         return cls(**kwargs)
 
-    def get_grouping_component(self, platform=None, variant=None):
-        filename_component = GroupingComponent(id='filename')
-        if self.filename is not None:
-            filename_component.update(values=[self.filename])
-
-        context_line_component = GroupingComponent(id='context-line')
-        if self.context_line is not None:
-            context_line_component.update(values=[self.context_line])
-
-        return GroupingComponent(
-            id='template',
-            values=[
-                filename_component,
-                context_line_component,
-            ]
-        )
-
     def to_string(self, event, is_public=False, **kwargs):
         context = get_context(
             lineno=self.lineno,
             context_line=self.context_line,
             pre_context=self.pre_context,
             post_context=self.post_context,
-            filename=self.filename,
         )
 
         result = ['Stacktrace (most recent call last):', '', self.get_traceback(event, context)]
@@ -109,7 +90,6 @@ class Template(Interface):
                 context_line=self.context_line,
                 pre_context=self.pre_context,
                 post_context=self.post_context,
-                filename=self.filename,
             ),
         }
 
@@ -123,6 +103,5 @@ class Template(Interface):
                 context_line=meta.get('context_line'),
                 pre_context=meta.get('pre_context'),
                 post_context=meta.get('post_context'),
-                filename=meta.get('filename'),
             ),
         }
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 6f2145aa6e..dc8c60b676 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
-from sentry.event_hashing import GroupingComponent
 
 __all__ = ('Threads', )
 
@@ -87,26 +86,3 @@ class Threads(Interface):
             return {'values': meta}
         else:
             return meta
-
-    def get_grouping_component(self, platform=None, variant=None):
-        if len(self.values) != 1:
-            return GroupingComponent(
-                id='threads',
-                contributes=False,
-                hint='ignored because contains %d threads' % len(self.values),
-            )
-
-        stacktrace = self.values[0].get('stacktrace')
-        if not stacktrace:
-            return GroupingComponent(
-                id='threads',
-                contributes=False,
-                hint='thread has no stacktrace',
-            )
-
-        return GroupingComponent(
-            id='threads',
-            values=[
-                stacktrace.get_grouping_component(platform, variant),
-            ]
-        )
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 901ff2e4f6..29ecc4213c 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -162,7 +162,7 @@ class Event(Model):
         This is similar to `get_hashes` but will instead return the
         grouping components for each variant in a dictionary.
         """
-        from sentry.event_hashing import get_grouping_variants_for_event
+        from sentry.grouping.api import get_grouping_variants_for_event
         return get_grouping_variants_for_event(self)
 
     def get_primary_hash(self):
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index ad7e6f4827..f6383214b6 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -15,7 +15,7 @@ from time import time
 from sentry.app import tsdb
 from sentry.constants import VERSION_LENGTH
 from sentry.event_manager import HashDiscarded, EventManager, EventUser
-from sentry.event_hashing import hash_from_values
+from sentry.grouping.utils import hash_from_values
 from sentry.models import (
     Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment,
     GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
diff --git a/tests/sentry/event_manager/test_generate_culprit.py b/tests/sentry/event_manager/test_generate_culprit.py
index db990ac42a..4624c29d87 100644
--- a/tests/sentry/event_manager/test_generate_culprit.py
+++ b/tests/sentry/event_manager/test_generate_culprit.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.event_manager import generate_culprit
-from sentry.event_hashing import hash_from_values
+from sentry.grouping.utils import hash_from_values
 
 
 def test_with_exception_interface():
diff --git a/tests/sentry/event_hashing/__init__.py b/tests/sentry/grouping/__init__.py
similarity index 100%
rename from tests/sentry/event_hashing/__init__.py
rename to tests/sentry/grouping/__init__.py
diff --git a/tests/sentry/event_hashing/fixtures/actix.json b/tests/sentry/grouping/fixtures/actix.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/actix.json
rename to tests/sentry/grouping/fixtures/actix.json
diff --git a/tests/sentry/event_hashing/fixtures/actix.out b/tests/sentry/grouping/fixtures/actix.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/actix.out
rename to tests/sentry/grouping/fixtures/actix.out
diff --git a/tests/sentry/event_hashing/fixtures/aspnetcore.json b/tests/sentry/grouping/fixtures/aspnetcore.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/aspnetcore.json
rename to tests/sentry/grouping/fixtures/aspnetcore.json
diff --git a/tests/sentry/event_hashing/fixtures/aspnetcore.out b/tests/sentry/grouping/fixtures/aspnetcore.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/aspnetcore.out
rename to tests/sentry/grouping/fixtures/aspnetcore.out
diff --git a/tests/sentry/event_hashing/fixtures/connection-error.json b/tests/sentry/grouping/fixtures/connection-error.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/connection-error.json
rename to tests/sentry/grouping/fixtures/connection-error.json
diff --git a/tests/sentry/event_hashing/fixtures/connection-error.out b/tests/sentry/grouping/fixtures/connection-error.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/connection-error.out
rename to tests/sentry/grouping/fixtures/connection-error.out
diff --git a/tests/sentry/event_hashing/fixtures/csp-img-src.json b/tests/sentry/grouping/fixtures/csp-img-src.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-img-src.json
rename to tests/sentry/grouping/fixtures/csp-img-src.json
diff --git a/tests/sentry/event_hashing/fixtures/csp-img-src.out b/tests/sentry/grouping/fixtures/csp-img-src.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-img-src.out
rename to tests/sentry/grouping/fixtures/csp-img-src.out
diff --git a/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.json b/tests/sentry/grouping/fixtures/csp-no-blocked-uri.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.json
rename to tests/sentry/grouping/fixtures/csp-no-blocked-uri.json
diff --git a/tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.out b/tests/sentry/grouping/fixtures/csp-no-blocked-uri.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-no-blocked-uri.out
rename to tests/sentry/grouping/fixtures/csp-no-blocked-uri.out
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-data-uri.json b/tests/sentry/grouping/fixtures/csp-script-data-uri.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-script-data-uri.json
rename to tests/sentry/grouping/fixtures/csp-script-data-uri.json
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-data-uri.out b/tests/sentry/grouping/fixtures/csp-script-data-uri.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-script-data-uri.out
rename to tests/sentry/grouping/fixtures/csp-script-data-uri.out
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-src-uri.json b/tests/sentry/grouping/fixtures/csp-script-src-uri.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-script-src-uri.json
rename to tests/sentry/grouping/fixtures/csp-script-src-uri.json
diff --git a/tests/sentry/event_hashing/fixtures/csp-script-src-uri.out b/tests/sentry/grouping/fixtures/csp-script-src-uri.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-script-src-uri.out
rename to tests/sentry/grouping/fixtures/csp-script-src-uri.out
diff --git a/tests/sentry/event_hashing/fixtures/csp-style-src-elem.json b/tests/sentry/grouping/fixtures/csp-style-src-elem.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-style-src-elem.json
rename to tests/sentry/grouping/fixtures/csp-style-src-elem.json
diff --git a/tests/sentry/event_hashing/fixtures/csp-style-src-elem.out b/tests/sentry/grouping/fixtures/csp-style-src-elem.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp-style-src-elem.out
rename to tests/sentry/grouping/fixtures/csp-style-src-elem.out
diff --git a/tests/sentry/event_hashing/fixtures/csp.json b/tests/sentry/grouping/fixtures/csp.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp.json
rename to tests/sentry/grouping/fixtures/csp.json
diff --git a/tests/sentry/event_hashing/fixtures/csp.out b/tests/sentry/grouping/fixtures/csp.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/csp.out
rename to tests/sentry/grouping/fixtures/csp.out
diff --git a/tests/sentry/event_hashing/fixtures/custom-fingerprint.json b/tests/sentry/grouping/fixtures/custom-fingerprint.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/custom-fingerprint.json
rename to tests/sentry/grouping/fixtures/custom-fingerprint.json
diff --git a/tests/sentry/event_hashing/fixtures/custom-fingerprint.out b/tests/sentry/grouping/fixtures/custom-fingerprint.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/custom-fingerprint.out
rename to tests/sentry/grouping/fixtures/custom-fingerprint.out
diff --git a/tests/sentry/event_hashing/fixtures/empty.json b/tests/sentry/grouping/fixtures/empty.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/empty.json
rename to tests/sentry/grouping/fixtures/empty.json
diff --git a/tests/sentry/event_hashing/fixtures/empty.out b/tests/sentry/grouping/fixtures/empty.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/empty.out
rename to tests/sentry/grouping/fixtures/empty.out
diff --git a/tests/sentry/event_hashing/fixtures/exception-comput-hashes.json b/tests/sentry/grouping/fixtures/exception-comput-hashes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-comput-hashes.json
rename to tests/sentry/grouping/fixtures/exception-comput-hashes.json
diff --git a/tests/sentry/event_hashing/fixtures/exception-comput-hashes.out b/tests/sentry/grouping/fixtures/exception-comput-hashes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-comput-hashes.out
rename to tests/sentry/grouping/fixtures/exception-comput-hashes.out
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.json b/tests/sentry/grouping/fixtures/exception-compute-hashes-2.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.json
rename to tests/sentry/grouping/fixtures/exception-compute-hashes-2.json
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.out b/tests/sentry/grouping/fixtures/exception-compute-hashes-2.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-compute-hashes-2.out
rename to tests/sentry/grouping/fixtures/exception-compute-hashes-2.out
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.json b/tests/sentry/grouping/fixtures/exception-compute-hashes-3.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.json
rename to tests/sentry/grouping/fixtures/exception-compute-hashes-3.json
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.out b/tests/sentry/grouping/fixtures/exception-compute-hashes-3.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-compute-hashes-3.out
rename to tests/sentry/grouping/fixtures/exception-compute-hashes-3.out
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes.json b/tests/sentry/grouping/fixtures/exception-compute-hashes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-compute-hashes.json
rename to tests/sentry/grouping/fixtures/exception-compute-hashes.json
diff --git a/tests/sentry/event_hashing/fixtures/exception-compute-hashes.out b/tests/sentry/grouping/fixtures/exception-compute-hashes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-compute-hashes.out
rename to tests/sentry/grouping/fixtures/exception-compute-hashes.out
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-type.json b/tests/sentry/grouping/fixtures/exception-without-type.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-without-type.json
rename to tests/sentry/grouping/fixtures/exception-without-type.json
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-type.out b/tests/sentry/grouping/fixtures/exception-without-type.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-without-type.out
rename to tests/sentry/grouping/fixtures/exception-without-type.out
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-value.json b/tests/sentry/grouping/fixtures/exception-without-value.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-without-value.json
rename to tests/sentry/grouping/fixtures/exception-without-value.json
diff --git a/tests/sentry/event_hashing/fixtures/exception-without-value.out b/tests/sentry/grouping/fixtures/exception-without-value.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/exception-without-value.out
rename to tests/sentry/grouping/fixtures/exception-without-value.out
diff --git a/tests/sentry/grouping/fixtures/expectct.json b/tests/sentry/grouping/fixtures/expectct.json
new file mode 100644
index 0000000000..186f2d081e
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/expectct.json
@@ -0,0 +1,34 @@
+{
+  "expectct": {
+    "date_time": "2014-04-06T13:00:50Z",
+    "hostname": "example.com",
+    "port": 443,
+    "effective_expiration_date": "2014-05-01T12:40:50Z",
+    "served_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+    "validated_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+    "scts": [
+      {
+        "version": 1,
+        "status": "invalid",
+        "source": "embedded",
+        "serialized_sct": "ABCD=="
+      }
+    ]
+  },
+  "sentry.interfaces.Http": {
+    "url": "https://example.com/welcome/",
+    "headers": [
+      [
+        "Referer",
+        "https://www.google.com/"
+      ],
+      [
+        "User-Agent",
+        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) coc_coc_browser/51.2.109 Chrome/45.2.2454.109 Safari/537.36      "
+      ]
+    ]
+  },
+  "sentry.interfaces.User": {
+    "ip_address": "127.0.0.1"
+  }
+}
diff --git a/tests/sentry/grouping/fixtures/expectct.out b/tests/sentry/grouping/fixtures/expectct.out
new file mode 100644
index 0000000000..ae550687ad
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/expectct.out
@@ -0,0 +1,9 @@
+default:
+  hash: '3d2933f4b5ec459ec8d569a398fd328c'
+  component:
+    default*
+      expect-ct*
+        salt* (a static salt)
+          'expect-ct'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json b/tests/sentry/grouping/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
rename to tests/sentry/grouping/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out b/tests/sentry/grouping/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out
rename to tests/sentry/grouping/fixtures/frame-comput-hashes-ignores-ENHANCED-clojure-classes.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.json b/tests/sentry/grouping/fixtures/frame-ignores-ENHANCED-spring-classes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.json
rename to tests/sentry/grouping/fixtures/frame-ignores-ENHANCED-spring-classes.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.out b/tests/sentry/grouping/fixtures/frame-ignores-ENHANCED-spring-classes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-ENHANCED-spring-classes.out
rename to tests/sentry/grouping/fixtures/frame-ignores-ENHANCED-spring-classes.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json b/tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json
rename to tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out b/tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out
rename to tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-clojure-classes.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json b/tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json
rename to tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-spring-classes.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out b/tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out
rename to tests/sentry/grouping/fixtures/frame-ignores-extra-ENHANCED-spring-classes.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.json b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-abs-path-is-http.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.json
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-abs-path-is-http.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.out b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-abs-path-is-http.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-abs-path-is-http.out
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-abs-path-is-http.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.json b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-blob.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.json
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-blob.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.out b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-blob.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-blob.out
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-blob.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.json b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-http.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.json
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-http.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.out b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-http.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-http.out
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-http.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.json b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-https.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.json
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-https.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.out b/tests/sentry/grouping/fixtures/frame-ignores-filename-if-https.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-filename-if-https.out
rename to tests/sentry/grouping/fixtures/frame-ignores-filename-if-https.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.json b/tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-function.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.json
rename to tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-function.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.out b/tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-function.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-function.out
rename to tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-function.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.json b/tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-module.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.json
rename to tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-module.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.out b/tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-module.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-java8-lambda-module.out
rename to tests/sentry/grouping/fixtures/frame-ignores-java8-lambda-module.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.json b/tests/sentry/grouping/fixtures/frame-ignores-javassist-2.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.json
rename to tests/sentry/grouping/fixtures/frame-ignores-javassist-2.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.out b/tests/sentry/grouping/fixtures/frame-ignores-javassist-2.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-javassist-2.out
rename to tests/sentry/grouping/fixtures/frame-ignores-javassist-2.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.json b/tests/sentry/grouping/fixtures/frame-ignores-javassist-3.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.json
rename to tests/sentry/grouping/fixtures/frame-ignores-javassist-3.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.out b/tests/sentry/grouping/fixtures/frame-ignores-javassist-3.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-javassist-3.out
rename to tests/sentry/grouping/fixtures/frame-ignores-javassist-3.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.json b/tests/sentry/grouping/fixtures/frame-ignores-javassist.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-javassist.json
rename to tests/sentry/grouping/fixtures/frame-ignores-javassist.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-javassist.out b/tests/sentry/grouping/fixtures/frame-ignores-javassist.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-javassist.out
rename to tests/sentry/grouping/fixtures/frame-ignores-javassist.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.json b/tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url-2.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.json
rename to tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url-2.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.out b/tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url-2.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url-2.out
rename to tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url-2.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.json b/tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.json
rename to tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.out b/tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-module-if-page-url.out
rename to tests/sentry/grouping/fixtures/frame-ignores-module-if-page-url.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.json b/tests/sentry/grouping/fixtures/frame-ignores-safari-native-code.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.json
rename to tests/sentry/grouping/fixtures/frame-ignores-safari-native-code.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.out b/tests/sentry/grouping/fixtures/frame-ignores-safari-native-code.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-safari-native-code.out
rename to tests/sentry/grouping/fixtures/frame-ignores-safari-native-code.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.json b/tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors-2.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.json
rename to tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors-2.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.out b/tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors-2.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors-2.out
rename to tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors-2.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.json b/tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.json
rename to tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.out b/tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-constructors.out
rename to tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-constructors.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.json b/tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-methods.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.json
rename to tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-methods.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.out b/tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-methods.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-ignores-sun-java-generated-methods.out
rename to tests/sentry/grouping/fixtures/frame-ignores-sun-java-generated-methods.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.json b/tests/sentry/grouping/fixtures/frame-sanitizes-block-functions.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.json
rename to tests/sentry/grouping/fixtures/frame-sanitizes-block-functions.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.out b/tests/sentry/grouping/fixtures/frame-sanitizes-block-functions.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-block-functions.out
rename to tests/sentry/grouping/fixtures/frame-sanitizes-block-functions.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.json b/tests/sentry/grouping/fixtures/frame-sanitizes-erb-templates.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.json
rename to tests/sentry/grouping/fixtures/frame-sanitizes-erb-templates.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.out b/tests/sentry/grouping/fixtures/frame-sanitizes-erb-templates.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-erb-templates.out
rename to tests/sentry/grouping/fixtures/frame-sanitizes-erb-templates.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.json b/tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames-2.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.json
rename to tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames-2.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.out b/tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames-2.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames-2.out
rename to tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames-2.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.json b/tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.json
rename to tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.out b/tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-sanitizes-versioned-filenames.out
rename to tests/sentry/grouping/fixtures/frame-sanitizes-versioned-filenames.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.json b/tests/sentry/grouping/fixtures/frame-skips-symbol-if-unknown.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.json
rename to tests/sentry/grouping/fixtures/frame-skips-symbol-if-unknown.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.out b/tests/sentry/grouping/fixtures/frame-skips-symbol-if-unknown.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-skips-symbol-if-unknown.out
rename to tests/sentry/grouping/fixtures/frame-skips-symbol-if-unknown.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.json b/tests/sentry/grouping/fixtures/frame-uses-context-line-over-function.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.json
rename to tests/sentry/grouping/fixtures/frame-uses-context-line-over-function.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.out b/tests/sentry/grouping/fixtures/frame-uses-context-line-over-function.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-context-line-over-function.out
rename to tests/sentry/grouping/fixtures/frame-uses-context-line-over-function.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.json b/tests/sentry/grouping/fixtures/frame-uses-function-over-lineno.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.json
rename to tests/sentry/grouping/fixtures/frame-uses-function-over-lineno.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.out b/tests/sentry/grouping/fixtures/frame-uses-function-over-lineno.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-function-over-lineno.out
rename to tests/sentry/grouping/fixtures/frame-uses-function-over-lineno.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.json b/tests/sentry/grouping/fixtures/frame-uses-module-over-filename.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.json
rename to tests/sentry/grouping/fixtures/frame-uses-module-over-filename.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.out b/tests/sentry/grouping/fixtures/frame-uses-module-over-filename.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-module-over-filename.out
rename to tests/sentry/grouping/fixtures/frame-uses-module-over-filename.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.json b/tests/sentry/grouping/fixtures/frame-uses-symbol-instead-of-function.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.json
rename to tests/sentry/grouping/fixtures/frame-uses-symbol-instead-of-function.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.out b/tests/sentry/grouping/fixtures/frame-uses-symbol-instead-of-function.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-uses-symbol-instead-of-function.out
rename to tests/sentry/grouping/fixtures/frame-uses-symbol-instead-of-function.out
diff --git a/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.json b/tests/sentry/grouping/fixtures/frame-with-only-required-vars.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.json
rename to tests/sentry/grouping/fixtures/frame-with-only-required-vars.json
diff --git a/tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.out b/tests/sentry/grouping/fixtures/frame-with-only-required-vars.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/frame-with-only-required-vars.out
rename to tests/sentry/grouping/fixtures/frame-with-only-required-vars.out
diff --git a/tests/sentry/grouping/fixtures/hpkp.json b/tests/sentry/grouping/fixtures/hpkp.json
new file mode 100644
index 0000000000..2207e4394e
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/hpkp.json
@@ -0,0 +1,28 @@
+{
+  "hpkp": {
+    "date_time": "2014-04-06T13:00:50Z",
+    "hostname": "example.com",
+    "port": 443,
+    "effective_expiration_date": "2014-05-01T12:40:50Z",
+    "include_subdomains": false,
+    "served_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+    "validated_certificate_chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+    "known_pins": ["pin-sha256=\"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\""]
+  },
+  "sentry.interfaces.Http": {
+    "url": "https://example.com/welcome/",
+    "headers": [
+      [
+        "Referer",
+        "https://www.google.com/"
+      ],
+      [
+        "User-Agent",
+        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) coc_coc_browser/51.2.109 Chrome/45.2.2454.109 Safari/537.36      "
+      ]
+    ]
+  },
+  "sentry.interfaces.User": {
+    "ip_address": "127.0.0.1"
+  }
+}
diff --git a/tests/sentry/grouping/fixtures/hpkp.out b/tests/sentry/grouping/fixtures/hpkp.out
new file mode 100644
index 0000000000..c5d9cecb09
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/hpkp.out
@@ -0,0 +1,9 @@
+default:
+  hash: '1e37a374cb33572622d02ff7a6237c44'
+  component:
+    default*
+      hpkp*
+        salt* (a static salt)
+          'hpkp'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/event_hashing/fixtures/java-chained.json b/tests/sentry/grouping/fixtures/java-chained.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/java-chained.json
rename to tests/sentry/grouping/fixtures/java-chained.json
diff --git a/tests/sentry/event_hashing/fixtures/java-chained.out b/tests/sentry/grouping/fixtures/java-chained.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/java-chained.out
rename to tests/sentry/grouping/fixtures/java-chained.out
diff --git a/tests/sentry/event_hashing/fixtures/java-minimal.json b/tests/sentry/grouping/fixtures/java-minimal.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/java-minimal.json
rename to tests/sentry/grouping/fixtures/java-minimal.json
diff --git a/tests/sentry/event_hashing/fixtures/java-minimal.out b/tests/sentry/grouping/fixtures/java-minimal.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/java-minimal.out
rename to tests/sentry/grouping/fixtures/java-minimal.out
diff --git a/tests/sentry/event_hashing/fixtures/javascript-exception-no-in-app.json b/tests/sentry/grouping/fixtures/javascript-exception-no-in-app.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/javascript-exception-no-in-app.json
rename to tests/sentry/grouping/fixtures/javascript-exception-no-in-app.json
diff --git a/tests/sentry/event_hashing/fixtures/javascript-exception-no-in-app.out b/tests/sentry/grouping/fixtures/javascript-exception-no-in-app.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/javascript-exception-no-in-app.out
rename to tests/sentry/grouping/fixtures/javascript-exception-no-in-app.out
diff --git a/tests/sentry/event_hashing/fixtures/javascript-message.json b/tests/sentry/grouping/fixtures/javascript-message.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/javascript-message.json
rename to tests/sentry/grouping/fixtures/javascript-message.json
diff --git a/tests/sentry/event_hashing/fixtures/javascript-message.out b/tests/sentry/grouping/fixtures/javascript-message.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/javascript-message.out
rename to tests/sentry/grouping/fixtures/javascript-message.out
diff --git a/tests/sentry/event_hashing/fixtures/laravel.json b/tests/sentry/grouping/fixtures/laravel.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/laravel.json
rename to tests/sentry/grouping/fixtures/laravel.json
diff --git a/tests/sentry/event_hashing/fixtures/laravel.out b/tests/sentry/grouping/fixtures/laravel.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/laravel.out
rename to tests/sentry/grouping/fixtures/laravel.out
diff --git a/tests/sentry/event_hashing/fixtures/logentry-prefers-message.json b/tests/sentry/grouping/fixtures/logentry-prefers-message.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/logentry-prefers-message.json
rename to tests/sentry/grouping/fixtures/logentry-prefers-message.json
diff --git a/tests/sentry/event_hashing/fixtures/logentry-prefers-message.out b/tests/sentry/grouping/fixtures/logentry-prefers-message.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/logentry-prefers-message.out
rename to tests/sentry/grouping/fixtures/logentry-prefers-message.out
diff --git a/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.json b/tests/sentry/grouping/fixtures/logentry-uses-formatted.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/logentry-uses-formatted.json
rename to tests/sentry/grouping/fixtures/logentry-uses-formatted.json
diff --git a/tests/sentry/event_hashing/fixtures/logentry-uses-formatted.out b/tests/sentry/grouping/fixtures/logentry-uses-formatted.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/logentry-uses-formatted.out
rename to tests/sentry/grouping/fixtures/logentry-uses-formatted.out
diff --git a/tests/sentry/grouping/fixtures/message-prefers-message.json b/tests/sentry/grouping/fixtures/message-prefers-message.json
new file mode 100644
index 0000000000..58c96d33ed
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/message-prefers-message.json
@@ -0,0 +1,6 @@
+{
+  "logentry": {
+    "message": "Hello there %s!",
+    "formatted": "Hello there Peter!"
+  }
+}
diff --git a/tests/sentry/grouping/fixtures/message-prefers-message.out b/tests/sentry/grouping/fixtures/message-prefers-message.out
new file mode 100644
index 0000000000..09894f054d
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/message-prefers-message.out
@@ -0,0 +1,6 @@
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/fixtures/message-uses-formatted.json b/tests/sentry/grouping/fixtures/message-uses-formatted.json
new file mode 100644
index 0000000000..ceabd3c2f0
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/message-uses-formatted.json
@@ -0,0 +1,5 @@
+{
+  "logentry": {
+    "formatted": "Hello there Peter!"
+  }
+}
diff --git a/tests/sentry/grouping/fixtures/message-uses-formatted.out b/tests/sentry/grouping/fixtures/message-uses-formatted.out
new file mode 100644
index 0000000000..e7cd17cd12
--- /dev/null
+++ b/tests/sentry/grouping/fixtures/message-uses-formatted.out
@@ -0,0 +1,6 @@
+default:
+  hash: 'd3f5e52d24e9c1eae5abe6c866cced63'
+  component:
+    default*
+      message*
+        u'Hello there Peter!'
diff --git a/tests/sentry/event_hashing/fixtures/minified-javascript.json b/tests/sentry/grouping/fixtures/minified-javascript.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/minified-javascript.json
rename to tests/sentry/grouping/fixtures/minified-javascript.json
diff --git a/tests/sentry/event_hashing/fixtures/minified-javascript.out b/tests/sentry/grouping/fixtures/minified-javascript.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/minified-javascript.out
rename to tests/sentry/grouping/fixtures/minified-javascript.out
diff --git a/tests/sentry/event_hashing/fixtures/node-exception-weird.json b/tests/sentry/grouping/fixtures/node-exception-weird.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/node-exception-weird.json
rename to tests/sentry/grouping/fixtures/node-exception-weird.json
diff --git a/tests/sentry/event_hashing/fixtures/node-exception-weird.out b/tests/sentry/grouping/fixtures/node-exception-weird.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/node-exception-weird.out
rename to tests/sentry/grouping/fixtures/node-exception-weird.out
diff --git a/tests/sentry/event_hashing/fixtures/python-exception-base.json b/tests/sentry/grouping/fixtures/python-exception-base.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/python-exception-base.json
rename to tests/sentry/grouping/fixtures/python-exception-base.json
diff --git a/tests/sentry/event_hashing/fixtures/python-exception-base.out b/tests/sentry/grouping/fixtures/python-exception-base.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/python-exception-base.out
rename to tests/sentry/grouping/fixtures/python-exception-base.out
diff --git a/tests/sentry/event_hashing/fixtures/python-http-error.json b/tests/sentry/grouping/fixtures/python-http-error.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/python-http-error.json
rename to tests/sentry/grouping/fixtures/python-http-error.json
diff --git a/tests/sentry/event_hashing/fixtures/python-http-error.out b/tests/sentry/grouping/fixtures/python-http-error.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/python-http-error.out
rename to tests/sentry/grouping/fixtures/python-http-error.out
diff --git a/tests/sentry/event_hashing/fixtures/react-native.json b/tests/sentry/grouping/fixtures/react-native.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/react-native.json
rename to tests/sentry/grouping/fixtures/react-native.json
diff --git a/tests/sentry/event_hashing/fixtures/react-native.out b/tests/sentry/grouping/fixtures/react-native.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/react-native.out
rename to tests/sentry/grouping/fixtures/react-native.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.json b/tests/sentry/grouping/fixtures/stacktrace-cocoa.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-cocoa.json
rename to tests/sentry/grouping/fixtures/stacktrace-cocoa.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-cocoa.out b/tests/sentry/grouping/fixtures/stacktrace-cocoa.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-cocoa.out
rename to tests/sentry/grouping/fixtures/stacktrace-cocoa.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.json b/tests/sentry/grouping/fixtures/stacktrace-collapse-recursion.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.json
rename to tests/sentry/grouping/fixtures/stacktrace-collapse-recursion.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.out b/tests/sentry/grouping/fixtures/stacktrace-collapse-recursion.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-collapse-recursion.out
rename to tests/sentry/grouping/fixtures/stacktrace-collapse-recursion.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.json b/tests/sentry/grouping/fixtures/stacktrace-compute-hashes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.json
rename to tests/sentry/grouping/fixtures/stacktrace-compute-hashes.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.out b/tests/sentry/grouping/fixtures/stacktrace-compute-hashes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-compute-hashes.out
rename to tests/sentry/grouping/fixtures/stacktrace-compute-hashes.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.json b/tests/sentry/grouping/fixtures/stacktrace-discards-seemingly-useless-stack.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.json
rename to tests/sentry/grouping/fixtures/stacktrace-discards-seemingly-useless-stack.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.out b/tests/sentry/grouping/fixtures/stacktrace-discards-seemingly-useless-stack.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-discards-seemingly-useless-stack.out
rename to tests/sentry/grouping/fixtures/stacktrace-discards-seemingly-useless-stack.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.json b/tests/sentry/grouping/fixtures/stacktrace-does-not-discard-non-urls.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.json
rename to tests/sentry/grouping/fixtures/stacktrace-does-not-discard-non-urls.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.out b/tests/sentry/grouping/fixtures/stacktrace-does-not-discard-non-urls.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-does-not-discard-non-urls.out
rename to tests/sentry/grouping/fixtures/stacktrace-does-not-discard-non-urls.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.json b/tests/sentry/grouping/fixtures/stacktrace-does-not-group-different-js-errors.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.json
rename to tests/sentry/grouping/fixtures/stacktrace-does-not-group-different-js-errors.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.out b/tests/sentry/grouping/fixtures/stacktrace-does-not-group-different-js-errors.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-does-not-group-different-js-errors.out
rename to tests/sentry/grouping/fixtures/stacktrace-does-not-group-different-js-errors.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.json b/tests/sentry/grouping/fixtures/stacktrace-excludes-single-frame-urls.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.json
rename to tests/sentry/grouping/fixtures/stacktrace-excludes-single-frame-urls.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.out b/tests/sentry/grouping/fixtures/stacktrace-excludes-single-frame-urls.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-excludes-single-frame-urls.out
rename to tests/sentry/grouping/fixtures/stacktrace-excludes-single-frame-urls.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.json b/tests/sentry/grouping/fixtures/stacktrace-hash-without-system-frames.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.json
rename to tests/sentry/grouping/fixtures/stacktrace-hash-without-system-frames.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.out b/tests/sentry/grouping/fixtures/stacktrace-hash-without-system-frames.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-hash-without-system-frames.out
rename to tests/sentry/grouping/fixtures/stacktrace-hash-without-system-frames.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.json b/tests/sentry/grouping/fixtures/stacktrace-ignores-singular-anonymous-frame.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.json
rename to tests/sentry/grouping/fixtures/stacktrace-ignores-singular-anonymous-frame.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.out b/tests/sentry/grouping/fixtures/stacktrace-ignores-singular-anonymous-frame.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-ignores-singular-anonymous-frame.out
rename to tests/sentry/grouping/fixtures/stacktrace-ignores-singular-anonymous-frame.out
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.json b/tests/sentry/grouping/fixtures/stacktrace-with-minimal-app-frames.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.json
rename to tests/sentry/grouping/fixtures/stacktrace-with-minimal-app-frames.json
diff --git a/tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.out b/tests/sentry/grouping/fixtures/stacktrace-with-minimal-app-frames.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/stacktrace-with-minimal-app-frames.out
rename to tests/sentry/grouping/fixtures/stacktrace-with-minimal-app-frames.out
diff --git a/tests/sentry/event_hashing/fixtures/template-compute-hashes.json b/tests/sentry/grouping/fixtures/template-compute-hashes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/template-compute-hashes.json
rename to tests/sentry/grouping/fixtures/template-compute-hashes.json
diff --git a/tests/sentry/event_hashing/fixtures/template-compute-hashes.out b/tests/sentry/grouping/fixtures/template-compute-hashes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/template-compute-hashes.out
rename to tests/sentry/grouping/fixtures/template-compute-hashes.out
diff --git a/tests/sentry/event_hashing/fixtures/threads-compute-hashes.json b/tests/sentry/grouping/fixtures/threads-compute-hashes.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/threads-compute-hashes.json
rename to tests/sentry/grouping/fixtures/threads-compute-hashes.json
diff --git a/tests/sentry/event_hashing/fixtures/threads-compute-hashes.out b/tests/sentry/grouping/fixtures/threads-compute-hashes.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/threads-compute-hashes.out
rename to tests/sentry/grouping/fixtures/threads-compute-hashes.out
diff --git a/tests/sentry/event_hashing/fixtures/threads-no-hash.json b/tests/sentry/grouping/fixtures/threads-no-hash.json
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/threads-no-hash.json
rename to tests/sentry/grouping/fixtures/threads-no-hash.json
diff --git a/tests/sentry/event_hashing/fixtures/threads-no-hash.out b/tests/sentry/grouping/fixtures/threads-no-hash.out
similarity index 100%
rename from tests/sentry/event_hashing/fixtures/threads-no-hash.out
rename to tests/sentry/grouping/fixtures/threads-no-hash.out
diff --git a/tests/sentry/event_hashing/test_variants.py b/tests/sentry/grouping/test_variants.py
similarity index 97%
rename from tests/sentry/event_hashing/test_variants.py
rename to tests/sentry/grouping/test_variants.py
index 0547a565c1..379257887d 100644
--- a/tests/sentry/event_hashing/test_variants.py
+++ b/tests/sentry/grouping/test_variants.py
@@ -9,7 +9,7 @@ import pytest
 
 from sentry.models import Event
 from sentry.event_manager import EventManager
-from sentry.event_hashing import GroupingComponent
+from sentry.grouping.component import GroupingComponent
 
 
 def log(x):
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
index 49a0f138ac..3f309253fa 100644
--- a/tests/sentry/interfaces/test_message.py
+++ b/tests/sentry/interfaces/test_message.py
@@ -26,29 +26,6 @@ class MessageTest(TestCase):
             'formatted': 'Hello there world!'
         }
 
-    def test_grouping_components_prefers_message(self):
-        assert self.interface.get_grouping_component().as_dict() == {
-            'hint': None,
-            'id': 'message',
-            'name': 'message',
-            'contributes': True,
-            'values': ['Hello there %s!'],
-        }
-
-    def test_grouping_component_uses_formatted(self):
-        interface = Message.to_python(dict(
-            message=None,
-            params=(),
-            formatted='Hello there world!'
-        ))
-        assert interface.get_grouping_component().as_dict() == {
-            'hint': None,
-            'id': 'message',
-            'name': 'message',
-            'contributes': True,
-            'values': ['Hello there world!'],
-        }
-
     def test_format_kwargs(self):
         interface = Message.to_python(dict(
             message='Hello there %(name)s!',
