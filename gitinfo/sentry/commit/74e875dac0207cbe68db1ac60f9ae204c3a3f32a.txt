commit 74e875dac0207cbe68db1ac60f9ae204c3a3f32a
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Sep 25 15:29:29 2019 -0400

    feat(apm): Be able to click and drag over the transaction minimap to select a timeslice of the transaction (#14782)
    
    Closes SEN-1035

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
index 43490d9535..cfc7501851 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dragManager.tsx
@@ -11,18 +11,33 @@ enum ViewHandleType {
 }
 
 export type DragManagerChildrenProps = {
+  // handles
+
   isDragging: boolean;
 
   // left-side handle
 
   onLeftHandleDragStart: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
   leftHandlePosition: number; // between 0 to 1
-  viewWindowStart: number; // between 0 to 1
 
   // right-side handle
 
   onRightHandleDragStart: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
   rightHandlePosition: number; // between 0 to 1
+
+  // window selection
+
+  isWindowSelectionDragging: boolean;
+  windowSelectionInitial: number; // between 0 (0%) and 1 (100%)
+  windowSelectionCurrent: number; // between 0 (0%) and 1 (100%)
+  windowSelectionSize: number;
+  onWindowSelectionDragStart: (
+    event: React.MouseEvent<HTMLDivElement, MouseEvent>
+  ) => void;
+
+  // window sizes
+
+  viewWindowStart: number; // between 0 to 1
   viewWindowEnd: number; // between 0 to 1
 };
 
@@ -35,22 +50,44 @@ type DragManagerProps = {
 };
 
 type DragManagerState = {
+  // draggable handles
+
   isDragging: boolean;
   currentDraggingHandle: ViewHandleType | undefined;
   leftHandlePosition: number;
   rightHandlePosition: number;
 
+  // window selection
+
+  isWindowSelectionDragging: boolean;
+  windowSelectionInitial: number;
+  windowSelectionCurrent: number;
+  windowSelectionSize: number;
+
+  // window sizes
+
   viewWindowStart: number;
   viewWindowEnd: number;
 };
 
 class DragManager extends React.Component<DragManagerProps, DragManagerState> {
   state: DragManagerState = {
+    // draggable handles
+
     isDragging: false,
     currentDraggingHandle: void 0,
     leftHandlePosition: 0, // positioned on the left-most side at 0%
     rightHandlePosition: 1, // positioned on the right-most side at 100%
 
+    // window selection
+
+    isWindowSelectionDragging: false,
+    windowSelectionInitial: 0, // between 0 (0%) and 1 (100%)
+    windowSelectionCurrent: 0, // between 0 (0%) and 1 (100%)
+    windowSelectionSize: 0,
+
+    // window sizes
+
     viewWindowStart: 0,
     viewWindowEnd: 1,
   };
@@ -64,11 +101,9 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
   onDragStart = (viewHandle: ViewHandleType) => (
     event: React.MouseEvent<HTMLDivElement, MouseEvent>
   ) => {
-    if (
-      this.state.isDragging ||
-      event.type !== 'mousedown' ||
-      !this.hasInteractiveLayer()
-    ) {
+    const isDragging = this.state.isDragging || this.state.isWindowSelectionDragging;
+
+    if (isDragging || event.type !== 'mousedown' || !this.hasInteractiveLayer()) {
       return;
     }
 
@@ -90,6 +125,7 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
 
     this.setState({
       isDragging: true,
+      isWindowSelectionDragging: false,
       currentDraggingHandle: viewHandle,
     });
   };
@@ -196,11 +232,141 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
     }
   };
 
+  onWindowSelectionDragStart = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
+    const isDragging = this.state.isDragging || this.state.isWindowSelectionDragging;
+
+    if (isDragging || event.type !== 'mousedown' || !this.hasInteractiveLayer()) {
+      return;
+    }
+
+    // prevent the user from selecting things outside the minimap when dragging
+    // the mouse cursor outside the minimap
+
+    this.previousUserSelect = setBodyUserSelect({
+      userSelect: 'none',
+      MozUserSelect: 'none',
+      msUserSelect: 'none',
+    });
+
+    // attach event listeners so that the mouse cursor can drag outside of the
+    // minimap
+    window.addEventListener('mousemove', this.onWindowSelectionDragMove);
+    window.addEventListener('mouseup', this.onWindowSelectionDragEnd);
+
+    // indicate drag has begun
+
+    const rect = rectOfContent(this.props.interactiveLayerRef.current!);
+
+    // mouse x-coordinate relative to the interactive layer's left side
+    const rawMouseX = (event.pageX - rect.x) / rect.width;
+
+    this.setState({
+      isDragging: false,
+      isWindowSelectionDragging: true,
+      windowSelectionInitial: rawMouseX, // between 0 (0%) and 1 (100%)
+      windowSelectionCurrent: rawMouseX, // between 0 (0%) and 1 (100%)
+    });
+  };
+
+  onWindowSelectionDragMove = (event: MouseEvent) => {
+    if (
+      !this.state.isWindowSelectionDragging ||
+      event.type !== 'mousemove' ||
+      !this.hasInteractiveLayer()
+    ) {
+      return;
+    }
+
+    const rect = rectOfContent(this.props.interactiveLayerRef.current!);
+
+    // mouse x-coordinate relative to the interactive layer's left side
+    const rawMouseX = (event.pageX - rect.x) / rect.width;
+
+    const min = 0;
+    const max = 1;
+
+    // clamp rawMouseX to be within [0, 1]
+    const windowSelectionCurrent = clamp(rawMouseX, min, max);
+
+    const windowSelectionSize = clamp(
+      Math.abs(this.state.windowSelectionInitial - windowSelectionCurrent),
+      min,
+      max
+    );
+
+    this.setState({
+      windowSelectionCurrent,
+      windowSelectionSize,
+    });
+  };
+
+  onWindowSelectionDragEnd = (event: MouseEvent) => {
+    if (
+      !this.state.isWindowSelectionDragging ||
+      event.type !== 'mouseup' ||
+      !this.hasInteractiveLayer()
+    ) {
+      return;
+    }
+
+    // remove listeners that were attached in onWindowSelectionDragStart
+
+    this.cleanUpListeners();
+
+    // restore body styles
+
+    if (this.previousUserSelect) {
+      setBodyUserSelect(this.previousUserSelect);
+      this.previousUserSelect = null;
+    }
+
+    // indicate drag has ended
+
+    this.setState(state => {
+      let viewWindowStart = Math.min(
+        state.windowSelectionInitial,
+        state.windowSelectionCurrent
+      );
+      let viewWindowEnd = Math.max(
+        state.windowSelectionInitial,
+        state.windowSelectionCurrent
+      );
+
+      // enforce minimum window size
+      if (viewWindowEnd - viewWindowStart < MINIMUM_WINDOW_SIZE) {
+        viewWindowEnd = viewWindowStart + MINIMUM_WINDOW_SIZE;
+
+        if (viewWindowEnd > 1) {
+          viewWindowEnd = 1;
+          viewWindowStart = 1 - MINIMUM_WINDOW_SIZE;
+        }
+      }
+
+      return {
+        isWindowSelectionDragging: false,
+        windowSelectionInitial: 0,
+        windowSelectionCurrent: 0,
+        windowSelectionSize: 0,
+
+        leftHandlePosition: viewWindowStart,
+        rightHandlePosition: viewWindowEnd,
+
+        viewWindowStart,
+        viewWindowEnd,
+      };
+    });
+  };
+
   cleanUpListeners = () => {
     if (this.state.isDragging) {
       window.removeEventListener('mousemove', this.onDragMove);
       window.removeEventListener('mouseup', this.onDragEnd);
     }
+
+    if (this.state.isWindowSelectionDragging) {
+      window.removeEventListener('mousemove', this.onWindowSelectionDragMove);
+      window.removeEventListener('mouseup', this.onWindowSelectionDragEnd);
+    }
   };
 
   componentWillUnmount() {
@@ -211,12 +377,27 @@ class DragManager extends React.Component<DragManagerProps, DragManagerState> {
     const childrenProps = {
       isDragging: this.state.isDragging,
 
+      // left handle
+
       onLeftHandleDragStart: this.onLeftHandleDragStart,
       leftHandlePosition: this.state.leftHandlePosition,
-      viewWindowStart: this.state.viewWindowStart,
+
+      // right handle
 
       onRightHandleDragStart: this.onRightHandleDragStart,
       rightHandlePosition: this.state.rightHandlePosition,
+
+      // window selection
+
+      isWindowSelectionDragging: this.state.isWindowSelectionDragging,
+      windowSelectionInitial: this.state.windowSelectionInitial,
+      windowSelectionCurrent: this.state.windowSelectionCurrent,
+      windowSelectionSize: this.state.windowSelectionSize,
+      onWindowSelectionDragStart: this.onWindowSelectionDragStart,
+
+      // window sizes
+
+      viewWindowStart: this.state.viewWindowStart,
       viewWindowEnd: this.state.viewWindowEnd,
     };
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/minimap.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/components/events/interfaces/spans/minimap.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
index 534fd2db66..38851a02fc 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/minimap.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
@@ -19,7 +19,7 @@ import {ParsedTraceType, TickAlignment, SpanType, SpanChildrenLookupType} from '
 import {zIndex} from './styles';
 
 export const MINIMAP_CONTAINER_HEIGHT = 106;
-export const MINIMAP_SPAN_BAR_HEIGHT = 2;
+export const MINIMAP_SPAN_BAR_HEIGHT = 4;
 const MINIMAP_HEIGHT = 75;
 export const NUM_OF_SPANS_FIT_IN_MINI_MAP = MINIMAP_HEIGHT / MINIMAP_SPAN_BAR_HEIGHT;
 const TIME_AXIS_HEIGHT = 30;
@@ -31,7 +31,7 @@ type PropType = {
   trace: ParsedTraceType;
 };
 
-class Minimap extends React.Component<PropType> {
+class TraceViewHeader extends React.Component<PropType> {
   renderCursorGuide = ({
     cursorGuideHeight,
     showCursorGuide,
@@ -67,7 +67,9 @@ class Minimap extends React.Component<PropType> {
     const leftHandleGhost = isDragging ? (
       <Handle
         left={viewWindowStart}
-        onMouseDown={onLeftHandleDragStart}
+        onMouseDown={() => {
+          // do nothing
+        }}
         isDragging={false}
       />
     ) : null;
@@ -91,7 +93,9 @@ class Minimap extends React.Component<PropType> {
     const rightHandleGhost = isDragging ? (
       <Handle
         left={viewWindowEnd}
-        onMouseDown={onLeftHandleDragStart}
+        onMouseDown={() => {
+          // do nothing
+        }}
         isDragging={false}
       />
     ) : null;
@@ -236,9 +240,29 @@ class Minimap extends React.Component<PropType> {
     );
   };
 
+  renderWindowSelection = (dragProps: DragManagerChildrenProps) => {
+    if (!dragProps.isWindowSelectionDragging) {
+      return null;
+    }
+
+    const left = Math.min(
+      dragProps.windowSelectionInitial,
+      dragProps.windowSelectionCurrent
+    );
+
+    return (
+      <WindowSelection
+        style={{
+          left: toPercent(left),
+          width: toPercent(dragProps.windowSelectionSize),
+        }}
+      />
+    );
+  };
+
   render() {
     return (
-      <MinimapContainer>
+      <HeaderContainer>
         <ActualMinimap trace={this.props.trace} />
         <CursorGuideHandler.Consumer>
           {({displayCursorGuide, hideCursorGuide, mouseLeft, showCursorGuide}) => {
@@ -261,8 +285,22 @@ class Minimap extends React.Component<PropType> {
                 onMouseMove={event => {
                   displayCursorGuide(event.pageX);
                 }}
+                onMouseDown={event => {
+                  const target = event.target;
+
+                  if (
+                    target instanceof Element &&
+                    target.getAttribute &&
+                    target.getAttribute('data-ignore')
+                  ) {
+                    // ignore this event if we need to
+                    return;
+                  }
+
+                  this.props.dragProps.onWindowSelectionDragStart(event);
+                }}
               >
-                <InteractiveLayer>
+                <MinimapContainer>
                   {this.renderFog(this.props.dragProps)}
                   {this.renderCursorGuide({
                     showCursorGuide,
@@ -270,7 +308,8 @@ class Minimap extends React.Component<PropType> {
                     cursorGuideHeight: MINIMAP_HEIGHT,
                   })}
                   {this.renderViewHandles(this.props.dragProps)}
-                </InteractiveLayer>
+                  {this.renderWindowSelection(this.props.dragProps)}
+                </MinimapContainer>
                 {this.renderTimeAxis({
                   showCursorGuide,
                   mouseLeft,
@@ -279,7 +318,7 @@ class Minimap extends React.Component<PropType> {
             );
           }}
         </CursorGuideHandler.Consumer>
-      </MinimapContainer>
+      </HeaderContainer>
     );
   }
 }
@@ -537,7 +576,7 @@ const DurationGuideBox = styled('div')`
   }};
 `;
 
-const MinimapContainer = styled('div')`
+const HeaderContainer = styled('div')`
   width: 100%;
   position: sticky;
   left: 0;
@@ -561,7 +600,7 @@ const MinimapBackground = styled('div')`
   left: 0;
 `;
 
-const InteractiveLayer = styled('div')`
+const MinimapContainer = styled('div')`
   height: ${MINIMAP_HEIGHT}px;
   width: 100%;
   position: relative;
@@ -613,9 +652,9 @@ const Fog = styled('div')`
 
 const MinimapSpanBar = styled('div')`
   position: relative;
-  height: ${MINIMAP_SPAN_BAR_HEIGHT}px;
-  min-height: ${MINIMAP_SPAN_BAR_HEIGHT}px;
-  max-height: ${MINIMAP_SPAN_BAR_HEIGHT}px;
+  height: 2px;
+  min-height: 2px;
+  max-height: 2px;
   margin: 2px 0;
 
   min-width: 1px;
@@ -668,6 +707,7 @@ const Handle = ({
         />
       </svg>
       <ViewHandle
+        data-ignore="true"
         onMouseDown={onMouseDown}
         isDragging={isDragging}
         style={{
@@ -678,4 +718,13 @@ const Handle = ({
   );
 };
 
-export default Minimap;
+const WindowSelection = styled('div')`
+  position: absolute;
+  top: 0;
+
+  height: ${MINIMAP_HEIGHT}px;
+
+  background-color: rgba(69, 38, 80, 0.1);
+`;
+
+export default TraceViewHeader;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 0748f7502b..7363c2d4f3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -22,7 +22,7 @@ import {
   MINIMAP_CONTAINER_HEIGHT,
   MINIMAP_SPAN_BAR_HEIGHT,
   NUM_OF_SPANS_FIT_IN_MINI_MAP,
-} from './minimap';
+} from './header';
 import {SPAN_ROW_HEIGHT, SpanRow, zIndex} from './styles';
 import * as DividerHandlerManager from './dividerHandlerManager';
 import * as CursorGuideHandler from './cursorGuideHandler';
@@ -724,7 +724,7 @@ type SpanRowCellAndDivProps = Omit<
 
 const SpanRowCell = styled('div')<SpanRowCellAndDivProps>`
   position: absolute;
-  padding: ${space(0.5)} 0;
+  padding: ${space(0.5)} 1px;
   height: 100%;
   overflow: hidden;
   background-color: ${p => getBackgroundColor(p)};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index 2fa3d35480..c89ff90856 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -31,7 +31,7 @@ class SpanTree extends React.Component<PropType> {
   traceViewRef = React.createRef<HTMLDivElement>();
 
   shouldComponentUpdate(nextProps: PropType) {
-    if (nextProps.dragProps.isDragging) {
+    if (nextProps.dragProps.isDragging || nextProps.dragProps.isWindowSelectionDragging) {
       return false;
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index bdcfd23c8f..22cce5acae 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -8,7 +8,7 @@ import DragManager, {DragManagerChildrenProps} from './dragManager';
 import SpanTree from './spanTree';
 import {SpanType, SpanEntry, SentryTransactionEvent, ParsedTraceType} from './types';
 import {isValidSpanID} from './utils';
-import TraceViewMinimap from './minimap';
+import TraceViewHeader from './header';
 import * as CursorGuideHandler from './cursorGuideHandler';
 
 type TraceContextType = {
@@ -24,9 +24,9 @@ type PropType = {
 class TraceView extends React.Component<PropType> {
   minimapInteractiveRef = React.createRef<HTMLDivElement>();
 
-  renderMinimap = (dragProps: DragManagerChildrenProps, parsedTrace: ParsedTraceType) => {
+  renderHeader = (dragProps: DragManagerChildrenProps, parsedTrace: ParsedTraceType) => {
     return (
-      <TraceViewMinimap
+      <TraceViewHeader
         minimapInteractiveRef={this.minimapInteractiveRef}
         dragProps={dragProps}
         trace={parsedTrace}
@@ -157,7 +157,7 @@ class TraceView extends React.Component<PropType> {
               dragProps={dragProps}
               trace={parsedTrace}
             >
-              {this.renderMinimap(dragProps, parsedTrace)}
+              {this.renderHeader(dragProps, parsedTrace)}
               <SpanTree trace={parsedTrace} dragProps={dragProps} />
             </CursorGuideHandler.Provider>
           );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index a40f7a4366..4fc55fe9c4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -203,7 +203,11 @@ export const boundsGenerator = (bounds: {
           type: 'TIMESTAMPS_EQUAL',
           start,
           width: 1,
-          isSpanVisibleInView,
+          // a span bar is visible even if they're at the extreme ends of the view selection.
+          // these edge cases are:
+          // start == end == 0, and
+          // start == end == 1
+          isSpanVisibleInView: end >= 0 && start <= 1,
         };
       }
       case TimestampStatus.Reversed: {
