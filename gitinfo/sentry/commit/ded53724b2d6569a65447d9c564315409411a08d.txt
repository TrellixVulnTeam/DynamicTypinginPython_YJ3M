commit ded53724b2d6569a65447d9c564315409411a08d
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jul 8 15:19:19 2019 -0700

    ref(ui): Consolidate server frontend hydration logic (#13868)
    
    - Consolidates all frontend hydration data into a single global window
       variable `__initialData`.
    
     - Splits application bootstraping into `bootstrap.jsx`, to allow for
       initial data setup before bootstrapping the application.

diff --git a/src/sentry/static/sentry/app/bootstrap.jsx b/src/sentry/static/sentry/app/bootstrap.jsx
new file mode 100644
index 0000000000..dcb332d4b8
--- /dev/null
+++ b/src/sentry/static/sentry/app/bootstrap.jsx
@@ -0,0 +1,151 @@
+import 'bootstrap/js/alert';
+import 'bootstrap/js/tab';
+import 'bootstrap/js/dropdown';
+
+import 'app/utils/statics-setup';
+import 'app/utils/emotion-setup';
+
+import PropTypes from 'prop-types';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import Reflux from 'reflux';
+import * as Router from 'react-router';
+import * as Sentry from '@sentry/browser';
+import {ExtraErrorData, Tracing} from '@sentry/integrations';
+import createReactClass from 'create-react-class';
+import jQuery from 'jquery';
+import moment from 'moment';
+
+import {metric} from 'app/utils/analytics';
+import ConfigStore from 'app/stores/configStore';
+import Main from 'app/main';
+import ajaxCsrfSetup from 'app/utils/ajaxCsrfSetup';
+import plugins from 'app/plugins';
+
+// SDK INIT  --------------------------------------------------------
+Sentry.init({
+  ...window.__SENTRY__OPTIONS,
+  integrations: [
+    new ExtraErrorData({
+      // 6 is arbitrary, seems like a nice number
+      depth: 6,
+    }),
+    new Tracing({
+      tracingOrigins: ['localhost', 'sentry.io', /^\//],
+      autoStartOnDomReady: false,
+    }),
+  ],
+});
+
+Sentry.configureScope(scope => {
+  if (window.__SENTRY__USER) {
+    scope.setUser(window.__SENTRY__USER);
+  }
+  if (window.__SENTRY__VERSION) {
+    scope.setTag('sentry_version', window.__SENTRY__VERSION);
+  }
+});
+
+// -----------------------------------------------------------------
+
+// Used for operational metrics to determine that the application js
+// bundle was loaded by browser.
+metric.mark('sentry-app-init');
+
+// setup jquery for CSRF tokens
+jQuery.ajaxSetup({
+  //jQuery won't allow using the ajaxCsrfSetup function directly
+  beforeSend: ajaxCsrfSetup,
+});
+
+// App setup
+if (window.__initialData) {
+  ConfigStore.loadInitialData(window.__initialData);
+}
+
+// these get exported to a global variable, which is important as its the only
+// way we can call into scoped objects
+
+const render = Component => {
+  const rootEl = document.getElementById('blk_router');
+
+  try {
+    ReactDOM.render(<Component />, rootEl);
+  } catch (err) {
+    // eslint-disable-next-line no-console
+    console.error(
+      new Error(
+        'An unencoded "%" has appeared, it is super effective! (See https://github.com/ReactTraining/history/issues/505)'
+      )
+    );
+    if (err.message === 'URI malformed') {
+      window.location.assign(window.location.pathname);
+    }
+  }
+};
+
+// The password strength component is very heavyweight as it includes the
+// zxcvbn, a relatively byte-heavy password strength estimation library. Load
+// it on demand.
+async function loadPasswordStrength(callback) {
+  const module = await import(/* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength');
+  callback(module);
+}
+
+const globals = {
+  // This is the primary entrypoint for rendering the sentry app.
+  SentryRenderApp: () => render(Main),
+
+  // The following globals are used in sentry-plugins webpack externals
+  // configuration.
+  PropTypes,
+  React,
+  Reflux,
+  Router,
+  Sentry,
+  moment,
+  ReactDOM: {
+    findDOMNode: ReactDOM.findDOMNode,
+    render: ReactDOM.render,
+  },
+
+  // jQuery is still exported to the window as some bootsrap functionality
+  // and legacy plugins like youtrack make use of it.
+  $: jQuery,
+  jQuery,
+
+  // django templates make use of these globals
+  createReactClass,
+};
+
+// The SentryApp global contains exported app modules for use in javascript
+// modules that are not compiled with the sentry bundle.
+globals.SentryApp = {
+  // The following components are used in sentry-plugins.
+  Form: require('app/components/forms/form').default,
+  FormState: require('app/components/forms/index').FormState,
+  LoadingIndicator: require('app/components/loadingIndicator').default,
+  plugins: {
+    add: plugins.add,
+    addContext: plugins.addContext,
+    BasePlugin: plugins.BasePlugin,
+    DefaultIssuePlugin: plugins.DefaultIssuePlugin,
+  },
+
+  // The following components are used in legacy django HTML views
+  passwordStrength: {load: loadPasswordStrength},
+  U2fSign: require('app/components/u2f/u2fsign').default,
+  ConfigStore: require('app/stores/configStore').default,
+  Alerts: require('app/components/alerts').default,
+  Indicators: require('app/components/indicators').default,
+  ProjectSelector: require('app/components/projectHeader/projectSelector').default,
+  Sidebar: require('app/components/sidebar').default,
+  SetupWizard: require('app/components/setupWizard').default,
+  OrganizationsLoader: require('app/components/organizations/organizationsLoader')
+    .default,
+};
+
+// Make globals available on the window object
+Object.keys(globals).forEach(name => (window[name] = globals[name]));
+
+export default globals;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index ce538c18ee..4780e2b7cb 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -1,153 +1,15 @@
 import '@babel/polyfill';
-import 'bootstrap/js/alert';
-import 'bootstrap/js/tab';
-import 'bootstrap/js/dropdown';
 
-import 'app/utils/statics-setup';
-import 'app/utils/emotion-setup';
-
-import PropTypes from 'prop-types';
-import React from 'react';
-import ReactDOM from 'react-dom';
-import Reflux from 'reflux';
-import * as Router from 'react-router';
-import * as Sentry from '@sentry/browser';
-import {ExtraErrorData, Tracing} from '@sentry/integrations';
-import createReactClass from 'create-react-class';
-import jQuery from 'jquery';
-import moment from 'moment';
-
-import {metric} from 'app/utils/analytics';
-import ConfigStore from 'app/stores/configStore';
-import Main from 'app/main';
-import ajaxCsrfSetup from 'app/utils/ajaxCsrfSetup';
-import plugins from 'app/plugins';
-
-// SDK INIT  --------------------------------------------------------
-// window.__SENTRY__OPTIONS will be emmited by sdk-config.html before loading this script
-Sentry.init({
-  ...window.__SENTRY__OPTIONS,
-  integrations: [
-    new ExtraErrorData({
-      // 6 is arbitrary, seems like a nice number
-      depth: 6,
-    }),
-    new Tracing({
-      tracingOrigins: ['localhost', 'sentry.io', /^\//],
-      autoStartOnDomReady: false,
-    }),
-  ],
-});
-
-Sentry.configureScope(scope => {
-  if (window.__SENTRY__USER) {
-    scope.setUser(window.__SENTRY__USER);
-  }
-  if (window.__SENTRY__VERSION) {
-    scope.setTag('sentry_version', window.__SENTRY__VERSION);
-  }
-});
-
-// -----------------------------------------------------------------
-
-// Used for operational metrics to determine that the application js
-// bundle was loaded by browser.
-metric.mark('sentry-app-init');
-
-// setup jquery for CSRF tokens
-jQuery.ajaxSetup({
-  //jQuery won't allow using the ajaxCsrfSetup function directly
-  beforeSend: ajaxCsrfSetup,
-});
-
-// App setup
+// Initial data hydration. The __initialData will be set by the django backend
+// serving sentry.
 if (window.__initialData) {
-  ConfigStore.loadInitialData(window.__initialData, window.__languageCode);
-}
-
-// these get exported to a global variable, which is important as its the only
-// way we can call into scoped objects
+  const {distPrefix, csrfCookieName, sentryConfig, userIdentity} = window.__initialData;
 
-const render = Component => {
-  const rootEl = document.getElementById('blk_router');
-
-  try {
-    ReactDOM.render(<Component />, rootEl);
-  } catch (err) {
-    // eslint-disable-next-line no-console
-    console.error(
-      new Error(
-        'An unencoded "%" has appeared, it is super effective! (See https://github.com/ReactTraining/history/issues/505)'
-      )
-    );
-    if (err.message === 'URI malformed') {
-      window.location.assign(window.location.pathname);
-    }
-  }
-};
-
-// The password strength component is very heavyweight as it includes the
-// zxcvbn, a relatively byte-heavy password strength estimation library. Load
-// it on demand.
-async function loadPasswordStrength(callback) {
-  const module = await import(/* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength');
-  callback(module);
+  window.csrfCookieName = csrfCookieName;
+  window.__sentryGlobalStaticPrefix = distPrefix;
+  window.__SENTRY__OPTIONS = sentryConfig;
+  window.__SENTRY__USER = userIdentity;
 }
 
-const globals = {
-  // This is the primary entrypoint for rendering the sentry app.
-  SentryRenderApp: () => render(Main),
-
-  // The following globals are used in sentry-plugins webpack externals
-  // configuration.
-  PropTypes,
-  React,
-  Reflux,
-  Router,
-  Sentry,
-  moment,
-  ReactDOM: {
-    findDOMNode: ReactDOM.findDOMNode,
-    render: ReactDOM.render,
-  },
-
-  // jQuery is still exported to the window as some bootsrap functionality
-  // makes use of it.
-  $: jQuery,
-  jQuery,
-
-  // django templates make use of these globals
-  createReactClass,
-};
-
-// The SentryApp global contains exported app modules for use in javascript
-// modules that are not compiled with the sentry bundle.
-globals.SentryApp = {
-  // The following components are used in sentry-plugins.
-  Form: require('app/components/forms/form').default,
-  FormState: require('app/components/forms/index').FormState,
-  LoadingIndicator: require('app/components/loadingIndicator').default,
-  plugins: {
-    add: plugins.add,
-    addContext: plugins.addContext,
-    BasePlugin: plugins.BasePlugin,
-    DefaultIssuePlugin: plugins.DefaultIssuePlugin,
-  },
-
-  // The following components are used in legacy django HTML views
-  passwordStrength: {load: loadPasswordStrength},
-  U2fSign: require('app/components/u2f/u2fsign').default,
-  ConfigStore: require('app/stores/configStore').default,
-  Alerts: require('app/components/alerts').default,
-  Indicators: require('app/components/indicators').default,
-  ProjectSelector: require('app/components/projectHeader/projectSelector').default,
-  Sidebar: require('app/components/sidebar').default,
-  SetupWizard: require('app/components/setupWizard').default,
-  OrganizationsLoader: require('app/components/organizations/organizationsLoader')
-    .default,
-};
-
-// Make globals available on the window object
-Object.keys(globals).forEach(name => (window[name] = globals[name]));
-
-export default globals;
+// Once data hydration is done we can initialize the app
+require('app/bootstrap');
diff --git a/src/sentry/static/sentry/app/stores/configStore.jsx b/src/sentry/static/sentry/app/stores/configStore.jsx
index 3f615bd0e7..fad536777f 100644
--- a/src/sentry/static/sentry/app/stores/configStore.jsx
+++ b/src/sentry/static/sentry/app/stores/configStore.jsx
@@ -23,10 +23,13 @@ const ConfigStore = Reflux.createStore({
     return this.config;
   },
 
-  loadInitialData(config, languageOverride = null) {
+  loadInitialData(config) {
     config.features = new Set(config.features || []);
     this.config = config;
 
+    // Language code is passed from django
+    let languageCode = config.languageCode;
+
     // TODO(dcramer): abstract this out of ConfigStore
     if (config.user) {
       config.user.permissions = new Set(config.user.permissions);
@@ -43,15 +46,13 @@ const ConfigStore = Reflux.createStore({
         // e.g. unencoded "%"
       }
 
-      // Priority:
-      // "?lang=en" --> user configuration options --> django request.LANGUAGE_CODE --> "en"
-      setLocale(
-        queryString.lang || config.user.options.language || languageOverride || 'en'
-      );
-    } else if (languageOverride) {
-      setLocale(languageOverride);
+      languageCode = queryString.lang || config.user.options.language || languageCode;
     }
 
+    // Priority:
+    // "?lang=en" --> user configuration options --> django request.LANGUAGE_CODE --> "en"
+    setLocale(languageCode || 'en');
+
     this.trigger(config);
   },
 });
diff --git a/src/sentry/templates/sentry/includes/sdk-config.html b/src/sentry/templates/sentry/includes/sdk-config.html
deleted file mode 100644
index c8005435dc..0000000000
--- a/src/sentry/templates/sentry/includes/sdk-config.html
+++ /dev/null
@@ -1,10 +0,0 @@
-{% load sentry_api %}
-{% load sentry_dsn %}
-<script>
-  window.__SENTRY__OPTIONS = {
-    dsn: '{% public_dsn %}',
-    release: '{{ sentry_version.build }}',
-    whitelistUrls: {% convert_to_json ALLOWED_HOSTS %}
-  };
-  window.__SENTRY__USER = {% get_user_context request %} || undefined;
-</script>
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 8ebe3d9866..6344d6a678 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -1,7 +1,6 @@
 {% load i18n %}
 {% load sentry_api %}
 {% load sentry_avatars %}
-{% load sentry_dsn %}
 {% load sentry_assets %}
 {% load sentry_features %}
 {% load sentry_helpers %}
@@ -34,14 +33,10 @@
   <title>{% block title %}Sentry{% endblock %}</title>
 
   <script>
-    window.csrfCookieName = '{{ CSRF_COOKIE_NAME }}';
-    window.__sentryGlobalStaticPrefix = '{% asset_url "sentry" "dist/" %}';
     window.__initialData = {% get_react_config %};
-    window.__languageCode = {{ request.LANGUAGE_CODE|to_json|safe }};
   </script>
 
   {% block scripts %}
-  {% include "sentry/includes/sdk-config.html" %}
   {% locale_js_include %}
   <script src="{% asset_url "sentry" "dist/vendor.js" %}"{% crossorigin %}></script>
   <script src="{% asset_url "sentry" "dist/app.js" %}"{% crossorigin %}></script>
diff --git a/src/sentry/templatetags/sentry_dsn.py b/src/sentry/templatetags/sentry_dsn.py
deleted file mode 100644
index 8bd44b7e0e..0000000000
--- a/src/sentry/templatetags/sentry_dsn.py
+++ /dev/null
@@ -1,43 +0,0 @@
-from __future__ import absolute_import
-
-from django import template
-from django.conf import settings
-from django.db.models import F
-from django.core.cache import cache
-
-from sentry.models import ProjectKey
-
-register = template.Library()
-
-
-def _get_project_key(project_id):
-    try:
-        return ProjectKey.objects.filter(
-            project=project_id,
-            roles=F('roles').bitor(ProjectKey.roles.store),
-        )[0]
-    except IndexError:
-        return None
-
-
-def get_public_dsn():
-    if settings.SENTRY_FRONTEND_DSN:
-        return settings.SENTRY_FRONTEND_DSN
-
-    project_id = settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT
-    cache_key = 'dsn:%s' % (project_id, )
-
-    result = cache.get(cache_key)
-    if result is None:
-        key = _get_project_key(project_id)
-        if key:
-            result = key.dsn_public
-        else:
-            result = ''
-        cache.set(cache_key, result, 60)
-    return result
-
-
-@register.simple_tag
-def public_dsn():
-    return get_public_dsn()
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 3715b808cb..152033b44c 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -3,19 +3,22 @@ from __future__ import absolute_import
 import sentry
 
 from django import template
+from django.core.cache import cache
 from django.conf import settings
 from django.contrib.auth.models import AnonymousUser
 from django.contrib.messages import get_messages
+from django.db.models import F
 from pkg_resources import parse_version
 
 from sentry import features, options
 from sentry.api.serializers.base import serialize
 from sentry.api.serializers.models.user import DetailedUserSerializer
 from sentry.auth.superuser import is_active_superuser
+from sentry.models import ProjectKey
 from sentry.utils import auth, json
 from sentry.utils.email import is_smtp_enabled
+from sentry.utils.assets import get_asset_url
 from sentry.utils.support import get_support_mail
-from sentry.templatetags.sentry_dsn import get_public_dsn
 
 register = template.Library()
 
@@ -69,6 +72,34 @@ def _get_statuspage():
     return {'id': id, 'api_host': settings.STATUS_PAGE_API_HOST}
 
 
+def _get_project_key(project_id):
+    try:
+        return ProjectKey.objects.filter(
+            project=project_id,
+            roles=F('roles').bitor(ProjectKey.roles.store),
+        )[0]
+    except IndexError:
+        return None
+
+
+def _get_public_dsn():
+    if settings.SENTRY_FRONTEND_DSN:
+        return settings.SENTRY_FRONTEND_DSN
+
+    project_id = settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT
+    cache_key = 'dsn:%s' % (project_id, )
+
+    result = cache.get(cache_key)
+    if result is None:
+        key = _get_project_key(project_id)
+        if key:
+            result = key.dsn_public
+        else:
+            result = ''
+        cache.set(cache_key, result, 60)
+    return result
+
+
 @register.simple_tag(takes_context=True)
 def get_react_config(context):
     if 'request' in context:
@@ -77,10 +108,25 @@ def get_react_config(context):
         messages = get_messages(request)
         session = getattr(request, 'session', None)
         is_superuser = is_active_superuser(request)
+        language_code = getattr(request, 'LANGUAGE_CODE', 'en')
     else:
         user = None
         messages = []
         is_superuser = False
+        language_code = 'en'
+
+    # User identity is used by the sentry SDK
+    if request and user:
+        user_identity = {'ip_address': request.META['REMOTE_ADDR']}
+        if user and user.is_authenticated():
+            user_identity.update({
+                'email': user.email,
+                'id': user.id,
+            })
+            if user.name:
+                user_identity['name'] = user.name
+    else:
+        user_identity = {}
 
     enabled_features = []
     if features.has('organizations:create', actor=user):
@@ -101,8 +147,9 @@ def get_react_config(context):
         'urlPrefix': options.get('system.url-prefix'),
         'version': version_info,
         'features': enabled_features,
+        'distPrefix': get_asset_url('sentry', 'dist/'),
         'needsUpgrade': needs_upgrade,
-        'dsn': get_public_dsn(),
+        'dsn': _get_public_dsn(),
         'statuspage': _get_statuspage(),
         'messages': [{
             'message': msg.message,
@@ -117,6 +164,14 @@ def get_react_config(context):
         # It should only be used on a fresh browser nav to a path where an
         # organization is not in context
         'lastOrganization': session['activeorg'] if session and 'activeorg' in session else None,
+        'languageCode': language_code,
+        'userIdentity': user_identity,
+        'csrfCookieName': settings.CSRF_COOKIE_NAME,
+        'sentryConfig': {
+            'dsn': _get_public_dsn(),
+            'release': version_info['build'],
+            'whitelistUrls': list(settings.ALLOWED_HOSTS),
+        },
     }
     if user and user.is_authenticated():
         context.update({
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 8bb807f418..5ab1bd81ac 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -27,11 +27,9 @@ def get_default_context(request, existing_context=None, team=None):
     from sentry.plugins import plugins
 
     context = {
-        'CSRF_COOKIE_NAME': settings.CSRF_COOKIE_NAME,
         'URL_PREFIX': options.get('system.url-prefix'),
         'SINGLE_ORGANIZATION': settings.SENTRY_SINGLE_ORGANIZATION,
         'PLUGINS': plugins,
-        'ALLOWED_HOSTS': list(settings.ALLOWED_HOSTS),
         'ONPREMISE': settings.SENTRY_ONPREMISE,
     }
 
diff --git a/tests/sentry/templatetags/test_sentry_dsn.py b/tests/sentry/templatetags/test_sentry_dsn.py
deleted file mode 100644
index 3be8a3ebf8..0000000000
--- a/tests/sentry/templatetags/test_sentry_dsn.py
+++ /dev/null
@@ -1,32 +0,0 @@
-from __future__ import absolute_import
-
-from django.conf import settings
-from django.template import Context, Template
-
-from sentry.models import ProjectKey
-from sentry.testutils import TestCase
-
-
-class DsnTest(TestCase):
-    TEMPLATE = Template("{% load sentry_dsn %}{% public_dsn %}")
-
-    def test_valid_dsn(self):
-        project = self.create_project()
-        with self.settings(SENTRY_PROJECT=project.id):
-            key = ProjectKey.objects.get_or_create(project=project)[0]
-            result = self.TEMPLATE.render(Context())
-
-            assert key.dsn_public in result
-            assert len(result) > 0
-
-    def test_no_system_url(self):
-        project = self.create_project()
-
-        new_options = settings.SENTRY_OPTIONS.copy()
-        new_options['system.url-prefix'] = ''
-
-        with self.settings(SENTRY_PROJECT=project.id, SENTRY_OPTIONS=new_options):
-            result = self.TEMPLATE.render(Context())
-
-            assert not result
-            assert len(result) == 0
