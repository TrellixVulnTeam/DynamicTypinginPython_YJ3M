commit a1c3c6901620f60a1a4ffed17939d6b2ed001fbf
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 24 00:48:18 2016 +0200

    Refactor U2F UI interfaces
    
    This moves some common code into a separate react component so we can
    use it in more places.

diff --git a/src/sentry/static/sentry/app/components/u2fenrollment.jsx b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
index 4404d8a666..c7441a9bd6 100644
--- a/src/sentry/static/sentry/app/components/u2fenrollment.jsx
+++ b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
-import u2f from 'u2f-api';
 
+import U2fInterface from './u2finterface';
 import {t} from '../locale';
 
 const U2fEnrollment = React.createClass({
@@ -8,81 +8,19 @@ const U2fEnrollment = React.createClass({
     enrollmentData: React.PropTypes.object
   },
 
-  getInitialState() {
-    return {
-      isSupported: null,
-      formElement: null,
-      challengeElement: null,
-      responseElement: null
-    };
-  },
-
-  componentDidMount() {
-    u2f.isSupported().then((supported) => {
-      this.setState({
-        isSupported: supported
-      });
-      if (!supported) {
-        return;
-      }
-      let {registerRequests, authenticateRequests} = this.props.enrollmentData;
-      u2f.register(registerRequests, authenticateRequests).then((data) => {
-        this.state.responseElement.value = JSON.stringify(data);
-        this.state.formElement.submit();
-      });
-    });
-  },
-
-  bindChallengeElement(ref) {
-    this.setState({
-      challengeElement: ref,
-      formElement: ref.form
-    });
-    ref.value = JSON.stringify(this.props.enrollmentData);
-  },
-
-  bindResponseElement(ref) {
-    this.setState({
-      responseElement: ref
-    });
-  },
-
-  renderUnsupported() {
-    return (
-      <p className="error">
-        {t(`
-          Unfortunately your browser does not support U2F.  You need to add
-          a different authentication method or switch to a browser that
-          supports it (for instance Microsoft Edge or Google Chrome).
-        `)}
-      </p>
-    );
-  },
-
-  renderEnrollment() {
+  render() {
     return (
-      <div className="enrollment">
-        <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
-        <input type="hidden" name="response" ref={this.bindResponseElement}/>
+      <U2fInterface
+        challengeData={this.props.enrollmentData}
+        flowMode={'enroll'}>
         <p>
           {t(`
             To enroll your U2F device insert it now or tap the button on it
             to activate it.
           `)}
         </p>
-      </div>
+      </U2fInterface>
     );
-  },
-
-  render() {
-    let {isSupported} = this.state;
-    if (isSupported === null) {
-      return null;
-    } else if (!isSupported) {
-      return this.renderUnsupported();
-    } else {
-      return this.renderEnrollment();
-    }
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
new file mode 100644
index 0000000000..17e88d2836
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -0,0 +1,112 @@
+import React from 'react';
+import u2f from 'u2f-api';
+
+import {t} from '../locale';
+
+const U2fInterface = React.createClass({
+  propTypes: {
+    challengeData: React.PropTypes.object.isRequired,
+    flowMode: React.PropTypes.string.isRequired,
+    onTap: React.PropTypes.func,
+    silentIfUnsupported: React.PropTypes.bool
+  },
+
+  getDefaultProps() {
+    return {
+      silentIfUnsupported: false
+    };
+  },
+
+  getInitialState() {
+    return {
+      isSupported: null,
+      formElement: null,
+      challengeElement: null,
+      responseElement: null
+    };
+  },
+
+  componentDidMount() {
+    u2f.isSupported().then((supported) => {
+      this.setState({
+        isSupported: supported
+      });
+      if (!supported) {
+        return;
+      }
+      this.invokeU2fFlow();
+    });
+  },
+
+  invokeU2fFlow() {
+    let promise;
+    if (this.props.flowMode === 'sign') {
+      promise = u2f.sign(this.props.challengeData.authenticateRequests);
+    } else if (this.props.flowMode === 'enroll') {
+      let {registerRequests, authenticateRequests} = this.props.challengeData;
+      promise = u2f.register(registerRequests, authenticateRequests);
+    } else {
+      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);
+    }
+    promise.then((data) => {
+      this.state.responseElement.value = JSON.stringify(data);
+      if (!this.props.onTap || this.props.onTap()) {
+        this.state.formElement.submit();
+      }
+    });
+  },
+
+  bindChallengeElement(ref) {
+    this.setState({
+      challengeElement: ref,
+      formElement: ref.form
+    });
+    ref.value = JSON.stringify(this.props.challengeData);
+  },
+
+  bindResponseElement(ref) {
+    this.setState({
+      responseElement: ref
+    });
+  },
+
+  renderUnsupported() {
+    if (this.props.silentIfUnsupported) {
+      return null;
+    }
+    return (
+      <div className="u2f-box">
+        <p className="error">
+          {t(`
+           Unfortunately your browser does not support U2F. You need to use
+           a different two-factor method or switch to a browser that supports
+           it (Google Chrome or Microsoft Edge).
+          `)}
+        </p>
+      </div>
+    );
+  },
+
+  renderPrompt() {
+    return (
+      <div className="u2f-box">
+        <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
+        <input type="hidden" name="response" ref={this.bindResponseElement}/>
+        {this.props.children}
+      </div>
+    );
+  },
+
+  render() {
+    let {isSupported} = this.state;
+    if (isSupported === null) {
+      return null;
+    } else if (!isSupported) {
+      return this.renderUnsupported();
+    } else {
+      return this.renderPrompt();
+    }
+  }
+});
+
+export default U2fInterface;
diff --git a/src/sentry/static/sentry/app/components/u2fsign.jsx b/src/sentry/static/sentry/app/components/u2fsign.jsx
index 740a51dc41..7b9939dc91 100644
--- a/src/sentry/static/sentry/app/components/u2fsign.jsx
+++ b/src/sentry/static/sentry/app/components/u2fsign.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
-import u2f from 'u2f-api';
 
+import U2fInterface from './u2finterface';
 import {t} from '../locale';
 
 const U2fSign = React.createClass({
@@ -8,79 +8,19 @@ const U2fSign = React.createClass({
     challengeData: React.PropTypes.object
   },
 
-  getInitialState() {
-    return {
-      isSupported: null,
-      formElement: null,
-      challengeElement: null,
-      responseElement: null
-    };
-  },
-
-  componentDidMount() {
-    u2f.isSupported().then((supported) => {
-      this.setState({
-        isSupported: supported
-      });
-      if (!supported) {
-        return;
-      }
-      u2f.sign(this.props.challengeData.authenticateRequests).then((data) => {
-        this.state.responseElement.value = JSON.stringify(data);
-        this.state.formElement.submit();
-      });
-    });
-  },
-
-  bindChallengeElement(ref) {
-    this.setState({
-      challengeElement: ref,
-      formElement: ref.form
-    });
-    ref.value = JSON.stringify(this.props.challengeData);
-  },
-
-  bindResponseElement(ref) {
-    this.setState({
-      responseElement: ref
-    });
-  },
-
-  renderUnsupported() {
-    return (
-      <p className="error">
-        {t(`
-          Unfortunately your browser does not support U2F so you need to use
-          a different sign in method.
-        `)}
-      </p>
-    );
-  },
-
-  renderPrompt() {
+  render() {
     return (
-      <div>
-        <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
-        <input type="hidden" name="response" ref={this.bindResponseElement}/>
+      <U2fInterface
+        challengeData={this.props.challengeData}
+        flowMode={'sign'}>
         <p>
           {t(`
             Insert your U2F device or tap the button on it to confirm the
             sign-in request.
           `)}
         </p>
-      </div>
+      </U2fInterface>
     );
-  },
-
-  render() {
-    let {isSupported} = this.state;
-    if (isSupported === null) {
-      return null;
-    } else if (!isSupported) {
-      return this.renderUnsupported();
-    } else {
-      return this.renderPrompt();
-    }
   }
 });
 
