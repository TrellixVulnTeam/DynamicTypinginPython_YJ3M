commit f69b93977e12a81eabb2f5f1d35ed39cc9ab8c9e
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Sep 15 11:25:21 2017 -0700

    feat(plugins): Add Visual Studio auth provider (#6124)
    
    Add OAuth provider (using Assertion grant) for VSTS and clean up various error handling.

diff --git a/CHANGES b/CHANGES
index 999d767227..914ba1ae9a 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@ Version 8.21 (Unreleased)
 -------------------------
 
 - Ignore querystrings when looking up release artifacts
+- Add Visual Studio authentication provider for plugins.
 
 Version 8.20
 ------------
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index dded079215..3833ed16ab 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -298,6 +298,7 @@ AUTHENTICATION_BACKENDS = (
     'social_auth.backends.trello.TrelloBackend',
     'social_auth.backends.asana.AsanaBackend',
     'social_auth.backends.slack.SlackBackend',
+    'social_auth.backends.visualstudio.VisualStudioBackend',
 )
 
 AUTH_PASSWORD_VALIDATORS = [
@@ -321,6 +322,7 @@ SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
     'social_auth.backends.github.GithubBackend', 'social_auth.backends.bitbucket.BitbucketBackend',
     'social_auth.backends.trello.TrelloBackend', 'social_auth.backends.asana.AsanaBackend',
     'social_auth.backends.slack.SlackBackend', 'social_auth.backends.github_apps.GithubAppsBackend',
+    'social_auth.backends.visualstudio.VisualStudioBackend',
 )
 
 SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
@@ -366,6 +368,7 @@ AUTH_PROVIDERS = {
     'bitbucket': ('BITBUCKET_CONSUMER_KEY', 'BITBUCKET_CONSUMER_SECRET'),
     'asana': ('ASANA_CLIENT_ID', 'ASANA_CLIENT_SECRET'),
     'slack': ('SLACK_CLIENT_ID', 'SLACK_CLIENT_SECRET'),
+    'visualstudio': ('VISUALSTUDIO_APP_ID', 'VISUALSTUDIO_APP_SECRET', 'VISUALSTUDIO_CLIENT_SECRET'),
 }
 
 AUTH_PROVIDER_LABELS = {
@@ -374,7 +377,8 @@ AUTH_PROVIDER_LABELS = {
     'trello': 'Trello',
     'bitbucket': 'Bitbucket',
     'asana': 'Asana',
-    'slack': 'Slack'
+    'slack': 'Slack',
+    'visualstudio': 'Visual Studio',
 }
 
 import random
diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index 3b99675f1f..95edd821ed 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -11,6 +11,8 @@ enabled.
 """
 from __future__ import absolute_import
 
+import logging
+import requests
 import six
 import threading
 
@@ -44,6 +46,8 @@ PIPELINE = setting('SOCIAL_AUTH_PIPELINE', (
     'social_auth.backends.pipeline.user.update_user_details',
 ))
 
+logger = logging.getLogger('social_auth')
+
 
 class SocialAuthBackend(object):
     """A django.contrib.auth backend that authenticates the user based on
@@ -609,10 +613,12 @@ class BaseOAuth2(BaseOAuth):
         try:
             response = json.loads(dsa_urlopen(request).read())
         except HTTPError as e:
-            if e.code == 400:
-                raise AuthCanceled(self)
-            else:
-                raise
+            logger.exception('plugins.auth.error', extra={
+                'class': type(self),
+                'status_code': e.code,
+                'response': e.read()[:128],
+            })
+            raise AuthUnknownError(self)
         except (ValueError, KeyError):
             raise AuthUnknownError(self)
 
@@ -621,7 +627,7 @@ class BaseOAuth2(BaseOAuth):
                             *args, **kwargs)
 
     @classmethod
-    def refresh_token_params(cls, token):
+    def refresh_token_params(cls, token, provider):
         client_id, client_secret = cls.get_key_and_secret()
         return {
             'refresh_token': token,
@@ -631,17 +637,15 @@ class BaseOAuth2(BaseOAuth):
         }
 
     @classmethod
-    def process_refresh_token_response(cls, response):
-        return json.loads(response)
-
-    @classmethod
-    def refresh_token(cls, token):
-        request = Request(
+    def refresh_token(cls, token, provider):
+        params = cls.refresh_token_params(token, provider)
+        response = requests.post(
             cls.REFRESH_TOKEN_URL or cls.ACCESS_TOKEN_URL,
-            data=urlencode(cls.refresh_token_params(token)),
-            headers=cls.auth_headers()
+            data=params,
+            headers=cls.auth_headers(),
         )
-        return cls.process_refresh_token_response(dsa_urlopen(request).read())
+        response.raise_for_status()
+        return response.json()
 
     @classmethod
     def revoke_token_params(cls, token, uid):
diff --git a/src/social_auth/backends/asana.py b/src/social_auth/backends/asana.py
index 64716f5c28..b664ec1a93 100644
--- a/src/social_auth/backends/asana.py
+++ b/src/social_auth/backends/asana.py
@@ -79,14 +79,6 @@ class AsanaAuth(BaseOAuth2):
         return self.do_auth(response['access_token'], response=response,
                             *args, **kwargs)
 
-    @classmethod
-    def refresh_token(cls, token):
-        params = cls.refresh_token_params(token)
-        response = requests.post(cls.ACCESS_TOKEN_URL, data=params,
-                                 headers=cls.auth_headers())
-        response.raise_for_status()
-        return response.json()
-
 
 # Backend definition
 BACKENDS = {
diff --git a/src/social_auth/backends/slack.py b/src/social_auth/backends/slack.py
index 90c6df4396..32cf59f910 100644
--- a/src/social_auth/backends/slack.py
+++ b/src/social_auth/backends/slack.py
@@ -58,14 +58,6 @@ class SlackAuth(BaseOAuth2):
         except ValueError:
             return None
 
-    @classmethod
-    def refresh_token(cls, token):
-        params = cls.refresh_token_params(token)
-        response = requests.post(cls.ACCESS_TOKEN_URL, data=params,
-                                 headers=cls.auth_headers())
-        response.raise_for_status()
-        return response.json()
-
 
 # Backend definition
 BACKENDS = {
diff --git a/src/social_auth/backends/visualstudio.py b/src/social_auth/backends/visualstudio.py
new file mode 100644
index 0000000000..9d068c9935
--- /dev/null
+++ b/src/social_auth/backends/visualstudio.py
@@ -0,0 +1,89 @@
+"""
+Obtain
+VISUALSTUDIO_CLIENT_ID & VISUALSTUDIO_CLIENT_SECRET
+and put into sentry.conf.py
+"""
+from __future__ import absolute_import
+
+import requests
+
+from django.core.urlresolvers import reverse
+
+from social_auth.backends import BaseOAuth2, OAuthBackend
+from social_auth.utils import setting
+
+from sentry.utils.http import absolute_uri
+
+VISUALSTUDIO_AUTHORIZATION_URL = 'https://app.vssps.visualstudio.com/oauth2/authorize'
+VISUALSTUDIO_TOKEN_EXCHANGE_URL = 'https://app.vssps.visualstudio.com/oauth2/token'
+VISUALSTUDIO_USER_DETAILS_URL = 'https://app.vssps.visualstudio.com/_apis/profile/profiles/me?api-version=1.0'
+
+
+class VisualStudioBackend(OAuthBackend):
+    """Visual Studio OAuth authentication backend"""
+    name = 'visualstudio'
+    EXTRA_DATA = [
+        ('id', 'id'),
+        ('refresh_token', 'refresh_token'),
+    ]
+
+    def get_user_details(self, response):
+        """Return user details from Visual Studio account"""
+        return {
+            'email': response.get('email'),
+            'id': response.get('id'),
+            'full_name': response.get('full_name')
+        }
+
+
+class VisualStudioAuth(BaseOAuth2):
+    """Slack OAuth authentication mechanism"""
+    AUTHORIZATION_URL = VISUALSTUDIO_AUTHORIZATION_URL
+    ACCESS_TOKEN_URL = VISUALSTUDIO_TOKEN_EXCHANGE_URL
+    AUTH_BACKEND = VisualStudioBackend
+    SETTINGS_KEY_NAME = 'VISUALSTUDIO_APP_ID'
+    SETTINGS_SECRET_NAME = 'VISUALSTUDIO_APP_SECRET'
+    SETTINGS_CLIENT_SECRET_NAME = 'VISUALSTUDIO_CLIENT_SECRET'
+    REDIRECT_STATE = False
+    DEFAULT_SCOPE = ['vso.work_write', 'vso.project']
+    RESPONSE_TYPE = 'Assertion'
+
+    def user_data(self, access_token, *args, **kwargs):
+        """Loads user data from service"""
+        resp = requests.get(VISUALSTUDIO_USER_DETAILS_URL,
+                            headers={'Authorization': 'Bearer {}'.format(access_token)})
+        resp.raise_for_status()
+        content = resp.json()
+        return {
+            'id': content['id'],
+            'email': content['emailAddress'],
+            'full_name': content['displayName']
+        }
+
+    def auth_complete_params(self, state=None):
+        secret = setting(self.SETTINGS_CLIENT_SECRET_NAME)
+        return {
+            'client_assertion_type': 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
+            'client_assertion': secret,
+            'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer',
+            'assertion': self.data.get('code', ''),
+            'redirect_uri': self.get_redirect_uri(state),
+        }
+
+    @classmethod
+    def refresh_token_params(cls, token, provider):
+        secret = setting(cls.SETTINGS_CLIENT_SECRET_NAME)
+
+        return {
+            'client_assertion_type': 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
+            'client_assertion': secret,
+            'grant_type': 'refresh_token',
+            'redirect_uri': absolute_uri(reverse('socialauth_associate_complete', args=[provider])),
+            'assertion': token,
+        }
+
+
+# Backend definition
+BACKENDS = {
+    'visualstudio': VisualStudioAuth,
+}
diff --git a/src/social_auth/models.py b/src/social_auth/models.py
index 70aef14754..537c5bde2d 100644
--- a/src/social_auth/models.py
+++ b/src/social_auth/models.py
@@ -75,7 +75,7 @@ class UserSocialAuth(models.Model):
         if refresh_token:
             backend = self.get_backend()
             if hasattr(backend, 'refresh_token'):
-                response = backend.refresh_token(refresh_token)
+                response = backend.refresh_token(refresh_token, self.provider)
                 new_access_token = response.get('access_token')
                 # We have not got a new access token, so don't lose the
                 # existing one.
diff --git a/src/social_auth/urls.py b/src/social_auth/urls.py
index 13d45df5d5..92ecd62598 100644
--- a/src/social_auth/urls.py
+++ b/src/social_auth/urls.py
@@ -11,8 +11,8 @@ from social_auth.views import auth, complete
 
 urlpatterns = patterns('',
                        # authentication
-                       url(r'^associate/(?P<backend>[^/]+)/$', auth,
-                           name='socialauth_associate'),
                        url(r'^associate/complete/(?P<backend>[^/]+)/$', complete,
                            name='socialauth_associate_complete'),
+                       url(r'^associate/(?P<backend>[^/]+)/$', auth,
+                           name='socialauth_associate'),
                        )
