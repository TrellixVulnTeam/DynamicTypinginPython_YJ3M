commit 9ba03393c064791c8fde3852e406fd9eb7c98202
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 2 16:49:18 2017 -0700

    [plugins] refactor common plugin components
    
    Break out plugin list (active + inactive) into its own component

diff --git a/src/sentry/api/endpoints/project_plugins.py b/src/sentry/api/endpoints/project_plugins.py
new file mode 100644
index 0000000000..a8371348bb
--- /dev/null
+++ b/src/sentry/api/endpoints/project_plugins.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.plugins import plugins
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.plugin import PluginSerializer
+
+
+class ProjectPluginsEndpoint(ProjectEndpoint):
+    def get(self, request, project):
+        context = serialize([
+            plugin
+            for plugin in plugins.configurable_for_project(project, version=None)
+            if plugin.has_project_conf()
+        ], request.user, PluginSerializer(project))
+        return Response(context)
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 87e3921b3a..791c5d79ad 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -20,7 +20,7 @@ class PluginSerializer(Serializer):
             'name': six.text_type(obj.get_title()),
             'type': obj.get_plugin_type(),
             'canDisable': obj.can_disable,
-            'isTestable': obj.is_testable(),
+            'isTestable': hasattr(obj, 'is_testable') and obj.is_testable(),
             'metadata': obj.get_metadata(),
             'contexts': contexts,
             'status': obj.get_status(),
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 5bdaa0e163..cdcf0b65d7 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -71,6 +71,7 @@ from .endpoints.project_index import ProjectIndexEndpoint
 from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
 from .endpoints.project_member_index import ProjectMemberIndexEndpoint
+from .endpoints.project_plugins import ProjectPluginsEndpoint
 from .endpoints.project_plugin_details import ProjectPluginDetailsEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_rules import ProjectRulesEndpoint
@@ -390,6 +391,9 @@ urlpatterns = patterns(
         name='sentry-api-0-project-reprocessing'),
 
     # Load plugin project urls
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugins/$',
+        ProjectPluginsEndpoint.as_view(),
+        name='sentry-api-0-project-plugins'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugins/(?P<plugin_id>[^\/]+)/$',
         ProjectPluginDetailsEndpoint.as_view(),
         name='sentry-api-0-project-plugin-details'),
diff --git a/src/sentry/static/sentry/app/components/inactivePlugins.jsx b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
new file mode 100644
index 0000000000..1317ff68c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
@@ -0,0 +1,41 @@
+import React from 'react';
+
+import {t} from '../locale';
+
+export default React.createClass({
+  propTypes: {
+    plugins: React.PropTypes.array.isRequired,
+    onEnablePlugin: React.PropTypes.func.isRequired
+  },
+
+  enablePlugin(plugin) {
+    return this.props.onEnablePlugin(plugin, true);
+  },
+
+  render() {
+    let plugins = this.props.plugins;
+    if (plugins.length === 0) return null;
+    return (
+      <div className="box">
+        <div className="box-header">
+          <h3>{t('Inactive Integrations')}</h3>
+        </div>
+        <div className="box-content with-padding">
+          <ul className="integration-list">
+            {plugins.map(plugin => {
+              return (
+                <li key={plugin.id}>
+                  <button
+                    onClick={this.enablePlugin.bind(this, plugin)}
+                    className={`ref-plugin-enable-${plugin.id}`}>
+                    {plugin.name}
+                  </button>
+                </li>
+              );
+            })}
+          </ul>
+        </div>
+      </div>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
new file mode 100644
index 0000000000..e72b7fc38a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/pluginList.jsx
@@ -0,0 +1,61 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import InactivePlugins from './inactivePlugins';
+import IndicatorStore from '../stores/indicatorStore';
+import PluginConfig from './pluginConfig';
+import {t} from '../locale';
+
+export default React.createClass({
+  propTypes: {
+    organization: React.PropTypes.object.isRequired,
+    project: React.PropTypes.object.isRequired,
+    pluginList: React.PropTypes.array.isRequired,
+    onDisablePlugin: React.PropTypes.func.isRequired,
+    onEnablePlugin: React.PropTypes.func.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  enablePlugin(plugin) {
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {organization, project} = this.props;
+    this.api.request(`/projects/${organization.slug}/${project.slug}/plugins/${plugin.id}/`, {
+      method: 'POST',
+      success: () => this.props.onEnablePlugin(plugin),
+      error: error => {
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  onDisablePlugin(plugin) {
+    this.props.onDisablePlugin(plugin);
+  },
+
+  render() {
+    let {organization, pluginList, project} = this.props;
+
+    return (
+      <div>
+        {pluginList.filter(p => p.enabled).map(data => {
+          return (
+            <PluginConfig
+              data={data}
+              organization={organization}
+              project={project}
+              key={data.id}
+              onDisablePlugin={this.onDisablePlugin.bind(this, data)}
+            />
+          );
+        })}
+        <InactivePlugins
+          plugins={pluginList.filter(p => !p.enabled)}
+          onEnablePlugin={this.enablePlugin} />
+      </div>
+    );
+  },
+});
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index ebe3eb3747..145ed20139 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -4,7 +4,7 @@ import underscore from 'underscore';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import ListLink from '../components/listLink';
-import PluginConfig from '../components/pluginConfig';
+import PluginList from '../components/pluginList';
 import {FormState, RangeField, TextField} from '../components/forms';
 import {t, tct} from '../locale';
 
@@ -252,44 +252,6 @@ const GeneralSettings = React.createClass({
   }
 });
 
-const InactivePlugins = React.createClass({
-  propTypes: {
-    plugins: React.PropTypes.array.isRequired,
-    onEnablePlugin: React.PropTypes.func.isRequired
-  },
-
-  enablePlugin(plugin) {
-    return this.props.onEnablePlugin(plugin, true);
-  },
-
-  render() {
-    let plugins = this.props.plugins;
-    if (plugins.length === 0) return null;
-    return (
-      <div className="box">
-        <div className="box-header">
-          <h3>{t('Inactive Integrations')}</h3>
-        </div>
-        <div className="box-content with-padding">
-          <ul className="integration-list">
-            {plugins.map(plugin => {
-              return (
-                <li key={plugin.id}>
-                  <button
-                    onClick={this.enablePlugin.bind(this, plugin)}
-                    className={`ref-plugin-enable-${plugin.id}`}>
-                    {plugin.name}
-                  </button>
-                </li>
-              );
-            })}
-          </ul>
-        </div>
-      </div>
-    );
-  }
-});
-
 const ProjectAlertSettings = React.createClass({
   propTypes: {
     // these are not declared as required of issues with cloned elements
@@ -303,10 +265,35 @@ const ProjectAlertSettings = React.createClass({
 
   getInitialState() {
     return {
-      project: this.props.project
+      loading: true,
+      error: false,
+      pluginList: []
     };
   },
 
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/plugins/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          pluginList: data.filter(p => p.type === 'notification'),
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
   onDigestsChange(data) {
     // TODO(dcramer): propagate this in a more correct way
     this.setState({
@@ -328,39 +315,32 @@ const ProjectAlertSettings = React.createClass({
     });
   },
 
-  enablePlugin(plugin) {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/plugins/${plugin.id}/`, {
-      method: 'POST',
-      data: this.state.formData,
-      success: data => {
-        // TODO(dcramer): propagate this in a more correct way
-        plugin = this.state.project.plugins.find(p => p.id === plugin.id);
-        plugin.enabled = true;
-        this.setState({project: this.state.project});
-      },
-      error: error => {
-        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-      }
-    });
+  onEnablePlugin(plugin) {
+    this.setState({pluginList: this.state.pluginList.map(p => {
+      if (p.id !== plugin.id)
+        return p;
+      return {
+        ...plugin,
+        enabled: true,
+      };
+    })});
   },
 
   onDisablePlugin(plugin) {
-    // TODO(dcramer): propagate this in a more correct way
-    plugin = this.state.project.plugins.find(p => p.id === plugin.id);
-    plugin.enabled = false;
-    this.setState({project: this.state.project});
+    this.setState({pluginList: this.state.pluginList.map(p => {
+      if (p.id !== plugin.id)
+        return p;
+      return {
+        ...plugin,
+        enabled: false,
+      };
+    })});
   },
 
   render() {
     let {orgId, projectId} = this.props.params;
-    let organization = this.props.organization;
-    let project = this.state.project;
-    let plugins = project.plugins.filter(p => p.type == 'notification');
+    let {organization, project} = this.props;
+    let {pluginList} = this.state;
     return (
       <div>
         <a
@@ -410,23 +390,12 @@ const ProjectAlertSettings = React.createClass({
           onSave={this.onDigestsChange}
         />
 
-        {plugins.filter(p => p.enabled).map(data => {
-          return (
-            <PluginConfig
-              data={data}
-              organization={organization}
-              project={project}
-              key={data.id}
-              onDisablePlugin={this.onDisablePlugin.bind(this, data)}
-            />
-          );
-        })}
-
-        <InactivePlugins
-          plugins={plugins.filter(p => !p.enabled)}
-          onEnablePlugin={this.enablePlugin}
-        />
-
+        <PluginList
+          organization={organization}
+          project={project}
+          pluginList={pluginList}
+          onEnablePlugin={this.onEnablePlugin}
+          onDisablePlugin={this.onDisablePlugin} />
       </div>
     );
   }
