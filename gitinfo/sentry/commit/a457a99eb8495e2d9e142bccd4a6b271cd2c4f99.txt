commit a457a99eb8495e2d9e142bccd4a6b271cd2c4f99
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed May 20 15:32:31 2020 -0700

    refs(alert_rules): Convert action handlers to use aggregate field (#18893)
    
    This converts the slack and email action handlers to correctly use the aggregate field. We continue
    to return the aggregation conversion from the serializer, but if we can't make the conversion then
    the value will just be `None`.
    
    Depends on https://github.com/getsentry/sentry/pull/18875

diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index e850d8cede..821db8170a 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -31,7 +31,9 @@ class AlertRuleSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         env = obj.snuba_query.environment
-        aggregation = aggregate_to_query_aggregation.get(obj.snuba_query.aggregate).value
+        aggregation = aggregate_to_query_aggregation.get(obj.snuba_query.aggregate, None)
+        if aggregation:
+            aggregation = aggregation.value
         return {
             "id": six.text_type(obj.id),
             "name": obj.name,
diff --git a/src/sentry/incidents/action_handlers.py b/src/sentry/incidents/action_handlers.py
index 3e9ffe864e..0bfc1bc0be 100644
--- a/src/sentry/incidents/action_handlers.py
+++ b/src/sentry/incidents/action_handlers.py
@@ -9,12 +9,10 @@ from django.template.defaultfilters import pluralize
 from sentry.incidents.models import (
     AlertRuleThresholdType,
     AlertRuleTriggerAction,
-    QueryAggregations,
     TriggerStatus,
     IncidentStatus,
     INCIDENT_STATUS,
 )
-from sentry.snuba.subscriptions import aggregate_to_query_aggregation
 from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
 
@@ -43,9 +41,9 @@ class ActionHandler(object):
     [AlertRuleTriggerAction.TargetType.USER, AlertRuleTriggerAction.TargetType.TEAM],
 )
 class EmailActionHandler(ActionHandler):
-    query_aggregations_display = {
-        QueryAggregations.TOTAL: "Total Events",
-        QueryAggregations.UNIQUE_USERS: "Total Unique Users",
+    query_aggregates_display = {
+        "count()": "Total Events",
+        "count_unique(tags[sentry:user])": "Total Unique Users",
     }
 
     def get_targets(self):
@@ -105,7 +103,7 @@ class EmailActionHandler(ActionHandler):
         # we can simplify this to be the below statement
         show_greater_than_string = is_active == is_threshold_type_above
         environment_string = snuba_query.environment.name if snuba_query.environment else "All"
-
+        aggregate = alert_rule.snuba_query.aggregate
         return {
             "link": absolute_uri(
                 reverse(
@@ -130,9 +128,7 @@ class EmailActionHandler(ActionHandler):
             "environment": environment_string,
             "time_window": format_duration(snuba_query.time_window / 60),
             "triggered_at": trigger.date_added,
-            "aggregate": self.query_aggregations_display[
-                aggregate_to_query_aggregation[alert_rule.snuba_query.aggregate]
-            ],
+            "aggregate": self.query_aggregates_display.get(aggregate, aggregate),
             "query": snuba_query.query,
             "threshold": trigger.alert_threshold if is_active else trigger.resolve_threshold,
             # if alert threshold and threshold type is above then show '>'
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 1260a7d98b..f4fa42ece8 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -389,25 +389,28 @@ def get_incident_event_stats(incident, start=None, end=None, windowed_stats=Fals
     return SnubaTSResult(results[0], snuba_params.start, snuba_params.end, snuba_params.rollup)
 
 
-def get_incident_aggregates(incident, start=None, end=None, windowed_stats=False):
+def get_incident_aggregates(
+    incident, start=None, end=None, windowed_stats=False, use_alert_aggregate=False
+):
     """
     Calculates aggregate stats across the life of an incident, or the provided range.
+    If `use_alert_aggregate` is True, calculates just the aggregate that the alert is
+    for, and returns as the `count` key.
+    If False, returns two values:
     - count: Total count of events
     - unique_users: Total number of unique users
     """
     query_params = build_incident_query_params(incident, start, end, windowed_stats)
-    # We don't care about the specific aggregations here, we just want total event and
-    # unique user counts
-    query_params.pop("aggregations", None)
-    snuba_params_list = [
-        SnubaQueryParams(
-            aggregations=[("count()", "", "count"), ("uniq", "tags[sentry:user]", "unique_users")],
-            limit=10000,
-            **query_params
-        )
-    ]
+    if not use_alert_aggregate:
+        query_params["aggregations"] = [
+            ("count()", "", "count"),
+            ("uniq", "tags[sentry:user]", "unique_users"),
+        ]
+    else:
+        query_params["aggregations"][0][2] = "count"
+    snuba_params_list = [SnubaQueryParams(limit=10000, **query_params)]
     results = bulk_raw_query(snuba_params_list, referrer="incidents.get_incident_aggregates")
-    return [result["data"][0] for result in results][0]
+    return results[0]["data"][0]
 
 
 def get_incident_stats(incident, windowed_stats=False):
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index dfb655cb7c..f3d049fa6b 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -12,8 +12,6 @@ from sentry import tagstore
 from sentry.api.fields.actor import Actor
 from sentry.incidents.logic import get_incident_aggregates
 from sentry.incidents.models import IncidentStatus, IncidentTrigger
-from sentry.snuba.models import QueryAggregations
-from sentry.snuba.subscriptions import aggregate_to_query_aggregation
 from sentry.utils import json
 from sentry.utils.assets import get_asset_url
 from sentry.utils.dates import to_timestamp
@@ -49,7 +47,10 @@ MEMBER_PREFIX = "@"
 CHANNEL_PREFIX = "#"
 strip_channel_chars = "".join([MEMBER_PREFIX, CHANNEL_PREFIX])
 SLACK_DEFAULT_TIMEOUT = 10
-QUERY_AGGREGATION_DISPLAY = ["events", "users affected"]
+QUERY_AGGREGATION_DISPLAY = {
+    "count()": "events",
+    "count_unique(tags[sentry:user])": "users affected",
+}
 
 
 def format_actor_option(actor):
@@ -303,7 +304,6 @@ def build_incident_attachment(incident):
         end = incident_trigger.date_modified
     else:
         start, end = None, None
-    aggregates = get_incident_aggregates(incident, start, end)
 
     if incident.status == IncidentStatus.CLOSED.value:
         status = "Resolved"
@@ -315,14 +315,10 @@ def build_incident_attachment(incident):
         status = "Critical"
         color = LEVEL_TO_COLOR["fatal"]
 
-    query_aggregation = aggregate_to_query_aggregation[alert_rule.snuba_query.aggregate]
-    agg_text = QUERY_AGGREGATION_DISPLAY[query_aggregation.value]
-
-    agg_value = (
-        aggregates["count"]
-        if query_aggregation == QueryAggregations.TOTAL
-        else aggregates["unique_users"]
+    agg_text = QUERY_AGGREGATION_DISPLAY.get(
+        alert_rule.snuba_query.aggregate, alert_rule.snuba_query.aggregate
     )
+    agg_value = get_incident_aggregates(incident, start, end, use_alert_aggregate=True)["count"]
     time_window = alert_rule.snuba_query.time_window / 60
 
     text = "{} {} in the last {} minutes".format(agg_value, agg_text, time_window)
diff --git a/tests/sentry/api/serializers/test_alert_rule.py b/tests/sentry/api/serializers/test_alert_rule.py
index 66988bdb17..3dc72bd907 100644
--- a/tests/sentry/api/serializers/test_alert_rule.py
+++ b/tests/sentry/api/serializers/test_alert_rule.py
@@ -18,16 +18,17 @@ from sentry.testutils import TestCase, APITestCase
 
 class BaseAlertRuleSerializerTest(object):
     def assert_alert_rule_serialized(self, alert_rule, result, skip_dates=False):
+        aggregation = aggregate_to_query_aggregation.get(alert_rule.snuba_query.aggregate, None)
+        if aggregation:
+            aggregation = aggregation.value
+
         assert result["id"] == six.text_type(alert_rule.id)
         assert result["organizationId"] == six.text_type(alert_rule.organization_id)
         assert result["name"] == alert_rule.name
         assert result["dataset"] == alert_rule.snuba_query.dataset
         assert result["query"] == alert_rule.snuba_query.query
         assert result["aggregate"] == alert_rule.snuba_query.aggregate
-        assert (
-            result["aggregation"]
-            == aggregate_to_query_aggregation[alert_rule.snuba_query.aggregate].value
-        )
+        assert result["aggregation"] == aggregation
         assert result["timeWindow"] == alert_rule.snuba_query.time_window / 60
         assert result["resolution"] == alert_rule.snuba_query.resolution / 60
         assert result["thresholdPeriod"] == alert_rule.threshold_period
diff --git a/tests/sentry/incidents/test_action_handlers.py b/tests/sentry/incidents/test_action_handlers.py
index b82bcb5e2d..d758886e2a 100644
--- a/tests/sentry/incidents/test_action_handlers.py
+++ b/tests/sentry/incidents/test_action_handlers.py
@@ -22,7 +22,6 @@ from sentry.incidents.models import (
 )
 from sentry.integrations.slack.utils import build_incident_attachment
 from sentry.models import Integration, UserOption
-from sentry.snuba.subscriptions import aggregate_to_query_aggregation
 from sentry.testutils import TestCase
 from sentry.utils.http import absolute_uri
 
@@ -87,6 +86,7 @@ class EmailActionHandlerGenerateEmailContextTest(TestCase):
         action = self.create_alert_rule_trigger_action()
         incident = self.create_incident()
         handler = EmailActionHandler(action, incident, self.project)
+        aggregate = action.alert_rule_trigger.alert_rule.snuba_query.aggregate
         expected = {
             "link": absolute_uri(
                 reverse(
@@ -108,11 +108,7 @@ class EmailActionHandlerGenerateEmailContextTest(TestCase):
                 )
             ),
             "incident_name": incident.title,
-            "aggregate": handler.query_aggregations_display[
-                aggregate_to_query_aggregation[
-                    action.alert_rule_trigger.alert_rule.snuba_query.aggregate
-                ]
-            ],
+            "aggregate": handler.query_aggregates_display.get(aggregate, aggregate),
             "query": action.alert_rule_trigger.alert_rule.snuba_query.query,
             "threshold": action.alert_rule_trigger.alert_threshold,
             "status": INCIDENT_STATUS[IncidentStatus(incident.status)],
