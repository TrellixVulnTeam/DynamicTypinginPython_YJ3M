commit f597c3b25b3165c87fb3a0acb7e68f4cf526dda2
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 4 23:00:23 2013 -0700

    Initial work on ChainedException rendering

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 6f802f069c..965936f1f6 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -88,6 +88,24 @@ def get_context(lineno, context_line, pre_context=None, post_context=None, filen
     return context
 
 
+def is_newest_frame_first(event):
+    newest_first = event.platform not in ('python', None)
+
+    if env.request and env.request.user.is_authenticated():
+        display = UserOption.objects.get_value(
+            user=env.request.user,
+            project=None,
+            key='stacktrace_order',
+            default=None,
+        )
+        if display == '1':
+            newest_first = False
+        elif display == '2':
+            newest_first = True
+
+    return newest_first
+
+
 class Interface(object):
     """
     An interface is a structured representation of data, which may
@@ -482,23 +500,6 @@ class Stacktrace(Interface):
             output.extend(frame.get_hash())
         return output
 
-    def is_newest_frame_first(self, event):
-        newest_first = event.platform not in ('python', None)
-
-        if env.request and env.request.user.is_authenticated():
-            display = UserOption.objects.get_value(
-                user=env.request.user,
-                project=None,
-                key='stacktrace_order',
-                default=None,
-            )
-            if display == '1':
-                newest_first = False
-            elif display == '2':
-                newest_first = True
-
-        return newest_first
-
     def get_context(self, event, is_public=False, **kwargs):
         system_frames = 0
         frames = []
@@ -516,7 +517,7 @@ class Stacktrace(Interface):
             for frame in frames:
                 frame['in_app'] = True
 
-        newest_first = self.is_newest_frame_first(event)
+        newest_first = is_newest_frame_first(event)
         if newest_first:
             frames = frames[::-1]
 
@@ -538,7 +539,7 @@ class Stacktrace(Interface):
 
     def get_stacktrace(self, event, system_frames=True, newest_first=None, max_frames=None):
         if newest_first is None:
-            newest_first = self.is_newest_frame_first(event)
+            newest_first = is_newest_frame_first(event)
 
         result = []
         if newest_first:
@@ -1009,3 +1010,27 @@ class ChainedException(Interface):
 
     def get_composite_hash(self, interfaces):
         return self.exceptions[0].get_composite_hash(interfaces)
+
+    def get_context(self, event, is_public=False, **kwargs):
+        context_kwargs = dict(event=event, is_public=is_public, **kwargs)
+
+        exceptions = []
+        for e in self.exceptions:
+            context = e.get_context(**context_kwargs)
+            if e.stacktrace:
+                context['stacktrace'] = e.stacktrace.get_context(**context_kwargs)
+            else:
+                context['stacktrace'] = {}
+            exceptions.append(context)
+
+        return {
+            'newest_first': is_newest_frame_first(event),
+            'system_frames': any(e['stacktrace'].get('system_frames') for e in exceptions),
+            'exceptions': exceptions,
+        }
+
+    def to_html(self, event, is_public=False, **kwargs):
+        if not self.exceptions:
+            return ''
+        context = self.get_context(event=event, is_public=is_public, **kwargs)
+        return render_to_string('sentry/partial/interfaces/chained_exception.html', context)
diff --git a/src/sentry/templates/sentry/partial/interfaces/chained_exception.html b/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
new file mode 100644
index 0000000000..8a723d52bd
--- /dev/null
+++ b/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
@@ -0,0 +1,53 @@
+{% load i18n %}
+{% load sentry_helpers %}
+
+<div class="module">
+    <div class="page-header">
+        {% block comment %}
+            <a href="javascript:void(0)" data-container="#raw_stacktrace" data-title="Stacktrace" class="popup btn small pull-right">{% trans "Raw" %}</a>
+        {% endblock %}
+        {% if system_frames %}
+            <form class="pull-right" style="margin:8px 20px 0 0; white-space: nowrap">
+                <label class="checkbox"><input type="checkbox" id="show_hidden_frames"> Show {{ system_frames }} hidden frames</label>
+            </form>
+        {% endif %}
+        <h2>
+            {% trans "Stacktrace" %}
+            <small>{% if newest_first %}
+                ({% trans "most recent call first" %})
+            {% else %}
+                ({% trans "most recent call last" %})
+            {% endif %}</small>
+        </h2>
+    </div>
+    <div class="module-content">
+        {% for exception in exceptions %}
+            {% if not forloop.first %}
+                <h3>Caused by {{ exception.fullname }}</h3>
+            {% endif %}
+            {% with exception.stacktrace.frames as frames %}
+                {% include "sentry/partial/interfaces/stacktrace_inner.html" %}
+            {% endwith %}
+        {% endfor %}
+    </div>
+</div>
+
+{% block comment %}
+TODO:
+<div id="raw_stacktrace" style="display: none;">
+    <pre>{{ stacktrace }}</pre>
+</div>
+{% endblock %}
+
+{% if system_frames %}
+    <script type="text/javascript">
+    $('#show_hidden_frames').change(function(e){
+        var $el = $(e.target);
+        if ($el.is(':checked')) {
+            $('.traceback li.system-frame').show();
+        } else {
+            $('.traceback li.system-frame').hide();
+        }
+    }).change();
+    </script>
+{% endif %}
\ No newline at end of file
