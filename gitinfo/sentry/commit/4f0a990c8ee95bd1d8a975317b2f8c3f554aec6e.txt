commit 4f0a990c8ee95bd1d8a975317b2f8c3f554aec6e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Mar 2 13:48:34 2020 -0800

    ref(ts): Convert `<AccountSecurity> to typescript (#17380)
    
    Fixes a double loading bug that also resolves the linked Sentry issue.
    
    Fixes JAVASCRIPT-21KY

diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx
index 147584ce3a..35633a8544 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.tsx
@@ -15,7 +15,7 @@ type Props = {
   AsyncComponent['props'];
 
 type State = {
-  authenticators?: Authenticator[];
+  authenticators?: Authenticator[] | null;
   organizations?: OrganizationSummary[];
 } & AsyncComponent['state'];
 
@@ -38,10 +38,9 @@ class AccountSecurityWrapper extends AsyncComponent<Props, State> {
       await this.api.requestPromise(`${ENDPOINT}${auth.authId}/`, {method: 'DELETE'});
       this.remountComponent();
     } catch (_err) {
+      this.setState({loading: false});
       addErrorMessage(t('Error disabling %s', auth.name));
     }
-
-    this.setState({loading: false});
   };
 
   handleRegenerateBackupCodes = async () => {
@@ -53,10 +52,9 @@ class AccountSecurityWrapper extends AsyncComponent<Props, State> {
       });
       this.remountComponent();
     } catch (_err) {
+      this.setState({loading: false});
       addErrorMessage(t('Error regenerating backup codes'));
     }
-
-    this.setState({loading: false});
   };
 
   renderBody() {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
rename to src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.tsx
index 26f553d147..f63e6d5817 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.tsx
@@ -1,8 +1,10 @@
-import PropTypes from 'prop-types';
+import * as ReactRouter from 'react-router';
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {Authenticator, OrganizationSummary} from 'app/types';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
@@ -20,18 +22,19 @@ import TwoFactorRequired from 'app/views/settings/account/accountSecurity/compon
 import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
 
+type Props = {
+  authenticators: Authenticator[] | null;
+  orgsRequire2fa: OrganizationSummary[];
+  countEnrolled: number;
+  deleteDisabled: boolean;
+  onDisable: (auth: Authenticator) => void;
+} & AsyncView['props'] &
+  ReactRouter.WithRouterProps;
+
 /**
  * Lists 2fa devices + password change form
  */
-class AccountSecurity extends AsyncView {
-  static PropTypes = {
-    authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,
-    orgsRequire2fa: PropTypes.arrayOf(PropTypes.object).isRequired,
-    countEnrolled: PropTypes.number.isRequired,
-    deleteDisabled: PropTypes.bool.isRequired,
-    onDisable: PropTypes.func.isRequired,
-  };
-
+class AccountSecurity extends AsyncView<Props> {
   getTitle() {
     return t('Security');
   }
@@ -40,14 +43,17 @@ class AccountSecurity extends AsyncView {
     return [];
   }
 
-  handleSessionClose = () => {
-    this.api.request('/auth/', {
-      method: 'DELETE',
-      data: {all: true},
-      success: () => {
-        window.location = '/auth/login/';
-      },
-    });
+  handleSessionClose = async () => {
+    try {
+      await this.api.requestPromise('/auth/', {
+        method: 'DELETE',
+        data: {all: true},
+      });
+      window.location.assign('/auth/login/');
+    } catch (err) {
+      addErrorMessage(t('There was a problem closing all sessions'));
+      throw err;
+    }
   };
 
   formatOrgSlugs = () => {
@@ -61,12 +67,12 @@ class AccountSecurity extends AsyncView {
 
   renderBody() {
     const {authenticators, countEnrolled, deleteDisabled, onDisable} = this.props;
-    const isEmpty = !authenticators.length;
+    const isEmpty = !authenticators?.length;
 
     return (
       <div>
         <SettingsPageHeader
-          title="Security"
+          title={t('Security')}
           tabs={
             <NavTabs underlined>
               <ListLink to={recreateRoute('', this.props)} index>
@@ -110,7 +116,7 @@ class AccountSecurity extends AsyncView {
 
           <PanelBody>
             {!isEmpty &&
-              authenticators.map(auth => {
+              authenticators?.map(auth => {
                 const {
                   id,
                   authId,
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
index 42440a34a7..fe823cc58b 100644
--- a/tests/js/spec/views/accountSecurity.spec.jsx
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -11,6 +11,8 @@ const AUTH_ENDPOINT = '/auth/';
 
 describe('AccountSecurity', function() {
   beforeEach(function() {
+    jest.spyOn(window.location, 'assign').mockImplementation(() => {});
+
     Client.clearMockResponses();
     Client.addMockResponse({
       url: ORG_ENDPOINT,
@@ -18,6 +20,10 @@ describe('AccountSecurity', function() {
     });
   });
 
+  afterEach(function() {
+    window.location.assign.mockRestore();
+  });
+
   it('renders empty', function() {
     Client.addMockResponse({
       url: ENDPOINT,
@@ -65,7 +71,7 @@ describe('AccountSecurity', function() {
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
   });
 
-  it('can delete enrolled authenticator', function() {
+  it('can delete enrolled authenticator', async function() {
     Client.addMockResponse({
       url: ENDPOINT,
       body: [
@@ -91,22 +97,39 @@ describe('AccountSecurity', function() {
     );
     expect(wrapper.find('AuthenticatorStatus').prop('enabled')).toBe(true);
 
+    // next authenticators request should have totp disabled
+    const authenticatorsMock = Client.addMockResponse({
+      url: ENDPOINT,
+      body: [
+        TestStubs.Authenticators().Totp({
+          isEnrolled: false,
+          authId: '15',
+          configureButton: 'Info',
+        }),
+      ],
+    });
+
     // This will open confirm modal
     wrapper.find('Button[icon="icon-trash"]').simulate('click');
+
     // Confirm
     wrapper
       .find('Modal Button')
       .last()
       .simulate('click');
 
+    await tick();
+    wrapper.update();
+
     expect(deleteMock).toHaveBeenCalled();
 
-    setTimeout(() => {
-      wrapper.update();
-      expect(wrapper.find('AuthenticatorStatus').prop('enabled')).toBe(false);
-    }, 1);
-    // still has another 2fa method
-    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
+    // Should only have been called once
+    expect(authenticatorsMock).toHaveBeenCalledTimes(1);
+
+    expect(wrapper.find('AuthenticatorStatus').prop('enabled')).toBe(false);
+
+    // No enrolled authenticators
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
   });
 
   it('can remove one of multiple 2fa methods when org requires 2fa', function() {
@@ -360,7 +383,7 @@ describe('AccountSecurity', function() {
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
   });
 
-  it('can expire all sessions', function() {
+  it('can expire all sessions', async function() {
     Client.addMockResponse({
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
@@ -381,6 +404,8 @@ describe('AccountSecurity', function() {
 
     wrapper.find('Button[data-test-id="signoutAll"]').simulate('click');
 
+    await tick();
+    expect(window.location.assign).toHaveBeenCalledWith('/auth/login/');
     expect(mock).toHaveBeenCalled();
   });
 });
