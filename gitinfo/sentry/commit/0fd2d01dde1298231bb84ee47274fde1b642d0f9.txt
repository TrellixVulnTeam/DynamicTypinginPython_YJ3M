commit 0fd2d01dde1298231bb84ee47274fde1b642d0f9
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed May 2 09:14:28 2018 -0700

    feat(ui): Add `Hook` component (#8264)

diff --git a/src/sentry/static/sentry/app/components/hook.jsx b/src/sentry/static/sentry/app/components/hook.jsx
new file mode 100644
index 0000000000..14c11ea62f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/hook.jsx
@@ -0,0 +1,62 @@
+import PropTypes from 'prop-types';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import HookStore from 'app/stores/hookStore';
+
+/**
+ * Instead of accessing the HookStore directly, use this.
+ *
+ * If the hook slot needs to perform anything w/ the hooks, you can pass a function as a child and you will receive an object with a `hooks` key
+ *
+ * example:
+ *
+ * <Hook name="my-hook">
+ * {({hooks}) => hooks.map(hook => (
+ *  <Wrapper>
+ *    {hook}
+ * </Wrapper>
+ * ))}
+ * </Hook>
+ *
+ */
+const Hook = createReactClass({
+  displayName: 'Hook',
+  propTypes: {
+    name: PropTypes.string.isRequired,
+  },
+  mixins: [Reflux.listenTo(HookStore, 'handleHooks')],
+
+  getInitialState() {
+    let {name, ...props} = this.props;
+
+    return {
+      hooks: HookStore.get(name).map(cb => cb(props)),
+    };
+  },
+
+  handleHooks(hookName, hooks) {
+    let {name, ...props} = this.props;
+
+    // Make sure that the incoming hook update matches this component's hook name
+    if (hookName !== name) return;
+
+    this.setState(state => ({
+      hooks: hooks.map(cb => cb(props)),
+    }));
+  },
+
+  render() {
+    let {children} = this.props;
+
+    if (!this.state.hooks || !this.state.hooks.length) return null;
+
+    if (typeof children === 'function') {
+      return children({hooks: this.state.hooks});
+    }
+
+    return this.state.hooks;
+  },
+});
+
+export default Hook;
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 1911ebdfe1..3ed1350174 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -36,7 +36,7 @@ const HookStore = Reflux.createStore({
       this.hooks[hookName] = [];
     }
     this.hooks[hookName].push(callback);
-    this.trigger(hookName, [callback]);
+    this.trigger(hookName, this.hooks[hookName]);
   },
 
   remove(hookName, callback) {
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
index 44fcecf14e..d46d4ca7ab 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
@@ -28,7 +28,7 @@ const OrganizationSettingsNavigation = createReactClass({
     let org = this.getOrganization();
     if (name !== 'settings:organization-navigation-config') return;
     this.setState(state => ({
-      hookConfigs: [...state.hookConfigs, ...hooks.map(cb => cb(org))],
+      hookConfigs: hooks.map(cb => cb(org)),
     }));
   },
 
diff --git a/tests/js/spec/components/hook.spec.jsx b/tests/js/spec/components/hook.spec.jsx
new file mode 100644
index 0000000000..5e38ed3aa4
--- /dev/null
+++ b/tests/js/spec/components/hook.spec.jsx
@@ -0,0 +1,106 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Hook from 'app/components/hook';
+import HookStore from 'app/stores/hookStore';
+
+describe('Hook', function() {
+  const Wrapper = function Wrapper(props) {
+    return <div {...props} />;
+  };
+  const routerContext = TestStubs.routerContext();
+
+  beforeEach(function() {
+    HookStore.add('footer', ({organization} = {}) => {
+      return (
+        <Wrapper key="initial" organization={organization}>
+          {organization.slug}
+        </Wrapper>
+      );
+    });
+  });
+
+  afterEach(function() {
+    // Clear HookStore
+    HookStore.init();
+  });
+
+  it('renders component from a hook', function() {
+    let wrapper = mount(
+      <div>
+        <Hook name="footer" organization={TestStubs.Organization()} />
+      </div>,
+      routerContext
+    );
+
+    expect(HookStore.hooks.footer).toHaveLength(1);
+    expect(wrapper.find('Wrapper')).toHaveLength(1);
+    expect(wrapper.find('Wrapper').prop('organization').slug).toBe('org-slug');
+  });
+
+  it('renders an invalid hook', function() {
+    let wrapper = mount(
+      <div>
+        <Hook name="invalid-hook" organization={TestStubs.Organization()} />
+      </div>,
+      routerContext
+    );
+
+    expect(wrapper.find('Wrapper')).toHaveLength(0);
+    expect(wrapper.find('div')).toHaveLength(1);
+  });
+
+  it('can re-render when hooks get after initial render', function() {
+    let wrapper = mount(
+      <div>
+        <Hook name="footer" organization={TestStubs.Organization()} />
+      </div>,
+      routerContext
+    );
+
+    expect(wrapper.find('Wrapper')).toHaveLength(1);
+
+    HookStore.add('footer', ({organization} = {}) => {
+      return (
+        <Wrapper key="new" organization={null}>
+          New Hook
+        </Wrapper>
+      );
+    });
+
+    wrapper.update();
+
+    expect(HookStore.hooks.footer).toHaveLength(2);
+    expect(wrapper.find('Wrapper')).toHaveLength(2);
+    expect(
+      wrapper
+        .find('Wrapper')
+        .at(1)
+        .prop('organization')
+    ).toEqual(null);
+  });
+
+  it('can use children as a render prop', function() {
+    let wrapper = mount(
+      <div>
+        <Hook name="footer" organization={TestStubs.Organization()}>
+          {({hooks}) => hooks.map((hook, i) => <Wrapper key={i}>{hook}</Wrapper>)}
+        </Hook>
+      </div>,
+      routerContext
+    );
+
+    HookStore.add('footer', ({organization} = {}) => {
+      return (
+        <Wrapper key="new" organization={null}>
+          New Hook
+        </Wrapper>
+      );
+    });
+
+    wrapper.update();
+
+    // Has 2 Wrappers from store, and each is wrapped by another Wrapper
+    expect(wrapper.find('Wrapper')).toHaveLength(4);
+  });
+});
