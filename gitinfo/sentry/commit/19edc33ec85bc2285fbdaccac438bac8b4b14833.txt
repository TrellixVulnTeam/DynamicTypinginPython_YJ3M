commit 19edc33ec85bc2285fbdaccac438bac8b4b14833
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 25 16:12:18 2015 -0700

    Initial working pass at stream manager

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 988d1d15f3..3bb119fe46 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -30,7 +30,12 @@ class Client {
       data = JSON.stringify(data);
     }
 
-    var fullUrl = this.baseUrl + path;
+    var fullUrl;
+    if (path.indexOf(this.baseUrl) === -1) {
+      fullUrl = this.baseUrl + path;
+    } else {
+      fullUrl = path;
+    }
     if (query) {
       if (fullUrl.indexOf('?') !== -1) {
         fullUrl += '&' + query;
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 9514c2f643..fe8d464d2d 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -1,5 +1,6 @@
 /** @jsx React.DOM */
 
+var jQuery = require("jquery");
 var Reflux = require("reflux");
 
 var AlertActions = require("../actions/alertActions");
@@ -43,6 +44,42 @@ var GroupListStore = Reflux.createStore({
     this.trigger();
   },
 
+  add(items) {
+    if (!items instanceof Array) {
+      items = [items];
+    }
+
+    var itemsById = {};
+    items.forEach((item) => {
+      itemsById[item.id] = item;
+    });
+
+    for (var i = 0, item; (item = this.items[i]); i++) {
+      if (itemsById[item.id]) {
+        itemsById[item.id] = null;
+        jQuery.extend(true, this.items[i], itemsById[item.id]);
+        return;
+      }
+    }
+
+    for (item in itemsById) {
+      this.items.push(itemsById[item]);
+    }
+
+    this.trigger();
+  },
+
+  remove(itemId) {
+    for (var i = 0; i < this.items.length; i++) {
+      if (this.items[i].id === itemId) {
+        this.items.splice(i, i + 1);
+        return;
+      }
+    }
+
+    this.trigger();
+  },
+
   addStatus(id, status) {
     if (typeof this.statuses[id] === 'undefined') {
       this.statuses[id] = {};
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 1d1eb1b132..43fbebd685 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -26,28 +26,6 @@ module.exports = {
     return vars;
   },
 
-  parseLinkHeader(header) {
-    if (header === null) {
-      return {};
-    }
-
-    var header_vals = header.split(','),
-        links = {};
-
-    header_vals.forEach((val) => {
-      var match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(val);
-      var hasResults = (match[3] === 'true' ? true : (match[3] === 'false' ? false : null));
-
-      links[match[2]] = {
-        href: match[1],
-        results: hasResults,
-        cursor: match[4]
-      };
-    });
-
-    return links;
-  },
-
   sortArray(arr, score_fn) {
     arr.sort((a, b) => {
       var a_score = score_fn(a),
@@ -96,6 +74,10 @@ module.exports = {
     });
   },
 
+  parseLinkHeader: require('./utils/parseLinkHeader'),
+
   Collection: require('./utils/collection'),
-  PendingChangeQueue: require('./utils/pendingChangeQueue')
+  PendingChangeQueue: require('./utils/pendingChangeQueue'),
+  StreamManager: require('./utils/streamManager'),
+  StreamPoller: require('./utils/streamPoller')
 };
diff --git a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
new file mode 100644
index 0000000000..5ac959ee8c
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
@@ -0,0 +1,23 @@
+/*** @jsx React.DOM */
+
+module.exports = function(header) {
+  if (header === null) {
+    return {};
+  }
+
+  var header_vals = header.split(','),
+      links = {};
+
+  header_vals.forEach((val) => {
+    var match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(val);
+    var hasResults = (match[3] === 'true' ? true : (match[3] === 'false' ? false : null));
+
+    links[match[2]] = {
+      href: match[1],
+      results: hasResults,
+      cursor: match[4]
+    };
+  });
+
+  return links;
+};
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index b1edf7b582..dc860a945c 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -1,51 +1,62 @@
 /*** @jsx React.DOM */
 
-var syncUpdates = function(sm) {
-  if (sm.limit && sm.length > sm.limit) {
-    // TODO(dcramer): this needs to remove items from GroupListStore
-    sm.splice(sm.limit, sm.length - sm.limit);
-  }
-};
-
-
 class StreamManager {
   // TODO(dcramer): this should listen to changes on GroupListStore and remove
   // items that are removed there
-  constructor(options) {
-    this.idList = [];
-
+  constructor(store, options) {
     if (typeof options === "undefined") {
       options = {};
     }
 
+    this.idList = [];
+    this.store = store;
     this.limit = options.limit || 1000;
     this.length = 0;
 
     return this;
   }
 
-  push(itemIds) {
-    if (!itemIds instanceof Array) {
-      itemIds = [itemIds];
+  trim() {
+    for (var i = this.limit; i < this.length; i++) {
+      this.store.remove(this.idList[i]);
     }
+    this.idList.splice(this.limit, this.length - this.limit);
+  }
 
-    itemIds.forEach((id) => {
-      // this needs to update the item in the global store, and ensure its
-      // position in our local array
-      var existing = GroupListStore.getItem(id);
-      if (existing) {
-        $.extend(true, existing, item);
-        item = existing;
-      } else {
-        GroupListStore.add(id);
+  push(items) {
+    if (!items instanceof Array) {
+      items = [items];
+    }
+    items.forEach((item) => {
+      var idx = this.idList.indexOf(item.id);
+      if (idx !== -1) {
+        this.idList.splice(idx, idx + 1);
       }
-      this.idList.push(id);
       this.length += 1;
+      this.idList.push(item.id);
     });
-    syncUpdates(this);
+    this.trim();
+    this.store.add(items);
     return this;
   }
 
+  getAllItems() {
+    var items = this.store.getAllItems();
+    var itemsById = {};
+    items.forEach((item) => {
+      itemsById[item.id] = item;
+    });
+
+    var ordered = [];
+    this.idList.forEach((itemId) => {
+      if (itemsById[itemId]) {
+        ordered.push(itemsById[itemId]);
+      }
+    });
+
+    return ordered;
+  }
+
   unshift(items) {
     return this.push(items.reverse());
   }
diff --git a/src/sentry/static/sentry/app/utils/streamPoller.jsx b/src/sentry/static/sentry/app/utils/streamPoller.jsx
new file mode 100644
index 0000000000..c06908811d
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/streamPoller.jsx
@@ -0,0 +1,58 @@
+/*** @jsx React.DOM */
+
+var api = require('../api');
+var parseLinkHeader = require('./parseLinkHeader');
+
+class StreamPoller {
+  constructor(options) {
+    this.options = options;
+    this._timeoutId = null;
+    this._active = true;
+    this._delay = 3000;
+    this._pollingEndpoint = options.endpoint;
+  }
+
+  enable(){
+    this._active = true;
+    if (!this._timeoutId) {
+      this._timeoutId = window.setTimeout(this.poll.bind(this), this._delay);
+    }
+  }
+
+  disable(){
+    this._active = false;
+    if (this._timeoutId) {
+      window.clearTimeout(this._timeoutId);
+      this._timeoutId = null;
+    }
+  }
+
+  poll() {
+    api.request(this._pollingEndpoint, {
+      success: (data, _, jqXHR) => {
+        // cancel in progress operation if disabled
+        if (!this._active) {
+          return;
+        }
+
+        // if theres no data, nothing changes
+        if (!data.length) {
+          return;
+        }
+
+        var links = parseLinkHeader(jqXHR.getResponseHeader('Link'));
+
+        this._pollingEndpoint = links.previous.href;
+
+        this.options.success(data);
+      },
+      complete: () => {
+        if (this._active) {
+          this._timeoutId = window.setTimeout(this.poll.bind(this), this._delay);
+        }
+      }
+    });
+  }
+}
+
+module.exports = StreamPoller;
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 2e04917d8c..2a276b7db8 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -16,54 +16,6 @@ var StreamActions = require('./stream/actions');
 var StreamFilters = require('./stream/filters');
 var utils = require("../utils");
 
-// TODO(dcramer): the poller/collection needs to actually unshift/pop
-// items from the GroupListStore to ensure it doesnt grow in memory
-var StreamPoller = function(options){
-  this.options = options;
-  this._timeoutId = null;
-  this._active = true;
-  this._delay = 3000;
-  this._pollingEndpoint = options.endpoint;
-};
-StreamPoller.prototype.enable = function(){
-  this._active = true;
-  if (!this._timeoutId) {
-    this._timeoutId = window.setTimeout(this.poll.bind(this), this._delay);
-  }
-};
-StreamPoller.prototype.disable = function(){
-  this._active = false;
-  if (this._timeoutId) {
-    window.clearTimeout(this._timeoutId);
-    this._timeoutId = null;
-  }
-};
-StreamPoller.prototype.poll = function() {
-  api.request(this._pollingEndpoint, {
-    success: (data, _, jqXHR) => {
-      // cancel in progress operation if disabled
-      if (!this._active) {
-        return;
-      }
-
-      // if theres no data, nothing changes
-      if (!data.length) {
-        return;
-      }
-
-      var links = utils.parseLinkHeader(jqXHR.getResponseHeader('Link'));
-      this._pollingEndpoint = links.previous.href;
-
-      this.options.success(data);
-    },
-    complete: () => {
-      if (this._active) {
-        this._timeoutId = window.setTimeout(this.poll.bind(this), this._delay);
-      }
-    }
-  });
-};
-
 var Stream = React.createClass({
   mixins: [
     Reflux.listenTo(GroupListStore, "onAggListChange"),
@@ -77,12 +29,6 @@ var Stream = React.createClass({
     setProjectNavSection: React.PropTypes.func.isRequired
   },
 
-  onAggListChange() {
-    this.setState({
-      groupList: GroupListStore.getAllItems()
-    });
-  },
-
   getInitialState() {
     return {
       groupList: [],
@@ -100,10 +46,12 @@ var Stream = React.createClass({
   componentWillMount() {
     this.props.setProjectNavSection('stream');
 
-    this._poller = new StreamPoller({
-      success: this.handleRealtimePoll,
+    this._streamManager = new utils.StreamManager(GroupListStore);
+    this._poller = new utils.StreamPoller({
+      success: this.onRealtimePoll,
       endpoint: this.getGroupListEndpoint()
     });
+    this._poller.enable();
 
     this.fetchData();
   },
@@ -127,6 +75,8 @@ var Stream = React.createClass({
   },
 
   fetchData() {
+    GroupListStore.loadInitialData([]);
+
     this.setState({
       loading: true,
       error: false
@@ -134,7 +84,7 @@ var Stream = React.createClass({
 
     api.request(this.getGroupListEndpoint(), {
       success: (data, _, jqXHR) => {
-        GroupListStore.loadInitialData(data);
+        this._streamManager.push(data);
 
         this.setState({
           error: false,
@@ -176,8 +126,14 @@ var Stream = React.createClass({
     });
   },
 
-  handleRealtimePoll(data) {
-    // TODO
+  onRealtimePoll(data) {
+    this._streamManager.unshift(data);
+  },
+
+  onAggListChange() {
+    this.setState({
+      groupList: this._streamManager.getAllItems()
+    });
   },
 
   onPage(cursor) {
