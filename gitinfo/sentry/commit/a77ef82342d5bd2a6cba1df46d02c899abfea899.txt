commit a77ef82342d5bd2a6cba1df46d02c899abfea899
Author: Anton Ovchinnikov <anton@tonyo.info>
Date:   Fri Apr 24 11:11:37 2020 +0200

    fix(metrics): Add a couple of metrics to ingest-consumers for cross-checking (#18377)

diff --git a/src/sentry/ingest/ingest_consumer.py b/src/sentry/ingest/ingest_consumer.py
index 752d09e1be..2560f8be60 100644
--- a/src/sentry/ingest/ingest_consumer.py
+++ b/src/sentry/ingest/ingest_consumer.py
@@ -64,6 +64,9 @@ class IngestConsumerWorker(AbstractBatchWorker):
                     other_messages.append((process_userreport, message))
                 else:
                     raise ValueError("Unknown message type: {}".format(message_type))
+                metrics.incr(
+                    "ingest_consumer.flush.messages_seen", tags={"message_type": message_type}
+                )
 
         with metrics.timer("ingest_consumer.fetch_projects"):
             projects = {p.id: p for p in Project.objects.get_many_from_cache(projects_to_fetch)}
diff --git a/src/sentry/utils/batching_kafka_consumer.py b/src/sentry/utils/batching_kafka_consumer.py
index 7ed2b1b373..30a2cbca2e 100644
--- a/src/sentry/utils/batching_kafka_consumer.py
+++ b/src/sentry/utils/batching_kafka_consumer.py
@@ -15,6 +15,7 @@ from confluent_kafka import (
     OFFSET_INVALID,
 )
 
+from django.conf import settings
 
 logger = logging.getLogger("batching-kafka-consumer")
 
@@ -164,9 +165,8 @@ class BatchingKafkaConsumer(object):
         tags = dict(tags or ())
         tags.update(self.__metrics_default_tags)
 
-        return self.__metrics.timing(
-            metric, value, tags=tags, sample_rate=self.__metrics_sample_rates.get(metric, 1)
-        )
+        sample_rate = self.__metrics_sample_rates.get(metric, settings.SENTRY_METRICS_SAMPLE_RATE)
+        return self.__metrics.timing(metric, value, tags=tags, sample_rate=sample_rate)
 
     def create_consumer(
         self,
@@ -326,6 +326,7 @@ class BatchingKafkaConsumer(object):
         )
 
         batch_results_length = len(self.__batch_results)
+        self.__record_timing("batch.size", batch_results_length)
         if batch_results_length > 0:
             logger.debug("Flushing batch via worker")
             flush_start = time.time()
