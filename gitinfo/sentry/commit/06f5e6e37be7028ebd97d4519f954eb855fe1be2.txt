commit 06f5e6e37be7028ebd97d4519f954eb855fe1be2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 27 09:19:45 2017 -0800

    [api] fix status=resolvedInNextRelease on issue details

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 2290c87e5a..665ad81099 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -11,7 +11,6 @@ from sentry.api.base import DocSection
 from sentry.api.bases import GroupEndpoint
 from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
-from sentry.constants import STATUS_CHOICES
 from sentry.models import (
     Activity, Group, GroupHash, GroupSeen, GroupStatus, GroupTagKey,
     GroupTagValue, Release, User, UserReport,
@@ -50,6 +49,17 @@ def delete_aggregate_scenario(runner):
         )
 
 
+STATUS_CHOICES = {
+    'resolved': GroupStatus.RESOLVED,
+    'unresolved': GroupStatus.UNRESOLVED,
+    'ignored': GroupStatus.IGNORED,
+    'resolvedInNextRelease': GroupStatus.UNRESOLVED,
+
+    # TODO(dcramer): remove in 9.0
+    'muted': GroupStatus.IGNORED,
+}
+
+
 class GroupSerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=zip(
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 392611f0be..3581b0167a 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -375,7 +375,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                     organization_id=project.organization_id
                 ).order_by('-date_added')[0]
             except IndexError:
-                return Response('{"detail": "No release data present in the system to indicate form a basis for \'Next Release\'"}', status=400)
+                return Response('{"detail": "No release data present in the system to form a basis for \'Next Release\'"}', status=400)
 
             now = timezone.now()
 
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 6a9ae8fe91..c1b47a93ba 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -94,9 +94,12 @@ class Release(Model):
         return release
 
     @classmethod
-    def get_or_create(cls, project, version, date_added):
+    def get_or_create(cls, project, version, date_added=None):
         from sentry.models import Project
 
+        if date_added is None:
+            date_added = timezone.now()
+
         cache_key = cls.get_cache_key(project.organization_id, version)
 
         release = cache.get(cache_key)
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 21e052f871..a767a65121 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -6,8 +6,9 @@ from datetime import timedelta
 from django.utils import timezone
 
 from sentry.models import (
-    Activity, Group, GroupHash, GroupAssignee, GroupBookmark, GroupSeen, GroupSnooze,
-    GroupSubscription, GroupStatus, GroupTagValue, Release
+    Activity, Group, GroupHash, GroupAssignee, GroupBookmark, GroupResolution,
+    GroupSeen, GroupSnooze, GroupSubscription, GroupStatus, GroupTagValue,
+    Release
 )
 from sentry.testutils import APITestCase
 
@@ -75,6 +76,35 @@ class GroupUpdateTest(APITestCase):
             is_active=True,
         ).exists()
 
+    def test_resolved_in_next_release(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        project.flags.has_releases = True
+        project.save()
+        group = self.create_group(project=project)
+        Release.get_or_create(
+            version='abcd',
+            project=project,
+        )
+
+        url = '/api/0/issues/{}/'.format(group.id)
+
+        response = self.client.put(url, data={
+            'status': 'resolvedInNextRelease',
+        })
+        assert response.status_code == 200, response.content
+
+        group = Group.objects.get(
+            id=group.id,
+            project=group.project.id,
+        )
+        assert group.status == GroupStatus.RESOLVED
+
+        assert GroupResolution.objects.filter(
+            group=group,
+        ).exists()
+
     def test_snooze_duration(self):
         group = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
 
