commit cc8c500825dff750277cd568a846bfc8d0c90dbd
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri May 13 10:31:55 2016 +0200

    Added initial code for 2FA models and start of configuration

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
new file mode 100644
index 0000000000..36de6e474c
--- /dev/null
+++ b/src/sentry/models/authenticator.py
@@ -0,0 +1,147 @@
+"""
+sentry.models.authenticator
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2016 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import os
+import hmac
+import base64
+import hashlib
+
+from django.db import models
+from django.utils import timezone
+from django.utils.translation import ugettext_lazy as _
+from django.utils.functional import cached_property
+
+from sentry.db.models import BaseManager, BaseModel, BoundedAutoField, \
+    FlexibleForeignKey, BoundedPositiveIntegerField, UnicodePickledObjectField
+from sentry.utils.otp import generate_secret_key, TOTP
+
+
+class AuthenticatorManager(BaseManager):
+
+    def get_for_user(self, user):
+        return Authenticator.objects.filter(user=user)
+
+    def user_has_2fa(self, user):
+        return Authenticator.objects.filter(user=user).first() is not None
+
+    def create_totp(self, user):
+        return Authenticator.objects.create(
+            user=user,
+            type=TotpInterface.type,
+            config={
+                'secret': generate_secret_key(),
+            }
+        )
+
+    def create_recovery_codes(self, user):
+        return Authenticator.objects.create(
+            user=user,
+            type=RecoveryCodeInterface.type,
+            config={
+                'salt': os.urandom(16).encode('hex'),
+                'used': 0,
+            }
+        )
+
+
+AUTHENTICATOR_INTERFACES = {}
+AUTHENTICATOR_CHOICES = []
+
+
+def register_authenticator(cls):
+    AUTHENTICATOR_INTERFACES[cls.type] = cls
+    AUTHENTICATOR_CHOICES.append((cls.type, cls.name))
+    return cls
+
+
+class AuthenticatorInterface(object):
+    type = -1
+    interface_id = None
+    name = None
+    description = None
+
+    def __init__(self, authenticator):
+        self.authenticator = authenticator
+
+    @property
+    def config(self):
+        return self.authenticator.config
+
+    def validate_otp(self, otp):
+        return False
+
+
+@register_authenticator
+class RecoveryCodeInterface(AuthenticatorInterface):
+    type = 0
+    interface_id = 'recovery'
+    name = _('Recovery Codes')
+    description = _('Recovery codes can be used to access your account in the '
+                    'event you lose access to your device and cannot '
+                    'receive two-factor authentication codes.')
+
+    def __init__(self, authenticator):
+        AuthenticatorInterface.__init__(self, authenticator)
+        self.codes = []
+        h = hmac.new(self.config['secret'], None, hashlib.sha1)
+        for x in xrange(10):
+            h.update('%s|' % x)
+            self.codes.append(base64.b32encode(h.digest())[:8])
+
+    def validate_otp(self, otp):
+        mask = self.config['used']
+        code = otp.strip().replace('-', '')
+        for idx, ref_code in enumerate(self.codes):
+            if code == ref_code:
+                self.config['used'] = mask | (1 << idx)
+                return True
+        return False
+
+    def get_unused_codes(self):
+        mask = self.config['used']
+        rv = []
+        for idx, code in enumerate(self.codes):
+            if not mask & (1 << idx):
+                rv.append(code[:4] + '-' + code[4:])
+        return rv
+
+
+@register_authenticator
+class TotpInterface(AuthenticatorInterface):
+    type = 1
+    interface_id = 'totp'
+    name = _('Authenticator Application')
+    description = _('An authenticator application that supports TOTP (like '
+                    'Google Authenticator or 1Password) can be used to '
+                    'conveniently secure your account.  A new token is '
+                    'generated every 30 seconds.')
+
+    def validate_otp(self, otp):
+        return TOTP(self.config['secret']).verify(otp)
+
+
+class Authenticator(BaseModel):
+    id = BoundedAutoField(primary_key=True)
+    user = FlexibleForeignKey('sentry.User', db_index=True)
+    created_at = models.DateTimeField(_('created at'), default=timezone.now)
+    last_used_at = models.DateTimeField(_('last used at'))
+    type = BoundedPositiveIntegerField(choices=AUTHENTICATOR_CHOICES)
+    config = UnicodePickledObjectField()
+
+    objects = AuthenticatorManager()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'auth_authenticator'
+        verbose_name = _('authenticator')
+        verbose_name_plural = _('authenticators')
+
+    @cached_property
+    def interface(self):
+        return AUTHENTICATOR_INTERFACES[self.type](self)
diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
index 1a661fbc06..e3f3db10e8 100644
--- a/src/sentry/templates/sentry/account/settings.html
+++ b/src/sentry/templates/sentry/account/settings.html
@@ -51,6 +51,14 @@
             {{ field|as_crispy_field }}
         {% endwith %}
         {% endif %}
+        <p>
+          {% trans "If you want you can also manage two-factor authentication here." %}
+          {% if has_2fa %}
+            <a href="{% url "sentry-account-settings-2fa" %}">{% trans "Manage or disable two-factor authentication" %}</a>.
+          {% else %}
+            <a href="{% url "sentry-account-settings-2fa" %}">{% trans "Enable two-factor authentication" %}</a>.
+          {% endif %}
+        </p>
 
         {% if not form.is_readonly %}
         <fieldset class="form-actions">
diff --git a/src/sentry/templates/sentry/account/twofactor.html b/src/sentry/templates/sentry/account/twofactor.html
new file mode 100644
index 0000000000..fd5562f98a
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor.html
@@ -0,0 +1,41 @@
+{% extends "sentry/bases/account.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Two-Factor Authentication Settings" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+    <form action="" method="post">
+        {% csrf_token %}
+        <legend style="margin-top: 0;">{% trans "Two-Factor Authentication" %}</legend>
+
+        <div class="account-settings-overview">
+          <p>
+            Two-factor authentication improves your security by requiring an authentication
+            code in addition to your password.
+            {% if has_2fa %}
+              <strong>2FA is currently enabled</strong>.
+            {% else %}
+              <strong>2FA is currently disabled</strong>.
+            {% endif %}
+          </p>
+          {% for auth in active_authenticators %}
+            <h4>{{ auth.name }}</h4>
+            <p>{{ auth.description }}</p>
+            <p><button type="submit" class="btn btn-default">{% trans "Remove" %}</button></p>
+          {% endfor %}
+          {% if missing_authenticators %}
+            <ul>
+              {% for auth in missing_authenticators %}
+                <li><button class="btn btn-primary btn-sm" name="add_{{ auth.interface_id }}">Add {{ auth.name }}</button></li>
+              {% endfor %}
+            </ul>
+          {% endif %}
+        </div>
+        <fieldset class="form-actions">
+            <button type="submit" name="back" class="btn btn-default">{% trans "Back" %}</button>
+        </fieldset>
+    </form>
+{% endblock %}
