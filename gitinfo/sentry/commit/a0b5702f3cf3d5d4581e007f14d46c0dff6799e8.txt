commit a0b5702f3cf3d5d4581e007f14d46c0dff6799e8
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Mar 19 13:09:18 2018 -0700

    feat(tagstore): Another attempt at UPDATE optimization
    
    After reverting GH-7614 and GH-7607, bringing back just the
    optimizations from GH-7614 since GH-7607 was the real issue.

diff --git a/src/sentry/tagstore/query.py b/src/sentry/tagstore/query.py
new file mode 100644
index 0000000000..28682e93b7
--- /dev/null
+++ b/src/sentry/tagstore/query.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import, print_function
+
+from django.db.models import sql
+from django.db.models.query import QuerySet
+from sentry.db.models import BaseManager
+
+
+class NoTransactionUpdateQuerySet(QuerySet):
+    def update(self, **kwargs):
+        """
+        Updates all elements in the current QuerySet, setting all the given
+        fields to the appropriate values.
+        """
+        # HACK(mattrobenolt): This is copy/pasted directly from
+        # https://github.com/django/django/blob/stable/1.6.x/django/db/models/query.py#L482-L496
+        # with 1 important change. It removes the `transaction.commit_on_success_unless_managed`
+        # block. The effect of this is we now can perform a simple `UPDATE` query without
+        # incurring the overhead of 4 statements and an explicit transaction. This is a safe
+        # assumption made by Django, but we can forego it for performance.
+        assert self.query.can_filter(), \
+            "Cannot update a query once a slice has been taken."
+        self._for_write = True
+        query = self.query.clone(sql.UpdateQuery)
+        query.add_update_values(kwargs)
+        rows = query.get_compiler(self.db).execute_sql(None)
+        self._result_cache = None
+        return rows
+    update.alters_data = True
+
+
+class TagStoreManager(BaseManager):
+    def get_queryset(self):
+        return NoTransactionUpdateQuerySet(self.model, using=self._db)
diff --git a/src/sentry/tagstore/v2/models/grouptagkey.py b/src/sentry/tagstore/v2/models/grouptagkey.py
index 557a64737a..340003ea74 100644
--- a/src/sentry/tagstore/v2/models/grouptagkey.py
+++ b/src/sentry/tagstore/v2/models/grouptagkey.py
@@ -13,8 +13,9 @@ from django.db import router, transaction, DataError, connections
 
 from sentry.api.serializers import Serializer, register
 from sentry.db.models import (
-    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, BaseManager, FlexibleForeignKey, sane_repr
+    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, FlexibleForeignKey, sane_repr
 )
+from sentry.tagstore.query import TagStoreManager
 
 
 class GroupTagKey(Model):
@@ -30,7 +31,7 @@ class GroupTagKey(Model):
     _key = FlexibleForeignKey('tagstore.TagKey', db_column='key_id')
     values_seen = BoundedPositiveIntegerField(default=0)
 
-    objects = BaseManager()
+    objects = TagStoreManager()
 
     class Meta:
         app_label = 'tagstore'
diff --git a/src/sentry/tagstore/v2/models/grouptagvalue.py b/src/sentry/tagstore/v2/models/grouptagvalue.py
index cf1c050303..39dcd3b7a7 100644
--- a/src/sentry/tagstore/v2/models/grouptagvalue.py
+++ b/src/sentry/tagstore/v2/models/grouptagvalue.py
@@ -14,8 +14,9 @@ from django.utils import timezone
 
 from sentry.api.serializers import Serializer, register
 from sentry.db.models import (
-    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, BaseManager, FlexibleForeignKey, sane_repr
+    Model, BoundedPositiveIntegerField, BoundedBigIntegerField, FlexibleForeignKey, sane_repr
 )
+from sentry.tagstore.query import TagStoreManager
 
 
 class GroupTagValue(Model):
@@ -35,7 +36,7 @@ class GroupTagValue(Model):
     first_seen = models.DateTimeField(
         default=timezone.now, db_index=True, null=True)
 
-    objects = BaseManager()
+    objects = TagStoreManager()
 
     class Meta:
         app_label = 'tagstore'
diff --git a/src/sentry/tagstore/v2/models/tagkey.py b/src/sentry/tagstore/v2/models/tagkey.py
index f94edcd652..bc08c2d136 100644
--- a/src/sentry/tagstore/v2/models/tagkey.py
+++ b/src/sentry/tagstore/v2/models/tagkey.py
@@ -15,6 +15,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.api.serializers import Serializer, register
 from sentry.tagstore import TagKeyStatus
+from sentry.tagstore.query import TagStoreManager
 from sentry.constants import MAX_TAG_KEY_LENGTH
 from sentry.db.models import (Model, BoundedPositiveIntegerField, BoundedBigIntegerField, sane_repr)
 from sentry.utils.cache import cache
@@ -40,6 +41,8 @@ class TagKey(Model):
         default=TagKeyStatus.VISIBLE
     )
 
+    objects = TagStoreManager()
+
     class Meta:
         app_label = 'tagstore'
         unique_together = (('project_id', 'environment_id', 'key'), )
diff --git a/src/sentry/tagstore/v2/models/tagvalue.py b/src/sentry/tagstore/v2/models/tagvalue.py
index ef285dd644..b030a5e0f7 100644
--- a/src/sentry/tagstore/v2/models/tagvalue.py
+++ b/src/sentry/tagstore/v2/models/tagvalue.py
@@ -16,8 +16,9 @@ from sentry.api.serializers import Serializer, register
 from sentry.constants import MAX_TAG_VALUE_LENGTH
 from sentry.db.models import (
     Model, BoundedPositiveIntegerField, BoundedBigIntegerField, GzippedDictField,
-    BaseManager, FlexibleForeignKey, sane_repr
+    FlexibleForeignKey, sane_repr
 )
+from sentry.tagstore.query import TagStoreManager
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
 
@@ -38,7 +39,7 @@ class TagValue(Model):
     first_seen = models.DateTimeField(
         default=timezone.now, db_index=True, null=True)
 
-    objects = BaseManager()
+    objects = TagStoreManager()
 
     class Meta:
         app_label = 'tagstore'
