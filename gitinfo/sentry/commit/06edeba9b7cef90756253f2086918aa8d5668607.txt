commit 06edeba9b7cef90756253f2086918aa8d5668607
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 4 21:20:13 2012 -0800

    headers and pep8

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index e7bdf57ac3..778487834e 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -5,8 +5,8 @@ sentry.coreapi
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from datetime import datetime
 import base64
-import datetime
 import logging
 import time
 import zlib
@@ -111,7 +111,10 @@ def project_from_id(request):
     APIUnauthorized.
     """
     try:
-        pm = ProjectMember.objects.get(user=request.user, project=request.GET['project_id'])
+        pm = ProjectMember.objects.get(
+            user=request.user,
+            project=request.GET['project_id'],
+        )
     except ProjectMember.DoesNotExist:
         raise APIUnauthorized()
 
@@ -128,7 +131,8 @@ def decode_and_decompress_data(encoded_data):
         # This error should be caught as it suggests that there's a
         # bug somewhere in the client's code.
         logger.exception('Bad data received')
-        raise APIForbidden('Bad data decoding request (%s, %s)' % (e.__class__.__name__, e))
+        raise APIForbidden('Bad data decoding request (%s, %s)' % (
+            e.__class__.__name__, e))
 
 
 def safely_load_json_string(json_string):
@@ -138,15 +142,16 @@ def safely_load_json_string(json_string):
         # This error should be caught as it suggests that there's a
         # bug somewhere in the client's code.
         logger.exception('Bad data received')
-        raise APIForbidden('Bad data reconstructing object (%s, %s)' % (e.__class__.__name__, e))
+        raise APIForbidden('Bad data reconstructing object (%s, %s)' % (
+            e.__class__.__name__, e))
 
     # XXX: ensure keys are coerced to strings
     return dict((smart_str(k), v) for k, v in obj.iteritems())
 
 
 def ensure_valid_project_id(desired_project, data):
-    # Confirm they're using either the master key, or their specified project matches with the
-    # signed project.
+    # Confirm they're using either the master key, or their specified project
+    # matches with the signed project.
     if desired_project and str(data.get('project', '')) != str(desired_project.pk):
         raise APIForbidden('Invalid credentials')
     elif not desired_project:
@@ -157,11 +162,11 @@ def insert_data_to_database(data):
     def process_data_timestamp(data):
         if is_float(data['timestamp']):
             try:
-                data['timestamp'] = datetime.datetime.fromtimestamp(float(data['timestamp']))
+                data['timestamp'] = datetime.fromtimestamp(float(data['timestamp']))
             except:
                 logger.exception('Failed reading timestamp')
                 del data['timestamp']
-        elif not isinstance(data['timestamp'], datetime.datetime):
+        elif not isinstance(data['timestamp'], datetime):
             if '.' in data['timestamp']:
                 format = '%Y-%m-%dT%H:%M:%S.%f'
             else:
@@ -170,7 +175,7 @@ def insert_data_to_database(data):
                 # support UTC market, but not other timestamps
                 format += 'Z'
             try:
-                data['timestamp'] = datetime.datetime.strptime(data['timestamp'], format)
+                data['timestamp'] = datetime.strptime(data['timestamp'], format)
             except:
                 logger.exception('Failed reading timestamp')
                 del data['timestamp']
@@ -181,4 +186,3 @@ def insert_data_to_database(data):
         Group.objects.from_kwargs(**data)
     except (InvalidInterface, InvalidData), e:
         raise APIError(e)
-
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
index bd9c71e29f..c30505155b 100644
--- a/sentry/services/udp.py
+++ b/sentry/services/udp.py
@@ -1,3 +1,11 @@
+"""
+sentry.services.udp
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
 import eventlet
 import logging
 
diff --git a/sentry/utils/charts.py b/sentry/utils/charts.py
index 08f610bf38..752205a8cb 100644
--- a/sentry/utils/charts.py
+++ b/sentry/utils/charts.py
@@ -8,8 +8,9 @@ sentry.utils.charts
 
 from sentry.utils import get_db_engine
 
+
 def has_charts(db):
     engine = get_db_engine(db)
     if engine.startswith('sqlite'):
         return False
-    return True
\ No newline at end of file
+    return True
diff --git a/sentry/utils/compat/__init__.py b/sentry/utils/compat/__init__.py
index eee42605ae..9df57955aa 100644
--- a/sentry/utils/compat/__init__.py
+++ b/sentry/utils/compat/__init__.py
@@ -9,4 +9,4 @@ sentry.utils.compat
 try:
     import cPickle as pickle
 except ImportError:
-    import pickle
\ No newline at end of file
+    import pickle
diff --git a/sentry/utils/compat/db.py b/sentry/utils/compat/db.py
index 4b1d7ce7ee..5237ccdfee 100644
--- a/sentry/utils/compat/db.py
+++ b/sentry/utils/compat/db.py
@@ -24,4 +24,4 @@ except ImportError:
             'TEST_NAME': settings.DATABASE_TEST_NAME,
             'OPTIONS': settings.DATABASE_OPTIONS
         }
-    }
\ No newline at end of file
+    }
diff --git a/sentry/utils/json.py b/sentry/utils/json.py
index 6a8c9abaf9..248506eeb0 100644
--- a/sentry/utils/json.py
+++ b/sentry/utils/json.py
@@ -12,6 +12,7 @@ from django.utils import simplejson
 import datetime
 import uuid
 
+
 class BetterJSONEncoder(DjangoJSONEncoder):
     def default(self, obj):
         if isinstance(obj, uuid.UUID):
@@ -22,11 +23,14 @@ class BetterJSONEncoder(DjangoJSONEncoder):
             return list(obj)
         return super(BetterJSONEncoder, self).default(obj)
 
+
 def better_decoder(data):
     return data
 
+
 def dumps(value, **kwargs):
     return simplejson.dumps(value, cls=BetterJSONEncoder, **kwargs)
 
+
 def loads(value, **kwargs):
     return simplejson.loads(value, object_hook=better_decoder)
diff --git a/sentry/utils/models.py b/sentry/utils/models.py
index 8e4bda00bf..6b5611c066 100644
--- a/sentry/utils/models.py
+++ b/sentry/utils/models.py
@@ -1,3 +1,11 @@
+"""
+sentry.utils.models
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
 import base64
 import logging
 import operator
@@ -20,9 +28,11 @@ EXPRESSION_NODE_CALLBACKS = {
     ExpressionNode.OR: operator.or_,
 }
 
+
 class CannotResolve(Exception):
     pass
 
+
 def resolve_expression_node(instance, node):
     def _resolve(instance, node):
         if isinstance(node, F):
@@ -39,6 +49,7 @@ def resolve_expression_node(instance, node):
         runner = op(runner, _resolve(instance, n))
     return runner
 
+
 class Model(models.Model):
     class Meta:
         abstract = True
@@ -56,7 +67,7 @@ class Model(models.Model):
                 kwargs[field.name] = field.pre_save(self, False)
 
         affected = self.__class__._base_manager.using(using).filter(pk=self.pk).update(**kwargs)
-        for k,v in kwargs.iteritems():
+        for k, v in kwargs.iteritems():
             if isinstance(v, ExpressionNode):
                 v = resolve_expression_node(self, v)
             setattr(self, k, v)
@@ -70,6 +81,7 @@ class Model(models.Model):
 
     update.alters_data = True
 
+
 class GzippedDictField(models.TextField):
     """
     Slightly different from a JSONField in the sense that the default
@@ -102,4 +114,4 @@ class GzippedDictField(models.TextField):
         from south.modelsinspector import introspector
         field_class = "django.db.models.fields.TextField"
         args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
\ No newline at end of file
+        return (field_class, args, kwargs)
diff --git a/sentry/utils/query.py b/sentry/utils/query.py
index 9676f30b3b..216e6b58fd 100644
--- a/sentry/utils/query.py
+++ b/sentry/utils/query.py
@@ -10,11 +10,15 @@ from django.db.models import Min, Max
 from django.db.models.fields import AutoField, IntegerField
 from django.db.models.query import QuerySet
 
+
 class QuerySetDoubleIteration(Exception):
     "A QuerySet was iterated over twice, you probably want to list() it."
     pass
 
-class InvalidQuerySetError(ValueError): pass
+
+class InvalidQuerySetError(ValueError):
+    pass
+
 
 class SkinnyQuerySet(QuerySet):
     def __len__(self):
@@ -37,6 +41,7 @@ class SkinnyQuerySet(QuerySet):
     def list(self):
         return list(self)
 
+
 class RangeQuerySetWrapper(object):
     """
     Iterates through a result set using MIN/MAX on primary key and stepping through.
@@ -85,7 +90,10 @@ class RangeQuerySetWrapper(object):
             limit = self.limit or max_id
 
             while at <= max_id and (not self.limit or num < self.limit):
-                results = self.queryset.filter(id__gte=at, id__lte=min(at+self.step-1, max_id))
+                results = self.queryset.filter(
+                    id__gte=at,
+                    id__lte=min(at + self.step - 1, max_id),
+                )
                 if self.sorted:
                     results = results.order_by('id')
                 results = results.iterator()
@@ -95,4 +103,4 @@ class RangeQuerySetWrapper(object):
                     num += 1
                     if num >= limit:
                         break
-                at += self.step
\ No newline at end of file
+                at += self.step
diff --git a/sentry/utils/router.py b/sentry/utils/router.py
index 1485e127b1..8dd311e09d 100644
--- a/sentry/utils/router.py
+++ b/sentry/utils/router.py
@@ -8,6 +8,7 @@ sentry.utils.router
 
 from sentry.conf import settings
 
+
 class SentryRouter(object):
     def db_for_write(self, model, **hints):
         if model._meta.app_label == 'sentry':
@@ -21,4 +22,4 @@ class SentryRouter(object):
         if not sentry_db:
             return None
         if model._meta.app_label == 'sentry' and db != sentry_db:
-            return False
\ No newline at end of file
+            return False
diff --git a/sentry/wsgi.py b/sentry/wsgi.py
index 305e2b3fba..909d8e818b 100644
--- a/sentry/wsgi.py
+++ b/sentry/wsgi.py
@@ -7,7 +7,9 @@ sentry.wsgi
 """
 
 #!/usr/bin/env python
-import os, sys, os.path
+import os
+import os.path
+import sys
 
 # Add the project to the python path
 sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
diff --git a/tests/web/views.py b/tests/web/views.py
index bbade0f8e0..a7d0536beb 100644
--- a/tests/web/views.py
+++ b/tests/web/views.py
@@ -3,25 +3,31 @@ from django.shortcuts import get_object_or_404, render_to_response
 
 import logging
 
+
 def fake_login(request):
     return HttpResponse('')
 
+
 def django_exc(request):
     return get_object_or_404(Exception, pk=1)
 
+
 def raise_exc(request):
     raise Exception(request.GET.get('message', 'view exception'))
 
+
 def decorated_raise_exc(request):
     return raise_exc(request)
 
+
 def template_exc(request):
     return render_to_response('sentry-tests/error.html')
 
+
 def logging_request_exc(request):
     logger = logging.getLogger('sentry.test')
     try:
         raise Exception(request.GET.get('message', 'view exception'))
     except Exception, e:
         logger.error(e, exc_info=True, extra={'request': request})
-    return HttpResponse('')
\ No newline at end of file
+    return HttpResponse('')
