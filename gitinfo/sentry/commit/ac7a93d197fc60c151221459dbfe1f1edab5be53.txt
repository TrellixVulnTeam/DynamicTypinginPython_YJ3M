commit ac7a93d197fc60c151221459dbfe1f1edab5be53
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 13 09:03:00 2012 +0200

    Initial work on making the new project flow sexy

diff --git a/sentry/models.py b/sentry/models.py
index e573e75a77..a65642b131 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -133,7 +133,7 @@ class Project(Model):
     name = models.CharField(max_length=200)
     owner = models.ForeignKey(User, related_name="sentry_owned_project_set", null=True)
     team = models.ForeignKey(Team, null=True)
-    public = models.BooleanField(default=False)
+    public = models.BooleanField(default=settings.ALLOW_PUBLIC_PROJECTS)
     date_added = models.DateTimeField(default=datetime.now)
     status = models.PositiveIntegerField(default=0, choices=(
         (0, 'Visible'),
@@ -755,22 +755,17 @@ class_prepared.connect(register_indexes, sender=MessageIndex)
 
 def create_default_project(created_models, verbosity=2, **kwargs):
     if Project in created_models:
-        try:
-            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id')[0]
-        except IndexError:
-            owner = None
-
-        if Project.objects.exists():
+        if Project.objects.filter(pk=settings.PROJECT).exists():
             return
 
         project = Project.objects.create(
-            public=True,
-            name='Default',
-            owner=owner,
+            public=settings.ALLOW_PUBLIC_PROJECTS,
+            name='Sentry (Internal)',
+            slug='sentry',
         )
 
         if verbosity > 0:
-            print 'Created default Sentry project owned by %s' % owner
+            print 'Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id)
 
         # Iterate all groups to update their relations
         for model in (Group, Event, FilterValue, MessageFilterValue,
diff --git a/sentry/templates/sentry/projects/cannot_create_teams.html b/sentry/templates/sentry/projects/cannot_create_teams.html
new file mode 100644
index 0000000000..9e7eb6b465
--- /dev/null
+++ b/sentry/templates/sentry/projects/cannot_create_teams.html
@@ -0,0 +1,17 @@
+{% extends "sentry/projects/base.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "New Project" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-new-project %}">{% trans "New Project" %}</a></li>
+{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <p>{% trans "You are not able to create a new project because you are not a member of any teams. Ask an administrator to add you to a team." %}</p>
+    </section>
+{% endblock %}
diff --git a/sentry/templates/sentry/projects/new.html b/sentry/templates/sentry/projects/new.html
index 4e4999fded..9c1fea251e 100644
--- a/sentry/templates/sentry/projects/new.html
+++ b/sentry/templates/sentry/projects/new.html
@@ -12,20 +12,37 @@
 
 {% block main %}
     <section class="body">
-        {% if TEAM_LIST %}
-            <p>{% trans "Select a team you are a member of to create a project." %}</p>
-            <ul>
-                {% for team in TEAM_LIST %}
-                    <li><a href="{% url sentry-new-team-project team.slug %}">{{ team.name }}</a></li>
+        <p>{% trans "Use this page to create a new project within Sentry. Once done, you'll be able to configure your client to send messages to this project." %}</p>
+        <hr>
+        <form class="form-stacked" action="" method="post">
+            {% csrf_token %}
+            <fieldset>
+                <legend>{% trans "Project Details" %}</legend>
+                {% for field in project_form %}
+                    {% include "sentry/partial/_form_field.html" %}
+                {% endfor %}
+                {% if not new_team_form %}
+                    {% for field in select_team_form %}
+                        {% include "sentry/partial/_form_field.html" %}
+                    {% endfor %}
+                {% endif %}
+            </fieldset>
+            {% if new_team_form %}
+                <legend>{% trans "Team Details" %}</legend>
+                {% if select_team_form %}
+                    <p>{% trans "Select an existing team to manage this project" %}</p>
+                    {% for field in select_team_form %}
+                        {% include "sentry/partial/_form_field.html" %}
+                    {% endfor %}
+                    <p>{% trans "Or, create a new team" %}</p>
+                {% endif %}
+                {% for field in new_team_form %}
+                    {% include "sentry/partial/_form_field.html" %}
                 {% endfor %}
-            </ul>
-        {% else %}
-            {% if can_create_teams %}
-                {% url sentry-new-team as create_team_link %}
-                <p>{% blocktrans %}You must first <a href="{{ create_team_link }}">create a team</a> to create a project.{% endblocktrans %}</p>
-            {% else %}
-                <p>{% trans "You are not able to create a new project because you are not a member of any teams. Ask an administrator to add you to a team." %}</p>
             {% endif %}
-        {% endif %}
+            <div class="actions">
+                <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+            </div>
+        </form>
     </section>
 {% endblock %}
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index c3096f3fa5..0231fd333b 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -121,6 +121,7 @@ def login_required(func):
     def wrapped(request, *args, **kwargs):
         if not settings.PUBLIC:
             if not request.user.is_authenticated():
+                request.session['_next'] = request.build_absolute_uri()
                 return HttpResponseRedirect(get_login_url())
         return func(request, *args, **kwargs)
     return wrapped
diff --git a/sentry/web/forms/__init__.py b/sentry/web/forms/__init__.py
index 536c72d4b1..464184e464 100644
--- a/sentry/web/forms/__init__.py
+++ b/sentry/web/forms/__init__.py
@@ -56,24 +56,6 @@ class RemoveProjectForm(forms.Form):
         return password
 
 
-class NewProjectForm(forms.ModelForm):
-    name = forms.CharField(max_length=200, widget=forms.TextInput(attrs={'placeholder': _('e.g. My Project Name')}))
-    slug = forms.SlugField(help_text=_('A slug is a URL-safe word and must be unique across all projects.'),
-        widget=forms.TextInput(attrs={'placeholder': _('e.g. my-project-name')}))
-
-    class Meta:
-        fields = ('name', 'slug')
-        model = Project
-
-
-class NewProjectAdminForm(NewProjectForm):
-    owner = UserField(required=False)
-
-    class Meta:
-        fields = ('name', 'slug', 'owner')
-        model = Project
-
-
 class EditProjectForm(forms.ModelForm):
     public = forms.BooleanField(required=False, help_text=_('Allow anyone (even anonymous users) to view this project'))
     team = forms.ChoiceField(choices=())
diff --git a/sentry/web/forms/projects.py b/sentry/web/forms/projects.py
index 223fe689cf..69a8cda8cc 100644
--- a/sentry/web/forms/projects.py
+++ b/sentry/web/forms/projects.py
@@ -7,7 +7,9 @@ sentry.web.forms.projects
 """
 import itertools
 from django import forms
-from sentry.models import ProjectOption
+from django.utils.translation import ugettext_lazy as _
+from sentry.models import Project, ProjectOption
+from sentry.web.forms.fields import UserField
 
 
 class ProjectTagsForm(forms.Form):
@@ -29,3 +31,21 @@ class ProjectTagsForm(forms.Form):
     def save(self):
         tags = self.cleaned_data.get('tags')
         ProjectOption.objects.set_value(self.project, 'tags', tags)
+
+
+class NewProjectForm(forms.ModelForm):
+    name = forms.CharField(max_length=200, widget=forms.TextInput(attrs={'placeholder': _('e.g. My Project Name')}))
+    slug = forms.SlugField(help_text=_('A slug is a URL-safe word and must be unique across all projects.'),
+        widget=forms.TextInput(attrs={'placeholder': _('e.g. my-project-name')}))
+
+    class Meta:
+        fields = ('name', 'slug')
+        model = Project
+
+
+class NewProjectAdminForm(NewProjectForm):
+    owner = UserField(required=False)
+
+    class Meta:
+        fields = ('name', 'slug', 'owner')
+        model = Project
diff --git a/sentry/web/forms/teams.py b/sentry/web/forms/teams.py
index 6c46c80ca6..0e2f49cccb 100644
--- a/sentry/web/forms/teams.py
+++ b/sentry/web/forms/teams.py
@@ -43,6 +43,17 @@ class EditTeamForm(forms.ModelForm):
         model = Team
 
 
+class SelectTeamForm(forms.Form):
+    team = forms.ChoiceField(choices=())
+
+    def __init__(self, team_list, data, *args, **kwargs):
+        super(SelectTeamForm, self).__init__(data=data, *args, **kwargs)
+        self.team_list = dict((t.pk, t) for t in team_list.itervalues())
+        self.fields['team'].choices = [(t.pk, t) for t in sorted(self.team_list.values(), key=lambda x: x.name)]
+        self.fields['team'].choices.insert(0, (None, '-' * 8))
+        self.fields['team'].widget.choices = self.fields['team'].choices
+
+
 class BaseTeamMemberForm(forms.ModelForm):
     class Meta:
         fields = ('type',)
diff --git a/sentry/web/frontend/accounts.py b/sentry/web/frontend/accounts.py
index 98596b2873..a56db11699 100644
--- a/sentry/web/frontend/accounts.py
+++ b/sentry/web/frontend/accounts.py
@@ -27,13 +27,14 @@ def login(request):
     form = AuthenticationForm(request, request.POST or None)
     if form.is_valid():
         login_(request, form.get_user())
-        return HttpResponseRedirect(request.POST.get('next') or reverse('sentry'))
+        return HttpResponseRedirect(request.session.pop('_next', None) or reverse('sentry'))
     else:
         request.session.set_test_cookie()
 
     context = csrf(request)
     context.update({
         'form': form,
+        'next': request.session.get('_next'),
     })
     return render_to_response('sentry/login.html', context, request)
 
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index 6d00f9aab0..6319a6fb2e 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -7,21 +7,28 @@ sentry.web.frontend.generic
 """
 from django.http import HttpResponseRedirect, Http404, HttpResponseNotModified, \
   HttpResponse
+from django.core.urlresolvers import reverse
 
 from sentry.conf import settings
+from sentry.permissions import can_create_projects
 from sentry.web.decorators import login_required
-from sentry.web.helpers import get_project_list, render_to_response, \
-  get_login_url
+from sentry.web.helpers import get_login_url, get_project_list, \
+  render_to_response
 
 
 @login_required
 def dashboard(request):
     project_list = get_project_list(request.user, key='slug')
-    if len(project_list) == 0 and not request.user.is_authenticated():
-        return HttpResponseRedirect(get_login_url())
+    has_projects = len(project_list) > 1 or (len(project_list) == 1 and project_list.values()[0].pk != settings.PROJECT)
 
-    return render_to_response('sentry/dashboard.html', {
-    }, request)
+    if not has_projects:
+        if not request.user.is_authenticated():
+            request.session['_next'] = request.build_absolute_uri()
+            return HttpResponseRedirect(get_login_url())
+        elif can_create_projects(request.user):
+            return HttpResponseRedirect(reverse('sentry-new-project'))
+
+    return render_to_response('sentry/dashboard.html', {}, request)
 
 
 def static_media(request, path, root=None):
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 740734edfa..59fefc79be 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -13,13 +13,15 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.models import TeamMember, MEMBER_OWNER, \
   ProjectKey, Team, FilterKey
-from sentry.permissions import can_create_projects, can_remove_project
+from sentry.permissions import can_create_projects, can_remove_project, can_create_teams
 from sentry.plugins import plugins
 from sentry.plugins.helpers import set_option, get_option
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, RemoveProjectForm, \
   EditProjectAdminForm
-from sentry.web.forms.projects import ProjectTagsForm
+from sentry.web.forms.projects import NewProjectForm, NewProjectAdminForm,\
+  ProjectTagsForm
+from sentry.web.forms.teams import NewTeamForm, SelectTeamForm
 from sentry.web.helpers import render_to_response, get_project_list, \
   plugin_config, get_team_list
 
@@ -47,10 +49,62 @@ def project_list(request):
 
 @login_required
 def new_project(request):
+    from django.contrib.auth.models import User
+
     if not can_create_projects(request.user):
         return HttpResponseRedirect(reverse('sentry'))
 
-    return render_to_response('sentry/projects/new.html', {}, request)
+    allow_create_teams = can_create_teams(request.user)
+    team_list = get_team_list(request.user)
+
+    if request.user.has_perm('sentry.can_add_project') and User.objects.all()[0:2] == 2:
+        project_form_cls = NewProjectAdminForm
+        project_initial = {
+            'owner': request.user.username,
+        }
+    else:
+        project_form_cls = NewProjectForm
+        project_initial = {}
+
+    if len(team_list) > 0:
+        select_team_form = SelectTeamForm(team_list, request.POST or None, prefix='st')
+    elif not allow_create_teams:
+        return render_to_response('sentry/projects/cannot_create_teams.html', {}, request)
+    else:
+        select_team_form = None
+
+    if allow_create_teams:
+        new_team_form = NewTeamForm(request.POST or None, prefix='nt')
+    else:
+        new_team_form = None
+
+    project_form = project_form_cls(request.POST or None, initial=project_initial, prefix='prj')
+
+    is_new_team = new_team_form and new_team_form.is_valid()
+    if is_new_team:
+        team_form = new_team_form
+    else:
+        team_form = select_team_form
+
+    if project_form.is_valid() and team_form.is_valid():
+        project = project_form.save(commit=False)
+        if not project.owner:
+            project.owner = request.user
+        if is_new_team:
+            team = new_team_form.save(commit=False)
+            team.owner = project.owner
+            team.save()
+        else:
+            team = select_team_form.cleaned_data['team']
+        project.team = team
+        project.save()
+        return HttpResponseRedirect(reverse('sentry-project-client-help', args=[project.slug]))
+
+    return render_to_response('sentry/projects/new.html', {
+        'project_form': project_form,
+        'select_team_form': select_team_form,
+        'new_team_form': new_team_form,
+    }, request)
 
 
 @login_required
diff --git a/sentry/web/frontend/teams.py b/sentry/web/frontend/teams.py
index cc2e872fc4..52ab91f02e 100644
--- a/sentry/web/frontend/teams.py
+++ b/sentry/web/frontend/teams.py
@@ -317,7 +317,7 @@ def reinvite_pending_team_member(request, team, member_id):
 @csrf_protect
 @has_team_access(MEMBER_OWNER)
 def create_new_team_project(request, team):
-    from sentry.web.forms import NewProjectAdminForm, NewProjectForm
+    from sentry.web.forms.projects import NewProjectAdminForm, NewProjectForm
 
     if not can_create_projects(request.user, team):
         return HttpResponseRedirect(reverse('sentry'))
