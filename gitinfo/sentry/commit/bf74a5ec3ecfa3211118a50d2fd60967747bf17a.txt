commit bf74a5ec3ecfa3211118a50d2fd60967747bf17a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 18 14:05:51 2015 -0800

    Add project tag values endpoint

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index bd247dcea4..b5a38b5efb 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -31,9 +31,10 @@ LINK_HEADER = '<{uri}&cursor={cursor}>; rel="{name}"; results="{has_results}"'
 class DocSection(Enum):
     ACCOUNTS = 'Accounts'
     EVENTS = 'Events'
-    RELEASES = 'Releases'
     ORGANIZATIONS = 'Organizations'
     PROJECTS = 'Projects'
+    RELEASES = 'Releases'
+    TAGS = 'Tags'
     TEAMS = 'Teams'
 
 
diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
new file mode 100644
index 0000000000..619a1684fe
--- /dev/null
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.models import TagKey, TagKeyStatus, TagValue
+
+
+class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
+    doc_section = DocSection.TAGS
+
+    def get(self, request, project, key):
+        """
+        List a tag's values
+
+        Return a list of values associated with this key.
+
+            {method} {path}
+
+        """
+        try:
+            tagkey = TagKey.objects.get(
+                project=project,
+                key=key,
+                status=TagKeyStatus.VISIBLE,
+            )
+        except TagKey.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        queryset = TagValue.objects.filter(
+            project=project,
+            key=key,
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-id',
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
new file mode 100644
index 0000000000..11fcb25da7
--- /dev/null
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import TagValue
+
+
+@register(TagValue)
+class TagValueSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        d = {
+            'key': obj.key,
+            'value': obj.value,
+            'count': obj.times_seen,
+            'lastSeen': obj.last_seen,
+            'firstSeen': obj.first_seen,
+        }
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 8bb583e594..8dc4bdfd8d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -22,6 +22,7 @@ from .endpoints.project_group_index import ProjectGroupIndexEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.project_tagkey_details import ProjectTagKeyDetailsEndpoint
+from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
 from .endpoints.release_details import ReleaseDetailsEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
@@ -96,6 +97,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<project_id>\d+)/tags/(?P<key>[^/]+)/$',
         ProjectTagKeyDetailsEndpoint.as_view(),
         name='sentry-api-0-project-tagkey-details'),
+    url(r'^projects/(?P<project_id>\d+)/tags/(?P<key>[^/]+)/values/$',
+        ProjectTagKeyValuesEndpoint.as_view(),
+        name='sentry-api-0-project-tagkey-values'),
 
     # Releases
     url(r'^releases/(?P<release_id>\d+)/$',
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_values.py b/tests/sentry/api/endpoints/test_project_tagkey_values.py
new file mode 100644
index 0000000000..70d373440c
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_tagkey_values.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import TagKey, TagValue
+from sentry.testutils import APITestCase
+
+
+class ProjectTagKeyValuesTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+        tagkey = TagKey.objects.create(project=project, key='foo')
+        tagvalue = TagValue.objects.create(project=project, key='foo', value='bar')
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-project-tagkey-values', kwargs={
+            'project_id': project.id,
+            'key': tagkey.key,
+        })
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200
+        assert len(response.data) == 1
+
+        assert response.data[0]['value'] == 'bar'
