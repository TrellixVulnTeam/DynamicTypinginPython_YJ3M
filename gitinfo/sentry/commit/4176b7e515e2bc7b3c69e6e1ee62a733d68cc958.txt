commit 4176b7e515e2bc7b3c69e6e1ee62a733d68cc958
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Nov 25 13:26:35 2016 +0100

    Properly expose the status for on hold through the api

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 4b3c54ac96..0593deaac9 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -161,34 +161,37 @@ class GroupSerializer(Serializer):
                 'user_count': user_counts.get(item.id, 0),
                 'ignore_duration': ignore_durations.get(item.id),
                 'pending_resolution': pending_resolutions.get(item.id),
-                'is_transient': item.is_transient(),
-                'on_hold': bool(item.on_hold),
             }
         return result
 
     def serialize(self, obj, attrs, user):
         status = obj.status
         status_details = {}
-        if attrs['ignore_duration']:
-            if attrs['ignore_duration'] < timezone.now() and status == GroupStatus.IGNORED:
-                status = GroupStatus.UNRESOLVED
-            else:
-                status_details['ignoreUntil'] = attrs['ignore_duration']
-        elif status == GroupStatus.UNRESOLVED and obj.is_over_resolve_age():
-            status = GroupStatus.RESOLVED
-            status_details['autoResolved'] = True
-        if status == GroupStatus.RESOLVED:
-            status_label = 'resolved'
-            if attrs['pending_resolution']:
-                status_details['inNextRelease'] = True
-        elif status == GroupStatus.IGNORED:
-            status_label = 'ignored'
-        elif status in [GroupStatus.PENDING_DELETION, GroupStatus.DELETION_IN_PROGRESS]:
-            status_label = 'pending_deletion'
-        elif status == GroupStatus.PENDING_MERGE:
-            status_label = 'pending_merge'
+
+        if obj.on_hold:
+            status = GroupStatus.IGNORED
+            status_label = 'on_hold'
         else:
-            status_label = 'unresolved'
+            if attrs['ignore_duration']:
+                if attrs['ignore_duration'] < timezone.now() and status == GroupStatus.IGNORED:
+                    status = GroupStatus.UNRESOLVED
+                else:
+                    status_details['ignoreUntil'] = attrs['ignore_duration']
+            elif status == GroupStatus.UNRESOLVED and obj.is_over_resolve_age():
+                status = GroupStatus.RESOLVED
+                status_details['autoResolved'] = True
+            if status == GroupStatus.RESOLVED:
+                status_label = 'resolved'
+                if attrs['pending_resolution']:
+                    status_details['inNextRelease'] = True
+            elif status == GroupStatus.IGNORED:
+                status_label = 'ignored'
+            elif status in [GroupStatus.PENDING_DELETION, GroupStatus.DELETION_IN_PROGRESS]:
+                status_label = 'pending_deletion'
+            elif status == GroupStatus.PENDING_MERGE:
+                status_label = 'pending_merge'
+            else:
+                status_label = 'unresolved'
 
         permalink = absolute_uri(reverse('sentry-group', args=[
             obj.organization.slug, obj.project.slug, obj.id]))
@@ -221,6 +224,7 @@ class GroupSerializer(Serializer):
             'assignedTo': attrs['assigned_to'],
             'isBookmarked': attrs['is_bookmarked'],
             'isSubscribed': is_subscribed,
+            'isTransient': obj.is_transient(),
             'subscriptionDetails': {
                 'reason': SUBSCRIPTION_REASON_MAP.get(
                     subscription.reason,
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index 2dde7901b4..7afbb656df 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -47,6 +47,17 @@ class GroupSerializerTest(TestCase):
         assert result['status'] == 'ignored'
         assert result['statusDetails'] == {'ignoreUntil': snooze.until}
 
+    def test_is_ignored_on_hold(self):
+        user = self.create_user()
+        group = self.create_group(
+            status=GroupStatus.RESOLVED,
+            on_hold=True,
+        )
+
+        result = serialize(group, user)
+        assert result['status'] == 'on_hold'
+        assert result['isTransient'] is True
+
     def test_resolved_in_next_release(self):
         release = Release.objects.create(
             organization_id=self.project.organization_id,
