commit 7facc41f707e6a3d959123b38be6c121a83cea36
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon May 21 16:01:19 2018 -0700

    feat(integrations): Add API to config Project & Org Integrations

diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 5f12fe8afc..fc8f56e056 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -94,6 +94,15 @@ class RelaxedSearchPermission(ProjectPermission):
     }
 
 
+class ProjectIntegrationsPermission(ProjectPermission):
+    scope_map = {
+        'GET': ['project:read', 'project:write', 'project:admin', 'project:integrations'],
+        'POST': ['project:write', 'project:admin', 'project:integrations'],
+        'PUT': ['project:write', 'project:admin', 'project:integrations'],
+        'DELETE': ['project:write', 'project:admin', 'project:integrations'],
+    }
+
+
 class ProjectEndpoint(Endpoint):
     permission_classes = (ProjectPermission, )
 
diff --git a/src/sentry/api/endpoints/organization_integration_details.py b/src/sentry/api/endpoints/organization_integration_details.py
index 8a4b60acce..86fb7d805a 100644
--- a/src/sentry/api/endpoints/organization_integration_details.py
+++ b/src/sentry/api/endpoints/organization_integration_details.py
@@ -1,30 +1,53 @@
 from __future__ import absolute_import
 
+from django.http import Http404
+
 from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationIntegrationsPermission
 )
 from sentry.api.serializers import serialize
-from sentry.models import Integration, OrganizationIntegration
+from sentry.models import OrganizationIntegration, ProjectIntegration
 
 
 class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationIntegrationsPermission, )
 
     def get(self, request, organization, integration_id):
-        integration = Integration.objects.get(
-            organizations=organization,
-            id=integration_id,
-        )
+        try:
+            integration = OrganizationIntegration.objects.get(
+                integration_id=integration_id,
+                organization=organization,
+            )
+        except OrganizationIntegration.DoesNotExist:
+            raise Http404
 
         return self.respond(serialize(integration, request.user))
 
     def delete(self, request, organization, integration_id):
-        integration = Integration.objects.get(
-            organizations=organization,
-            id=integration_id,
-        )
+        # Removing the integration removes both the organization and project
+        # integration.
         OrganizationIntegration.objects.filter(
-            integration=integration,
+            integration_id=integration_id,
             organization=organization,
         ).delete()
+        ProjectIntegration.objects.filter(
+            integration_id=integration_id,
+            project__organization=organization,
+        ).delete()
+
         return self.respond(status=204)
+
+    def post(self, request, organization, integration_id):
+        try:
+            integration = OrganizationIntegration.objects.get(
+                integration_id=integration_id,
+                organization=organization,
+            )
+        except OrganizationIntegration.DoesNotExist:
+            raise Http404
+
+        config = integration.config
+        config.update(request.DATA)
+        integration.update(config=config)
+
+        return self.respond(status=200)
diff --git a/src/sentry/api/endpoints/organization_integrations.py b/src/sentry/api/endpoints/organization_integrations.py
index 4141149e51..933baa5038 100644
--- a/src/sentry/api/endpoints/organization_integrations.py
+++ b/src/sentry/api/endpoints/organization_integrations.py
@@ -5,22 +5,24 @@ from sentry.api.bases.organization import (
 )
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.models import Integration
+from sentry.models import OrganizationIntegration
 
 
 class OrganizationIntegrationsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationIntegrationsPermission, )
 
     def get(self, request, organization):
-        integrations = Integration.objects.filter(organizations=organization)
+        integrations = OrganizationIntegration.objects.filter(organization=organization)
 
         if 'provider_key' in request.GET:
-            integrations = integrations.filter(provider=request.GET['provider_key'])
+            integrations = integrations.filter(
+                integration__provider=request.GET['provider_key']
+            )
 
         return self.paginate(
             queryset=integrations,
             request=request,
-            order_by='name',
+            order_by='integration__name',
             on_results=lambda x: serialize(x, request.user),
             paginator_cls=OffsetPaginator,
         )
diff --git a/src/sentry/api/endpoints/project_integration_details.py b/src/sentry/api/endpoints/project_integration_details.py
new file mode 100644
index 0000000000..947ae3386c
--- /dev/null
+++ b/src/sentry/api/endpoints/project_integration_details.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+from django.http import Http404
+
+from sentry.api.bases.project import ProjectEndpoint, ProjectIntegrationsPermission
+from sentry.api.serializers import serialize
+from sentry.models import ProjectIntegration, Integration
+
+
+class ProjectIntegrationDetailsEndpoint(ProjectEndpoint):
+    permission_classes = (ProjectIntegrationsPermission, )
+
+    def get(self, request, project, integration_id):
+        try:
+            integration = ProjectIntegration.objects.get(
+                project=project,
+                integration_id=integration_id,
+            )
+        except ProjectIntegration.DoesNotExist:
+            raise Http404
+
+        return self.respond(serialize(integration, request.user))
+
+    def put(self, request, project, integration_id):
+        # Integrations can only be added to a project if they are already
+        # configured for the organization themselves.
+        try:
+            integration = Integration.objects.get(
+                id=integration_id,
+                organizations=project.organization_id,
+            )
+        except Integration.DoesNotExist:
+            raise Http404
+
+        created = integration.add_project(project.id)
+
+        return self.respond(status=(201 if created else 204))
+
+    def delete(self, request, project, integration_id):
+        ProjectIntegration.objects.filter(
+            integration__id=integration_id,
+            project=project,
+        ).delete()
+        return self.respond(status=204)
+
+    def post(self, request, project, integration_id):
+        try:
+            integration = ProjectIntegration.objects.get(
+                integration__id=integration_id,
+                project=project,
+            )
+        except ProjectIntegration.DoesNotExist:
+            raise Http404
+
+        config = integration.config
+        config.update(request.DATA)
+        integration.update(config=config)
+
+        return self.respond(status=200)
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index 7bec97fb24..97b818c439 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import
 import six
 from collections import defaultdict
 
-from sentry.api.serializers import register, Serializer
-from sentry.models import ExternalIssue, GroupLink, Integration
+from sentry.api.serializers import register, Serializer, serialize
+from sentry.models import ExternalIssue, GroupLink, Integration, OrganizationIntegration, ProjectIntegration
 
 
 @register(Integration)
@@ -19,10 +19,80 @@ class IntegrationSerializer(Serializer):
             'provider': {
                 'key': provider.key,
                 'name': provider.name,
-            }
+            },
         }
 
 
+class IntegrationConfigSerializer(IntegrationSerializer):
+    def serialize(self, obj, attrs, user):
+        data = super(IntegrationConfigSerializer, self).serialize(obj, attrs, user)
+
+        data.update({
+            'config_organization': [],
+            'config_project': [],
+        })
+
+        try:
+            install = obj.get_installation()
+        except NotImplementedError:
+            # The integration may not implement a Installed Integration object
+            # representation.
+            pass
+        else:
+            data.update({
+                'config_organization': install.get_organization_config(),
+                'config_project': install.get_project_config(),
+            })
+
+        return data
+
+
+@register(OrganizationIntegration)
+class OrganizationIntegrationSerializer(Serializer):
+    def get_attrs(self, item_list, user, *args, **kwargs):
+        # Lookup related project integrations
+        project_integrations = ProjectIntegration.objects \
+            .select_related('project') \
+            .filter(
+                integration_id__in=[i.integration_id for i in item_list],
+                project__organization_id__in=[i.organization_id for i in item_list],
+            )
+
+        project_integrations_by_org = defaultdict(dict)
+        for pi in project_integrations:
+            project_integrations_by_org[pi.project.organization_id][pi.project.slug] = pi.config
+
+        return {
+            i: {
+                'project_configs': project_integrations_by_org.get(i.organization_id, {})
+            } for i in item_list
+        }
+
+    def serialize(self, obj, attrs, user, organization=None, project=None):
+        # XXX(epurkhiser): This is O(n) for integrations, especially since
+        # we're using the IntegrationConfigSerializer which pulls in the
+        # integration installation config object which very well may be making
+        # API request for config options.
+        integration = serialize(obj.integration, user, IntegrationConfigSerializer())
+        integration.update({
+            'config_data': obj.config,
+            'config_data_projects': attrs['project_configs'],
+        })
+
+        return integration
+
+
+@register(ProjectIntegration)
+class ProjectIntegrationSerializer(Serializer):
+    def serialize(self, obj, attrs, user, organization=None, project=None):
+        integration = serialize(obj.integration, user, IntegrationConfigSerializer())
+        integration.update({
+            'config_data': obj.config,
+        })
+
+        return integration
+
+
 class IntegrationIssueConfigSerializer(IntegrationSerializer):
     def __init__(self, group, action, params=None):
         self.group = group
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 4ee74b043d..c2159031e8 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -93,6 +93,7 @@ from .endpoints.project_docs import ProjectDocsEndpoint
 from .endpoints.project_docs_platform import ProjectDocsPlatformEndpoint
 from .endpoints.project_environments import ProjectEnvironmentsEndpoint
 from .endpoints.project_environment_details import ProjectEnvironmentDetailsEndpoint
+from .endpoints.project_integration_details import ProjectIntegrationDetailsEndpoint
 from .endpoints.project_platforms import ProjectPlatformsEndpoint
 from .endpoints.project_events import ProjectEventsEndpoint
 from .endpoints.project_event_details import ProjectEventDetailsEndpoint
@@ -627,6 +628,11 @@ urlpatterns = patterns(
         ProjectEnvironmentDetailsEndpoint.as_view(),
         name='sentry-api-0-project-environment-details'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/integrations/(?P<integration_id>[^/]+)/$',
+        ProjectIntegrationDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-integration-details'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/platforms/$',
         ProjectPlatformsEndpoint.as_view(),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ad4aa61756..d0624922dd 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1056,6 +1056,7 @@ SENTRY_SCOPES = set(
         'project:write',
         'project:admin',
         'project:releases',
+        'project:integrations',
         'event:read',
         'event:write',
         'event:admin',
@@ -1069,6 +1070,7 @@ SENTRY_SCOPE_SETS = (
         ('org:read', 'Read access to organization details.'),
     ), (
         ('org:integrations', 'Read, write, and admin access to organization integrations.'),
+        ('project:integrations', 'Read, write, and admin access to project integrations.'),
     ), (
         ('member:admin', 'Read, write, and admin access to organization members.'),
         ('member:write', 'Read and write access to organization members.'),
@@ -1127,6 +1129,7 @@ SENTRY_ROLES = (
                 'project:write',
                 'project:admin',
                 'project:releases',
+                'project:integrations'
                 'team:read',
                 'team:write',
                 'team:admin',
@@ -1150,6 +1153,7 @@ SENTRY_ROLES = (
                 'project:write',
                 'project:admin',
                 'project:releases',
+                'project:integrations'
                 'team:read',
                 'team:write',
                 'team:admin',
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 1777110600..d6f7552ef4 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -165,6 +165,23 @@ class Integration(object):
     def __init__(self, model):
         self.model = model
 
+    def get_organization_config(self):
+        """
+        Returns a list of JSONForm configuration object descriptors used to
+        configure the integration per-organization. This simply represents the
+        configuration structure.
+
+        See the JSONForm react component for structure details.
+        """
+        return []
+
+    def get_project_config(self):
+        """
+        Provides configuration for the integration on a per-project
+        level. See ``get_config_organization``.
+        """
+        return []
+
     def get_client(self):
         # Return the api client for a given provider
         raise NotImplementedError
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index bc8bd415ee..f7bb9f1d2a 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -87,3 +87,34 @@ class Integration(Model):
             return False
         else:
             return True
+
+    def add_project(self, project_id, config=None):
+        """
+        Add a project to this integration. Requires that a
+        OrganizationIntegration must exist before the project can be added.
+
+        Returns True if the ProjectIntegration was created
+        """
+        from sentry.models import Project
+        org_id_queryset = Project.objects \
+            .filter(id=project_id) \
+            .values_list('organization_id', flat=True)
+        org_integration = OrganizationIntegration.objects.filter(
+            organization_id=org_id_queryset,
+            integration=self,
+        )
+
+        if not org_integration.exists():
+            return False
+
+        try:
+            with transaction.atomic():
+                ProjectIntegration.objects.create(
+                    project_id=project_id,
+                    integration_id=self.id,
+                    config=config or {},
+                )
+        except IntegrityError:
+            return False
+        else:
+            return True
diff --git a/tests/sentry/api/endpoints/test_organization_integration_details.py b/tests/sentry/api/endpoints/test_organization_integration_details.py
index 66db53c9c1..1c78d21d5a 100644
--- a/tests/sentry/api/endpoints/test_organization_integration_details.py
+++ b/tests/sentry/api/endpoints/test_organization_integration_details.py
@@ -2,43 +2,67 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.models import Integration, OrganizationIntegration
+from sentry.models import Integration, OrganizationIntegration, ProjectIntegration
 from sentry.testutils import APITestCase
 
 
 class OrganizationIntegrationDetailsTest(APITestCase):
-    def test_simple(self):
+    def setUp(self):
+        super(OrganizationIntegrationDetailsTest, self).setUp()
+
         self.login_as(user=self.user)
-        org = self.create_organization(owner=self.user, name='baz')
-        integration = Integration.objects.create(
+        self.org = self.create_organization(owner=self.user, name='baz')
+        self.integration = Integration.objects.create(
             provider='example',
             name='Example',
         )
-        integration.add_organization(org.id)
-        path = '/api/0/organizations/{}/integrations/{}/'.format(org.slug, integration.id)
+        self.integration.add_organization(self.org.id, config={'setting': 'value'})
 
-        response = self.client.get(path, format='json')
+        self.path = '/api/0/organizations/{}/integrations/{}/'.format(self.org.slug, self.integration.id)
+
+    def test_simple(self):
+        response = self.client.get(self.path, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(integration.id)
+        assert response.data['id'] == six.text_type(self.integration.id)
+        assert response.data['config_data'] == {'setting': 'value'}
 
+    def test_removal(self):
+        team = self.create_team(organization=self.org, name='Mariachi Band')
+        project1 = self.create_project(teams=[team], name='project-1')
+        project2 = self.create_project(teams=[team], name='project-2')
 
-class OrganizationIntegrationDeleteTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-        org = self.create_organization(owner=self.user, name='baz')
-        integration = Integration.objects.create(
-            provider='example',
-            name='Example',
-        )
-        integration.add_organization(org.id)
-        path = '/api/0/organizations/{}/integrations/{}/'.format(org.slug, integration.id)
+        # Setup projects to ensure the projects are removed along with the organization integration
+        assert self.integration.add_project(project1.id)
+        assert self.integration.add_project(project2.id)
 
-        response = self.client.delete(path, format='json')
+        response = self.client.delete(self.path, format='json')
 
         assert response.status_code == 204, response.content
-        assert Integration.objects.filter(id=integration.id).exists()
+        assert Integration.objects.filter(id=self.integration.id).exists()
+
+        # Ensure both Organization *and* Project integrations are removed
         assert not OrganizationIntegration.objects.filter(
-            id=integration.id,
-            organization=org,
+            integration=self.integration,
+            organization=self.org,
+        ).exists()
+        assert not ProjectIntegration.objects.filter(
+            project__organization=self.org
         ).exists()
+
+    def test_update_config(self):
+        config = {
+            'setting': 'new_value',
+            'setting2': 'baz',
+        }
+
+        response = self.client.post(self.path, format='json', data=config)
+
+        assert response.status_code == 200, response.content
+
+        org_integration = OrganizationIntegration.objects.get(
+            integration=self.integration,
+            organization=self.org,
+        )
+
+        assert org_integration.config == config
diff --git a/tests/sentry/api/endpoints/test_project_integration_details.py b/tests/sentry/api/endpoints/test_project_integration_details.py
new file mode 100644
index 0000000000..dded64973b
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_integration_details.py
@@ -0,0 +1,82 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.models import Integration, ProjectIntegration
+from sentry.testutils import APITestCase
+
+
+class ProjectIntegrationDetailsTest(APITestCase):
+    def setUp(self):
+        super(ProjectIntegrationDetailsTest, self).setUp()
+
+        self.login_as(user=self.user)
+        self.org = self.create_organization(owner=self.user, name='baz')
+
+        team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.project = self.create_project(teams=[team], name='bar-project')
+
+        self.integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        self.integration.add_organization(self.org.id)
+
+        self.path = '/api/0/projects/{}/{}/integrations/{}/'.format(
+            self.org.slug,
+            self.project.slug,
+            self.integration.id,
+        )
+
+    def test_simple(self):
+        config = {'setting': 'value'}
+        assert self.integration.add_project(self.project.id, config=config)
+
+        response = self.client.get(self.path, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(self.integration.id)
+        assert response.data['config_data'] == config
+
+    def test_enable(self):
+        response = self.client.put(self.path, format='json')
+        assert response.status_code == 201, response.content
+
+        assert ProjectIntegration.objects.filter(
+            project=self.project,
+            integration=self.integration
+        ).exists()
+
+        # Object has already been created, 204
+        response = self.client.put(self.path, format='json')
+        assert response.status_code == 204, response.content
+
+    def test_remove(self):
+        assert self.integration.add_project(self.project.id)
+
+        response = self.client.delete(self.path, format='json')
+        assert response.status_code == 204, response.content
+
+        assert not ProjectIntegration.objects.filter(
+            project=self.project,
+            integration=self.integration
+        ).exists()
+
+    def test_update_config(self):
+        config = {'setting': 'value'}
+        assert self.integration.add_project(self.project.id, config=config)
+
+        config = {
+            'setting': 'new_value',
+            'setting2': 'baz',
+        }
+        response = self.client.post(self.path, format='json', data=config)
+
+        assert response.status_code == 200, response.content
+
+        project_integration = ProjectIntegration.objects.get(
+            project=self.project,
+            integration=self.integration,
+        )
+
+        assert project_integration.config == config
