commit 0f59dbaf447efe04ee97b080054c34eb2f35bcc0
Author: David Wang <davidw1339@gmail.com>
Date:   Mon Oct 7 15:36:53 2019 -0700

    feat(ui): Add organization store (#14962)
    
    Add a store to hold the current organization to be used to aid in navigation between a lightweight organization details route tree and a heavyweight organization details route tree. In both route trees OrganizationContext will first read from store to see if fetching the organization is necessary. In the lightweight route tree, some pages will eventually attempt to populate the lightweight organization details with additional information (projects, teams) to mimic the heavyweight org details.
    
    Refs: SEN-1143

diff --git a/src/sentry/static/sentry/app/actionCreators/organizations.jsx b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
index aa7ccb5f60..0265fea23b 100644
--- a/src/sentry/static/sentry/app/actionCreators/organizations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
@@ -3,6 +3,7 @@ import {browserHistory} from 'react-router';
 import {resetGlobalSelection} from 'app/actionCreators/globalSelection';
 import {Client} from 'app/api';
 import IndicatorStore from 'app/stores/indicatorStore';
+import OrganizationActions from 'app/actions/organizationActions';
 import OrganizationsActions from 'app/actions/organizationsActions';
 import OrganizationsStore from 'app/stores/organizationsStore';
 import ProjectsStore from 'app/stores/projectsStore';
@@ -68,6 +69,7 @@ export function changeOrganizationSlug(prev, next) {
 
 export function updateOrganization(org) {
   OrganizationsActions.update(org);
+  OrganizationActions.update(org);
 }
 
 export async function fetchOrganizationByMember(memberId, {addOrg, fetchOrgDetails}) {
diff --git a/src/sentry/static/sentry/app/actions/organizationActions.jsx b/src/sentry/static/sentry/app/actions/organizationActions.jsx
new file mode 100644
index 0000000000..fab246357b
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/organizationActions.jsx
@@ -0,0 +1,3 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions(['update']);
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
new file mode 100644
index 0000000000..ce299a95e2
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/organizationStore.jsx
@@ -0,0 +1,25 @@
+import Reflux from 'reflux';
+
+import OrganizationActions from 'app/actions/organizationActions';
+
+const OrganizationStore = Reflux.createStore({
+  init() {
+    this.reset();
+    this.listenTo(OrganizationActions.update, this.onUpdate);
+  },
+
+  reset() {
+    this.org = null;
+  },
+
+  onUpdate(updatedOrg) {
+    this.org = {...this.org, ...updatedOrg};
+    this.trigger(this.org);
+  },
+
+  getOrganization() {
+    return this.org;
+  },
+});
+
+export default OrganizationStore;
diff --git a/tests/js/spec/stores/organizationStore.spec.jsx b/tests/js/spec/stores/organizationStore.spec.jsx
new file mode 100644
index 0000000000..c50437f298
--- /dev/null
+++ b/tests/js/spec/stores/organizationStore.spec.jsx
@@ -0,0 +1,23 @@
+import OrganizationStore from 'app/stores/organizationStore';
+import OrganizationActions from 'app/actions/organizationActions';
+import {updateOrganization} from 'app/actionCreators/organizations';
+
+describe('OrganizationStore', function() {
+  beforeEach(function() {
+    OrganizationStore.reset();
+  });
+
+  it('updates correctly', async function() {
+    const org = TestStubs.Organization();
+    OrganizationActions.update(org);
+    await tick();
+    expect(OrganizationStore.getOrganization()).toMatchObject(org);
+  });
+
+  it('updates correctly from setting changes', async function() {
+    const org = TestStubs.Organization();
+    updateOrganization(org);
+    await tick();
+    expect(OrganizationStore.getOrganization()).toMatchObject(org);
+  });
+});
