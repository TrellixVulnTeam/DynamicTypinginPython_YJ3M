commit e5a9e1f55ef0c770f9d7cc6dba697a7bab4953b7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 11 19:45:14 2014 -0700

    Require either value or type for exception

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index efd35810a0..7a795008cf 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -16,9 +16,9 @@ from sentry.web.helpers import render_to_string
 
 class SingleException(Interface):
     """
-    A standard exception with a mandatory ``value`` argument, and optional
-    ``type`` and``module`` argument describing the exception class type and
-    module namespace.
+    A standard exception with a ``type`` and value argument, and an optional
+    ``module`` argument describing the exception class type and
+    module namespace. Either ``type`` or ``value`` must be present.
 
     You can also optionally bind a stacktrace interface to an exception. The
     spec is identical to ``sentry.interfaces.Stacktrace``.
@@ -37,7 +37,7 @@ class SingleException(Interface):
 
     @classmethod
     def to_python(cls, data):
-        assert data.get('value') is not None
+        assert data.get('type') or data.get('value')
 
         if data.get('stacktrace'):
             stacktrace = Stacktrace.to_python(data['stacktrace'])
@@ -45,8 +45,8 @@ class SingleException(Interface):
             stacktrace = None
 
         kwargs = {
-            'value': trim(data['value'], 256),
             'type': trim(data.get('type'), 128),
+            'value': trim(data.get('value'), 256),
             'module': trim(data.get('module'), 128),
             'stacktrace': stacktrace,
         }
@@ -60,8 +60,8 @@ class SingleException(Interface):
             stacktrace = None
 
         return {
-            'value': self.value,
             'type': self.type,
+            'value': self.value,
             'module': self.module,
             'stacktrace': stacktrace,
         }
@@ -89,7 +89,7 @@ class SingleException(Interface):
             last_frame = interface.frames[-1]
 
         e_module = self.module
-        e_type = self.type or 'Exception'
+        e_type = self.type
         e_value = self.value
 
         if self.module:
@@ -97,11 +97,15 @@ class SingleException(Interface):
         else:
             fullname = e_type
 
+        if e_value and not e_type:
+            e_type = e_value
+            e_value = None
+
         return {
             'is_public': is_public,
             'event': event,
-            'exception_value': e_value or e_type or '<empty value>',
             'exception_type': e_type,
+            'exception_value': e_value,
             'exception_module': e_module,
             'fullname': fullname,
             'last_frame': last_frame
diff --git a/src/sentry/templates/sentry/partial/interfaces/exception.html b/src/sentry/templates/sentry/partial/interfaces/exception.html
index f37b6afbaa..d58f90f040 100644
--- a/src/sentry/templates/sentry/partial/interfaces/exception.html
+++ b/src/sentry/templates/sentry/partial/interfaces/exception.html
@@ -8,12 +8,10 @@
             <colgroup>
                 <col style="width:100px;">
             </colgroup>
-            {% if exception_type %}
             <tr>
-                <th>{% trans "Types:" %}</th>
+                <th>{% trans "Type:" %}</th>
                 <td class="code"><pre>{{ exception_type|escape }}</pre></td>
             </tr>
-            {% endif %}
             {% if exception_value %}
             <tr>
                 <th>{% trans "Value:" %}</th>
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 85484bdfcd..bd8412fed5 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -114,3 +114,11 @@ class SingleExceptionTest(TestCase):
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
         assert result.to_json() == self.interface.to_json()
+
+    def test_only_requires_only_type_or_value(self):
+        SingleException.to_python(dict(
+            type='ValueError',
+        ))
+        SingleException.to_python(dict(
+            value='ValueError',
+        ))
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 5cbfc83a66..5caf8a0e06 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -217,7 +217,7 @@ class StacktraceTest(TestCase):
 
     def test_get_composite_hash_uses_exception_value_if_no_type_or_stack(self):
         interface = Stacktrace(frames=[])
-        interface_exc = Exception.to_python(dict(value='bar'))
+        interface_exc = Exception.to_python(dict(type='bar'))
         result = interface.get_composite_hash({
             'sentry.interfaces.Exception': interface_exc,
         })
