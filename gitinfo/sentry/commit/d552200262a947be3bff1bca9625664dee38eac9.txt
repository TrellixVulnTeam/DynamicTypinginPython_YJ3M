commit d552200262a947be3bff1bca9625664dee38eac9
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Nov 30 21:20:44 2012 -0800

    Remove coffeescript usage

diff --git a/Makefile b/Makefile
index 78ad8afcb6..28a73d816f 100644
--- a/Makefile
+++ b/Makefile
@@ -1,10 +1,9 @@
 VERSION = 2.0.0
-NPM_ROOT = node_modules/
+NPM_ROOT = node_modules
 STATIC_DIR = src/sentry/static/sentry
 BOOTSTRAP_JS = ${STATIC_DIR}/scripts/lib/bootstrap.js
 BOOTSTRAP_JS_MIN = ${STATIC_DIR}/scripts/lib/bootstrap.min.js
 UGLIFY_JS ?= `which uglifyjs`
-COFFEE ?= `which coffee`
 WATCHR ?= `which watchr`
 
 develop: update-submodules
@@ -12,7 +11,7 @@ develop: update-submodules
 	pip install "flake8>=1.6" --use-mirrors
 	pip install -e . --use-mirrors
 
-build: static coffee locale
+build: static locale
 
 clean:
 	rm -r src/sentry/static/CACHE
@@ -30,20 +29,11 @@ update-submodules:
 	git submodule init
 	git submodule update
 
-coffee:
-	@${NPM_ROOT}/coffee-script/bin/coffee --join ${STATIC_DIR}/scripts/site.js -c ${STATIC_DIR}/coffee/*.coffee
-	@echo "Coffe script assets successfully built! - `date`";
-
-cwatch:
-	@echo "Watching coffee script files..."; \
-	make coffee
-	@${NPM_ROOT}/coffee-script/bin/coffee --join ${STATIC_DIR}/scripts/site.js -cw ${STATIC_DIR}/coffee/*.coffee
-
 test: lint test-js test-python
 
 test-js:
 	@echo "Running JavaScript tests"
-	@${NPM_ROOT}/phantomjs/bin/phantomjs runtests.coffee tests/js/index.html || exit 1
+	${NPM_ROOT}/phantomjs/bin/phantomjs runtests.js tests/js/index.html
 	@echo ""
 
 test-python:
@@ -68,4 +58,4 @@ coverage:
 	coverage html --omit=*/migrations/* -d cover
 
 
-.PHONY: build watch coffee
+.PHONY: build
diff --git a/package.json b/package.json
index 2085b091ec..11084d668c 100644
--- a/package.json
+++ b/package.json
@@ -3,9 +3,7 @@
     "version": "0.1.0",
     "dependencies": {
         "less": "1.3.1",
-        "coffee-script": "1.4.0",
         "phantomjs": "0.2.3",
-        "jshint": "0.9.1",
-        "coffeelint": "0.5.4"
+        "jshint": "0.9.1"
     }
 }
diff --git a/runtests.coffee b/runtests.coffee
deleted file mode 100644
index c34b490f37..0000000000
--- a/runtests.coffee
+++ /dev/null
@@ -1,46 +0,0 @@
-#!/usr/local/bin/phantomjs
-
-# Runs a Jasmine Suite from an html page
-# @page is a PhantomJs page object
-# @exit_func is the function to call in order to exit the script
-
-class PhantomJasmineRunner
-  constructor: (@page, @exit_func = phantom.exit) ->
-    @tries = 0
-    @max_tries = 10
-
-  get_status: -> @page.evaluate(-> console_reporter.status)
-
-  terminate: ->
-    switch @get_status()
-      when "success" then @exit_func 0
-      when "fail"    then @exit_func 1
-      else                @exit_func 2
-
-# Script Begin
-if phantom.args.length == 0
-  console.log "Need a url as the argument"
-  phantom.exit 1
-
-page = new WebPage()
-
-runner = new PhantomJasmineRunner(page)
-
-# Don't supress console output
-page.onConsoleMessage = (msg) ->
-  console.log msg
-
-  # Terminate when the reporter singals that testing is over.
-  # We cannot use a callback function for this (because page.evaluate is sandboxed),
-  # so we have to *observe* the website.
-  if msg == "ConsoleReporter finished"
-    runner.terminate()
-
-address = phantom.args[0]
-
-page.open address, (status) ->
-  if status != "success"
-    console.log "can't load the address!"
-    phantom.exit 1
-
-  # Now we wait until onConsoleMessage reads the termination signal from the log.
\ No newline at end of file
diff --git a/runtests.js b/runtests.js
new file mode 100644
index 0000000000..0d3ab62ee9
--- /dev/null
+++ b/runtests.js
@@ -0,0 +1,65 @@
+#!/usr/local/bin/phantomjs
+/*global phantom:true console:true console_reporter:true */
+
+// Runs a Jasmine Suite from an html page
+// @page is a PhantomJs page object
+// @exit_func is the function to call in order to exit the script
+
+(function(phantom, WebPage){
+  "use strict";
+
+  var PhantomJasmineRunner = function(page, exit_func){
+    this.page = page;
+    this.exit_func = exit_func || phantom.exit;
+    this.tries = 0;
+    this.max_tries = 10;
+
+    this.get_status = function(){
+      this.page.evaluate(function(){
+        return console_reporter.status;
+      });
+    };
+
+    this.terminate = function(){
+      var status = this.get_status();
+      if (status === 'success') {
+        this.exit_func(0);
+      } else if (status === 'fail') {
+        this.exit_func(1);
+      } else {
+        this.exit_func(2);
+      }
+    };
+  };
+
+  // Script Begin
+  if (phantom.args.length === 0) {
+    console.log("Need a url as the argument");
+    phantom.exit(1);
+  }
+
+  var page = new WebPage();
+  var runner = new PhantomJasmineRunner(page);
+  var address = phantom.args[0];
+
+  // Don't supress console output
+  page.onConsoleMessage = function(msg){
+    console.log(msg);
+
+    // Terminate when the reporter singals that testing is over.
+    // We cannot use a callback function for this (because page.evaluate is sandboxed),
+    // so we have to *observe* the website.
+    if (msg == "ConsoleReporter finished") {
+      runner.terminate();
+    }
+  };
+
+  page.open(address, function(status){
+    if (status != "success") {
+      console.log("can't load the address!");
+      phantom.exit(1);
+    }
+    // Now we wait until onConsoleMessage reads the termination signal from the log.
+  });
+
+}(phantom, WebPage));
\ No newline at end of file
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index a09922e18d..f20b4665bb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -165,10 +165,8 @@ STATIC_URL = '/_static/'
 NPM_ROOT = os.path.abspath(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, 'node_modules'))
 if os.path.exists(NPM_ROOT):
     LESS_BIN = os.path.join(NPM_ROOT, 'less', 'bin', 'lessc')
-    COFFEESCRIPT_BIN = os.path.join(NPM_ROOT, 'coffee-script', 'bin', 'coffee')
 else:
     LESS_BIN = 'less'
-    COFFEESCRIPT_BIN = 'coffee'
 
 # XXX: There is a bug in django-compressor that causes it to incorrectly handle
 # relative URLs in precompiled files (less) when compression is disabled
@@ -176,7 +174,6 @@ COMPRESS_ENABLED = True
 COMPRESS_URL = STATIC_URL
 COMPRESS_OUTPUT_DIR = 'CACHE'
 COMPRESS_PRECOMPILERS = (
-    ('text/coffeescript', '%s --compile --stdio' % (COFFEESCRIPT_BIN,)),
     ('text/less', '%s --strict-imports {infile} {outfile}' % (LESS_BIN,)),
 )
 
diff --git a/src/sentry/static/sentry/coffee/app.coffee b/src/sentry/static/sentry/coffee/app.coffee
deleted file mode 100644
index d9bb5c3838..0000000000
--- a/src/sentry/static/sentry/coffee/app.coffee
+++ /dev/null
@@ -1,171 +0,0 @@
-window.app = app = window.app || {}
-app.config = app.config || {};
-
-jQuery ->
-
-    class BasePage extends Backbone.View
-        initialize: (data) ->
-            _.bindAll(@)
-
-            if !data?
-                data = {}
-
-            @config =
-                realtime: data.realtime ? false
-            @views = {}
-
-            @initializeAjaxTabs()
-
-        initializeAjaxTabs: ->
-            # initialize tab event handlers
-            $('a[data-toggle=ajtab]').click (e) =>
-                e.preventDefault()
-
-                $tab = $(e.target)
-                uri = $tab.attr('data-uri')
-                view_id = $tab.attr('href').substr(1)
-                view = @getView(view_id, uri)
-
-                if (!uri)
-                    view.load()
-                    return
-
-                $cont = $('#' + view_id)
-                $parent = $cont.parent()
-
-                $parent.css('opacity', .6)
-
-                # load content for selected tab
-                $.ajax
-                    url: uri
-                    dataType: 'json'
-                    success: (data) =>
-                        view.load(data)
-                        $parent.css('opacity', 1)
-                        $tab.tab('show')
-
-                    error: ->
-                        $cont.html('<p>There was an error fetching data from the server.</p>')
-    
-            # initialize active tabs
-            $('li.active a[data-toggle=ajtab]').click()
-
-        makeDefaultView: (id, uri) ->
-            new app.GroupListView
-                className: 'group-list small'
-                id: id
-                maxItems: 5
-                pollUrl: uri
-                realtime: @config.realtime
-                model: app.Group
-
-        getView: (id, uri) ->
-            if !@views[id]
-                @views[id] = @makeDefaultView(id, uri)
-            return @views[id]
-
-    app.StreamPage = class StreamPage extends BasePage
-
-        initialize: (data) ->
-            BasePage.prototype.initialize.call(@, data)
-
-            @group_list = new app.GroupListView
-                className: 'group-list'
-                id: 'event_list'
-                members: data.groups
-                maxItems: 50
-                realtime: if $.cookie('pausestream') then false else true 
-                pollUrl: app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/'
-                model: app.Group
-
-            @$streamControl = $('a[data-action=pause]')
-            @updateStreamOptions()
-
-            @$streamControl.click (e) =>
-                e.preventDefault()
-                if @$streamControl.hasClass('realtime-pause')
-                    @group_list.config.realtime = true
-                else
-                    @group_list.config.realtime = false
-                @updateStreamOptions()
-
-        updateStreamOptions: () ->
-            if @group_list.config.realtime
-                $.removeCookie('pausestream')
-                @$streamControl.removeClass('realtime-pause')
-                @$streamControl.addClass('realtime-play')
-                @$streamControl.html(@$streamControl.attr('data-pause-label'))
-            else
-                $.cookie('pausestream', '1', {expires: 7})
-                @$streamControl.addClass('realtime-pause')
-                @$streamControl.removeClass('realtime-play')
-                @$streamControl.html(@$streamControl.attr('data-play-label'))
-
-    app.DashboardPage = class DashboardPage extends BasePage
-
-        initialize: (data) ->
-            BasePage.prototype.initialize.call(@, data)
-
-            # TODO:
-            Sentry.charts.render('#chart')
-
-    app.WallPage = class WallPage extends BasePage
-
-        initialize: ->
-            BasePage.prototype.initialize.call(@,
-                realtime: true
-                pollTime: 3000
-            )
-
-            @$sparkline = $('.chart')
-            @$sparkline.height(@$sparkline.parent().height())
-            @$stats = $('#stats')
-
-            @refreshSparkline()
-            @refreshStats()
-
-        refreshSparkline: ->
-            $.ajax
-                url: @$sparkline.attr('data-api-url'),
-                type: 'get'
-                dataType: 'json'
-                data:
-                    days: 1
-                    gid: @$sparkline.attr('data-group') || undefined
-
-                success: (data) =>
-                    $.plot(@$sparkline, [
-                            data: data
-                            color: '#52566c'
-                            shadowSize: 0
-                            lines:
-                                lineWidth: 2
-                                show: true
-                                fill: true
-                                fillColor: '#232428'
-                        ],
-                        yaxis:
-                           min: 0
-                        grid:
-                            show: false
-                        hoverable: false
-                        legend:
-                            noColumns: 5
-                        lines:
-                            show: false
-                    )
-
-        refreshStats: ->
-            $.ajax
-                url: @$stats.attr('data-uri')
-                dataType: 'json'
-                success: (data) =>
-                    @$stats.find('[data-stat]').each ->
-                        $this = $(this)
-                        $this.find('big').text(data[$this.attr('data-stat')])
-                    window.setTimeout(@refreshStats, 1000)
-
-# We're not talking to the server
-Backbone.sync = (method, model, success, error) ->
-
-    success()
\ No newline at end of file
diff --git a/src/sentry/static/sentry/coffee/collections.coffee b/src/sentry/static/sentry/coffee/collections.coffee
deleted file mode 100644
index 0061e41494..0000000000
--- a/src/sentry/static/sentry/coffee/collections.coffee
+++ /dev/null
@@ -1,9 +0,0 @@
-window.app = app = window.app || {}
-
-jQuery ->
-
-    app.ScoredList = class ScoredList extends Backbone.Collection
-        model = app.Group
-
-        comparator: (member) ->
-            -member.get('score')
diff --git a/src/sentry/static/sentry/coffee/models.coffee b/src/sentry/static/sentry/coffee/models.coffee
deleted file mode 100644
index 2134f7463c..0000000000
--- a/src/sentry/static/sentry/coffee/models.coffee
+++ /dev/null
@@ -1,29 +0,0 @@
-window.app = app = app || {}
-
-jQuery ->
-
-    app.User = class User extends Backbone.Model
-
-        defaults:
-            name: null
-            avatar: null
-
-        isAnonymous: ->
-            not @id?
-
-        isUser: (user) ->
-            @id == user.id
-
-    app.Project = class Project extends Backbone.Model
-
-        defaults:
-            name: null
-            slug: null
-
-    app.Group = class Group extends Backbone.Model
-
-        defaults:
-            tags: []
-            versions: []
-            isBookmarked: false
-            historicalData: []
diff --git a/src/sentry/static/sentry/coffee/templates.coffee b/src/sentry/static/sentry/coffee/templates.coffee
deleted file mode 100644
index 5a8eb190a1..0000000000
--- a/src/sentry/static/sentry/coffee/templates.coffee
+++ /dev/null
@@ -1,41 +0,0 @@
-window.app = app = window.app || {}
-app.templates = {}
-
-app.templates.group = '
-        <div class="count" data-count="<%= app.formatNumber(count) %>"><span><%= app.formatNumber(count) %></span></div>
-        <div class="details">
-            <h3><a href="<%= permalink %>"><%= title %></a></h3>
-            <p class="message">
-                <span class="tag tag-logger"><%= logger %></span>
-                <% _.each(versions, function(version){ %> 
-                    <span class="tag tag-version"><%= version %></span>
-                <% }) %>
-                <% _.each(tags, function(tag){ %> 
-                    <span class="tag"><%= tag %></span>
-                <% }) %>
-                <%= message %>
-            </p>
-            <div class="meta">
-                <span class="last-seen pretty-date" title="<%= lastSeen %>"><%= app.prettyDate(lastSeen) %></span>
-                <% if (timeSpent) { %>
-                    <span class="time-spent"><%= app.utils.round(timeSpent) %>ms</span>
-                <% } %>
-                <span class="tag tag-project"><%= project.name %></span>
-            </div>
-            <span class="sparkline"></span>
-            <ul class="actions">
-                <% if (canResolve) { %>
-                    <li>
-                        <% if (!isResolved) { %>
-                            <a href="#" data-action="resolve" title="Mark as Resolved">&#10003;</a>
-                        <% } else { %>
-                            <a href="#" class="checked" title="Already Resolved">&#10003;</a>
-                        <% } %>
-                    </li>
-                    <li>
-                        <a href="#" data-action="bookmark" class="bookmark<% if (isBookmarked) { %> checked<% } %>" title="Bookmark">&#9733;</a>
-                    </li>
-                <% } %>
-            </ul>
-        </div>
-    </script>'
\ No newline at end of file
diff --git a/src/sentry/static/sentry/coffee/utils.coffee b/src/sentry/static/sentry/coffee/utils.coffee
deleted file mode 100644
index 2fb5cd589b..0000000000
--- a/src/sentry/static/sentry/coffee/utils.coffee
+++ /dev/null
@@ -1,60 +0,0 @@
-window.app = app = window.app || {}
-app.utils = app.utils || {}
-
-jQuery ->
-
-    app.utils.getQueryParams = ->
-        vars = {}
-        href = window.location.href;
-        if href.indexOf('?') == -1
-            return vars
-        
-        hashes = href.slice(href.indexOf('?') + 1, (if href.indexOf('#') != -1 then href.indexOf('#') else href.length)).split('&')
-        for chunk in hashes
-            hash = chunk.split('=')
-            if !hash[0] && !hash[1]
-                continue
-
-            vars[hash[0]] = if hash[1] then decodeURIComponent(hash[1]).replace(/\+/, ' ') else ''
-
-        return vars
-
-    app.utils.round = (float) ->
-        parseInt(float * 100, 10) / 100
-
-    # Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
-    # © 2011 Colin Snover <http://zetafleet.com>
-    # Released under MIT license.
-    Date ->
-        origParse = Date.parse
-        numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ]
-
-        Date.parse = (date) ->
-            struct = {}
-            minutesOffset = 0
-
-            # ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
-            # before falling back to any implementation-specific date parsing, so that's what we do, even if native
-            # implementations could be faster
-            #              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
-            if (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))
-                # avoid NaN timestamps caused by "undefined" values being passed to Date.UTC
-                for k in numericKeys
-                    struct[k] = +struct[k] || 0
-
-                # allow undefined days and months
-                struct[2] = (+struct[2] || 1) - 1;
-                struct[3] = +struct[3] || 1;
-
-                if struct[8] != 'Z' && struct[9]
-                    minutesOffset = struct[10] * 60 + struct[11]
-
-                    if struct[9] == '+'
-                        minutesOffset = 0 - minutesOffset
-
-                timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7])
-            
-            else
-                timestamp = if origParse then origParse(date) else NaN
-
-            return timestamp
diff --git a/src/sentry/static/sentry/coffee/views.coffee b/src/sentry/static/sentry/coffee/views.coffee
deleted file mode 100644
index ddcbde5a14..0000000000
--- a/src/sentry/static/sentry/coffee/views.coffee
+++ /dev/null
@@ -1,410 +0,0 @@
-window.app = app = window.app || {}
-
-jQuery ->
-
-    app.OrderedElementsView = class OrderedElementsView extends Backbone.View
-        emptyMessage: '<p>There is nothing to show here.</p>';
-        loadingMessage: '<p>Loading...</p>';
-
-        initialize: (data) ->
-            _.bindAll(@)
-
-            @$wrapper = $('#' + @id)
-            @$parent = $('<ul></ul>')
-            @$empty = $('<li class="empty"></li>')
-            loaded = if data.members then true else false
-            if loaded
-                @$empty.html(@emptyMessage)
-            else
-                @$empty.html(@loadingMessage)
-            @setEmpty()
-            @$wrapper.html(@$parent)
-
-            if data.className
-                @$parent.addClass(data.className)
-
-            # TODO: we can use bindAll to make this more sane
-            @config = 
-                maxItems: data.maxItems ? 50
-
-            @collection = new app.ScoredList
-            @collection.add(data.members || []);
-            @collection.on('add', @renderMemberInContainer)
-            @collection.on('remove', @unrenderMember)
-            # @collection.on('add remove', @changeMember)
-            @collection.on('reset', @reSortMembers)
-            @collection.sort()
-
-            # we set this last as it has side effects
-            @loaded = loaded
-
-        load: (data) ->
-            @$empty.html(@emptyMessage)
-            if data
-                @extend(data)
-            else
-                @setEmpty()
-            @loaded = true
-
-        setEmpty: ->
-            @$parent.html(@$empty)
-
-        extend: (data) ->
-            for item in data
-                @addMember(item)
-
-        addMember: (member) ->
-            if not @hasMember(member)
-                if @collection.models.length >= @config.maxItems - 1
-                    # bail early if the score is too low
-                    if member.get('score') < @collection.last().get('score')
-                        return
-
-                    # make sure we limit the number shown
-                    while @collection.models.length >= @config.maxItems
-                        @collection.pop()
-
-                @collection.add(member)
-            else
-                @updateMember(member)
-
-        reSortMembers: ->
-            @collection.each (member) =>
-                @renderMemberInContainer(member)
-
-        updateMember: (member, options) ->
-            options ||= {}
-
-            # TODO: is there a better way to pass both non-models and models here?
-            count = member.count ? member.get('count')
-            score = member.score ? member.get('score')
-
-            existing = @collection.get(member.id)
-            if existing.get('count') != count
-                existing.set('count', count)
-
-            if existing.get('score') != score
-                existing.set('score', score)
-
-            if options.sort ? true
-                # score changed, resort
-                @collection.sort()
-
-        hasMember: (member) ->
-            @collection.get(member.id)?
-
-        removeMember: (member) ->
-            @collection.remove(member)
-
-        renderMemberInContainer: (member) ->
-            new_pos = @collection.indexOf(member)
-
-            @$parent.find('li.empty').remove()
-
-            # create the element if it does not yet exist
-            $el = $('#' + @id + member.id)
-
-            if !$el.length
-                $el = @renderMember(member)
-
-            # if the row was already present, ensure it moved
-            else if $el.index() is new_pos
-                return
-
-            # top item
-            if new_pos is 0
-                @$parent.prepend($el)
-            else
-                # find existing item at new position
-                $rel = $('#' + @id + @collection.at(new_pos).id)
-                if !$rel.length
-                    @$parent.append($el)
-                # TODO: why do we get here?
-                else if $el.id != $rel.id
-                    $el.insertBefore($rel)
-                else
-                    return
-
-            if @loaded
-                $el.css('background-color', '#eee').animate({backgroundColor: '#fff'}, 1200)
-
-        renderMember: (member) ->
-            view = new GroupView
-                model: member
-                id: @id + member.id
-
-            out = view.render()
-            out.$el
-
-        unrenderMember: (member) ->
-            $('#' + @id + member.id).remove()
-            if !@$parent.find('li').length
-                @setEmpty()
-
-
-    app.GroupListView = class GroupListView extends app.OrderedElementsView
-
-        initialize: (data) ->
-            if !data?
-                data = {}
-            data.model = app.Group
-            OrderedElementsView.prototype.initialize.call(@, data)
-
-            @config =
-                realtime: data.realtime ? false
-                pollUrl: data.pollUrl ? null
-                pollTime: data.pollTime ? 1000
-                tickTime: data.tickTime ? 100
-
-            @queue = new app.ScoredList
-
-            @cursor = null
-
-            @poll()
-
-            window.setInterval(@tick, @config.tickTime)
-
-        tick: ->
-            if !@queue.length
-                return
-
-            item = @queue.pop()
-            if @config.realtime
-                @addMember(item)
-            else
-                if @hasMember(item)
-                    @updateMember(item, {
-                        sort: false
-                    })
-
-        poll: ->
-            if !@config.realtime
-                window.setTimeout(@poll, @config.pollTime)
-                return
-
-            data = app.utils.getQueryParams()
-            data.cursor = @cursor || undefined
-
-            $.ajax
-                url: @config.pollUrl
-                type: 'get'
-                dataType: 'json'
-                data: data
-                success: (groups) =>
-                    if !groups.length
-                        setTimeout(@poll, @config.pollTime * 5)
-                        return
-
-                    @cursor = groups[groups.length - 1].score || undefined
-
-                    for data in groups
-                        obj = @queue.get(data.id)
-                        if obj
-                            # TODO: this code is shared in updateMember above
-                            obj.set('count', data.count)
-                            obj.set('score', data.score)
-                            @queue.sort()
-                        else
-                            @queue.add(data)
-
-                    window.setTimeout(@poll, @config.pollTime)
-
-                error: =>
-                    # if an error happened lets give the server a bit of time before we poll again
-                    window.setTimeout(@poll, @config.pollTime * 10)
-
-    app.GroupView = class GroupView extends Backbone.View
-        tagName: 'li'
-        className: 'group'
-        template: _.template(app.templates.group)
-
-        initialize: ->
-            _.bindAll(@)
-            @model.on('change:count', @updateCount)
-            @model.on('change:lastSeen', @updateLastSeen)
-            @model.on('change:isBookmarked', @render)
-            @model.on('change:isResolved', @render)
-            @model.on('change:historicalData', @renderSparkline)
-
-        render: ->
-            data = @model.toJSON()
-            @$el.html(@template(data))
-            @$el.attr('data-id', @model.id)
-            @$el.addClass(@getLevelClassName())
-            if @model.get('isResolved')
-                @$el.addClass('resolved')
-            if @model.get('historicalData')
-                @$el.addClass('with-sparkline')
-            @$el.find('a[data-action=resolve]').click (e) =>
-                e.preventDefault()
-                @resolve()
-            @$el.find('a[data-action=bookmark]').click (e) =>
-                e.preventDefault()
-                @bookmark()
-            @renderSparkline()
-            @
-
-        renderSparkline: (obj) ->
-            data = @model.get('historicalData')
-            if not data
-                return
-
-            app.createSparkline(@$el.find('.sparkline'), data)
-
-        getResolveUrl: ->
-            app.config.urlPrefix + '/api/' + app.config.projectId + '/resolve/'
-
-        resolve: () ->
-            $.ajax
-                url: @getResolveUrl()
-                type: 'post'
-                dataType: 'json'
-                data:
-                    gid: @model.get('id')
-                success: (response) =>
-                    @model.set('isResolved', true)
-
-        getBookmarkUrl: ->
-            app.config.urlPrefix + '/api/' + app.config.projectId + '/bookmark/'
-
-        bookmark: () ->
-            $.ajax
-                url: @getBookmarkUrl()
-                type: 'post'
-                dataType: 'json'
-                data:
-                    gid: @model.get('id')
-                success: (response) =>
-                    @model.set('isBookmarked', response.bookmarked)
-
-        getLevelClassName: () ->
-            'level-' + @model.get('levelName')
-
-        updateLastSeen: () ->
-            @$el.find('.last-seen').text(app.prettyDate(@model.get('lastSeen')))
-
-        updateCount: () ->
-            new_count = app.formatNumber(@model.get('count'))
-            counter = @$el.find('.count')
-            digit = counter.find('span')
-
-            if digit.is(':animated')
-                return false
-
-            if counter.data('count') == new_count
-                # We are already showing this number
-                return false
-
-            counter.data('count', new_count)
-
-            replacement = $('<span></span>', {
-                css: {
-                    top: '-2.1em',
-                    opacity: 0
-                },
-                text: new_count
-            })
-
-            # The .static class is added when the animation
-            # completes. This makes it run smoother.
-
-            digit
-                .before(replacement)
-                .animate({top:'2.5em', opacity:0}, 'fast', () ->
-                    digit.remove()
-                )
-
-            replacement
-                .delay(100)
-                .animate({top:0, opacity:1}, 'fast')
-
-    app.createSparkline = (el, bits) ->
-        $el = $(el)
-        # TODO: maxval could default to # of hours since first_seen / times_seen
-        maxval = 10
-        for bit in bits
-            if bit > maxval
-                maxval = bit
-
-        # TODO: we should only remove nodes that are no longer valid
-        existing = $el.find('> span')
-        for n in [0..(bits.length - 1)]
-            bit = bits[n]
-            pct = parseInt(bit / maxval * 100, 10) + '%'
-
-            child = existing[n]
-            if !child?
-                $('<span><span style="height:' + pct + '" title="' + bit + '">' + bit + '</span></span>').appendTo($el)
-            else
-                $(child).find('span').css('height', pct).text(bit)
-
-    app.floatFormat = (number, places) ->
-        multi = Math.pow(10, places)
-        return parseInt(number * multi, 10) / multi
-
-    app.formatNumber = (number) ->
-        number = parseInt(number, 10)
-        z = [
-            [1000000000, 'b'],
-            [1000000, 'm'],
-            [1000, 'k'],
-        ]
-        for b in z
-            x = b[0]
-            y = b[1]
-            o = Math.floor(number / x)
-            p = number % x
-            if o > 0
-                if ('' + o.length) > 2 or not p
-                    return '' + o + y
-                return '' + @floatFormat(number / x, 1) + y
-        return '' + number
-
-    app.prettyDate = (date_str) ->
-        # we need to zero out at CST
-        time = Date.parse(date_str)
-        now = new Date()
-        now_utc = Date.UTC(
-            now.getUTCFullYear(),
-            now.getUTCMonth(),
-            now.getUTCDate(),
-            now.getUTCHours(),
-            now.getUTCMinutes(),
-            now.getUTCSeconds()
-        )
-
-        seconds = (now_utc - time) / 1000
-        token = 'ago'
-        time_formats = [
-          [60, 'just now', 'just now'], # 60
-          [120, '1 minute ago', '1 minute from now'], # 60*2
-          [3600, 'minutes', 60], # 60*60, 60
-          [7200, '1 hour ago', '1 hour from now'], # 60*60*2
-          [86400, 'hours', 3600], # 60*60*24, 60*60
-          [172800, 'yesterday', 'tomorrow'], # 60*60*24*2
-          [604800, 'days', 86400], # 60*60*24*7, 60*60*24
-          [1209600, 'last week', 'next week'], # 60*60*24*7*4*2
-          [2419200, 'weeks', 604800], # 60*60*24*7*4, 60*60*24*7
-          [4838400, 'last month', 'next month'], # 60*60*24*7*4*2
-          [29030400, 'months', 2419200], # 60*60*24*7*4*12, 60*60*24*7*4
-          [58060800, 'last year', 'next year'], # 60*60*24*7*4*12*2
-          [2903040000, 'years', 29030400], # 60*60*24*7*4*12*100, 60*60*24*7*4*12
-          [5806080000, 'last century', 'next century'], # 60*60*24*7*4*12*100*2
-          [58060800000, 'centuries', 2903040000] # 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100
-        ]
-        list_choice = 1
-
-        if seconds < 0
-            seconds = Math.abs(seconds)
-            token = 'from now'
-            list_choice = 2
-
-        for format in time_formats
-            if seconds < format[0]
-                if (typeof format[2] == 'string')
-                    return format[list_choice]
-                else
-                    return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token
-
-        return time
-        
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
new file mode 100644
index 0000000000..f258130930
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -0,0 +1,202 @@
+(function(app, Backbone, jQuery, _){
+    "use strict";
+
+    var $ = jQuery;
+    var BasePage = Backbone.View.extend({
+
+        initialize: function(data){
+            _.bindAll(this);
+
+            if (data === undefined)
+                data = {};
+
+            this.config = {
+                realtime: data.realtime || false
+            };
+            this.views = {};
+            this.initializeAjaxTabs();
+        },
+
+        initializeAjaxTabs: function(){
+            $('a[data-toggle=ajtab]').click(_.bind(function(e){
+                var $tab = $(e.target),
+                    uri = $tab.attr('data-uri'),
+                    view_id = $tab.attr('href').substr(1),
+                    view = this.getView(view_id, uri),
+                    $cont, $parent;
+
+                e.preventDefault();
+
+                if (!uri)
+                    return view.load();
+
+                $cont = $('#' + view_id);
+                $parent = $cont.parent();
+                $parent.css('opacity', 0.6);
+
+                $.ajax({
+                    url: uri,
+                    dataType: 'json',
+                    success: function(data){
+                        view.load(data);
+                        $parent.css('opacity', 1);
+                        $tab.tab('show');
+                    },
+                    error: function(){
+                        $cont.html('<p>There was an error fetching data from the server.</p>');
+                    }
+                });
+            }, this));
+
+            // initialize active tabs
+            $('li.active a[data-toggle=ajtab]').click();
+        },
+
+        makeDefaultView: function(id, uri){
+            return new app.GroupListView({
+                className: 'group-list small',
+                id: id,
+                maxItems: 5,
+                pollUrl: uri,
+                realtime: this.config.realtime,
+                model: app.Group
+            });
+        },
+
+        getView: function(id, uri){
+            if (!this.views[id])
+                this.views[id] = this.makeDefaultView(id, uri);
+            return this.views[id];
+        }
+
+    });
+
+    app.StreamPage = BasePage.extend({
+
+        initialize: function(data){
+            BasePage.prototype.initialize.call(this, data);
+
+            this.group_list = new app.GroupListView({
+                className: 'group-list',
+                id: 'event_list',
+                members: data.groups,
+                maxItems: 50,
+                realtime: ($.cookie('pausestream') ? false : true),
+                pollUrl: app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/',
+                model: app.Group
+            });
+
+            this.control = $('a[data-action=pause]');
+            this.updateStreamOptions();
+
+            this.control.click(_.bind(function(e){
+                e.preventDefault();
+                this.group_list.config.realtime = this.control.hasClass('realtime-pause');
+                this.updateStreamOptions();
+            }, this));
+        },
+
+        updateStreamOptions: function(){
+            if (this.group_list.config.realtime){
+                $.removeCookie('pausestream');
+                this.control.removeClass('realtime-pause');
+                this.control.addClass('realtime-play');
+                this.control.html(this.control.attr('data-pause-label'));
+            } else {
+                $.cookie('pausestream', '1', {expires: 7});
+                this.control.addClass('realtime-pause');
+                this.control.removeClass('realtime-play');
+                this.control.html(this.control.attr('data-play-label'));
+            }
+        }
+
+    });
+
+    app.DashboardPage = BasePage.extend({
+
+        initialize: function(data){
+            BasePage.prototype.initialize.call(this, data);
+
+            // TODO: abstract this out into our newer components
+            Sentry.charts.render('#chart');
+        }
+
+    });
+
+
+    app.WallPage = BasePage.extend({
+
+        initialize: function(){
+            BasePage.prototype.initialize.call(this, {
+                realtime: true,
+                pollTime: 3000
+            });
+
+            this.sparkline = $('.chart');
+            this.sparkline.height(this.sparkline.parent().height());
+            this.stats = $('#stats');
+
+            this.refreshSparkline();
+            this.refreshStats();
+        },
+
+        refreshSparkline: function(){
+            $.ajax({
+                url: this.sparkline.attr('data-api-url'),
+                type: 'get',
+                dataType: 'json',
+                data: {
+                    days: 1,
+                    gid: this.sparkline.attr('data-group') || undefined
+                },
+                success: _.bind(function(data){
+                    $.plot(this.sparkline, [{
+                            data: data,
+                            color: '#52566c',
+                            shadowSize: 0,
+                            lines: {
+                                lineWidth: 2,
+                                show: true,
+                                fill: true,
+                                fillColor: '#232428'
+                            }
+                        }], {
+                            yaxis: {
+                                min: 0
+                            },
+                            grid: {
+                                show: false
+                            },
+                            hoverable: false,
+                            legend: {
+                                noColumns: 5
+                            },
+                            lines: {
+                                show: false
+                            }
+                        }
+                    );
+                }, this)
+            });
+        },
+
+        refreshStats: function(){
+            $.ajax({
+                url: this.stats.attr('data-uri'),
+                dataType: 'json',
+                success: _.bind(function(data){
+                    this.stats.find('[data-stat]').each(function(){
+                        var $this = $(this);
+                        $this.find('big').text(data[$this.attr('data-stat')]);
+                    });
+                    window.setTimeout(this.refreshStats, 1000);
+                }, this)
+            });
+        }
+
+    });
+
+    Backbone.sync = function(method, model, success, error){
+        success();
+    };
+}(app, Backbone, jQuery, _));
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/collections.js b/src/sentry/static/sentry/scripts/collections.js
new file mode 100644
index 0000000000..4d49344a81
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/collections.js
@@ -0,0 +1,10 @@
+(function(app, Backbone){
+    "use strict";
+
+    app.ScoredList = Backbone.Collection.extend({
+        model: app.Group,
+        comparator: function(member){
+            return -member.get('score');
+        }
+    });
+}(app, Backbone));
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/core.js b/src/sentry/static/sentry/scripts/core.js
new file mode 100644
index 0000000000..a3c6a98e43
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/core.js
@@ -0,0 +1,5 @@
+app = window.app = {
+    config: {},
+    templates: {},
+    utils: {}
+};
diff --git a/src/sentry/static/sentry/scripts/models.js b/src/sentry/static/sentry/scripts/models.js
new file mode 100644
index 0000000000..546edc0b8f
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/models.js
@@ -0,0 +1,14 @@
+(function(app, Backbone){
+    "use strict";
+
+    app.Group = Backbone.Model.extend({
+
+        defaults: {
+            tags: [],
+            versions: [],
+            isBookmarked: false,
+            historicalData: []
+        }
+    });
+
+}(app, Backbone));
diff --git a/src/sentry/static/sentry/scripts/templates.js b/src/sentry/static/sentry/scripts/templates.js
new file mode 100644
index 0000000000..e19a12084e
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/templates.js
@@ -0,0 +1,44 @@
+(function(app){
+    "use strict";
+
+    app.templates = {
+        group: '' + 
+            '<div class="count" data-count="<%= app.utils.formatNumber(count) %>"><span><%= app.utils.formatNumber(count) %></span></div>' + 
+            '<div class="details">' + 
+                '<h3><a href="<%= permalink %>"><%= title %></a></h3>' + 
+                '<p class="message">' + 
+                    '<span class="tag tag-logger"><%= logger %></span>' + 
+                    '<% _.each(versions, function(version){ %> ' + 
+                        '<span class="tag tag-version"><%= version %></span>' + 
+                    '<% }) %>' + 
+                    '<% _.each(tags, function(tag){ %> ' + 
+                        '<span class="tag"><%= tag %></span>' + 
+                    '<% }) %>' + 
+                    '<%= message %>' + 
+                '</p>' + 
+                '<div class="meta">' + 
+                    '<span class="last-seen pretty-date" title="<%= lastSeen %>"><%= app.utils.prettyDate(lastSeen) %></span>' + 
+                    '<% if (timeSpent) { %>' + 
+                        '<span class="time-spent"><%= app.utils.round(timeSpent) %>ms</span>' + 
+                    '<% } %>' + 
+                    '<span class="tag tag-project"><%= project.name %></span>' + 
+                '</div>' + 
+                '<span class="sparkline"></span>' + 
+                '<ul class="actions">' + 
+                    '<% if (canResolve) { %>' + 
+                        '<li>' + 
+                            '<% if (!isResolved) { %>' + 
+                                '<a href="#" data-action="resolve" title="Mark as Resolved">&#10003;</a>' + 
+                            '<% } else { %>' + 
+                                '<a href="#" class="checked" title="Already Resolved">&#10003;</a>' + 
+                            '<% } %>' + 
+                        '</li>' + 
+                        '<li>' + 
+                            '<a href="#" data-action="bookmark" class="bookmark<% if (isBookmarked) { %> checked<% } %>" title="Bookmark">&#9733;</a>' + 
+                        '</li>' + 
+                    '<% } %>' + 
+                '</ul>' + 
+            '</div>' + 
+        '</script>'
+    };
+}(app));
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/utils.js b/src/sentry/static/sentry/scripts/utils.js
new file mode 100644
index 0000000000..a427aa38f4
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/utils.js
@@ -0,0 +1,183 @@
+(function(app, jQuery){
+    "use strict";
+
+    var $ = jQuery;
+    var time_formats = [
+        [60, 'just now', 'just now'], // 60
+        [120, '1 minute ago', '1 minute from now'], // 60*2
+        [3600, 'minutes', 60], // 60*60, 60
+        [7200, '1 hour ago', '1 hour from now'], // 60*60*2
+        [86400, 'hours', 3600], // 60*60*24, 60*60
+        [172800, 'yesterday', 'tomorrow'], // 60*60*24*2
+        [604800, 'days', 86400], // 60*60*24*7, 60*60*24
+        [1209600, 'last week', 'next week'], // 60*60*24*7*4*2
+        [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7
+        [4838400, 'last month', 'next month'], // 60*60*24*7*4*2
+        [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4
+        [58060800, 'last year', 'next year'], // 60*60*24*7*4*12*2
+        [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12
+        [5806080000, 'last century', 'next century'], // 60*60*24*7*4*12*100*2
+        [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100
+    ];
+    var number_formats = [
+        [1000000000, 'b'],
+        [1000000, 'm'],
+        [1000, 'k']
+    ];
+
+    app.utils = {
+        getQueryParams: function() {
+
+            var vars = {},
+                href = window.location.href,
+                hashes, hash;
+
+            if (href.indexOf('?') == -1)
+                return vars;
+            
+            hashes = href.slice(href.indexOf('?') + 1, (href.indexOf('#') != -1 ? href.indexOf('#') : href.length)).split('&');
+            $.each(hashes, function(_, chunk){
+                hash = chunk.split('=');
+                if (!hash[0] && !hash[1])
+                    return;
+
+                vars[hash[0]] = (hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '');
+            });
+
+            return vars;
+        },
+
+        round: function(float){
+            return parseInt(float * 100, 10) / 100;
+        },
+
+        createSparkline: function(el, bits){
+            // TODO: maxval could default to # of hours since first_seen / times_seen
+            var $el = $(el),
+                existing = $el.find('> span'),
+                maxval = 10,
+                i, bit, pct, child;
+
+            for (i=0; i<bits.length; i++) {
+                if (bits[i] > maxval) {
+                    maxval = bits[i];
+                }
+            }
+
+            // TODO: we should only remove nodes that are no longer valid
+            for (i=0; i<bits.length; i++) {
+                bit = bits[i];
+                pct = parseInt(bit / maxval * 100, 10) + '%';
+                child = existing[i];
+                if (child === undefined) {
+                    $('<span><span style="height:' + pct + '" title="' + bit + '">' + bit + '</span></span>').appendTo($el);
+                } else {
+                    $(child).find('span').css('height', pct).text(bit);
+                }
+            }
+        },
+
+        floatFormat: function(number, places){
+            var multi = Math.pow(10, places);
+            return parseInt(number * multi, 10) / multi;
+        },
+
+        formatNumber: function(number){
+            var b, x, y, o, p;
+
+            number = parseInt(number, 10);
+            
+            for (var i=0; (b=number_formats[i]); i++){
+                x = b[0];
+                y = b[1];
+                o = Math.floor(number / x);
+                p = number % x;
+                if (o > 0) {
+                    if (('' + o.length) > 2 || !p)
+                        return '' + o + y;
+                    return '' + this.floatFormat(number / x, 1) + y;
+                }
+            }
+            return '' + number;
+        },
+
+        prettyDate: function(date_str){
+            // we need to zero out at CST
+            var time = Date.parse(date_str);
+            var now = new Date();
+            var now_utc = Date.UTC(
+                now.getUTCFullYear(),
+                now.getUTCMonth(),
+                now.getUTCDate(),
+                now.getUTCHours(),
+                now.getUTCMinutes(),
+                now.getUTCSeconds()
+            );
+            var token = 'ago';
+            var seconds = (now_utc - time) / 1000;
+            var list_choice = 1;
+
+            if (seconds < 0) {
+                seconds = Math.abs(seconds);
+                token = 'from now';
+                list_choice = 2;
+            }
+
+            for (var i=0, format; (format = time_formats[i]); i++){
+                if (seconds < format[0]) {
+                    if (typeof format[2] == 'string')
+                        return format[list_choice];
+                    else
+                        return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;
+                }
+            }
+            return time;
+        }
+
+    };
+
+}(app, jQuery));
+
+/**
+ * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
+ * © 2011 Colin Snover <http://zetafleet.com>
+ * Released under MIT license.
+ */
+(function (Date, undefined) {
+    "use strict";
+
+    var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];
+    Date.parse = function (date) {
+        var timestamp, struct, minutesOffset = 0;
+
+        // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
+        // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
+        // implementations could be faster
+        //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
+        if ((struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))) {
+            // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
+            for (var i = 0, k; (k = numericKeys[i]); ++i) {
+                struct[k] = +struct[k] || 0;
+            }
+
+            // allow undefined days and months
+            struct[2] = (+struct[2] || 1) - 1;
+            struct[3] = +struct[3] || 1;
+
+            if (struct[8] !== 'Z' && struct[9] !== undefined) {
+                minutesOffset = struct[10] * 60 + struct[11];
+
+                if (struct[9] === '+') {
+                    minutesOffset = 0 - minutesOffset;
+                }
+            }
+
+            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
+        }
+        else {
+            timestamp = origParse ? origParse(date) : NaN;
+        }
+
+        return timestamp;
+    };
+}(Date));
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/views.js b/src/sentry/static/sentry/scripts/views.js
new file mode 100644
index 0000000000..ad8ad8db67
--- /dev/null
+++ b/src/sentry/static/sentry/scripts/views.js
@@ -0,0 +1,383 @@
+(function(app, Backbone, jQuery, _){
+    "use strict";
+
+    var $ = jQuery;
+
+    app.GroupView = Backbone.View.extend({
+        tagName: 'li',
+        className: 'group',
+        template: _.template(app.templates.group),
+
+        initialize: function(){
+            _.bindAll(this);
+            this.model.on('change:count', this.updateCount);
+            this.model.on('change:lastSeen', this.updateLastSeen);
+            this.model.on('change:isBookmarked', this.render);
+            this.model.on('change:isResolved', this.render);
+            this.model.on('change:historicalData', this.renderSparkline);
+        },
+
+        render: function(){
+            var data = this.model.toJSON();
+            this.$el.html(this.template(data));
+            this.$el.attr('data-id', this.model.id);
+            this.$el.addClass(this.getLevelClassName());
+            if (this.model.get('isResolved'))
+                this.$el.addClass('resolved');
+            if (this.model.get('historicalData'))
+                this.$el.addClass('with-sparkline');
+            this.$el.find('a[data-action=resolve]').click(_.bind(function(e){
+                e.preventDefault();
+                this.resolve();
+            }, this));
+            this.$el.find('a[data-action=bookmark]').click(_.bind(function(e){
+                e.preventDefault();
+                this.bookmark();
+            }, this));
+            this.renderSparkline();
+        },
+
+        renderSparkline: function(obj){
+            var data = this.model.get('historicalData');
+            if (!data)
+                return;
+
+            app.utils.createSparkline(this.$el.find('.sparkline'), data);
+        },
+
+        getResolveUrl: function(){
+            return app.config.urlPrefix + '/api/' + app.config.projectId + '/resolve/';
+        },
+
+        resolve: function(){
+            $.ajax({
+                url: this.getResolveUrl(),
+                type: 'post',
+                dataType: 'json',
+                data: {
+                    gid: this.model.get('id')
+                },
+                success: _.bind(function(response) {
+                    this.model.set('isResolved', true);
+                }, this)
+            });
+        },
+
+        getBookmarkUrl: function(){
+            return app.config.urlPrefix + '/api/' + app.config.projectId + '/bookmark/';
+        },
+
+        bookmark: function(){
+            $.ajax({
+                url: this.getBookmarkUrl(),
+                type: 'post',
+                dataType: 'json',
+                data: {
+                    gid: this.model.get('id')
+                },
+                success: _.bind(function(response){
+                    this.model.set('isBookmarked', response.bookmarked);
+                }, this)
+            });
+        },
+
+        getLevelClassName: function(){
+            return 'level-' + this.model.get('levelName');
+        },
+
+        updateLastSeen: function(){
+            this.$el.find('.last-seen').text(app.utils.prettyDate(this.model.get('lastSeen')));
+        },
+
+        updateCount: function(){
+            var new_count = app.utils.formatNumber(this.model.get('count'));
+            var counter = this.$el.find('.count');
+            var digit = counter.find('span');
+
+            if (digit.is(':animated'))
+                return false;
+
+            if (counter.data('count') == new_count) {
+                // We are already showing this number
+                return false;
+            }
+
+            counter.data('count', new_count);
+
+            var replacement = $('<span></span>', {
+                css: {
+                    top: '-2.1em',
+                    opacity: 0
+                },
+                text: new_count
+            });
+
+            // The .static class is added when the animation
+            // completes. This makes it run smoother.
+
+            digit.before(replacement).animate({
+                top: '2.5em',
+                opacity: 0
+            }, 'fast', function(){
+                digit.remove();
+            });
+
+            replacement.delay(100).animate({
+                top: 0,
+                opacity: 1
+            }, 'fast');
+        }
+
+    });
+
+    app.OrderedElementsView = Backbone.View.extend({
+
+        emptyMessage: '<p>There is nothing to show here.</p>',
+        loadingMessage: '<p>Loading...</p>',
+
+        initialize: function(data){
+            _.bindAll(this);
+
+            this.$wrapper = $('#' + this.id);
+            this.$parent = $('<ul></ul>');
+            this.$empty = $('<li class="empty"></li>');
+
+            var loaded = (data.members !== undefined);
+            if (loaded)
+                this.$empty.html(this.$emptyMessage);
+            else
+                this.$empty.html(this.loadingMessage);
+            this.setEmpty();
+            this.$wrapper.html(this.$parent);
+
+            if (data.className)
+                this.$parent.addClass(data.className);
+
+            // TODO: we can use bindAll to make this more sane
+            this.config = {
+                maxItems: data.maxItems || 50
+            };
+
+            this.collection = new app.ScoredList();
+            this.collection.add(data.members || []);
+            this.collection.on('add', this.renderMemberInContainer);
+            this.collection.on('remove', this.unrenderMember);
+            this.collection.on('reset', this.reSortMembers);
+            this.collection.sort();
+
+            // we set this last as it has side effects
+            this.loaded = loaded;
+        },
+
+        load: function(data){
+            this.$empty.html(this.emptyMessage);
+            if (data)
+                this.extend(data);
+            else
+                this.setEmpty();
+            this.loaded = true;
+        },
+
+        setEmpty: function(){
+            this.$parent.html(this.$empty);
+        },
+
+        extend: function(data){
+            for (var i=0; i<data.length; i++) {
+                this.addMember(data[i]);
+            }
+        },
+
+        addMember: function(member){
+            if (!this.hasMember(member)) {
+                if (this.collection.models.length >= (this.config.maxItems - 1))
+                    // bail early if the score is too low
+                    if (member.get('score') < this.collection.last().get('score'))
+                        return;
+
+                    // make sure we limit the number shown
+                    while (this.collection.models.length >= this.config.maxItems)
+                        this.collection.pop();
+
+                this.collection.add(member);
+            } else {
+                this.updateMember(member);
+            }
+        },
+
+        reSortMembers: function(){
+            this.collection.each(_.bind(function(member){
+                this.renderMemberInContainer(member);
+            }, this));
+        },
+
+        updateMember: function(member, options){
+            var count, score, existing;
+
+            if (_.isUndefined(options))
+                options = {};
+
+            // TODO: is there a better way to pass both non-models and models here?
+            count = (member.count || member.get('count'));
+            score = (member.score || member.get('score'));
+
+            existing = this.collection.get(member.id);
+            if (existing.get('count') != count)
+                existing.set('count', count);
+
+            if (existing.get('score') != score)
+                existing.set('score', score);
+
+            if (options.sort || true) {
+                // score changed, resort
+                this.collection.sort();
+            }
+        },
+
+        hasMember: function(member){
+            return (this.collection.get(member.id) ? true : false);
+        },
+
+        removeMember: function(member){
+            this.collection.remove(member);
+        },
+
+        renderMemberInContainer: function(member){
+            var new_pos = this.collection.indexOf(member),
+                $el, $rel;
+
+            this.$parent.find('li.empty').remove();
+
+            $el = $('#' + this.id + member.id);
+
+            if (!$el.length) {
+                // create the element if it does not yet exist
+                $el = this.renderMember(member);
+            } else if ($el.index() === new_pos) {
+                // if the row was already present, ensure it moved
+                return;
+            }
+
+            // top item
+            if (new_pos === 0) {
+                this.$parent.prepend($el);
+            } else {
+                // find existing item at new position
+                $rel = $('#' + this.id + this.collection.at(new_pos).id);
+                if (!$rel.length) {
+                    this.$parent.append($el);
+                } else if ($el.id !== $rel.id) {
+                    // TODO: why do we get here?
+                    $el.insertBefore($rel);
+                } else {
+                    return;
+                }
+            }
+
+            if (this.loaded)
+                $el.css('background-color', '#eee').animate({backgroundColor: '#fff'}, 1200);
+        },
+
+        renderMember: function(member){
+            var view = new app.GroupView({
+                model: member,
+                id: this.id + member.id
+            });
+            view.render();
+            return view.$el;
+        },
+
+        unrenderMember: function(member){
+            $('#' + this.id + member.id).remove();
+            if (!this.$parent.find('li').length)
+                this.setEmpty();
+        }
+
+    });
+
+
+    app.GroupListView = app.OrderedElementsView.extend({
+
+        initialize: function(data){
+            if (_.isUndefined(data))
+                data = {};
+
+            data.model = app.Group;
+            
+            app.OrderedElementsView.prototype.initialize.call(this, data);
+
+            this.config = {
+                realtime: data.realtime || false,
+                pollUrl: data.pollUrl || null,
+                pollTime: data.pollTime || 1000,
+                tickTime: data.tickTime || 100
+            };
+
+            this.queue = new app.ScoredList();
+            this.cursor = null;
+
+            this.poll();
+
+            window.setInterval(this.tick, this.config.tickTime);
+        },
+
+        tick: function(){
+            if (!this.queue.length)
+                return;
+
+            var item = this.queue.pop();
+            if (this.config.realtime){
+                this.addMember(item);
+            } else if (this.hasMember(item)) {
+                this.updateMember(item, {
+                    sort: false
+                });
+            }
+        },
+
+        poll: function(){
+            var data;
+
+            if (!this.config.realtime)
+                return window.setTimeout(this.poll, this.config.pollTime);
+
+            data = app.utils.getQueryParams();
+            data.cursor = this.cursor || undefined;
+
+            $.ajax({
+                url: this.config.pollUrl,
+                type: 'get',
+                dataType: 'json',
+                data: data,
+                success: _.bind(function(groups){
+                    var i, data, obj;
+
+                    if (!groups.length)
+                        return setTimeout(this.poll, this.config.pollTime * 5);
+
+                    this.cursor = groups[groups.length - 1].score || undefined;
+
+                    for (i=0; (data = groups[i]); i+=1) {
+                        obj = this.queue.get(data.id);
+                        if (!_.isUndefined(obj)) {
+                            // TODO: this code is shared in updateMember above
+                            obj.set('count', data.count);
+                            obj.set('score', data.score);
+                            this.queue.sort();
+                        } else {
+                            this.queue.add(data);
+                        }
+                    }
+
+                    window.setTimeout(this.poll, this.config.pollTime);
+                }, this),
+                error: _.bind(function(){
+                    // if an error happened lets give the server a bit of time before we poll again
+                    window.setTimeout(this.poll, this.config.pollTime * 10);
+                }, this)
+            });
+        }
+
+    });
+
+}(app, Backbone, jQuery, _));
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 3e458a037d..dbc4e5cb6f 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -48,10 +48,16 @@
                 <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/lib/bootstrap.js" %}"></script>
             {% endcompress %}
             {% compress js %}
-                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/site.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/core.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/models.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/templates.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/utils.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/collections.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/views.js" %}"></script>
+                <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/app.js" %}"></script>
             {% endcompress %}
             {% comment %}
-                The sentry.* javascript will be replaced by the new app (coffee script) code.
+                The sentry.* javascript is deprecated.
             {% endcomment %}
             {% compress js %}
                 <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/sentry.core.js" %}"></script>
diff --git a/tests/js/index.html b/tests/js/index.html
index 7147da7608..a65d7003e4 100644
--- a/tests/js/index.html
+++ b/tests/js/index.html
@@ -22,10 +22,18 @@
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/lib/backbone.js"></script>
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/lib/select2/select2.js"></script>
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/lib/bootstrap.js"></script>
+
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/sentry.core.js"></script>
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/sentry.charts.js"></script>
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/sentry.stream.js"></script>
-  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/site.js"></script>
+
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/core.js"></script>
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/models.js"></script>
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/templates.js"></script>
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/utils.js"></script>
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/collections.js"></script>
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/views.js"></script>
+  <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/app.js"></script>
 
   <!-- include spec files here... -->
   <script type="text/javascript" src="spec/OrderedElementsViewSpec.js"></script>
diff --git a/tests/js/spec/floatFormat.js b/tests/js/spec/floatFormat.js
index fb0b475ade..e301d19dae 100644
--- a/tests/js/spec/floatFormat.js
+++ b/tests/js/spec/floatFormat.js
@@ -1,9 +1,9 @@
 describe("floatFormat", function() {
   it("does format two decimal places", function() {
-    expect(app.floatFormat(1.134, 2)).toBe(1.13);
+    expect(app.utils.floatFormat(1.134, 2)).toBe(1.13);
   });
 
   it("does format one decimal places", function() {
-    expect(app.floatFormat(1.134, 1)).toBe(1.1);
+    expect(app.utils.floatFormat(1.134, 1)).toBe(1.1);
   });
 });
\ No newline at end of file
diff --git a/tests/js/spec/formatNumber.js b/tests/js/spec/formatNumber.js
index abbfdd0a38..a15225d569 100644
--- a/tests/js/spec/formatNumber.js
+++ b/tests/js/spec/formatNumber.js
@@ -1,17 +1,17 @@
 describe("formatNumber", function() {
   it("handles billions", function() {
-    expect(app.formatNumber(1134134134)).toBe('1.1b');
+    expect(app.utils.formatNumber(1134134134)).toBe('1.1b');
   });
 
   it("handles millions", function() {
-    expect(app.formatNumber(1234134)).toBe('1.2m');
+    expect(app.utils.formatNumber(1234134)).toBe('1.2m');
   });
 
   it("handles thousands", function() {
-    expect(app.formatNumber(5334)).toBe('5.3k');
+    expect(app.utils.formatNumber(5334)).toBe('5.3k');
   });
 
   it("doesnt format small numbers", function() {
-    expect(app.formatNumber(15)).toBe('15');
+    expect(app.utils.formatNumber(15)).toBe('15');
   });
 });
