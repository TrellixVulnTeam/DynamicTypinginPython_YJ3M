commit fe132f1c62868cf59ca0548c4ee70b3977556e51
Author: Ben Vinegar <ben@benv.ca>
Date:   Sat Aug 29 19:55:05 2015 -0700

    Break up React components into multiple files, enable eslint rule

diff --git a/.eslintrc b/.eslintrc
index 109e9bd220..1b4cfc24e4 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -115,6 +115,7 @@
      */
     "react/display-name": 0,         // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md
     "react/jsx-quotes": [2, "double"], // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-quotes.md
+    "react/no-multi-comp": 2,        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
     "react/jsx-no-undef": 2,         // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md
     "react/jsx-no-duplicate-props": 2, // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md
     "react/jsx-uses-react": 2,       // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md
diff --git a/src/sentry/static/sentry/app/actions/alertActions.jsx b/src/sentry/static/sentry/app/actions/alertActions.jsx
index 1fde7b932f..b657dc439b 100644
--- a/src/sentry/static/sentry/app/actions/alertActions.jsx
+++ b/src/sentry/static/sentry/app/actions/alertActions.jsx
@@ -1,7 +1,5 @@
-
 import Reflux from "reflux";
 
 var AlertActions = Reflux.createActions(["addAlert", "closeAlert"]);
 
 export default AlertActions;
-
diff --git a/src/sentry/static/sentry/app/components/eventEntries.jsx b/src/sentry/static/sentry/app/components/eventEntries.jsx
deleted file mode 100644
index 292317eee6..0000000000
--- a/src/sentry/static/sentry/app/components/eventEntries.jsx
+++ /dev/null
@@ -1,279 +0,0 @@
-import React from "react";
-
-import ClippedBox from "./clippedBox";
-import ContextData from "./contextData";
-import {logException} from "../utils/logging";
-import EventDataSection from "./eventDataSection";
-import EventTags from "./eventTags";
-import PropTypes from "../proptypes";
-import utils from "../utils";
-
-var hasMultipartMessage = function(evt) {
-  var message = evt.message;
-  return (message.indexOf('\n') !== -1 || message.length > 100);
-};
-
-var EventMessage = React.createClass({
-  render() {
-    return (
-      <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="message"
-          title="Message">
-        <pre className="plain" dangerouslySetInnerHTML={{
-          __html: utils.nl2br(utils.urlize(utils.escape(this.props.event.message)))
-        }} />
-      </EventDataSection>
-    );
-  }
-});
-
-var EventErrorItem = React.createClass({
-  getInitialState(){
-    return {
-      isOpen: false,
-    };
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    if (this.state.isOpen != nextState.isOpen) {
-      return true;
-    }
-  },
-
-  toggle() {
-    this.setState({isOpen: !this.state.isOpen});
-  },
-
-  render() {
-    var error = this.props.error;
-    var isOpen = this.state.isOpen;
-    return (
-      <li>
-        {error.message}
-        <small> <a style={{marginLeft: 10}} onClick={this.toggle}>{isOpen ? 'Collapse' : 'Expand'}</a></small>
-        <pre style={{display: isOpen ? 'block' : 'none'}}>{JSON.stringify(error.data, null, 2)}</pre>
-      </li>
-    );
-  }
-});
-
-var EventErrors = React.createClass({
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired
-  },
-
-  getInitialState(){
-    return {
-      isOpen: false,
-    };
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    if (this.state.isOpen != nextState.isOpen) {
-      return true;
-    }
-    return this.props.event.id !== nextProps.event.id;
-  },
-
-  toggle() {
-    this.setState({isOpen: !this.state.isOpen});
-  },
-
-  render() {
-    var errors = this.props.event.errors;
-    var numErrors = errors.length;
-    var isOpen = this.state.isOpen;
-    return (
-      <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="errors"
-          className="errors">
-        <p>
-          <a className="pull-right" onClick={this.toggle}>{isOpen ? 'Hide' : 'Show'}</a>
-          There {numErrors != 1 ? ('were ' + numErrors + ' errors') : 'was 1 error'} encountered while processing this event.
-        </p>
-        <ul style={{display: isOpen ? 'block' : 'none'}}>
-          {errors.map((error, errorIdx) => {
-            return (
-              <EventErrorItem key={errorIdx} error={error} />
-            );
-          })}
-        </ul>
-      </EventDataSection>
-    );
-  }
-});
-
-var EventExtraData = React.createClass({
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.event.id !== nextProps.event.id;
-  },
-
-  render() {
-    var children = [];
-    var context = this.props.event.context;
-    for (var key in context) {
-      children.push(<dt key={'dt-' + key}>{key}</dt>);
-      children.push((
-        <dd key={'dd-' + key}>
-          <ContextData data={context[key]} />
-        </dd>
-      ));
-    }
-
-    return (
-      <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="extra"
-          title="Additional Data">
-        <dl className="vars">
-          {children}
-        </dl>
-      </EventDataSection>
-    );
-  }
-});
-
-var EventPackageData = React.createClass({
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.event.id !== nextProps.event.id;
-  },
-
-  render() {
-    var packages = this.props.event.packages;
-    var packageKeys = [];
-    for (let key in packages) {
-      packageKeys.push(key);
-    }
-    packageKeys.sort();
-
-    var children = [];
-    packageKeys.forEach((key) => {
-      children.push(<dt key={'dt-' + key}>{key}</dt>);
-      children.push(<dd key={'dd-' + key}><pre>{packages[key]}</pre></dd>);
-    });
-
-    return (
-      <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="packages"
-          title="Packages">
-        <ClippedBox>
-          <dl className="vars">
-            {children}
-          </dl>
-        </ClippedBox>
-      </EventDataSection>
-    );
-  }
-});
-
-var EventEntries = React.createClass({
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired,
-    // TODO(dcramer): ideally isShare would be replaced with simple permission
-    // checks
-    isShare: React.PropTypes.bool
-  },
-
-  getDefaultProps() {
-    return {
-      isShare: false
-    };
-  },
-
-  // TODO(dcramer): make this extensible
-  interfaces: {
-    exception: require("./interfaces/exception"),
-    request: require("./interfaces/request"),
-    stacktrace: require("./interfaces/stacktrace"),
-    template: require("./interfaces/template")
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.event.id !== nextProps.event.id;
-  },
-
-  render(){
-    var group = this.props.group;
-    var evt = this.props.event;
-    var isShare = this.props.isShare;
-
-    var entries = evt.entries.map((entry, entryIdx) => {
-      try {
-        var Component = this.interfaces[entry.type];
-        if (!Component) {
-          /*eslint no-console:0*/
-          console.error('Unregistered interface: ' + entry.type);
-          return null;
-        }
-        return (
-          <Component
-            key={"entry-" + entryIdx}
-            group={group}
-            event={evt}
-            type={entry.type}
-            data={entry.data}
-            isShare={isShare} />
-        );
-      } catch (ex) {
-        logException(ex);
-        return (
-          <EventDataSection
-              group={group}
-              event={evt}
-              type={entry.type}
-              title={entry.type}>
-            <p>There was an error rendering this data.</p>
-          </EventDataSection>
-        );
-      }
-    });
-
-    return (
-      <div>
-        {hasMultipartMessage(evt) &&
-          <EventMessage group={group} event={evt} />
-        }
-        {!utils.objectIsEmpty(evt.errors) &&
-          <EventErrors
-            group={group}
-            event={evt} />
-        }
-        <EventTags
-            group={group}
-            event={evt} />
-        {entries}
-        {!utils.objectIsEmpty(evt.context) &&
-          <EventExtraData
-              group={group}
-              event={evt} />
-        }
-        {!utils.objectIsEmpty(evt.packages) &&
-          <EventPackageData
-              group={group}
-              event={evt} />
-        }
-      </div>
-    );
-  }
-});
-
-export default EventEntries;
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
new file mode 100644
index 0000000000..2c3fa7879c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -0,0 +1,33 @@
+import React from "react";
+
+var EventErrorItem = React.createClass({
+  getInitialState(){
+    return {
+      isOpen: false,
+    };
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    if (this.state.isOpen != nextState.isOpen) {
+      return true;
+    }
+  },
+
+  toggle() {
+    this.setState({isOpen: !this.state.isOpen});
+  },
+
+  render() {
+    var error = this.props.error;
+    var isOpen = this.state.isOpen;
+    return (
+      <li>
+        {error.message}
+        <small> <a style={{marginLeft: 10}} onClick={this.toggle}>{isOpen ? 'Collapse' : 'Expand'}</a></small>
+        <pre style={{display: isOpen ? 'block' : 'none'}}>{JSON.stringify(error.data, null, 2)}</pre>
+      </li>
+    );
+  }
+});
+
+export default EventErrorItem;
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
new file mode 100644
index 0000000000..ea0c6f6624
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -0,0 +1,56 @@
+import React from "react";
+
+import EventDataSection from "./eventDataSection";
+import EventErrorItem from "./errorItem";
+import PropTypes from "../../proptypes";
+
+var EventErrors = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired
+  },
+
+  getInitialState(){
+    return {
+      isOpen: false,
+    };
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    if (this.state.isOpen != nextState.isOpen) {
+      return true;
+    }
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  toggle() {
+    this.setState({isOpen: !this.state.isOpen});
+  },
+
+  render() {
+    var errors = this.props.event.errors;
+    var numErrors = errors.length;
+    var isOpen = this.state.isOpen;
+    return (
+      <EventDataSection
+          group={this.props.group}
+          event={this.props.event}
+          type="errors"
+          className="errors">
+        <p>
+          <a className="pull-right" onClick={this.toggle}>{isOpen ? 'Hide' : 'Show'}</a>
+          There {numErrors != 1 ? ('were ' + numErrors + ' errors') : 'was 1 error'} encountered while processing this event.
+        </p>
+        <ul style={{display: isOpen ? 'block' : 'none'}}>
+          {errors.map((error, errorIdx) => {
+            return (
+              <EventErrorItem key={errorIdx} error={error} />
+            );
+          })}
+        </ul>
+      </EventDataSection>
+    );
+  }
+});
+
+export default EventErrors;
diff --git a/src/sentry/static/sentry/app/components/eventDataSection.jsx b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
similarity index 95%
rename from src/sentry/static/sentry/app/components/eventDataSection.jsx
rename to src/sentry/static/sentry/app/components/events/eventDataSection.jsx
index 841355731d..38b7216310 100644
--- a/src/sentry/static/sentry/app/components/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
@@ -1,5 +1,5 @@
 import React from "react";
-import PropTypes from "../proptypes";
+import PropTypes from "../../proptypes";
 
 var GroupEventDataSection = React.createClass({
   propTypes: {
@@ -38,4 +38,3 @@ var GroupEventDataSection = React.createClass({
 });
 
 export default GroupEventDataSection;
-
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
new file mode 100644
index 0000000000..11b1674c6c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -0,0 +1,110 @@
+import React from "react";
+
+import {logException} from "../../utils/logging";
+import EventDataSection from "./eventDataSection";
+import EventErrors from "./errors";
+import EventExtraData from "./extraData";
+import EventPackageData from "./packageData";
+import EventTags from "./eventTags";
+import EventMessage from "./message";
+import PropTypes from "../../proptypes";
+import utils from "../../utils";
+
+var hasMultipartMessage = function(evt) {
+  var message = evt.message;
+  return (message.indexOf('\n') !== -1 || message.length > 100);
+};
+
+var EventEntries = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    // TODO(dcramer): ideally isShare would be replaced with simple permission
+    // checks
+    isShare: React.PropTypes.bool
+  },
+
+  getDefaultProps() {
+    return {
+      isShare: false
+    };
+  },
+
+  // TODO(dcramer): make this extensible
+  interfaces: {
+    exception: require("./interfaces/exception"),
+    request: require("./interfaces/request"),
+    stacktrace: require("./interfaces/stacktrace"),
+    template: require("./interfaces/template")
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  render(){
+    var group = this.props.group;
+    var evt = this.props.event;
+    var isShare = this.props.isShare;
+
+    var entries = evt.entries.map((entry, entryIdx) => {
+      try {
+        var Component = this.interfaces[entry.type];
+        if (!Component) {
+          /*eslint no-console:0*/
+          console.error('Unregistered interface: ' + entry.type);
+          return null;
+        }
+        return (
+          <Component
+            key={"entry-" + entryIdx}
+            group={group}
+            event={evt}
+            type={entry.type}
+            data={entry.data}
+            isShare={isShare} />
+        );
+      } catch (ex) {
+        logException(ex);
+        return (
+          <EventDataSection
+              group={group}
+              event={evt}
+              type={entry.type}
+              title={entry.type}>
+            <p>There was an error rendering this data.</p>
+          </EventDataSection>
+        );
+      }
+    });
+
+    return (
+      <div>
+        {hasMultipartMessage(evt) &&
+          <EventMessage group={group} event={evt} />
+        }
+        {!utils.objectIsEmpty(evt.errors) &&
+          <EventErrors
+            group={group}
+            event={evt} />
+        }
+        <EventTags
+            group={group}
+            event={evt} />
+        {entries}
+        {!utils.objectIsEmpty(evt.context) &&
+          <EventExtraData
+              group={group}
+              event={evt} />
+        }
+        {!utils.objectIsEmpty(evt.packages) &&
+          <EventPackageData
+              group={group}
+              event={evt} />
+        }
+      </div>
+    );
+  }
+});
+
+export default EventEntries;
diff --git a/src/sentry/static/sentry/app/components/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
similarity index 92%
rename from src/sentry/static/sentry/app/components/eventRow.jsx
rename to src/sentry/static/sentry/app/components/events/eventRow.jsx
index 1000ebb1d1..a4112ee568 100644
--- a/src/sentry/static/sentry/app/components/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -1,8 +1,8 @@
 import React from "react";
 import Router from "react-router";
-import EventStore from "../stores/eventStore";
-import Gravatar from "./gravatar";
-import TimeSince from "./timeSince";
+import EventStore from "../../stores/eventStore";
+import Gravatar from "../gravatar";
+import TimeSince from "../timeSince";
 
 var EventRow = React.createClass({
   propTypes: {
@@ -71,4 +71,3 @@ var EventRow = React.createClass({
 });
 
 export default EventRow;
-
diff --git a/src/sentry/static/sentry/app/components/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/eventTags.jsx
rename to src/sentry/static/sentry/app/components/events/eventTags.jsx
index f7d8b6d6c5..c0a446b936 100644
--- a/src/sentry/static/sentry/app/components/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -1,5 +1,5 @@
 import React from "react";
-import PropTypes from "../proptypes";
+import PropTypes from "../../proptypes";
 import Router from "react-router";
 
 var EventTags = React.createClass({
@@ -52,5 +52,3 @@ var EventTags = React.createClass({
 });
 
 export default EventTags;
-
-
diff --git a/src/sentry/static/sentry/app/components/events/extraData.jsx b/src/sentry/static/sentry/app/components/events/extraData.jsx
new file mode 100644
index 0000000000..427de71fce
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/extraData.jsx
@@ -0,0 +1,42 @@
+import React from "react";
+import EventDataSection from "./eventDataSection";
+import ContextData from "../contextData";
+import PropTypes from "../../proptypes";
+
+var EventExtraData = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  render() {
+    var children = [];
+    var context = this.props.event.context;
+    for (var key in context) {
+      children.push(<dt key={'dt-' + key}>{key}</dt>);
+      children.push((
+        <dd key={'dd-' + key}>
+          <ContextData data={context[key]} />
+        </dd>
+      ));
+    }
+
+    return (
+      <EventDataSection
+          group={this.props.group}
+          event={this.props.event}
+          type="extra"
+          title="Additional Data">
+        <dl className="vars">
+          {children}
+        </dl>
+      </EventDataSection>
+    );
+  }
+});
+
+export default EventExtraData;
diff --git a/src/sentry/static/sentry/app/components/interfaces/definitionList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/definitionList.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/components/interfaces/definitionList.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/definitionList.jsx
diff --git a/src/sentry/static/sentry/app/components/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/interfaces/exception.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 26b0a3c94c..555127980b 100644
--- a/src/sentry/static/sentry/app/components/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -1,10 +1,10 @@
 import React from "react";
-import ConfigStore from "../../stores/configStore";
+import ConfigStore from "../../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../proptypes";
+import PropTypes from "../../../proptypes";
 import rawStacktraceContent from "./rawStacktraceContent";
 import StacktraceContent from "./stacktraceContent";
-import {defined} from "../../utils";
+import {defined} from "../../../utils";
 
 var ExceptionContent = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/interfaces/frame.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 7f4e22867f..1cdcbb0e6c 100644
--- a/src/sentry/static/sentry/app/components/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,8 +1,7 @@
 import React from "react";
 import classNames from "classnames";
-import {defined, objectIsEmpty} from "../../utils";
-import PropTypes from "../../proptypes";
-import ContextData from "../contextData";
+import {defined, objectIsEmpty} from "../../../utils";
+import ContextData from "../../contextData";
 
 var FrameVariables = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index d2d3c68bbe..847611e7f8 100644
--- a/src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -1,21 +1,4 @@
-import React from "react";
-import PropTypes from "../../proptypes";
-import {defined, trim} from "../../utils";
-
-function getFrame(frame, platform) {
-  switch (platform) {
-    case "javascript":
-      return getJavaScriptFrame(frame);
-    case "ruby":
-      return getRubyFrame(frame);
-    case "python":
-      return getPythonFrame(frame);
-    case "java":
-      return getJavaFrame(frame);
-    default:
-      return getPythonFrame(frame);
-  }
-}
+import {defined, trim} from "../../../utils";
 
 function getJavaScriptFrame(frame) {
   var result = '';
@@ -106,6 +89,21 @@ export function getJavaFrame(frame) {
   return result;
 }
 
+function getFrame(frame, platform) {
+  switch (platform) {
+    case "javascript":
+      return getJavaScriptFrame(frame);
+    case "ruby":
+      return getRubyFrame(frame);
+    case "python":
+      return getPythonFrame(frame);
+    case "java":
+      return getJavaFrame(frame);
+    default:
+      return getPythonFrame(frame);
+  }
+}
+
 export default function render (data, platform, exception) {
   var firstFrameOmitted, lastFrameOmitted;
   var children = [];
diff --git a/src/sentry/static/sentry/app/components/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/interfaces/request.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 8fd3f02553..bbc44e2a75 100644
--- a/src/sentry/static/sentry/app/components/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -1,7 +1,7 @@
 import React from "react";
-import ConfigStore from "../../stores/configStore";
+import ConfigStore from "../../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../proptypes";
+import PropTypes from "../../../proptypes";
 import RichHttpContent from "./richHttpContent";
 import {getCurlCommand} from "./utils";
 
diff --git a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
similarity index 95%
rename from src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index 917d3e4289..5b12a7f397 100644
--- a/src/sentry/static/sentry/app/components/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -1,10 +1,10 @@
 import React from "react";
 
-import ClippedBox from "../../components/clippedBox";
+import ClippedBox from "../../clippedBox";
 import DefinitionList from "./definitionList";
-import ContextData from "../contextData";
+import ContextData from "../../contextData";
 
-import {objectIsEmpty} from "../../utils";
+import {objectIsEmpty} from "../../../utils";
 import queryString from "query-string";
 
 var RichHttpContent = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 0c8aeb5a17..accb69fa0a 100644
--- a/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -1,7 +1,7 @@
 import React from "react";
-import ConfigStore from "../../stores/configStore";
+import ConfigStore from "../../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../proptypes";
+import PropTypes from "../../../proptypes";
 import rawStacktraceContent from "./rawStacktraceContent";
 import StacktraceContent from "./stacktraceContent";
 
diff --git a/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
similarity index 97%
rename from src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 57ebe2aeae..dbc2b90505 100644
--- a/src/sentry/static/sentry/app/components/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,7 +1,6 @@
 import React from "react";
 //import GroupEventDataSection from "../eventDataSection";
 import Frame from "./frame";
-import {defined} from "../../utils";
 
 var StacktraceContent = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/interfaces/template.jsx b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
similarity index 86%
rename from src/sentry/static/sentry/app/components/interfaces/template.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/template.jsx
index eb7cd413bd..4f2bad8635 100644
--- a/src/sentry/static/sentry/app/components/interfaces/template.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
@@ -1,8 +1,6 @@
 import React from "react";
 import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../proptypes";
-import {defined} from "../../utils";
-import ContextData from "../contextData";
+import PropTypes from "../../../proptypes";
 import Frame from "./frame";
 
 var TemplateInterface = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/interfaces/utils.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 297fbc91f5..391747d403 100644
--- a/src/sentry/static/sentry/app/components/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -1,4 +1,4 @@
-import {defined} from "../../utils";
+import {defined} from "../../../utils";
 
 export function escapeQuotes(v) {
   return v.replace(/"/g, '\\"');
diff --git a/src/sentry/static/sentry/app/components/events/message.jsx b/src/sentry/static/sentry/app/components/events/message.jsx
new file mode 100644
index 0000000000..d588a36b0c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/message.jsx
@@ -0,0 +1,21 @@
+import React from "react";
+import EventDataSection from "./eventDataSection";
+import utils from "../../utils";
+
+var Message = React.createClass({
+  render() {
+    return (
+      <EventDataSection
+          group={this.props.group}
+          event={this.props.event}
+          type="message"
+          title="Message">
+        <pre className="plain" dangerouslySetInnerHTML={{
+          __html: utils.nl2br(utils.urlize(utils.escape(this.props.event.message)))
+        }} />
+      </EventDataSection>
+    );
+  }
+});
+
+export default Message;
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
new file mode 100644
index 0000000000..bdfcdf21cc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -0,0 +1,47 @@
+import React from "react";
+import PropTypes from "../../proptypes";
+
+import EventDataSection from "./eventDataSection";
+import ClippedBox from "../clippedBox";
+
+var EventPackageData = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  render() {
+    var packages = this.props.event.packages;
+    var packageKeys = [];
+    for (let key in packages) {
+      packageKeys.push(key);
+    }
+    packageKeys.sort();
+
+    var children = [];
+    packageKeys.forEach((key) => {
+      children.push(<dt key={'dt-' + key}>{key}</dt>);
+      children.push(<dd key={'dd-' + key}><pre>{packages[key]}</pre></dd>);
+    });
+
+    return (
+      <EventDataSection
+          group={this.props.group}
+          event={this.props.event}
+          type="packages"
+          title="Packages">
+        <ClippedBox>
+          <dl className="vars">
+            {children}
+          </dl>
+        </ClippedBox>
+      </EventDataSection>
+    );
+  }
+});
+
+export default EventPackageData;
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index 0c74c89762..ab41bfbfe1 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -7,7 +7,7 @@ import GroupStore from "../stores/groupStore";
 import LoadingError from "../components/loadingError";
 import LoadingIndicator from "../components/loadingIndicator";
 import ProjectState from "../mixins/projectState";
-import StreamGroup from "../components/streamGroup";
+import StreamGroup from "../components/stream/group";
 import utils from "../utils";
 
 var GroupList = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/header.jsx b/src/sentry/static/sentry/app/components/header.jsx
deleted file mode 100644
index 904eb6fa06..0000000000
--- a/src/sentry/static/sentry/app/components/header.jsx
+++ /dev/null
@@ -1,122 +0,0 @@
-import React from "react";
-import AppState from "../mixins/appState";
-import ConfigStore from "../stores/configStore";
-import DropdownLink from "./dropdownLink";
-import Gravatar from "./gravatar";
-import MenuItem from "./menuItem";
-import OrganizationState from "../mixins/organizationState";
-import OrganizationStore from "../stores/organizationStore";
-import {Link} from "react-router";
-
-var UserNav = React.createClass({
-  shouldComponentUpdate(nextProps, nextState) {
-    return false;
-  },
-
-  render() {
-    var urlPrefix = ConfigStore.get('urlPrefix');
-    var user = ConfigStore.get('user');
-
-    if (!user) {
-      // TODO
-      return null;
-    }
-
-    var title = (
-      <Gravatar email={user.email} className="avatar" />
-    );
-
-    return (
-      <DropdownLink
-          topLevelClasses={this.props.className}
-          menuClasses="dropdown-menu-right"
-          title={title}>
-        <MenuItem href={urlPrefix + '/account/settings/'}>Account</MenuItem>
-        {user.isSuperuser &&
-          <MenuItem href={urlPrefix + '/manage/'}>Admin</MenuItem>
-        }
-        <MenuItem href={urlPrefix + '/auth/logout/'}>Sign out</MenuItem>
-      </DropdownLink>
-    );
-  }
-});
-
-var OrganizationSelector = React.createClass({
-  mixins: [
-    AppState,
-  ],
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return (nextProps.organization || {}).id !== (this.props.organization || {}).id;
-  },
-
-  render() {
-    var singleOrganization = ConfigStore.get('singleOrganization');
-    var activeOrg = this.props.organization;
-
-    if (singleOrganization || !activeOrg) {
-      return null;
-    }
-
-    var urlPrefix = ConfigStore.get('urlPrefix');
-    var features = ConfigStore.get('features');
-
-    return (
-      <DropdownLink
-          menuClasses="dropdown-menu-right"
-          topLevelClasses={(this.props.className || "") + " org-selector"}
-          title={activeOrg.name}>
-        {OrganizationStore.getAll().map((org) => {
-          return (
-            <MenuItem key={org.slug} to="organizationDetails" params={{orgId: org.slug}}
-                      isActive={activeOrg.id === org.id}>
-              {org.name}
-            </MenuItem>
-          );
-        })}
-        {features.has('organizations:create') &&
-          <MenuItem divider={true} />
-        }
-        {features.has('organizations:create') &&
-          <MenuItem href={urlPrefix + '/organizations/new/'}>New Organization</MenuItem>
-        }
-      </DropdownLink>
-    );
-  }
-});
-
-
-var Header = React.createClass({
-  mixins: [OrganizationState],
-
-  render() {
-    var user = ConfigStore.get('user');
-    var logo;
-
-    if (user) {
-      logo = <span className="icon-sentry-logo"/>;
-    } else {
-      logo = <span className="icon-sentry-logo-full"/>;
-    }
-
-    // NOTE: this.props.orgId not guaranteed to be specified
-    return (
-      <header>
-        <div className="container">
-          <UserNav className="pull-right" />
-          <ul className="global-nav pull-right">
-            <li><a href="https://docs.getsentry.com">Docs</a></li>
-          </ul>
-          {this.props.orgId ?
-            <Link to="organizationDetails" params={{orgId: this.props.orgId}} className="logo">{logo}</Link>
-            :
-            <a href="/" className="logo">{logo}</a>
-          }
-          <OrganizationSelector organization={this.getOrganization()} className="pull-right" />
-        </div>
-      </header>
-    );
-  }
-});
-
-export default Header;
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
new file mode 100644
index 0000000000..9eb52956b2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -0,0 +1,42 @@
+import React from "react";
+import ConfigStore from "../../stores/configStore";
+import OrganizationState from "../../mixins/organizationState";
+import {Link} from "react-router";
+
+import UserNav from "./userNav";
+import OrganizationSelector from "./organizationSelector";
+
+var Header = React.createClass({
+  mixins: [OrganizationState],
+
+  render() {
+    var user = ConfigStore.get('user');
+    var logo;
+
+    if (user) {
+      logo = <span className="icon-sentry-logo"/>;
+    } else {
+      logo = <span className="icon-sentry-logo-full"/>;
+    }
+
+    // NOTE: this.props.orgId not guaranteed to be specified
+    return (
+      <header>
+        <div className="container">
+          <UserNav className="pull-right" />
+          <ul className="global-nav pull-right">
+            <li><a href="https://docs.getsentry.com">Docs</a></li>
+          </ul>
+          {this.props.orgId ?
+            <Link to="organizationDetails" params={{orgId: this.props.orgId}} className="logo">{logo}</Link>
+            :
+            <a href="/" className="logo">{logo}</a>
+          }
+          <OrganizationSelector organization={this.getOrganization()} className="pull-right" />
+        </div>
+      </header>
+    );
+  }
+});
+
+export default Header;
diff --git a/src/sentry/static/sentry/app/components/header/organizationSelector.jsx b/src/sentry/static/sentry/app/components/header/organizationSelector.jsx
new file mode 100644
index 0000000000..5452cdfd95
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/header/organizationSelector.jsx
@@ -0,0 +1,53 @@
+import React from "react";
+
+import MenuItem from "../menuItem";
+import DropdownLink from "../dropdownLink";
+import AppState from "../../mixins/appState"
+import OrganizationStore from "../../stores/organizationStore";
+import ConfigStore from "../../stores/configStore";
+
+var OrganizationSelector = React.createClass({
+  mixins: [
+    AppState,
+  ],
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (nextProps.organization || {}).id !== (this.props.organization || {}).id;
+  },
+
+  render() {
+    var singleOrganization = ConfigStore.get('singleOrganization');
+    var activeOrg = this.props.organization;
+
+    if (singleOrganization || !activeOrg) {
+      return null;
+    }
+
+    var urlPrefix = ConfigStore.get('urlPrefix');
+    var features = ConfigStore.get('features');
+
+    return (
+      <DropdownLink
+          menuClasses="dropdown-menu-right"
+          topLevelClasses={(this.props.className || "") + " org-selector"}
+          title={activeOrg.name}>
+        {OrganizationStore.getAll().map((org) => {
+          return (
+            <MenuItem key={org.slug} to="organizationDetails" params={{orgId: org.slug}}
+                      isActive={activeOrg.id === org.id}>
+              {org.name}
+            </MenuItem>
+          );
+        })}
+        {features.has('organizations:create') &&
+          <MenuItem divider={true} />
+        }
+        {features.has('organizations:create') &&
+          <MenuItem href={urlPrefix + '/organizations/new/'}>New Organization</MenuItem>
+        }
+      </DropdownLink>
+    );
+  }
+});
+
+export default OrganizationSelector;
diff --git a/src/sentry/static/sentry/app/components/header/userNav.jsx b/src/sentry/static/sentry/app/components/header/userNav.jsx
new file mode 100644
index 0000000000..47444ebfed
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/header/userNav.jsx
@@ -0,0 +1,40 @@
+import React from "react";
+import ConfigStore from "../../stores/configStore";
+import DropdownLink from "../dropdownLink";
+import Gravatar from "../gravatar";
+import MenuItem from "../menuItem";
+
+var UserNav = React.createClass({
+  shouldComponentUpdate(nextProps, nextState) {
+    return false;
+  },
+
+  render() {
+    var urlPrefix = ConfigStore.get('urlPrefix');
+    var user = ConfigStore.get('user');
+
+    if (!user) {
+      // TODO
+      return null;
+    }
+
+    var title = (
+      <Gravatar email={user.email} className="avatar" />
+    );
+
+    return (
+      <DropdownLink
+          topLevelClasses={this.props.className}
+          menuClasses="dropdown-menu-right"
+          title={title}>
+        <MenuItem href={urlPrefix + '/account/settings/'}>Account</MenuItem>
+        {user.isSuperuser &&
+          <MenuItem href={urlPrefix + '/manage/'}>Admin</MenuItem>
+        }
+        <MenuItem href={urlPrefix + '/auth/logout/'}>Sign out</MenuItem>
+      </DropdownLink>
+    );
+  }
+});
+
+export default UserNav;
diff --git a/src/sentry/static/sentry/app/components/organizationHomeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
similarity index 68%
rename from src/sentry/static/sentry/app/components/organizationHomeContainer.jsx
rename to src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 06d7e513fa..4ec064e7b7 100644
--- a/src/sentry/static/sentry/app/components/organizationHomeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -1,8 +1,8 @@
 import React from "react";
-import OrganizationHomeSidebar from "./organizationHomeSidebar";
-import OrganizationState from "../mixins/organizationState";
+import OrganizationHomeSidebar from "./homeSidebar";
+import OrganizationState from "../../mixins/organizationState";
 
-var OrganizationHomeContainer = React.createClass({
+var HomeContainer = React.createClass({
   mixins: [OrganizationState],
 
   render() {
@@ -23,4 +23,4 @@ var OrganizationHomeContainer = React.createClass({
   }
 });
 
-export default OrganizationHomeContainer;
+export default HomeContainer;
diff --git a/src/sentry/static/sentry/app/components/organizationHomeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
similarity index 87%
rename from src/sentry/static/sentry/app/components/organizationHomeSidebar.jsx
rename to src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index a64a37b3e0..396533ca61 100644
--- a/src/sentry/static/sentry/app/components/organizationHomeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -1,10 +1,12 @@
 import React from "react";
-import ConfigStore from "../stores/configStore";
-import HookStore from "../stores/hookStore";
-import ListLink from "../components/listLink";
-import OrganizationState from "../mixins/organizationState";
 
-var OrganizationHomeSidebar = React.createClass({
+import ListLink from "../listLink";
+import OrganizationState from "../../mixins/organizationState";
+
+import ConfigStore from "../../stores/configStore";
+import HookStore from "../../stores/hookStore";
+
+var HomeSidebar = React.createClass({
   mixins: [OrganizationState],
 
   render() {
@@ -64,4 +66,4 @@ var OrganizationHomeSidebar = React.createClass({
   }
 });
 
-export default OrganizationHomeSidebar;
+export default HomeSidebar;
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
new file mode 100644
index 0000000000..6208af013d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -0,0 +1,58 @@
+import React from "react";
+import Router from "react-router";
+import ConfigStore from "../../stores/configStore";
+
+import ProjectSelector from "./projectSelector";
+
+var ProjectHeader = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  render() {
+    var routeParams = this.context.router.getCurrentParams();
+    var navSection = this.props.activeSection;
+    var urlPrefix = ConfigStore.get('urlPrefix');
+    var project = this.props.project;
+    var org = this.props.organization;
+
+    return (
+      <div>
+        <div className="sub-header">
+          <div className="container">
+            <div className="pull-right">
+              <ul className="nav nav-tabs">
+                <li className={navSection == 'dashboard' ? 'active': ''}>
+                  <Router.Link to="projectDashboard" params={routeParams}>
+                    Dashboard
+                  </Router.Link>
+                </li>
+                <li className={navSection == 'stream' ? 'active': ''}>
+                  <Router.Link to="stream" params={routeParams}>
+                    Stream
+                  </Router.Link>
+                </li>
+                <li className={navSection == 'releases' ? 'active': ''}>
+                  <Router.Link to="projectReleases" params={routeParams}>
+                    Releases
+                  </Router.Link>
+                </li>
+                <li className={navSection == 'settings' ? 'active': ''}>
+                  <a href={urlPrefix + '/' + routeParams.orgId + '/' + routeParams.projectId + '/settings/'}>
+                    Settings
+                  </a>
+                </li>
+              </ul>
+            </div>
+            <ProjectSelector
+                organization={org}
+                projectId={project.slug}
+                router={this.context.router} />
+           </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default ProjectHeader;
diff --git a/src/sentry/static/sentry/app/components/projectHeader.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
similarity index 68%
rename from src/sentry/static/sentry/app/components/projectHeader.jsx
rename to src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 6f27d04822..2976701e8e 100644
--- a/src/sentry/static/sentry/app/components/projectHeader.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -1,9 +1,8 @@
 import React from "react";
 import Router from "react-router";
 import jQuery from "jquery";
-import ConfigStore from "../stores/configStore";
-import DropdownLink from "../components/dropdownLink";
-import MenuItem from "../components/menuItem";
+import DropdownLink from "../dropdownLink";
+import MenuItem from "../menuItem";
 
 var ProjectSelector = React.createClass({
   childContextTypes: {
@@ -166,55 +165,4 @@ var ProjectSelector = React.createClass({
   }
 });
 
-var ProjectHeader = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  render() {
-    var routeParams = this.context.router.getCurrentParams();
-    var navSection = this.props.activeSection;
-    var urlPrefix = ConfigStore.get('urlPrefix');
-    var project = this.props.project;
-    var org = this.props.organization;
-
-    return (
-      <div>
-        <div className="sub-header">
-          <div className="container">
-            <div className="pull-right">
-              <ul className="nav nav-tabs">
-                <li className={navSection == 'dashboard' ? 'active': ''}>
-                  <Router.Link to="projectDashboard" params={routeParams}>
-                    Dashboard
-                  </Router.Link>
-                </li>
-                <li className={navSection == 'stream' ? 'active': ''}>
-                  <Router.Link to="stream" params={routeParams}>
-                    Stream
-                  </Router.Link>
-                </li>
-                <li className={navSection == 'releases' ? 'active': ''}>
-                  <Router.Link to="projectReleases" params={routeParams}>
-                    Releases
-                  </Router.Link>
-                </li>
-                <li className={navSection == 'settings' ? 'active': ''}>
-                  <a href={urlPrefix + '/' + routeParams.orgId + '/' + routeParams.projectId + '/settings/'}>
-                    Settings
-                  </a>
-                </li>
-              </ul>
-            </div>
-            <ProjectSelector
-                organization={org}
-                projectId={project.slug}
-                router={this.context.router} />
-           </div>
-        </div>
-      </div>
-    );
-  }
-});
-
-export default ProjectHeader;
+export default ProjectSelector;
diff --git a/src/sentry/static/sentry/app/components/streamGroup.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
similarity index 77%
rename from src/sentry/static/sentry/app/components/streamGroup.jsx
rename to src/sentry/static/sentry/app/components/stream/group.jsx
index 1f9f99a025..6f068b4d7a 100644
--- a/src/sentry/static/sentry/app/components/streamGroup.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -2,63 +2,17 @@ import jQuery from "jquery";
 import React from "react";
 import Reflux from "reflux";
 import Router from "react-router";
-import AssigneeSelector from "./assigneeSelector";
-import Count from "./count";
-import GroupChart from "./streamGroupChart";
-import GroupStore from "../stores/groupStore";
-import SelectedGroupStore from "../stores/selectedGroupStore";
-import TimeSince from "./timeSince";
-import {valueIsEqual} from "../utils";
-
-var GroupCheckBox = React.createClass({
-  mixins: [
-    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
-  ],
-
-  propTypes: {
-    id: React.PropTypes.string.isRequired
-  },
 
-  getInitialState() {
-    return {
-      isSelected: SelectedGroupStore.isSelected(this.props.id)
-    };
-  },
+import AssigneeSelector from "../assigneeSelector";
+import Count from "../count";
+import GroupChart from "./groupChart";
+import GroupCheckBox from "./groupCheckBox";
+import TimeSince from "../timeSince";
 
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.id != this.props.id) {
-      this.setState({
-        isSelected: SelectedGroupStore.isSelected(nextProps.id)
-      });
-    }
-  },
+import GroupStore from "../../stores/groupStore";
+import SelectedGroupStore from "../../stores/selectedGroupStore";
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return (nextState.isSelected !== this.state.isSelected);
-  },
-
-  onSelectedGroupChange() {
-    var isSelected = SelectedGroupStore.isSelected(this.props.id);
-    if (isSelected !== this.state.isSelected) {
-      this.setState({
-        isSelected: isSelected,
-      });
-    }
-  },
-
-  onSelect() {
-    var id = this.props.id;
-    SelectedGroupStore.toggleSelect(id);
-  },
-
-  render() {
-    return (
-      <input type="checkbox" className="chk-select" value={this.props.id}
-             checked={this.state.isSelected}
-             onChange={this.onSelect} />
-    );
-  }
-});
+import {valueIsEqual} from "../../utils";
 
 var StreamGroup = React.createClass({
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/components/streamGroupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
similarity index 91%
rename from src/sentry/static/sentry/app/components/streamGroupChart.jsx
rename to src/sentry/static/sentry/app/components/stream/groupChart.jsx
index c03cb363a1..4525847ce3 100644
--- a/src/sentry/static/sentry/app/components/streamGroupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -1,8 +1,8 @@
 import React from "react";
 import Reflux from "reflux";
-import BarChart from "./barChart";
-import GroupStore from "../stores/groupStore";
-import {valueIsEqual} from "../utils";
+import BarChart from "../barChart";
+import GroupStore from "../../stores/groupStore";
+import {valueIsEqual} from "../../utils";
 
 var GroupChart = React.createClass({
   mixins: [
@@ -68,4 +68,3 @@ var GroupChart = React.createClass({
 });
 
 export default GroupChart;
-
diff --git a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
new file mode 100644
index 0000000000..1313d90bdf
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
@@ -0,0 +1,56 @@
+import React from "react";
+import Reflux from "reflux";
+
+import SelectedGroupStore from "../../stores/selectedGroupStore";
+
+var GroupCheckBox = React.createClass({
+  mixins: [
+    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
+  ],
+
+  propTypes: {
+    id: React.PropTypes.string.isRequired
+  },
+
+  getInitialState() {
+    return {
+      isSelected: SelectedGroupStore.isSelected(this.props.id)
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.id != this.props.id) {
+      this.setState({
+        isSelected: SelectedGroupStore.isSelected(nextProps.id)
+      });
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (nextState.isSelected !== this.state.isSelected);
+  },
+
+  onSelectedGroupChange() {
+    var isSelected = SelectedGroupStore.isSelected(this.props.id);
+    if (isSelected !== this.state.isSelected) {
+      this.setState({
+        isSelected: isSelected,
+      });
+    }
+  },
+
+  onSelect() {
+    var id = this.props.id;
+    SelectedGroupStore.toggleSelect(id);
+  },
+
+  render() {
+    return (
+      <input type="checkbox" className="chk-select" value={this.props.id}
+             checked={this.state.isSelected}
+             onChange={this.onSelect} />
+    );
+  }
+});
+
+export default GroupCheckBox;
diff --git a/src/sentry/static/sentry/app/views/groupActivity.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.js
similarity index 55%
rename from src/sentry/static/sentry/app/views/groupActivity.jsx
rename to src/sentry/static/sentry/app/views/groupActivity/index.js
index b68b0a5fc8..a8b8c8371d 100644
--- a/src/sentry/static/sentry/app/views/groupActivity.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.js
@@ -1,13 +1,11 @@
 import React from "react";
-import api from "../api";
-import Gravatar from "../components/gravatar";
-import GroupState from "../mixins/groupState";
-import GroupStore from "../stores/groupStore";
-import IndicatorStore from "../stores/indicatorStore";
-import MemberListStore from "../stores/memberListStore";
-var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
-import TimeSince from "../components/timeSince";
-import utils from "../utils";
+import Gravatar from "../../components/gravatar";
+import GroupState from "../../mixins/groupState";
+import MemberListStore from "../../stores/memberListStore";
+import TimeSince from "../../components/timeSince";
+import utils from "../../utils";
+
+import NoteInput from "./noteInput";
 
 var formatActivity = function(item) {
   var data = item.data;
@@ -47,97 +45,6 @@ var formatActivity = function(item) {
   }
 };
 
-var NoteInput = React.createClass({
-  mixins: [PureRenderMixin],
-
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-      expanded: false,
-      value: ''
-    };
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    this.setState({
-      loading: true,
-      error: false
-    });
-
-    var loadingIndicator = IndicatorStore.add('Posting comment..');
-
-    api.request('/groups/' + this.props.group.id + '/notes/', {
-      method: 'POST',
-      data: {
-        text: this.state.value
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-      },
-      success: (data) => {
-        this.setState({
-          value: '',
-          expanded: false,
-          loading: false
-        });
-        GroupStore.addActivity(this.props.group.id, data);
-      },
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
-      }
-    });
-  },
-
-  onChange(e) {
-    this.setState({value: e.target.value});
-  },
-
-  expand() {
-    this.setState({expanded: true});
-  },
-
-  maybeCollapse() {
-    if (this.state.value === '') {
-      this.setState({expanded: false});
-    }
-  },
-
-  render() {
-    var classNames = 'activity-field';
-    if (this.state.expanded) {
-      classNames += ' expanded';
-    }
-    if (this.state.error) {
-      classNames += ' error';
-    }
-    if (this.state.loading) {
-      classNames += ' loading';
-    }
-
-    return (
-      <form className={classNames} onSubmit={this.onSubmit}>
-        <div className="activity-notes">
-          <textarea placeholder="Add details or updates to this event"
-                    onChange={this.onChange}
-                    onFocus={this.expand} onBlur={this.maybeCollapse}
-                    value={this.state.value} />
-          <div className="activity-actions">
-            <button className="btn btn-default" type="submit"
-                    disabled={this.state.loading}>Leave comment</button>
-          </div>
-        </div>
-      </form>
-    );
-  }
-});
-
-
 var GroupActivity = React.createClass({
   // TODO(dcramer): only re-render on group/activity change
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
new file mode 100644
index 0000000000..beef0da63a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
@@ -0,0 +1,97 @@
+import React from "react";
+import api from "../../api";
+import GroupStore from "../../stores/groupStore";
+import IndicatorStore from "../../stores/indicatorStore";
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+
+var NoteInput = React.createClass({
+  mixins: [PureRenderMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+      expanded: false,
+      value: ''
+    };
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    var loadingIndicator = IndicatorStore.add('Posting comment..');
+
+    api.request('/groups/' + this.props.group.id + '/notes/', {
+      method: 'POST',
+      data: {
+        text: this.state.value
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      },
+      success: (data) => {
+        this.setState({
+          value: '',
+          expanded: false,
+          loading: false
+        });
+        GroupStore.addActivity(this.props.group.id, data);
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  onChange(e) {
+    this.setState({value: e.target.value});
+  },
+
+  expand() {
+    this.setState({expanded: true});
+  },
+
+  maybeCollapse() {
+    if (this.state.value === '') {
+      this.setState({expanded: false});
+    }
+  },
+
+  render() {
+    var classNames = 'activity-field';
+    if (this.state.expanded) {
+      classNames += ' expanded';
+    }
+    if (this.state.error) {
+      classNames += ' error';
+    }
+    if (this.state.loading) {
+      classNames += ' loading';
+    }
+
+    return (
+      <form className={classNames} onSubmit={this.onSubmit}>
+        <div className="activity-notes">
+          <textarea placeholder="Add details or updates to this event"
+                    onChange={this.onChange}
+                    onFocus={this.expand} onBlur={this.maybeCollapse}
+                    value={this.state.value} />
+          <div className="activity-actions">
+            <button className="btn btn-default" type="submit"
+                    disabled={this.state.loading}>Leave comment</button>
+          </div>
+        </div>
+      </form>
+    );
+  }
+});
+
+export default NoteInput;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/event.jsx b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
index 9779e04ffa..888fc3ab78 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/event.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
@@ -1,13 +1,11 @@
 import React from "react";
-import Sticky from "react-sticky";
 import DateTime from "../../components/dateTime";
 import FileSize from "../../components/fileSize";
-import GroupEventEntries from "../../components/eventEntries";
+import GroupEventEntries from "../../components/events/eventEntries";
 import GroupState from "../../mixins/groupState";
 import Gravatar from "../../components/gravatar";
 import PropTypes from "../../proptypes";
 import TimeSince from "../../components/timeSince";
-import utils from "../../utils";
 import Version from "../../components/version";
 
 
diff --git a/src/sentry/static/sentry/app/views/groupOverview.jsx b/src/sentry/static/sentry/app/views/groupOverview.jsx
deleted file mode 100644
index 1aac96f95f..0000000000
--- a/src/sentry/static/sentry/app/views/groupOverview.jsx
+++ /dev/null
@@ -1,320 +0,0 @@
-import React from "react";
-import Router from "react-router";
-import api from "../api";
-import ApiMixin from "../mixins/apiMixin";
-import DateTime from "../components/dateTime";
-import GroupChart from "./groupDetails/chart";
-import GroupEventEntries from "../components/eventEntries";
-import GroupState from "../mixins/groupState";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import PropTypes from "../proptypes";
-import RouteMixin from "../mixins/routeMixin";
-import TimeSince from "../components/timeSince";
-import utils from "../utils";
-import Version from "../components/version";
-
-var SeenInfo = React.createClass({
-  propTypes: {
-    date: React.PropTypes.any.isRequired,
-    release: React.PropTypes.shape({
-      version: React.PropTypes.string.isRequired
-    })
-  },
-
-  render() {
-    var {date, release} = this.props;
-    return (
-      <dl>
-        <dt key={0}>When:</dt>
-        <dd key={1}><TimeSince date={date} /></dd>
-        <dt key={2}>Date:</dt>
-        <dd key={3}><DateTime date={date} /></dd>
-        {utils.defined(release) && [
-          <dt key={4}>Release:</dt>,
-          <dd key={5}><Version version={release.version} /></dd>
-        ]}
-      </dl>
-    );
-  }
-});
-
-var TagDistributionMeter = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    tag: React.PropTypes.string.isRequired,
-    name: React.PropTypes.string
-  },
-
-  mixins: [
-    ApiMixin
-  ],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      data: null
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    var url = '/groups/' + this.props.group.id + '/tags/' + encodeURIComponent(this.props.tag) + '/';
-
-    this.setState({
-      loading: true,
-      error: false
-    });
-
-    this.apiRequest(url, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          data: data,
-          error: false,
-          loading: false
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-      }
-    });
-  },
-
-  render() {
-    if (this.state.loading)
-      return (
-        <div className="distribution-graph">
-          <h6><span>{this.props.name}</span></h6>
-        </div>
-      );
-
-    if (this.state.error)
-      return (
-        <div className="distribution-graph">
-          <h6><span>{this.props.name}</span></h6>
-        </div>
-      );
-
-    var data = this.state.data;
-    var totalValues = data.totalValues;
-
-    if (!totalValues) {
-      return (
-        <div className="distribution-graph">
-          <h6><span>{this.props.name}</span></h6>
-          <p>No recent data.</p>
-        </div>
-      );
-    }
-
-    var totalVisible = 0;
-    data.topValues.forEach((value) => {
-      totalVisible += value.count;
-    });
-
-    var hasOther = (totalVisible < totalValues);
-    var otherPct = utils.percent(totalValues - totalVisible, totalValues);
-    var otherPctLabel = Math.floor(otherPct);
-
-    var currentParams = this.context.router.getCurrentParams();
-    var params = {
-      orgId: currentParams.orgId,
-      projectId: currentParams.projectId,
-      groupId: currentParams.groupId,
-      tagKey: this.props.tag
-    };
-
-    return (
-      <div className="distribution-graph">
-        <h6><span>{this.props.name}</span></h6>
-        <div className="segments">
-          {data.topValues.map((value) => {
-            var pct = utils.percent(value.count, totalValues);
-            var pctLabel = Math.floor(pct);
-
-            return (
-              <Router.Link
-                  className="segment" style={{width: pct + "%"}}
-                  to="groupTagValues"
-                  params={params}>
-                <span className="tag-description">
-                  <span className="tag-percentage">{pctLabel}%</span>
-                  <span className="tag-label">{value.name}</span>
-                </span>
-              </Router.Link>
-            );
-          })}
-          {hasOther &&
-            <Router.Link
-                className="segment" style={{width: otherPct + "%"}}
-                to="groupTagValues"
-                params={params}>
-              <span className="tag-description">
-                <span className="tag-percentage">{otherPctLabel}%</span>
-                <span className="tag-label">Other</span>
-              </span>
-            </Router.Link>
-          }
-        </div>
-      </div>
-    );
-  }
-});
-
-var GroupOverview = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  mixins: [
-    ApiMixin,
-    GroupState,
-    RouteMixin
-  ],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      event: null,
-      eventNavLinks: ''
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  routeDidChange(prevPath) {
-    this.fetchData();
-  },
-
-  fetchData() {
-    var url = '/groups/' + this.getGroup().id + '/events/latest/';
-
-    this.setState({
-      loading: true,
-      error: false
-    });
-
-    this.apiRequest(url, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          event: data,
-          error: false,
-          loading: false
-        });
-
-        api.bulkUpdate({
-          orgId: this.getOrganization().slug,
-          projectId: this.getProject().slug,
-          itemIds: [this.getGroup().id],
-          failSilently: true,
-          data: {hasSeen: true}
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false
-        });
-      }
-    });
-  },
-
-  render() {
-    var group = this.getGroup();
-    var evt = this.state.event;
-    var orgId = this.getOrganization().slug;
-    var projectId = this.getProject().slug;
-
-    var tagList = [];
-    for (var key in group.tags) {
-      tagList.push([group.tags[key].name, key]);
-    }
-    tagList.sort();
-
-    return (
-      <div>
-        <div className="row group-overview">
-          <div className="col-md-3 group-stats-column">
-            <div className="group-stats">
-              <GroupChart statsPeriod="24h" group={group}
-                          title="Last 24 Hours"
-                          firstSeen={group.firstSeen}
-                          lastSeen={group.lastSeen} />
-              <GroupChart statsPeriod="30d" group={group}
-                          title="Last 30 Days"
-                          className="bar-chart-small"
-                          firstSeen={group.firstSeen}
-                          lastSeen={group.lastSeen} />
-
-              <h6 className="first-seen"><span>First seen</span></h6>
-              <SeenInfo
-                  orgId={orgId}
-                  projectId={projectId}
-                  date={group.firstSeen}
-                  release={group.firstRelease} />
-
-              <h6 className="last-seen"><span>Last seen</span></h6>
-              <SeenInfo
-                  orgId={orgId}
-                  projectId={projectId}
-                  date={group.lastSeen}
-                  release={group.lastRelease} />
-
-              <h6><span>Tags</span></h6>
-              {tagList.map((data) => {
-                return (
-                  <TagDistributionMeter
-                    group={group}
-                    name={data[0]}
-                    tag={data[1]} />
-                );
-              })}
-            </div>
-          </div>
-          <div className="col-md-9">
-            {this.state.loading ?
-              <LoadingIndicator />
-            : (this.state.error ?
-              <LoadingError onRetry={this.fetchData} />
-            :
-              <div>
-                <div className="alert alert-block">
-
-                    <div className="pull-right">
-                    <Router.Link to="groupEventDetails"
-                    params={{
-                      projectId: projectId,
-                      orgId: orgId,
-                      groupId: group.id,
-                      eventId: evt.id
-                    }}>More Details</Router.Link>
-                    </div>
-                    This summary is based on the most recent event in this aggregate.
-                </div>
-                <GroupEventEntries
-                    group={group}
-                    event={evt} />
-              </div>
-            )}
-          </div>
-        </div>
-      </div>
-    );
-  }
-});
-
-export default GroupOverview;
diff --git a/src/sentry/static/sentry/app/views/groupOverview/index.js b/src/sentry/static/sentry/app/views/groupOverview/index.js
new file mode 100644
index 0000000000..d06e122386
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupOverview/index.js
@@ -0,0 +1,161 @@
+import React from "react";
+import Router from "react-router";
+import api from "../../api";
+
+import RouteMixin from "../../mixins/routeMixin";
+import GroupState from "../../mixins/groupState";
+import ApiMixin from "../../mixins/apiMixin";
+
+import GroupChart from "../groupDetails/chart";
+import GroupEventEntries from "../../components/events/eventEntries";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+import SeenInfo from "./seenInfo";
+import TagDistributionMeter from "./tagDistributionMeter";
+
+var GroupOverview = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [
+    ApiMixin,
+    GroupState,
+    RouteMixin
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      event: null,
+      eventNavLinks: ''
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  routeDidChange(prevPath) {
+    this.fetchData();
+  },
+
+  fetchData() {
+    var url = '/groups/' + this.getGroup().id + '/events/latest/';
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    this.apiRequest(url, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          event: data,
+          error: false,
+          loading: false
+        });
+
+        api.bulkUpdate({
+          orgId: this.getOrganization().slug,
+          projectId: this.getProject().slug,
+          itemIds: [this.getGroup().id],
+          failSilently: true,
+          data: {hasSeen: true}
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  render() {
+    var group = this.getGroup();
+    var evt = this.state.event;
+    var orgId = this.getOrganization().slug;
+    var projectId = this.getProject().slug;
+
+    var tagList = [];
+    for (var key in group.tags) {
+      tagList.push([group.tags[key].name, key]);
+    }
+    tagList.sort();
+
+    return (
+      <div>
+        <div className="row group-overview">
+          <div className="col-md-3 group-stats-column">
+            <div className="group-stats">
+              <GroupChart statsPeriod="24h" group={group}
+                          title="Last 24 Hours"
+                          firstSeen={group.firstSeen}
+                          lastSeen={group.lastSeen} />
+              <GroupChart statsPeriod="30d" group={group}
+                          title="Last 30 Days"
+                          className="bar-chart-small"
+                          firstSeen={group.firstSeen}
+                          lastSeen={group.lastSeen} />
+
+              <h6 className="first-seen"><span>First seen</span></h6>
+              <SeenInfo
+                  orgId={orgId}
+                  projectId={projectId}
+                  date={group.firstSeen}
+                  release={group.firstRelease} />
+
+              <h6 className="last-seen"><span>Last seen</span></h6>
+              <SeenInfo
+                  orgId={orgId}
+                  projectId={projectId}
+                  date={group.lastSeen}
+                  release={group.lastRelease} />
+
+              <h6><span>Tags</span></h6>
+              {tagList.map((data) => {
+                return (
+                  <TagDistributionMeter
+                    group={group}
+                    name={data[0]}
+                    tag={data[1]} />
+                );
+              })}
+            </div>
+          </div>
+          <div className="col-md-9">
+            {this.state.loading ?
+              <LoadingIndicator />
+            : (this.state.error ?
+              <LoadingError onRetry={this.fetchData} />
+            :
+              <div>
+                <div className="alert alert-block">
+
+                    <div className="pull-right">
+                    <Router.Link to="groupEventDetails"
+                    params={{
+                      projectId: projectId,
+                      orgId: orgId,
+                      groupId: group.id,
+                      eventId: evt.id
+                    }}>More Details</Router.Link>
+                    </div>
+                    This summary is based on the most recent event in this aggregate.
+                </div>
+                <GroupEventEntries
+                    group={group}
+                    event={evt} />
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default GroupOverview;
diff --git a/src/sentry/static/sentry/app/views/groupOverview/seenInfo.jsx b/src/sentry/static/sentry/app/views/groupOverview/seenInfo.jsx
new file mode 100644
index 0000000000..962a1d710d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupOverview/seenInfo.jsx
@@ -0,0 +1,32 @@
+import React from "react";
+import DateTime from "../../components/dateTime";
+import TimeSince from "../../components/timeSince";
+import Version from "../../components/version";
+import utils from "../../utils";
+
+var SeenInfo = React.createClass({
+  propTypes: {
+    date: React.PropTypes.any.isRequired,
+    release: React.PropTypes.shape({
+      version: React.PropTypes.string.isRequired
+    })
+  },
+
+  render() {
+    var {date, release} = this.props;
+    return (
+      <dl>
+        <dt key={0}>When:</dt>
+        <dd key={1}><TimeSince date={date} /></dd>
+        <dt key={2}>Date:</dt>
+        <dd key={3}><DateTime date={date} /></dd>
+        {utils.defined(release) && [
+          <dt key={4}>Release:</dt>,
+          <dd key={5}><Version version={release.version} /></dd>
+        ]}
+      </dl>
+    );
+  }
+});
+
+export default SeenInfo;
diff --git a/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx
new file mode 100644
index 0000000000..03f3b4e41e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx
@@ -0,0 +1,140 @@
+import React from "react";
+import Router from "react-router";
+import ApiMixin from "../../mixins/apiMixin";
+import PropTypes from "../../proptypes";
+import utils from "../../utils";
+
+var TagDistributionMeter = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    tag: React.PropTypes.string.isRequired,
+    name: React.PropTypes.string
+  },
+
+  mixins: [
+    ApiMixin
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      data: null
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    var url = '/groups/' + this.props.group.id + '/tags/' + encodeURIComponent(this.props.tag) + '/';
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    this.apiRequest(url, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          data: data,
+          error: false,
+          loading: false
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  render() {
+    if (this.state.loading)
+      return (
+        <div className="distribution-graph">
+          <h6><span>{this.props.name}</span></h6>
+        </div>
+      );
+
+    if (this.state.error)
+      return (
+        <div className="distribution-graph">
+          <h6><span>{this.props.name}</span></h6>
+        </div>
+      );
+
+    var data = this.state.data;
+    var totalValues = data.totalValues;
+
+    if (!totalValues) {
+      return (
+        <div className="distribution-graph">
+          <h6><span>{this.props.name}</span></h6>
+          <p>No recent data.</p>
+        </div>
+      );
+    }
+
+    var totalVisible = 0;
+    data.topValues.forEach((value) => {
+      totalVisible += value.count;
+    });
+
+    var hasOther = (totalVisible < totalValues);
+    var otherPct = utils.percent(totalValues - totalVisible, totalValues);
+    var otherPctLabel = Math.floor(otherPct);
+
+    var currentParams = this.context.router.getCurrentParams();
+    var params = {
+      orgId: currentParams.orgId,
+      projectId: currentParams.projectId,
+      groupId: currentParams.groupId,
+      tagKey: this.props.tag
+    };
+
+    return (
+      <div className="distribution-graph">
+        <h6><span>{this.props.name}</span></h6>
+        <div className="segments">
+          {data.topValues.map((value) => {
+            var pct = utils.percent(value.count, totalValues);
+            var pctLabel = Math.floor(pct);
+
+            return (
+              <Router.Link
+                  className="segment" style={{width: pct + "%"}}
+                  to="groupTagValues"
+                  params={params}>
+                <span className="tag-description">
+                  <span className="tag-percentage">{pctLabel}%</span>
+                  <span className="tag-label">{value.name}</span>
+                </span>
+              </Router.Link>
+            );
+          })}
+          {hasOther &&
+            <Router.Link
+                className="segment" style={{width: otherPct + "%"}}
+                to="groupTagValues"
+                params={params}>
+              <span className="tag-description">
+                <span className="tag-percentage">{otherPctLabel}%</span>
+                <span className="tag-label">Other</span>
+              </span>
+            </Router.Link>
+          }
+        </div>
+      </div>
+    );
+  }
+});
+
+export default TagDistributionMeter;
diff --git a/src/sentry/static/sentry/app/views/organizationMembers.jsx b/src/sentry/static/sentry/app/views/organizationMembers.jsx
index 937ea04a69..d523d23345 100644
--- a/src/sentry/static/sentry/app/views/organizationMembers.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMembers.jsx
@@ -3,7 +3,7 @@ import api from "../api";
 import Gravatar from "../components/gravatar";
 import LoadingError from "../components/loadingError";
 import LoadingIndicator from "../components/loadingIndicator";
-import OrganizationHomeContainer from "../components/organizationHomeContainer";
+import OrganizationHomeContainer from "../components/organizations/homeContainer";
 import OrganizationState from "../mixins/organizationState";
 import RouteMixin from "../mixins/routeMixin";
 
diff --git a/src/sentry/static/sentry/app/views/organizationStats.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/organizationStats.jsx
rename to src/sentry/static/sentry/app/views/organizationStats/index.jsx
index f3a638b560..87e9d90e5c 100644
--- a/src/sentry/static/sentry/app/views/organizationStats.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -1,79 +1,14 @@
 import $ from "jquery";
 import React from "react";
-import api from "../api";
-import ConfigStore from "../stores/configStore";
-import Count from "../components/count";
-import FlotChart from "../components/flotChart";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import OrganizationHomeContainer from "../components/organizationHomeContainer";
-import OrganizationState from "../mixins/organizationState";
-var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
-import RouteMixin from "../mixins/routeMixin";
+import api from "../../api";
+import FlotChart from "../../components/flotChart";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+import OrganizationHomeContainer from "../../components/organizations/homeContainer";
+import OrganizationState from "../../mixins/organizationState";
+import RouteMixin from "../../mixins/routeMixin";
 
-var getPercent = (item, total) => {
-  if (total === 0) {
-    return '';
-  }
-  if (item === 0) {
-    return '0%';
-  }
-  return parseInt(item / total * 100, 10) + '%';
-};
-
-var ProjectTable = React.createClass({
-  mixins: [PureRenderMixin],
-
-  render() {
-    var projectMap = this.props.projectMap;
-    var projectTotals = this.props.projectTotals;
-    var orgTotal = this.props.orgTotal;
-    var org = this.props.organization;
-    var urlPrefix = ConfigStore.get('urlPrefix') + '/' + org.slug;
-
-    if (!projectTotals) {
-      return <div/>;
-    }
-
-    return (
-      <table className="table simple-list project-list">
-        <thead>
-          <tr>
-            <th>Project</th>
-            <th className="align-right">Accepted</th>
-            <th className="align-right">Rejected</th>
-            <th className="align-right">Total</th>
-          </tr>
-        </thead>
-        <tbody>
-          {$.map(projectTotals, (item) => {
-            var project = projectMap[item.id];
-
-            return (
-              <tr key={item.id}>
-                <td>
-                  <a href={urlPrefix + '/' + project.slug + '/'}>{project.team.name} / {project.name}</a>
-                </td>
-                <td className="align-right">
-                  <Count value={item.accepted} /><br/>
-                  <small>{getPercent(item.accepted, orgTotal.accepted)}</small>
-                </td>
-                <td className="align-right">
-                  <Count value={item.rejected} /><br/>
-                  <small>{getPercent(item.rejected, orgTotal.rejected)}</small>
-                </td>
-                <td className="align-right">
-                  <Count value={item.received} /><br/>
-                  <small>{getPercent(item.received, orgTotal.received)}</small>
-                </td>
-              </tr>
-            );
-          })}
-        </tbody>
-      </table>
-    );
-  }
-});
+import ProjectTable from "./projectTable";
 
 var OrganizationStats = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
new file mode 100644
index 0000000000..b081bbe9e3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
@@ -0,0 +1,71 @@
+import $ from "jquery";
+import React from "react";
+import ConfigStore from "../../stores/configStore";
+import Count from "../../components/count";
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+
+var getPercent = (item, total) => {
+  if (total === 0) {
+    return '';
+  }
+  if (item === 0) {
+    return '0%';
+  }
+  return parseInt(item / total * 100, 10) + '%';
+};
+
+var ProjectTable = React.createClass({
+  mixins: [PureRenderMixin],
+
+  render() {
+    var projectMap = this.props.projectMap;
+    var projectTotals = this.props.projectTotals;
+    var orgTotal = this.props.orgTotal;
+    var org = this.props.organization;
+    var urlPrefix = ConfigStore.get('urlPrefix') + '/' + org.slug;
+
+    if (!projectTotals) {
+      return <div/>;
+    }
+
+    return (
+      <table className="table simple-list project-list">
+        <thead>
+          <tr>
+            <th>Project</th>
+            <th className="align-right">Accepted</th>
+            <th className="align-right">Rejected</th>
+            <th className="align-right">Total</th>
+          </tr>
+        </thead>
+        <tbody>
+          {$.map(projectTotals, (item) => {
+            var project = projectMap[item.id];
+
+            return (
+              <tr key={item.id}>
+                <td>
+                  <a href={urlPrefix + '/' + project.slug + '/'}>{project.team.name} / {project.name}</a>
+                </td>
+                <td className="align-right">
+                  <Count value={item.accepted} /><br/>
+                  <small>{getPercent(item.accepted, orgTotal.accepted)}</small>
+                </td>
+                <td className="align-right">
+                  <Count value={item.rejected} /><br/>
+                  <small>{getPercent(item.rejected, orgTotal.rejected)}</small>
+                </td>
+                <td className="align-right">
+                  <Count value={item.received} /><br/>
+                  <small>{getPercent(item.received, orgTotal.received)}</small>
+                </td>
+              </tr>
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  }
+});
+
+export default ProjectTable;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams.jsx b/src/sentry/static/sentry/app/views/organizationTeams.jsx
deleted file mode 100644
index 7e313558c6..0000000000
--- a/src/sentry/static/sentry/app/views/organizationTeams.jsx
+++ /dev/null
@@ -1,382 +0,0 @@
-import React from "react";
-import Reflux from "reflux";
-import Router from "react-router";
-import api from "../api";
-import BarChart from "../components/barChart";
-import ConfigStore from "../stores/configStore";
-import OrganizationHomeContainer from "../components/organizationHomeContainer";
-import OrganizationState from "../mixins/organizationState";
-import PropTypes from "../proptypes";
-import TeamStore from "../stores/teamStore";
-import {defined, sortArray} from "../utils";
-import classNames from "classnames";
-
-var ExpandedTeamList = React.createClass({
-  propTypes: {
-    organization: PropTypes.Organization.isRequired,
-    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired,
-    projectStats: React.PropTypes.object
-  },
-
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  leaveTeam(team) {
-    // TODO(dcramer): handle loading indicator
-    api.leaveTeam({
-      orgId: this.props.organization.slug,
-      teamId: team.slug
-    });
-  },
-
-  urlPrefix() {
-    var org = this.props.organization;
-    return ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
-  },
-
-  renderTeamNode(team, urlPrefix) {
-    return (
-      <div className="box" key={team.slug}>
-        <div className="box-header">
-          <div className="pull-right actions hidden-xs">
-            <a className="leave-team" onClick={this.leaveTeam.bind(this, team)}>
-              Leave Team
-            </a>
-            <a className="team-settings" href={urlPrefix + '/teams/' + team.slug + '/settings/'}>
-              Team Settings
-            </a>
-          </div>
-          <h3>{team.name}</h3>
-        </div>
-        <div className="box-content">
-          <table className="table project-list">
-            <tbody>{sortArray(team.projects, function(o) {
-              return o.name;
-            }).map(this.renderProject)}</tbody>
-          </table>
-        </div>
-      </div>
-    );
-  },
-
-  renderProject(project) {
-    var projectStats = this.props.projectStats;
-    var projectRouteParams = {
-      orgId: this.props.organization.slug,
-      projectId: project.slug
-    };
-    var chartData = null;
-    if (projectStats[project.id]) {
-      chartData = projectStats[project.id].map((point) => {
-        return {x: point[0], y: point[1]};
-      });
-    }
-
-    return (
-      <tr key={project.id}>
-        <td>
-          <Router.Link to="projectDetails" params={projectRouteParams}>
-            {project.name}
-          </Router.Link>
-        </td>
-        <td className="align-right project-chart">
-          {chartData && <BarChart points={chartData} className="sparkline" /> }
-        </td>
-      </tr>
-    );
-  },
-
-  renderEmpty() {
-    return (
-      <p>
-        {"You dont have any teams for this organization yet. Get started by "}
-        <a href={this.urlPrefix() + '/teams/new/'}>creating your first team</a>.
-      </p>
-    );
-  },
-
-  renderTeamNodes() {
-    var urlPrefix = this.urlPrefix();
-    return this.props.teamList.map((team) => {
-      return this.renderTeamNode(team, urlPrefix);
-    });
-  },
-
-  render() {
-    var hasTeams = this.props.teamList.length > 0;
-
-    return (
-      <div>
-        {hasTeams ? this.renderTeamNodes() : this.renderEmpty() }
-      </div>
-    );
-  }
-});
-
-var SlimTeamList = React.createClass({
-  propTypes: {
-    organization: PropTypes.Organization.isRequired,
-    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired,
-    openMembership: React.PropTypes.bool
-  },
-
-  joinTeam(team) {
-    // TODO(dcramer): handle 'requested' case and loading indicator
-    api.joinTeam({
-      orgId: this.props.organization.slug,
-      teamId: team.slug
-    });
-  },
-
-  leaveTeam(team) {
-    // TODO(dcramer): handle loading indicator
-    api.leaveTeam({
-      orgId: this.props.organization.slug,
-      teamId: team.slug
-    });
-  },
-
-  render() {
-    var org = this.props.organization;
-    var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
-
-    var teamNodes = this.props.teamList.map((team, teamIdx) => {
-      return (
-        <tr key={team.slug}>
-          <td>
-            <strong>{team.name}</strong>
-          </td>
-          <td className="actions align-right">
-            {team.isMember ?
-              <a className="leave-team btn btn-default btn-sm"
-                 onClick={this.leaveTeam.bind(this, team)}>Leave Team</a>
-            : (team.isPending ?
-              <a className="join-team btn btn-default btn-sm">Request Pending</a>
-            : (this.props.openMembership ?
-              <a className="join-team btn btn-default btn-sm"
-                 onClick={this.joinTeam.bind(this, team)}>Join Team</a>
-            :
-              <a className="join-team btn btn-default btn-sm"
-                 onClick={this.joinTeam.bind(this, team)}>Request Access</a>
-            ))}
-          </td>
-        </tr>
-      );
-    });
-
-    if (teamNodes.length !== 0) {
-      return (
-        <table className="table">
-          {teamNodes}
-        </table>
-      );
-    }
-    return (
-      <p>You dont have any teams for this organization yet. Get started by <a href={urlPrefix + '/teams/new/'}>creating your first team</a>.</p>
-    );
-  }
-});
-
-var OrganizationStatOverview = React.createClass({
-  mixins: [
-    OrganizationState
-  ],
-
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  getInitialState() {
-    return {
-      totalRejected: null,
-      epm: null
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  getOrganizationStatsEndpoint() {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    return '/organizations/' + params.orgId + '/stats/';
-  },
-
-  fetchData() {
-    var statsEndpoint = this.getOrganizationStatsEndpoint();
-    api.request(statsEndpoint, {
-      query: {
-        since: new Date().getTime() / 1000 - 3600 * 24,
-        stat: 'rejected'
-      },
-      success: (data) => {
-        var totalRejected = 0;
-        data.forEach((point) => {
-          totalRejected += point[1];
-        });
-        this.setState({totalRejected: totalRejected});
-      }
-    });
-    api.request(statsEndpoint, {
-      query: {
-        since: new Date().getTime() / 1000 - 3600 * 3,
-        resolution: '1h',
-        stat: 'received'
-      },
-      success: (data) => {
-        var received = [0, 0];
-        data.forEach((point) => {
-          if (point[1] > 0) {
-            received[0] += point[1];
-            received[1] += 1;
-          }
-        });
-        var epm = (received[1] ? parseInt((received[0] / received[1]) / 60, 10) : 0);
-        this.setState({epm: epm});
-      }
-    });
-  },
-
-  render() {
-    if (!defined(this.state.epm) || !defined(this.state.totalRejected))
-      return null;
-
-    var router = this.context.router;
-    var access = this.getAccess();
-
-    var rejectedClasses = ['count'];
-    if (this.state.totalRejected > 0)
-      rejectedClasses.push('rejected');
-
-    return (
-      <div className={this.props.className}>
-        <h6 className="nav-header">Events Per Minute</h6>
-        <p className="count">{this.state.epm}</p>
-        <h6 className="nav-header">Rejected in last 24h</h6>
-        <p className={classNames(rejectedClasses)}>{this.state.totalRejected}</p>
-        {access.has('org:read') &&
-          <Router.Link to="organizationStats" params={router.getCurrentParams()}
-                       className="stats-link">View all stats</Router.Link>
-        }
-      </div>
-    );
-  }
-});
-
-var OrganizationTeams = React.createClass({
-  mixins: [
-    OrganizationState,
-    Reflux.listenTo(TeamStore, "onTeamListChange")
-  ],
-
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  getInitialState() {
-    return {
-      activeNav: 'your-teams',
-      teamList: sortArray(TeamStore.getAll(), function(o) {
-        return o.name;
-      }),
-      projectStats: {},
-    };
-  },
-
-  componentWillMount() {
-    this.fetchStats();
-  },
-
-  // TODO(dcramer): handle updating project stats when items change
-  fetchStats() {
-    api.request(this.getOrganizationStatsEndpoint(), {
-      query: {
-        since: new Date().getTime() / 1000 - 3600 * 24,
-        stat: 'received',
-        group: 'project'
-      },
-      success: (data) => {
-        this.setState({
-          projectStats: data
-        });
-      }
-    });
-  },
-
-  getOrganizationStatsEndpoint() {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    return '/organizations/' + params.orgId + '/stats/';
-  },
-
-  onTeamListChange() {
-    var newTeamList = TeamStore.getAll();
-
-    this.setState({
-      teamList: sortArray(newTeamList, function(o) {
-        return o.name;
-      })
-    });
-
-    this.fetchStats();
-  },
-
-  toggleTeams(nav) {
-    this.setState({
-      activeNav: nav
-    });
-  },
-
-  render() {
-    var access = this.getAccess();
-    var features = this.getFeatures();
-    var org = this.getOrganization();
-    var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
-
-    var activeNav = this.state.activeNav;
-    var allTeams = this.state.teamList;
-    var activeTeams = this.state.teamList.filter((team) => team.isMember);
-
-    return (
-      <OrganizationHomeContainer>
-        <div className="row">
-          <div className="col-md-9">
-            <div className="team-list">
-              <div className="pull-right">
-                <a href={urlPrefix + '/projects/new/'} className="btn btn-primary btn-sm"
-                   style={{marginRight: 5}}>
-                  <span className="icon-plus" /> Project
-                </a>
-                <a href={urlPrefix + '/teams/new/'} className="btn btn-primary btn-sm">
-                  <span className="icon-plus" /> Team
-                </a>
-              </div>
-              <ul className="nav nav-tabs border-bottom">
-                <li className={activeNav === "your-teams" && "active"}>
-                  <a onClick={this.toggleTeams.bind(this, "your-teams")}>Your Teams</a>
-                </li>
-                <li className={activeNav === "all-teams" && "active"}>
-                  <a onClick={this.toggleTeams.bind(this, "all-teams")}>All Teams</a>
-                </li>
-              </ul>
-              {activeNav == 'your-teams' ?
-                <ExpandedTeamList
-                    organization={org} teamList={activeTeams}
-                    projectStats={this.state.projectStats} />
-              :
-                <SlimTeamList
-                  organization={org} teamList={allTeams}
-                  openMembership={features.has('open-membership') || access.has('org:write')} />
-              }
-            </div>
-          </div>
-          <OrganizationStatOverview className="col-md-3 stats-column" />
-        </div>
-      </OrganizationHomeContainer>
-    );
-  }
-});
-
-export default OrganizationTeams;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
new file mode 100644
index 0000000000..a46996fca4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -0,0 +1,112 @@
+import React from "react";
+import Router from "react-router";
+
+import api from "../../api";
+import BarChart from "../../components/barChart";
+import ConfigStore from "../../stores/configStore";
+import PropTypes from "../../proptypes";
+
+var ExpandedTeamList = React.createClass({
+  propTypes: {
+    organization: PropTypes.Organization.isRequired,
+    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired,
+    projectStats: React.PropTypes.object
+  },
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  leaveTeam(team) {
+    // TODO(dcramer): handle loading indicator
+    api.leaveTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug
+    });
+  },
+
+  urlPrefix() {
+    var org = this.props.organization;
+    return ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
+  },
+
+  renderTeamNode(team, urlPrefix) {
+    return (
+      <div className="box" key={team.slug}>
+        <div className="box-header">
+          <div className="pull-right actions hidden-xs">
+            <a className="leave-team" onClick={this.leaveTeam.bind(this, team)}>
+              Leave Team
+            </a>
+            <a className="team-settings" href={urlPrefix + '/teams/' + team.slug + '/settings/'}>
+              Team Settings
+            </a>
+          </div>
+          <h3>{team.name}</h3>
+        </div>
+        <div className="box-content">
+          <table className="table project-list">
+            <tbody>{sortArray(team.projects, function(o) {
+              return o.name;
+            }).map(this.renderProject)}</tbody>
+          </table>
+        </div>
+      </div>
+    );
+  },
+
+  renderProject(project) {
+    var projectStats = this.props.projectStats;
+    var projectRouteParams = {
+      orgId: this.props.organization.slug,
+      projectId: project.slug
+    };
+    var chartData = null;
+    if (projectStats[project.id]) {
+      chartData = projectStats[project.id].map((point) => {
+        return {x: point[0], y: point[1]};
+      });
+    }
+
+    return (
+      <tr key={project.id}>
+        <td>
+          <Router.Link to="projectDetails" params={projectRouteParams}>
+            {project.name}
+          </Router.Link>
+        </td>
+        <td className="align-right project-chart">
+          {chartData && <BarChart points={chartData} className="sparkline" /> }
+        </td>
+      </tr>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <p>
+        {"You dont have any teams for this organization yet. Get started by "}
+        <a href={this.urlPrefix() + '/teams/new/'}>creating your first team</a>.
+      </p>
+    );
+  },
+
+  renderTeamNodes() {
+    var urlPrefix = this.urlPrefix();
+    return this.props.teamList.map((team) => {
+      return this.renderTeamNode(team, urlPrefix);
+    });
+  },
+
+  render() {
+    var hasTeams = this.props.teamList.length > 0;
+
+    return (
+      <div>
+        {hasTeams ? this.renderTeamNodes() : this.renderEmpty() }
+      </div>
+    );
+  }
+});
+
+export default ExpandedTeamList;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/index.js b/src/sentry/static/sentry/app/views/organizationTeams/index.js
new file mode 100644
index 0000000000..3ec64cf8ee
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationTeams/index.js
@@ -0,0 +1,129 @@
+import React from "react";
+import Reflux from "reflux";
+
+import api from "../../api";
+import ConfigStore from "../../stores/configStore";
+import OrganizationHomeContainer from "../../components/organizations/homeContainer";
+import OrganizationState from "../../mixins/organizationState";
+import TeamStore from "../../stores/teamStore";
+import {sortArray} from "../../utils";
+
+import ExpandedTeamList from "./expandedTeamList";
+import SlimTeamList from "./slimTeamList";
+import OrganizationStatOverview from "./organizationStatOverview";
+
+var OrganizationTeams = React.createClass({
+  mixins: [
+    OrganizationState,
+    Reflux.listenTo(TeamStore, "onTeamListChange")
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getInitialState() {
+    return {
+      activeNav: 'your-teams',
+      teamList: sortArray(TeamStore.getAll(), function(o) {
+        return o.name;
+      }),
+      projectStats: {},
+    };
+  },
+
+  componentWillMount() {
+    this.fetchStats();
+  },
+
+  // TODO(dcramer): handle updating project stats when items change
+  fetchStats() {
+    api.request(this.getOrganizationStatsEndpoint(), {
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 24,
+        stat: 'received',
+        group: 'project'
+      },
+      success: (data) => {
+        this.setState({
+          projectStats: data
+        });
+      }
+    });
+  },
+
+  getOrganizationStatsEndpoint() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    return '/organizations/' + params.orgId + '/stats/';
+  },
+
+  onTeamListChange() {
+    var newTeamList = TeamStore.getAll();
+
+    this.setState({
+      teamList: sortArray(newTeamList, function(o) {
+        return o.name;
+      })
+    });
+
+    this.fetchStats();
+  },
+
+  toggleTeams(nav) {
+    this.setState({
+      activeNav: nav
+    });
+  },
+
+  render() {
+    var access = this.getAccess();
+    var features = this.getFeatures();
+    var org = this.getOrganization();
+    var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
+
+    var activeNav = this.state.activeNav;
+    var allTeams = this.state.teamList;
+    var activeTeams = this.state.teamList.filter((team) => team.isMember);
+
+    return (
+      <OrganizationHomeContainer>
+        <div className="row">
+          <div className="col-md-9">
+            <div className="team-list">
+              <div className="pull-right">
+                <a href={urlPrefix + '/projects/new/'} className="btn btn-primary btn-sm"
+                   style={{marginRight: 5}}>
+                  <span className="icon-plus" /> Project
+                </a>
+                <a href={urlPrefix + '/teams/new/'} className="btn btn-primary btn-sm">
+                  <span className="icon-plus" /> Team
+                </a>
+              </div>
+              <ul className="nav nav-tabs border-bottom">
+                <li className={activeNav === "your-teams" && "active"}>
+                  <a onClick={this.toggleTeams.bind(this, "your-teams")}>Your Teams</a>
+                </li>
+                <li className={activeNav === "all-teams" && "active"}>
+                  <a onClick={this.toggleTeams.bind(this, "all-teams")}>All Teams</a>
+                </li>
+              </ul>
+              {activeNav == 'your-teams' ?
+                <ExpandedTeamList
+                    organization={org} teamList={activeTeams}
+                    projectStats={this.state.projectStats} />
+              :
+                <SlimTeamList
+                  organization={org} teamList={allTeams}
+                  openMembership={features.has('open-membership') || access.has('org:write')} />
+              }
+            </div>
+          </div>
+          <OrganizationStatOverview className="col-md-3 stats-column" />
+        </div>
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default OrganizationTeams;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
new file mode 100644
index 0000000000..1dd591488f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
@@ -0,0 +1,97 @@
+import React from "react";
+import Router from "react-router";
+import classNames from "classnames";
+
+import api from "../../api";
+import OrganizationState from "../../mixins/organizationState";
+
+import {defined} from "../../utils";
+
+var OrganizationStatOverview = React.createClass({
+  mixins: [
+    OrganizationState
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getInitialState() {
+    return {
+      totalRejected: null,
+      epm: null
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  getOrganizationStatsEndpoint() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    return '/organizations/' + params.orgId + '/stats/';
+  },
+
+  fetchData() {
+    var statsEndpoint = this.getOrganizationStatsEndpoint();
+    api.request(statsEndpoint, {
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 24,
+        stat: 'rejected'
+      },
+      success: (data) => {
+        var totalRejected = 0;
+        data.forEach((point) => {
+          totalRejected += point[1];
+        });
+        this.setState({totalRejected: totalRejected});
+      }
+    });
+    api.request(statsEndpoint, {
+      query: {
+        since: new Date().getTime() / 1000 - 3600 * 3,
+        resolution: '1h',
+        stat: 'received'
+      },
+      success: (data) => {
+        var received = [0, 0];
+        data.forEach((point) => {
+          if (point[1] > 0) {
+            received[0] += point[1];
+            received[1] += 1;
+          }
+        });
+        var epm = (received[1] ? parseInt((received[0] / received[1]) / 60, 10) : 0);
+        this.setState({epm: epm});
+      }
+    });
+  },
+
+  render() {
+    if (!defined(this.state.epm) || !defined(this.state.totalRejected))
+      return null;
+
+    var router = this.context.router;
+    var access = this.getAccess();
+
+    var rejectedClasses = ['count'];
+    if (this.state.totalRejected > 0)
+      rejectedClasses.push('rejected');
+
+    return (
+      <div className={this.props.className}>
+        <h6 className="nav-header">Events Per Minute</h6>
+        <p className="count">{this.state.epm}</p>
+        <h6 className="nav-header">Rejected in last 24h</h6>
+        <p className={classNames(rejectedClasses)}>{this.state.totalRejected}</p>
+        {access.has('org:read') &&
+          <Router.Link to="organizationStats" params={router.getCurrentParams()}
+                       className="stats-link">View all stats</Router.Link>
+        }
+      </div>
+    );
+  }
+});
+
+export default OrganizationStatOverview;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/slimTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/slimTeamList.jsx
new file mode 100644
index 0000000000..232658a3fc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationTeams/slimTeamList.jsx
@@ -0,0 +1,71 @@
+import React from "react";
+
+import api from "../../api";
+import ConfigStore from "../../stores/configStore";
+import PropTypes from "../../proptypes";
+
+var SlimTeamList = React.createClass({
+  propTypes: {
+    organization: PropTypes.Organization.isRequired,
+    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired,
+    openMembership: React.PropTypes.bool
+  },
+
+  joinTeam(team) {
+    // TODO(dcramer): handle 'requested' case and loading indicator
+    api.joinTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug
+    });
+  },
+
+  leaveTeam(team) {
+    // TODO(dcramer): handle loading indicator
+    api.leaveTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug
+    });
+  },
+
+  render() {
+    var org = this.props.organization;
+    var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
+
+    var teamNodes = this.props.teamList.map((team, teamIdx) => {
+      return (
+        <tr key={team.slug}>
+          <td>
+            <strong>{team.name}</strong>
+          </td>
+          <td className="actions align-right">
+            {team.isMember ?
+              <a className="leave-team btn btn-default btn-sm"
+                 onClick={this.leaveTeam.bind(this, team)}>Leave Team</a>
+            : (team.isPending ?
+              <a className="join-team btn btn-default btn-sm">Request Pending</a>
+            : (this.props.openMembership ?
+              <a className="join-team btn btn-default btn-sm"
+                 onClick={this.joinTeam.bind(this, team)}>Join Team</a>
+            :
+              <a className="join-team btn btn-default btn-sm"
+                 onClick={this.joinTeam.bind(this, team)}>Request Access</a>
+            ))}
+          </td>
+        </tr>
+      );
+    });
+
+    if (teamNodes.length !== 0) {
+      return (
+        <table className="table">
+          {teamNodes}
+        </table>
+      );
+    }
+    return (
+      <p>You dont have any teams for this organization yet. Get started by <a href={urlPrefix + '/teams/new/'}>creating your first team</a>.</p>
+    );
+  }
+});
+
+export default SlimTeamList;
diff --git a/src/sentry/static/sentry/app/views/projectEvents.jsx b/src/sentry/static/sentry/app/views/projectEvents.jsx
index cd8b46b429..a1468d6108 100644
--- a/src/sentry/static/sentry/app/views/projectEvents.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents.jsx
@@ -3,7 +3,7 @@ import Reflux from "reflux";
 import $ from "jquery";
 import Cookies from "js-cookie";
 import api from "../api";
-import EventRow from "../components/eventRow";
+import EventRow from "../components/events/eventRow";
 import EventActions from "./projectEvents/actions";
 import EventStore from "../stores/eventStore";
 import LoadingError from "../components/loadingError";
diff --git a/src/sentry/static/sentry/app/views/projectReleases.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
similarity index 73%
rename from src/sentry/static/sentry/app/views/projectReleases.jsx
rename to src/sentry/static/sentry/app/views/projectReleases/index.jsx
index c0d4ed9003..a4db068a6f 100644
--- a/src/sentry/static/sentry/app/views/projectReleases.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -1,51 +1,13 @@
 import jQuery from "jquery";
 import React from "react";
-import api from "../api";
-import Count from "../components/count";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
-import RouteMixin from "../mixins/routeMixin";
-import TimeSince from "../components/timeSince";
-import Version from "../components/version";
-import SearchBar from "../views/stream/searchBar.jsx";
-
-var ReleaseList = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  render() {
-    return (
-      <ul className="release-list">
-          {this.props.releaseList.map((release) => {
-            return (
-              <li className="release" key={release.version}>
-                <div className="row">
-                  <div className="col-sm-8 col-xs-6">
-                    <h4><Version version={release.version} /></h4>
-                    <div className="release-meta">
-                      <span className="icon icon-clock"></span> <TimeSince date={release.dateCreated} />
-                    </div>
-                  </div>
-                  <div className="col-sm-2 col-xs-3 release-stats stream-count">
-                    <Count className="release-count" value={release.newGroups} />
-                  </div>
-                  <div className="col-sm-2 col-xs-3 release-stats">
-                    {release.lastEvent ?
-                      <TimeSince date={release.lastEvent} />
-                    :
-                      <span>&mdash;</span>
-                    }
-                  </div>
-                </div>
-              </li>
-            );
-          })}
-      </ul>
-    );
-  }
-});
+import api from "../../api";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+import Pagination from "../../components/pagination";
+import RouteMixin from "../../mixins/routeMixin";
+import SearchBar from "../../views/stream/searchBar.jsx";
+
+import ReleaseList from "./releaseList";
 
 var ProjectReleases = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
new file mode 100644
index 0000000000..6363552bb9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
@@ -0,0 +1,43 @@
+import React from "react";
+import Count from "../../components/count";
+import TimeSince from "../../components/timeSince";
+import Version from "../../components/version";
+
+var ReleaseList = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  render() {
+    return (
+      <ul className="release-list">
+          {this.props.releaseList.map((release) => {
+            return (
+              <li className="release" key={release.version}>
+                <div className="row">
+                  <div className="col-sm-8 col-xs-6">
+                    <h4><Version version={release.version} /></h4>
+                    <div className="release-meta">
+                      <span className="icon icon-clock"></span> <TimeSince date={release.dateCreated} />
+                    </div>
+                  </div>
+                  <div className="col-sm-2 col-xs-3 release-stats stream-count">
+                    <Count className="release-count" value={release.newGroups} />
+                  </div>
+                  <div className="col-sm-2 col-xs-3 release-stats">
+                    {release.lastEvent ?
+                      <TimeSince date={release.lastEvent} />
+                    :
+                      <span>&mdash;</span>
+                    }
+                  </div>
+                </div>
+              </li>
+            );
+          })}
+      </ul>
+    );
+  }
+});
+
+export default ReleaseList;
diff --git a/src/sentry/static/sentry/app/views/ruleEditor.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
similarity index 67%
rename from src/sentry/static/sentry/app/views/ruleEditor.jsx
rename to src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 01a5f8cd5c..b6a87b044a 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -1,101 +1,10 @@
 import React from "react";
 import $ from "jquery";
-import api from "../api";
-import IndicatorStore from '../stores/indicatorStore';
-import Selectize from "../components/selectize";
+import api from "../../api";
+import IndicatorStore from '../../stores/indicatorStore';
+import Selectize from "../../components/selectize";
 
-var RuleNode = React.createClass({
-  componentDidMount() {
-    $(this.refs.html.getDOMNode()).find('select').selectize();
-  },
-
-  render() {
-    var {id, node} = this.props;
-    return (
-      <tr>
-        <td className="rule-form">
-          <input type="hidden" name="id" value={id} />
-          <span ref="html" dangerouslySetInnerHTML={{__html: node.html}} />
-        </td>
-        <td className="align-right">
-          <a onClick={this.props.onDelete}>
-            <span className="icon-trash" />
-          </a>
-        </td>
-      </tr>
-    );
-  }
-});
-
-var RuleNodeList = React.createClass({
-  getInitialState() {
-    return {
-      items: this.props.initialItems || []
-    };
-  },
-
-  componentWillMount() {
-    this._nodesById = {};
-    this.props.nodes.forEach((node) => {
-      this._nodesById[node.id] = node;
-    });
-  },
-
-  onAddRow(sel, nodeId) {
-    if (!nodeId) return;
-
-    sel.setValue('', true);
-
-    this.state.items.push({
-      id: nodeId
-    });
-    this.setState({
-      items: this.state.items
-    });
-  },
-
-  onDeleteRow(idx, e) {
-    this.state.items.splice(idx, idx + 1);
-    this.setState({
-      items: this.state.items
-    });
-  },
-
-  getNode(id) {
-    return this._nodesById[id];
-  },
-
-  render() {
-    return (
-      <div className={this.props.className}>
-        <table className="actions-list table" style={{marginBottom: '10px'}}>
-          <col />
-          <col style={{ textAlign: 'right'}} />
-          <tbody>
-            {this.state.items.map((item, idx) => {
-              return (
-                <RuleNode key={idx}
-                  id={item.id}
-                  node={this.getNode(item.id)}
-                  onDelete={this.onDeleteRow.bind(this, idx)} />
-              );
-            })}
-          </tbody>
-        </table>
-        <fieldset>
-          <Selectize onChange={this.onAddRow}>
-            <option key="blank" />
-            {this.props.nodes.map((node) => {
-              return (
-                <option value={node.id} key={node.id}>{node.label}</option>
-              );
-            })}
-          </Selectize>
-        </fieldset>
-      </div>
-    );
-  }
-});
+import RuleNodeList from "./ruleNodeList";
 
 var RuleEditor = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
new file mode 100644
index 0000000000..9a175049d7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
@@ -0,0 +1,27 @@
+import React from "react";
+import $ from "jquery";
+
+var RuleNode = React.createClass({
+  componentDidMount() {
+    $(this.refs.html.getDOMNode()).find('select').selectize();
+  },
+
+  render() {
+    var {id, node} = this.props;
+    return (
+      <tr>
+        <td className="rule-form">
+          <input type="hidden" name="id" value={id} />
+          <span ref="html" dangerouslySetInnerHTML={{__html: node.html}} />
+        </td>
+        <td className="align-right">
+          <a onClick={this.props.onDelete}>
+            <span className="icon-trash" />
+          </a>
+        </td>
+      </tr>
+    );
+  }
+});
+
+export default RuleNode;
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
new file mode 100644
index 0000000000..69fc94e571
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
@@ -0,0 +1,76 @@
+import React from "react";
+import Selectize from "../../components/selectize";
+
+import RuleNode from "./ruleNode";
+
+var RuleNodeList = React.createClass({
+  getInitialState() {
+    return {
+      items: this.props.initialItems || []
+    };
+  },
+
+  componentWillMount() {
+    this._nodesById = {};
+    this.props.nodes.forEach((node) => {
+      this._nodesById[node.id] = node;
+    });
+  },
+
+  onAddRow(sel, nodeId) {
+    if (!nodeId) return;
+
+    sel.setValue('', true);
+
+    this.state.items.push({
+      id: nodeId
+    });
+    this.setState({
+      items: this.state.items
+    });
+  },
+
+  onDeleteRow(idx, e) {
+    this.state.items.splice(idx, idx + 1);
+    this.setState({
+      items: this.state.items
+    });
+  },
+
+  getNode(id) {
+    return this._nodesById[id];
+  },
+
+  render() {
+    return (
+      <div className={this.props.className}>
+        <table className="actions-list table" style={{marginBottom: '10px'}}>
+          <col />
+          <col style={{ textAlign: 'right'}} />
+          <tbody>
+            {this.state.items.map((item, idx) => {
+              return (
+                <RuleNode key={idx}
+                  id={item.id}
+                  node={this.getNode(item.id)}
+                  onDelete={this.onDeleteRow.bind(this, idx)} />
+              );
+            })}
+          </tbody>
+        </table>
+        <fieldset>
+          <Selectize onChange={this.onAddRow}>
+            <option key="blank" />
+            {this.props.nodes.map((node) => {
+              return (
+                <option value={node.id} key={node.id}>{node.label}</option>
+              );
+            })}
+          </Selectize>
+        </fieldset>
+      </div>
+    );
+  }
+});
+
+export default RuleNodeList;
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
similarity index 57%
rename from src/sentry/static/sentry/app/views/sharedGroupDetails.jsx
rename to src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index 07907985cc..324b48648e 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -1,55 +1,16 @@
 import React from "react";
 import jQuery from "jquery";
-import api from "../api";
-import Count from "../components/count";
 import DocumentTitle from "react-document-title";
-import EventEntries from "../components/eventEntries";
-import Footer from "../components/footer";
-import Header from "../components/header";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import PropTypes from "../proptypes";
-
-var SharedGroupHeader = React.createClass({
-  render() {
-    var group = this.props.group,
-        userCount = 0;
 
-    if (group.tags["sentry:user"] !== undefined) {
-      userCount = group.tags["sentry:user"].count;
-    }
+import api from "../../api";
+import EventEntries from "../../components/events/eventEntries";
+import Footer from "../../components/footer";
+import Header from "../../components/header";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+import PropTypes from "../../proptypes";
 
-    return (
-      <div className="group-detail">
-        <div className="row">
-          <div className="col-sm-9 details">
-            <h3>
-              {group.title}
-            </h3>
-            <div className="event-message">
-              <span className="message">{group.culprit}</span>
-            </div>
-          </div>
-          <div className="col-sm-3 stats">
-            <div className="row">
-              <div className="col-xs-6 count align-right">
-                <h6 className="nav-header">events</h6>
-                <Count value={group.count} />
-              </div>
-              <div className="col-xs-6 count align-right">
-                <h6 className="nav-header">users</h6>
-                <Count value={userCount} />
-              </div>
-            </div>
-          </div>
-        </div>
-        <ul className="nav nav-tabs">
-          <li className="active"><a>Overview</a></li>
-        </ul>
-      </div>
-    );
-  }
-});
+import SharedGroupHeader from "./sharedGroupHeader";
 
 var SharedGroupDetails = React.createClass({
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
new file mode 100644
index 0000000000..3e44ced164
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
@@ -0,0 +1,46 @@
+import React from "react";
+
+import Count from "../../components/count";
+
+var SharedGroupHeader = React.createClass({
+  render() {
+    var group = this.props.group,
+        userCount = 0;
+
+    if (group.tags["sentry:user"] !== undefined) {
+      userCount = group.tags["sentry:user"].count;
+    }
+
+    return (
+      <div className="group-detail">
+        <div className="row">
+          <div className="col-sm-9 details">
+            <h3>
+              {group.title}
+            </h3>
+            <div className="event-message">
+              <span className="message">{group.culprit}</span>
+            </div>
+          </div>
+          <div className="col-sm-3 stats">
+            <div className="row">
+              <div className="col-xs-6 count align-right">
+                <h6 className="nav-header">events</h6>
+                <Count value={group.count} />
+              </div>
+              <div className="col-xs-6 count align-right">
+                <h6 className="nav-header">users</h6>
+                <Count value={userCount} />
+              </div>
+            </div>
+          </div>
+        </div>
+        <ul className="nav nav-tabs">
+          <li className="active"><a>Overview</a></li>
+        </ul>
+      </div>
+    );
+  }
+});
+
+export default SharedGroupHeader;
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index c3e30340bd..90cbe07b7d 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -8,7 +8,7 @@ import LoadingError from "../components/loadingError";
 import LoadingIndicator from "../components/loadingIndicator";
 import Pagination from "../components/pagination";
 import RouteMixin from "../mixins/routeMixin";
-import StreamGroup from '../components/streamGroup';
+import StreamGroup from '../components/stream/group';
 import StreamActions from './stream/actions';
 import StreamFilters from './stream/filters';
 import utils from "../utils";
diff --git a/tests/js/spec/components/interfaces/definitionList.spec.jsx b/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
similarity index 90%
rename from tests/js/spec/components/interfaces/definitionList.spec.jsx
rename to tests/js/spec/components/events/interfaces/definitionList.spec.jsx
index e2b5e15c82..223877252a 100644
--- a/tests/js/spec/components/interfaces/definitionList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
@@ -1,6 +1,6 @@
 import React from "react/addons";
 var TestUtils = React.addons.TestUtils;
-import DefinitionList from "app/components/interfaces/definitionList";
+import DefinitionList from "app/components/events/interfaces/definitionList";
 
 describe('DefinitionList', function () {
   describe("render", function () {
diff --git a/tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
similarity index 81%
rename from tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx
rename to tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
index 61b715cbef..3ecbe11e33 100644
--- a/tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
@@ -1,10 +1,4 @@
-var React = require("react/addons");
-var Cookies = require("js-cookie");
-
-var api = require("app/api");
-import {getJavaFrame} from "app/components/interfaces/rawStacktraceContent";
-
-var TestUtils = React.addons.TestUtils;
+import {getJavaFrame} from "app/components/events/interfaces/rawStacktraceContent";
 
 describe("RawStacktraceContent", function() {
   describe("getJavaFrame()", function() {
diff --git a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
similarity index 94%
rename from tests/js/spec/components/interfaces/richHttpContent.spec.jsx
rename to tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index 54dd6b062b..fe7a598f1e 100644
--- a/tests/js/spec/components/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -1,9 +1,9 @@
 import React from "react/addons";
 var TestUtils = React.addons.TestUtils;
-import stubReactComponents from "../../../helpers/stubReactComponent";
+import stubReactComponents from "../../../../helpers/stubReactComponent";
 
-import RichHttpContent from "app/components/interfaces/richHttpContent";
-import DefinitionList from "app/components/interfaces/definitionList";
+import RichHttpContent from "app/components/events/interfaces/richHttpContent";
+import DefinitionList from "app/components/events/interfaces/definitionList";
 import ClippedBox from "app/components/clippedBox";
 import ContextData from "app/components/contextData";
 
diff --git a/tests/js/spec/components/interfaces/utils.spec.jsx b/tests/js/spec/components/events/interfaces/utils.spec.jsx
similarity index 96%
rename from tests/js/spec/components/interfaces/utils.spec.jsx
rename to tests/js/spec/components/events/interfaces/utils.spec.jsx
index 5014cdaa75..97e4db481f 100644
--- a/tests/js/spec/components/interfaces/utils.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/utils.spec.jsx
@@ -1,4 +1,4 @@
-import {getCurlCommand} from "app/components/interfaces/utils";
+import {getCurlCommand} from "app/components/events/interfaces/utils";
 
 
 describe("components/interfaces/utils", function() {
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index 8ca2e8a416..cb67c300e9 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -1,16 +1,10 @@
 var React = require("react/addons");
-var Cookies = require("js-cookie");
 
 var api = require("app/api");
 var OrganizationTeams = require("app/views/organizationTeams");
-var stubReactComponents = require("../../helpers/stubReactComponent");
 var stubRouter = require("../../helpers/stubRouter");
 var stubContext = require("../../helpers/stubContext");
 
-var TestUtils = React.addons.TestUtils;
-var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
-var findWithType = TestUtils.findRenderedComponentWithType;
-
 describe("OrganizationTeams", function() {
 
   beforeEach(function() {
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 1c6a0ad7db..0aaabf208c 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -8,7 +8,7 @@ var CursorPoller = require("app/utils/cursorPoller");
 var LoadingError = require("app/components/loadingError");
 var LoadingIndicator = require("app/components/loadingIndicator");
 var Stream = require("app/views/stream");
-var StreamGroup = require("app/components/streamGroup");
+var StreamGroup = require("app/components/stream/group");
 var stubReactComponents = require("../../helpers/stubReactComponent");
 var stubContext = require("../../helpers/stubContext");
 var stubRouter = require("../../helpers/stubRouter");
diff --git a/tests/js/spec/views/stream/filterSelectLink.spec.jsx b/tests/js/spec/views/stream/filterSelectLink.spec.jsx
index 3c79014279..92f5ba47f7 100644
--- a/tests/js/spec/views/stream/filterSelectLink.spec.jsx
+++ b/tests/js/spec/views/stream/filterSelectLink.spec.jsx
@@ -1,11 +1,9 @@
 var React = require("react/addons");
 
 var FilterSelectLink = require("app/views/stream/filterSelectLink");
-var stubReactComponents = require("../../../helpers/stubReactComponent");
 
 var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
-var findWithType = TestUtils.findRenderedComponentWithType;
 
 describe("FilterSelectLink", function() {
 
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index a7095004f3..8912b9b53d 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -6,7 +6,6 @@ var stubReactComponents = require("../../../helpers/stubReactComponent");
 
 var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
-var findWithType = TestUtils.findRenderedComponentWithType;
 
 describe("SearchBar", function() {
 
