commit 14d03bd93316cfaf33009351ef4228e80ff310c0
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Feb 1 13:57:42 2019 -0800

    feat(discover): Allow superuser access (#11679)
    
    Enable superuser access to Discover to help make it a bit easier for
    superusers to debug issues.

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 942a691938..663cbe2043 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -18,6 +18,7 @@ from sentry.models import Project, ProjectStatus, OrganizationMember, Organizati
 from sentry.utils import snuba
 from sentry import roles
 from sentry import features
+from sentry.auth.superuser import is_active_superuser
 
 
 class OrganizationDiscoverQueryPermission(OrganizationPermission):
@@ -66,8 +67,6 @@ class DiscoverQuerySerializer(serializers.Serializer):
 
     def __init__(self, *args, **kwargs):
         super(DiscoverQuerySerializer, self).__init__(*args, **kwargs)
-        self.member = OrganizationMember.objects.get(
-            user=self.context['user'], organization=self.context['organization'])
 
         data = kwargs['data']
 
@@ -115,14 +114,10 @@ class DiscoverQuerySerializer(serializers.Serializer):
         return data
 
     def validate_projects(self, attrs, source):
-        organization = self.context['organization']
-        member = self.member
         projects = attrs[source]
-
         org_projects = set(project[0] for project in self.context['projects'])
 
-        if not set(projects).issubset(org_projects) or not self.has_projects_access(
-                member, organization, projects):
+        if not set(projects).issubset(org_projects):
             raise PermissionDenied
 
         return attrs
@@ -172,20 +167,6 @@ class DiscoverQuerySerializer(serializers.Serializer):
 
         return condition
 
-    def has_projects_access(self, member, organization, requested_projects):
-        has_global_access = roles.get(member.role).is_global
-        if has_global_access:
-            return True
-
-        member_project_list = Project.objects.filter(
-            organization=organization,
-            teams__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-            ).values('team'),
-        ).values_list('id', flat=True)
-
-        return set(requested_projects).issubset(set(member_project_list))
-
 
 class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationDiscoverQueryPermission, )
@@ -301,19 +282,42 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 projects,
             ), status=200)
 
+    def has_projects_access(self, user, organization, requested_projects):
+        member = OrganizationMember.objects.get(
+            user=user, organization=organization)
+
+        has_global_access = roles.get(member.role).is_global
+
+        if has_global_access:
+            return True
+
+        member_project_list = Project.objects.filter(
+            organization=organization,
+            teams__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+            ).values('team'),
+        ).values_list('id', flat=True)
+
+        return set(requested_projects).issubset(set(member_project_list))
+
     def post(self, request, organization):
 
         if not features.has('organizations:discover', organization, actor=request.user):
-            return self.respond(status=404)
+            return Response(status=404)
+
+        requested_projects = request.DATA['projects']
+
+        if not is_active_superuser(request) and not self.has_projects_access(
+            request.user, organization, requested_projects
+        ):
+            return Response("Invalid projects", status=400)
 
         projects = Project.objects.filter(
             organization=organization,
             status=ProjectStatus.VISIBLE,
         ).values_list('id', 'slug')
 
-        serializer = DiscoverQuerySerializer(
-            data=request.DATA, context={
-                'organization': organization, 'projects': projects, 'user': request.user})
+        serializer = DiscoverQuerySerializer(data=request.DATA, context={'projects': projects})
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index a6c9fbd153..85835b099c 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -14,7 +14,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
         self.now = datetime.now()
         one_second_ago = self.now - timedelta(seconds=1)
 
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=False)
 
         self.org = self.create_organization(owner=self.user, name='foo')
 
@@ -337,7 +337,6 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
 
     def test_invalid_project(self):
         with self.feature('organizations:discover'):
-
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
             response = self.client.post(url, {
                 'projects': [self.other_project.id],
@@ -349,3 +348,24 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             })
 
         assert response.status_code == 403, response.content
+
+    def test_superuser(self):
+        self.new_org = self.create_organization(name='foo_new')
+        self.new_project = self.create_project(
+            name='bar_new',
+            organization=self.new_org,
+        )
+        self.login_as(user=self.user, superuser=True)
+
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.new_org.slug])
+            response = self.client.post(url, {
+                'projects': [self.new_project.id],
+                'fields': ['message', 'platform'],
+                'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
+                'orderby': '-timestamp',
+                'range': None,
+            })
+
+        assert response.status_code == 200, response.content
