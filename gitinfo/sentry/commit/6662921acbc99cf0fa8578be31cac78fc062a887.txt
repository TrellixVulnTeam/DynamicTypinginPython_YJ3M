commit 6662921acbc99cf0fa8578be31cac78fc062a887
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed May 23 12:37:34 2018 -0700

    test: Add test for JIRA create issue

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 298af111e5..47c0a8cd4e 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -162,6 +162,8 @@ class Integration(object):
     core functionality of the integration.
     """
 
+    logger = logging.getLogger('sentry.integrations')
+
     def __init__(self, model):
         self.model = model
 
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 17aa39eb00..7e9ef08937 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -325,34 +325,35 @@ class JiraIntegration(Integration, IssueSyncMixin):
             if field in data.keys():
                 v = data.get(field)
                 if v:
-                    schema = f['schema']
-                    if schema.get('type') == 'string' and not schema.get('custom'):
-                        cleaned_data[field] = v
-                        continue
-                    if schema['type'] == 'user' or schema.get('items') == 'user':
-                        v = {'name': v}
-                    elif schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('multiuserpicker'):
-                        # custom multi-picker
-                        v = [{'name': v}]
-                    elif schema['type'] == 'array' and schema.get('items') != 'string':
-                        v = [{'id': vx} for vx in v]
-                    elif schema['type'] == 'array' and schema.get('items') == 'string':
-                        v = [v]
-                    elif schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('textarea'):
-                        v = v
-                    elif schema['type'] == 'number' or \
-                            schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES['tempo_account']:
-                        try:
-                            if '.' in v:
-                                v = float(v)
-                            else:
-                                v = int(v)
-                        except ValueError:
-                            pass
-                    elif (schema.get('type') != 'string'
-                            or (schema.get('items') and schema.get('items') != 'string')
-                            or schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('select')):
-                        v = {'id': v}
+                    schema = f.get('schema')
+                    if schema:
+                        if schema.get('type') == 'string' and not schema.get('custom'):
+                            cleaned_data[field] = v
+                            continue
+                        if schema['type'] == 'user' or schema.get('items') == 'user':
+                            v = {'name': v}
+                        elif schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('multiuserpicker'):
+                            # custom multi-picker
+                            v = [{'name': v}]
+                        elif schema['type'] == 'array' and schema.get('items') != 'string':
+                            v = [{'id': vx} for vx in v]
+                        elif schema['type'] == 'array' and schema.get('items') == 'string':
+                            v = [v]
+                        elif schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('textarea'):
+                            v = v
+                        elif schema['type'] == 'number' or \
+                                schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES['tempo_account']:
+                            try:
+                                if '.' in v:
+                                    v = float(v)
+                                else:
+                                    v = int(v)
+                            except ValueError:
+                                pass
+                        elif (schema.get('type') != 'string'
+                                or (schema.get('items') and schema.get('items') != 'string')
+                                or schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES.get('select')):
+                            v = {'id': v}
                     cleaned_data[field] = v
 
         if not (isinstance(cleaned_data['issuetype'], dict) and 'id' in cleaned_data['issuetype']):
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 5f205afa92..873287893f 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -93,14 +93,219 @@ SAMPLE_PROJECT_LIST_RESPONSE = """
 ]
 """
 
+SAMPLE_GET_ISSUE_RESPONSE = """
+{
+  "id": "10002",
+  "self": "http://www.example.com/jira/rest/api/2/issue/10002",
+  "key": "EX-1",
+  "fields": {
+    "watcher": {
+      "self": "http://www.example.com/jira/rest/api/2/issue/EX-1/watchers",
+      "isWatching": false,
+      "watchCount": 1,
+      "watchers": [
+        {
+          "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
+          "name": "fred",
+          "displayName": "Fred F. User",
+          "active": false
+        }
+      ]
+    },
+    "attachment": [
+      {
+        "id": 10001,
+        "self": "http://www.example.com/jira/rest/api/2.0/attachments/10000",
+        "filename": "picture.jpg",
+        "author": {
+          "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
+          "key": "fred",
+          "accountId": "99:27935d01-92a7-4687-8272-a9b8d3b2ae2e",
+          "name": "fred",
+          "avatarUrls": {
+            "48x48": "http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred",
+            "24x24": "http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred",
+            "16x16": "http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred",
+            "32x32": "http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred"
+          },
+          "displayName": "Fred F. User",
+          "active": false
+        },
+        "created": "2018-05-19T01:17:45.901+0000",
+        "size": 23123,
+        "mimeType": "image/jpeg",
+        "content": "http://www.example.com/jira/attachments/10000",
+        "thumbnail": "http://www.example.com/jira/secure/thumbnail/10000"
+      }
+    ],
+    "sub-tasks": [
+      {
+        "id": "10000",
+        "type": {
+          "id": "10000",
+          "name": "",
+          "inward": "Parent",
+          "outward": "Sub-task"
+        },
+        "outwardIssue": {
+          "id": "10003",
+          "key": "EX-2",
+          "self": "http://www.example.com/jira/rest/api/2/issue/EX-2",
+          "fields": {
+            "status": {
+              "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
+              "name": "Open"
+            }
+          }
+        }
+      }
+    ],
+    "description": "example bug report",
+    "summary": "example summary",
+    "project": {
+      "self": "http://www.example.com/jira/rest/api/2/project/EX",
+      "id": "10000",
+      "key": "EX",
+      "name": "Example",
+      "avatarUrls": {
+        "48x48": "http://www.example.com/jira/secure/projectavatar?size=large&pid=10000",
+        "24x24": "http://www.example.com/jira/secure/projectavatar?size=small&pid=10000",
+        "16x16": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000",
+        "32x32": "http://www.example.com/jira/secure/projectavatar?size=medium&pid=10000"
+      },
+      "projectCategory": {
+        "self": "http://www.example.com/jira/rest/api/2/projectCategory/10000",
+        "id": "10000",
+        "name": "FIRST",
+        "description": "First Project Category"
+      },
+      "simplified": false
+    },
+    "comment": [
+      {
+        "self": "http://www.example.com/jira/rest/api/2/issue/10010/comment/10000",
+        "id": "10000",
+        "author": {
+          "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
+          "name": "fred",
+          "displayName": "Fred F. User",
+          "active": false
+        },
+        "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.",
+        "updateAuthor": {
+          "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
+          "name": "fred",
+          "displayName": "Fred F. User",
+          "active": false
+        },
+        "created": "2018-05-19T01:17:45.902+0000",
+        "updated": "2018-05-19T01:17:45.902+0000",
+        "visibility": {
+          "type": "role",
+          "value": "Administrators"
+        }
+      }
+    ],
+    "issuelinks": [
+      {
+        "id": "10001",
+        "type": {
+          "id": "10000",
+          "name": "Dependent",
+          "inward": "depends on",
+          "outward": "is depended by"
+        },
+        "outwardIssue": {
+          "id": "10004L",
+          "key": "PRJ-2",
+          "self": "http://www.example.com/jira/rest/api/2/issue/PRJ-2",
+          "fields": {
+            "status": {
+              "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
+              "name": "Open"
+            }
+          }
+        }
+      },
+      {
+        "id": "10002",
+        "type": {
+          "id": "10000",
+          "name": "Dependent",
+          "inward": "depends on",
+          "outward": "is depended by"
+        },
+        "inwardIssue": {
+          "id": "10004",
+          "key": "PRJ-3",
+          "self": "http://www.example.com/jira/rest/api/2/issue/PRJ-3",
+          "fields": {
+            "status": {
+              "iconUrl": "http://www.example.com/jira//images/icons/statuses/open.png",
+              "name": "Open"
+            }
+          }
+        }
+      }
+    ],
+    "worklog": [
+      {
+        "self": "http://www.example.com/jira/rest/api/2/issue/10010/worklog/10000",
+        "author": {
+          "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
+          "name": "fred",
+          "displayName": "Fred F. User",
+          "active": false
+        },
+        "updateAuthor": {
+          "self": "http://www.example.com/jira/rest/api/2/user?username=fred",
+          "name": "fred",
+          "displayName": "Fred F. User",
+          "active": false
+        },
+        "comment": "I did some work here.",
+        "updated": "2018-05-19T01:17:45.905+0000",
+        "visibility": {
+          "type": "group",
+          "value": "jira-developers"
+        },
+        "started": "2018-05-19T01:17:45.905+0000",
+        "timeSpent": "3h 20m",
+        "timeSpentSeconds": 12000,
+        "id": "100028",
+        "issueId": "10002"
+      }
+    ],
+    "updated": 1,
+    "timetracking": {
+      "originalEstimate": "10m",
+      "remainingEstimate": "3m",
+      "timeSpent": "6m",
+      "originalEstimateSeconds": 600,
+      "remainingEstimateSeconds": 200,
+      "timeSpentSeconds": 400
+    }
+  }
+}
+"""
+
 
 class MockJiraApiClient(object):
     def get_create_meta(self, project=None):
         return json.loads(SAMPLE_CREATE_META_RESPONSE)
 
+    def get_create_meta_for_project(self, project):
+        return self.get_create_meta()['projects'][0]
+
     def get_projects_list(self):
         return json.loads(SAMPLE_PROJECT_LIST_RESPONSE)
 
+    def get_issue(self, issue_key):
+        return json.loads(SAMPLE_GET_ISSUE_RESPONSE)
+
+    def create_issue(self, data):
+        return {'key': 'APP-123'}
+
 
 class JiraIntegrationTest(APITestCase):
     def test_get_create_issue_config(self):
@@ -173,3 +378,30 @@ class JiraIntegrationTest(APITestCase):
                 )
             }
         ]
+
+    def test_create_issue(self):
+        org = self.organization
+        self.login_as(self.user)
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example JIRA',
+        )
+        integration.add_organization(org.id)
+
+        installation = integration.get_installation()
+
+        def get_client():
+            return MockJiraApiClient()
+
+        with mock.patch.object(installation, 'get_client', get_client):
+            assert installation.create_issue({
+                'title': 'example summary',
+                'description': 'example bug report',
+                'issuetype': '1',
+                'project': '10000',
+            }) == {
+                'title': 'example summary',
+                'description': 'example bug report',
+                'key': 'APP-123'
+            }
