commit 99f371ae3a5ccdb3b6f0150379865f15142c971a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 4 15:08:18 2016 -0700

    [merge] add UserEmail to merged objects (#4265)

diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index ba654b299a..1b6581318f 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -156,7 +156,7 @@ class User(BaseModel, AbstractBaseUser):
         from sentry.models import (
             AuditLogEntry, Activity, AuthIdentity, GroupAssignee, GroupBookmark,
             GroupSeen, OrganizationMember, OrganizationMemberTeam, UserAvatar,
-            UserOption
+            UserEmail, UserOption
         )
 
         audit_logger.info('user.merge', extra={
@@ -194,6 +194,7 @@ class User(BaseModel, AbstractBaseUser):
             GroupBookmark,
             GroupSeen,
             UserAvatar,
+            UserEmail,
             UserOption
         )
 
diff --git a/src/sentry/models/useremail.py b/src/sentry/models/useremail.py
index cbf25bfb0a..2d7be1f904 100644
--- a/src/sentry/models/useremail.py
+++ b/src/sentry/models/useremail.py
@@ -33,6 +33,11 @@ class UserEmail(Model):
 
     __repr__ = sane_repr('user_id', 'email')
 
+    def __init__(self, *args, **kwargs):
+        super(UserEmail, self).__init__(*args, **kwargs)
+        if not self.validation_hash:
+            self.set_hash()
+
     def set_hash(self):
         self.date_hash_added = timezone.now()
         self.validation_hash = get_random_string(32, CHARACTERS)
diff --git a/tests/sentry/models/test_user.py b/tests/sentry/models/test_user.py
index ee7429a87a..361da0386c 100644
--- a/tests/sentry/models/test_user.py
+++ b/tests/sentry/models/test_user.py
@@ -1,17 +1,41 @@
 from __future__ import absolute_import
 
-from sentry.models import OrganizationMember
+from sentry.models import OrganizationMember, UserEmail
 from sentry.testutils import TestCase
 
 
 class UserMergeToTest(TestCase):
     def test_simple(self):
         from_user = self.create_user('foo@example.com')
-
+        UserEmail.objects.create_or_update(
+            user=from_user,
+            email=from_user.email,
+            values={
+                'is_verified': True,
+            }
+        )
         to_user = self.create_user('bar@example.com')
-
+        UserEmail.objects.create_or_update(
+            user=to_user,
+            email=to_user.email,
+            values={
+                'is_verified': True,
+            }
+        )
         from_user.merge_to(to_user)
 
+        assert UserEmail.objects.filter(
+            user=to_user,
+            email=to_user.email,
+            is_verified=True,
+        ).exists()
+
+        assert UserEmail.objects.filter(
+            user=to_user,
+            email=from_user.email,
+            is_verified=True,
+        ).exists()
+
     def test_duplicate_memberships(self):
         from_user = self.create_user('foo@example.com')
         to_user = self.create_user('bar@example.com')
