commit 7b01e23060e4516ad95ec54e56c829da7c4ca858
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Apr 6 11:14:03 2020 -0700

    chore(TS): convert input field form (#18065)

diff --git a/src/sentry/static/sentry/app/components/confirmDelete.tsx b/src/sentry/static/sentry/app/components/confirmDelete.tsx
index ae7bc3abba..5d0c9f7079 100644
--- a/src/sentry/static/sentry/app/components/confirmDelete.tsx
+++ b/src/sentry/static/sentry/app/components/confirmDelete.tsx
@@ -53,7 +53,6 @@ class ConfirmDelete extends React.PureComponent<Props, State> {
       <React.Fragment>
         <Alert type="error">{message}</Alert>
         <Field
-          p={0}
           flexibleControlStateSize
           inline={false}
           label={t(
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
index 1e4f2b5f34..badc69f43a 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
@@ -100,6 +100,7 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
         autosize: true,
         rows: 1,
         inline: false,
+        name: 'question0',
       },
       {
         type: 'textarea',
@@ -108,6 +109,7 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
         autosize: true,
         rows: 1,
         inline: false,
+        name: 'question1',
       },
       {
         type: 'textarea',
@@ -116,6 +118,7 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
         autosize: true,
         rows: 1,
         inline: false,
+        name: 'question2',
       },
     ];
 
@@ -129,13 +132,11 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
         rows: 1,
         inline: false,
         meta: permissionQuestionPlainText,
+        name: 'question3',
       });
     }
 
-    //dynamically generate the name based off the index
-    return baseFields.map((field, index) =>
-      Object.assign({name: `question${index}`}, field)
-    );
+    return baseFields;
   }
 
   handleSubmitSuccess = () => {
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
index 8ea711b9b3..c394fe9372 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
@@ -50,7 +50,7 @@ class ApiApplicationsDetails extends AsyncView<Props, State> {
             <PanelHeader>{t('Credentials')}</PanelHeader>
 
             <PanelBody>
-              <FormField name="clientID" label="Client ID" overflow>
+              <FormField name="clientID" label="Client ID">
                 {({value}) => (
                   <div>
                     <TextCopyInput>
@@ -61,7 +61,6 @@ class ApiApplicationsDetails extends AsyncView<Props, State> {
               </FormField>
 
               <FormField
-                overflow
                 name="clientSecret"
                 label="Client Secret"
                 help={t(`Your secret is only available briefly after application creation. Make
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx
index ca6f96a303..dd1d0ff9c7 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.tsx
@@ -55,7 +55,7 @@ type Props = {
    * Used for "smart" Fields to trigger a "blur" event. `onChange` can
    * be triggered quite frequently
    */
-  onBlur?: Function;
+  onBlur?: (value, event?) => void;
   onChange?: Function;
 };
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/controlState.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/controlState.tsx
index 0b42a0cced..c6d82362c2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/controlState.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/controlState.tsx
@@ -8,7 +8,7 @@ import Spinner from 'app/views/settings/components/forms/spinner';
 type Props = {
   isSaving?: boolean;
   isSaved?: boolean;
-  error?: boolean;
+  error?: string | boolean;
 };
 
 /**
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
index ed426d37df..c6f6eb4802 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.tsx
@@ -11,7 +11,7 @@ const defaultProps = {
   flexibleControlStateSize: false,
 };
 
-type Props = typeof defaultProps & {
+type Props = Partial<typeof defaultProps> & {
   inline?: boolean;
   alignRight?: boolean;
   disabled?: boolean;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.tsx
index 1888ef0dc5..5eaa7d0c36 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.tsx
@@ -1,7 +1,7 @@
 import styled from '@emotion/styled';
 
 const width = '36px';
-const FieldControlState = styled('div')<{flexibleControlStateSize: boolean}>`
+const FieldControlState = styled('div')<{flexibleControlStateSize?: boolean}>`
   display: flex;
   position: relative;
   ${p => !p.flexibleControlStateSize && `width: ${width}`};
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.tsx
index 996195743b..9f4d6a79c2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldHelp.tsx
@@ -2,7 +2,7 @@ import styled from '@emotion/styled';
 
 import space from 'app/styles/space';
 
-const FieldHelp = styled('div')<{stacked: boolean; inline: boolean}>`
+const FieldHelp = styled('div')<{stacked?: boolean; inline?: boolean}>`
   color: ${p => p.theme.gray2};
   font-size: 14px;
   margin-top: ${p => (p.stacked && !p.inline ? 0 : space(1))};
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.tsx
index 2a83ba2f04..ee18d7286c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.tsx
@@ -3,7 +3,11 @@ import styled from '@emotion/styled';
 
 import space from 'app/styles/space';
 
-type Props = {
+/**
+ * Using Parameters<typeof FieldWrapper> in the Field component somehow
+ * causes an infinite recursive depth so exporting the props is best workaround
+ */
+export type Props = {
   stacked?: boolean;
   inline?: boolean;
   hasControlState?: boolean;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx
similarity index 81%
rename from src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx
index 0b9e57150a..3d152299ea 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.tsx
@@ -15,9 +15,36 @@ import FieldErrorReason from 'app/views/settings/components/forms/field/fieldErr
 import FieldHelp from 'app/views/settings/components/forms/field/fieldHelp';
 import FieldLabel from 'app/views/settings/components/forms/field/fieldLabel';
 import FieldRequiredBadge from 'app/views/settings/components/forms/field/fieldRequiredBadge';
-import FieldWrapper from 'app/views/settings/components/forms/field/fieldWrapper';
-
-class Field extends React.Component {
+import FieldWrapper, {
+  Props as FieldWrapperProps,
+} from 'app/views/settings/components/forms/field/fieldWrapper';
+
+type ChildrenFunction = (props) => React.ReactNode;
+
+type Props = {
+  alignRight?: boolean;
+  required?: boolean;
+  visible?: boolean | ((props) => boolean);
+  disabled?: boolean | ((props) => boolean);
+  disabledReason?: string;
+  flexibleControlStateSize?: boolean;
+  label?: React.ReactNode;
+  help?: React.ReactNode | React.ReactElement | Function;
+  id?: string;
+  children?: React.ReactNode | ChildrenFunction;
+  controlClassName?: string;
+  style?: object;
+  error?: string;
+  validate?: Function; //TODO(TS): Do we need this?
+  className?: string; //Needed for styled components
+} & Omit<
+  FieldControl['props'],
+  'disabled' | 'inline' | 'className' | 'help' | 'errorState'
+> &
+  FieldWrapperProps &
+  Omit<ControlState['props'], 'error'>;
+
+class Field extends React.Component<Props> {
   static propTypes = {
     /**
      * Aligns Control to the right
@@ -140,7 +167,7 @@ class Field extends React.Component {
     } = otherProps;
     const isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
     const isVisible = typeof visible === 'function' ? visible(this.props) : visible;
-    let Control;
+    let Control: React.ReactNode;
 
     if (!isVisible) {
       return null;
@@ -162,7 +189,8 @@ class Field extends React.Component {
 
     // See comments in prop types
     if (typeof children === 'function') {
-      Control = children({
+      //need to cast b/c TS claims childen is not otherwise callable
+      Control = (children as ChildrenFunction)({
         ...otherProps,
         ...controlProps,
       });
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
index 39a3325e40..384ed79bd8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
@@ -26,7 +26,7 @@ type Props = {
   flexibleControlStateSize?: boolean;
   stacked?: boolean;
   inline?: boolean;
-
+  onBlur?: (value, event) => void;
   access?: Scope[];
 };
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx
index 76841bb4ca..e2b62af1e9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.tsx
@@ -14,13 +14,15 @@ import FormFieldControlState from 'app/views/settings/components/forms/formField
 import PanelAlert from 'app/components/panels/panelAlert';
 import ReturnButton from 'app/views/settings/components/forms/returnButton';
 import space from 'app/styles/space';
+import Alert from 'app/components/alert';
+import FormModel from 'app/views/settings/components/forms/model';
 
 /**
  * Some fields don't need to implement their own onChange handlers, in
  * which case we will receive an Event, but if they do we should handle
  * the case where they return a value as the first argument.
  */
-const getValueFromEvent = (valueOrEvent, e) => {
+const getValueFromEvent = (valueOrEvent?, e?: MouseEvent) => {
   const event = e || valueOrEvent;
   const value = defined(e) ? valueOrEvent : event && event.target && event.target.value;
 
@@ -34,6 +36,9 @@ const getValueFromEvent = (valueOrEvent, e) => {
 // Disables a lot of functionality but allows you to use fields
 // without wrapping them in a Form
 class MockModel {
+  //TODO(TS)
+  props: any;
+  initialData: object;
   constructor(props) {
     this.props = props;
 
@@ -61,9 +66,33 @@ class MockModel {
  * form model, that will be called to determine the value of the prop upon an
  * observed change in the model.
  */
-const propsToObserver = ['inline', 'highlighted', 'visible', 'disabled'];
-
-class FormField extends React.Component {
+const propsToObserver = ['inline', 'highlighted', 'visible', 'disabled'] as const;
+
+//functions that get evaluated in observedProps
+type ObserverReducerFn<T> = (props: Props & {model: FormModel}) => T;
+type ObserverOrValue<T> = T | ObserverReducerFn<T>;
+
+type Props = {
+  name: string;
+  style?: Object;
+  saveOnBlur?: boolean;
+  saveMessage?: React.ReactNode | Function;
+  saveMessageAlertType?: React.ComponentProps<typeof Alert>['type'];
+  children: (renderProps) => React.ReactNode;
+  onKeyDown?: (value, event) => void;
+  onBlur?: (value, event) => void;
+  onChange?: (value, event) => void;
+  hideErrorMessage?: boolean;
+  selectionInfoFunction?: (props) => null | React.ReactNode;
+  inline?: ObserverOrValue<boolean>;
+  placeholder?: ObserverOrValue<string>;
+  visible?: boolean | ((props: Props) => boolean);
+  formatMessageValue?: boolean | Function; //used in prettyFormString
+  defaultValue?: any; //TODO(TS): Do we need this?
+} & Omit<FieldControl['props'], typeof propsToObserver[number]> &
+  Omit<Field['props'], 'inline'>;
+
+class FormField extends React.Component<Props> {
   static propTypes = {
     name: PropTypes.string.isRequired,
 
@@ -135,7 +164,9 @@ class FormField extends React.Component {
     this.getModel().removeField(this.props.name);
   }
 
-  getError(_props, _context) {
+  input?: React.Ref<HTMLElement>;
+
+  getError() {
     return this.getModel().getError(this.props.name);
   }
 
@@ -250,15 +281,15 @@ class FormField extends React.Component {
       selectionInfoFunction,
 
       // Don't pass `defaultValue` down to input fields, will be handled in form model
-      // eslint-disable-next-line no-unused-vars
-      defaultValue,
+      defaultValue: _defaultValue,
       ...props
     } = this.props;
     const id = this.getId();
     const model = this.getModel();
     const saveOnBlurFieldOverride = typeof saveOnBlur !== 'undefined' && !saveOnBlur;
 
-    const makeField = extraProps => (
+    //TODO(TS): This is difficult to type because of the reducer
+    const makeField = (extraProps?: any) => (
       <React.Fragment>
         <Field
           id={id}
@@ -326,7 +357,9 @@ class FormField extends React.Component {
               const error = this.getError();
               const value = model.getValue(name);
               return (
-                ((typeof props.visible === 'function' ? props.visible(props) : true) &&
+                ((typeof props.visible === 'function'
+                  ? props.visible(this.props)
+                  : true) &&
                   selectionInfoFunction({...props, error, value})) ||
                 null
               );
@@ -374,7 +407,16 @@ class FormField extends React.Component {
 
     const observedProps = propsToObserver
       .filter(p => typeof this.props[p] === 'function')
-      .map(p => [p, () => this.props[p]({...this.props, model})]);
+      .map(p => [
+        p,
+        () => {
+          const innerProps: object = this.props;
+          return (innerProps as {[key: string]: ObserverReducerFn<any>})[p]({
+            ...this.props,
+            model,
+          });
+        },
+      ]);
 
     // This field has no properties that require observation to compute their
     // value, this field is static and will not be re-rendered.
@@ -382,7 +424,7 @@ class FormField extends React.Component {
       return makeField();
     }
 
-    const reducer = (a, [prop, fn]) => ({...a, [prop]: fn()});
+    const reducer: any = (a, [prop, fn]) => ({...a, [prop]: fn()});
     const observedPropsFn = () => makeField(observedProps.reduce(reducer, {}));
 
     return <Observer>{observedPropsFn}</Observer>;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.tsx
similarity index 68%
rename from src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/inputField.tsx
index b3931883c8..04168889ac 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.tsx
@@ -5,7 +5,16 @@ import omit from 'lodash/omit';
 import FormField from 'app/views/settings/components/forms/formField';
 import Input from 'app/views/settings/components/forms/controls/input';
 
-export default class InputField extends React.Component {
+type Props = {
+  field?: (props) => React.ReactNode;
+  value?: any;
+} & Omit<FormField['props'], 'children'> &
+  Omit<
+    React.ComponentPropsWithoutRef<'input'>,
+    'value' | 'placeholder' | 'disabled' | 'onBlur'
+  >;
+
+export default class InputField extends React.Component<Props> {
   static propTypes = {
     ...FormField.propTypes,
     field: PropTypes.func,
@@ -27,7 +36,7 @@ export default class InputField extends React.Component {
 
     return (
       <FormField className={className} {...this.props}>
-        {formFieldProps => field(omit(formFieldProps, 'children'))}
+        {formFieldProps => field && field(omit(formFieldProps, 'children'))}
       </FormField>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
index 0f02a606da..493d07b1ec 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -14,19 +14,13 @@ import {IconAdd} from 'app/icons/iconAdd';
 const defaultProps = {
   addButtonText: t('Add Item'),
   allowEmpty: false,
-  // Since we're saving an object, there isn't a great way to render the
-  // change within the toast. Just turn off displaying the from/to portion of
-  // the message.
-  formatMessageValue: false,
 };
 
 type DefaultProps = Readonly<typeof defaultProps>;
 
-//TODO(TS): properly type this since InputField['props'] is type any
 type Props = {
-  name?: string;
-  columnLabels: object;
-  columnKeys: string[];
+  columnLabels?: object;
+  columnKeys?: string[];
 } & DefaultProps &
   InputField['props'];
 
@@ -53,7 +47,10 @@ export default class TableField extends React.Component<Props> {
     allowEmpty: PropTypes.bool,
   };
 
-  static defaultProps = defaultProps;
+  static defaultProps = {
+    addButtonText: t('Add Item'),
+    allowEmpty: false,
+  };
 
   hasValue = value => defined(value) && !objectIsEmpty(value);
 
@@ -73,7 +70,7 @@ export default class TableField extends React.Component<Props> {
     const emptyValue = mappedKeys.reduce((a, v) => ({...a, [v]: null}), {id: ''});
 
     const valueIsEmpty = this.hasValue(props.value);
-    const value = valueIsEmpty ? props.value : [];
+    const value = valueIsEmpty ? (props.value as any[]) : [];
 
     const saveChanges = (nextValue: object[]) => {
       onChange(nextValue, []);
@@ -168,9 +165,14 @@ export default class TableField extends React.Component<Props> {
   };
 
   render() {
+    //We need formatMessageValue=false since we're saving an object
+    // and there isn't a great way to render the
+    // change within the toast. Just turn off displaying the from/to portion of
+    // the message
     return (
       <InputField
         {...this.props}
+        formatMessageValue={false}
         inline={({model}) => !this.hasValue(model.getValue(this.props.name))}
         field={this.renderField}
       />
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 674ca22e18..780557a67b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -26,12 +26,12 @@ export type FieldValue = any;
 
 type ConfirmKeyType = 'true' | 'false';
 
-// TODO(ts): A lot of these attribuets are missing correct types. We'll likely
+// TODO(ts): A lot of these attributes are missing correct types. We'll likely
 // need to introduce some generics in here to get rid of some of these anys.
 
 type BaseField = {
   label?: React.ReactNode | (() => React.ReactNode);
-  name?: string;
+  name: string;
   help?: React.ReactNode | ((props: any) => React.ReactNode);
   required?: boolean;
   placeholder?: string | (() => string);
@@ -108,6 +108,12 @@ type RangeType = {type: 'range'} & Omit<RangeSlider['props'], 'value'> & {
     value?: Pick<RangeSlider['props'], 'value'>;
   };
 
+type TableType = {
+  type: 'table';
+  columnLabels: object;
+  columnKeys: string[];
+};
+
 export type Field = (
   | CustomType
   | SelectControlType
@@ -115,6 +121,7 @@ export type Field = (
   | TextareaType
   | RangeType
   | {type: typeof FieldType[number]}
+  | TableType
 ) &
   BaseField;
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index 063cd3aa3d..ff4e848931 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -366,7 +366,7 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
               <PanelHeader>{t('Credentials')}</PanelHeader>
               <PanelBody>
                 {app.status !== 'internal' && (
-                  <FormField name="clientId" label="Client ID" overflow>
+                  <FormField name="clientId" label="Client ID">
                     {({value}) => (
                       <TextCopyInput>
                         {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
@@ -374,7 +374,7 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
                     )}
                   </FormField>
                 )}
-                <FormField overflow name="clientSecret" label="Client Secret">
+                <FormField name="clientSecret" label="Client Secret">
                   {({value}) =>
                     value ? (
                       <Tooltip
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx
index fa6020827f..4c37e10b35 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx
@@ -113,6 +113,7 @@ class KeyRateLimitsForm extends React.Component<Props> {
                   label={t('Rate Limit')}
                   disabled={disabled || !hasFeature}
                   validate={({form}) => {
+                    //TODO(TS): is validate actually doing anything because it's an unexpected prop
                     const isValid =
                       form &&
                       form.rateLimit &&
diff --git a/tests/js/spec/components/__snapshots__/confirmDelete.spec.jsx.snap b/tests/js/spec/components/__snapshots__/confirmDelete.spec.jsx.snap
index e03a4afb73..6a1ae8c4e1 100644
--- a/tests/js/spec/components/__snapshots__/confirmDelete.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/confirmDelete.spec.jsx.snap
@@ -66,7 +66,6 @@ exports[`ConfirmDelete renders 1`] = `
                 " to confirm the deletion",
               ]
             }
-            p={0}
             required={false}
             visible={true}
           >
diff --git a/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap
index 262904b08e..92e3f25c70 100644
--- a/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap
@@ -84,7 +84,6 @@ exports[`TableField renders renders with form context 1`] = `
             "column2": "Column 2",
           }
         }
-        formatMessageValue={false}
         name="fieldName"
       >
         <InputField
@@ -531,7 +530,6 @@ exports[`TableField renders renders without form context 1`] = `
       "column2": "Column 2",
     }
   }
-  formatMessageValue={false}
   name="fieldName"
 >
   <InputField
