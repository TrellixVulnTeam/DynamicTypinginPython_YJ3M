commit ff7c39c1c6fd3a786a1d3b61d8e953e023844d2f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 13 08:11:13 2020 -0700

    ref(charts): Move xAxis date formatting out of `<ChartZoom>` (#17607)
    
    Moved this into `<BaseChart>` and `XAxis` helper so that all charts can get this logic

diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index c6f5e750c4..d7f1a35275 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -2,9 +2,9 @@ import 'zrender/lib/svg/svg';
 
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from '@emotion/styled';
 import ReactEchartsCore from 'echarts-for-react/lib/core';
 import echarts from 'echarts/lib/echarts';
+import styled from '@emotion/styled';
 
 import {callIfFunction} from 'app/utils/callIfFunction';
 import SentryTypes from 'app/sentryTypes';
@@ -129,8 +129,14 @@ class BaseChart extends React.Component {
      */
     showTimeInTooltip: PropTypes.bool,
 
-    // Should we render hours on xaxis instead of day?
-    shouldXAxisRenderTimeOnly: PropTypes.bool,
+    // Use short date formatting for xAxis
+    useShortDate: PropTypes.bool,
+
+    // These are optional and are used to determine how xAxis is formatted
+    // if `isGroupedByDate == true`
+    start: PropTypes.instanceOf(Date),
+    end: PropTypes.instanceOf(Date),
+    period: PropTypes.string,
 
     // Formats dates as UTC?
     utc: PropTypes.bool,
@@ -149,7 +155,6 @@ class BaseChart extends React.Component {
     xAxis: {},
     yAxis: {},
     isGroupedByDate: false,
-    shouldXAxisRenderTimeOnly: false,
   };
 
   getEventsMap = {
@@ -206,8 +211,11 @@ class BaseChart extends React.Component {
 
       isGroupedByDate,
       showTimeInTooltip,
-      shouldXAxisRenderTimeOnly,
+      useShortDate,
       previousPeriod,
+      start,
+      end,
+      period,
       utc,
       yAxes,
 
@@ -267,7 +275,10 @@ class BaseChart extends React.Component {
               xAxis !== null
                 ? XAxis({
                     ...xAxis,
-                    shouldRenderTimeOnly: shouldXAxisRenderTimeOnly,
+                    useShortDate,
+                    start,
+                    end,
+                    period,
                     isGroupedByDate,
                     utc,
                   })
diff --git a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
index e45f03e400..fa1b3ec802 100644
--- a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
+++ b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
@@ -3,8 +3,6 @@ import React from 'react';
 import moment from 'moment';
 
 import {callIfFunction} from 'app/utils/callIfFunction';
-import {getFormattedDate} from 'app/utils/dates';
-import {useShortInterval} from 'app/components/charts/utils';
 import {updateParams} from 'app/actionCreators/globalSelection';
 import DataZoom from 'app/components/charts/components/dataZoom';
 import SentryTypes from 'app/sentryTypes';
@@ -32,8 +30,6 @@ class ChartZoom extends React.Component {
     end: PropTypes.instanceOf(Date),
     utc: PropTypes.bool,
     disabled: PropTypes.bool,
-    // Use short date formatting for xAxis
-    useShortDate: PropTypes.bool,
 
     xAxis: SentryTypes.EChartsXAxis,
 
@@ -197,10 +193,8 @@ class ChartZoom extends React.Component {
   render() {
     const {
       utc,
-      xAxis,
       disabled,
       children,
-      useShortDate,
 
       onZoom, // eslint-disable-line no-unused-vars
       onRestore, // eslint-disable-line no-unused-vars
@@ -214,21 +208,6 @@ class ChartZoom extends React.Component {
       return children(props);
     }
 
-    const dateFormat = useShortDate ? 'MMM Do' : 'MMM D LT';
-    const hasShortInterval = useShortInterval(this.props);
-    const xAxisOptions = {
-      axisLabel: {
-        showMaxLabel: false,
-        showMinLabel: false,
-        formatter: (value, index) => {
-          const firstItem = index === 0;
-          const format = hasShortInterval && !firstItem ? 'LT' : dateFormat;
-          return getFormattedDate(value, format, {local: !utc});
-        },
-      },
-      ...xAxis,
-    };
-
     const renderProps = {
       // Zooming only works when grouped by date
       isGroupedByDate: true,
@@ -256,7 +235,6 @@ class ChartZoom extends React.Component {
       onRestore: this.handleZoomRestore,
       onFinished: this.handleChartFinished,
       ...props,
-      xAxis: xAxisOptions,
     };
 
     return children(renderProps);
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
index d335bee808..490e38d137 100644
--- a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
@@ -1,17 +1,27 @@
 import {getFormattedDate} from 'app/utils/dates';
 import theme from 'app/utils/theme';
 
-import {truncationFormatter} from '../utils';
+import {truncationFormatter, useShortInterval} from '../utils';
 
 export default function XAxis({
   isGroupedByDate,
-  shouldRenderTimeOnly,
+  useShortDate,
+  axisLabel,
+  axisTick,
+  axisLine,
+
+  start,
+  end,
+  period,
   utc,
   ...props
 } = {}) {
-  const axisLabelFormatter = value => {
+  const axisLabelFormatter = (value, index) => {
     if (isGroupedByDate) {
-      const format = shouldRenderTimeOnly === 'hour' ? 'LT' : 'MMM Do';
+      const dateFormat = useShortDate ? 'MMM Do' : 'MMM D LT';
+      const firstItem = index === 0;
+      const format =
+        useShortInterval({start, end, period}) && !firstItem ? 'LT' : dateFormat;
       return getFormattedDate(value, format, {local: !utc});
     } else if (props.truncate) {
       return truncationFormatter(value, props.truncate);
@@ -26,22 +36,28 @@ export default function XAxis({
     axisLine: {
       lineStyle: {
         color: theme.gray1,
-        ...(props.axisLine || {}),
+        ...(axisLine || {}),
       },
     },
     axisTick: {
       lineStyle: {
         color: theme.gray1,
       },
-      ...(props.axisTick || {}),
+      ...(axisTick || {}),
     },
     splitLine: {
       show: false,
     },
     axisLabel: {
       margin: 12,
+
+      // This was default with ChartZoom, we are making it default for all charts now
+      // Otherwise the xAxis can look congested when there is always a min/max label
+      showMaxLabel: false,
+      showMinLabel: false,
+
       formatter: axisLabelFormatter,
-      ...(props.axisLabel || {}),
+      ...(axisLabel || {}),
     },
     axisPointer: {
       show: true,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
index 13a9baa187..cc6db16a99 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
@@ -7,7 +7,7 @@ import {Location} from 'history';
 import {Client} from 'app/api';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
-import {getInterval, useShortInterval} from 'app/components/charts/utils';
+import {getInterval} from 'app/components/charts/utils';
 import {
   getFormattedDate,
   getUtcDateString,
@@ -177,28 +177,11 @@ type LineGraphProps = {
  */
 const LineGraph = (props: LineGraphProps) => {
   const {api, organization, location, selection, currentEvent, eventView} = props;
-
   const isUtc = selection.datetime.utc;
-  const dateFormat = 'lll';
-
   const interval = getInterval(selection.datetime, true);
-  const hasShortInterval = useShortInterval(selection.datetime);
-
-  const xAxisOptions = {
-    type: 'time',
-    axisLabel: {
-      formatter: (value, index) => {
-        const firstItem = index === 0;
-        const format = hasShortInterval && !firstItem ? 'LT' : dateFormat;
-        return getFormattedDate(value, format, {local: !isUtc});
-      },
-    },
-  };
-
   const tooltip = {
     formatAxisLabel: value => getFormattedDate(value, 'lll', {local: !isUtc}),
   };
-
   const queryString = eventView.getQuery(location.query.query);
   const referenceEvent = `${currentEvent.projectSlug}:${currentEvent.eventID}`;
 
@@ -222,6 +205,8 @@ const LineGraph = (props: LineGraphProps) => {
       >
         {({loading, reloading, timeseriesData}) => (
           <LineChart
+            {...selection.datetime}
+            isGroupedByDate
             loading={loading}
             reloading={reloading}
             series={[...timeseriesData, getCurrentEventMarker(currentEvent)]}
@@ -241,7 +226,6 @@ const LineGraph = (props: LineGraphProps) => {
               })
             }
             tooltip={tooltip}
-            xAxis={xAxisOptions}
             grid={{
               left: '24px',
               right: '24px',
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index fc4e874c7d..263db1e2e4 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -2,7 +2,7 @@ import {PlainRoute} from 'react-router/lib/Route';
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
-import {Organization, Project, Config} from 'app/types';
+import {Organization, Project} from 'app/types';
 import {
   addErrorMessage,
   addLoadingMessage,
@@ -23,7 +23,6 @@ import Triggers from 'app/views/settings/incidentRules/triggers';
 import TriggersChart from 'app/views/settings/incidentRules/triggers/chart';
 import hasThresholdValue from 'app/views/settings/incidentRules/utils/hasThresholdValue';
 import recreateRoute from 'app/utils/recreateRoute';
-import withConfig from 'app/utils/withConfig';
 import withProject from 'app/utils/withProject';
 
 import {
@@ -38,7 +37,6 @@ import FormModel from '../../components/forms/model';
 import RuleConditionsForm from '../ruleConditionsForm';
 
 type Props = {
-  config: Config;
   organization: Organization;
   project: Project;
   routes: PlainRoute[];
@@ -381,7 +379,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
   }
 
   renderBody() {
-    const {config, organization, ruleId, rule, params, onSubmitSuccess} = this.props;
+    const {organization, ruleId, rule, params, onSubmitSuccess} = this.props;
     const {query, aggregation, timeWindow, triggers} = this.state;
 
     return (
@@ -425,7 +423,6 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
           >
             <TriggersChart
               api={this.api}
-              config={config}
               organization={organization}
               projects={this.state.projects}
               triggers={triggers}
@@ -464,7 +461,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
 }
 
 export {RuleFormContainer};
-export default withConfig(withProject(RuleFormContainer));
+export default withProject(RuleFormContainer);
 
 /**
  * We need a default value of empty string for resolveThreshold or else React complains
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
index 02ce2e5955..85b8c2a3e0 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
@@ -1,13 +1,11 @@
 import React from 'react';
 import maxBy from 'lodash/maxBy';
-import moment from 'moment-timezone';
 import styled from '@emotion/styled';
 
 import {Client} from 'app/api';
-import {Config, Organization, Project} from 'app/types';
+import {Organization, Project} from 'app/types';
 import {Panel} from 'app/components/panels';
 import {SeriesDataUnit} from 'app/types/echarts';
-import {getFormattedDate} from 'app/utils/dates';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import {getDisplayForAlertRuleAggregation} from 'app/views/alerts/utils';
 import LoadingMask from 'app/components/loadingMask';
@@ -19,7 +17,6 @@ import ThresholdsChart from './thresholdsChart';
 
 type Props = {
   api: Client;
-  config: Config;
   organization: Organization;
   projects: Project[];
 
@@ -37,7 +34,6 @@ class TriggersChart extends React.PureComponent<Props> {
   render() {
     const {
       api,
-      config,
       organization,
       projects,
       timeWindow,
@@ -46,6 +42,8 @@ class TriggersChart extends React.PureComponent<Props> {
       triggers,
     } = this.props;
 
+    const period = getPeriodForTimeWindow(timeWindow);
+
     return (
       <EventsRequest
         api={api}
@@ -53,7 +51,7 @@ class TriggersChart extends React.PureComponent<Props> {
         query={query}
         project={projects.map(({id}) => Number(id))}
         interval={`${timeWindow}m`}
-        period={getPeriodForTimeWindow(timeWindow)}
+        period={period}
         yAxis={aggregation === AlertRuleAggregations.TOTAL ? 'event_count' : 'user_count'}
         includePrevious={false}
         currentSeriesName={getDisplayForAlertRuleAggregation(aggregation)}
@@ -73,20 +71,7 @@ class TriggersChart extends React.PureComponent<Props> {
                   <React.Fragment>
                     <TransparentLoadingMask visible={reloading} />
                     <ThresholdsChart
-                      xAxis={{
-                        axisLabel: {
-                          formatter: (value: moment.MomentInput, index: number) => {
-                            const firstItem = index === 0;
-                            const format =
-                              timeWindow <= TimeWindow.FIVE_MINUTES && !firstItem
-                                ? 'LT'
-                                : 'MMM Do';
-                            return getFormattedDate(value, format, {
-                              local: config.user.options.timezone !== 'UTC',
-                            });
-                          },
-                        },
-                      }}
+                      period={period}
                       maxValue={maxValue ? maxValue.value : maxValue}
                       data={timeseriesData}
                       triggers={triggers}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx
index 0e618da674..50b2820863 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/thresholdsChart.tsx
@@ -1,9 +1,10 @@
-import {ECharts, EChartOption} from 'echarts';
+import {ECharts} from 'echarts';
 import React from 'react';
 import color from 'color';
 import debounce from 'lodash/debounce';
 import flatten from 'lodash/flatten';
 
+import {GlobalSelection} from 'app/types';
 import {ReactEchartsRef, Series} from 'app/types/echarts';
 import Graphic from 'app/components/charts/components/graphic';
 import LineChart from 'app/components/charts/lineChart';
@@ -17,10 +18,9 @@ type DefaultProps = {
 };
 
 type Props = DefaultProps & {
-  xAxis: EChartOption.XAxis;
   triggers: Trigger[];
   maxValue?: number;
-};
+} & Partial<GlobalSelection['datetime']>;
 
 type State = {
   width: number;
@@ -223,7 +223,7 @@ export default class ThresholdsChart extends React.PureComponent<Props, State> {
     this.chartRef && this.chartRef.convertToPixel({yAxisIndex: 0}, `${threshold}`);
 
   render() {
-    const {data, triggers, xAxis} = this.props;
+    const {data, triggers, period} = this.props;
     const dataWithoutRecentBucket = data?.map(({data: eventData, ...restOfData}) => ({
       ...restOfData,
       data: eventData.slice(0, -1),
@@ -233,9 +233,9 @@ export default class ThresholdsChart extends React.PureComponent<Props, State> {
       <LineChart
         isGroupedByDate
         showTimeInTooltip
+        period={period}
         forwardedRef={this.handleRef}
         grid={CHART_GRID}
-        xAxis={xAxis}
         yAxis={{
           max: this.state.yAxisMax,
         }}
diff --git a/tests/js/spec/components/charts/chartZoom.spec.jsx b/tests/js/spec/components/charts/chartZoom.spec.jsx
deleted file mode 100644
index 6aa6f627df..0000000000
--- a/tests/js/spec/components/charts/chartZoom.spec.jsx
+++ /dev/null
@@ -1,114 +0,0 @@
-import React from 'react';
-
-import {mount} from 'sentry-test/enzyme';
-import ChartZoom from 'app/components/charts/chartZoom';
-
-jest.mock('moment', () => {
-  const moment = require.requireActual('moment-timezone');
-  moment.tz.setDefault('America/Los_Angeles'); // Whatever timezone you want
-  return moment;
-});
-
-describe('ChartZoom', function() {
-  const renderFunc = jest.fn(() => null);
-  const routerContext = TestStubs.routerContext();
-  let axisLabelFormatter;
-  const timestamp = 1531094400000;
-
-  beforeAll(function() {});
-
-  beforeEach(function() {
-    renderFunc.mockClear();
-  });
-
-  describe('With Period > 24h', function() {
-    describe('Local timezone', function() {
-      beforeEach(function() {
-        mount(
-          <ChartZoom period="7d" utc={false}>
-            {renderFunc}
-          </ChartZoom>,
-          routerContext
-        );
-
-        axisLabelFormatter = renderFunc.mock.calls[0][0].xAxis.axisLabel.formatter;
-      });
-
-      it('formats axis label for first data point', function() {
-        expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 8 5:00 PM');
-      });
-
-      it('formats axis label for second data point', function() {
-        expect(axisLabelFormatter(timestamp, 1)).toEqual('Jul 8 5:00 PM');
-      });
-    });
-
-    describe('UTC', function() {
-      beforeEach(function() {
-        mount(
-          <ChartZoom period="7d" utc>
-            {renderFunc}
-          </ChartZoom>,
-          routerContext
-        );
-
-        axisLabelFormatter = renderFunc.mock.calls[0][0].xAxis.axisLabel.formatter;
-      });
-
-      it('sets showTimeInTooltip prop for children', function() {
-        expect(renderFunc.mock.calls[0][0].showTimeInTooltip).toBe(true);
-      });
-
-      it('formats axis label for first data point', function() {
-        expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 9 12:00 AM');
-      });
-
-      it('formats axis label for second data point', function() {
-        expect(axisLabelFormatter(timestamp, 1)).toEqual('Jul 9 12:00 AM');
-      });
-    });
-  });
-
-  describe('With Period <= 24h', function() {
-    describe('Local timezone', function() {
-      beforeEach(function() {
-        mount(
-          <ChartZoom period="24h" utc={false}>
-            {renderFunc}
-          </ChartZoom>,
-          routerContext
-        );
-
-        axisLabelFormatter = renderFunc.mock.calls[0][0].xAxis.axisLabel.formatter;
-      });
-      it('formats axis label for first data point', function() {
-        expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 8 5:00 PM');
-      });
-
-      it('formats axis label for second data point', function() {
-        expect(axisLabelFormatter(timestamp, 1)).toEqual('5:00 PM');
-      });
-    });
-
-    describe('UTC', function() {
-      beforeEach(function() {
-        mount(
-          <ChartZoom period="24h" utc>
-            {renderFunc}
-          </ChartZoom>,
-          routerContext
-        );
-
-        axisLabelFormatter = renderFunc.mock.calls[0][0].xAxis.axisLabel.formatter;
-      });
-
-      it('formats axis label for first data point', function() {
-        expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 9 12:00 AM');
-      });
-
-      it('formats axis label for second data point', function() {
-        expect(axisLabelFormatter(timestamp, 1)).toEqual('12:00 AM');
-      });
-    });
-  });
-});
diff --git a/tests/js/spec/components/charts/components/xAxis.spec.jsx b/tests/js/spec/components/charts/components/xAxis.spec.jsx
new file mode 100644
index 0000000000..03c4425238
--- /dev/null
+++ b/tests/js/spec/components/charts/components/xAxis.spec.jsx
@@ -0,0 +1,102 @@
+import XAxis from 'app/components/charts/components/xAxis';
+
+jest.mock('moment', () => {
+  const moment = require.requireActual('moment-timezone');
+  moment.tz.setDefault('America/Los_Angeles'); // Whatever timezone you want
+  return moment;
+});
+
+describe('Chart XAxis', function() {
+  let axisLabelFormatter;
+  let xAxisObj;
+  const props = {
+    isGroupedByDate: true,
+  };
+  const timestamp = 1531094400000;
+
+  describe('axisLabel', function() {
+    describe('With Period > 24h', function() {
+      describe('Local timezone', function() {
+        beforeEach(function() {
+          xAxisObj = XAxis({
+            ...props,
+            period: '7d',
+            utc: false,
+          });
+
+          axisLabelFormatter = xAxisObj.axisLabel.formatter;
+        });
+
+        it('formats axis label for first data point', function() {
+          expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 8 5:00 PM');
+        });
+
+        it('formats axis label for second data point', function() {
+          expect(axisLabelFormatter(timestamp, 1)).toEqual('Jul 8 5:00 PM');
+        });
+      });
+
+      describe('UTC', function() {
+        beforeEach(function() {
+          xAxisObj = XAxis({
+            ...props,
+            period: '7d',
+            utc: true,
+          });
+
+          axisLabelFormatter = xAxisObj.axisLabel.formatter;
+        });
+
+        it('formats axis label for first data point', function() {
+          expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 9 12:00 AM');
+        });
+
+        it('formats axis label for second data point', function() {
+          expect(axisLabelFormatter(timestamp, 1)).toEqual('Jul 9 12:00 AM');
+        });
+      });
+    });
+
+    describe('With Period <= 24h', function() {
+      describe('Local timezone', function() {
+        beforeEach(function() {
+          xAxisObj = XAxis({
+            ...props,
+            period: '24h',
+            utc: false,
+          });
+
+          axisLabelFormatter = xAxisObj.axisLabel.formatter;
+        });
+
+        it('formats axis label for first data point', function() {
+          expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 8 5:00 PM');
+        });
+
+        it('formats axis label for second data point', function() {
+          expect(axisLabelFormatter(timestamp, 1)).toEqual('5:00 PM');
+        });
+      });
+
+      describe('UTC', function() {
+        beforeEach(function() {
+          xAxisObj = XAxis({
+            ...props,
+            period: '24h',
+            utc: true,
+          });
+
+          axisLabelFormatter = xAxisObj.axisLabel.formatter;
+        });
+
+        it('formats axis label for first data point', function() {
+          expect(axisLabelFormatter(timestamp, 0)).toEqual('Jul 9 12:00 AM');
+        });
+
+        it('formats axis label for second data point', function() {
+          expect(axisLabelFormatter(timestamp, 1)).toEqual('12:00 AM');
+        });
+      });
+    });
+  });
+});
