commit 0ae235258a63f80382e04f64c6696e78d722aa43
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed May 9 14:13:16 2018 -0700

    feat(integrations): Add endpoint to return config for linking external issues to a group

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index e11cd41b90..f52a2baa7e 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -5,10 +5,36 @@ from django.db import IntegrityError, transaction
 from rest_framework.response import Response
 
 from sentry.api.bases import GroupEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.integration import IntegrationIssueSerializer
 from sentry.models import ExternalIssue, GroupLink, OrganizationIntegration
 
 
 class GroupIntegrationDetails(GroupEndpoint):
+    def get(self, request, group, integration_id):
+        # Keep link/create separate since create will likely require
+        # many external API calls that aren't necessary if the user is
+        # just linking
+        action = request.GET.get('action')
+        if action not in {'link', 'create'}:
+            return Response({'detail': 'Action is required and should be either link or create'})
+
+        organization_id = group.project.organization_id
+        try:
+            # check org permissions
+            # TODO(jess): should this eventually check ProjectIntegration?
+            integration = OrganizationIntegration.objects.filter(
+                integration_id=integration_id,
+                organization_id=organization_id,
+            ).select_related('integration').get().integration
+        except OrganizationIntegration.DoesNotExist:
+            return Response(status=404)
+
+        # TODO(jess): add create issue config to serializer
+        return Response(
+            serialize(integration, request.user, IntegrationIssueSerializer(group, action))
+        )
+
     # was thinking put for link an existing issue, post for create new issue?
     def put(self, request, group, integration_id):
         external_issue_id = request.DATA.get('externalIssue')
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index bf04e4f271..b48f3c993d 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -20,3 +20,18 @@ class IntegrationSerializer(Serializer):
                 'name': provider.name,
             }
         }
+
+
+class IntegrationIssueSerializer(IntegrationSerializer):
+    def __init__(self, group, action):
+        self.group = group
+        self.action = action
+
+    def serialize(self, obj, attrs, user):
+        data = super(IntegrationIssueSerializer, self).serialize(obj, attrs, user)
+        installation = obj.get_installation()
+
+        if self.action == 'link':
+            data['linkIssueConfig'] = installation.get_link_issue_config(self.group)
+
+        return data
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 2953ea686b..b2e404bfd3 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -42,6 +42,16 @@ class ExampleIntegration(Integration):
     def create_comment(self):
         pass
 
+    def get_link_issue_config(self, group):
+        return [
+            {
+                'name': 'externalIssue',
+                'label': 'Issue',
+                'default': '',
+                'type': 'string',
+            }
+        ]
+
 
 class ExampleIntegrationProvider(IntegrationProvider):
     """
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 98db578517..7741c0038c 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -1,11 +1,44 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import ExternalIssue, GroupLink, Integration
 from sentry.testutils import APITestCase
 
 
 class GroupIntegrationDetailsTest(APITestCase):
-    def test_simple(self):
+    def test_simple_get(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+
+        path = '/api/0/issues/{}/integrations/{}/?action=link'.format(group.id, integration.id)
+
+        response = self.client.get(path)
+
+        assert response.data == {
+            'id': six.text_type(integration.id),
+            'name': integration.name,
+            'icon': integration.metadata.get('icon'),
+            'domain_name': integration.metadata.get('domain_name'),
+            'provider': {
+                'key': integration.get_provider().key,
+                'name': integration.get_provider().name,
+            },
+            'linkIssueConfig': [{
+                'default': '',
+                'type': 'string',
+                'name': 'externalIssue',
+                'label': 'Issue',
+            }]
+        }
+
+    def test_simple_put(self):
         self.login_as(user=self.user)
         org = self.organization
         group = self.create_group()
