commit f0d5e0f0e42714f695a5737d14fa975ef621a13f
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Sep 24 19:38:08 2010 -0700

    Add in SENTRY_EXCLUDE_PATHS

diff --git a/sentry/client/base.py b/sentry/client/base.py
index cb3c02c8f6..dc37900e43 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -138,12 +138,25 @@ class SentryClient(object):
                     yield tb.tb_frame
                     tb = tb.tb_next
                 
-            
+            # We iterate through each frame looking for an app in INSTALLED_APPS
+            # When one is found, we mark it as last "best guess" (_frame) and then
+            # check it against SENTRY_EXCLUDE_PATHS. If it isnt listed, then we
+            # use this option. If nothing is found, we use the "best guess".
+            _view = None
             for frame in iter_tb_frames(exc_traceback):
+                view = '.'.join([frame.f_globals['__name__'], frame.f_code.co_name])
                 if frame.f_globals['__name__'].rsplit('.', 1)[0] in modules:
-                    break
-
-            kwargs['view'] = '%s.%s' % (frame.f_globals['__name__'], frame.f_code.co_name)
+                    _view = view
+                    bail = True
+                    for m in settings.EXCLUDE_PATHS:
+                        if view.startswith(m):
+                            bail = False
+                    if bail:
+                        break
+            if _view:
+                view = _view
+            
+            kwargs['view'] = view
 
         data = kwargs.pop('data', {}) or {}
         data['__sentry__'] = {
diff --git a/sentry/models.py b/sentry/models.py
index 3f51c31300..02c356024c 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -35,8 +35,6 @@ try:
 except ImportError:
     Model = models.Model
 
-logger = logging.getLogger('sentry')
-
 __all__ = ('Message', 'GroupedMessage')
 
 STATUS_LEVELS = (
@@ -144,12 +142,15 @@ class GroupedMessage(MessageBase):
         if cls not in created_models:
             return
 
-        from django.db import connections
+        from django.db import connections, transaction
+        
+        try:
+            cursor = connections[db].cursor()
+            cursor.execute("create index sentry_groupedmessage_score on sentry_groupedmessage ((%s))" % (cls.get_score_clause(),))
+            cursor.close()
+        except:
+            transaction.rollback()
         
-        cursor = connections[db].cursor()
-        cursor.execute("create index sentry_groupedmessage_score on sentry_groupedmessage ((%s))" % (cls.get_score_clause(),))
-        cursor.close()
-
     @classmethod
     def get_score_clause(cls):
         engine = get_db_engine()
diff --git a/sentry/settings.py b/sentry/settings.py
index d519d9819e..cdbae54916 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -63,3 +63,7 @@ NAME = getattr(settings, 'SENTRY_NAME', socket.gethostname())
 # fetching the current site. Since we can't reliably query the database
 # from this module, the specific logic is within the SiteFilter
 SITE = getattr(settings, 'SENTRY_SITE', None)
+
+# Extending this allow you to ignore module prefixes when we attempt to
+# discover which function an error comes from (typically a view)
+EXCLUDE_PATHS = getattr(settings, 'SENTRY_EXCLUDE_PATHS', [])
\ No newline at end of file
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 564747e9fc..13ff8f3dd2 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -516,6 +516,29 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry.tests.tests.testExclusionViewPath')
 
+    def testBestGuessView(self):
+        settings.EXCLUDE_PATHS = ['sentry.tests.tests']
+        
+        try: Message.objects.get(pk=1341324)
+        except: get_client().create_from_exception()
+        
+        last = Message.objects.get()
+        
+        self.assertEquals(last.view, 'sentry.tests.tests.testBestGuessView')
+        
+        settings.EXCLUDE_PATHS = []
+
+    def testExcludeModulesView(self):
+        settings.EXCLUDE_PATHS = ['sentry.tests.views.decorated_raise_exc']
+        
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc-decor'))
+        
+        last = Message.objects.get()
+        
+        self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
+        
+        settings.EXCLUDE_PATHS = []
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
diff --git a/sentry/tests/urls.py b/sentry/tests/urls.py
index dff4426923..ddba2ff4f1 100644
--- a/sentry/tests/urls.py
+++ b/sentry/tests/urls.py
@@ -6,5 +6,6 @@ admin.autodiscover()
 urlpatterns = patterns('',
     url(r'^admin/', include(admin.site.urls)),
     url(r'^trigger-500$', 'sentry.tests.views.raise_exc', name='sentry-raise-exc'),
+    url(r'^trigger-500-decorated$', 'sentry.tests.views.decorated_raise_exc', name='sentry-raise-exc-decor'),
     url(r'', include('sentry.urls')),
 )
\ No newline at end of file
diff --git a/sentry/tests/views.py b/sentry/tests/views.py
index a7ee88d3e2..1876810758 100644
--- a/sentry/tests/views.py
+++ b/sentry/tests/views.py
@@ -1,2 +1,5 @@
 def raise_exc(request):
-    raise Exception('view exception')
\ No newline at end of file
+    raise Exception('view exception')
+
+def decorated_raise_exc(request):
+    return raise_exc(request)
\ No newline at end of file
diff --git a/sentry/views.py b/sentry/views.py
index 015aabdd92..9fbf6e87ce 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -295,7 +295,6 @@ def store(request):
     data = request.POST.get('data')
     if not data:
         return HttpResponseForbidden('Missing data')
-    
     try:
         try:
             data = pickle.loads(base64.b64decode(data).decode('zlib'))
