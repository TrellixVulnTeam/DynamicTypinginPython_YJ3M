commit 71d174880bda5e30199b462c157b737ae196b89f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 25 11:55:38 2019 -0800

    ref(charts): Remove zoom optimizations (#11669)
    
    We tried to preserve echarts zoom as best we could but it will break dashboard widgets. Instead we re-render chart but dim the chart while its re-rendering

diff --git a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
index 79249f2688..a331f311a3 100644
--- a/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
+++ b/src/sentry/static/sentry/app/components/charts/chartZoom.jsx
@@ -1,4 +1,3 @@
-import {pick, isEqual} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -7,7 +6,6 @@ import moment from 'moment';
 import {callIfFunction} from 'app/utils/callIfFunction';
 import {getFormattedDate} from 'app/utils/dates';
 import {getInterval, useShortInterval} from 'app/components/charts/utils';
-import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import {updateParams} from 'app/actionCreators/globalSelection';
 import DataZoom from 'app/components/charts/components/dataZoom';
 import SentryTypes from 'app/sentryTypes';
@@ -34,7 +32,6 @@ class ChartZoom extends React.Component {
     start: PropTypes.instanceOf(Date),
     end: PropTypes.instanceOf(Date),
     utc: PropTypes.bool,
-    zoom: PropTypes.bool,
     disabled: PropTypes.bool,
 
     xAxis: SentryTypes.EChartsXAxis,
@@ -58,36 +55,6 @@ class ChartZoom extends React.Component {
     this.saveCurrentPeriod(props);
   }
 
-  // Need to be aggressive about not re-rendering because eCharts handles zoom so we
-  // don't want the component to update (unless parameters besides time period were changed)
-  shouldComponentUpdate(nextProps, nextState) {
-    if (this.props.disabled) {
-      return true;
-    }
-
-    const periodKeys = ['period', 'start', 'end'];
-    const nextPeriod = pick(nextProps, periodKeys);
-    const currentPeriod = pick(this.props, periodKeys);
-    const otherKeys = ['query', 'project', 'environment'];
-    const zoom = nextProps.zoom;
-
-    // Exception for these parameters -- needs to re-render chart
-    if (!zoom && !isEqual(pick(nextProps, otherKeys), pick(this.props, otherKeys))) {
-      return true;
-    }
-
-    if (zoom && useShortInterval(nextProps) !== useShortInterval(this.props)) {
-      return true;
-    }
-
-    // do not update if we are zooming or if period via props does not change
-    if (zoom || isEqualWithDates(currentPeriod, nextPeriod)) {
-      return false;
-    }
-
-    return true;
-  }
-
   componentDidUpdate() {
     if (this.props.disabled) {
       return;
@@ -146,7 +113,6 @@ class ChartZoom extends React.Component {
           period,
           start: startFormatted,
           end: endFormatted,
-          zoom: '1',
         },
         this.props.router
       );
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index b36a6e2e37..79b4ea0564 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -152,7 +152,6 @@ class OrganizationEvents extends AsyncView {
         <Panel>
           <EventsChart
             query={location.query.query}
-            zoom={!!location.query.zoom}
             organization={organization}
             onZoom={this.handleZoom}
           />
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index d288b534c3..b7a1c4899b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -1,9 +1,12 @@
+import {isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import {t} from 'app/locale';
 import ChartZoom from 'app/components/charts/chartZoom';
 import LineChart from 'app/components/charts/lineChart';
+import LoadingPanel, {LoadingMask} from 'app/views/organizationEvents/loadingPanel';
 import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
@@ -13,6 +16,57 @@ import EventsRequest from './utils/eventsRequest';
 
 const DEFAULT_GET_CATEGORY = () => t('Events');
 
+class EventsLineChart extends React.Component {
+  static propTypes = {
+    loading: PropTypes.bool,
+    reloading: PropTypes.bool,
+    releaseSeries: PropTypes.array,
+    zoomRenderProps: PropTypes.object,
+    timeseriesData: PropTypes.array,
+    previousTimeseriesData: PropTypes.object,
+  };
+
+  shouldComponentUpdate(nextProps) {
+    if (nextProps.reloading || !nextProps.timeseriesData) {
+      return false;
+    }
+
+    if (isEqual(this.props.timeseriesData, nextProps.timeseriesData)) {
+      return false;
+    }
+
+    return true;
+  }
+
+  render() {
+    const {
+      loading, // eslint-disable-line no-unused-vars
+      reloading, // eslint-disable-line no-unused-vars
+      releaseSeries,
+      zoomRenderProps,
+      timeseriesData,
+      previousTimeseriesData,
+      ...props
+    } = this.props;
+
+    return (
+      <LineChart
+        {...props}
+        {...zoomRenderProps}
+        series={[...timeseriesData, ...releaseSeries]}
+        seriesOptions={{
+          showSymbol: false,
+        }}
+        previousPeriod={previousTimeseriesData ? [previousTimeseriesData] : null}
+        grid={{
+          left: '30px',
+          right: '18px',
+        }}
+      />
+    );
+  }
+}
+
 class EventsChart extends React.Component {
   static propTypes = {
     api: PropTypes.object,
@@ -22,39 +76,42 @@ class EventsChart extends React.Component {
   };
 
   render() {
-    const {period, utc, query} = this.props;
+    const {api, period, utc, query, ...props} = this.props;
 
     return (
-      <ChartZoom {...this.props}>
+      <ChartZoom period={period} utc={utc} {...props}>
         {({interval, ...zoomRenderProps}) => (
           <EventsRequest
-            {...this.props}
+            {...props}
+            api={api}
+            period={period}
             interval={interval}
-            showLoading
+            showLoading={false}
             query={query}
             getCategory={DEFAULT_GET_CATEGORY}
             includePrevious={!!period}
           >
-            {({timeseriesData, previousTimeseriesData}) => {
+            {({loading, reloading, timeseriesData, previousTimeseriesData}) => {
               return (
-                <ReleaseSeries api={this.props.api}>
+                <ReleaseSeries api={api}>
                   {({releaseSeries}) => {
+                    if (loading && !reloading) {
+                      return <LoadingPanel data-test-id="events-request-loading" />;
+                    }
+
                     return (
-                      <LineChart
-                        {...zoomRenderProps}
-                        utc={utc}
-                        series={[...timeseriesData, ...releaseSeries]}
-                        seriesOptions={{
-                          showSymbol: false,
-                        }}
-                        previousPeriod={
-                          previousTimeseriesData ? [previousTimeseriesData] : null
-                        }
-                        grid={{
-                          left: '30px',
-                          right: '18px',
-                        }}
-                      />
+                      <React.Fragment>
+                        <TransparentLoadingMask visible={reloading} />
+                        <EventsLineChart
+                          {...zoomRenderProps}
+                          loading={loading}
+                          reloading={reloading}
+                          utc={utc}
+                          releaseSeries={releaseSeries}
+                          timeseriesData={timeseriesData}
+                          previousTimeseriesData={previousTimeseriesData}
+                        />
+                      </React.Fragment>
                     );
                   }}
                 </ReleaseSeries>
@@ -75,13 +132,15 @@ const EventsChartContainer = withGlobalSelection(
       };
 
       render() {
-        const {datetime, projects, environments} = this.props.selection;
+        const {selection, ...props} = this.props;
+        const {datetime, projects, environments} = selection;
+
         return (
           <EventsChart
             {...datetime}
             project={projects || []}
             environment={environments || []}
-            {...this.props}
+            {...props}
           />
         );
       }
@@ -91,3 +150,8 @@ const EventsChartContainer = withGlobalSelection(
 
 export default EventsChartContainer;
 export {EventsChart};
+
+const TransparentLoadingMask = styled(LoadingMask)`
+  ${p => !p.visible && 'display: none;'} opacity: 0.4;
+  z-index: 1;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 421a84334f..4ba0ce5f07 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -35,7 +35,6 @@ class OrganizationEventsContainer extends React.Component {
       query: getParams({
         ...(location.query || {}),
         query,
-        zoom: null,
       }),
     });
   };
@@ -47,7 +46,7 @@ class OrganizationEventsContainer extends React.Component {
       <Feature features={['events']} renderDisabled>
         <GlobalSelectionHeader
           organization={organization}
-          resetParamsOnChange={['zoom', 'cursor']}
+          resetParamsOnChange={['cursor']}
         />
         <PageContent>
           <Body>
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx b/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
index a269e56778..d0bddcd22f 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
@@ -26,3 +26,4 @@ const LoadingPanel = styled(props => (
 `;
 
 export default LoadingPanel;
+export {LoadingMask};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
index f0e627951a..8f8fa4c8f2 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
@@ -267,7 +267,7 @@ class EventsRequest extends React.PureComponent {
     const {timeseriesData, reloading} = this.state;
 
     // Is "loading" if data is null
-    const loading = this.props.loading || reloading || timeseriesData === null;
+    const loading = this.props.loading || timeseriesData === null;
 
     if (showLoading && loading) {
       return <LoadingPanel data-test-id="events-request-loading" />;
@@ -286,6 +286,7 @@ class EventsRequest extends React.PureComponent {
 
     return children({
       loading,
+      reloading,
 
       // timeseries data
       timeseriesData: transformedTimeseriesData,
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 02c4c13f0c..15399ffe5a 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -168,7 +168,6 @@ describe('OrganizationEventsErrors', function() {
         ...router.location,
         query: {
           ...router.location.query,
-          zoom: '1',
         },
       };
 
@@ -195,32 +194,34 @@ describe('OrganizationEventsErrors', function() {
       mockRouterPush(wrapper, router);
 
       // XXX: Note this spy happens AFTER initial render!
-      chartRender = jest.spyOn(wrapper.find('ChartZoom').instance(), 'render');
       tableRender = jest.spyOn(wrapper.find('EventsTable').instance(), 'render');
     });
 
     afterAll(function() {
-      chartRender.mockRestore();
+      if (chartRender) {
+        chartRender.mockRestore();
+      }
+
       tableRender.mockRestore();
     });
 
     it('zooms using chart', async function() {
       expect(tableRender).toHaveBeenCalledTimes(0);
-      expect(chartRender).toHaveBeenCalledTimes(0);
 
       await tick();
       wrapper.update();
 
+      chartRender = jest.spyOn(wrapper.find('LineChart').instance(), 'render');
+
       doZoom(wrapper.find('EventsChart').first(), chart);
       await tick();
       wrapper.update();
 
-      // After zooming, chart should not re-render, but table does
-      expect(chartRender).toHaveBeenCalledTimes(0);
+      // After zooming, line chart should re-render once, but table does
+      expect(chartRender).toHaveBeenCalledTimes(1);
       expect(tableRender).toHaveBeenCalledTimes(3);
 
       newParams = {
-        zoom: '1',
         start: '2018-11-29T00:00:00',
         end: '2018-12-02T00:00:00',
       };
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
index df2e615f15..4dadf130da 100644
--- a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
@@ -62,29 +62,6 @@ describe('EventsChart', function() {
     expect(render).toHaveBeenCalledTimes(1);
   });
 
-  it('does not re-render if zoomed', function() {
-    expect(render).toHaveBeenCalledTimes(0);
-    doZoom(wrapper, chart);
-    let newParams = {
-      period: null,
-      start: '2018-11-29T00:00:00',
-      end: '2018-12-02T00:00:00',
-      zoom: '1',
-    };
-    expect(updateParams).toHaveBeenCalledWith(newParams, router);
-    expect(render).toHaveBeenCalledTimes(0);
-    wrapper.setProps({
-      period: newParams.period,
-      start: getLocalDateObject(newParams.start),
-      end: getLocalDateObject(newParams.end),
-      zoom: true,
-    });
-    expect(render).toHaveBeenCalledTimes(0);
-    wrapper.update();
-
-    expect(render).toHaveBeenCalledTimes(0);
-  });
-
   it('has correct history entries when zooming', function() {
     let newParams;
     const chartZoomInstance = wrapper.find('ChartZoom').instance();
@@ -126,18 +103,14 @@ describe('EventsChart', function() {
       period: null,
       start: '2018-11-29T00:00:00',
       end: '2018-12-02T00:00:00',
-      zoom: '1',
     };
     expect(updateParams).toHaveBeenCalledWith(newParams, router);
     wrapper.setProps({
       period: newParams.period,
       start: getLocalDateObject(newParams.start),
       end: getLocalDateObject(newParams.end),
-      zoom: true,
     });
     wrapper.update();
-
-    expect(render).toHaveBeenCalledTimes(0);
   });
 
   it('updates url params when restoring zoom level on chart', function() {
@@ -165,18 +138,15 @@ describe('EventsChart', function() {
       period: '14d',
       start: null,
       end: null,
-      zoom: '1',
     };
     expect(updateParams).toHaveBeenCalledWith(newParams, router);
     wrapper.setProps({
       period: '14d',
       start: null,
       end: null,
-      zoom: true,
     });
     wrapper.update();
 
     expect(chartZoomInstance.history).toHaveLength(0);
-    expect(render).toHaveBeenCalledTimes(0);
   });
 });
