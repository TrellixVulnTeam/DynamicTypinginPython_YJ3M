commit 9db3bd6d4a27a4ce18e0cb8691055961b6254705
Author: David Wang <davidw1339@gmail.com>
Date:   Fri Nov 15 14:40:14 2019 -0800

    feat(ui): Persist teams/ and projects/ across lightweight - heavyweight navigation (#15619)
    
    When a user navigates to a lightweight organization page they will be able to see content a lot faster. However to navigate into a heavyweight organization page the user will need to have organization.projects and organization.teams which are backgrounded requests. If you navigated out of the lightweight org page and those projects/ and teams/ requests hadn't finished then you would be forced to sit through a complete heavyweight organization fetch (~10 sec for large customers) even if projects/ and teams/ were maybe a second or two from finishing. With these changes, that api request is persisted and the organization context has a more complex condition for loading.

diff --git a/src/sentry/static/sentry/app/actionCreators/organization.jsx b/src/sentry/static/sentry/app/actionCreators/organization.jsx
index fb0269a708..835694ad29 100644
--- a/src/sentry/static/sentry/app/actionCreators/organization.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/organization.jsx
@@ -1,9 +1,11 @@
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 
+import {Client} from 'app/api';
 import OrganizationActions from 'app/actions/organizationActions';
-import TeamStore from 'app/stores/teamStore';
+import ProjectActions from 'app/actions/projectActions';
 import ProjectsStore from 'app/stores/projectsStore';
-
+import TeamActions from 'app/actions/teamActions';
+import TeamStore from 'app/stores/teamStore';
 /**
  * Fetches an organization's details with an option for the detailed representation
  * with teams and projects
@@ -36,6 +38,19 @@ export async function fetchOrganizationDetails(api, slug, detailed, silent) {
     if (detailed) {
       TeamStore.loadInitialData(org.teams);
       ProjectsStore.loadInitialData(org.projects);
+    } else {
+      // create a new client so the request is not cancelled
+      const uncancelableApi = new Client();
+      const [projects, teams] = await Promise.all([
+        uncancelableApi.requestPromise(`/organizations/${slug}/projects/`, {
+          query: {
+            all_projects: 1,
+          },
+        }),
+        uncancelableApi.requestPromise(`/organizations/${slug}/teams/`),
+      ]);
+      ProjectActions.loadProjects(projects);
+      TeamActions.loadTeams(teams);
     }
   } catch (err) {
     OrganizationActions.fetchOrgError(err);
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 66e3444ba2..3e4c60e28e 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -19,7 +19,6 @@ import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import OrganizationStore from 'app/stores/organizationStore';
 import ProjectActions from 'app/actions/projectActions';
-import TeamActions from 'app/actions/teamActions';
 import SentryTypes from 'app/sentryTypes';
 import Sidebar from 'app/components/sidebar';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
@@ -146,9 +145,25 @@ const OrganizationContext = createReactClass({
     );
   },
 
+  isLoading() {
+    // In the absence of an organization slug, the loading state should be
+    // derived from this.props.organizationsLoading from OrganizationsStore
+    if (!this.getOrganizationSlug()) {
+      return this.props.organizationsLoading;
+    }
+    // The following loading logic exists because we could either be waiting for
+    // the whole organization object to come in or just the teams and projects.
+    const {loading, error, organization} = this.state;
+    const {detailed} = this.props;
+    return (
+      loading ||
+      (!error &&
+        (detailed && (!organization || !organization.projects || !organization.teams)))
+    );
+  },
+
   async fetchData() {
     if (!this.getOrganizationSlug()) {
-      this.setState({loading: this.props.organizationsLoading});
       return;
     }
     // fetch from the store, then fetch from the API if necessary
@@ -159,15 +174,9 @@ const OrganizationContext = createReactClass({
     fetchOrganizationDetails(
       this.props.api,
       this.getOrganizationSlug(),
-      this.props.detailed
+      this.props.detailed,
+      true // silent, to not reset a lightweight org that was fetched
     );
-    // create a request for all teams if in lightweight org
-    if (!this.props.detailed) {
-      const teams = await this.props.api.requestPromise(
-        this.getOrganizationTeamsEndpoint()
-      );
-      TeamActions.loadTeams(teams);
-    }
   },
 
   loadOrganization(orgData) {
@@ -239,10 +248,6 @@ const OrganizationContext = createReactClass({
     return `/organizations/${this.getOrganizationSlug()}/`;
   },
 
-  getOrganizationTeamsEndpoint() {
-    return `/organizations/${this.getOrganizationSlug()}/teams/`;
-  },
-
   getTitle() {
     if (this.state.organization) {
       return this.state.organization.name;
@@ -277,7 +282,7 @@ const OrganizationContext = createReactClass({
   },
 
   render() {
-    if (this.state.loading) {
+    if (this.isLoading()) {
       return (
         <LoadingIndicator triangle>
           {t('Loading data for your organization.')}
diff --git a/src/sentry/static/sentry/app/views/organizationDetails/lightWeightInstallPromptBanner.jsx b/src/sentry/static/sentry/app/views/organizationDetails/lightWeightInstallPromptBanner.jsx
index a643cc6500..96e6322822 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails/lightWeightInstallPromptBanner.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails/lightWeightInstallPromptBanner.jsx
@@ -4,30 +4,22 @@ import React from 'react';
 import InstallPromptBanner from 'app/views/organizationDetails/installPromptBanner';
 
 import SentryTypes from 'app/sentryTypes';
-import Projects from 'app/utils/projects';
+import withProjects from 'app/utils/withProjects';
 
 class LightWeightInstallPromptBanner extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
-    teams: PropTypes.arrayOf(SentryTypes.Team),
-    loadingTeams: PropTypes.bool,
-    error: PropTypes.instanceOf(Error),
+    projects: PropTypes.arrayOf(SentryTypes.Team),
+    loadingProjects: PropTypes.bool,
   };
 
-  renderChildren = ({projects, fetching}) => {
-    if (fetching) {
+  render() {
+    const {projects, loadingProjects} = this.props;
+    if (loadingProjects) {
       return null;
     }
     return <InstallPromptBanner {...this.props} projects={projects} />;
-  };
-
-  render() {
-    return (
-      <Projects orgId={this.props.organization.slug} allProjects>
-        {this.renderChildren}
-      </Projects>
-    );
   }
 }
 
-export default LightWeightInstallPromptBanner;
+export default withProjects(LightWeightInstallPromptBanner);
diff --git a/tests/js/spec/actionCreators/organization.spec.jsx b/tests/js/spec/actionCreators/organization.spec.jsx
index ea4652ff79..fcc9a6f1ef 100644
--- a/tests/js/spec/actionCreators/organization.spec.jsx
+++ b/tests/js/spec/actionCreators/organization.spec.jsx
@@ -57,6 +57,14 @@ describe('OrganizationActionCreator', function() {
       url: `/organizations/${lightOrg.slug}/`,
       body: lightOrg,
     });
+    const getProjectsMock = MockApiClient.addMockResponse({
+      url: `/organizations/${lightOrg.slug}/projects/`,
+      body: [],
+    });
+    const getTeamsMock = MockApiClient.addMockResponse({
+      url: `/organizations/${lightOrg.slug}/teams/`,
+      body: [],
+    });
 
     fetchOrganizationDetails(api, lightOrg.slug, false);
     await tick();
@@ -66,6 +74,14 @@ describe('OrganizationActionCreator', function() {
       `/organizations/${lightOrg.slug}/`,
       expect.anything()
     );
+    expect(getProjectsMock).toHaveBeenCalledWith(
+      `/organizations/${lightOrg.slug}/projects/`,
+      expect.anything()
+    );
+    expect(getTeamsMock).toHaveBeenCalledWith(
+      `/organizations/${lightOrg.slug}/teams/`,
+      expect.anything()
+    );
     expect(OrganizationActions.update).toHaveBeenCalledWith(lightOrg);
     expect(OrganizationsActionCreator.setActiveOrganization).toHaveBeenCalled();
 
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index f9991c108d..4ea40e77ed 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -86,6 +86,7 @@ describe('OrganizationContext', function() {
     expect(OrganizationActionCreator.fetchOrganizationDetails).toHaveBeenCalledWith(
       api,
       'org-slug',
+      true,
       true
     );
     expect(GlobalSelectionStore.loadInitialData).toHaveBeenCalledWith(org, {});
diff --git a/tests/js/spec/views/organizationDetails/lightWeightInstallPromptBanner.spec.jsx b/tests/js/spec/views/organizationDetails/lightWeightInstallPromptBanner.spec.jsx
index c7b0a31de4..c780d3e193 100644
--- a/tests/js/spec/views/organizationDetails/lightWeightInstallPromptBanner.spec.jsx
+++ b/tests/js/spec/views/organizationDetails/lightWeightInstallPromptBanner.spec.jsx
@@ -1,23 +1,20 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import LightWeightInstallPromptBanner from 'app/views/organizationDetails/lightWeightInstallPromptBanner';
+import ProjectsStore from 'app/stores/projectsStore';
 
 describe('LightWeightInstallPromptBanner', function() {
   it('renders', async function() {
     const project1 = TestStubs.Project();
     const project2 = TestStubs.Project({firstEvent: null});
     const organization = TestStubs.Organization({slug: 'org-slug'});
-    const getProjectsMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/projects/',
-      body: [project1, project2],
-    });
+    ProjectsStore.loadInitialData([project1, project2]);
     const wrapper = mountWithTheme(
       <LightWeightInstallPromptBanner organization={organization} />,
       TestStubs.routerContext()
     );
     await tick();
     wrapper.update();
-    expect(getProjectsMock).toHaveBeenCalled();
     expect(wrapper.find('StyledAlert').exists()).toBe(true);
     expect(wrapper.find('a').text()).toContain('Start capturing errors');
   });
