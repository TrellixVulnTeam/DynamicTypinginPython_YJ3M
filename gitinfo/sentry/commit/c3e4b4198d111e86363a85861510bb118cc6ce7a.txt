commit c3e4b4198d111e86363a85861510bb118cc6ce7a
Author: Mark Story <mark@sentry.io>
Date:   Tue May 5 14:36:12 2020 -0400

    feat(perf-views) Add apdex + throughput visualization (#18596)
    
    * feat(perf-views) Add apdex + throughput visualization
    
    Display apdex + throughput together as a linked timeseries with release
    data. This view can be helpful for figuring how if/how a release has
    effected your application's throughput, or if you've impacted apdex and
    by proxy response times with recent changes.
    
    * Fix tsc error

diff --git a/src/sentry/static/sentry/app/components/charts/transitionChart.tsx b/src/sentry/static/sentry/app/components/charts/transitionChart.tsx
index d2c1414644..93e03c5b7a 100644
--- a/src/sentry/static/sentry/app/components/charts/transitionChart.tsx
+++ b/src/sentry/static/sentry/app/components/charts/transitionChart.tsx
@@ -2,10 +2,14 @@ import React from 'react';
 
 import LoadingPanel from 'app/views/events/loadingPanel';
 
+const defaultProps = {
+  height: '200px',
+};
+
 type Props = {
   reloading: boolean;
   loading: boolean;
-};
+} & typeof defaultProps;
 
 type State = {
   prevReloading: boolean;
@@ -14,6 +18,8 @@ type State = {
 };
 
 class TransitionChart extends React.Component<Props, State> {
+  static defaultProps = defaultProps;
+
   state = {
     prevReloading: this.props.reloading,
     prevLoading: this.props.loading,
@@ -81,10 +87,10 @@ class TransitionChart extends React.Component<Props, State> {
   }
 
   render() {
-    const {loading, reloading} = this.props;
+    const {height, loading, reloading} = this.props;
 
     if (loading && !reloading) {
-      return <LoadingPanel data-test-id="events-request-loading" />;
+      return <LoadingPanel height={height} data-test-id="events-request-loading" />;
     }
 
     // We make use of the key prop to explicitly remount the children
diff --git a/src/sentry/static/sentry/app/views/events/loadingPanel.jsx b/src/sentry/static/sentry/app/views/events/loadingPanel.jsx
index 8f153695ad..63f690cb6e 100644
--- a/src/sentry/static/sentry/app/views/events/loadingPanel.jsx
+++ b/src/sentry/static/sentry/app/views/events/loadingPanel.jsx
@@ -11,10 +11,14 @@ const LoadingPanel = styled(props => (
   flex: 1;
   flex-shrink: 0;
   overflow: hidden;
-  height: 200px;
+  height: ${p => p.height};
   position: relative;
   border-color: transparent;
   margin-bottom: 0;
 `;
 
+LoadingPanel.defaultProps = {
+  height: '200px',
+};
+
 export default LoadingPanel;
diff --git a/src/sentry/static/sentry/app/views/performance/charts/index.tsx b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
index df3d1eb7f6..c5850e1ce7 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
@@ -17,6 +17,7 @@ import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
 
+import {PERFORMANCE_TERMS} from '../constants';
 import {HeaderContainer, HeaderTitle, StyledIconQuestion, ErrorPanel} from '../styles';
 import Chart from './chart';
 import Footer from './footer';
@@ -25,13 +26,12 @@ const YAXIS_OPTIONS = [
   {
     label: 'Apdex',
     value: 'apdex(300)',
-    tooltip:
-      'Apdex is a ratio of satisfactory response times to unsatisfactory response times.',
+    tooltip: PERFORMANCE_TERMS.apdex,
   },
   {
     label: 'Throughput',
     value: 'rpm()',
-    tooltip: 'Throughput is the number of recorded transactions per minute (tpm).',
+    tooltip: PERFORMANCE_TERMS.rpm,
   },
 ];
 
diff --git a/src/sentry/static/sentry/app/views/performance/constants.tsx b/src/sentry/static/sentry/app/views/performance/constants.tsx
new file mode 100644
index 0000000000..09b9825280
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/constants.tsx
@@ -0,0 +1,8 @@
+import {t} from 'app/locale';
+
+export const PERFORMANCE_TERMS: Record<string, string> = {
+  apdex: t(
+    'Apdex is a ratio of satisfactory response times to unsatisfactory response times.'
+  ),
+  rpm: t('Throughput is the number of recorded transactions per minute (tpm).'),
+};
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/apdexThroughputChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/apdexThroughputChart.tsx
new file mode 100644
index 0000000000..a4a66ec412
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/apdexThroughputChart.tsx
@@ -0,0 +1,196 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import * as ReactRouter from 'react-router';
+
+import {OrganizationSummary} from 'app/types';
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import Tooltip from 'app/components/tooltip';
+import AreaChart from 'app/components/charts/areaChart';
+import ChartZoom from 'app/components/charts/chartZoom';
+import ErrorPanel from 'app/components/charts/components/errorPanel';
+import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
+import TransitionChart from 'app/components/charts/transitionChart';
+import ReleaseSeries from 'app/components/charts/releaseSeries';
+import {getInterval} from 'app/components/charts/utils';
+import {IconWarning} from 'app/icons';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
+import {PERFORMANCE_TERMS} from 'app/views/performance/constants';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
+import EventView from 'app/utils/discover/eventView';
+import withApi from 'app/utils/withApi';
+import {decodeScalar} from 'app/utils/queryString';
+import theme from 'app/utils/theme';
+
+import {HeaderTitleLegend, StyledIconQuestion} from '../styles';
+
+const QUERY_KEYS = [
+  'environment',
+  'project',
+  'query',
+  'start',
+  'end',
+  'statsPeriod',
+] as const;
+
+type ViewProps = Pick<EventView, typeof QUERY_KEYS[number]>;
+
+type Props = ReactRouter.WithRouterProps &
+  ViewProps & {
+    api: Client;
+    organization: OrganizationSummary;
+  };
+
+const YAXIS_VALUES = ['apdex(300)', 'rpm()'];
+
+/**
+ * Display a transaction's throughput and apdex over time.
+ */
+class ApdexThroughputChart extends React.Component<Props> {
+  render() {
+    const {
+      api,
+      project,
+      environment,
+      organization,
+      query,
+      statsPeriod,
+      router,
+    } = this.props;
+
+    const start = this.props.start
+      ? getUtcToLocalDateObject(this.props.start)
+      : undefined;
+
+    const end = this.props.end ? getUtcToLocalDateObject(this.props.end) : undefined;
+    const utc = decodeScalar(router.location.query.utc);
+
+    const colors = theme.charts.getColorPalette(2);
+    const chartOptions = {
+      height: 460,
+      grid: [
+        {
+          top: '40px',
+          left: '10px',
+          right: '10px',
+          height: '200px',
+        },
+        {
+          top: '260px',
+          left: '10px',
+          right: '10px',
+          height: '200px',
+        },
+      ],
+      axisPointer: {
+        // Link the two series x-axis together.
+        link: [{xAxisIndex: [0, 1]}],
+      },
+      xAxes: [
+        {
+          gridIndex: 0,
+          type: 'time',
+        },
+        {
+          gridIndex: 1,
+          type: 'time',
+        },
+      ],
+      yAxes: [{gridIndex: 0}, {gridIndex: 1}],
+      utc,
+      isGroupedByDate: true,
+      showTimeInTooltip: true,
+      colors: [colors[0], colors[1]],
+    };
+
+    const datetimeSelection = {
+      start: start || null,
+      end: end || null,
+      period: statsPeriod,
+    };
+
+    return (
+      <React.Fragment>
+        <HeaderTitleLegend key="apdex">
+          {t('Apdex')}
+          <Tooltip position="top" title={PERFORMANCE_TERMS.apdex}>
+            <StyledIconQuestion size="sm" />
+          </Tooltip>
+        </HeaderTitleLegend>
+        <MiddleHeaderTitleLegend key="rpm">
+          {t('Throughput')}
+          <Tooltip position="top" title={PERFORMANCE_TERMS.rpm}>
+            <StyledIconQuestion size="sm" />
+          </Tooltip>
+        </MiddleHeaderTitleLegend>
+        <ChartZoom
+          router={router}
+          period={statsPeriod}
+          projects={project}
+          environments={environment}
+          xAxisIndex={[0, 1]}
+        >
+          {zoomRenderProps => (
+            <EventsRequest
+              api={api}
+              organization={organization}
+              period={statsPeriod}
+              project={[...project]}
+              environment={[...environment]}
+              start={start}
+              end={end}
+              interval={getInterval(datetimeSelection, true)}
+              showLoading={false}
+              query={query}
+              includePrevious={false}
+              yAxis={YAXIS_VALUES}
+            >
+              {({results, errored, loading, reloading}) => {
+                if (errored) {
+                  return (
+                    <ErrorPanel>
+                      <IconWarning color={theme.gray2} size="lg" />
+                    </ErrorPanel>
+                  );
+                }
+                const series = results
+                  ? results.map((values, i: number) => ({
+                      ...values,
+                      yAxisIndex: i,
+                      xAxisIndex: i,
+                    }))
+                  : [];
+
+                return (
+                  <ReleaseSeries utc={utc} api={api} projects={project}>
+                    {({releaseSeries}) => (
+                      <TransitionChart
+                        loading={loading}
+                        reloading={reloading}
+                        height="460px"
+                      >
+                        <TransparentLoadingMask visible={reloading} />
+                        <AreaChart
+                          {...zoomRenderProps}
+                          {...chartOptions}
+                          series={[...series, ...releaseSeries]}
+                        />
+                      </TransitionChart>
+                    )}
+                  </ReleaseSeries>
+                );
+              }}
+            </EventsRequest>
+          )}
+        </ChartZoom>
+      </React.Fragment>
+    );
+  }
+}
+
+const MiddleHeaderTitleLegend = styled(HeaderTitleLegend)`
+  position: absolute;
+  top: 260px;
+`;
+
+export default withApi(ReactRouter.withRouter(ApdexThroughputChart));
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
index e0fa969756..ca3aa34d95 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
@@ -15,6 +15,7 @@ import {
 import OptionSelector from 'app/components/charts/optionSelector';
 
 import {ChartContainer} from '../styles';
+import ApdexThroughputChart from './apdexThroughputChart';
 import DurationChart from './durationChart';
 import LatencyChart from './latencyChart';
 import DurationPercentileChart from './durationPercentileChart';
@@ -23,10 +24,12 @@ enum DisplayModes {
   DURATION_PERCENTILE = 'durationpercentile',
   DURATION = 'duration',
   LATENCY = 'latency',
+  APDEX_THROUGHPUT = 'apdexthroughput',
 }
 
 const DISPLAY_OPTIONS: SelectValue<string>[] = [
   {value: DisplayModes.DURATION, label: t('Duration Breakdown')},
+  {value: DisplayModes.APDEX_THROUGHPUT, label: t('Apdex, Throughput')},
   {value: DisplayModes.DURATION_PERCENTILE, label: t('Duration Percentiles')},
   {value: DisplayModes.LATENCY, label: t('Latency Distribution')},
 ];
@@ -81,6 +84,17 @@ class TransactionSummaryCharts extends React.Component<Props> {
               statsPeriod={eventView.statsPeriod}
             />
           )}
+          {display === DisplayModes.APDEX_THROUGHPUT && (
+            <ApdexThroughputChart
+              organization={organization}
+              query={eventView.query}
+              project={eventView.project}
+              environment={eventView.environment}
+              start={eventView.start}
+              end={eventView.end}
+              statsPeriod={eventView.statsPeriod}
+            />
+          )}
           {display === DisplayModes.DURATION_PERCENTILE && (
             <DurationPercentileChart
               organization={organization}
