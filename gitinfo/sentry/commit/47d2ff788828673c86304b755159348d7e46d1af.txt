commit 47d2ff788828673c86304b755159348d7e46d1af
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Oct 8 14:34:36 2019 -0700

    feat(login): Add request organization access (#14899)

diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index 9954a4eb71..daae8f3d1c 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -194,6 +194,10 @@ body.auth {
     flex: 1;
   }
 
+  .auth-join-request {
+    padding-top: 20px;
+  }
+
   .auth-provider-column {
     width: 46%;
     padding-left: 30px;
diff --git a/src/sentry/templates/sentry/organization-login.html b/src/sentry/templates/sentry/organization-login.html
index df495b1b4c..81aad377f8 100644
--- a/src/sentry/templates/sentry/organization-login.html
+++ b/src/sentry/templates/sentry/organization-login.html
@@ -81,6 +81,11 @@
                 <a class="secondary" href="{% url 'sentry-account-recover' %}">{% trans "Lost your password?" %}</a>
               </div>
             </form>
+            {% if join_request_link %}
+              <div class="auth-join-request">{% trans "No access? "%}
+                <a href="{{ join_request_link }}">{% trans "Request to Join." %}</a>
+              </div>
+            {% endif %}
           </div>
           {% if github_login_link or vsts_login_link %}
           <div class="auth-provider-column">
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 152231e2bd..7bba10febe 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -9,6 +9,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.cache import never_cache
 
+from sentry import experiments
 from sentry.api.invite_helper import ApiInviteHelper, remove_invite_cookie
 from sentry.auth.superuser import is_active_superuser
 from sentry.constants import WARN_SESSION_EXPIRED
@@ -21,6 +22,8 @@ from sentry.utils.sdk import capture_exception
 
 ERR_NO_SSO = _("The organization does not exist or does not have Single Sign-On enabled.")
 
+JOIN_REQUEST_EXPERIMENT = "JoinRequestExperiment"
+
 
 # Stores callbacks that are called to get additional template context data before the login page
 # is rendered. Callbacks are called in any order. If an error is encountered in a callback it is
@@ -77,6 +80,19 @@ class AuthLoginView(BaseView):
     def can_register(self, request):
         return bool(auth.has_user_registration() or request.session.get("can_register"))
 
+    def get_join_request_link(self, organization):
+        if not organization:
+            return None
+
+        assignment = experiments.get(org=organization, experiment_name=JOIN_REQUEST_EXPERIMENT)
+        if assignment != 1:
+            return None
+
+        if organization.get_option("sentry:join_requests") is False:
+            return None
+
+        return reverse("sentry-join-request", args=[organization.slug])
+
     def get_next_uri(self, request):
         next_uri_fallback = None
         if request.session.get("_next") is not None:
@@ -178,6 +194,7 @@ class AuthLoginView(BaseView):
             "organization": organization,
             "register_form": register_form,
             "CAN_REGISTER": can_register,
+            "join_request_link": self.get_join_request_link(organization),
         }
         context.update(additional_context.run_callbacks(request))
 
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index db929007ac..63b8a10695 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -25,6 +25,12 @@ class AuthLoginTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed("sentry/login.html")
 
+    def test_cannot_request_access(self):
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        assert resp.context["join_request_link"] is None
+
     def test_renders_session_expire_message(self):
         self.client.cookies["session_expired"] = "1"
         resp = self.client.get(self.path)
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 3636d16958..b09b576f58 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -1,49 +1,77 @@
 from __future__ import absolute_import
 
+from exam import fixture
+from mock import patch
 from django.core.urlresolvers import reverse
 
-from sentry.models import AuthIdentity, AuthProvider, OrganizationMember, UserEmail
+from sentry.models import (
+    AuthIdentity,
+    AuthProvider,
+    OrganizationOption,
+    OrganizationMember,
+    UserEmail,
+)
 from sentry.testutils import AuthProviderTestCase
 
 
 # TODO(dcramer): this is an integration test and repeats tests from
 # core auth_login
 class OrganizationAuthLoginTest(AuthProviderTestCase):
-    def test_renders_basic(self):
-        organization = self.create_organization(name="foo", owner=self.user)
+    @fixture
+    def organization(self):
+        return self.create_organization(name="foo", owner=self.user)
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
+    @fixture
+    def path(self):
+        return reverse("sentry-auth-organization", args=[self.organization.slug])
 
+    def test_renders_basic(self):
         self.login_as(self.user)
-
-        resp = self.client.get(path)
+        resp = self.client.get(self.path)
 
         assert resp.status_code == 200
-
         self.assertTemplateUsed(resp, "sentry/organization-login.html")
 
         assert resp.context["login_form"]
-        assert resp.context["organization"] == organization
+        assert resp.context["organization"] == self.organization
         assert "provider_key" not in resp.context
+        assert resp.context["join_request_link"] is None
 
-    def test_renders_session_expire_message(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        path = reverse("sentry-auth-organization", args=[organization.slug])
+    @patch("sentry.experiments.get", return_value=1)
+    def test_get_request_join_link_with_experiment(self, mock_experiment):
+        self.login_as(self.user)
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        assert resp.context["join_request_link"] == reverse(
+            "sentry-join-request", args=[self.organization.slug]
+        )
+
+    @patch("sentry.experiments.get", return_value=1)
+    def test_cannot_get_request_join_link_with_setting_disabled(self, mock_experiment):
+        OrganizationOption.objects.create(
+            organization_id=self.organization.id, key="sentry:join_requests", value=False
+        )
 
+        self.login_as(self.user)
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        assert resp.context["join_request_link"] is None
+
+    def test_renders_session_expire_message(self):
         self.client.cookies["session_expired"] = "1"
-        resp = self.client.get(path)
+        resp = self.client.get(self.path)
 
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, "sentry/organization-login.html")
         assert len(resp.context["messages"]) == 1
 
     def test_flow_as_anonymous(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
-
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -71,21 +99,19 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert not user.is_managed
         assert user.flags.newsletter_consent_prompt
 
-        member = OrganizationMember.objects.get(organization=organization, user=user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
 
     def test_flow_as_existing_user_with_new_account(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("bar@example.com")
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
         self.login_as(user)
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -103,48 +129,42 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert resp["Location"] == "http://testserver" + reverse("sentry-login")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
-
         assert user == auth_identity.user
 
-        member = OrganizationMember.objects.get(organization=organization, user=user)
-
+        member = OrganizationMember.objects.get(organization=self.organization, user=user)
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
 
     def test_flow_as_existing_identity(self):
-        organization = self.create_organization(name="foo", owner=self.user)
         user = self.create_user("bar@example.com")
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         AuthIdentity.objects.create(auth_provider=auth_provider, user=user, ident="foo@example.com")
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
 
         path = reverse("sentry-auth-sso")
-
         resp = self.client.post(path, {"email": "foo@example.com"})
 
         assert resp.status_code == 302
         assert resp["Location"] == "http://testserver" + reverse("sentry-login")
 
     def test_flow_as_unauthenticated_existing_matched_user_no_merge(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("bar@example.com")
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
 
         path = reverse("sentry-auth-sso")
-
         resp = self.client.post(path, {"email": user.email})
 
         self.assertTemplateUsed(resp, "sentry/auth-confirm-identity.html")
@@ -158,7 +178,6 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert resp["Location"] == "http://testserver" + reverse("sentry-login")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
-
         new_user = auth_identity.user
         assert user.email == "bar@example.com"
         assert new_user != user
@@ -167,23 +186,22 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         # unset following new user creation
         assert not new_user.flags.newsletter_consent_prompt
 
-        member = OrganizationMember.objects.get(organization=organization, user=new_user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=new_user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
 
     def test_flow_as_unauthenticated_existing_matched_user_with_merge(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("bar@example.com")
 
         email = user.emails.all()[:1].get()
         email.is_verified = False
         email.save()
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -214,26 +232,24 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         new_user = auth_identity.user
         assert new_user == user
 
-        member = OrganizationMember.objects.get(organization=organization, user=user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
 
     def test_flow_as_unauthenticated_existing_matched_user_via_secondary_email(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("foo@example.com")
         UserEmail.objects.create(user=user, email="bar@example.com", is_verified=True)
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
 
         path = reverse("sentry-auth-sso")
-
         resp = self.client.post(path, {"email": user.email})
 
         self.assertTemplateUsed(resp, "sentry/auth-confirm-identity.html")
@@ -258,19 +274,18 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         new_user = auth_identity.user
         assert new_user == user
 
-        member = OrganizationMember.objects.get(organization=organization, user=user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
 
     def test_flow_as_unauthenticated_existing_unmatched_user_with_merge(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("foo@example.com")
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -301,23 +316,22 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         new_user = auth_identity.user
         assert new_user == user
 
-        member = OrganizationMember.objects.get(organization=organization, user=user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
 
     def test_flow_as_unauthenticated_existing_matched_user_with_merge_and_existing_identity(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("bar@example.com")
 
         auth_identity = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user, ident="adfadsf@example.com"
         )
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -350,7 +364,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         new_user = auth_identity.user
         assert new_user == user
 
-        member = OrganizationMember.objects.get(organization=organization, user=user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
@@ -361,17 +375,16 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         with a linked identity, this should claim that identity and create
         a new user account.
         """
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user = self.create_user("bar@example.com", is_active=False)
 
         auth_identity = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user, ident="adfadsf@example.com"
         )
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -397,7 +410,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         new_user = auth_identity.user
         assert new_user != user
 
-        member = OrganizationMember.objects.get(organization=organization, user=new_user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=new_user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
@@ -411,8 +424,9 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         This only works when the email is mapped to an identical identity.
         """
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
@@ -422,14 +436,12 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         )
 
         # they must be a member for the auto merge to happen
-        self.create_member(organization=organization, user=user)
+        self.create_member(organization=self.organization, user=user)
 
         # user needs to be logged in
         self.login_as(user)
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -453,7 +465,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         new_user = auth_identity.user
         assert new_user == user
 
-        member = OrganizationMember.objects.get(organization=organization, user=new_user)
+        member = OrganizationMember.objects.get(organization=self.organization, user=new_user)
 
         assert getattr(member.flags, "sso:linked")
         assert not getattr(member.flags, "sso:invalid")
@@ -465,8 +477,9 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         the identity automatically (without prompt) assuming the user is
         a member of the org.
         """
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
@@ -474,14 +487,12 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         AuthIdentity.objects.create(auth_provider=auth_provider, user=user, ident="bar@example.com")
 
         # they must be a member for the auto merge to happen
-        self.create_member(organization=organization, user=user)
+        self.create_member(organization=self.organization, user=user)
 
         # user needs to be logged in
         self.login_as(user)
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -503,18 +514,15 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         This is specifically testing an unauthenticated flow.
         """
-        organization = self.create_organization(name="foo", owner=self.user)
-        AuthProvider.objects.create(organization=organization, provider="dummy")
+        AuthProvider.objects.create(organization=self.organization, provider="dummy")
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
         user = self.create_user("bar@example.com", is_managed=False, password="")
         UserEmail.objects.filter(user=user, email="bar@example.com").update(is_verified=False)
-        self.create_member(organization=organization, user=user)
-
-        path = reverse("sentry-auth-organization", args=[organization.slug])
+        self.create_member(organization=self.organization, user=user)
 
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -532,8 +540,9 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         the ident changed from the SSO provider), we should be prompting to
         confirm their identity as they dont have membership.
         """
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
@@ -543,9 +552,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         # user needs to be logged in
         self.login_as(user)
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -570,8 +577,9 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         If bar is authenticating via SSO as bar@example.com, we should remove
         the existing entry attached to bar, and re-bind the entry owned by foo.
         """
-        organization = self.create_organization(name="foo", owner=self.user)
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
@@ -586,14 +594,12 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         identity2 = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user2, ident="adfadsf@example.com"
         )
-        member2 = self.create_member(user=user2, organization=organization)
+        member2 = self.create_member(user=user2, organization=self.organization)
 
         # user needs to be logged in
         self.login_as(user)
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
@@ -614,7 +620,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert identity2.ident == "adfadsf@example.com"
         assert identity2.user == user
 
-        member1 = OrganizationMember.objects.get(user=user, organization=organization)
+        member1 = OrganizationMember.objects.get(user=user, organization=self.organization)
         assert getattr(member1.flags, "sso:linked")
         assert not getattr(member1.flags, "sso:invalid")
 
@@ -623,16 +629,15 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert getattr(member2.flags, "sso:invalid")
 
     def test_flow_as_unauthenticated_existing_user_legacy_identity_migration(self):
-        organization = self.create_organization(name="foo", owner=self.user)
         user = self.create_user("bar@example.com")
-        auth_provider = AuthProvider.objects.create(organization=organization, provider="dummy")
+        auth_provider = AuthProvider.objects.create(
+            organization=self.organization, provider="dummy"
+        )
         user_ident = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user, ident="foo@example.com"
         )
 
-        path = reverse("sentry-auth-organization", args=[organization.slug])
-
-        resp = self.client.post(path, {"init": True})
+        resp = self.client.post(self.path, {"init": True})
 
         assert resp.status_code == 200
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
