commit 447aebcedb4496641c0719a6e26a7ed14985da2a
Author: Max Bittker <maxbittker@gmail.com>
Date:   Mon Feb 26 15:36:20 2018 -0800

    feat(actors): Assign Teams API (#7282)
    
    
    * backend changes for team assign
    
    * document api change

diff --git a/CHANGES b/CHANGES
index 10b59eaeae..70eb5d12f8 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@ Version 8.23 (Unreleased)
 -------------------------
 - Experimental implementation of Slack actions via a new Integrations and Identity API.
 - Display the organization setting that was updated, along with the old/new value, in the Audit Log.
+- Group and ProjectGroupIndex endpoints now return AssignedTo as an object with the keys `id`, `type`, and `name`, instead of a full UserDetails object.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index ad654d873e..bf562f8618 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -79,7 +79,7 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
         ).order_by('-datetime').select_related('user')
         # we select excess so we can filter dupes
         for item in activity_qs[:num * 2]:
-            sig = (item.type, item.ident, item.user_id)
+            sig = (item.type, item.ident, item.user_id, hash(frozenset(item.data.items())))
             # TODO: we could just generate a signature (hash(text)) for notes
             # so there's no special casing
             if item.type == Activity.NOTE:
@@ -272,8 +272,8 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
         :param string status: the new status for the issue.  Valid values
                               are ``"resolved"``, ``resolvedInNextRelease``,
                               ``"unresolved"``, and ``"ignored"``.
-        :param string assignedTo: the username of the user that should be
-                               assigned to this issue.
+        :param string assignedTo: the actor id (or username) of the user or team that should be
+                                  assigned to this issue.
         :param boolean hasSeen: in case this API call is invoked with a user
                                 context this allows changing of the flag
                                 that indicates if the user has seen the
@@ -289,17 +289,20 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
 
         # TODO(dcramer): we need to implement assignedTo in the bulk mutation
         # endpoint
-        response = client.put(
-            path='/projects/{}/{}/issues/'.format(
-                group.project.organization.slug,
-                group.project.slug,
-            ),
-            params={
-                'id': group.id,
-            },
-            data=request.DATA,
-            request=request,
-        )
+        try:
+            response = client.put(
+                path='/projects/{}/{}/issues/'.format(
+                    group.project.organization.slug,
+                    group.project.slug,
+                ),
+                params={
+                    'id': group.id,
+                },
+                data=request.DATA,
+                request=request,
+            )
+        except client.ApiError as e:
+            return Response(e.body, status=e.status_code)
 
         # if action was discard, there isn't a group to serialize anymore
         if discard:
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index c818267078..1d7431e397 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -14,8 +14,9 @@ from rest_framework.response import Response
 from sentry import features, search
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
-from sentry.api.fields import UserField
+from sentry.api.fields import ActorField, Actor
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.actor import ActorSerializer
 from sentry.api.serializers.models.group import (
     SUBSCRIPTION_REASON_MAP, StreamGroupSerializer)
 from sentry.constants import DEFAULT_SORT_OPTION
@@ -23,7 +24,7 @@ from sentry.db.models.query import create_or_update
 from sentry.models import (
     Activity, Environment, Group, GroupAssignee, GroupBookmark, GroupHash, GroupResolution,
     GroupSeen, GroupShare, GroupSnooze, GroupStatus, GroupSubscription, GroupSubscriptionReason,
-    GroupTombstone, Release, TOMBSTONE_FIELDS_FROM_GROUP, UserOption
+    GroupTombstone, Release, TOMBSTONE_FIELDS_FROM_GROUP, UserOption, User, Team
 )
 from sentry.models.event import Event
 from sentry.models.group import looks_like_short_id
@@ -159,16 +160,23 @@ class GroupValidator(serializers.Serializer):
     ignoreUserCount = serializers.IntegerField()
     # in minutes, max of one week
     ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)
-    assignedTo = UserField()
+    assignedTo = ActorField()
 
     # TODO(dcramer): remove in 9.0
     snoozeDuration = serializers.IntegerField()
 
     def validate_assignedTo(self, attrs, source):
         value = attrs[source]
-        if value and not self.context['project'].member_set.filter(user=value).exists():
+        if value and value.type is User and not self.context['project'].member_set.filter(
+                user_id=value.id).exists():
             raise serializers.ValidationError(
                 'Cannot assign to non-team member')
+
+        if value and value.type is Team and not self.context['project'].teams.filter(
+                id=value.id).exists():
+            raise serializers.ValidationError(
+                'Cannot assign to a team without access to the project')
+
         return attrs
 
     def validate(self, attrs):
@@ -225,7 +233,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                 user=acting_user, key='self_assign_issue', default='0'
             )
             if self_assign_issue == '1' and not group.assignee_set.exists():
-                result['assignedTo'] = extract_lazy_object(acting_user)
+                result['assignedTo'] = Actor(type=User, id=extract_lazy_object(acting_user).id)
 
     # statsPeriod=24h
     @attach_scenarios([list_project_issues_scenario])
@@ -394,7 +402,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
         :param int ignoreDuration: the number of minutes to ignore this issue.
         :param boolean isPublic: sets the issue to public or private.
         :param boolean merge: allows to merge or unmerge different issues.
-        :param string assignedTo: the username of the user that should be
+        :param string assignedTo: the actor id (or username) of the user or team that should be
                                   assigned to this issue.
         :param boolean hasSeen: in case this API call is invoked with a user
                                 context this allows changing of the flag
@@ -703,18 +711,14 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
                         activity.send_notification()
 
         if 'assignedTo' in result:
-            if result['assignedTo']:
+            assigned_actor = result['assignedTo']
+            if assigned_actor:
                 for group in group_list:
-                    GroupAssignee.objects.assign(
-                        group, result['assignedTo'], acting_user)
+                    resolved_actor = assigned_actor.resolve()
 
-                    if 'isSubscribed' not in result or result['assignedTo'] != request.user:
-                        GroupSubscription.objects.subscribe(
-                            group=group,
-                            user=result['assignedTo'],
-                            reason=GroupSubscriptionReason.assigned,
-                        )
-                result['assignedTo'] = serialize(result['assignedTo'])
+                    GroupAssignee.objects.assign(group, resolved_actor, acting_user)
+                result['assignedTo'] = serialize(
+                    assigned_actor.resolve(), acting_user, ActorSerializer())
             else:
                 for group in group_list:
                     GroupAssignee.objects.deassign(group, acting_user)
diff --git a/src/sentry/api/fields/actor.py b/src/sentry/api/fields/actor.py
index da72deda83..e7a7b6907e 100644
--- a/src/sentry/api/fields/actor.py
+++ b/src/sentry/api/fields/actor.py
@@ -2,13 +2,20 @@ from __future__ import absolute_import, print_function
 
 import six
 
-from collections import defaultdict, namedtuple
+from collections import defaultdict
 from rest_framework import serializers
 
 from sentry.models import User, Team
+from sentry.utils.auth import find_users
 
 
-class Actor(namedtuple('Actor', 'id type')):
+class Actor(object):
+    def __init__(self, id, type):
+        self.id = id
+        self.type = type
+
+    __slots__ = ['id', 'type']
+
     def get_actor_id(self):
         return '%s:%d' % (self.type.__name__.lower(), self.id)
 
@@ -23,9 +30,16 @@ class Actor(namedtuple('Actor', 'id type')):
         if actor_id.isdigit():
             return Actor(int(actor_id), User)
 
-        type_name, _, id = actor_id.partition(':')
+        if actor_id.startswith('user:'):
+            return cls(int(actor_id[5:]), User)
 
-        return cls(int(id), {'user': User, 'team': Team}[type_name])
+        if actor_id.startswith('team:'):
+            return cls(int(actor_id[5:]), Team)
+
+        try:
+            return Actor(find_users(actor_id)[0].id, User)
+        except IndexError:
+            raise serializers.ValidationError('Unable to resolve actor id')
 
     def resolve(self):
         return self.type.objects.get(id=self.id)
@@ -44,6 +58,24 @@ class Actor(namedtuple('Actor', 'id type')):
 
         return results
 
+    @classmethod
+    def resolve_dict(cls, actor_dict):
+        actors_by_type = defaultdict(list)
+        for actor in actor_dict.values():
+            actors_by_type[actor.type].append(actor)
+
+        resolved_actors = {}
+        for type, actors in actors_by_type.items():
+            resolved_actors[type] = {
+                actor.id: actor for actor in type.objects.filter(
+                    id__in=[a.id for a in actors]
+                )}
+
+        return {
+            key: resolved_actors[value.type][value.id]
+            for key, value in actor_dict.items()
+        }
+
 
 class ActorField(serializers.WritableField):
     def to_native(self, obj):
diff --git a/src/sentry/api/serializers/models/actor.py b/src/sentry/api/serializers/models/actor.py
new file mode 100644
index 0000000000..e2427d52e8
--- /dev/null
+++ b/src/sentry/api/serializers/models/actor.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+import six
+from sentry.api.serializers import Serializer
+from sentry.models import User, Team
+
+
+class ActorSerializer(Serializer):
+    def serialize(self, obj, attrs, *args, **kwargs):
+
+        if isinstance(obj, User):
+            actor_type = 'user'
+            name = obj.get_display_name()
+        elif isinstance(obj, Team):
+            actor_type = 'team'
+            name = obj.slug
+        else:
+            raise AssertionError('Invalid type to assign to: %r' % type(obj))
+
+        return {
+            'type': actor_type,
+            'id': six.text_type(obj.id),
+            'name': name,
+        }
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 2619033fad..2183aac0b6 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -11,6 +11,8 @@ from django.utils import timezone
 
 from sentry import tagstore, tsdb
 from sentry.api.serializers import Serializer, register, serialize
+from sentry.api.serializers.models.actor import ActorSerializer
+from sentry.api.fields.actor import Actor
 from sentry.constants import LOG_LEVELS, StatsPeriod
 from sentry.models import (
     Environment, Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution, GroupSeen, GroupSnooze,
@@ -137,12 +139,13 @@ class GroupSerializer(Serializer):
             seen_groups = {}
             subscriptions = defaultdict(lambda: (False, None))
 
-        assignees = dict(
-            (a.group_id, a.user)
-            for a in GroupAssignee.objects.filter(
+        assignees = {
+            a.group_id: a.assigned_actor() for a in
+            GroupAssignee.objects.filter(
                 group__in=item_list,
-            ).select_related('user')
-        )
+            )
+        }
+        resolved_assignees = Actor.resolve_dict(assignees)
 
         try:
             environment = self.environment_func()
@@ -235,7 +238,7 @@ class GroupSerializer(Serializer):
                 ignore_actor = None
 
             result[item] = {
-                'assigned_to': serialize(assignees.get(item.id)),
+                'assigned_to': resolved_assignees.get(item.id),
                 'is_bookmarked': item.id in bookmarks,
                 'subscription': subscriptions[item.id],
                 'has_seen': seen_groups.get(item.id, active_date) > active_date,
@@ -352,7 +355,7 @@ class GroupSerializer(Serializer):
             'type': obj.get_event_type(),
             'metadata': obj.get_event_metadata(),
             'numComments': obj.num_comments,
-            'assignedTo': attrs['assigned_to'],
+            'assignedTo': serialize(attrs['assigned_to'], user, ActorSerializer()),
             'isBookmarked': attrs['is_bookmarked'],
             'isSubscribed': is_subscribed,
             'subscriptionDetails': subscription_details,
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index e0a15187a5..da96cde0dc 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -6,7 +6,6 @@ sentry.models.groupassignee
 :license: BSD, see LICENSE for more details.
 """
 from __future__ import absolute_import
-
 import six
 
 from django.conf import settings
@@ -21,7 +20,13 @@ from sentry.signals import issue_assigned
 
 class GroupAssigneeManager(BaseManager):
     def assign(self, group, assigned_to, acting_user=None):
-        from sentry.models import User, Team
+        from sentry.models import User, Team, GroupSubscription, GroupSubscriptionReason
+
+        GroupSubscription.objects.subscribe_actor(
+            group=group,
+            actor=assigned_to,
+            reason=GroupSubscriptionReason.assigned,
+        )
 
         if isinstance(assigned_to, User):
             assignee_type = 'user'
@@ -118,3 +123,17 @@ class GroupAssignee(Model):
             not (self.user_id is None and self.team_id is None)
         ), 'Must have Team or User, not both'
         super(GroupAssignee, self).save(*args, **kwargs)
+
+    def assigned_actor_id(self):
+        if self.user:
+            return u"user:{}".format(self.user_id)
+
+        if self.team:
+            return u"team:{}".format(self.team_id)
+
+        raise NotImplementedError("Unkown Assignee")
+
+    def assigned_actor(self):
+        from sentry.api.fields.actor import Actor
+
+        return Actor.from_actor_id(self.assigned_actor_id())
diff --git a/src/sentry/plugins/sentry_mail/activity/assigned.py b/src/sentry/plugins/sentry_mail/activity/assigned.py
index d03cc3597c..4aa44ead28 100644
--- a/src/sentry/plugins/sentry_mail/activity/assigned.py
+++ b/src/sentry/plugins/sentry_mail/activity/assigned.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.models import User
+from sentry.models import User, Team
 
 from .base import ActivityEmail
 
@@ -12,25 +12,40 @@ class AssignedActivityEmail(ActivityEmail):
         return 'Assigned'
 
     def get_description(self):
-        # TODO(mattrobenolt): Handle when assignee is Team
-
         activity = self.activity
         data = activity.data
-        if activity.user_id and six.text_type(activity.user_id) == data['assignee']:
-            return u'{author} assigned {an issue} to themselves'
-
-        try:
-            assignee = User.objects.get_from_cache(id=data['assignee'])
-        except User.DoesNotExist:
-            pass
-        else:
-            return u'{author} assigned {an issue} to {assignee}', {
-                'assignee': assignee.get_display_name(),
-            }
-
-        if data.get('assigneeEmail'):
-            return u'{author} assigned {an issue} to {assignee}', {
-                'assignee': data['assigneeEmail'],
-            }
-
-        return u'{author} assigned {an issue} to an unknown user'
+
+        # legacy Activity objects from before assignable teams
+        if 'assigneeType' not in data or \
+                data['assigneeType'] == 'user':
+            if activity.user_id and six.text_type(activity.user_id) == data['assignee']:
+                return u'{author} assigned {an issue} to themselves'
+
+            try:
+                assignee = User.objects.get_from_cache(id=data['assignee'])
+            except User.DoesNotExist:
+                pass
+            else:
+                return u'{author} assigned {an issue} to {assignee}', {
+                    'assignee': assignee.get_display_name(),
+                }
+
+            if data.get('assigneeEmail'):
+                return u'{author} assigned {an issue} to {assignee}', {
+                    'assignee': data['assigneeEmail'],
+                }
+
+            return u'{author} assigned {an issue} to an unknown user'
+
+        if data['assigneeType'] == 'team':
+            try:
+                assignee_team = Team.objects.get(
+                    id=data['assignee'], organization=self.organization)
+            except Team.DoesNotExist:
+                return u'{author} assigned {an issue} to an unknown team'
+            else:
+                return u'{author} assigned {an issue} to the {assignee} team', {
+                    'assignee': assignee_team.slug,
+                }
+
+        raise NotImplementedError("Unknown Assignee Type ")
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index f37053b437..bc457273aa 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -10,6 +10,7 @@ import Duration from '../../components/duration';
 import Avatar from '../../components/avatar';
 import IssueLink from '../../components/issueLink';
 import MemberListStore from '../../stores/memberListStore';
+import TeamStore from '../../stores/teamStore';
 import TimeSince from '../../components/timeSince';
 import Version from '../../components/version';
 
@@ -222,6 +223,13 @@ class ActivityItem extends React.Component {
           issue: issueLink,
         });
       case 'assigned':
+        if (data.assigneeType == 'team') {
+          return tct('[author] assigned [issue] to the [assignee] Team', {
+            author,
+            issue: issueLink,
+            assignee: TeamStore.getById(data.assignee).name,
+          });
+        }
         let assignee;
         if (item.user && data.assignee === item.user.id) {
           return tct('[author] assigned [issue] to themselves', {
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 12217003bb..4b8d7235a3 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -105,6 +105,13 @@ export const Tag = PropTypes.shape({
   uniqueValues: PropTypes.number,
 });
 
+export const Actor = PropTypes.shape({
+  type: PropTypes.oneOf(['user', 'team']),
+  id: PropTypes.string.isRequired,
+  name: PropTypes.string.isRequired,
+  avatar: PropTypes.string.isRequired,
+});
+
 export const Project = PropTypes.shape({
   id: PropTypes.string.isRequired,
   name: PropTypes.string.isRequired,
@@ -181,6 +188,7 @@ let SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
   }),
+  Actor,
   Group,
   Event,
   Organization: PropTypes.shape({
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 148092a5fb..69ff16d128 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -280,6 +280,11 @@ function projectDisplayCompare(a, b) {
 export function sortProjects(projects) {
   return projects.sort(projectDisplayCompare);
 }
+
+//build actorIds
+export const buildUserId = id => `user:${id}`;
+export const buildTeamId = id => `team:${id}`;
+
 // re-export under utils
 export {parseLinkHeader, deviceNameMapper, Collection, PendingChangeQueue, CursorPoller};
 
@@ -304,6 +309,8 @@ export default {
   modelsEqual,
   valueIsEqual,
   parseLinkHeader,
+  buildUserId,
+  buildTeamId,
 
   // external imports
   deviceNameMapper,
diff --git a/src/sentry/static/sentry/app/utils/formatters.jsx b/src/sentry/static/sentry/app/utils/formatters.jsx
index d9125ec24e..18a0a00a4b 100644
--- a/src/sentry/static/sentry/app/utils/formatters.jsx
+++ b/src/sentry/static/sentry/app/utils/formatters.jsx
@@ -1,6 +1,6 @@
 export function userDisplayName(user) {
   let displayName = user.name;
-  if (user.email !== user.name) {
+  if (user.email && user.email !== user.name) {
     displayName += ' (' + user.email + ')';
   }
   return displayName;
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index c941d588b9..0e95bbf10a 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -18,6 +18,7 @@ import NoteInput from '../../components/activity/noteInput';
 
 import ConfigStore from '../../stores/configStore';
 import GroupStore from '../../stores/groupStore';
+import TeamStore from '../../stores/teamStore';
 import IndicatorStore from '../../stores/indicatorStore';
 import MemberListStore from '../../stores/memberListStore';
 
@@ -165,6 +166,12 @@ const GroupActivity = createReactClass({
       case 'first_seen':
         return t('%s first saw this issue', author);
       case 'assigned':
+        if (data.assigneeType == 'team') {
+          return t('%(author)s assigned this event to the %(assignee)s Team', {
+            author,
+            assignee: TeamStore.getById(data.assignee).name,
+          });
+        }
         let assignee;
         if (item.user && data.assignee === item.user.id) {
           assignee = 'themselves';
diff --git a/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
index 7b5dc47198..c71e75f38e 100644
--- a/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
@@ -41,7 +41,7 @@ const OrganizationStatOverview = createReactClass({
     let statsEndpoint = this.getOrganizationStatsEndpoint();
     this.api.request(statsEndpoint, {
       query: {
-        since: new Date().getTime() / 1000 - 3600 * 24,
+        since: Date.now() / 1000 - 3600 * 24,
         stat: 'rejected',
       },
       success: data => {
@@ -54,7 +54,7 @@ const OrganizationStatOverview = createReactClass({
     });
     this.api.request(statsEndpoint, {
       query: {
-        since: new Date().getTime() / 1000 - 3600 * 3,
+        since: Date.now() / 1000 - 3600 * 3,
         resolution: '1h',
         stat: 'received',
       },
diff --git a/src/sentry/templates/sentry/debug/mail/preview.html b/src/sentry/templates/sentry/debug/mail/preview.html
index 3ac83bdfe3..2ef7e20183 100644
--- a/src/sentry/templates/sentry/debug/mail/preview.html
+++ b/src/sentry/templates/sentry/debug/mail/preview.html
@@ -7,6 +7,7 @@
       <optgroup label="Activity">
         <option value="mail/assigned/">Assigned</option>
         <option value="mail/assigned/self/">Assigned (Self)</option>
+        <option value="mail/assigned/team/">Assigned (Team)</option>
         <option value="mail/note/">Note</option>
         <option value="mail/new-release/">Release</option>
         <option value="mail/regression/">Regression</option>
diff --git a/src/sentry/web/debug_urls.py b/src/sentry/web/debug_urls.py
index 5ccfac03bd..b4fd1f1ff6 100644
--- a/src/sentry/web/debug_urls.py
+++ b/src/sentry/web/debug_urls.py
@@ -6,7 +6,7 @@ from django.views.generic import TemplateView
 import sentry.web.frontend.debug.mail
 
 from sentry.web.frontend.debug.debug_assigned_email import (
-    DebugAssignedEmailView, DebugSelfAssignedEmailView
+    DebugAssignedEmailView, DebugSelfAssignedEmailView, DebugSelfAssignedTeamEmailView
 )
 from sentry.web.frontend.debug.debug_trigger_error import (DebugTriggerErrorView)
 from sentry.web.frontend.debug.debug_error_embed import (DebugErrorPageEmbedView)
@@ -51,6 +51,7 @@ urlpatterns = patterns(
     url(r'^debug/mail/new-user-feedback/$', DebugNewUserFeedbackEmailView.as_view()),
     url(r'^debug/mail/assigned/$', DebugAssignedEmailView.as_view()),
     url(r'^debug/mail/assigned/self/$', DebugSelfAssignedEmailView.as_view()),
+    url(r'^debug/mail/assigned/team/$', DebugSelfAssignedTeamEmailView.as_view()),
     url(r'^debug/mail/digest/$', sentry.web.frontend.debug.mail.digest),
     url(r'^debug/mail/report/$', sentry.web.frontend.debug.mail.report),
     url(r'^debug/mail/regression/$', DebugRegressionEmailView.as_view()),
diff --git a/src/sentry/web/frontend/debug/debug_assigned_email.py b/src/sentry/web/frontend/debug/debug_assigned_email.py
index 9ec291c1f1..f5feb77ba8 100644
--- a/src/sentry/web/frontend/debug/debug_assigned_email.py
+++ b/src/sentry/web/frontend/debug/debug_assigned_email.py
@@ -15,6 +15,7 @@ class DebugAssignedEmailView(ActivityMailDebugView):
             'data': {
                 'assignee': '10000000',
                 'assigneeEmail': 'foo@example.com',
+                'assigneeType': 'user',
             }
         }
 
@@ -27,5 +28,19 @@ class DebugSelfAssignedEmailView(ActivityMailDebugView):
             'data': {
                 'assignee': six.text_type(request.user.id),
                 'assigneeEmail': request.user.email,
+                'assigneeType': 'user',
+            }
+        }
+
+
+class DebugSelfAssignedTeamEmailView(ActivityMailDebugView):
+    def get_activity(self, request, event):
+        return {
+            'type': Activity.ASSIGNED,
+            'user': request.user,
+            'data': {
+                'assignee': '1',
+                'assigneeEmail': None,
+                'assigneeType': 'team',
             }
         }
diff --git a/tests/js/spec/views/organizationRateLimits.spec.jsx b/tests/js/spec/views/organizationRateLimits.spec.jsx
index 2b25fa0880..745296c9f3 100644
--- a/tests/js/spec/views/organizationRateLimits.spec.jsx
+++ b/tests/js/spec/views/organizationRateLimits.spec.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import {mount} from 'enzyme';
-
 import OrganizationStats from 'app/views/organizationStats';
 
 describe('OrganizationStats', function() {
@@ -24,10 +23,10 @@ describe('OrganizationStats', function() {
       TestStubs.routerContext()
     );
 
-    setTimeout(() => {
+    window.setImmediate(() => {
       wrapper.update();
       expect(wrapper).toMatchSnapshot();
       done();
-    }, 1);
+    });
   });
 });
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 546ad225e6..58f2ddc672 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -220,7 +220,7 @@ class GroupUpdateTest(APITestCase):
             is_active=True,
         ).exists()
 
-    def test_assign(self):
+    def test_assign_username(self):
         self.login_as(user=self.user)
 
         group = self.create_group()
@@ -265,6 +265,111 @@ class GroupUpdateTest(APITestCase):
 
         assert not GroupAssignee.objects.filter(group=group, user=self.user).exists()
 
+    def test_assign_id(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = '/api/0/issues/{}/'.format(group.id)
+
+        response = self.client.put(
+            url, data={
+                'assignedTo': self.user.id,
+            }, format='json'
+        )
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(group=group, user=self.user).exists()
+
+        assert Activity.objects.filter(
+            group=group,
+            user=self.user,
+            type=Activity.ASSIGNED,
+        ).count() == 1
+
+        response = self.client.put(url, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(group=group, user=self.user).exists()
+
+        assert GroupSubscription.objects.filter(
+            user=self.user,
+            group=group,
+            is_active=True,
+        ).exists()
+
+        response = self.client.put(
+            url, data={
+                'assignedTo': '',
+            }, format='json'
+        )
+
+        assert response.status_code == 200, response.content
+
+        assert not GroupAssignee.objects.filter(group=group, user=self.user).exists()
+
+    def test_assign_team(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        team = self.create_team(organization=group.project.organization, members=[self.user])
+        group.project.add_team(team)
+
+        url = '/api/0/issues/{}/'.format(group.id)
+
+        response = self.client.put(
+            url, data={
+                'assignedTo': u'team:{}'.format(team.id),
+            }, format='json'
+        )
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(group=group, team=team).exists()
+
+        assert Activity.objects.filter(
+            group=group,
+            type=Activity.ASSIGNED,
+        ).count() == 1
+
+        assert GroupSubscription.objects.filter(
+            user=self.user,
+            group=group,
+            is_active=True,
+        ).exists()
+
+        response = self.client.put(
+            url, data={
+                'assignedTo': '',
+            }, format='json'
+        )
+
+        assert response.status_code == 200, response.content
+
+        assert Activity.objects.filter(
+            group=group,
+        ).count() == 2
+
+        assert not GroupAssignee.objects.filter(group=group, team=team).exists()
+
+    def test_assign_unavailable_team(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        team = self.create_team(organization=group.project.organization, members=[self.user])
+
+        url = '/api/0/issues/{}/'.format(group.id)
+
+        response = self.client.put(
+            url, data={
+                'assignedTo': u'team:{}'.format(team.id),
+            }, format='json'
+        )
+
+        assert response.status_code == 400, response.content
+
     def test_mark_seen(self):
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 43189aec11..1eade9a6ea 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -427,6 +427,7 @@ class GroupUpdateTest(APITestCase):
 
         assert response.status_code == 200, response.data
         assert response.data['assignedTo']['id'] == six.text_type(user.id)
+        assert response.data['assignedTo']['type'] == 'user'
         assert response.data['status'] == 'resolved'
 
         assert GroupAssignee.objects.filter(group=group, user=user).exists()
@@ -467,6 +468,7 @@ class GroupUpdateTest(APITestCase):
         assert response.data['status'] == 'resolved'
         assert response.data['statusDetails']['inNextRelease']
         assert response.data['assignedTo']['id'] == six.text_type(self.user.id)
+        assert response.data['assignedTo']['type'] == 'user'
 
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.RESOLVED
@@ -1232,7 +1234,7 @@ class GroupUpdateTest(APITestCase):
 
         assert response.status_code == 200
         assert response.data['assignedTo']['id'] == six.text_type(user.id)
-
+        assert response.data['assignedTo']['type'] == 'user'
         assert GroupAssignee.objects.filter(group=group1, user=user).exists()
 
         assert not GroupAssignee.objects.filter(group=group2, user=user).exists()
@@ -1279,6 +1281,51 @@ class GroupUpdateTest(APITestCase):
 
         assert response.status_code == 400, response.content
 
+    def test_assign_team(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        other_member = self.create_user('bar@example.com')
+        team = self.create_team(
+            organization=group.project.organization, members=[
+                self.user, other_member])
+
+        group.project.add_team(team)
+
+        url = '{url}?id={group.id}'.format(
+            url=self.path,
+            group=group,
+        )
+        response = self.client.put(
+            url, data={
+                'assignedTo': u'team:{}'.format(team.id),
+            }
+        )
+
+        assert response.status_code == 200
+        assert response.data['assignedTo']['id'] == six.text_type(team.id)
+        assert response.data['assignedTo']['type'] == 'team'
+        assert GroupAssignee.objects.filter(group=group, team=team).exists()
+
+        assert Activity.objects.filter(
+            group=group,
+            type=Activity.ASSIGNED,
+        ).count() == 1
+
+        assert GroupSubscription.objects.filter(
+            group=group,
+            is_active=True,
+        ).count() == 2
+
+        response = self.client.put(
+            url, data={
+                'assignedTo': '',
+            }, format='json'
+        )
+
+        assert response.status_code == 200, response.content
+        assert response.data['assignedTo'] is None
+
     def test_discard(self):
         group1 = self.create_group(checksum='a' * 32, is_public=True)
         group2 = self.create_group(checksum='b' * 32, is_public=True)
diff --git a/tests/sentry/api/serializers/test_fields.py b/tests/sentry/api/serializers/test_fields.py
index da1a6f6d9c..7ba3623ef8 100644
--- a/tests/sentry/api/serializers/test_fields.py
+++ b/tests/sentry/api/serializers/test_fields.py
@@ -5,7 +5,6 @@ from rest_framework import serializers
 from sentry.testutils import TestCase
 
 from sentry.api.serializers.rest_framework import ListField, ActorField
-from sentry.api.fields.actor import Actor
 from sentry.models import User, Team
 
 
@@ -72,9 +71,9 @@ class TestActorField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
-        assert serializer.object == {
-            'actor_field': Actor(id=1, type=User)
-        }
+
+        assert serializer.object['actor_field'].type == User
+        assert serializer.object['actor_field'].id == 1
 
     def test_legacy_user_fallback(self):
         data = {
@@ -83,9 +82,9 @@ class TestActorField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
-        assert serializer.object == {
-            'actor_field': Actor(id=1, type=User)
-        }
+
+        assert serializer.object['actor_field'].type == User
+        assert serializer.object['actor_field'].id == 1
 
     def test_team(self):
         data = {
@@ -94,9 +93,8 @@ class TestActorField(TestCase):
 
         serializer = DummySerializer(data=data)
         assert serializer.is_valid()
-        assert serializer.object == {
-            'actor_field': Actor(id=1, type=Team)
-        }
+        assert serializer.object['actor_field'].type == Team
+        assert serializer.object['actor_field'].id == 1
 
     def test_validates(self):
         data = {
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index ef50e09f75..28136694d5 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -314,6 +314,29 @@ class MailPluginTest(TestCase):
             user=self.create_user('foo@example.com'),
             data={
                 'assignee': six.text_type(self.user.id),
+                'assigneeType': 'user',
+            },
+        )
+
+        with self.tasks():
+            self.plugin.notify_about_activity(activity)
+
+        assert len(mail.outbox) == 1
+
+        msg = mail.outbox[0]
+
+        assert msg.subject == 'Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
+        assert msg.to == [self.user.email]
+
+    def test_assignment_team(self):
+        activity = Activity.objects.create(
+            project=self.project,
+            group=self.group,
+            type=Activity.ASSIGNED,
+            user=self.create_user('foo@example.com'),
+            data={
+                'assignee': six.text_type(self.project.teams.first().id),
+                'assigneeType': 'team',
             },
         )
 
