commit 4baf96fb95ad197cdf9458ab6bbfd1b9434498c3
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Mar 4 11:05:33 2019 -0800

    ref(discover): Refactor Discover project access checks (#12251)

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 5259cccec0..c6dcf54929 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -7,18 +7,15 @@ from copy import deepcopy
 
 from rest_framework import serializers
 from rest_framework.response import Response
-from rest_framework.exceptions import PermissionDenied
 
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.utils import get_date_range_from_params, InvalidParams
-from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
+from sentry.models import Project, ProjectStatus
 from sentry.utils import snuba
-from sentry import roles
 from sentry import features
-from sentry.auth.superuser import is_active_superuser
 
 
 class OrganizationDiscoverQueryPermission(OrganizationPermission):
@@ -113,15 +110,6 @@ class DiscoverQuerySerializer(serializers.Serializer):
 
         return data
 
-    def validate_projects(self, attrs, source):
-        projects = attrs[source]
-        org_projects = set(project[0] for project in self.context['projects'])
-
-        if not set(projects).issubset(org_projects):
-            raise PermissionDenied
-
-        return attrs
-
     def validate_conditions(self, attrs, source):
         # Handle error (exception_stacks), stack(exception_frames)
         if attrs.get(source):
@@ -282,24 +270,6 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                 projects,
             ), status=200)
 
-    def has_projects_access(self, user, organization, requested_projects):
-        member = OrganizationMember.objects.get(
-            user=user, organization=organization)
-
-        has_global_access = roles.get(member.role).is_global
-
-        if has_global_access:
-            return True
-
-        member_project_list = Project.objects.filter(
-            organization=organization,
-            teams__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-            ).values('team'),
-        ).values_list('id', flat=True)
-
-        return set(requested_projects).issubset(set(member_project_list))
-
     def post(self, request, organization):
 
         if not features.has('organizations:discover', organization, actor=request.user):
@@ -307,17 +277,18 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
 
         requested_projects = request.DATA['projects']
 
-        if not is_active_superuser(request) and not self.has_projects_access(
-            request.user, organization, requested_projects
-        ):
-            return Response("Invalid projects", status=400)
-
-        projects = Project.objects.filter(
+        projects = list(Project.objects.filter(
+            id__in=requested_projects,
             organization=organization,
             status=ProjectStatus.VISIBLE,
-        ).values_list('id', 'slug')
+        ))
+
+        has_invalid_projects = len(projects) < len(requested_projects)
+
+        if has_invalid_projects or not request.access.has_projects_access(projects):
+            return Response("Invalid projects", status=403)
 
-        serializer = DiscoverQuerySerializer(data=request.DATA, context={'projects': projects})
+        serializer = DiscoverQuerySerializer(data=request.DATA)
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
@@ -330,7 +301,7 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
 
         projects_map = {}
         for project in projects:
-            projects_map[project[0]] = project[1]
+            projects_map[project.id] = project.slug
 
         # Make sure that all selected fields are in the group by clause if there
         # are aggregations
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index c049ec8468..d90bc51113 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -129,6 +129,12 @@ class BaseAccess(object):
             return True
         return project in self.projects
 
+    def has_projects_access(self, projects):
+        """
+        Returns bool representing if a user should have access to every requested project
+        """
+        return all([self.has_project_access(project) for project in projects])
+
     def has_project_membership(self, project):
         """
         Return bool representing if a user has explicit membership for the given project.
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index accddade49..37cfece42d 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -22,9 +22,27 @@ class FromUserTest(TestCase):
         assert not result.has_team_access(team)
         assert not result.has_team_scope(team, 'project:read')
         assert not result.has_project_access(project)
+        assert not result.has_projects_access([project])
         assert not result.has_project_scope(project, 'project:read')
         assert not result.has_project_membership(project)
 
+    def test_mixed_access(self):
+        user = self.create_user()
+        organization = self.create_organization(flags=0)  # disable default allow_joinleave
+        team = self.create_team(organization=organization)
+        team_no_access = self.create_team(organization=organization)
+        project = self.create_project(organization=organization, teams=[team])
+        project_no_access = self.create_project(organization=organization, teams=[team_no_access])
+        self.create_member(
+            organization=organization,
+            user=user,
+            teams=[team],
+        )
+        result = access.from_user(user, organization)
+        assert result.has_project_access(project)
+        assert not result.has_project_access(project_no_access)
+        assert not result.has_projects_access([project, project_no_access])
+
     def test_owner_all_teams(self):
         user = self.create_user()
         organization = self.create_organization(owner=self.user)
@@ -43,6 +61,7 @@ class FromUserTest(TestCase):
         assert result.has_team_access(team)
         assert result.has_team_scope(team, 'project:read')
         assert result.has_project_access(project)
+        assert result.has_projects_access([project])
         assert result.has_project_scope(project, 'project:read')
         assert result.has_project_membership(project)
 
@@ -67,6 +86,7 @@ class FromUserTest(TestCase):
         assert not result.has_team_access(team)
         assert not result.has_team_scope(team, 'project:read')
         assert not result.has_project_access(project)
+        assert not result.has_projects_access([project])
         assert not result.has_project_scope(project, 'project:read')
         assert not result.has_project_membership(project)
 
@@ -92,6 +112,7 @@ class FromUserTest(TestCase):
         assert result.has_team_access(team)
         assert result.has_team_scope(team, 'project:read')
         assert result.has_project_access(project)
+        assert result.has_projects_access([project])
         assert result.has_project_scope(project, 'project:read')
         assert not result.has_project_membership(project)
 
@@ -113,6 +134,7 @@ class FromUserTest(TestCase):
         assert result.has_team_access(team)
         assert result.has_team_scope(team, 'project:read')
         assert result.has_project_access(project)
+        assert result.has_projects_access([project])
         assert result.has_project_scope(project, 'project:read')
         assert result.has_project_membership(project)
 
@@ -221,5 +243,6 @@ class DefaultAccessTest(TestCase):
         assert not result.has_team_access(Mock())
         assert not result.has_team_scope(Mock(), 'project:read')
         assert not result.has_project_access(Mock())
+        assert not result.has_projects_access([Mock()])
         assert not result.has_project_scope(Mock(), 'project:read')
         assert not result.has_project_membership(Mock())
