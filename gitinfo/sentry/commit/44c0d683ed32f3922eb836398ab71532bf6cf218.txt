commit 44c0d683ed32f3922eb836398ab71532bf6cf218
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Jan 11 15:31:01 2018 -0800

    fix: Handle NULL bytes due to psycopg2 upgrade
    
    See: https://github.com/psycopg/psycopg2/pull/459
    Fixes SENTRY-5Q5

diff --git a/src/sentry/db/postgres/base.py b/src/sentry/db/postgres/base.py
index ca240c456a..2142d43933 100644
--- a/src/sentry/db/postgres/base.py
+++ b/src/sentry/db/postgres/base.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from six import string_types
 import psycopg2 as Database
 
 # Some of these imports are unused, but they are inherited from other engines
@@ -15,6 +16,12 @@ from .operations import DatabaseOperations
 __all__ = ('DatabaseWrapper', )
 
 
+def escape_null(value):
+    if not isinstance(value, string_types):
+        return value
+    return value.replace('\x00', '\\x00')
+
+
 class CursorWrapper(object):
     """
     A wrapper around the postgresql_psycopg2 backend which handles various events
@@ -36,7 +43,24 @@ class CursorWrapper(object):
     @less_shitty_error_messages
     def execute(self, sql, params=None):
         if params is not None:
-            return self.cursor.execute(sql, params)
+            try:
+                return self.cursor.execute(sql, params)
+            except ValueError as e:
+                # In psycopg2 2.7+, behavior was introduced where a
+                # NULL byte in a parameter would start raising a ValueError.
+                # psycopg2 chose to do this rather than let Postgres silently
+                # truncate the data, which is it's behavior when it sees a
+                # NULL byte. But for us, we'd rather munge the value so it's
+                # somewhat legible rather than error. Considering this is better
+                # behavior than the database truncating, seems good to do this
+                # rather than attempting to sanitize all data inputs now manually.
+
+                # Note: This message is brittle, but it's currently hardcoded into
+                # psycopg2 for this behavior. If anything changes, we're choosing to
+                # address that later rather than potentially catch incorrect behavior.
+                if e.message != 'A string literal cannot contain NUL (0x00) characters.':
+                    raise
+                return self.cursor.execute(sql, [escape_null(param) for param in params])
         return self.cursor.execute(sql)
 
     @capture_transaction_exceptions
diff --git a/tests/sentry/db/postgres/__init__.py b/tests/sentry/db/postgres/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/db/postgres/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/db/postgres/test_base.py b/tests/sentry/db/postgres/test_base.py
new file mode 100644
index 0000000000..8c74fefe98
--- /dev/null
+++ b/tests/sentry/db/postgres/test_base.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+import pytest
+from sentry.utils.db import is_postgres
+from sentry.testutils import TestCase
+
+
+def psycopg2_version():
+    import psycopg2
+    version = psycopg2.__version__.split()[0].split('.')
+    return tuple(map(int, version))
+
+
+@pytest.mark.skipif(
+    not is_postgres() or psycopg2_version() < (2, 7),
+    reason='Test requires Postgres and psycopg 2.7+',
+)
+class CursorWrapperTestCase(TestCase):
+    def test_null_bytes(self):
+        from django.db import connection
+        cursor = connection.cursor()
+        cursor.execute('SELECT %s', [b'Ma\x00tt'])
+        assert cursor.fetchone()[0] == b'Ma\\x00tt'
+        cursor.execute('SELECT %s', [u'Ma\x00tt'])
+        assert cursor.fetchone()[0] == u'Ma\\x00tt'
