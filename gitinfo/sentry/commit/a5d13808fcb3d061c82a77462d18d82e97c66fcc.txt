commit a5d13808fcb3d061c82a77462d18d82e97c66fcc
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 29 23:46:10 2015 -0700

    Remove project-wide public setting

diff --git a/CHANGES b/CHANGES
index 4dc36de427..6b2af706d7 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,9 @@
+Version 8.0.0
+-------------
+
+- The ``public`` setting on projects has been removed
+  - This also removes ``SENTRY_ALLOW_PUBLIC_PROJECTS``
+
 Version 7.7.0
 -------------
 
diff --git a/docs/config.rst b/docs/config.rst
index be1273b248..99f06a7a5c 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -45,18 +45,6 @@ The following keys control the authentication support.
 
         SENTRY_PUBLIC = True
 
-.. describe:: SENTRY_ALLOW_PUBLIC_PROJECTS
-
-    Should Sentry allow users without the 'sentry.change_project'
-    permission to make projects globally public?
-
-    Defaults to ``True`` (can set public status).
-
-    ::
-
-        SENTRY_ALLOW_PUBLIC_PROJECTS = False
-
-
 .. describe:: SENTRY_ALLOW_ORIGIN
 
     If provided, Sentry will set the Access-Control-Allow-Origin header to
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index a251438559..67fdf9da5f 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -9,7 +9,6 @@ from __future__ import absolute_import
 
 import six
 
-from django.conf import settings
 from django.db.models import Q
 from functools import wraps
 
@@ -105,25 +104,6 @@ def can_create_projects(user, team):
     return True
 
 
-@requires_login
-def can_set_public_projects(user):
-    """
-    Returns a boolean describing whether a user has the ability to
-    change the ``public`` attribute of projects.
-    """
-    if user.is_superuser:
-        return True
-
-    result = plugins.first('has_perm', user, 'set_project_public')
-    if result is None:
-        result = settings.SENTRY_ALLOW_PUBLIC_PROJECTS
-
-    if result is False:
-        return result
-
-    return True
-
-
 @requires_login
 def can_manage_org(user, organization):
     if user.is_superuser:
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index bc3296d1a5..78f88befe1 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -55,9 +55,6 @@
         {{ form.scrub_data|as_crispy_field }}
         {{ form.sensitive_fields|as_crispy_field }}
         {{ form.scrub_ip_address|as_crispy_field }}
-        {% if form.public %}
-        {{ form.public|as_crispy_field }}
-        {% endif %}
       </div>
     </div>
 
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index fd3665cc01..5a92ef5614 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -11,7 +11,7 @@ from uuid import uuid1
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
 )
-from sentry.permissions import can_remove_project, can_set_public_projects
+from sentry.permissions import can_remove_project
 from sentry.plugins import plugins
 from sentry.web.forms.fields import (
     CustomTypedChoiceField, RangeField, OriginsField
@@ -27,8 +27,6 @@ class EditProjectForm(forms.ModelForm):
         widget=forms.TextInput(attrs={'placeholder': _('Production')}))
     platform = forms.ChoiceField(choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
         widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}))
-    public = forms.BooleanField(required=False,
-        help_text=_('Imply public access to any event for this project.'))
     team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
@@ -59,7 +57,7 @@ class EditProjectForm(forms.ModelForm):
     )
 
     class Meta:
-        fields = ('name', 'platform', 'public', 'team', 'slug')
+        fields = ('name', 'platform', 'team', 'slug')
         model = Project
 
     def __init__(self, request, organization, team_list, data, instance, *args, **kwargs):
@@ -68,8 +66,6 @@ class EditProjectForm(forms.ModelForm):
         self.organization = organization
         self.team_list = team_list
 
-        if not can_set_public_projects(request.user):
-            del self.fields['public']
         self.fields['team'].choices = self.get_team_choices(team_list, instance.team)
         self.fields['team'].widget.choices = self.fields['team'].choices
 
diff --git a/tests/sentry/permissions/__init__.py b/tests/sentry/permissions/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
deleted file mode 100644
index 58e3992ca8..0000000000
--- a/tests/sentry/permissions/tests.py
+++ /dev/null
@@ -1,28 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from django.contrib.auth.models import AnonymousUser
-from sentry.permissions import can_set_public_projects
-from sentry.models import User
-from sentry.testutils import TestCase
-
-
-class CanSetProjectPublicTest(TestCase):
-    def test_superuser_is_true(self):
-        user = User(id=100000, is_superuser=True)
-        self.assertTrue(can_set_public_projects(user))
-
-    def test_anonymous_is_false(self):
-        user = AnonymousUser()
-        self.assertFalse(can_set_public_projects(user))
-
-    def test_allow_creation_is_true(self):
-        with self.settings(SENTRY_ALLOW_PUBLIC_PROJECTS=True):
-            user = User(id=100000)
-            self.assertTrue(can_set_public_projects(user))
-
-    def test_dont_allow_creation_is_false(self):
-        with self.settings(SENTRY_ALLOW_PUBLIC_PROJECTS=False):
-            user = User(id=100000)
-            self.assertFalse(can_set_public_projects(user))
