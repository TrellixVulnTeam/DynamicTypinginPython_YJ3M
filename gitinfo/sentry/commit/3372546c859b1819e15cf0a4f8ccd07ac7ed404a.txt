commit 3372546c859b1819e15cf0a4f8ccd07ac7ed404a
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jun 14 13:49:19 2018 -0700

    feat(integration): Added OrganizationIntegraiton and ProjectIntegration to Integration base (#8737)
    
    * Added project_integration to base
    
    * Added the org integration as well. I'll have a merge conflict anyway..
    
    * Added tests to base.py

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 26fbce6f06..a6365133df 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -16,7 +16,7 @@ from .exceptions import (
     ApiHostError, ApiError, ApiUnauthorized, IntegrationError, UnsupportedResponseType
 )
 from .constants import ERR_UNAUTHORIZED, ERR_INTERNAL, ERR_UNSUPPORTED_RESPONSE_TYPE
-from sentry.models import Identity, OrganizationIntegration
+from sentry.models import Identity, OrganizationIntegration, ProjectIntegration
 
 IntegrationMetadata = namedtuple('IntegrationMetadata', [
     'description',  # A markdown description of the integration
@@ -81,14 +81,14 @@ class IntegrationProvider(PipelineProvider):
     features = frozenset()
 
     @classmethod
-    def get_installation(cls, model, organization_id=None, **kwargs):
+    def get_installation(cls, model, organization_id=None, project_id=None, **kwargs):
         if cls.integration_cls is None:
             raise NotImplementedError
 
         if cls.needs_default_identity is True and organization_id is None:
             raise NotImplementedError('%s requires an organization_id' % cls.name)
 
-        return cls.integration_cls(model, organization_id, **kwargs)
+        return cls.integration_cls(model, organization_id, project_id, **kwargs)
 
     def get_logger(self):
         return logging.getLogger('sentry.integration.%s' % (self.key, ))
@@ -158,9 +158,23 @@ class Integration(object):
 
     logger = logging.getLogger('sentry.integrations')
 
-    def __init__(self, model, organization_id=None):
+    def __init__(self, model, organization_id=None, project_id=None):
         self.model = model
-        self.organization_id = organization_id
+        if organization_id is not None:
+            self.org_integration = OrganizationIntegration.objects.get(
+                organization_id=organization_id,
+                integration_id=model.id,
+            )
+        else:
+            self.org_integration = None
+
+        if project_id is not None:
+            self.project_integration = ProjectIntegration.objects.get(
+                project_id=project_id,
+                integration_id=model.id,
+            )
+        else:
+            self.project_integration = None
 
     def get_organization_config(self):
         """
@@ -187,15 +201,10 @@ class Integration(object):
         """
         For Integrations that rely solely on user auth for authentication
         """
-        if self.organization_id is None:
-            raise NotImplementedError
-
-        org_integration = OrganizationIntegration.objects.get(
-            organization_id=self.organization_id,
-            integration_id=self.model.id,
-        )
-        identity = Identity.objects.get(id=org_integration.default_auth_id)
+        if self.org_integration is None:
+            raise NotImplementedError('%s requires an organization_id' % self.name)
 
+        identity = Identity.objects.get(id=self.org_integration.default_auth_id)
         return identity
 
     def error_message_from_json(self, data):
diff --git a/tests/sentry/integrations/test_base.py b/tests/sentry/integrations/test_base.py
new file mode 100644
index 0000000000..261e88d035
--- /dev/null
+++ b/tests/sentry/integrations/test_base.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+import pytest
+
+from sentry.models import Integration as IntegrationModel, Identity, IdentityProvider
+from sentry.integrations import Integration
+from sentry.testutils import TestCase
+
+
+class IntegrationTestCase(TestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.organization = self.create_organization()
+        self.project = self.create_project()
+
+        self.model = IntegrationModel.objects.create(
+            provider='integrations:base',
+            external_id='base_external_id',
+            name='base_name',
+        )
+
+        self.identity = Identity.objects.create(
+            idp=IdentityProvider.objects.create(
+                type='base',
+                config={}
+            ),
+            user=self.user,
+            external_id='base_id',
+            data={
+                'access_token': '11234567'
+            }
+        )
+        self.org_integration = self.model.add_organization(self.organization.id, self.identity.id)
+        self.project_integration = self.model.add_project(self.project.id)
+
+    def test_no_context(self):
+        integration = Integration(self.model)
+        integration.name = 'Base'
+
+        assert integration.org_integration is None
+        assert integration.project_integration is None
+
+        with pytest.raises(NotImplementedError):
+            integration.get_default_identity()
+
+    def test_with_context(self):
+        integration = Integration(self.model, self.organization.id, self.project.id)
+
+        assert integration.model == self.model
+        assert integration.org_integration == self.org_integration
+        assert integration.project_integration == self.project_integration
+        assert integration.get_default_identity() == self.identity
