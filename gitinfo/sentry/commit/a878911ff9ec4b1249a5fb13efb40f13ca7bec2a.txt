commit a878911ff9ec4b1249a5fb13efb40f13ca7bec2a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jan 15 13:20:16 2019 -0800

    ref(issues): Refactor group user feedback (#11515)
    
    Make user feedback component resuable for organization issue details.

diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupUserFeedback.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupUserFeedback.jsx
index 134b4799e3..83a48bfb11 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupUserFeedback.jsx
@@ -1,141 +1,26 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
-import {Link} from 'react-router';
-import {omit, isEqual} from 'lodash';
-import qs from 'query-string';
 
 import SentryTypes from 'app/sentryTypes';
-import ApiMixin from 'app/mixins/apiMixin';
-import GroupState from 'app/mixins/groupState';
-import EventUserFeedback from 'app/components/events/userFeedback';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t, tct} from 'app/locale';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import {Panel} from 'app/components/panels';
 
-const GroupUserFeedback = createReactClass({
-  displayName: 'GroupUserFeedback',
+import GroupUserFeedback from '../shared/groupUserFeedback';
 
-  propTypes: {
+class ProjectGroupUserFeedback extends React.Component {
+  static propTypes = {
+    group: SentryTypes.Group.isRequired,
     environment: SentryTypes.Environment,
-  },
-
-  mixins: [ApiMixin, GroupState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      reportList: [],
-      pageLinks: '',
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentDidUpdate(prevProps) {
-    // Search term has changed (excluding environment)
-    const searchHasChanged = !isEqual(
-      omit(qs.parse(prevProps.location.search), 'environment'),
-      omit(qs.parse(this.props.location.search), 'environment')
-    );
-    const environmentHasChanged = prevProps.environment !== this.props.environment;
-
-    if (searchHasChanged || environmentHasChanged) {
-      this.fetchData();
-    }
-  },
-
-  fetchData() {
-    const queryParams = {...this.props.params};
-
-    if (this.props.environment) {
-      queryParams.environment = this.props.environment.name;
-    }
-
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    this.api.request(`/issues/${this.getGroup().id}/user-reports/`, {
-      query: queryParams,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          error: false,
-          loading: false,
-          reportList: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
-        });
-      },
-      error: error => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  getUserFeedbackUrl() {
-    let params = this.props.params;
-
-    return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
-  },
+  };
 
   render() {
-    let {reportList} = this.state;
-    let {projectId, orgId, groupId} = this.props.params;
-
-    if (this.state.loading) {
-      return <LoadingIndicator />;
-    } else if (this.state.error) {
-      return <LoadingError onRetry={this.fetchData} />;
-    }
+    const {group, environment} = this.props;
+    const query = {...this.props.params};
 
-    if (reportList.length) {
-      return (
-        <div className="row">
-          <div className="col-md-9">
-            {reportList.map((item, idx) => {
-              return (
-                <EventUserFeedback
-                  key={idx}
-                  report={item}
-                  projectId={projectId}
-                  orgId={orgId}
-                  issueId={groupId}
-                />
-              );
-            })}
-          </div>
-        </div>
-      );
+    if (environment) {
+      query.environment = environment.name;
     }
 
-    const emptyStateMessage = this.props.environment
-      ? tct('No user reports have been collected from your [env] environment.', {
-          env: this.props.environment.displayName,
-        })
-      : t('No user reports have been collected.');
-
-    return (
-      <Panel>
-        <EmptyStateWarning>
-          <p>{emptyStateMessage}</p>
-          <p>
-            <Link to={this.getUserFeedbackUrl()}>
-              {t('Learn how to integrate User Feedback')}
-            </Link>
-          </p>
-        </EmptyStateWarning>
-      </Panel>
-    );
-  },
-});
+    return <GroupUserFeedback group={group} query={query} />;
+  }
+}
 
-export default withEnvironmentInQueryString(GroupUserFeedback);
+export default withEnvironmentInQueryString(ProjectGroupUserFeedback);
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupUserFeedback.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupUserFeedback.jsx
new file mode 100644
index 0000000000..9f1f8c6f16
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupUserFeedback.jsx
@@ -0,0 +1,121 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {Link} from 'react-router';
+import {isEqual} from 'lodash';
+
+import SentryTypes from 'app/sentryTypes';
+import EventUserFeedback from 'app/components/events/userFeedback';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import {t} from 'app/locale';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import {Panel} from 'app/components/panels';
+import withOrganization from 'app/utils/withOrganization';
+import {fetchGroupUserReports} from './utils';
+
+class GroupUserFeedback extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    group: SentryTypes.Group.isRequired,
+    query: PropTypes.object.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      loading: true,
+      error: false,
+      reportList: [],
+      pageLinks: '',
+    };
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps) {
+    if (!isEqual(prevProps.query, this.props.query)) {
+      this.fetchData();
+    }
+  }
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false,
+    });
+
+    fetchGroupUserReports(this.props.group.id, this.props.query)
+      .then((data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          reportList: data,
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      })
+      .catch(() => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+      });
+  }
+
+  getUserFeedbackUrl() {
+    const {organization, group} = this.props;
+
+    return `/${organization.slug}/${group.project.slug}/settings/user-feedback/`;
+  }
+
+  render() {
+    const {reportList} = this.state;
+    const {organization, group} = this.props;
+
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
+
+    if (reportList.length) {
+      return (
+        <div className="row">
+          <div className="col-md-9">
+            {reportList.map((item, idx) => {
+              return (
+                <EventUserFeedback
+                  key={idx}
+                  report={item}
+                  projectId={group.project.slug}
+                  orgId={organization.slug}
+                  issueId={group.id}
+                />
+              );
+            })}
+          </div>
+        </div>
+      );
+    }
+
+    const emptyStateMessage = isEqual(this.props.query, {})
+      ? t('No user reports match your selected filters.')
+      : t('No user reports have been collected.');
+
+    return (
+      <Panel>
+        <EmptyStateWarning>
+          <p>{emptyStateMessage}</p>
+          <p>
+            <Link to={this.getUserFeedbackUrl()}>
+              {t('Learn how to integrate User Feedback')}
+            </Link>
+          </p>
+        </EmptyStateWarning>
+      </Panel>
+    );
+  }
+}
+
+export default withOrganization(GroupUserFeedback);
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx
index f6964237e0..771535f61d 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/utils.jsx
@@ -32,3 +32,11 @@ export function fetchGroupEventAndMarkSeen(orgId, projectId, groupId, eventId) {
 
   return promise;
 }
+
+export function fetchGroupUserReports(groupId, query) {
+  const api = new Client();
+
+  return api.requestPromise(`/issues/${groupId}/user-reports/`, {
+    query,
+  });
+}
