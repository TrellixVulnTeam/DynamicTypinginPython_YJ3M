commit 53837d9e8dad2443c3881fcd05f1b261bdd922fd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jun 28 15:55:25 2018 -0700

    fix(ui): Fix CustomResolutionModal + add tests (#8882)
    
    * add tests for asana

diff --git a/src/sentry/static/sentry/app/components/customResolutionModal.jsx b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
index 451170771b..bf8bcb013d 100644
--- a/src/sentry/static/sentry/app/components/customResolutionModal.jsx
+++ b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
@@ -42,7 +42,6 @@ export default class CustomResolutionModal extends React.Component {
 
   render() {
     let {orgId, projectId} = this.props;
-    let {version} = this.state;
 
     return (
       <Modal
@@ -60,8 +59,7 @@ export default class CustomResolutionModal extends React.Component {
               name="version"
               onChange={this.onChange}
               placeholder={t('e.g. 1.0.4')}
-              url={`/api/0/projects/${orgId}/${projectId}/releases/`}
-              value={version}
+              url={`/projects/${orgId}/${projectId}/releases/`}
               onResults={results => {
                 return results.map(release => ({
                   value: release.version,
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
index b06a9203c4..042eabba10 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
@@ -88,6 +88,8 @@ class SelectAsyncControl extends React.Component {
       err => {
         addErrorMessage(t('There was a problem with the request.'));
         handleXhrErrorResponse('SelectAsync failed')(err);
+        // eslint-disable-next-line no-console
+        console.error(err);
       }
     );
   };
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
index 7ec88edd81..c7a9e1ee45 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
@@ -85,13 +85,15 @@ class SelectAsyncField extends SelectField {
   };
 
   getField() {
+    // Callers should be able to override all props except onChange
+    // FormField calls props.onChange via `setValue`
     return (
       <SelectAsyncControl
         id={this.getId()}
-        {...this.props}
-        value={this.state.value}
         onResults={this.onResults}
         onQuery={this.onQuery}
+        {...this.props}
+        value={this.state.value}
         onChange={this.onChange}
       />
     );
diff --git a/tests/js/fixtures/asana.js b/tests/js/fixtures/asana.js
new file mode 100644
index 0000000000..5138c8cccf
--- /dev/null
+++ b/tests/js/fixtures/asana.js
@@ -0,0 +1,77 @@
+function AsanaPlugin(params) {
+  return {
+    status: 'unknown',
+    description: 'Integrate Asana issues by linking a repository to a project.',
+    isTestable: false,
+    hasConfiguration: true,
+    shortName: 'Asana',
+    slug: 'asana',
+    name: 'Asana',
+    assets: [],
+    title: 'Asana',
+    contexts: [],
+    doc: '',
+    resourceLinks: [
+      {url: 'https://github.com/getsentry/sentry-plugins/issues', title: 'Bug Tracker'},
+      {url: 'https://github.com/getsentry/sentry-plugins', title: 'Source'},
+    ],
+    allowed_actions: ['create', 'link', 'unlink'],
+    enabled: true,
+    id: 'asana',
+    version: '9.1.0.dev0',
+    canDisable: true,
+    author: {url: 'https://github.com/getsentry/sentry-plugins', name: 'Sentry Team'},
+    type: 'issue-tracking',
+    metadata: {},
+  };
+}
+
+function AsanaCreate(params) {
+  return [
+    {
+      name: 'workspace',
+      default: 608780875677549,
+      choices: [[608780875677549, 'sentry.io']],
+      readonly: true,
+      label: 'Asana Workspace',
+      type: 'select',
+    },
+    {
+      default: 'Error: Loading chunk 3 failed.',
+      type: 'text',
+      name: 'title',
+      label: 'Name',
+    },
+    {
+      default:
+        'http://localhost:8000/default/internal/issues/3750/\n\n```\nError: Loading chunk 3 failed.\n  at HTMLScriptElement.onScriptComplete (/_static/1529684704/sentry/dist/vendor.js:762:24)\n```',
+      required: false,
+      type: 'textarea',
+      name: 'description',
+      label: 'Notes',
+    },
+    {
+      name: 'project',
+      placeholder: 'Start typing to search for a project',
+      required: false,
+      has_autocomplete: true,
+      label: 'Project',
+      type: 'select',
+    },
+    {
+      name: 'assignee',
+      placeholder: 'Start typing to search for a user',
+      required: false,
+      has_autocomplete: true,
+      label: 'Assignee',
+      type: 'select',
+    },
+  ];
+}
+
+const DEFAULT_AUTOCOMPLETE = {text: '(#724210387969378) billy', id: 724210387969378};
+function AsanaAutocomplete(type = 'project', values = [DEFAULT_AUTOCOMPLETE]) {
+  return {[type]: values};
+}
+
+export {AsanaPlugin, AsanaCreate, AsanaAutocomplete};
diff --git a/tests/js/fixtures/release.js b/tests/js/fixtures/release.js
new file mode 100644
index 0000000000..1babf79ea2
--- /dev/null
+++ b/tests/js/fixtures/release.js
@@ -0,0 +1,22 @@
+export default function Release(params) {
+  return {
+    dateReleased: null,
+    commitCount: null,
+    url: null,
+    data: {},
+    lastDeploy: null,
+    deployCount: 0,
+    dateCreated: '2018-06-28T17:19:05Z',
+    lastEvent: '2018-06-28T17:19:06.414Z',
+    version: '92eccef279d966b2319f0802fa4b22b430a5f72b',
+    firstEvent: '2018-06-28T17:19:06.414Z',
+    lastCommit: null,
+    shortVersion: '92eccef',
+    authors: [],
+    owner: null,
+    newGroups: 0,
+    ref: null,
+    projects: [],
+    ...params,
+  };
+}
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 79dc8164f3..e7eec69f04 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -10,6 +10,8 @@ import ConfigStore from 'app/stores/configStore';
 import theme from 'app/utils/theme';
 
 import RoleList from './fixtures/roleList';
+import Release from './fixtures/release';
+import {AsanaPlugin, AsanaCreate, AsanaAutocomplete} from './fixtures/asana';
 
 jest.mock('lodash/debounce', () => jest.fn(fn => fn));
 jest.mock('app/utils/recreateRoute');
@@ -875,6 +877,8 @@ window.TestStubs = {
     };
   },
 
+  Release,
+
   RoleList,
 
   Searches: params => [
@@ -1071,6 +1075,13 @@ window.TestStubs = {
     comments: 'Something bad happened',
     issue: TestStubs.Group(),
   }),
+
+  /**
+   * Plugins
+   */
+  AsanaPlugin,
+  AsanaCreate,
+  AsanaAutocomplete,
 };
 
 // this is very commonly used, so expose it globally
diff --git a/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap b/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
deleted file mode 100644
index d8ef27b528..0000000000
--- a/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
+++ /dev/null
@@ -1,82 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`CustomResolutionModal render() renders correctly 1`] = `
-<Modal
-  animation={false}
-  autoFocus={true}
-  backdrop={true}
-  bsClass="modal"
-  className="custom-resolution-modal"
-  dialogComponentClass={[Function]}
-  enforceFocus={true}
-  keyboard={true}
-  manager={
-    ModalManager {
-      "add": [Function],
-      "containers": Array [],
-      "data": Array [],
-      "handleContainerOverflow": true,
-      "hideSiblingNodes": true,
-      "isTopModal": [Function],
-      "modals": Array [],
-      "remove": [Function],
-    }
-  }
-  onHide={[Function]}
-  renderBackdrop={[Function]}
-  restoreFocus={true}
-  show={false}
->
-  <form
-    onSubmit={[Function]}
-  >
-    <ModalHeader
-      bsClass="modal-header"
-      closeButton={false}
-      closeLabel="Close"
-    >
-      Resolved In
-    </ModalHeader>
-    <ModalBody
-      bsClass="modal-body"
-      componentClass="div"
-    >
-      <SelectAsyncField
-        clearable={true}
-        disabled={false}
-        hideErrorMessage={false}
-        id="version"
-        label="Version"
-        name="version"
-        onChange={[Function]}
-        onQuery={[Function]}
-        onResults={[Function]}
-        placeholder="e.g. 1.0.4"
-        required={false}
-        url="/api/0/projects/org/project/releases/"
-        value=""
-      />
-    </ModalBody>
-    <ModalFooter
-      bsClass="modal-footer"
-      componentClass="div"
-    >
-      <Button
-        className="css-lvyu5j"
-        disabled={false}
-        onClick={[Function]}
-        type="button"
-      >
-        Cancel
-      </Button>
-      <Button
-        disabled={false}
-        priority="primary"
-        type="submit"
-      >
-        Save Changes
-      </Button>
-    </ModalFooter>
-  </form>
-</Modal>
-`;
diff --git a/tests/js/spec/components/actions/resolve.spec.jsx b/tests/js/spec/components/actions/resolve.spec.jsx
index a8e82697d0..84721cf388 100644
--- a/tests/js/spec/components/actions/resolve.spec.jsx
+++ b/tests/js/spec/components/actions/resolve.spec.jsx
@@ -145,4 +145,51 @@ describe('ResolveActions', function() {
       expect(spy.called).toBe(true);
     });
   });
+
+  it('can resolve in "another version"', async function() {
+    let onUpdate = jest.fn();
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/releases/',
+      body: [TestStubs.Release()],
+    });
+    let wrapper = mount(
+      <ResolveActions
+        hasRelease
+        orgId="org-slug"
+        projectId="project-slug"
+        onUpdate={onUpdate}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('ActionLink')
+      .last()
+      .simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('CustomResolutionModal Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: '92eccef279d966b2319f0802fa4b22b430a5f72b',
+        label: expect.anything(),
+      }),
+    ]);
+
+    wrapper.find('input[id="version"]').simulate('change', {target: {value: '9'}});
+
+    await tick();
+    wrapper.update();
+
+    wrapper.find('input[id="version"]').simulate('keyDown', {keyCode: 13});
+
+    wrapper.find('CustomResolutionModal form').simulate('submit');
+    expect(onUpdate).toHaveBeenCalledWith({
+      status: 'resolved',
+      statusDetails: {
+        inRelease: '92eccef279d966b2319f0802fa4b22b430a5f72b',
+      },
+    });
+  });
 });
diff --git a/tests/js/spec/components/customResolutionModal.spec.jsx b/tests/js/spec/components/customResolutionModal.spec.jsx
index aca4ac1a6f..c4affa4ecf 100644
--- a/tests/js/spec/components/customResolutionModal.spec.jsx
+++ b/tests/js/spec/components/customResolutionModal.spec.jsx
@@ -1,20 +1,56 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {mount} from 'enzyme';
 
 import CustomResolutionModal from 'app/components/customResolutionModal';
 
 describe('CustomResolutionModal', function() {
-  describe('render()', function() {
-    it('renders correctly', function() {
-      let wrapper = shallow(
-        <CustomResolutionModal
-          orgId="org"
-          projectId="project"
-          onCanceled={() => false}
-          onSelected={() => false}
-        />
-      );
-      expect(wrapper).toMatchSnapshot();
+  let releasesMock;
+  beforeEach(function() {
+    releasesMock = MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/releases/',
+      body: [TestStubs.Release()],
+    });
+  });
+
+  it('can select a version', async function() {
+    let onSelected = jest.fn();
+    let wrapper = mount(
+      <CustomResolutionModal
+        orgId="org-slug"
+        projectId="project-slug"
+        onCanceled={() => false}
+        onSelected={onSelected}
+        show
+      />,
+      TestStubs.routerContext()
+    );
+
+    expect(releasesMock).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: '92eccef279d966b2319f0802fa4b22b430a5f72b',
+        label: expect.anything(),
+      }),
+    ]);
+
+    wrapper.find('input[id="version"]').simulate('change', {target: {value: '9'}});
+
+    await tick();
+    wrapper.update();
+
+    wrapper.find('input[id="version"]').simulate('keyDown', {keyCode: 13});
+
+    expect(wrapper.find('SelectControl').prop('value')).toEqual({
+      value: '92eccef279d966b2319f0802fa4b22b430a5f72b',
+      label: expect.anything(),
+    });
+    wrapper.find('form').simulate('submit');
+    expect(onSelected).toHaveBeenCalledWith({
+      inRelease: '92eccef279d966b2319f0802fa4b22b430a5f72b',
     });
   });
 });
diff --git a/tests/js/spec/integrations/asana.spec.jsx b/tests/js/spec/integrations/asana.spec.jsx
new file mode 100644
index 0000000000..83ce223dee
--- /dev/null
+++ b/tests/js/spec/integrations/asana.spec.jsx
@@ -0,0 +1,123 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import IssuePluginActions from 'app/components/group/issuePluginActions';
+
+jest.mock('jquery');
+
+describe('Asana', function() {
+  let plugin = TestStubs.AsanaPlugin();
+  // Note group is different than group in AsanaCreate fixture
+  let group = TestStubs.Group();
+  let TITLE = 'input[id="id-title"]';
+  let NOTES = 'textarea[id="id-description"]';
+  // let WORKSPACE = '[id="id-workspace"]';
+  let PROJECT = '[id="id-project"]';
+  let ASSIGNEE = '[id="id-assignee"]';
+  let AsanaCreateResponse = TestStubs.AsanaCreate();
+  let autocompleteMock = jest.fn();
+  let createMock = jest.fn();
+
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: `/issues/${group.id}/plugins/asana/create/`,
+      body: AsanaCreateResponse,
+    });
+    autocompleteMock = MockApiClient.addMockResponse({
+      url: `/api/0/issues/${group.id}/plugins/asana/autocomplete`,
+      body: {
+        ...TestStubs.AsanaAutocomplete(),
+        // This is a hack because our mock responses don't work properly when
+        // two different fields use the same endpoint
+        ...TestStubs.AsanaAutocomplete('assignee', [{id: 123123123, text: 'Billy'}]),
+      },
+    });
+  });
+
+  it('can create a new issue', async function() {
+    let wrapper = mount(
+      <IssuePluginActions plugin={plugin} />,
+      TestStubs.routerContext([
+        {
+          group,
+        },
+      ])
+    );
+
+    wrapper
+      .find('MenuItem a')
+      .first()
+      .simulate('click');
+
+    // TODO #SELECT2 enable when replacing select2
+    // expect(wrapper.find(`Select${WORKSPACE}`).prop('value')).toBe(608780875677549);
+    expect(wrapper.find(TITLE).prop('value')).toBe('Error: Loading chunk 3 failed.');
+    wrapper.find(TITLE).simulate('change', {target: {value: 'Sentry Issue Title'}});
+    wrapper.find(NOTES).simulate('change', {target: {value: 'Notes'}});
+
+    // Both project and assignees get called
+    expect(autocompleteMock).toHaveBeenCalledTimes(2);
+    autocompleteMock.mockReset();
+
+    wrapper.find(`input${PROJECT}`).simulate('change', {target: {value: 'b'}});
+    await tick();
+    wrapper.update();
+
+    expect(autocompleteMock).toHaveBeenLastCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        query: {
+          autocomplete_field: 'project',
+          autocomplete_query: '',
+        },
+      })
+    );
+
+    wrapper.find(`input${PROJECT}`).simulate('keyDown', {keyCode: 13});
+
+    // New autocomplete mock for assignee
+    autocompleteMock.mockReset();
+    expect(autocompleteMock).not.toHaveBeenCalled();
+    // On focus/change, autocompelte gets called again
+    wrapper.find(`input${ASSIGNEE}`).simulate('change', {target: {value: 'B'}});
+    wrapper.find(`input${ASSIGNEE}`).simulate('change', {target: {value: 'b'}});
+    await tick();
+    wrapper.update();
+
+    expect(autocompleteMock).toHaveBeenLastCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        query: {
+          autocomplete_field: 'assignee',
+          autocomplete_query: 'B',
+        },
+      })
+    );
+    wrapper.find(`input${ASSIGNEE}`).simulate('keyDown', {keyCode: 13});
+
+    await tick();
+    wrapper.update();
+
+    createMock = MockApiClient.addMockResponse({
+      url: `/issues/${group.id}/plugins/asana/create/`,
+      body: AsanaCreateResponse,
+    });
+
+    wrapper.find('Modal Form').simulate('submit');
+    await tick();
+    wrapper.update();
+
+    expect(createMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: expect.objectContaining({
+          description: 'Notes',
+          title: 'Sentry Issue Title',
+          workspace: 608780875677549,
+          project: 724210387969378,
+          assignee: 123123123,
+        }),
+      })
+    );
+  });
+});
