commit 97f5e0d74cd32a5b76670db9c17930d9e4c8a36c
Author: Matej Minar <matej.minar@sentry.io>
Date:   Thu Jan 23 11:42:41 2020 +0100

    ref(ts): Convert <PluginList> to typescript (#16576)
    
    * ref(ts): Convert <PluginList> to typescript
    
    * ref(pluginList): Changes classes to <Panel>

diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
deleted file mode 100644
index d5f2bc0287..0000000000
--- a/src/sentry/static/sentry/app/components/pluginList.jsx
+++ /dev/null
@@ -1,83 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {enablePlugin, disablePlugin} from 'app/actionCreators/plugins';
-import InactivePlugins from 'app/components/inactivePlugins';
-import PluginConfig from 'app/components/pluginConfig';
-import {t} from 'app/locale';
-
-export default class PluginList extends React.Component {
-  static propTypes = {
-    organization: PropTypes.object.isRequired,
-    project: PropTypes.object.isRequired,
-    pluginList: PropTypes.array.isRequired,
-    onDisablePlugin: PropTypes.func.isRequired,
-    onEnablePlugin: PropTypes.func.isRequired,
-  };
-
-  static defaultProps = {
-    onDisablePlugin: () => {},
-    onEnablePlugin: () => {},
-  };
-
-  handleEnablePlugin = plugin => {
-    const {organization, project} = this.props;
-    enablePlugin({
-      projectId: project.slug,
-      orgId: organization.slug,
-      pluginId: plugin.slug,
-    });
-
-    this.props.onEnablePlugin(plugin);
-  };
-
-  handleDisablePlugin = plugin => {
-    const {organization, project} = this.props;
-    disablePlugin({
-      projectId: project.slug,
-      orgId: organization.slug,
-      pluginId: plugin.slug,
-    });
-
-    this.props.onDisablePlugin(plugin);
-  };
-
-  render() {
-    const {organization, pluginList, project} = this.props;
-
-    if (!pluginList.length) {
-      return (
-        <div className="panel panel-default">
-          <div className="panel-body p-b-0">
-            <p>
-              {t("Oops! Looks like there aren't any available integrations installed.")}
-            </p>
-          </div>
-        </div>
-      );
-    }
-
-    return (
-      <div>
-        {pluginList
-          .filter(p => p.enabled)
-          .map(data => {
-            return (
-              <PluginConfig
-                data={data}
-                organization={organization}
-                project={project}
-                key={data.id}
-                onDisablePlugin={this.handleDisablePlugin}
-              />
-            );
-          })}
-
-        <InactivePlugins
-          plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}
-          onEnablePlugin={this.handleEnablePlugin}
-        />
-      </div>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/pluginList.tsx b/src/sentry/static/sentry/app/components/pluginList.tsx
new file mode 100644
index 0000000000..3de72dc517
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/pluginList.tsx
@@ -0,0 +1,88 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {Organization, Project, Plugin} from 'app/types';
+import {enablePlugin, disablePlugin} from 'app/actionCreators/plugins';
+import InactivePlugins from 'app/components/inactivePlugins';
+import PluginConfig from 'app/components/pluginConfig';
+import {t} from 'app/locale';
+import {Panel, PanelItem} from './panels';
+
+type Props = {
+  organization: Organization;
+  project: Project;
+  pluginList: Plugin[];
+  onDisablePlugin?: (plugin: Plugin) => void;
+  onEnablePlugin?: (plugin: Plugin) => void;
+};
+
+const PluginList = ({
+  organization,
+  project,
+  pluginList,
+  onDisablePlugin = () => {},
+  onEnablePlugin = () => {},
+}: Props) => {
+  const handleEnablePlugin = (plugin: Plugin) => {
+    enablePlugin({
+      projectId: project.slug,
+      orgId: organization.slug,
+      pluginId: plugin.slug,
+    });
+
+    onEnablePlugin(plugin);
+  };
+
+  const handleDisablePlugin = (plugin: Plugin) => {
+    disablePlugin({
+      projectId: project.slug,
+      orgId: organization.slug,
+      pluginId: plugin.slug,
+    });
+
+    onDisablePlugin(plugin);
+  };
+
+  if (!pluginList.length) {
+    return (
+      <Panel>
+        <PanelItem>
+          {t("Oops! Looks like there aren't any available integrations installed.")}
+        </PanelItem>
+      </Panel>
+    );
+  }
+
+  return (
+    <div>
+      {pluginList
+        .filter(p => p.enabled)
+        .map(data => {
+          return (
+            <PluginConfig
+              data={data}
+              organization={organization}
+              project={project}
+              key={data.id}
+              onDisablePlugin={handleDisablePlugin}
+            />
+          );
+        })}
+
+      <InactivePlugins
+        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}
+        onEnablePlugin={handleEnablePlugin}
+      />
+    </div>
+  );
+};
+
+PluginList.propTypes = {
+  organization: PropTypes.object.isRequired,
+  project: PropTypes.object.isRequired,
+  pluginList: PropTypes.array.isRequired,
+  onDisablePlugin: PropTypes.func,
+  onEnablePlugin: PropTypes.func,
+};
+
+export default PluginList;
