commit f22684ef8aa1eb63a1329f1a4a30fa6e3e688df0
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 12 23:39:21 2013 -0700

    Add Javascript and Python samples as well as User and Http data

diff --git a/src/sentry/data/samples/javascript.json b/src/sentry/data/samples/javascript.json
new file mode 100644
index 0000000000..4f4191e27a
--- /dev/null
+++ b/src/sentry/data/samples/javascript.json
@@ -0,0 +1,149 @@
+{
+    "message": "This is an example JavaScript exception",
+    "culprit": "views.js in updateMember",
+    "sentry.interfaces.Exception": {
+        "values": [
+            {
+                "stacktrace": {
+                    "frames": [
+                        {
+                            "function": "member",
+                            "abs_path": "https://app.getsentry.com/_static/sentry/scripts/views.js",
+                            "pre_context": [
+                                "        removeMember: function(member){",
+                                "            this.collection.remove(member);",
+                                "        },",
+                                "",
+                                "        renderMemberInContainer: function(member){"
+                            ],
+                            "vars": {},
+                            "module": null,
+                            "filename": "../../sentry/scripts/views.js",
+                            "post_context": [
+                                "                $el, $rel;",
+                                "",
+                                "            this.$parent.find('li.empty').remove();",
+                                "",
+                                "            $el = $('#' + this.id + member.id);"
+                            ],
+                            "colno": 50,
+                            "in_app": true,
+                            "data": {
+                                "orig_filename": "/_static/sentry/scripts/global.min.js",
+                                "orig_abs_path": "https://app.getsentry.com/_static/sentry/scripts/global.min.js",
+                                "sourcemap": "https://app.getsentry.com/_static/sentry/scripts/global.min.map.js",
+                                "orig_lineno": 1,
+                                "orig_function": "app.OrderedElementsView.Backbone.View.extend.updateMember",
+                                "orig_colno": 14930
+                            },
+                            "context_line": "            var new_pos = this.collection.indexOf(member),",
+                            "lineno": 283
+                        },
+                        {
+                            "function": "merge",
+                            "abs_path": "https://app.getsentry.com/_static/sentry/scripts/views.js",
+                            "pre_context": [
+                                "            var existing = this.collection.get(member.id);",
+                                "            if (existing.get('version') > member.get('version'))",
+                                "                return;",
+                                "",
+                                "            this.collection.add(member, {"
+                            ],
+                            "vars": {},
+                            "module": null,
+                            "filename": "../../sentry/scripts/views.js",
+                            "post_context": [
+                                "                sort: options.sort !== false ? true : false",
+                                "            });",
+                                "",
+                                "        },",
+                                ""
+                            ],
+                            "colno": 16,
+                            "in_app": true,
+                            "data": {
+                                "orig_filename": "/_static/sentry/scripts/global.min.js",
+                                "orig_abs_path": "https://app.getsentry.com/_static/sentry/scripts/global.min.js",
+                                "sourcemap": "https://app.getsentry.com/_static/sentry/scripts/global.min.map.js",
+                                "orig_lineno": 1,
+                                "orig_function": "app.OrderedElementsView.Backbone.View.extend.addMember",
+                                "orig_colno": 14663
+                            },
+                            "context_line": "                merge: true,",
+                            "lineno": 268
+                        },
+                        {
+                            "function": "poll",
+                            "abs_path": "https://app.getsentry.com/_static/sentry/scripts/views.js",
+                            "pre_context": [
+                                "",
+                                "        poll: function(){",
+                                "            var data;",
+                                "",
+                                "            if (!this.options.realtime || !this.options.pollUrl)"
+                            ],
+                            "vars": {},
+                            "module": null,
+                            "filename": "../../sentry/scripts/views.js",
+                            "post_context": [
+                                "",
+                                "            data = app.utils.getQueryParams();",
+                                "            data.cursor = this.cursor || undefined;",
+                                "",
+                                "            $.ajax({"
+                            ],
+                            "colno": 46,
+                            "in_app": true,
+                            "data": {
+                                "orig_filename": "/_static/sentry/scripts/global.min.js",
+                                "orig_abs_path": "https://app.getsentry.com/_static/sentry/scripts/global.min.js",
+                                "sourcemap": "https://app.getsentry.com/_static/sentry/scripts/global.min.map.js",
+                                "orig_lineno": 1,
+                                "orig_function": "app.GroupListView.app.OrderedElementsView.extend.tick",
+                                "orig_colno": 16467
+                            },
+                            "context_line": "                return window.setTimeout(this.poll, this.options.pollTime);",
+                            "lineno": 389
+                        },
+                        {
+                            "function": "apply",
+                            "abs_path": "https://d3nslu0hdya83q.cloudfront.net/dist/1.0/raven.js",
+                            "pre_context": [
+                                " * @return {Function} The wrapped func",
+                                " */",
+                                "TraceKit.wrap = function traceKitWrapper(func) {",
+                                "    function wrapped() {",
+                                "        try {"
+                            ],
+                            "vars": {},
+                            "module": null,
+                            "filename": "raven.js",
+                            "post_context": [
+                                "        } catch (e) {",
+                                "            TraceKit.report(e);",
+                                "            throw e;",
+                                "        }",
+                                "    }"
+                            ],
+                            "colno": 24,
+                            "in_app": true,
+                            "data": {
+                                "orig_filename": "/dist/1.0/raven.min.js",
+                                "orig_abs_path": "https://d3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js",
+                                "sourcemap": "https://d3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.map",
+                                "orig_lineno": 2,
+                                "orig_function": "e",
+                                "orig_colno": 254
+                            },
+                            "context_line": "            return func.apply(this, arguments);",
+                            "lineno": 62
+                        }
+                    ]
+                },
+                "type": "TypeError",
+                "value": "Object [object Object] has no method 'updateFrom'",
+                "module": null
+            }
+        ]
+    }
+}
diff --git a/src/sentry/data/samples/python.json b/src/sentry/data/samples/python.json
new file mode 100644
index 0000000000..7d992b2267
--- /dev/null
+++ b/src/sentry/data/samples/python.json
@@ -0,0 +1,230 @@
+{
+    "message": "This is an example Python exception",
+    "culprit": "raven.scripts.runner in main",
+    "sentry.interfaces.Stacktrace": {
+        "frames": [
+            {
+                "function": "build_msg",
+                "abs_path": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                "pre_context": [
+                    "                frames = stack",
+                    "",
+                    "            data.update({",
+                    "                'sentry.interfaces.Stacktrace': {",
+                    "                    'frames': get_stack_info(frames,"
+                ],
+                "vars": {
+                    "'event_id'": "'54a322436e1b47b88e239b78998ae742'",
+                    "'culprit'": null,
+                    "'event_type'": "'raven.events.Message'",
+                    "'date'": "datetime.datetime(2013, 8, 13, 3, 8, 24, 880386)",
+                    "'extra'": {
+                        "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                        ],
+                        "'user'": "'dcramer'"
+                    },
+                    "'v'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'params'": []
+                    },
+                    "'kwargs'": {
+                        "'message'": "'This is a test message generated using ``raven test``'",
+                        "'level'": 20
+                    },
+                    "'stack'": true,
+                    "'frames'": "<generator object iter_stack_frames at 0x107bcc3c0>",
+                    "'tags'": null,
+                    "'time_spent'": null,
+                    "'self'": "<raven.base.Client object at 0x107bb8210>",
+                    "'data'": {
+                        "'sentry.interfaces.Message'": {
+                            "'message'": "u'This is a test message generated using ``raven test``'",
+                            "'params'": []
+                        },
+                        "'message'": "u'This is a test message generated using ``raven test``'"
+                    },
+                    "'result'": {
+                        "'sentry.interfaces.Message'": {
+                            "'message'": "u'This is a test message generated using ``raven test``'",
+                            "'params'": []
+                        },
+                        "'message'": "u'This is a test message generated using ``raven test``'"
+                    },
+                    "'handler'": "<raven.events.Message object at 0x107bd0890>",
+                    "'k'": "'sentry.interfaces.Message'",
+                    "'public_key'": null
+                },
+                "module": "raven.base",
+                "filename": "raven/base.py",
+                "post_context": [
+                    "                },",
+                    "            })",
+                    "",
+                    "        if 'sentry.interfaces.Stacktrace' in data:",
+                    "            if self.include_paths:"
+                ],
+                "colno": null,
+                "in_app": false,
+                "data": {},
+                "context_line": "                        transformer=self.transform)",
+                "lineno": 303
+            },
+            {
+                "function": "capture",
+                "abs_path": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                "pre_context": [
+                    "        if not self.is_enabled():",
+                    "            return",
+                    "",
+                    "        data = self.build_msg(",
+                    "            event_type, data, date, time_spent, extra, stack, tags=tags,"
+                ],
+                "vars": {
+                    "'event_type'": "'raven.events.Message'",
+                    "'date'": null,
+                    "'extra'": {
+                        "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                        ],
+                        "'user'": "'dcramer'"
+                    },
+                    "'stack'": true,
+                    "'tags'": null,
+                    "'time_spent'": null,
+                    "'self'": "<raven.base.Client object at 0x107bb8210>",
+                    "'data'": null,
+                    "'kwargs'": {
+                        "'message'": "'This is a test message generated using ``raven test``'",
+                        "'level'": 20
+                    }
+                },
+                "module": "raven.base",
+                "filename": "raven/base.py",
+                "post_context": [
+                    "",
+                    "        self.send(**data)",
+                    "",
+                    "        return (data.get('event_id'),)",
+                    ""
+                ],
+                "colno": null,
+                "in_app": false,
+                "data": {},
+                "context_line": "            **kwargs)",
+                "lineno": 459
+            },
+            {
+                "function": "captureMessage",
+                "abs_path": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                "pre_context": [
+                    "        \"\"\"",
+                    "        Creates an event from ``message``.",
+                    "",
+                    "        >>> client.captureMessage('My event just happened!')",
+                    "        \"\"\""
+                ],
+                "vars": {
+                    "'message'": "'This is a test message generated using ``raven test``'",
+                    "'kwargs'": {
+                        "'extra'": {
+                            "'loadavg'": [
+                                0.37255859375,
+                                0.5341796875,
+                                0.62939453125
+                            ],
+                            "'user'": "'dcramer'"
+                        },
+                        "'stack'": true,
+                        "'data'": null,
+                        "'level'": 20,
+                        "'tags'": null
+                    },
+                    "'self'": "<raven.base.Client object at 0x107bb8210>"
+                },
+                "module": "raven.base",
+                "filename": "raven/base.py",
+                "post_context": [
+                    "",
+                    "    def captureException(self, exc_info=None, **kwargs):",
+                    "        \"\"\"",
+                    "        Creates an event from an exception.",
+                    ""
+                ],
+                "colno": null,
+                "in_app": false,
+                "data": {},
+                "context_line": "        return self.capture('raven.events.Message', message=message, **kwargs)",
+                "lineno": 577
+            },
+            {
+                "function": "send_test_message",
+                "abs_path": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                "pre_context": [
+                    "        level=logging.INFO,",
+                    "        stack=True,",
+                    "        tags=options.get('tags', {}),",
+                    "        extra={",
+                    "            'user': get_uid(),"
+                ],
+                "vars": {
+                    "'client'": "<raven.base.Client object at 0x107bb8210>",
+                    "'options'": {
+                        "'tags'": null,
+                        "'data'": null
+                    },
+                    "'data'": null,
+                    "'k'": "'secret_key'"
+                },
+                "module": "raven.scripts.runner",
+                "filename": "raven/scripts/runner.py",
+                "post_context": [
+                    "        },",
+                    "    ))",
+                    "",
+                    "    if client.state.did_fail():",
+                    "        print('error!')"
+                ],
+                "colno": null,
+                "in_app": false,
+                "data": {},
+                "context_line": "            'loadavg': get_loadavg(),",
+                "lineno": 77
+            },
+            {
+                "function": "main",
+                "abs_path": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                "pre_context": [
+                    "    print(\"Using DSN configuration:\")",
+                    "    print(\" \", dsn)",
+                    "    print()",
+                    "",
+                    "    client = Client(dsn, include_paths=['raven'])"
+                ],
+                "vars": {
+                    "'root'": "<logging.Logger object at 0x107ba5b10>",
+                    "'parser'": "<optparse.OptionParser instance at 0x107ba3368>",
+                    "'dsn'": "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'",
+                    "'opts'": "<Values at 0x107ba3b00: {'data': None, 'tags': None}>",
+                    "'client'": "<raven.base.Client object at 0x107bb8210>",
+                    "'args'": [
+                        "'test'",
+                        "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'"
+                    ]
+                },
+                "module": "raven.scripts.runner",
+                "filename": "raven/scripts/runner.py",
+                "post_context": [],
+                "colno": null,
+                "in_app": false,
+                "data": {},
+                "context_line": "    send_test_message(client, opts.__dict__)",
+                "lineno": 112
+            }
+        ]
+    }
+}
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 2b9a0cfa17..303e49b645 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -30,6 +30,22 @@ def create_sample_event(project, platform=None):
         data = json.loads(fp.read())
 
     data['platform'] = platform
-
+    data['sentry.interfaces.User'] = {
+        "username": "getsentry",
+        "id": "1671",
+        "email": "foo@example.com"
+    }
+    data['sentry.interfaces.Http'] = {
+        "cookies": {},
+        "url": "http://example.com/foo",
+        "headers": {
+            "Referer": "http://example.com",
+            "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
+        },
+        "env": {},
+        "query_string": "",
+        "data": {},
+        "method": "GET"
+    }
     data = Group.objects.normalize_event_data(data)
     return Group.objects.save_data(project.id, data, raw=True)
