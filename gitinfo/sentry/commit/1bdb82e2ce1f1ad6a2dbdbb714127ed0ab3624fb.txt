commit 1bdb82e2ce1f1ad6a2dbdbb714127ed0ab3624fb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Nov 28 10:58:31 2014 -0800

    Reimplement basic access group permissions

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index ceb6633a6c..b3a8147926 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -7,6 +7,8 @@ sentry.models.project
 """
 from __future__ import absolute_import, print_function
 
+import logging
+
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models
@@ -25,21 +27,35 @@ from sentry.utils.http import absolute_uri
 
 
 class ProjectManager(BaseManager):
-    def get_for_user(self, team, user, access=None):
+    # TODO(dcramer): we might want to cache this per user
+    def get_for_user(self, team, user, access=None, _skip_team_check=False):
         from sentry.models import Team
 
         if not (user and user.is_authenticated()):
             return []
 
-        team_list = Team.objects.get_for_user(
-            organization=team.organization,
-            user=user,
-            access=access,
-        )
-        if team not in team_list:
-            return []
+        if not _skip_team_check:
+            team_list = Team.objects.get_for_user(
+                organization=team.organization,
+                user=user,
+                access=access,
+            )
 
-        base_qs = self.filter(team=team)
+            try:
+                team = team_list[team_list.index(team)]
+            except ValueError:
+                logging.info('User does not have access to team: %s', team.id)
+                return []
+
+        # Identify access groups
+        if getattr(team, 'is_access_group', False):
+            logging.warning('Team is using deprecated access groups: %s', team.id)
+            base_qs = Project.objects.filter(
+                accessgroup__team=team,
+                accessgroup__members=user,
+            )
+        else:
+            base_qs = self.filter(team=team)
 
         project_list = []
         for project in base_qs:
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 6137654240..d605c152bb 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -31,7 +31,7 @@ class TeamManager(BaseManager):
         OrganizationMemberType value.
         """
         from sentry.models import (
-            OrganizationMember, OrganizationMemberType, Project
+            AccessGroup, OrganizationMember, OrganizationMemberType, Project
         )
 
         if not user.is_authenticated():
@@ -43,27 +43,46 @@ class TeamManager(BaseManager):
                 team.access_type = OrganizationMemberType.MEMBER
 
         else:
-            qs = OrganizationMember.objects.filter(
+            om_qs = OrganizationMember.objects.filter(
                 user=user,
                 organization=organization,
             )
             if access is not None:
-                qs = qs.filter(type__lte=access)
+                om_qs = om_qs.filter(type__lte=access)
 
             try:
-                om = qs.get()
+                om = om_qs.get()
             except OrganizationMember.DoesNotExist:
-                return []
-
-            if om.has_global_access:
-                team_qs = self.filter(organization=organization)
+                team_qs = self.none()
             else:
-                team_qs = om.teams.all()
+                if om.has_global_access:
+                    team_qs = self.filter(organization=organization)
+                else:
+                    team_qs = om.teams.all()
+
+                for team in team_qs:
+                    team.access_type = om.type
+
+            team_list = set(team_qs)
+
+            # TODO(dcramer): remove all of this junk when access groups are
+            # killed
+            ag_qs = AccessGroup.objects.filter(
+                members=user,
+                team__organization=organization,
+            ).select_related('team')
+            if access is not None:
+                ag_qs = ag_qs.filter(type__lte=access)
 
-            for team in team_qs:
-                team.access_type = om.type
+            for ag in ag_qs:
+                if ag.team in team_list:
+                    continue
+
+                ag.team.is_access_group = True
+                ag.team.access_type = ag.type
+                team_list.add(ag.team)
 
-        results = sorted(team_qs, key=lambda x: x.name.lower())
+        results = sorted(team_list, key=lambda x: x.name.lower())
 
         if with_projects:
             # these kinds of queries make people sad :(
@@ -71,6 +90,7 @@ class TeamManager(BaseManager):
                 project_list = list(Project.objects.get_for_user(
                     team=team,
                     user=user,
+                    _skip_team_check=True
                 ))
                 results[idx] = (team, project_list)
 
