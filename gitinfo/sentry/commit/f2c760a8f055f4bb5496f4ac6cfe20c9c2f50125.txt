commit f2c760a8f055f4bb5496f4ac6cfe20c9c2f50125
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jan 24 12:55:54 2018 -0800

    fix(db): Remove null values in string literals (#7045)
    
    * Added a test that doesn't pass testing escaping null chars
    
    * changed escape_null to replace the null char with an empty str
    
    * fixed unintended change.
    
    * Renamed escape_null to remove_null
    
    * Fixes SENTRY-5RH. Changed comment to reflect that the null value is removed.

diff --git a/src/sentry/db/postgres/base.py b/src/sentry/db/postgres/base.py
index 2142d43933..c4928237bb 100644
--- a/src/sentry/db/postgres/base.py
+++ b/src/sentry/db/postgres/base.py
@@ -16,10 +16,10 @@ from .operations import DatabaseOperations
 __all__ = ('DatabaseWrapper', )
 
 
-def escape_null(value):
+def remove_null(value):
     if not isinstance(value, string_types):
         return value
-    return value.replace('\x00', '\\x00')
+    return value.replace('\x00', '')
 
 
 class CursorWrapper(object):
@@ -50,7 +50,7 @@ class CursorWrapper(object):
                 # NULL byte in a parameter would start raising a ValueError.
                 # psycopg2 chose to do this rather than let Postgres silently
                 # truncate the data, which is it's behavior when it sees a
-                # NULL byte. But for us, we'd rather munge the value so it's
+                # NULL byte. But for us, we'd rather remove the null value so it's
                 # somewhat legible rather than error. Considering this is better
                 # behavior than the database truncating, seems good to do this
                 # rather than attempting to sanitize all data inputs now manually.
@@ -60,7 +60,7 @@ class CursorWrapper(object):
                 # address that later rather than potentially catch incorrect behavior.
                 if e.message != 'A string literal cannot contain NUL (0x00) characters.':
                     raise
-                return self.cursor.execute(sql, [escape_null(param) for param in params])
+                return self.cursor.execute(sql, [remove_null(param) for param in params])
         return self.cursor.execute(sql)
 
     @capture_transaction_exceptions
diff --git a/tests/sentry/db/postgres/test_base.py b/tests/sentry/db/postgres/test_base.py
index 8c74fefe98..e3ec64159a 100644
--- a/tests/sentry/db/postgres/test_base.py
+++ b/tests/sentry/db/postgres/test_base.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import pytest
 from sentry.utils.db import is_postgres
 from sentry.testutils import TestCase
+from sentry.constants import MAX_CULPRIT_LENGTH
 
 
 def psycopg2_version():
@@ -20,6 +21,30 @@ class CursorWrapperTestCase(TestCase):
         from django.db import connection
         cursor = connection.cursor()
         cursor.execute('SELECT %s', [b'Ma\x00tt'])
-        assert cursor.fetchone()[0] == b'Ma\\x00tt'
+        assert cursor.fetchone()[0] == b'Matt'
         cursor.execute('SELECT %s', [u'Ma\x00tt'])
-        assert cursor.fetchone()[0] == u'Ma\\x00tt'
+        assert cursor.fetchone()[0] == u'Matt'
+
+    def test_null_bytes_at_max_len_bytes(self):
+        from django.db import connection
+        cursor = connection.cursor()
+
+        long_str = (b'a' * (MAX_CULPRIT_LENGTH - 1)) + b'\x00'
+        assert len(long_str) <= MAX_CULPRIT_LENGTH
+
+        cursor.execute('SELECT %s', [long_str])
+        long_str_from_db = cursor.fetchone()[0]
+        assert long_str_from_db == (b'a' * (MAX_CULPRIT_LENGTH - 1))
+        assert len(long_str_from_db) <= MAX_CULPRIT_LENGTH
+
+    def test_null_bytes_at_max_len_unicode(self):
+        from django.db import connection
+        cursor = connection.cursor()
+
+        long_str = (u'a' * (MAX_CULPRIT_LENGTH - 1)) + u'\x00'
+        assert len(long_str) <= MAX_CULPRIT_LENGTH
+
+        cursor.execute('SELECT %s', [long_str])
+        long_str_from_db = cursor.fetchone()[0]
+        assert long_str_from_db == (u'a' * (MAX_CULPRIT_LENGTH - 1))
+        assert len(long_str_from_db) <= MAX_CULPRIT_LENGTH
