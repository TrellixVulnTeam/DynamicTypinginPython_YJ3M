commit 921c375c39fa07c25e3c4c810b88942b7a17d503
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Sep 5 13:51:22 2018 -0700

    feat(discover): Reset Discover page when navigated to (#9616)
    
    When Discover is navigated to again, reset the page

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index d01a72c2a3..2e4ceaac00 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -45,6 +45,19 @@ export default class OrganizationDiscover extends React.Component {
     };
   }
 
+  componentWillReceiveProps(nextProps) {
+    const {queryBuilder, location: {search}} = nextProps;
+    if (search === '') {
+      queryBuilder.reset();
+      this.setState({
+        data: null,
+        query: null,
+        chartData: null,
+        chartQuery: null,
+      });
+    }
+  }
+
   updateField = (field, value) => {
     this.props.queryBuilder.updateField(field, value);
     this.forceUpdate();
@@ -186,18 +199,11 @@ export default class OrganizationDiscover extends React.Component {
   };
 
   reset = () => {
-    const {queryBuilder, organization} = this.props;
-
-    queryBuilder.reset();
-    this.setState({
-      data: null,
-      chartData: null,
-      chartQuery: null,
-    });
     browserHistory.push({
-      pathname: `/organizations/${organization.slug}/discover/`,
+      pathname: `/organizations/${this.props.organization.slug}/discover/`,
     });
   };
+
   render() {
     const {data, query, chartData, chartQuery, isFetchingQuery} = this.state;
     const {queryBuilder} = this.props;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index 7b2a60b3bf..7ca2cf8491 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -61,6 +61,7 @@ const OrganizationDiscoverContainer = createReactClass({
           <Discover
             organization={this.getOrganization()}
             queryBuilder={this.queryBuilder}
+            location={this.props.location}
           />
         )}
       </div>
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 14779a971f..70f525e0d2 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {mount} from 'enzyme';
+import {browserHistory} from 'react-router';
 
 import Discover from 'app/views/organizationDiscover/discover';
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
@@ -116,12 +117,25 @@ describe('Discover', function() {
   describe('reset()', function() {
     let wrapper, queryBuilder;
     beforeEach(function() {
+      browserHistory.push.mockImplementation(function(url) {
+        wrapper.setProps({
+          location: {
+            search: url.pathname.replace('/organizations/org-slug/discover/', ''),
+          },
+        });
+      });
+
       const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
       queryBuilder = createQueryBuilder({}, organization);
       queryBuilder.fetch = jest.fn(() => Promise.resolve());
+      queryBuilder.reset = jest.fn(queryBuilder.reset);
 
       wrapper = mount(
-        <Discover queryBuilder={queryBuilder} organization={organization} />,
+        <Discover
+          queryBuilder={queryBuilder}
+          organization={organization}
+          location={{location: '?fields=something'}}
+        />,
         TestStubs.routerContext()
       );
 
@@ -133,6 +147,16 @@ describe('Discover', function() {
       wrapper.update();
     });
 
+    it('resets query builder and state', function() {
+      wrapper.instance().reset();
+      expect(queryBuilder.reset).toHaveBeenCalled();
+      const {data, query, chartData, chartQuery} = wrapper.instance().state;
+      expect(data).toBeNull();
+      expect(query).toBeNull();
+      expect(chartData).toBeNull();
+      expect(chartQuery).toBeNull();
+    });
+
     it('resets "fields"', function() {
       const fields = wrapper.find('SelectControl[name="fields"]');
       expect(fields.text()).toContain('message');
