commit ed9df203c1b72405bf32bd01fba7b48f794828b7
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed Jul 1 08:36:11 2020 +0200

    fix(jsomform-fields): Fix display multine value (#19638)

diff --git a/src/sentry/static/sentry/app/data/forms/apiApplication.tsx b/src/sentry/static/sentry/app/data/forms/apiApplication.tsx
index 6b720b4c57..9c5a4cbb8c 100644
--- a/src/sentry/static/sentry/app/data/forms/apiApplication.tsx
+++ b/src/sentry/static/sentry/app/data/forms/apiApplication.tsx
@@ -1,4 +1,4 @@
-import {extractMultilineFields} from 'app/utils';
+import {extractMultilineFields, convertMultilineFieldValue} from 'app/utils';
 import getDynamicText from 'app/utils/getDynamicText';
 import {JsonFormObject} from 'app/views/settings/components/forms/type';
 
@@ -53,7 +53,7 @@ const forms: JsonFormObject[] = [
         label: 'Authorized Redirect URIs',
         help: 'Separate multiple entries with a newline.',
         getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+        setValue: val => convertMultilineFieldValue(val),
       },
       {
         name: 'allowedOrigins',
@@ -63,7 +63,7 @@ const forms: JsonFormObject[] = [
         label: 'Authorized JavaScript Origins',
         help: 'Separate multiple entries with a newline.',
         getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+        setValue: val => convertMultilineFieldValue(val),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
index 6e0900b2bf..c03aac6bb4 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
@@ -1,4 +1,4 @@
-import {extractMultilineFields} from 'app/utils';
+import {extractMultilineFields, convertMultilineFieldValue} from 'app/utils';
 import {t} from 'app/locale';
 import {
   STORE_CRASH_REPORTS_VALUES,
@@ -129,7 +129,7 @@ const organizationSecurityAndPrivacy: JsonFormObject[] = [
           'Note: These fields will be used in addition to project specific fields.'
         ),
         getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+        setValue: val => convertMultilineFieldValue(val),
       },
       {
         name: 'safeFields',
@@ -146,7 +146,7 @@ const organizationSecurityAndPrivacy: JsonFormObject[] = [
           'Note: These fields will be used in addition to project specific fields'
         ),
         getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+        setValue: val => convertMultilineFieldValue(val),
       },
       {
         name: 'scrubIPAddresses',
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
index 6c158f9f97..0a63e5e916 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {extractMultilineFields} from 'app/utils';
+import {extractMultilineFields, convertMultilineFieldValue} from 'app/utils';
 import {t, tct, tn} from 'app/locale';
 import HintPanelItem from 'app/components/panels/hintPanelItem';
 import PlatformIcon from 'app/components/platformIcon';
@@ -316,7 +316,7 @@ export const fields: {[key: string]: Field} = {
       'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'
     ),
     getValue: val => extractMultilineFields(val),
-    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+    setValue: val => convertMultilineFieldValue(val),
   },
   safeFields: {
     name: 'safeFields',
@@ -330,7 +330,7 @@ export const fields: {[key: string]: Field} = {
       'Field names which data scrubbers should ignore. Separate multiple entries with a newline'
     ),
     getValue: val => extractMultilineFields(val),
-    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+    setValue: val => convertMultilineFieldValue(val),
   },
   storeCrashReports: {
     name: 'storeCrashReports',
@@ -384,7 +384,7 @@ export const fields: {[key: string]: Field} = {
     label: t('Allowed Domains'),
     help: t('Separate multiple entries with a newline'),
     getValue: val => extractMultilineFields(val),
-    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+    setValue: val => convertMultilineFieldValue(val),
   },
   scrapeJavaScript: {
     name: 'scrapeJavaScript',
diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index 061dc82bfa..e8bbe79e01 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -199,6 +199,23 @@ export function extractMultilineFields(value: string): Array<string> {
     .filter(f => f !== '');
 }
 
+/**
+ * If the value is of type Array, converts it to type string, keeping the line breaks, if there is any
+ */
+export function convertMultilineFieldValue<T extends string | Array<string>>(
+  value: T
+): string {
+  if (Array.isArray(value)) {
+    return value.join('\n');
+  }
+
+  if (typeof value === 'string') {
+    return value.split('\n').join('\n');
+  }
+
+  return '';
+}
+
 function projectDisplayCompare(a: Project, b: Project): number {
   if (a.isBookmarked !== b.isBookmarked) {
     return a.isBookmarked ? -1 : 1;
