commit ffe7b6e1197557e0d215e0760479723bb97052c1
Author: Mark Story <mark@sentry.io>
Date:   Mon Aug 19 16:09:29 2019 -0400

    ref(ui) Remove more usage of createReactClass (#14427)
    
    Remove a few more usages of createReactClass()

diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index 1e62ea6382..c0678639cd 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import StackedBarChart from 'app/components/stackedBarChart';
 import SentryTypes from 'app/sentryTypes';
@@ -8,10 +7,8 @@ import {t} from 'app/locale';
 import {intcomma} from 'app/utils';
 import theme from 'app/utils/theme';
 
-const GroupReleaseChart = createReactClass({
-  displayName: 'GroupReleaseChart',
-
-  propTypes: {
+class GroupReleaseChart extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     release: PropTypes.shape({
       version: PropTypes.string.isRequired,
@@ -21,15 +18,16 @@ const GroupReleaseChart = createReactClass({
     firstSeen: PropTypes.string,
     lastSeen: PropTypes.string,
     title: PropTypes.string,
-  },
+  };
 
-  getInitialState() {
-    return this.getNextState(this.props);
-  },
+  constructor(...args) {
+    super(...args);
+    this.state = this.getNextState(this.props);
+  }
 
   componentWillReceiveProps(nextProps) {
     this.setState(this.getNextState(nextProps));
-  },
+  }
 
   getNextState(props) {
     const releaseStats = props.releaseStats;
@@ -52,9 +50,9 @@ const GroupReleaseChart = createReactClass({
       releasePoints,
       envPoints,
     };
-  },
+  }
 
-  renderTooltip(point, pointIdx, chart) {
+  renderTooltip = (point, _pointIdx, chart) => {
     const timeLabel = chart.getTimeLabel(point);
     let totalY = 0;
     for (let i = 0; i < point.y.length; i++) {
@@ -101,7 +99,7 @@ const GroupReleaseChart = createReactClass({
         </dl>
       </div>
     );
-  },
+  };
 
   render() {
     const className = 'bar-chart group-chart ' + (this.props.className || '');
@@ -171,7 +169,7 @@ const GroupReleaseChart = createReactClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 export default GroupReleaseChart;
diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index b7ec7e661d..240d722d8c 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import SentryTypes from 'app/sentryTypes';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import GroupReleaseChart from 'app/components/group/releaseChart';
@@ -8,16 +7,14 @@ import SeenInfo from 'app/components/group/seenInfo';
 import getDynamicText from 'app/utils/getDynamicText';
 import {t} from 'app/locale';
 
-const GroupReleaseStats = createReactClass({
-  displayName: 'GroupReleaseStats',
-
-  propTypes: {
+class GroupReleaseStats extends React.PureComponent {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     project: SentryTypes.Project.isRequired,
     organization: SentryTypes.Organization.isRequired,
     environments: PropTypes.arrayOf(SentryTypes.Environment).isRequired,
     allEnvironments: PropTypes.object,
-  },
+  };
 
   render() {
     const {group, organization, project, environments, allEnvironments} = this.props;
@@ -113,7 +110,7 @@ const GroupReleaseStats = createReactClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default GroupReleaseStats;
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 83120edbcb..9f99c5c447 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -1,7 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {isEqual, pickBy, keyBy, isObject} from 'lodash';
-import createReactClass from 'create-react-class';
 
 import ErrorBoundary from 'app/components/errorBoundary';
 import SentryTypes from 'app/sentryTypes';
@@ -17,25 +16,38 @@ import {t, tct} from 'app/locale';
 
 import ExternalIssueList from 'app/components/group/externalIssuesList';
 
-const GroupSidebar = createReactClass({
-  displayName: 'GroupSidebar',
+const SUBSCRIPTION_REASONS = {
+  commented: t("You're receiving updates because you have commented on this issue."),
+  assigned: t("You're receiving updates because you were assigned to this issue."),
+  bookmarked: t("You're receiving updates because you have bookmarked this issue."),
+  changed_status: t(
+    "You're receiving updates because you have changed the status of this issue."
+  ),
+  mentioned: t("You're receiving updates because you have been mentioned in this issue."),
+};
 
-  propTypes: {
+class GroupSidebar extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
     group: SentryTypes.Group,
     event: SentryTypes.Event,
     environments: PropTypes.arrayOf(SentryTypes.Environment),
-  },
+  };
 
-  getInitialState() {
-    return {participants: [], environments: this.props.environments};
-  },
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      participants: [],
+      environments: props.environments,
+    };
+  }
 
   componentWillMount() {
-    const {group} = this.props;
-    this.props.api.request(`/issues/${group.id}/participants/`, {
+    const {group, api} = this.props;
+    api.request(`/issues/${group.id}/participants/`, {
       success: data => {
         this.setState({
           participants: data,
@@ -64,19 +76,19 @@ const GroupSidebar = createReactClass({
     });
 
     this.fetchTagData();
-  },
+  }
 
   componentWillReceiveProps(nextProps) {
     if (!isEqual(nextProps.environments, this.props.environments)) {
       this.setState({environments: nextProps.environments}, this.fetchTagData);
     }
-  },
+  }
 
   fetchTagData() {
-    const {group} = this.props;
+    const {api, group} = this.props;
 
     // Fetch the top values for the current group's top tags.
-    this.props.api.request(`/issues/${group.id}/tags/`, {
+    api.request(`/issues/${group.id}/tags/`, {
       query: pickBy({
         key: group.tags.map(data => data.key),
         environment: this.state.environments.map(env => env.name),
@@ -92,25 +104,13 @@ const GroupSidebar = createReactClass({
         });
       },
     });
-  },
-
-  subscriptionReasons: {
-    commented: t("You're receiving updates because you have commented on this issue."),
-    assigned: t("You're receiving updates because you were assigned to this issue."),
-    bookmarked: t("You're receiving updates because you have bookmarked this issue."),
-    changed_status: t(
-      "You're receiving updates because you have changed the status of this issue."
-    ),
-    mentioned: t(
-      "You're receiving updates because you have been mentioned in this issue."
-    ),
-  },
+  }
 
   toggleSubscription() {
-    const {group, project, organization} = this.props;
+    const {api, group, project, organization} = this.props;
     const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    this.props.api.bulkUpdate(
+    api.bulkUpdate(
       {
         orgId: organization.slug,
         projectId: project.slug,
@@ -121,7 +121,7 @@ const GroupSidebar = createReactClass({
       },
       {
         complete: () => {
-          this.props.api.request(`/issues/${group.id}/participants/`, {
+          api.request(`/issues/${group.id}/participants/`, {
             success: data => {
               this.setState({
                 participants: data,
@@ -139,7 +139,7 @@ const GroupSidebar = createReactClass({
         },
       }
     );
-  },
+  }
 
   renderPluginIssue() {
     const issues = [];
@@ -170,11 +170,11 @@ const GroupSidebar = createReactClass({
       );
     }
     return null;
-  },
+  }
 
   canChangeSubscriptionState() {
     return !(this.props.group.subscriptionDetails || {disabled: false}).disabled;
-  },
+  }
 
   getNotificationText() {
     const {group} = this.props;
@@ -185,8 +185,8 @@ const GroupSidebar = createReactClass({
       );
       if (group.subscriptionDetails) {
         const reason = group.subscriptionDetails.reason;
-        if (this.subscriptionReasons.hasOwnProperty(reason)) {
-          result = this.subscriptionReasons[reason];
+        if (SUBSCRIPTION_REASONS.hasOwnProperty(reason)) {
+          result = SUBSCRIPTION_REASONS[reason];
         }
       } else {
         result = tct(
@@ -206,7 +206,7 @@ const GroupSidebar = createReactClass({
         return t("You're not subscribed to this issue.");
       }
     }
-  },
+  }
 
   renderParticipantData() {
     const error = this.state.error;
@@ -223,7 +223,7 @@ const GroupSidebar = createReactClass({
         />
       );
     }
-  },
+  }
 
   render() {
     const {group, organization, project, environments} = this.props;
@@ -290,12 +290,12 @@ const GroupSidebar = createReactClass({
         {this.canChangeSubscriptionState() && (
           <SubscribeButton
             isSubscribed={group.isSubscribed}
-            onClick={this.toggleSubscription}
+            onClick={() => this.toggleSubscription()}
           />
         )}
       </div>
     );
-  },
-});
+  }
+}
 
 export default withApi(GroupSidebar);
diff --git a/src/sentry/static/sentry/app/views/newsletterConsent.jsx b/src/sentry/static/sentry/app/views/newsletterConsent.jsx
index 142c110535..fa2a93961e 100644
--- a/src/sentry/static/sentry/app/views/newsletterConsent.jsx
+++ b/src/sentry/static/sentry/app/views/newsletterConsent.jsx
@@ -1,28 +1,26 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import {ApiForm, RadioBooleanField} from 'app/components/forms';
 import NarrowLayout from 'app/components/narrowLayout';
+import callIfFunction from 'app/utils/callIfFunction';
 
-export default createReactClass({
-  displayName: 'NewsletterConsent',
-
-  propTypes: {
+export default class NewsletterConsent extends React.Component {
+  static propTypes = {
     onSubmitSuccess: PropTypes.func,
-  },
+  };
 
   componentWillMount() {
     document.body.classList.add('auth');
-  },
+  }
 
   componentWillUnmount() {
     document.body.classList.remove('auth');
-  },
+  }
 
-  onSubmitSuccess() {
-    this.props.onSubmitSuccess && this.props.onSubmitSuccess();
-  },
+  onSubmitSuccess = () => {
+    callIfFunction(this.props.onSubmitSuccess);
+  };
 
   // NOTE: the text here is duplicated within ``RegisterForm`` on the backend
   render() {
@@ -34,7 +32,6 @@ export default createReactClass({
           apiMethod="POST"
           apiEndpoint="/users/me/subscriptions/"
           onSubmitSuccess={this.onSubmitSuccess}
-          onSubmitError={this.onSubmitError}
           submitLabel="Continue"
         >
           <RadioBooleanField
@@ -59,5 +56,5 @@ export default createReactClass({
         </ApiForm>
       </NarrowLayout>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
index fa876655a1..51c08eb049 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
@@ -2,7 +2,6 @@ import {Link} from 'react-router';
 import {sortBy, property, isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import {isUrl, percent} from 'app/utils';
 import {t} from 'app/locale';
@@ -17,37 +16,33 @@ import SentryTypes from 'app/sentryTypes';
 import TimeSince from 'app/components/timeSince';
 import withOrganization from 'app/utils/withOrganization';
 
-const GroupTagValues = createReactClass({
-  displayName: 'GroupTagValues',
-
-  propTypes: {
+class GroupTagValues extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     group: SentryTypes.Group.isRequired,
     query: PropTypes.object,
-  },
+  };
 
-  getInitialState() {
-    return {
-      tagKey: null,
-      tagValueList: null,
-      loading: true,
-      error: false,
-      pageLinks: '',
-    };
-  },
+  state = {
+    tagKey: null,
+    tagValueList: null,
+    loading: true,
+    error: false,
+    pageLinks: '',
+  };
 
   componentWillMount() {
     this.fetchData();
-  },
+  }
 
   componentDidUpdate(prevProps) {
     const queryHasChanged = !isEqual(prevProps.query, this.props.query);
     if (queryHasChanged || prevProps.params.tagKey !== this.props.params.tagKey) {
       this.fetchData();
     }
-  },
+  }
 
-  async fetchData() {
+  fetchData = async () => {
     const {params, query} = this.props;
 
     this.setState({
@@ -86,11 +81,11 @@ const GroupTagValues = createReactClass({
         loading: false,
       });
     }
-  },
+  };
 
   getUserDisplayName(item) {
     return item.email || item.username || item.identifier || item.ipAddress || item.value;
-  },
+  }
 
   render() {
     if (this.state.loading) {
@@ -189,8 +184,8 @@ const GroupTagValues = createReactClass({
         </p>
       </div>
     );
-  },
-});
+  }
+}
 
 export {GroupTagValues};
 export default withApi(withOrganization(GroupTagValues));
