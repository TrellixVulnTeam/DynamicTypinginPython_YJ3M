commit b2b01fd54b1a55e21e1c7342f6c81b83165a82eb
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Aug 1 13:04:49 2019 -0700

    Feat (app-platform) routes creating revoking api tokens internal integration (#14219)

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 1c628d29fa..fef4380d02 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -321,3 +321,24 @@ class SentryAppAuthorizationsPermission(SentryPermission):
 class SentryAppAuthorizationsBaseEndpoint(SentryAppInstallationBaseEndpoint):
     authentication_classes = (ClientIdSecretAuthentication, )
     permission_classes = (SentryAppAuthorizationsPermission, )
+
+
+class SentryInternalAppTokenPermission(SentryPermission):
+    scope_map = {
+        'POST': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+        'DELETE': ('org:write', 'org:admin'),
+    }
+
+    def has_object_permission(self, request, view, sentry_app):
+        if not hasattr(request, 'user') or not request.user:
+            return False
+
+        self.determine_access(request, sentry_app.owner)
+
+        if is_active_superuser(request):
+            return True
+
+        return ensure_scoped_permission(
+            request,
+            self.scope_map.get(request.method),
+        )
diff --git a/src/sentry/api/endpoints/sentry_internal_app_token_details.py b/src/sentry/api/endpoints/sentry_internal_app_token_details.py
new file mode 100644
index 0000000000..76400472c4
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_internal_app_token_details.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+from rest_framework import status
+from django.http import Http404
+
+from sentry.api.bases import (
+    SentryInternalAppTokenPermission, SentryAppBaseEndpoint,
+)
+from sentry.models import ApiToken
+from sentry.features.helpers import requires_feature
+from sentry.mediators.sentry_app_installation_tokens import Destroyer
+
+
+class SentryInternalAppTokenDetailsEndpoint(SentryAppBaseEndpoint):
+    permission_classes = (SentryInternalAppTokenPermission, )
+
+    def convert_args(self, request, sentry_app_slug, api_token, *args, **kwargs):
+        # get the sentry_app from the SentryAppBaseEndpoint class
+        (args, kwargs) = super(SentryInternalAppTokenDetailsEndpoint,
+                               self).convert_args(request, sentry_app_slug, *args, **kwargs)
+
+        try:
+            kwargs['api_token'] = ApiToken.objects.get(token=api_token)
+        except ApiToken.DoesNotExist:
+            raise Http404
+
+        return (args, kwargs)
+
+    @requires_feature('organizations:sentry-apps', any_org=True)
+    def delete(self, request, sentry_app, api_token):
+        # Validate the token is associated with the application
+        if api_token.application_id != sentry_app.application_id:
+            raise Http404
+
+        if not sentry_app.is_internal:
+            return Response('This route is limited to internal integrations only',
+                            status=status.HTTP_403_FORBIDDEN)
+
+        Destroyer.run(
+            api_token=api_token,
+            user=request.user,
+            request=request,
+        )
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/sentry_internal_app_tokens.py b/src/sentry/api/endpoints/sentry_internal_app_tokens.py
new file mode 100644
index 0000000000..ae593b575c
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_internal_app_tokens.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+from rest_framework import status
+
+from sentry.api.bases import (
+    SentryInternalAppTokenPermission, SentryAppBaseEndpoint,
+)
+from sentry.models import SentryAppInstallation
+from sentry.features.helpers import requires_feature
+from sentry.mediators.sentry_app_installation_tokens import Creator
+from sentry.api.serializers.models.apitoken import ApiTokenSerializer
+from sentry.exceptions import ApiTokenLimitError
+
+
+class SentryInternalAppTokensEndpoint(SentryAppBaseEndpoint):
+    permission_classes = (SentryInternalAppTokenPermission, )
+
+    @requires_feature('organizations:sentry-apps', any_org=True)
+    def post(self, request, sentry_app):
+        if not sentry_app.is_internal:
+            return Response('This route is limited to internal integrations only',
+                            status=status.HTTP_403_FORBIDDEN
+                            )
+
+        sentry_app_installation = SentryAppInstallation.objects.get(sentry_app=sentry_app)
+        try:
+            api_token = Creator.run(
+                request=request,
+                sentry_app_installation=sentry_app_installation,
+                user=request.user,
+            )
+        except ApiTokenLimitError as e:
+            return Response(e.message, status=status.HTTP_403_FORBIDDEN)
+
+        # hack so the token is included in the response
+        attrs = {
+            'application': None,
+        }
+        return Response(ApiTokenSerializer().serialize(api_token, attrs, request.user), status=201)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 33d70bb251..da406ee823 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -229,6 +229,8 @@ from .endpoints.sentry_app_authorizations import SentryAppAuthorizationsEndpoint
 from .endpoints.sentry_app_components import (
     OrganizationSentryAppComponentsEndpoint, SentryAppComponentsEndpoint
 )
+from .endpoints.sentry_internal_app_tokens import SentryInternalAppTokensEndpoint
+from .endpoints.sentry_internal_app_token_details import SentryInternalAppTokenDetailsEndpoint
 from .endpoints.sentry_app_details import SentryAppDetailsEndpoint
 from .endpoints.sentry_app_features import SentryAppFeaturesEndpoint
 from .endpoints.sentry_app_publish_request import SentryAppPublishRequestEndpoint
@@ -1423,6 +1425,16 @@ urlpatterns = patterns(
         SentryAppComponentsEndpoint.as_view(),
         name='sentry-api-0-sentry-app-components'
     ),
+    url(
+        r'^sentry-apps/(?P<sentry_app_slug>[^\/]+)/api-tokens/$',
+        SentryInternalAppTokensEndpoint.as_view(),
+        name='sentry-api-0-sentry-internal-app-tokens'
+    ),
+    url(
+        r'^sentry-apps/(?P<sentry_app_slug>[^\/]+)/api-tokens/(?P<api_token>[^\/]+)$',
+        SentryInternalAppTokenDetailsEndpoint.as_view(),
+        name='sentry-api-0-sentry-internal-app-token-details'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/sentry-app-components/$',
         OrganizationSentryAppComponentsEndpoint.as_view(),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 06ee0c44a6..2eef8f19e8 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -434,3 +434,5 @@ DEFAULT_STORE_NORMALIZER_ARGS = dict(
     max_secs_in_past=MAX_SECS_IN_PAST,
     enable_trimming=True,
 )
+
+INTERNAL_INTEGRATION_TOKEN_COUNT_MAX = 20
diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index 6eaea9c361..ab6e0858a3 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -59,3 +59,7 @@ class HookValidationError(Exception):
 
 class NotRegistered(Exception):
     pass
+
+
+class ApiTokenLimitError(Exception):
+    pass
diff --git a/src/sentry/mediators/sentry_app_installation_tokens/creator.py b/src/sentry/mediators/sentry_app_installation_tokens/creator.py
index 0bfef9233b..3ae182af6c 100644
--- a/src/sentry/mediators/sentry_app_installation_tokens/creator.py
+++ b/src/sentry/mediators/sentry_app_installation_tokens/creator.py
@@ -8,6 +8,8 @@ from sentry.mediators import Mediator, Param
 from sentry.models import (
     AuditLogEntryEvent, ApiToken, SentryAppInstallationToken
 )
+from sentry.exceptions import ApiTokenLimitError
+from sentry.constants import INTERNAL_INTEGRATION_TOKEN_COUNT_MAX
 
 
 class Creator(Mediator):
@@ -19,9 +21,18 @@ class Creator(Mediator):
     request = Param('rest_framework.request.Request', required=False)
 
     def call(self):
+        self._check_token_limit()
         self._create_api_token()
         self._create_sentry_app_installation_token()
-        return self.sentry_app_installation_token
+        return self.api_token
+
+    def _check_token_limit(self):
+        curr_count = SentryAppInstallationToken.objects.filter(
+            sentry_app_installation=self.sentry_app_installation).count()
+        if curr_count >= INTERNAL_INTEGRATION_TOKEN_COUNT_MAX:
+            raise ApiTokenLimitError(
+                'Cannot generate more than %d tokens for a single integration' %
+                INTERNAL_INTEGRATION_TOKEN_COUNT_MAX)
 
     def _create_api_token(self):
         self.api_token = ApiToken.objects.create(
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index 7c6766d175..11466e5a77 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -45,9 +45,7 @@ class InternalCreator(Mediator):
             'user': self.user
         }
 
-        sentry_app_installation_token = SentryAppInstallationTokenCreator.run(
-            request=self.request, **data)
-        self.install.api_token = sentry_app_installation_token.api_token
+        self.install.api_token = SentryAppInstallationTokenCreator.run(request=self.request, **data)
         self.install.save()
 
     def _install(self):
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 866b6b6341..1605769c90 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -740,11 +740,10 @@ class Factories(object):
 
     @staticmethod
     def create_internal_integration_token(install, **kwargs):
-        installation_token = sentry_app_installation_tokens.Creator.run(
+        return sentry_app_installation_tokens.Creator.run(
             sentry_app_installation=install,
             **kwargs
         )
-        return installation_token.api_token
 
     @staticmethod
     def _sentry_app_kwargs(**kwargs):
diff --git a/tests/sentry/api/endpoints/test_sentry_internal_app_token_details.py b/tests/sentry/api/endpoints/test_sentry_internal_app_token_details.py
new file mode 100644
index 0000000000..8b717478e1
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_internal_app_token_details.py
@@ -0,0 +1,111 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+from sentry.models import ApiToken
+from sentry.mediators.token_exchange import GrantExchanger
+
+
+class SentryInternalAppTokenCreationTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user, name='My Org')
+        self.project = self.create_project(organization=self.org)
+
+        self.internal_sentry_app = self.create_internal_integration(
+            name='My Internal App',
+            organization=self.org
+        )
+
+        self.api_token = ApiToken.objects.get(application=self.internal_sentry_app.application)
+
+        self.url = reverse(
+            'sentry-api-0-sentry-internal-app-token-details',
+            args=[self.internal_sentry_app.slug, self.api_token.token],
+        )
+
+    @with_feature('organizations:sentry-apps')
+    def test_delete_token(self):
+        self.login_as(user=self.user)
+        response = self.client.delete(self.url, format='json')
+        assert response.status_code == 204
+        assert not ApiToken.objects.filter(pk=self.api_token.id).exists()
+
+    @with_feature('organizations:sentry-apps')
+    def test_delete_invalid_token(self):
+        self.login_as(user=self.user)
+
+        url = reverse(
+            'sentry-api-0-sentry-internal-app-token-details',
+            args=[self.internal_sentry_app.slug, 'random'],
+        )
+
+        response = self.client.delete(url, format='json')
+        assert response.status_code == 404
+
+    @with_feature('organizations:sentry-apps')
+    def test_delete_token_another_app(self):
+
+        another_app = self.create_internal_integration(
+            name='Another app',
+            organization=self.org
+        )
+        api_token = ApiToken.objects.get(application=another_app.application)
+
+        url = reverse(
+            'sentry-api-0-sentry-internal-app-token-details',
+            args=[self.internal_sentry_app.slug, api_token.token],
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.delete(url, format='json')
+        assert response.status_code == 404
+
+    @with_feature('organizations:sentry-apps')
+    def test_non_internal_app(self):
+        sentry_app = self.create_sentry_app(
+            name='My External App',
+            organization=self.org,
+        )
+
+        install = self.create_sentry_app_installation(
+            slug=sentry_app.slug,
+            organization=self.org,
+            user=self.user
+        )
+
+        client_id = install.sentry_app.application.client_id
+        user = install.sentry_app.proxy_user
+
+        api_token = GrantExchanger.run(
+            install=install,
+            code=install.api_grant.code,
+            client_id=client_id,
+            user=user,
+        )
+
+        url = reverse(
+            'sentry-api-0-sentry-internal-app-token-details',
+            args=[install.sentry_app.slug, api_token.token],
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.delete(url, format='json')
+
+        assert response.status_code == 403
+        assert response.data == 'This route is limited to internal integrations only'
+
+    @with_feature('organizations:sentry-apps')
+    def test_sentry_app_not_found(self):
+
+        url = reverse(
+            'sentry-api-0-sentry-internal-app-token-details',
+            args=['not_a_slug', self.api_token.token],
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 404
diff --git a/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py b/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
new file mode 100644
index 0000000000..2eb8d4b5c1
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+from sentry.models import ApiToken
+
+
+class SentryInternalAppTokenCreationTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user, name='My Org')
+        self.project = self.create_project(organization=self.org)
+
+        self.internal_sentry_app = self.create_internal_integration(
+            name='My Internal App',
+            organization=self.org
+        )
+
+        self.url = reverse(
+            'sentry-api-0-sentry-internal-app-tokens',
+            args=[self.internal_sentry_app.slug],
+        )
+
+    @with_feature('organizations:sentry-apps')
+    def test_create_token(self):
+        self.login_as(user=self.user)
+        response = self.client.post(self.url, format='json')
+        assert response.status_code == 201
+
+        assert ApiToken.objects.get(token=response.data['token'])
+
+    @with_feature('organizations:sentry-apps')
+    def test_non_internal_app(self):
+        sentry_app = self.create_sentry_app(
+            name='My External App',
+            organization=self.org
+        )
+
+        url = reverse(
+            'sentry-api-0-sentry-internal-app-tokens',
+            args=[sentry_app.slug],
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 403
+        assert response.data == 'This route is limited to internal integrations only'
+
+    @with_feature('organizations:sentry-apps')
+    def test_sentry_app_not_found(self):
+
+        url = reverse(
+            'sentry-api-0-sentry-internal-app-tokens',
+            args=['not_a_slug'],
+        )
+
+        self.login_as(user=self.user)
+        response = self.client.post(url, format='json')
+
+        assert response.status_code == 404
+
+    @with_feature('organizations:sentry-apps')
+    def test_token_limit(self):
+        self.login_as(user=self.user)
+
+        # we already have one token created so just need to make 19 more first
+        for i in range(19):
+            response = self.client.post(self.url, format='json')
+            assert response.status_code == 201
+
+        response = self.client.post(self.url, format='json')
+        assert response.status_code == 403
+        assert response.data == 'Cannot generate more than 20 tokens for a single integration'
diff --git a/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py b/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py
index 43d932981b..f26553283a 100644
--- a/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py
+++ b/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py
@@ -4,6 +4,7 @@ from mock import patch
 from datetime import date
 
 from sentry.mediators.sentry_app_installation_tokens import Creator
+from sentry.mediators.sentry_app_installations import Creator as SentryAppInstallationCreator
 from sentry.models import (
     AuditLogEntry,
     SentryAppInstallationToken,
@@ -12,15 +13,20 @@ from sentry.models import (
 from sentry.testutils import TestCase
 
 
-class TestCreator(TestCase):
+class TestCreatorBase(TestCase):
     def setUp(self):
         self.user = self.create_user()
         self.org = self.create_organization(owner=self.user)
         self.create_project(organization=self.org)
 
+
+class TestCreatorInternal(TestCreatorBase):
+    def setUp(self):
+        super(TestCreatorInternal, self).setUp()
+
         # will create the installation and the first token
         self.sentry_app = self.create_internal_integration(
-            name='nulldb',
+            name='internal_app',
             organization=self.org
         )
 
@@ -28,18 +34,18 @@ class TestCreator(TestCase):
 
     @patch('sentry.analytics.record')
     def test_create_token_with_audit(self, record):
-        today = date.today()
         request = self.make_request(user=self.user, method='GET')
-        sentry_app_installation_token = Creator.run(
+        api_token = Creator.run(
             sentry_app_installation=self.sentry_app_installation,
-            expires_at=today,
             user=self.user,
             generate_audit=True,
             request=request
         )
 
         # verify token was created properly
-        assert sentry_app_installation_token.api_token.expires_at == today
+        assert api_token.expires_at is None
+        assert api_token.application == self.sentry_app.application
+        assert api_token.user == self.sentry_app.proxy_user
 
         # check we have two tokens
         sentry_app_installation_tokens = SentryAppInstallationToken.objects.filter(
@@ -48,9 +54,9 @@ class TestCreator(TestCase):
         assert len(sentry_app_installation_tokens) == 2
 
         log = AuditLogEntry.objects.get(organization=self.org)
-        assert log.get_note() == 'created a token for internal integration nulldb'
+        assert log.get_note() == 'created a token for internal integration internal_app'
         assert log.organization == self.org
-        assert log.target_object == sentry_app_installation_token.api_token.id
+        assert log.target_object == api_token.id
 
         record.assert_called_with(
             'sentry_app_installation_token.created',
@@ -64,14 +70,14 @@ class TestCreator(TestCase):
     @patch('sentry.analytics.record')
     def test_create_token_without_audit_or_date(self, record, create_audit_entry):
         request = self.make_request(user=self.user, method='GET')
-        sentry_app_installation_token = Creator.run(
+        api_token = Creator.run(
             sentry_app_installation=self.sentry_app_installation,
             user=self.user,
             request=request
         )
 
         # verify token was created properly
-        assert sentry_app_installation_token.api_token.expires_at is None
+        assert api_token.expires_at is None
 
         # check we have two tokens
         sentry_app_installation_tokens = SentryAppInstallationToken.objects.filter(
@@ -88,3 +94,32 @@ class TestCreator(TestCase):
             sentry_app_installation_id=self.sentry_app_installation.id,
             sentry_app=self.sentry_app.slug,
         )
+
+
+class TestCreatorExternal(TestCreatorBase):
+    def setUp(self):
+        super(TestCreatorExternal, self).setUp()
+
+        self.sentry_app = self.create_sentry_app(
+            name='external_app',
+            organization=self.org,
+            scopes=('org:write', 'team:admin'),
+        )
+
+        self.sentry_app_installation = SentryAppInstallationCreator.run(
+            slug=(self.sentry_app.slug),
+            organization=self.org,
+            user=(self.user),
+        )
+
+    def test_create_token(self):
+        today = date.today()
+        api_token = Creator.run(
+            sentry_app_installation=self.sentry_app_installation,
+            expires_at=today,
+            user=self.user
+        )
+
+        # verify token was created properly
+        assert api_token.expires_at == today
+        assert api_token.scope_list == ['org:write', 'team:admin']
