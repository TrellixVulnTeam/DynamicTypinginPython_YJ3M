commit 08eccc92ca5e829beab534cca53cfe35a6d36ff3
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Oct 28 12:30:04 2019 -0600

    feat(member-invites): Send emails on join / invite requests (#15248)

diff --git a/src/sentry/api/endpoints/organization_invite_request_index.py b/src/sentry/api/endpoints/organization_invite_request_index.py
index 7f95f93955..bb29dcd71b 100644
--- a/src/sentry/api/endpoints/organization_invite_request_index.py
+++ b/src/sentry/api/endpoints/organization_invite_request_index.py
@@ -93,4 +93,6 @@ class OrganizationInviteRequestIndexEndpoint(OrganizationEndpoint):
                 event=AuditLogEntryEvent.INVITE_REQUEST_ADD,
             )
 
+        om.send_request_notification_email()
+
         return Response(serialize(om), status=201)
diff --git a/src/sentry/api/endpoints/organization_join_request.py b/src/sentry/api/endpoints/organization_join_request.py
index ed9a488dc2..dbf356f57f 100644
--- a/src/sentry/api/endpoints/organization_join_request.py
+++ b/src/sentry/api/endpoints/organization_join_request.py
@@ -47,6 +47,7 @@ def create_organization_join_request(organization, email, ip_address=None):
                 "ip_address": ip_address,
             },
         )
+        return om
 
 
 class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
@@ -83,5 +84,9 @@ class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
         result = serializer.validated_data
         email = result["email"]
 
-        create_organization_join_request(organization, email, ip_address)
+        member = create_organization_join_request(organization, email, ip_address)
+
+        if member:
+            member.send_request_notification_email()
+
         return Response(status=204)
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 522724ff56..dddd40fca3 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -235,6 +235,57 @@ class OrganizationMember(Model):
             logger = get_logger(name="sentry.mail")
             logger.exception(e)
 
+    def send_request_notification_email(self):
+        from sentry.utils.email import MessageBuilder
+
+        link_args = {"organization_slug": self.organization.slug}
+
+        context = {
+            "email": self.email,
+            "inviter": self.inviter,
+            "organization": self.organization,
+            "organization_link": absolute_uri(
+                reverse("sentry-organization-index", args=[self.organization.slug])
+            ),
+            "pending_requests_link": absolute_uri(
+                reverse("sentry-organization-members-requests", kwargs=link_args)
+            ),
+        }
+
+        if self.requested_to_join:
+            email_args = {
+                "template": "sentry/emails/organization-join-request.txt",
+                "html_template": "sentry/emails/organization-join-request.html",
+            }
+        elif self.requested_to_be_invited:
+            email_args = {
+                "template": "sentry/emails/organization-invite-request.txt",
+                "html_template": "sentry/emails/organization-invite-request.html",
+            }
+        else:
+            raise RuntimeError("This member is not pending invitation")
+
+        recipients = OrganizationMember.objects.select_related("user").filter(
+            organization_id=self.organization_id,
+            user__isnull=False,
+            invite_status=InviteStatus.APPROVED.value,
+            role__in=(r.id for r in roles.get_all() if r.has_scope("member:write")),
+        )
+
+        msg = MessageBuilder(
+            subject="Access request to %s" % (self.organization.name,),
+            type="organization.invite-request",
+            context=context,
+            **email_args
+        )
+
+        for recipient in recipients:
+            try:
+                msg.send_async([recipient.get_email()])
+            except Exception as e:
+                logger = get_logger(name="sentry.mail")
+                logger.exception(e)
+
     def send_sso_link_email(self, actor, provider):
         from sentry.utils.email import MessageBuilder
 
diff --git a/src/sentry/templates/sentry/debug/mail/preview.html b/src/sentry/templates/sentry/debug/mail/preview.html
index 2ef7e20183..bd8671292b 100644
--- a/src/sentry/templates/sentry/debug/mail/preview.html
+++ b/src/sentry/templates/sentry/debug/mail/preview.html
@@ -39,6 +39,8 @@
         <option value="mail/request-access/">Access Requested</option>
         <option value="mail/access-approved/">Access Approved</option>
         <option value="mail/invitation/">Membership Invite</option>
+        <option value="mail/invite-request/">Invite Request</option>
+        <option value="mail/join-request/">Join Request</option>
       </optgroup>
       <optgroup label="Reports">
         <option value="mail/report/">Weekly Report</option>
diff --git a/src/sentry/templates/sentry/emails/organization-invite-request.html b/src/sentry/templates/sentry/emails/organization-invite-request.html
new file mode 100644
index 0000000000..64ed448754
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/organization-invite-request.html
@@ -0,0 +1,15 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block main %}
+  <h3>Request for Access</h3>
+
+  <p><strong>{{ inviter.get_salutation_name }}</strong> has requested to invite <strong>{{ email }}</strong> to the <a href="{{ organization_link }}">{{ organization.name }}</a> organization.</p>
+
+  <a href="{{ pending_requests_link }}" class="btn">View access requests</a>
+
+  <p class="via">
+    You are receiving this email because you're listed as an organization Owner or Manager.
+  </p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/organization-invite-request.txt b/src/sentry/templates/sentry/emails/organization-invite-request.txt
new file mode 100644
index 0000000000..92b110ecda
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/organization-invite-request.txt
@@ -0,0 +1,9 @@
+Request for Access
+
+{{ inviter.get_salutation_name }} has requested to invite {{ email }} to the {{ organization.name }} organization.
+
+View access requests by clicking the link below:
+
+    {{ pending_requests_link }}
+
+You are receiving this email because you're listed as an organization Owner or Manager.
diff --git a/src/sentry/web/debug_urls.py b/src/sentry/web/debug_urls.py
index 016c7efd93..1fa0ee7f7d 100644
--- a/src/sentry/web/debug_urls.py
+++ b/src/sentry/web/debug_urls.py
@@ -14,6 +14,9 @@ from sentry.web.frontend.debug.debug_trigger_error import DebugTriggerErrorView
 from sentry.web.frontend.debug.debug_error_embed import DebugErrorPageEmbedView
 from sentry.web.frontend.debug.debug_incident_activity_email import DebugIncidentActivityEmailView
 from sentry.web.frontend.debug.debug_invalid_identity_email import DebugInvalidIdentityEmailView
+from sentry.web.frontend.debug.debug_organization_invite_request import (
+    DebugOrganizationInviteRequestEmailView,
+)
 from sentry.web.frontend.debug.debug_organization_join_request import (
     DebugOrganizationJoinRequestEmailView,
 )
@@ -79,6 +82,7 @@ urlpatterns = patterns(
     ),
     url(r"^debug/mail/request-access/$", sentry.web.frontend.debug.mail.request_access),
     url(r"^debug/mail/join-request/$", DebugOrganizationJoinRequestEmailView.as_view()),
+    url(r"^debug/mail/invite-request/$", DebugOrganizationInviteRequestEmailView.as_view()),
     url(r"^debug/mail/access-approved/$", sentry.web.frontend.debug.mail.access_approved),
     url(r"^debug/mail/invitation/$", sentry.web.frontend.debug.mail.invitation),
     url(r"^debug/mail/invalid-identity/$", DebugInvalidIdentityEmailView.as_view()),
diff --git a/src/sentry/web/frontend/debug/debug_organization_invite_request.py b/src/sentry/web/frontend/debug/debug_organization_invite_request.py
new file mode 100644
index 0000000000..87a8ec77d0
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_organization_invite_request.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+from django.views.generic import View
+
+from sentry.models import Organization, User
+from sentry.utils.http import absolute_uri
+
+from .mail import MailPreview
+
+
+class DebugOrganizationInviteRequestEmailView(View):
+    def get(self, request):
+        org = Organization(id=1, slug="default", name="Default")
+        user = User(name="Rick Swan")
+
+        context = {
+            "organization": org,
+            "inviter": user,
+            "email": "test@gmail.com",
+            "organization_link": absolute_uri(
+                reverse("sentry-organization-index", args=[org.slug])
+            ),
+            "pending_requests_link": absolute_uri(
+                reverse("sentry-organization-members-requests", args=[org.slug])
+            ),
+        }
+        return MailPreview(
+            html_template="sentry/emails/organization-invite-request.html",
+            text_template="sentry/emails/organization-invite-request.txt",
+            context=context,
+        ).render(request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 1844062c36..7676486fe3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -445,6 +445,11 @@ urlpatterns += patterns(
                     react_page_view,
                     name="sentry-organization-members",
                 ),
+                url(
+                    r"^(?P<organization_slug>[\w_-]+)/members/requests/$",
+                    react_page_view,
+                    name="sentry-organization-members-requests",
+                ),
                 url(
                     r"^(?P<organization_slug>[\w_-]+)/members/new/$",
                     react_page_view,
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_index.py b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
index ff70ee9323..e961102a60 100644
--- a/tests/sentry/api/endpoints/test_organization_invite_request_index.py
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.core import mail
 from django.core.urlresolvers import reverse
 from exam import fixture
 
@@ -43,10 +44,12 @@ class OrganizationInviteRequestListTest(APITestCase):
 class OrganizationInviteRequestCreateTest(APITestCase):
     def setUp(self):
         self.user = self.create_user("foo@localhost")
+        manager = self.create_user(email="manager@localhost")
 
         self.org = self.create_organization()
         self.team = self.create_team(organization=self.org)
         self.member = self.create_member(user=self.user, organization=self.org, role="member")
+        self.create_member(user=manager, organization=self.org, role="manager")
 
         self.login_as(user=self.user)
 
@@ -57,13 +60,16 @@ class OrganizationInviteRequestCreateTest(APITestCase):
 
     def test_simple(self):
         self.login_as(user=self.user)
-        response = self.client.post(
-            self.url, {"email": "eric@localhost", "role": "member", "teams": [self.team.slug]}
-        )
+        with self.tasks():
+            response = self.client.post(
+                self.url, {"email": "eric@localhost", "role": "member", "teams": [self.team.slug]}
+            )
 
         assert response.status_code == 201
         assert response.data["email"] == "eric@localhost"
 
+        assert len(mail.outbox) == 1
+
         member = OrganizationMember.objects.get(organization=self.org, email=response.data["email"])
         assert member.user is None
         assert member.role == "member"
diff --git a/tests/sentry/api/endpoints/test_organization_join_request.py b/tests/sentry/api/endpoints/test_organization_join_request.py
index 968ec5c393..814ec2e323 100644
--- a/tests/sentry/api/endpoints/test_organization_join_request.py
+++ b/tests/sentry/api/endpoints/test_organization_join_request.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from exam import fixture
 from mock import patch
+from django.core import mail
 
 from sentry.models import AuthProvider, InviteStatus, OrganizationOption, OrganizationMember
 from sentry.testutils import APITestCase
@@ -130,7 +131,9 @@ class OrganizationJoinRequestTest(APITestCase):
     @patch("sentry.api.endpoints.organization_join_request.logger")
     @patch("sentry.experiments.get", return_value=1)
     def test_request_to_join(self, mock_experiment, mock_log):
-        resp = self.get_response(self.org.slug, email=self.email)
+        with self.tasks():
+            resp = self.get_response(self.org.slug, email=self.email)
+
         assert resp.status_code == 204
 
         members = OrganizationMember.objects.filter(organization=self.org)
@@ -149,3 +152,5 @@ class OrganizationJoinRequestTest(APITestCase):
                 "ip_address": "127.0.0.1",
             },
         )
+
+        assert len(mail.outbox) == 1
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index 196ffb4d5c..55e5974384 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -40,6 +40,36 @@ class OrganizationMemberTest(TestCase):
 
         assert msg.to == ["foo@example.com"]
 
+    def test_send_request_notification_email(self):
+        organization = self.create_organization()
+
+        user1 = self.create_user(email="manager@localhost")
+        user2 = self.create_user(email="owner@localhost")
+        user3 = self.create_user(email="member@localhost")
+
+        self.create_member(organization=organization, user=user1, role="manager")
+        self.create_member(organization=organization, user=user2, role="owner")
+        self.create_member(organization=organization, user=user3, role="member")
+
+        member = OrganizationMember(
+            id=1,
+            role="manager",
+            organization=organization,
+            email="foo@example.com",
+            inviter=user3,
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+        with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
+            member.send_request_notification_email()
+
+        assert len(mail.outbox) == 2
+
+        assert mail.outbox[0].to == ["manager@localhost"]
+        assert mail.outbox[1].to == ["owner@localhost"]
+
+        expected_subject = "Access request to %s" % (organization.name,)
+        assert mail.outbox[0].subject == expected_subject
+
     def test_send_sso_link_email(self):
         organization = self.create_organization()
         member = OrganizationMember(id=1, organization=organization, email="foo@example.com")
