commit 211d44f2b6236f11e62e5672681fcddec1117b6c
Author: Eric Feng <ehfeng@users.noreply.github.com>
Date:   Fri Aug 11 13:08:27 2017 -0700

    adding email query to org member api (#5859)
    
    * adding email query to org member api
    
    * katie comments
    
    * added tests for UserEmail search

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 61ca6bdbda..5b1c4165d9 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import
+import six
 
 from django.db.models import Q
 
@@ -6,6 +7,7 @@ from sentry.api.bases.organization import (OrganizationEndpoint, OrganizationPer
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.models import OrganizationMember
+from sentry.search.utils import tokenize_query
 
 
 class MemberPermission(OrganizationPermission):
@@ -26,6 +28,15 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
             organization=organization,
         ).select_related('user').order_by('email', 'user__email')
 
+        query = request.GET.get('query')
+        if query:
+            tokens = tokenize_query(query)
+            for key, value in six.iteritems(tokens):
+                if key == 'email':
+                    queryset = queryset.filter(
+                        Q(user__email__in=value) | Q(user__emails__email__in=value)
+                    )
+
         return self.paginate(
             request=request,
             queryset=queryset,
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 6d30d31787..97df613115 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -370,6 +370,17 @@ class Fixtures(object):
 
         return user
 
+    def create_useremail(self, user, email, **kwargs):
+        if not email:
+            email = uuid4().hex + '@example.com'
+
+        kwargs.setdefault('is_verified', True)
+
+        useremail = UserEmail(user=user, email=email, **kwargs)
+        useremail.save()
+
+        return useremail
+
     def create_event(self, event_id=None, **kwargs):
         if event_id is None:
             event_id = uuid4().hex
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 1e628d7425..4717298605 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -6,25 +6,41 @@ from sentry.testutils import APITestCase
 
 
 class OrganizationMemberListTest(APITestCase):
-    def test_simple(self):
-        user_1 = self.create_user('foo@localhost', username='foo')
-        user_2 = self.create_user('bar@localhost', username='bar')
+    def setUp(self):
+        self.user_1 = self.create_user('foo@localhost', username='foo')
+        self.user_2 = self.create_user('bar@localhost', username='bar')
         self.create_user('baz@localhost', username='baz')
 
-        org = self.create_organization(owner=user_1)
-        org.member_set.create(user=user_2)
+        self.org = self.create_organization(owner=self.user_1)
+        self.org.member_set.create(user=self.user_2)
 
-        self.login_as(user=user_1)
+        self.login_as(user=self.user_1)
 
-        url = reverse(
+        self.url = reverse(
             'sentry-api-0-organization-member-index', kwargs={
-                'organization_slug': org.slug,
+                'organization_slug': self.org.slug,
             }
         )
 
-        response = self.client.get(url)
+    def test_simple(self):
+        response = self.client.get(self.url)
 
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]['email'] == user_2.email
-        assert response.data[1]['email'] == user_1.email
+        assert response.data[0]['email'] == self.user_2.email
+        assert response.data[1]['email'] == self.user_1.email
+
+    def test_email_query(self):
+        response = self.client.get(self.url + "?query=email:foo@localhost")
+
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['email'] == self.user_1.email
+
+    def test_user_email_email_query(self):
+        self.create_useremail(self.user_1, 'baz@localhost')
+        response = self.client.get(self.url + "?query=email:baz@localhost")
+
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['email'] == self.user_1.email
