commit dda8377a4dcccddcf86f81fcc80e90f897e03a9a
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 28 11:44:39 2016 -0400

    Correct various permissions around member removal (#3808)
    
    * Correct various permissions around member removal
    
    - Admins should not be able to remove members
    - Members should be able to remove themselves
    
    /cc @getsentry/security

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 57e3a5b11f..031d5fb1ce 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -116,8 +116,11 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             except OrganizationMember.DoesNotExist:
                 return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
             else:
-                if not acting_member.can_manage_member(om):
-                    return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
+                if acting_member != om:
+                    if not request.access.has_scope('member:delete'):
+                        return Response({'detail': ERR_INSUFFICIENT_SCOPE}, status=400)
+                    elif not roles.can_manage(acting_member.role, om.role):
+                        return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         # TODO(dcramer): do we even need this check?
         elif not request.access.has_scope('member:delete'):
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 3d20dd009d..39eaeff0d2 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -233,6 +233,3 @@ class OrganizationMember(Model):
 
     def get_scopes(self):
         return roles.get(self.role).scopes
-
-    def can_manage_member(self, member):
-        return roles.can_manage(self.role, member.role)
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 5547fb428f..14b0d703fb 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -76,7 +76,7 @@ class OrganizationMemberSettingsView(OrganizationView):
                 r for r in roles.get_all()
                 if r.priority <= roles.get(acting_member.role).priority
             ]
-            can_admin = acting_member.can_manage_member(member)
+            can_admin = bool(allowed_roles)
         elif request.is_superuser():
             allowed_roles = roles.get_all()
 
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 3ad9b60a39..da8f6fa6f7 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -97,8 +97,6 @@ class DeleteOrganizationMemberTest(APITestCase):
         assert not OrganizationMember.objects.filter(id=member_om.id).exists()
 
     def test_cannot_delete_member_with_higher_access(self):
-        self.login_as(user=self.user)
-
         organization = self.create_organization(name='foo', owner=self.user)
 
         other_user = self.create_user('bar@example.com')
@@ -154,3 +152,58 @@ class DeleteOrganizationMemberTest(APITestCase):
         assert resp.status_code == 403
 
         assert OrganizationMember.objects.filter(id=owner_om.id).exists()
+
+    def test_can_delete_self(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        other_user = self.create_user('bar@example.com')
+
+        self.create_member(
+            organization=organization,
+            role='member',
+            user=other_user,
+        )
+
+        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, 'me'])
+
+        self.login_as(other_user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 204
+
+        assert not OrganizationMember.objects.filter(
+            user=other_user,
+            organization=organization,
+        ).exists()
+
+    def test_missing_scope(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        admin_user = self.create_user('bar@example.com')
+
+        self.create_member(
+            organization=organization,
+            role='admin',
+            user=admin_user,
+        )
+
+        member_user = self.create_user('baz@example.com')
+
+        member_om = self.create_member(
+            organization=organization,
+            role='member',
+            user=member_user,
+        )
+
+        path = reverse('sentry-api-0-organization-member-details', args=[
+            organization.slug, member_om.id,
+        ])
+
+        self.login_as(admin_user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 400
+
+        assert OrganizationMember.objects.filter(id=member_om.id).exists()
