commit 46b367d4eda9a2f6b1a8ba4f18cc6ae52743bfc4
Author: Chris Fuller <cfuller@sentry.io>
Date:   Mon Apr 13 12:59:25 2020 -0400

    feat(workflow): AlertRule Index Tests (#18193)
    
    * Two tests added around the new constraints.

diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 0116580537..4aca7f0b40 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import json
+import pytest
 from uuid import uuid4
 import responses
 from datetime import timedelta
@@ -8,6 +9,7 @@ from exam import fixture, patcher
 from freezegun import freeze_time
 
 import six
+from django.conf import settings
 from django.utils import timezone
 from django.utils.functional import cached_property
 
@@ -707,6 +709,41 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
                 1,
             )
 
+    def test_existing_name_allowed_when_archived(self):
+        name = "allowed"
+        alert_rule_1 = create_alert_rule(
+            self.organization, [self.project], name, "level:error", QueryAggregations.TOTAL, 1, 1
+        )
+        alert_rule_1.update(status=AlertRuleStatus.ARCHIVED.value)
+
+        alert_rule_2 = create_alert_rule(
+            self.organization, [self.project], name, "level:error", QueryAggregations.TOTAL, 1, 1
+        )
+
+        assert alert_rule_1.name == alert_rule_2.name
+        assert alert_rule_1.status == AlertRuleStatus.ARCHIVED.value
+        assert alert_rule_2.status == AlertRuleStatus.PENDING.value
+
+    # This test will fail unless real migrations are run. Refer to migration 0061.
+    @pytest.mark.skipif(
+        not settings.MIGRATIONS_TEST_MIGRATE, reason="requires custom migration 0061"
+    )
+    def test_two_archived_with_same_name(self):
+        name = "allowed"
+        alert_rule_1 = create_alert_rule(
+            self.organization, [self.project], name, "level:error", QueryAggregations.TOTAL, 1, 1
+        )
+        alert_rule_1.update(status=AlertRuleStatus.ARCHIVED.value)
+
+        alert_rule_2 = create_alert_rule(
+            self.organization, [self.project], name, "level:error", QueryAggregations.TOTAL, 1, 1
+        )
+        alert_rule_2.update(status=AlertRuleStatus.ARCHIVED.value)
+
+        assert alert_rule_1.name == alert_rule_2.name
+        assert alert_rule_1.status == AlertRuleStatus.ARCHIVED.value
+        assert alert_rule_2.status == AlertRuleStatus.ARCHIVED.value
+
 
 class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
     @fixture
