commit 77309ecf2a9d00724c14082689208e7357167f28
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 24 10:57:18 2015 +0100

    Improve async deletion
    
    - Raise DeleteAborted
    - Add tests for aborted deletion
    - Add tests for delete_project

diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index f673047010..919e69f768 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -27,3 +27,7 @@ class CacheNotPopulated(Exception):
 
 class InvalidConfiguration(Exception):
     pass
+
+
+class DeleteAborted(Exception):
+    pass
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 5d9fd1c019..0587f9281e 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import
 
 from celery.utils.log import get_task_logger
 
+from sentry.exceptions import DeleteAborted
 from sentry.utils.query import bulk_delete_objects
 from sentry.signals import pending_delete
 from sentry.tasks.base import instrumented_task, retry
@@ -31,7 +32,7 @@ def delete_organization(object_id, continuous=True, **kwargs):
         return
 
     if o.status == OrganizationStatus.VISIBLE:
-        raise ValueError('Aborting organization deletion as status is invalid')
+        raise DeleteAborted('Aborting organization deletion as status is invalid')
 
     if o.status != OrganizationStatus.DELETION_IN_PROGRESS:
         o.update(status=OrganizationStatus.DELETION_IN_PROGRESS)
@@ -67,7 +68,7 @@ def delete_team(object_id, continuous=True, **kwargs):
         return
 
     if t.status == TeamStatus.VISIBLE:
-        raise ValueError('Aborting team deletion as status is invalid')
+        raise DeleteAborted('Aborting team deletion as status is invalid')
 
     if t.status != TeamStatus.DELETION_IN_PROGRESS:
         pending_delete.send(sender=Team, instance=t)
@@ -101,7 +102,7 @@ def delete_project(object_id, continuous=True, **kwargs):
         return
 
     if p.status == ProjectStatus.VISIBLE:
-        raise ValueError('Aborting project deletion as status is invalid')
+        raise DeleteAborted('Aborting project deletion as status is invalid')
 
     if p.status != ProjectStatus.DELETION_IN_PROGRESS:
         pending_delete.send(sender=Project, instance=p)
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index f059c8173b..954dd23283 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -2,12 +2,13 @@ from __future__ import absolute_import
 
 from mock import patch
 
+from sentry.exceptions import DeleteAborted
 from sentry.models import (
-    GroupTagKey, GroupTagValue, Organization, OrganizationStatus, TagKey,
-    TagValue, Team, TeamStatus
+    GroupTagKey, GroupTagValue, Organization, OrganizationStatus, Project,
+    ProjectStatus, TagKey, TagValue, Team, TeamStatus
 )
 from sentry.tasks.deletion import (
-    delete_organization, delete_tag_key, delete_team
+    delete_organization, delete_project, delete_tag_key, delete_team
 )
 from sentry.testutils import TestCase
 
@@ -26,6 +27,20 @@ class DeleteOrganizationTest(TestCase):
 
         assert not Organization.objects.filter(id=org.id).exists()
 
+    def test_cancels_without_pending_status(self):
+        org = self.create_organization(
+            name='test',
+            status=OrganizationStatus.VISIBLE,
+        )
+        self.create_team(organization=org, name='test1')
+        self.create_team(organization=org, name='test2')
+
+        with self.assertRaises(DeleteAborted):
+            with self.tasks():
+                delete_organization(object_id=org.id)
+
+        assert Organization.objects.filter(id=org.id).exists()
+
 
 class DeleteTeamTest(TestCase):
     def test_simple(self):
@@ -41,6 +56,44 @@ class DeleteTeamTest(TestCase):
 
         assert not Team.objects.filter(id=team.id).exists()
 
+    def test_cancels_without_pending_status(self):
+        team = self.create_team(
+            name='test',
+            status=TeamStatus.VISIBLE,
+        )
+        self.create_project(team=team, name='test1')
+        self.create_project(team=team, name='test2')
+
+        with self.assertRaises(DeleteAborted):
+            with self.tasks():
+                delete_team(object_id=team.id)
+
+        assert Team.objects.filter(id=team.id).exists()
+
+
+class DeleteProjectTest(TestCase):
+    def test_simple(self):
+        project = self.create_project(
+            name='test',
+            status=ProjectStatus.PENDING_DELETION,
+        )
+
+        with self.tasks():
+            delete_project(object_id=project.id)
+
+        assert not Project.objects.filter(id=project.id).exists()
+
+    def test_cancels_without_pending_status(self):
+        project = self.create_project(
+            name='test',
+            status=ProjectStatus.VISIBLE,
+        )
+        with self.assertRaises(DeleteAborted):
+            with self.tasks():
+                delete_project(object_id=project.id)
+
+        assert Project.objects.filter(id=project.id).exists()
+
 
 class DeleteTagKeyTest(TestCase):
     @patch.object(delete_tag_key, 'delay')
