commit 395950788be0ab72541f1ba0d4cfceab1e19f566
Author: Mark Story <mark@mark-story.com>
Date:   Tue Jan 15 11:49:26 2019 -0500

    feat(issues) Allow AssigneeSelector to take members via props (#11507)
    
    The MemberListStore has some single-project assumptions baked into it.
    Instead of trying to rejig that store and update it to work in
    a multi-project world I thought it would be simpler to have
    AssigneeSelector accept the member list in its props.
    
    Refs APP-993

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index ea22e32b68..87fdd9f272 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -29,11 +29,17 @@ const AssigneeSelectorComponent = createReactClass({
   propTypes: {
     id: PropTypes.string.isRequired,
     size: PropTypes.number,
+    // Either a list of users, or null. If null, members will
+    // be read from the MemberListStore. The prop is useful when the
+    // store contains more/different users than you need to show
+    // in an individual component, eg. Org Issue list
+    memberList: PropTypes.array,
   },
 
   contextTypes: {
     organization: SentryTypes.Organization,
   },
+
   mixins: [
     Reflux.listenTo(GroupStore, 'onGroupChange'),
     Reflux.connect(MemberListStore, 'memberList'),
@@ -91,18 +97,23 @@ const AssigneeSelectorComponent = createReactClass({
       return true;
     }
 
+    let currentMembers = this.memberList();
     // XXX(billyvg): this means that once `memberList` is not-null, this component will never update due to `memberList` changes
     // Note: this allows us to show a "loading" state for memberList, but only before `MemberListStore.loadInitialData`
     // is called
-    if (
-      this.state.memberList === null &&
-      nextState.memberList !== this.state.memberList
-    ) {
+    if (currentMembers === null && nextState.memberList !== currentMembers) {
       return true;
     }
     return !valueIsEqual(nextState.assignedTo, this.state.assignedTo, true);
   },
 
+  memberList() {
+    if (this.props.memberList) {
+      return this.props.memberList;
+    }
+    return this.state.memberList;
+  },
+
   assignableTeams() {
     let group = GroupStore.get(this.props.id);
 
@@ -159,9 +170,8 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   renderNewMemberNodes() {
-    let {memberList} = this.state;
     let {size} = this.props;
-    let members = AssigneeSelectorComponent.putSessionUserFirst(memberList);
+    let members = AssigneeSelectorComponent.putSessionUserFirst(this.memberList());
 
     return members.map(member => {
       return {
@@ -218,9 +228,10 @@ const AssigneeSelectorComponent = createReactClass({
   render() {
     let {className} = this.props;
     let {organization} = this.context;
-    let {loading, assignedTo, memberList} = this.state;
+    let {loading, assignedTo} = this.state;
     let canInvite = ConfigStore.get('invitesEnabled');
     let hasOrgWrite = organization.access.includes('org:write');
+    let memberList = this.memberList();
 
     return (
       <div className={className}>
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 2531cf6aa3..8f3cd8f848 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -86,6 +86,28 @@ describe('AssigneeSelector', function() {
     Client.clearMockResponses();
   });
 
+  describe('render with props', function() {
+    it('renders members from the prop when present', async function() {
+      assigneeSelector = mount(
+        <AssigneeSelectorComponent id={GROUP_1.id} memberList={[USER_2, USER_3]} />,
+        TestStubs.routerContext()
+      );
+      MemberListStore.loadInitialData([USER_1]);
+      openMenu();
+
+      assigneeSelector.update();
+      expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(0);
+      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
+      expect(assigneeSelector.find('UserAvatar')).toHaveLength(2);
+      expect(assigneeSelector.find('TeamAvatar')).toHaveLength(1);
+
+      let names = assigneeSelector
+        .find('MenuItemWrapper Label Highlight')
+        .map(el => el.text());
+      expect(names).toEqual([`#${TEAM_1.slug}`, USER_2.name, USER_3.name]);
+    });
+  });
+
   describe('putSessionUserFirst()', function() {
     const putSessionUserFirst = AssigneeSelectorComponent.putSessionUserFirst;
     it('should place the session user at the top of the member list if present', function() {
