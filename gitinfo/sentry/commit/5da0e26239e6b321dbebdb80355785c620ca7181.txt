commit 5da0e26239e6b321dbebdb80355785c620ca7181
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 21 15:37:27 2015 -0700

    Allow version to be specified per key

diff --git a/src/sentry/cache/base.py b/src/sentry/cache/base.py
index bad715f65c..e2d38ece33 100644
--- a/src/sentry/cache/base.py
+++ b/src/sentry/cache/base.py
@@ -21,14 +21,18 @@ class BaseCache(local):
         if prefix is not None:
             self.prefix = prefix
 
-    def make_key(self, key):
-        return '{}:{}:{}'.format(self.prefix, self.version, key)
-
-    def set(self, key, value, timeout):
+    def make_key(self, key, version=None):
+        return '{}:{}:{}'.format(
+            self.prefix,
+            version or self.version,
+            key,
+        )
+
+    def set(self, key, value, timeout, version=None):
         raise NotImplementedError
 
-    def delete(self, key):
+    def delete(self, key, version=None):
         raise NotImplementedError
 
-    def get(self, key):
+    def get(self, key, version=None):
         raise NotImplementedError
diff --git a/src/sentry/cache/django.py b/src/sentry/cache/django.py
index a1d11a40a3..e0d32ff8da 100644
--- a/src/sentry/cache/django.py
+++ b/src/sentry/cache/django.py
@@ -14,11 +14,11 @@ from .base import BaseCache
 
 
 class DjangoCache(BaseCache):
-    def set(self, key, value, timeout):
-        cache.set(key, value, timeout, version=self.version)
+    def set(self, key, value, timeout, version=None):
+        cache.set(key, value, timeout, version=version or self.version)
 
-    def delete(self, key):
-        cache.delete(key, version=self.version)
+    def delete(self, key, version=None):
+        cache.delete(key, version=version or self.version)
 
-    def get(self, key):
-        return cache.get(key, version=self.version)
+    def get(self, key, version=None):
+        return cache.get(key, version=version or self.version)
diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
index 14dc450249..22f9117c07 100644
--- a/src/sentry/cache/redis.py
+++ b/src/sentry/cache/redis.py
@@ -32,20 +32,20 @@ class RedisCache(BaseCache):
 
         super(RedisCache, self).__init__(version=version, prefix=prefix)
 
-    def set(self, key, value, timeout):
-        key = self.make_key(key)
+    def set(self, key, value, timeout, version=None):
+        key = self.make_key(key, version=version)
         v = json.dumps(value)
         if timeout:
             self.client.setex(key, int(timeout), v)
         else:
             self.client.set(key, v)
 
-    def delete(self, key):
-        key = self.make_key(key)
+    def delete(self, key, version=None):
+        key = self.make_key(key, version=version)
         self.client.delete(key)
 
-    def get(self, key):
-        key = self.make_key(key)
+    def get(self, key, version=None):
+        key = self.make_key(key, version=version)
         result = self.client.get(key)
         if result is not None:
             result = json.loads(result)
