commit fa01e719ccf23ec03ac5b2b0586ebe9ac8b89d12
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Mon Apr 3 10:11:32 2017 -0700

    Email improvements (#4415)

diff --git a/CHANGES b/CHANGES
index cf53a7729e..b95dc80c5d 100644
--- a/CHANGES
+++ b/CHANGES
@@ -7,6 +7,9 @@ Version 8.15 (Unreleased)
 - Added support for the new symbol server system to support native SDKs better.
 - Added deploy email
 - Added OAuth2 support to the web API.
+- Simplified management of secondary email addresses.
+- Fixed an issue where changing primary email address would remove the pre-existing verified email.
+- Disallow duplicating primary emails for users moving forward.
 - Resolve issues when commits with ``Fixes SHORTID`` are included in releases
 - Added support for associating debug symbols with iTunes applications and builds.
 - Added the ability to claim unassigned issues when resolving them.
diff --git a/src/sentry/static/sentry/less/auth.less b/src/sentry/static/sentry/less/auth.less
index bbe647b2ba..7bdc88b886 100644
--- a/src/sentry/static/sentry/less/auth.less
+++ b/src/sentry/static/sentry/less/auth.less
@@ -111,28 +111,6 @@ section.org-login {
   }
 }
 
-.primary-email {
-  position: relative;
-
-  &.not-verified {
-    padding-right: 168px;
-  }
-
-  .verification-label {
-    position: absolute;
-    top: -3px;
-    left: 110px;
-  }
-
-  .verified-status {
-    position: absolute;
-    top: 0;
-    right: 0;
-    padding-top: 28px;
-  }
-
-}
-
 .account-settings-overview {
   position: relative;
   padding-right: 140px;
diff --git a/src/sentry/static/sentry/less/variables.less b/src/sentry/static/sentry/less/variables.less
index 2206b80350..3365769071 100644
--- a/src/sentry/static/sentry/less/variables.less
+++ b/src/sentry/static/sentry/less/variables.less
@@ -50,7 +50,6 @@
 //
 // Overrides Bootstrap defaults
 
-
 @panel-default-heading-bg:    @white-dark;
 @panel-footer-bg:             @white-dark;
 @panel-default-border:        @trim;
diff --git a/src/sentry/templates/sentry/account/emails.html b/src/sentry/templates/sentry/account/emails.html
index 9c9492f741..9943e09fb7 100644
--- a/src/sentry/templates/sentry/account/emails.html
+++ b/src/sentry/templates/sentry/account/emails.html
@@ -4,7 +4,7 @@
 {% load i18n %}
 {% load sentry_helpers %}
 
-{% block title %}{% trans "Notification Settings" %} | {{ block.super }}{% endblock %}
+{% block title %}{% trans "Email Settings" %} | {{ block.super }}{% endblock %}
 
 {% block main %}
   {% if request.user.has_unverified_emails %}
@@ -17,60 +17,63 @@
     </div>
   {% endif %}
 
-  <legend class="m-t-0">Emails</legend>
-
-  <form action="" method="post" class="">
-    {% csrf_token %}
-    <button type="submit" class="hidden"></button>
-    {{ email_form|as_crispy_errors }}
-
-    <div class='primary-email {% if not primary_email.is_verified %}not-verified{% endif %}'>
-      <div class='email-input'>
-        {% if not primary_email.is_verified %}
-        <div class="verification-label">
-          <span class="label verification label-warning">Unverified</span>
-        </div>
-        {% else %}
-        <div class="verification-label">
-          <span class="label verification label-success">Verified</span>
-        </div>
-        {% endif %}
-        {{ email_form.primary_email|as_crispy_field }}
-      </div>
+  <div class="panel panel-default">
+    <div class="panel-heading">
+      <h3 class="panel-title">Emails</h3>
     </div>
-    <br>
-    <label for='id_alternative_emails' class='control-label'>Alternative Emails</label>
-    {% if alt_emails %}
-    <table class="table table-bordered m-b-0">
+    <table class="table">
       <tbody>
-      {% for email in alt_emails %}
+      <tr>
+        <td>
+          {{ primary_email.email }}
+          <span> (Primary)</span>
+          {% if not primary_email.is_verified %}
+          <span class="label verification label-warning">Unverified</span>
+          {% endif %}
+        </td>
+        <td>
+        </td>
+        <td>
+        </td>
+      </tr>
+      {% if alt_emails %}
+        {% for email in alt_emails %}
         <tr>
           <td>
             {{ email.email }}
             {% if not email.is_verified %}
             <span class="label verification label-warning">Unverified</span>
-            {% else %}
-            <span class="label verification label-success">Verified</span>
+            {% endif %}
+          </td>
+          <td style="text-align: right">
+            {% if email != primary_email and email.is_verified and not user.is_managed %}
+            <form action="" method="post">
+              {% csrf_token %}
+              <input type='hidden' name='new_primary_email' value='{{ email.email }}'>
+              <button type='submit' name='primary' class='btn btn-default btn-sm'>Set as Primary Email</button>
+            </form>
             {% endif %}
           </td>
           <td style="text-align:center">
+            {% if email != primary_email %}
             <form action="" method="post">
               {% csrf_token %}
               <input type='hidden' name='email' value='{{ email.email }}'>
               <button type='submit' name='remove' class='btn btn-danger btn-sm remove'><span class="icon-trash"></span></button>
             </form>
+            {% endif %}
           </td>
         </tr>
-      {% endfor %}
+        {% endfor %}
+      {% endif %}
       </tbody>
     </table>
-    <p class='help-block'>To use an email for <a href="{% url "sentry-account-settings-notifications" %}">notifications</a> it must be verified</p>
-    {% endif %}
-
-    {% if not alt_emails %}
-      <div>No alternative emails in your account</div>
-    {% endif %}
-    <br>
+  </div>
+  <p class='help-block'>To use an email for <a href="{% url "sentry-account-settings-notifications" %}">notifications</a> it must be verified</p>
+  <br>
+  <form action="" method="post" class="">
+    {% csrf_token %}
+    {{ email_form|as_crispy_errors }}
     {{ email_form.alt_email|as_crispy_field }}
 
     {% if email_form.password %}
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 1a1593d4f4..e6748d6a7b 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -13,6 +13,7 @@ import pytz
 from django import forms
 from django.conf import settings
 from django.contrib.auth import authenticate, get_user_model
+from django.db.models import Q
 from django.utils.text import capfirst
 from django.utils.translation import ugettext_lazy as _
 
@@ -233,7 +234,6 @@ class ChangePasswordRecoverForm(forms.Form):
 
 
 class EmailForm(forms.Form):
-    primary_email = forms.EmailField(label=_('Primary Email'))
 
     alt_email = forms.EmailField(
         label=_('New Email'),
@@ -257,23 +257,6 @@ class EmailForm(forms.Form):
         if not needs_password:
             del self.fields['password']
 
-    def save(self, commit=True):
-
-        if self.cleaned_data['primary_email'] != self.user.email:
-            new_username = self.user.email == self.user.username
-        else:
-            new_username = False
-
-        self.user.email = self.cleaned_data['primary_email']
-
-        if new_username and not User.objects.filter(username__iexact=self.user.email).exists():
-            self.user.username = self.user.email
-
-        if commit:
-            self.user.save()
-
-        return self.user
-
     def clean_password(self):
         value = self.cleaned_data.get('password')
         if value and not self.user.check_password(value):
@@ -337,7 +320,13 @@ class AccountSettingsForm(forms.Form):
         return self.cleaned_data[field]
 
     def clean_email(self):
-        return self._clean_managed_field('email')
+        value = self._clean_managed_field('email').lower()
+        if User.objects.filter(Q(email__iexact=value) | Q(username__iexact=value)).exclude(id=self.user.id).exists():
+            raise forms.ValidationError(
+                _("There was an error adding %s: that email is already in use")
+                % self.cleaned_data['email']
+            )
+        return value
 
     def clean_name(self):
         return self._clean_managed_field('name')
@@ -642,7 +631,8 @@ class ProjectEmailOptionsForm(forms.Form):
         specified_email = UserOption.objects.get_value(user, project, 'mail:email', None)
         emails.extend([user.email, alert_email, specified_email])
 
-        choices = [(email, email) for email in set(emails) if email is not None]
+        choices = [(email, email) for email in sorted(set(emails)) if email]
+
         self.fields['email'].choices = choices
 
         self.fields['alert'].initial = has_alerts
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 6dc9e9bb0d..67fc96a648 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -17,6 +17,7 @@ from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import IntegrityError, transaction
+from django.db.models import Q
 from django.http import HttpResponseRedirect, Http404, HttpResponse
 from django.views.decorators.http import require_http_methods
 from django.views.decorators.cache import never_cache
@@ -29,7 +30,7 @@ from sudo.decorators import sudo_required
 
 from sentry import newsletter
 from sentry.models import (
-    UserEmail, LostPasswordHash, Project, UserOption, Authenticator
+    User, UserEmail, LostPasswordHash, Project, UserOption, Authenticator
 )
 from sentry.security import capture_security_activity
 from sentry.signals import email_verified
@@ -240,11 +241,21 @@ def account_settings(request):
 
         form.save()
 
-        # remove previously valid email address
+        # update notification settings for those set to primary email with new primary email
+        alert_email = UserOption.objects.get_value(user=user, project=None, key='alert_email')
+
+        if alert_email == old_email:
+            UserOption.objects.set_value(user=user, project=None, key='alert_email', value=user.email)
+        options = UserOption.objects.filter(user=user, key='mail:email')
+        for option in options:
+            if option.value != old_email:
+                continue
+            option.value = user.email
+            option.save()
+
         # TODO(dcramer): we should maintain validation here when we support
         # multiple email addresses
         if request.user.email != old_email:
-            UserEmail.objects.filter(user=user, email=old_email).delete()
             try:
                 with transaction.atomic():
                     user_email = UserEmail.objects.create(
@@ -442,14 +453,10 @@ def disconnect_identity(request, identity_id):
 @login_required
 def show_emails(request):
     user = request.user
+    emails = user.emails.all()
+    email_form = EmailForm(user, request.POST or None)
     primary_email = UserEmail.get_primary_email(user)
-    alt_emails = user.emails.all().exclude(email=primary_email.email)
-
-    email_form = EmailForm(user, request.POST or None,
-        initial={
-            'primary_email': primary_email.email,
-        },
-    )
+    alt_emails = emails.exclude(email=primary_email.email)
 
     if 'remove' in request.POST:
         email = request.POST.get('email')
@@ -463,75 +470,79 @@ def show_emails(request):
 
         return HttpResponseRedirect(request.path)
 
+    if 'primary' in request.POST:
+        new_primary = request.POST['new_primary_email'].lower()
+
+        if User.objects.filter(Q(email__iexact=new_primary) | Q(username__iexact=new_primary)).exclude(id=user.id).exists():
+            messages.add_message(request,
+                messages.ERROR,
+                _("That email is already in use for another user")
+            )
+
+        elif new_primary != user.email:
+
+            # update notification settings for those set to primary email with new primary email
+            alert_email = UserOption.objects.get_value(user=user, project=None, key='alert_email')
+
+            if alert_email == user.email:
+                UserOption.objects.set_value(user=user, project=None, key='alert_email', value=new_primary)
+            options = UserOption.objects.filter(user=user, key='mail:email')
+            for option in options:
+                if option.value != user.email:
+                    continue
+                option.value = new_primary
+                option.save()
+
+            has_new_username = user.email == user.username
+
+            user.email = new_primary
+
+            msg = _('Your settings were saved')
+            messages.add_message(
+                request,
+                messages.SUCCESS,
+                msg)
+
+            if has_new_username and not User.objects.filter(username__iexact=new_primary).exists():
+                user.username = user.email
+            user.save()
+        return HttpResponseRedirect(request.path)
+
     if email_form.is_valid():
-        old_email = user.email
 
-        email_form.save()
+        alternative_email = email_form.cleaned_data['alt_email'].lower()
 
-        if user.email != old_email:
-            queryset = UserOption.objects.filter(
-                user=user,
-                key='mail:email',
-            )
-            for option in queryset:
-                if option.value == old_email:
-                    option.value = user.email
-                    option.save()
-            UserEmail.objects.filter(user=user, email=old_email).delete()
+        # check if this alternative email already exists for user
+        if alternative_email and not UserEmail.objects.filter(user=user, email__iexact=alternative_email):
+            # create alternative email for user
             try:
                 with transaction.atomic():
-                    user_email = UserEmail.objects.create(
+                    new_email = UserEmail.objects.create(
                         user=user,
-                        email=user.email,
+                        email=alternative_email
                     )
             except IntegrityError:
                 pass
             else:
-                user_email.set_hash()
-                user_email.save()
-                user.send_confirm_email_singular(user_email)
+                new_email.set_hash()
+                new_email.save()
+                user.send_confirm_email_singular(new_email)
                 # Update newsletter subscription and mark as unverified
                 newsletter.update_subscription(
                     user=user,
                     verified=False,
                 )
+
                 logger.info('user.email.add', extra={
                     'user_id': user.id,
                     'ip_address': request.META['REMOTE_ADDR'],
-                    'email': user_email.email,
+                    'email': new_email.email,
                 })
-                msg = _('A confirmation email has been sent to %s.') % user_email.email
+                msg = _('A confirmation email has been sent to %s.') % new_email.email
                 messages.add_message(
                     request,
                     messages.SUCCESS,
                     msg)
-        alternative_email = email_form.cleaned_data['alt_email']
-        # check if this alternative email already exists for user
-        if alternative_email and not UserEmail.objects.filter(user=user, email=alternative_email):
-            # create alternative email for user
-            try:
-                with transaction.atomic():
-                    new_email = UserEmail.objects.create(
-                        user=user,
-                        email=alternative_email
-                    )
-            except IntegrityError:
-                pass
-            else:
-                new_email.set_hash()
-                new_email.save()
-            # send confirmation emails to any non verified emails
-            user.send_confirm_email_singular(new_email)
-            logger.info('user.email.add', extra={
-                'user_id': user.id,
-                'ip_address': request.META['REMOTE_ADDR'],
-                'email': new_email.email,
-            })
-            msg = _('A confirmation email has been sent to %s.') % new_email.email
-            messages.add_message(
-                request,
-                messages.SUCCESS,
-                msg)
 
         messages.add_message(
             request, messages.SUCCESS, _('Your settings were saved.'))
diff --git a/tests/sentry/web/frontend/test_emails.py b/tests/sentry/web/frontend/test_emails.py
index 815cef2b50..c9b67a9c2d 100644
--- a/tests/sentry/web/frontend/test_emails.py
+++ b/tests/sentry/web/frontend/test_emails.py
@@ -18,7 +18,6 @@ class EmailsTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/account/settings/emails.html')
-        assert 'alt_emails' in resp.context
         assert 'primary_email' in resp.context
         self.assertIn('foo@example.com', resp.content)
 
@@ -37,7 +36,6 @@ class EmailsTest(TestCase):
         user.set_password('something')
         user.save()
         resp = self.client.post(self.path, data={
-            'primary_email': user.email,
             'alt_email': 'hello@gmail.com',
             'password': 'something'},
             follow=True
@@ -53,8 +51,8 @@ class EmailsTest(TestCase):
         user.set_password('something')
         user.save()
         resp = self.client.post(self.path, data={
-            'primary_email': user.email,
-            'alt_email': 'hello@gmail.com'},
+            'alt_email': 'hello@gmail.com',
+        },
             follow=True
         )
         assert resp.status_code == 200
@@ -68,8 +66,7 @@ class EmailsTest(TestCase):
         user.set_unusable_password()
         user.save()
         resp = self.client.post(self.path, data={
-            'primary_email': user.email,
-            'alt_email': 'hello@gmail.com'
+            'alt_email': 'hello@gmail.com',
         },
             follow=True
         )
@@ -92,16 +89,24 @@ class EmailsTest(TestCase):
     def test_change_primary_email(self):
         user = self.create_user('foo@example.com')
         self.login_as(user)
-        user.set_password('something')
-        user.save()
         resp = self.client.get(self.path)
         self.assertIn('foo@example.com', resp.content)
         resp = self.client.post(self.path,
-            {'primary_email': 'bar@example.com',
-             'password': 'something'},
+            {'primary': '',
+             'new_primary_email': 'bar@example.com'},
             follow=True
         )
         self.assertIn('bar@example.com', resp.content)
         user = User.objects.get(id=user.id)
         assert user.email != 'foo@example.com'
         assert user.email == 'bar@example.com'
+
+    def test_username_updates(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        email = UserEmail(user=user, email='bar@example.com')
+        email.save()
+        self.client.post(self.path, data={'primary': '', 'new_primary_email': 'bar@example.com'}, follow=True)
+        user = User.objects.get(id=user.id)
+        assert user.username != 'foo@example.com'
+        assert user.username == 'bar@example.com'
