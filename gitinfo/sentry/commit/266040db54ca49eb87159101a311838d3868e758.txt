commit 266040db54ca49eb87159101a311838d3868e758
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Jun 19 10:57:38 2017 +0200

    Add sdk_info platform check

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 1789dbda0c..17e5f35961 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -190,7 +190,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             # Construct a raw frame that is used by the symbolizer
             # backend.  We only assemble the bare minimum we need here.
             instruction_addr = processable_frame.data['instruction_addr']
-            in_app = self.sym.is_in_app(instruction_addr)
+            in_app = self.sym.is_in_app(instruction_addr, sdk_info=self.sdk_info)
             in_app = (in_app and not self.sym.is_internal_function(raw_frame.get('function')))
             if raw_frame.get('in_app') is None:
                 raw_frame['in_app'] = in_app
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 037a1140bb..7320c77c46 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -136,11 +136,13 @@ class Symbolizer(object):
 
         return frame
 
-    def is_image_from_app_bundle(self, img):
+    def is_image_from_app_bundle(self, img, sdk_info=None):
         fn = img['name']
+        is_mac_platform = (
+            sdk_info is not None and sdk_info['sdk_name'].lower() == 'macos')
         if not (fn.startswith(APP_BUNDLE_PATHS) or
                 (SIM_PATH in fn and SIM_APP_PATH in fn) or
-                (MAC_OS_PATH in fn)):
+                (is_mac_platform and MAC_OS_PATH in fn)):
             return False
         return True
 
@@ -155,13 +157,13 @@ class Symbolizer(object):
         fn = img['name']
         return fn.startswith(APP_BUNDLE_PATHS) and '/Frameworks/' in fn
 
-    def _is_app_frame(self, instruction_addr, img):
+    def _is_app_frame(self, instruction_addr, img, sdk_info=None):
         """Given a frame derives the value of `in_app` by discarding the
         original value of the frame.
         """
         # Anything that is outside the app bundle is definitely not a
         # frame from out app.
-        if not self.is_image_from_app_bundle(img):
+        if not self.is_image_from_app_bundle(img, sdk_info=sdk_info):
             return False
 
         # We also do not consider known support frameworks to be part of
@@ -172,11 +174,11 @@ class Symbolizer(object):
         # Otherwise, yeah, let's just say it's in_app
         return True
 
-    def _is_optional_dsym(self, img):
+    def _is_optional_dsym(self, img, sdk_info=None):
         """Checks if this is a dsym that is optional."""
         # Frames that are not in the app are not considered optional.  In
         # theory we should never reach this anyways.
-        if not self.is_image_from_app_bundle(img):
+        if not self.is_image_from_app_bundle(img, sdk_info=sdk_info):
             return False
 
         # If we're dealing with an app bundled framework that is also
@@ -195,10 +197,10 @@ class Symbolizer(object):
     def _is_simulator_frame(self, frame, img):
         return _sim_platform_re.search(img['name']) is not None
 
-    def _symbolize_app_frame(self, instruction_addr, img):
+    def _symbolize_app_frame(self, instruction_addr, img, sdk_info=None):
         dsym_path = self.dsym_paths.get(img['uuid'])
         if dsym_path is None:
-            if self._is_optional_dsym(img):
+            if self._is_optional_dsym(img, sdk_info=sdk_info):
                 type = EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM
             else:
                 type = EventError.NATIVE_MISSING_DSYM
@@ -261,15 +263,17 @@ class Symbolizer(object):
         # If we are dealing with a frame that is not bundled with the app
         # we look at system symbols.  If that fails, we go to looking for
         # app symbols explicitly.
-        if not self.is_image_from_app_bundle(img):
+        if not self.is_image_from_app_bundle(img, sdk_info=sdk_info):
             return self._convert_symbolserver_match(instruction_addr,
                                                     symbolserver_match, img)
 
-        return self._symbolize_app_frame(instruction_addr, img)
+        return self._symbolize_app_frame(
+            instruction_addr, img, sdk_info=sdk_info)
 
-    def is_in_app(self, instruction_addr):
+    def is_in_app(self, instruction_addr, sdk_info=None):
         img = self.image_lookup.find_image(instruction_addr)
-        return img is not None and self._is_app_frame(instruction_addr, img)
+        return img is not None and self._is_app_frame(
+            instruction_addr, img, sdk_info=sdk_info)
 
     def is_internal_function(self, function):
         return _internal_function_re.search(function) is not None
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index ff91f8f540..af7651a4d6 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -185,7 +185,7 @@ class BasicResolvingIntegrationTest(TestCase):
 
         assert len(event.interfaces['threads'].values) == 1
 
-    def sym_app_frame(self, instruction_addr, img):
+    def sym_app_frame(self, instruction_addr, img, sdk_info=None):
         object_name = (
             "/var/containers/Bundle/Application/"
             "B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
@@ -543,7 +543,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
 
         assert len(event.interfaces['threads'].values) == 1
 
-    def sym_app_frame(self, instruction_addr, img):
+    def sym_app_frame(self, instruction_addr, img, sdk_info=None):
         object_name = (
             "/var/containers/Bundle/Application/"
             "B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
@@ -882,7 +882,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
         assert frames[5].in_app
         assert frames[6].in_app
 
-    def sym_mac_app_frame(self, instruction_addr, img):
+    def sym_mac_app_frame(self, instruction_addr, img, sdk_info=None):
         object_name = (
             "/Users/haza/Library/Developer/Xcode/Archives/2017-06-19/"
             "CrashProbe 19-06-2017, 08.53.xcarchive/Products/Applications/"
@@ -986,7 +986,39 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                         )
                     }
                 ]
-            }
+            },
+            "contexts": {
+                "device": {
+                    "family": "macOS",
+                    "type": "device",
+                    "storage_size": 498954403840,
+                    "free_memory": 415174656,
+                    "memory_size": 17179869184,
+                    "boot_time": "2017-06-18T07:10:05Z",
+                    "model": "MacBookPro13,1",
+                    "usable_memory": 15204716544,
+                    "arch": "x86"
+                },
+                "app": {
+                    "app_version": "1.0",
+                    "app_name": "CrashProbe",
+                    "device_app_hash": "75e22adcce6cb4c81db7c7e623c2f2721616d2c8",
+                    "executable_path": "/Users/haza/Library/Developer/Xcode/Archives/2017-06-19/CrashProbe 19-06-2017, 08.53.xcarchive/Products/Applications/CrashProbe.app/CrashProbe",
+                    "build_type": "unknown",
+                    "app_start_time": "2017-06-19T07:19:02Z",
+                    "app_identifier": "net.hockeyapp.CrashProbe",
+                    "type": "app",
+                    "app_build": "1"
+                },
+                "os": {
+                    "rooted": False,
+                    "kernel_version": "Darwin Kernel Version 16.6.0: Fri Apr 14 16:21:16 PDT 2017; root:xnu-3789.60.24~6/RELEASE_X86_64",
+                    "version": "10.12.5",
+                    "build": "16F73",
+                    "type": "os",
+                    "name": "macOS"
+                }
+            },
         }
         resp = self._postWithHeader(event_data)
         assert resp.status_code == 200
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index 1314258ea5..97c8d18898 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -31,7 +31,7 @@ SDK_INFO = {
 }
 
 
-def patched_symbolize_app_frame(self, instruction_addr, img):
+def patched_symbolize_app_frame(self, instruction_addr, img, sdk_info=None):
     return [{
         'filename': 'Foo.swift',
         'abs_path': 'Foo.swift',
