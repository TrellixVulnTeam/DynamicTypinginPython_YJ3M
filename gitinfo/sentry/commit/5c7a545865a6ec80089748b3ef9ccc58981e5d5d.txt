commit 5c7a545865a6ec80089748b3ef9ccc58981e5d5d
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 12 18:05:28 2015 -0700

    Remove unused/outdated permission attributes in API responses

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index d4c979bd8e..57e581add9 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -3,59 +3,19 @@ from __future__ import absolute_import
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth import access
 from sentry.models import (
-    Organization, OrganizationAccessRequest, OrganizationMember,
-    OrganizationMemberType, Team, TeamStatus
+    Organization, OrganizationAccessRequest, Team, TeamStatus
 )
 
 
 @register(Organization)
 class OrganizationSerializer(Serializer):
-    def get_attrs(self, item_list, user):
-        if user.is_authenticated():
-            member_map = dict(
-                (om.organization_id, om)
-                for om in OrganizationMember.objects.filter(
-                    organization__in=item_list,
-                    user=user,
-                )
-            )
-        else:
-            member_map = {}
-
-        result = {}
-        for organization in item_list:
-            try:
-                om = member_map[organization.id]
-            except KeyError:
-                if user.is_superuser:
-                    is_global = True
-                    access_type = OrganizationMemberType.OWNER
-                else:
-                    is_global = False
-                    access_type = None
-            else:
-                is_global = om.has_global_access
-                access_type = om.type
-
-            result[organization] = {
-                'is_global': is_global,
-                'access_type': access_type,
-            }
-        return result
-
     def serialize(self, obj, attrs, user):
-        d = {
+        return {
             'id': str(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'dateCreated': obj.date_added,
-            'isGlobal': attrs['is_global'],
-            'permission': {
-                'owner': attrs['access_type'] <= OrganizationMemberType.OWNER,
-                'admin': attrs['access_type'] <= OrganizationMemberType.ADMIN,
-            }
         }
-        return d
 
 
 class DetailedOrganizationSerializer(OrganizationSerializer):
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 65ed48c287..f9cc1494a9 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -1,36 +1,11 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
-from sentry.models import OrganizationMemberType, Project, Team
+from sentry.models import Project
 
 
 @register(Project)
 class ProjectSerializer(Serializer):
-    def get_attrs(self, item_list, user):
-        organization = item_list[0].team.organization
-
-        team_map = dict(
-            (t.id, t) for t in Team.objects.get_for_user(
-                organization=organization,
-                user=user,
-            )
-        )
-
-        result = {}
-        for project in item_list:
-            try:
-                team = team_map[project.team_id]
-            except KeyError:
-                access_type = None
-            else:
-                access_type = team.access_type
-
-            result[project] = {
-                'access_type': access_type,
-            }
-
-        return result
-
     def serialize(self, obj, attrs, user):
         from sentry import features
 
@@ -48,8 +23,4 @@ class ProjectSerializer(Serializer):
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
             'features': feature_list,
-            'permission': {
-                'owner': attrs['access_type'] <= OrganizationMemberType.OWNER,
-                'admin': attrs['access_type'] <= OrganizationMemberType.ADMIN,
-            },
         }
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index f0ff2f7632..680d0c892e 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -6,8 +6,7 @@ from collections import defaultdict
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import (
-    OrganizationAccessRequest, OrganizationMemberType, Project, ProjectStatus,
-    Team
+    OrganizationAccessRequest, Project, ProjectStatus, Team
 )
 
 
@@ -15,8 +14,7 @@ from sentry.models import (
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
         organization = item_list[0].organization
-        # TODO(dcramer): in most cases this data should already be in memory
-        # and we're simply duplicating efforts here
+        # TODO(dcramer): kill this off when we fix OrganizaitonMemberTeam
         team_map = dict(
             (t.id, t) for t in Team.objects.get_for_user(
                 organization=organization,
@@ -36,31 +34,21 @@ class TeamSerializer(Serializer):
 
         result = {}
         for team in item_list:
-            try:
-                access_type = team_map[team.id].access_type
-            except KeyError:
-                access_type = None
-
             result[team] = {
-                'access_type': access_type,
                 'pending_request': team.id in access_requests,
+                'is_member': team.id in team_map,
             }
         return result
 
     def serialize(self, obj, attrs, user):
-        d = {
+        return {
             'id': str(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'dateCreated': obj.date_added,
-            'isMember': attrs['access_type'] is not None,
+            'isMember': attrs['is_member'],
             'isPending': attrs['pending_request'],
-            'permission': {
-                'owner': attrs['access_type'] <= OrganizationMemberType.OWNER,
-                'admin': attrs['access_type'] <= OrganizationMemberType.ADMIN,
-            }
         }
-        return d
 
 
 class TeamWithProjectsSerializer(TeamSerializer):
