commit 4fbfaf7d3df533e4243fa997ca071f88f9443987
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri May 1 15:50:35 2020 -0700

    ref(ui): Replace radio button with real radio input (#18506)

diff --git a/src/sentry/static/sentry/app/components/radio.tsx b/src/sentry/static/sentry/app/components/radio.tsx
index 81d1669edb..8ef17454ed 100644
--- a/src/sentry/static/sentry/app/components/radio.tsx
+++ b/src/sentry/static/sentry/app/components/radio.tsx
@@ -1,20 +1,54 @@
 import React from 'react';
-import classNames from 'classnames';
+import styled from '@emotion/styled';
+import {css} from '@emotion/core';
 
-type DefaultProps = {
-  checked: boolean;
-};
+import {growIn} from 'app/styles/animations';
+import {Theme} from 'app/utils/theme';
+
+type CheckedProps = React.HTMLProps<HTMLInputElement> & {theme: Theme};
+
+const checkedCss = (p: CheckedProps) => css`
+  display: block;
+  width: 1rem;
+  height: 1rem;
+  border-radius: 50%;
+  background-color: ${p.theme.green};
+  animation: 0.2s ${growIn} ease;
+  opacity: ${p.disabled ? 0.4 : null};
+`;
+
+const Radio = styled('input')`
+  display: flex;
+  padding: 0;
+  width: 1.5em;
+  height: 1.5em;
+  position: relative;
+  border-radius: 50%;
+  align-items: center;
+  justify-content: center;
+  border: 1px solid ${p => p.theme.borderLight};
+  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);
+  background: none;
+  appearance: none;
 
-class Radio extends React.Component<React.HTMLProps<HTMLInputElement> & DefaultProps> {
-  static defaultProps: DefaultProps = {
-    checked: false,
-  };
+  /* TODO(bootstrap): Our bootstrap CSS adds this, we can remove when we remove that */
+  margin: 0 !important;
 
-  render() {
-    const {className, ...otherProps} = this.props;
-    const cx = classNames('radio-select', className);
-    return <input type="radio" className={cx} {...otherProps} />;
+  &:focus,
+  &.focus-visible {
+    outline: none !important;
+    border: 1px solid ${p => p.theme.borderDark};
+    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;
   }
-}
+
+  &:checked:after {
+    content: '';
+    ${checkedCss}
+  }
+`;
+
+Radio.defaultProps = {
+  type: 'radio',
+};
 
 export default Radio;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
index 86d13c3893..e038d1a7c5 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioGroup.tsx
@@ -1,10 +1,9 @@
-import {css} from '@emotion/core';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 import isPropValid from '@emotion/is-prop-valid';
 
-import {growIn} from 'app/styles/animations';
+import Radio from 'app/components/radio';
 
 type RadioGroupProps<C extends string> = {
   value: string | number | null;
@@ -13,7 +12,7 @@ type RadioGroupProps<C extends string> = {
   choices: [C, React.ReactNode, React.ReactNode?][];
   disabled?: boolean;
   label: string;
-  onChange: (id: C, e: React.MouseEvent) => void;
+  onChange: (id: C, e: React.FormEvent) => void;
 };
 
 type Props<C extends string> = RadioGroupProps<C> &
@@ -28,34 +27,30 @@ const RadioGroup = <C extends string>({
   ...props
 }: Props<C>) => (
   <div {...props} role="radiogroup" aria-labelledby={label}>
-    {(choices || []).map(([id, name, description], index) => {
-      const isSelected = value === id;
-
-      return (
-        <RadioLineItem
-          key={index}
-          onClick={e => !disabled && onChange(id, e)}
-          role="radio"
-          index={index}
-          aria-checked={isSelected}
+    {(choices || []).map(([id, name, description], index) => (
+      <RadioLineItem
+        key={index}
+        role="radio"
+        index={index}
+        aria-checked={value === id}
+        disabled={disabled}
+      >
+        <Radio
+          aria-label={id}
           disabled={disabled}
-        >
-          <RadioLineButton aria-label={id} type="button" disabled={disabled}>
-            {isSelected && (
-              <RadioLineButtonFill disabled={disabled} animate={value !== ''} />
-            )}
-          </RadioLineButton>
-          <RadioLineText disabled={disabled}>{name}</RadioLineText>
-          {description && (
-            <React.Fragment>
-              {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}
-              <div />
-              <Description>{description}</Description>
-            </React.Fragment>
-          )}
-        </RadioLineItem>
-      );
-    })}
+          checked={value === id}
+          onChange={(e: React.FormEvent) => !disabled && onChange(id, e)}
+        />
+        <RadioLineText disabled={disabled}>{name}</RadioLineText>
+        {description && (
+          <React.Fragment>
+            {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}
+            <div />
+            <Description>{description}</Description>
+          </React.Fragment>
+        )}
+      </RadioLineItem>
+    ))}
   </div>
 );
 
@@ -68,30 +63,9 @@ RadioGroup.propTypes = {
   onChange: PropTypes.func.isRequired,
 };
 
-const RadioLineButton = styled('button')`
-  display: flex;
-  padding: 0;
-  width: 1.5em;
-  height: 1.5em;
-  position: relative;
-  border-radius: 50%;
-  align-items: center;
-  justify-content: center;
-  border: 1px solid ${p => p.theme.borderLight};
-  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);
-  background: none;
-
-  &:focus,
-  &.focus-visible {
-    outline: none;
-    border: 1px solid ${p => p.theme.borderDark};
-    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;
-  }
-`;
-
 const shouldForwardProp = p => !['disabled', 'animate'].includes(p) && isPropValid(p);
 
-const RadioLineItem = styled('div', {shouldForwardProp})<{
+const RadioLineItem = styled('label', {shouldForwardProp})<{
   disabled?: boolean;
   index: number;
 }>`
@@ -102,23 +76,7 @@ const RadioLineItem = styled('div', {shouldForwardProp})<{
   cursor: ${p => (p.disabled ? 'default' : 'pointer')};
   margin-top: ${p => (p.index > 0 ? '0.5em' : '0')};
   outline: none;
-`;
-
-const RadioLineButtonFill = styled('div', {shouldForwardProp})<{
-  animate: boolean;
-  disabled?: boolean;
-}>`
-  width: 1rem;
-  height: 1rem;
-  border-radius: 50%;
-  background-color: ${p => p.theme.green};
-  ${p =>
-    p.animate
-      ? css`
-          animation: 0.2s ${growIn} ease;
-        `
-      : 'animation: none'};
-  opacity: ${p => (p.disabled ? 0.4 : null)};
+  font-weight: normal;
 `;
 
 const RadioLineText = styled('div', {shouldForwardProp})<{disabled?: boolean}>`
diff --git a/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
index 75362377a8..05d2042bea 100644
--- a/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
@@ -10,12 +10,13 @@ exports[`RadioGroup can select a different item 1`] = `
     aria-checked={false}
     index={0}
     key="0"
-    onClick={[Function]}
     role="radio"
   >
-    <RadioLineButton
+    <Radio
       aria-label="choice_one"
-      type="button"
+      checked={false}
+      onChange={[Function]}
+      type="radio"
     />
     <RadioLineText>
       Choice One
@@ -25,12 +26,13 @@ exports[`RadioGroup can select a different item 1`] = `
     aria-checked={false}
     index={1}
     key="1"
-    onClick={[Function]}
     role="radio"
   >
-    <RadioLineButton
+    <Radio
       aria-label="choice_two"
-      type="button"
+      checked={false}
+      onChange={[Function]}
+      type="radio"
     />
     <RadioLineText>
       Choice Two
@@ -40,17 +42,14 @@ exports[`RadioGroup can select a different item 1`] = `
     aria-checked={true}
     index={2}
     key="2"
-    onClick={[Function]}
     role="radio"
   >
-    <RadioLineButton
+    <Radio
       aria-label="choice_three"
-      type="button"
-    >
-      <RadioLineButtonFill
-        animate={true}
-      />
-    </RadioLineButton>
+      checked={true}
+      onChange={[Function]}
+      type="radio"
+    />
     <RadioLineText>
       Choice Three
     </RadioLineText>
@@ -68,17 +67,14 @@ exports[`RadioGroup renders 1`] = `
     aria-checked={true}
     index={0}
     key="0"
-    onClick={[Function]}
     role="radio"
   >
-    <RadioLineButton
+    <Radio
       aria-label="choice_one"
-      type="button"
-    >
-      <RadioLineButtonFill
-        animate={true}
-      />
-    </RadioLineButton>
+      checked={true}
+      onChange={[Function]}
+      type="radio"
+    />
     <RadioLineText>
       Choice One
     </RadioLineText>
@@ -87,12 +83,13 @@ exports[`RadioGroup renders 1`] = `
     aria-checked={false}
     index={1}
     key="1"
-    onClick={[Function]}
     role="radio"
   >
-    <RadioLineButton
+    <Radio
       aria-label="choice_two"
-      type="button"
+      checked={false}
+      onChange={[Function]}
+      type="radio"
     />
     <RadioLineText>
       Choice Two
@@ -102,12 +99,13 @@ exports[`RadioGroup renders 1`] = `
     aria-checked={false}
     index={2}
     key="2"
-    onClick={[Function]}
     role="radio"
   >
-    <RadioLineButton
+    <Radio
       aria-label="choice_three"
-      type="button"
+      checked={false}
+      onChange={[Function]}
+      type="radio"
     />
     <RadioLineText>
       Choice Three
@@ -142,46 +140,39 @@ exports[`RadioGroup renders disabled 1`] = `
       disabled={true}
       index={0}
       key="0"
-      onClick={[Function]}
       role="radio"
     >
-      <div
+      <label
         aria-checked={true}
-        className="css-152tjw9-RadioLineItem e1r42lk41"
-        onClick={[Function]}
+        className="css-nmaqu8-RadioLineItem e1r42lk40"
         role="radio"
       >
-        <RadioLineButton
+        <Radio
           aria-label="choice_one"
+          checked={true}
           disabled={true}
-          type="button"
+          onChange={[Function]}
+          type="radio"
         >
-          <button
+          <input
             aria-label="choice_one"
-            className="css-2gvt33-RadioLineButton e1r42lk40"
+            checked={true}
+            className="css-3pmlh6-Radio e1d7o7s40"
             disabled={true}
-            type="button"
-          >
-            <RadioLineButtonFill
-              animate={true}
-              disabled={true}
-            >
-              <div
-                className="css-1f51shg-RadioLineButtonFill-RadioLineButtonFill e1r42lk42"
-              />
-            </RadioLineButtonFill>
-          </button>
-        </RadioLineButton>
+            onChange={[Function]}
+            type="radio"
+          />
+        </Radio>
         <RadioLineText
           disabled={true}
         >
           <div
-            className="css-m8i2g4-RadioLineText e1r42lk43"
+            className="css-m8i2g4-RadioLineText e1r42lk41"
           >
             Choice One
           </div>
         </RadioLineText>
-      </div>
+      </label>
     </RadioLineItem>
   </div>
 </RadioGroup>
diff --git a/tests/js/spec/components/forms/radioGroup.spec.jsx b/tests/js/spec/components/forms/radioGroup.spec.jsx
index dd47b36966..742c53de92 100644
--- a/tests/js/spec/components/forms/radioGroup.spec.jsx
+++ b/tests/js/spec/components/forms/radioGroup.spec.jsx
@@ -37,7 +37,7 @@ describe('RadioGroup', function() {
     expect(wrapper).toMatchSnapshot();
 
     expect(wrapper.find('RadioLineText').props().disabled).toBe(true);
-    expect(wrapper.find('RadioLineButtonFill').props().disabled).toBe(true);
+    expect(wrapper.find('Radio').props().disabled).toBe(true);
   });
 
   it('can select a different item', function() {
@@ -75,9 +75,9 @@ describe('RadioGroup', function() {
       />
     );
     wrapper
-      .find('[role="radio"]')
+      .find('[role="radio"] Radio')
       .last()
-      .simulate('click');
+      .simulate('change');
     expect(mock).toHaveBeenCalledWith(expect.any(String), expect.any(Object));
   });
 });
diff --git a/tests/js/spec/views/accountNotifications.spec.jsx b/tests/js/spec/views/accountNotifications.spec.jsx
index bd0295d645..4089cf93b2 100644
--- a/tests/js/spec/views/accountNotifications.spec.jsx
+++ b/tests/js/spec/views/accountNotifications.spec.jsx
@@ -60,9 +60,9 @@ describe('AccountNotifications', function() {
     });
 
     wrapper
-      .find('Field[id="deployNotifications"] RadioLineItem')
+      .find('Field[id="deployNotifications"] Radio')
       .at(2)
-      .simulate('click');
+      .simulate('change');
 
     expect(mock).toHaveBeenCalledWith(
       url,
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 3dd147a4f5..cffe941de3 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -265,11 +265,12 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                 checked={false}
                                 id="1"
                                 readOnly={true}
+                                type="radio"
                                 value="member"
                               >
                                 <input
                                   checked={false}
-                                  className="radio-select"
+                                  className="css-58nv73-Radio e1d7o7s40"
                                   id="1"
                                   readOnly={true}
                                   type="radio"
@@ -362,11 +363,12 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                 checked={false}
                                 id="2"
                                 readOnly={true}
+                                type="radio"
                                 value="bar"
                               >
                                 <input
                                   checked={false}
-                                  className="radio-select"
+                                  className="css-58nv73-Radio e1d7o7s40"
                                   id="2"
                                   readOnly={true}
                                   type="radio"
diff --git a/tests/js/spec/views/projectInstall/createProject.spec.jsx b/tests/js/spec/views/projectInstall/createProject.spec.jsx
index b0cb277e33..518ad0aeaf 100644
--- a/tests/js/spec/views/projectInstall/createProject.spec.jsx
+++ b/tests/js/spec/views/projectInstall/createProject.spec.jsx
@@ -185,7 +185,8 @@ describe('CreateProject', function() {
       wrapper
         .find('SelectControl[data-test-id="metric-select-control"]')
         .closest('RadioLineItem')
-        .simulate('click');
+        .find('Radio')
+        .simulate('change');
       expectSubmitButtonToBeDisabled(true);
 
       wrapper
@@ -219,9 +220,9 @@ describe('CreateProject', function() {
       expectSubmitButtonToBeDisabled(true);
 
       wrapper
-        .find('RadioLineItem')
+        .find('Radio')
         .first()
-        .simulate('click');
+        .simulate('change');
       expectSubmitButtonToBeDisabled(false);
     });
   });
diff --git a/tests/js/spec/views/settings/projectAlerts/create.spec.jsx b/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
index 0f6c911642..71298f3a7e 100644
--- a/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
+++ b/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
@@ -136,11 +136,11 @@ describe('ProjectAlertsCreate', function() {
         expect(wrapper.find('IssueEditor')).toHaveLength(0);
         expect(wrapper.find('IncidentRulesCreate')).toHaveLength(0);
 
-        wrapper.find('button[aria-label="metric"]').simulate('click');
+        wrapper.find('Radio[aria-label="metric"]').simulate('change');
         expect(wrapper.find('IncidentRulesCreate')).toHaveLength(1);
         await tick();
 
-        wrapper.find('button[aria-label="issue"]').simulate('click');
+        wrapper.find('Radio[aria-label="issue"]').simulate('change');
         await tick();
         expect(wrapper.find('IncidentRulesCreate')).toHaveLength(0);
         expect(wrapper.find('SelectControl[name="environment"]').prop('value')).toBe(
