commit 40a1e587c4fbd9b5ce5b9aab7d952e1954af01cb
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 19 14:00:48 2020 -0800

    feat(workflow): Add "Delete Rule" button for Issue alerts (#17095)
    
    This adds a "Delete Rule" button for Issue alerts

diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 49bd481b77..1d7d6c9893 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -21,6 +21,8 @@ import {
 import {getDisplayName} from 'app/utils/environment';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
 import Form from 'app/views/settings/components/forms/form';
 import LoadingMask from 'app/components/loadingMask';
 import PanelAlert from 'app/components/panels/panelAlert';
@@ -150,6 +152,35 @@ class IssueRuleEditor extends AsyncView<Props, State> {
     }
   };
 
+  handleDeleteRule = async () => {
+    const {rule} = this.state;
+    const ruleId = isSavedAlertRule(rule) ? `${rule.id}/` : '';
+    const isNew = !ruleId;
+    const {project, organization} = this.props;
+
+    if (isNew) {
+      return;
+    }
+
+    const endpoint = `/projects/${organization.slug}/${project.slug}/rules/${ruleId}`;
+
+    addLoadingMessage(t('Deleting...'));
+
+    try {
+      await this.api.requestPromise(endpoint, {
+        method: 'DELETE',
+      });
+
+      addSuccessMessage(t('Deleted alert rule'));
+      browserHistory.replace(recreateRoute('', {...this.props, stepBack: -2}));
+    } catch (err) {
+      this.setState({
+        detailedError: err.responseJSON || {__all__: 'Unknown error'},
+      });
+      addErrorMessage(t('There was a problem deleting the alert'));
+    }
+  };
+
   handleCancel = () => {
     const {router} = this.props;
 
@@ -263,6 +294,19 @@ class IssueRuleEditor extends AsyncView<Props, State> {
           onSubmit={this.handleSubmit}
           initialData={{...rule, environment, actionMatch, frequency: `${frequency}`}}
           submitLabel={t('Save Rule')}
+          extraButton={
+            <Confirm
+              priority="danger"
+              confirmText={t('Delete Rule')}
+              onConfirm={this.handleDeleteRule}
+              header={t('Delete Rule')}
+              message={t('Are you sure you want to delete this rule?')}
+            >
+              <Button priority="danger" type="button">
+                {t('Delete Rule')}
+              </Button>
+            </Confirm>
+          }
         >
           {this.state.loading && <SemiTransparentLoadingMask />}
           <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
index 87cec59245..7ee9cf77b4 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/ruleNode.tsx
@@ -149,7 +149,13 @@ class RuleNode extends React.Component<Props> {
       <React.Fragment>
         {data && <input type="hidden" name="id" value={data.id} />}
         {this.renderRow()}
-        <DeleteButton onClick={onDelete} type="button" size="small" icon="icon-trash" />
+        <DeleteButton
+          label={t('Delete Node')}
+          onClick={onDelete}
+          type="button"
+          size="small"
+          icon="icon-trash"
+        />
       </React.Fragment>
     );
   }
diff --git a/tests/js/sentry-test/select-new.js b/tests/js/sentry-test/select-new.js
new file mode 100644
index 0000000000..1bf9286027
--- /dev/null
+++ b/tests/js/sentry-test/select-new.js
@@ -0,0 +1,48 @@
+export function getSelector(options = {}) {
+  let selector = '';
+
+  if (options.selector) {
+    return options.selector;
+  }
+
+  if (options.name) {
+    selector = `[name="${options.name}"]`;
+  }
+
+  const field = `Select${options.control ? 'Control' : 'Field'}`;
+  return `${field}${selector}`;
+}
+
+export function openMenu(wrapper, options = {}) {
+  const selector = getSelector(options);
+  const control = wrapper.find(`${selector} SelectContainer Control`).at(options.at || 0);
+  control.prop('innerProps').onMouseDown({target: {tagName: 'INPUT'}});
+  control.find('input').simulate('focus');
+
+  return wrapper;
+}
+
+export function clearValue(wrapper) {
+  wrapper.find('.Select-clear-zone').simulate('mouseDown', {button: 0});
+}
+
+export function findOption(wrapper, {value, label} = {}, options) {
+  const selector = getSelector(options);
+  const valueSelector = !!value ? 'value' : 'label';
+
+  return wrapper.find(`${selector} Option[${valueSelector}="${value || label}"]`);
+}
+
+export function selectByLabel(wrapper, label, options = {}) {
+  openMenu(wrapper, options);
+  findOption(wrapper, {label}, options)
+    .at(options.at || 0)
+    .simulate('click');
+}
+
+export function selectByValue(wrapper, value, options = {}) {
+  openMenu(wrapper, options);
+  findOption(wrapper, {value}, options)
+    .at(options.at || 0)
+    .simulate('click');
+}
diff --git a/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx b/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx
new file mode 100644
index 0000000000..eb13f53d43
--- /dev/null
+++ b/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx
@@ -0,0 +1,147 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import {selectByValue} from 'sentry-test/select-new';
+import ProjectAlerts from 'app/views/settings/projectAlerts';
+import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
+
+jest.unmock('app/utils/recreateRoute');
+
+describe('ProjectAlerts -> IssueEditor', function() {
+  const projectAlertRuleDetailsRoutes = [
+    {
+      path: '/',
+    },
+    {
+      path: '/settings/',
+      name: 'Settings',
+      indexRoute: {},
+    },
+    {
+      name: 'Organization',
+      path: ':orgId/',
+    },
+    {
+      name: 'Project',
+      path: 'projects/:projectId/',
+    },
+    {},
+    {
+      indexRoute: {name: 'General'},
+    },
+    {
+      name: 'Alert Rules',
+      path: 'alerts/',
+      indexRoute: {},
+    },
+    {
+      path: 'rules/',
+      name: 'Rules',
+      component: null,
+      indexRoute: {},
+      childRoutes: [
+        {path: 'new/', name: 'New'},
+        {path: ':ruleId/', name: 'Edit'},
+      ],
+    },
+    {path: ':ruleId/', name: 'Edit Alert Rule'},
+  ];
+
+  beforeEach(async function() {
+    browserHistory.replace = jest.fn();
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/rules/configuration/',
+      body: TestStubs.ProjectAlertRuleConfiguration(),
+    });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/rules/1/',
+      body: TestStubs.ProjectAlertRule(),
+    });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/environments/',
+      body: TestStubs.Environments(),
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  const createWrapper = (props = {}) => {
+    const {organization, project, routerContext} = initializeOrg(props);
+    const params = {orgId: organization.slug, projectId: project.slug, ruleId: '1'};
+    const wrapper = mountWithTheme(
+      <ProjectAlerts organization={organization} params={params}>
+        <IssueEditor
+          params={params}
+          location={{pathname: ''}}
+          routes={projectAlertRuleDetailsRoutes}
+        />
+      </ProjectAlerts>,
+      routerContext
+    );
+
+    return {
+      wrapper,
+      organization,
+      project,
+    };
+  };
+  describe('Edit Rule', function() {
+    let mock;
+    const endpoint = '/projects/org-slug/project-slug/rules/1/';
+    beforeEach(async function() {
+      mock = MockApiClient.addMockResponse({
+        url: endpoint,
+        method: 'PUT',
+        body: TestStubs.ProjectAlertRule(),
+      });
+    });
+
+    it('deletes rule', async function() {
+      const deleteMock = MockApiClient.addMockResponse({
+        url: endpoint,
+        method: 'DELETE',
+        body: {},
+      });
+      const {wrapper} = createWrapper();
+      wrapper.find('button[aria-label="Delete Rule"]').simulate('click');
+      await tick();
+      wrapper.find('Modal button[aria-label="Delete Rule"]').simulate('click');
+      await tick();
+      expect(deleteMock).toHaveBeenCalled();
+      expect(browserHistory.replace).toHaveBeenCalledWith(
+        '/settings/org-slug/projects/project-slug/alerts/'
+      );
+    });
+
+    it('sends correct environment value', function() {
+      const {wrapper} = createWrapper();
+      selectByValue(wrapper, 'production', {name: 'environment'});
+      wrapper.find('form').simulate('submit');
+
+      expect(mock).toHaveBeenCalledWith(
+        endpoint,
+        expect.objectContaining({
+          data: expect.objectContaining({environment: 'production'}),
+        })
+      );
+    });
+
+    it('strips environment value if "All environments" is selected', async function() {
+      const {wrapper} = createWrapper();
+      selectByValue(wrapper, '__all_environments__', {name: 'environment'});
+      wrapper.find('form').simulate('submit');
+
+      expect(mock).toHaveBeenCalledTimes(1);
+      expect(mock).not.toHaveBeenCalledWith(
+        endpoint,
+        expect.objectContaining({
+          data: expect.objectContaining({environment: '__all_environments__'}),
+        })
+      );
+    });
+  });
+});
