commit ee779fb04d143ac27afc96cb52ae4f75b04b9073
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri Feb 16 13:31:09 2018 -0800

    fix(api): Error page adds environment (#7268)
    
    * Added the code for the error_page_embed to update env. Need to add tests.
    
    * Added tests to error page to make sure environment is added.
    
    * Reverted changes made to cases.

diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index c241400feb..5e016373e0 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -12,7 +12,7 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.csrf import csrf_exempt
 
-from sentry.models import (Group, ProjectKey, ProjectOption, UserReport)
+from sentry.models import (Event, Group, ProjectKey, ProjectOption, UserReport)
 from sentry.web.helpers import render_to_response
 from sentry.signals import user_feedback_received
 from sentry.utils import json
@@ -118,9 +118,16 @@ class ErrorPageEmbedView(View):
             report.event_id = event_id
 
             try:
-                report.group = Group.objects.from_event_id(report.project, report.event_id)
-            except Group.DoesNotExist:
-                pass
+                event = Event.objects.filter(project_id=report.project.id,
+                                             event_id=report.event_id).select_related('group')[0]
+            except IndexError:
+                try:
+                    report.group = Group.objects.from_event_id(report.project, report.event_id)
+                except Group.DoesNotExist:
+                    pass
+            else:
+                report.environment = event.get_environment()
+                report.group = event.group
 
             try:
                 with transaction.atomic():
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index 6a3ca60508..a4eb7c4134 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -3,9 +3,11 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from six.moves.urllib.parse import quote
 from uuid import uuid4
+import logging
 
-from sentry.models import UserReport
+from sentry.models import Environment, UserReport
 from sentry.testutils import TestCase
+from sentry.event_manager import EventManager
 
 
 class ErrorPageEmbedTest(TestCase):
@@ -91,3 +93,74 @@ class ErrorPageEmbedTest(TestCase):
             HTTP_REFERER='http://example.com'
         )
         assert resp.status_code == 400
+
+
+class ErrorPageEmbedEnvironmentTest(TestCase):
+
+    urls = 'sentry.conf.urls'
+
+    def setUp(self):
+        self.project = self.create_project()
+        self.project.update_option('sentry:origins', ['example.com'])
+        self.key = self.create_project_key(self.project)
+        self.event_id = uuid4().hex
+        self.path = '%s?eventId=%s&dsn=%s' % (
+            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),
+        )
+        self.environment = Environment.objects.create(
+            project_id=self.project.id,
+            organization_id=self.project.organization_id,
+            name='production',
+        )
+        self.environment.add_project(self.project)
+
+    def make_event(self, **kwargs):
+        result = {
+            'event_id': 'a' * 32,
+            'message': 'foo',
+            'timestamp': 1403007314.570599,
+            'level': logging.ERROR,
+            'logger': 'default',
+            'tags': [],
+        }
+        result.update(kwargs)
+        manager = EventManager(result)
+        manager.normalize()
+        manager.save(self.project.id)
+
+    def test_environment_gets_user_report(self):
+        self.make_event(
+            environment=self.environment.name,
+            event_id=self.event_id,
+            group=self.group,
+        )
+        self.login_as(user=self.user)
+        response = self.client.post(
+            self.path, {
+                'name': 'Jane Doe',
+                'email': 'jane@example.com',
+                'comments': 'This is an example!',
+            },
+            HTTP_REFERER='http://example.com'
+        )
+
+        assert response.status_code == 200, response.content
+        assert UserReport.objects.get(event_id=self.event_id).environment == self.environment
+
+    def test_user_report_gets_environment(self):
+        self.login_as(user=self.user)
+        response = self.client.post(
+            self.path, {
+                'name': 'Jane Doe',
+                'email': 'jane@example.com',
+                'comments': 'This is an example!',
+            },
+            HTTP_REFERER='http://example.com'
+        )
+        self.make_event(
+            environment=self.environment.name,
+            event_id=self.event_id,
+            group=self.group,
+        )
+        assert response.status_code == 200, response.content
+        assert UserReport.objects.get(event_id=self.event_id).environment == self.environment
