commit 6b982382352aebfe5e48802c382fc794d202e596
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 17 08:33:05 2019 -0700

    ref(ui): Move formatting function out of `<Count>` (#13250)
    
    * ref(ui): Move formatting function out of `<Count>`
    
    Move it into `app/utils` so it can be re-used
    
    * update snaps

diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index 49017f966e..2f67339f35 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -1,50 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import createReactClass from 'create-react-class';
-
-export default createReactClass({
-  displayName: 'count',
-
-  propTypes: {
-    value: PropTypes.any.isRequired,
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.value !== nextProps.value;
-  },
-
-  numberFormats: [[1000000000, 'b'], [1000000, 'm'], [1000, 'k']],
-
-  floatFormat(number, places) {
-    const multi = Math.pow(10, places);
-    return parseInt(number * multi, 10) / multi;
-  },
-
-  formatNumber(number) {
-    let b, x, y, o, p;
-
-    number = parseInt(number, 10);
-
-    /*eslint no-cond-assign:0*/
-    for (let i = 0; (b = this.numberFormats[i]); i++) {
-      x = b[0];
-      y = b[1];
-      o = Math.floor(number / x);
-      p = number % x;
-      if (o > 0) {
-        if (o / 10 > 1 || !p) {
-          return '' + o + y;
-        }
-        return '' + this.floatFormat(number / x, 1) + y;
-      }
-    }
-    return '' + number.toLocaleString();
-  },
+import formatAbbreviatedNumber from 'app/utils/formatAbbreviatedNumber';
 
+export default class Count extends React.PureComponent {
+  static propTypes = {
+    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
+  };
   render() {
     const {value, className} = this.props;
 
-    return <span className={className}>{this.formatNumber(value)}</span>;
-  },
-});
+    return <span className={className}>{formatAbbreviatedNumber(value)}</span>;
+  }
+}
diff --git a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
new file mode 100644
index 0000000000..ea12a07ed7
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
@@ -0,0 +1,27 @@
+const numberFormats = [[1000000000, 'b'], [1000000, 'm'], [1000, 'k']];
+
+function floatFormat(number, places) {
+  const multi = Math.pow(10, places);
+  return parseInt(number * multi, 10) / multi;
+}
+
+export default function formatNumber(number) {
+  let b, x, y, o, p;
+
+  number = parseInt(number, 10);
+
+  // eslint-disable-next-line no-cond-assign
+  for (let i = 0; (b = numberFormats[i]); i++) {
+    x = b[0];
+    y = b[1];
+    o = Math.floor(number / x);
+    p = number % x;
+    if (o > 0) {
+      if (o / 10 > 1 || !p) {
+        return '' + o + y;
+      }
+      return '' + floatFormat(number / x, 1) + y;
+    }
+  }
+  return '' + number.toLocaleString();
+}
diff --git a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
index 60ef7a41d5..8bdb79a8d4 100644
--- a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
@@ -362,13 +362,13 @@ exports[`GroupReleaseStats renders 1`] = `
                   <span
                     className="max-y"
                   >
-                    <count
+                    <Count
                       value={10}
                     >
                       <span>
                         10
                       </span>
-                    </count>
+                    </Count>
                   </span>
                   <span
                     className="min-y"
@@ -925,13 +925,13 @@ exports[`GroupReleaseStats renders 1`] = `
                   <span
                     className="max-y"
                   >
-                    <count
+                    <Count
                       value={122}
                     >
                       <span>
                         122
                       </span>
-                    </count>
+                    </Count>
                   </span>
                   <span
                     className="min-y"
diff --git a/tests/js/spec/utils/formatAbbreviatedNumber.spec.jsx b/tests/js/spec/utils/formatAbbreviatedNumber.spec.jsx
new file mode 100644
index 0000000000..71a1ad62db
--- /dev/null
+++ b/tests/js/spec/utils/formatAbbreviatedNumber.spec.jsx
@@ -0,0 +1,21 @@
+import formatAbbreviatedNumber from 'app/utils/formatAbbreviatedNumber';
+
+describe('formatAbbreviatedNumber()', function() {
+  it('should abbreviate numbers', function() {
+    expect(formatAbbreviatedNumber(0)).toBe('0');
+    expect(formatAbbreviatedNumber(100)).toBe('100');
+    expect(formatAbbreviatedNumber(1000)).toBe('1k');
+    expect(formatAbbreviatedNumber(10000000)).toBe('10m');
+    expect(formatAbbreviatedNumber(100000000000)).toBe('100b');
+    expect(formatAbbreviatedNumber(1000000000000)).toBe('1000b');
+  });
+
+  it('should abbreviate numbers that are strings', function() {
+    expect(formatAbbreviatedNumber('00')).toBe('0');
+    expect(formatAbbreviatedNumber('100')).toBe('100');
+    expect(formatAbbreviatedNumber('1000')).toBe('1k');
+    expect(formatAbbreviatedNumber('10000000')).toBe('10m');
+    expect(formatAbbreviatedNumber('100000000000')).toBe('100b');
+    expect(formatAbbreviatedNumber('1000000000000')).toBe('1000b');
+  });
+});
diff --git a/tests/js/spec/views/groupDetails/__snapshots__/groupSimilar.spec.jsx.snap b/tests/js/spec/views/groupDetails/__snapshots__/groupSimilar.spec.jsx.snap
index d816b89649..98ea8c8913 100644
--- a/tests/js/spec/views/groupDetails/__snapshots__/groupSimilar.spec.jsx.snap
+++ b/tests/js/spec/views/groupDetails/__snapshots__/groupSimilar.spec.jsx.snap
@@ -1570,7 +1570,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                 <div
                   className="similar-score-columns"
                 >
-                  <count
+                  <Count
                     className="similar-score-column"
                     value="90"
                   >
@@ -1579,7 +1579,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                     >
                       90
                     </span>
-                  </count>
+                  </Count>
                   <div
                     className="similar-score-column"
                     key="exception"
diff --git a/tests/js/spec/views/organizationProjectsDashboard/__snapshots__/projectCard.spec.jsx.snap b/tests/js/spec/views/organizationProjectsDashboard/__snapshots__/projectCard.spec.jsx.snap
index f140aeaebf..e1f228687a 100644
--- a/tests/js/spec/views/organizationProjectsDashboard/__snapshots__/projectCard.spec.jsx.snap
+++ b/tests/js/spec/views/organizationProjectsDashboard/__snapshots__/projectCard.spec.jsx.snap
@@ -675,13 +675,13 @@ exports[`ProjectCard renders 1`] = `
                               <span
                                 className="max-y"
                               >
-                                <count
+                                <Count
                                   value={10}
                                 >
                                   <span>
                                     10
                                   </span>
-                                </count>
+                                </Count>
                               </span>
                               <span
                                 className="min-y"
