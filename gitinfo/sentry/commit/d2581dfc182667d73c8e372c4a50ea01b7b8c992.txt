commit d2581dfc182667d73c8e372c4a50ea01b7b8c992
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 5 00:39:54 2013 -0800

    Drop invalid arguments instead of causing client errors

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 209d602b77..4c3ee95f2c 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -20,7 +20,7 @@ from django.utils.encoding import smart_str
 
 from sentry.app import env
 from sentry.conf import settings
-from sentry.exceptions import InvalidInterface, InvalidData, InvalidTimestamp
+from sentry.exceptions import InvalidTimestamp
 from sentry.models import Project, ProjectKey, TeamMember, Team
 from sentry.plugins import plugins
 from sentry.tasks.store import store_event
@@ -297,32 +297,35 @@ def validate_data(project, data, client=None):
     if not data.get('message'):
         data['message'] = '<no message value>'
     elif len(data['message']) > MAX_MESSAGE_LENGTH:
-        logger.error('Value for message was too long (%d chars)', len(data['message']), **client_metadata(client))
-        raise InvalidData('Value \'message\' is too long. Input is %d chars, max is %s.' % (
-            len(data['message']), MAX_MESSAGE_LENGTH))
+        logger.error('Truncated value for message was too long (%d chars)', len(data['message']),
+            **client_metadata(client))
+        data['message'] = data['message'][:MAX_MESSAGE_LENGTH]
 
-    if data.get('culprit') and len(data['culprit']) > 200:
-        logger.error('Value for culprit was too long (%d chars)', len(data['culprit']), **client_metadata(client))
-        raise InvalidData('Value \'culprit\' is too long. Input is %d chars, max is %s.' % (
-            len(data['culprit']), MAX_CULPRIT_LENGTH))
+    if data.get('culprit') and len(data['culprit']) > MAX_CULPRIT_LENGTH:
+        logger.error('Truncated value for culprit was too long (%d chars)', len(data['culprit']),
+            **client_metadata(client))
+        data['culprit'][:MAX_CULPRIT_LENGTH]
 
     if not data.get('event_id'):
         data['event_id'] = uuid.uuid4().hex
-    elif len(data['event_id']) > 32:
-        logger.error('Value for event_id was too long (%d chars)', len(data['event_id']), **client_metadata(client))
-        raise InvalidData('Invalid value for \'event_id\': must be a 32 character identifier')
+    if len(data['event_id']) > 32:
+        logger.error('Discarded value for event_id was too long (%d chars)', len(data['event_id']),
+            **client_metadata(client))
+        data['event_id'] = uuid.uuid4().hex
 
     if 'timestamp' in data:
         try:
             process_data_timestamp(data)
         except InvalidTimestamp, e:
             # Log the error, remove the timestamp, and continue
-            logger.info('Discarding invalid value for timestamp: %r', data['timestamp'], **client_metadata(client, exception=e))
+            logger.info('Discarded invalid value for timestamp: %r', data['timestamp'],
+                **client_metadata(client, exception=e))
             del data['timestamp']
 
     if data.get('modules') and type(data['modules']) != dict:
-        logger.error('Invalid type for modules: %s', type(data['modules']), **client_metadata(client))
-        raise InvalidData('Invalid type for \'modules\': must be a mapping')
+        logger.error('Discardied invalid type for modules: %s', type(data['modules']),
+            **client_metadata(client))
+        del data['modules']
 
     for k in data.keys():
         if k in RESERVED_FIELDS:
@@ -343,8 +346,9 @@ def validate_data(project, data, client=None):
         try:
             interface = import_string(import_path)
         except (ImportError, AttributeError), e:
-            logger.warning('Invalid interface name: %s', k, **client_metadata(client, exception=e))
-            raise InvalidInterface('%r is not a valid interface name: %s' % (k, e))
+            logger.warning('Invalid unknown attribute: %s', k, **client_metadata(client, exception=e))
+            del data[k]
+            continue
 
         value = data.pop(k)
         try:
@@ -356,9 +360,8 @@ def validate_data(project, data, client=None):
                 log = logger.warning
             else:
                 log = logger.error
-            log('Invalid value for interface: %s', k,
+            log('Discarding invalid value for interface: %s', k,
                 **client_metadata(client, exception=e, extra={'value': value}))
-            raise InvalidData('Unable to validate interface, %r: %s' % (k, e))
 
     level = data.get('level') or settings.DEFAULT_LOG_LEVEL
     if isinstance(level, basestring) and not level.isdigit():
@@ -367,7 +370,8 @@ def validate_data(project, data, client=None):
             data['level'] = settings.LOG_LEVEL_REVERSE_MAP[level]
         except KeyError, e:
             logger.warning('Ignored invalid logger value: %s', level, **client_metadata(client, exception=e))
-            raise InvalidData('Invalid logging level specified: %r' % level)
+            data['level'] = settings.LOG_LEVEL_REVERSE_MAP.get(settings.DEFAULT_LOG_LEVEL,
+                settings.DEFAULT_LOG_LEVEL)
 
     return data
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 9d491f2a68..bf57a114fc 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -8,7 +8,7 @@ import mock
 from django.contrib.auth.models import User
 
 from sentry.models import Project
-from sentry.exceptions import InvalidTimestamp, InvalidInterface, InvalidData
+from sentry.exceptions import InvalidTimestamp
 from sentry.coreapi import (project_from_id, project_from_api_key_and_id,
     extract_auth_vars, project_from_auth_vars, APIUnauthorized, APIForbidden,
     process_data_timestamp, insert_data_to_database, validate_data, INTERFACE_ALIASES)
@@ -239,11 +239,12 @@ class ValidateDataTest(BaseAPITest):
         data = validate_data(self.project, {})
         assert data['event_id'] == uuid4.return_value.hex
 
-    def test_invalid_event_id(self):
-        with self.assertRaises(InvalidData):
-            validate_data(self.project, {
-                'event_id': 'a' * 33,
-            })
+    @mock.patch('uuid.uuid4')
+    def test_invalid_event_id(self, uuid4):
+        data = validate_data(self.project, {
+            'event_id': 'a' * 33,
+        })
+        assert data['event_id'] == uuid4.return_value.hex
 
     def test_invalid_project_id(self):
         with self.assertRaises(APIForbidden):
@@ -254,35 +255,31 @@ class ValidateDataTest(BaseAPITest):
 
     def test_unknown_attribute(self):
         data = validate_data(self.project, {
-            'project': self.project.slug,
             'message': 'foo',
             'foo': 'bar',
         })
         assert 'foo' not in data
 
     def test_invalid_interface_name(self):
-        with self.assertRaises(InvalidInterface):
-            validate_data(self.project, {
-                'project': self.project.id,
-                'message': 'foo',
-                'foo.baz': 'bar',
-            })
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'foo.baz': 'bar',
+        })
+        assert 'foo.baz' not in data
 
     def test_invalid_interface_import_path(self):
-        with self.assertRaises(InvalidInterface):
-            validate_data(self.project, {
-                'project': self.project.id,
-                'message': 'foo',
-                'sentry.interfaces.Exception2': 'bar',
-            })
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'sentry.interfaces.Exception2': 'bar',
+        })
+        assert 'sentry.interfaces.Exception2' not in data
 
     def test_invalid_interface_args(self):
-        with self.assertRaises(InvalidData):
-            validate_data(self.project, {
-                'project': self.project.id,
-                'message': 'foo',
-                'tests.manager.tests.DummyInterface': {'foo': 'bar'}
-            })
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'tests.manager.tests.DummyInterface': {'foo': 'bar'}
+        })
+        assert 'tests.manager.tests.DummyInterface' not in data
 
     @mock.patch('sentry.coreapi.import_string')
     def test_an_alias_maps_correctly(self, import_string):
@@ -302,12 +299,18 @@ class ValidateDataTest(BaseAPITest):
 
     def test_log_level_as_string(self):
         data = validate_data(self.project, {
-            'project': self.project.id,
             'message': 'foo',
             'level': 'error',
         })
         assert data['level'] == 40
 
+    def test_invalid_log_level(self):
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'level': 'foobar',
+        })
+        assert data['level'] == 40
+
     def test_project_slug(self):
         data = validate_data(self.project, {
             'project': self.project.slug,
