commit 21476700defcf0dddeadeec8471d3454cef6faa7
Author: Jake Carson Zerrer <jake@flexport.com>
Date:   Wed Oct 17 16:28:45 2018 -0700

    feat: Add new reappeared_event event type
    
    Enable user to be notified when event status changes from ignored
    to unresolved.

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index ad9872b95e..86c99b3508 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -150,6 +150,7 @@ SENTRY_RULES = (
     'sentry.rules.conditions.every_event.EveryEventCondition',
     'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
     'sentry.rules.conditions.regression_event.RegressionEventCondition',
+    'sentry.rules.conditions.reappeared_event.ReappearedEventCondition',
     'sentry.rules.conditions.tagged_event.TaggedEventCondition',
     'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
     'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition',
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index e59c246715..5a0ae1baa1 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -101,7 +101,8 @@ class RuleBase(object):
 
 
 class EventState(object):
-    def __init__(self, is_new, is_regression, is_new_group_environment):
+    def __init__(self, is_new, is_regression, is_new_group_environment, has_reappeared):
         self.is_new = is_new
         self.is_regression = is_regression
         self.is_new_group_environment = is_new_group_environment
+        self.has_reappeared = has_reappeared
diff --git a/src/sentry/rules/conditions/reappeared_event.py b/src/sentry/rules/conditions/reappeared_event.py
new file mode 100644
index 0000000000..08cfcd4ebf
--- /dev/null
+++ b/src/sentry/rules/conditions/reappeared_event.py
@@ -0,0 +1,18 @@
+"""
+sentry.rules.conditions.reappeared_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class ReappearedEventCondition(EventCondition):
+    label = 'An issue changes state from ignored to unresolved'
+
+    def passes(self, event, state):
+        return state.has_reappeared
diff --git a/src/sentry/rules/processor.py b/src/sentry/rules/processor.py
index b46ead7957..471ceb99cd 100644
--- a/src/sentry/rules/processor.py
+++ b/src/sentry/rules/processor.py
@@ -37,7 +37,7 @@ class EventCompatibilityProxy(object):
 class RuleProcessor(object):
     logger = logging.getLogger('sentry.rules')
 
-    def __init__(self, event, is_new, is_regression, is_new_group_environment):
+    def __init__(self, event, is_new, is_regression, is_new_group_environment, has_reappeared):
         self.event = EventCompatibilityProxy(event)
         self.group = event.group
         self.project = event.project
@@ -45,6 +45,7 @@ class RuleProcessor(object):
         self.is_new = is_new
         self.is_regression = is_regression
         self.is_new_group_environment = is_new_group_environment
+        self.has_reappeared = has_reappeared
 
         self.grouped_futures = {}
 
@@ -76,6 +77,7 @@ class RuleProcessor(object):
             is_new=self.is_new,
             is_regression=self.is_regression,
             is_new_group_environment=self.is_new_group_environment,
+            has_reappeared=self.has_reappeared,
         )
 
     def apply_rule(self, rule):
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 308f1907fd..0c8c24fad6 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -107,9 +107,9 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
     _capture_stats(event, is_new)
 
     # we process snoozes before rules as it might create a regression
-    process_snoozes(event.group)
+    has_reappeared = process_snoozes(event.group)
 
-    rp = RuleProcessor(event, is_new, is_regression, is_new_group_environment)
+    rp = RuleProcessor(event, is_new, is_regression, is_new_group_environment, has_reappeared)
     has_alert = False
     # TODO(dcramer): ideally this would fanout, but serializing giant
     # objects back and forth isn't super efficient
@@ -152,6 +152,10 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
 
 
 def process_snoozes(group):
+    """
+    Return True if the group is transitioning from "resolved" to "unresolved",
+    otherwise return False.
+    """
     from sentry.models import GroupSnooze, GroupStatus
 
     try:
@@ -159,11 +163,14 @@ def process_snoozes(group):
             group=group,
         )
     except GroupSnooze.DoesNotExist:
-        return
+        return False
 
     if not snooze.is_valid(group, test_rates=True):
         snooze.delete()
         group.update(status=GroupStatus.UNRESOLVED)
+        return True
+
+    return False
 
 
 @instrumented_task(
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index a0f0adc1a7..3b80fb435d 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -555,6 +555,7 @@ class RuleTestCase(TestCase):
         kwargs.setdefault('is_new', True)
         kwargs.setdefault('is_regression', True)
         kwargs.setdefault('is_new_group_environment', True)
+        kwargs.setdefault('has_reappeared', True)
         return EventState(**kwargs)
 
     def assertPasses(self, rule, event=None, **kwargs):
diff --git a/tests/sentry/api/endpoints/test_project_rules_configuration.py b/tests/sentry/api/endpoints/test_project_rules_configuration.py
index c2b3973903..e9477979bc 100644
--- a/tests/sentry/api/endpoints/test_project_rules_configuration.py
+++ b/tests/sentry/api/endpoints/test_project_rules_configuration.py
@@ -24,4 +24,4 @@ class ProjectRuleConfigurationTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data['actions']) == 3
-        assert len(response.data['conditions']) == 8
+        assert len(response.data['conditions']) == 9
diff --git a/tests/sentry/rules/conditions/test_reappeared_event.py b/tests/sentry/rules/conditions/test_reappeared_event.py
new file mode 100644
index 0000000000..1f3295082a
--- /dev/null
+++ b/tests/sentry/rules/conditions/test_reappeared_event.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.conditions.reappeared_event import ReappearedEventCondition
+
+
+class ReappearedEventConditionTest(RuleTestCase):
+    rule_cls = ReappearedEventCondition
+
+    def test_applies_correctly(self):
+        rule = self.get_rule()
+
+        self.assertPasses(rule, self.event, has_reappeared=True)
+
+        self.assertDoesNotPass(rule, self.event, has_reappeared=False)
diff --git a/tests/sentry/rules/test_processor.py b/tests/sentry/rules/test_processor.py
index c43d18d33d..5a281590e1 100644
--- a/tests/sentry/rules/test_processor.py
+++ b/tests/sentry/rules/test_processor.py
@@ -32,7 +32,12 @@ class RuleProcessorTest(TestCase):
             }
         )
 
-        rp = RuleProcessor(event, is_new=True, is_regression=True, is_new_group_environment=True)
+        rp = RuleProcessor(
+            event,
+            is_new=True,
+            is_regression=True,
+            is_new_group_environment=True,
+            has_reappeared=True)
         results = list(rp.apply())
         assert len(results) == 1
         callback, futures = results[0]
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 03fc83083a..c82e1357f3 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -34,7 +34,7 @@ class PostProcessGroupTest(TestCase):
             is_new_group_environment=True,
         )
 
-        mock_processor.assert_called_once_with(event, True, False, True)
+        mock_processor.assert_called_once_with(event, True, False, True, False)
         mock_processor.return_value.apply.assert_called_once_with()
 
         mock_callback.assert_called_once_with(event, mock_futures)
@@ -69,7 +69,8 @@ class PostProcessGroupTest(TestCase):
         assert event.group == group2
         assert event.group_id == group2.id
 
-    def test_invalidates_snooze(self):
+    @patch('sentry.rules.processor.RuleProcessor')
+    def test_invalidates_snooze(self, mock_processor):
         group = self.create_group(
             project=self.project, status=GroupStatus.IGNORED)
         event = self.create_event(group=group)
@@ -86,6 +87,8 @@ class PostProcessGroupTest(TestCase):
             is_new_group_environment=True,
         )
 
+        mock_processor.assert_called_with(event, True, False, True, True)
+
         assert not GroupSnooze.objects.filter(
             id=snooze.id,
         ).exists()
@@ -93,7 +96,8 @@ class PostProcessGroupTest(TestCase):
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.UNRESOLVED
 
-    def test_maintains_valid_snooze(self):
+    @patch('sentry.rules.processor.RuleProcessor')
+    def test_maintains_valid_snooze(self, mock_processor):
         group = self.create_group(project=self.project)
         event = self.create_event(group=group)
         snooze = GroupSnooze.objects.create(
@@ -109,6 +113,8 @@ class PostProcessGroupTest(TestCase):
             is_new_group_environment=True,
         )
 
+        mock_processor.assert_called_with(event, True, False, True, False)
+
         assert GroupSnooze.objects.filter(
             id=snooze.id,
         ).exists()
