commit 6f9b5f94b8ad4f5c00a3fc9608ccf24f2fcb0865
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 17 00:19:34 2015 -0700

    Remove breadcrumbs components

diff --git a/src/sentry/static/sentry/app/components/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/breadcrumbs.jsx
deleted file mode 100644
index 37fa64337c..0000000000
--- a/src/sentry/static/sentry/app/components/breadcrumbs.jsx
+++ /dev/null
@@ -1,45 +0,0 @@
-var React = require("react");
-var Reflux = require("reflux");
-
-var BreadcrumbStore = require('../stores/breadcrumbStore');
-
-var Breadcrumbs = React.createClass({
-  mixins: [
-    Reflux.listenTo(BreadcrumbStore, "onBreadcrumbChange", "onBreadcrumbChange")
-  ],
-
-  contextTypes: {
-    router: React.PropTypes.func.isRequired
-  },
-
-  getInitialState() {
-    return {
-      nodes: BreadcrumbStore.getNodes()
-    };
-  },
-
-  onBreadcrumbChange() {
-    this.setState({
-      nodes: BreadcrumbStore.getNodes()
-    });
-  },
-
-  render() {
-    var children = this.state.nodes.map((node, _) => {
-      return (
-        <li key={'bc-' + _}>
-          {node}
-        </li>
-      );
-    });
-
-    return (
-      <ul className="breadcrumb">
-        {children}
-      </ul>
-    );
-  }
-});
-
-
-module.exports = Breadcrumbs;
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index d29318de14..83f7be3fda 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -28,8 +28,6 @@ var GroupList = React.createClass({
     Reflux.listenTo(GroupStore, "onGroupChange"),
   ],
 
-  crumbReservations: 1,
-
   getDefaultProps() {
     return {
       canSelectGroups: true
diff --git a/src/sentry/static/sentry/app/components/header.jsx b/src/sentry/static/sentry/app/components/header.jsx
index cac4962bc0..dbd88f3a87 100644
--- a/src/sentry/static/sentry/app/components/header.jsx
+++ b/src/sentry/static/sentry/app/components/header.jsx
@@ -1,7 +1,6 @@
 var React = require("react");
 
 var AppState = require("../mixins/appState");
-var Breadcrumbs = require("./breadcrumbs");
 var ConfigStore = require("../stores/configStore");
 var DropdownLink = require("./dropdownLink");
 var Gravatar = require("./gravatar");
diff --git a/src/sentry/static/sentry/app/components/organizationHeader.jsx b/src/sentry/static/sentry/app/components/organizationHeader.jsx
index 224ae8accf..92c1c6a0d8 100644
--- a/src/sentry/static/sentry/app/components/organizationHeader.jsx
+++ b/src/sentry/static/sentry/app/components/organizationHeader.jsx
@@ -1,19 +1,27 @@
 var React = require("react");
 
-var Breadcrumbs = require("./breadcrumbs");
+var OrganizationState = require("../mixins/organizationState");
 
 var OrganizationHeader = React.createClass({
+  mixins: [OrganizationState],
+
   shouldComponentUpdate(nextProps, nextState) {
     return false;
   },
 
   render() {
+    var org = this.getOrganization();
     return (
-      <div>
-        <div className="sub-header">
-          <div className="container">
-            <Breadcrumbs />
-          </div>
+      <div className="sub-header">
+        <div className="container">
+          <ul className="breadcrumb">
+            <li>
+              <Router.Link to="organizationDetails"
+                           params={{orgId: org.slug}}>
+                {org.name}
+              </Router.Link>
+            </li>
+          </ul>
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/projectHeader.jsx b/src/sentry/static/sentry/app/components/projectHeader.jsx
index de36fa87dd..8b656c93e9 100644
--- a/src/sentry/static/sentry/app/components/projectHeader.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader.jsx
@@ -2,18 +2,103 @@ var React = require("react");
 var Router = require("react-router");
 
 var AppState = require("../mixins/appState");
-var Breadcrumbs = require("./breadcrumbs");
 var ConfigStore = require("../stores/configStore");
+var DropdownLink = require("../components/dropdownLink");
+var MenuItem = require("../components/menuItem");
+
+var ProjectSelector = React.createClass({
+  childContextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getChildContext() {
+    return {
+      router: this.props.router
+    };
+  },
+
+  getInitialState() {
+    return {
+      filter: ''
+    };
+  },
+
+  onFilterChange(e) {
+    this.setState({
+      filter: e.target.value
+    });
+  },
+
+  getProjectNode(team, project) {
+    var org = this.props.organization;
+    var projectRouteParams = {
+      orgId: org.slug,
+      projectId: project.slug
+    };
+    return (
+      <MenuItem key={project.slug} to="projectDetails"
+                params={projectRouteParams}>
+        {project.name}
+      </MenuItem>
+    );
+  },
+
+  onOpen(event) {
+    $(this.refs.filter.getDOMNode()).focus();
+  },
+
+  onClose(event) {
+    this.setState({
+      filter: ''
+    });
+    $(this.refs.filter.getDOMNode()).val('');
+  },
 
-var DateRangePicker = React.createClass({
   render() {
+    var projectId = this.props.projectId;
+    var org = this.props.organization;
+    var urlPrefix = ConfigStore.get('urlPrefix');
+    var children = [];
+    var activeTeam;
+    var activeProject;
+    org.teams.forEach((team) => {
+      if (!team.isMember) {
+        return;
+      }
+      var hasTeam = false;
+      team.projects.forEach((project) => {
+        if (project.slug == this.props.projectId) {
+          activeTeam = team;
+          activeProject = project;
+        }
+        var fullName = team.name + ' ' + project.name + ' ' + team.slug + ' ' + project.slug;
+        if (this.state.filter && fullName.indexOf(this.state.filter) === -1) {
+          return;
+        }
+        if (!hasTeam) {
+          children.push(<li className="team-name" key={'_team' + team.slug}>{team.name}</li>);
+          hasTeam = true;
+        }
+        children.push(this.getProjectNode(team, project));
+      });
+    });
+    var title = <span>{activeTeam.name} / {activeProject.name}</span>;
+
     return (
-      <div className="dropdown anchor-right range-picker">
-        <a href="#" className="dropdown-toggle">
-          Last 7 days
-          <span className="icon-arrow-down"></span>
-        </a>
-      </div>
+      <DropdownLink title={title} topLevelClasses="project-dropdown"
+          onOpen={this.onOpen} onClose={this.onClose}>
+        <li className="project-filter" key="_filter">
+          <input type="text" placeholder="Filter projects"
+                 onKeyUp={this.onFilterChange} ref="filter" />
+        </li>
+        {children}
+        <li className="new-project" key="_new-project">
+          <a className="btn btn-primary"
+             href={urlPrefix + '/organizations/' + org.slug + '/projects/new/'}>
+            <span className="icon-plus" /> Create Project
+          </a>
+        </li>
+      </DropdownLink>
     );
   }
 });
@@ -28,6 +113,8 @@ var ProjectHeader = React.createClass({
     var navSection = this.props.activeSection;
     var urlPrefix = ConfigStore.get('urlPrefix');
     var user = ConfigStore.get('user');
+    var project = this.props.project;
+    var org = this.props.organization;
 
     return (
       <div>
@@ -57,7 +144,19 @@ var ProjectHeader = React.createClass({
                 </li>
               </ul>
             </div>
-            <Breadcrumbs />
+            <ul className="breadcrumb">
+              <li>
+                <Router.Link to="organizationDetails" params={{orgId: org.slug}}>
+                  {org.name}
+                </Router.Link>
+              </li>
+              <li>
+                <ProjectSelector
+                    organization={org}
+                    projectId={project.slug}
+                    router={this.context.router} />
+              </li>
+            </ul>
            </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 1abd23f5c3..6e1b631910 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -53,7 +53,6 @@ module.exports = {
     routes: require("./routes"),
 
     Alerts: require("./components/alerts"),
-    Breadcrumbs: require("./components/breadcrumbs"),
     ConfigStore: require("./stores/configStore"),
     FlotChart: require("./components/flotChart"),
     HookStore: require("./stores/hookStore"),
diff --git a/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx b/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
deleted file mode 100644
index 48a4af5047..0000000000
--- a/src/sentry/static/sentry/app/mixins/breadcrumbMixin.jsx
+++ /dev/null
@@ -1,69 +0,0 @@
-var BreadcrumbStore = require("../stores/breadcrumbStore");
-
-var React = require("react");
-
-module.exports = {
-  /*
-   * A mixin which should be used by components which want to append to the
-   * breadcrumbs on a page.
-   *
-   * {
-   *   mixins: [BreadcrumbMixin],
-   *   // the number of crumbs you will manage
-   *   crumbReservations: 1,
-   *   // set the crumbs synchronously on mount, or async
-   *   componentWillMount() {
-   *     this.setBreadcrumbs([
-   *       {name: data.name, to: 'teamDetails', params: {}}
-   *     ]);
-   *   }
-   * }
-   */
-
-  contextTypes: {
-    router: React.PropTypes.func.isRequired
-  },
-
-  goToRoute(node) {
-    if (!node.to) return;
-    return this.context.router.transitionTo(node.to, node.params, node.query);
-  },
-
-  breadcrumbFromNode(node) {
-    if (node.name === undefined) return node;
-    if (typeof node.params === 'undefined') {
-      node.params = this.context.router.getCurrentParams();
-    }
-
-    return (
-      <a onClick={this.goToRoute.bind(this, node)}>
-        {node.name}
-      </a>
-    );
-  },
-
-  componentWillMount() {
-    this.crumbs = [];
-    for (var i = 0; i < (this.crumbReservations || 0); i++) {
-      this.crumbs.push(BreadcrumbStore.reserve());
-    }
-  },
-
-  componentWillUnmount() {
-    this.crumbs.forEach((idx) => {
-      BreadcrumbStore.pop(idx);
-    });
-  },
-
-  setBreadcrumbs(nodes) {
-    if (this.crumbs.length !== nodes.length) {
-      throw new Error('You must reserve crumbs before setting them.');
-    }
-    nodes.forEach((node, nodeIdx) => {
-      BreadcrumbStore.update(
-        this.crumbs[nodeIdx],
-        this.breadcrumbFromNode(node)
-      );
-    });
-  }
-};
diff --git a/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx b/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx
deleted file mode 100644
index f911820272..0000000000
--- a/src/sentry/static/sentry/app/stores/breadcrumbStore.jsx
+++ /dev/null
@@ -1,54 +0,0 @@
-
-var Reflux = require("reflux");
-
-var BreadcrumbStore = Reflux.createStore({
-  init() {
-    this.RESERVATION = -1;
-    this.counter = 0;
-    this.nodes = [];
-  },
-
-  push(node) {
-    // Create a unique ID for this node, append it to the list
-    // and return the ID.
-    this.counter += 1;
-    this.nodes.push([this.counter, node]);
-    this.trigger();
-    return this.counter;
-  },
-
-  pop(idx) {
-    this.nodes = this.nodes.filter((node) => {
-      return node[0] !== idx;
-    });
-    this.trigger();
-  },
-
-  update(idx, node) {
-    for (var i = 0; i < this.nodes.length; i++) {
-      if (this.nodes[i][0] === idx) {
-        this.nodes[i][1] = node;
-        this.trigger();
-        return true;
-      }
-    }
-    return false;
-  },
-
-  reserve() {
-    return this.push(this.RESERVATION);
-  },
-
-  getNodes() {
-    var nodes = [];
-    for (var i = 0; i < this.nodes.length; i++) {
-      if (this.nodes[i][1] == this.RESERVATION) {
-        break;
-      }
-      nodes.push(this.nodes[i][1]);
-    }
-    return nodes;
-  }
-});
-
-module.exports = BreadcrumbStore;
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 1475ff3629..215fbda8f1 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -3,7 +3,6 @@ var Reflux = require("reflux");
 var Router = require("react-router");
 
 var api = require("../api");
-var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var DocumentTitle = require("react-document-title");
 var GroupHeader = require("./groupDetails/header");
 var GroupStore = require("../stores/groupStore");
@@ -18,7 +17,6 @@ var GroupDetails = React.createClass({
   },
 
   mixins: [
-    BreadcrumbMixin,
     Reflux.listenTo(GroupStore, "onGroupChange")
   ],
 
@@ -27,8 +25,6 @@ var GroupDetails = React.createClass({
     setProjectNavSection: React.PropTypes.func.isRequired
   },
 
-  crumbReservations: 1,
-
   childContextTypes: {
     group: PropTypes.Group,
   },
@@ -64,10 +60,6 @@ var GroupDetails = React.createClass({
           loading: false
         });
 
-        this.setBreadcrumbs([
-          {name: data.title, to: 'groupDetails'}
-        ]);
-
         GroupStore.loadInitialData([data]);
       }, error: () => {
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 85cd842120..6183228ae7 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -2,7 +2,6 @@ var React = require("react");
 var Router = require("react-router");
 
 var api = require("../api");
-var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var DocumentTitle = require("react-document-title");
 var Footer = require("../components/footer");
 var Header = require("../components/header");
@@ -15,12 +14,9 @@ var TeamStore = require("../stores/teamStore");
 
 var OrganizationDetails = React.createClass({
   mixins: [
-    BreadcrumbMixin,
     RouteMixin
   ],
 
-  crumbReservations: 1,
-
   childContextTypes: {
     organization: PropTypes.Organization
   },
@@ -73,10 +69,6 @@ var OrganizationDetails = React.createClass({
         });
 
         TeamStore.loadInitialData(data.teams);
-
-        this.setBreadcrumbs([
-          {name: data.name, to: 'organizationDetails'}
-        ]);
       },
       error: () => {
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/organizationMembers.jsx b/src/sentry/static/sentry/app/views/organizationMembers.jsx
index 84a96ed9fb..d8399e3f8a 100644
--- a/src/sentry/static/sentry/app/views/organizationMembers.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMembers.jsx
@@ -2,7 +2,6 @@ var React = require("react");
 var Router = require("react-router");
 
 var api = require("../api");
-var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var Gravatar = require("../components/gravatar");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
@@ -12,13 +11,10 @@ var RouteMixin = require("../mixins/routeMixin");
 
 var OrganizationMembers = React.createClass({
   mixins: [
-    BreadcrumbMixin,
     OrganizationState,
     RouteMixin
   ],
 
-  crumbReservations: 1,
-
   contextTypes: {
     router: React.PropTypes.func
   },
@@ -43,10 +39,6 @@ var OrganizationMembers = React.createClass({
   },
 
   fetchData() {
-    this.setBreadcrumbs([
-      {name: 'Members', to: 'organizationMembers'}
-    ]);
-
     this.setState({
       loading: true,
       error: false
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index ad8e0e7be1..b0c48e8ba3 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -3,12 +3,9 @@ var Reflux = require("reflux");
 var Router = require("react-router");
 
 var api = require("../api");
-var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var ConfigStore = require("../stores/configStore");
-var DropdownLink = require("../components/dropdownLink");
 var DocumentTitle = require("react-document-title");
 var MemberListStore = require("../stores/memberListStore");
-var MenuItem = require("../components/menuItem");
 var {modelsEqual} = require("../utils");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
@@ -17,113 +14,13 @@ var OrganizationState = require("../mixins/organizationState");
 var RouteMixin = require("../mixins/routeMixin");
 var PropTypes = require("../proptypes");
 
-var ProjectSelector = React.createClass({
-  childContextTypes: {
-    router: React.PropTypes.func
-  },
-
-  getChildContext() {
-    return {
-      router: this.props.router
-    };
-  },
-
-  getInitialState() {
-    return {
-      filter: ''
-    };
-  },
-
-  onFilterChange(e) {
-    this.setState({
-      filter: e.target.value
-    });
-  },
-
-  getProjectNode(team, project) {
-    var org = this.props.organization;
-    var projectRouteParams = {
-      orgId: org.slug,
-      projectId: project.slug
-    };
-    return (
-      <MenuItem key={project.slug} to="projectDetails"
-                params={projectRouteParams}>
-        {project.name}
-      </MenuItem>
-    );
-  },
-
-  onOpen(event) {
-    $(this.refs.filter.getDOMNode()).focus();
-  },
-
-  onClose(event) {
-    this.setState({
-      filter: ''
-    });
-    $(this.refs.filter.getDOMNode()).val('');
-  },
-
-  render() {
-    var projectId = this.props.projectId;
-    var org = this.props.organization;
-    var urlPrefix = ConfigStore.get('urlPrefix');
-    var children = [];
-    var activeTeam;
-    var activeProject;
-    org.teams.forEach((team) => {
-      if (!team.isMember) {
-        return;
-      }
-      var hasTeam = false;
-      team.projects.forEach((project) => {
-        if (project.slug == this.props.projectId) {
-          activeTeam = team;
-          activeProject = project;
-        }
-        var fullName = team.name + ' ' + project.name + ' ' + team.slug + ' ' + project.slug;
-        if (this.state.filter && fullName.indexOf(this.state.filter) === -1) {
-          return;
-        }
-        if (!hasTeam) {
-          children.push(<li className="team-name" key={'_team' + team.slug}>{team.name}</li>);
-          hasTeam = true;
-        }
-        children.push(this.getProjectNode(team, project));
-      });
-    });
-    var title = <span>{activeTeam.name} / {activeProject.name}</span>;
-
-    return (
-      <DropdownLink title={title} topLevelClasses="project-dropdown"
-          onOpen={this.onOpen} onClose={this.onClose}>
-        <li className="project-filter" key="_filter">
-          <input type="text" placeholder="Filter projects"
-                 onKeyUp={this.onFilterChange} ref="filter" />
-        </li>
-        {children}
-        <li className="new-project" key="_new-project">
-          <a className="btn btn-primary"
-             href={urlPrefix + '/organizations/' + org.slug + '/projects/new/'}>
-            <span className="icon-plus" /> Create Project
-          </a>
-        </li>
-      </DropdownLink>
-    );
-  }
-});
-
 var ProjectDetails = React.createClass({
   mixins: [
-    BreadcrumbMixin,
     Reflux.connect(MemberListStore, "memberList"),
     OrganizationState,
     RouteMixin
   ],
 
-  crumbReservations: 1,
-
   childContextTypes: {
     project: PropTypes.Project,
     team: PropTypes.Team
@@ -155,15 +52,6 @@ var ProjectDetails = React.createClass({
     this.fetchData();
   },
 
-  componentDidUpdate(prevProps, prevState) {
-    var project = this.state.project;
-    var org = this.getOrganization();
-    this.setBreadcrumbs([
-      <ProjectSelector organization={org} projectId={this.state.project.slug}
-                       router={this.context.router} />
-    ]);
-  },
-
   routeDidChange(nextPath, nextParams) {
     var router = this.context.router;
     var params = router.getCurrentParams();
@@ -249,7 +137,10 @@ var ProjectDetails = React.createClass({
     return (
       <DocumentTitle title={this.getTitle()}>
         <div>
-          <ProjectHeader activeSection={this.state.projectNavSection} />
+          <ProjectHeader
+            activeSection={this.state.projectNavSection}
+            project={this.state.project}
+            organization={this.getOrganization()} />
           <div className="container">
             <div className="content">
               <Router.RouteHandler
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index f4629ef36f..f41f8468cb 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -3,7 +3,6 @@ var Reflux = require("reflux");
 var Router = require("react-router");
 
 var api = require("../api");
-var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var LoadingIndicator = require("../components/loadingIndicator");
 var OrganizationHeader = require("../components/organizationHeader");
 var OrganizationState = require("../mixins/organizationState");
@@ -12,13 +11,10 @@ var RouteMixin = require("../mixins/routeMixin");
 
 var TeamDetails = React.createClass({
   mixins: [
-    BreadcrumbMixin,
     OrganizationState,
     RouteMixin
   ],
 
-  crumbReservations: 1,
-
   childContextTypes: {
     team: PropTypes.Team
   },
