commit 3c0f20b2b5ba3d59bd51149ad16fa94bc5d66ef1
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Feb 14 16:32:34 2019 -0800

    feat(deletions): Created a mixin to handle renaming pending deletions. (#11894)
    
    * Created mixin to handle renaming pending deletions
    
    * changed class to class name. added logging statements
    
    * Added feature to organization repo details.
    
    * added to the original name rather than completely replace the name
    
    * Corrected the does not exist in delete_pending_deletion_option. removed logging on does not exist due to the prevelance of that coming up.
    
    * Added back uuid.hex for the fields that are changed and for repo in particular changed the serializer to show repo.config[pending-delete-name] in the ui for users.
    
    * Added frozenset instead of list to field names to change.
    
    * Revised tests
    
    * ensured only the fields needed will be saved.
    
    * Added changes
    
    * Added tests to organization options value.

diff --git a/src/sentry/api/endpoints/organization_repository_details.py b/src/sentry/api/endpoints/organization_repository_details.py
index dc3196e88f..869486369f 100644
--- a/src/sentry/api/endpoints/organization_repository_details.py
+++ b/src/sentry/api/endpoints/organization_repository_details.py
@@ -73,7 +73,11 @@ class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
             update_kwargs['provider'] = 'integrations:%s' % (integration.provider,)
 
         if update_kwargs:
+            old_status = repo.status
             repo.update(**update_kwargs)
+            if old_status == ObjectStatus.PENDING_DELETION and repo.status == ObjectStatus.VISIBLE:
+                repo.reset_pending_deletion_field_names()
+                repo.delete_pending_deletion_option()
 
         return Response(serialize(repo, request.user))
 
@@ -105,6 +109,8 @@ class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
 
             countdown = 3600 if has_commits else 0
 
+            repo.rename_on_pending_deletion()
+
             delete_repository.apply_async(
                 kwargs={
                     'object_id': repo.id,
diff --git a/src/sentry/api/serializers/models/repository.py b/src/sentry/api/serializers/models/repository.py
index 1d50262a9f..99dc5cd5b3 100644
--- a/src/sentry/api/serializers/models/repository.py
+++ b/src/sentry/api/serializers/models/repository.py
@@ -25,13 +25,14 @@ class RepositorySerializer(Serializer):
                 'id': 'unknown',
                 'name': 'Unknown Provider',
             }
+
         return {
             'id': six.text_type(obj.id),
-            'name': obj.name,
+            'name': obj.config.get('pending_deletion_name', obj.name),
             'url': obj.url,
             'provider': provider,
             'status': obj.get_status_display(),
             'dateCreated': obj.date_added,
             'integrationId': integration_id,
-            'externalSlug': external_slug
+            'externalSlug': external_slug,
         }
diff --git a/src/sentry/db/mixin.py b/src/sentry/db/mixin.py
new file mode 100644
index 0000000000..e7d345150c
--- /dev/null
+++ b/src/sentry/db/mixin.py
@@ -0,0 +1,97 @@
+from __future__ import absolute_import
+
+import logging
+import six
+
+from uuid import uuid4
+
+from sentry.models import OrganizationOption
+
+logger = logging.getLogger('sentry.deletions')
+
+
+def delete_pending_deletion_option(instance, **kwargs):
+    if hasattr(instance, 'delete_pending_deletion_option'):
+        instance.delete_pending_deletion_option()
+
+
+class PendingDeletionMixin(object):
+    _rename_fields_on_pending_delete = frozenset()
+
+    def build_pending_deletion_key(self):
+        return 'pending-delete:%s:%s' % (self.__class__.__name__, self.id)
+
+    def rename_on_pending_deletion(self, fields=None):
+        fields = fields or self._rename_fields_on_pending_delete
+        original_data = {}
+
+        for field in fields:
+            original_data[field] = getattr(self, field)
+            setattr(self, field, uuid4().hex)
+
+        self.save()
+        original_data['id'] = self.id
+        original_data['model'] = self.__class__.__name__
+        OrganizationOption.objects.create(
+            organization_id=self.organization_id,
+            key=self.build_pending_deletion_key(),
+            value=original_data,
+        )
+        logger.info(
+            'rename-on-pending-deletion',
+            extra={
+                'organization_id': self.organization_id,
+                'model': original_data['model'],
+                'id': original_data['id'],
+            }
+        )
+
+    def get_pending_deletion_option(self):
+        return OrganizationOption.objects.get(
+            organization_id=self.organization_id,
+            key=self.build_pending_deletion_key(),
+        )
+
+    def reset_pending_deletion_field_names(self):
+        try:
+            option = self.get_pending_deletion_option()
+        except OrganizationOption.DoesNotExist:
+            logger.info(
+                'reset-on-pending-deletion.does-not-exist',
+                extra={
+                    'organization_id': self.organization_id,
+                    'model': self.__class__.__name__,
+                    'id': self.id,
+                }
+            )
+            return False
+
+        for field_name, field_value in six.iteritems(option.value):
+            if field_name in ('id', 'model'):
+                continue
+            setattr(self, field_name, field_value)
+        self.save()
+        logger.info(
+            'reset-on-pending-deletion.success',
+            extra={
+                'organization_id': self.organization_id,
+                'model': self.__class__.__name__,
+                'id': self.id,
+            }
+        )
+        return True
+
+    def delete_pending_deletion_option(self):
+        try:
+            option = self.get_pending_deletion_option()
+        except OrganizationOption.DoesNotExist:
+            return
+        option.delete()
+        logger.info(
+            'delete-pending-deletion-option.success',
+            extra={
+                'organization_id': self.organization_id,
+                'model': self.__class__.__name__,
+                'id': self.id,
+            }
+        )
diff --git a/src/sentry/models/repository.py b/src/sentry/models/repository.py
index 3fd1bb8c9d..df2d08a2be 100644
--- a/src/sentry/models/repository.py
+++ b/src/sentry/models/repository.py
@@ -1,15 +1,17 @@
 from __future__ import absolute_import, print_function
 
 from django.db import models
+from django.db.models.signals import pre_delete
 from django.utils import timezone
 from jsonfield import JSONField
 
 from sentry.constants import ObjectStatus
 from sentry.db.models import (BoundedPositiveIntegerField, Model, sane_repr)
+from sentry.db.mixin import PendingDeletionMixin, delete_pending_deletion_option
 from sentry.signals import pending_delete
 
 
-class Repository(Model):
+class Repository(Model, PendingDeletionMixin):
     __core__ = True
 
     organization_id = BoundedPositiveIntegerField(db_index=True)
@@ -35,6 +37,8 @@ class Repository(Model):
 
     __repr__ = sane_repr('organization_id', 'name', 'provider')
 
+    _rename_fields_on_pending_delete = frozenset(['name', 'external_id'])
+
     def has_integration_provider(self):
         return self.provider and self.provider.startswith('integrations:')
 
@@ -63,6 +67,17 @@ class Repository(Model):
             html_template='sentry/emails/unable-to-delete-repo.html',
         )
 
+    def rename_on_pending_deletion(self, fields=None):
+        # Due to the fact that Repository is shown to the user
+        # as it is pending deletion, this is added to display the fields
+        # correctly to the user.
+        self.config['pending_deletion_name'] = self.name
+        super(Repository, self).rename_on_pending_deletion(fields)
+
+    def reset_pending_deletion_field_names(self):
+        del self.config['pending_deletion_name']
+        super(Repository, self).reset_pending_deletion_field_names()
+
 
 def on_delete(instance, actor=None, **kwargs):
     # If there is no provider, we don't have any webhooks, etc to delete
@@ -97,3 +112,4 @@ def on_delete(instance, actor=None, **kwargs):
 
 
 pending_delete.connect(on_delete, sender=Repository, weak=False)
+pre_delete.connect(delete_pending_deletion_option, sender=Repository, weak=False)
diff --git a/tests/sentry/api/endpoints/test_organization_repository_details.py b/tests/sentry/api/endpoints/test_organization_repository_details.py
index 6cb805f16d..ccf4fdf27a 100644
--- a/tests/sentry/api/endpoints/test_organization_repository_details.py
+++ b/tests/sentry/api/endpoints/test_organization_repository_details.py
@@ -5,11 +5,39 @@ from mock import patch
 from django.core.urlresolvers import reverse
 
 from sentry.constants import ObjectStatus
-from sentry.models import Commit, Integration, Repository
+from sentry.models import Commit, Integration, OrganizationOption, Repository
 from sentry.testutils import APITestCase
 
 
 class OrganizationRepositoryDeleteTest(APITestCase):
+    def setUp(self):
+        super(OrganizationRepositoryDeleteTest, self).setUp()
+
+        class mock_uuid(object):
+            hex = '1234567'
+
+        self.mock_uuid = mock_uuid
+
+    def assert_rename_pending_delete(self, response, repo, external_id=None):
+        assert response.data['status'] == u'pending_deletion'
+        assert response.data['name'] == 'example'  # name displayed matches what the user expects
+
+        assert repo.status == ObjectStatus.PENDING_DELETION
+        assert repo.name == '1234567'
+        assert repo.external_id == '1234567'
+        assert repo.config['pending_deletion_name'] == 'example'
+
+        option = OrganizationOption.objects.get(
+            organization_id=repo.organization_id,
+            key=repo.build_pending_deletion_key()
+        )
+        assert option.value == {
+            'id': repo.id,
+            'model': Repository.__name__,
+            'name': 'example',
+            'external_id': external_id,
+        }
+
     @patch('sentry.api.endpoints.organization_repository_details.get_transaction_id')
     @patch('sentry.api.endpoints.organization_repository_details.delete_repository')
     def test_delete_no_commits(self, mock_delete_repository, mock_get_transaction_id):
@@ -29,7 +57,8 @@ class OrganizationRepositoryDeleteTest(APITestCase):
                 repo.id,
             ]
         )
-        response = self.client.delete(url)
+        with patch('sentry.db.mixin.uuid4', new=self.mock_uuid):
+            response = self.client.delete(url)
         assert response.status_code == 202, (response.status_code, response.content)
 
         repo = Repository.objects.get(id=repo.id)
@@ -43,6 +72,7 @@ class OrganizationRepositoryDeleteTest(APITestCase):
             },
             countdown=0,
         )
+        self.assert_rename_pending_delete(response, repo)
 
     @patch('sentry.api.endpoints.organization_repository_details.get_transaction_id')
     @patch('sentry.api.endpoints.organization_repository_details.delete_repository')
@@ -54,6 +84,7 @@ class OrganizationRepositoryDeleteTest(APITestCase):
         repo = Repository.objects.create(
             name='example',
             organization_id=org.id,
+            external_id='abc123',
         )
         Commit.objects.create(
             repository_id=repo.id,
@@ -67,7 +98,9 @@ class OrganizationRepositoryDeleteTest(APITestCase):
                 repo.id,
             ]
         )
-        response = self.client.delete(url)
+
+        with patch('sentry.db.mixin.uuid4', new=self.mock_uuid):
+            response = self.client.delete(url)
 
         assert response.status_code == 202, (response.status_code, response.content)
 
@@ -81,6 +114,7 @@ class OrganizationRepositoryDeleteTest(APITestCase):
             },
             countdown=3600,
         )
+        self.assert_rename_pending_delete(response, repo, 'abc123')
 
     @patch('sentry.api.endpoints.organization_repository_details.get_transaction_id')
     @patch('sentry.api.endpoints.organization_repository_details.delete_repository')
@@ -92,6 +126,7 @@ class OrganizationRepositoryDeleteTest(APITestCase):
         org = self.create_organization(owner=self.user, name='baz')
         repo = Repository.objects.create(
             name='example',
+            external_id='abc12345',
             organization_id=org.id,
             status=ObjectStatus.DISABLED,
         )
@@ -102,7 +137,9 @@ class OrganizationRepositoryDeleteTest(APITestCase):
                 repo.id,
             ]
         )
-        response = self.client.delete(url)
+
+        with patch('sentry.db.mixin.uuid4', new=self.mock_uuid):
+            response = self.client.delete(url)
         assert response.status_code == 202, (response.status_code, response.content)
 
         repo = Repository.objects.get(id=repo.id)
@@ -117,6 +154,8 @@ class OrganizationRepositoryDeleteTest(APITestCase):
             countdown=0,
         )
 
+        self.assert_rename_pending_delete(response, repo, 'abc12345')
+
     @patch('sentry.api.endpoints.organization_repository_details.get_transaction_id')
     @patch('sentry.api.endpoints.organization_repository_details.delete_repository')
     def test_delete_disabled_with_commits(self, mock_delete_repository, mock_get_transaction_id):
@@ -141,12 +180,15 @@ class OrganizationRepositoryDeleteTest(APITestCase):
                 repo.id,
             ]
         )
-        response = self.client.delete(url)
+
+        with patch('sentry.db.mixin.uuid4', new=self.mock_uuid):
+            response = self.client.delete(url)
 
         assert response.status_code == 202, (response.status_code, response.content)
 
         repo = Repository.objects.get(id=repo.id)
         assert repo.status == ObjectStatus.PENDING_DELETION
+
         mock_delete_repository.apply_async.assert_called_with(
             kwargs={
                 'object_id': repo.id,
@@ -155,6 +197,7 @@ class OrganizationRepositoryDeleteTest(APITestCase):
             },
             countdown=3600,
         )
+        self.assert_rename_pending_delete(response, repo)
 
     def test_put(self):
         self.login_as(user=self.user)
@@ -188,7 +231,61 @@ class OrganizationRepositoryDeleteTest(APITestCase):
         repo = Repository.objects.get(id=repo.id)
         assert repo.status == ObjectStatus.VISIBLE
         assert repo.integration_id == integration.id
+
+    def test_put_cancel_deletion(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        integration = Integration.objects.create(
+            provider='example',
+            name='example',
+        )
+        integration.add_organization(org)
+
+        repo = Repository.objects.create(
+            name='uuid-name',
+            external_id='uuid-external-id',
+            organization_id=org.id,
+            status=ObjectStatus.PENDING_DELETION,
+            config={'pending_deletion_name': 'example-name'},
+        )
+
+        OrganizationOption.objects.create(
+            organization_id=org.id,
+            key=repo.build_pending_deletion_key(),
+            value={
+                'name': 'example-name',
+                'external_id': 'example-external-id',
+                'id': repo.id,
+                'model': Repository.__name__
+            }
+        )
+
+        url = reverse(
+            'sentry-api-0-organization-repository-details', args=[
+                org.slug,
+                repo.id,
+            ]
+        )
+        response = self.client.put(url, data={
+            'status': 'visible',
+            'integrationId': integration.id,
+        })
+
+        assert response.status_code == 200
+
+        repo = Repository.objects.get(id=repo.id)
+        assert repo.status == ObjectStatus.VISIBLE
+        assert repo.integration_id == integration.id
         assert repo.provider == 'integrations:example'
+        assert repo.name == 'example-name'
+        assert repo.external_id == 'example-external-id'
+        assert repo.config == {}
+
+        assert not OrganizationOption.objects.filter(
+            organization_id=org.id,
+            key=repo.build_pending_deletion_key()
+        ).exists()
 
     def test_put_bad_integration_org(self):
         self.login_as(user=self.user)
@@ -218,6 +315,7 @@ class OrganizationRepositoryDeleteTest(APITestCase):
 
         assert response.status_code == 400
         assert response.data['detail'] == 'Invalid integration id'
+        assert Repository.objects.get(id=repo.id).name == 'example'
 
     def test_put_bad_integration_id(self):
         self.login_as(user=self.user)
@@ -243,3 +341,4 @@ class OrganizationRepositoryDeleteTest(APITestCase):
 
         assert response.status_code == 400
         assert response.data == {'integrationId': ['Enter a whole number.']}
+        assert Repository.objects.get(id=repo.id).name == 'example'
diff --git a/tests/sentry/db/test_mixin.py b/tests/sentry/db/test_mixin.py
new file mode 100644
index 0000000000..cc879d9a15
--- /dev/null
+++ b/tests/sentry/db/test_mixin.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.models import OrganizationOption, Repository
+from sentry.testutils import TestCase
+
+
+class RenamePendingDeleteTest(TestCase):
+    def setUp(self):
+        super(RenamePendingDeleteTest, self).setUp()
+        self.repository = Repository.objects.create(
+            organization_id=self.organization.id,
+            name='example/name',
+            provider='provider',
+            external_id='external_id',
+        )
+
+        class MockUuid4:
+            hex = '1234567'
+
+        self.mock_uuid4 = MockUuid4
+
+    def assert_organization_option(self, repo):
+        option = OrganizationOption.objects.get(
+            organization_id=repo.organization_id,
+            key=repo.build_pending_deletion_key(),
+        )
+        assert option.value == {
+            'id': repo.id,
+            'model': Repository.__name__,
+            'name': 'example/name',
+            'external_id': 'external_id',
+        }
+
+    def test_rename_on_pending_deletion(self):
+        with patch('sentry.db.mixin.uuid4', new=self.mock_uuid4):
+            self.repository.rename_on_pending_deletion()
+        repo = Repository.objects.get(id=self.repository.id)
+        assert repo.name == '1234567'
+        assert repo.external_id == '1234567'
+        self.assert_organization_option(repo)
+
+    def test_reset_pending_deletion_field_names(self):
+        self.repository.rename_on_pending_deletion()
+        self.repository.reset_pending_deletion_field_names()
+        repo = Repository.objects.get(id=self.repository.id)
+        assert repo.name == 'example/name'
+        assert repo.external_id == 'external_id'
+        self.assert_organization_option(repo)
+
+    def test_delete_pending_deletion_option(self):
+        self.repository.rename_on_pending_deletion()
+        self.repository.delete()
+        assert not OrganizationOption.objects.filter(
+            organization_id=self.organization.id,
+            key=self.repository.build_pending_deletion_key(),
+        ).exists()
