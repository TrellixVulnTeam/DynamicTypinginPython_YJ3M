commit 010b9d632111fa9e324c604e33438f36fedff099
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 13 21:08:47 2012 -0800

    Remove Views

diff --git a/CHANGES b/CHANGES
index 302046e170..14644432c4 100644
--- a/CHANGES
+++ b/CHANGES
@@ -32,6 +32,7 @@ Additionally, the following changes apply to the new protocol:
 Other Changes
 =============
 
+- Aggregation 'Views' have been removed.
 - All streaming components are now powered by Backbone.js.
 - Frontend has been updated to Bootstrap 2.1.
 - The event stream now includes sparklines representing the last 24 hours of data for each event.
diff --git a/docs/config/index.rst b/docs/config/index.rst
index 684ad8a460..c3793ec39e 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -63,19 +63,6 @@ This document describes additional configuration options available to the Sentry
 		    'sentry.filters.ServerNameFilter',
 		)
 
-.. data:: sentry.conf.VIEWS
-    :noindex:
-
-    A list of views for enhancing the event aggregation dashboard.
-
-    ::
-
-        SENTRY_VIEWS = (
-            'sentry.views.Exception',
-            'sentry.views.Message',
-            'sentry.views.Query',
-        )
-
 .. data:: sentry.conf.LOG_LEVELS
     :noindex:
 
diff --git a/docs/developer/plugins/index.rst b/docs/developer/plugins/index.rst
index 115c9ed09f..a992c95661 100644
--- a/docs/developer/plugins/index.rst
+++ b/docs/developer/plugins/index.rst
@@ -7,7 +7,6 @@ Several interfaces exist for extending Sentry:
 
 * Event Filters (sentry.filters)
 * Data Interfaces (sentry.interfaces)
-* Aggregate Views (sentry.views)
 * Plugins (sentry.plugins)
 
 Until we get sample docs up, it's suggested that you review the builtin plugins
diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index 75296fdab1..ea9f93f4d3 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -109,13 +109,6 @@ QUEUE = {
     'transport': 'kombu.transport.django.Transport',
 }
 
-# List of event aggregation views
-VIEWS = (
-    'sentry.views.Exception',
-    'sentry.views.Message',
-    'sentry.views.Query',
-)
-
 # Should users without 'sentry.add_project' permissions be allowed
 # to create new projects
 ALLOW_PROJECT_CREATION = False
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 1958f30421..32990c8159 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -76,8 +76,6 @@ class BaseManager(models.Manager):
         return d
 
     def __setstate__(self, state):
-        if '_state' in state:
-            del state['_state']
         self.__dict__.update(state)
         self.__cache = weakref.WeakKeyDictionary()
 
@@ -419,39 +417,6 @@ class ChartMixin(object):
 class GroupManager(BaseManager, ChartMixin):
     use_for_related_fields = True
 
-    def _get_views(self, event):
-        from sentry.models import View
-        from sentry.views import View as ViewHandler
-
-        views = set()
-        for viewhandler in ViewHandler.objects.all():
-            try:
-                if not viewhandler.should_store(event):
-                    continue
-
-                path = '%s.%s' % (viewhandler.__module__, viewhandler.__class__.__name__)
-
-                if not viewhandler.ref:
-                    viewhandler.ref = View.objects.get_or_create(
-                        _cache=True,
-                        path=path,
-                        defaults=dict(
-                            verbose_name=viewhandler.verbose_name,
-                            verbose_name_plural=viewhandler.verbose_name_plural,
-                        ),
-                    )[0]
-
-                views.add(viewhandler.ref)
-
-            except Exception, exc:
-                # TODO: should we mail admins when there are failures?
-                try:
-                    logger.exception(exc)
-                except Exception, exc:
-                    warnings.warn(exc)
-
-        return views
-
     @transaction.commit_on_success
     def from_kwargs(self, project, **kwargs):
         # TODO: this function is way too damn long and needs refactored
@@ -521,8 +486,6 @@ class GroupManager(BaseManager, ChartMixin):
             'time_spent_count': time_spent and 1 or 0,
         })
 
-        views = self._get_views(event)
-
         try:
             group, is_new, is_sample = self._create_group(event, tags=tags, **group_kwargs)
         except Exception, exc:
@@ -536,9 +499,6 @@ class GroupManager(BaseManager, ChartMixin):
 
         event.group = group
 
-        for view in views:
-            group.views.add(view)
-
         # save the event unless its been sampled
         if not is_sample:
             try:
diff --git a/src/sentry/migrations/0066_auto__del_view.py b/src/sentry/migrations/0066_auto__del_view.py
new file mode 100644
index 0000000000..1141f8adfe
--- /dev/null
+++ b/src/sentry/migrations/0066_auto__del_view.py
@@ -0,0 +1,260 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Deleting model 'View'
+        db.delete_table('sentry_view')
+
+        # Removing M2M table for field views on 'Group'
+        db.delete_table('sentry_groupedmessage_views')
+
+
+    def backwards(self, orm):
+        # Adding model 'View'
+        db.create_table('sentry_view', (
+            ('path', self.gf('django.db.models.fields.CharField')(max_length=100, unique=True)),
+            ('verbose_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('verbose_name_plural', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
+        ))
+        db.send_create_signal('sentry', ['View'])
+
+        # Adding M2M table for field views on 'Group'
+        db.create_table('sentry_groupedmessage_views', (
+            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
+            ('group', models.ForeignKey(orm['sentry.group'], null=False)),
+            ('view', models.ForeignKey(orm['sentry.view'], null=False))
+        ))
+        db.create_unique('sentry_groupedmessage_views', ['group_id', 'view_id'])
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filterkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'FilterKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 2f2f61893f..89529f13b1 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -337,23 +337,6 @@ class PendingTeamMember(Model):
             logger.exception(e)
 
 
-class View(Model):
-    """
-    A view ties directly to a view extension and simply
-    identifies it at the db level.
-    """
-    path = models.CharField(max_length=100, unique=True)
-    verbose_name = models.CharField(max_length=200, null=True)
-    verbose_name_plural = models.CharField(max_length=200, null=True)
-
-    objects = BaseManager(cache_fields=[
-        'path',
-    ])
-
-    def __unicode__(self):
-        return self.path
-
-
 class MessageBase(Model):
     """
     Abstract base class for both Event and Group.
@@ -407,7 +390,6 @@ class Group(MessageBase):
     time_spent_total = models.FloatField(default=0)
     time_spent_count = models.IntegerField(default=0)
     score = models.IntegerField(default=0)
-    views = models.ManyToManyField(View, blank=True)
     is_public = models.NullBooleanField(default=False, null=True)
 
     objects = GroupManager()
diff --git a/src/sentry/templates/sentry/admin/status/packages.html b/src/sentry/templates/sentry/admin/status/packages.html
index a09ca1328e..21f3aca88f 100644
--- a/src/sentry/templates/sentry/admin/status/packages.html
+++ b/src/sentry/templates/sentry/admin/status/packages.html
@@ -33,26 +33,6 @@
     {% else %}
         <p>{% trans "No extensions registered." %}</p>
     {% endif %}
-    <div class="page-header">
-        <h2>{% trans "Views" %}</h2>
-    </div>
-    {% if views %}
-        <table class="table vars table-bordered table-striped">
-            <colgroup>
-                <col style="width:220px">
-            </colgroup>
-            <tbody>
-                {% for key, value in views %}
-                    <tr>
-                        <th>{{ key }}</th>
-                        <td>{{ value }}</td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-    {% else %}
-        <p>{% trans "No views registered." %}</p>
-    {% endif %}
     <div class="page-header">
         <h2>{% trans "Modules" %}</h2>
     </div>
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index da11cce464..c9ed7bc415 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -10,19 +10,6 @@
     {{ block.super }}
 {% endblock %}
 
-{% block page_header %}
-    <div class="btn-group pull-right">
-        {% if VIEWS %}
-            {% querystring from request without view as view_querystring %}
-            <a class="btn small{% if not view %} active{% endif %}" href="?{{ view_querystring }}">{% trans "All" %}</a>
-            {% for v in VIEWS %}
-                <a class="btn small{% if view == v %} active{% endif %}" href="?{{ view_querystring }}&amp;view={{ v.pk }}">{% trans v.verbose_name_plural %}</a>
-            {% endfor %}
-        {% endif %}
-    </div>
-    {{ block.super }}
-{% endblock %}
-
 {% block breadcrumb %}{% endblock %}
 
 {% block sidebar %}
diff --git a/src/sentry/views/__init__.py b/src/sentry/views/__init__.py
deleted file mode 100644
index ac0e18a7b5..0000000000
--- a/src/sentry/views/__init__.py
+++ /dev/null
@@ -1,12 +0,0 @@
-"""
-sentry.views
-~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.views.base import *  # NOQA
-from sentry.views.exception import *  # NOQA
-from sentry.views.message import *  # NOQA
-from sentry.views.query import *  # NOQA
diff --git a/src/sentry/views/base.py b/src/sentry/views/base.py
deleted file mode 100644
index dbfeb1280b..0000000000
--- a/src/sentry/views/base.py
+++ /dev/null
@@ -1,23 +0,0 @@
-"""
-sentry.views.base
-~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.conf import settings
-from sentry.utils.managers import InstanceManager
-
-__all__ = ('View',)
-
-
-class View(object):
-    verbose_name = None
-    verbose_name_plural = None
-    ref = None  # we cache the actual object here
-
-    def should_store(self, event):
-        return False
-
-    objects = InstanceManager(settings.VIEWS)
diff --git a/src/sentry/views/exception.py b/src/sentry/views/exception.py
deleted file mode 100644
index 1a584856cb..0000000000
--- a/src/sentry/views/exception.py
+++ /dev/null
@@ -1,20 +0,0 @@
-"""
-sentry.views.exception
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from django.utils.translation import ugettext as _
-from .base import View
-
-__all__ = ('Exception',)
-
-
-class Exception(View):
-    verbose_name = _('Exception')
-    verbose_name_plural = _('Exceptions')
-
-    def should_store(self, event):
-        return 'sentry.interfaces.Exception' in event.interfaces
diff --git a/src/sentry/views/message.py b/src/sentry/views/message.py
deleted file mode 100644
index 1c8a5b2ef4..0000000000
--- a/src/sentry/views/message.py
+++ /dev/null
@@ -1,20 +0,0 @@
-"""
-sentry.views.message
-~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from django.utils.translation import ugettext as _
-from .base import View
-
-__all__ = ('Message',)
-
-
-class Message(View):
-    verbose_name = _('Message')
-    verbose_name_plural = _('Messages')
-
-    def should_store(self, event):
-        return 'sentry.interfaces.Message' in event.interfaces
diff --git a/src/sentry/views/query.py b/src/sentry/views/query.py
deleted file mode 100644
index 9e3efd7f98..0000000000
--- a/src/sentry/views/query.py
+++ /dev/null
@@ -1,20 +0,0 @@
-"""
-sentry.views.query
-~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from django.utils.translation import ugettext as _
-from .base import View
-
-__all__ = ('Query',)
-
-
-class Query(View):
-    verbose_name = _('Query')
-    verbose_name_plural = _('Queries')
-
-    def should_store(self, event):
-        return 'sentry.interfaces.Query' in event.interfaces
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index a06ae74d9e..1cec222186 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -273,8 +273,6 @@ def status_env(request):
 
 @requires_admin
 def status_packages(request):
-    from sentry.views import View
-
     config = []
     for k in sorted(dir(settings)):
         if k == 'KEY':
@@ -288,7 +286,6 @@ def status_packages(request):
     return render_to_response('sentry/admin/status/packages.html', {
         'modules': sorted([(p.project_name, p.version) for p in pkg_resources.working_set]),
         'extensions': [(p.get_title(), '%s.%s' % (p.__module__, p.__class__.__name__)) for p in plugins.all()],
-        'views': [(x.__class__.__name__, x.__module__) for x in View.objects.all()],
     }, request)
 
 
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 34809bba99..e5ce87de33 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -51,7 +51,7 @@ def _get_rendered_interfaces(event):
     return interface_list
 
 
-def _get_group_list(request, project, view=None):
+def _get_group_list(request, project):
     filters = []
     for cls in get_filters(Group, project):
         try:
@@ -69,9 +69,6 @@ def _get_group_list(request, project, view=None):
     else:
         event_list = event_list.filter(project=project)
 
-    if view:
-        event_list = event_list.filter(views=view)
-
     for filter_ in filters:
         try:
             if not filter_.is_set():
@@ -223,19 +220,9 @@ def group_list(request, project):
     except (TypeError, ValueError):
         page = 1
 
-    view_id = request.GET.get('view')
-    if view_id:
-        try:
-            view = View.objects.get_from_cache(pk=int(view_id))
-        except View.DoesNotExist:
-            return HttpResponseRedirect(reverse('sentry', args=[project.slug]))
-    else:
-        view = None
-
     response = _get_group_list(
         request=request,
         project=project,
-        view=view,
     )
 
     # XXX: this is duplicate in _get_group_list
@@ -253,7 +240,6 @@ def group_list(request, project):
         'sort': response['sort'],
         'sort_label': sort_label,
         'filters': response['filters'],
-        'view': view,
         'SORT_OPTIONS': SORT_OPTIONS,
         'HAS_TRENDING': has_trending(),
         'PAGE': 'dashboard',
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 23a8749f44..4a8a7899c7 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -18,8 +18,7 @@ from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
 from sentry.conf import settings
-from sentry.models import Project, View, Team, \
-  Option, ProjectOption, ProjectKey
+from sentry.models import Project, Team, Option, ProjectOption, ProjectKey
 from sentry.permissions import can_create_projects, can_create_teams
 
 logger = logging.getLogger('sentry.errors')
@@ -114,7 +113,6 @@ def get_default_context(request, existing_context=None):
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
         'INTERNAL_PROJECT': get_internal_project(),
         'PROJECT_ID': str(settings.PROJECT),
-        'VIEWS': list(View.objects.all()),
         'URL_PREFIX': settings.URL_PREFIX,
         'PLUGINS': plugins,
         'USE_JS_CLIENT': settings.USE_JS_CLIENT,
diff --git a/tests/sentry/views/__init__.py b/tests/sentry/views/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/views/tests.py b/tests/sentry/views/tests.py
deleted file mode 100644
index 2a16346983..0000000000
--- a/tests/sentry/views/tests.py
+++ /dev/null
@@ -1,113 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from mock import Mock
-
-from sentry.conf import settings
-from sentry.models import Event
-from sentry.views import View, Exception, Query, Message
-
-from sentry.testutils import TestCase
-
-
-class ViewIntegrationTest(TestCase):
-    def setUp(self):
-        self.orig = settings.VIEWS
-        View.objects.update((
-            'sentry.views.Exception',
-            'sentry.views.Query',
-            'sentry.views.Message',
-        ))
-        assert len(View.objects.all()) == 3
-
-    def tearDown(self):
-        settings.VIEWS = self.orig
-        View.objects.update(settings.VIEWS)
-
-    def create_event(self, data):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-        kwargs.update(data)
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200, resp.content)
-
-    def test_single_content(self):
-        self.create_event({
-            'sentry.interfaces.Message': {
-                'message': 'this is a message',
-                'params': [],
-            },
-        })
-
-        instance = Event.objects.get()
-        group = instance.group
-        views = list(group.views.all())
-        self.assertEquals(len(views), 1)
-        self.assertEquals(views[0].path, 'sentry.views.message.Message')
-
-    def test_multi_content(self):
-        self.create_event({
-            'sentry.interfaces.Message': {
-                'message': 'this is a message',
-                'params': [],
-            },
-            'sentry.interfaces.Query': {
-                'query': 'SELECT 1 FROM foo',
-            },
-        })
-
-        instance = Event.objects.get()
-        group = instance.group
-        views = list(group.views.all())
-        self.assertEquals(len(views), 2)
-        paths = [v.path for v in views]
-        self.assertTrue('sentry.views.message.Message' in paths)
-        self.assertTrue('sentry.views.query.Query' in paths)
-
-
-class ExceptionViewTest(TestCase):
-    def test_should_store_response(self):
-        event = Mock()
-        event.interfaces = {
-            'sentry.interfaces.Exception': {}
-        }
-        resp = Exception().should_store(event)
-        self.assertTrue(resp)
-
-    def test_should_not_store_response(self):
-        event = Mock()
-        event.interfaces = {}
-        resp = Exception().should_store(event)
-        self.assertFalse(resp)
-
-
-class QueryViewTest(TestCase):
-    def test_should_store_response(self):
-        event = Mock()
-        event.interfaces = {
-            'sentry.interfaces.Query': {}
-        }
-        resp = Query().should_store(event)
-        self.assertTrue(resp)
-
-    def test_should_not_store_response(self):
-        event = Mock()
-        event.interfaces = {}
-        resp = Query().should_store(event)
-        self.assertFalse(resp)
-
-
-class MessageViewTest(TestCase):
-    def test_should_store_response(self):
-        event = Mock()
-        event.interfaces = {
-            'sentry.interfaces.Message': {}
-        }
-        resp = Message().should_store(event)
-        self.assertTrue(resp)
-
-    def test_should_not_store_response(self):
-        event = Mock()
-        event.interfaces = {}
-        resp = Message().should_store(event)
-        self.assertFalse(resp)
