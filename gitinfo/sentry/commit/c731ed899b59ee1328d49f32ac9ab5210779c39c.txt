commit c731ed899b59ee1328d49f32ac9ab5210779c39c
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Feb 2 10:32:17 2018 -0800

    feat(api): Rework user details/appearance endpoints (#7046)
    
    * Change sudo endpoint to respond with 204
    * remove updating password from user details endpoint
    * move modifying user appearance options into user details endpoint
    * change stacktraceOrder to be an int

diff --git a/src/sentry/api/endpoints/sudo.py b/src/sentry/api/endpoints/sudo.py
index b9590e660a..8c4a1c1a65 100644
--- a/src/sentry/api/endpoints/sudo.py
+++ b/src/sentry/api/endpoints/sudo.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from django.contrib import auth
+from rest_framework import status
 from rest_framework.response import Response
 from rest_framework.permissions import IsAuthenticated
 from sudo.utils import grant_sudo_privileges
@@ -37,6 +38,7 @@ class SudoEndpoint(Endpoint):
 
         if authenticated:
             grant_sudo_privileges(request._request)
-            return Response(status=200)
+            return Response(status=status.HTTP_204_NO_CONTENT)
 
-        return Response({'allowFail': True}, content_type="application/json", status=401)
+        return Response({'allowFail': True}, content_type="application/json",
+                        status=status.HTTP_401_UNAUTHORIZED)
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 6d027dbddf..2e621956c2 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -1,6 +1,10 @@
 from __future__ import absolute_import
 
+from datetime import datetime
+
+import pytz
 from django.conf import settings
+from django.utils.translation import ugettext_lazy as _
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -8,9 +12,38 @@ from sentry.api.bases.user import UserEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.user import DetailedUserSerializer
 from sentry.auth.superuser import is_active_superuser
+from sentry.constants import LANGUAGES
 from sentry.models import User, UserOption
 
 
+def _get_timezone_choices():
+    results = []
+    for tz in pytz.common_timezones:
+        now = datetime.now(pytz.timezone(tz))
+        offset = now.strftime('%z')
+        results.append((int(offset), tz, '(UTC%s) %s' % (offset, tz)))
+    results.sort()
+
+    for i in range(len(results)):
+        results[i] = results[i][1:]
+    return results
+
+
+TIMEZONE_CHOICES = _get_timezone_choices()
+
+
+class UserOptionsSerializer(serializers.Serializer):
+    language = serializers.ChoiceField(choices=LANGUAGES, required=False)
+    stacktraceOrder = serializers.ChoiceField(choices=(
+        ('-1', _('Default (let Sentry decide)')),
+        ('1', _('Most recent call last')),
+        ('2', _('Most recent call first')),
+    ), required=False)
+    timezone = serializers.ChoiceField(choices=TIMEZONE_CHOICES, required=False)
+    clock24Hours = serializers.BooleanField(required=False)
+    seenReleaseBroadcast = serializers.BooleanField(required=False)
+
+
 class BaseUserSerializer(serializers.ModelSerializer):
     def validate_username(self, attrs, source):
         value = attrs[source]
@@ -23,6 +56,7 @@ class BaseUserSerializer(serializers.ModelSerializer):
 
         if self.object.email == self.object.username:
             if attrs.get('username', self.object.email) != self.object.email:
+                # ... this probably needs to handle newsletters and such?
                 attrs.setdefault('email', attrs['username'])
 
         return attrs
@@ -36,21 +70,13 @@ class BaseUserSerializer(serializers.ModelSerializer):
 class UserSerializer(BaseUserSerializer):
     class Meta:
         model = User
-        fields = ('name', 'username', 'email')
-
-    def validate_username(self, attrs, source):
-        value = attrs[source]
-        if User.objects.filter(username__iexact=value).exclude(id=self.object.id).exists():
-            raise serializers.ValidationError('That username is already in use.')
-        return attrs
+        fields = ('name', 'username')
 
     def validate(self, attrs):
         for field in settings.SENTRY_MANAGED_USER_FIELDS:
             attrs.pop(field, None)
 
-        attrs = super(UserSerializer, self).validate(attrs)
-
-        return attrs
+        return super(UserSerializer, self).validate(attrs)
 
 
 class AdminUserSerializer(BaseUserSerializer):
@@ -60,32 +86,70 @@ class AdminUserSerializer(BaseUserSerializer):
         model = User
         # no idea wtf is up with django rest framework, but we need is_active
         # and isActive
-        fields = ('name', 'username', 'isActive', 'email')
+        fields = ('name', 'username', 'isActive')
         # write_only_fields = ('password',)
 
 
 class UserDetailsEndpoint(UserEndpoint):
     def get(self, request, user):
-        data = serialize(user, request.user, DetailedUserSerializer())
-        return Response(data)
+        """
+        Retrieve User Details
+        `````````````````````
+
+        Return details for an account's details and options such as: full name, timezone, 24hr times, language,
+        stacktrace_order.
+
+        :auth: required
+        """
+        return Response(serialize(user, request.user, DetailedUserSerializer()))
 
     def put(self, request, user):
+        """
+        Update Account Appearance options
+        `````````````````````````````````
+
+        Update account appearance options. Only supplied values are updated.
+
+        :pparam string user_id: user id
+        :param string language: language preference
+        :param string stacktrace_order: One of -1 (default), 1 (most recent call last), 2 (most recent call first).
+        :param string timezone: timezone option
+        :param clock_24_hours boolean: use 24 hour clock
+        :auth: required
+        """
+
         if is_active_superuser(request):
             serializer_cls = AdminUserSerializer
         else:
             serializer_cls = UserSerializer
         serializer = serializer_cls(user, data=request.DATA, partial=True)
 
-        if serializer.is_valid():
-            user = serializer.save()
+        serializer_options = UserOptionsSerializer(
+            data=request.DATA.get('options', {}), partial=True)
+
+        # This serializer should NOT include privileged fields e.g. password
+        if not serializer.is_valid() or not serializer_options.is_valid():
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
-            options = request.DATA.get('options', {})
-            if options.get('seenReleaseBroadcast'):
+        # map API keys to keys in model
+        key_map = {
+            'language': 'language',
+            'timezone': 'timezone',
+            'stacktraceOrder': 'stacktrace_order',
+            'clock24Hours': 'clock_24_hours',
+            'seenReleaseBroadcast': 'seen_release_broadcast',
+        }
+
+        options_result = serializer_options.object
+
+        for key in key_map:
+            if key in options_result:
                 UserOption.objects.set_value(
                     user=user,
-                    key='seen_release_broadcast',
-                    value=options.get('seenReleaseBroadcast'),
+                    key=key_map.get(key, key),
+                    value=options_result.get(key),
                 )
-            return Response(serialize(user, request.user))
 
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+        user = serializer.save()
+
+        return Response(serialize(user, request.user, DetailedUserSerializer()))
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 084d6cd50c..6e19ef438b 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -85,12 +85,6 @@ class UserSerializer(Serializer):
                 )
             }
             stacktrace_order = int(options.get('stacktrace_order', -1) or -1)
-            if stacktrace_order == -1:
-                stacktrace_order = 'default'
-            elif stacktrace_order == 2:
-                stacktrace_order = 'newestFirst'
-            elif stacktrace_order == 1:
-                stacktrace_order = 'newestLast'
 
             d['options'] = {
                 'language': options.get('language') or 'en',
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 71aebea007..39dcd5573c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -12,11 +12,11 @@ export function isStacktraceNewestFirst() {
   // user may not be authenticated
   let options = user ? user.options : {};
   switch (options.stacktraceOrder) {
-    case 'newestFirst':
+    case 2:
       return true;
-    case 'newestLast':
+    case 1:
       return false;
-    case 'default': // is "default" a valid value? or bad case statement
+    case -1:
     default:
       return true;
   }
@@ -28,7 +28,6 @@ class StacktraceInterface extends React.Component {
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-    platform: PropTypes.string,
   };
 
   constructor(...args) {
diff --git a/tests/sentry/api/endpoints/test_sudo.py b/tests/sentry/api/endpoints/test_sudo.py
index deff58b369..a33d4b4fb6 100644
--- a/tests/sentry/api/endpoints/test_sudo.py
+++ b/tests/sentry/api/endpoints/test_sudo.py
@@ -37,7 +37,7 @@ class SudoTest(APITestCase):
                 'username': 'foo@example.com',
                 'password': 'admin',
             })
-            assert response.status_code == 200
+            assert response.status_code == 204
 
             # This should now work
             response = self.client.delete(url, is_sudo=False)
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index cdcfac0754..db66ea36f4 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -39,6 +39,10 @@ class UserDetailsTest(APITestCase):
 
         assert resp.status_code == 200, resp.content
         assert resp.data['id'] == six.text_type(user.id)
+        assert resp.data['options']['timezone'] == 'UTC'
+        assert resp.data['options']['language'] == 'en'
+        assert resp.data['options']['stacktraceOrder'] == -1
+        assert not resp.data['options']['clock24Hours']
 
     def test_superuser(self):
         user = self.create_user(email='a@example.com')
@@ -60,48 +64,56 @@ class UserDetailsTest(APITestCase):
 
 
 class UserUpdateTest(APITestCase):
-    def test_simple(self):
-        user = self.create_user(email='a@example.com')
-
-        self.login_as(user=user)
-
-        url = reverse(
+    def setUp(self):
+        self.user = self.create_user(email='a@example.com', is_managed=False, name='example name')
+        self.login_as(user=self.user)
+        self.url = reverse(
             'sentry-api-0-user-details', kwargs={
                 'user_id': 'me',
             }
         )
 
+    def test_simple(self):
         resp = self.client.put(
-            url,
+            self.url,
             data={
                 'name': 'hello world',
-                'username': 'b@example.com',
                 'options': {
-                    'seenReleaseBroadcast': True
+                    'timezone': 'UTC',
+                    'stacktraceOrder': '2',
+                    'language': 'fr',
+                    'clock24Hours': True,
+                    'extra': True,
+                    'seenReleaseBroadcast': True,
                 }
             }
         )
         assert resp.status_code == 200, resp.content
-        assert resp.data['id'] == six.text_type(user.id)
+        assert resp.data['id'] == six.text_type(self.user.id)
 
-        user = User.objects.get(id=user.id)
+        user = User.objects.get(id=self.user.id)
         assert user.name == 'hello world'
-        assert user.email == 'b@example.com'
-        assert user.username == user.email
+        # note: email should not change, removed support for email changing from this endpoint
+        assert user.email == 'a@example.com'
+        assert user.username == 'a@example.com'
         assert UserOption.objects.get_value(
             user=user,
             key='seen_release_broadcast',
         ) is True
+        assert UserOption.objects.get_value(user=self.user, key='timezone') == 'UTC'
+        assert UserOption.objects.get_value(user=self.user, key='stacktrace_order') == '2'
+        assert UserOption.objects.get_value(user=self.user, key='language') == 'fr'
+        assert UserOption.objects.get_value(user=self.user, key='clock_24_hours')
+        assert not UserOption.objects.get_value(user=self.user, key='extra')
 
     def test_superuser(self):
-        user = self.create_user(email='a@example.com')
+        # superuser should be able to change self.user's name
         superuser = self.create_user(email='b@example.com', is_superuser=True)
-
         self.login_as(user=superuser, superuser=True)
 
         url = reverse(
             'sentry-api-0-user-details', kwargs={
-                'user_id': user.id,
+                'user_id': self.user.id,
             }
         )
 
@@ -110,15 +122,67 @@ class UserUpdateTest(APITestCase):
             data={
                 'name': 'hello world',
                 'email': 'c@example.com',
-                'username': 'foo',
                 'isActive': 'false',
             }
         )
         assert resp.status_code == 200, resp.content
-        assert resp.data['id'] == six.text_type(user.id)
+        assert resp.data['id'] == six.text_type(self.user.id)
 
-        user = User.objects.get(id=user.id)
+        user = User.objects.get(id=self.user.id)
         assert user.name == 'hello world'
-        assert user.email == 'c@example.com'
-        assert user.username == 'foo'
+        # note: email should not change, removed support for email changing from this endpoint
+        assert user.email == 'a@example.com'
+        assert user.username == 'a@example.com'
         assert not user.is_active
+
+    def test_managed_fields(self):
+        assert self.user.name == 'example name'
+        with self.settings(SENTRY_MANAGED_USER_FIELDS=('name', )):
+            resp = self.client.put(
+                self.url,
+                data={
+                    'name': 'new name',
+                }
+            )
+            assert resp.status_code == 200
+
+            # name remains unchanged
+            user = User.objects.get(id=self.user.id)
+            assert user
+
+    def test_change_username_when_different(self):
+        # if email != username and we change username, only username should change
+        user = self.create_user(email="c@example.com", username="diff@example.com")
+        self.login_as(user=user, superuser=False)
+
+        resp = self.client.put(
+            self.url,
+            data={
+                'username': 'new@example.com',
+            }
+        )
+        assert resp.status_code == 200, resp.content
+
+        user = User.objects.get(id=user.id)
+
+        assert user.email == 'c@example.com'
+        assert user.username == 'new@example.com'
+
+    def test_change_username_when_same(self):
+        # if email == username and we change username,
+        # keep email in sync
+        user = self.create_user(email="c@example.com", username="c@example.com")
+        self.login_as(user=user)
+
+        resp = self.client.put(
+            self.url,
+            data={
+                'username': 'new@example.com',
+            }
+        )
+        assert resp.status_code == 200, resp.content
+
+        user = User.objects.get(id=user.id)
+
+        assert user.email == 'new@example.com'
+        assert user.username == 'new@example.com'
