commit 4230e5215951d1e4338acc7630beee47c3de69c5
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Dec 2 00:03:57 2013 -0800

    Recover account by email address

diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 6356036277..4b24d84ac2 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -22,6 +22,23 @@ def get_auth_providers():
     ]
 
 
+def find_users(username):
+    """
+    Return a list of users that match a username
+    and falling back to email
+    """
+    qs = User.objects.exclude(password='!')
+    try:
+        # Assume username is a login and attempt to login.
+        user = qs.get(username__iexact=username)
+        return [user]
+    except User.DoesNotExist:
+        if '@' in username:
+            # email isn't guaranteed unique
+            return list(qs.filter(email__iexact=username))
+    return None
+
+
 class EmailAuthBackend(ModelBackend):
     """
     Authenticate against django.contrib.auth.models.User.
@@ -29,24 +46,12 @@ class EmailAuthBackend(ModelBackend):
     Supports authenticating via an email address or a username.
     """
     def authenticate(self, username=None, password=None):
-        qs = User.objects.exclude(password='!')
-        try:
-            # Assume username is a login and attempt to login.
-            user = qs.get(username__iexact=username)
-        except User.DoesNotExist:
-            if '@' in username:
-                # email isn't guaranteed unique
-                for user in qs.filter(email__iexact=username):
-                    if not user.password:
-                        continue
-                    if user.check_password(password):
+        users = find_users(username)
+        if users:
+            for user in users:
+                try:
+                    if user.password and user.check_password(password):
                         return user
-            return None
-
-        try:
-            if user.password and user.check_password(password):
-                return user
-        except ValueError:
-            return None
-
+                except ValueError:
+                    continue
         return None
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 3bca16c136..44ecdfc934 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -17,6 +17,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import EMPTY_PASSWORD_VALUES, LANGUAGES
 from sentry.models import UserOption, User
+from sentry.utils.auth import find_users
 
 
 def _get_timezone_choices():
@@ -216,10 +217,12 @@ class RecoverPasswordForm(forms.Form):
     def clean_user(self):
         value = self.cleaned_data.get('user')
         if value:
-            try:
-                return User.objects.get(username__iexact=value)
-            except User.DoesNotExist:
+            users = find_users(value)
+            if not users:
                 raise forms.ValidationError(_("We were unable to find a matching user."))
+            if len(users) > 1:
+                raise forms.ValidationError(_("Multiple accounts were found matching this email address."))
+            return users[0]
         return None
 
 
