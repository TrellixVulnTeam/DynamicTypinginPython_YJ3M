commit 6e4fd09490efd625760bfb4c2be1dc8710951c52
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 25 11:47:49 2011 -0700

    Support raw_post_data when request.POST is empty

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 6663561351..d2fdff19b8 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -37,9 +37,15 @@ class SentryClient(object):
         if request:
             if not kwargs.get('data'):
                 kwargs['data'] = {}
+            
+            if not request.POST and request.raw_post_data:
+                post_data = request.raw_post_data
+            else:
+                post_data = request.POST
+
             kwargs['data'].update(dict(
                 META=request.META,
-                POST=request.POST,
+                POST=post_data,
                 GET=request.GET,
                 COOKIES=request.COOKIES,
             ))
diff --git a/sentry/reporter.py b/sentry/reporter.py
index 904a68adb0..3ab848b206 100644
--- a/sentry/reporter.py
+++ b/sentry/reporter.py
@@ -83,6 +83,7 @@ class FakeRequest(object):
     META = {}
     COOKIES = {}
     FILES = {}
+    raw_post_data = ''
     url = ''
     
     def __repr__(self):
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index a15395f28d..f6c2f07ea8 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -14,7 +14,7 @@ import threading
 from django.conf import settings
 from django.contrib.auth.models import User
 from django.core import mail
-from django.core.handlers.wsgi import WSGIRequest, WSGIHandler
+from django.core.handlers.wsgi import WSGIHandler
 from django.core.management import call_command
 from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
@@ -705,6 +705,31 @@ class SentryTestCase(TestCase):
         self.assertTrue('baz' in last.data)
         self.assertEquals(last.data['baz'], 'bar')
 
+    def testRawPostData(self):
+        from sentry.reporter import FakeRequest
+        
+        request = FakeRequest()
+        request.raw_post_data = '{"json": "string"}'
+        
+        logger = logging.getLogger()
+
+        self.setUpHandler()
+
+        logger.error('This is a test %s', 'error', extra={
+            'request': request,
+            'data': {
+                'baz': 'bar',
+            }
+        })
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        last = Message.objects.get()
+        self.assertEquals(last.logger, 'root')
+        self.assertEquals(last.level, logging.ERROR)
+        self.assertEquals(last.message, 'This is a test error')
+        self.assertTrue('POST' in last.data)
+        self.assertEquals(request.raw_post_data, last.data['POST'])
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
