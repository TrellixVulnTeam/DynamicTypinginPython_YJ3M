commit e72d2448020d3c53385fbdc3e95abf40c630c25a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Mar 14 14:03:06 2019 -0700

    fix(api): Fix negative checks for promoted tags in search (SEN-253)
    
    These were failing because while tags are array columns and are always an empty string, promoted
    tags are actual columns and so can be null. So just for tags we always is `isNull` to convert to an
    empty string.
    
    Fixes SEN-253

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 2b9dbb1d1f..15c2bb2d82 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -450,13 +450,18 @@ def convert_search_filter_to_snuba_query(search_filter):
         value = int(to_timestamp(value)) * 1000 if isinstance(value,
                                                               datetime) and snuba_name != 'timestamp' else value
 
+        # Tags are never null, but promoted tags are columns and so can be null.
+        # To handle both cases, use `ifNull` to convert to an empty string and
+        # compare so we need to check for empty values.
+        if search_filter.key.is_tag:
+            snuba_name = ['ifNull', [snuba_name, "''"]]
+
         # Handle checks for existence
         if search_filter.operator in ('=', '!=') and search_filter.value.value == '':
-            # Tags are never null, so we need to check for empty values
             if search_filter.key.is_tag:
                 return [snuba_name, search_filter.operator, value]
             else:
-                # Otherwise, check that the column is null.
+                # If not a tag, we can just check that the column is null.
                 return [['isNull', [snuba_name]], search_filter.operator, 1]
 
         is_null_condition = None
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index d6d0568463..68e688933b 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -568,7 +568,7 @@ class GetSnubaQueryArgsTest(TestCase):
             'conditions': [
                 ['email', '=', 'foo@example.com'],
                 ['tags[sentry:release]', '=', '1.2.1'],
-                ['tags[fruit]', '=', 'apple'],
+                [['ifNull', ['tags[fruit]', "''"]], '=', 'apple'],
                 [['positionCaseInsensitive', ['message', "'hello'"]], '!=', 0],
             ],
             'filter_keys': {'project_id': [1, 2, 3]},
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 9c3f44a3f3..2df048ab4f 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -1390,6 +1390,65 @@ class SnubaSearchTest(SnubaTestCase):
         )
         assert set(results) == set([no_tag_event.group])
 
+    def test_null_promoted_tags(self):
+        tag_event = self.store_event(
+            data={
+                'fingerprint': ['hello-there'],
+                'event_id': 'f' * 32,
+                'message': 'something',
+                'environment': 'production',
+                'tags': {
+                    'logger': 'csp',
+                },
+                'timestamp': self.base_datetime.isoformat()[:19],
+                'stacktrace': {
+                    'frames': [{
+                        'module': 'group1'
+                    }]
+                },
+            },
+            project_id=self.project.id,
+        )
+        no_tag_event = self.store_event(
+            data={
+                'fingerprint': ['hello-there-2'],
+                'event_id': '5' * 32,
+                'message': 'something',
+                'environment': 'production',
+                'timestamp': self.base_datetime.isoformat()[:19],
+                'stacktrace': {
+                    'frames': [{
+                        'module': 'group2'
+                    }]
+                },
+            },
+            project_id=self.project.id,
+        )
+        results = self.make_query(
+            search_filter_query='environment:production !logger:*sp',
+        )
+        assert set(results) == set([self.group1, no_tag_event.group])
+        results = self.make_query(
+            search_filter_query='environment:production logger:*sp',
+        )
+        assert set(results) == set([tag_event.group])
+        results = self.make_query(
+            search_filter_query='environment:production !logger:csp',
+        )
+        assert set(results) == set([self.group1, no_tag_event.group])
+        results = self.make_query(
+            search_filter_query='environment:production logger:csp',
+        )
+        assert set(results) == set([tag_event.group])
+        results = self.make_query(
+            search_filter_query='environment:production has:logger',
+        )
+        assert set(results) == set([tag_event.group])
+        results = self.make_query(
+            search_filter_query='environment:production !has:logger',
+        )
+        assert set(results) == set([self.group1, no_tag_event.group])
+
     def test_all_fields_do_not_error(self):
         # Just a sanity check to make sure that all fields can be succesfully
         # searched on without returning type errors and other schema related
