commit b96861636a4e561923460da1e54c5a924cf47d61
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu May 8 11:32:57 2014 -0700

    Added tests for new paths

diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 105b94fcac..a3cbb4cc3a 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -5,12 +5,14 @@ from __future__ import absolute_import
 import mock
 
 from datetime import datetime
+from uuid import UUID
 
 from sentry.models import Project, User
 from sentry.exceptions import InvalidTimestamp
+from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.coreapi import (
     extract_auth_vars, project_from_auth_vars, APIForbidden, ensure_has_ip,
-    process_data_timestamp, validate_data, INTERFACE_ALIASES, get_interface)
+    process_data_timestamp, validate_data, INTERFACE_ALIASES, get_interface, APIError)
 from sentry.testutils import TestCase
 
 
@@ -142,24 +144,29 @@ class ValidateDataTest(BaseAPITest):
         })
         assert data['project'] == self.project.id
 
-    @mock.patch('uuid.uuid4')
+    @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_empty_event_id(self, uuid4):
         data = validate_data(self.project, {
             'event_id': '',
         })
-        assert data['event_id'] == uuid4.return_value.hex
+        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
 
-    @mock.patch('uuid.uuid4')
+    @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_missing_event_id(self, uuid4):
         data = validate_data(self.project, {})
-        assert data['event_id'] == uuid4.return_value.hex
+        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
 
-    @mock.patch('uuid.uuid4')
+    @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_invalid_event_id(self, uuid4):
         data = validate_data(self.project, {
             'event_id': 'a' * 33,
         })
-        assert data['event_id'] == uuid4.return_value.hex
+        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
+
+    def test_invalid_event_id_raises(self):
+        self.assertRaises(APIError, validate_data, self.project, {
+            'event_id': 1
+        })
 
     def test_unknown_attribute(self):
         data = validate_data(self.project, {
@@ -258,6 +265,17 @@ class ValidateDataTest(BaseAPITest):
         })
         assert 'extra' not in data
 
+    def test_invalid_culprit_raises(self):
+        self.assertRaises(APIError, validate_data, self.project, {
+            'culprit': 1
+        })
+
+    def test_long_culprit(self):
+        data = validate_data(self.project, {
+            'culprit': 'x' * (MAX_CULPRIT_LENGTH + 1)
+        })
+        assert len(data['culprit']) == MAX_CULPRIT_LENGTH
+
 
 class GetInterfaceTest(TestCase):
     def test_does_not_let_through_disallowed_name(self):
