{"/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test-pyshellhooks/hooks/post_gen_project.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-pyshellhooks.hooks.post_gen_project": {"var": {"f": {"file": [[5, "f = open('python_post.txt', 'w')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_determine_repo_dir_finds_existing_cookiecutter.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter.test_should_find_existing": {"param": {"cloned_cookiecutter_path": {"?": [[30, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter": {"func": {"template": {"() -> str": [[10, "def template():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_rep": {"func": {"test_should_find_existing_cookiecutter": {"(?, ?, ?) -> None": [[28, "def test_should_find_existing_cookiecutter("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter.test_should_find_existing_cookiecutter": {"var": {"template": {"?": [[29, "    template, user_config_data, cloned_cookiecutter_path"]]}}, "param": {"template": {"?": [[30, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter.cloned_cookiecutter_path": {"var": {"cookiecutters_dir": {"?": [[18, "    cookiecutters_dir = user_config_data['cookiecutters_dir']"]]}}, "param": {"user_config_data": {"?": [[16, "def cloned_cookiecutter_path(user_config_data, template):"]]}, "template": {"?": [[16, "def cloned_cookiecutter_path(user_config_data, template):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter.test_should_find_existing_cook": {"param": {"user_config_data": {"?": [[30, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing": {"func": {"cloned_cookiecutter_path": {"(?, ?) -> str": [[16, "def cloned_cookiecutter_path(user_config_data, template):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter.test_should_find_existing_cookiecu": {"var": {"project_dir": {"?": [[36, "    project_dir, cleanup = repository.determine_repo_dir("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_existing_cookiecutter.cloned_cookiecutter": {"var": {"cloned_template_path": {"str": [[20, "    cloned_template_path = os.path.join(cookiecutters_dir, template)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/prompt.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_": {"var": {"choices": {"?": [[63, "    choices = choice_map.keys()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.render_variable": {"var": {"raw": {"str": [[151, "        raw = str(raw)"]]}}, "param": {"raw": {"(?, ?, ?) -> {[dict] | dict} / (StrictEnvironment, ?, dict) -> {[dict] | dict} / (StrictEnvironment, ? -> list, ?) -> {[{[dict] | dict}] | dict} / (StrictEnvironment, ?, ?) -> {[dict] | dict} / (StrictEnvironment, dict, ?) -> {[{[dict] | dict}] | dict}": [[122, "def render_variable(env, raw, cookiecutter_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_dic": {"var": {"default_display": {"str": [[110, "    default_display = 'default'"]]}}, "param": {"default_value": {"{[{[dict] | dict}] | dict | dict | str}": [[99, "def read_user_dict(var_name, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.promp": {"func": {"read_user_dict": {"(str, dict) -> dict / (str, str) -> str / (?, {[{[dict] | dict}] | dict}) -> {[{[dict] | dict}] | dict} / (?, ?) -> None": [[99, "def read_user_dict(var_name, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.prompt_for_config": {"var": {"cookiecutter_dict": {"?": [[177, "    cookiecutter_dict = OrderedDict([])"]]}, "key": {"?": [[183, "    for key, raw in context['cookiecutter'].items():"], [211, "    for key, raw in context['cookiecutter'].items():"]]}, "env": {"StrictEnvironment": [[178, "    env = StrictEnvironment(context=context)"]]}, "val": {"{[dict] | dict}": [[194, "                val = prompt_choice_for_config("]], "None": [[203, "                    val = read_user_variable(key, val)"]], "{[{[dict] | dict}] | dict}": [[219, "                val = render_variable(env, raw, cookiecutter_dict)"], [222, "                    val = read_user_dict(key, val)"]], "{[dict] | [{[dict] | dict}] | dict | dict}": [[200, "                val = render_variable(env, raw, cookiecutter_dict)"]]}}, "param": {"no_input": {"bool": [[171, "def prompt_for_config(context, no_input=False):"]]}, "context": {"{dict | dict | dict | dict | dict | dict | dict}": [[171, "def prompt_for_config(context, no_input=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_variab": {"param": {"default_value": {"<StrictEnvironment>": [[12, "def read_user_variable(var_name, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecu": {"func": {"prompt_choice_for_config": {"(?, ?, ?, ?, ?) -> {[dict] | dict} / (?, StrictEnvironment, ?, ? -> list, bool) -> {[dict] | dict} / (?, StrictEnvironment, str, ?, bool) -> {[dict] | dict}": [[159, "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutte": {"func": {"prompt_for_config": {"(dict, bool) -> ? / (?, bool) -> ?": [[171, "def prompt_for_config(context, no_input=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read": {"var": {"user_choice": {"?": [[75, "    user_choice = click.prompt("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.prompt_for_confi": {"var": {"msg": {"str": [[207, "            msg = \"Unable to render variable '{}'\".format(key)"], [226, "            msg = \"Unable to render variable '{}'\".format(key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_dict": {"var": {"user_value": {"?": [[112, "    user_value = click.prompt("]]}}, "param": {"var_name": {"str": [[99, "def read_user_dict(var_name, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.render_variab": {"var": {"rendered_template": {"?": [[155, "    rendered_template = template.render(cookiecutter=cookiecutter_dict)"]]}, "template": {"?": [[153, "    template = env.from_string(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.process_json": {"var": {"user_dict": {"?": [[87, "        user_dict = json.loads(user_value, object_pairs_hook=OrderedDict)"]]}}, "param": {"user_value": {"str": [[81, "def process_json(user_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt": {"func": {"render_variable": {"(?, ?, ?) -> {[dict] | dict} / (StrictEnvironment, ?, dict) -> {[dict] | dict} / (StrictEnvironment, ? -> list, ?) -> {[{[dict] | dict}] | dict} / (StrictEnvironment, ?, ?) -> {[dict] | dict} / (StrictEnvironment, dict, ?) -> {[{[dict] | dict}] | dict}": [[122, "def render_variable(env, raw, cookiecutter_dict):"]]}, "read_user_choice": {"(str, [?]) -> None / (str, str) -> None / (?, ?) -> None / (str, [str]) -> None / (?, [{[dict] | dict}]) -> None / (str, [{[dict] | dict}]) -> None": [[44, "def read_user_choice(var_name, options):"]]}, "read_user_variable": {"(str, str) -> None / (?, {[{[dict] | dict}] | dict}) -> None / (?, {[dict] | dict}) -> None / (?, ?) -> None": [[12, "def read_user_variable(var_name, default_value):"]]}, "process_json": {"str -> ? / ? -> ?": [[81, "def process_json(user_value):"]]}, "read_user_yes_no": {"(?, ?) -> None / (str, str) -> None": [[22, "def read_user_yes_no(question, default_value):"]]}, "read_repo_password": {"? -> None / str -> None": [[35, "def read_repo_password(question):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_choic": {"var": {"default": {"str": [[64, "    default = '1'"]]}}, "param": {"var_name": {"str": [[44, "def read_user_choice(var_name, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.render_variabl": {"param": {"cookiecutter_dict": {"StrictEnvironment": [[122, "def render_variable(env, raw, cookiecutter_dict):"]]}, "env": {"?": [[122, "def render_variable(env, raw, cookiecutter_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user": {"var": {"choice_lines": {"[str]": [[66, "    choice_lines = ['{} - {}'.format(*c) for c in choice_map.items()]"]]}, "choice_map": {"?": [[60, "    choice_map = OrderedDict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_repo_password": {"param": {"question": {"str": [[35, "def read_repo_password(question):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_variabl": {"param": {"var_name": {"environment": [[12, "def read_user_variable(var_name, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.prompt_choice_for_config": {"var": {"rendered_options": {"[{[dict] | dict}]": [[164, "    rendered_options = [render_variable(env, raw, cookiecutter_dict) for raw in options]"]]}}, "param": {"cookiecutter_dict": {"?": [[159, "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):"]]}, "no_input": {"bool": [[159, "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):"]]}, "key": {"str": [[159, "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):"]]}, "env": {"StrictEnvironment": [[159, "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):"]]}, "options": {"? -> list": [[159, "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_yes_no": {"param": {"default_value": {"str": [[22, "def read_user_yes_no(question, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_yes_": {"param": {"question": {"str": [[22, "def read_user_yes_no(question, default_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.prompt.read_user_choice": {"var": {"prompt": {"str": [[67, "    prompt = '\\n'.join("]]}}, "param": {"options": {"{[?] | [str] | [{[dict] | dict}] | str}": [[44, "def read_user_choice(var_name, options):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test-pyhooks/hooks/post_gen_project.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-pyhooks.hooks.post_gen_project": {"var": {"f": {"file": [[5, "f = open('python_post.txt', 'w')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_read_user_choice.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_choice.test_click_invocation": {"var": {"prompt": {"?": [[26, "    prompt = mocker.patch('click.prompt')"]]}, "choice": {"?": [[23, "    choice = mocker.patch('click.Choice')"]]}}, "param": {"expected_value": {"?": [[18, "def test_click_invocation(mocker, user_choice, expected_value):"]]}, "mocker": {"?": [[18, "def test_click_invocation(mocker, user_choice, expected_value):"]]}, "user_choice": {"?": [[18, "def test_click_invocation(mocker, user_choice, expected_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_ch": {"func": {"test_click_invocation": {"(?, ?, ?) -> None": [[18, "def test_click_invocation(mocker, user_choice, expected_value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_choic": {"func": {"test_raise_if_options_is_not_a_non_empty_list": {"() -> None": [[36, "def test_raise_if_options_is_not_a_non_empty_list():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_choice": {"var": {"OPTIONS": {"[str]": [[7, "OPTIONS = ['hello', 'world', 'foo', 'bar']"]]}, "EXPECTED_PROMPT": {"str": [[9, "EXPECTED_PROMPT = \"\"\"Select varname:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/__init__.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutt": {"var": {"__version__": {"str": [[2, "__version__ = \"2.0.0\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_utils.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_no_reuse": {"param": {"tmp_path": {"?": [[141, "def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_make_sure_path_exists_correctly_handle_os": {"var": {"uncreatable_directory": {"?": [[66, "    uncreatable_directory = Path('protected_path')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_rm_repo_dir": {"var": {"deleted": {"bool": [[99, "    deleted = utils.prompt_and_delete(str(repo_dir))"]]}}, "param": {"tmp_path": {"?": [[90, "def test_prompt_should_ask_and_rm_repo_dir(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_not_ask_if_no_input_and_rm_repo_dir": {"var": {"deleted": {"bool": [[192, "    deleted = utils.prompt_and_delete(str(repo_dir), no_input=True)"]]}}, "param": {"tmp_path": {"?": [[180, "def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_no_reus": {"var": {"repo_dir": {"?": [[147, "    repo_dir = Path(tmp_path, 'repo')"]]}}, "param": {"mocker": {"?": [[141, "def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_exit_on_user_no_answer": {"var": {"deleted": {"bool": [[116, "    deleted = utils.prompt_and_delete(str(repo_dir))"]]}, "mock_sys_exit": {"?": [[112, "    mock_sys_exit = mocker.patch('sys.exit', return_value=True)"]]}}, "param": {"tmp_path": {"?": [[106, "def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_not_ask_if_no_input_and_rm_repo_file": {"param": {"tmp_path": {"?": [[199, "def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_make_sure_path_exists": {"var": {"directory_to_create": {"?": [[43, "    directory_to_create = Path(tmp_path, \"not_yet_created\")"]]}}, "param": {"tmp_path": {"?": [[36, "def test_make_sure_path_exists(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_not_ask_if_no_input_and_rm_repo_di": {"var": {"mock_read_user": {"?": [[186, "    mock_read_user = mocker.patch("]]}}, "param": {"mocker": {"?": [[180, "def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.make_readonly": {"var": {"mode": {"?": [[13, "    mode = Path.stat(path).st_mode"]]}}, "param": {"path": {"?": [[11, "def make_readonly(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_not_ask_if_no_input_and_rm_repo_fi": {"var": {"deleted": {"bool": [[212, "    deleted = utils.prompt_and_delete(str(repo_file), no_input=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_work_in": {"var": {"ch_to": {"?": [[78, "    ch_to = tmp_path"]]}, "cwd": {"?": [[77, "    cwd = Path.cwd()"]]}}, "param": {"tmp_path": {"?": [[75, "def test_work_in(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_reuse.answer": {"param": {"default": {"?": [[161, "    def answer(question, default):"]]}, "question": {"?": [[161, "    def answer(question, default):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_make_sure_path_exists_correctly_handle_os_erro": {"func": {"raiser": {"() -> None": [[62, "    def raiser(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_rm_repo_file": {"param": {"tmp_path": {"?": [[124, "def test_prompt_should_ask_and_rm_repo_file(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_not_ask_if_no_input_and_rm": {"var": {"repo_dir": {"?": [[189, "    repo_dir = Path(tmp_path, 'repo')"]]}, "repo_file": {"?": [[209, "    repo_file = tmp_path.joinpath('repo.zip')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_make_sure_path_exists_correctly_handle_os_": {"param": {"mocker": {"?": [[55, "def test_make_sure_path_exists_correctly_handle_os_error(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiec": {"func": {"test_prompt_should_ask_and_rm_repo_dir": {"(?, ?) -> None": [[90, "def test_prompt_should_ask_and_rm_repo_dir(mocker, tmp_path):"]]}, "test_prompt_should_ask_and_exit_on_user_no_answer": {"(?, ?) -> None": [[106, "def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmp_path):"]]}, "test_prompt_should_not_ask_if_no_input_and_rm_repo_dir": {"(?, ?) -> None": [[180, "def test_prompt_should_not_ask_if_no_input_and_rm_repo_dir(mocker, tmp_path):"]]}, "test_prompt_should_not_ask_if_no_input_and_rm_repo_file": {"(?, ?) -> None": [[199, "def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmp_path):"]]}, "test_prompt_should_ask_and_rm_repo_file": {"(?, ?) -> None": [[124, "def test_prompt_should_ask_and_rm_repo_file(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_rm_repo_fi": {"var": {"deleted": {"bool": [[134, "    deleted = utils.prompt_and_delete(str(repo_file))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_reus": {"var": {"repo_dir": {"?": [[170, "    repo_dir = Path(tmp_path, 'repo')"]]}, "deleted": {"bool": [[173, "    deleted = utils.prompt_and_delete(str(repo_dir))"]]}}, "param": {"mocker": {"?": [[157, "def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_rm": {"var": {"repo_dir": {"?": [[96, "    repo_dir = Path(tmp_path, 'repo')"]]}, "repo_file": {"?": [[131, "    repo_file = tmp_path.joinpath('repo.zip')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_rm_repo_di": {"var": {"mock_read_user": {"?": [[93, "    mock_read_user = mocker.patch("]]}}, "param": {"mocker": {"?": [[90, "def test_prompt_should_ask_and_rm_repo_dir(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_exit_on_user_no_answ": {"var": {"repo_dir": {"?": [[113, "    repo_dir = Path(tmp_path, 'repo')"]]}, "mock_read_user": {"?": [[109, "    mock_read_user = mocker.patch("]]}}, "param": {"mocker": {"?": [[106, "def test_prompt_should_ask_and_exit_on_user_no_answer(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_reu": {"func": {"answer": {"(?, ?) -> bool": [[161, "    def answer(question, default):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils": {"func": {"make_readonly": {"? -> None": [[11, "def make_readonly(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_not_ask_if_no_input_and_rm_repo_fil": {"var": {"mock_read_user": {"?": [[205, "    mock_read_user = mocker.patch("]]}}, "param": {"mocker": {"?": [[199, "def test_prompt_should_not_ask_if_no_input_and_rm_repo_file(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_make_sure_path": {"var": {"existing_directory": {"?": [[42, "    existing_directory = tmp_path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_n": {"var": {"mock_read_user": {"?": [[144, "    mock_read_user = mocker.patch("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_rmtree": {"param": {"tmp_path": {"?": [[21, "def test_rmtree(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_rm_repo_fil": {"var": {"mock_read_user": {"?": [[127, "    mock_read_user = mocker.patch("]]}}, "param": {"mocker": {"?": [[124, "def test_prompt_should_ask_and_rm_repo_file(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_uti": {"func": {"test_prompt_should_ask_and_keep_repo_on_no_reuse": {"(?, ?) -> None": [[141, "def test_prompt_should_ask_and_keep_repo_on_no_reuse(mocker, tmp_path):"]]}, "test_prompt_should_ask_and_keep_repo_on_reuse": {"(?, ?) -> None": [[157, "def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on": {"var": {"mock_read_user": {"?": [[167, "    mock_read_user = mocker.patch("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_util": {"func": {"test_work_in": {"? -> None": [[75, "def test_work_in(tmp_path):"]]}, "test_make_sure_path_exists": {"? -> None": [[36, "def test_make_sure_path_exists(tmp_path):"]]}, "test_rmtree": {"? -> None": [[21, "def test_rmtree(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE": {"func": {"test_make_sure_path_exists_correctly_handle_os_error": {"? -> None": [[55, "def test_make_sure_path_exists_correctly_handle_os_error(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_utils.test_prompt_should_ask_and_keep_repo_on_reuse": {"param": {"tmp_path": {"?": [[157, "def test_prompt_should_ask_and_keep_repo_on_reuse(mocker, tmp_path):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_specify_output_dir.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.test_default_output_di": {"param": {"mocker": {"?": [[68, "def test_default_output_dir(mocker, template, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.mock_gen_context": {"param": {"mocker": {"?": [[35, "def mock_gen_context(mocker, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.test_default_output_dir": {"var": {"mock_gen_files": {"?": [[70, "    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')"]]}}, "param": {"context": {"?": [[68, "def test_default_output_dir(mocker, template, context):"]]}, "template": {"?": [[68, "def test_default_output_dir(mocker, template, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.mock_replay": {"param": {"mocker": {"?": [[47, "def mock_replay(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir": {"func": {"mock_gen_context": {"(?, ?) -> None": [[35, "def mock_gen_context(mocker, context):"]]}, "template": {"? -> str": [[27, "def template(tmpdir):"]]}, "context": {"() -> dict": [[8, "def context():"]]}, "test_api_invocation": {"(?, ?, ?, ?) -> None": [[52, "def test_api_invocation(mocker, template, output_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.test_api_invocati": {"param": {"context": {"?": [[52, "def test_api_invocation(mocker, template, output_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify": {"func": {"output_dir": {"? -> str": [[21, "def output_dir(tmpdir):"]]}, "test_default_output_dir": {"(?, ?, ?) -> None": [[68, "def test_default_output_dir(mocker, template, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_outpu": {"var": {"template_dir": {"?": [[29, "    template_dir = tmpdir.mkdir('template')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.test_api_invocation": {"param": {"mocker": {"?": [[52, "def test_api_invocation(mocker, template, output_dir, context):"]]}, "template": {"?": [[52, "def test_api_invocation(mocker, template, output_dir, context):"]]}, "output_dir": {"?": [[52, "def test_api_invocation(mocker, template, output_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.template": {"param": {"tmpdir": {"?": [[27, "def template(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.test_api_invocat": {"var": {"mock_gen_files": {"?": [[54, "    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.mock_prompt": {"param": {"mocker": {"?": [[41, "def mock_prompt(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.output_": {"param": {"tmpdir": {"?": [[21, "def output_dir(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_di": {"func": {"mock_prompt": {"? -> None": [[41, "def mock_prompt(mocker):"]]}, "mock_replay": {"? -> None": [[47, "def mock_replay(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_specify_output_dir.mock_gen_": {"param": {"context": {"?": [[35, "def mock_gen_context(mocker, context):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_read_user_dict.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_read_user_dict_default_valu": {"param": {"mocker": {"? -> None": [[100, "def test_read_user_dict_default_value(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_should_raise_type_": {"param": {"mocker": {"?": [[76, "def test_should_raise_type_error(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_u": {"func": {"test_process_json_deep_dict": {"() -> None": [[40, "def test_process_json_deep_dict():"]]}, "test_process_json_valid_json": {"() -> None": [[27, "def test_process_json_valid_json():"]]}, "test_process_json_invalid_json": {"() -> None": [[11, "def test_process_json_invalid_json():"]]}, "test_process_json_non_dict": {"() -> None": [[19, "def test_process_json_non_dict():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_should_call_prompt_with_process_json": {"var": {"mock_prompt": {"?": [[91, "    mock_prompt = mocker.patch('cookiecutter.prompt.click.prompt', autospec=True)"]]}}, "param": {"mocker": {"?": [[86, "def test_should_call_prompt_with_process_json(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_should_raise_type_e": {"var": {"prompt": {"?": [[78, "    prompt = mocker.patch('cookiecutter.prompt.click.prompt')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dic": {"func": {"test_should_raise_type_error": {"? -> None": [[76, "def test_should_raise_type_error(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_process_json_valid_json": {"var": {"user_value": {"str": [[32, "    user_value = '{\"name\": \"foobar\", \"bla\": [\"a\", 1, \"b\", false]}'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_process_json_deep_dict": {"var": {"user_value": {"str": [[45, "    user_value = '''{"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_dict.test_read_user_dict_default_value": {"var": {"mock_prompt": {"?": [[105, "    mock_prompt = mocker.patch("]]}, "val": {"dict": [[109, "    val = read_user_dict('name', {'project_slug': 'pytest-plugin'})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_should_call_prompt_with_process_json": {"? -> None": [[86, "def test_should_call_prompt_with_process_json(mocker):"]]}, "test_read_user_dict_default_value": {"? -> None": [[100, "def test_read_user_dict_default_value(mocker):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_determine_repo_dir_finds_subdirectories.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_should_find_existing_cookiecutter": {"var": {"template": {"?": [[33, "    template, user_config_data, cloned_cookiecutter_path"]]}}, "param": {"template": {"?": [[34, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.cloned_cookiecutter_path": {"var": {"cookiecutters_dir": {"?": [[18, "    cookiecutters_dir = user_config_data['cookiecutters_dir']"]]}}, "param": {"user_config_data": {"?": [[16, "def cloned_cookiecutter_path(user_config_data, template):"]]}, "template": {"?": [[16, "def cloned_cookiecutter_path(user_config_data, template):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories": {"func": {"template": {"() -> str": [[10, "def template():"]]}, "cloned_cookiecutter_path": {"(?, ?) -> str": [[16, "def cloned_cookiecutter_path(user_config_data, template):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_should_find_existing_cookiecu": {"var": {"project_dir": {"?": [[36, "    project_dir, cleanup = repository.determine_repo_dir("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.cloned_cookiecutter": {"var": {"cloned_template_path": {"str": [[20, "    cloned_template_path = os.path.join(cookiecutters_dir, template)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_should_find_existing_cook": {"param": {"user_config_data": {"?": [[34, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_local_repo_ty": {"var": {"wrong_full_cookiecutter_path": {"str": [[61, "    wrong_full_cookiecutter_path = os.path.join("]]}}, "param": {"cloned_cookiecutter_path": {"?": [[49, "def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_should_find_existing": {"param": {"cloned_cookiecutter_path": {"?": [[34, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.cloned_cookiec": {"var": {"subdir_template_path": {"str": [[24, "    subdir_template_path = os.path.join(cloned_template_path, 'my-dir')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_local_repo_typo": {"param": {"template": {"?": [[49, "def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectori": {"func": {"test_local_repo_typo": {"(?, ?, ?) -> None": [[49, "def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_sub": {"func": {"test_should_find_existing_cookiecutter": {"(?, ?, ?) -> None": [[32, "def test_should_find_existing_cookiecutter("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_finds_subdirectories.test_local_repo_typ": {"param": {"user_config_data": {"?": [[49, "def test_local_repo_typo(template, user_config_data, cloned_cookiecutter_path):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_output_folder.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_output_folder.test_output_folder": {"var": {"something2": {"str": [[35, "    something2 = open('output_folder/something.txt').read()"]]}, "something": {"str": [[32, "    something = \"\"\"Hi!"]]}, "context": {"?": [[27, "    context = generate.generate_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.tes": {"func": {"remove_output_folder": {"? -> None": [[17, "def remove_output_folder(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiec": {"func": {"test_output_folder": {"() -> None": [[25, "def test_output_folder():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_exception_when_output_folder_exists": {"() -> None": [[47, "def test_exception_when_output_folder_exists():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_output_folder.test_output": {"var": {"in_folder2": {"str": [[39, "    in_folder2 = open('output_folder/folder/in_folder.txt').read()"]]}, "in_folder": {"str": [[38, "    in_folder = \"The color is green and the letter is D.\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_output_folder.remove_output_fold": {"param": {"request": {"?": [[17, "def remove_output_folder(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_output_folder.test_exception_when_output_folder_exists": {"var": {"context": {"?": [[49, "    context = generate.generate_context("]]}, "output_folder": {"?": [[52, "    output_folder = context['cookiecutter']['test_name']"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_determine_repo_dir_clones_repo.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_repository_url_should_clon": {"var": {"project_dir": {"?": [[72, "    project_dir, cleanup = repository.determine_repo_dir("]]}}, "param": {"template_url": {"?": [[60, "def test_repository_url_should_clone(mocker, template_url, user_config_data):"]]}, "mocker": {"?": [[60, "def test_repository_url_should_clone(mocker, template_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_zipfile_unzi": {"param": {"template": {"?": [[17, "def test_zipfile_unzip(mocker, template, is_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determ": {"func": {"test_repository_url_should_clone": {"(?, ?, ?) -> None": [[60, "def test_repository_url_should_clone(mocker, template_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_zipfile_unz": {"var": {"project_dir": {"?": [[29, "    project_dir, cleanup = repository.determine_repo_dir("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_repository_url_should_cl": {"param": {"user_config_data": {"?": [[60, "def test_repository_url_should_clone(mocker, template_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_repository_url_should": {"var": {"mock_clone": {"?": [[66, "    mock_clone = mocker.patch("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_repository_url_with_no_context_fi": {"param": {"template_url": {"?": [[92, "def test_repository_url_with_no_context_file(mocker, template_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo": {"func": {"test_zipfile_unzip": {"(?, ?, ?, ?) -> None": [[17, "def test_zipfile_unzip(mocker, template, is_url, user_config_data):"]]}, "template_url": {"() -> str": [[52, "def template_url():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_d": {"func": {"test_repository_url_with_no_context_file": {"(?, ?, ?) -> None": [[92, "def test_repository_url_with_no_context_file(mocker, template_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_repository_url_with_no_context_fil": {"param": {"mocker": {"?": [[92, "def test_repository_url_with_no_context_file(mocker, template_url, user_config_data):"]]}, "user_config_data": {"?": [[92, "def test_repository_url_with_no_context_file(mocker, template_url, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repo_dir_clones_repo.test_zipfile_unzip": {"var": {"mock_clone": {"?": [[23, "    mock_clone = mocker.patch("]]}}, "param": {"is_url": {"?": [[17, "def test_zipfile_unzip(mocker, template, is_url, user_config_data):"]]}, "mocker": {"?": [[17, "def test_zipfile_unzip(mocker, template, is_url, user_config_data):"]]}, "user_config_data": {"?": [[17, "def test_zipfile_unzip(mocker, template, is_url, user_config_data):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_read_repo_password.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_repo_password": {"func": {"test_click_invocation": {"? -> None": [[5, "def test_click_invocation(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_repo_password.test_click_invocation": {"var": {"prompt": {"?": [[10, "    prompt = mocker.patch('click.prompt')"]]}}, "param": {"mocker": {"?": [[5, "def test_click_invocation(mocker):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/log.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutt": {"func": {"configure_logger": {"(str, None) -> None": [[19, "def configure_logger(stream_level='DEBUG', debug_file=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.log.configure_logg": {"var": {"file_handler": {"?": [[36, "        file_handler = logging.FileHandler(debug_file)"]]}, "stream_handler": {"?": [[46, "    stream_handler = logging.StreamHandler(stream=sys.stdout)"]]}}, "param": {"stream_level": {"str": [[19, "def configure_logger(stream_level='DEBUG', debug_file=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.log": {"var": {"LOG_FORMATS": {"dict": [[13, "LOG_FORMATS = {"]]}, "LOG_LEVELS": {"dict": [[5, "LOG_LEVELS = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.log.configure_": {"var": {"logger": {"?": [[26, "    logger = logging.getLogger('cookiecutter')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.log.configure_logger": {"var": {"log_level": {"?": [[43, "    log_level = LOG_LEVELS[stream_level]"]]}}, "param": {"debug_file": {"None": [[19, "def configure_logger(stream_level='DEBUG', debug_file=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.log.configu": {"var": {"log_formatter": {"?": [[42, "    log_formatter = logging.Formatter(LOG_FORMATS[stream_level])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.log.configure_l": {"var": {"debug_formatter": {"?": [[35, "        debug_formatter = logging.Formatter(LOG_FORMATS['DEBUG'])"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/zipfile.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.zipfile.unzip": {"var": {"retry": {"int": [[92, "                retry = 0"]], "None": [[99, "                        retry = None"]]}, "chunk": {"?": [[45, "                for chunk in r.iter_content(chunk_size=1024):"]]}, "clone_to_dir": {"str": [[27, "    clone_to_dir = os.path.expanduser(clone_to_dir)"]]}, "r": {"?": [[43, "            r = requests.get(zip_uri, stream=True)"]]}, "first_filename": {"?": [[62, "        first_filename = zip_file.namelist()[0]"]]}, "download": {"bool": [[37, "            download = prompt_and_delete(zip_path, no_input=no_input)"], [39, "            download = True"]]}, "identifier": {"str": [[33, "        identifier = zip_uri.rsplit('/', 1)[1]"]]}}, "param": {"is_url": {"bool": [[13, "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):"]]}, "clone_to_dir": {"str": [[13, "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.zipfile.unz": {"param": {"no_input": {"bool": [[13, "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.zipfile.un": {"var": {"zip_file": {"?": [[55, "        zip_file = ZipFile(zip_path)"]]}, "zip_path": {"str": [[34, "        zip_path = os.path.join(clone_to_dir, identifier)"], [50, "        zip_path = os.path.abspath(zip_uri)"]]}}, "param": {"zip_uri": {"{None | str}": [[13, "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.zipfile": {"var": {"unzip_path": {"str": [[72, "        unzip_path = os.path.join(unzip_base, project_name)"]]}}, "func": {"unzip": {"(None, bool, str, bool, None) -> str / (?, ?, str, bool, None) -> str / (str, bool, str, bool, None) -> str": [[13, "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.zipfil": {"var": {"unzip_base": {"?": [[71, "        unzip_base = tempfile.mkdtemp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.zipfile.unzi": {"var": {"password": {"None": [[95, "                        password = read_repo_password('Repo password')"]]}, "project_name": {"?": [[70, "        project_name = first_filename[:-1]"]]}}, "param": {"password": {"None": [[13, "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test-extensions/hello_extension/hello_extension.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_extension.HelloExtension.pars": {"var": {"node": {"?": [[22, "        node = parser.parse_expression()"]]}, "call_method": {"?": [[23, "        call_method = self.call_method('_hello', [node], lineno=lineno)"]]}, "lineno": {"?": [[21, "        lineno = next(parser.stream).lineno"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_extension.HelloExtension._hello": {"param": {"self": {"HelloExtension": [[15, "    def _hello(self, name):"]]}, "name": {"?": [[15, "    def _hello(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_extension.HelloExtensio": {"func": {"__init__": {"? -> ?": [[11, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_extension.HelloExtension.__init__": {"param": {"environment": {"?": [[11, "    def __init__(self, environment):"]]}, "self": {"HelloExtension": [[11, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_": {"class": {"HelloExtension": {"<HelloExtension>": [[6, "class HelloExtension(Extension):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_extension.HelloExtension.par": {"param": {"self": {"HelloExtension": [[19, "    def parse(self, parser):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-extensions.hello_extension.hello_extension.HelloExtension": {"var": {"tags": {"?": [[9, "    tags = set(['hello'])"]]}}, "param": {"parser": {"?": [[19, "    def parse(self, parser):"]]}}, "func": {"parse": {"(HelloExtension, ?) -> None": [[19, "    def parse(self, parser):"]]}, "_hello": {"(HelloExtension, ?) -> str": [[15, "    def _hello(self, name):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_repository_has_cookiecutter_json.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_repository_has_cookiecutter_json": {"func": {"test_valid_repository": {"() -> None": [[7, "def test_valid_repository():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_repository_has_cookiecutter_j": {"param": {"invalid_repository": {"?": [[15, "def test_invalid_repository(invalid_repository):"]]}}, "func": {"test_invalid_repository": {"? -> None": [[15, "def test_invalid_repository(invalid_repository):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/hooks.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run_script_with_": {"param": {"context": {"{dict | dict}": [[96, "def run_script_with_context(script_path, cwd, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.valid_hook": {"var": {"basename": {"str": [[30, "    basename = os.path.splitext(filename)[0]"]]}, "filename": {"str": [[29, "    filename = os.path.basename(hook_file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run_script": {"var": {"proc": {"?": [[82, "        proc = subprocess.Popen(script_command, shell=run_thru_shell, cwd=cwd)"]]}}, "param": {"cwd": {"str": [[67, "def run_script(script_path, cwd='.'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.ru": {"var": {"script_command": {"[str]": [[75, "        script_command = [sys.executable, script_path]"]], "{[?] | [str]}": [[77, "        script_command = [script_path]"]]}}, "param": {"hook_name": {"str": [[117, "def run_hook(hook_name, project_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run_script_with_context": {"var": {"env": {"StrictEnvironment": [[109, "        env = StrictEnvironment(context=context, keep_trailing_newline=True)"]]}, "_": {"str": [[103, "    _, extension = os.path.splitext(script_path)"]]}}, "param": {"cwd": {"str": [[96, "def run_script_with_context(script_path, cwd, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.fin": {"param": {"hooks_dir": {"str": [[39, "def find_hook(hook_name, hooks_dir='hooks'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hook": {"func": {"run_script": {"(str, str) -> ? / (?, str) -> ? / (?, ?) -> ?": [[67, "def run_script(script_path, cwd='.'):"]]}, "run_script_with_context": {"(str, str, dict) -> None / (str, ?, ?) -> None / (str, str, None) -> None / (?, ?, ?) -> None": [[96, "def run_script_with_context(script_path, cwd, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run_script_with_contex": {"var": {"output": {"?": [[111, "        output = template.render(**context)"]]}, "template": {"?": [[110, "        template = env.from_string(contents)"]]}, "contents": {"str": [[106, "        contents = file.read()"]]}}, "param": {"script_path": {"str": [[96, "def run_script_with_context(script_path, cwd, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run_hook": {"var": {"script": {"str": [[130, "    for script in scripts:"]]}, "scripts": {"[str]": [[125, "    scripts = find_hook(hook_name)"]]}}, "param": {"project_dir": {"str": [[117, "def run_hook(hook_name, project_dir, context):"]]}, "context": {"dict": [[117, "def run_hook(hook_name, project_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.valid_hoo": {"var": {"backup_file": {"int": [[34, "    backup_file = filename.endswith('~')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.valid": {"var": {"matching_hook": {"bool": [[32, "    matching_hook = basename == hook_name"]]}}, "param": {"hook_name": {"str": [[22, "def valid_hook(hook_file, hook_name):"]]}, "hook_file": {"str": [[22, "def valid_hook(hook_file, hook_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.vali": {"var": {"supported_hook": {"bool": [[33, "    supported_hook = basename in _HOOKS"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.find_hook": {"var": {"scripts": {"[str]": [[57, "    scripts = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run_scrip": {"var": {"run_thru_shell": {"int": [[73, "    run_thru_shell = sys.platform.startswith('win')"]]}, "exit_status": {"?": [[83, "        exit_status = proc.wait()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.run": {"param": {"script_path": {"str": [[67, "def run_script(script_path, cwd='.'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks.find": {"var": {"hook_file": {"str": [[58, "    for hook_file in os.listdir(hooks_dir):"]]}}, "param": {"hook_name": {"str": [[39, "def find_hook(hook_name, hooks_dir='hooks'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.hooks": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)"]]}, "EXIT_SUCCESS": {"int": [[19, "EXIT_SUCCESS = 0"]]}, "_HOOKS": {"[str]": [[15, "_HOOKS = ["]]}}, "func": {"find_hook": {"(?, str) -> [str] / (str, str) -> [str]": [[39, "def find_hook(hook_name, hooks_dir='hooks'):"]]}, "valid_hook": {"(?, ?) -> None / (str, str) -> None / (str, ?) -> None": [[22, "def valid_hook(hook_file, hook_name):"]]}, "run_hook": {"(str, str, dict) -> None / (str, str, None) -> None / (?, ?, ?) -> None": [[117, "def run_hook(hook_name, project_dir, context):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_cookiecutter_local_no_input.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_input.test_cookiecutter_no_input_return": {"var": {"project_dir": {"str": [[37, "    project_dir = main.cookiecutter(path, no_input=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_input.remove_additional_di": {"param": {"request": {"?": [[15, "def remove_additional_dirs(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_input.test_cookiecutter_dict_values_in_contex": {"var": {"project_dir": {"str": [[76, "    project_dir = main.cookiecutter('tests/fake-repo-dict', no_input=True)"]]}, "contents": {"str": [[80, "        contents = fh.read()"]]}}}, ".home.xxm.Desktop.EMSE.d": {"func": {"test_cookiecutter_template_cleanup": {"? -> None": [[126, "def test_cookiecutter_template_cleanup(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_input.test_cookiecutter_no_input_return_project_dir": {"param": {"path": {"?": [[35, "def test_cookiecutter_no_input_return_project_dir(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_inpu": {"func": {"fin_remove_additional_dirs": {"() -> None": [[18, "    def fin_remove_additional_dirs():"]]}, "remove_additional_dirs": {"? -> None": [[15, "def remove_additional_dirs(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_input.test_cookiecutter_no_input_return_rendered_fil": {"var": {"project_dir": {"str": [[66, "    project_dir = main.cookiecutter('tests/fake-repo-pre', no_input=True)"]]}, "contents": {"str": [[69, "        contents = fh.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local": {"func": {"test_cookiecutter_no_input_extra_context": {"() -> None": [[46, "def test_cookiecutter_no_input_extra_context():"]]}, "test_cookiecutter_no_input_return_project_dir": {"? -> None": [[35, "def test_cookiecutter_no_input_return_project_dir(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_input.test_cookiecutter_template_cleanup": {"param": {"mocker": {"?": [[126, "def test_cookiecutter_template_cleanup(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_loca": {"func": {"test_cookiecutter_no_input_return_rendered_file": {"() -> None": [[64, "def test_cookiecutter_no_input_return_rendered_file():"]]}}}, ".home.xxm.Desktop.EMSE": {"func": {"test_cookiecutter_templated_context": {"() -> None": [[57, "def test_cookiecutter_templated_context():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_no_inp": {"func": {"test_cookiecutter_dict_values_in_context": {"() -> None": [[74, "def test_cookiecutter_dict_values_in_context():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_environment.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_environment.test_env_should_raise_for_unknown_extensi": {"var": {"context": {"dict": [[10, "    context = {'cookiecutter': {'_extensions': ['foobar']}}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_environment.test_env_should_come_with_default_extensions": {"var": {"env": {"StrictEnvironment": [[20, "    env = StrictEnvironment(keep_trailing_newline=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_environm": {"func": {"test_env_should_raise_for_unknown_extension": {"() -> None": [[8, "def test_env_should_raise_for_unknown_extension():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_envir": {"func": {"test_env_should_come_with_default_extensions": {"() -> None": [[18, "def test_env_should_come_with_default_extensions():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_get_user_config.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_vars_for_direct": {"var": {"user_config": {"?": [[146, "    user_config = config.get_user_config(config_file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_force_default": {"var": {"user_config": {"?": [[119, "    user_config = config.get_user_config(custom_config_path, default_config=True)"]]}}, "param": {"user_config": {"?": [[125, "def test_expand_user_for_directories_in_config(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_vars_for_directories_in_config": {"param": {"monkeypatch": {"?": [[140, "def test_expand_vars_for_directories_in_config(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_force_default_config": {"param": {"mocker": {"?": [[115, "def test_force_default_config(mocker, custom_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user": {"func": {"test_specify_config_path": {"(?, ?, ?) -> None": [[90, "def test_specify_config_path(mocker, custom_config_path, custom_config):"]]}, "custom_config_path": {"() -> str": [[85, "def custom_config_path():"]]}, "custom_config": {"() -> dict": [[42, "def custom_config():"]]}, "test_default_config_path": {"? -> None": [[100, "def test_default_config_path(user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_user_for_directories": {"var": {"config_file": {"str": [[133, "    config_file = 'tests/test-config/config-expand-user.yaml'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_specify": {"param": {"custom_config_path": {"?": [[90, "def test_specify_config_path(mocker, custom_config_path, custom_config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_defaul": {"param": {"user_config_path": {"?": [[100, "def test_default_config_path(user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_default_config_from_env_variabl": {"var": {"monkeypatch": {"?": [[106, "    monkeypatch, custom_config_path, custom_config"]]}, "user_config": {"?": [[111, "    user_config = config.get_user_config()"]]}}, "param": {"monkeypatch": {"str": [[107, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"param": {"test_expand_user_for_directories_in_config": {"config": [[125, "def test_expand_user_for_directories_in_config(monkeypatch):"]]}}, "func": {"user_config_path": {"() -> str": [[12, "def user_config_path():"]]}, "test_get_user_config_invalid": {"? -> None": [[71, "def test_get_user_config_invalid(user_config_path):"]]}, "test_get_user_config_valid": {"(?, ?) -> None": [[62, "def test_get_user_config_valid(user_config_path, custom_config):"]]}, "test_expand_user_for_directories_in_config": {"? -> None": [[125, "def test_expand_user_for_directories_in_config(monkeypatch):"]]}, "test_force_default_config": {"(?, ?) -> None": [[115, "def test_force_default_config(mocker, custom_config_path):"]]}, "test_default_config_from_env_variable": {"(?, ?, ?) -> None": [[105, "def test_default_config_from_env_variable("]]}, "test_get_user_config_nonexistent": {"() -> None": [[79, "def test_get_user_config_nonexistent():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_u": {"func": {"test_expand_vars_for_directories_in_config": {"? -> None": [[140, "def test_expand_vars_for_directories_in_config(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_specify_config_path": {"var": {"user_config": {"?": [[94, "    user_config = config.get_user_config(custom_config_path)"]]}, "spy_get_config": {"?": [[92, "    spy_get_config = mocker.spy(config, 'get_config')"]]}}, "param": {"custom_config": {"?": [[90, "def test_specify_config_path(mocker, custom_config_path, custom_config):"]]}, "mocker": {"?": [[90, "def test_specify_config_path(mocker, custom_config_path, custom_config):"]]}}}, ".home.xxm.Desktop.EMSE.d": {"var": {"user_config_path_backup": {"str": [[24, "    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_get_user_config_valid": {"var": {"conf": {"?": [[65, "    conf = config.get_user_config()"]]}}, "param": {"user_config_path": {"?": [[62, "def test_get_user_config_valid(user_config_path, custom_config):"]]}, "custom_config": {"?": [[62, "def test_get_user_config_valid(user_config_path, custom_config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_force_defaul": {"var": {"spy_get_config": {"?": [[117, "    spy_get_config = mocker.spy(config, 'get_config')"]]}}, "param": {"custom_config_path": {"?": [[115, "def test_force_default_config(mocker, custom_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_default_config_from_env_variable": {"param": {"custom_config_path": {"?": [[107, "):"]]}, "custom_config": {"(?, ?, ?) -> None": [[107, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_get_user_config_invalid": {"param": {"user_config_path": {"?": [[71, "def test_get_user_config_invalid(user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_user_for_directories_in_config": {"param": {"monkeypatch": {"?": [[125, "def test_expand_user_for_directories_in_config(monkeypatch):"]]}}, "func": {"_expanduser": {"? -> ?": [[128, "    def _expanduser(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_user_for_direct": {"var": {"user_config": {"?": [[135, "    user_config = config.get_user_config(config_file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config": {"func": {"back_up_rc": {"? -> None": [[18, "def back_up_rc(user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_user_for_directories_in_config._expanduser": {"param": {"path": {"?": [[128, "    def _expanduser(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.test_expand_vars_for_directories": {"var": {"config_file": {"str": [[144, "    config_file = 'tests/test-config/config-expand-vars.yaml'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_user_config.back": {"param": {"user_config_path": {"?": [[18, "def back_up_rc(user_config_path):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/vcs.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs": {"var": {"clone": {"bool": [[89, "        clone = prompt_and_delete(repo_dir, no_input=no_input)"], [91, "        clone = True"]]}, "logger": {"?": [[15, "logger = logging.getLogger(__name__)"]]}, "clone_to_dir": {"str": [[68, "    clone_to_dir = os.path.expanduser(clone_to_dir)"]]}, "BRANCH_ERRORS": {"[str]": [[18, "BRANCH_ERRORS = ["]]}}, "param": {"clone_to_dir": {"str": [[57, "def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):"]]}}, "func": {"clone": {"(?, None, str, bool) -> str / (str, None, str, bool) -> str / (None, None, str, bool) -> str": [[57, "def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):"]]}, "identify_repo": {"? -> (str, ?) / str -> (str, str) / None -> (str, None)": [[24, "def identify_repo(repo_url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs.is_vcs_installed": {"param": {"repo_type": {"str": [[48, "def is_vcs_installed(repo_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs.identif": {"var": {"repo_type": {"str": [[34, "        repo_type = repo_url_values[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs.clone": {"var": {"msg": {"str": [[76, "        msg = \"'{0}' is not installed.\".format(repo_type)"]]}, "output": {"?": [[107, "            output = clone_error.output.decode('utf-8')"]]}}, "param": {"no_input": {"bool": [[57, "def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs.cl": {"var": {"repo_name": {"str": [[80, "    repo_name = os.path.split(repo_url)[1]"], [82, "        repo_name = repo_name.split(':')[-1].rsplit('.git')[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs.identify": {"var": {"repo_url_values": {"[str]": [[32, "    repo_url_values = repo_url.split('+')"]]}}, "param": {"repo_url": {"{None | str}": [[24, "def identify_repo(repo_url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter": {"func": {"is_vcs_installed": {"? -> bool / str -> bool": [[48, "def is_vcs_installed(repo_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.vcs.clon": {"var": {"repo_dir": {"str": [[83, "        repo_dir = os.path.normpath(os.path.join(clone_to_dir, repo_name))"], [85, "        repo_dir = os.path.normpath(os.path.join(clone_to_dir, repo_name))"]]}, "repo_type": {"str": [[72, "    repo_type, repo_url = identify_repo(repo_url)"]]}, "repo_url": {"str": [[79, "    repo_url = repo_url.rstrip('/')"]]}}, "param": {"checkout": {"None": [[57, "def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):"]]}, "repo_url": {"{None | str}": [[57, "def clone(repo_url, checkout=None, clone_to_dir='.', no_input=False):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/cli.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.list_installed_templat": {"param": {"passed_config_file": {"?": [[47, "def list_installed_templates(default_config, passed_config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.validate_extra_conte": {"param": {"ctx": {"?": [[33, "def validate_extra_context(ctx, param, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.aul": {"var": {"no_input": {"?": [[147, "    no_input,"]]}, "accept_hooks": {"?": [[158, "    accept_hooks,"]]}, "context_str": {"?": [[221, "        context_str = json.dumps(undefined_err.context, indent=4, sort_keys=True)"]]}, "_accept_hooks": {"bool": [[185, "        _accept_hooks = accept_hooks == \"yes\""]], "?": [[183, "        _accept_hooks = click.confirm(\"Do you want to execute hooks?\")"]]}, "overwrite_if_exists": {"?": [[151, "    overwrite_if_exists,"]]}, "output_dir": {"?": [[152, "    output_dir,"]]}, "directory": {"?": [[156, "    directory,"]]}, "extra_context": {"?": [[146, "    extra_context,"]]}, "checkout": {"?": [[148, "    checkout,"]]}}, "param": {"no_input": {"?": [[161, "):"]]}, "accept_hooks": {"?": [[161, "):"]]}, "overwrite_if_exists": {"?": [[161, "):"]]}, "output_dir": {"?": [[161, "):"]]}, "directory": {"?": [[161, "):"]]}, "extra_context": {"?": [[161, "):"]]}, "checkout": {"?": [[161, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecu": {"func": {"validate_extra_context": {"(?, ?, ?) -> None": [[33, "def validate_extra_context(ctx, param, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.list_installed": {"var": {"template_names": {"[str]": [[58, "    template_names = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.ault": {"var": {"debug_file": {"?": [[155, "    debug_file,"]]}, "replay_file": {"?": [[159, "    replay_file,"]]}, "replay": {"?": [[150, "    replay,"], [188, "        replay = replay_file"]]}, "config_file": {"?": [[153, "    config_file,"]]}, "verbose": {"?": [[149, "    verbose,"]]}}, "param": {"debug_file": {"?": [[161, "):"]]}, "replay_file": {"?": [[161, "):"]]}, "replay": {"?": [[161, "):"]]}, "config_file": {"?": [[161, "):"]]}, "verbose": {"?": [[161, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.list_installed_templates": {"var": {"config": {"?": [[49, "    config = get_user_config(passed_config_file, default_config)"]]}, "cookiecutter_folder": {"?": [[50, "    cookiecutter_folder = config.get('cookiecutters_dir')"]]}, "name": {"str": [[66, "    for name in template_names:"]]}}, "param": {"default_config": {"?": [[47, "def list_installed_templates(default_config, passed_config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.c": {"func": {"list_installed_templates": {"(?, ?) -> None": [[47, "def list_installed_templates(default_config, passed_config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.au": {"var": {"skip_if_file_exists": {"?": [[157, "    skip_if_file_exists,"]]}, "list_installed": {"?": [[160, "    list_installed,"]]}, "template": {"?": [[145, "    template,"]]}}, "param": {"skip_if_file_exists": {"?": [[161, "):"]]}, "list_installed": {"?": [[161, "):"]]}, "template": {"?": [[161, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cl": {"func": {"version_msg": {"() -> str": [[25, "def version_msg():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.version_": {"var": {"message": {"str": [[29, "    message = 'Cookiecutter %(version)s from {} (Python {})'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.version_msg": {"var": {"python_version": {"str": [[27, "    python_version = sys.version[:3]"]]}, "location": {"str": [[28, "    location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter": {"var": {"default_config": {"?": [[154, "    default_config,"]]}}, "param": {"default_config": {"?": [[161, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.cli.validate_extra_context": {"var": {"s": {"?": [[35, "    for s in value:"]]}}, "param": {"value": {"?": [[33, "def validate_extra_context(ctx, param, value):"]]}, "param": {"?": [[33, "def validate_extra_context(ctx, param, value):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/config.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cook": {"func": {"get_user_config": {"(?, ?) -> ? / (None, bool) -> ? / (?, bool) -> ? / (str, bool) -> ?": [[82, "def get_user_config(config_file=None, default_config=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.config._expand_": {"var": {"path": {"str": [[31, "    path = os.path.expandvars(path)"], [32, "    path = os.path.expanduser(path)"]]}}, "param": {"path": {"?": [[29, "def _expand_path(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutt": {"func": {"merge_configs": {"(?, ?) -> None / (str, dict) -> None / (dict, ?) -> None / ({dict | str}, dict) -> None / (?, dict) -> None / (dict, dict) -> None / ({dict | dict | str}, dict) -> None": [[36, "def merge_configs(default, overwrite):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.config.merge_configs": {"var": {"new_config": {"?": [[42, "    new_config = copy.deepcopy(default)"]]}, "k": {"?": [[44, "    for k, v in overwrite.items():"]]}}, "param": {"default": {"{dict | dict | dict | dict | str}": [[36, "def merge_configs(default, overwrite):"]]}, "overwrite": {"{dict | dict}": [[36, "def merge_configs(default, overwrite):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.config.get_config": {"var": {"yaml_dict": {"?": [[65, "            yaml_dict = poyo.parse_string(file_handle.read())"]]}, "raw_cookies_dir": {"?": [[76, "    raw_cookies_dir = config_dict['cookiecutters_dir']"]]}, "raw_replay_dir": {"?": [[73, "    raw_replay_dir = config_dict['replay_dir']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.config.ge": {"var": {"config_dict": {"None": [[71, "    config_dict = merge_configs(DEFAULT_CONFIG, yaml_dict)"]]}}, "param": {"config_path": {"str": [[55, "def get_config(config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.config.get_user": {"var": {"env_config_file": {"str": [[110, "        env_config_file = os.environ['COOKIECUTTER_CONFIG']"]]}}, "param": {"config_file": {"str": [[82, "def get_user_config(config_file=None, default_config=False):"]]}, "default_config": {"bool": [[82, "def get_user_config(config_file=None, default_config=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.config": {"var": {"USER_CONFIG_PATH": {"str": [[13, "USER_CONFIG_PATH = os.path.expanduser('~/.cookiecutterrc')"]]}, "BUILTIN_ABBREVIATIONS": {"dict": [[15, "BUILTIN_ABBREVIATIONS = {"]]}, "DEFAULT_CONFIG": {"dict": [[21, "DEFAULT_CONFIG = {"]]}}, "func": {"_expand_path": {"? -> str": [[29, "def _expand_path(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter": {"func": {"get_config": {"None -> ? / ? -> ? / str -> ?": [[55, "def get_config(config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.confi": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/vcs/test_is_vcs_installed.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_is_vcs_installed": {"(?, ?, ?) -> None": [[11, "def test_is_vcs_installed(mocker, which_return, result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_is_vcs_installed.test_is_vcs_installed": {"param": {"which_return": {"?": [[11, "def test_is_vcs_installed(mocker, which_return, result):"]]}, "mocker": {"?": [[11, "def test_is_vcs_installed(mocker, which_return, result):"]]}, "result": {"?": [[11, "def test_is_vcs_installed(mocker, which_return, result):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/replay.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.get_file_name": {"var": {"suffix": {"str": [[14, "    suffix = '.json' if not template_name.endswith('.json') else ''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.get": {"var": {"file_name": {"str": [[15, "    file_name = '{}{}'.format(template_name, suffix)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.dum": {"var": {"replay_file": {"str": [[33, "    replay_file = get_file_name(replay_dir, template_name)"]]}}, "param": {"replay_dir": {"?": [[19, "def dump(replay_dir, template_name, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.du": {"param": {"template_name": {"str": [[19, "def dump(replay_dir, template_name, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.dump": {"param": {"context": {"{dict | dict | str}": [[19, "def dump(replay_dir, template_name, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.load": {"var": {"replay_file": {"str": [[44, "    replay_file = get_file_name(replay_dir, template_name)"]]}, "context": {"?": [[47, "        context = json.load(infile)"]]}}, "param": {"template_name": {"str": [[39, "def load(replay_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay": {"func": {"load": {"(?, None) -> None / (str, str) -> None / (?, str) -> None / (?, ?) -> None": [[39, "def load(replay_dir, template_name):"]]}, "get_file_name": {"(str, ?) -> str / (?, None) -> str / (str, str) -> str / (?, str) -> str / (?, ?) -> str": [[12, "def get_file_name(replay_dir, template_name):"]]}, "dump": {"(?, ?, str) -> None / (?, None, ?) -> None / (?, str, dict) -> None / (?, ?, ?) -> None / (?, str, ?) -> None / (?, ?, dict) -> None": [[19, "def dump(replay_dir, template_name, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.get_fi": {"param": {"template_name": {"str": [[12, "def get_file_name(replay_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.lo": {"param": {"replay_dir": {"str": [[39, "def load(replay_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.replay.get_file_nam": {"param": {"replay_dir": {"str": [[12, "def get_file_name(replay_dir, template_name):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_generate_file.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_random_ascii_stri": {"var": {"generated_text": {"str": [[75, "        generated_text = f.read()"]]}}, "param": {"length": {"?": [[67, "def test_generate_file_random_ascii_string(env, length, punctuation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_does_not_translate_crlf_newlines_to_": {"var": {"infile": {"str": [[159, "    infile = 'tests/files/{{cookiecutter.generate_file}}_crlf_newlines.txt'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_fil": {"var": {"environment": {"StrictEnvironment": [[32, "    environment = StrictEnvironment()"]]}}, "func": {"tear_down": {"() -> None": [[14, "def tear_down():"]]}, "expected_msg": {"() -> str": [[117, "def expected_msg():"]]}, "env": {"() -> StrictEnvironment": [[30, "def env():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_does_not_translate_lf_newlines_to_crlf": {"var": {"simple_text": {"str": [[152, "        simple_text = f.readline()"]]}}, "param": {"tmp_path": {"?": [[139, "def test_generate_file_does_not_translate_lf_newlines_to_crlf(env, tmp_path):"]]}, "env": {"?": [[139, "def test_generate_file_does_not_translate_lf_newlines_to_crlf(env, tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"func": {"test_generate_file_does_not_translate_lf_newlines_to_crlf": {"(?, ?) -> None": [[139, "def test_generate_file_does_not_translate_lf_newlines_to_crlf(env, tmp_path):"]]}, "test_generate_file_random_ascii_string": {"(?, ?, ?) -> None": [[67, "def test_generate_file_random_ascii_string(env, length, punctuation):"]]}, "test_generate_file": {"? -> None": [[37, "def test_generate_file(env):"]]}, "test_generate_file_jsonify_filter": {"? -> None": [[52, "def test_generate_file_jsonify_filter(env):"]]}, "test_generate_file_with_false_condition": {"? -> None": [[99, "def test_generate_file_with_false_condition(env):"]]}, "test_generate_file_verbose_template_syntax_error": {"(?, ?) -> None": [[127, "def test_generate_file_verbose_template_syntax_error(env, expected_msg):"]]}, "test_generate_file_does_not_translate_crlf_newlines_to_lf": {"? -> None": [[157, "def test_generate_file_does_not_translate_crlf_newlines_to_lf(env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_does_not_translate_lf_newlines_to_crl": {"var": {"gf": {"str": [[150, "    gf = 'tests/files/cheese_lf_newlines.txt'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_jsonify_filter": {"var": {"data": {"dict": [[55, "    data = {'jsonify_file': 'cheese', 'type': 'roquefort'}"]]}, "infile": {"str": [[54, "    infile = 'tests/files/{{cookiecutter.jsonify_file}}.txt'"]]}}, "param": {"env": {"?": [[52, "def test_generate_file_jsonify_filter(env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_does_not_translate_lf_newlines_to_cr": {"var": {"infile": {"str": [[141, "    infile = 'tests/files/{{cookiecutter.generate_file}}_lf_newlines.txt'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_verbose_template_syntax_error": {"param": {"expected_msg": {"?": [[127, "def test_generate_file_verbose_template_syntax_error(env, expected_msg):"]]}, "env": {"?": [[127, "def test_generate_file_verbose_template_syntax_error(env, expected_msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_random_ascii_string": {"var": {"data": {"dict": [[70, "    data = {'random_string_file': 'cheese'}"]]}, "infile": {"str": [[69, "    infile = 'tests/files/{{cookiecutter.random_string_file}}.txt'"]]}, "context": {"dict": [[71, "    context = {\"cookiecutter\": data, \"length\": length, \"punctuation\": punctuation}"]]}}, "param": {"punctuation": {"?": [[67, "def test_generate_file_random_ascii_string(env, length, punctuation):"]]}, "env": {"?": [[67, "def test_generate_file_random_ascii_string(env, length, punctuation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_with_false_conditio": {"var": {"infile": {"str": [[104, "    infile = ("]]}}, "param": {"env": {"?": [[99, "def test_generate_file_with_false_condition(env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.expected_": {"var": {"msg": {"str": [[119, "    msg = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_does_not_translate_crlf_newlines_to_lf": {"var": {"simple_text": {"str": [[170, "        simple_text = f.readline()"]]}}, "param": {"env": {"?": [[157, "def test_generate_file_does_not_translate_crlf_newlines_to_lf(env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_": {"var": {"infile": {"str": [[39, "    infile = 'tests/files/{{cookiecutter.generate_file}}.txt'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_generate_file_with_true_condition": {"? -> None": [[79, "def test_generate_file_with_true_condition(env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_does_not_translate_crlf_newlines_to_l": {"var": {"gf": {"str": [[168, "    gf = 'tests/files/cheese_crlf_newlines.txt'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_jsonify_fil": {"var": {"generated_text": {"str": [[61, "        generated_text = f.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_file_with_true_conditio": {"var": {"infile": {"str": [[84, "    infile = ("]]}, "generated_text": {"str": [[95, "        generated_text = f.read()"]]}}, "param": {"env": {"?": [[79, "def test_generate_file_with_true_condition(env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_file.test_generate_fil": {"var": {"generated_text": {"str": [[48, "        generated_text = f.read()"]]}}, "param": {"env": {"?": [[37, "def test_generate_file(env):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/exceptions.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cook": {"class": {"OutputDirExistsException": {"<OutputDirExistsException>": [[85, "class OutputDirExistsException(CookiecutterException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.excep": {"class": {"UnknownExtension": {"<UnknownExtension>": [[133, "class UnknownExtension(CookiecutterException):"]]}, "MissingProjectDir": {"<MissingProjectDir>": [[32, "class MissingProjectDir(CookiecutterException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.exceptions.UndefinedVariableInTemplate.__str__": {"param": {"self": {"UndefinedVariableInTemplate": [[124, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.exc": {"class": {"InvalidZipRepository": {"<InvalidZipRepository>": [[157, "class InvalidZipRepository(CookiecutterException):"]]}, "RepositoryCloneFailed": {"<RepositoryCloneFailed>": [[149, "class RepositoryCloneFailed(CookiecutterException):"]]}, "RepositoryNotFound": {"<RepositoryNotFound>": [[141, "class RepositoryNotFound(CookiecutterException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.exceptions.UndefinedVariableInTemplate.__init__": {"param": {"self": {"UndefinedVariableInTemplate": [[118, "    def __init__(self, message, error, context):"]]}, "message": {"str": [[118, "    def __init__(self, message, error, context):"]]}, "context": {"dict": [[118, "    def __init__(self, message, error, context):"]]}, "error": {"?": [[118, "    def __init__(self, message, error, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.exceptions.UndefinedVariableInTemplate": {"func": {"__str__": {"UndefinedVariableInTemplate -> None": [[124, "    def __str__(self):"]]}, "__init__": {"? -> ?": [[118, "    def __init__(self, message, error, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.excepti": {"class": {"VCSNotInstalled": {"<VCSNotInstalled>": [[69, "class VCSNotInstalled(CookiecutterException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.exceptions": {"class": {"UndefinedVariableInTemplate": {"<UndefinedVariableInTemplate>": [[110, "class UndefinedVariableInTemplate(CookiecutterException):"]]}, "NonTemplatedInputDirException": {"<NonTemplatedInputDirException>": [[12, "class NonTemplatedInputDirException(CookiecutterException):"]]}, "UnknownRepoType": {"<UnknownRepoType>": [[61, "class UnknownRepoType(CookiecutterException):"]]}, "FailedHookException": {"<FailedHookException>": [[102, "class FailedHookException(CookiecutterException):"]]}, "InvalidModeException": {"<InvalidModeException>": [[93, "class InvalidModeException(CookiecutterException):"]]}, "UnknownTemplateDirException": {"<UnknownTemplateDirException>": [[21, "class UnknownTemplateDirException(CookiecutterException):"]]}, "ContextDecodingException": {"<ContextDecodingException>": [[77, "class ContextDecodingException(CookiecutterException):"]]}, "CookiecutterException": {"<CookiecutterException>": [[4, "class CookiecutterException(Exception):"]]}, "InvalidConfiguration": {"<InvalidConfiguration>": [[52, "class InvalidConfiguration(CookiecutterException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter": {"class": {"ConfigDoesNotExistException": {"<ConfigDoesNotExistException>": [[43, "class ConfigDoesNotExistException(CookiecutterException):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/docs/conf.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"var": {"texinfo_documents": {"[(str, str, str, str, str, str, str)]": [[296, "texinfo_documents = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.docs.conf.Mock.__call__": {"param": {"self": {"Mock": [[36, "    def __call__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.docs.con": {"var": {"source_suffix": {"dict": [[88, "source_suffix = {'.rst': 'restructuredtext', '.md': 'markdown'}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.docs.conf.Mock.__init__": {"param": {"self": {"Mock": [[33, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.docs.conf.Mock.__getattr__": {"var": {"mockType": {"?": [[44, "            mockType = type(name, (), {})"]]}}, "param": {"name": {"?": [[40, "    def __getattr__(cls, name):"]]}, "cls": {"<Mock>": [[40, "    def __getattr__(cls, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.docs.conf": {"var": {"pygments_style": {"str": [[138, "pygments_style = 'sphinx'"]]}, "htmlhelp_basename": {"str": [[226, "htmlhelp_basename = 'cookiecutterdoc'"]]}, "html_theme": {"str": [[153, "html_theme = 'sphinx_rtd_theme'"]]}, "master_doc": {"str": [[94, "master_doc = 'index'"]]}, "MOCK_MODULES": {"[str]": [[51, "MOCK_MODULES = ['yaml']"]]}, "copyright": {"str": [[98, "copyright = '2013-2019, Audrey Roy and Cookiecutter community'"]]}, "epub_title": {"str": [[324, "epub_title = 'cookiecutter'"]]}, "exclude_patterns": {"[str]": [[121, "exclude_patterns = ['_build']"]]}, "epub_author": {"str": [[325, "epub_author = 'Audrey Roy'"]]}, "version": {"str": [[105, "version = cookiecutter.__version__"]]}, "mod_name": {"str": [[52, "for mod_name in MOCK_MODULES:"]]}, "man_pages": {"[(str, str, str, [str], int)]": [[277, "man_pages = ["]]}, "cwd": {"str": [[57, "cwd = os.getcwd()"]]}, "parent": {"str": [[58, "parent = os.path.dirname(cwd)"]]}, "templates_path": {"[str]": [[85, "templates_path = ['_templates']"]]}, "latex_documents": {"[(str, str, str, str, str)]": [[242, "latex_documents = ["]]}, "html_static_path": {"[?]": [[182, "html_static_path = []"]]}, "intersphinx_mapping": {"dict": [[380, "intersphinx_mapping = {'http://docs.python.org/': None}"]]}, "epub_copyright": {"str": [[327, "epub_copyright = '2013-2019, Audrey Roy and Cookiecutter community'"]]}, "latex_elements": {"dict": [[231, "latex_elements = {"]]}, "project": {"str": [[97, "project = 'cookiecutter'"]]}, "extensions": {"[str]": [[71, "extensions = ["]]}, "release": {"str": [[107, "release = cookiecutter.__version__"]]}, "epub_publisher": {"str": [[326, "epub_publisher = 'Audrey Roy and Cookiecutter community'"]]}, "suppress_warnings": {"[str]": [[147, "suppress_warnings = ['image.nonlocal_uri']"]]}}, "class": {"Mock": {"<Mock>": [[32, "class Mock(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.docs.conf.Mock": {"func": {"__call__": {"Mock -> Mock": [[36, "    def __call__(self, *args, **kwargs):"]]}, "__getattr__": {"(<Mock>, ?) -> {Mock | str}": [[40, "    def __getattr__(cls, name):"]]}, "__init__": {"? -> ?": [[33, "    def __init__(self, *args, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_abbreviation_expansion.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository": {"func": {"test_abbreviation_expansion_prefix_not_0_in_braces": {"() -> None": [[49, "def test_abbreviation_expansion_prefix_not_0_in_braces():"]]}, "test_abbreviation_expansion": {"(?, ?, ?) -> None": [[43, "def test_abbreviation_expansion(template, abbreviations, expected_result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_abbreviation_expansion.test_abbreviation_expansio": {"var": {"expanded": {"None": [[45, "    expanded = expand_abbreviations(template, abbreviations)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_abbreviation_expansion.test_abbreviation_expansion": {"param": {"expected_result": {"?": [[43, "def test_abbreviation_expansion(template, abbreviations, expected_result):"]]}, "template": {"?": [[43, "def test_abbreviation_expansion(template, abbreviations, expected_result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_abbreviation_expansion.test_abbreviation_exp": {"param": {"abbreviations": {"?": [[43, "def test_abbreviation_expansion(template, abbreviations, expected_result):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_prompt.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.patch_readline_on_wi": {"param": {"monkeypatch": {"?": [[11, "def patch_readline_on_win(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariabl": {"func": {"test_convert_to_str": {"(TestRenderVariable, ?, ?, ?) -> None": [[30, "    def test_convert_to_str(self, mocker, raw_var, rendered_var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestPrompt.test_prompt_for_templated_config": {"param": {"self": {"TestPrompt": [[162, "    def test_prompt_for_templated_config(self, monkeypatch):"]]}, "monkeypatch": {"?": [[162, "    def test_prompt_for_templated_config(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariable.test_convert_to_str_complex_variab": {"var": {"result": {"{[dict] | dict}": [[65, "        result = prompt.render_variable(env, raw_var, context)"]]}}, "param": {"self": {"TestRenderVariable": [[60, "    def test_convert_to_str_complex_variables(self, raw_var, rendered_var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariable.test_convert_to_": {"var": {"result": {"{[dict] | dict}": [[38, "        result = prompt.render_variable(env, raw_var, context)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestPromptChoiceForConfig.context": {"param": {"self": {"TestPromptChoiceForConfig": [[343, "    def context(self, choices):"]]}, "choices": {"?": [[343, "    def context(self, choices):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestPrompt.aul": {"param": {"monkeypatch": {"?": [[80, "    def test_prompt_for_config(self, monkeypatch, context):"]]}, "context": {"?": [[80, "    def test_prompt_for_config(self, monkeypatch, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_": {"class": {"TestPrompt": {"<TestPrompt>": [[69, "class TestPrompt(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestReadUserChoice.test_should_invoke_read_user_choi": {"param": {"mocker": {"?": [[257, "    def test_should_invoke_read_user_choice(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestReadUserChoice.test_should_render_choices": {"param": {"mocker": {"?": [[297, "    def test_should_render_choices(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.ined": {"var": {"err": {"?": [[400, "        prompt.prompt_for_config(context, no_input=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariable.test_convert_to_str_complex_variables": {"var": {"context": {"dict": [[63, "        context = {'project': 'foobar'}"]]}, "env": {"StrictEnvironment": [[62, "        env = environment.StrictEnvironment()"]]}}, "param": {"rendered_var": {"?": [[60, "    def test_convert_to_str_complex_variables(self, raw_var, rendered_var):"]]}, "raw_var": {"?": [[60, "    def test_convert_to_str_complex_variables(self, raw_var, rendered_var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariable.test_convert_to_str": {"var": {"context": {"dict": [[36, "        context = {'project': 'foobar'}"]]}, "env": {"StrictEnvironment": [[32, "        env = environment.StrictEnvironment()"]]}}, "param": {"self": {"TestRenderVariable": [[30, "    def test_convert_to_str(self, mocker, raw_var, rendered_var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestPrompt.ault": {"param": {"self": {"TestPrompt": [[80, "    def test_prompt_for_config(self, monkeypatch, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestPrompt.test_prompt_for_config_di": {"param": {"monkeypatch": {"?": [[89, "    def test_prompt_for_config_dict(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestReadUserChoice.test_should_render_choic": {"param": {"self": {"TestReadUserChoice": [[297, "    def test_should_render_choices(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestReadUserChoice.test_should_invoke_read_user_variab": {"param": {"self": {"TestReadUserChoice": [[279, "    def test_should_invoke_read_user_variable(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariable.test_conve": {"var": {"from_string": {"?": [[33, "        from_string = mocker.patch("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestReadUserChoice.test_should_invoke_read_user_variabl": {"param": {"mocker": {"?": [[279, "    def test_should_invoke_read_user_variable(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderV": {"func": {"test_convert_to_str_complex_variables": {"(TestRenderVariable, ?, ?) -> None": [[60, "    def test_convert_to_str_complex_variables(self, raw_var, rendered_var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prom": {"func": {"patch_readline_on_win": {"? -> None": [[11, "def patch_readline_on_win(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestRenderVariable.test_convert_to_st": {"var": {"raw_var": {"str": [[44, "                raw_var = str(raw_var)"]]}}, "param": {"rendered_var": {"?": [[30, "    def test_convert_to_str(self, mocker, raw_var, rendered_var):"]]}, "mocker": {"?": [[30, "    def test_convert_to_str(self, mocker, raw_var, rendered_var):"]]}, "raw_var": {"?": [[30, "    def test_convert_to_str(self, mocker, raw_var, rendered_var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestReadUserChoice.test_should_invoke_read_user_choic": {"param": {"self": {"TestReadUserChoice": [[257, "    def test_should_invoke_read_user_choice(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_promp": {"class": {"TestRenderVariable": {"<TestRenderVariable>": [[17, "class TestRenderVariable:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_prompt.TestPrompt.test_prompt_for_config_dict": {"param": {"self": {"TestPrompt": [[89, "    def test_prompt_for_config_dict(self, monkeypatch):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_abort_generate_on_hook_error.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_abort_generate_on_hook_error.test_hooks_rai": {"param": {"abort_post_gen": {"?": [[19, "def test_hooks_raises_errors(tmpdir, abort_pre_gen, abort_post_gen):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_abort_generate_on_hook_error.test_hooks_raises_errors": {"var": {"context": {"dict": [[25, "    context = {"]]}}, "param": {"abort_pre_gen": {"?": [[19, "def test_hooks_raises_errors(tmpdir, abort_pre_gen, abort_post_gen):"]]}, "tmpdir": {"?": [[19, "def test_hooks_raises_errors(tmpdir, abort_pre_gen, abort_post_gen):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_abort_generate_on": {"func": {"test_hooks_raises_errors": {"(?, ?, ?) -> None": [[19, "def test_hooks_raises_errors(tmpdir, abort_pre_gen, abort_post_gen):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/replay/conftest.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.conftest": {"func": {"mock_user_config": {"? -> None": [[25, "def mock_user_config(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.conftes": {"func": {"context": {"() -> dict": [[6, "def context():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.conf": {"func": {"replay_test_dir": {"() -> str": [[19, "def replay_test_dir():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.conftest.mock_user_config": {"param": {"mocker": {"?": [[25, "def mock_user_config(mocker):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/replay/test_replay.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay": {"func": {"test_raise_on_invalid_mode": {"? -> None": [[25, "def test_raise_on_invalid_mode(invalid_kwargs):"]]}, "test_main_does_not_invoke_load_but_dump": {"? -> None": [[48, "def test_main_does_not_invoke_load_but_dump(mocker):"]]}, "test_main_does_not_invoke_dump_but_load": {"? -> None": [[31, "def test_main_does_not_invoke_dump_but_load(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_main_does_not_invoke_load_but_dump": {"var": {"mock_gen_context": {"?": [[51, "    mock_gen_context = mocker.patch('cookiecutter.main.generate_context')"]]}, "mock_gen_files": {"?": [[52, "    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')"]]}}, "param": {"mocker": {"?": [[48, "def test_main_does_not_invoke_load_but_dump(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_main_does_not_invoke_dump_but": {"var": {"mock_replay_dump": {"?": [[36, "    mock_replay_dump = mocker.patch('cookiecutter.main.dump')"]]}, "mock_replay_load": {"?": [[37, "    mock_replay_load = mocker.patch('cookiecutter.main.load')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"func": {"test_get_replay_file_name": {"? -> None": [[10, "def test_get_replay_file_name(replay_file_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_raise_on_invalid_mode": {"param": {"invalid_kwargs": {"?": [[25, "def test_raise_on_invalid_mode(invalid_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_main_does_not_invoke_dump_but_load": {"var": {"mock_prompt": {"?": [[33, "    mock_prompt = mocker.patch('cookiecutter.main.prompt_for_config')"]]}, "mock_gen_context": {"?": [[34, "    mock_gen_context = mocker.patch('cookiecutter.main.generate_context')"]]}, "mock_gen_files": {"?": [[35, "    mock_gen_files = mocker.patch('cookiecutter.main.generate_files')"]]}}, "param": {"mocker": {"?": [[31, "def test_main_does_not_invoke_dump_but_load(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_get_replay_file_nam": {"var": {"exp_replay_file_path": {"str": [[12, "    exp_replay_file_path = os.path.join('foo', 'bar.json')"]]}, "replay_file_path": {"str": [[13, "    replay_file_path = replay.get_file_name('foo', replay_file_name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_main_does_not_invoke_load_but": {"var": {"mock_replay_dump": {"?": [[53, "    mock_replay_dump = mocker.patch('cookiecutter.main.dump')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_get": {"param": {"replay_file_name": {"?": [[10, "def test_get_replay_file_name(replay_file_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_replay.test_main_does_not_invoke_load_but_du": {"var": {"mock_prompt": {"?": [[50, "    mock_prompt = mocker.patch('cookiecutter.main.prompt_for_config')"]]}, "mock_replay_load": {"?": [[54, "    mock_replay_load = mocker.patch('cookiecutter.main.load')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_hooks.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.teardown_": {"param": {"method": {"?": [[123, "    def teardown_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindH": {"func": {"test_unknown_hooks_dir": {"TestFindHooks -> None": [[102, "    def test_unknown_hooks_dir(self):"]]}, "test_find_hook": {"TestFindHooks -> None": [[86, "    def test_find_hook(self):"]]}, "test_no_hooks": {"TestFindHooks -> None": [[97, "    def test_no_hooks(self):"]]}, "test_hook_not_found": {"TestFindHooks -> None": [[107, "    def test_hook_not_found(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.test_no_hook": {"param": {"self": {"TestFindHooks": [[97, "    def test_no_hooks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_failing": {"var": {"hook_path": {"str": [[195, "        hook_path = os.path.join(self.hooks_path, 'pre_gen_project.py')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_script_with_context": {"param": {"self": {"TestExternalHooks": [[153, "    def test_run_script_with_context(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.make_test_rep": {"var": {"hook_dir": {"str": [[14, "    hook_dir = os.path.join(name, 'hooks')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.dir_with_hooks": {"var": {"pre_gen_hook_file": {"str": [[220, "    pre_gen_hook_file = hooks_dir / 'pre_gen_project.py~'"]]}, "pre_hook_content": {"?": [[213, "    pre_hook_content = textwrap.dedent("]]}}, "param": {"tmpdir": {"?": [[209, "def dir_with_hooks(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.te": {"func": {"dir_with_hooks": {"? -> None": [[209, "def dir_with_hooks(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.setup_method": {"param": {"self": {"TestExternalHooks": [[119, "    def setup_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_h": {"class": {"TestExternalHooks": {"<TestExternalHooks>": [[113, "class TestExternalHooks(object):"]]}, "TestFindHooks": {"<TestFindHooks>": [[73, "class TestFindHooks(object):"]]}}, "func": {"make_test_repo": {"(str, bool) -> str / (?, bool) -> str": [[12, "def make_test_repo(name, multiple_hooks=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.setup_": {"param": {"method": {"?": [[119, "    def setup_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_script_with_contex": {"var": {"post": {"str": [[158, "            post = 'post_gen_project.bat'"]]}, "hook_path": {"str": [[155, "        hook_path = os.path.join(self.hooks_path, 'post_gen_project.sh')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.dir_wit": {"var": {"hooks_dir": {"?": [[211, "    hooks_dir = tmpdir.mkdir('hooks')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.test_find_hook": {"var": {"expected_post": {"str": [[93, "            expected_post = os.path.abspath('hooks/{}'.format(self.post_hook))"]]}, "expected_pre": {"str": [[89, "            expected_pre = os.path.abspath('hooks/pre_gen_project.py')"]]}}, "param": {"self": {"TestFindHooks": [[86, "    def test_find_hook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.setup_method": {"param": {"self": {"TestFindHooks": [[78, "    def setup_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.test_find": {"var": {"actual_hook_path": {"[str]": [[90, "            actual_hook_path = hooks.find_hook('pre_gen_project')"], [94, "            actual_hook_path = hooks.find_hook('post_gen_project')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.teardown_method": {"param": {"self": {"TestExternalHooks": [[123, "    def teardown_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.test_ignore_hook_backup_files": {"param": {"monkeypatch": {"?": [[242, "def test_ignore_hook_backup_files(monkeypatch, dir_with_hooks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks": {"var": {"repo_path": {"str": [[76, "    repo_path = 'tests/test-hooks'"]]}}, "func": {"teardown_method": {"(TestFindHooks, ?) -> None": [[82, "    def teardown_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.teardown_": {"param": {"method": {"?": [[82, "    def teardown_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_script_cwd": {"param": {"self": {"TestExternalHooks": [[147, "    def test_run_script_cwd(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.teardown_method": {"param": {"self": {"TestFindHooks": [[82, "    def teardown_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_hook": {"var": {"tests_dir": {"str": [[184, "        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')"]]}}, "param": {"self": {"TestExternalHooks": [[181, "    def test_run_hook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHook": {"func": {"test_run_script": {"TestExternalHooks -> None": [[142, "    def test_run_script(self):"]]}, "test_run_script_cwd": {"TestExternalHooks -> None": [[147, "    def test_run_script_cwd(self):"]]}, "setup_method": {"(TestExternalHooks, ?) -> None": [[119, "    def setup_method(self, method):"]]}, "test_run_script_with_context": {"TestExternalHooks -> None": [[153, "    def test_run_script_with_context(self):"]]}}}, ".home.xxm.Desktop.EMSE.d": {"func": {"test_ignore_hook_backup_files": {"(?, ?) -> None": [[242, "def test_ignore_hook_backup_files(monkeypatch, dir_with_hooks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.setup_": {"param": {"method": {"?": [[78, "    def setup_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.dir_w": {"var": {"post_gen_hook_file": {"str": [[231, "    post_gen_hook_file = hooks_dir / 'post_gen_project.py~'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalH": {"var": {"hooks_path": {"str": [[117, "    hooks_path = os.path.abspath('tests/test-hooks/hooks')"]]}}, "func": {"test_run_hook": {"TestExternalHooks -> None": [[181, "    def test_run_hook(self):"]]}, "test_run_failing_hook": {"TestExternalHooks -> None": [[193, "    def test_run_failing_hook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHook": {"func": {"setup_method": {"(TestFindHooks, ?) -> None": [[78, "    def setup_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.make_test_r": {"param": {"multiple_hooks": {"bool": [[12, "def make_test_repo(name, multiple_hooks=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_failing_hook": {"var": {"tests_dir": {"str": [[196, "        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')"]]}}, "param": {"self": {"TestExternalHooks": [[193, "    def test_run_failing_hook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks": {"var": {"repo_path": {"str": [[116, "    repo_path = os.path.abspath('tests/test-hooks/')"]]}}, "func": {"teardown_method": {"(TestExternalHooks, ?) -> None": [[123, "    def teardown_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.dir_wi": {"var": {"post_hook_content": {"?": [[223, "    post_hook_content = textwrap.dedent("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.make_test_repo": {"var": {"pre": {"str": [[53, "            pre = 'pre_gen_project.bat'"], [60, "            pre = 'pre_gen_project.sh'"]]}, "template": {"str": [[15, "    template = os.path.join(name, 'input{{hooks}}')"]]}, "filename": {"str": [[41, "        filename = os.path.join(hook_dir, post)"], [61, "            filename = os.path.join(hook_dir, pre)"]]}}, "param": {"name": {"str": [[12, "def make_test_repo(name, multiple_hooks=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.test_unknown_hooks_dir": {"param": {"self": {"TestFindHooks": [[102, "    def test_unknown_hooks_dir(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.make_test_re": {"var": {"post": {"str": [[33, "        post = 'post_gen_project.bat'"], [40, "        post = 'post_gen_project.sh'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.test_ignore_hook_backup_file": {"param": {"dir_with_hooks": {"?": [[242, "def test_ignore_hook_backup_files(monkeypatch, dir_with_hooks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestFindHooks.test_hook_not_found": {"param": {"self": {"TestFindHooks": [[107, "    def test_hook_not_found(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_hooks.TestExternalHooks.test_run_script": {"param": {"self": {"TestExternalHooks": [[142, "    def test_run_script(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/replay/test_dump.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_type_error_if_not_dict_contex": {"param": {"template_name": {"?": [[40, "def test_type_error_if_not_dict_context(replay_test_dir, template_name):"]]}, "replay_test_dir": {"?": [[40, "def test_type_error_if_not_dict_context(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.mock_ensure_success": {"param": {"mocker": {"?": [[64, "def mock_ensure_success(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_ioerror_if_replay_dir_creation_f": {"param": {"replay_test_dir": {"?": [[73, "def test_ioerror_if_replay_dir_creation_fails(mock_ensure_failure, replay_test_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.replay_fi": {"param": {"template_name": {"?": [[17, "def replay_file(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.replay": {"var": {"file_name": {"str": [[19, "    file_name = '{}.json'.format(template_name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.mock_ensure_failu": {"param": {"mocker": {"?": [[54, "def mock_ensure_failure(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_type_error_if_no_template_nam": {"param": {"context": {"?": [[34, "def test_type_error_if_no_template_name(replay_test_dir, context):"]]}, "replay_test_dir": {"?": [[34, "def test_type_error_if_no_template_name(replay_test_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_r": {"var": {"mock_json_dump": {"?": [[94, "    mock_json_dump = mocker.patch('json.dump', side_effect=json.dump)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_run_json_du": {"var": {"template_name": {"?": [[85, "    template_name,"]]}}, "param": {"template_name": {"?": [[89, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_value_error_if_key_missing_in_contex": {"param": {"template_name": {"?": [[46, "def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):"]]}, "replay_test_dir": {"?": [[46, "def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.replay_f": {"param": {"replay_test_dir": {"?": [[17, "def replay_file(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.remove_replay_dump": {"param": {"request": {"?": [[24, "def remove_replay_dump(request, replay_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump": {"func": {"test_value_error_if_key_missing_in_context": {"(?, ?) -> None": [[46, "def test_value_error_if_key_missing_in_context(replay_test_dir, template_name):"]]}, "mock_ensure_failure": {"? -> None": [[54, "def mock_ensure_failure(mocker):"]]}, "mock_ensure_success": {"? -> None": [[64, "def mock_ensure_success(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.remove_replay_dum": {"param": {"replay_file": {"?": [[24, "def remove_replay_dump(request, replay_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dum": {"func": {"replay_file": {"(?, ?) -> str": [[17, "def replay_file(replay_test_dir, template_name):"]]}, "test_ioerror_if_replay_dir_creation_fails": {"(?, ?) -> None": [[73, "def test_ioerror_if_replay_dir_creation_fails(mock_ensure_failure, replay_test_dir):"]]}, "test_type_error_if_not_dict_context": {"(?, ?) -> None": [[40, "def test_type_error_if_not_dict_context(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_run_json_dum": {"var": {"replay_file": {"?": [[88, "    replay_file,"]]}, "spy_get_replay_file": {"?": [[92, "    spy_get_replay_file = mocker.spy(replay, 'get_file_name')"]]}, "replay_test_dir": {"?": [[87, "    replay_test_dir,"]]}}, "param": {"replay_file": {"?": [[89, "):"]]}, "replay_test_dir": {"?": [[89, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay": {"func": {"test_run_json_dump": {"(?, ?, ?, ?, ?, ?, ?) -> None": [[81, "def test_run_json_dump("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_du": {"func": {"template_name": {"() -> str": [[11, "def template_name():"]]}, "test_type_error_if_no_template_name": {"(?, ?) -> None": [[34, "def test_type_error_if_no_template_name(replay_test_dir, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.remove_replay_du": {"func": {"fin_remove_replay_file": {"() -> None": [[27, "    def fin_remove_replay_file():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_run_json_dump": {"var": {"mock_ensure_success": {"?": [[83, "    mock_ensure_success,"]]}, "mocker": {"?": [[82, "    mocker,"]]}, "context": {"?": [[86, "    context,"]]}, "mock_user_config": {"?": [[84, "    mock_user_config,"]]}}, "param": {"mock_ensure_success": {"?": [[89, "):"]]}, "mocker": {"?": [[89, "):"]]}, "context": {"?": [[89, "):"]]}, "mock_user_config": {"?": [[89, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test": {"func": {"remove_replay_dump": {"(?, ?) -> None": [[24, "def remove_replay_dump(request, replay_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_dump.test_ioerror_if_replay_dir_creat": {"param": {"mock_ensure_failure": {"?": [[73, "def test_ioerror_if_replay_dir_creation_fails(mock_ensure_failure, replay_test_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/replay/test_load.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_ru": {"var": {"mock_json_load": {"?": [[49, "    mock_json_load = mocker.patch('json.load', side_effect=json.load)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_run_js": {"var": {"loaded_context": {"None": [[51, "    loaded_context = replay.load(replay_test_dir, template_name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay": {"func": {"test_run_json_load": {"(?, ?, ?, ?, ?, ?) -> None": [[42, "def test_run_json_load("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.replay": {"var": {"file_name": {"str": [[19, "    file_name = '{}.json'.format(template_name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_value_error_if_key_missing_in_contex": {"param": {"replay_test_dir": {"?": [[29, "def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_value_error_if_key_missing_in_context": {"param": {"mocker": {"?": [[29, "def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_run_json_load": {"var": {"mocker": {"?": [[43, "    mocker, mock_user_config, template_name, context, replay_test_dir, replay_file"]]}, "spy_get_replay_file": {"?": [[47, "    spy_get_replay_file = mocker.spy(replay, 'get_file_name')"]]}}, "param": {"replay_file": {"?": [[44, "):"]]}, "template_name": {"?": [[44, "):"]]}, "mocker": {"?": [[44, "):"]]}, "context": {"?": [[44, "):"]]}, "mock_user_config": {"?": [[44, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.replay_fi": {"param": {"template_name": {"?": [[17, "def replay_file(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load": {"func": {"test_value_error_if_key_missing_in_context": {"(?, ?) -> None": [[29, "def test_value_error_if_key_missing_in_context(mocker, replay_test_dir):"]]}, "template_name": {"() -> str": [[11, "def template_name():"]]}, "test_type_error_if_no_template_name": {"? -> None": [[23, "def test_type_error_if_no_template_name(replay_test_dir):"]]}, "test_io_error_if_no_replay_file": {"(?, ?) -> None": [[36, "def test_io_error_if_no_replay_file(mocker, replay_test_dir):"]]}, "replay_file": {"(?, ?) -> str": [[17, "def replay_file(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_type_error_if_no_template_nam": {"param": {"replay_test_dir": {"?": [[23, "def test_type_error_if_no_template_name(replay_test_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.replay_f": {"param": {"replay_test_dir": {"?": [[17, "def replay_file(replay_test_dir, template_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_io_error_if_no_replay_f": {"param": {"replay_test_dir": {"?": [[36, "def test_io_error_if_no_replay_file(mocker, replay_test_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_run_json_lo": {"param": {"replay_test_dir": {"?": [[44, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.replay.test_load.test_io_error_if_no_replay_fil": {"param": {"mocker": {"?": [[36, "def test_io_error_if_no_replay_file(mocker, replay_test_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/generate.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.apply_overwrites_to_context": {"var": {"variable": {"?": [[50, "    for variable, overwrite in overwrite_context.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_file": {"var": {"msg": {"str": [[286, "        msg = \"Unable to create project directory '{}'\".format(unrendered_dir)"], [348, "                    msg = \"Unable to create directory '{}'\".format(_dir)"], [370, "                    msg = \"Unable to create file '{}'\".format(infile)"]]}, "tmpl": {"?": [[164, "            tmpl = env.get_template(infile_fwd_slashes)"]]}, "copy_dirs": {"[str]": [[315, "            copy_dirs = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generat": {"var": {"logger": {"?": [[25, "logger = logging.getLogger(__name__)"]]}}, "func": {"_run_hook_from_repo_dir": {"(?, ?, ?, ?, ?) -> ? / (str, str, str, None, int) -> ? / (?, str, str, None, int) -> ?": [[229, "def _run_hook_from_repo_dir("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate._run_hook_from": {"var": {"repo_dir": {"str": [[230, "    repo_dir, hook_name, project_dir, context, delete_project_on_failure"]]}}, "param": {"repo_dir": {"str": [[231, "):"]]}, "delete_project_on_failure": {"int": [[231, "):"]]}, "project_dir": {"str": [[231, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecu": {"func": {"generate_context": {"(str, None, None) -> ?": [[70, "def generate_context("]]}, "generate_files": {"(?, None, str, bool, bool, bool) -> str / (str, None, str, bool, bool, bool) -> str": [[255, "def generate_files("]]}, "generate_file": {"(str, str, dict, ?, bool) -> ? / (str, str, None, StrictEnvironment, bool) -> ? / (?, ?, ?, ?, bool) -> ?": [[114, "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.ensure_dir_is_templat": {"param": {"dirname": {"str": [[221, "def ensure_dir_is_templated(dirname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.is_copy_only_": {"param": {"path": {"<StrictEnvironment>": [[28, "def is_copy_only_path(path, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate": {"param": {"is_copy_only_path": {"environment": [[28, "def is_copy_only_path(path, context):"]]}}, "func": {"is_copy_only_path": {"(?, ?) -> bool / (str, None) -> bool": [[28, "def is_copy_only_path(path, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_and_crea": {"var": {"output_dir_exists": {"int": [[205, "    output_dir_exists = os.path.exists(dir_to_create)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.gener": {"var": {"file_name_is_empty": {"int": [[141, "    file_name_is_empty = os.path.isdir(outfile)"]]}}, "param": {"default_context": {"None": [[72, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.apply_overwrites_to_": {"param": {"context": {"?": [[48, "def apply_overwrites_to_context(context, overwrite_context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate._run_hook_from_repo_dir": {"param": {"hook_name": {"str": [[231, "):"]]}, "context": {"None": [[231, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.g": {"func": {"render_and_create_dir": {"(?, ?, ?, ?, bool) -> (str, int) / (str, None, str, StrictEnvironment, bool) -> (str, int)": [[192, "def render_and_create_dir("]]}, "apply_overwrites_to_context": {"(?, ?) -> None / (?, None) -> None / (?, dict) -> None": [[48, "def apply_overwrites_to_context(context, overwrite_context):"]]}, "ensure_dir_is_templated": {"? -> bool / str -> bool": [[221, "def ensure_dir_is_templated(dirname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.apply_overwrites": {"var": {"context_value": {"?": [[55, "        context_value = context[variable]"]]}}, "param": {"overwrite_context": {"dict": [[48, "def apply_overwrites_to_context(context, overwrite_context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_an": {"var": {"dir_to_create": {"str": [[199, "    dir_to_create = os.path.normpath(os.path.join(output_dir, rendered_dirname))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.g": {"param": {"extra_context": {"None": [[72, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_context": {"var": {"json_exc_message": {"str": [[91, "        json_exc_message = str(e)"]]}, "our_exc_message": {"?": [[92, "        our_exc_message = ("]]}, "obj": {"?": [[86, "            obj = json.load(file_handle, object_pairs_hook=OrderedDict)"]]}, "file_name": {"str": [[99, "    file_name = os.path.split(context_file)[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.genera": {"var": {"context_file": {"str": [[71, "    context_file='cookiecutter.json', default_context=None, extra_context=None"]]}, "outfile_tmpl": {"?": [[138, "    outfile_tmpl = env.from_string(infile)"]]}, "skip_if_file_exists": {"bool": [[260, "    skip_if_file_exists=False,"]]}}, "param": {"context_file": {"str": [[72, "):"]]}, "skip_if_file_exists": {"bool": [[114, "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):"], [262, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_fil": {"var": {"envvars": {"?": [[276, "    envvars = context.get('cookiecutter', {}).get('_jinja2_env_vars', {})"]]}, "render_dirs": {"[str]": [[316, "            render_dirs = []"]]}, "overwrite_if_exists": {"bool": [[259, "    overwrite_if_exists=False,"]]}, "accept_hooks": {"bool": [[261, "    accept_hooks=True,"]]}}, "param": {"accept_hooks": {"bool": [[262, "):"]]}, "project_dir": {"str": [[114, "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):"]]}, "env": {"StrictEnvironment": [[114, "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):"]]}, "context": {"{dict | dict}": [[114, "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):"]]}, "overwrite_if_exists": {"bool": [[262, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_and_create_dir": {"var": {"name_tmpl": {"?": [[196, "    name_tmpl = environment.from_string(dirname)"]]}, "msg": {"str": [[213, "            msg = 'Error: \"{}\" directory already exists'.format(dir_to_create)"]]}}, "param": {"context": {"None": [[194, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_": {"var": {"outfile": {"str": [[140, "    outfile = os.path.join(project_dir, outfile_tmpl.render(**context))"]]}, "context": {"?": [[82, "    context = OrderedDict([])"]]}}, "param": {"infile": {"str": [[114, "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.is_copy_only_path": {"var": {"dont_render": {"?": [[39, "        for dont_render in context['cookiecutter']['_copy_without_render']:"]]}}, "param": {"context": {"cookiecutter": [[28, "def is_copy_only_path(path, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_f": {"var": {"newline": {"{str | str}": [[178, "            newline = rd.newlines"]], "str": [[180, "                newline = context['cookiecutter']['_new_lines']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_files": {"var": {"unrendered_dir": {"str": [[278, "    unrendered_dir = os.path.split(template_dir)[1]"], [339, "                unrendered_dir = os.path.join(project_dir, root, d)"]]}, "delete_project_on_failure": {"int": [[301, "    delete_project_on_failure = output_directory_created"]]}, "context": {"None": [[257, "    context=None,"], [274, "    context = context or OrderedDict([])"]]}, "template_dir": {"str": [[272, "    template_dir = find_template(repo_dir)"]]}, "f": {"str": [[351, "            for f in files:"]]}, "root": {"str": [[311, "        for root, dirs, files in os.walk('.'):"]]}, "outfile": {"str": [[356, "                    outfile = os.path.join(project_dir, outfile_rendered)"]]}, "_dir": {"str": [[347, "                    _dir = os.path.relpath(unrendered_dir, output_dir)"]]}, "infile": {"str": [[352, "                infile = os.path.normpath(os.path.join(root, f))"]]}, "repo_dir": {"str": [[256, "    repo_dir,"]]}, "d_": {"str": [[319, "                d_ = os.path.normpath(os.path.join(root, d))"]]}, "outfile_tmpl": {"?": [[354, "                    outfile_tmpl = env.from_string(infile)"]]}, "output_dir": {"str": [[258, "    output_dir='.',"]]}, "env": {"StrictEnvironment": [[280, "    env = StrictEnvironment(context=context, keep_trailing_newline=True, **envvars)"]]}, "copy_dir": {"str": [[328, "            for copy_dir in copy_dirs:"]]}, "indir": {"str": [[329, "                indir = os.path.normpath(os.path.join(root, copy_dir))"]]}, "project_dir": {"str": [[282, "        project_dir, output_directory_created = render_and_create_dir("], [296, "    project_dir = os.path.abspath(project_dir)"]]}, "outdir": {"?": [[331, "                outdir = env.from_string(outdir).render(**context)"]], "str": [[330, "                outdir = os.path.normpath(os.path.join(project_dir, indir))"]]}, "outfile_rendered": {"?": [[355, "                    outfile_rendered = outfile_tmpl.render(**context)"]]}, "d": {"str": [[318, "            for d in dirs:"], [338, "            for d in dirs:"]]}}, "param": {"repo_dir": {"str": [[262, "):"]]}, "output_dir": {"str": [[262, "):"]]}, "context": {"None": [[262, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generat": {"var": {"rendered_file": {"?": [[170, "        rendered_file = tmpl.render(**context)"]]}, "infile_fwd_slashes": {"str": [[160, "        infile_fwd_slashes = infile.replace(os.path.sep, '/')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_and_creat": {"var": {"rendered_dirname": {"?": [[197, "    rendered_dirname = name_tmpl.render(**context)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_and_create": {"param": {"output_dir": {"str": [[194, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_and_create_d": {"param": {"environment": {"StrictEnvironment": [[194, "):"]]}, "overwrite_if_exists": {"bool": [[194, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.generate_contex": {"var": {"file_stem": {"str": [[100, "    file_stem = file_name.split('.')[0]"]]}, "full_fpath": {"str": [[90, "        full_fpath = os.path.abspath(context_file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.generate.render_and_create_": {"var": {"dirname": {"str": [[193, "    dirname, context, output_dir, environment, overwrite_if_exists=False"]]}}, "param": {"dirname": {"str": [[194, "):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_repo_not_found.py": {".home.xxm.Desktop.EMSE.dataset.cookiec": {"func": {"test_should_raise_error_if_repo_does_not_exist": {"() -> None": [[7, "def test_should_raise_error_if_repo_does_not_exist():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/vcs/test_clone.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.clone_": {"param": {"tmpdir": {"?": [[11, "def clone_dir(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_clone_should_invoke_vcs_command": {"(?, ?, ?, ?, ?) -> None": [[79, "def test_clone_should_invoke_vcs_command("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_unknown_subprocess": {"param": {"clone_dir": {"?": [[175, "def test_clone_unknown_subprocess_error(mocker, clone_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_handles_branch": {"var": {"repository_url": {"str": [[160, "    repository_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_abort_if_user_does_not_want_to_reclone": {"param": {"tmpdir": {"?": [[46, "def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_abort_if_user_does_not_wa": {"var": {"clone_to_dir": {"?": [[57, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.v": {"func": {"test_clone_handles_branch_typo": {"(?, ?, ?) -> None": [[151, "def test_clone_handles_branch_typo(mocker, clone_dir, error_message):"]]}, "test_clone_should_abort_if_user_does_not_want_to_reclone": {"(?, ?) -> None": [[46, "def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):"]]}, "test_clone_should_rstrip_trailing_slash_in_repo_url": {"(?, ?) -> None": [[28, "def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):"]]}, "test_clone_unknown_subprocess_error": {"(?, ?) -> None": [[175, "def test_clone_unknown_subprocess_error(mocker, clone_dir):"]]}, "test_clone_handles_repo_typo": {"(?, ?, ?) -> None": [[121, "def test_clone_handles_repo_typo(mocker, clone_dir, error_message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_invoke_vcs_command": {"var": {"mock_subprocess": {"?": [[91, "    mock_subprocess = mocker.patch("]]}, "mocker": {"?": [[80, "    mocker, clone_dir, repo_type, repo_url, repo_name"]]}, "branch": {"str": [[96, "    branch = 'foobar'"]]}}, "param": {"repo_type": {"?": [[81, "):"]]}, "mocker": {"?": [[81, "):"]]}, "repo_url": {"?": [[81, "):"]]}, "repo_name": {"?": [[81, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_rstrip_trailing_slash_in_repo_u": {"param": {"clone_dir": {"?": [[28, "def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_unknown_subprocess_": {"param": {"mocker": {"?": [[175, "def test_clone_unknown_subprocess_error(mocker, clone_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_hand": {"var": {"repository_url": {"str": [[133, "    repository_url = 'https://github.com/hackebro/cookiedozer'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_invoke_vcs_comma": {"param": {"clone_dir": {"?": [[81, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test": {"func": {"clone_dir": {"? -> str": [[11, "def clone_dir(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_raise_if_vcs_not_insta": {"param": {"clone_dir": {"?": [[17, "def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_handles_branch_typ": {"param": {"error_message": {"?": [[151, "def test_clone_handles_branch_typo(mocker, clone_dir, error_message):"]]}, "mocker": {"?": [[151, "def test_clone_handles_branch_typo(mocker, clone_dir, error_message):"]]}, "clone_dir": {"?": [[151, "def test_clone_handles_branch_typo(mocker, clone_dir, error_message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_abort_if_user_does_not_want_to_reclon": {"var": {"mock_subprocess": {"?": [[53, "    mock_subprocess = mocker.patch("]]}, "repo_url": {"str": [[62, "    repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'"]]}}, "param": {"mocker": {"?": [[46, "def test_clone_should_abort_if_user_does_not_want_to_reclone(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_handles_repo_typ": {"param": {"error_message": {"?": [[121, "def test_clone_handles_repo_typo(mocker, clone_dir, error_message):"]]}, "mocker": {"?": [[121, "def test_clone_handles_repo_typo(mocker, clone_dir, error_message):"]]}, "clone_dir": {"?": [[121, "def test_clone_handles_repo_typo(mocker, clone_dir, error_message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_raise_if_vcs_not_installed": {"var": {"repo_url": {"str": [[22, "    repo_url = 'https://github.com/pytest-dev/cookiecutter-pytest-plugin.git'"]]}}, "param": {"mocker": {"?": [[17, "def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_clone_should_raise_if_vcs_not_installed": {"(?, ?) -> None": [[17, "def test_clone_should_raise_if_vcs_not_installed(mocker, clone_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_invoke_vcs_comman": {"var": {"repo_dir": {"str": [[98, "    repo_dir = vcs.clone("]]}, "expected_repo_dir": {"str": [[94, "    expected_repo_dir = os.path.normpath(os.path.join(clone_dir, repo_name))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_clone.test_clone_should_rstrip_trailing_slash_in_repo_url": {"var": {"mock_subprocess": {"?": [[33, "    mock_subprocess = mocker.patch("]]}}, "param": {"mocker": {"?": [[28, "def test_clone_should_rstrip_trailing_slash_in_repo_url(mocker, clone_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/setup.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.setup": {"var": {"readme": {"str": [[8, "    readme = readme_file.read()"]]}, "version": {"str": [[5, "version = \"2.0.0\""]]}, "requirements": {"[str]": [[10, "requirements = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_determine_repository_should_use_local_repo.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repository_should_use_local_repo.test_local_repo_with_no_context_raises": {"var": {"template_path": {"str": [[27, "    template_path = os.path.join('tests', 'fake-repo-bad')"]]}}, "param": {"tmpdir": {"?": [[24, "def test_local_repo_with_no_context_raises(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repository_should_use_local_repo.test_finds_local": {"var": {"project_dir": {"str": [[12, "    project_dir, cleanup = repository.determine_repo_dir("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repository_should_use_local_repo.test_finds_local_repo": {"param": {"tmpdir": {"?": [[10, "def test_finds_local_repo(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repository_should_u": {"func": {"test_local_repo_typo": {"? -> None": [[46, "def test_local_repo_typo(tmpdir):"]]}, "test_local_repo_with_no_context_raises": {"? -> None": [[24, "def test_local_repo_with_no_context_raises(tmpdir):"]]}, "test_finds_local_repo": {"? -> None": [[10, "def test_finds_local_repo(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_determine_repository_should_use_local_repo.test_local_repo_typo": {"var": {"template_path": {"str": [[49, "    template_path = os.path.join('tests', 'unknown-repo')"]]}}, "param": {"tmpdir": {"?": [[46, "def test_local_repo_typo(tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_generate_files.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_generate_files_with_trailing_newline_forced_to_linux_by_context": {"var": {"f": {"file": [[105, "        simple_text = f.readline()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_ensure_dir_is_templated_raises": {"param": {"invalid_dirname": {"?": [[16, "def test_ensure_dir_is_templated_raises(invalid_dirname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_generate_files_with_overwrite_if_exists": {"var": {"f": {"file": [[300, "    generate.generate_files("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"func": {"test_generate_files_nontemplated_exception": {"? -> None": [[22, "def test_generate_files_nontemplated_exception(tmp_path):"]]}, "test_generate_files": {"? -> None": [[36, "def test_generate_files(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_generate_files": {"param": {"tmp_path": {"?": [[36, "def test_generate_files(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_raise_undefined_variable_dir_name_existing_project": {"var": {"error": {"?": [[414, "    directory = os.path.join('testproject', '{{cookiecutter.foobar}}')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_generate_files_with_linux_newline": {"var": {"f": {"file": [[65, "        simple_text = f.readline()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_f": {"func": {"test_ensure_dir_is_templated_raises": {"? -> None": [[16, "def test_ensure_dir_is_templated_raises(invalid_dirname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_generate_files_nontemplated_exception": {"param": {"tmp_path": {"?": [[22, "def test_generate_files_nontemplated_exception(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_files.test_raise_undefined_variable_dir_nam": {"var": {"error": {"?": [[390, "    directory = os.path.join('testproject', '{{cookiecutter.foobar}}')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_generate_context.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_generate_context_decodes_non_ascii_chars": {"var": {"expected_context": {"dict": [[113, "    expected_context = {'non_ascii': OrderedDict([('full_name', '\u00e9\u00e8\u00e0'),])}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_generate_contex": {"param": {"input_params": {"?": [[55, "def test_generate_context(input_params, expected_context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_generate_context_with_json_decoding_error": {"var": {"path": {"?": [[72, "    path = os.path.sep.join(['tests', 'test-generate-context', 'invalid-syntax.json'])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_generate_context_with_json_decoding_erro": {"var": {"pattern": {"str": [[66, "    pattern = 'Expecting \\'{0,1}:\\'{0,1} delimiter: line 1 column (19|20) \\\\(char 19\\\\)'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"func": {"test_generate_context": {"(?, ?) -> None": [[55, "def test_generate_context(input_params, expected_context):"]]}, "test_generate_context_decodes_non_ascii_chars": {"() -> None": [[111, "def test_generate_context_decodes_non_ascii_chars():"]]}, "test_generate_context_with_json_decoding_error": {"() -> None": [[61, "def test_generate_context_with_json_decoding_error():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_default_context_replacement_in_genera": {"var": {"expected_context": {"dict": [[83, "    expected_context = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.context_data": {"var": {"context": {"(dict, dict)": [[17, "    context = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_default_context_replacement_i": {"var": {"generated_context": {"?": [[95, "    generated_context = generate.generate_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.context_d": {"var": {"context_with_extra": {"(dict, dict)": [[30, "    context_with_extra = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_g": {"var": {"context_with_default_and_extra": {"(dict, dict)": [[38, "    context_with_default_and_extra = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_default_context_replacement_in_generate_context": {"() -> None": [[76, "def test_default_context_replacement_in_generate_context():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_gener": {"var": {"context_with_default": {"(dict, dict)": [[22, "    context_with_default = ("]]}}, "func": {"context_data": {"() -> None": [[12, "def context_data():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_context.test_genera": {"param": {"expected_context": {"?": [[55, "def test_generate_context(input_params, expected_context):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_read_user_variable.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_variable": {"var": {"VARIABLE": {"str": [[6, "VARIABLE = 'project_name'"]]}, "DEFAULT": {"str": [[7, "DEFAULT = 'Kivy Project'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_variab": {"func": {"test_click_invocation": {"? -> None": [[10, "def test_click_invocation(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_variable.test_click_invocation": {"var": {"prompt": {"?": [[15, "    prompt = mocker.patch('click.prompt')"]]}}, "param": {"mocker": {"?": [[10, "def test_click_invocation(mocker):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_generate_hooks.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_run_shell_hooks_win": {"var": {"shell_post_file": {"str": [[208, "    shell_post_file = os.path.join("]]}, "shell_pre_file": {"str": [[205, "    shell_pre_file = os.path.join("]]}}, "param": {"tmpdir": {"?": [[195, "def test_run_shell_hooks_win(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_run_shell_hook": {"var": {"shell_post_file": {"str": [[186, "    shell_post_file = os.path.join("]]}, "shell_pre_file": {"str": [[183, "    shell_pre_file = os.path.join("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.remove_additional_folders": {"var": {"directory": {"str": [[25, "    for directory in directories_to_delete:"]]}}, "param": {"tmpdir": {"?": [[15, "def remove_additional_folders(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_run_shell_hooks": {"param": {"tmpdir": {"?": [[173, "def test_run_shell_hooks(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_genera": {"func": {"test_run_shell_hooks": {"? -> None": [[173, "def test_run_shell_hooks(tmpdir):"]]}, "test_oserror_hooks": {"? -> None": [[89, "def test_oserror_hooks(mocker):"]]}, "test_run_python_hooks_cwd": {"() -> None": [[58, "def test_run_python_hooks_cwd():"]]}, "test_run_python_hooks": {"() -> None": [[42, "def test_run_python_hooks():"]]}, "test_run_shell_hooks_win": {"? -> None": [[195, "def test_run_shell_hooks_win(tmpdir):"]]}, "test_ignore_shell_hooks": {"? -> None": [[216, "def test_ignore_shell_hooks(tmp_path):"]]}, "test_ignore_hooks_dirs": {"() -> None": [[31, "def test_ignore_hooks_dirs():"]]}, "test_empty_hooks": {"() -> None": [[73, "def test_empty_hooks():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.remove_additional_f": {"var": {"directories_to_delete": {"[str]": [[18, "    directories_to_delete = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_run_failing_hook_preserves_existing_output_directory": {"var": {"hook_path": {"str": [[153, "    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')"]]}, "hooks_path": {"str": [[145, "    hooks_path = os.path.abspath('tests/test-hooks/hooks')"]]}, "hook_dir": {"str": [[147, "    hook_dir = os.path.join(repo_path, 'hooks')"]]}, "template": {"str": [[148, "    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')"]]}, "repo_path": {"str": [[144, "    repo_path = os.path.abspath('tests/test-hooks/')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_ignore_shell_hooks": {"param": {"tmp_path": {"?": [[216, "def test_ignore_shell_hooks(tmp_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hook": {"func": {"remove_additional_folders": {"? -> None": [[15, "def remove_additional_folders(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks": {"var": {"WINDOWS": {"int": [[11, "WINDOWS = sys.platform.startswith('win')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_ignore_shell_hook": {"var": {"shell_post_file": {"?": [[225, "    shell_post_file = tmp_path.joinpath("]]}, "shell_pre_file": {"?": [[224, "    shell_pre_file = tmp_path.joinpath(\"test-shellhooks/inputshellhooks/shell_pre.txt\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_oserror_hooks": {"var": {"prompt": {"?": [[100, "    prompt = mocker.patch('subprocess.Popen')"]]}, "err": {"OSError": [[97, "    err = OSError(message)"]]}}, "param": {"mocker": {"?": [[89, "def test_oserror_hooks(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_run_failing_hook_removes_output_directory": {"var": {"hook_path": {"str": [[124, "    hook_path = os.path.join(hooks_path, 'pre_gen_project.py')"]]}, "hooks_path": {"str": [[116, "    hooks_path = os.path.abspath('tests/test-hooks/hooks')"]]}, "hook_dir": {"str": [[118, "    hook_dir = os.path.join(repo_path, 'hooks')"]]}, "template": {"str": [[119, "    template = os.path.join(repo_path, 'input{{cookiecutter.hooks}}')"]]}, "repo_path": {"str": [[115, "    repo_path = os.path.abspath('tests/test-hooks/')"]]}}}, ".home.xxm.Desktop.EMSE": {"func": {"test_run_failing_hook_preserves_existing_output_directory": {"() -> None": [[142, "def test_run_failing_hook_preserves_existing_output_directory():"]]}, "test_run_failing_hook_removes_output_directory": {"() -> None": [[113, "def test_run_failing_hook_removes_output_directory():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_hooks.test_oserror_hook": {"var": {"message": {"str": [[95, "    message = 'Out of memory'"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/repository.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.is_repo_ur": {"param": {"value": {"{None | str}": [[21, "def is_repo_url(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.expand_": {"param": {"abbreviations": {"{dict | dict}": [[31, "def expand_abbreviations(template, abbreviations):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determine_repo_d": {"var": {"abbreviations": {"dict": [[65, "    abbreviations,"]]}}, "param": {"abbreviations": {"dict": [[71, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determ": {"var": {"repository_candidates": {"{[str] | [{None | str}]}": [[115, "        repository_candidates = [template, os.path.join(clone_to_dir, template)]"]], "[str]": [[103, "        repository_candidates = [unzipped_dir]"], [112, "        repository_candidates = [cloned_repo]"], [119, "        repository_candidates = ["]]}, "repo_candidate": {"str": [[123, "    for repo_candidate in repository_candidates:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determine_rep": {"var": {"clone_to_dir": {"str": [[66, "    clone_to_dir,"]]}}, "param": {"clone_to_dir": {"str": [[71, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determine_repo_dir": {"var": {"no_input": {"bool": [[68, "    no_input,"]]}, "cleanup": {"bool": [[104, "        cleanup = True"], [113, "        cleanup = False"], [116, "        cleanup = False"]]}, "checkout": {"None": [[67, "    checkout,"]]}, "template": {"{None | str}": [[93, "    template = expand_abbreviations(template, abbreviations)"]], "str": [[64, "    template,"]]}}, "param": {"no_input": {"bool": [[71, "):"]]}, "checkout": {"None": [[71, "):"]]}, "template": {"str": [[71, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.repository_has_cookiecutter_j": {"var": {"repo_config_exists": {"int": [[57, "    repo_config_exists = os.path.isfile("]]}}}, ".home.xxm.Desktop.EMSE.d": {"func": {"repository_has_cookiecutter_json": {"? -> int / str -> int": [[49, "def repository_has_cookiecutter_json(repo_directory):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determine_repo_di": {"var": {"password": {"None": [[69, "    password=None,"]]}, "cloned_repo": {"str": [[106, "        cloned_repo = clone("]]}}, "param": {"password": {"None": [[71, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.repository_has_cookiecutter_json": {"var": {"repo_directory_exists": {"int": [[55, "    repo_directory_exists = os.path.isdir(repo_directory)"]]}}, "param": {"repo_directory": {"str": [[49, "def repository_has_cookiecutter_json(repo_directory):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determine_repo_": {"var": {"directory": {"None": [[70, "    directory=None,"]]}}, "param": {"directory": {"None": [[71, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.determine_repo": {"var": {"unzipped_dir": {"str": [[96, "        unzipped_dir = unzip("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository": {"var": {"REPO_REGEX": {"?": [[9, "REPO_REGEX = re.compile("]]}}, "func": {"determine_repo_dir": {"(?, dict, None, None, bool, None, None) -> (?, bool) / (?, ?, ?, ?, ?, None, None) -> (?, bool) / (?, dict, ?, None, bool, None, None) -> (?, bool) / (str, ?, ?, None, bool, None, None) -> (str, bool) / (str, dict, str, None, bool, None, None) -> (str, bool) / (?, ?, ?, None, bool, None, None) -> (?, bool)": [[63, "def determine_repo_dir("]]}, "expand_abbreviations": {"(str, dict) -> str / (?, dict) -> None / (str, ?) -> str / (?, ?) -> None": [[31, "def expand_abbreviations(template, abbreviations):"]]}, "is_zip_file": {"? -> None / str -> int / None -> None": [[26, "def is_zip_file(value):"]]}, "is_repo_url": {"? -> bool / str -> bool / None -> bool": [[21, "def is_repo_url(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.expand_abbreviations": {"var": {"prefix": {"?": [[42, "    prefix, sep, rest = template.partition(':')"]]}}, "param": {"template": {"str": [[31, "def expand_abbreviations(template, abbreviations):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.repository.is_zip_fi": {"param": {"value": {"{None | str}": [[26, "def is_zip_file(value):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_main.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_custom_replay": {"param": {"user_config_file": {"?": [[57, "def test_custom_replay_file(monkeypatch, mocker, user_config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_load_template_n": {"var": {"mock_replay_load": {"?": [[45, "    mock_replay_load = mocker.patch('cookiecutter.main.load')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_dump_template_nam": {"param": {"user_config_file": {"?": [[7, "):"]]}, "user_config_data": {"?": [[7, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_load_template_na": {"param": {"mocker": {"?": [[35, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_dump_template_na": {"param": {"mocker": {"?": [[7, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main": {"func": {"test_custom_replay_file": {"(?, ?, ?) -> None": [[57, "def test_custom_replay_file(monkeypatch, mocker, user_config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_dump_template_n": {"var": {"mock_replay_dump": {"?": [[21, "    mock_replay_dump = mocker.patch('cookiecutter.main.dump')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_mai": {"func": {"test_replay_dump_template_name": {"(?, ?, ?, ?) -> None": [[5, "def test_replay_dump_template_name("]]}, "test_replay_load_template_name": {"(?, ?, ?, ?) -> None": [[33, "def test_replay_load_template_name("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_dump_template_": {"var": {"monkeypatch": {"?": [[6, "    monkeypatch, mocker, user_config_data, user_config_file"]]}}, "param": {"monkeypatch": {"?": [[7, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_load_template_nam": {"param": {"user_config_file": {"?": [[35, "):"]]}, "user_config_data": {"?": [[35, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_custom_replay_fil": {"param": {"monkeypatch": {"?": [[57, "def test_custom_replay_file(monkeypatch, mocker, user_config_file):"]]}, "mocker": {"?": [[57, "def test_custom_replay_file(monkeypatch, mocker, user_config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_custom_replay_fi": {"var": {"mock_replay_load": {"?": [[61, "    mock_replay_load = mocker.patch('cookiecutter.main.load')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_main.test_replay_load_template_": {"var": {"monkeypatch": {"?": [[34, "    monkeypatch, mocker, user_config_data, user_config_file"]]}}, "param": {"monkeypatch": {"?": [[35, "):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test-pyhooks/hooks/pre_gen_project.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-pyhooks.hooks.pre_gen_project": {"var": {"f": {"file": [[5, "f = open('python_pre.txt', 'w')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_log.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.test_debug_file_loggin": {"param": {"caplog": {"?": [[106, "def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):"]]}, "debug_file": {"?": [[106, "def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):"]]}, "debug_messages": {"?": [[106, "def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_debug_stdout_logging": {"(?, ?, ?) -> None": [[89, "def test_debug_stdout_logging(caplog, debug_logger, debug_messages):"]]}, "test_debug_file_logging": {"(?, ?, ?, ?) -> None": [[106, "def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):"]]}, "test_info_stdout_logging": {"(?, ?, ?) -> None": [[72, "def test_info_stdout_logging(caplog, info_logger, info_messages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.tes": {"func": {"info_logger_with_file": {"? -> None": [[67, "def info_logger_with_file(debug_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.test_info_stdout_l": {"param": {"info_messages": {"?": [[72, "def test_info_stdout_logging(caplog, info_logger, info_messages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"func": {"create_log_records": {"() -> None": [[9, "def create_log_records():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.info_logger_with": {"param": {"debug_file": {"?": [[67, "def info_logger_with_file(debug_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test": {"func": {"info_logger": {"() -> None": [[49, "def info_logger():"]]}, "debug_logger": {"() -> None": [[55, "def debug_logger():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.test_info_stdout_loggin": {"var": {"stream_messages": {"[?]": [[80, "    stream_messages = ["]]}}, "param": {"caplog": {"?": [[72, "def test_info_stdout_logging(caplog, info_logger, info_messages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_l": {"func": {"info_messages": {"() -> [str]": [[25, "def info_messages():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.test_debug_stdout_loggin": {"var": {"stream_messages": {"[?]": [[97, "    stream_messages = ["]]}}, "param": {"caplog": {"?": [[89, "def test_debug_stdout_logging(caplog, debug_logger, debug_messages):"]]}, "debug_logger": {"?": [[89, "def test_debug_stdout_logging(caplog, debug_logger, debug_messages):"]]}, "debug_messages": {"?": [[89, "def test_debug_stdout_logging(caplog, debug_logger, debug_messages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.debug_file": {"param": {"tmpdir": {"?": [[61, "def debug_file(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_lo": {"func": {"debug_file": {"? -> str": [[61, "def debug_file(tmpdir):"]]}, "debug_messages": {"() -> [str]": [[35, "def debug_messages():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.test_debu": {"param": {"info_logger_with_file": {"?": [[106, "def test_debug_file_logging(caplog, info_logger_with_file, debug_file, debug_messages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.create_log_records": {"var": {"cookiecutter_logger": {"?": [[11, "    cookiecutter_logger = logging.getLogger('cookiecutter')"]]}, "foobar_logger": {"?": [[13, "    foobar_logger = logging.getLogger('cookiecutter.foo.bar')"]]}, "foo_logger": {"?": [[12, "    foo_logger = logging.getLogger('cookiecutter.foo')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_log.test_info_stdout": {"param": {"info_logger": {"?": [[72, "def test_info_stdout_logging(caplog, info_logger, info_messages):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_cookiecutter_invocation.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_invocation.test_should_invoke_main": {"var": {"exit_code": {"?": [[31, "    exit_code = subprocess.check_call("]]}}, "param": {"project_dir": {"?": [[27, "def test_should_invoke_main(monkeypatch, project_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_invocation": {"func": {"project_dir": {"() -> None": [[18, "def project_dir():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_invocation.test_should_invoke_mai": {"param": {"monkeypatch": {"?": [[27, "def test_should_invoke_main(monkeypatch, project_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_invoc": {"func": {"test_should_invoke_main": {"(?, ?) -> None": [[27, "def test_should_invoke_main(monkeypatch, project_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/repository/test_is_repo_url.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_ur": {"func": {"test_is_zip_file": {"? -> None": [[20, "def test_is_zip_file(zipfile):"]]}, "zipfile": {"? -> None": [[15, "def zipfile(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.zipfil": {"param": {"request": {"?": [[15, "def zipfile(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url": {"func": {"test_expand_abbreviations": {"() -> None": [[66, "def test_expand_abbreviations():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.test_is_zip_": {"param": {"zipfile": {"?": [[20, "def test_is_zip_file(zipfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is": {"func": {"remote_repo_url": {"? -> None": [[36, "def remote_repo_url(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.remote_repo_url": {"param": {"request": {"?": [[36, "def remote_repo_url(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.test_is_repo_url_for_local_urls": {"param": {"local_repo_url": {"?": [[61, "def test_is_repo_url_for_local_urls(local_repo_url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.test_expand_abbreviations": {"var": {"expanded_template": {"str": [[74, "    expanded_template = expand_abbreviations(template, BUILTIN_ABBREVIATIONS)"]]}, "template": {"str": [[68, "    template = 'gh:audreyr/cookiecutter-pypackage'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository": {"func": {"test_is_repo_url_for_remote_urls": {"? -> None": [[41, "def test_is_repo_url_for_remote_urls(remote_repo_url):"]]}, "test_is_repo_url_for_local_urls": {"? -> None": [[61, "def test_is_repo_url_for_local_urls(local_repo_url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.ault_output_dir0": {"param": {"request": {"?": [[56, "def local_repo_url(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.repository.test_is_repo_url.test_is_repo_url_for_remote_urls": {"param": {"remote_repo_url": {"?": [[41, "def test_is_repo_url_for_remote_urls(remote_repo_url):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_find.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_find_template": {"? -> None": [[15, "def test_find_template(repo_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_fin": {"func": {"repo_dir": {"? -> str": [[10, "def repo_dir(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_find.test_find_templat": {"param": {"repo_dir": {"?": [[15, "def test_find_template(repo_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_find.test_find_templa": {"var": {"test_dir": {"str": [[19, "    test_dir = os.path.join(repo_dir, '{{cookiecutter.repo_name}}')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_find.test_find_": {"var": {"template": {"str": [[17, "    template = find.find_template(repo_dir=repo_dir)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_find.repo_di": {"param": {"request": {"?": [[10, "def repo_dir(request):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test-pyshellhooks/hooks/pre_gen_project.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test-pyshellhooks.hooks.pre_gen_project": {"var": {"f": {"file": [[6, "f = open('python_pre.txt', 'w')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_generate_copy_without_render.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_copy_without_render.test_generate_copy_without_render_ex": {"var": {"dir_contents": {"[str]": [[41, "    dir_contents = os.listdir('test_copy_without_render')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_generate_copy_without_render_extensions": {"() -> None": [[19, "def test_generate_copy_without_render_extensions():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_generate_copy_without_ren": {"func": {"remove_test_dir": {"() -> None": [[11, "def remove_test_dir():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/zipfile/test_unzip.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_password": {"param": {"mocker": {"?": [[88, "def test_unzip_protected_local_file_user_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_un": {"func": {"test_bad_zip_file": {"(?, ?) -> None": [[154, "def test_bad_zip_file(mocker, tmpdir):"]]}, "test_empty_zip_file": {"(?, ?) -> None": [[126, "def test_empty_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_empty_zip_file": {"param": {"tmpdir": {"?": [[126, "def test_empty_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url_existing_cache_no_in": {"var": {"output_dir": {"str": [[237, "    output_dir = zipfile.unzip("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_u": {"func": {"test_non_repo_zip_file": {"(?, ?) -> None": [[140, "def test_non_repo_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_environment_password": {"param": {"mocker": {"?": [[35, "def test_unzip_protected_local_file_environment_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url_existing_cache": {"var": {"output_dir": {"str": [[212, "    output_dir = zipfile.unzip("]]}}, "param": {"tmpdir": {"?": [[193, "def test_unzip_url_existing_cache(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_local_f": {"var": {"clone_to_dir": {"?": [[25, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_bad_zip_f": {"var": {"clone_to_dir": {"?": [[160, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_passwo": {"param": {"tmpdir": {"?": [[88, "def test_unzip_protected_local_file_user_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_empty_zip_fil": {"param": {"mocker": {"?": [[126, "def test_empty_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_bad_environment_passwo": {"param": {"tmpdir": {"?": [[54, "def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_unzip_local_file": {"(?, ?) -> None": [[19, "def test_unzip_local_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url_existing_cach": {"var": {"existing_zip": {"?": [[209, "    existing_zip = clone_to_dir.join('fake-repo-tmpl.zip')"]]}, "mock_prompt_and_delete": {"?": [[195, "    mock_prompt_and_delete = mocker.patch("]]}, "request": {"?": [[199, "    request = mocker.MagicMock()"]]}, "clone_to_dir": {"?": [[206, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}, "param": {"mocker": {"?": [[193, "def test_unzip_url_existing_cache(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip": {"func": {"mock_download": {"() -> None": [[10, "def mock_download():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url": {"var": {"request": {"?": [[174, "    request = mocker.MagicMock()"]]}, "output_dir": {"str": [[183, "    output_dir = zipfile.unzip("]]}}, "param": {"mocker": {"?": [[168, "def test_unzip_url(mocker, tmpdir):"]]}, "tmpdir": {"?": [[168, "def test_unzip_url(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_bad_environment_password": {"param": {"mocker": {"?": [[54, "def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_bad_password": {"param": {"mocker": {"?": [[107, "def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_local_fil": {"param": {"mocker": {"?": [[19, "def test_unzip_local_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiec": {"func": {"test_unzip_should_abort_if_no_redownload": {"(?, ?) -> None": [[247, "def test_unzip_should_abort_if_no_redownload(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"test_unzip_protected_local_file_user_bad_password": {"(?, ?) -> None": [[107, "def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):"]]}, "test_unzip_protected_local_file_environment_password": {"(?, ?) -> None": [[35, "def test_unzip_protected_local_file_environment_password(mocker, tmpdir):"]]}, "test_unzip_protected_local_file_user_password_with_noinput": {"(?, ?) -> None": [[71, "def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):"]]}, "test_unzip_protected_local_file_user_password": {"(?, ?) -> None": [[88, "def test_unzip_protected_local_file_user_password(mocker, tmpdir):"]]}, "test_unzip_protected_local_file_bad_environment_password": {"(?, ?) -> None": [[54, "def test_unzip_protected_local_file_bad_environment_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_password_with_noinput": {"param": {"mocker": {"?": [[71, "def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_local_file": {"var": {"output_dir": {"str": [[27, "    output_dir = zipfile.unzip("]]}}, "param": {"tmpdir": {"?": [[19, "def test_unzip_local_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_local_fi": {"var": {"mock_prompt_and_delete": {"?": [[21, "    mock_prompt_and_delete = mocker.patch("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_passw": {"var": {"mock_prompt_and_delete": {"?": [[90, "    mock_prompt_and_delete = mocker.patch("]]}, "clone_to_dir": {"?": [[95, "    clone_to_dir = tmpdir.mkdir('clone')"]]}, "output_dir": {"str": [[97, "    output_dir = zipfile.unzip("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url_existing_cache_no_inpu": {"var": {"existing_zip": {"?": [[234, "    existing_zip = clone_to_dir.join('fake-repo-tmpl.zip')"]]}, "clone_to_dir": {"?": [[231, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}, "param": {"tmpdir": {"?": [[222, "def test_unzip_url_existing_cache_no_input(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_bad_passwo": {"param": {"tmpdir": {"?": [[107, "def test_unzip_protected_local_file_user_bad_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_bad_environment_passw": {"var": {"clone_to_dir": {"?": [[60, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_bad_zip_fil": {"param": {"mocker": {"?": [[154, "def test_bad_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_u": {"var": {"mock_prompt_and_delete": {"?": [[170, "    mock_prompt_and_delete = mocker.patch("]]}, "clone_to_dir": {"?": [[181, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_non_repo_zip_file": {"param": {"tmpdir": {"?": [[140, "def test_non_repo_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_empty_zip_f": {"var": {"clone_to_dir": {"?": [[132, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_bad_passw": {"var": {"clone_to_dir": {"?": [[116, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_non_repo_zip_fil": {"param": {"mocker": {"?": [[140, "def test_non_repo_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.mock_download": {"var": {"chunk": {"str": [[13, "        chunk = zf.read(1024)"], [16, "            chunk = zf.read(1024)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_non_repo_zip_f": {"var": {"clone_to_dir": {"?": [[146, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_environment_passw": {"var": {"mock_prompt_and_delete": {"?": [[37, "    mock_prompt_and_delete = mocker.patch("]]}, "clone_to_dir": {"?": [[41, "    clone_to_dir = tmpdir.mkdir('clone')"]]}, "output_dir": {"str": [[43, "    output_dir = zipfile.unzip("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_should_abort_if_no_redownloa": {"var": {"clone_to_dir": {"?": [[257, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}, "param": {"tmpdir": {"?": [[247, "def test_unzip_should_abort_if_no_redownload(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_environment_passwo": {"param": {"tmpdir": {"?": [[35, "def test_unzip_protected_local_file_environment_password(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipf": {"func": {"test_unzip_url_existing_cache": {"(?, ?) -> None": [[193, "def test_unzip_url_existing_cache(mocker, tmpdir):"]]}, "test_unzip_url": {"(?, ?) -> None": [[168, "def test_unzip_url(mocker, tmpdir):"]]}, "test_unzip_url_existing_cache_no_input": {"(?, ?) -> None": [[222, "def test_unzip_url_existing_cache_no_input(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_protected_local_file_user_password_with_noinpu": {"var": {"clone_to_dir": {"?": [[77, "    clone_to_dir = tmpdir.mkdir('clone')"]]}}, "param": {"tmpdir": {"?": [[71, "def test_unzip_protected_local_file_user_password_with_noinput(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url_existing_cache_no_inp": {"var": {"request": {"?": [[224, "    request = mocker.MagicMock()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_bad_zip_file": {"param": {"tmpdir": {"?": [[154, "def test_bad_zip_file(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_url_existing_cache_no_input": {"param": {"mocker": {"?": [[222, "def test_unzip_url_existing_cache_no_input(mocker, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.zipfile.test_unzip.test_unzip_should_abort_if_no_redownload": {"var": {"zipfile_url": {"str": [[263, "    zipfile_url = 'https://example.com/path/to/fake-repo-tmpl.zip'"]]}, "existing_zip": {"?": [[260, "    existing_zip = clone_to_dir.join('fake-repo-tmpl.zip')"]]}, "mock_requests_get": {"?": [[253, "    mock_requests_get = mocker.patch("]]}}, "param": {"mocker": {"?": [[247, "def test_unzip_should_abort_if_no_redownload(mocker, tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_default_extensions.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_default_extensions.test_jinja2_time_extens": {"var": {"changelog_file": {"str": [[24, "    changelog_file = os.path.join(project_dir, 'HISTORY.rst')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_default_extensions": {"var": {"freezer": {"?": [[13, "    freezer = freezegun.freeze_time(\"2015-12-09 23:33:01\")"]]}}, "func": {"freeze": {"() -> None": [[11, "def freeze():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_default_extensions.test_jinja2_time_extension": {"var": {"project_dir": {"str": [[21, "    project_dir = cookiecutter("]]}}, "param": {"tmpdir": {"?": [[19, "def test_jinja2_time_extension(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_defaul": {"func": {"test_jinja2_time_extension": {"? -> None": [[19, "def test_jinja2_time_extension(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_default_extensions.test_jinja2_slugify_extension": {"var": {"project_dir": {"str": [[44, "    project_dir = cookiecutter("]]}}, "param": {"tmpdir": {"?": [[42, "def test_jinja2_slugify_extension(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_d": {"func": {"test_jinja2_slugify_extension": {"? -> None": [[42, "def test_jinja2_slugify_extension(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_default_extensions.test_jinja2_time_ext": {"var": {"changelog_lines": {"[str]": [[28, "        changelog_lines = f.readlines()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_default_extensions.test_jinja2_time_extensio": {"var": {"expected_lines": {"[str]": [[30, "    expected_lines = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/extensions.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.JsonifyExtension.__init__.jsonify": {"param": {"obj": {"?": [[17, "        def jsonify(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.RandomStringExtension.__init__.random_ascii_string": {"var": {"corpus": {"?": [[34, "                corpus = string.ascii_letters"]], "str": [[32, "                corpus = \"\".join((string.ascii_letters, string.punctuation))"]]}}, "param": {"punctuation": {"bool": [[30, "        def random_ascii_string(length, punctuation=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecu": {"class": {"RandomStringExtension": {"<RandomStringExtension>": [[23, "class RandomStringExtension(Extension):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.RandomStringExte": {"func": {"random_ascii_string": {"(?, bool) -> str": [[30, "        def random_ascii_string(length, punctuation=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.RandomStringExtension.__init__": {"param": {"environment": {"?": [[26, "    def __init__(self, environment):"]]}, "self": {"RandomStringExtension": [[26, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.JsonifyExtensio": {"func": {"__init__": {"? -> ?": [[13, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.RandomStringExtensio": {"func": {"__init__": {"? -> ?": [[26, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.SlugifyExtension.__init__": {"param": {"environment": {"?": [[43, "    def __init__(self, environment):"]]}, "self": {"SlugifyExtension": [[43, "    def __init__(self, environment):"]]}}, "func": {"slugify": {"? -> None": [[47, "        def slugify(value, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.JsonifyExtension.__init__": {"param": {"environment": {"?": [[13, "    def __init__(self, environment):"]]}, "self": {"JsonifyExtension": [[13, "    def __init__(self, environment):"]]}}, "func": {"jsonify": {"? -> ?": [[17, "        def jsonify(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.SlugifyExtension.__init__.slugify": {"param": {"value": {"?": [[47, "        def slugify(value, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.RandomStringExtension.__init__.random_ascii_stri": {"param": {"length": {"?": [[30, "        def random_ascii_string(length, punctuation=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.extensions.SlugifyExtensio": {"func": {"__init__": {"? -> ?": [[43, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter": {"class": {"JsonifyExtension": {"<JsonifyExtension>": [[10, "class JsonifyExtension(Extension):"]]}, "SlugifyExtension": {"<SlugifyExtension>": [[40, "class SlugifyExtension(Extension):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_read_user_yes_no.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_yes_no.test_click_invocation": {"var": {"prompt": {"?": [[15, "    prompt = mocker.patch('click.prompt')"]]}}, "param": {"mocker": {"?": [[10, "def test_click_invocation(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_y": {"func": {"test_click_invocation": {"? -> None": [[10, "def test_click_invocation(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_read_user_yes_no": {"var": {"DEFAULT": {"str": [[7, "DEFAULT = 'y'"]]}, "QUESTION": {"str": [[6, "QUESTION = 'Is it okay to delete and re-clone it?'"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_custom_extensions_in_hooks.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom": {"func": {"test_hook_with_extension": {"(?, ?) -> None": [[36, "def test_hook_with_extension(template, output_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom_extensions_in_hooks": {"func": {"output_dir": {"? -> str": [[25, "def output_dir(tmpdir):"]]}, "template": {"? -> str": [[19, "def template(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom_extensions_in_hooks.output_": {"param": {"tmpdir": {"?": [[25, "def output_dir(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom_extensions_in_hooks.templa": {"param": {"request": {"?": [[19, "def template(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom_extensions_in_hooks.modify_sys": {"param": {"monkeypatch": {"?": [[31, "def modify_syspath(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom_extensions_in_hook": {"func": {"modify_syspath": {"? -> None": [[31, "def modify_syspath(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_custom_extensions_in_hooks.test_hook_with_extension": {"var": {"readme_file": {"str": [[49, "    readme_file = os.path.join(project_dir, 'README.rst')"]]}, "readme": {"?": [[52, "        readme = f.read().strip()"]]}, "project_dir": {"str": [[42, "    project_dir = main.cookiecutter("]]}}, "param": {"output_dir": {"?": [[36, "def test_hook_with_extension(template, output_dir):"]]}, "template": {"?": [[36, "def test_hook_with_extension(template, output_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/find.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.find": {"var": {"logger": {"?": [[7, "logger = logging.getLogger(__name__)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.find.find_templa": {"var": {"repo_dir_contents": {"[str]": [[18, "    repo_dir_contents = os.listdir(repo_dir)"]]}, "item": {"str": [[21, "    for item in repo_dir_contents:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.find.find": {"var": {"project_template": {"None": [[20, "    project_template = None"]], "str": [[23, "            project_template = item"], [27, "        project_template = os.path.join(repo_dir, project_template)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.find.find_templat": {"param": {"repo_dir": {"str": [[10, "def find_template(repo_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter": {"func": {"find_template": {"? -> str / str -> str": [[10, "def find_template(repo_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/main.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.main.cookiecutte": {"var": {"password": {"None": [[31, "    password=None,"]]}, "output_dir": {"str": [[28, "    output_dir='.',"]]}}, "param": {"password": {"None": [[35, "):"]]}, "output_dir": {"str": [[35, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.main.cookiec": {"var": {"result": {"str": [[107, "    result = generate_files("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.main.cookiecu": {"var": {"directory": {"None": [[32, "    directory=None,"]]}, "extra_context": {"None": [[25, "    extra_context=None,"]]}, "overwrite_if_exists": {"bool": [[27, "    overwrite_if_exists=False,"]]}}, "param": {"directory": {"None": [[35, "):"]]}, "extra_context": {"None": [[35, "):"]]}, "overwrite_if_exists": {"bool": [[35, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.main.cookiecutt": {"var": {"repo_dir": {"str": [[66, "    repo_dir, cleanup = determine_repo_dir("]]}, "replay": {"None": [[26, "    replay=None,"]]}, "err_msg": {"str": [[56, "        err_msg = ("]]}}, "param": {"replay": {"None": [[35, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.main.cookiecutter": {"var": {"context": {"None": [[80, "            context = load(config_dict['replay_dir'], template_name)"], [83, "            context = load(path, template_name)"]], "?": [[88, "        context = generate_context("]]}, "no_input": {"bool": [[24, "    no_input=False,"]]}, "accept_hooks": {"bool": [[34, "    accept_hooks=True,"]]}, "template_name": {"str": [[76, "    template_name = os.path.basename(os.path.abspath(repo_dir))"]]}, "config_dict": {"?": [[62, "    config_dict = get_user_config("]]}, "template": {"str": [[22, "    template,"]]}, "path": {"str": [[82, "            path, template_name = os.path.split(os.path.splitext(replay)[0])"]]}, "config_file": {"None": [[29, "    config_file=None,"]]}, "skip_if_file_exists": {"bool": [[33, "    skip_if_file_exists=False,"]]}, "checkout": {"None": [[23, "    checkout=None,"]]}, "context_file": {"str": [[85, "        context_file = os.path.join(repo_dir, 'cookiecutter.json')"]]}, "default_config": {"bool": [[30, "    default_config=False,"]]}}, "param": {"no_input": {"bool": [[35, "):"]]}, "accept_hooks": {"bool": [[35, "):"]]}, "template": {"str": [[35, "):"]]}, "config_file": {"None": [[35, "):"]]}, "skip_if_file_exists": {"bool": [[35, "):"]]}, "checkout": {"None": [[35, "):"]]}, "default_config": {"bool": [[35, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.main": {"var": {"logger": {"?": [[18, "logger = logging.getLogger(__name__)"]]}}, "func": {"cookiecutter": {"(?, None, bool, None, None, bool, str, None, bool, None, None, bool, bool) -> str / (str, None, bool, None, None, bool, str, None, bool, None, None, bool, bool) -> str": [[21, "def cookiecutter("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_preferred_encoding.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_preferred_encoding.test_not_ascii": {"var": {"fs_enc": {"str": [[26, "        fs_enc = 'ascii'"]], "?": [[24, "        fs_enc = codecs.lookup(preferred_encoding).name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_preferred_encoding": {"var": {"PY3": {"bool": [[8, "PY3 = sys.version_info[0] == 3"]]}}, "func": {"test_not_ascii": {"() -> ?": [[12, "def test_not_ascii():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_preferred_encoding.test_not_as": {"var": {"preferred_encoding": {"?": [[23, "        preferred_encoding = locale.getpreferredencoding()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_cli.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_overwrite_if_exists_when_output_dir_does_not_exist": {"var": {"cli_runner": {"?": [[212, "    cli_runner, overwrite_cli_flag"]]}}, "param": {"cli_runner": {"?": [[213, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templates_fail": {"param": {"user_config_path": {"?": [[515, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_overwrite_if_exists_when_output_dir_does_not_exi": {"var": {"result": {"?": [[218, "    result = cli_runner('tests/fake-repo-pre/', '--no-input', overwrite_cli_flag)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_default_user_config_overwri": {"var": {"template_path": {"str": [[320, "    template_path = 'tests/fake-repo-pre/'"]]}, "result": {"?": [[321, "    result = cli_runner("]]}}, "param": {"template_path": {"?": [[343, "def test_default_user_config(mocker, cli_runner):"]]}, "result": {"str": [[343, "def test_default_user_config(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_undefined_variable_erro": {"var": {"result": {"?": [[377, "    result = cli_runner("]]}}, "param": {"cli_runner": {"str": [[372, "def test_echo_undefined_variable_error(tmpdir, cli_runner):"]]}, "tmpdir": {"?": [[372, "def test_echo_undefined_variable_error(tmpdir, cli_runner):"]]}, "result": {"str": [[379, "    )"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_file_non_verbo": {"var": {"result": {"?": [[454, "    result = cli_runner("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templa": {"var": {"result": {"?": [[505, "    result = cli_runner("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templates_fa": {"var": {"cli_runner": {"?": [[514, "    cli_runner, debug_file, user_config_path"]]}}, "param": {"cli_runner": {"?": [[515, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_accept_hook": {"var": {"user_input": {"?": [[558, "    user_input,"]]}, "result": {"?": [[565, "    result = cli_runner("]]}}, "param": {"user_input": {"?": [[560, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test": {"func": {"version_cli_flag": {"? -> None": [[45, "def version_cli_flag(request):"]]}, "help_cli_flag": {"? -> None": [[273, "def help_cli_flag(request):"]]}, "cli_runner": {"() -> () -> None": [[16, "def cli_runner():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.version_cli_flag": {"param": {"request": {"?": [[45, "def version_cli_flag(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_version": {"var": {"result": {"?": [[52, "    result = cli_runner(version_cli_flag)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_overwrite_if_exists_when_output_dir_exi": {"var": {"result": {"?": [[230, "    result = cli_runner('tests/fake-repo-pre/', '--no-input', overwrite_cli_flag)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_accept_hooks": {"var": {"cli_runner": {"?": [[554, "    cli_runner,"]]}, "output_dir_flag": {"?": [[555, "    output_dir_flag,"]]}, "mock_cookiecutter": {"?": [[562, "    mock_cookiecutter = mocker.patch(\"cookiecutter.cli.cookiecutter\")"]]}, "output_dir": {"?": [[556, "    output_dir,"]]}, "expected": {"?": [[559, "    expected,"]]}, "template_path": {"str": [[564, "    template_path = \"tests/fake-repo-pre/\""]]}, "mocker": {"?": [[553, "    mocker,"]]}}, "param": {"expected": {"?": [[560, "):"]]}, "output_dir": {"?": [[560, "):"]]}, "output_dir_flag": {"?": [[560, "):"]]}, "mocker": {"?": [[560, "):"]]}, "cli_runner": {"?": [[560, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_c": {"func": {"output_dir_flag": {"? -> None": [[236, "def output_dir_flag(request):"]]}, "test_debug_file_non_verbose": {"(?, ?) -> None": [[447, "def test_debug_file_non_verbose(cli_runner, debug_file):"]]}, "test_debug_list_installed_templates": {"(?, ?, ?) -> None": [[497, "def test_debug_list_installed_templates(cli_runner, debug_file, user_config_path):"]]}, "debug_file": {"? -> None": [[441, "def debug_file(tmpdir):"]]}, "test_debug_file_verbose": {"(?, ?) -> None": [[470, "def test_debug_file_verbose(cli_runner, debug_file):"]]}, "test_debug_list_installed_templates_failure": {"(?, ?, ?) -> None": [[513, "def test_debug_list_installed_templates_failure("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_verbos": {"param": {"cli_runner": {"?": [[77, "def test_cli_verbose(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.output_": {"param": {"tmpdir": {"?": [[242, "def output_dir(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.make_fake_project_di": {"param": {"request": {"?": [[39, "def make_fake_project_dir(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_output_di": {"var": {"result": {"?": [[252, "    result = cli_runner(template_path, output_dir_flag, output_dir)"]]}}, "param": {"mocker": {"?": [[247, "def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_cli_accept_hooks": {"(?, ?, ?, ?, ?, ?, ?) -> None": [[552, "def test_cli_accept_hooks("]]}, "test_cli_help": {"(?, ?) -> None": [[278, "def test_cli_help(cli_runner, help_cli_flag):"]]}, "test_cli": {"? -> None": [[67, "def test_cli(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_overwrite_if_exists_when_output_dir_does_not_exis": {"param": {"overwrite_cli_flag": {"?": [[213, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_user_config": {"var": {"mock_cookiecutter": {"?": [[293, "    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')"]]}, "template_path": {"str": [[295, "    template_path = 'tests/fake-repo-pre/'"]]}, "result": {"?": [[296, "    result = cli_runner(template_path, '--config-file', user_config_path)"]]}}, "param": {"mocker": {"?": [[291, "def test_user_config(mocker, cli_runner, user_config_path):"]]}, "cli_runner": {"?": [[291, "def test_user_config(mocker, cli_runner, user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_error_on_existing_output_directory": {"var": {"result": {"?": [[60, "    result = cli_runner('tests/fake-repo-pre/', '--no-input')"]]}, "expected_error_msg": {"str": [[62, "    expected_error_msg = 'Error: \"fake-project\" directory already exists\\n'"]]}}, "param": {"cli_runner": {"?": [[58, "def test_cli_error_on_existing_output_directory(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_undefined_variable_error": {"var": {"message": {"str": [[386, "    message = ("]]}, "template_path": {"str": [[375, "    template_path = 'tests/undefined-variable/file-name/'"]]}, "context": {"dict": [[391, "    context = {"]]}}, "param": {"template_path": {"?": [[379, "    )"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"var": {"cli_accept_hook_arg_testdata": {"[(str, str, bool)]": [[541, "cli_accept_hook_arg_testdata = ["]]}}, "func": {"test_cli_verbose": {"? -> None": [[77, "def test_cli_verbose(cli_runner):"]]}, "test_cli_version": {"(?, ?) -> None": [[50, "def test_cli_version(cli_runner, version_cli_flag):"]]}, "test_cli_replay_file": {"(?, ?) -> None": [[113, "def test_cli_replay_file(mocker, cli_runner):"]]}, "test_cli_extra_context": {"? -> None": [[418, "def test_cli_extra_context(cli_runner):"]]}, "test_cli_extra_context_invalid_format": {"? -> None": [[430, "def test_cli_extra_context_invalid_format(cli_runner):"]]}, "test_cli_replay": {"(?, ?) -> None": [[87, "def test_cli_replay(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_verbo": {"var": {"result": {"?": [[79, "    result = cli_runner('tests/fake-repo-pre/', '--no-input', '-v')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_c": {"param": {"output_dir_flag": {"?": [[247, "def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_undefined_variable_e": {"var": {"output_dir": {"str": [[374, "    output_dir = str(tmpdir.mkdir('output'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_versio": {"param": {"cli_runner": {"?": [[50, "def test_cli_version(cli_runner, version_cli_flag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_default_user_config": {"var": {"mock_cookiecutter": {"?": [[345, "    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')"]]}, "template_path": {"str": [[347, "    template_path = 'tests/fake-repo-pre/'"]]}, "result": {"?": [[348, "    result = cli_runner(template_path, '--default-config')"]]}}, "param": {"result": {"str": [[372, "def test_echo_undefined_variable_error(tmpdir, cli_runner):"]]}, "template_path": {"?": [[372, "def test_echo_undefined_variable_error(tmpdir, cli_runner):"]]}, "mocker": {"?": [[343, "def test_default_user_config(mocker, cli_runner):"]]}, "cli_runner": {"str": [[343, "def test_default_user_config(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_overwrite_if_exists_when_output_dir_exists": {"param": {"cli_runner": {"?": [[225, "def test_cli_overwrite_if_exists_when_output_dir_exists(cli_runner, overwrite_cli_flag):"]]}, "overwrite_cli_flag": {"?": [[225, "def test_cli_overwrite_if_exists_when_output_dir_exists(cli_runner, overwrite_cli_flag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test": {"param": {"version_cli_flag": {"?": [[50, "def test_cli_version(cli_runner, version_cli_flag):"]]}, "help_cli_flag": {"?": [[278, "def test_cli_help(cli_runner, help_cli_flag):"]]}, "cli_runner": {"?": [[67, "def test_cli(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"param": {"test_default_user_config": {"?": [[343, "def test_default_user_config(mocker, cli_runner):"]]}, "test_echo_undefined_variable_error": {"?": [[372, "def test_echo_undefined_variable_error(tmpdir, cli_runner):"]]}}, "func": {"test_cli_error_on_existing_output_directory": {"? -> None": [[58, "def test_cli_error_on_existing_output_directory(cli_runner):"]]}, "test_default_user_config_overwrite": {"(?, ?, ?) -> None": [[316, "def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):"]]}, "test_cli_overwrite_if_exists_when_output_dir_exists": {"(?, ?) -> None": [[225, "def test_cli_overwrite_if_exists_when_output_dir_exists(cli_runner, overwrite_cli_flag):"]]}, "test_cli_exit_on_noinput_and_replay": {"(?, ?) -> None": [[139, "def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):"]]}, "test_echo_undefined_variable_error": {"(?, ?) -> None": [[372, "def test_echo_undefined_variable_error(tmpdir, cli_runner):"]]}, "test_cli_output_dir": {"(?, ?, ?, ?) -> None": [[247, "def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):"]]}, "test_default_user_config": {"(?, ?) -> None": [[343, "def test_default_user_config(mocker, cli_runner):"]]}, "test_cli_overwrite_if_exists_when_output_dir_does_not_exist": {"(?, ?) -> None": [[211, "def test_cli_overwrite_if_exists_when_output_dir_does_not_exist("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templ": {"param": {"user_config_path": {"?": [[497, "def test_debug_list_installed_templates(cli_runner, debug_file, user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_replay": {"var": {"mock_cookiecutter": {"?": [[89, "    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')"]]}, "template_path": {"str": [[91, "    template_path = 'tests/fake-repo-pre/'"]]}, "result": {"?": [[92, "    result = cli_runner(template_path, '--replay', '-v')"]]}}, "param": {"mocker": {"?": [[87, "def test_cli_replay(mocker, cli_runner):"]]}, "cli_runner": {"?": [[87, "def test_cli_replay(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_default_user_config_overwrit": {"param": {"mocker": {"?": [[316, "def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):"]]}, "cli_runner": {"?": [[316, "def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.help_cli_flag": {"param": {"request": {"?": [[273, "def help_cli_flag(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templates_failur": {"param": {"debug_file": {"?": [[515, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.overwrite_cli_flag": {"param": {"request": {"?": [[174, "def overwrite_cli_flag(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_file_verbos": {"var": {"context_log": {"str": [[488, "    context_log = ("]]}}, "param": {"debug_file": {"?": [[470, "def test_debug_file_verbose(cli_runner, debug_file):"]]}, "cli_runner": {"?": [[470, "def test_debug_file_verbose(cli_runner, debug_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli": {"var": {"accept_hooks_arg": {"?": [[557, "    accept_hooks_arg,"]]}, "result": {"?": [[69, "    result = cli_runner('tests/fake-repo-pre/', '--no-input')"]]}}, "param": {"accept_hooks_arg": {"?": [[560, "):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_unknown_extension_erro": {"var": {"result": {"?": [[408, "    result = cli_runner("]]}}, "param": {"cli_runner": {"?": [[403, "def test_echo_unknown_extension_error(tmpdir, cli_runner):"]]}, "tmpdir": {"?": [[403, "def test_echo_unknown_extension_error(tmpdir, cli_runner):"]]}, "result": {"str": [[410, "    )"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_extra_contex": {"var": {"result": {"?": [[420, "    result = cli_runner("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.remove_fake_project_di": {"param": {"request": {"?": [[28, "def remove_fake_project_dir(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_replay_fil": {"var": {"mock_cookiecutter": {"?": [[115, "    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')"]]}}, "param": {"mocker": {"?": [[113, "def test_cli_replay_file(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_output_dir": {"var": {"template_path": {"str": [[251, "    template_path = 'tests/fake-repo-pre/'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cl": {"param": {"output_dir": {"?": [[247, "def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templates_fai": {"var": {"result": {"?": [[521, "    result = cli_runner("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cl": {"param": {"user_config_path": {"?": [[291, "def test_user_config(mocker, cli_runner, user_config_path):"]]}}, "func": {"user_config_path": {"? -> str": [[286, "def user_config_path(tmpdir):"]]}, "make_fake_project_dir": {"? -> None": [[39, "def make_fake_project_dir(request):"]]}, "remove_fake_project_dir": {"? -> None": [[28, "def remove_fake_project_dir(request):"]]}, "test_echo_unknown_extension_error": {"(?, ?) -> None": [[403, "def test_echo_unknown_extension_error(tmpdir, cli_runner):"]]}, "output_dir": {"? -> str": [[242, "def output_dir(tmpdir):"]]}, "fin_remove_fake_project_dir": {"() -> None": [[31, "    def fin_remove_fake_project_dir():"]]}, "test_directory_repo": {"? -> None": [[530, "def test_directory_repo(cli_runner):"]]}, "test_user_config": {"(?, ?, ?) -> None": [[291, "def test_user_config(mocker, cli_runner, user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_extra_context_invalid_format": {"param": {"cli_runner": {"?": [[430, "def test_cli_extra_context_invalid_format(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.debug_file": {"param": {"tmpdir": {"?": [[441, "def debug_file(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_output_d": {"var": {"mock_cookiecutter": {"?": [[249, "    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')"]]}}, "param": {"cli_runner": {"?": [[247, "def test_cli_output_dir(mocker, cli_runner, output_dir_flag, output_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_undefined_variable_": {"var": {"error": {"str": [[383, "    error = \"Unable to create file '{{cookiecutter.foobar}}'\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_unknown_extension_error": {"var": {"template_path": {"str": [[406, "    template_path = 'tests/test-extensions/unknown/'"]]}}, "param": {"template_path": {"?": [[410, "    )"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.cli_runner": {"func": {"cli_main": {"() -> None": [[20, "    def cli_main(*cli_args, **cli_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_extra_context": {"param": {"cli_runner": {"?": [[418, "def test_cli_extra_context(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.user_config_path": {"param": {"tmpdir": {"?": [[286, "def user_config_path(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_replay_f": {"param": {"cli_runner": {"?": [[113, "def test_cli_replay_file(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_unknown_extension_e": {"var": {"output_dir": {"str": [[405, "    output_dir = str(tmpdir.mkdir('output'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_file_verbo": {"var": {"result": {"?": [[477, "    result = cli_runner("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.cli_": {"var": {"runner": {"?": [[18, "    runner = CliRunner()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.output_dir_flag": {"param": {"request": {"?": [[236, "def output_dir_flag(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_extra_context_invalid_forma": {"var": {"result": {"?": [[432, "    result = cli_runner("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_file_non_verbos": {"var": {"context_log": {"str": [[461, "    context_log = ("]]}}, "param": {"debug_file": {"?": [[447, "def test_debug_file_non_verbose(cli_runner, debug_file):"]]}, "cli_runner": {"?": [[447, "def test_debug_file_non_verbose(cli_runner, debug_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_echo_undefined_variabl": {"var": {"context_str": {"?": [[399, "    context_str = json.dumps(context, indent=4, sort_keys=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.tes": {"func": {"overwrite_cli_flag": {"? -> None": [[174, "def overwrite_cli_flag(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_exit_on_noinput_and_replay": {"var": {"expected_error_msg": {"str": [[150, "    expected_error_msg = ("]]}, "mock_cookiecutter": {"?": [[141, "    mock_cookiecutter = mocker.patch("]]}, "template_path": {"str": [[145, "    template_path = 'tests/fake-repo-pre/'"]]}, "result": {"?": [[146, "    result = cli_runner(template_path, '--no-input', '--replay', '-v')"]]}}, "param": {"mocker": {"?": [[139, "def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):"]]}, "cli_runner": {"?": [[139, "def test_cli_exit_on_noinput_and_replay(mocker, cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_replay_fi": {"var": {"template_path": {"str": [[117, "    template_path = 'tests/fake-repo-pre/'"]]}, "result": {"?": [[118, "    result = cli_runner(template_path, '--replay-file', '~/custom-replay-file', '-v')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_directory_repo": {"var": {"result": {"?": [[532, "    result = cli_runner("]]}}, "param": {"cli_runner": {"?": [[530, "def test_directory_repo(cli_runner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_cli_help": {"var": {"result": {"?": [[280, "    result = cli_runner(help_cli_flag)"]]}}, "param": {"cli_runner": {"?": [[278, "def test_cli_help(cli_runner, help_cli_flag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_default_user_config_overw": {"var": {"mock_cookiecutter": {"?": [[318, "    mock_cookiecutter = mocker.patch('cookiecutter.cli.cookiecutter')"]]}}, "param": {"user_config_path": {"?": [[316, "def test_default_user_config_overwrite(mocker, cli_runner, user_config_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_run_cookiecutter_on_overwrite_if_exists_and_replay": {"var": {"result": {"?": [[189, "    result = cli_runner(template_path, '--replay', '-v', overwrite_cli_flag)"]]}, "mock_cookiecutter": {"?": [[184, "    mock_cookiecutter = mocker.patch("]]}, "mocker": {"?": [[181, "    mocker, cli_runner, overwrite_cli_flag"]]}, "template_path": {"str": [[188, "    template_path = 'tests/fake-repo-pre/'"]]}}, "param": {"overwrite_cli_flag": {"?": [[182, "):"]]}, "mocker": {"?": [[182, "):"]]}, "cli_runner": {"?": [[182, "):"]]}}}, ".home.xxm.Desktop.EMSE": {"func": {"test_run_cookiecutter_on_overwrite_if_exists_and_replay": {"(?, ?, ?) -> None": [[180, "def test_run_cookiecutter_on_overwrite_if_exists_and_replay("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cli.test_debug_list_installed_templates": {"var": {"fake_template_dir": {"str": [[499, "    fake_template_dir = os.path.dirname(os.path.abspath('fake-project'))"]]}}, "param": {"debug_file": {"?": [[497, "def test_debug_list_installed_templates(cli_runner, debug_file, user_config_path):"]]}, "cli_runner": {"?": [[497, "def test_debug_list_installed_templates(cli_runner, debug_file, user_config_path):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_exceptions.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_exceptions.test_undefined_variable_to": {"var": {"expected_str": {"str": [[15, "    expected_str = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_exceptions.test_undefined_variable_to_st": {"var": {"undefined_var_error": {"UndefinedVariableInTemplate": [[9, "    undefined_var_error = exceptions.UndefinedVariableInTemplate("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_excep": {"func": {"test_undefined_variable_to_str": {"() -> None": [[7, "def test_undefined_variable_to_str():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/vcs/test_identify_repo.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_identif": {"func": {"unknown_repo_type_url": {"? -> None": [[62, "def unknown_repo_type_url(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_identify_repo.unknown_repo_type_url": {"param": {"request": {"?": [[62, "def unknown_repo_type_url(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_identify_repo.test_identify_rais": {"param": {"unknown_repo_type_url": {"?": [[67, "def test_identify_raise_on_unknown_repo(unknown_repo_type_url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vc": {"func": {"test_identify_known_repo": {"(?, ?, ?) -> None": [[48, "def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):"]]}, "test_identify_raise_on_unknown_repo": {"? -> None": [[67, "def test_identify_raise_on_unknown_repo(unknown_repo_type_url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.vcs.test_identify_repo.test_identify_known": {"param": {"exp_repo_url": {"?": [[48, "def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):"]]}, "exp_repo_type": {"?": [[48, "def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):"]]}, "repo_url": {"?": [[48, "def test_identify_known_repo(repo_url, exp_repo_type, exp_repo_url):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_get_config.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter": {"func": {"test_get_config": {"() -> None": [[52, "def test_get_config():"]]}, "test_get_config_does_not_exist": {"() -> None": [[73, "def test_get_config_does_not_exist():"]]}, "test_get_config_with_defaults": {"() -> None": [[94, "def test_get_config_with_defaults():"]]}, "test_invalid_config": {"() -> None": [[82, "def test_invalid_config():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_get_config_with_defaults": {"var": {"expected_conf": {"dict": [[99, "    expected_conf = {"]]}, "default_replay_dir": {"str": [[98, "    default_replay_dir = os.path.expanduser('~/.cookiecutter_replay/')"]]}, "conf": {"?": [[96, "    conf = config.get_config('tests/test-config/valid-partial-config.yaml')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_get_config_with": {"var": {"default_cookiecutters_dir": {"str": [[97, "    default_cookiecutters_dir = os.path.expanduser('~/.cookiecutters/')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_get_config": {"var": {"expected_conf": {"dict": [[55, "    expected_conf = {"]]}, "conf": {"?": [[54, "    conf = config.get_config('tests/test-config/valid-config.yaml')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecu": {"func": {"test_merge_configs": {"() -> None": [[10, "def test_merge_configs():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_get_config_does_not_exi": {"var": {"expected_error_msg": {"str": [[76, "    expected_error_msg = 'Config file tests/not-exist.yaml does not exist.'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_merge_configs": {"var": {"default": {"dict": [[12, "    default = {"]]}, "expected_config": {"dict": [[34, "    expected_config = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_invalid_confi": {"var": {"expected_error_msg": {"str": [[88, "    expected_error_msg = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_get_config.test_m": {"var": {"user_config": {"dict": [[23, "    user_config = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/test_cookiecutter_local_with_input.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_with_input.test_cookiecutter_local_with_inpu": {"param": {"monkeypatch": {"?": [[20, "def test_cookiecutter_local_with_input(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.d": {"func": {"test_cookiecutter_local_with_input": {"? -> None": [[20, "def test_cookiecutter_local_with_input(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_with_input.test_cookiecutter_input_extra_contex": {"param": {"monkeypatch": {"?": [[34, "def test_cookiecutter_input_extra_context(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_with_inpu": {"func": {"remove_additional_dirs": {"? -> None": [[10, "def remove_additional_dirs(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_with": {"func": {"test_cookiecutter_input_extra_context": {"? -> None": [[34, "def test_cookiecutter_input_extra_context(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.test_cookiecutter_local_with_input.remove_additional_di": {"param": {"request": {"?": [[10, "def remove_additional_dirs(request):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/utils.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.prompt_and_del": {"var": {"ok_to_reuse": {"None": [[100, "        ok_to_reuse = read_user_yes_no("]]}, "question": {"str": [[87, "        question = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.prompt_and_delete": {"param": {"path": {"str": [[72, "def prompt_and_delete(path, no_input=False):"]]}, "no_input": {"bool": [[72, "def prompt_and_delete(path, no_input=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.util": {"func": {"make_sure_path_exists": {"? -> bool / str -> bool": [[33, "def make_sure_path_exists(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.prompt_an": {"var": {"ok_to_delete": {"None": [[91, "        ok_to_delete = read_user_yes_no(question, 'yes')"]], "bool": [[85, "        ok_to_delete = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.work_in": {"var": {"curdir": {"str": [[54, "    curdir = os.getcwd()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.force_delete": {"param": {"path": {"?": [[15, "def force_delete(func, path, exc_info):"]]}, "func": {"?": [[15, "def force_delete(func, path, exc_info):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.work_": {"param": {"dirname": {"str": [[49, "def work_in(dirname=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils": {"var": {"logger": {"?": [[12, "logger = logging.getLogger(__name__)"]]}}, "func": {"force_delete": {"(?, ?, ?) -> None": [[15, "def force_delete(func, path, exc_info):"]]}, "make_executable": {"str -> None / ? -> None": [[63, "def make_executable(script_path):"]]}, "prompt_and_delete": {"(?, bool) -> bool / (str, bool) -> bool": [[72, "def prompt_and_delete(path, no_input=False):"]]}, "work_in": {"None -> ? / str -> ? / ? -> ?": [[49, "def work_in(dirname=None):"]]}, "rmtree": {"? -> None / str -> None": [[25, "def rmtree(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.make_executable": {"var": {"status": {"[int]": [[68, "    status = os.stat(script_path)"]]}}, "param": {"script_path": {"str": [[63, "def make_executable(script_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.rmtree": {"param": {"path": {"str": [[25, "def rmtree(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.make_sure_path_exists": {"param": {"path": {"str": [[33, "def make_sure_path_exists(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.utils.force_delet": {"param": {"exc_info": {"?": [[15, "def force_delete(func, path, exc_info):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/tests/conftest.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.backup": {"param": {"original_dir": {"str": [[17, "def backup_dir(original_dir, backup_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.restore_backup": {"var": {"original_dir_is_dir": {"int": [[35, "    original_dir_is_dir = os.path.isdir(original_dir)"]]}}, "param": {"original_dir": {"str": [[31, "def restore_backup_dir(original_dir, backup_dir, original_dir_found):"]]}, "original_dir_found": {"bool": [[31, "def restore_backup_dir(original_dir, backup_dir, original_dir_found):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.user": {"var": {"config_file": {"?": [[173, "    config_file = user_dir.join('config')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.user_config_fil": {"var": {"config_text": {"str": [[175, "    config_text = USER_CONFIG.format(**user_config_data)"]]}}, "param": {"user_dir": {"?": [[163, "def user_config_file(user_dir, user_config_data):"]]}, "user_config_data": {"?": [[163, "def user_config_file(user_dir, user_config_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.user_config_dat": {"var": {"replay_dir": {"?": [[154, "    replay_dir = user_dir.mkdir('cookiecutter_replay')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conf": {"func": {"restore_backup_dir": {"(str, str, bool) -> None / (?, ?, ?) -> None": [[31, "def restore_backup_dir(original_dir, backup_dir, original_dir_found):"]]}, "clean_system": {"? -> None": [[55, "def clean_system(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.user_config_data": {"var": {"cookiecutters_dir": {"?": [[153, "    cookiecutters_dir = user_dir.mkdir('cookiecutters')"]]}}, "param": {"user_dir": {"?": [[143, "def user_config_data(user_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest": {"var": {"USER_CONFIG": {"str": [[11, "USER_CONFIG = \"\"\""]]}}, "param": {"backup_dir": {"str": [[17, "def backup_dir(original_dir, backup_dir):"]]}}, "func": {"user_dir": {"? -> None": [[137, "def user_dir(tmpdir_factory):"]]}, "user_config_file": {"(?, ?) -> str": [[163, "def user_config_file(user_dir, user_config_data):"]]}, "backup_dir": {"(str, str) -> bool / (?, ?) -> bool": [[17, "def backup_dir(original_dir, backup_dir):"]]}, "disable_poyo_logging": {"() -> None": [[181, "def disable_poyo_logging():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.clean_system": {"var": {"user_config_path": {"str": [[89, "    user_config_path = os.path.expanduser('~/.cookiecutterrc')"]]}, "cookiecutters_dir": {"str": [[100, "    cookiecutters_dir = os.path.expanduser('~/.cookiecutters')"]]}, "cookiecutter_replay_dir": {"str": [[106, "    cookiecutter_replay_dir = os.path.expanduser('~/.cookiecutter_replay')"]]}, "user_config_path_backup": {"str": [[90, "    user_config_path_backup = os.path.expanduser('~/.cookiecutterrc.backup')"]]}, "cookiecutter_replay_dir_found": {"bool": [[108, "    cookiecutter_replay_dir_found = backup_dir("]]}, "cookiecutter_replay_dir_backup": {"str": [[107, "    cookiecutter_replay_dir_backup = os.path.expanduser('~/.cookiecutter_replay.backup')"]]}, "user_config_found": {"bool": [[92, "        user_config_found = True"], [96, "        user_config_found = False"]]}, "cookiecutters_dir_found": {"bool": [[102, "    cookiecutters_dir_found = backup_dir(cookiecutters_dir, cookiecutters_dir_backup)"]]}, "cookiecutters_dir_backup": {"str": [[101, "    cookiecutters_dir_backup = os.path.expanduser('~/.cookiecutters.backup')"]]}}, "param": {"cookiecutter_replay_dir": {"(str, str) -> bool / (?, ?) -> bool": [[112, "    def restore_backup():"]]}, "cookiecutter_replay_dir_found": {"str": [[112, "    def restore_backup():"]]}, "request": {"?": [[55, "def clean_system(request):"]]}, "cookiecutter_replay_dir_backup": {"str": [[112, "    def restore_backup():"]]}, "restore_backup": {"str": [[112, "    def restore_backup():"]]}, "cookiecutters_dir_found": {"bool": [[112, "    def restore_backup():"]]}, "cookiecutters_dir_backup": {"str": [[112, "    def restore_backup():"]]}}, "func": {"restore_backup": {"() -> None": [[112, "    def restore_backup():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cook": {"func": {"user_config_data": {"? -> dict": [[143, "def user_config_data(user_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.restore": {"param": {"backup_dir": {"str": [[31, "def restore_backup_dir(original_dir, backup_dir, original_dir_found):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.tests.conftest.use": {"param": {"tmpdir_factory": {"?": [[137, "def user_dir(tmpdir_factory):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/cookiecutter/cookiecutter/environment.py": {".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.ExtensionLoaderM": {"var": {"default_extensions": {"[str]": [[25, "        default_extensions = ["]]}}, "param": {"default_extensions": {"[str]": [[31, "        extensions = default_extensions + self._read_extensions(context)"]]}}, "func": {"_read_extensions": {"(ExtensionLoaderMixin, ?) -> {[?] | [str]}": [[38, "    def _read_extensions(self, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.ExtensionLoaderMixin._read_extensions": {"param": {"context": {"?": [[38, "    def _read_extensions(self, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environm": {"class": {"ExtensionLoaderMixin": {"<ExtensionLoaderMixin>": [[7, "class ExtensionLoaderMixin(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecu": {"class": {"StrictEnvironment": {"<StrictEnvironment>": [[52, "class StrictEnvironment(ExtensionLoaderMixin, Environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.StrictEnvironme": {"func": {"__init__": {"? -> ?": [[59, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.ExtensionLoaderMix": {"func": {"__init__": {"? -> ?": [[14, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.ExtensionLoaderMixin._read_": {"var": {"extensions": {"?": [[45, "            extensions = context['cookiecutter']['_extensions']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.ExtensionLoaderMixin.__init__": {"var": {"extensions": {"?": [[31, "        extensions = default_extensions + self._read_extensions(context)"]]}, "context": {"?": [[23, "        context = kwargs.pop('context', {})"]]}}, "param": {"self": {"ExtensionLoaderMixin": [[14, "    def __init__(self, **kwargs):"]]}, "extensions": {"?": [[31, "        extensions = default_extensions + self._read_extensions(context)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.ExtensionLoaderMixin._read_extension": {"param": {"self": {"ExtensionLoaderMixin": [[38, "    def _read_extensions(self, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.cookiecutter.cookiecutter.environment.StrictEnvironment.__init__": {"param": {"self": {"StrictEnvironment": [[59, "    def __init__(self, **kwargs):"]]}}}}}