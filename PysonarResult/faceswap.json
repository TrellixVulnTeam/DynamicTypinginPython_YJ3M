{"/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/scaling/sharpen_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for sharpening the face after placement\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/vgg_face2_keras.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2": {"param": {"git_model_id": {"int": [[56, "    def _get_model(git_model_id, model_filename, backend):"]]}}, "func": {"_use_vector_linkage": {"(?, ?) -> bool": [[189, "    def _use_vector_linkage(item_count, dims):"]]}, "_resize_face": {"(VGGFace2, ?) -> None": [[112, "    def _resize_face(self, face):"]]}, "sorted_similarity": {"(VGGFace2, ?, str) -> [int]": [[151, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}, "predict": {"(VGGFace2, ?) -> None": [[93, "    def predict(self, face):"]]}, "_get_model": {"(int, [str], str) -> None / (?, ?, ?) -> None": [[56, "    def _get_model(git_model_id, model_filename, backend):"]]}, "find_cosine_similiarity": {"(?, ?) -> int": [[131, "    def find_cosine_similiarity(source_face, test_face):"]]}, "__init__": {"? -> ?": [[41, "    def __init__(self, backend=\"GPU\", loglevel=\"INFO\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._use_vector_linkag": {"param": {"item_count": {"?": [[189, "    def _use_vector_linkage(item_count, dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2.sorted_similarity": {"var": {"num_predictions": {"?": [[173, "        num_predictions, dims = predictions.shape"]]}, "result_linkage": {"?": [[182, "        result_linkage = func(predictions, **kwargs)"]]}, "result_order": {"[int]": [[183, "        result_order = self._seriation(result_linkage,"]]}, "func": {"?": [[177, "            func = linkage_vector"], [180, "            func = linkage"]]}, "kwargs": {"dict": [[175, "        kwargs = dict(method=method)"]]}}, "param": {"self": {"VGGFace2": [[151, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}, "predictions": {"?": [[151, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}, "method": {"str": [[151, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._use_vector_linkage": {"param": {"dims": {"?": [[189, "    def _use_vector_linkage(item_count, dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2.predict": {"var": {"preds": {"?": [[109, "        preds = self.model.predict(face)"]]}, "face": {"None": [[107, "            face = self._resize_face(face)"]], "?": [[108, "        face = face[None, :, :, :3] - self.average_img"]]}}, "param": {"self": {"VGGFace2": [[93, "    def predict(self, face):"]]}, "face": {"?": [[93, "    def predict(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._get_model": {"var": {"cache_path": {"str": [[75, "        cache_path = os.path.join(root_path, \"plugins\", \"extract\", \"recognition\", \".cache\")"]]}, "root_path": {"str": [[74, "        root_path = os.path.abspath(os.path.dirname(sys.argv[0]))"]]}}, "param": {"backend": {"str": [[56, "    def _get_model(git_model_id, model_filename, backend):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras": {"var": {"logger": {"?": [[14, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"VGGFace2": {"<VGGFace2>": [[17, "class VGGFace2():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._get": {"param": {"model_filename": {"[str]": [[56, "    def _get_model(git_model_id, model_filename, backend):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._resize_": {"var": {"face": {"?": [[127, "        face = cv2.resize(face, dsize=sizes, interpolation=interpolation)"]]}}, "param": {"face": {"?": [[112, "    def _resize_face(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2.__init__": {"var": {"backend": {"str": [[44, "        backend = backend.upper()"]]}}, "param": {"loglevel": {"str": [[41, "    def __init__(self, backend=\"GPU\", loglevel=\"INFO\"):"]]}, "self": {"VGGFace2": [[41, "    def __init__(self, backend=\"GPU\", loglevel=\"INFO\"):"]]}, "backend": {"str": [[41, "    def __init__(self, backend=\"GPU\", loglevel=\"INFO\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2.find_cosine_similiarity": {"var": {"var_c": {"?": [[148, "        var_c = np.sum(np.multiply(test_face, test_face))"]]}, "var_b": {"?": [[147, "        var_b = np.sum(np.multiply(source_face, source_face))"]]}, "var_a": {"?": [[146, "        var_a = np.matmul(np.transpose(source_face), test_face)"]]}}, "param": {"test_face": {"?": [[131, "    def find_cosine_similiarity(source_face, test_face):"]]}, "source_face": {"?": [[131, "    def find_cosine_similiarity(source_face, test_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._resize_fac": {"var": {"interpolation": {"?": [[126, "        interpolation = cv2.INTER_CUBIC if face.shape[0] < self.input_size else cv2.INTER_AREA"]]}, "sizes": {"(int, int)": [[125, "        sizes = (self.input_size, self.input_size)"]]}}, "param": {"self": {"VGGFace2": [[112, "    def _resize_face(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2._get_": {"var": {"model": {"GetModel -> {[str] | str}": [[76, "        model = GetModel(model_filename, cache_path, git_model_id).model_path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2.__init": {"var": {"model_filename": {"[str]": [[46, "        model_filename = [\"vggface2_resnet50_v2.h5\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face2_keras.VGGFace2.__in": {"var": {"git_model_id": {"int": [[45, "        git_model_id = 10"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/vgg_obstructed_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[53, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/unbalanced.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model": {"var": {"decoder_shape": {"int": [[62, "        decoder_shape = self.input_shape[0] // 16"]]}}, "func": {"decoder_a": {"Model -> None": [[57, "    def decoder_a(self):"]]}, "decoder_b": {"Model -> None": [[97, "    def decoder_b(self):"]]}, "add_networks": {"Model -> None": [[28, "    def add_networks(self):"]]}, "__init__": {"? -> ?": [[15, "    def __init__(self, *args, **kwargs):"]]}, "encoder": {"Model -> None": [[36, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.encoder": {"var": {"dense_shape": {"int": [[41, "        dense_shape = self.input_shape[0] // 16"]]}, "input_": {"?": [[42, "        input_ = Input(shape=self.input_shape)"]]}, "dense_dim": {"int": [[40, "        dense_dim = 384 if self.lowmem else 512"]]}}, "param": {"self": {"Model": [[36, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.add_network": {"param": {"self": {"Model": [[28, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.decoder_": {"var": {"kwargs": {"dict": [[59, "        kwargs = dict(kernel_size=5, kernel_initializer=self.kernel_initializer)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.__init__": {"param": {"self": {"Model": [[15, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanc": {"class": {"Model": {"<Model>": [[13, "class Model(OriginalModel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.encode": {"var": {"var_x": {"?": [[44, "        var_x = input_"], [45, "        var_x = self.blocks.conv(var_x, encoder_complexity, use_instance_norm=True, **kwargs)"], [46, "        var_x = self.blocks.conv(var_x, encoder_complexity * 2, use_instance_norm=True, **kwargs)"], [47, "        var_x = self.blocks.conv(var_x, encoder_complexity * 4, **kwargs)"], [48, "        var_x = self.blocks.conv(var_x, encoder_complexity * 6, **kwargs)"], [49, "        var_x = self.blocks.conv(var_x, encoder_complexity * 8, **kwargs)"], [50, "        var_x = Dense(self.encoder_dim,"], [52, "        var_x = Dense(dense_shape * dense_shape * dense_dim,"], [54, "        var_x = Reshape((dense_shape, dense_shape, dense_dim))(var_x)"]]}, "kwargs": {"dict": [[38, "        kwargs = dict(kernel_initializer=self.kernel_initializer)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.M": {"var": {"encoder_complexity": {"int": [[39, "        encoder_complexity = 128 if self.lowmem else self.config[\"complexity_encoder\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.decoder_b": {"var": {"kwargs": {"dict": [[99, "        kwargs = dict(kernel_size=5, kernel_initializer=self.kernel_initializer)"]]}, "decoder_complexity": {"int": [[101, "        decoder_complexity = 384 if self.lowmem else 512"]]}, "decoder_shape": {"int": [[102, "        decoder_shape = self.input_shape[0] // 16"]]}, "input_": {"?": [[103, "        input_ = Input(shape=(decoder_shape, decoder_shape, dense_dim))"]]}, "dense_dim": {"int": [[100, "        dense_dim = 384 if self.lowmem else self.config[\"complexity_decoder_b\"]"]]}, "var_y": {"?": [[133, "            var_y = input_"], [134, "            var_y = self.blocks.upscale(var_y, decoder_complexity)"], [136, "                var_y = self.blocks.upscale(var_y, decoder_complexity)"], [137, "            var_y = self.blocks.upscale(var_y, decoder_complexity // 2)"], [138, "            var_y = self.blocks.upscale(var_y, decoder_complexity // 4)"], [140, "                var_y = self.blocks.upscale(var_y, decoder_complexity // 8)"], [141, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[105, "        var_x = input_"], [107, "            var_x = self.blocks.upscale(var_x, decoder_complexity, **kwargs)"], [108, "            var_x = self.blocks.upscale(var_x, decoder_complexity // 2, **kwargs)"], [109, "            var_x = self.blocks.upscale(var_x, decoder_complexity // 4, **kwargs)"], [110, "            var_x = self.blocks.upscale(var_x, decoder_complexity // 8, **kwargs)"], [112, "            var_x = self.blocks.upscale(var_x, decoder_complexity,"], [114, "            var_x = self.blocks.res_block(var_x, decoder_complexity,"], [116, "            var_x = self.blocks.upscale(var_x, decoder_complexity,"], [118, "            var_x = self.blocks.res_block(var_x, decoder_complexity,"], [120, "            var_x = self.blocks.upscale(var_x, decoder_complexity // 2,"], [122, "            var_x = self.blocks.res_block(var_x, decoder_complexity // 2,"], [124, "            var_x = self.blocks.upscale(var_x, decoder_complexity // 4, **kwargs)"], [125, "        var_x = self.blocks.conv2d(var_x, 3,"]]}, "outputs": {"[?]": [[130, "        outputs = [var_x]"]]}}, "param": {"self": {"Model": [[97, "    def decoder_b(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.decode": {"var": {"var_y": {"?": [[84, "            var_y = input_"], [85, "            var_y = self.blocks.upscale(var_y, decoder_complexity)"], [86, "            var_y = self.blocks.upscale(var_y, decoder_complexity)"], [87, "            var_y = self.blocks.upscale(var_y, decoder_complexity // 2)"], [88, "            var_y = self.blocks.upscale(var_y, decoder_complexity // 4)"], [89, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[65, "        var_x = input_"], [67, "        var_x = self.blocks.upscale(var_x, decoder_complexity, **kwargs)"], [68, "        var_x = SpatialDropout2D(0.25)(var_x)"], [69, "        var_x = self.blocks.upscale(var_x, decoder_complexity, **kwargs)"], [71, "            var_x = SpatialDropout2D(0.15)(var_x)"], [73, "            var_x = SpatialDropout2D(0.25)(var_x)"], [74, "        var_x = self.blocks.upscale(var_x, decoder_complexity // 2, **kwargs)"], [75, "        var_x = self.blocks.upscale(var_x, decoder_complexity // 4, **kwargs)"], [76, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced.Model.decoder_a": {"var": {"decoder_complexity": {"int": [[60, "        decoder_complexity = 320 if self.lowmem else self.config[\"complexity_decoder_a\"]"]]}, "input_": {"?": [[63, "        input_ = Input(shape=(decoder_shape, decoder_shape, dense_dim))"]]}, "outputs": {"[?]": [[81, "        outputs = [var_x]"]]}, "dense_dim": {"int": [[61, "        dense_dim = 384 if self.lowmem else 512"]]}}, "param": {"self": {"Model": [[57, "    def decoder_a(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/face_filter.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter": {"func": {"avg": {"? -> int": [[13, "def avg(arr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.get_filter_encodings": {"var": {"filename": {"?": [[110, "        for filename, face in self.filters.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filt": {"var": {"logger": {"?": [[10, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceF": {"param": {"reference_file_paths": {"list": [[23, "                 multiprocess=False, threshold=0.4):"]]}, "nreference_file_paths": {"list": [[23, "                 multiprocess=False, threshold=0.4):"]]}}, "func": {"get_filter_encodings": {"FaceFilter -> None": [[108, "    def get_filter_encodings(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFil": {"func": {"run_extractor": {"(FaceFilter, ?) -> None / (FaceFilter, Extractor) -> None": [[69, "    def run_extractor(self, extractor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.load_aligned_fac": {"var": {"image": {"?": [[100, "            image = face[\"image\"]"]]}, "filename": {"?": [[98, "        for filename, face in self.filters.items():"]]}}, "param": {"self": {"FaceFilter": [[96, "    def load_aligned_face(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter": {"func": {"load_images": {"(?, ?) -> dict / (list, list) -> dict": [[46, "    def load_images(reference_file_paths, nreference_file_paths):"]]}, "align_faces": {"(FaceFilter, ?, ?, ?, ?) -> None / (FaceFilter, str, str, str, ?) -> None / (FaceFilter, str, str, str, bool) -> None": [[59, "    def align_faces(self, detector_name, aligner_name, masker_name, multiprocess):"]]}, "queue_images": {"(FaceFilter, ?) -> None / (FaceFilter, Extractor) -> None": [[82, "    def queue_images(self, extractor):"]]}, "load_aligned_face": {"FaceFilter -> None": [[96, "    def load_aligned_face(self):"]]}, "check": {"(FaceFilter, ?) -> bool": [[117, "    def check(self, detected_face):"]]}, "__init__": {"? -> ?": [[22, "    def __init__(self, reference_file_paths, nreference_file_paths, detector, aligner,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.run_": {"param": {"extractor": {"Extractor": [[69, "    def run_extractor(self, extractor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.get_filter_encoding": {"param": {"self": {"FaceFilter": [[108, "    def get_filter_encodings(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.chec": {"var": {"var_k": {"int": [[148, "            var_k = min(5, min(len(distances[\"filter\"]), len(distances[\"nfilter\"])) + 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.run_extractor": {"var": {"filename": {"?": [[75, "                filename = faces[\"filename\"]"]]}, "detected_faces": {"?": [[76, "                detected_faces = faces[\"detected_faces\"]"]]}, "_": {"int": [[71, "        for _ in range(extractor.passes):"]]}, "faces": {"?": [[74, "            for faces in extractor.detected_faces():"]]}}, "param": {"self": {"FaceFilter": [[69, "    def run_extractor(self, extractor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.check": {"var": {"distances": {"dict": [[120, "        distances = {\"filter\": list(), \"nfilter\": list()}"]]}, "ratio": {"int": [[153, "            ratio = var_n/var_k"]]}, "similarity": {"int": [[123, "            similarity = self.vgg_face.find_cosine_similiarity(filt[\"encoding\"], encodings)"]]}, "filt": {"<list>": [[122, "        for filt in self.filters.values():"]]}, "var_n": {"int": [[149, "            var_n = sum(list(map(lambda x: x[0],"]]}, "encodings": {"None": [[121, "        encodings = self.vgg_face.predict(detected_face.aligned_face)"]]}, "msg": {"None": [[159, "                msg = None"], [162, "            msg = None"]], "?": [[139, "            msg = (\"Rejecting face as distance from nfilter sample is smaller: (filter: {}, \""], [143, "            msg = (\"Rejecting face as average distance from nfilter sample is smaller: (filter: \""], [155, "                msg = (\"Rejecting face as k-nearest neighbors classification is less than \""]], "str": [[130, "            msg = \"Rejecting filter face: {} > {}\".format(round(avgs[\"filter\"], 2), self.threshold)"], [134, "            msg = \"Rejecting nFilter face: {} < {}\".format(round(avgs[\"nfilter\"], 2),"]]}, "mins": {"dict": [[127, "        mins = {key: min(val) if val else None for key, val in distances.items()}"]]}, "retval": {"bool": [[131, "            retval = False"], [136, "            retval = False"], [141, "            retval = False"], [145, "            retval = False"], [157, "                retval = False"], [160, "                retval = True"], [163, "            retval = True"]]}, "avgs": {"dict": [[126, "        avgs = {key: avg(val) if val else None for key, val in distances.items()}"]]}}, "param": {"self": {"FaceFilter": [[117, "    def check(self, detected_face):"]]}, "detected_face": {"?": [[117, "    def check(self, detected_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.load_imag": {"param": {"reference_file_paths": {"list": [[46, "    def load_images(reference_file_paths, nreference_file_paths):"]]}, "nreference_file_paths": {"list": [[46, "    def load_images(reference_file_paths, nreference_file_paths):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.load_align": {"var": {"detected_face": {"?": [[101, "            detected_face = face[\"detected_face\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.get_filter_": {"var": {"encodings": {"None": [[112, "            encodings = self.vgg_face.predict(face[\"face\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.avg": {"param": {"arr": {"?": [[13, "def avg(arr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.__init__": {"var": {"multiprocess": {"bool": [[23, "                 multiprocess=False, threshold=0.4):"]]}}, "param": {"multiprocess": {"bool": [[23, "                 multiprocess=False, threshold=0.4):"]]}, "threshold": {"float": [[23, "                 multiprocess=False, threshold=0.4):"]]}, "self": {"FaceFilter": [[23, "                 multiprocess=False, threshold=0.4):"]]}, "detector": {"?": [[23, "                 multiprocess=False, threshold=0.4):"]]}, "aligner": {"?": [[23, "                 multiprocess=False, threshold=0.4):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.align_fa": {"param": {"multiprocess": {"bool": [[59, "    def align_faces(self, detector_name, aligner_name, masker_name, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_f": {"class": {"FaceFilter": {"<FaceFilter>": [[18, "class FaceFilter():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.queue_imag": {"param": {"self": {"FaceFilter": [[82, "    def queue_images(self, extractor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.align_fac": {"param": {"self": {"FaceFilter": [[59, "    def align_faces(self, detector_name, aligner_name, masker_name, multiprocess):"]]}, "masker_name": {"str": [[59, "    def align_faces(self, detector_name, aligner_name, masker_name, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.queue_images": {"var": {"in_queue": {"Extractor -> None": [[84, "        in_queue = extractor.input_queue"]]}, "fname": {"?": [[85, "        for fname, img in self.filters.items():"]]}, "feed_dict": {"dict": [[87, "            feed_dict = dict(filename=fname, image=img[\"image\"])"]]}}, "param": {"extractor": {"Extractor": [[82, "    def queue_images(self, extractor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.align_faces": {"var": {"extractor": {"Extractor": [[61, "        extractor = Extractor(detector_name,"]]}}, "param": {"aligner_name": {"str": [[59, "    def align_faces(self, detector_name, aligner_name, masker_name, multiprocess):"]]}, "detector_name": {"str": [[59, "    def align_faces(self, detector_name, aligner_name, masker_name, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.face_filter.FaceFilter.load_images": {"var": {"retval": {"dict": [[48, "        retval = dict()"]]}, "fpath": {"<list>": [[49, "        for fpath in reference_file_paths:"], [52, "        for fpath in nreference_file_paths:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/_config.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.get_command": {"var": {"tools_path": {"str": [[81, "    tools_path = os.path.join(root_path, \"tools\")"]]}, "tools": {"[str]": [[86, "    tools = [os.path.splitext(item)[0] for item in os.listdir(tools_path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.Config.set_default": {"param": {"self": {"Config": [[17, "    def set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.Config": {"func": {"set_defaults": {"Config -> None": [[17, "    def set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.get_": {"var": {"commands": {"[str]": [[82, "    commands = [os.path.splitext(item)[0] for item in os.listdir(command_path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._c": {"class": {"Config": {"<Config>": [[14, "class Config(FaceswapConfig):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.Config.set_global": {"var": {"section": {"str": [[27, "        section = \"global\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.Config.set_globa": {"param": {"self": {"Config": [[22, "    def set_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._confi": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"get_commands": {"() -> [str]": [[77, "def get_commands():"]]}, "get_clean_fonts": {"() -> [str]": [[93, "def get_clean_fonts():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.g": {"var": {"cleaned_fonts": {"?": [[96, "    cleaned_fonts = sorted([fnt for fnt in font.families()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.get_clean_fonts": {"param": {"c": {"?": [[97, "                            if not fnt.startswith(\"@\") and not any([ord(c) > 127 for c in fnt])])"]]}, "fnt": {"?": [[97, "                            if not fnt.startswith(\"@\") and not any([ord(c) > 127 for c in fnt])])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.Confi": {"func": {"set_globals": {"Config -> None": [[22, "    def set_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui._config.get_commands": {"var": {"root_path": {"str": [[79, "    root_path = os.path.abspath(os.path.dirname(sys.argv[0]))"]]}, "command_path": {"str": [[80, "    command_path = os.path.join(root_path, \"scripts\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/scaling/sharpen.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Sca": {"func": {"get_kernel_size": {"(?, ?) -> ((int, int), int)": [[20, "    def get_kernel_size(new_face, radius_percent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.unsharp": {"var": {"low_contrast_mask": {"?": [[57, "        low_contrast_mask = (abs(new_face - blur) < threshold).astype(\"float32\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scal": {"func": {"gaussian": {"(?, ?, ?) -> None": [[41, "    def gaussian(new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.get": {"var": {"kernel_size": {"int": [[24, "        kernel_size = int((radius * 2) + 1)"]], "(int, int)": [[25, "        kernel_size = (kernel_size, kernel_size)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.proc": {"param": {"self": {"Scaling": [[12, "    def process(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.unsharp_ma": {"var": {"kernel_size": {"?": [[54, "        kernel_size = kernel_center[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.gaussia": {"var": {"kernel_size": {"?": [[43, "        kernel_size = kernel_center[0]"]]}}, "param": {"kernel_center": {"?": [[41, "    def gaussian(new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.box": {"var": {"kernel": {"int": [[36, "        kernel = kernel + (kernel - box_filter) * amount"]], "?": [[33, "        kernel = np.zeros(kernel_size, dtype=\"float32\")"]]}, "new_face": {"?": [[37, "        new_face = cv2.filter2D(new_face, -1, kernel)  # pylint: disable=no-member"]]}, "kernel_size": {"?": [[32, "        kernel_size, center = kernel_center"]]}}, "param": {"amount": {"?": [[30, "    def box(new_face, kernel_center, amount):"]]}, "kernel_center": {"?": [[30, "    def box(new_face, kernel_center, amount):"]]}, "new_face": {"?": [[30, "    def box(new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.get_kernel_siz": {"param": {"radius_percent": {"?": [[20, "    def get_kernel_size(new_face, radius_percent):"]]}, "new_face": {"?": [[20, "    def get_kernel_size(new_face, radius_percent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.unsharp_mas": {"param": {"kernel_center": {"?": [[52, "    def unsharp_mask(self, new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling": {"var": {"box_filter": {"int": [[35, "        box_filter = np.ones(kernel_size, dtype=\"float32\") / kernel_size[0]**2"]]}}, "func": {"process": {"(Scaling, ?) -> None": [[12, "    def process(self, new_face):"]]}, "box": {"(?, ?, ?) -> None": [[30, "    def box(new_face, kernel_center, amount):"]]}, "unsharp_mask": {"(Scaling, ?, ?, ?) -> float": [[52, "    def unsharp_mask(self, new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.get_kernel_size": {"var": {"radius": {"int": [[23, "        radius = max(1, round(new_face.shape[1] * radius_percent / 100))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.process": {"var": {"amount": {"float": [[14, "        amount = self.config[\"amount\"] / 100.0"]]}, "kernel_center": {"((int, int), int)": [[15, "        kernel_center = self.get_kernel_size(new_face, self.config[\"radius\"])"]]}, "new_face": {"?": [[16, "        new_face = getattr(self, self.config[\"method\"])(new_face, kernel_center, amount)"]]}}, "param": {"new_face": {"?": [[12, "    def process(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.unsharp_mask": {"var": {"threshold": {"float": [[55, "        threshold = self.config[\"threshold\"] / 255.0"]]}, "sharpened": {"float": [[58, "        sharpened = (new_face * (1.0 + amount)) + (blur * -amount)"]]}, "new_face": {"float": [[59, "        new_face = (new_face * (1.0 - low_contrast_mask)) + (sharpened * low_contrast_mask)"]]}, "blur": {"?": [[56, "        blur = cv2.GaussianBlur(new_face, kernel_size, 0)  # pylint: disable=no-member"]]}}, "param": {"self": {"Scaling": [[52, "    def unsharp_mask(self, new_face, kernel_center, amount):"]]}, "amount": {"?": [[52, "    def unsharp_mask(self, new_face, kernel_center, amount):"]]}, "new_face": {"?": [[52, "    def unsharp_mask(self, new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.gaussian": {"var": {"blur": {"?": [[44, "        blur = cv2.GaussianBlur(new_face, kernel_size, 0)  # pylint: disable=no-member"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpen.Scaling.gaussi": {"var": {"new_face": {"?": [[45, "        new_face = cv2.addWeighted(new_face,  # pylint: disable=no-member"]]}}, "param": {"amount": {"?": [[41, "    def gaussian(new_face, kernel_center, amount):"]]}, "new_face": {"?": [[41, "    def gaussian(new_face, kernel_center, amount):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling.sharpe": {"class": {"Scaling": {"<Scaling>": [[9, "class Scaling(Adjustment):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.process_outpu": {"param": {"batch": {"?": [[205, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.check_and_raise_erro": {"var": {"err": {"None": [[300, "            err = thread.check_and_raise_error()"]]}, "thread": {"MultiThread": [[299, "        for thread in self._threads:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.initialize": {"var": {"msg": {"str": [[344, "                msg = (\"Tensorflow raised an unknown error. This is most likely caused by a \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.finalize": {"param": {"batch": {"?": [[242, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._get_item": {"param": {"queue": {"?": [[441, "    def _get_item(self, queue):"]]}, "self": {"{Aligner | Detector | Extractor | Masker}": [[441, "    def _get_item(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.s": {"var": {"thread": {"MultiThread": [[282, "        for thread in self._threads:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.__in": {"param": {"git_model_id": {"None": [[104, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extracto": {"func": {"predict": {"(Aligner, ?) -> None / (Detector, None) -> None / (Extractor, ?) -> None / (Masker, ?) -> None / (Detector, ?) -> None": [[180, "    def predict(self, batch):"]]}, "start": {"Extractor -> None": [[277, "    def start(self):"]]}, "_add_thread": {"(Extractor, ?, ?, ?, ?) -> None / (Extractor, str, (Extractor, ?) -> None, ?, ?) -> None": [[388, "    def _add_thread(self, name, function, in_queue, out_queue):"]]}, "_predict": {"(Extractor, ?) -> None": [[225, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._thread_proce": {"var": {"msg": {"str": [[421, "                    msg = (\"Tensorflow raised an unknown error. This is most likely caused by a \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.process_output": {"param": {"self": {"Extractor": [[205, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._dict_lists_to_list_dicts": {"param": {"dictionary": {"?": [[454, "    def _dict_lists_to_list_dicts(dictionary):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._add_thread": {"param": {"function": {"{(Extractor, ?) -> None | (Extractor, ?) -> None | (Extractor, ?) -> None}": [[388, "    def _add_thread(self, name, function, in_queue, out_queue):"]]}, "self": {"Extractor": [[388, "    def _add_thread(self, name, function, in_queue, out_queue):"]]}, "name": {"str": [[388, "    def _add_thread(self, name, function, in_queue, out_queue):"]]}, "out_queue": {"?": [[388, "    def _add_thread(self, name, function, in_queue, out_queue):"]]}, "in_queue": {"?": [[388, "    def _add_thread(self, name, function, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.get_batch": {"param": {"queue": {"?": [[259, "    def get_batch(self, queue):"]]}, "self": {"Extractor": [[259, "    def get_batch(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.__init__": {"param": {"instance": {"int": [[104, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):"]]}, "self": {"Extractor": [[104, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):"]]}, "configfile": {"None": [[104, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extra": {"func": {"process_output": {"(Extractor, ?) -> None": [[205, "    def process_output(self, batch):"]]}, "process_input": {"(Extractor, ?) -> None": [[163, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._add_queu": {"param": {"self": {"Extractor": [[357, "    def _add_queues(self, in_queue, out_queue, queues):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._predict": {"param": {"self": {"Extractor": [[225, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._predi": {"param": {"batch": {"?": [[225, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.finaliz": {"param": {"self": {"Extractor": [[242, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._bas": {"var": {"logger": {"?": [[17, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"_get_config": {"(?, None) -> FaceswapConfig -> dict / (str, None) -> FaceswapConfig -> dict": [[23, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.__init": {"param": {"model_filename": {"None": [[104, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.check_and_raise_error": {"param": {"self": {"Extractor": [[294, "    def check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.init_mod": {"param": {"self": {"Extractor": [[157, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Ex": {"func": {"_compile_threads": {"Extractor -> None": [[369, "    def _compile_threads(self):"]]}, "_thread_process": {"(Extractor, ?, ?, ?) -> ?": [[399, "    def _thread_process(self, function, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._add_queues": {"var": {"q_name": {"str": [[363, "        for q_name in queues:"]]}}, "param": {"in_queue": {"?": [[357, "    def _add_queues(self, in_queue, out_queue, queues):"]]}, "out_queue": {"?": [[357, "    def _add_queues(self, in_queue, out_queue, queues):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.initializ": {"var": {"name": {"?": [[335, "        name = self.name.replace(\" \", \"_\").lower()"]]}}, "param": {"self": {"Extractor": [[326, "    def initialize(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._get_": {"var": {"item": {"?": [[443, "        item = queue.get()"]]}, "model": {"GetModel": [[322, "        model = GetModel(model_filename, cache_path, git_model_id)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._get_mode": {"var": {"plugin_path": {"str": [[316, "        plugin_path = os.path.join(*self.__module__.split(\".\")[:-1])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._compile_threads": {"var": {"name": {"?": [[372, "        name = self.name.replace(\" \", \"_\").lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base._get_conf": {"param": {"plugin_name": {"str": [[23, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base._get_": {"param": {"configfile": {"None": [[23, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._get": {"param": {"model_filename": {"None": [[308, "    def _get_model(self, git_model_id, model_filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.process_inpu": {"param": {"batch": {"?": [[163, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._add_": {"param": {"queues": {"[str]": [[357, "    def _add_queues(self, in_queue, out_queue, queues):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.predict": {"param": {"self": {"{Aligner | Detector | Extractor | Masker}": [[180, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._thread_process": {"var": {"func_name": {"?": [[401, "        func_name = function.__name__"]]}, "batch": {"ExtractMedia": [[414, "                batch = self._get_item(in_queue)"]], "?": [[410, "                        batch = function(batch)"], [418, "                batch = function(batch)"]]}, "item": {"?": [[433, "                for item in self.finalize(batch):"]]}}, "param": {"function": {"?": [[399, "    def _thread_process(self, function, in_queue, out_queue):"]]}, "in_queue": {"?": [[399, "    def _thread_process(self, function, in_queue, out_queue):"]]}, "out_queue": {"?": [[399, "    def _thread_process(self, function, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor": {"param": {"git_model_id": {"None": [[308, "    def _get_model(self, git_model_id, model_filename):"]]}}, "func": {"join": {"Extractor -> None": [[285, "    def join(self):"]]}, "finalize": {"(Extractor, ?) -> None": [[242, "    def finalize(self, batch):"]]}, "_get_item": {"(Detector, ?) -> ExtractMedia / (Extractor, ?) -> ExtractMedia / (Aligner, ?) -> ExtractMedia / (Masker, ?) -> ExtractMedia": [[441, "    def _get_item(self, queue):"]]}, "get_batch": {"(Extractor, ?) -> None": [[259, "    def get_batch(self, queue):"]]}, "_get_model": {"(Extractor, ?, ?) -> GetModel -> {[str] | str} / (Extractor, None, None) -> GetModel -> {[str] | str}": [[308, "    def _get_model(self, git_model_id, model_filename):"]]}, "init_model": {"Extractor -> None": [[157, "    def init_model(self):"]]}, "_dict_lists_to_list_dicts": {"? -> [dict]": [[454, "    def _dict_lists_to_list_dicts(dictionary):"]]}, "initialize": {"Extractor -> ?": [[326, "    def initialize(self, *args, **kwargs):"]]}, "_add_queues": {"(Extractor, ?, ?, ?) -> None / (Extractor, ?, ?, [str]) -> None": [[357, "    def _add_queues(self, in_queue, out_queue, queues):"]]}, "__init__": {"? -> ?": [[104, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._get_mod": {"param": {"self": {"Extractor": [[308, "    def _get_model(self, git_model_id, model_filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._thread_proc": {"var": {"exhausted": {"?": [[406, "                exhausted, batch = self.get_batch(in_queue)"]]}}, "param": {"self": {"Extractor": [[399, "    def _thread_process(self, function, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.predi": {"param": {"batch": {"None": [[180, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._get_model": {"var": {"cache_path": {"str": [[319, "            cache_path = os.path.join(base_path, plugin_path, \".cache\")"], [321, "            cache_path = os.path.join(os.path.dirname(__file__), \".cache\")"]]}, "base_path": {"str": [[318, "            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor._compile_thread": {"var": {"base_name": {"str": [[373, "        base_name = \"{}_{}\".format(self._plugin_type, name)"]]}}, "param": {"self": {"Extractor": [[369, "    def _compile_threads(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extract": {"func": {"check_and_raise_error": {"Extractor -> None": [[294, "    def check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.process_input": {"param": {"self": {"Extractor": [[163, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.start": {"param": {"self": {"Extractor": [[277, "    def start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base": {"class": {"Extractor": {"<Extractor>": [[42, "class Extractor():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._base.Extractor.join": {"var": {"thread": {"MultiThread": [[290, "        for thread in self._threads:"]]}}, "param": {"self": {"Extractor": [[285, "    def join(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/scripts/train.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._load_": {"var": {"trainer": {"None": [[273, "        trainer = PluginLoader.get_trainer(model.trainer)"]], "?": [[274, "        trainer = trainer(model,"]]}, "model": {"?": [[240, "        model = PluginLoader.get_model(self.trainer_name)("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.T": {"func": {"_load_trainer": {"(Train, ?) -> None / (Train, None) -> None": [[259, "    def _load_trainer(self, model):"]]}, "_training": {"Train -> ?": [[205, "    def _training(self):"]]}, "_run_training_cycle": {"(Train, ?, ?) -> None / (Train, None, None) -> None": [[281, "    def _run_training_cycle(self, model, trainer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._training": {"var": {"trainer": {"None": [[215, "            trainer = self._load_trainer(model)"]]}, "model": {"None": [[214, "            model = self._load_model()"]]}}, "param": {"self": {"Train": [[205, "    def _training(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._get_images": {"var": {"image_dir": {"?": [[123, "            image_dir = getattr(self._args, \"input_{}\".format(side))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._end_thread": {"var": {"msg": {"str": [[190, "            msg = \"Error caught! Exiting...\""], [193, "            msg = (\"Exit requested! The trainer will complete its current cycle, \""]]}, "log": {"?": [[191, "            log = logger.critical"], [198, "            log = logger.info"]]}}, "param": {"self": {"Train": [[178, "    def _end_thread(self, thread, err):"]]}, "err": {"bool": [[178, "    def _end_thread(self, thread, err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train.proc": {"param": {"self": {"Train": [[139, "    def process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Trai": {"func": {"_end_thread": {"(Train, MultiThread, bool) -> None / (Train, ?, ?) -> None": [[178, "    def _end_thread(self, thread, err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._monitor": {"var": {"console_key": {"None": [[375, "                    console_key = keypress.getch()"]]}, "cv_key": {"None": [[355, "                    cv_key = None"]], "?": [[353, "                    cv_key = cv2.waitKey(1000)  # pylint: disable=no-member"]]}, "name": {"?": [[351, "                        for name, image in self._preview_buffer.items():"]]}}, "param": {"self": {"Train": [[325, "    def _monitor(self, thread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._run_training_cycl": {"var": {"viewer": {"(Train, ?, str) -> ?": [[303, "            viewer = display_func if save_iteration or self._save_now else None"]]}, "save_iteration": {"bool": [[302, "            save_iteration = iteration % self._args.save_interval == 0"]]}, "iteration": {"int": [[300, "        for iteration in range(0, self._args.iterations):"]]}}, "param": {"trainer": {"None": [[281, "    def _run_training_cycle(self, model, trainer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._set_timelap": {"var": {"exts": {"[str]": [[101, "            exts = [os.path.splitext(fname)[-1] for fname in os.listdir(folder)]"]]}}, "param": {"self": {"Train": [[76, "    def _set_timelapse(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._run_training_cycle": {"var": {"display_func": {"None": [[298, "            display_func = None"]], "(Train, ?, str) -> ?": [[296, "            display_func = self._show"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train.process": {"var": {"err": {"bool": [[159, "        err = self._monitor(thread)"]]}, "thread": {"MultiThread": [[156, "        thread = self._start_thread()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._alignments_path": {"var": {"side": {"str": [[67, "        for side in (\"a\", \"b\"):"]]}}, "param": {"self": {"Train": [[63, "    def _alignments_paths(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train.__init__": {"param": {"self": {"Train": [[40, "    def __init__(self, arguments):"]]}, "arguments": {"?": [[40, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._loa": {"var": {"model_dir": {"None": [[237, "        model_dir = get_folder(self._args.model_dir)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._load_mod": {"var": {"configfile": {"None": [[238, "        configfile = self._args.configfile if hasattr(self._args, \"configfile\") else None"]]}, "augment_color": {"?": [[239, "        augment_color = not self._args.no_augment_color"]]}}, "param": {"self": {"Train": [[228, "    def _load_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train": {"var": {"timelapse_output": {"str": [[96, "        timelapse_output = str(get_folder(self._args.timelapse_output))"]]}}, "func": {"process": {"Train -> None": [[139, "    def process(self):"]]}, "_set_tf_allow_growth": {"() -> None": [[392, "    def _set_tf_allow_growth():"]]}, "_set_timelapse": {"Train -> dict": [[76, "    def _set_timelapse(self):"]]}, "_show": {"(Train, ?, str) -> ?": [[405, "    def _show(self, image, name=\"\"):"]]}, "_image_size": {"Train -> None": [[54, "    def _image_size(self):"]]}, "_get_images": {"Train -> dict": [[111, "    def _get_images(self):"]]}, "_load_model": {"Train -> None": [[228, "    def _load_model(self):"]]}, "_start_thread": {"Train -> MultiThread": [[164, "    def _start_thread(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._start_": {"var": {"thread": {"MultiThread": [[173, "        thread = MultiThread(target=self._training)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._monito": {"var": {"keypress": {"KBHit": [[345, "        keypress = KBHit(is_gui=self._args.redirect_gui)"]]}, "err": {"bool": [[346, "        err = False"], [359, "                    err = True"]]}, "is_preview": {"?": [[333, "        is_preview = self._args.preview"]]}}, "param": {"thread": {"MultiThread": [[325, "    def _monitor(self, thread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._image_": {"var": {"size": {"?": [[58, "        size = image.shape[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._get_": {"var": {"images": {"dict": [[121, "        images = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._load_trainer": {"param": {"self": {"Train": [[259, "    def _load_trainer(self, model):"]]}, "model": {"None": [[259, "    def _load_trainer(self, model):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.t": {"class": {"Train": {"<Train>": [[25, "class Train():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._alignments_paths": {"var": {"image_path": {"?": [[70, "                image_path = getattr(self._args, \"input_{}\".format(side))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._end_": {"param": {"thread": {"MultiThread": [[178, "    def _end_thread(self, thread, err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._set_timelaps": {"var": {"folder": {"?": [[98, "        for folder in (self._args.timelapse_input_a, self._args.timelapse_input_b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._start_thread": {"param": {"self": {"Train": [[164, "    def _start_thread(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._get_imag": {"var": {"side": {"str": [[122, "        for side in (\"a\", \"b\"):"]]}}, "param": {"self": {"Train": [[111, "    def _get_images(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Tr": {"var": {"alignments_paths": {"dict": [[66, "        alignments_paths = dict()"]]}, "alignments_path": {"str": [[71, "                alignments_path = os.path.join(image_path, \"alignments.fsa\")"]], "?": [[68, "            alignments_path = getattr(self._args, \"alignments_path_{}\".format(side))"]]}}, "func": {"_alignments_paths": {"Train -> dict": [[63, "    def _alignments_paths(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._image_siz": {"var": {"image": {"(?, ?)": [[57, "        image = read_image(self._images[\"a\"][0], raise_error=True)"]]}}, "param": {"self": {"Train": [[54, "    def _image_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._set_timelapse": {"var": {"kwargs": {"dict": [[105, "        kwargs = {\"input_a\": self._args.timelapse_input_a,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._run_training_cyc": {"var": {"timelapse": {"dict": [[304, "            timelapse = self._timelapse if save_iteration else None"]]}}, "param": {"self": {"Train": [[281, "    def _run_training_cycle(self, model, trainer):"]]}, "model": {"None": [[281, "    def _run_training_cycle(self, model, trainer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Tra": {"func": {"_monitor": {"(Train, ?) -> bool / (Train, MultiThread) -> bool": [[325, "    def _monitor(self, thread):"]]}, "__init__": {"? -> ?": [[40, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._set_tf_allow_growth": {"var": {"config": {"?": [[399, "        config = tf.ConfigProto()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train": {"var": {"logger": {"?": [[22, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.train.Train._show": {"var": {"imgfile": {"str": [[424, "                imgfile = os.path.join(scriptpath, img)"], [430, "                imgfile = os.path.join(scriptpath, \"lib\", \"gui\","]]}, "img": {"str": [[423, "                img = \"training_preview.jpg\""], [429, "                img = \".gui_training_preview.jpg\""]]}, "scriptpath": {"str": [[420, "            scriptpath = os.path.realpath(os.path.dirname(sys.argv[0]))"]]}}, "param": {"self": {"Train": [[405, "    def _show(self, image, name=\"\"):"]]}, "image": {"?": [[405, "    def _show(self, image, name=\"\"):"]]}, "name": {"str": [[405, "    def _show(self, image, name=\"\"):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gpu_stats.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_free_": {"var": {"vram": {"[int]": [[315, "            vram = [pynvx.cudaGetMemFree(handle, ignore=True) / (1024 * 1024)"], [318, "            vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).free / (1024 * 1024)"]], "?": [[313, "            vram = self._plaid.vram"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_": {"var": {"vram": {"PlaidMLStats -> [int]": [[284, "            vram = self._plaid.vram"]], "[int]": [[286, "            vram = [pynvx.cudaGetMemTotal(handle, ignore=True) / (1024 * 1024)"], [289, "            vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).total /"]], "list": [[282, "            vram = list()"]]}, "driver": {"PlaidMLStats -> [?]": [[236, "            driver = self._plaid.drivers"]], "str": [[243, "                driver = \"No Nvidia driver found\""]], "?": [[238, "            driver = pynvx.cudaSystemGetDriverVersion(ignore=True)"], [241, "                driver = pynvml.nvmlSystemGetDriverVersion().decode(\"utf-8\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._initializ": {"var": {"loglevel": {"str": [[134, "                loglevel = \"INFO\" if self._logger is None else self._logger.getEffectiveLevel()"]]}}, "param": {"self": {"GPUStats": [[117, "    def _initialize(self, log=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.device_count": {"param": {"self": {"GPUStats": [[70, "    def device_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._lo": {"param": {"message": {"str": [[101, "    def _log(self, level, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.get_card_most_f": {"var": {"retval": {"dict": [[351, "        retval = {\"card_id\": card_id,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_devic": {"var": {"names": {"[?]": [[263, "            names = [pynvx.cudaGetName(handle, ignore=True)"], [266, "            names = [pynvml.nvmlDeviceGetName(handle).decode(\"utf-8\")"]], "list": [[259, "            names = list()"]], "PlaidMLStats -> [str]": [[261, "            names = self._plaid.names"]]}}, "param": {"self": {"GPUStats": [[247, "    def _get_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStat": {"func": {"_is_plaidml": {"GPUStats -> bool": [[75, "    def _is_plaidml(self):"]]}, "sys_info": {"GPUStats -> dict": [[80, "    def sys_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_device_count": {"param": {"self": {"GPUStats": [[186, "    def _get_device_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats": {"var": {"plaidlib": {"None": [[27, "    plaidlib = None"]]}, "IS_MACOS": {"bool": [[18, "    IS_MACOS = True"], [21, "    IS_MACOS = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_hand": {"param": {"self": {"GPUStats": [[215, "    def _get_handles(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_active_devic": {"param": {"self": {"GPUStats": [[200, "    def _get_active_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.get_card_most_fr": {"param": {"self": {"GPUStats": [[324, "    def get_card_most_free(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_free_vram": {"param": {"self": {"GPUStats": [[295, "    def _get_free_vram(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_vram": {"param": {"self": {"GPUStats": [[271, "    def _get_vram(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._": {"var": {"logger": {"?": [[114, "        logger = getattr(self._logger, level.lower())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.__init__": {"param": {"self": {"GPUStats": [[43, "    def __init__(self, log=True):"]]}, "log": {"bool": [[43, "    def __init__(self, log=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_active_": {"var": {"devices": {"?": [[206, "            devices = os.environ.get(\"CUDA_VISIBLE_DEVICES\", None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._is_plaidm": {"param": {"self": {"GPUStats": [[75, "    def _is_plaidml(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._get_driver": {"param": {"self": {"GPUStats": [[227, "    def _get_driver(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.get_card_most": {"var": {"vram_free": {"int": [[349, "        vram_free = max(free_vram)"]]}, "free_vram": {"[list]": [[348, "        free_vram = [self._get_free_vram()[i] for i in self._active_devices]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._log": {"param": {"self": {"GPUStats": [[101, "    def _log(self, level, message):"]]}, "level": {"str": [[101, "    def _log(self, level, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUS": {"func": {"_get_handles": {"GPUStats -> None": [[215, "    def _get_handles(self):"]]}, "get_card_most_free": {"GPUStats -> {dict | dict}": [[324, "    def get_card_most_free(self):"]]}, "_get_active_devices": {"GPUStats -> None": [[200, "    def _get_active_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._shutdown": {"param": {"self": {"GPUStats": [[177, "    def _shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats": {"func": {"_get_driver": {"GPUStats -> PlaidMLStats -> [?]": [[227, "    def _get_driver(self):"]]}, "_initialize": {"(GPUStats, bool) -> ?": [[117, "    def _initialize(self, log=False):"]]}, "_get_vram": {"GPUStats -> {PlaidMLStats -> [int] | [int] | list}": [[271, "    def _get_vram(self):"]]}, "device_count": {"GPUStats -> int": [[70, "    def device_count(self):"]]}, "_get_free_vram": {"GPUStats -> [int]": [[295, "    def _get_free_vram(self):"]]}, "_get_device_count": {"GPUStats -> ?": [[186, "    def _get_device_count(self):"]]}, "_log": {"(GPUStats, str, ?) -> None / (GPUStats, str, str) -> None": [[101, "    def _log(self, level, message):"]]}, "__init__": {"? -> ?": [[43, "    def __init__(self, log=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_": {"class": {"GPUStats": {"<GPUStats>": [[30, "class GPUStats():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUSta": {"func": {"_shutdown": {"GPUStats -> None": [[177, "    def _shutdown(self):"]]}, "_get_devices": {"GPUStats -> {PlaidMLStats -> [str] | [?]}": [[247, "    def _get_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats._initialize": {"var": {"msg": {"?": [[154, "                        msg = (\"There was an error reading from the Nvidia Machine Learning \""], [164, "                    msg = (\"An unhandled exception occured loading pynvml. \""]]}}, "param": {"log": {"bool": [[117, "    def _initialize(self, log=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.get_card_most_free": {"var": {"card_id": {"?": [[350, "        card_id = self._active_devices[free_vram.index(vram_free)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gpu_stats.GPUStats.sys_info": {"param": {"self": {"GPUStats": [[80, "    def sys_info(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.pre_encod": {"param": {"self": {"Output": [[62, "    def pre_encode(self, image):  # pylint: disable=unused-argument,no-self-use"]]}, "image": {"?": [[62, "    def pre_encode(self, image):  # pylint: disable=unused-argument,no-self-use"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.__init__": {"param": {"self": {"Output": [[20, "    def __init__(self, output_folder, configfile=None):"]]}, "configfile": {"None": [[20, "    def __init__(self, output_folder, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.clo": {"param": {"self": {"Output": [[67, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.writ": {"param": {"self": {"Output": [[58, "    def write(self, filename, image):"]]}, "image": {"?": [[58, "    def write(self, filename, image):"]]}, "filename": {"?": [[58, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.O": {"func": {"output_filename": {"(Output, ?) -> str / (Writer, ?) -> str": [[41, "    def output_filename(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.cache_fram": {"param": {"self": {"{Output | Writer | Writer}": [[51, "    def cache_frame(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.is_stream": {"var": {"retval": {"int": [[38, "        retval = hasattr(self, \"frame_order\")"]]}}, "param": {"self": {"Output": [[34, "    def is_stream(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.get_conf": {"param": {"plugin_name": {"str": [[13, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.output_filenam": {"param": {"self": {"{Output | Writer | Writer}": [[41, "    def output_filename(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.output_": {"var": {"filename": {"str": [[45, "        filename = os.path.splitext(os.path.basename(filename))[0]"]]}}, "param": {"filename": {"?": [[41, "    def output_filename(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.cach": {"var": {"frame_no": {"int": [[53, "        frame_no = int(re.search(self.re_search, filename).group())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Outpu": {"func": {"write": {"(Output, ?, ?) -> None": [[58, "    def write(self, filename, image):"]]}, "is_stream": {"Output -> int": [[34, "    def is_stream(self):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self, output_folder, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output": {"func": {"close": {"Output -> None": [[67, "    def close(self):"]]}, "pre_encode": {"(Output, ?) -> None": [[62, "    def pre_encode(self, image):  # pylint: disable=unused-argument,no-self-use"]]}, "cache_frame": {"(Output, ?, ?) -> None / (Writer, ?, ?) -> None": [[51, "    def cache_frame(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.outp": {"var": {"out_filename": {"str": [[46, "        out_filename = \"{}.{}\".format(filename, self.config[\"format\"])"], [47, "        out_filename = os.path.join(self.output_folder, out_filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._bas": {"var": {"logger": {"?": [[10, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"get_config": {"(?, None) -> FaceswapConfig -> dict / (str, None) -> FaceswapConfig -> dict": [[13, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.__ini": {"param": {"output_folder": {"?": [[20, "    def __init__(self, output_folder, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.get_": {"param": {"configfile": {"None": [[13, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base.Output.cache_fr": {"param": {"image": {"?": [[51, "    def cache_frame(self, filename, image):"]]}, "filename": {"?": [[51, "    def cache_frame(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer._base": {"class": {"Output": {"<Output>": [[18, "class Output():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/layers.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling._depth_to_sp": {"param": {"scale": {"int": [[302, "    def _depth_to_space(cls, ipt, scale, data_format=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.compute_output_shap": {"param": {"self": {"SubPixelUpscaling": [[273, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.get_": {"var": {"config": {"dict": [[504, "        config = {'stride': self.stride,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling._postprocess_conv2d_outpu": {"param": {"data_format": {"?": [[313, "    def _postprocess_conv2d_output(input_tensor, data_format):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normalize.__init__": {"param": {"self": {"L2_normalize": [[570, "    def __init__(self, axis, **kwargs):"]]}, "axis": {"?": [[570, "    def __init__(self, axis, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.GlobalMinPooling2D": {"func": {"call": {"(GlobalMinPooling2D, ?) -> None": [[513, "    def call(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.get_": {"var": {"config": {"dict": [[184, "        config = {'size': self.size,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.ca": {"var": {"kernel_width": {"int": [[466, "        kernel_width, kernel_height = self.kernel_size, self.kernel_size"]]}}, "param": {"self": {"ReflectionPadding2D": [[449, "    def call(self, x, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.get_": {"var": {"config": {"dict": [[376, "        config = {\"scale_factor\": self.scale_factor,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.compute_output_shape": {"var": {"padding_width": {"int": [[440, "            padding_width = max(kernel_width - self.stride, 0)"], [442, "            padding_width = max(kernel_width - (in_width % self.stride), 0)"]]}, "in_width": {"?": [[432, "        in_width, in_height = input_shape[2], input_shape[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.build": {"param": {"self": {"SubPixelUpscaling": [[242, "    def build(self, input_shape):"]]}, "input_shape": {"?": [[242, "    def build(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.get_config": {"param": {"self": {"PixelShuffler": [[169, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.__init__": {"param": {"stride": {"int": [[396, "    def __init__(self, stride=2, kernel_size=5, **kwargs):"]]}, "self": {"ReflectionPadding2D": [[396, "    def __init__(self, stride=2, kernel_size=5, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.GlobalStdDevPooling2D.ca": {"var": {"pooled": {"?": [[554, "            pooled = K.std(inputs, axis=[1, 2])"], [556, "            pooled = K.std(inputs, axis=[2, 3])"]]}}, "param": {"self": {"GlobalStdDevPooling2D": [[538, "    def call(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.__ini": {"param": {"data_format": {"None": [[64, "    def __init__(self, size=(2, 2), data_format=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.c": {"var": {"padding_left": {"int": [[479, "        padding_left = padding_width // 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.ca": {"param": {"self": {"SubPixelUpscaling": [[255, "    def call(self, input_tensor, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.compute_output_shap": {"var": {"channels": {"?": [[142, "            channels = input_shape[1] // self.size[0] // self.size[1]"], [158, "            channels = input_shape[3] // self.size[0] // self.size[1]"]]}, "retval": {"(?, ?, None, None)": [[147, "            retval = (input_shape[0],"]], "(?, None, None, ?)": [[163, "            retval = (input_shape[0],"]]}, "height": {"None": [[136, "            height = None"], [152, "            height = None"]], "?": [[139, "                height = input_shape[2] * self.size[0]"], [155, "                height = input_shape[1] * self.size[0]"]]}}, "param": {"self": {"PixelShuffler": [[114, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.__init__": {"param": {"self": {"SubPixelUpscaling": [[236, "    def __init__(self, scale_factor=2, data_format=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.compute_output_shape": {"var": {"batch": {"?": [[290, "            batch, channels, rows, columns = input_shape"], [295, "        batch, rows, columns, channels = input_shape"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D": {"func": {"get_config": {"ReflectionPadding2D -> dict": [[489, "    def get_config(self):"]]}, "call": {"(ReflectionPadding2D, ?, None) -> None": [[449, "    def call(self, x, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}, "build": {"(ReflectionPadding2D, ?) -> None / (ReflectionPadding2D, None) -> None": [[401, "    def build(self, input_shape):"]]}, "__init__": {"? -> ?": [[396, "    def __init__(self, stride=2, kernel_size=5, **kwargs):"]]}, "compute_output_shape": {"(ReflectionPadding2D, ?) -> (?, int, int, ?) / (ReflectionPadding2D, None) -> (?, int, int, ?)": [[415, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normalize.get_": {"var": {"config": {"?": [[606, "        config = super(L2_normalize, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling._preprocess_conv2d": {"var": {"input_tensor": {"?": [[353, "            input_tensor = tf.cast(input_tensor, \"float32\")"], [358, "            input_tensor = tf.transpose(input_tensor, (0, 2, 3, 1))"]]}}, "param": {"input_tensor": {"?": [[337, "    def _preprocess_conv2d_input(input_tensor, data_format):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normalize.get_config": {"param": {"self": {"L2_normalize": [[591, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.compute_output_shape": {"var": {"width": {"None": [[137, "            width = None"], [153, "            width = None"]], "?": [[141, "                width = input_shape[3] * self.size[1]"], [157, "                width = input_shape[2] * self.size[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling": {"func": {"compute_output_shape": {"(SubPixelUpscaling, ?) -> (?, int, int, int)": [[273, "    def compute_output_shape(self, input_shape):"]]}, "call": {"(SubPixelUpscaling, ?, None) -> None": [[255, "    def call(self, input_tensor, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}, "build": {"(SubPixelUpscaling, ?) -> None": [[242, "    def build(self, input_shape):"]]}, "__init__": {"? -> ?": [[236, "    def __init__(self, scale_factor=2, data_format=None, **kwargs):"]]}, "_postprocess_conv2d_output": {"(?, ?) -> None": [[313, "    def _postprocess_conv2d_output(input_tensor, data_format):"]]}, "_preprocess_conv2d_input": {"(?, ?) -> None": [[337, "    def _preprocess_conv2d_input(input_tensor, data_format):"]]}, "_depth_to_space": {"(<SubPixelUpscaling>, ?, ?, None) -> None / (<SubPixelUpscaling>, ?, int, ?) -> None": [[302, "    def _depth_to_space(cls, ipt, scale, data_format=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.GlobalStdDevPooling2D.call": {"param": {"inputs": {"?": [[538, "    def call(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.compute_o": {"var": {"input_shape": {"?": [[431, "        input_shape = self.input_spec[0].shape"]]}}, "param": {"input_shape": {"None": [[415, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler": {"var": {"o_channels": {"?": [[96, "            o_channels = channels // (r_height * r_width)"], [107, "            o_channels = channels // (r_height * r_width)"]]}}, "func": {"get_config": {"PixelShuffler -> dict": [[169, "    def get_config(self):"]]}, "call": {"(PixelShuffler, ?) -> None": [[69, "    def call(self, inputs, **kwargs):"]]}, "__init__": {"? -> ?": [[64, "    def __init__(self, size=(2, 2), data_format=None, **kwargs):"]]}, "compute_output_shape": {"(PixelShuffler, ?) -> (?, None, None, None)": [[114, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.__init__": {"param": {"self": {"PixelShuffler": [[64, "    def __init__(self, size=(2, 2), data_format=None, **kwargs):"]]}, "size": {"(int, int)": [[64, "    def __init__(self, size=(2, 2), data_format=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.GlobalMinPooling2D.ca": {"var": {"pooled": {"?": [[529, "            pooled = K.min(inputs, axis=[1, 2])"], [531, "            pooled = K.min(inputs, axis=[2, 3])"]]}}, "param": {"self": {"GlobalMinPooling2D": [[513, "    def call(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers": {"var": {"name": {"?": [[612, "for name, obj in inspect.getmembers(sys.modules[__name__]):"]]}}, "class": {"L2_normalize": {"<L2_normalize>": [[560, "class L2_normalize(Layer):  # Pylint:disable=invalid-name"]]}, "ReflectionPadding2D": {"<ReflectionPadding2D>": [[382, "class ReflectionPadding2D(Layer):"]]}, "GlobalStdDevPooling2D": {"<GlobalStdDevPooling2D>": [[535, "class GlobalStdDevPooling2D(_GlobalPooling2D):"]]}, "PixelShuffler": {"<PixelShuffler>": [[25, "class PixelShuffler(Layer):"]]}, "GlobalMinPooling2D": {"<GlobalMinPooling2D>": [[510, "class GlobalMinPooling2D(_GlobalPooling2D):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.get_config": {"param": {"self": {"SubPixelUpscaling": [[361, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling._depth_to_space": {"var": {"data_format": {"?": [[305, "            data_format = K.image_data_format()"], [306, "        data_format = data_format.lower()"]]}, "ipt": {"None": [[307, "        ipt = cls._preprocess_conv2d_input(ipt, data_format)"]]}, "out": {"None": [[309, "        out = cls._postprocess_conv2d_output(out, data_format)"]], "?": [[308, "        out = tf.depth_to_space(ipt, scale)"]]}}, "param": {"data_format": {"None": [[302, "    def _depth_to_space(cls, ipt, scale, data_format=None):"]]}, "ipt": {"?": [[302, "    def _depth_to_space(cls, ipt, scale, data_format=None):"]]}, "cls": {"<SubPixelUpscaling>": [[302, "    def _depth_to_space(cls, ipt, scale, data_format=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layer": {"class": {"SubPixelUpscaling": {"<SubPixelUpscaling>": [[191, "class SubPixelUpscaling(Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling._preprocess_conv2d_inpu": {"param": {"data_format": {"?": [[337, "    def _preprocess_conv2d_input(input_tensor, data_format):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.compute_output_shap": {"var": {"kernel_width": {"int": [[433, "        kernel_width, kernel_height = self.kernel_size, self.kernel_size"]]}}, "param": {"self": {"ReflectionPadding2D": [[415, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.GlobalStdDevPooling2D": {"func": {"call": {"(GlobalStdDevPooling2D, ?) -> None": [[538, "    def call(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.get": {"var": {"base_config": {"?": [[186, "        base_config = super(PixelShuffler, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.compute_o": {"param": {"input_shape": {"?": [[114, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.call": {"param": {"mask": {"None": [[255, "    def call(self, input_tensor, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}, "input_tensor": {"?": [[255, "    def call(self, input_tensor, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normalize": {"func": {"call": {"(L2_normalize, ?) -> None": [[574, "    def call(self, inputs):  # pylint:disable=arguments-differ"]]}, "__init__": {"? -> ?": [[570, "    def __init__(self, axis, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.call": {"var": {"out": {"?": [[98, "            out = K.reshape(inputs, (batch_size, r_height, r_width, o_channels, height, width))"], [99, "            out = K.permute_dimensions(out, (0, 3, 4, 1, 5, 2))"], [100, "            out = K.reshape(out, (batch_size, o_channels, o_height, o_width))"], [109, "            out = K.reshape(inputs, (batch_size, height, width, r_height, r_width, o_channels))"], [110, "            out = K.permute_dimensions(out, (0, 1, 3, 2, 4, 5))"], [111, "            out = K.reshape(out, (batch_size, o_height, o_width, o_channels))"]]}, "r_height": {"?": [[94, "            r_height, r_width = self.size"], [105, "            r_height, r_width = self.size"]]}, "input_shape": {"?": [[84, "        input_shape = K.int_shape(inputs)"]]}, "batch_size": {"int": [[93, "                batch_size = -1"], [104, "                batch_size = -1"]], "?": [[91, "            batch_size, channels, height, width = input_shape"], [102, "            batch_size, height, width, channels = input_shape"]]}, "o_height": {"?": [[95, "            o_height, o_width = height * r_height, width * r_width"], [106, "            o_height, o_width = height * r_height, width * r_width"]]}}, "param": {"inputs": {"?": [[69, "    def call(self, inputs, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.GlobalMinPooling2D.call": {"param": {"inputs": {"?": [[513, "    def call(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.PixelShuffler.ca": {"param": {"self": {"PixelShuffler": [[69, "    def call(self, inputs, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.__init": {"param": {"kernel_size": {"int": [[396, "    def __init__(self, stride=2, kernel_size=5, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normalize.ca": {"param": {"self": {"L2_normalize": [[574, "    def call(self, inputs):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.call": {"var": {"input_shape": {"?": [[464, "        input_shape = self.input_spec[0].shape"]]}, "padding_right": {"int": [[480, "        padding_right = padding_width - padding_left"]]}, "padding_width": {"int": [[473, "            padding_width = max(kernel_width - self.stride, 0)"], [475, "            padding_width = max(kernel_width - (in_width % self.stride), 0)"]]}, "padding_top": {"int": [[477, "        padding_top = padding_height // 2"]]}, "padding_height": {"int": [[469, "            padding_height = max(kernel_height - self.stride, 0)"], [471, "            padding_height = max(kernel_height - (in_height % self.stride), 0)"]]}, "in_width": {"?": [[465, "        in_width, in_height = input_shape[2], input_shape[1]"]]}, "padding_bot": {"int": [[478, "        padding_bot = padding_height - padding_top"]]}}, "param": {"x": {"?": [[449, "    def call(self, x, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}, "mask": {"None": [[449, "    def call(self, x, mask=None):  # pylint:disable=unused-argument,arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.get": {"var": {"base_config": {"?": [[378, "        base_config = super(SubPixelUpscaling, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normalize.call": {"param": {"inputs": {"?": [[574, "    def call(self, inputs):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscal": {"func": {"get_config": {"SubPixelUpscaling -> dict": [[361, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.build": {"param": {"self": {"ReflectionPadding2D": [[401, "    def build(self, input_shape):"]]}, "input_shape": {"None": [[401, "    def build(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.__ini": {"param": {"scale_factor": {"int": [[236, "    def __init__(self, scale_factor=2, data_format=None, **kwargs):"]]}, "data_format": {"None": [[236, "    def __init__(self, scale_factor=2, data_format=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling._postprocess_conv2d": {"var": {"input_tensor": {"?": [[330, "            input_tensor = tf.transpose(input_tensor, (0, 3, 1, 2))"], [333, "            input_tensor = tf.cast(input_tensor, \"float64\")"]]}}, "param": {"input_tensor": {"?": [[313, "    def _postprocess_conv2d_output(input_tensor, data_format):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.get_config": {"param": {"self": {"ReflectionPadding2D": [[489, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.L2_normaliz": {"func": {"get_config": {"L2_normalize -> None": [[591, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.compute_o": {"param": {"input_shape": {"?": [[273, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.compute_output_s": {"var": {"padding_height": {"int": [[436, "            padding_height = max(kernel_height - self.stride, 0)"], [438, "            padding_height = max(kernel_height - (in_height % self.stride), 0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.ReflectionPadding2D.get": {"var": {"base_config": {"?": [[506, "        base_config = super(ReflectionPadding2D, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.layers.SubPixelUpscaling.c": {"var": {"retval": {"None": [[270, "        retval = self._depth_to_space(input_tensor, self.scale_factor, self.data_format)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/align/fan_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[51, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/session.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession._set_sess": {"var": {"config": {"?": [[112, "        config = tf.ConfigProto()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession._amd_predict_with_optimized": {"var": {"batch_size": {"int": [[90, "                batch_size = 1"]]}}, "param": {"batch_size": {"None": [[70, "    def _amd_predict_with_optimized_batchsizes(self, feed, batch_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession._set_session": {"var": {"msg": {"str": [[119, "                msg = (\"Your Nvidia Graphics Driver is insufficient for running Faceswap. \""]]}}, "param": {"self": {"KSession": [[102, "    def _set_session(self, allow_growth):"]]}, "allow_growth": {"?": [[102, "    def _set_session(self, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.define_mod": {"param": {"self": {"{KSession | ONet | PNet | RNet}": [[143, "    def define_model(self, function):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.load_mod": {"param": {"self": {"{KSession | S3fd}": [[127, "    def load_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.__init__": {"param": {"self": {"KSession": [[39, "    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):"]]}, "name": {"str": [[39, "    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session": {"var": {"logger": {"?": [[14, "logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model": {"class": {"KSession": {"<KSession>": [[17, "class KSession():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.predict": {"param": {"feed": {"?": [[50, "    def predict(self, feed, batch_size=None):"]]}, "self": {"{KSession | ONet | PNet | RNet | S3fd}": [[50, "    def predict(self, feed, batch_size=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KS": {"func": {"_set_session": {"(KSession, ?) -> ?": [[102, "    def _set_session(self, allow_growth):"]]}, "append_softmax_activation": {"(KSession, int) -> None": [[178, "    def append_softmax_activation(self, layer_index=-1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.__ini": {"param": {"model_path": {"?": [[39, "    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):"]]}, "allow_growth": {"?": [[39, "    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.pred": {"param": {"batch_size": {"None": [[50, "    def predict(self, feed, batch_size=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSess": {"func": {"define_model": {"(KSession, ?) -> None / (RNet, () -> ([?], [?])) -> None / (PNet, () -> ([?], [?])) -> None / (ONet, () -> ([?], [?])) -> None": [[143, "    def define_model(self, function):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession": {"func": {"predict": {"(PNet, ?, None) -> [?] / (RNet, ?, None) -> [?] / (ONet, ?, None) -> [?] / (KSession, ?, None) -> [?] / (S3fd, ?, None) -> [?]": [[50, "    def predict(self, feed, batch_size=None):"]]}, "_amd_predict_with_optimized_batchsizes": {"(KSession, ?, ?) -> [?] / (PNet, ?, None) -> [?] / (RNet, ?, None) -> [?] / (ONet, ?, None) -> [?] / (KSession, ?, None) -> [?] / (S3fd, ?, None) -> [?]": [[70, "    def _amd_predict_with_optimized_batchsizes(self, feed, batch_size):"]]}, "load_model": {"KSession -> None / S3fd -> None": [[127, "    def load_model(self):"]]}, "load_model_weights": {"KSession -> None / RNet -> None / PNet -> None / ONet -> None": [[163, "    def load_model_weights(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession._amd_predict_with_optimized_batchsizes": {"var": {"feed": {"[?]": [[84, "            feed = [feed]"]]}, "pred_data": {"[?]": [[93, "                pred_data = [x[done_items:done_items + batch_items] for x in feed]"]]}, "pred": {"?": [[94, "                pred = self._model.predict(pred_data, batch_size=batch_size)"]]}}, "param": {"feed": {"?": [[70, "    def _amd_predict_with_optimized_batchsizes(self, feed, batch_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession._amd_predict_with_optimized_batchsiz": {"var": {"items": {"?": [[85, "        items = feed[0].shape[0]"]]}, "results": {"list": [[87, "        results = list()"]]}, "batch_items": {"int": [[91, "            batch_items = ((items - done_items) // batch_size) * batch_size"]]}, "done_items": {"int": [[86, "        done_items = 0"]]}}, "param": {"self": {"{KSession | ONet | PNet | RNet | S3fd}": [[70, "    def _amd_predict_with_optimized_batchsizes(self, feed, batch_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.__init": {"param": {"model_kwargs": {"None": [[39, "    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession._set_": {"var": {"session": {"?": [[116, "            session = tf.Session(graph=tf.Graph(), config=config)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.append_softmax_activatio": {"param": {"layer_index": {"int": [[178, "    def append_softmax_activation(self, layer_index=-1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.append_softmax_activation": {"var": {"softmax": {"?": [[191, "        softmax = Activation(\"softmax\", name=\"softmax\")(self._model.layers[layer_index].output)"]]}}, "param": {"self": {"KSession": [[178, "    def append_softmax_activation(self, layer_index=-1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.define_model": {"param": {"function": {"{() -> ([?], [?]) | () -> ([?], [?]) | () -> ([?], [?])}": [[143, "    def define_model(self, function):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSession.load_model_weight": {"param": {"self": {"{KSession | ONet | PNet | RNet}": [[163, "    def load_model_weights(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.session.KSessio": {"func": {"__init__": {"? -> ?": [[39, "    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/gif.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Wri": {"func": {"set_frame_order": {"(?, ?) -> list": [[29, "    def set_frame_order(total_count, frame_ranges):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writ": {"func": {"save_from_cache": {"Writer -> None": [[80, "    def save_from_cache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif": {"class": {"Writer": {"<Writer>": [[11, "class Writer(Output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_gif_filename": {"var": {"char": {"<list>": [[65, "        for char in list(filename[::-1]):"]]}, "idx": {"int": [[64, "        idx = len(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.get_writer": {"param": {"self": {"Writer": [[40, "    def get_writer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.gif_param": {"var": {"kwargs": {"dict": [[24, "        kwargs = {key: int(val) for key, val in self.config.items()}"]]}}, "param": {"self": {"Writer": [[22, "    def gif_params(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.save_from_cach": {"var": {"save_no": {"None": [[86, "            save_no = self.frame_order.pop(0)"]]}, "save_image": {"?": [[87, "            save_image = self.cache.pop(save_no)"]]}}, "param": {"self": {"Writer": [[80, "    def save_from_cache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_frame_orde": {"var": {"rng": {"?": [[35, "            for rng in frame_ranges:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.clo": {"param": {"self": {"Writer": [[92, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_dimension": {"param": {"frame_dims": {"?": [[72, "    def set_dimensions(self, frame_dims):"]]}, "self": {"Writer": [[72, "    def set_dimensions(self, frame_dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.__init__": {"param": {"self": {"Writer": [[13, "    def __init__(self, output_folder, total_count, frame_ranges, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_frame_ord": {"var": {"retval": {"list": [[32, "            retval = list(range(1, total_count + 1))"], [34, "            retval = list()"]]}}, "param": {"frame_ranges": {"?": [[29, "    def set_frame_order(total_count, frame_ranges):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.writ": {"var": {"image": {"?": [[56, "            image = cv2.resize(image, self.output_dimensions)  # pylint: disable=no-member"]]}}, "param": {"self": {"Writer": [[47, "    def write(self, filename, image):"]]}, "image": {"?": [[47, "    def write(self, filename, image):"]]}, "filename": {"?": [[47, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.__ini": {"param": {"total_count": {"?": [[13, "    def __init__(self, output_folder, total_count, frame_ranges, **kwargs):"]]}, "output_folder": {"?": [[13, "    def __init__(self, output_folder, total_count, frame_ranges, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.__init": {"param": {"frame_ranges": {"?": [[13, "    def __init__(self, output_folder, total_count, frame_ranges, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.W": {"func": {"get_writer": {"Writer -> None": [[40, "    def get_writer(self):"]]}, "write": {"(Writer, ?, ?) -> None": [[47, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_gif_": {"var": {"filename": {"str": [[63, "        filename = os.path.splitext(os.path.basename(filename))[0]"]]}}, "param": {"filename": {"?": [[60, "    def set_gif_filename(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_frame_order": {"param": {"total_count": {"?": [[29, "    def set_frame_order(total_count, frame_ranges):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer.set_gif_filenam": {"param": {"self": {"Writer": [[60, "    def set_gif_filename(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Writer": {"func": {"set_dimensions": {"(Writer, ?) -> None": [[72, "    def set_dimensions(self, frame_dims):"]]}, "set_gif_filename": {"(Writer, ?) -> None": [[60, "    def set_gif_filename(self, filename):"]]}, "__init__": {"? -> ?": [[13, "    def __init__(self, output_folder, total_count, frame_ranges, **kwargs):"]]}, "close": {"Writer -> None": [[92, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif.Write": {"func": {"gif_params": {"Writer -> dict": [[22, "    def gif_params(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/original_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Original Faceswap Model.\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/nn_blocks.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.conv2": {"param": {"padding": {"str": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}, "strides": {"(int, int)": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_b": {"class": {"NNBlocks": {"<NNBlocks>": [[18, "class NNBlocks():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.__init__": {"param": {"self": {"NNBlocks": [[46, "                 first_run=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks": {"func": {"_get_name": {"(NNBlocks, ?) -> str / (NNBlocks, str) -> str": [[61, "    def _get_name(self, name):"]]}, "conv": {"(NNBlocks, ?, ?, int, int, str, bool, bool) -> None": [[186, "    def conv(self, input_tensor, filters, kernel_size=5, strides=2, padding=\"same\","]]}, "conv2d": {"(NNBlocks, ?, ?, ?, (int, int), str) -> None / (NNBlocks, ?, ?, int, (int, int), str) -> None / (NNBlocks, ?, int, int, (int, int), str) -> None": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}, "__init__": {"? -> ?": [[42, "    def __init__(self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.res_bloc": {"param": {"kernel_size": {"int": [[312, "    def res_block(self, input_tensor, filters, kernel_size=3, padding=\"same\", **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks": {"var": {"logger": {"?": [[15, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.conv": {"var": {"padding": {"str": [[234, "            padding = \"valid\""]]}, "use_instance_norm": {"bool": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "input_tensor": {"?": [[230, "            input_tensor = ReflectionPadding2D("]]}, "name": {"str": [[228, "        name = self._get_name(\"conv_{}\".format(input_tensor.shape[1]))"]]}}, "param": {"res_block_follows": {"bool": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "self": {"NNBlocks": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "use_instance_norm": {"bool": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "padding": {"str": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "strides": {"int": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "filters": {"?": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}, "input_tensor": {"?": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"], [372, "    def conv_sep(self, input_tensor, filters, kernel_size=5, strides=2, **kwargs):"]]}, "kernel_size": {"int": [[187, "             use_instance_norm=False, res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.res_block": {"var": {"padding": {"str": [[344, "            padding = \"valid\""], [355, "            padding = \"valid\""]]}, "original_init": {"None": [[357, "            original_init = self._switch_kernel_initializer(kwargs, VarianceScaling("]]}, "name": {"str": [[338, "        name = self._get_name(\"residual_{}\".format(input_tensor.shape[1]))"]]}, "var_x": {"None": [[345, "        var_x = self.conv2d(var_x, filters,"], [361, "        var_x = self.conv2d(var_x, filters,"]], "?": [[339, "        var_x = LeakyReLU(alpha=0.2, name=\"{}_leakyrelu_0\".format(name))(input_tensor)"], [341, "            var_x = ReflectionPadding2D(stride=1,"], [350, "        var_x = LeakyReLU(alpha=0.2, name=\"{}_leakyrelu_1\".format(name))(var_x)"], [352, "            var_x = ReflectionPadding2D(stride=1,"], [367, "        var_x = Add()([var_x, input_tensor])"], [368, "        var_x = LeakyReLU(alpha=0.2, name=\"{}_leakyrelu_3\".format(name))(var_x)"]]}}, "param": {"padding": {"str": [[312, "    def res_block(self, input_tensor, filters, kernel_size=3, padding=\"same\", **kwargs):"]]}, "self": {"NNBlocks": [[312, "    def res_block(self, input_tensor, filters, kernel_size=3, padding=\"same\", **kwargs):"]]}, "input_tensor": {"?": [[312, "    def res_block(self, input_tensor, filters, kernel_size=3, padding=\"same\", **kwargs):"]]}, "filters": {"?": [[312, "    def res_block(self, input_tensor, filters, kernel_size=3, padding=\"same\", **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.conv2d": {"var": {"var_x": {"?": [[179, "        var_x = Conv2D(filters, kernel_size,"]]}, "kwargs": {"{None | dict}": [[178, "        kwargs = self._set_default_initializer(kwargs)"]]}}, "param": {"self": {"NNBlocks": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}, "input_tensor": {"?": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}, "kernel_size": {"int": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}, "filters": {"int": [[143, "    def conv2d(self, input_tensor, filters, kernel_size, strides=(1, 1), padding=\"same\", **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks._set_default_initialize": {"param": {"kwargs": {"dict": [[82, "    def _set_default_initializer(self, kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlo": {"func": {"_switch_kernel_initializer": {"(None, None) -> None / (?, None) -> None / (?, ?) -> None / (None, ICNR) -> None": [[116, "    def _switch_kernel_initializer(kwargs, initializer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks._switch_kernel_initialize": {"var": {"original": {"?": [[138, "        original = kwargs.get(\"kernel_initializer\", None)"]]}}, "param": {"kwargs": {"None": [[116, "    def _switch_kernel_initializer(kwargs, initializer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNB": {"func": {"res_block": {"(NNBlocks, ?, ?, int, str) -> None": [[312, "    def res_block(self, input_tensor, filters, kernel_size=3, padding=\"same\", **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks._get_nam": {"param": {"self": {"NNBlocks": [[61, "    def _get_name(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlock": {"var": {"use_icnr_init": {"bool": [[43, "                 use_icnr_init=False,"]]}, "use_reflect_padding": {"bool": [[45, "                 use_reflect_padding=False,"]]}, "first_run": {"bool": [[46, "                 first_run=True):"]]}, "use_convaware_init": {"bool": [[44, "                 use_convaware_init=False,"]]}}, "param": {"use_icnr_init": {"bool": [[46, "                 first_run=True):"]]}, "use_reflect_padding": {"bool": [[46, "                 first_run=True):"]]}, "first_run": {"bool": [[46, "                 first_run=True):"]]}, "use_convaware_init": {"bool": [[46, "                 first_run=True):"]]}}, "func": {"_set_default_initializer": {"(NNBlocks, dict) -> dict / (NNBlocks, ?) -> None": [[82, "    def _set_default_initializer(self, kwargs):"]]}, "upscale": {"(NNBlocks, ?, ?, int, str, bool, bool, int) -> None": [[247, "    def upscale(self, input_tensor, filters, kernel_size=3, padding=\"same\","]]}, "conv_sep": {"(NNBlocks, ?, ?, int, int) -> None": [[372, "    def conv_sep(self, input_tensor, filters, kernel_size=5, strides=2, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks._set_default_initializer": {"var": {"default": {"ConvolutionAware": [[104, "            default = ConvolutionAware()"]], "?": [[109, "            default = he_uniform()"]]}}, "param": {"self": {"NNBlocks": [[82, "    def _set_default_initializer(self, kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.conv_sep": {"var": {"var_x": {"?": [[402, "        var_x = SeparableConv2D(filters,"], [408, "        var_x = Activation(\"relu\", name=\"{}_relu\".format(name))(var_x)"]]}, "name": {"str": [[400, "        name = self._get_name(\"separableconv2d_{}\".format(input_tensor.shape[1]))"]]}, "kwargs": {"None": [[401, "        kwargs = self._set_default_initializer(kwargs)"]]}}, "param": {"strides": {"int": [[372, "    def conv_sep(self, input_tensor, filters, kernel_size=5, strides=2, **kwargs):"]]}, "self": {"NNBlocks": [[372, "    def conv_sep(self, input_tensor, filters, kernel_size=5, strides=2, **kwargs):"]]}, "kernel_size": {"int": [[372, "    def conv_sep(self, input_tensor, filters, kernel_size=5, strides=2, **kwargs):"]]}, "filters": {"?": [[372, "    def conv_sep(self, input_tensor, filters, kernel_size=5, strides=2, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks._switch_kernel_": {"param": {"initializer": {"{ICNR | None}": [[116, "    def _switch_kernel_initializer(kwargs, initializer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.up": {"param": {"scale_factor": {"int": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.con": {"var": {"var_x": {"None": [[235, "        var_x = self.conv2d(input_tensor, filters,"]], "?": [[242, "            var_x = InstanceNormalization(name=\"{}_instancenorm\".format(name))(var_x)"], [244, "            var_x = LeakyReLU(0.1, name=\"{}_leakyrelu\".format(name))(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks._get_": {"var": {"name": {"str": [[78, "        name = \"{}_{}\".format(name, self.names[name])"]]}}, "param": {"name": {"str": [[61, "    def _get_name(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.upscale": {"var": {"padding": {"str": [[291, "            padding = \"valid\""]]}, "original_init": {"None": [[294, "            original_init = self._switch_kernel_initializer("]]}, "var_x": {"None": [[297, "        var_x = self.conv2d(input_tensor, filters * scale_factor * scale_factor,"]], "?": [[305, "            var_x = InstanceNormalization(name=\"{}_instancenorm\".format(name))(var_x)"], [307, "            var_x = LeakyReLU(0.1, name=\"{}_leakyrelu\".format(name))(var_x)"], [308, "        var_x = PixelShuffler(name=\"{}_pixelshuffler\".format(name), size=scale_factor)(var_x)"]]}, "kwargs": {"None": [[292, "        kwargs = self._set_default_initializer(kwargs)"]]}}, "param": {"padding": {"str": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.upsca": {"param": {"res_block_follows": {"bool": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}, "self": {"NNBlocks": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}, "kernel_size": {"int": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}, "filters": {"?": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.nn_blocks.NNBlocks.upscal": {"var": {"use_instance_norm": {"bool": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}, "input_tensor": {"?": [[287, "            input_tensor = ReflectionPadding2D("]]}, "name": {"str": [[285, "        name = self._get_name(\"upscale_{}\".format(input_tensor.shape[1]))"]]}}, "param": {"use_instance_norm": {"bool": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}, "input_tensor": {"?": [[248, "                use_instance_norm=False, res_block_follows=False, scale_factor=2, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/mask/box_blend.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend": {"class": {"Mask": {"<Mask>": [[11, "class Mask(Adjustment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.M": {"func": {"_get_mask": {"Mask -> BlurMask -> None": [[28, "    def _get_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask._get_mask": {"var": {"facesize": {"?": [[42, "        facesize = self.dummy.shape[0]"]]}, "erode": {"?": [[43, "        erode = slice(round(facesize * mask_ratio), -round(facesize * mask_ratio))"]]}}, "param": {"self": {"Mask": [[28, "    def _get_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask.__init__": {"param": {"self": {"Mask": [[24, "    def __init__(self, output_size, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask.__in": {"param": {"output_size": {"?": [[24, "    def __init__(self, output_size, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask._ge": {"var": {"mask_ratio": {"int": [[41, "        mask_ratio = self.config[\"distance\"] / 200"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask.proc": {"param": {"self": {"Mask": [[55, "    def process(self, new_face):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask.process": {"var": {"new_face": {"?": [[75, "        new_face = np.concatenate((new_face, self.mask), axis=-1)"]]}}, "param": {"new_face": {"?": [[55, "    def process(self, new_face):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask._get_": {"var": {"mask": {"BlurMask -> None": [[47, "        mask = BlurMask(self.config[\"type\"],"]], "?": [[44, "        mask = self.dummy[:, :, -1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend.Mask": {"func": {"process": {"(Mask, ?) -> None": [[55, "    def process(self, new_face):  # pylint:disable=arguments-differ"]]}, "__init__": {"? -> ?": [[24, "    def __init__(self, output_size, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/extended.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.init_mod": {"param": {"self": {"Mask": [[21, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.predi": {"param": {"batch": {"?": [[30, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.predic": {"var": {"item": {"{(?, ?) | (?, ?, ?, ?)}": [[34, "            for item in parts:"]], "?": [[35, "                item = np.rint(np.concatenate(item)).astype(\"int32\")"]]}, "parts": {"[{(?, ?) | (?, ?, ?, ?)}]": [[33, "            parts = self.parse_parts(np.array(face.feed_landmarks))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.__init": {"var": {"model_filename": {"None": [[13, "        model_filename = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.process_output": {"param": {"self": {"Mask": [[41, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.process_input": {"param": {"self": {"Mask": [[24, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.parse_part": {"var": {"nose": {"(?, ?)": [[81, "        nose = (landmarks[27:31], landmarks[31:36])"]]}, "nose_ridge": {"(?, ?)": [[72, "        nose_ridge = (landmarks[19:25], landmarks[8:9],)"]]}}, "param": {"landmarks": {"?": [[46, "    def parse_parts(landmarks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.process_outpu": {"param": {"batch": {"?": [[41, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.__init__": {"param": {"self": {"Mask": [[11, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.parse_parts": {"var": {"bot_r": {"?": [[58, "        bot_r = np.array((landmarks[42], landmarks[43], landmarks[44], landmarks[45], qr_pnt))"]]}, "ml_pnt": {"int": [[49, "        ml_pnt = (landmarks[36] + landmarks[0]) // 2"]]}, "r_jaw": {"(?, ?)": [[68, "        r_jaw = (landmarks[0:9], landmarks[17:18])"]]}, "top_l": {"?": [[61, "        top_l = landmarks[17:22]"]]}, "mr_pnt": {"int": [[50, "        mr_pnt = (landmarks[16] + landmarks[45]) // 2"]]}, "r_eye": {"(?, ?, ?, ?)": [[73, "        r_eye = (landmarks[17:22],"]]}, "l_jaw": {"(?, ?)": [[69, "        l_jaw = (landmarks[8:17], landmarks[26:27])"]]}, "l_eye": {"(?, ?, ?, ?)": [[77, "        l_eye = (landmarks[22:27],"]]}, "r_cheek": {"(?, ?)": [[70, "        r_cheek = (landmarks[17:20], landmarks[8:9])"]]}, "qr_pnt": {"int": [[54, "        qr_pnt = (landmarks[45] + mr_pnt) // 2"]]}, "ql_pnt": {"int": [[53, "        ql_pnt = (landmarks[36] + ml_pnt) // 2"]]}, "l_cheek": {"(?, ?)": [[71, "        l_cheek = (landmarks[24:27], landmarks[8:9])"]]}, "top_r": {"?": [[62, "        top_r = landmarks[22:27]"]]}, "bot_l": {"?": [[57, "        bot_l = np.array((ql_pnt, landmarks[36], landmarks[37], landmarks[38], landmarks[39]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.process_inpu": {"param": {"batch": {"?": [[24, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.predict": {"var": {"hull": {"?": [[36, "                hull = cv2.convexHull(item)"]]}}, "param": {"self": {"Mask": [[30, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.__in": {"var": {"git_model_id": {"None": [[12, "        git_model_id = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask": {"func": {"predict": {"(Mask, ?) -> None": [[30, "    def predict(self, batch):"]]}, "process_output": {"(Mask, ?) -> None": [[41, "    def process_output(self, batch):"]]}, "process_input": {"(Mask, ?) -> None": [[24, "    def process_input(self, batch):"]]}, "init_model": {"Mask -> None": [[21, "    def init_model(self):"]]}, "parse_parts": {"? -> [{(?, ?) | (?, ?, ?, ?)}]": [[46, "    def parse_parts(landmarks):"]]}, "__init__": {"? -> ?": [[11, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended.Mask.parse_": {"var": {"parts": {"[{(?, ?) | (?, ?, ?, ?)}]": [[82, "        parts = [r_jaw, l_jaw, r_cheek, l_cheek, nose_ridge, r_eye, l_eye, nose]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.extended": {"class": {"Mask": {"<Mask>": [[9, "class Mask(Masker):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/initializers.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAwar": {"func": {"get_config": {"ConvolutionAware -> dict": [[283, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR.get_config": {"param": {"self": {"ICNR": [[136, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware.__call": {"var": {"correct_ifft": {"(?, {(?, ?) | (?, ?, ?) | ?}) -> ?": [[226, "            correct_ifft = lambda shape, s=[None]: np.fft.irfft(shape, s[0])  # noqa"]], "?": [[234, "            correct_ifft = np.fft.irfft2"], [243, "            correct_ifft = np.fft.irfftn"]]}, "transpose_dimensions": {"(int, int, int)": [[224, "            transpose_dimensions = (2, 1, 0)"]], "(int, int, int, int, int)": [[240, "            transpose_dimensions = (3, 4, 0, 1, 2)"]], "(int, int, int, int)": [[232, "            transpose_dimensions = (2, 3, 1, 0)"]]}, "correct_fft": {"?": [[227, "            correct_fft = np.fft.rfft"], [235, "            correct_fft = np.fft.rfft2"], [242, "            correct_fft = np.fft.rfftn"]]}, "fan_in": {"?": [[218, "        fan_in, _ = initializers._compute_fans(shape)  # pylint:disable=protected-access"]]}, "var_x": {"?": [[238, "            var_x, var_y, var_z, stack_size, filters_size = shape"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware.__ini": {"param": {"eps_std": {"float": [[183, "    def __init__(self, eps_std=0.05, seed=None, init=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware._create_ba": {"param": {"filters_size": {"?": [[257, "    def _create_basis(self, filters_size, filters, size, dtype):"]]}, "filters": {"?": [[257, "    def _create_basis(self, filters_size, filters, size, dtype):"]]}, "size": {"?": [[257, "    def _create_basis(self, filters_size, filters, size, dtype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR._space_to_dep": {"var": {"new_width": {"int": [[126, "            new_width = width // self.scale"]]}, "batch": {"?": [[124, "            batch, height, width, depth = input_tensor.shape.dims"]]}, "new_height": {"int": [[125, "            new_height = height // self.scale"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware._symmetrize": {"var": {"diag": {"?": [[272, "        diag = var_a.diagonal(axis1=2, axis2=3)"]]}, "var_c": {"?": [[273, "        var_c = np.array([[np.diag(arr) for arr in batch] for batch in diag])"]]}, "var_b": {"?": [[271, "        var_b = np.transpose(var_a, axes=(0, 1, 3, 2))"]]}}, "param": {"var_a": {"?": [[269, "    def _symmetrize(var_a):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware._create_basis": {"var": {"nbb": {"int": [[261, "        nbb = filters // size + 1"]]}, "var_u": {"?": [[264, "        var_u = np.linalg.svd(var_a)[0].transpose(0, 1, 3, 2)"]]}, "var_a": {"None": [[263, "        var_a = self._symmetrize(var_a)"]], "?": [[262, "        var_a = np.random.normal(0.0, 1.0, (filters_size, nbb, size, size))"]]}, "var_p": {"?": [[265, "        var_p = np.reshape(var_u, (filters_size, nbb * size, size))[:, :filters, :].astype(dtype)"]]}}, "param": {"dtype": {"None": [[257, "    def _create_basis(self, filters_size, filters, size, dtype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR.__init__": {"param": {"self": {"ICNR": [[44, "    def __init__(self, initializer, scale=2):"]]}, "scale": {"int": [[44, "    def __init__(self, initializer, scale=2):"]]}, "initializer": {"?": [[44, "    def __init__(self, initializer, scale=2):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware._scale_filters": {"var": {"c_var": {"?": [[279, "        c_var = np.var(filters)"]]}, "var_p": {"?": [[280, "        var_p = np.sqrt(variance / c_var)"]]}}, "param": {"variance": {"int": [[277, "    def _scale_filters(filters, variance):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAw": {"func": {"_create_basis": {"(ConvolutionAware, ?, ?, ?, None) -> None / (ConvolutionAware, ?, ?, ?, ?) -> None": [[257, "    def _create_basis(self, filters_size, filters, size, dtype):"]]}, "_scale_filters": {"(?, int) -> None / (?, ?) -> None": [[277, "    def _scale_filters(filters, variance):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR._space_to_depth": {"var": {"retval": {"?": [[129, "            retval = K.reshape(K.permute_dimensions(reshaped, [0, 1, 3, 2, 4, 5]),"], [132, "            retval = tf.space_to_depth(input_tensor, block_size=self.scale, data_format=\"NHWC\")"]]}}, "param": {"self": {"ICNR": [[107, "    def _space_to_depth(self, input_tensor):"]]}, "input_tensor": {"None": [[107, "    def _space_to_depth(self, input_tensor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR._resize_nearest_neighbou": {"var": {"retval": {"?": [[100, "            retval = K.resize_images(input_tensor, self.scale, self.scale, \"channels_last\","], [103, "            retval = tf.image.resize_nearest_neighbor(input_tensor, size=size, align_corners=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware.__init__": {"param": {"self": {"ConvolutionAware": [[183, "    def __init__(self, eps_std=0.05, seed=None, init=False):"]]}, "seed": {"None": [[183, "    def __init__(self, eps_std=0.05, seed=None, init=False):"]]}, "init": {"bool": [[183, "    def __init__(self, eps_std=0.05, seed=None, init=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware": {"func": {"__call__": {"(ConvolutionAware, ?, None) -> None": [[190, "    def __call__(self, shape, dtype=None):"]]}, "__init__": {"? -> ?": [[183, "    def __init__(self, eps_std=0.05, seed=None, init=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR._resize_nearest_neighbour": {"param": {"self": {"ICNR": [[78, "    def _resize_nearest_neighbour(self, input_tensor, size):"]]}, "size": {"(int, int)": [[78, "    def _resize_nearest_neighbour(self, input_tensor, size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR": {"func": {"__call__": {"(ICNR, ?, str) -> None": [[48, "    def __call__(self, shape, dtype=\"float32\"):"]]}, "get_config": {"ICNR -> dict": [[136, "    def get_config(self):"]]}, "_space_to_depth": {"(ICNR, ?) -> None / (ICNR, None) -> None": [[107, "    def _space_to_depth(self, input_tensor):"]]}, "_resize_nearest_neighbour": {"(ICNR, ?, ?) -> None / (ICNR, ?, (int, int)) -> None": [[78, "    def _resize_nearest_neighbour(self, input_tensor, size):"]]}, "__init__": {"? -> ?": [[44, "    def __init__(self, initializer, scale=2):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR._resize_nearest_neighb": {"param": {"input_tensor": {"?": [[78, "    def _resize_nearest_neighbour(self, input_tensor, size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware._scale_": {"param": {"filters": {"?": [[277, "    def _scale_filters(filters, variance):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAwa": {"func": {"_symmetrize": {"? -> None": [[269, "    def _symmetrize(var_a):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR._space_to_dept": {"var": {"reshaped": {"?": [[127, "            reshaped = K.reshape(input_tensor,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware.__c": {"var": {"kernel_fourier_shape": {"?": [[248, "        kernel_fourier_shape = correct_fft(np.zeros(kernel_shape)).shape"]]}, "kernel_shape": {"(?, ?, ?)": [[241, "            kernel_shape = (var_x, var_y, var_z)"]], "(?, ?)": [[233, "            kernel_shape = (row, column)"]], "?": [[225, "            kernel_shape = (row,)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers": {"var": {"logger": {"?": [[16, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}, "name": {"?": [[298, "for name, obj in inspect.getmembers(sys.modules[__name__]):"]]}}, "class": {"ConvolutionAware": {"<ConvolutionAware>": [[151, "class ConvolutionAware(initializers.Initializer):"]]}, "ICNR": {"<ICNR>": [[19, "class ICNR(initializers.Initializer):  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR.__call__": {"var": {"shape": {"list": [[63, "        shape = list(shape)"]]}}, "param": {"dtype": {"str": [[48, "    def __call__(self, shape, dtype=\"float32\"):"]]}, "self": {"ICNR": [[48, "    def __call__(self, shape, dtype=\"float32\"):"]]}, "shape": {"?": [[48, "    def __call__(self, shape, dtype=\"float32\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware._create_basi": {"param": {"self": {"ConvolutionAware": [[257, "    def _create_basis(self, filters_size, filters, size, dtype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR.__call": {"var": {"new_shape": {"[int]": [[66, "        new_shape = shape[:3] + [shape[3] // (self.scale ** 2)]"]]}, "var_x": {"None": [[71, "        var_x = self._resize_nearest_neighbour(var_x,"], [73, "        var_x = self._space_to_depth(var_x)"]], "?": [[69, "        var_x = self.initializer(new_shape, dtype)"], [70, "        var_x = K.permute_dimensions(var_x, [2, 0, 1, 3])"], [74, "        var_x = K.permute_dimensions(var_x, [1, 2, 0, 3])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware.get_config": {"param": {"self": {"ConvolutionAware": [[283, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR.get_": {"var": {"config": {"dict": [[144, "        config = {\"scale\": self.scale,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ICNR.get": {"var": {"base_config": {"?": [[147, "        base_config = super(ICNR, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.initializers.ConvolutionAware.__call__": {"var": {"basis": {"None": [[250, "        basis = self._create_basis(filters_size, stack_size, np.prod(kernel_fourier_shape), dtype)"]], "?": [[251, "        basis = basis.reshape((filters_size, stack_size,) + kernel_fourier_shape)"]]}, "dtype": {"None": [[205, "        dtype = K.floatx() if dtype is None else dtype"]]}, "rank": {"int": [[214, "        rank = len(shape)"]]}, "init": {"None": [[254, "        init = self._scale_filters(init, variance)"]], "?": [[253, "        init = correct_ifft(basis, kernel_shape) + randoms"]]}, "randoms": {"?": [[252, "        randoms = np.random.normal(0, self.eps_std, basis.shape[:-2] + kernel_shape)"]]}, "variance": {"int": [[219, "        variance = 2 / fan_in"]]}, "row": {"?": [[222, "            row, stack_size, filters_size = shape"], [230, "            row, column, stack_size, filters_size = shape"]]}}, "param": {"dtype": {"None": [[190, "    def __call__(self, shape, dtype=None):"]]}, "self": {"ConvolutionAware": [[190, "    def __call__(self, shape, dtype=None):"]]}, "shape": {"?": [[190, "    def __call__(self, shape, dtype=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/ffmpeg_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for encoding converted frames to video.\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/optimizers.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam._update_1": {"var": {"vs": {"[?]": [[141, "        vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]"]]}, "vhats": {"[?]": [[143, "            vhats = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]"], [145, "            vhats = [K.zeros(1) for _ in params]"]]}, "ms": {"[?]": [[140, "        ms = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]"]]}}, "param": {"p": {"?": [[141, "        vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]"]]}, "self": {"Adam": [[137, "    def _update_1(self, params):"]]}, "vs": {"?": [[141, "        vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]"]]}, "params": {"?": [[137, "    def _update_1(self, params):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam.__init__": {"var": {"epsilon": {"None": [[52, "                 epsilon=None,"]]}, "amsgrad": {"bool": [[54, "                 amsgrad=False,"]]}, "lr": {"float": [[49, "                 lr=0.001,"]]}, "decay": {"float": [[53, "                 decay=0.,"]]}}, "param": {"epsilon": {"None": [[56, "                 **kwargs):"]]}, "self": {"Adam": [[56, "                 **kwargs):"]]}, "lr": {"float": [[56, "                 **kwargs):"]]}, "amsgrad": {"bool": [[56, "                 **kwargs):"]]}, "decay": {"float": [[56, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam._set": {"param": {"cpu_mode": {"bool": [[61, "    def _set_cpu_mode(cpu_mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam.__init": {"var": {"cpu_mode": {"bool": [[55, "                 cpu_mode=False,"]]}}, "param": {"cpu_mode": {"bool": [[56, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Ada": {"func": {"_set_cpu_mode": {"? -> bool / bool -> bool": [[61, "    def _set_cpu_mode(cpu_mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam.get_updates": {"var": {"v_t": {"float": [[118, "            v_t = (self.beta_2 * v) + (1. - self.beta_2) * K.square(g)"]]}, "new_p": {"float": [[128, "            new_p = p_t"]], "?": [[132, "                new_p = p.constraint(new_p)"]]}, "lr_t": {"float": [[104, "        lr_t = lr * (K.sqrt(1. - K.pow(self.beta_2, t)) /"]]}, "lr": {"float": [[100, "            lr = lr * (1. / (1. + self.decay * K.cast(self.iterations,"]], "?": [[98, "        lr = self.lr"]]}, "t": {"int": [[103, "        t = K.cast(self.iterations, K.floatx()) + 1"]]}, "p_t": {"float": [[121, "                p_t = p - lr_t * m_t / (K.sqrt(vhat_t) + self.epsilon)"], [124, "                p_t = p - lr_t * m_t / (K.sqrt(v_t) + self.epsilon)"]]}, "vhat_t": {"?": [[120, "                vhat_t = K.maximum(vhat, v_t)"]]}, "m_t": {"float": [[117, "            m_t = (self.beta_1 * m) + (1. - self.beta_1) * g"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam.__ini": {"var": {"beta_1": {"float": [[50, "                 beta_1=0.9,"]]}, "beta_2": {"float": [[51, "                 beta_2=0.999,"]]}}, "param": {"beta_1": {"float": [[56, "                 **kwargs):"]]}, "beta_2": {"float": [[56, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"Adam": {"<Adam>": [[14, "class Adam(KerasAdam):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam": {"func": {"get_updates": {"(Adam, ?, ?) -> [?]": [[79, "    def get_updates(self, loss, params):"]]}, "_update_1": {"(Adam, ?) -> ([?], [?], [?])": [[137, "    def _update_1(self, params):"]]}, "__init__": {"? -> ?": [[48, "    def __init__(self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam.get_updat": {"param": {"self": {"Adam": [[79, "    def get_updates(self, loss, params):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam._set_cpu_mod": {"var": {"retval": {"bool": [[75, "        retval = False if K.backend() != \"tensorflow\" else cpu_mode"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.optimizers.Adam.get_update": {"var": {"ms": {"[?]": [[110, "                ms, vs, vhats = self._update_1(params)"], [112, "            ms, vs, vhats = self._update_1(params)"]]}, "grads": {"?": [[95, "        grads = self.get_gradients(loss, params)"]]}}, "param": {"loss": {"?": [[79, "    def get_updates(self, loss, params):"]]}, "params": {"?": [[79, "    def get_updates(self, loss, params):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/command.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ActionFrame.add_action_button": {"var": {"var_value": {"str": [[168, "        var_value = \"{},{}\".format(category, self.command)"]]}, "actframe": {"?": [[164, "        actframe = ttk.Frame(self)"]]}, "tk_vars": {"?": [[167, "        tk_vars = get_config().tk_vars"]]}}, "param": {"category": {"?": [[161, "    def add_action_button(self, category, actionbtns):"]]}, "self": {"ActionFrame": [[161, "    def add_action_button(self, category, actionbtns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandTab.__init__": {"param": {"category": {"?": [[111, "    def __init__(self, parent, category, command):"]]}, "self": {"CommandTab": [[111, "    def __init__(self, parent, category, command):"]]}, "command": {"?": [[111, "    def __init__(self, parent, category, command):"]]}, "parent": {"{CommandNotebook | ToolsNotebook}": [[111, "    def __init__(self, parent, category, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook._set_modified_": {"var": {"tkvars": {"dict": [[86, "        tkvars = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.change_action_butto": {"var": {"btnact": {"?": [[70, "            btnact = action"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.build_tab": {"var": {"cmdlist": {"?": [[56, "            cmdlist = cli_opts.commands[category]"]]}, "cli_opts": {"?": [[53, "        cli_opts = get_config().cli_opts"]]}}, "param": {"self": {"CommandNotebook": [[50, "    def build_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook._set_modified_vars": {"var": {"var": {"?": [[90, "                    var = tk.BooleanVar()"], [94, "            var = tk.BooleanVar()"]]}, "ttab": {"?": [[89, "                for ttab in self.tools_tab_names:"]]}, "tab": {"?": [[87, "        for tab in self.tab_names:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.set_running_task_trace": {"var": {"tk_vars": {"?": [[47, "        tk_vars = get_config().tk_vars"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ToolsNotebook.__init__": {"param": {"self": {"ToolsNotebook": [[103, "    def __init__(self, parent):"]]}, "parent": {"CommandNotebook": [[103, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ActionFrame.__init__": {"param": {"self": {"ActionFrame": [[149, "    def __init__(self, parent):"]]}, "parent": {"CommandTab": [[149, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.__init__": {"param": {"self": {"CommandNotebook": [[18, "    def __init__(self, parent):"]]}, "parent": {"?": [[18, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandTab.build_tab": {"var": {"cp_opts": {"[?]": [[127, "        cp_opts = [val[\"cpanel_option\"] for key, val in options.items() if key != \"helptext\"]"]]}, "options": {"?": [[126, "        options = get_config().cli_opts.opts[self.command]"]]}}, "param": {"self": {"CommandTab": [[123, "    def build_tab(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.build_tabs": {"var": {"category": {"?": [[54, "        for category in cli_opts.categories:"]]}, "commandtab": {"CommandTab": [[59, "                commandtab = CommandTab(book, category, command)"]]}, "book": {"{CommandNotebook | ToolsNotebook}": [[55, "            book = self.tools_notebook if category == \"tools\" else self"]]}, "command": {"?": [[57, "            for command in cmdlist:"]]}, "title": {"?": [[58, "                title = command.title()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.change_action_button": {"var": {"ttl": {"str": [[72, "                ttl = \" Stop\""], [76, "                ttl = \" {}\".format(cmd.title())"]]}, "cmd": {"?": [[69, "        for cmd, action in self.actionbtns.items():"]]}, "hlp": {"str": [[74, "                hlp = \"Exit the running process\""], [78, "                hlp = \"Run the {} script\".format(cmd.title())"]]}, "img": {"?": [[73, "                img = get_images().icons[\"stop\"]"], [77, "                img = get_images().icons[\"start\"]"]]}, "tk_vars": {"?": [[67, "        tk_vars = get_config().tk_vars"]]}}, "param": {"self": {"CommandNotebook": [[64, "    def change_action_button(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook": {"func": {"build_tabs": {"CommandNotebook -> None": [[50, "    def build_tabs(self):"]]}, "change_action_button": {"CommandNotebook -> None": [[64, "    def change_action_button(self, *args):"]]}, "tab_names": {"CommandNotebook -> dict": [[32, "    def tab_names(self):"]]}, "tools_tab_names": {"CommandNotebook -> dict": [[38, "    def tools_tab_names(self):"]]}, "_set_modified_vars": {"CommandNotebook -> dict": [[83, "    def _set_modified_vars(self):"]]}, "__init__": {"? -> ?": [[18, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNoteboo": {"func": {"set_running_task_trace": {"CommandNotebook -> None": [[43, "    def set_running_task_trace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook._set_modified_var": {"param": {"self": {"CommandNotebook": [[83, "    def _set_modified_vars(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandT": {"func": {"build_tab": {"CommandTab -> None": [[123, "    def build_tab(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ActionFrame": {"func": {"add_action_button": {"(ActionFrame, ?, ?) -> None / (ActionFrame, ?, dict) -> None": [[161, "    def add_action_button(self, category, actionbtns):"]]}, "__init__": {"? -> ?": [[149, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandTab.add_frame_separator": {"var": {"sep": {"?": [[141, "        sep = ttk.Frame(self, height=2, relief=tk.RIDGE)"]]}}, "param": {"self": {"CommandTab": [[138, "    def add_frame_separator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ToolsNotebook": {"func": {"__init__": {"? -> ?": [[103, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command": {"var": {"logger": {"?": [[12, "logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}, "class": {"ActionFrame": {"<ActionFrame>": [[146, "class ActionFrame(ttk.Frame):  # pylint:disable=too-many-ancestors"]]}, "ToolsNotebook": {"<ToolsNotebook>": [[101, "class ToolsNotebook(ttk.Notebook):  # pylint:disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.tools_tab_nam": {"param": {"self": {"CommandNotebook": [[38, "    def tools_tab_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.c": {"class": {"CommandTab": {"<CommandTab>": [[108, "class CommandTab(ttk.Frame):  # pylint:disable=too-many-ancestors"]]}, "CommandNotebook": {"<CommandNotebook>": [[15, "class CommandNotebook(ttk.Notebook):  # pylint:disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.set_running_task_trac": {"param": {"self": {"CommandNotebook": [[43, "    def set_running_task_trace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ActionFrame.add_action_bu": {"param": {"actionbtns": {"dict": [[161, "    def add_action_button(self, category, actionbtns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandNotebook.tab_nam": {"param": {"self": {"CommandNotebook": [[32, "    def tab_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.CommandTab": {"func": {"add_frame_separator": {"CommandTab -> None": [[138, "    def add_frame_separator(self):"]]}, "__init__": {"? -> ?": [[111, "    def __init__(self, parent, category, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.command.ActionFrame.add_action_butto": {"var": {"btngen": {"?": [[170, "        btngen = ttk.Button(actframe,"]]}, "btnact": {"?": [[181, "        btnact = ttk.Button(actframe,"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/ffmpeg.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writ": {"func": {"save_from_cache": {"Writer -> None": [[126, "    def save_from_cache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.set_frame_ord": {"var": {"retval": {"list": [[87, "            retval = list(range(1, total_count + 1))"], [89, "            retval = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.video_tmp_file": {"var": {"path": {"str": [[39, "        path, filename = os.path.split(self.video_file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Write": {"func": {"output_params": {"Writer -> [str]": [[61, "    def output_params(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.W": {"func": {"get_writer": {"Writer -> None": [[95, "    def get_writer(self):"]]}, "write": {"(Writer, ?, ?) -> None": [[105, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.output_params": {"var": {"codec": {"?": [[63, "        codec = self.config[\"codec\"]"]]}, "tune": {"?": [[64, "        tune = self.config[\"tune\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.set_frame_orde": {"var": {"rng": {"?": [[90, "            for rng in self.frame_ranges:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.output_param": {"var": {"output_args": {"[str]": [[66, "        output_args = [\"-vf\", \"scale={}\".format(self.output_dimensions)]"]]}}, "param": {"self": {"Writer": [[61, "    def output_params(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.writ": {"param": {"self": {"Writer": [[105, "    def write(self, filename, image):"]]}, "image": {"?": [[105, "    def write(self, filename, image):"]]}, "filename": {"?": [[105, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.video_fps": {"var": {"retval": {"?": [[55, "        retval = reader.get_meta_data()[\"fps\"]"]]}, "reader": {"?": [[54, "        reader = imageio.get_reader(self.source_video, \"ffmpeg\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.set_frame_order": {"param": {"total_count": {"?": [[84, "    def set_frame_order(self, total_count):"]]}, "self": {"Writer": [[84, "    def set_frame_order(self, total_count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.valid_tun": {"param": {"self": {"Writer": [[45, "    def valid_tune(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.video_tmp_fi": {"var": {"retval": {"str": [[40, "        retval = os.path.join(path, \"__tmp_{}\".format(filename))"]]}}, "param": {"self": {"Writer": [[37, "    def video_tmp_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.__ini": {"param": {"total_count": {"?": [[16, "    def __init__(self, output_folder, total_count, frame_ranges, source_video, **kwargs):"]]}, "output_folder": {"?": [[16, "    def __init__(self, output_folder, total_count, frame_ranges, source_video, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.set_dimension": {"param": {"frame_dims": {"?": [[116, "    def set_dimensions(self, frame_dims):"]]}, "self": {"Writer": [[116, "    def set_dimensions(self, frame_dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Wri": {"func": {"set_frame_order": {"(Writer, ?) -> list": [[84, "    def set_frame_order(self, total_count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.mux_audio": {"var": {"inputs": {"?": [[160, "        inputs = OrderedDict([(self.video_tmp_file, None), (self.source_video, None)])"]]}, "ffm": {"?": [[162, "        ffm = FFmpeg(executable=exe,"]]}, "exe": {"?": [[159, "        exe = im_ffm.get_ffmpeg_exe()"]]}, "attempt": {"int": [[170, "        for attempt in range(attempts):"]]}, "attempts": {"int": [[169, "        attempts = 5"]]}}, "param": {"self": {"Writer": [[143, "    def mux_audio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.clo": {"param": {"self": {"Writer": [[138, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.video_fp": {"param": {"self": {"Writer": [[52, "    def video_fps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.__init": {"param": {"source_video": {"?": [[16, "    def __init__(self, output_folder, total_count, frame_ranges, source_video, **kwargs):"]]}, "frame_ranges": {"?": [[16, "    def __init__(self, output_folder, total_count, frame_ranges, source_video, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.get_writer": {"param": {"self": {"Writer": [[95, "    def get_writer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer": {"func": {"valid_tune": {"Writer -> dict": [[45, "    def valid_tune(self):"]]}, "video_tmp_file": {"Writer -> str": [[37, "    def video_tmp_file(self):"]]}, "set_dimensions": {"(Writer, ?) -> None": [[116, "    def set_dimensions(self, frame_dims):"]]}, "video_file": {"Writer -> str": [[27, "    def video_file(self):"]]}, "mux_audio": {"Writer -> None": [[143, "    def mux_audio(self):"]]}, "video_fps": {"Writer -> None": [[52, "    def video_fps(self):"]]}, "close": {"Writer -> None": [[138, "    def close(self):"]]}, "__init__": {"? -> ?": [[16, "    def __init__(self, output_folder, total_count, frame_ranges, source_video, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.save_from_cach": {"var": {"save_no": {"None": [[132, "            save_no = self.frame_order.pop(0)"]]}, "save_image": {"?": [[133, "            save_image = self.cache.pop(save_no)"]]}}, "param": {"self": {"Writer": [[126, "    def save_from_cache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.__init__": {"param": {"self": {"Writer": [[16, "    def __init__(self, output_folder, total_count, frame_ranges, source_video, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.mux_audi": {"var": {"outputs": {"dict": [[161, "        outputs = {self.video_file: \"-map 0:v:0 -map 1:a:0 -c: copy\"}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.video_fi": {"var": {"retval": {"str": [[32, "        retval = os.path.join(self.output_folder, filename)"]]}}, "param": {"self": {"Writer": [[27, "    def video_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg": {"class": {"Writer": {"<Writer>": [[14, "class Writer(Output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.ffmpeg.Writer.video_": {"var": {"filename": {"str": [[29, "        filename = os.path.basename(self.source_video)"], [30, "        filename = os.path.splitext(filename)[0]"], [31, "        filename = \"{}_converted.{}\".format(filename, self.config[\"container\"])"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/serializer.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.get_serializ": {"var": {"retval": {"<_JSONSerializer>": [[302, "        retval = _JSONSerializer"]], "_NPYSerializer": [[290, "        retval = _NPYSerializer()"]], "_PickleSerializer": [[296, "        retval = _PickleSerializer()"]], "_CompressedSerializer": [[292, "        retval = _CompressedSerializer()"]], "_YAMLSerializer": [[298, "        retval = _YAMLSerializer()"]], "_JSONSerializer": [[294, "        retval = _JSONSerializer()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerializer._marshal": {"param": {"data": {"?": [[207, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerializer._unmarsha": {"param": {"cls": {"<_YAMLSerializer>": [[196, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._unmars": {"var": {"b_handler": {"?": [[246, "        b_handler = BytesIO(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerializer": {"func": {"__init__": {"? -> ?": [[187, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializ": {"var": {"logger": {"?": [[23, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerializer._unmarshal": {"param": {"data": {"?": [[211, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"class": {"_CompressedSerializer": {"<_CompressedSerializer>": [[254, "class _CompressedSerializer(Serializer):"]]}}, "func": {"get_serializer": {"? -> {<_JSONSerializer> | _CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer} / str -> {<_JSONSerializer> | _CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}": [[272, "def get_serializer(serializer):"]]}, "get_serializer_from_filename": {"? -> {_CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer} / str -> {_CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}": [[309, "def get_serializer_from_filename(filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerialize": {"func": {"_unmarshal": {"(<_PickleSerializer>, ?) -> ?": [[226, "    def _unmarshal(cls, data):"]]}, "_marshal": {"(<_PickleSerializer>, ?) -> ?": [[222, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._unmarsha": {"param": {"cls": {"<Serializer>": [[180, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._marsha": {"param": {"self": {"_NPYSerializer": [[237, "    def _marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._marsha": {"param": {"cls": {"<Serializer>": [[175, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerialize": {"func": {"_unmarshal": {"(<_JSONSerializer>, ?) -> ?": [[211, "    def _unmarshal(cls, data):"]]}, "_marshal": {"(<_JSONSerializer>, ?) -> ?": [[207, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._marshal": {"param": {"data": {"?": [[175, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.file_extension": {"param": {"self": {"Serializer": [[48, "    def file_extension(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer": {"var": {"yaml": {"None": [[21, "    yaml = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.get_": {"param": {"serializer": {"str": [[272, "def get_serializer(serializer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.marsha": {"param": {"self": {"Serializer": [[117, "    def marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerializer._marsha": {"param": {"cls": {"<_JSONSerializer>": [[207, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerializer.__init__": {"param": {"self": {"_CompressedSerializer": [[256, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.marsh": {"var": {"retval": {"None": [[138, "            retval = self._marshal(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.load": {"var": {"msg": {"str": [[112, "            msg = \"Error reading from '{}': {}\".format(filename, err.strerror)"]]}, "retval": {"?": [[109, "                retval = self.unmarshal(data)"]]}}, "param": {"self": {"Serializer": [[85, "    def load(self, filename):"]]}, "filename": {"?": [[85, "    def load(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._check_extension": {"var": {"retval": {"str": [[81, "        retval = filename if extension else \"{}.{}\".format(filename, self.file_extension)"]]}}, "param": {"self": {"Serializer": [[78, "    def _check_extension(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerializer._marsha": {"param": {"self": {"_CompressedSerializer": [[261, "    def _marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._check_": {"var": {"extension": {"str": [[80, "        extension = os.path.splitext(filename)[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerializer._unmarshal": {"var": {"data": {"str": [[268, "        data = zlib.decompress(data)"]]}}, "param": {"data": {"?": [[266, "    def _unmarshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.unmarsha": {"param": {"self": {"Serializer": [[145, "    def unmarshal(self, serialized_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._unmarshal": {"param": {"data": {"str": [[180, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerializer._marshal": {"var": {"data": {"?": [[263, "        data = self._child._marshal(data)  # pylint: disable=protected-access"]]}}, "param": {"data": {"?": [[261, "    def _marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._unmarshal": {"param": {"data": {"?": [[244, "    def _unmarshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer": {"func": {"load": {"(Serializer, ?) -> ?": [[85, "    def load(self, filename):"]]}, "file_extension": {"Serializer -> None": [[48, "    def file_extension(self):"]]}, "save": {"(Serializer, ?, ?) -> ?": [[52, "    def save(self, filename, data):"]]}, "__init__": {"? -> ?": [[42, "    def __init__(self):"]]}, "_check_extension": {"(Serializer, ?) -> str": [[78, "    def _check_extension(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.__init__": {"param": {"self": {"Serializer": [[42, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.get_serializer_from_": {"param": {"filename": {"str": [[309, "def get_serializer_from_filename(filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerialize": {"func": {"_unmarshal": {"(<_YAMLSerializer>, ?) -> ?": [[196, "    def _unmarshal(cls, data):"]]}, "_marshal": {"(<_YAMLSerializer>, ?) -> ?": [[192, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer": {"func": {"__init__": {"? -> ?": [[232, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerializer._marsha": {"param": {"cls": {"<_YAMLSerializer>": [[192, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.marshal": {"var": {"msg": {"str": [[140, "            msg = \"Error serializing data for type {}: {}\".format(type(data), str(err))"]]}}, "param": {"data": {"?": [[117, "    def marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.unmarshal": {"var": {"msg": {"str": [[168, "            msg = \"Error unserializing data for type {}: {}\".format(type(serialized_data),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerializer._unmarsha": {"param": {"cls": {"<_PickleSerializer>": [[226, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerializer": {"func": {"__init__": {"? -> ?": [[202, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._mars": {"var": {"b_handler": {"?": [[239, "        b_handler = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._unmarsha": {"param": {"self": {"_NPYSerializer": [[244, "    def _unmarshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerializer.__init__": {"param": {"self": {"_JSONSerializer": [[202, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.lo": {"var": {"data": {"str": [[107, "                data = s_file.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer.__init__": {"param": {"self": {"_NPYSerializer": [[232, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerializer._marsha": {"param": {"cls": {"<_PickleSerializer>": [[222, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serialize": {"func": {"unmarshal": {"(Serializer, ?) -> ? / (Serializer, str) -> ?": [[145, "    def unmarshal(self, serialized_data):"]]}, "marshal": {"(Serializer, ?) -> ?": [[117, "    def marshal(self, data):"]]}, "_unmarshal": {"(<Serializer>, str) -> None / (<Serializer>, ?) -> None": [[180, "    def _unmarshal(cls, data):"]]}, "_marshal": {"(<Serializer>, ?) -> None": [[175, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._marshal": {"param": {"data": {"?": [[237, "    def _marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerializer._unmarshal": {"param": {"data": {"?": [[196, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.s": {"class": {"_NPYSerializer": {"<_NPYSerializer>": [[230, "class _NPYSerializer(Serializer):"]]}, "_YAMLSerializer": {"<_YAMLSerializer>": [[185, "class _YAMLSerializer(Serializer):"]]}, "_JSONSerializer": {"<_JSONSerializer>": [[200, "class _JSONSerializer(Serializer):"]]}, "_PickleSerializer": {"<_PickleSerializer>": [[215, "class _PickleSerializer(Serializer):"]]}, "Serializer": {"<Serializer>": [[26, "class Serializer():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerialize": {"func": {"_unmarshal": {"(_NPYSerializer, ?) -> None": [[244, "    def _unmarshal(self, data):"]]}, "_marshal": {"(_NPYSerializer, ?) -> None": [[237, "    def _marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.unmarsh": {"var": {"retval": {"None": [[166, "            retval = self._unmarshal(serialized_data)"]]}}, "param": {"serialized_data": {"str": [[145, "    def unmarshal(self, serialized_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._JSONSerializer._unmarsha": {"param": {"cls": {"<_JSONSerializer>": [[211, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerializer": {"func": {"__init__": {"? -> ?": [[256, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer._check_extensio": {"param": {"filename": {"?": [[78, "    def _check_extension(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerializer": {"func": {"__init__": {"? -> ?": [[217, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerializer.__init__": {"param": {"self": {"_YAMLSerializer": [[187, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._YAMLSerializer._marshal": {"param": {"data": {"?": [[192, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerializer._marshal": {"param": {"data": {"?": [[222, "    def _marshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.get_serializer_from_filenam": {"var": {"retval": {"_NPYSerializer": [[336, "        retval = _NPYSerializer()"]], "_YAMLSerializer": [[340, "        retval = _YAMLSerializer()"]], "_JSONSerializer": [[332, "        retval = _JSONSerializer()"], [344, "        retval = _JSONSerializer()"], [347, "        retval = _JSONSerializer()"]], "_PickleSerializer": [[334, "        retval = _PickleSerializer()"]], "_CompressedSerializer": [[338, "        retval = _CompressedSerializer()"]]}, "extension": {"str": [[328, "    extension = os.path.splitext(filename)[1].lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.sav": {"var": {"filename": {"str": [[70, "        filename = self._check_extension(filename)"]]}}, "param": {"self": {"Serializer": [[52, "    def save(self, filename, data):"]]}, "filename": {"?": [[52, "    def save(self, filename, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._NPYSerializer._unmarsh": {"var": {"retval": {"?": [[247, "        retval = np.load(b_handler)"], [250, "            retval = retval[()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerializer._unmarsha": {"param": {"self": {"_CompressedSerializer": [[266, "    def _unmarshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer.Serializer.save": {"var": {"msg": {"str": [[75, "            msg = \"Error writing to '{}': {}\".format(filename, err.strerror)"]]}}, "param": {"data": {"?": [[52, "    def save(self, filename, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerializer._unmarshal": {"param": {"data": {"?": [[226, "    def _unmarshal(cls, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._CompressedSerialize": {"func": {"_unmarshal": {"(_CompressedSerializer, ?) -> None": [[266, "    def _unmarshal(self, data):"]]}, "_marshal": {"(_CompressedSerializer, ?) -> str": [[261, "    def _marshal(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.serializer._PickleSerializer.__init__": {"param": {"self": {"_PickleSerializer": [[217, "    def __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/faces_detect.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._func_mapping": {"param": {"self": {"BlurMask": [[797, "    def _func_mapping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._sigma": {"param": {"self": {"BlurMask": [[792, "    def _sigma(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask": {"func": {"affine_matrix": {"Mask -> None": [[562, "    def affine_matrix(self):"]]}, "_attr_name": {"str -> str / ? -> str": [[710, "    def _attr_name(dict_key):"]]}, "from_dict": {"(Mask, ?) -> None": [[696, "    def from_dict(self, mask_dict):"]]}, "original_roi": {"Mask -> None": [[549, "    def original_roi(self):"]]}, "add": {"(Mask, ?, ?, ?) -> None": [[596, "    def add(self, mask, affine_matrix, interpolator):"]]}, "interpolator": {"Mask -> None": [[567, "    def interpolator(self):"]]}, "to_dict": {"Mask -> dict": [[681, "    def to_dict(self):"]]}, "_adjust_affine_matrix": {"(Mask, ?, ?) -> None": [[658, "    def _adjust_affine_matrix(self, mask_size, affine_matrix):"]]}, "set_blur_and_threshold": {"(Mask, int, str, int, int) -> None": [[632, "    def set_blur_and_threshold(self,"]]}, "__init__": {"? -> ?": [[517, "    def __init__(self, storage_size=128):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_feed_": {"var": {"face": {"None": [[311, "            face = AlignerExtract().transform(image,"]], "?": [[309, "            face = cv2.resize(image, (size, size), interpolation=interp)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.bottom": {"param": {"self": {"DetectedFace": [[112, "    def bottom(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.lo": {"var": {"is_aligned_face": {"bool": [[277, "                       is_aligned_face=False):"]]}}, "param": {"is_aligned_face": {"bool": [[277, "                       is_aligned_face=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._get_kernel_size": {"var": {"radius": {"int": [[838, "        radius = round(max(1., mask_diameter * kernel / 100.))"]]}}, "param": {"is_ratio": {"bool": [[814, "    def _get_kernel_size(self, kernel, is_ratio):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_aligned": {"var": {"face": {"None": [[261, "            face = AlignerExtract().transform(image, self.aligned[\"matrix\"], size, padding)"]]}}, "param": {"self": {"DetectedFace": [[219, "    def load_aligned(self, image, size=256, dtype=None, force=False):"]]}, "force": {"bool": [[219, "    def load_aligned(self, image, size=256, dtype=None, force=False):"]]}, "image": {"(?, ?)": [[219, "    def load_aligned(self, image, size=256, dtype=None, force=False):"]]}, "size": {"int": [[219, "    def load_aligned(self, image, size=256, dtype=None, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask.__ini": {"param": {"blur_type": {"?": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._kwarg_requirement": {"param": {"self": {"BlurMask": [[803, "    def _kwarg_requirements(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._multipass_": {"var": {"factor": {"dict": [[788, "        factor = dict(gaussian=0.8, normalized=0.5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask.__in": {"param": {"is_ratio": {"bool": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_reference_f": {"param": {"coverage_ratio": {"float": [[320, "    def load_reference_face(self, image, size=64, coverage_ratio=0.625, dtype=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.from_dict": {"var": {"key": {"str": [[705, "        for key in (\"mask\", \"affine_matrix\", \"interpolator\", \"stored_size\"):"]]}}, "param": {"self": {"Mask": [[696, "    def from_dict(self, mask_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.add": {"param": {"self": {"Mask": [[596, "    def add(self, mask, affine_matrix, interpolator):"]]}, "interpolator": {"?": [[596, "    def add(self, mask, affine_matrix, interpolator):"]]}, "mask": {"?": [[596, "    def add(self, mask, affine_matrix, interpolator):"]]}, "affine_matrix": {"?": [[596, "    def add(self, mask, affine_matrix, interpolator):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFac": {"func": {"feed_interpolators": {"DetectedFace -> (?, ?)": [[444, "    def feed_interpolators(self):"]]}, "feed_matrix": {"DetectedFace -> int": [[432, "    def feed_matrix(self):"]]}, "_adjusted_matrix": {"DetectedFace -> int": [[390, "    def _adjusted_matrix(self):"]]}, "to_alignment": {"DetectedFace -> dict": [[149, "    def to_alignment(self):"]]}, "aligned_landmarks": {"DetectedFace -> None": [[371, "    def aligned_landmarks(self):"]]}, "feed_landmarks": {"DetectedFace -> None": [[418, "    def feed_landmarks(self):"]]}, "adjusted_interpolators": {"DetectedFace -> (?, ?)": [[402, "    def adjusted_interpolators(self):"]]}, "from_alignment": {"(DetectedFace, ?, None) -> None": [[170, "    def from_alignment(self, alignment, image=None):"]]}, "load_aligned": {"(DetectedFace, ?, int, None, bool) -> None / (DetectedFace, None, int, None, bool) -> None / (DetectedFace, (?, ?), int, None, bool) -> None": [[219, "    def load_aligned(self, image, size=256, dtype=None, force=False):"]]}, "left": {"DetectedFace -> None": [[97, "    def left(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.from_": {"param": {"alignment": {"?": [[170, "    def from_alignment(self, alignment, image=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_feed_f": {"param": {"coverage_ratio": {"float": [[277, "                       is_aligned_face=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.set_blur_and_": {"param": {"threshold": {"int": [[633, "                               blur_kernel=0, blur_type=\"gaussian\", blur_passes=1, threshold=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.set_blur_and_threshold": {"var": {"blur_kernel": {"int": [[633, "                               blur_kernel=0, blur_type=\"gaussian\", blur_passes=1, threshold=0):"]]}}, "param": {"self": {"Mask": [[633, "                               blur_kernel=0, blur_type=\"gaussian\", blur_passes=1, threshold=0):"]]}, "blur_passes": {"int": [[633, "                               blur_kernel=0, blur_type=\"gaussian\", blur_passes=1, threshold=0):"]]}, "blur_kernel": {"int": [[633, "                               blur_kernel=0, blur_type=\"gaussian\", blur_passes=1, threshold=0):"]]}, "blur_type": {"str": [[633, "                               blur_kernel=0, blur_type=\"gaussian\", blur_passes=1, threshold=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.reference_landmark": {"param": {"self": {"DetectedFace": [[462, "    def reference_landmarks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace._adjusted_matrix": {"var": {"mat": {"int": [[395, "        mat = AlignerExtract().transform_matrix(self.aligned[\"matrix\"],"]]}}, "param": {"self": {"DetectedFace": [[390, "    def _adjusted_matrix(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.original_r": {"var": {"points": {"?": [[552, "        points = np.array([[0, 0],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace._padding_from_coverage": {"var": {"padding": {"int": [[272, "        padding = round((size * adjusted_ratio) / 2)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.__init__": {"param": {"self": {"Mask": [[517, "    def __init__(self, storage_size=128):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.original_ro": {"var": {"matrix": {"?": [[556, "        matrix = cv2.invertAffineTransform(self._affine_matrix)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_": {"class": {"DetectedFace": {"<DetectedFace>": [[15, "class DetectedFace():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.M": {"var": {"mask": {"BlurMask -> None": [[541, "            mask = BlurMask(self._blur[\"type\"],"]], "?": [[534, "        mask = np.frombuffer(decompress(self._mask), dtype=\"uint8\").reshape(dims)"], [536, "            mask = mask.copy()"]]}}, "func": {"mask": {"Mask -> BlurMask -> None": [[530, "    def mask(self):"]]}, "get_full_frame_mask": {"(Mask, ?, ?) -> None": [[571, "    def get_full_frame_mask(self, width, height):"]]}, "replace_mask": {"(Mask, ?) -> None": [[618, "    def replace_mask(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedF": {"func": {"_image_to_face": {"(DetectedFace, ?) -> None / (DetectedFace, None) -> None": [[212, "    def _image_to_face(self, image):"]]}, "load_feed_face": {"(DetectedFace, ?, int, float, None, bool) -> None": [[276, "    def load_feed_face(self, image, size=64, coverage_ratio=0.625, dtype=None,"]]}, "_padding_from_coverage": {"(DetectedFace, int, float) -> int / (DetectedFace, ?, ?) -> int": [[268, "    def _padding_from_coverage(self, size, coverage_ratio):"]]}, "feed_face": {"DetectedFace -> None": [[410, "    def feed_face(self):"]]}, "reference_interpolators": {"DetectedFace -> (?, ?)": [[489, "    def reference_interpolators(self):"]]}, "reference_matrix": {"DetectedFace -> int": [[476, "    def reference_matrix(self):"]]}, "reference_landmarks": {"DetectedFace -> None": [[462, "    def reference_landmarks(self):"]]}, "aligned_face": {"DetectedFace -> None": [[384, "    def aligned_face(self):"]]}, "load_reference_face": {"(DetectedFace, ?, int, float, None) -> None": [[320, "    def load_reference_face(self, image, size=64, coverage_ratio=0.625, dtype=None):"]]}, "_extract_ratio": {"DetectedFace -> float": [[117, "    def _extract_ratio(self):"]]}, "reference_face": {"DetectedFace -> None": [[453, "    def reference_face(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.original_roi": {"param": {"self": {"DetectedFace": [[359, "    def original_roi(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.left": {"param": {"self": {"DetectedFace": [[97, "    def left(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.reference_fac": {"param": {"self": {"DetectedFace": [[453, "    def reference_face(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._get": {"var": {"kernel_size": {"int": [[839, "        kernel_size = int(radius * 2 + 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask": {"var": {"blurred": {"?": [[773, "        blurred = self._mask"], [777, "            blurred = func(blurred, **kwargs)"], [780, "        blurred = blurred[..., None]"]]}}, "func": {"_sigma": {"BlurMask -> int": [[792, "    def _sigma(self):"]]}, "_func_mapping": {"BlurMask -> dict": [[797, "    def _func_mapping(self):"]]}, "_multipass_factor": {"BlurMask -> None": [[785, "    def _multipass_factor(self):"]]}, "__init__": {"? -> ?": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}, "blurred": {"BlurMask -> None": [[769, "    def blurred(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._get_kwarg": {"param": {"self": {"BlurMask": [[862, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._get_kernel_siz": {"var": {"mask_diameter": {"?": [[837, "        mask_diameter = np.sqrt(np.sum(self._mask))"]]}}, "param": {"kernel": {"?": [[814, "    def _get_kernel_size(self, kernel, is_ratio):"]]}, "self": {"BlurMask": [[814, "    def _get_kernel_size(self, kernel, is_ratio):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.to_dict": {"var": {"key": {"str": [[691, "        for key in (\"mask\", \"affine_matrix\", \"interpolator\", \"stored_size\"):"]]}}, "param": {"self": {"Mask": [[681, "    def to_dict(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.aligned_landmark": {"param": {"self": {"DetectedFace": [[371, "    def aligned_landmarks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.__init__": {"param": {"h": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "self": {"DetectedFace": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "mask": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "filename": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "w": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "y": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "x": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}, "image": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.replace_": {"var": {"mask": {"?": [[627, "        mask = (cv2.resize(mask,"]]}}, "param": {"mask": {"?": [[618, "    def replace_mask(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.original_": {"var": {"roi": {"None": [[364, "        roi = AlignerExtract().get_original_roi(self.aligned[\"matrix\"],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.feed_matrix": {"var": {"mat": {"int": [[437, "        mat = AlignerExtract().transform_matrix(self.feed[\"matrix\"],"]]}}, "param": {"self": {"DetectedFace": [[432, "    def feed_matrix(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace._padding_from_coverag": {"var": {"adjusted_ratio": {"{float | int}": [[271, "        adjusted_ratio = coverage_ratio - (1 - self._extract_ratio)"]]}}, "param": {"self": {"DetectedFace": [[268, "    def _padding_from_coverage(self, size, coverage_ratio):"]]}, "size": {"int": [[268, "    def _padding_from_coverage(self, size, coverage_ratio):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.fro": {"param": {"mask_dict": {"?": [[696, "    def from_dict(self, mask_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.aligned_": {"var": {"landmarks": {"None": [[376, "        landmarks = AlignerExtract().transform_points(self.landmarks_xy,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace._padding_from": {"param": {"coverage_ratio": {"float": [[268, "    def _padding_from_coverage(self, size, coverage_ratio):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.interpolator": {"param": {"self": {"Mask": [[567, "    def interpolator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask._attr_nam": {"var": {"retval": {"str": [[723, "        retval = \"_{}\".format(dict_key) if dict_key != \"stored_size\" else dict_key"]]}}, "param": {"dict_key": {"str": [[710, "    def _attr_name(dict_key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.original_": {"var": {"roi": {"?": [[557, "        roi = cv2.transform(points, matrix).reshape((4, 2))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.mask": {"var": {"dims": {"(int, int, int)": [[533, "        dims = (self.stored_size, self.stored_size, 1)"]]}}, "param": {"self": {"Mask": [[530, "    def mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurM": {"func": {"_kwarg_requirements": {"BlurMask -> dict": [[803, "    def _kwarg_requirements(self):"]]}, "_get_kwargs": {"BlurMask -> dict": [[862, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._multipass_factor": {"param": {"self": {"BlurMask": [[785, "    def _multipass_factor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.reference_": {"var": {"landmarks": {"None": [[468, "        landmarks = AlignerExtract().transform_points(self.landmarks_xy,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.from_alignment": {"var": {"landmarks": {"?": [[194, "        landmarks = alignment[\"landmarks_xy\"]"], [196, "            landmarks = np.array(landmarks, dtype=\"float32\")"]]}, "name": {"?": [[203, "            for name, mask_dict in alignment[\"mask\"].items():"]]}}, "param": {"self": {"DetectedFace": [[170, "    def from_alignment(self, alignment, image=None):"]]}, "image": {"None": [[170, "    def from_alignment(self, alignment, image=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.feed_": {"var": {"landmarks": {"None": [[424, "        landmarks = AlignerExtract().transform_points(self.landmarks_xy,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_reference_fac": {"param": {"dtype": {"None": [[320, "    def load_reference_face(self, image, size=64, coverage_ratio=0.625, dtype=None):"]]}, "self": {"DetectedFace": [[320, "    def load_reference_face(self, image, size=64, coverage_ratio=0.625, dtype=None):"]]}, "image": {"?": [[320, "    def load_reference_face(self, image, size=64, coverage_ratio=0.625, dtype=None):"]]}, "size": {"int": [[320, "    def load_reference_face(self, image, size=64, coverage_ratio=0.625, dtype=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_reference_": {"var": {"face": {"None": [[349, "        face = AlignerExtract().transform(image,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.to_alignment": {"param": {"self": {"DetectedFace": [[149, "    def to_alignment(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.adjusted_interpolator": {"param": {"self": {"DetectedFace": [[402, "    def adjusted_interpolators(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_aligne": {"var": {"padding": {"int": [[254, "            padding = int(size * self._extract_ratio) // 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_feed_fac": {"var": {"interp": {"?": [[308, "            interp = cv2.INTER_CUBIC if original_size < size else cv2.INTER_AREA"]]}, "original_size": {"?": [[307, "            original_size = image.shape[0]"]]}}, "param": {"dtype": {"None": [[277, "                       is_aligned_face=False):"]]}, "self": {"DetectedFace": [[277, "                       is_aligned_face=False):"]]}, "image": {"?": [[277, "                       is_aligned_face=False):"]]}, "size": {"int": [[277, "                       is_aligned_face=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.reference_interpolator": {"param": {"self": {"DetectedFace": [[489, "    def reference_interpolators(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.replace_mask": {"param": {"self": {"Mask": [[618, "    def replace_mask(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace._extract_ratio": {"param": {"self": {"DetectedFace": [[117, "    def _extract_ratio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.original_roi": {"param": {"self": {"Mask": [[549, "    def original_roi(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.top": {"param": {"self": {"DetectedFace": [[102, "    def top(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace._image_to_fac": {"param": {"self": {"DetectedFace": [[212, "    def _image_to_face(self, image):"]]}, "image": {"None": [[212, "    def _image_to_face(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.affine_matrix": {"param": {"self": {"Mask": [[562, "    def affine_matrix(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask.__init__": {"param": {"kernel": {"?": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}, "self": {"BlurMask": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}, "mask": {"?": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}, "passes": {"int": [[757, "    def __init__(self, blur_type, mask, kernel, is_ratio=False, passes=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.to_": {"var": {"alignment": {"dict": [[159, "        alignment = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.right": {"param": {"self": {"DetectedFace": [[107, "    def right(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._get_kwargs": {"var": {"retval": {"dict": [[864, "        retval = {kword: self._kwarg_mapping[kword]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.load_align": {"param": {"dtype": {"None": [[219, "    def load_aligned(self, image, size=256, dtype=None, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMa": {"func": {"_get_kernel_size": {"(BlurMask, ?, ?) -> int / (BlurMask, ?, bool) -> int": [[814, "    def _get_kernel_size(self, kernel, is_ratio):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.__in": {"param": {"storage_size": {"int": [[517, "    def __init__(self, storage_size=128):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.feed_fac": {"param": {"self": {"DetectedFace": [[410, "    def feed_face(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.add_": {"var": {"fsmask": {"Mask": [[145, "        fsmask = Mask(storage_size=storage_size)"]]}}, "param": {"mask": {"?": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.to_dic": {"var": {"retval": {"dict": [[690, "        retval = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._kwarg_mapping": {"param": {"self": {"BlurMask": [[809, "    def _kwarg_mapping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask.blurred": {"var": {"i": {"int": [[774, "        for i in range(self._passes):"]]}, "ksize": {"int": [[775, "            ksize = int(kwargs[\"ksize\"][0])"], [778, "            ksize = int(round(ksize * self._multipass_factor))"]]}, "func": {"?": [[771, "        func = self._func_mapping[self._blur_type]"]]}, "kwargs": {"dict": [[772, "        kwargs = self._get_kwargs()"]]}}, "param": {"self": {"BlurMask": [[769, "    def blurred(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMas": {"func": {"_get_kernel_tuple": {"? -> (int, int) / int -> (int, int)": [[844, "    def _get_kernel_tuple(kernel_size):"]]}, "_kwarg_mapping": {"BlurMask -> dict": [[809, "    def _kwarg_mapping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.add_mask": {"param": {"self": {"DetectedFace": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}, "interpolator": {"?": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}, "name": {"?": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}, "affine_matrix": {"?": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}, "storage_size": {"int": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect": {"var": {"logger": {"?": [[12, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"Mask": {"<Mask>": [[498, "class Mask():"]]}, "BlurMask": {"<BlurMask>": [[728, "class BlurMask():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.get_full_frame_mask": {"var": {"frame": {"?": [[585, "        frame = np.zeros((width, height, 1), dtype=\"uint8\")"]]}}, "param": {"width": {"?": [[571, "    def get_full_frame_mask(self, width, height):"]]}, "self": {"Mask": [[571, "    def get_full_frame_mask(self, width, height):"]]}, "height": {"?": [[571, "    def get_full_frame_mask(self, width, height):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.__init": {"var": {"landmarks_xy": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}}, "param": {"landmarks_xy": {"None": [[74, "                 landmarks_xy=None, mask=None, filename=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask._get_kernel_tup": {"var": {"retval": {"(int, int)": [[858, "        retval = (kernel_size, kernel_size)"]]}}, "param": {"kernel_size": {"int": [[844, "    def _get_kernel_tuple(kernel_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace": {"func": {"right": {"DetectedFace -> None": [[107, "    def right(self):"]]}, "bottom": {"DetectedFace -> None": [[112, "    def bottom(self):"]]}, "top": {"DetectedFace -> None": [[102, "    def top(self):"]]}, "original_roi": {"DetectedFace -> None": [[359, "    def original_roi(self):"]]}, "add_mask": {"(DetectedFace, ?, ?, ?, ?, int) -> None": [[121, "    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):"]]}, "__init__": {"? -> ?": [[73, "    def __init__(self, image=None, x=None, w=None, y=None, h=None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask._adjus": {"param": {"affine_matrix": {"?": [[658, "    def _adjust_affine_matrix(self, mask_size, affine_matrix):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask._adjust_affine_matrix": {"var": {"zoom_mat": {"?": [[674, "        zoom_mat = np.array([[zoom, 0, 0.], [0, zoom, 0.]])"]]}, "adjust_mat": {"?": [[675, "        adjust_mat = np.dot(zoom_mat, np.concatenate((affine_matrix, np.array([[0., 0., 1.]]))))"]]}, "zoom": {"int": [[673, "        zoom = self.stored_size / mask_size"]]}}, "param": {"self": {"Mask": [[658, "    def _adjust_affine_matrix(self, mask_size, affine_matrix):"]]}, "mask_size": {"?": [[658, "    def _adjust_affine_matrix(self, mask_size, affine_matrix):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.Mask.get_full_frame_": {"var": {"mask": {"?": [[586, "        mask = cv2.warpAffine(self.mask,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.BlurMask.__init": {"var": {"kernel_size": {"int": [[764, "        kernel_size = self._get_kernel_size(kernel, is_ratio)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.aligned_fac": {"param": {"self": {"DetectedFace": [[384, "    def aligned_face(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.feed_landmark": {"param": {"self": {"DetectedFace": [[418, "    def feed_landmarks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.feed_interpolator": {"param": {"self": {"DetectedFace": [[444, "    def feed_interpolators(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.faces_detect.DetectedFace.reference_matrix": {"var": {"mat": {"int": [[482, "        mat = AlignerExtract().transform_matrix(self.reference[\"matrix\"],"]]}}, "param": {"self": {"DetectedFace": [[476, "    def reference_matrix(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/multithreading.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.join": {"var": {"thread": {"<list>": [[115, "        for thread in self._threads:"]]}}, "param": {"self": {"MultiThread": [[112, "    def join(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGenerator.__ini": {"param": {"thread_count": {"int": [[130, "                 queue=None, args=None, kwargs=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.is_aliv": {"param": {"self": {"MultiThread": [[86, "    def is_alive(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.nam": {"param": {"self": {"MultiThread": [[74, "    def name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.__init__": {"param": {"self": {"MultiThread": [[50, "    def __init__(self, target, *args, thread_count=1, name=None, **kwargs):"]]}, "target": {"{(Converter, ?, None) -> ? / (Converter, ?, ?) -> ? | (ImageIO, ?) -> None | (ImagesLoader, ?) -> None | (ImagesSaver, ?) -> None | (Patch, ?, ?, ?, ?, ?) -> None | Predict -> None}": [[50, "    def __init__(self, target, *args, thread_count=1, name=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.check_and_raise_error": {"param": {"self": {"{BackgroundGenerator | MultiThread}": [[78, "    def check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.has_error": {"param": {"self": {"MultiThread": [[64, "    def has_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiT": {"func": {"check_and_raise_error": {"MultiThread -> None / BackgroundGenerator -> None": [[78, "    def check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreadi": {"class": {"BackgroundGenerator": {"<BackgroundGenerator>": [[125, "class BackgroundGenerator(MultiThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.FSThread": {"func": {"run": {"FSThread -> ?": [[34, "    def run(self):"]]}, "__init__": {"? -> ?": [[21, "    def __init__(self, group=None, target=None, name=None,  # pylint: disable=too-many-arguments"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGenerator": {"func": {"__init__": {"? -> ?": [[129, "    def __init__(self, generator, prefetch=1, thread_count=2,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGenerator._run": {"var": {"item": {"?": [[145, "            for item in self.generator(*self._gen_args, **self._gen_kwargs):"]]}}, "param": {"self": {"BackgroundGenerator": [[139, "    def _run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.error": {"param": {"self": {"MultiThread": [[69, "    def errors(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.FSThread.check_and_raise_error": {"param": {"self": {"FSThread": [[27, "    def check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.check_and_raise_": {"var": {"error": {"?": [[83, "        error = self.errors[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.FSThread.__init__": {"var": {"args": {"()": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}}, "param": {"group": {"None": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}, "target": {"None": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}, "self": {"FSThread": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}, "args": {"()": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}, "kwargs": {"None": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}, "name": {"None": [[22, "                 args=(), kwargs=None, *, daemon=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreadin": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.FST": {"func": {"check_and_raise_error": {"FSThread -> None": [[27, "    def check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.start": {"var": {"name": {"str": [[94, "            name = \"{}_{}\".format(self._name, idx)"]]}, "idx": {"int": [[93, "        for idx in range(self._thread_count):"]]}}, "param": {"self": {"{BackgroundGenerator | MultiThread}": [[90, "    def start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGenerato": {"func": {"_run": {"BackgroundGenerator -> ?": [[139, "    def _run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.FSThread.run": {"param": {"self": {"FSThread": [[34, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading": {"class": {"MultiThread": {"<MultiThread>": [[47, "class MultiThread():"]]}, "FSThread": {"<FSThread>": [[19, "class FSThread(threading.Thread):"]]}}, "func": {"total_cpus": {"() -> None": [[14, "def total_cpus():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGenerator.iterator": {"var": {"next_item": {"?": [[155, "            next_item = self.queue.get()"]]}}, "param": {"self": {"BackgroundGenerator": [[152, "    def iterator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.s": {"var": {"thread": {"FSThread": [[97, "            thread = FSThread(name=name,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread.completed": {"var": {"retval": {"int": [[108, "        retval = all(not thread.is_alive() for thread in self._threads)"]]}}, "param": {"self": {"MultiThread": [[106, "    def completed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThrea": {"func": {"completed": {"MultiThread -> int": [[106, "    def completed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGen": {"func": {"iterator": {"BackgroundGenerator -> None": [[152, "    def iterator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.BackgroundGenerator.__init__": {"var": {"queue": {"None": [[130, "                 queue=None, args=None, kwargs=None):"]]}}, "param": {"generator": {"(BackgroundGenerator, tuple, ?, ?, ?) -> None / (TrainingDataGenerator, ?, ?, ?, ?) -> None": [[130, "                 queue=None, args=None, kwargs=None):"]]}, "self": {"BackgroundGenerator": [[130, "                 queue=None, args=None, kwargs=None):"]]}, "args": {"None": [[130, "                 queue=None, args=None, kwargs=None):"]]}, "queue": {"None": [[130, "                 queue=None, args=None, kwargs=None):"]]}, "prefetch": {"int": [[130, "                 queue=None, args=None, kwargs=None):"]]}, "kwargs": {"None": [[130, "                 queue=None, args=None, kwargs=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.multithreading.MultiThread": {"func": {"errors": {"MultiThread -> [?]": [[69, "    def errors(self):"]]}, "join": {"MultiThread -> None": [[112, "    def join(self):"]]}, "name": {"MultiThread -> None": [[74, "    def name(self):"]]}, "start": {"BackgroundGenerator -> None / MultiThread -> None": [[90, "    def start(self):"]]}, "has_error": {"MultiThread -> int": [[64, "    def has_error(self):"]]}, "is_alive": {"MultiThread -> int": [[86, "    def is_alive(self):"]]}, "__init__": {"? -> ?": [[50, "    def __init__(self, target, *args, thread_count=1, name=None, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/avg_color.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.avg_c": {"class": {"Color": {"<Color>": [[8, "class Color(Adjustment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.avg_color.Color.process": {"var": {"diff": {"?": [[14, "            diff = old_face - new_face"]]}, "avg_diff": {"?": [[15, "            avg_diff = np.sum(diff * raw_mask, axis=(0, 1))"]]}, "_": {"int": [[13, "        for _ in [0, 1]:"]]}}, "param": {"old_face": {"?": [[12, "    def process(old_face, new_face, raw_mask):"]]}, "new_face": {"?": [[12, "    def process(old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.avg_color.Color.proc": {"var": {"adjustment": {"?": [[16, "            adjustment = avg_diff / np.sum(raw_mask, axis=(0, 1))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.avg_color.Color.proce": {"param": {"raw_mask": {"?": [[12, "    def process(old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.avg_color.Col": {"func": {"process": {"(?, ?, ?) -> None": [[12, "    def process(old_face, new_face, raw_mask):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/vgg_clear_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[52, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/pipeline.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._active_plugin": {"var": {"phase": {"?": [[339, "        for phase in self._current_phase:"]]}}, "param": {"self": {"Extractor": [[336, "    def _active_plugins(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_detec": {"param": {"rotation": {"None": [[513, "    def _load_detect(self, detector, rotation, min_size, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_phase": {"var": {"scaling": {"?": [[473, "            scaling = self._parallel_scaling[num_plugins]"]]}, "num_plugins": {"int": [[471, "            num_plugins = len([p for p in current_phase if self._vram_per_phase[p] > 0])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipel": {"func": {"_get_instance": {"() -> int": [[26, "def _get_instance():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor": {"func": {"passes": {"Extractor -> int": [[121, "    def passes(self):"]]}, "final_pass": {"Extractor -> bool": [[153, "    def final_pass(self):"]]}, "_set_phases": {"(Extractor, ?) -> [[str]] / (Extractor, bool) -> [[str]]": [[452, "    def _set_phases(self, multiprocess):"]]}, "_set_flow": {"(None, str, [None]) -> [str] / (str, str, {[str] | str}) -> [str] / (?, ?, ?) -> [str] / (?, ?, [?]) -> [str] / (None, None, [?]) -> [str]": [[347, "    def _set_flow(detector, aligner, masker):"]]}, "_launch_plugin": {"(Extractor, ?) -> None": [[538, "    def _launch_plugin(self, phase):"]]}, "launch": {"Extractor -> None": [[189, "    def launch(self):"]]}, "_load_mask": {"(Extractor, ?, ?, ?) -> None / (Extractor, ?, bool, None) -> None / (Extractor, None, bool, None) -> None": [[526, "    def _load_mask(self, masker, image_is_aligned, configfile):"]]}, "_active_plugins": {"Extractor -> [?]": [[336, "    def _active_plugins(self):"]]}, "_output_queue": {"Extractor -> None": [[312, "    def _output_queue(self):"]]}, "_load_align": {"(Extractor, ?, ?, ?) -> None / (Extractor, None, None, None) -> None / (Extractor, ?, None, None) -> None / (Extractor, str, None, None) -> None": [[501, "    def _load_align(self, aligner, configfile, normalize_method):"]]}, "phase_text": {"Extractor -> str": [[143, "    def phase_text(self):"]]}, "input_queue": {"Extractor -> None": [[103, "    def input_queue(self):"]]}, "_final_phase": {"Extractor -> str": [[305, "    def _final_phase(self):"]]}, "_all_plugins": {"Extractor -> [?]": [[324, "    def _all_plugins(self):"]]}, "_get_plugin_type_and_index": {"? -> (str, int) / str -> (str, int)": [[362, "    def _get_plugin_type_and_index(flow_phase):"]]}, "_set_plugin_batchsize": {"(Extractor, ?, ?) -> None / (Extractor, [?], int) -> None": [[595, "    def _set_plugin_batchsize(self, gpu_plugins, available_vram):"]]}, "detected_faces": {"Extractor -> ?": [[205, "    def detected_faces(self):"]]}, "_load_detect": {"(Extractor, ?, ?, ?, ?) -> None / (Extractor, None, None, int, None) -> None / (Extractor, ?, None, int, None) -> None / (Extractor, str, None, int, None) -> None": [[513, "    def _load_detect(self, detector, rotation, min_size, configfile):"]]}, "set_batchsize": {"(Extractor, ?, ?) -> None / (Extractor, str, int) -> None": [[173, "    def set_batchsize(self, plugin_type, batchsize):"]]}, "_add_queues": {"Extractor -> dict": [[391, "    def _add_queues(self):"]]}, "__init__": {"? -> ?": [[77, "    def __init__(self, detector, aligner, masker, configfile=None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._final_pha": {"param": {"self": {"Extractor": [[305, "    def _final_phase(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.__ini": {"param": {"detected_faces": {"None": [[667, "    def __init__(self, filename, image, detected_faces=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._add_queu": {"param": {"self": {"Extractor": [[391, "    def _add_queues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedi": {"func": {"add_detected_faces": {"(ExtractMedia, ?) -> None": [[717, "    def add_detected_faces(self, faces):"]]}, "detected_faces": {"ExtractMedia -> None": [[695, "    def detected_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_a": {"param": {"configfile": {"None": [[501, "    def _load_align(self, aligner, configfile, normalize_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._join_thread": {"param": {"self": {"Extractor": [[640, "    def _join_threads(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._get_vram_": {"var": {"stats": {"{dict | dict}": [[414, "        stats = gpu_stats.get_card_most_free()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.set_imag": {"param": {"self": {"ExtractMedia": [[739, "    def set_image(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.pa": {"param": {"self": {"Extractor": [[121, "    def passes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._get_plugin_type_and_inde": {"var": {"idx": {"int": [[384, "            idx = int(idx)"]], "None": [[388, "            idx = None"]], "str": [[382, "        idx = flow_phase.split(\"_\")[-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._launch": {"var": {"plugin_type": {"str": [[550, "        plugin_type, idx = self._get_plugin_type_and_index(phase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.imag": {"param": {"self": {"ExtractMedia": [[680, "    def image(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._final_phas": {"var": {"retval": {"str": [[307, "        retval = self._flow[-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._launch_": {"var": {"plugin": {"?": [[551, "        plugin = getattr(self, \"_{}\".format(plugin_type))"], [552, "        plugin = plugin[idx] if idx is not None else plugin"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._vram_per_phase": {"var": {"attr": {"?": [[279, "            attr = getattr(self, \"_{}\".format(plugin_type))"], [280, "            attr = attr[idx] if idx is not None else attr"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.phase_text": {"param": {"self": {"Extractor": [[143, "    def phase_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._launch_plug": {"var": {"in_qname": {"str": [[541, "        in_qname = \"extract{}_{}_in\".format(self._instance, phase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_align": {"param": {"self": {"Extractor": [[501, "    def _load_align(self, aligner, configfile, normalize_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_plugin_batchsiz": {"var": {"vram_per_batch": {"[?]": [[603, "        vram_per_batch = [plugin.vram_per_batch for plugin in plugins]"]]}, "text": {"str": [[634, "            text = \", \".join([\"{}: {}\".format(plugin.__class__.__name__, batchsize)"]]}, "remaining": {"int": [[608, "        remaining = available_vram - sum(batchsize * plugin.vram_per_batch"]]}, "sorted_indices": {"[?]": [[610, "        sorted_indices = [i[0] for i in sorted(enumerate(plugins),"]]}}, "param": {"self": {"Extractor": [[595, "    def _set_plugin_batchsize(self, gpu_plugins, available_vram):"]]}, "available_vram": {"int": [[595, "    def _set_plugin_batchsize(self, gpu_plugins, available_vram):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._get_plugin_type_and_index": {"var": {"plugin_type": {"str": [[385, "            plugin_type = \"_\".join(flow_phase.split(\"_\")[:-1])"], [387, "            plugin_type = flow_phase"]]}}, "param": {"flow_phase": {"str": [[362, "    def _get_plugin_type_and_index(flow_phase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipelin": {"var": {"logger": {"?": [[22, "logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}, "class": {"ExtractMedia": {"<ExtractMedia>": [[653, "class ExtractMedia():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia._image_as_rgb": {"param": {"self": {"ExtractMedia": [[762, "    def _image_as_rgb(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.launch": {"param": {"self": {"Extractor": [[189, "    def launch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._current_pha": {"param": {"self": {"Extractor": [[298, "    def _current_phase(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.final_pa": {"param": {"self": {"Extractor": [[153, "    def final_pass(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.final_pass": {"var": {"retval": {"bool": [[169, "        retval = self._phase_index == len(self._phases) - 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_plugin_batchsize": {"var": {"plugin": {"list": [[619, "                plugin = plugins[idx]"]]}, "idx": {"?": [[618, "            for idx in sorted_indices:"]]}, "ratios": {"[int]": [[604, "        ratios = [vram / sum(vram_per_batch) for vram in vram_per_batch]"]]}, "plugins": {"[?]": [[600, "        plugins = [self._active_plugins[idx]"]]}}, "param": {"gpu_plugins": {"[?]": [[595, "    def _set_plugin_batchsize(self, gpu_plugins, available_vram):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._current_phas": {"var": {"retval": {"[str]": [[300, "        retval = self._phases[self._phase_index]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_flow": {"var": {"retval": {"[str]": [[350, "        retval = []"]]}}, "param": {"detector": {"str": [[347, "    def _set_flow(detector, aligner, masker):"]]}, "masker": {"{[?] | [None] | [str] | str}": [[347, "    def _set_flow(detector, aligner, masker):"]]}, "aligner": {"str": [[347, "    def _set_flow(detector, aligner, masker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._output_queu": {"var": {"retval": {"?": [[319, "        retval = self._queues[qname]"]]}, "qname": {"str": [[315, "            qname = \"extract{}_{}_out\".format(self._instance, self._final_phase)"], [317, "            qname = \"extract{}_{}_in\".format(self._instance,"]]}}, "param": {"self": {"Extractor": [[312, "    def _output_queue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._total": {"var": {"vram_required_count": {"int": [[289, "        vram_required_count = sum(1 for p in vrams.values() if p > 0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._active_plugins": {"var": {"retval": {"[?]": [[338, "        retval = []"]]}, "attr": {"?": [[341, "            attr = getattr(self, \"_{}\".format(plugin_type))"]]}, "plugin_type": {"str": [[340, "            plugin_type, idx = self._get_plugin_type_and_index(phase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._join_threads": {"var": {"plugin": {"?": [[642, "        for plugin in self._active_plugins:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.set_": {"param": {"image": {"?": [[739, "    def set_image(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMed": {"func": {"get_image_copy": {"(ExtractMedia, ?) -> None": [[700, "    def get_image_copy(self, color_format):"]]}, "_image_as_bgr": {"ExtractMedia -> None": [[753, "    def _image_as_bgr(self):"]]}, "remove_image": {"ExtractMedia -> None": [[730, "    def remove_image(self):"]]}, "_image_as_gray": {"ExtractMedia -> None": [[771, "    def _image_as_gray(self):"]]}, "image": {"ExtractMedia -> None": [[680, "    def image(self):"]]}, "filename": {"ExtractMedia -> None": [[675, "    def filename(self):"]]}, "_image_as_rgb": {"ExtractMedia -> None": [[762, "    def _image_as_rgb(self):"]]}, "image_size": {"ExtractMedia -> None": [[690, "    def image_size(self):"]]}, "image_shape": {"ExtractMedia -> None": [[685, "    def image_shape(self):"]]}, "set_image": {"(ExtractMedia, ?) -> None": [[739, "    def set_image(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.phase_tex": {"var": {"plugin_types": {"?": [[146, "        plugin_types = set(self._get_plugin_type_and_index(phase)[0]"]]}, "retval": {"str": [[148, "        retval = \", \".join(plugin_type.title() for plugin_type in list(plugin_types))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._vram_per_phas": {"var": {"retval": {"dict": [[276, "        retval = dict()"]]}, "plugin_type": {"str": [[278, "            plugin_type, idx = self._get_plugin_type_and_index(phase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_extractor_batchsize": {"var": {"gpu_plugins": {"[?]": [[573, "        gpu_plugins = [p for p in self._current_phase if self._vram_per_phase[p] > 0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.input_queu": {"var": {"retval": {"?": [[116, "        retval = self._queues[qname]"]]}, "qname": {"str": [[115, "        qname = \"extract{}_{}_in\".format(self._instance, self._current_phase[0])"]]}}, "param": {"self": {"Extractor": [[103, "    def input_queue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extrac": {"var": {"normalize_method": {"None": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}}, "param": {"normalize_method": {"None": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}}, "func": {"_join_threads": {"Extractor -> None": [[640, "    def _join_threads(self):"]]}, "set_aligner_normalization_method": {"(Extractor, ?) -> None": [[584, "    def set_aligner_normalization_method(self, method):"]]}, "_total_vram_required": {"Extractor -> int": [[286, "    def _total_vram_required(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.add_detected_": {"param": {"faces": {"?": [[717, "    def add_detected_faces(self, faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.detected_fac": {"param": {"self": {"ExtractMedia": [[695, "    def detected_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.set_batchsize": {"var": {"plugin": {"?": [[186, "        plugin = getattr(self, \"_{}\".format(plugin_type))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.detected_": {"var": {"faces": {"?": [[231, "                faces = out_queue.get(True, 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_": {"var": {"phase": {"str": [[470, "        for phase in self._flow:"]]}, "phases": {"[[str]]": [[467, "        phases = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.detected_faces": {"var": {"q_name": {"?": [[241, "            for q_name in self._queues:"]]}, "out_queue": {"Extractor -> None": [[226, "        out_queue = self._output_queue"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline": {"var": {"_INSTANCES": {"int": [[23, "_INSTANCES = -1  # Tracking for multiple instances of pipeline"]]}}, "class": {"Extractor": {"<Extractor>": [[33, "class Extractor():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._add_": {"var": {"queues": {"dict": [[393, "        queues = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.launc": {"var": {"phase": {"?": [[202, "        for phase in self._current_phase:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.set_aligner_normalization_": {"param": {"method": {"?": [[584, "    def set_aligner_normalization_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._launch_plugi": {"var": {"out_qname": {"str": [[543, "            out_qname = \"extract{}_{}_out\".format(self._instance, self._final_phase)"], [546, "            out_qname = \"extract{}_{}_in\".format(self._instance, next_phase)"]]}, "next_phase": {"list": [[545, "            next_phase = self._flow[self._flow.index(phase) + 1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_mask": {"param": {"self": {"Extractor": [[526, "    def _load_mask(self, masker, image_is_aligned, configfile):"]]}, "configfile": {"None": [[526, "    def _load_mask(self, masker, image_is_aligned, configfile):"]]}, "image_is_aligned": {"bool": [[526, "    def _load_mask(self, masker, image_is_aligned, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_detect": {"param": {"min_size": {"int": [[513, "    def _load_detect(self, detector, rotation, min_size, configfile):"]]}, "self": {"Extractor": [[513, "    def _load_detect(self, detector, rotation, min_size, configfile):"]]}, "configfile": {"None": [[513, "    def _load_detect(self, detector, rotation, min_size, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_extractor_batchsiz": {"var": {"plugins_required": {"int": [[574, "        plugins_required = sum([self._vram_per_phase[p]"]]}, "available_vram": {"int": [[581, "        available_vram = (self._vram_stats[\"vram_free\"] - plugins_required) // len(gpu_plugins)"]]}, "batch_required": {"int": [[571, "        batch_required = sum([plugin.vram_per_batch * plugin.batchsize"]]}}, "param": {"self": {"Extractor": [[557, "    def _set_extractor_batchsize(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._l": {"var": {"detector_name": {"str": [[518, "        detector_name = detector.replace(\"-\", \"_\").lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.set_": {"param": {"batchsize": {"int": [[173, "    def set_batchsize(self, plugin_type, batchsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.passes": {"var": {"retval": {"int": [[138, "        retval = len(self._phases)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.remove_imag": {"param": {"self": {"ExtractMedia": [[730, "    def remove_image(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.set_batchsiz": {"param": {"self": {"Extractor": [[173, "    def set_batchsize(self, plugin_type, batchsize):"]]}, "plugin_type": {"str": [[173, "    def set_batchsize(self, plugin_type, batchsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._vram_per_": {"var": {"phase": {"str": [[277, "        for phase in self._flow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_alig": {"param": {"normalize_method": {"None": [[501, "    def _load_align(self, aligner, configfile, normalize_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load": {"var": {"masker_name": {"?": [[531, "        masker_name = masker.replace(\"-\", \"_\").lower()"]]}, "aligner_name": {"str": [[506, "        aligner_name = aligner.replace(\"-\", \"_\").lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._parallel_scaling": {"var": {"retval": {"dict": [[264, "        retval = {0: 1.0,"]]}}, "param": {"self": {"Extractor": [[250, "    def _parallel_scaling(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.image_siz": {"param": {"self": {"ExtractMedia": [[690, "    def image_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._load_": {"var": {"detector": {"?": [[520, "        detector = PluginLoader.get_detector(detector_name)(rotation=rotation,"]]}, "masker": {"?": [[533, "        masker = PluginLoader.get_masker(masker_name)(image_is_aligned=image_is_aligned,"]]}, "aligner": {"?": [[508, "        aligner = PluginLoader.get_aligner(aligner_name)(configfile=configfile,"]]}}, "param": {"detector": {"str": [[513, "    def _load_detect(self, detector, rotation, min_size, configfile):"]]}, "masker": {"None": [[526, "    def _load_mask(self, masker, image_is_aligned, configfile):"]]}, "aligner": {"str": [[501, "    def _load_align(self, aligner, configfile, normalize_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_phases": {"var": {"available": {"?": [[469, "        available = self._vram_stats[\"vram_free\"]"]]}, "required": {"int": [[474, "            required = sum(self._vram_per_phase[p] for p in current_phase + [phase]) * scaling"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._add_queue": {"var": {"tasks": {"[str]": [[394, "        tasks = [\"extract{}_{}_in\".format(self._instance, phase) for phase in self._flow]"]]}, "task": {"str": [[396, "        for task in tasks:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._get_vram": {"var": {"gpu_stats": {"GPUStats": [[413, "        gpu_stats = GPUStats()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_plugin_": {"var": {"batchsizes": {"[int]": [[606, "        batchsizes = [min(requested, max(1, int((available_vram * ratio) / plugin.vram_per_batch)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extracto": {"var": {"current_phase": {"[str]": [[468, "        current_phase = []"], [494, "                current_phase = [phase]"]]}}, "func": {"_current_phase": {"Extractor -> [str]": [[298, "    def _current_phase(self):"]]}, "_parallel_scaling": {"Extractor -> dict": [[250, "    def _parallel_scaling(self):"]]}, "_vram_per_phase": {"Extractor -> dict": [[274, "    def _vram_per_phase(self):"]]}, "_get_vram_stats": {"() -> dict": [[404, "    def _get_vram_stats():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_plugin": {"var": {"requested_batchsizes": {"[?]": [[605, "        requested_batchsizes = [plugin.batchsize for plugin in plugins]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._total_vram_required": {"var": {"retval": {"int": [[292, "        retval = (sum(vrams.values()) *"]]}, "vrams": {"Extractor -> dict": [[288, "        vrams = self._vram_per_phase"]]}}, "param": {"self": {"Extractor": [[286, "    def _total_vram_required(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia._image_as_gray": {"param": {"self": {"ExtractMedia": [[771, "    def _image_as_gray(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.E": {"func": {"_set_extractor_batchsize": {"Extractor -> None": [[557, "    def _set_extractor_batchsize(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._get_vram_stats": {"var": {"retval": {"dict": [[415, "        retval = dict(count=gpu_stats.device_count,"]]}, "vram_buffer": {"int": [[412, "        vram_buffer = 256  # Leave a buffer for VRAM allocation"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.set_aligner_normalization_method": {"param": {"self": {"Extractor": [[584, "    def set_aligner_normalization_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia": {"func": {"__init__": {"? -> ?": [[667, "    def __init__(self, filename, image, detected_faces=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.image_shap": {"param": {"self": {"ExtractMedia": [[685, "    def image_shape(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._launch_plugin": {"var": {"kwargs": {"dict": [[548, "        kwargs = dict(in_queue=self._queues[in_qname], out_queue=self._queues[out_qname])"]]}}, "param": {"phase": {"?": [[538, "    def _launch_plugin(self, phase):"]]}, "self": {"Extractor": [[538, "    def _launch_plugin(self, phase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.__in": {"param": {"rotate_images": {"None": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.get_image_copy": {"var": {"image": {"?": [[714, "        image = getattr(self, \"_image_as_{}\".format(color_format.lower()))()"]]}}, "param": {"self": {"ExtractMedia": [[700, "    def get_image_copy(self, color_format):"]]}, "color_format": {"?": [[700, "    def get_image_copy(self, color_format):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_pha": {"var": {"force_single_process": {"bool": [[466, "        force_single_process = not multiprocess or get_backend() == \"amd\""]]}}, "param": {"self": {"Extractor": [[452, "    def _set_phases(self, multiprocess):"]]}, "multiprocess": {"bool": [[452, "    def _set_phases(self, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.__init": {"param": {"min_size": {"int": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}, "image_is_aligned": {"bool": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._check_and_raise_error": {"var": {"plugin": {"?": [[647, "        for plugin in self._active_plugins:"]]}}, "param": {"self": {"Extractor": [[645, "    def _check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extract": {"func": {"_check_and_raise_error": {"Extractor -> bool": [[645, "    def _check_and_raise_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.__init__": {"param": {"self": {"ExtractMedia": [[667, "    def __init__(self, filename, image, detected_faces=None):"]]}, "image": {"{ExtractMedia -> None | list}": [[667, "    def __init__(self, filename, image, detected_faces=None):"]]}, "filename": {"{ExtractMedia -> None | list}": [[667, "    def __init__(self, filename, image, detected_faces=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Ex": {"func": {"_set_parallel_processing": {"(Extractor, ?) -> bool / (Extractor, bool) -> bool": [[422, "    def _set_parallel_processing(self, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.detected_fac": {"param": {"self": {"Extractor": [[205, "    def detected_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.filenam": {"param": {"self": {"ExtractMedia": [[675, "    def filename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia.add_detected_fac": {"param": {"self": {"ExtractMedia": [[717, "    def add_detected_faces(self, faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.ExtractMedia._image_as_bgr": {"param": {"self": {"ExtractMedia": [[753, "    def _image_as_bgr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._all_plugins": {"var": {"retval": {"[?]": [[326, "        retval = []"]]}, "attr": {"?": [[329, "            attr = getattr(self, \"_{}\".format(plugin_type))"], [330, "            attr = attr[idx] if idx is not None else attr"]]}, "plugin_type": {"str": [[328, "            plugin_type, idx = self._get_plugin_type_and_index(phase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._vram_per_pha": {"param": {"self": {"Extractor": [[274, "    def _vram_per_phase(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._set_parallel_processing": {"param": {"self": {"Extractor": [[422, "    def _set_parallel_processing(self, multiprocess):"]]}, "multiprocess": {"bool": [[422, "    def _set_parallel_processing(self, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor.__init__": {"var": {"multiprocess": {"bool": [[78, "                 multiprocess=False, rotate_images=None, min_size=20,"]]}, "masker": {"{[?] | [None] | [str] | str}": [[86, "        masker = [masker] if not isinstance(masker, list) else masker"]]}}, "param": {"multiprocess": {"bool": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}, "masker": {"str": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}, "self": {"Extractor": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}, "aligner": {"str": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}, "configfile": {"None": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}, "detector": {"str": [[79, "                 normalize_method=None, image_is_aligned=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.pipeline.Extractor._all_plugin": {"var": {"phase": {"str": [[327, "        for phase in self._flow:"]]}}, "param": {"self": {"Extractor": [[324, "    def _all_plugins(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/wrapper.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminate_in_thread": {"var": {"con_in": {"?": [[373, "                con_in = win32console.GetStdHandle(  # pylint:disable=c-extension-no-member"]]}, "keypress": {"None": [[375, "                keypress = self.generate_windows_keypress(\"\\n\")"]]}, "now": {"int": [[370, "            now = time()"]]}, "timeout": {"?": [[367, "            timeout = self.config.user_config_dict.get(\"timeout\", 120)"]]}}, "param": {"process": {"?": [[363, "    def terminate_in_thread(self, command, process):"]]}, "self": {"FaceswapControl": [[363, "    def terminate_in_thread(self, command, process):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_l": {"var": {"iterations": {"int": [[265, "        iterations = self.train_stats[\"iterations\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.build_args": {"var": {"command": {"None": [[90, "        command = self.command if not command else command"]]}, "cliopt": {"?": [[98, "        for cliopt in cli_opts.gen_cli_arguments(command):"]]}}, "param": {"category": {"?": [[86, "    def build_args(self, category, command=None, generate=False):"]]}, "command": {"None": [[86, "    def build_args(self, category, command=None, generate=False):"]]}, "generate": {"?": [[86, "    def build_args(self, category, command=None, generate=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper": {"func": {"set_callbacks": {"ProcessWrapper -> None": [[37, "    def set_callbacks(self):"]]}, "action_command": {"ProcessWrapper -> None": [[43, "    def action_command(self, *args):"]]}, "__init__": {"? -> ?": [[27, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.set_callback": {"param": {"self": {"ProcessWrapper": [[37, "    def set_callbacks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminate_in_thr": {"var": {"timeelapsed": {"int": [[381, "                timeelapsed = time() - now"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.set_final_": {"var": {"status": {"str": [[435, "            status = \"Ready\""], [437, "            status = \"Terminated - {}.py\".format(self.command)"], [439, "            status = \"Killed - {}.py\".format(self.command)"], [441, "            status = \"Aborted - {}.py\".format(self.command)"], [443, "            status = \"Failed - {}.py. Return Code: {}\".format(self.command, returncode)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.prepar": {"var": {"mode": {"str": [[78, "        mode = \"indeterminate\" if self.command in (\"effmpeg\", \"train\") else \"determinate\""]]}}, "param": {"self": {"ProcessWrapper": [[68, "    def prepare(self, category):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapp": {"func": {"generate_command": {"ProcessWrapper -> None": [[57, "    def generate_command(self, *args):"]]}, "terminate": {"(ProcessWrapper, str) -> None / (ProcessWrapper, ?) -> None": [[123, "    def terminate(self, message):"]]}, "init_training_session": {"? -> None": [[113, "    def init_training_session(cliopt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.init_training_": {"var": {"session": {"?": [[115, "        session = get_config().session"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.execute_script": {"var": {"kwargs": {"dict": [[163, "        kwargs = {\"stdout\": PIPE,"]]}}, "param": {"self": {"FaceswapControl": [[158, "    def execute_script(self, command, args):"]]}, "args": {"[str]": [[158, "    def execute_script(self, command, args):"]]}, "command": {"?": [[158, "    def execute_script(self, command, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_lo": {"var": {"message": {"str": [[259, "        message = \"Total Iterations: {} | \".format(int(loss[0][0]))"], [275, "        message = \"Elapsed: {} | Session Iterations: {}  {}\".format("]]}, "elapsed": {"str": [[274, "        elapsed = self.calc_elapsed()"]]}}, "param": {"self": {"FaceswapControl": [[247, "    def capture_loss(self, string):"]]}, "string": {"?": [[247, "    def capture_loss(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.generate_command": {"var": {"category": {"?": [[61, "        category, command = self.tk_vars[\"generate\"].get().split(\",\")"]]}, "args": {"[str]": [[62, "        args = self.build_args(category, command=command, generate=True)"]]}}, "param": {"self": {"ProcessWrapper": [[57, "    def generate_command(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminate_in_thre": {"param": {"command": {"?": [[363, "    def terminate_in_thread(self, command, process):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.action_command": {"var": {"category": {"?": [[47, "        category, command = self.tk_vars[\"action\"].get().split(\",\")"]]}, "args": {"[str]": [[53, "            args = self.prepare(category)"]]}}, "param": {"self": {"ProcessWrapper": [[43, "    def action_command(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapCon": {"func": {"capture_loss": {"(FaceswapControl, ?) -> None": [[247, "    def capture_loss(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.build_": {"var": {"args": {"[str]": [[94, "        args = [sys.executable] if generate else [sys.executable, \"-u\"]"], [106, "            args = ['\"{}\"'.format(arg) if \" \" in arg and not arg.startswith((\"[\", \"(\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.terminat": {"param": {"self": {"ProcessWrapper": [[123, "    def terminate(self, message):"]]}, "message": {"str": [[123, "    def terminate(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_ffmp": {"var": {"message": {"str": [[333, "        message = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.set_final_status": {"param": {"returncode": {"?": [[429, "    def set_final_status(self, returncode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.calc_elapsed": {"var": {"secs": {"str": [[291, "            secs = \"{0:02d}\".format((int(elapsed_time % 3600) % 60))"], [295, "            secs = \"00\""]]}, "now": {"int": [[284, "        now = time()"]]}, "mins": {"str": [[290, "            mins = \"{0:02d}\".format((int(elapsed_time % 3600) // 60))"], [294, "            mins = \"00\""]]}, "hrs": {"int": [[287, "            hrs = int(elapsed_time // 3600)"]], "str": [[289, "                hrs = \"{0:02d}\".format(hrs)"], [293, "            hrs = \"00\""]]}}, "param": {"self": {"FaceswapControl": [[282, "    def calc_elapsed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.set_final_statu": {"param": {"self": {"FaceswapControl": [[429, "    def set_final_status(self, returncode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.thread_stdout": {"param": {"self": {"FaceswapControl": [[229, "    def thread_stdout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrappe": {"func": {"build_args": {"(ProcessWrapper, ?, None, ?) -> [str]": [[86, "    def build_args(self, category, command=None, generate=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl": {"func": {"terminate_in_thread": {"(FaceswapControl, ?, ?) -> None": [[363, "    def terminate_in_thread(self, command, process):"]]}, "read_stdout": {"FaceswapControl -> ?": [[173, "    def read_stdout(self):"]]}, "thread_stdout": {"FaceswapControl -> None": [[229, "    def thread_stdout(self):"]]}, "terminate": {"FaceswapControl -> None": [[344, "    def terminate(self):"]]}, "generate_windows_keypress": {"str -> None / ? -> None": [[392, "    def generate_windows_keypress(character):"]]}, "thread_stderr": {"FaceswapControl -> None": [[238, "    def thread_stderr(self):"]]}, "capture_tqdm": {"(FaceswapControl, ?) -> None": [[298, "    def capture_tqdm(self, string):"]]}, "read_stderr": {"FaceswapControl -> ?": [[210, "    def read_stderr(self):"]]}, "capture_ffmpeg": {"(FaceswapControl, ?) -> None": [[325, "    def capture_ffmpeg(self, string):"]]}, "__init__": {"? -> ?": [[141, "    def __init__(self, wrapper):"]]}, "execute_script": {"(FaceswapControl, ?, [str]) -> None / (FaceswapControl, ?, ?) -> None": [[158, "    def execute_script(self, command, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessW": {"func": {"prepare": {"(ProcessWrapper, ?) -> [str]": [[68, "    def prepare(self, category):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.__init__": {"param": {"self": {"FaceswapControl": [[141, "    def __init__(self, wrapper):"]]}, "wrapper": {"ProcessWrapper": [[141, "    def __init__(self, wrapper):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui": {"class": {"FaceswapControl": {"<FaceswapControl>": [[139, "class FaceswapControl():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminate": {"var": {"_": {"None": [[360, "            _ = self.thread.get_result()  # Terminate the LongRunningTask object"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminat": {"param": {"self": {"FaceswapControl": [[344, "    def terminate(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_tqdm": {"var": {"position": {"int": [[319, "        position = int(position) if position.isdigit() else 0"]], "?": [[318, "        position = tqdm[\"pct\"].replace(\"%\", \"\")"]]}, "description": {"str": [[309, "        description = description if description == \"\" else \"{}  |  \".format(description[:-1])"]], "?": [[308, "        description = tqdm[\"dsc\"].strip()"]]}}, "param": {"self": {"FaceswapControl": [[298, "    def capture_tqdm(self, string):"]]}, "string": {"?": [[298, "    def capture_tqdm(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.generate_windows_keypress": {"var": {"buf": {"?": [[394, "        buf = win32console.PyINPUT_RECORDType(  # pylint:disable=c-extension-no-member"]]}}, "param": {"character": {"str": [[392, "    def generate_windows_keypress(character):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.thread_s": {"var": {"thread": {"?": [[242, "        thread = Thread(target=self.read_stderr)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_ffmpeg": {"var": {"item": {"?": [[334, "        for item in ffmpeg:"]]}}, "param": {"self": {"FaceswapControl": [[325, "    def capture_ffmpeg(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_ffmpe": {"param": {"string": {"?": [[325, "    def capture_ffmpeg(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.build_arg": {"var": {"cli_opts": {"?": [[97, "        cli_opts = get_config().cli_opts"]]}, "pathexecscript": {"str": [[92, "        pathexecscript = os.path.join(self.pathscript, script)"]]}, "script": {"str": [[91, "        script = \"{}.{}\".format(category, \"py\")"]]}}, "param": {"self": {"ProcessWrapper": [[86, "    def build_args(self, category, command=None, generate=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.read_s": {"var": {"returncode": {"?": [[205, "        returncode = self.process.poll()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.read_stdout": {"var": {"message": {"str": [[206, "        message = self.set_final_status(returncode)"]]}}, "param": {"self": {"FaceswapControl": [[173, "    def read_stdout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.read_std": {"var": {"output": {"?": [[179, "                output = self.process.stdout.readline()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.read_stderr": {"var": {"output": {"?": [[216, "                output = self.process.stderr.readline()"]]}}, "param": {"self": {"FaceswapControl": [[210, "    def read_stderr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.init_training_session": {"param": {"cliopt": {"?": [[113, "    def init_training_session(cliopt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.thread_stdou": {"var": {"thread": {"?": [[233, "        thread = Thread(target=self.read_stdout)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminate_all_children": {"var": {"msg": {"str": [[425, "                msg = \"Process {} survived SIGKILL. Giving up\".format(child)"]]}, "_": {"?": [[409, "        _, alive = psutil.wait_procs(children, timeout=10)"], [419, "        _, alive = psutil.wait_procs(alive, timeout=10)"]]}, "child": {"?": [[407, "        for child in children:"], [417, "        for child in alive:"], [424, "            for child in alive:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.thread_stderr": {"param": {"self": {"FaceswapControl": [[238, "    def thread_stderr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.prep": {"param": {"category": {"?": [[68, "    def prepare(self, category):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.terminate_all_": {"var": {"children": {"?": [[406, "        children = psutil.Process().children(recursive=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.calc": {"var": {"elapsed_time": {"int": [[285, "        elapsed_time = now - self.train_stats[\"timestamp\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.prepare": {"var": {"args": {"[str]": [[81, "        args = self.build_args(category)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.w": {"class": {"ProcessWrapper": {"<ProcessWrapper>": [[23, "class ProcessWrapper():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_tqd": {"var": {"message": {"str": [[312, "        message = \"{}{}  |  {}  |  {}  |  {}\".format(description,"]]}, "processtime": {"str": [[310, "        processtime = \"Elapsed: {}  Remaining: {}\".format(tqdm[\"tme\"].split(\"<\")[0],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapContro": {"func": {"set_final_status": {"(FaceswapControl, ?) -> str": [[429, "    def set_final_status(self, returncode):"]]}, "calc_elapsed": {"FaceswapControl -> str": [[282, "    def calc_elapsed(self):"]]}, "terminate_all_children": {"() -> None": [[402, "    def terminate_all_children():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.FaceswapControl.capture_": {"var": {"tqdm": {"?": [[301, "        tqdm = self.consoleregex[\"tqdm\"].match(string)"], [304, "        tqdm = tqdm.groupdict()"]]}, "loss": {"?": [[254, "        loss = self.consoleregex[\"loss\"].findall(string)"]]}, "ffmpeg": {"?": [[328, "        ffmpeg = self.consoleregex[\"ffmpeg\"].findall(string)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapper.ProcessWrapper.__init__": {"param": {"self": {"ProcessWrapper": [[27, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.wrapp": {"var": {"logger": {"?": [[20, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/opencv.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.check_transparency_form": {"var": {"transparent": {"?": [[20, "        transparent = self.config[\"draw_transparent\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.clo": {"param": {"self": {"Writer": [[55, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv": {"class": {"Writer": {"<Writer>": [[10, "class Writer(Output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.__init__": {"param": {"self": {"Writer": [[12, "    def __init__(self, output_folder, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Wri": {"func": {"check_transparency_format": {"Writer -> None": [[18, "    def check_transparency_format(self):"]]}, "get_save_args": {"Writer -> {(?, ?) | list}": [[27, "    def get_save_args(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.get_save_": {"var": {"args": {"list": [[30, "        args = list()"]], "(?, ?)": [[32, "            args = (cv2.IMWRITE_JPEG_QUALITY,  # pylint: disable=no-member"], [35, "            args = (cv2.IMWRITE_PNG_COMPRESSION,  # pylint: disable=no-member"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.get_save_args": {"var": {"filetype": {"?": [[29, "        filetype = self.config[\"format\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.pre_encod": {"var": {"image": {"?": [[52, "        image = cv2.imencode(self.extension, image, self.args)[1]  # pylint: disable=no-member"]]}}, "param": {"self": {"Writer": [[49, "    def pre_encode(self, image):"]]}, "image": {"?": [[49, "    def pre_encode(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.get_save_arg": {"param": {"self": {"Writer": [[27, "    def get_save_args(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writ": {"func": {"pre_encode": {"(Writer, ?) -> None": [[49, "    def pre_encode(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer": {"func": {"close": {"Writer -> None": [[55, "    def close(self):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, output_folder, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.check_transparency_format": {"param": {"self": {"Writer": [[18, "    def check_transparency_format(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.W": {"func": {"write": {"(Writer, ?, ?) -> ?": [[40, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.__ini": {"param": {"output_folder": {"?": [[12, "    def __init__(self, output_folder, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv.Writer.writ": {"var": {"filename": {"str": [[42, "        filename = self.output_filename(filename)"]]}}, "param": {"self": {"Writer": [[40, "    def write(self, filename, image):"]]}, "image": {"?": [[40, "    def write(self, filename, image):"]]}, "filename": {"?": [[40, "    def write(self, filename, image):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/scripts/gui.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.initialize_globals": {"var": {"config": {"Config": [[43, "        config = initialize_config(self, cliopts, statusbar, session)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.initialize_globa": {"var": {"cliopts": {"CliOptions": [[40, "        cliopts = CliOptions()"]]}}, "param": {"self": {"FaceswapGui": [[38, "    def initialize_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGu": {"func": {"initialize_globals": {"FaceswapGui -> Config": [[38, "    def initialize_globals(self):"]]}, "add_containers": {"FaceswapGui -> None": [[85, "    def add_containers(self):"]]}, "__init__": {"? -> ?": [[19, "    def __init__(self, debug):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.__init__": {"param": {"debug": {"?": [[19, "    def __init__(self, debug):"]]}, "self": {"FaceswapGui": [[19, "    def __init__(self, debug):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.set_initial_focus": {"var": {"tab": {"?": [[115, "        tab = self._config.user_config_dict[\"tab\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.close_app": {"param": {"self": {"FaceswapGui": [[149, "    def close_app(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.set_initial_focu": {"param": {"self": {"FaceswapGui": [[113, "    def set_initial_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.initialize_global": {"var": {"statusbar": {"StatusBar": [[41, "        statusbar = StatusBar(self)"]]}, "session": {"Session": [[42, "        session = Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.set_font": {"param": {"self": {"FaceswapGui": [[47, "    def set_fonts(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapG": {"var": {"gui_style": {"?": [[57, "        gui_style = ttk.Style()"]]}}, "func": {"build_gui": {"(FaceswapGui, bool) -> None": [[60, "    def build_gui(self, rebuild=False):"]]}, "rebuild": {"FaceswapGui -> None": [[137, "    def rebuild(self):"]]}, "set_initial_focus": {"FaceswapGui -> None": [[113, "    def set_initial_focus(self):"]]}, "_confirm_close_on_running_task": {"FaceswapGui -> bool": [[169, "    def _confirm_close_on_running_task(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.set_layou": {"var": {"w_ratio": {"float": [[126, "        w_ratio = config_opts[\"options_panel_width\"] / 100.0"]]}, "height": {"int": [[129, "        height = round(r_height * h_ratio)"]]}, "config_opts": {"Config -> FaceswapConfig -> dict": [[123, "        config_opts = self._config.user_config_dict"]]}, "width": {"int": [[128, "        width = round(r_width * w_ratio)"]]}, "r_height": {"?": [[125, "        r_height = self.winfo_height()"]]}, "r_width": {"?": [[124, "        r_width = self.winfo_width()"]]}, "h_ratio": {"int": [[127, "        h_ratio = 1 - (config_opts[\"console_panel_height\"] / 100.0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.g": {"class": {"Gui": {"<Gui>": [[188, "class Gui():  # pylint: disable=too-few-public-methods"]]}, "FaceswapGui": {"<FaceswapGui>": [[16, "class FaceswapGui(tk.Tk):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.rebuild": {"var": {"session_state": {"None": [[140, "        session_state = self._last_session.to_dict()"]]}}, "param": {"self": {"FaceswapGui": [[137, "    def rebuild(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.add_containers": {"var": {"maincontainer": {"?": [[89, "        maincontainer = tk.PanedWindow(self,"]]}, "topcontainer": {"?": [[97, "        topcontainer = tk.PanedWindow(maincontainer,"]]}, "bottomcontainer": {"?": [[105, "        bottomcontainer = ttk.Frame(maincontainer, name=\"frame_bottom\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.build_gui": {"var": {"objects": {"list": [[68, "            objects = list(self.objects.keys())"]]}, "obj": {"<list>": [[69, "            for obj in objects:"]]}}, "param": {"self": {"FaceswapGui": [[60, "    def build_gui(self, rebuild=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.Gui.proc": {"param": {"self": {"Gui": [[193, "    def process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.Gu": {"func": {"__init__": {"? -> ?": [[190, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.build_g": {"param": {"rebuild": {"bool": [[60, "    def build_gui(self, rebuild=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.set_fonts": {"var": {"font": {"str": [[50, "        for font in (\"TkDefaultFont\", \"TkHeadingFont\", \"TkMenuFont\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.Gui": {"func": {"process": {"Gui -> None": [[193, "    def process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui": {"func": {"close_app": {"FaceswapGui -> None": [[149, "    def close_app(self, *args):  # pylint: disable=unused-argument"]]}, "set_fonts": {"FaceswapGui -> None": [[47, "    def set_fonts(self):"]]}, "set_layout": {"FaceswapGui -> None": [[120, "    def set_layout(self):"]]}, "set_styles": {"() -> None": [[55, "    def set_styles():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui._confirm_close_on_running_task": {"var": {"confirmtxt": {"str": [[180, "        confirmtxt = \"Processes are still running.\\n\\nAre you sure you want to exit?\""]]}}, "param": {"self": {"FaceswapGui": [[169, "    def _confirm_close_on_running_task(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.Gui.__init__": {"param": {"self": {"Gui": [[190, "    def __init__(self, arguments):"]]}, "arguments": {"?": [[190, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.set_layout": {"param": {"self": {"FaceswapGui": [[120, "    def set_layout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.gui.FaceswapGui.add_container": {"param": {"self": {"FaceswapGui": [[85, "    def add_containers(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/vgg_clear.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.__init__": {"param": {"self": {"Mask": [[24, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.predi": {"param": {"batch": {"?": [[52, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.process": {"var": {"input_": {"?": [[46, "        input_ = np.array([face.feed_face[..., :3]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.predict": {"param": {"self": {"Mask": [[52, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.process_input": {"param": {"self": {"Mask": [[44, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.process_outpu": {"param": {"batch": {"?": [[58, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.init_mod": {"param": {"self": {"Mask": [[35, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear": {"class": {"Mask": {"<Mask>": [[22, "class Mask(Masker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask": {"var": {"predictions": {"?": [[54, "        predictions = self.model.predict(batch[\"feed\"])"]]}}, "func": {"predict": {"(Mask, ?) -> None": [[52, "    def predict(self, batch):"]]}, "process_output": {"(Mask, ?) -> None": [[58, "    def process_output(self, batch):"]]}, "process_input": {"(Mask, ?) -> None": [[44, "    def process_input(self, batch):"]]}, "init_model": {"Mask -> None": [[35, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[24, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.process_inpu": {"param": {"batch": {"?": [[44, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.__init": {"var": {"model_filename": {"str": [[26, "        model_filename = \"Nirkin_300_softmax_v1.h5\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.process_output": {"param": {"self": {"Mask": [[58, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.__in": {"var": {"git_model_id": {"int": [[25, "        git_model_id = 8"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_clear.Mask.init_m": {"var": {"placeholder": {"?": [[40, "        placeholder = np.zeros((self.batchsize, self.input_size, self.input_size, 3),"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/lib/model/normalization_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.mod": {"func": {"test_instance_normalization": {"? -> None": [[17, "def test_instance_normalization(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.normalization_test.test_instance_normalization": {"param": {"dummy": {"?": [[17, "def test_instance_normalization(dummy):  # pylint:disable=unused-argument"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/lib/model/losses_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.lo": {"func": {"test_dssim_channels_last": {"? -> None": [[41, "def test_dssim_channels_last(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test.test_objective_shape": {"param": {"loss_func": {"?": [[31, "def test_objective_shapes(loss_func, input_shape, output_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.l": {"func": {"test_objective_shapes": {"(?, ?, ?) -> None": [[31, "def test_objective_shapes(loss_func, input_shape, output_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test": {"var": {"_PARAMS": {"[({(?, ?) -> None | (?, ?) -> None | (?, ?) -> float | (float, float, float, float) -> float / (?, ?, float, float) -> float}, {(int, int, int) | (int, int, int, int)}, {(int, int) | (int, int, int)})]": [[20, "_PARAMS = [(losses.gradient_loss, (1, 5, 6, 7), (1, 5, 6)),"]]}, "_IDS": {"[str]": [[26, "_IDS = [\"gradient_loss\", \"generalized_loss\", \"l_inf_norm\", \"gmsd_loss\"]"], [27, "_IDS = [\"{}[{}]\".format(loss, get_backend().upper()) for loss in _IDS]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test.test_objective_shapes": {"var": {"objective_output": {"?": [[35, "    objective_output = loss_func(y_a, y_b)"]]}, "y_b": {"?": [[34, "    y_b = K.variable(np.random.random(input_shape))"]]}, "y_a": {"?": [[33, "    y_a = K.variable(np.random.random(input_shape))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test.test_objectiv": {"param": {"input_shape": {"?": [[31, "def test_objective_shapes(loss_func, input_shape, output_shape):"]]}, "output_shape": {"?": [[31, "def test_objective_shapes(loss_func, input_shape, output_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test.test_dssim_channels_last": {"var": {"dssim": {"DSSIMObjective": [[66, "        dssim = losses.DSSIMObjective(kernel_size=kernel_size)"], [72, "        dssim = losses.DSSIMObjective(kernel_size=kernel_size)"]]}, "var_x": {"?": [[47, "        var_x = np.random.random_sample(4 * input_dim * input_dim * 3)"], [48, "        var_x = var_x.reshape([4] + input_shape)"]]}, "x_2": {"?": [[65, "        x_2 = K.constant(var_x, 'float32')"], [71, "        x_2 = K.ones([4] + input_shape)"]]}, "adam": {"?": [[57, "        adam = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-8)"]]}, "var_y": {"?": [[49, "        var_y = np.random.random_sample(4 * input_dim * input_dim * 3)"], [50, "        var_y = var_y.reshape([4] + input_shape)"]]}, "x_1": {"?": [[64, "        x_1 = K.constant(var_x, 'float32')"], [70, "        x_1 = K.zeros([4] + input_shape)"]]}, "model": {"?": [[52, "        model = Sequential()"]]}}, "param": {"dummy": {"?": [[41, "def test_dssim_channels_last(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test.test_dssim_channels_l": {"var": {"input_shape": {"[int]": [[46, "        input_shape = [input_dim, input_dim, 3]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.losses_test.test_dssim_channels_las": {"var": {"prev_data": {"?": [[43, "    prev_data = K.image_data_format()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/plugin_loader.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader": {"func": {"get_available_models": {"() -> None": [[194, "    def get_available_models():"]]}, "get_model": {"(?, bool) -> None / (None, bool) -> None": [[81, "    def get_model(name, disable_logging=False):"]]}, "get_default_model": {"() -> str": [[211, "    def get_default_model():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_available_convert_plugins": {"var": {"convertpath": {"str": [[240, "        convertpath = os.path.join(os.path.dirname(__file__),"]]}}, "param": {"convert_category": {"() -> None": [[224, "    def get_available_convert_plugins(convert_category, add_none=True):"]]}, "add_none": {"None": [[224, "    def get_available_convert_plugins(convert_category, add_none=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader._impor": {"var": {"ttl": {"str": [[158, "        ttl = attr.split(\".\")[-1].title()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_detector": {"param": {"disable_logging": {"bool": [[24, "    def get_detector(name, disable_logging=False):"]]}, "name": {"str": [[24, "    def get_detector(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoad": {"param": {"get_available_convert_plugins": {"<PluginLoader>": [[224, "    def get_available_convert_plugins(convert_category, add_none=True):"]]}}, "func": {"get_converter": {"(?, ?, bool) -> None / (str, str, bool) -> None / (str, ?, bool) -> None": [[119, "    def get_converter(category, name, disable_logging=False):"]]}, "get_masker": {"(?, bool) -> None": [[62, "    def get_masker(name, disable_logging=False):"]]}, "get_available_extractors": {"(str, bool) -> None": [[167, "    def get_available_extractors(extractor_type, add_none=False):"]]}, "get_aligner": {"(str, bool) -> None / (?, bool) -> None": [[43, "    def get_aligner(name, disable_logging=False):"]]}, "get_available_convert_plugins": {"(str, ?) -> None / (str, bool) -> None": [[224, "    def get_available_convert_plugins(convert_category, add_none=True):"]]}, "get_trainer": {"(?, bool) -> None": [[100, "    def get_trainer(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_m": {"param": {"disable_logging": {"bool": [[81, "    def get_model(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_available_models": {"var": {"modelpath": {"str": [[202, "        modelpath = os.path.join(os.path.dirname(__file__), \"train\", \"model\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_trainer": {"param": {"disable_logging": {"bool": [[100, "    def get_trainer(name, disable_logging=False):"]]}, "name": {"?": [[100, "    def get_trainer(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoa": {"func": {"get_detector": {"(str, bool) -> None / (?, bool) -> None": [[24, "    def get_detector(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader._impo": {"var": {"attr": {"str": [[161, "        attr = \"model\" if attr == \"Trainer\" else attr.lower()"]]}}, "param": {"attr": {"str": [[142, "    def _import(attr, name, disable_logging):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_masker": {"param": {"disable_logging": {"bool": [[62, "    def get_masker(name, disable_logging=False):"]]}, "name": {"?": [[62, "    def get_masker(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_converter": {"param": {"disable_logging": {"bool": [[119, "    def get_converter(category, name, disable_logging=False):"]]}, "name": {"str": [[119, "    def get_converter(category, name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_conv": {"param": {"category": {"str": [[119, "    def get_converter(category, name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_available_convert_plugi": {"var": {"converters": {"?": [[243, "        converters = sorted(item.name.replace(\".py\", \"\").replace(\"_\", \"-\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_aligner": {"param": {"disable_logging": {"bool": [[43, "    def get_aligner(name, disable_logging=False):"]]}, "name": {"str": [[43, "    def get_aligner(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_available_extractors": {"var": {"extractpath": {"str": [[181, "        extractpath = os.path.join(os.path.dirname(__file__),"]]}}, "param": {"extractor_type": {"str": [[167, "    def get_available_extractors(extractor_type, add_none=False):"]]}, "add_none": {"bool": [[167, "    def get_available_extractors(extractor_type, add_none=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoade": {"func": {"_import": {"(?, ?, ?) -> None / (str, None, bool) -> None / (str, ?, bool) -> None / (str, str, bool) -> None": [[142, "    def _import(attr, name, disable_logging):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_model": {"param": {"name": {"None": [[81, "    def get_model(name, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_": {"class": {"PluginLoader": {"<PluginLoader>": [[11, "class PluginLoader():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_default_": {"var": {"models": {"None": [[220, "        models = PluginLoader.get_available_models()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_load": {"var": {"logger": {"?": [[8, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader._import": {"var": {"name": {"str": [[157, "        name = name.replace(\"-\", \"_\")"]]}, "module": {"?": [[163, "        module = import_module(mod)"]]}, "mod": {"str": [[162, "        mod = \".\".join((\"plugins\", attr, name))"]]}}, "param": {"disable_logging": {"bool": [[142, "    def _import(attr, name, disable_logging):"]]}, "name": {"{None | str}": [[142, "    def _import(attr, name, disable_logging):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.plugin_loader.PluginLoader.get_available_": {"var": {"models": {"?": [[203, "        models = sorted(item.name.replace(\".py\", \"\").replace(\"_\", \"-\")"]]}, "extractors": {"?": [[184, "        extractors = sorted(item.name.replace(\".py\", \"\").replace(\"_\", \"-\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/opencv_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.opencv_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[51, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/s3fd.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3": {"func": {"finalize_predictions": {"(S3fd, ?) -> list / (S3fd, [?]) -> list": [[232, "    def finalize_predictions(self, bounding_boxes_scales):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.__ini": {"param": {"model_path": {"?": [[217, "    def __init__(self, model_path, model_kwargs, allow_growth, confidence):"]]}, "allow_growth": {"?": [[217, "    def __init__(self, model_path, model_kwargs, allow_growth, confidence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sqrt.call": {"param": {"x": {"?": [[177, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.get_config": {"param": {"self": {"O2K_Slice": [[97, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Div": {"func": {"call": {"(O2K_Div, ?) -> ?": [[211, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.get_config": {"param": {"self": {"O2K_ConstantLayer": [[200, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer": {"func": {"get_config": {"O2K_ReduceLayer -> None": [[148, "    def get_config(self):"]]}, "call": {"(O2K_ReduceLayer, ?) -> None": [[167, "    def call(self, x, *args):"]]}, "__init__": {"? -> ?": [[143, "    def __init__(self, axes=None, keepdims=True, **kwargs):"]]}, "compute_output_shape": {"(O2K_ReduceLayer, ?) -> tuple": [[156, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.compute_output_shape": {"var": {"ax": {"?": [[117, "        for ax, start, end, steps in self.get_slices(len(input_shape)):"]]}, "start": {"?": [[128, "                start = size - start"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.__init": {"param": {"model_kwargs": {"dict": [[217, "    def __init__(self, model_path, model_kwargs, allow_growth, confidence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.__init__": {"param": {"self": {"S3fd": [[217, "    def __init__(self, model_path, model_kwargs, allow_growth, confidence):"]]}, "confidence": {"int": [[217, "    def __init__(self, model_path, model_kwargs, allow_growth, confidence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Pow.ca": {"param": {"self": {"O2K_Pow": [[182, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.softmax": {"param": {"inp": {"None": [[267, "    def softmax(inp, axis):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.ca": {"param": {"self": {"O2K_ReduceLayer": [[167, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.get_config": {"param": {"self": {"O2K_ReduceLayer": [[148, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.D": {"var": {"predictions": {"[?]": [[50, "        predictions = self.model.predict(batch[\"feed\"])"]]}}, "func": {"predict": {"(Detect, ?) -> None": [[48, "    def predict(self, batch):"]]}, "process_output": {"(Detect, ?) -> None": [[55, "    def process_output(self, batch):"]]}, "process_input": {"(Detect, ?) -> None": [[43, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.ca": {"param": {"self": {"O2K_ConstantLayer": [[192, "    def call(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.get_slice": {"param": {"ndims": {"int": [[105, "    def get_slices(self, ndims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sqrt.ca": {"param": {"self": {"O2K_Sqrt": [[177, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.compute_o": {"var": {"input_shape": {"list": [[116, "        input_shape = list(input_shape)"]]}}, "param": {"input_shape": {"?": [[115, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sum": {"func": {"call": {"(O2K_Sum, ?) -> ?": [[172, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.finalize_predict": {"param": {"bounding_boxes_scales": {"[?]": [[232, "    def finalize_predictions(self, bounding_boxes_scales):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Pow.call": {"param": {"x": {"?": [[182, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.process_outpu": {"param": {"batch": {"?": [[55, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.softm": {"param": {"axis": {"int": [[267, "    def softmax(inp, axis):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ElementwiseLayer.compute_output_shape": {"var": {"rprod": {"?": [[80, "        rprod = np.prod(list(filter(bool, input_shape[1])))"]]}, "ldims": {"int": [[73, "        ldims = len(input_shape[0])"]]}, "lprod": {"?": [[79, "        lprod = np.prod(list(filter(bool, input_shape[0])))"]]}, "rdims": {"int": [[74, "        rdims = len(input_shape[1])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.prepare_batch": {"param": {"self": {"S3fd": [[226, "    def prepare_batch(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.__ini": {"param": {"constant_obj": {"?": [[187, "    def __init__(self, constant_obj, dtype, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.compute_output_shape": {"var": {"i": {"?": [[160, "        for i in sorted(self._axes, reverse=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sli": {"func": {"compute_output_shape": {"(O2K_Slice, ?) -> tuple": [[115, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3f": {"class": {"O2K_Add": {"<O2K_Add>": [[84, "class O2K_Add(O2K_ElementwiseLayer):"]]}, "O2K_ReduceLayer": {"<O2K_ReduceLayer>": [[142, "class O2K_ReduceLayer(keras.engine.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ElementwiseLayer.compute_o": {"param": {"input_shape": {"?": [[71, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.call": {"var": {"x": {"?": [[138, "        x = x[tuple(slices)]"]]}, "ax_map": {"dict": [[135, "        ax_map = dict((x[0], slice(*x[1:])) for x in self.get_slices(K.ndim(x)))"]]}, "shape": {"?": [[136, "        shape = K.int_shape(x)"]]}}, "param": {"x": {"?": [[134, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.compute_o": {"param": {"input_shape": {"?": [[197, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.get_": {"var": {"config": {"?": [[149, "        config = super(O2K_ReduceLayer, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ElementwiseLayer.compute_output_shap": {"param": {"self": {"O2K_ElementwiseLayer": [[71, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.call": {"param": {"x": {"?": [[167, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd._post_proc": {"var": {"stride": {"int": [[252, "            stride = 2 ** (i + 2)    # 4,8,16,32,64,128"]]}}, "param": {"self": {"S3fd": [[243, "    def _post_process(self, bboxlist):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sum.ca": {"param": {"self": {"O2K_Sum": [[172, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.__init__": {"param": {"self": {"Detect": [[20, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.process_output": {"param": {"self": {"Detect": [[55, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sqrt": {"func": {"call": {"(O2K_Sqrt, ?) -> ?": [[177, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ElementwiseLayer.ca": {"param": {"self": {"O2K_ElementwiseLayer": [[68, "    def call(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.predict": {"param": {"self": {"Detect": [[48, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3f": {"func": {"decode": {"(?, ?) -> None": [[272, "    def decode(loc, priors):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.get_": {"var": {"config": {"?": [[98, "        config = super(O2K_Slice, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Add.call": {"param": {"x": {"?": [[85, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.init": {"var": {"model_kwargs": {"dict": [[34, "        model_kwargs = dict(custom_objects=dict(O2K_Add=O2K_Add,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd._post_process": {"var": {"box": {"None": [[260, "                    box = self.decode(loc, priors)"]]}, "loc": {"?": [[258, "                    loc = np.ascontiguousarray(oreg[0, :, hindex, windex]).reshape((1, 4))"]]}, "i": {"int": [[248, "        for i in range(len(bboxlist) // 2):"], [250, "        for i in range(len(bboxlist) // 2):"]]}, "axc": {"int": [[255, "                axc, ayc = stride / 2 + windex * stride, stride / 2 + hindex * stride"]]}, "x_1": {"?": [[261, "                    x_1, y_1, x_2, y_2 = box[0] * 1.0"]]}, "retval": {"list": [[247, "        retval = list()"]]}, "return_numpy": {"?": [[263, "        return_numpy = np.array(retval) if len(retval) != 0 else np.zeros((1, 5))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.__init__": {"param": {"dtype": {"?": [[187, "    def __init__(self, constant_obj, dtype, **kwargs):"]]}, "self": {"O2K_ConstantLayer": [[187, "    def __init__(self, constant_obj, dtype, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Div.call": {"param": {"x": {"?": [[211, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Div.ca": {"param": {"self": {"O2K_Div": [[211, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.compute_output_shap": {"var": {"end": {"?": [[130, "                end = size - end"]]}, "size": {"?": [[118, "            size = input_shape[ax]"]]}}, "param": {"self": {"O2K_Slice": [[115, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Pow": {"func": {"call": {"(O2K_Pow, ?) -> ?": [[182, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.process_inpu": {"param": {"batch": {"?": [[43, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.predi": {"param": {"batch": {"?": [[48, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.process_input": {"param": {"self": {"Detect": [[43, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.compute_o": {"param": {"input_shape": {"?": [[156, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detec": {"func": {"init_model": {"Detect -> None": [[31, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.init_model": {"var": {"confidence": {"int": [[33, "        confidence = self.config[\"confidence\"] / 100"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.decod": {"var": {"variances": {"[float]": [[284, "        variances = [0.1, 0.2]"]]}, "boxes": {"?": [[285, "        boxes = np.concatenate((priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.get_": {"var": {"config": {"?": [[201, "        config = super(O2K_ConstantLayer, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.finalize_prediction": {"var": {"bboxlist": {"None": [[239, "            bboxlist = self._nms(boxes, 0.5)"]], "[None]": [[237, "            bboxlist = [scale[img:img+1] for scale in bounding_boxes_scales]"]]}, "boxes": {"None": [[238, "            boxes = self._post_process(bboxlist)"]]}, "batch_size": {"[int]": [[235, "        batch_size = range(bounding_boxes_scales[0].shape[0])"]]}}, "param": {"self": {"S3fd": [[232, "    def finalize_predictions(self, bounding_boxes_scales):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.decode": {"param": {"loc": {"?": [[272, "    def decode(loc, priors):"]]}, "priors": {"?": [[272, "    def decode(loc, priors):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd._nms": {"var": {"vote": {"?": [[311, "                vote = np.average(boxes[overlap_set, :4], axis=0, weights=boxes[overlap_set, 4])"]]}, "max_of_xy": {"?": [[302, "            max_of_xy = np.maximum(boxes[best, :2], boxes[rest, :2])"]]}, "iou": {"?": [[306, "            iou = intersection_areas / (areas[best] + areas[rest] - intersection_areas)"]]}, "min_of_xy": {"?": [[303, "            min_of_xy = np.minimum(boxes[best, 2:4], boxes[rest, 2:4])"]]}, "width_height": {"?": [[304, "            width_height = np.maximum(0, min_of_xy - max_of_xy + 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.ca": {"var": {"slices": {"[?]": [[137, "        slices = [(ax_map[a] if a in ax_map else slice(None)) for a in range(len(shape))]"]]}}, "param": {"self": {"O2K_Slice": [[134, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.__in": {"var": {"git_model_id": {"int": [[21, "        git_model_id = 11"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd": {"func": {"prepare_batch": {"(S3fd, ?) -> None": [[226, "    def prepare_batch(self, batch):"]]}, "_post_process": {"(S3fd, ?) -> None / (S3fd, [None]) -> None": [[243, "    def _post_process(self, bboxlist):"]]}, "_nms": {"(None, float) -> None / (?, ?) -> None": [[292, "    def _nms(boxes, threshold):"]]}, "softmax": {"(?, ?) -> None / (?, int) -> None / (None, int) -> None": [[267, "    def softmax(inp, axis):"]]}, "__init__": {"? -> ?": [[217, "    def __init__(self, model_path, model_kwargs, allow_growth, confidence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sl": {"func": {"get_config": {"O2K_Slice -> None": [[97, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.__init__": {"param": {"starts": {"?": [[90, "    def __init__(self, starts, ends, axes=None, steps=None, **kwargs):"]]}, "self": {"O2K_Slice": [[90, "    def __init__(self, starts, ends, axes=None, steps=None, **kwargs):"]]}, "axes": {"None": [[90, "    def __init__(self, starts, ends, axes=None, steps=None, **kwargs):"]]}, "steps": {"None": [[90, "    def __init__(self, starts, ends, axes=None, steps=None, **kwargs):"]]}, "ends": {"?": [[90, "    def __init__(self, starts, ends, axes=None, steps=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice": {"func": {"call": {"(O2K_Slice, ?) -> None": [[134, "    def call(self, x, *args):"]]}, "__init__": {"? -> ?": [[90, "    def __init__(self, starts, ends, axes=None, steps=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd._post_p": {"var": {"score": {"?": [[256, "                score = ocls[0, 1, hindex, windex]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.compute_output_shap": {"param": {"self": {"O2K_ConstantLayer": [[197, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.init_mod": {"param": {"self": {"Detect": [[31, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.prepare_": {"var": {"batch": {"?": [[228, "        batch = batch - self.average_img"], [229, "        batch = batch.transpose(0, 3, 1, 2)"]]}}, "param": {"batch": {"?": [[226, "    def prepare_batch(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s": {"class": {"S3fd": {"<S3fd>": [[215, "class S3fd(KSession):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ElementwiseLayer": {"func": {"call": {"O2K_ElementwiseLayer -> None": [[68, "    def call(self, *args):"]]}, "__init__": {"? -> ?": [[65, "    def __init__(self, **kwargs):"]]}, "compute_output_shape": {"(O2K_ElementwiseLayer, ?) -> None": [[71, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd._nm": {"var": {"retained_box_indices": {"list": [[294, "        retained_box_indices = list()"]]}, "non_overlapping_boxes": {"?": [[315, "            non_overlapping_boxes = (iou <= threshold).nonzero()[0]"]]}, "rest": {"?": [[300, "            rest = ranked_indices[1:]"]]}, "ranked_indices": {"?": [[297, "        ranked_indices = boxes[:, 4].argsort()[::-1]"], [316, "            ranked_indices = ranked_indices[non_overlapping_boxes + 1]"]]}, "overlapping_boxes": {"?": [[308, "            overlapping_boxes = (iou > threshold).nonzero()[0]"]]}, "overlap_set": {"?": [[310, "                overlap_set = ranked_indices[overlapping_boxes + 1]"]]}, "intersection_areas": {"?": [[305, "            intersection_areas = width_height[:, 0] * width_height[:, 1]"]]}, "best": {"?": [[299, "            best = ranked_indices[0]"]]}, "areas": {"int": [[296, "        areas = (boxes[:, 2] - boxes[:, 0] + 1) * (boxes[:, 3] - boxes[:, 1] + 1)"]]}}, "param": {"threshold": {"float": [[292, "    def _nms(boxes, threshold):"]]}, "boxes": {"None": [[292, "    def _nms(boxes, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer.call": {"var": {"data": {"?": [[194, "        data = K.constant(self._constant, dtype=self._dtype)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd": {"class": {"O2K_Sum": {"<O2K_Sum>": [[171, "class O2K_Sum(O2K_ReduceLayer):"]]}, "Detect": {"<Detect>": [[18, "class Detect(Detector):"]]}, "O2K_Slice": {"<O2K_Slice>": [[89, "class O2K_Slice(keras.engine.Layer):"]]}, "O2K_Div": {"<O2K_Div>": [[209, "class O2K_Div(O2K_ElementwiseLayer):"]]}, "O2K_ElementwiseLayer": {"<O2K_ElementwiseLayer>": [[64, "class O2K_ElementwiseLayer(keras.engine.Layer):"]]}, "O2K_Sqrt": {"<O2K_Sqrt>": [[176, "class O2K_Sqrt(keras.engine.Layer):"]]}, "O2K_ConstantLayer": {"<O2K_ConstantLayer>": [[186, "class O2K_ConstantLayer(keras.engine.Layer):"]]}, "O2K_Pow": {"<O2K_Pow>": [[181, "class O2K_Pow(keras.engine.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.__init__": {"param": {"self": {"{O2K_ReduceLayer | O2K_Sum}": [[143, "    def __init__(self, axes=None, keepdims=True, **kwargs):"]]}, "axes": {"None": [[143, "    def __init__(self, axes=None, keepdims=True, **kwargs):"]]}, "keepdims": {"bool": [[143, "    def __init__(self, axes=None, keepdims=True, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Add.ca": {"param": {"self": {"O2K_Add": [[85, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Sum.call": {"param": {"x": {"?": [[172, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ConstantLayer": {"func": {"get_config": {"O2K_ConstantLayer -> None": [[200, "    def get_config(self):"]]}, "call": {"O2K_ConstantLayer -> None": [[192, "    def call(self, *args):"]]}, "__init__": {"? -> ?": [[187, "    def __init__(self, constant_obj, dtype, **kwargs):"]]}, "compute_output_shape": {"(O2K_ConstantLayer, ?) -> ?": [[197, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.Detect.__init": {"var": {"model_filename": {"str": [[22, "        model_filename = \"s3fd_keras_v1.h5\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_S": {"func": {"get_slices": {"(O2K_Slice, ?) -> list / (O2K_Slice, int) -> list": [[105, "    def get_slices(self, ndims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ElementwiseLayer.__init__": {"param": {"self": {"{O2K_Add | O2K_Div | O2K_ElementwiseLayer}": [[65, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Add": {"func": {"call": {"(O2K_Add, ?) -> ?": [[85, "    def call(self, x, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd.finalize_predictions": {"var": {"img": {"int": [[236, "        for img in batch_size:"]]}, "ret": {"list": [[234, "        ret = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_ReduceLayer.compute_output_shap": {"var": {"ret": {"list": [[159, "        ret = list(input_shape)"]]}}, "param": {"self": {"O2K_ReduceLayer": [[156, "    def compute_output_shape(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.O2K_Slice.get_slic": {"var": {"axes": {"None": [[106, "        axes = self._axes"]], "tuple": [[109, "            axes = tuple(range(ndims))"]]}, "steps": {"None": [[107, "        steps = self._steps"]], "?": [[111, "            steps = (1,) * len(axes)"]]}}, "param": {"self": {"O2K_Slice": [[105, "    def get_slices(self, ndims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd.S3fd._post_proce": {"var": {"priors": {"?": [[259, "                    priors = np.array([[axc / 1.0, ayc / 1.0, stride * 4 / 1.0, stride * 4 / 1.0]])"]]}, "ocls": {"None": [[251, "            ocls, oreg = bboxlist[i * 2], bboxlist[i * 2 + 1]"]]}, "poss": {"[?]": [[253, "            poss = zip(*np.where(ocls[:, 1, :, :] > 0.05))"]]}}, "param": {"bboxlist": {"[None]": [[243, "    def _post_process(self, bboxlist):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/memory_saving_gradients.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradien": {"func": {"capture_ops": {"() -> None": [[376, "def capture_ops():"]]}, "tf_toposort": {"(list, None) -> [list] / (?, None) -> [list] / ([?], None) -> [list]": [[349, "def tf_toposort(ts_inp, within_ops=None):"]]}, "_is_iterable": {"[?] -> bool / ? -> bool": [[407, "def _is_iterable(obj):"]]}, "_to_ops": {"[?] -> {[?] | [None]} / ? -> [None]": [[400, "def _to_ops(iterable):"]]}, "fast_backward_ops": {"(?, ?, ?) -> list / ([?], [?], list) -> list / ([?], [?], [<list>]) -> list": [[368, "def fast_backward_ops(within_ops, seed_ops, stop_at_ts):"]]}, "format_ops": {"(?, bool) -> {[str] | str}": [[422, "def format_ops(ops, sort_outputs=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients._unsparsify": {"var": {"indices": {"?": [[332, "            indices = var_x.indices"], [334, "                indices = tf.expand_dims(indices, -1)"]]}}, "param": {"var_x": {"?": [[327, "        def _unsparsify(var_x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradi": {"param": {"tensor_or_op": {"?": [[393, "def _to_op(tensor_or_op):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients.fixdims": {"param": {"t": {"?": [[138, "            def fixdims(t):  # tf.Dimension values are not compatible with int, convert manually"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.my_add_control": {"param": {"inputs_to_do_before": {"[?]": [[434, "def my_add_control_inputs(wait_to_do_ops, inputs_to_do_before):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.captur": {"var": {"scope_name": {"str": [[384, "    scope_name = str(micros)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.my_add_control_inpu": {"param": {"wait_to_do_ops": {"?": [[434, "def my_add_control_inputs(wait_to_do_ops, inputs_to_do_before):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients._to_ops": {"param": {"iterable": {"[?]": [[400, "def _to_ops(iterable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.format_op": {"var": {"lst": {"[str]": [[427, "        lst = [(op.name if hasattr(op, \"name\") else str(op)) for op in ops]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_sav": {"var": {"tf_gradients": {"?": [[50, "tf_gradients = tf_grads_lib.gradients"]]}}, "func": {"gradients_speed": {"(?, ?, None) -> None": [[56, "def gradients_speed(ys, xs, grad_ys=None, **kwargs):"]]}, "gradients_collection": {"(?, ?, None) -> None": [[64, "def gradients_collection(ys, xs, grad_ys=None, **kwargs):"]]}, "gradients_memory": {"(?, ?, None) -> None": [[60, "def gradients_memory(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.fast_backwar": {"var": {"bwd_ops": {"?": [[370, "    bwd_ops = set(ge.get_backward_walk_ops(seed_ops, stop_at_ts=stop_at_ts))"]]}}, "param": {"seed_ops": {"[?]": [[368, "def fast_backward_ops(within_ops, seed_ops, stop_at_ts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients_speed": {"param": {"xs": {"?": [[56, "def gradients_speed(ys, xs, grad_ys=None, **kwargs):"]]}, "ys": {"?": [[56, "def gradients_speed(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradie": {"var": {"bwd_inputs": {"[?]": [[156, "            bwd_inputs = [t for op in bwd_ops for t in op.inputs]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.my_add_control_inputs": {"var": {"tf_op": {"?": [[436, "    for tf_op in wait_to_do_ops:"]]}, "ctl_inp": {"[?]": [[437, "        ctl_inp = [i for i in inputs_to_do_before"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients": {"var": {"origin_op": {"?": [[247, "    for origin_op, op in info._transformed_ops.items():"], [296, "        for origin_op, op in info._transformed_ops.items():"]]}, "b": {"?": [[168, "                    b = set(ge.get_backward_walk_ops(t.op, inclusive=True, within_ops=fwd_ops))"]]}, "grad_node": {"?": [[234, "            grad_node = tf.stop_gradient(x, name=x.op.name+\"_sg\")"], [236, "            grad_node = tf.stop_gradient(x)"]]}, "f": {"?": [[169, "                    f = set(ge.get_forward_walk_ops(t.op, inclusive=False, within_ops=fwd_ops))"]]}, "j": {"int": [[339, "        for j in range(len(xs)):"]]}, "b_inp": {"?": [[171, "                    b_inp = set([inp for op in b for inp in op.inputs]).intersection(ts_all)"]]}, "N": {"int": [[192, "            N = len(ts_filtered)"]]}, "t": {"?": [[167, "                for t in ts:"]]}, "x": {"<list>": [[232, "    for x in checkpoints:"]]}, "dv": {"?": [[260, "    dv = tf_gradients(ys=copied_ys, xs=boundary+xs, grad_ys=grad_ys, **kwargs)"], [307, "        dv = tf_gradients(boundary,"]]}, "f_inp": {"?": [[172, "                    f_inp = set([inp for op in f for inp in op.inputs]).intersection(ts_all)"]]}, "boundary": {"[?]": [[305, "        boundary = [info._transformed_ops[r.op]._outputs[0] for r in ts]"]], "list": [[259, "    boundary = list(checkpoints_disconnected.values())"]]}, "_": {"?": [[246, "    _, info = ge.copy_with_input_replacements(ge.sgv(ops_to_copy), {})"], [295, "        _, info = ge.copy_with_input_replacements(ge.sgv(ops_to_copy), {})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.grad": {"var": {"xs_intersect_checkpoints": {"?": [[210, "    xs_intersect_checkpoints = set(xs).intersection(set(checkpoints))"]]}, "ys_intersect_checkpoints": {"?": [[214, "    ys_intersect_checkpoints = set(ys).intersection(set(checkpoints))"]]}, "checkpoints": {"list": [[202, "    checkpoints = list(set(checkpoints).intersection(ts_all))"], [224, "    checkpoints = list(set(checkpoints) - set(ys) - set(xs))"]], "[<list>]": [[194, "                checkpoints = sorted_bottlenecks"], [197, "                checkpoints = sorted_bottlenecks[step::step]"]], "?": [[129, "            checkpoints = tf.get_collection('checkpoints')"], [133, "            checkpoints = ge.filter_ts_from_regex(fwd_ops, 'conv2d|Conv|MatMul')"]]}, "checkpoints_other": {"[<list>]": [[282, "        checkpoints_other = [r for r in checkpoints if r not in ts]"]]}}, "param": {"checkpoints": {"str": [[69, "              grad_ys=None, checkpoints='collection', **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.tf_toposor": {"var": {"outp": {"?": [[355, "        for outp in tf_op.outputs:"]]}, "tf_op": {"?": [[354, "    for tf_op in all_ops:"]]}, "lst": {"?": [[361, "    for lst in sorted_ts:"]]}}, "param": {"within_ops": {"None": [[349, "def tf_toposort(ts_inp, within_ops=None):"]]}, "ts_inp": {"{[?] | list}": [[349, "def tf_toposort(ts_inp, within_ops=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.capture_ops": {"var": {"graph": {"?": [[389, "    graph = tf.get_default_graph()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.tf_toposort": {"var": {"keep": {"list": [[362, "        keep = list(set(lst).intersection(ts_inp))"]]}, "deps": {"dict": [[353, "    deps = {}"]]}, "all_ops": {"?": [[351, "    all_ops = ge.get_forward_walk_ops([x.op for x in ts_inp], within_ops=within_ops)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients_spee": {"param": {"grad_ys": {"None": [[56, "def gradients_speed(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients_memory": {"param": {"xs": {"?": [[60, "def gradients_memory(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradient": {"var": {"grad_ys": {"None": [[69, "              grad_ys=None, checkpoints='collection', **kwargs):"]]}, "xs_ops": {"{[?] | [None]}": [[116, "    xs_ops = _to_ops(xs)"]]}, "copied_ops": {"?": [[249, "    copied_ops = info._transformed_ops.values()"], [298, "        copied_ops = info._transformed_ops.values()"]]}, "bwd_ops": {"?": [[101, "    bwd_ops = ge.get_backward_walk_ops([y.op for y in ys],"]]}, "copied_ys": {"[?]": [[258, "    copied_ys = [info._transformed_ops[y.op]._outputs[0] for y in ys]"]]}, "d_xs": {"?": [[276, "    d_xs = dv[len(checkpoints_disconnected):]"]]}, "fwd_ops": {"[?]": [[113, "    fwd_ops = [op for op in fwd_ops if op.inputs]"], [117, "    fwd_ops = [op for op in fwd_ops if op not in xs_ops]"], [118, "    fwd_ops = [op for op in fwd_ops if '/assign' not in op.name]"], [119, "    fwd_ops = [op for op in fwd_ops if '/Assign' not in op.name]"], [120, "    fwd_ops = [op for op in fwd_ops if '/read' not in op.name]"]], "?": [[107, "    fwd_ops = ge.get_forward_walk_ops([x.op for x in xs],"]]}, "xs": {"[?]": [[99, "        xs = [xs]"]]}, "ys": {"[?]": [[97, "        ys = [ys]"]]}, "d_xs_new": {"?": [[338, "        d_xs_new = dv[len(checkpoints_other):]"]]}}, "param": {"grad_ys": {"None": [[69, "              grad_ys=None, checkpoints='collection', **kwargs):"]]}, "xs": {"?": [[69, "              grad_ys=None, checkpoints='collection', **kwargs):"]]}, "ys": {"?": [[69, "              grad_ys=None, checkpoints='collection', **kwargs):"]]}}, "func": {"_unsparsify": {"? -> None": [[327, "        def _unsparsify(var_x):"]]}, "fixdims": {"? -> [int]": [[138, "            def fixdims(t):  # tf.Dimension values are not compatible with int, convert manually"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.tf_top": {"var": {"ts_sorted_lists": {"[list]": [[360, "    ts_sorted_lists = []"]]}, "sorted_ts": {"?": [[357, "    sorted_ts = toposort(deps)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients_collection": {"param": {"grad_ys": {"None": [[64, "def gradients_collection(ys, xs, grad_ys=None, **kwargs):"]]}, "xs": {"?": [[64, "def gradients_collection(ys, xs, grad_ys=None, **kwargs):"]]}, "ys": {"?": [[64, "def gradients_collection(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients_memo": {"param": {"grad_ys": {"None": [[60, "def gradients_memory(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.debug_prin": {"var": {"formatted_args": {"[{[str] | str}]": [[418, "    formatted_args = [format_ops(arg) for arg in args]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.format_": {"param": {"ops": {"?": [[422, "def format_ops(ops, sort_outputs=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients": {"var": {"util": {"?": [[42, "util = sys.modules[__name__]"]]}, "logger": {"?": [[39, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}, "MIN_CHECKPOINT_NODE_SIZE": {"int": [[52, "MIN_CHECKPOINT_NODE_SIZE = 1024    # use lower value during testing"]]}}, "func": {"_to_op": {"? -> None": [[393, "def _to_op(tensor_or_op):"]]}, "debug_print": {"? -> None / str -> None": [[416, "def debug_print(msg, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradien": {"var": {"ts_filtered": {"list": [[158, "            ts_filtered = list(set(bwd_inputs).intersection(ts_all))"]]}, "substitute_backprops": {"[?]": [[306, "        substitute_backprops = [d_checkpoints[r] for r in ts]"]]}, "ts": {"list": [[280, "    for ts in checkpoints_sorted_lists[::-1]:"]], "{[?] | list}": [[163, "            for ts in [ts_filtered, ts_all]:"]]}, "ts_all": {"[?]": [[122, "    ts_all = [t for t in ts_all if '/read' not in t.name]"], [143, "            ts_all = [t for t in ts_all if np.prod(fixdims(t.shape)) > MIN_CHECKPOINT_NODE_SIZE]"], [144, "            ts_all = [t for t in ts_all if 'L2Loss' not in t.name]"], [145, "            ts_all = [t for t in ts_all if 'entropy' not in t.name]"], [146, "            ts_all = [t for t in ts_all if 'FusedBatchNorm' not in t.name]"], [147, "            ts_all = [t for t in ts_all if 'Switch' not in t.name]"], [148, "            ts_all = [t for t in ts_all if 'dropout' not in t.name]"], [150, "            ts_all = [t for t in ts_all if 'Cast' not in t.name]"]], "?": [[121, "    ts_all = ge.filter_ts(fwd_ops, True)  # get the tensors"], [123, "    ts_all = set(ts_all) - set(xs) - set(ys)"]]}, "step": {"int": [[196, "                step = int(np.ceil(len(bottleneck_ts) / np.sqrt(N)))"]]}, "ops_to_copy": {"list": [[240, "    ops_to_copy = fast_backward_ops(seed_ops=[y.op for y in ys],"], [287, "        ops_to_copy = fast_backward_ops(within_ops=fwd_ops,"]]}, "wait_to_do_ops": {"?": [[268, "    wait_to_do_ops = list(copied_ops) + [g.op for g in dv if g is not None]"], [316, "        wait_to_do_ops = list(copied_ops) + [g.op for g in dv if g is not None]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_": {"func": {"gradients": {"(?, ?, None, str) -> None": [[68, "def gradients(ys, xs,   # pylint: disable: too-many-statements, too-many-branches"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.forma": {"param": {"sort_outputs": {"bool": [[422, "def format_ops(ops, sort_outputs=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gra": {"var": {"checkpoints_sorted_lists": {"[list]": [[279, "    checkpoints_sorted_lists = tf_toposort(checkpoints, within_ops=fwd_ops)"]]}, "bottlenecks_sorted_lists": {"[list]": [[188, "            bottlenecks_sorted_lists = tf_toposort(bottleneck_ts, within_ops=fwd_ops)"]]}, "inputs_to_do_before": {"[?]": [[265, "    inputs_to_do_before = [y.op for y in ys]"], [315, "        inputs_to_do_before = [d_checkpoints[r].op for r in ts]"]]}, "checkpoints_disconnected": {"dict": [[231, "    checkpoints_disconnected = {}"]]}, "checkpoints_disconnected_other": {"[?]": [[283, "        checkpoints_disconnected_other = [checkpoints_disconnected[r] for r in checkpoints_other]"]]}, "d_checkpoints": {"dict": [[273, "    d_checkpoints = {r: dr for r, dr in zip(checkpoints_disconnected.keys(),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradie": {"func": {"my_add_control_inputs": {"(?, [?]) -> None / (?, ?) -> None": [[434, "def my_add_control_inputs(wait_to_do_ops, inputs_to_do_before):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradients_memor": {"param": {"ys": {"?": [[60, "def gradients_memory(ys, xs, grad_ys=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.fast_backward_": {"var": {"ops": {"?": [[371, "    ops = bwd_ops.intersection(within_ops).difference([t.op for t in stop_at_ts])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.gradi": {"var": {"sorted_bottlenecks": {"[<list>]": [[189, "            sorted_bottlenecks = [t for ts in bottlenecks_sorted_lists for t in ts]"]]}, "bottleneck_ts": {"[?]": [[166, "                bottleneck_ts = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.debug_print": {"param": {"msg": {"str": [[416, "def debug_print(msg, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.fast_backward": {"param": {"stop_at_ts": {"{[<list>] | list}": [[368, "def fast_backward_ops(within_ops, seed_ops, stop_at_ts):"]]}, "within_ops": {"[?]": [[368, "def fast_backward_ops(within_ops, seed_ops, stop_at_ts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients._is_iterable": {"var": {"_": {"?": [[410, "        _ = iter(obj)"]]}}, "param": {"obj": {"[?]": [[407, "def _is_iterable(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.capture": {"var": {"op_list": {"[?]": [[385, "    op_list = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.memory_saving_gradients.capture_op": {"var": {"micros": {"int": [[383, "    micros = int(time.time()*10**6)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/setup.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tips.pip": {"param": {"self": {"Tips": [[795, "    def pip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.process_argument": {"param": {"self": {"Environment": [[107, "    def process_arguments(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output.info": {"var": {"trm": {"str": [[323, "        trm = \"INFO    \""], [325, "            trm = \"{}INFO   {} \".format(self.green, self.default_color)"]]}}, "param": {"text": {"str": [[321, "    def info(self, text):"]]}, "self": {"Output": [[321, "    def info(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.check_pip": {"param": {"self": {"Environment": [[184, "    def check_pip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Ch": {"func": {"cuda_ask_enable": {"Checks -> None": [[426, "    def cuda_ask_enable(self):"]]}, "docker_ask_enable": {"Checks -> None": [[400, "    def docker_ask_enable(self):"]]}, "docker_tips": {"Checks -> None": [[419, "    def docker_tips(self):"]]}, "cuda_keys_windows": {"Checks -> [<list>]": [[384, "    def cuda_keys_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.pip_installer": {"var": {"msg": {"str": [[694, "        msg = \"Installing {}\".format(package)"]]}, "pipexe": {"[str]": [[686, "        pipexe = [sys.executable, \"-m\", \"pip\"]"]]}}, "param": {"self": {"Install": [[684, "    def pip_installer(self, package):"]]}, "package": {"str": [[684, "    def pip_installer(self, package):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setu": {"class": {"Tips": {"<Tips>": [[704, "class Tips():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.conda_installer": {"var": {"shell": {"bool": [[668, "        shell = self.env.os_version[0] == \"Windows\""]]}, "condaexe": {"[str]": [[661, "        condaexe = [\"conda\", \"install\", \"-y\"]"]]}, "success": {"?": [[660, "        success = True"], [681, "            success = False"]]}, "package": {"str": [[659, "            package = \"\\\"{}\\\"\".format(package)"]]}}, "param": {"conda_only": {"?": [[655, "    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):"]]}, "self": {"Install": [[655, "    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):"]]}, "channel": {"None": [[655, "    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):"]]}, "package": {"?": [[655, "    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_check_linux": {"var": {"paths": {"?": [[456, "            paths = self.env.ld_library_path.split(\":\")"]]}, "chk": {"str": [[454, "        chk = os.popen(\"ldconfig -p | grep -P \\\"libcudart.so.\\\\d+.\\\\d+\\\" | head -n 1\").read()"], [458, "                chk = os.popen(\"ls {} | grep -P -o \\\"libcudart.so.\\\\d+.\\\\d+\\\" | \""]]}, "cudavers": {"str": [[468, "        cudavers = chk.strip().replace(\"libcudart.so.\", \"\")"]]}, "path": {"?": [[457, "            for path in paths:"]]}}, "param": {"self": {"Checks": [[452, "    def cuda_check_linux(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.process_arguments": {"var": {"arg": {"str": [[109, "        for arg in sys.argv:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.check_python": {"param": {"self": {"Environment": [[165, "    def check_python(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output": {"func": {"info": {"(Output, ?) -> None / (Output, str) -> None": [[321, "    def info(self, text):"]]}, "warning": {"(Output, ?) -> None / (Output, str) -> None": [[328, "    def warning(self, text):"]]}, "error": {"(Output, str) -> None": [[335, "    def error(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.set_config": {"var": {"pypath": {"str": [[293, "        pypath = os.path.dirname(os.path.realpath(__file__))"]]}, "backend": {"str": [[287, "            backend = \"amd\""], [289, "            backend = \"nvidia\""], [291, "            backend = \"cpu\""]]}}, "param": {"self": {"Environment": [[284, "    def set_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.docker_tip": {"param": {"self": {"Checks": [[419, "    def docker_tips(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.output_runtime_info": {"param": {"self": {"Environment": [[176, "    def output_runtime_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_check_window": {"var": {"cuda_keys": {"Checks -> [<list>]": [[476, "        cuda_keys = self.cuda_keys_windows"]]}}, "param": {"self": {"Checks": [[474, "    def cuda_check_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output.warning": {"var": {"trm": {"str": [[330, "        trm = \"WARNING \""], [332, "            trm = \"{}WARNING{} \".format(self.yellow, self.default_color)"]]}}, "param": {"text": {"str": [[328, "    def warning(self, text):"]]}, "self": {"Output": [[328, "    def warning(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.os_version": {"param": {"self": {"Environment": [[67, "    def os_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks": {"var": {"cudnn_checkfile": {"None": [[502, "        cudnn_checkfile = None"]], "?": [[505, "                cudnn_checkfile = checkfile"]]}}, "func": {"cudnn_check": {"Checks -> None": [[487, "    def cudnn_check(self):"]]}, "cuda_check_linux": {"Checks -> None": [[452, "    def cuda_check_linux(self):"]]}, "cuda_check": {"Checks -> None": [[436, "    def cuda_check(self):"]]}, "__init__": {"? -> ?": [[347, "    def __init__(self, environment):"]]}, "docker_confirm": {"Checks -> None": [[410, "    def docker_confirm(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.docker_ask_enab": {"param": {"self": {"Checks": [[400, "    def docker_ask_enable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.__init__": {"param": {"self": {"Environment": [[31, "    def __init__(self, logger=None, updater=False):"]]}, "updater": {"?": [[31, "    def __init__(self, logger=None, updater=False):"]]}, "logger": {"None": [[31, "    def __init__(self, logger=None, updater=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.ask_continue": {"var": {"inp": {"?": [[587, "        inp = input(\"Please ensure your System Dependencies are met. Continue? [y/N] \")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.encoding": {"param": {"self": {"Environment": [[62, "    def encoding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tips.__init__": {"param": {"self": {"Tips": [[706, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_installed_packages": {"var": {"item": {"?": [[219, "            item = pkg.split(\"==\")"]]}, "chk": {"?": [[212, "        chk = Popen(\"\\\"{}\\\" -m pip freeze\".format(sys.executable),"]]}, "pkg": {"?": [[216, "        for pkg in installed:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.check_conda_missing_de": {"var": {"pkg": {"str": [[615, "        for pkg in self.env.conda_required_packages:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_ask_enab": {"param": {"self": {"Checks": [[426, "    def cuda_ask_enable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Outpu": {"func": {"__indent_text_block": {"? -> str / str -> str": [[310, "    def __indent_text_block(text):"]]}, "__init__": {"? -> ?": [[302, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output.error": {"param": {"text": {"str": [[335, "    def error(self, text):"]]}, "self": {"Output": [[335, "    def error(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_required_packages": {"var": {"req_file": {"str": [[129, "        for req_file in req_files:"]]}, "pypath": {"str": [[126, "        pypath = os.path.dirname(os.path.realpath(__file__))"]]}, "package": {"str": [[132, "                for package in req.readlines():"], [133, "                    package = package.strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.install_python_packages": {"var": {"pkg": {"str": [[638, "                pkg = \"{}{}\".format(pkg, \",\".join(\"\".join(spec) for spec in version))"]], "?": [[636, "        for pkg, version in self.env.missing_packages:"], [641, "                pkg = CONDA_MAPPING.get(pkg, (pkg, None))"], [643, "                pkg = pkg[0]"]]}, "channel": {"None": [[642, "                channel = None if len(pkg) != 2 else pkg[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cudnn_checkfiles_linux": {"var": {"chk": {"str": [[538, "        chk = os.popen(\"ldconfig -p | grep -P \\\"libcudnn.so.\\\\d+\\\" | head -n 1\").read()"], [539, "        chk = chk.strip().replace(\"libcudnn.so.\", \"\")"]]}, "cudnn_path": {"str": [[543, "        cudnn_path = chk[chk.find(\"=>\") + 3:chk.find(\"libcudnn\") - 1]"], [544, "        cudnn_path = cudnn_path.replace(\"lib\", \"include\")"]]}, "cudnn_checkfiles": {"[str]": [[545, "        cudnn_checkfiles = [os.path.join(cudnn_path, \"cudnn_v{}.h\".format(cudnn_vers)),"]]}, "cudnn_vers": {"str": [[542, "        cudnn_vers = chk[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cudnn_": {"var": {"checkfile": {"?": [[503, "        for checkfile in cudnn_checkfiles:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.check_system": {"param": {"self": {"Environment": [[155, "    def check_system(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.upgrade_": {"var": {"pipexe": {"[str]": [[199, "            pipexe = [sys.executable, \"-m\", \"pip\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.ld_library_path": {"param": {"self": {"Environment": [[83, "    def ld_library_path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_ask_enable": {"var": {"i": {"?": [[428, "        i = input(\"Enable  CUDA? [Y/n] \")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output.__indent_text_block": {"var": {"i": {"int": [[315, "            for i in range(1, len(lines)-1):"]]}, "lines": {"[str]": [[312, "        lines = text.splitlines()"]]}, "out": {"str": [[314, "            out = lines[0] + \"\\r\\n\""], [316, "                out = out + \"        \" + lines[i] + \"\\r\\n\""], [317, "            out = out + \"        \" + lines[-1]"]]}}, "param": {"text": {"str": [[310, "    def __indent_text_block(text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tip": {"func": {"macos": {"Tips -> None": [[778, "    def macos(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.is_virtualenv": {"var": {"prefix": {"str": [[103, "            prefix = os.path.dirname(sys.prefix)"]]}}, "param": {"self": {"Environment": [[97, "    def is_virtualenv(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Env": {"func": {"output_runtime_info": {"Environment -> None": [[176, "    def output_runtime_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_keys_window": {"param": {"self": {"Checks": [[384, "    def cuda_keys_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.set": {"var": {"config_file": {"str": [[294, "        config_file = os.path.join(pypath, \"config\", \".faceswap\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output.__init__": {"param": {"self": {"Output": [[302, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environmen": {"func": {"check_system": {"Environment -> None": [[155, "    def check_system(self):"]]}, "get_required_packages": {"Environment -> None": [[117, "    def get_required_packages(self):"]]}, "update_tf_dep": {"Environment -> None": [[234, "    def update_tf_dep(self):"]]}, "ld_library_path": {"Environment -> None": [[83, "    def ld_library_path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.conda_install": {"param": {"verbose": {"?": [[655, "    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.set_": {"var": {"config": {"dict": [[292, "        config = {\"backend\": backend}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.is_conda": {"param": {"self": {"Environment": [[77, "    def is_conda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environm": {"var": {"installed_packages": {"dict": [[211, "        installed_packages = dict()"]]}}, "func": {"check_python": {"Environment -> None": [[165, "    def check_python(self):"]]}, "get_installed_packages": {"Environment -> dict": [[209, "    def get_installed_packages(self):"]]}, "is_virtualenv": {"Environment -> {bool | int}": [[97, "    def is_virtualenv(self):"]]}, "get_installed_conda_packages": {"Environment -> None": [[223, "    def get_installed_conda_packages(self):"]]}, "set_config": {"Environment -> None": [[284, "    def set_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cudnn_checkfiles_windows": {"var": {"cudnn_checkfile": {"str": [[554, "        cudnn_checkfile = os.path.join(self.env.cuda_path, \"include\", \"cudnn.h\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Chec": {"func": {"amd_ask_enable": {"Checks -> None": [[388, "    def amd_ask_enable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.ask_continu": {"param": {"self": {"Install": [[585, "    def ask_continue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.upgrad": {"var": {"pip_version": {"?": [[206, "        pip_version = pip.__version__"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_required_package": {"var": {"suffix": {"str": [[120, "            suffix = \"amd.txt\""], [122, "            suffix = \"nvidia.txt\""], [124, "            suffix = \"cpu.txt\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_installed_conda_packages": {"var": {"item": {"?": [[231, "            item = pkg.split(\" \")"]]}, "chk": {"str": [[227, "        chk = os.popen(\"conda list\").read()"]]}, "pkg": {"?": [[230, "        for pkg in installed:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.py_version": {"param": {"self": {"Environment": [[72, "    def py_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment": {"func": {"check_permission": {"Environment -> None": [[146, "    def check_permission(self):"]]}, "encoding": {"Environment -> None": [[62, "    def encoding(self):"]]}, "upgrade_pip": {"Environment -> None": [[194, "    def upgrade_pip(self):"]]}, "os_version": {"Environment -> (?, ?)": [[67, "    def os_version(self):"]]}, "is_admin": {"Environment -> bool": [[88, "    def is_admin(self):"]]}, "is_conda": {"Environment -> None": [[77, "    def is_conda(self):"]]}, "py_version": {"Environment -> (?, ?)": [[72, "    def py_version(self):"]]}, "check_pip": {"Environment -> ?": [[184, "    def check_pip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.amd_ask_enab": {"param": {"self": {"Checks": [[388, "    def amd_ask_enable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_required_packa": {"var": {"git_requirements": {"list": [[128, "        git_requirements = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup": {"var": {"TENSORFLOW_REQUIREMENTS": {"dict": [[19, "TENSORFLOW_REQUIREMENTS = {\"==1.12.0\": [\"9.0\", \"7.2\"],"]]}, "CONDA_MAPPING": {"dict": [[22, "CONDA_MAPPING = {"]]}, "INSTALL_FAILED": {"?": [[17, "INSTALL_FAILED = False"]]}, "ENV": {"Environment": [[803, "    ENV = Environment()"]]}}, "class": {"Environment": {"<Environment>": [[29, "class Environment():"]]}, "Checks": {"<Checks>": [[345, "class Checks():"]]}, "Install": {"<Install>": [[558, "class Install():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.docker_confirm": {"param": {"self": {"Checks": [[410, "    def docker_confirm(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.__init__": {"param": {"environment": {"Environment": [[560, "    def __init__(self, environment):"]]}, "self": {"Install": [[560, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install": {"func": {"check_conda_missing_dep": {"Install -> None": [[611, "    def check_conda_missing_dep(self):"]]}, "check_missing_dep": {"Install -> None": [[592, "    def check_missing_dep(self):"]]}, "ask_continue": {"Install -> None": [[585, "    def ask_continue(self):"]]}, "__init__": {"? -> ?": [[560, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.se": {"class": {"Output": {"<Output>": [[300, "class Output():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tips.docker_cuda": {"param": {"self": {"Tips": [[741, "    def docker_cuda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.check_missing_dep": {"var": {"installed_vers": {"?": [[606, "            installed_vers = self.env.installed_packages.get(key, \"\")"]]}, "key": {"?": [[594, "        for key, specs in self.env.required_packages:"], [597, "                key = CONDA_MAPPING.get(key, (key, None))[0]"]]}}, "param": {"self": {"Install": [[592, "    def check_missing_dep(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.update_tf_dep": {"var": {"cudnn_req": {"?": [[244, "            cudnn_req = val[1].split(\".\")"]]}, "custom_tf": {"str": [[276, "        custom_tf = os.path.realpath(os.path.expanduser(custom_tf))"]], "?": [[271, "        custom_tf = input(\"Location of custom tensorflow-gpu wheel (leave \""]]}, "tf_ver": {"None": [[240, "        tf_ver = None"]], "str": [[254, "            tf_ver = \"tensorflow-gpu{}\".format(tf_ver)"]], "?": [[247, "                tf_ver = key"]]}, "cuda_req": {"?": [[243, "            cuda_req = val[0]"]]}, "cudnn_inst": {"[str]": [[241, "        cudnn_inst = self.cudnn_version.split(\".\")"]]}, "key": {"?": [[242, "        for key, val in TENSORFLOW_REQUIREMENTS.items():"]]}}, "param": {"self": {"Environment": [[234, "    def update_tf_dep(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.install_missing_dep": {"param": {"self": {"Install": [[625, "    def install_missing_dep(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Envi": {"func": {"process_arguments": {"Environment -> None": [[107, "    def process_arguments(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Output.erro": {"var": {"trm": {"str": [[338, "        trm = \"ERROR   \""], [340, "            trm = \"{}ERROR  {} \".format(self.red, self.default_color)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tips.maco": {"param": {"self": {"Tips": [[778, "    def macos(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environme": {"func": {"__init__": {"? -> ?": [[31, "    def __init__(self, logger=None, updater=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.__init__": {"param": {"environment": {"Environment": [[347, "    def __init__(self, environment):"]]}, "self": {"Checks": [[347, "    def __init__(self, environment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.install_conda_packages": {"var": {"pkg": {"<list>": [[651, "        for pkg in self.env.conda_missing_packages:"]]}, "channel": {"None": [[652, "            channel = None if len(pkg) != 2 else pkg[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.amd_ask_enable": {"var": {"i": {"?": [[392, "        i = input(\"Enable AMD Support? [y/N] \")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.install_conda_packag": {"param": {"self": {"Install": [[648, "    def install_conda_packages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_check": {"var": {"version": {"?": [[441, "            version = re.search(r\".*release (?P<cuda>\\d+\\.\\d+)\", stdout.decode(self.env.encoding))"]]}, "stdout": {"?": [[439, "        stdout, stderr = chk.communicate()"]]}}, "param": {"self": {"Checks": [[436, "    def cuda_check(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cudnn_checkfiles_window": {"param": {"self": {"Checks": [[549, "    def cudnn_checkfiles_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.is_admin": {"var": {"retval": {"bool": [[91, "            retval = os.getuid() == 0"], [93, "            retval = ctypes.windll.shell32.IsUserAnAdmin() != 0"]]}}, "param": {"self": {"Environment": [[88, "    def is_admin(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.check_permission": {"param": {"self": {"Environment": [[146, "    def check_permission(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tips": {"func": {"pip": {"Tips -> None": [[795, "    def pip(self):"]]}, "docker_no_cuda": {"Tips -> None": [[709, "    def docker_no_cuda(self):"]]}, "__init__": {"? -> ?": [[706, "    def __init__(self):"]]}, "docker_cuda": {"Tips -> None": [[741, "    def docker_cuda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_installed_conda_packag": {"var": {"installed": {"[?]": [[228, "        installed = [re.sub(\" +\", \" \", line.strip())"]]}}, "param": {"self": {"Environment": [[223, "    def get_installed_conda_packages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Tips.docker_no_cuda": {"param": {"self": {"Tips": [[709, "    def docker_no_cuda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.upgrade_pip": {"param": {"self": {"Environment": [[194, "    def upgrade_pip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cudnn_check": {"var": {"patchlevel": {"?": [[522, "                    patchlevel = line[line.rfind(\" \") + 1:].strip()"]]}, "found": {"int": [[512, "        found = 0"]]}, "line": {"?": [[514, "            for line in ofile:"]]}, "major": {"?": [[516, "                    major = line[line.rfind(\" \") + 1:].strip()"]]}, "minor": {"?": [[519, "                    minor = line[line.rfind(\" \") + 1:].strip()"]]}}, "param": {"self": {"Checks": [[487, "    def cudnn_check(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.is_virtualen": {"var": {"retval": {"int": [[100, "            retval = (hasattr(sys, \"real_prefix\") or"]], "bool": [[104, "            retval = (os.path.basename(prefix) == \"envs\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.install_python_packag": {"var": {"verbose": {"int": [[640, "                verbose = pkg.startswith(\"tensorflow\") or self.env.updater"]]}}, "param": {"self": {"Install": [[633, "    def install_python_packages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.docker_ask_enable": {"var": {"i": {"?": [[402, "        i = input(\"Enable  Docker? [y/N] \")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_installed_packag": {"var": {"installed": {"?": [[214, "        installed = chk.communicate()[0].decode(self.encoding).splitlines()"]]}}, "param": {"self": {"Environment": [[209, "    def get_installed_packages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Environment.get_required_packag": {"var": {"requirements_file": {"str": [[130, "            requirements_file = os.path.join(pypath, req_file)"]]}, "req_files": {"[str]": [[125, "        req_files = [\"_requirements_base.txt\", f\"requirements_{suffix}\"]"]]}, "requirements": {"list": [[127, "        requirements = list()"]]}}, "param": {"self": {"Environment": [[117, "    def get_required_packages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.I": {"func": {"pip_installer": {"(Install, str) -> ?": [[684, "    def pip_installer(self, package):"]]}, "install_conda_packages": {"Install -> None": [[648, "    def install_conda_packages(self):"]]}, "conda_installer": {"(Install, ?, None, ?, ?) -> ?": [[655, "    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):"]]}, "install_missing_dep": {"Install -> None": [[625, "    def install_missing_dep(self):"]]}, "install_python_packages": {"Install -> None": [[633, "    def install_python_packages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Install.check_conda_missing_dep": {"var": {"key": {"str": [[616, "            key = pkg[0].split(\"==\")[0]"]]}}, "param": {"self": {"Install": [[611, "    def check_conda_missing_dep(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.C": {"var": {"cudnn_checkfiles": {"{[str] | list}": [[490, "            cudnn_checkfiles = self.cudnn_checkfiles_linux()"], [500, "            cudnn_checkfiles = self.cudnn_checkfiles_windows()"]]}}, "func": {"cuda_check_windows": {"Checks -> None": [[474, "    def cuda_check_windows(self):"]]}, "cudnn_checkfiles_linux": {"() -> {[str] | list}": [[536, "    def cudnn_checkfiles_linux():"]]}, "cudnn_checkfiles_windows": {"Checks -> {[str] | list}": [[549, "    def cudnn_checkfiles_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.setup.Checks.cuda_che": {"var": {"chk": {"?": [[438, "        chk = Popen(\"nvcc -V\", shell=True, stdout=PIPE, stderr=PIPE)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/stats.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.full_summary": {"param": {"self": {"Session": [[135, "    def full_summary(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calc": {"param": {"flatten_outliers": {"bool": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}}, "func": {"flatten_outliers": {"{[?] | list} -> list / ? -> list / list -> list": [[461, "    def flatten_outliers(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.config": {"var": {"retval": {"?": [[128, "        retval = self.state[\"config\"].copy()"]]}}, "param": {"self": {"Session": [[126, "    def config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.set": {"var": {"log_filenames": {"dict": [[38, "        log_filenames = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.total_lo": {"var": {"side": {"?": [[204, "                for side, loss in side_loss.items():"]]}}, "param": {"self": {"Session": [[198, "    def total_loss(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.total_batchsiz": {"param": {"self": {"Session": [[187, "    def total_batchsize(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.total": {"param": {"sessions_stats": {"SessionsSummary -> None": [[307, "    def total_stats(sessions_stats):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.get_iterations_for": {"param": {"session_id": {"?": [[243, "    def get_iterations_for_session(self, session_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.total_stats": {"var": {"endtime": {"?": [[319, "                endtime = summary[\"end\"]"]]}, "batch": {"str": [[324, "        batch = \",\".join(str(bs) for bs in batchset)"]]}, "idx": {"?": [[315, "        for idx, summary in enumerate(sessions_stats):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.flatten_outlier": {"var": {"samples": {"int": [[465, "        samples = len(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.__init": {"param": {"model_name": {"None": [[107, "    def __init__(self, model_dir=None, model_name=None):"]]}, "model_dir": {"None": [[107, "    def __init__(self, model_dir=None, model_name=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_tren": {"var": {"dummy": {"[None]": [[530, "            dummy = [None for i in range(points)]"]]}}, "param": {"data": {"?": [[525, "    def calc_trend(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Sess": {"func": {"config": {"Session -> None": [[126, "    def config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session": {"var": {"loss_dict": {"?": [[152, "        loss_dict = self.tb_logs.get_loss(session=self.session_id)[self.session_id]"]]}, "loss_keys": {"Session -> list": [[159, "            loss_keys = self.total_loss_keys"]], "?": [[161, "            loss_keys = set(loss_key for side_keys in self.session[\"loss_names\"].values()"]]}}, "func": {"loss": {"Session -> None": [[150, "    def loss(self):"]]}, "load_state_file": {"Session -> None": [[236, "    def load_state_file(self):"]]}, "total_loss_keys": {"Session -> list": [[209, "    def total_loss_keys(self):"]]}, "batchsize": {"Session -> None": [[121, "    def batchsize(self):"]]}, "total_batchsize": {"Session -> dict": [[187, "    def total_batchsize(self):"]]}, "full_summary": {"Session -> SessionsSummary -> None": [[135, "    def full_summary(self):"]]}, "lowest_loss": {"Session -> None": [[166, "    def lowest_loss(self):"]]}, "loss_keys": {"Session -> list": [[156, "    def loss_keys(self):"]]}, "timestamps": {"Session -> None": [[181, "    def timestamps(self):"]]}, "total_loss": {"Session -> dict": [[198, "    def total_loss(self):"]]}, "total_timestamps": {"Session -> None": [[218, "    def total_timestamps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.__init": {"param": {"logs_folder": {"str": [[31, "    def __init__(self, logs_folder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.batchsiz": {"param": {"self": {"Session": [[121, "    def batchsize(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations": {"func": {"remove_raw": {"Calculations -> None": [[420, "    def remove_raw(self):"]]}, "calc_rate": {"Calculations -> [?]": [[430, "    def calc_rate(self):"]]}, "calc_avg": {"(Calculations, ?) -> list": [[491, "    def calc_avg(self, data):"]]}, "get_raw": {"Calculations -> {dict | dict | dict | dict}": [[385, "    def get_raw(self):"]]}, "calc_trend": {"? -> [None]": [[525, "    def calc_trend(data):"]]}, "calc_rate_total": {"Calculations -> list": [[440, "    def calc_rate_total(self):"]]}, "__init__": {"? -> ?": [[350, "    def __init__(self, session, display=\"loss\", loss_keys=[\"loss\"], selections=[\"raw\"],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_avg": {"var": {"presample": {"int": [[495, "        presample = ceil(self.args[\"avg_samples\"] / 2)"]]}, "postsample": {"?": [[496, "        postsample = self.args[\"avg_samples\"] - presample"]]}, "idx": {"int": [[503, "        for idx in range(0, datapoints):"]]}, "datapoints": {"int": [[497, "        datapoints = len(data)"]]}}, "param": {"self": {"Calculations": [[491, "    def calc_avg(self, data):"]]}, "data": {"?": [[491, "    def calc_avg(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.time_stat": {"param": {"self": {"SessionsSummary": [[261, "    def time_stats(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.initializ": {"param": {"session_id": {"None": [[222, "    def initialize_session(self, is_training=False, session_id=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.__init__": {"param": {"self": {"Session": [[107, "    def __init__(self, model_dir=None, model_name=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_": {"var": {"trend": {"?": [[535, "        trend = poly(x_range)"]]}, "rate": {"[?]": [[436, "        rate = [batchsize / (timestamps[i + 1] - timestamps[i]) for i in iterations]"]]}, "iterations": {"[int]": [[435, "        iterations = range(len(timestamps) - 1)"]]}, "avg": {"int": [[507, "            avg = sum(data[idx - presample:idx + postsample]) / self.args[\"avg_samples\"]"]]}, "smoothed": {"list": [[516, "        smoothed = list()"]]}, "avgs": {"list": [[494, "        avgs = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculation": {"func": {"calc_smoothed": {"(Calculations, ?) -> list": [[512, "    def calc_smoothed(self, data):"]]}, "refresh": {"Calculations -> Calculations": [[372, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.compile_stat": {"param": {"self": {"SessionsSummary": [[293, "    def compile_stats(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary": {"var": {"total_summaries": {"int": [[314, "        total_summaries = len(sessions_stats)"]]}, "time_stats": {"dict": [[264, "        time_stats = {sess_id: {\"start_time\": min(timestamps) if timestamps else 0,"]]}, "compiled_stats": {"SessionsSummary -> None": [[296, "        compiled_stats = self.sessions_stats"], [302, "        compiled_stats = self.format_stats(compiled_stats)"]]}}, "func": {"sessions_stats": {"SessionsSummary -> None": [[271, "    def sessions_stats(self):"]]}, "format_stats": {"? -> None / SessionsSummary -> None -> SessionsSummary -> None": [[336, "    def format_stats(compiled_stats):"]]}, "time_stats": {"SessionsSummary -> dict": [[261, "    def time_stats(self):"]]}, "compile_stats": {"SessionsSummary -> SessionsSummary -> None": [[293, "    def compile_stats(self):"]]}, "total_stats": {"SessionsSummary -> None -> dict / ? -> dict": [[307, "    def total_stats(sessions_stats):"]]}, "__init__": {"? -> ?": [[255, "    def __init__(self, session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.session": {"param": {"self": {"Session": [[171, "    def session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.iteration": {"param": {"self": {"Session": [[140, "    def iterations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_r": {"var": {"timestamps": {"?": [[434, "        timestamps = self.session.timestamps"]]}, "batchsize": {"?": [[433, "        batchsize = self.session.batchsize"]]}, "total_timestamps": {"?": [[447, "        total_timestamps = self.session.total_timestamps"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.get_iterations_for_session": {"param": {"self": {"Session": [[243, "    def get_iterations_for_session(self, session_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.__init__": {"param": {"self": {"TensorBoardLogs": [[31, "    def __init__(self, logs_folder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.total_loss_key": {"param": {"self": {"Session": [[209, "    def total_loss_keys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.total_timestamp": {"param": {"self": {"Session": [[218, "    def total_timestamps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.timestamp": {"var": {"ts_dict": {"?": [[183, "        ts_dict = self.tb_logs.get_timestamps(session=self.session_id)"]]}}, "param": {"self": {"Session": [[181, "    def timestamps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs": {"func": {"__init__": {"? -> ?": [[31, "    def __init__(self, logs_folder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.initialize_sessio": {"param": {"is_training": {"bool": [[222, "    def initialize_session(self, is_training=False, session_id=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.remove_raw": {"var": {"key": {"<list>": [[425, "        for key in list(self.stats.keys()):"]]}}, "param": {"self": {"Calculations": [[420, "    def remove_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.total_iteration": {"param": {"self": {"Session": [[193, "    def total_iterations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_rat": {"param": {"self": {"Calculations": [[430, "    def calc_rate(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.tota": {"var": {"loss_dict": {"dict": [[200, "        loss_dict = dict()"]]}, "loss_key": {"?": [[203, "            for loss_key, side_loss in all_loss[key].items():"]]}, "loss_keys": {"?": [[211, "        loss_keys = set(loss_key"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.load": {"var": {"state_file": {"str": [[238, "        state_file = os.path.join(self.modeldir, \"{}_state.json\".format(self.modelname))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardL": {"func": {"get_loss": {"(TensorBoardLogs, None, None) -> dict": [[53, "    def get_loss(self, side=None, session=None):"]]}, "set_log_filenames": {"TensorBoardLogs -> dict": [[35, "    def set_log_filenames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_trend": {"var": {"x_range": {"[int]": [[532, "        x_range = range(points)"]]}, "points": {"int": [[528, "        points = len(data)"]]}, "poly": {"?": [[534, "        poly = np.poly1d(fit)"]]}, "fit": {"?": [[533, "        fit = np.polyfit(x_range, data, 3)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc": {"var": {"smoothed_val": {"?": [[518, "            smoothed_val = last * weight + (1 - weight) * point  # Calculate smoothed value"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.initialize_session": {"param": {"self": {"Session": [[222, "    def initialize_session(self, is_training=False, session_id=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.__init": {"var": {"avg_samples": {"int": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}}, "param": {"loss_keys": {"[str]": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}, "avg_samples": {"int": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.get_": {"var": {"raw": {"dict": [[389, "        raw = dict()"], [406, "                    raw = {lossname: list() for lossname in raw}"], [408, "                    raw = {lossname: loss[:self.iterations] for lossname, loss in raw.items()}"], [415, "            raw = {\"raw_rate\": data}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.convert_": {"param": {"timestamp": {"?": [[19, "def convert_time(timestamp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.set_log_filenames": {"var": {"logfile": {"str": [[45, "            logfile = os.path.join(dirpath, sorted(logfiles)[-1])"]]}, "dirpath": {"str": [[39, "        for dirpath, _, filenames in os.walk(self.folder_base):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.total_stat": {"var": {"examples": {"int": [[311, "        examples = 0"]]}, "elapsed": {"int": [[310, "        elapsed = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get_timestamp": {"var": {"sess": {"?": [[86, "        for sess, sides in self.log_filenames.items():"]]}}, "param": {"self": {"?": [[79, "    def get_timestamps(self, session=None):"]]}, "session": {"dict": [[79, "    def get_timestamps(self, session=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_smoothe": {"param": {"data": {"?": [[512, "    def calc_smoothed(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.__init__": {"param": {"self": {"SessionsSummary": [[255, "    def __init__(self, session):"]]}, "session": {"Session": [[255, "    def __init__(self, session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.g": {"var": {"all_timestamps": {"dict": [[85, "        all_timestamps = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get_l": {"param": {"session": {"None": [[53, "    def get_loss(self, side=None, session=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Sessio": {"func": {"__init__": {"? -> ?": [[107, "    def __init__(self, model_dir=None, model_name=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats": {"var": {"logger": {"?": [[16, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"convert_time": {"? -> ({int | str}, str, str)": [[19, "def convert_time(timestamp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.get_calculation": {"var": {"raw_keys": {"[?]": [[486, "            raw_keys = [key for key in self.stats.keys() if key.startswith(\"raw_\")]"]]}, "selected_key": {"str": [[488, "                selected_key = \"{}_{}\".format(selection, key.replace(\"raw_\", \"\"))"]]}}, "param": {"self": {"Calculations": [[479, "    def get_calculations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.flatten_outliers": {"var": {"retdata": {"list": [[464, "        retdata = list()"]]}, "limit": {"int": [[467, "        limit = sqrt(sum([(item - mean)**2 for item in data]) / samples)"]]}, "idx": {"?": [[470, "        for idx, item in enumerate(data):"]]}, "mean": {"int": [[466, "        mean = (sum(data) / samples)"]]}}, "param": {"data": {"{[?] | list}": [[461, "    def flatten_outliers(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.total_": {"var": {"batchset": {"?": [[313, "        batchset = set()"]]}, "starttime": {"?": [[317, "                starttime = summary[\"start\"]"]]}, "iterations": {"int": [[312, "        iterations = 0"]]}, "totals": {"dict": [[325, "        totals = {\"session\": \"Total\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.sessions_": {"var": {"batchsize": {"?": [[282, "            batchsize = self.session.total_batchsize.get(sess_idx, 0)"]]}, "iterations": {"int": [[280, "            iterations = self.session.get_iterations_for_session(sess_idx)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.get_iterations_for_": {"var": {"session": {"?": [[245, "        session = self.state[\"sessions\"].get(str(session_id), None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.logging_disabled": {"param": {"self": {"Session": [[145, "    def logging_disabled(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.get_raw": {"var": {"loss": {"list": [[398, "                        loss = self.flatten_outliers(loss)"]]}, "loss_dict": {"?": [[392, "            loss_dict = self.session.total_loss if self.is_totals else self.session.loss"]]}, "iterations": {"?": [[390, "        iterations = set()"]]}, "loss_name": {"?": [[393, "            for loss_name, side_loss in loss_dict.items():"]]}, "data": {"list": [[413, "                data = self.flatten_outliers(data)"]], "{[?] | list}": [[411, "            data = self.calc_rate_total() if self.is_totals else self.calc_rate()"]]}, "side": {"?": [[396, "                for side, loss in side_loss.items():"]]}}, "param": {"self": {"Calculations": [[385, "    def get_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.get_calculations": {"var": {"method": {"?": [[485, "            method = getattr(self, \"calc_{}\".format(selection))"]]}, "key": {"?": [[487, "            for key in raw_keys:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.for": {"param": {"compiled_stats": {"SessionsSummary -> None": [[336, "    def format_stats(compiled_stats):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.session_id": {"param": {"self": {"Session": [[176, "    def session_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.load_state_fi": {"param": {"self": {"Session": [[236, "    def load_state_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.lo": {"param": {"self": {"Session": [[150, "    def loss(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get_loss": {"var": {"tag": {"?": [[72, "                        tag = summary.tag.replace(\"batch_\", \"\")"]]}, "event": {"?": [[68, "                for event in tf.train.summary_iterator(logfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.tot": {"var": {"all_loss": {"?": [[201, "        all_loss = self.tb_logs.get_loss()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get_": {"var": {"loss": {"dict": [[63, "            loss = dict()"]]}, "timestamps": {"[?]": [[92, "                    timestamps = [event.wall_time"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLo": {"func": {"get_timestamps": {"(TensorBoardLogs, None) -> dict": [[79, "    def get_timestamps(self, session=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.__in": {"param": {"is_totals": {"bool": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.__init__": {"param": {"self": {"Calculations": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}, "session": {"?": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}, "display": {"str": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}, "selections": {"[str]": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.get_calcula": {"var": {"selection": {"str": [[481, "        for selection in self.selections:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get_lo": {"var": {"sde": {"?": [[64, "            for sde, logfile in sides.items():"]]}, "sess": {"?": [[59, "        for sess, sides in self.log_filenames.items():"]]}, "summary": {"?": [[69, "                    for summary in event.summary.value:"]]}}, "param": {"self": {"TensorBoardLogs": [[53, "    def get_loss(self, side=None, session=None):"]]}, "side": {"None": [[53, "    def get_loss(self, side=None, session=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.sessions_stats": {"var": {"compiled": {"list": [[273, "        compiled = list()"]], "?": [[290, "        compiled = sorted(compiled, key=lambda k: k[\"session\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_rate_tota": {"param": {"self": {"Calculations": [[440, "    def calc_rate_total(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.lowest_lo": {"param": {"self": {"Session": [[166, "    def lowest_loss(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.time": {"var": {"ts_data": {"?": [[263, "        ts_data = self.session.tb_logs.get_timestamps()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.convert_tim": {"var": {"secs": {"str": [[25, "    secs = \"{0:02d}\".format((int(timestamp % 3600) % 60))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stat": {"class": {"TensorBoardLogs": {"<TensorBoardLogs>": [[29, "class TensorBoardLogs():"]]}, "SessionsSummary": {"<SessionsSummary>": [[252, "class SessionsSummary():"]]}, "Session": {"<Session>": [[105, "class Session():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get": {"var": {"all_loss": {"dict": [[58, "        all_loss = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.C": {"func": {"get_calculations": {"Calculations -> None": [[479, "    def get_calculations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.total_loss": {"var": {"key": {"?": [[202, "        for key in sorted(int(idx) for idx in all_loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.set_log_filenam": {"var": {"session": {"int": [[48, "            session = int(session[session.rfind(\"_\") + 1:])"]]}, "side": {"str": [[46, "            side, session = os.path.split(dirpath)"], [47, "            side = os.path.split(side)[1]"]]}, "logfiles": {"[str]": [[42, "            logfiles = [filename for filename in filenames"]]}}, "param": {"self": {"TensorBoardLogs": [[35, "    def set_log_filenames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_smoothed": {"var": {"last": {"?": [[514, "        last = data[0]  # First value in the plot (first timestep)"], [520, "            last = smoothed_val                                  # Anchor the last smoothed value"]]}, "weight": {"{bool | float | int}": [[515, "        weight = self.args[\"smooth_amount\"]"]]}, "point": {"?": [[517, "        for point in data:"]]}}, "param": {"self": {"Calculations": [[512, "    def calc_smoothed(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.S": {"func": {"get_iterations_for_session": {"(Session, ?) -> int": [[243, "    def get_iterations_for_session(self, session_id):"]]}, "initialize_session": {"(Session, bool, None) -> None": [[222, "    def initialize_session(self, is_training=False, session_id=None):"]]}, "logging_disabled": {"Session -> None": [[145, "    def logging_disabled(self):"]]}, "session": {"Session -> None": [[171, "    def session(self):"]]}, "session_ids": {"Session -> None": [[176, "    def session_ids(self):"]]}, "iterations": {"Session -> None": [[140, "    def iterations(self):"]]}, "total_iterations": {"Session -> None": [[193, "    def total_iterations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.calc_rate_total": {"var": {"sess_id": {"?": [[449, "        for sess_id in sorted(total_timestamps.keys()):"]]}, "batchsize": {"?": [[450, "            batchsize = batchsizes[sess_id]"]]}, "batchsizes": {"?": [[446, "        batchsizes = self.session.total_batchsize"]]}, "rate": {"list": [[448, "        rate = list()"]]}, "iterations": {"[int]": [[452, "            iterations = range(len(timestamps) - 1)"]]}, "timestamps": {"?": [[451, "            timestamps = total_timestamps[sess_id]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.g": {"class": {"Calculations": {"<Calculations>": [[348, "class Calculations():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.TensorBoardLogs.get_timestamps": {"var": {"logfile": {"?": [[91, "                for logfile in sides.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.format_stat": {"var": {"hrs": {"{int | str}": [[340, "            hrs, mins, secs = convert_time(summary[\"elapsed\"])"]]}, "summary": {"?": [[339, "        for summary in compiled_stats:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Session.loss_key": {"param": {"self": {"Session": [[156, "    def loss_keys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.sessions_stat": {"var": {"sess_idx": {"?": [[274, "        for sess_idx, ts_data in self.time_stats.items():"]]}, "elapsed": {"?": [[281, "            elapsed = ts_data[\"end_time\"] - ts_data[\"start_time\"]"]]}}, "param": {"self": {"SessionsSummary": [[271, "    def sessions_stats(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.__ini": {"param": {"smooth_amount": {"float": [[351, "                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.Calculations.refresh": {"param": {"self": {"Calculations": [[372, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.SessionsSummary.compile": {"var": {"total_stats": {"dict": [[300, "        total_stats = self.total_stats(compiled_stats)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.stats.convert_time": {"var": {"mins": {"str": [[24, "    mins = \"{0:02d}\".format((int(timestamp % 3600) // 60))"]]}, "hrs": {"int": [[21, "    hrs = int(timestamp // 3600)"]], "str": [[23, "        hrs = \"{0:02d}\".format(hrs)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._compile_detection_image": {"var": {"pad": {"(int, int)": [[235, "        pad = self._set_padding(item.image_size, scale)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._pad_": {"var": {"image": {"?": [[275, "            image = cv2.copyMakeBorder(image,"]]}}, "param": {"image": {"None": [[267, "    def _pad_image(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_batch": {"var": {"image": {"?": [[356, "                image = np.zeros_like(img)"], [359, "                image, matrix = self._rotate_image_by_angle(img, angle)"]]}, "retval": {"dict": [[353, "        retval = dict()"]]}, "matrix": {"?": [[357, "                matrix = rotmat"]]}}, "param": {"self": {"Detector": [[344, "    def _rotate_batch(self, batch, angle):"]]}, "angle": {"int": [[344, "    def _rotate_batch(self, batch, angle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._pad_image": {"var": {"pad_r": {"int": [[272, "            pad_r = (self.input_size - width) - pad_l"]]}, "pad_b": {"int": [[274, "            pad_b = (self.input_size - height) - pad_t"]]}, "pad_t": {"int": [[273, "            pad_t = (self.input_size - height) // 2"]]}, "pad_l": {"int": [[271, "            pad_l = (self.input_size - width) // 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._set_": {"var": {"scale": {"int": [[244, "        scale = self.input_size / max(image_size)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._filter_small_faces": {"var": {"retval": {"[[?]]": [[299, "        retval = []"]]}, "face": {"?": [[302, "            for face in faces:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_": {"param": {"batch": {"None": [[344, "    def _rotate_batch(self, batch, angle):"]]}, "face": {"?": [[366, "    def _rotate_face(face, rotation_matrix):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.finalize": {"var": {"output": {"?": [[183, "            output = self._extract_media.pop(item[\"filename\"])"]]}, "batch": {"[dict]": [[181, "        batch = self._dict_lists_to_list_dicts(batch)"]]}}, "param": {"batch": {"?": [[132, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detec": {"var": {"rotation_angles": {"[int]": [[321, "        rotation_angles = [0]"]]}}, "func": {"_get_rotation_angles": {"? -> [int] / None -> [int]": [[314, "    def _get_rotation_angles(rotation):"]]}, "_rotate_image_by_angle": {"(Detector, ?, int) -> (?, ?) / (Detector, ?, ?) -> (?, ?)": [[408, "    def _rotate_image_by_angle(self, image, angle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detecto": {"func": {"_filter_small_faces": {"(Detector, ?) -> [[?]]": [[297, "    def _filter_small_faces(self, detected_faces):"]]}, "_predict": {"(Detector, ?) -> None": [[200, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._scale_imag": {"var": {"interpln": {"?": [[257, "        interpln = cv2.INTER_CUBIC if scale > 1.0 else cv2.INTER_AREA"]]}}, "param": {"scale": {"int": [[255, "    def _scale_image(image, image_size, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._predict": {"var": {"found_faces": {"[?]": [[203, "        found_faces = [np.array([]) for _ in range(len(batch[\"feed\"]))]"], [212, "            found_faces = [face if not found.any() else found"]]}, "angle": {"int": [[204, "        for angle in self.rotation:"]]}}, "param": {"self": {"Detector": [[200, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.to_detected_face": {"param": {"top": {"?": [[191, "    def to_detected_face(left, top, right, bottom):"]]}, "right": {"?": [[191, "    def to_detected_face(left, top, right, bottom):"]]}, "bottom": {"?": [[191, "    def to_detected_face(left, top, right, bottom):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector": {"func": {"to_detected_face": {"(?, ?, ?, ?) -> DetectedFace": [[191, "    def to_detected_face(left, top, right, bottom):"]]}, "finalize": {"(Detector, ?) -> None": [[132, "    def finalize(self, batch):"]]}, "_set_scale": {"(Detector, ?) -> int / (Detector, ExtractMedia -> None) -> int": [[242, "    def _set_scale(self, image_size):"]]}, "get_batch": {"(Detector, ?) -> (bool, dict)": [[76, "    def get_batch(self, queue):"]]}, "_pad_image": {"(Detector, None) -> None / (Detector, ?) -> None": [[267, "    def _pad_image(self, image):"]]}, "_scale_image": {"(?, ?, int) -> None / (?, ?, ?) -> None / (None, ExtractMedia -> None, int) -> None": [[255, "    def _scale_image(image, image_size, scale):"]]}, "_compile_detection_image": {"(Detector, ?) -> (None, int, (int, int)) / (Detector, ExtractMedia) -> (None, int, (int, int))": [[225, "    def _compile_detection_image(self, item):"]]}, "__init__": {"? -> ?": [[60, "    def __init__(self, git_model_id=None, model_filename=None,"]]}, "_set_padding": {"(Detector, ?, int) -> (int, int) / (Detector, ?, ?) -> (int, int) / (Detector, ExtractMedia -> None, int) -> (int, int)": [[248, "    def _set_padding(self, image_size, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._remove_zero_sized": {"param": {"batch_faces": {"{[[DetectedFace]] | [[None]]}": [[285, "    def _remove_zero_sized_faces(self, batch_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._scale_image": {"var": {"dims": {"(int, int)": [[259, "            dims = (int(image_size[1] * scale), int(image_size[0] * scale))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.finaliz": {"var": {"item": {"dict": [[182, "        for item in batch:"]]}, "batch_faces": {"[[DetectedFace]]": [[156, "        batch_faces = [[self.to_detected_face(face[0], face[1], face[2], face[3])"]], "[[?]]": [[166, "        batch_faces = self._remove_zero_sized_faces(batch_faces)"]], "[[None]]": [[161, "            batch_faces = [[self._rotate_face(face, rotmat) if rotmat.any() else face"]]}}, "param": {"self": {"Detector": [[132, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detect": {"func": {"_remove_zero_sized_faces": {"(Detector, ?) -> [[?]] / (Detector, {[[DetectedFace]] | [[None]]}) -> [[?]]": [[285, "    def _remove_zero_sized_faces(self, batch_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_face": {"var": {"pt_y": {"int": [[396, "        pt_y = min([pnt[1] for pnt in rotated])"]]}, "rotation_matrix": {"?": [[387, "        rotation_matrix = cv2.invertAffineTransform(rotation_matrix)"]]}, "width": {"int": [[399, "        width = pt_x1 - pt_x"]]}, "bounding_box": {"[[?]]": [[383, "        bounding_box = [[face.left, face.top],"]]}, "points": {"?": [[389, "        points = np.array(bounding_box, \"int32\")"], [390, "        points = np.expand_dims(points, axis=0)"]]}, "pt_y1": {"int": [[398, "        pt_y1 = max([pnt[1] for pnt in rotated])"]]}, "pt_x1": {"int": [[397, "        pt_x1 = max([pnt[0] for pnt in rotated])"]]}, "pt_x": {"int": [[395, "        pt_x = min([pnt[0] for pnt in rotated])"]]}}, "param": {"rotation_matrix": {"?": [[366, "    def _rotate_face(face, rotation_matrix):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._set_sca": {"param": {"self": {"Detector": [[242, "    def _set_scale(self, image_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.__init__": {"var": {"configfile": {"None": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}}, "param": {"instance": {"int": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}, "self": {"Detector": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}, "rotation": {"None": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}, "configfile": {"None": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._bas": {"class": {"Detector": {"<Detector>": [[26, "class Detector(Extractor):  # pylint:disable=abstract-method"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._remove_zero_sized_fac": {"param": {"self": {"Detector": [[285, "    def _remove_zero_sized_faces(self, batch_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._filter_small_fac": {"var": {"this_image": {"[?]": [[301, "            this_image = []"]]}}, "param": {"self": {"Detector": [[297, "    def _filter_small_faces(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._scale_": {"var": {"image": {"?": [[263, "            image = cv2.resize(image, dims, interpolation=interpln)"]]}}, "param": {"image": {"None": [[255, "    def _scale_image(image, image_size, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.get_batch": {"var": {"item": {"ExtractMedia": [[113, "            item = self._get_item(queue)"]]}, "image": {"None": [[118, "            image, scale, pad = self._compile_detection_image(item)"]]}, "_": {"int": [[112, "        for _ in range(self.batchsize):"]]}}, "param": {"queue": {"?": [[76, "    def get_batch(self, queue):"]]}, "self": {"Detector": [[76, "    def get_batch(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.get_batc": {"var": {"exhausted": {"bool": [[110, "        exhausted = False"], [115, "                exhausted = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_fac": {"var": {"rotated": {"?": [[392, "        rotated = transformed.squeeze()"]]}, "transformed": {"?": [[391, "        transformed = cv2.transform(points, rotation_matrix).astype(\"int32\")"]]}, "height": {"int": [[400, "        height = pt_y1 - pt_y"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._set_paddin": {"param": {"image_size": {"ExtractMedia -> None": [[248, "    def _set_padding(self, image_size, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._pad_ima": {"var": {"height": {"?": [[269, "        height, width = image.shape[:2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._compile_detection_": {"var": {"image": {"None": [[233, "        image = item.get_image_copy(self.color_format)"], [237, "        image = self._scale_image(image, item.image_size, scale)"], [238, "        image = self._pad_image(image)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._set_scal": {"param": {"image_size": {"ExtractMedia -> None": [[242, "    def _set_scale(self, image_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_image_by_ang": {"var": {"channels_first": {"bool": [[413, "        channels_first = image.shape[0] <= 4"]]}}, "param": {"self": {"Detector": [[408, "    def _rotate_image_by_angle(self, image, angle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._get_rotatio": {"var": {"passed_angles": {"[int]": [[330, "            passed_angles = [int(angle)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_image_by_angle": {"var": {"rotation_matrix": {"?": [[419, "        rotation_matrix = cv2.getRotationMatrix2D(image_center, -1.*angle, 1.)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._scal": {"param": {"image_size": {"ExtractMedia -> None": [[255, "    def _scale_image(image, image_size, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._predi": {"var": {"batch": {"None": [[207, "            batch = self.predict(batch)"]]}}, "param": {"batch": {"?": [[200, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._compile_detection_imag": {"var": {"scale": {"int": [[234, "        scale = self._set_scale(item.image_size)"]]}}, "param": {"item": {"ExtractMedia": [[225, "    def _compile_detection_image(self, item):"]]}, "self": {"Detector": [[225, "    def _compile_detection_image(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_image_by_": {"param": {"angle": {"int": [[408, "    def _rotate_image_by_angle(self, image, angle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._set_padding": {"var": {"pad_left": {"int": [[250, "        pad_left = int(self.input_size - int(image_size[1] * scale)) // 2"]]}, "pad_top": {"int": [[251, "        pad_top = int(self.input_size - int(image_size[0] * scale)) // 2"]]}}, "param": {"self": {"Detector": [[248, "    def _set_padding(self, image_size, scale):"]]}, "scale": {"int": [[248, "    def _set_padding(self, image_size, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._rotate_image_by_angl": {"var": {"image": {"?": [[415, "            image = np.moveaxis(image, 0, 2)"], [423, "        image = cv2.warpAffine(image, rotation_matrix, (self.input_size, self.input_size))"], [425, "            image = np.moveaxis(image, 2, 0)"]]}, "image_center": {"(int, int)": [[418, "        image_center = (width/2, height/2)"]]}, "height": {"?": [[417, "        height, width = image.shape[:2]"]]}}, "param": {"image": {"?": [[408, "    def _rotate_image_by_angle(self, image, angle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._remove_zero_sized_faces": {"var": {"retval": {"[[?]]": [[289, "        retval = [[face"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.__in": {"param": {"git_model_id": {"None": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.get_": {"var": {"batch": {"dict": [[111, "        batch = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.D": {"func": {"_rotate_face": {"(?, ?) -> None": [[366, "    def _rotate_face(face, rotation_matrix):"]]}, "_rotate_batch": {"(Detector, ?, ?) -> None / (Detector, ?, int) -> None / (Detector, None, int) -> None": [[344, "    def _rotate_batch(self, batch, angle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._filter_small": {"var": {"face_size": {"int": [[303, "                face_size = (face.w ** 2 + face.h ** 2) ** 0.5"]]}}, "param": {"detected_faces": {"?": [[297, "    def _filter_small_faces(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._get_rotation_angles": {"param": {"rotation": {"None": [[314, "    def _get_rotation_angles(rotation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.__init": {"param": {"min_size": {"int": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}, "model_filename": {"None": [[61, "                 configfile=None, instance=0, rotation=None, min_size=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector.to_detected_fac": {"param": {"left": {"?": [[191, "    def to_detected_face(left, top, right, bottom):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._filter_small_": {"var": {"faces": {"?": [[300, "        for faces in detected_faces:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._pad_imag": {"param": {"self": {"Detector": [[267, "    def _pad_image(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect._base.Detector._get_rotation_angl": {"var": {"rotation_step_size": {"int": [[334, "                rotation_step_size = passed_angles[0]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/lib/model/optimizers_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizers_test._test_optimizer": {"var": {"optim": {"?": [[48, "    optim = k_optimizers.deserialize(config)"]]}, "new_config": {"?": [[49, "    new_config = k_optimizers.serialize(optim)"]]}, "model": {"?": [[35, "    model = Sequential()"], [54, "    model = Sequential()"]]}, "dense": {"?": [[55, "    dense = Dense(10,"]]}, "config": {"?": [[47, "    config = k_optimizers.serialize(optimizer)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizers_test._test_optimize": {"var": {"x_train": {"?": [[33, "    x_train, y_train = get_test_data()"]]}, "history": {"?": [[44, "    history = model.fit(x_train, y_train, epochs=2, batch_size=16, verbose=0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model": {"func": {"_test_optimizer": {"(Adam, float) -> None / (?, float) -> None": [[32, "def _test_optimizer(optimizer, target=0.75):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizers_test.get_test_d": {"var": {"y_train": {"?": [[28, "    y_train = to_categorical(y_train)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizers_test._test_optimiz": {"var": {"kernel": {"?": [[67, "    kernel, bias = dense.get_weights()"]]}}, "param": {"target": {"float": [[32, "def _test_optimizer(optimizer, target=0.75):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizer": {"func": {"test_adam": {"? -> None": [[74, "def test_adam(dummy):  # pylint:disable=unused-argument"]]}, "get_test_data": {"() -> (?, ?)": [[20, "def get_test_data():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizers_test._test_": {"param": {"optimizer": {"Adam": [[32, "def _test_optimizer(optimizer, target=0.75):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.optimizers_test.test_ada": {"param": {"dummy": {"?": [[74, "def test_adam(dummy):  # pylint:disable=unused-argument"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/manual_balance.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.convert_colorspa": {"var": {"conversion": {"str": [[46, "        conversion = \"{}2BGR\".format(colorspace) if to_bgr else \"BGR2{}\".format(colorspace)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance": {"class": {"Color": {"<Color>": [[9, "class Color(Adjustment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.convert_colorspac": {"var": {"image": {"float": [[47, "        image = cv2.cvtColor(new_face.astype(\"uint8\"),  # pylint: disable=no-member"]]}, "mode": {"?": [[44, "        mode = self.config[\"colorspace\"].lower()"]]}}, "param": {"self": {"Color": [[42, "    def convert_colorspace(self, new_face, to_bgr=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.convert_": {"var": {"colorspace": {"str": [[45, "        colorspace = \"YCrCb\" if mode == \"ycrcb\" else mode.upper()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.process": {"var": {"image": {"float": [[13, "        image = self.convert_colorspace(new_face * 255.0)"], [23, "        image = self.convert_colorspace(image * 255.0, to_bgr=True)"], [24, "        image = self.adjust_contrast(image)"]]}, "idx": {"int": [[17, "        for idx in range(3):"]]}}, "param": {"old_face": {"?": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}, "new_face": {"?": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.C": {"func": {"convert_colorspace": {"(Color, float, bool) -> float / (Color, ?, bool) -> float": [[42, "    def convert_colorspace(self, new_face, to_bgr=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.convert_colorspace": {"param": {"to_bgr": {"bool": [[42, "    def convert_colorspace(self, new_face, to_bgr=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.convert_colorsp": {"param": {"new_face": {"float": [[42, "    def convert_colorspace(self, new_face, to_bgr=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.proce": {"param": {"raw_mask": {"?": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.adjust_": {"var": {"contrast": {"int": [[31, "        contrast = max(-126, int(round(self.config[\"contrast\"] * 1.27)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.proc": {"var": {"adjustment": {"?": [[14, "        adjustment = np.array([self.config[\"balance_1\"] / 100.0,"]]}}, "param": {"self": {"Color": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.adjust_contra": {"var": {"brightness": {"int": [[32, "        brightness = max(-126, int(round(self.config[\"brightness\"] * 1.27)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Color.adjust_contrast": {"var": {"image": {"?": [[37, "        image = np.rint(image * 255.0).astype(\"uint8\")"], [38, "        image = np.clip(image * (contrast/127+1) - contrast + brightness, 0, 255)"], [39, "        image = np.clip(np.divide(image, 255, dtype=np.float32), .0, 1.0)"]]}}, "param": {"self": {"Color": [[27, "    def adjust_contrast(self, image):"]]}, "image": {"float": [[27, "    def adjust_contrast(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance.Col": {"func": {"process": {"(Color, ?, ?, ?) -> float": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}, "adjust_contrast": {"(Color, float) -> float / (Color, ?) -> None": [[27, "    def adjust_contrast(self, image):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/realface_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[51, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/cli/launcher.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor": {"func": {"_check_display": {"() -> None": [[115, "    def _check_display():"]]}, "__init__": {"? -> ?": [[27, "    def __init__(self, command):"]]}, "_setup_amd": {"? -> bool": [[176, "    def _setup_amd(log_level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor._import_script": {"var": {"src": {"str": [[41, "        src = \"tools.{}\".format(self._command.lower()) if cmd == \"tools.py\" else \"scripts\""]]}, "cmd": {"str": [[40, "        cmd = os.path.basename(sys.argv[0])"]]}, "module": {"?": [[43, "        module = import_module(mod)"]]}, "mod": {"str": [[42, "        mod = \".\".join((src, self._command.lower()))"]]}}, "param": {"self": {"ScriptExecutor": [[30, "    def _import_script(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor.execute_script": {"var": {"is_gui": {"int": [[143, "        is_gui = hasattr(arguments, \"redirect_gui\") and arguments.redirect_gui"]]}, "success": {"bool": [[146, "        success = False"], [156, "            success = True"]]}, "process": {"?": [[154, "            process = script(arguments)"]]}, "line": {"?": [[158, "            for line in str(err).splitlines():"]]}, "crash_file": {"str": [[165, "            crash_file = crash_log()"]]}, "plaidml_found": {"bool": [[148, "            plaidml_found = self._setup_amd(arguments.loglevel)"]]}}, "param": {"self": {"ScriptExecutor": [[131, "    def execute_script(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecu": {"func": {"_test_for_tf_version": {"() -> ?": [[48, "    def _test_for_tf_version():"]]}, "_import_script": {"ScriptExecutor -> None": [[30, "    def _import_script(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor.__init__": {"param": {"self": {"ScriptExecutor": [[27, "    def __init__(self, command):"]]}, "command": {"str": [[27, "    def __init__(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor._test_for_tf_version": {"var": {"tf_ver": {"float": [[67, "        tf_ver = float(\".\".join(tf.__version__.split(\".\")[:2]))  # pylint:disable=no-member"]]}, "max_ver": {"float": [[57, "        max_ver = 1.15"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExec": {"func": {"_test_for_gui": {"ScriptExecutor -> None": [[78, "    def _test_for_gui(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor._test_for_gui": {"param": {"self": {"ScriptExecutor": [[78, "    def _test_for_gui(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor._import_": {"var": {"script": {"?": [[44, "        script = getattr(module, self._command.title())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor._test_for_tf_versio": {"var": {"min_ver": {"float": [[56, "        min_ver = 1.12"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launch": {"var": {"logger": {"?": [[12, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"ScriptExecutor": {"<ScriptExecutor>": [[15, "class ScriptExecutor():  # pylint:disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor.execute_": {"var": {"script": {"None": [[153, "            script = self._import_script()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor._setup_amd": {"param": {"log_level": {"?": [[176, "    def _setup_amd(log_level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecuto": {"func": {"_test_tkinter": {"() -> ?": [[86, "    def _test_tkinter():"]]}, "execute_script": {"(ScriptExecutor, ?) -> ?": [[131, "    def execute_script(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.launcher.ScriptExecutor.execute_scrip": {"param": {"arguments": {"?": [[131, "    def execute_script(self, arguments):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/align/cv2_dnn.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_d": {"class": {"Align": {"<Align>": [[33, "class Align(Aligner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.process_output": {"param": {"self": {"Align": [[158, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.predi": {"param": {"batch": {"?": [[151, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.get_square_": {"param": {"box": {"[int]": [[98, "    def get_square_box(box):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.align_": {"var": {"image": {"?": [[78, "            image, offset = self.pad_image(roi, image)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align": {"var": {"padded_image": {"?": [[139, "        padded_image = cv2.copyMakeBorder(image.copy(),"]]}}, "func": {"predict": {"(Align, ?) -> None": [[151, "    def predict(self, batch):"]]}, "move_box": {"(?, ?) -> [?] / ((?, ?, ?, ?), [int]) -> [int]": [[89, "    def move_box(box, offset):"]]}, "process_output": {"(Align, ?) -> None": [[158, "    def process_output(self, batch):"]]}, "get_square_box": {"? -> [int] / [int] -> [int]": [[98, "    def get_square_box(box):"]]}, "pad_image": {"(?, ?) -> (?, (int, int)) / ([int], ?) -> (?, (int, int))": [[131, "    def pad_image(box, image):"]]}, "get_pts_from_predict": {"? -> None": [[164, "    def get_pts_from_predict(batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.get_square": {"var": {"box_width": {"int": [[105, "        box_width = right - left"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.__init__": {"param": {"self": {"Align": [[35, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.pad_ima": {"var": {"height": {"?": [[133, "        height, width = image.shape[:2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.process_inpu": {"param": {"batch": {"?": [[52, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.move_": {"param": {"box": {"(?, ?, ?, ?)": [[89, "    def move_box(box, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.pad_": {"param": {"image": {"?": [[131, "    def pad_image(box, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.process_input": {"var": {"faces": {"[?]": [[54, "        faces, batch[\"roi\"], batch[\"offsets\"] = self.align_image(batch)"], [55, "        faces = self._normalize_faces(faces)"]]}}, "param": {"self": {"Align": [[52, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.align_imag": {"var": {"offsets": {"[(int, int)]": [[65, "        offsets = []"]]}, "sizes": {"(int, int)": [[62, "        sizes = (self.input_size, self.input_size)"]]}, "face": {"?": [[79, "            face = image[roi[1] + abs(offset[1]): roi[3] + abs(offset[1]),"], [82, "            face = cv2.resize(face, dsize=sizes, interpolation=interpolation)"]]}, "box_moved": {"[int]": [[73, "            box_moved = self.move_box(box, [0, offset_y])"]]}, "offset_y": {"int": [[72, "            offset_y = int(abs(diff_height_width / 2))"]]}, "faces": {"[?]": [[64, "        faces = []"]]}, "interpolation": {"?": [[81, "            interpolation = cv2.INTER_CUBIC if face.shape[0] < self.input_size else cv2.INTER_AREA"]]}}, "param": {"self": {"Align": [[59, "    def align_image(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.get_squar": {"var": {"box_height": {"int": [[106, "        box_height = bottom - top"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.move_box": {"var": {"top": {"int": [[92, "        top = box[1] + offset[1]"]]}, "right": {"int": [[93, "        right = box[2] + offset[0]"]]}, "bottom": {"int": [[94, "        bottom = box[3] + offset[1]"]]}, "left": {"int": [[91, "        left = box[0] + offset[0]"]]}}, "param": {"offset": {"[int]": [[89, "    def move_box(box, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.get_pts_from_predi": {"param": {"batch": {"?": [[164, "    def get_pts_from_predict(batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.A": {"func": {"align_image": {"(Align, ?) -> ([?], [[int]], [(int, int)])": [[59, "    def align_image(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.align_image": {"var": {"box": {"(?, ?, ?, ?)": [[67, "            box = (det_face.left,"]]}, "rois": {"[[int]]": [[63, "        rois = []"]]}, "roi": {"[int]": [[75, "            roi = self.get_square_box(box_moved)"]]}}, "param": {"batch": {"?": [[59, "    def align_image(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.get_pts_from_predic": {"var": {"points": {"?": [[167, "            points = np.reshape(prediction, (-1, 2))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.__init": {"var": {"model_filename": {"str": [[37, "        model_filename = \"cnn-facial-landmark_v1.pb\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.process_outpu": {"param": {"batch": {"?": [[158, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.get_square_box": {"var": {"right": {"int": [[102, "        right = box[2]"]]}, "bottom": {"int": [[103, "        bottom = box[3]"]]}, "top": {"int": [[101, "        top = box[1]"]]}, "delta": {"int": [[110, "        delta = int(abs(diff) / 2)"]]}, "diff": {"int": [[109, "        diff = box_height - box_width"]]}, "left": {"int": [[100, "        left = box[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Alig": {"func": {"process_input": {"(Align, ?) -> None": [[52, "    def process_input(self, batch):"]]}, "init_model": {"Align -> None": [[47, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[35, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.pad_image": {"var": {"pad_r": {"int": [[136, "        pad_r = box[2] - width if box[2] > width else 0"]]}, "pad_b": {"int": [[137, "        pad_b = box[3] - height if box[3] > height else 0"]]}, "pad_t": {"int": [[135, "        pad_t = 1 - box[1] if box[1] < 0 else 0"]]}, "pad_l": {"int": [[134, "        pad_l = 1 - box[0] if box[0] < 0 else 0"]]}}, "param": {"box": {"[int]": [[131, "    def pad_image(box, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.init_mod": {"param": {"self": {"Align": [[47, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.__in": {"var": {"git_model_id": {"int": [[36, "        git_model_id = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.pad_imag": {"var": {"offsets": {"(int, int)": [[146, "        offsets = (pad_l - pad_r, pad_t - pad_b)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.align_ima": {"var": {"diff_height_width": {"?": [[71, "            diff_height_width = det_face.h - det_face.w"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.cv2_dnn.Align.predict": {"param": {"self": {"Align": [[151, "    def predict(self, batch):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/components.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.process_inpu": {"param": {"batch": {"?": [[24, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.predic": {"var": {"item": {"{(?, ?) | (?, ?, ?, ?)}": [[34, "            for item in parts:"]], "?": [[35, "                item = np.rint(np.concatenate(item)).astype(\"int32\")"]]}, "parts": {"[{(?, ?) | (?, ?, ?, ?)}]": [[33, "            parts = self.parse_parts(np.array(face.feed_landmarks))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.parse_parts": {"var": {"l_jaw": {"(?, ?)": [[49, "        l_jaw = (landmarks[8:17], landmarks[26:27])"]]}, "l_cheek": {"(?, ?)": [[51, "        l_cheek = (landmarks[24:27], landmarks[8:9])"]]}, "r_eye": {"(?, ?, ?, ?)": [[53, "        r_eye = (landmarks[17:22],"]]}, "l_eye": {"(?, ?, ?, ?)": [[57, "        l_eye = (landmarks[22:27],"]]}, "r_cheek": {"(?, ?)": [[50, "        r_cheek = (landmarks[17:20], landmarks[8:9])"]]}, "r_jaw": {"(?, ?)": [[48, "        r_jaw = (landmarks[0:9], landmarks[17:18])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.process_input": {"param": {"self": {"Mask": [[24, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.process_outpu": {"param": {"batch": {"?": [[41, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.predict": {"var": {"hull": {"?": [[36, "                hull = cv2.convexHull(item)"]]}}, "param": {"self": {"Mask": [[30, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.__init": {"var": {"model_filename": {"None": [[13, "        model_filename = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.init_mod": {"param": {"self": {"Mask": [[21, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.process_output": {"param": {"self": {"Mask": [[41, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.__in": {"var": {"git_model_id": {"None": [[12, "        git_model_id = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.component": {"class": {"Mask": {"<Mask>": [[9, "class Mask(Masker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.parse_part": {"var": {"nose": {"(?, ?)": [[61, "        nose = (landmarks[27:31], landmarks[31:36])"]]}, "nose_ridge": {"(?, ?)": [[52, "        nose_ridge = (landmarks[19:25], landmarks[8:9],)"]]}}, "param": {"landmarks": {"?": [[46, "    def parse_parts(landmarks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.parse_": {"var": {"parts": {"[{(?, ?) | (?, ?, ?, ?)}]": [[62, "        parts = [r_jaw, l_jaw, r_cheek, l_cheek, nose_ridge, r_eye, l_eye, nose]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.__init__": {"param": {"self": {"Mask": [[11, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask.predi": {"param": {"batch": {"?": [[30, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.components.Mask": {"func": {"predict": {"(Mask, ?) -> None": [[30, "    def predict(self, batch):"]]}, "process_output": {"(Mask, ?) -> None": [[41, "    def process_output(self, batch):"]]}, "process_input": {"(Mask, ?) -> None": [[24, "    def process_input(self, batch):"]]}, "init_model": {"Mask -> None": [[21, "    def init_model(self):"]]}, "parse_parts": {"? -> [{(?, ?) | (?, ?, ?, ?)}]": [[46, "    def parse_parts(landmarks):"]]}, "__init__": {"? -> ?": [[11, "    def __init__(self, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/color_transfer_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[52, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/trainer/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._log_tensorboard": {"var": {"logs": {"dict": [[345, "        logs = {log[0]: log[1]"]]}}, "param": {"loss": {"?": [[332, "    def _log_tensorboard(self, side, loss):"]]}, "self": {"TrainerBase": [[332, "    def _log_tensorboard(self, side, loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.train_one_batch": {"var": {"msg": {"str": [[426, "            msg = (\"You do not have enough GPU memory available to train the selected model at \""]]}, "loss": {"[?]": [[437, "        loss = loss if isinstance(loss, list) else [loss]"]], "?": [[424, "            loss = self._model.predictors[self._side].train_on_batch(model_inputs, model_targets)"]]}, "model_inputs": {"?": [[422, "        model_inputs, model_targets = self._get_next()"]]}}, "param": {"self": {"Batcher": [[413, "    def train_one_batch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._resize_sampl": {"var": {"interpn": {"?": [[678, "        interpn = cv2.INTER_CUBIC if scale > 1.0 else cv2.INTER_AREA"]]}}, "param": {"target_size": {"int": [[658, "    def _resize_sample(side, sample, target_size):"]]}, "side": {"?": [[658, "    def _resize_sample(side, sample, target_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._overlay_fore": {"param": {"backgrounds": {"None": [[809, "    def _overlay_foreground(backgrounds, foregrounds):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._set_tensorboard": {"var": {"tbs": {"?": [[210, "            tbs = tf.keras.callbacks.TensorBoard(log_dir=log_dir, **self._tensorboard_kwargs)"]]}}, "param": {"self": {"TrainerBase": [[178, "    def _set_tensorboard(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._validate_": {"param": {"face": {"?": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._transform_landmark": {"param": {"self": {"TrainingAlignments": [[1068, "    def _transform_landmarks(self, side, detected_faces):"]]}, "side": {"?": [[1068, "    def _transform_landmarks(self, side, detected_faces):"]]}, "detected_faces": {"?": [[1068, "    def _transform_landmarks(self, side, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._to_detected_faces": {"var": {"dupe_count": {"int": [[1209, "        dupe_count = 0"]]}, "detected_face": {"DetectedFace": [[1220, "                detected_face = DetectedFace()"]]}, "idx": {"?": [[1213, "            for idx, face in enumerate(faces):"]]}, "_": {"?": [[1212, "        for _, faces, _, filename in alignments.yield_faces():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.PingPong.activ": {"param": {"self": {"PingPong": [[1016, "    def active(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.__init__": {"param": {"images": {"?": [[104, "    def __init__(self, model, images, batch_size, configfile):"]]}, "self": {"TrainerBase": [[104, "    def __init__(self, model, images, batch_size, configfile):"]]}, "model": {"?": [[104, "    def __init__(self, model, images, batch_size, configfile):"]]}, "configfile": {"?": [[104, "    def __init__(self, model, images, batch_size, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._duplicate_": {"param": {"headers": {"dict": [[881, "    def _duplicate_headers(headers, columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments.masks": {"var": {"retval": {"dict": [[1096, "        retval = {side: self._get_masks(side, detected_faces)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._bas": {"var": {"logger": {"?": [[63, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"Batcher": {"<Batcher>": [[363, "class Batcher():"]]}}, "func": {"_get_config": {"(?, None) -> FaceswapConfig -> dict / (str, None) -> FaceswapConfig -> dict": [[66, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._use_mask": {"var": {"retval": {"?": [[157, "        retval = (self._model.training_opts[\"learn_mask\"] or"]]}}, "param": {"self": {"TrainerBase": [[155, "    def _use_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_samp": {"var": {"retval": {"[?]": [[527, "        retval = [samples[0:num_images], images[0:num_images], masks[0:num_images]]"]]}}, "param": {"self": {"Batcher": [[495, "    def compile_sample(self, batch_size, samples=None, images=None, masks=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._b": {"class": {"TrainingAlignments": {"<TrainingAlignments>": [[1036, "class TrainingAlignments():"]]}, "TrainerBase": {"<TrainerBase>": [[85, "class TrainerBase():"]]}, "Timelapse": {"<Timelapse>": [[903, "class Timelapse():"]]}, "Samples": {"<Samples>": [[572, "class Samples():"]]}}, "func": {"_stack_images": {"? -> None": [[1340, "def _stack_images(images):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_sample": {"var": {"masks": {"None": [[525, "        masks = masks if masks is not None else self._masks"]]}}, "param": {"masks": {"None": [[495, "    def compile_sample(self, batch_size, samples=None, images=None, masks=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.__print_lo": {"param": {"self": {"TrainerBase": [[234, "    def __print_loss(self, loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.train_one_ste": {"var": {"do_snapshot": {"bool": [[274, "        do_snapshot = (snapshot_interval != 0 and"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples.__init": {"param": {"use_mask": {"TrainerBase -> None": [[593, "    def __init__(self, model, use_mask, coverage_ratio, scaling=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.train_one_step": {"var": {"loss": {"dict": [[278, "        loss = dict()"]]}, "side": {"?": [[280, "            for side, batcher in self._batchers.items():"], [294, "            for side, side_loss in loss.items():"]]}, "key": {"?": [[301, "                for key, val in loss.items():"]]}}, "param": {"viewer": {"?": [[251, "    def train_one_step(self, viewer, timelapse_kwargs):"]]}, "self": {"TrainerBase": [[251, "    def train_one_step(self, viewer, timelapse_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_": {"var": {"samples": {"None": [[526, "        samples = samples if samples is not None else self._samples"]]}}, "param": {"samples": {"None": [[495, "    def compile_sample(self, batch_size, samples=None, images=None, masks=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._validate_face": {"var": {"msg": {"?": [[1262, "            msg = (\"You have selected a Mask Type in your training configuration options but at \""], [1271, "            msg = (\"At least one of your faces does not have the mask `{}` stored for it.\\nYou \""]]}}, "param": {"idx": {"?": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.__print_loss": {"var": {"output": {"[str]": [[245, "        output = [\"Loss {}: {:.5f}\".format(side.capitalize(), loss[side][0])"]], "str": [[247, "        output = \", \".join(output)"], [248, "        output = \"[{}] [#{:05d}] {}\".format(self._timestamp, self._model.iterations, output)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse._se": {"var": {"output": {"str": [[965, "            output = str(get_folder(os.path.join(str(self._model.model_dir),"]]}}, "param": {"output": {"None": [[950, "    def _setup(self, input_a=None, input_b=None, output=None):"]]}, "input_b": {"None": [[950, "    def _setup(self, input_a=None, input_b=None, output=None):"]]}, "input_a": {"None": [[950, "    def _setup(self, input_a=None, input_b=None, output=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._frame_overlay": {"var": {"t_l": {"int": [[768, "        t_l, b_r = (padding, full_size - padding)"]]}, "img": {"?": [[769, "        for img in images:"]]}, "retval": {"?": [[775, "        retval = np.array(new_images)"]]}, "padding": {"int": [[766, "        padding = (full_size - target_size) // 2"]]}, "new_images": {"list": [[764, "        new_images = list()"]]}, "length": {"int": [[767, "        length = target_size // 4"]]}, "full_size": {"?": [[765, "        full_size = images.shape[1]"]]}}, "param": {"images": {"?": [[743, "    def _frame_overlay(images, target_size, color):"]]}, "color": {"(int, int, int)": [[743, "    def _frame_overlay(images, target_size, color):"]]}, "target_size": {"int": [[743, "    def _frame_overlay(images, target_size, color):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._overlay_foregroun": {"var": {"idx": {"?": [[826, "        for idx, img in enumerate(backgrounds):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples.show_sample": {"var": {"width": {"int": [[642, "        width = 4"]]}, "mask": {"?": [[626, "                mask = samples[-1]"]]}, "display": {"[None]": [[635, "            display = self._to_full_frame(side, samples, predictions)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._timestamp": {"param": {"self": {"TrainerBase": [[143, "    def _timestamp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.__init": {"param": {"use_mask": {"TrainerBase -> None": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.train_one_st": {"var": {"do_preview": {"bool": [[271, "        do_preview = viewer is not None"]]}, "samples": {"None": [[306, "                samples = self._samples.show_sample()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments": {"func": {"_validate_face": {"(TrainingAlignments, ?, ?, ?, ?, ?) -> None": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}, "__init__": {"? -> ?": [[1048, "    def __init__(self, training_opts, image_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._check_alignments_exis": {"var": {"fullpath": {"?": [[1136, "        for fullpath in self._training_opts[\"alignments\"].values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse._setup": {"var": {"images": {"dict": [[970, "        images = {\"a\": get_image_paths(input_a), \"b\": get_image_paths(input_b)}"]]}, "batchsize": {"int": [[971, "        batchsize = min(len(images[\"a\"]),"]]}, "side": {"?": [[974, "        for side, image_files in images.items():"]]}}, "param": {"self": {"Timelapse": [[950, "    def _setup(self, input_a=None, input_b=None, output=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._validate_fac": {"var": {"mask_type": {"?": [[1260, "        mask_type = self._training_opts[\"mask_type\"]"]]}}, "param": {"self": {"TrainingAlignments": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}, "side_hashes": {"?": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}, "side": {"?": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}, "filename": {"?": [[1233, "    def _validate_face(self, face, filename, idx, side, side_hashes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._get_predictions": {"var": {"key": {"?": [[706, "            for key, val in preds.items():"]]}}, "param": {"feed_b": {"?": [[684, "    def _get_predictions(self, feed_a, feed_b):"]]}, "feed_a": {"?": [[684, "    def _get_predictions(self, feed_a, feed_b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments.__in": {"param": {"image_list": {"?": [[1048, "    def __init__(self, training_opts, image_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.PingPong._reload_mod": {"param": {"self": {"PingPong": [[1029, "    def _reload_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.train_on": {"var": {"do_timelapse": {"bool": [[272, "        do_timelapse = timelapse_kwargs is not None"]]}}, "param": {"timelapse_kwargs": {"?": [[251, "    def train_one_step(self, viewer, timelapse_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._get_header": {"var": {"text_sizes": {"[?]": [[860, "        text_sizes = [cv2.getTextSize(texts[idx], font, self._scaling * 0.8, 1)[0]"]]}, "texts": {"[str]": [[857, "        texts = [\"{} ({})\".format(titles[0], side),"]]}, "titles": {"(str, str)": [[851, "        titles = (\"Original\", \"Swap\") if side == \"a\" else (\"Swap\", \"Original\")"]]}, "side": {"?": [[852, "        side = side.upper()"]]}}, "param": {"self": {"Samples": [[834, "    def _get_headers(self, side, width):"]]}, "side": {"?": [[834, "    def _get_headers(self, side, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._set_tensorboar": {"var": {"side": {"?": [[204, "        for side in self._sides:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse": {"func": {"__init__": {"? -> ?": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._get_": {"var": {"mask": {"?": [[1120, "            mask = face.mask[self._training_opts[\"mask_type\"]]"]]}, "masks": {"dict": [[1118, "        masks = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._transform_": {"var": {"landmarks": {"dict": [[1083, "        landmarks = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_timelapse_sample": {"var": {"batch": {"?": [[539, "        batch = next(self._timelapse_feed)"]]}, "masks": {"?": [[542, "        masks = batch[\"masks\"][0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.__init__": {"var": {"generator": {"TrainingDataGenerator": [[394, "        generator = self._load_generator()"]]}}, "param": {"images": {"?": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}, "model": {"?": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}, "self": {"Batcher": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}, "config": {"FaceswapConfig -> dict": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}, "side": {"?": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._stack": {"var": {"images_shape": {"?": [[1366, "    images_shape = np.array(images.shape)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.__init": {"param": {"use_mask": {"TrainerBase -> None": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._stack_images.get_transpo": {"var": {"y_axes": {"list": [[1358, "            y_axes = list(range(1, num - 1, 2))"], [1362, "            y_axes = list(range(0, num - 1, 2))"]]}, "x_axes": {"list": [[1359, "            x_axes = list(range(0, num - 1, 2))"], [1363, "            x_axes = list(range(1, num - 1, 2))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.B": {"func": {"train_one_batch": {"Batcher -> [?]": [[413, "    def train_one_batch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignment": {"func": {"landmarks": {"TrainingAlignments -> dict": [[1061, "    def landmarks(self):"]]}, "_check_all_faces": {"TrainingAlignments -> None": [[1286, "    def _check_all_faces(self):"]]}, "masks": {"TrainingAlignments -> dict": [[1092, "    def masks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._stack_": {"param": {"images": {"?": [[1340, "def _stack_images(images):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.__print_": {"param": {"loss": {"{dict | dict}": [[234, "    def __print_loss(self, loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments.landmark": {"param": {"self": {"TrainingAlignments": [[1061, "    def landmarks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.S": {"func": {"show_sample": {"Samples -> None": [[603, "    def show_sample(self):"]]}, "_compile_masked": {"([?], ?) -> list / (?, ?) -> list": [[780, "    def _compile_masked(faces, masks):"]]}, "_resize_sample": {"(?, None, int) -> None / (?, ?, ?) -> None / (?, ?, int) -> None": [[658, "    def _resize_sample(side, sample, target_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.T": {"param": {"timelapse_kwargs": {"?": [[933, "    def get_sample(self, side, timelapse_kwargs):"]]}}, "func": {"output_timelapse": {"Timelapse -> None": [[978, "    def output_timelapse(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelaps": {"param": {"image_count": {"?": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher._load_": {"var": {"generator": {"TrainingDataGenerator": [[407, "        generator = TrainingDataGenerator(input_size,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._check_all_fac": {"var": {"align_hashes": {"?": [[1298, "            align_hashes = set(self._detected_faces[side])"]]}, "side": {"?": [[1297, "        for side, train_hashes in self._hashes.items():"], [1309, "            for side, filelist in missing_alignments.items():"]]}, "missing_alignments": {"dict": [[1296, "        missing_alignments = dict()"]]}}, "param": {"self": {"TrainingAlignments": [[1286, "    def _check_all_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_timelapse_sampl": {"var": {"images": {"?": [[541, "        images = batch[\"targets\"][self._model.largest_face_index]"]]}, "batchsize": {"int": [[540, "        batchsize = len(batch[\"samples\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments.__init__": {"param": {"self": {"TrainingAlignments": [[1048, "    def __init__(self, training_opts, image_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._set_tensorboa": {"var": {"log_dir": {"str": [[206, "            log_dir = os.path.join(str(self._model.model_dir),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher._set_preview_feed": {"var": {"batchsize": {"int": [[487, "        batchsize = min(len(self._images), preview_images)"]]}, "preview_images": {"int": [[486, "        preview_images = min(max(preview_images, 2), 16)"]], "?": [[485, "        preview_images = self._config.get(\"preview_images\", 14)"]]}}, "param": {"self": {"Batcher": [[478, "    def _set_preview_feed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples.show_samp": {"var": {"side_cols": {"int": [[643, "        side_cols = width // 2"]]}}, "param": {"self": {"Samples": [[603, "    def show_sample(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples.show_sampl": {"var": {"figure": {"None": [[651, "        figure = _stack_images(figure)"]], "?": [[648, "        figure = np.concatenate([figures[\"a\"], figures[\"b\"]], axis=0)"], [650, "        figure = figure.reshape((width, height) + figure.shape[1:])"], [652, "        figure = np.concatenate((header, figure), axis=0)"]]}, "preds": {"dict": [[629, "        preds = self._get_predictions(feeds[\"a\"], feeds[\"b\"])"]]}, "header": {"?": [[647, "        header = np.concatenate([headers[\"a\"], headers[\"b\"]], axis=1)"]]}, "predictions": {"[?]": [[633, "            predictions = [preds[\"{0}_{0}\".format(side)],"]]}, "other_side": {"str": [[632, "            other_side = \"a\" if side == \"b\" else \"b\""]]}, "height": {"int": [[649, "        height = int(figure.shape[0] / width)"]]}, "headers": {"dict": [[617, "        headers = dict()"], [645, "            headers = self._duplicate_headers(headers, side_cols)"]]}, "figures": {"dict": [[616, "        figures = dict()"]]}, "faces": {"?": [[619, "            faces = samples[1]"]]}, "feeds": {"dict": [[615, "        feeds = dict()"]]}, "side": {"?": [[618, "        for side, samples in self.images.items():"], [631, "        for side, samples in self.images.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.PingPong": {"func": {"active": {"PingPong -> None": [[1016, "    def active(self):"]]}, "switch": {"PingPong -> None": [[1020, "    def switch(self):"]]}, "__init__": {"? -> ?": [[1007, "    def __init__(self, model, sides):"]]}, "_reload_model": {"PingPong -> None": [[1029, "    def _reload_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._to_full_fr": {"var": {"images": {"list": [[733, "            images = self._compile_masked(images, samples[-1])"]], "[None]": [[734, "        images = [self._resize_sample(side, image, target_size) for image in images]"], [736, "            images = [self._overlay_foreground(frame, image) for image in images]"], [739, "            images = [self._resize_sample(side, image, new_size) for image in images]"]], "[?]": [[726, "        images = [faces] + predictions"]]}}, "param": {"samples": {"?": [[711, "    def _to_full_frame(self, side, samples, predictions):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.__init__": {"param": {"self": {"Timelapse": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}, "batchers": {"dict": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}, "model": {"?": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments.mask": {"param": {"self": {"TrainingAlignments": [[1092, "    def masks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._to_full_frame": {"var": {"full": {"?": [[725, "        full, faces = samples[:2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._to_detected_face": {"var": {"skip_count": {"int": [[1208, "        skip_count = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.get_samp": {"param": {"self": {"Timelapse": [[933, "    def get_sample(self, side, timelapse_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._get_headers": {"var": {"total_width": {"int": [[854, "        total_width = width * 3"]]}, "idx": {"?": [[868, "        for idx, text in enumerate(texts):"]]}, "height": {"int": [[853, "        height = int(64 * self._scaling)"]]}, "header_box": {"?": [[867, "        header_box = np.ones((height, total_width, 3), np.float32)"]]}, "text_x": {"[int]": [[863, "        text_x = [int((width - text_sizes[idx][0]) / 2) + width * idx"]]}, "text_y": {"int": [[862, "        text_y = int((height + text_sizes[0][1]) / 2)"]]}, "font": {"?": [[856, "        font = cv2.FONT_HERSHEY_SIMPLEX"]]}}, "param": {"width": {"?": [[834, "    def _get_headers(self, side, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._landmarks_required": {"var": {"retval": {"?": [[150, "        retval = self._model.training_opts[\"warp_to_landmarks\"]"]]}}, "param": {"self": {"TrainerBase": [[148, "    def _landmarks_required(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher": {"func": {"compile_timelapse_sample": {"Batcher -> [?]": [[530, "    def compile_timelapse_sample(self):"]]}, "_get_next": {"Batcher -> (?, ?)": [[440, "    def _get_next(self):"]]}, "set_timelapse_feed": {"(Batcher, ?, ?) -> None / (Batcher, ?, int) -> None": [[549, "    def set_timelapse_feed(self, images, batch_size):"]]}, "compile_sample": {"(Batcher, int, None, None, None) -> [?] / (Batcher, ?, None, None, None) -> [?]": [[495, "    def compile_sample(self, batch_size, samples=None, images=None, masks=None):"]]}, "__init__": {"? -> ?": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._resize_": {"param": {"sample": {"None": [[658, "    def _resize_sample(side, sample, target_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples.__in": {"param": {"coverage_ratio": {"?": [[593, "    def __init__(self, model, use_mask, coverage_ratio, scaling=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._get_prediction": {"var": {"preds": {"dict": [[699, "        preds = dict()"]]}}, "param": {"self": {"Samples": [[684, "    def _get_predictions(self, feed_a, feed_b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignme": {"param": {"training_opts": {"?": [[1048, "    def __init__(self, training_opts, image_list):"]]}}, "func": {"_transform_landmarks": {"(TrainingAlignments, ?, ?) -> dict": [[1068, "    def _transform_landmarks(self, side, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerB": {"var": {"snapshot_interval": {"?": [[273, "        snapshot_interval = self._model.training_opts.get(\"snapshot_interval\", 0)"]]}}, "func": {"_timestamp": {"TrainerBase -> str": [[143, "    def _timestamp(self):"]]}, "_use_mask": {"TrainerBase -> None": [[155, "    def _use_mask(self):"]]}, "_process_training_opts": {"TrainerBase -> None": [[162, "    def _process_training_opts(self):"]]}, "_tensorboard_kwargs": {"TrainerBase -> dict": [[217, "    def _tensorboard_kwargs(self):"]]}, "_set_tensorboard": {"TrainerBase -> dict": [[178, "    def _set_tensorboard(self):"]]}, "train_one_step": {"(TrainerBase, ?, ?) -> ?": [[251, "    def train_one_step(self, viewer, timelapse_kwargs):"]]}, "_log_tensorboard": {"(TrainerBase, ?, ?) -> None": [[332, "    def _log_tensorboard(self, side, loss):"]]}, "_landmarks_required": {"TrainerBase -> None": [[148, "    def _landmarks_required(self):"]]}, "clear_tensorboard": {"TrainerBase -> None": [[350, "    def clear_tensorboard(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._overlay_": {"param": {"foregrounds": {"None": [[809, "    def _overlay_foreground(backgrounds, foregrounds):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._get_mask": {"var": {"fhash": {"?": [[1119, "        for fhash, face in detected_faces.items():"]]}}, "param": {"self": {"TrainingAlignments": [[1101, "    def _get_masks(self, side, detected_faces):"]]}, "side": {"?": [[1101, "    def _get_masks(self, side, detected_faces):"]]}, "detected_faces": {"?": [[1101, "    def _get_masks(self, side, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.output_timelap": {"param": {"self": {"Timelapse": [[978, "    def output_timelapse(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._set_": {"var": {"tensorboard": {"dict": [[202, "        tensorboard = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher._get_next": {"param": {"self": {"Batcher": [[440, "    def _get_next(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._stack_images.get_transpose_axes": {"param": {"num": {"int": [[1355, "    def get_transpose_axes(num):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_sampl": {"var": {"images": {"None": [[524, "        images = images if images is not None else self._target"]]}, "num_images": {"int": [[522, "        num_images = min(batch_size, num_images) if batch_size is not None else num_images"]], "?": [[521, "        num_images = self._config.get(\"preview_images\", 14)"]]}}, "param": {"images": {"None": [[495, "    def compile_sample(self, batch_size, samples=None, images=None, masks=None):"]]}, "batch_size": {"int": [[495, "    def compile_sample(self, batch_size, samples=None, images=None, masks=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._process_training_opt": {"param": {"self": {"TrainerBase": [[162, "    def _process_training_opts(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.PingPong.__init__": {"param": {"self": {"PingPong": [[1007, "    def __init__(self, model, sides):"]]}, "model": {"?": [[1007, "    def __init__(self, model, sides):"]]}, "sides": {"?": [[1007, "    def __init__(self, model, sides):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._overlay_foreground": {"var": {"new_images": {"list": [[825, "        new_images = list()"]]}, "retval": {"?": [[830, "        retval = np.array(new_images)"]]}, "offset": {"int": [[824, "        offset = (backgrounds.shape[1] - foregrounds.shape[1]) // 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._stack_imag": {"var": {"new_shape": {"[?]": [[1368, "    new_shape = [np.prod(images_shape[x]) for x in new_axes]"]]}, "new_axes": {"(list, list, [int])": [[1367, "    new_axes = get_transpose_axes(len(images_shape))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._load_": {"var": {"alignments": {"Alignments": [[1185, "            alignments = Alignments(path, filename=filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._duplicate_header": {"var": {"side": {"?": [[896, "        for side, header in headers.items():"]]}}, "param": {"columns": {"int": [[881, "    def _duplicate_headers(headers, columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.generate_preview": {"var": {"batch": {"?": [[473, "        batch = next(self._preview_feed)"]]}}, "param": {"self": {"Batcher": [[458, "    def generate_preview(self, do_preview):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._to_full_": {"var": {"frame": {"None": [[730, "            frame = self._frame_overlay(full, target_size, (0, 0, 255))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._get_image_hashes": {"var": {"filename": {"?": [[1162, "            for filename, hsh in tqdm(read_image_hash_batch(filelist),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples": {"func": {"_overlay_foreground": {"(?, ?) -> None / (None, None) -> None": [[809, "    def _overlay_foreground(backgrounds, foregrounds):"]]}, "_to_full_frame": {"(Samples, ?, ?, ?) -> [None] / (Samples, ?, ?, [?]) -> [None]": [[711, "    def _to_full_frame(self, side, samples, predictions):"]]}, "_frame_overlay": {"(?, int, (int, int, int)) -> None / (?, ?, ?) -> None": [[743, "    def _frame_overlay(images, target_size, color):"]]}, "__init__": {"? -> ?": [[593, "    def __init__(self, model, use_mask, coverage_ratio, scaling=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._to_detected_fac": {"var": {"side_hashes": {"?": [[1210, "        side_hashes = set(self._hashes[side])"]]}}, "param": {"self": {"TrainingAlignments": [[1190, "    def _to_detected_faces(self, alignments, side):"]]}, "alignments": {"Alignments": [[1190, "    def _to_detected_faces(self, alignments, side):"]]}, "side": {"?": [[1190, "    def _to_detected_faces(self, alignments, side):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._tensorboard_": {"var": {"kwargs": {"dict": [[221, "        kwargs = dict(histogram_freq=0,  # Must be 0 or hangs"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._get_conf": {"param": {"plugin_name": {"str": [[66, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.get_sampl": {"param": {"side": {"?": [[933, "    def get_sample(self, side, timelapse_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments.landmarks": {"var": {"retval": {"dict": [[1063, "        retval = {side: self._transform_landmarks(side, detected_faces)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batch": {"func": {"_load_generator": {"Batcher -> TrainingDataGenerator": [[401, "    def _load_generator(self):"]]}, "generate_preview": {"(Batcher, ?) -> None": [[458, "    def generate_preview(self, do_preview):"]]}, "_set_preview_feed": {"Batcher -> None": [[478, "    def _set_preview_feed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._stack_im": {"func": {"get_transpose_axes": {"int -> (list, list, [int])": [[1355, "    def get_transpose_axes(num):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Sampl": {"func": {"_get_headers": {"(Samples, ?, ?) -> None": [[834, "    def _get_headers(self, side, width):"]]}, "_get_predictions": {"(Samples, ?, ?) -> dict": [[684, "    def _get_predictions(self, feed_a, feed_b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.__in": {"param": {"coverage_ratio": {"?": [[922, "    def __init__(self, model, use_mask, coverage_ratio, image_count, batchers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_timelapse_": {"var": {"sample": {"[?]": [[543, "        sample = self.compile_sample(batchsize,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher._load_generator": {"var": {"input_size": {"?": [[404, "        input_size = self._model.input_shape[0]"]]}, "output_shapes": {"?": [[405, "        output_shapes = self._model.output_shapes"]]}}, "param": {"self": {"Batcher": [[401, "    def _load_generator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._get_masks": {"var": {"filename": {"?": [[1123, "            for filename in self._hash_to_filenames(side, fhash):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.compile_timelapse_samp": {"param": {"self": {"Batcher": [[530, "    def compile_timelapse_sample(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._get_image_": {"var": {"hashes": {"dict": [[1159, "        hashes = {key: dict() for key in image_list}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._duplicate_headers": {"var": {"duped": {"tuple": [[897, "            duped = tuple([header for _ in range(columns)])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingA": {"func": {"_load_alignments": {"TrainingAlignments -> dict": [[1171, "    def _load_alignments(self):"]]}, "_check_alignments_exist": {"TrainingAlignments -> None": [[1128, "    def _check_alignments_exist(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Ti": {"func": {"get_sample": {"(Timelapse, ?, ?) -> None": [[933, "    def get_sample(self, side, timelapse_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher._get_nex": {"var": {"targets_use_mask": {"?": [[453, "        targets_use_mask = self._model.training_opts[\"learn_mask\"]"]]}, "model_targets": {"?": [[455, "        model_targets = batch[\"targets\"] + batch[\"masks\"] if targets_use_mask else batch[\"targets\"]"]]}, "batch": {"?": [[452, "        batch = next(self._feed)"]]}, "model_inputs": {"?": [[454, "        model_inputs = batch[\"feed\"] + batch[\"masks\"] if self._use_mask else batch[\"feed\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._to": {"var": {"detected_faces": {"dict": [[1211, "        detected_faces = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.set_timelapse_feed": {"param": {"images": {"?": [[549, "    def set_timelapse_feed(self, images, batch_size):"]]}, "self": {"Batcher": [[549, "    def set_timelapse_feed(self, images, batch_size):"]]}, "batch_size": {"int": [[549, "    def set_timelapse_feed(self, images, batch_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.__in": {"param": {"batch_size": {"?": [[381, "    def __init__(self, side, images, model, use_mask, batch_size, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timelapse.output_timelaps": {"var": {"image": {"None": [[981, "        image = self._samples.show_sample()"]]}, "filename": {"str": [[984, "        filename = os.path.join(self._output_file, str(int(time.time())) + \".jpg\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.clear_tensorboar": {"var": {"side": {"?": [[358, "        for side, tensorboard in self._tensorboard.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._log_tensorboar": {"param": {"side": {"?": [[332, "    def _log_tensorboard(self, side, loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase": {"func": {"__print_loss": {"(TrainerBase, dict) -> None / (TrainerBase, ?) -> None": [[234, "    def __print_loss(self, loss):"]]}, "pingpong": {"TrainerBase -> PingPong": [[138, "    def pingpong(self):"]]}, "__init__": {"? -> ?": [[104, "    def __init__(self, model, images, batch_size, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._tensorboard_kwarg": {"var": {"tf_version": {"[int]": [[225, "        tf_version = [int(ver) for ver in tf.__version__.split(\".\") if ver.isdigit()]"]]}}, "param": {"self": {"TrainerBase": [[217, "    def _tensorboard_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlig": {"func": {"_hash_to_filenames": {"(TrainingAlignments, ?, ?) -> None": [[1315, "    def _hash_to_filenames(self, side, face_hash):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._hash_to_filenames": {"var": {"retval": {"?": [[1335, "        retval = self._hashes[side][face_hash]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base._get_": {"param": {"configfile": {"None": [[66, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._check_alignments_exist": {"param": {"self": {"TrainingAlignments": [[1128, "    def _check_alignments_exist(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._hash_to_filenam": {"param": {"self": {"TrainingAlignments": [[1315, "    def _hash_to_filenames(self, side, face_hash):"]]}, "face_hash": {"?": [[1315, "    def _hash_to_filenames(self, side, face_hash):"]]}, "side": {"?": [[1315, "    def _hash_to_filenames(self, side, face_hash):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._check_all_face": {"var": {"msg": {"str": [[1306, "            msg = (\"There are faces in your training folder(s) which do not exist in your \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._load_alignment": {"var": {"side": {"?": [[1182, "        for side, fullpath in self._training_opts[\"alignments\"].items():"]]}}, "param": {"self": {"TrainingAlignments": [[1171, "    def _load_alignments(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.__in": {"param": {"batch_size": {"?": [[104, "    def __init__(self, model, images, batch_size, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Sam": {"func": {"_duplicate_headers": {"(?, ?) -> None / (dict, int) -> dict": [[881, "    def _duplicate_headers(headers, columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._get_image_hash": {"var": {"side": {"?": [[1160, "        for side, filelist in image_list.items():"]]}}, "param": {"image_list": {"?": [[1142, "    def _get_image_hashes(image_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base": {"class": {"PingPong": {"<PingPong>": [[990, "class PingPong():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._process_training_op": {"var": {"alignments": {"TrainingAlignments": [[169, "        alignments = TrainingAlignments(self._model.training_opts, self._images)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._resize_samp": {"var": {"scale": {"int": [[673, "        scale = target_size / sample.shape[1]"]]}, "retval": {"?": [[679, "        retval = np.array([cv2.resize(img, (target_size, target_size), interpn)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._to_full_fram": {"var": {"target_size": {"int": [[728, "        target_size = int(full_size * self._coverage_ratio)"]]}, "full_size": {"?": [[727, "        full_size = full.shape[1]"]]}, "new_size": {"int": [[738, "            new_size = int(full_size * self._scaling)"]]}}, "param": {"self": {"Samples": [[711, "    def _to_full_frame(self, side, samples, predictions):"]]}, "side": {"?": [[711, "    def _to_full_frame(self, side, samples, predictions):"]]}, "predictions": {"[?]": [[711, "    def _to_full_frame(self, side, samples, predictions):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples._compile_masked": {"var": {"images": {"?": [[802, "            images = np.array([cv2.addWeighted(img, 1.0, masks3[idx], 0.3, 0)"]]}, "masks3": {"?": [[798, "        masks3 = np.tile(1 - np.rint(masks), 3)"]]}, "retval": {"list": [[797, "        retval = list()"]]}, "mask": {"?": [[799, "        for mask in masks3:"]]}, "previews": {"?": [[801, "        for previews in faces:"]]}}, "param": {"masks": {"?": [[780, "    def _compile_masked(faces, masks):"]]}, "faces": {"[?]": [[780, "    def _compile_masked(faces, masks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBa": {"func": {"_store_history": {"(TrainerBase, ?, ?) -> None": [[318, "    def _store_history(self, side, loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._transform_landmarks": {"var": {"filename": {"?": [[1086, "            for filename in self._hash_to_filenames(side, face.hash):"]]}, "face": {"?": [[1084, "        for face in detected_faces.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.clear_tensorboard": {"param": {"self": {"TrainerBase": [[350, "    def clear_tensorboard(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase._store_history": {"param": {"loss": {"?": [[318, "    def _store_history(self, side, loss):"]]}, "self": {"TrainerBase": [[318, "    def _store_history(self, side, loss):"]]}, "side": {"?": [[318, "    def _store_history(self, side, loss):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Batcher.generat": {"param": {"do_preview": {"?": [[458, "    def generate_preview(self, do_preview):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.PingPong.switch": {"var": {"retval": {"?": [[1024, "        retval = [side for side in self._sides if side != self.side][0]"]]}}, "param": {"self": {"PingPong": [[1020, "    def switch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainerBase.pingpong": {"param": {"self": {"TrainerBase": [[138, "    def pingpong(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignmen": {"func": {"_to_detected_faces": {"(TrainingAlignments, ?, ?) -> dict / (TrainingAlignments, Alignments, ?) -> dict": [[1190, "    def _to_detected_faces(self, alignments, side):"]]}, "_get_masks": {"(TrainingAlignments, ?, ?) -> dict": [[1101, "    def _get_masks(self, side, detected_faces):"]]}, "_get_image_hashes": {"? -> dict": [[1142, "    def _get_image_hashes(image_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Timela": {"func": {"_setup": {"(Timelapse, None, None, None) -> None": [[950, "    def _setup(self, input_a=None, input_b=None, output=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.Samples.__init__": {"param": {"scaling": {"float": [[593, "    def __init__(self, model, use_mask, coverage_ratio, scaling=1.0):"]]}, "self": {"Samples": [[593, "    def __init__(self, model, use_mask, coverage_ratio, scaling=1.0):"]]}, "model": {"?": [[593, "    def __init__(self, model, use_mask, coverage_ratio, scaling=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer._base.TrainingAlignments._load_alignments": {"var": {"path": {"str": [[1184, "            path, filename = os.path.split(fullpath)"]]}, "retval": {"dict": [[1181, "        retval = dict()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/lightweight.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight.Model.decode": {"var": {"var_y": {"?": [[51, "            var_y = input_"], [52, "            var_y = self.blocks.upscale(var_y, 512)"], [53, "            var_y = self.blocks.upscale(var_y, 256)"], [54, "            var_y = self.blocks.upscale(var_y, 128)"], [55, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[39, "        var_x = input_"], [40, "        var_x = self.blocks.upscale(var_x, 512)"], [41, "        var_x = self.blocks.upscale(var_x, 256)"], [42, "        var_x = self.blocks.upscale(var_x, 128)"], [43, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight.Model.encode": {"var": {"var_x": {"?": [[26, "        var_x = input_"], [27, "        var_x = self.blocks.conv(var_x, 128)"], [28, "        var_x = self.blocks.conv(var_x, 256)"], [29, "        var_x = self.blocks.conv(var_x, 512)"], [30, "        var_x = Dense(self.encoder_dim)(Flatten()(var_x))"], [31, "        var_x = Dense(4 * 4 * 512)(var_x)"], [32, "        var_x = Reshape((4, 4, 512))(var_x)"], [33, "        var_x = self.blocks.upscale(var_x, 256)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight.Model.__init__": {"param": {"self": {"Model": [[14, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight": {"class": {"Model": {"<Model>": [[12, "class Model(OriginalModel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight.Model.encoder": {"var": {"input_": {"?": [[25, "        input_ = Input(shape=self.input_shape)"]]}}, "param": {"self": {"Model": [[23, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight.Model.decoder": {"var": {"outputs": {"[?]": [[48, "        outputs = [var_x]"]]}, "input_": {"?": [[38, "        input_ = Input(shape=(8, 8, 256))"]]}}, "param": {"self": {"Model": [[36, "    def decoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.lightweight.Model": {"func": {"decoder": {"Model -> None": [[36, "    def decoder(self):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, *args, **kwargs):"]]}, "encoder": {"Model -> None": [[23, "    def encoder(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/gif_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.gif_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for outputting converted frames to an animated gif.\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/seamless_clone.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.seamless_clone.Col": {"func": {"process": {"(?, ?, ?) -> float": [[20, "    def process(old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.seamless_clone.Color.process": {"var": {"prior": {"?": [[34, "        prior = np.rint(np.pad(old_face * 255.0,"]]}, "blended": {"?": [[38, "        blended = cv2.seamlessClone(insertion,  # pylint: disable=no-member"], [43, "        blended = blended[height:-height, width:-width]"]]}, "height": {"int": [[22, "        height = height // 2"]], "?": [[21, "        height, width, _ = old_face.shape"]]}, "y_crop": {"?": [[26, "        y_crop = slice(np.min(y_indices), np.max(y_indices))"]]}, "width": {"int": [[23, "        width = width // 2"]]}, "x_center": {"int": [[29, "        x_center = int(np.rint((np.max(x_indices) + np.min(x_indices)) / 2 + width))"]]}, "x_crop": {"?": [[27, "        x_crop = slice(np.min(x_indices), np.max(x_indices))"]]}, "y_center": {"int": [[28, "        y_center = int(np.rint((np.max(y_indices) + np.min(y_indices)) / 2 + height))"]]}}, "param": {"old_face": {"?": [[20, "    def process(old_face, new_face, raw_mask):"]]}, "new_face": {"?": [[20, "    def process(old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.seamless_clone.Color.proc": {"var": {"insertion_mask": {"?": [[32, "        insertion_mask = np.rint(raw_mask[y_crop, x_crop] * 255.0).astype(\"uint8\")"]]}, "insertion": {"?": [[31, "        insertion = np.rint(new_face[y_crop, x_crop] * 255.0).astype(\"uint8\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.seamless_clone": {"class": {"Color": {"<Color>": [[13, "class Color(Adjustment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.seamless_clone.Color.proce": {"param": {"raw_mask": {"?": [[20, "    def process(old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.seamless_clone.Color.pro": {"var": {"y_indices": {"?": [[25, "        y_indices, x_indices, _ = np.nonzero(raw_mask)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/vgg_obstructed.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed": {"class": {"Mask": {"<Mask>": [[22, "class Mask(Masker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.predi": {"param": {"batch": {"?": [[51, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.__init": {"var": {"model_filename": {"str": [[26, "        model_filename = \"Nirkin_500_softmax_v1.h5\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.process_output": {"param": {"self": {"Mask": [[57, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.process_input": {"param": {"self": {"Mask": [[44, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask": {"var": {"predictions": {"?": [[53, "        predictions = self.model.predict(batch[\"feed\"])"]]}}, "func": {"predict": {"(Mask, ?) -> None": [[51, "    def predict(self, batch):"]]}, "process_output": {"(Mask, ?) -> None": [[57, "    def process_output(self, batch):"]]}, "process_input": {"(Mask, ?) -> None": [[44, "    def process_input(self, batch):"]]}, "init_model": {"Mask -> None": [[35, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[24, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.process_outpu": {"param": {"batch": {"?": [[57, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.process": {"var": {"input_": {"[?]": [[46, "        input_ = [face.feed_face[..., :3] for face in batch[\"detected_faces\"]]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.init_m": {"var": {"placeholder": {"?": [[40, "        placeholder = np.zeros((self.batchsize, self.input_size, self.input_size, 3),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.__init__": {"param": {"self": {"Mask": [[24, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.init_mod": {"param": {"self": {"Mask": [[35, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.process_inpu": {"param": {"batch": {"?": [[44, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.__in": {"var": {"git_model_id": {"int": [[25, "        git_model_id = 5"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.vgg_obstructed.Mask.predict": {"param": {"self": {"Mask": [[51, "    def predict(self, batch):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/training_data.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._proce": {"var": {"batch_src_pts": {"None": [[207, "            batch_src_pts = self._get_landmarks(filenames, side)"]]}, "batch_dst_pts": {"None": [[208, "            batch_dst_pts = self._get_closest_match(filenames, side, batch_src_pts)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.__init": {"param": {"is_display": {"?": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentat": {"func": {"random_flip": {"(ImageAugmentation, None) -> None / (ImageAugmentation, ?) -> None": [[621, "    def random_flip(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.transform": {"var": {"shift_range": {"int": [[592, "        shift_range = self._config.get(\"shift_range\", 5) / 100"]]}, "rotation": {"?": [[594, "        rotation = np.random.uniform(-rotation_range,"]]}, "scale": {"?": [[597, "        scale = np.random.uniform(1 - zoom_range,"]]}, "batch": {"?": [[612, "        batch = np.array([cv2.warpAffine(image,"]]}, "rotation_range": {"?": [[590, "        rotation_range = self._config.get(\"rotation_range\", 10)"]]}}, "param": {"self": {"ImageAugmentation": [[571, "    def transform(self, batch):"]]}, "batch": {"None": [[571, "    def transform(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentati": {"func": {"_random_clahe": {"(ImageAugmentation, None) -> None / (ImageAugmentation, ?) -> None": [[528, "    def _random_clahe(self, batch):"]]}, "_random_warp": {"(ImageAugmentation, ?) -> None": [[675, "    def _random_warp(self, batch):"]]}, "transform": {"(ImageAugmentation, None) -> None / (ImageAugmentation, ?) -> None": [[571, "    def transform(self, batch):"]]}, "_random_warp_landmarks": {"(ImageAugmentation, ?, ?, ?) -> None": [[694, "    def _random_warp_landmarks(self, batch, batch_src_points, batch_dst_points):"]]}, "_random_lab": {"(ImageAugmentation, ?) -> None / (ImageAugmentation, None) -> None": [[551, "    def _random_lab(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_clahe": {"var": {"batch_random": {"?": [[533, "        batch_random = np.random.rand(self._batchsize)"]]}}, "param": {"batch": {"None": [[528, "    def _random_clahe(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._validate_samples": {"var": {"length": {"int": [[161, "        length = len(data)"]]}}, "param": {"data": {"?": [[158, "    def _validate_samples(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.get_targets": {"var": {"retval": {"dict": [[480, "        retval = self._separate_target_mask(target_batch)"]]}, "target_batch": {"[float]": [[472, "        target_batch = [np.array([cv2.resize(image[slices, slices, :],"]]}}, "param": {"batch": {"None": [[446, "    def get_targets(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._process_": {"var": {"batch": {"None": [[197, "        batch = read_image_batch(filenames)"], [198, "        batch = self._apply_mask(filenames, batch, side)"], [219, "        batch = self._processing.transform(batch)"], [221, "            batch = self._processing.random_flip(batch)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._get_closest_match": {"var": {"landmarks": {"?": [[305, "        landmarks = self._landmarks[\"a\"] if side == \"b\" else self._landmarks[\"b\"]"]]}}, "param": {"self": {"TrainingDataGenerator": [[300, "    def _get_closest_match(self, filenames, side, batch_src_points):"]]}, "side": {"?": [[300, "    def _get_closest_match(self, filenames, side, batch_src_points):"]]}, "filenames": {"[?]": [[300, "    def _get_closest_match(self, filenames, side, batch_src_points):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.color_adjust": {"param": {"self": {"ImageAugmentation": [[503, "    def color_adjust(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.get_target": {"var": {"slices": {"?": [[471, "        slices = self._constants[\"tgt_slices\"]"]]}}, "param": {"self": {"ImageAugmentation": [[446, "    def get_targets(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._minibatch": {"var": {"img_iter": {"None": [[186, "        img_iter = _img_iter(images)"]]}}, "param": {"images": {"tuple": [[172, "    def _minibatch(self, images, side, do_shuffle, batchsize):"]]}, "self": {"{BackgroundGenerator | TrainingDataGenerator}": [[172, "    def _minibatch(self, images, side, do_shuffle, batchsize):"]]}, "side": {"?": [[172, "    def _minibatch(self, images, side, do_shuffle, batchsize):"]]}}, "func": {"_img_iter": {"? -> None": [[179, "        def _img_iter(imgs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.__in": {"param": {"coverage_ratio": {"?": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator.minibatch_ab": {"var": {"do_shuffle": {"?": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}, "args": {"(?, ?, ?, int)": [[153, "        args = (images, side, do_shuffle, batchsize)"]]}}, "param": {"do_shuffle": {"?": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}, "is_preview": {"?": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}, "self": {"TrainingDataGenerator": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}, "images": {"?": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}, "side": {"?": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}, "is_timelapse": {"?": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.warp": {"param": {"to_landmarks": {"?": [[645, "    def warp(self, batch, to_landmarks=False, **kwargs):"]]}, "self": {"ImageAugmentation": [[645, "    def warp(self, batch, to_landmarks=False, **kwargs):"]]}, "batch": {"?": [[645, "    def warp(self, batch, to_landmarks=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.initial": {"param": {"training_size": {"?": [[389, "    def initialize(self, training_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_d": {"class": {"TrainingDataGenerator": {"<TrainingDataGenerator>": [[19, "class TrainingDataGenerator():"]]}, "ImageAugmentation": {"<ImageAugmentation>": [[330, "class ImageAugmentation():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.__ini": {"param": {"output_shapes": {"?": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._resize_masks": {"var": {"interpolator": {"?": [[269, "        interpolator = cv2.INTER_CUBIC if mask_size < target_size else cv2.INTER_AREA"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_war": {"var": {"batch_maps": {"?": [[685, "        batch_maps = np.stack((mapx, mapy), axis=1) + rands"]]}, "mapx": {"?": [[678, "        mapx = self._constants[\"warp_mapx\"]"]]}, "mapy": {"?": [[679, "        mapy = self._constants[\"warp_mapy\"]"]]}, "pad": {"?": [[680, "        pad = self._constants[\"warp_pad\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._validate_samp": {"param": {"self": {"TrainingDataGenerator": [[158, "    def _validate_samples(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._resize_mask": {"param": {"target_size": {"?": [[262, "    def _resize_masks(target_size, masks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.random_flip": {"var": {"indices": {"?": [[640, "            indices = np.where(randoms > self._config.get(\"random_flip\", 50) / 100)[0]"]]}, "randoms": {"?": [[639, "            randoms = np.random.rand(self._batchsize)"]]}}, "param": {"self": {"ImageAugmentation": [[621, "    def random_flip(self, batch):"]]}, "batch": {"None": [[621, "    def random_flip(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._cache_closest_hash": {"var": {"closest": {"?": [[322, "            closest = (np.mean(np.square(src_points - dst_points), axis=(1, 2))).argsort()[:10]"]]}}, "param": {"self": {"TrainingDataGenerator": [[314, "    def _cache_closest_hashes(self, filenames, batch_src_points, landmarks):"]]}, "filenames": {"[?]": [[314, "    def _cache_closest_hashes(self, filenames, batch_src_points, landmarks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._separate_target_mask": {"var": {"retval": {"dict": [[497, "        retval = dict(targets=[batch[..., :3] for batch in target_batch],"]]}}, "param": {"target_batch": {"[float]": [[487, "    def _separate_target_mask(target_batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._minibatch._img_iter": {"var": {"img": {"?": [[183, "                for img in imgs:"]]}}, "param": {"imgs": {"tuple": [[179, "        def _img_iter(imgs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.transfor": {"var": {"mats": {"?": [[605, "        mats = np.array("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.color_adjus": {"var": {"batch": {"None": [[522, "            batch = batch_convert_color(batch, \"BGR2LAB\")"], [523, "            batch = self._random_clahe(batch)"], [524, "            batch = self._random_lab(batch)"], [525, "            batch = batch_convert_color(batch, \"LAB2BGR\")"]]}}, "param": {"batch": {"?": [[503, "    def color_adjust(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._get_closest_m": {"var": {"batch_dst_points": {"?": [[310, "        batch_dst_points = np.array([landmarks[choice(hsh)] for hsh in closest_hashes])"]]}, "closest_hashes": {"list": [[308, "            closest_hashes = self._cache_closest_hashes(filenames, batch_src_points, landmarks)"]], "[?]": [[306, "        closest_hashes = [self._nearest_landmarks.get(filename) for filename in filenames]"]]}}, "param": {"batch_src_points": {"None": [[300, "    def _get_closest_match(self, filenames, side, batch_src_points):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._minibatc": {"var": {"img_paths": {"[?]": [[188, "            img_paths = [next(img_iter) for _ in range(batchsize)]"]]}}, "param": {"do_shuffle": {"?": [[172, "    def _minibatch(self, images, side, do_shuffle, batchsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_lab": {"var": {"randoms": {"int": [[557, "        randoms = ("]]}, "adjust": {"?": [[556, "        adjust = np.array([amount_l, amount_ab, amount_ab], dtype=\"float32\")"]]}, "amount_l": {"int": [[554, "        amount_l = self._config.get(\"color_lightness\", 30) / 100"]]}, "idx": {"int": [[562, "            for idx in range(rand.shape[-1]):"]]}, "adjustment": {"?": [[563, "                adjustment = rand[:, :, idx]"]]}}, "param": {"self": {"ImageAugmentation": [[551, "    def _random_lab(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.initializ": {"var": {"edge_anchors": {"?": [[428, "        edge_anchors = np.array([(0, 0), (0, p_mx), (p_mx, p_mx), (p_mx, 0),"], [430, "        edge_anchors = np.broadcast_to(edge_anchors, (self._batchsize, 8, 2))"]]}, "clahe_base_contrast": {"int": [[411, "        clahe_base_contrast = training_size // 128"]]}, "warp_range_": {"?": [[417, "        warp_range_ = np.linspace(self._training_size // 2 - coverage // 2,"]]}, "warp_slices": {"?": [[423, "        warp_slices = slice(warp_pad // 10, -warp_pad // 10)"]]}, "coverage": {"int": [[408, "        coverage = int(self._training_size * self._coverage_ratio)"]]}, "tgt_slices": {"?": [[413, "        tgt_slices = slice(self._training_size // 2 - coverage // 2,"]]}}, "param": {"self": {"ImageAugmentation": [[389, "    def initialize(self, training_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._r": {"var": {"mask_size": {"?": [[265, "        mask_size = masks.shape[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentatio": {"param": {"input_size": {"?": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}}, "func": {"initialize": {"(ImageAugmentation, ?) -> None": [[389, "    def initialize(self, training_size):"]]}, "__init__": {"? -> ?": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._cache_closest_hashe": {"var": {"dst_landmarks": {"list": [[317, "        dst_landmarks = list(landmarks.items())"]]}, "dst_points": {"?": [[318, "        dst_points = np.array([lm[1] for lm in dst_landmarks])"]]}}, "param": {"landmarks": {"?": [[314, "    def _cache_closest_hashes(self, filenames, batch_src_points, landmarks):"]]}, "batch_src_points": {"None": [[314, "    def _cache_closest_hashes(self, filenames, batch_src_points, landmarks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator.__init__": {"param": {"self": {"TrainingDataGenerator": [[65, "    def __init__(self, model_input_size, model_output_shapes, training_opts, config):"]]}, "config": {"?": [[65, "    def __init__(self, model_input_size, model_output_shapes, training_opts, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_warp": {"var": {"rands": {"?": [[683, "        rands = np.random.normal(size=(self._batchsize, 2, 5, 5),"]]}, "slices": {"?": [[681, "        slices = self._constants[\"warp_slices\"]"]]}}, "param": {"self": {"ImageAugmentation": [[675, "    def _random_warp(self, batch):"]]}, "batch": {"?": [[675, "    def _random_warp(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator.minibatch_": {"var": {"batcher": {"BackgroundGenerator": [[154, "        batcher = BackgroundGenerator(self._minibatch, thread_count=2, args=args)"]]}}, "param": {"batchsize": {"int": [[90, "                     do_shuffle=True, is_preview=False, is_timelapse=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._resize_": {"var": {"masks": {"?": [[270, "        masks = np.array([cv2.resize(mask,"]]}}, "param": {"masks": {"?": [[262, "    def _resize_masks(target_size, masks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._min": {"param": {"batchsize": {"?": [[172, "    def _minibatch(self, images, side, do_shuffle, batchsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.__init__": {"param": {"self": {"ImageAugmentation": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}, "config": {"?": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}, "batchsize": {"int": [[364, "    def __init__(self, batchsize, is_display, input_size, output_shapes, coverage_ratio, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._process_batch": {"var": {"processed": {"dict": [[199, "        processed = dict()"]]}, "warp_kwargs": {"dict": [[209, "            warp_kwargs = dict(batch_src_points=batch_src_pts,"], [212, "            warp_kwargs = dict()"]]}}, "param": {"self": {"TrainingDataGenerator": [[193, "    def _process_batch(self, filenames, side):"]]}, "side": {"?": [[193, "    def _process_batch(self, filenames, side):"]]}, "filenames": {"[?]": [[193, "    def _process_batch(self, filenames, side):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._apply_mask": {"var": {"batch": {"?": [[257, "        batch = np.concatenate((batch, masks), axis=-1)"]]}}, "param": {"self": {"TrainingDataGenerator": [[243, "    def _apply_mask(self, filenames, batch, side):"]]}, "side": {"?": [[243, "    def _apply_mask(self, filenames, batch, side):"]]}, "batch": {"None": [[243, "    def _apply_mask(self, filenames, batch, side):"]]}, "filenames": {"[?]": [[243, "    def _apply_mask(self, filenames, batch, side):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.transf": {"var": {"zoom_range": {"int": [[591, "        zoom_range = self._config.get(\"zoom_range\", 5) / 100"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_warp_landmark": {"var": {"edge_anchors": {"?": [[697, "        edge_anchors = self._constants[\"warp_lm_edge_anchors\"]"]]}, "face_cores": {"[?]": [[704, "        face_cores = [cv2.convexHull(np.concatenate([src[17:], dst[17:]], axis=0))"]]}, "grids": {"?": [[698, "        grids = self._constants[\"warp_lm_grids\"]"]]}, "slices": {"?": [[699, "        slices = self._constants[\"tgt_slices\"]"]]}, "rem_indices": {"[list]": [[711, "        rem_indices = [list(set(idx for fpl in (src, dst)"]]}, "batch_src": {"[?]": [[717, "        batch_src = [np.delete(src, idxs, axis=0) for idxs, src in zip(rem_indices, batch_src)]"]], "?": [[708, "        batch_src = np.append(batch_src_points, edge_anchors, axis=1)"]]}, "maps": {"?": [[722, "        maps = grid_z.reshape(self._batchsize,"]]}, "batch_dst": {"[?]": [[718, "        batch_dst = [np.delete(dst, idxs, axis=0) for idxs, dst in zip(rem_indices, batch_dst)]"]], "?": [[701, "        batch_dst = (batch_dst_points + np.random.normal(size=batch_dst_points.shape,"], [709, "        batch_dst = np.append(batch_dst, edge_anchors, axis=1)"]]}}, "param": {"self": {"ImageAugmentation": [[694, "    def _random_warp_landmarks(self, batch, batch_src_points, batch_dst_points):"]]}, "batch_dst_points": {"?": [[694, "    def _random_warp_landmarks(self, batch, batch_src_points, batch_dst_points):"]]}, "batch_src_points": {"?": [[694, "    def _random_warp_landmarks(self, batch, batch_src_points, batch_dst_points):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_w": {"var": {"batch_interp": {"?": [[686, "        batch_interp = np.array([[cv2.resize(map_, (pad, pad))[slices, slices] for map_ in maps]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGen": {"func": {"_process_batch": {"(TrainingDataGenerator, ?, ?) -> dict / (TrainingDataGenerator, [?], ?) -> dict": [[193, "    def _process_batch(self, filenames, side):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerato": {"func": {"_resize_masks": {"(?, ?) -> None": [[262, "    def _resize_masks(target_size, masks):"]]}, "_get_landmarks": {"(TrainingDataGenerator, ?, ?) -> None / (TrainingDataGenerator, [?], ?) -> None": [[277, "    def _get_landmarks(self, filenames, side):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGene": {"param": {"training_opts": {"?": [[65, "    def __init__(self, model_input_size, model_output_shapes, training_opts, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.trans": {"var": {"tform": {"int": [[600, "        tform = np.random.uniform("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator": {"var": {"closest_hashes": {"tuple": [[323, "            closest_hashes = tuple(dst_landmarks[i][0] for i in closest)"]]}, "batch_closest_hashes": {"list": [[319, "        batch_closest_hashes = list()"]]}}, "param": {"model_input_size": {"?": [[65, "    def __init__(self, model_input_size, model_output_shapes, training_opts, config):"]]}}, "func": {"_minibatch": {"(BackgroundGenerator, tuple, ?, ?, ?) -> None / (TrainingDataGenerator, ?, ?, ?, ?) -> None": [[172, "    def _minibatch(self, images, side, do_shuffle, batchsize):"]]}, "_get_closest_match": {"(TrainingDataGenerator, ?, ?, ?) -> None / (TrainingDataGenerator, [?], ?, None) -> None / (TrainingDataGenerator, ?, ?, None) -> None": [[300, "    def _get_closest_match(self, filenames, side, batch_src_points):"]]}, "minibatch_ab": {"(TrainingDataGenerator, ?, int, ?, ?, ?, ?) -> None / (TrainingDataGenerator, ?, ?, ?, ?, ?, ?) -> None": [[89, "    def minibatch_ab(self, images, batchsize, side,"]]}, "_cache_closest_hashes": {"(TrainingDataGenerator, ?, None, ?) -> list / (TrainingDataGenerator, [?], None, ?) -> list / (TrainingDataGenerator, ?, ?, ?) -> list": [[314, "    def _cache_closest_hashes(self, filenames, batch_src_points, landmarks):"]]}, "_apply_mask": {"(TrainingDataGenerator, ?, None, ?) -> None / (TrainingDataGenerator, [?], None, ?) -> None / (TrainingDataGenerator, ?, ?, ?) -> None": [[243, "    def _apply_mask(self, filenames, batch, side):"]]}, "_validate_samples": {"(TrainingDataGenerator, ?) -> ?": [[158, "    def _validate_samples(self, data):"]]}, "__init__": {"? -> ?": [[65, "    def __init__(self, model_input_size, model_output_shapes, training_opts, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation": {"func": {"color_adjust": {"(ImageAugmentation, ?) -> None": [[503, "    def color_adjust(self, batch):"]]}, "get_targets": {"(ImageAugmentation, None) -> dict / (ImageAugmentation, ?) -> dict": [[446, "    def get_targets(self, batch):"]]}, "warp": {"(ImageAugmentation, ?, ?) -> float": [[645, "    def warp(self, batch, to_landmarks=False, **kwargs):"]]}, "_separate_target_mask": {"[float] -> dict / ? -> dict": [[487, "    def _separate_target_mask(target_batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random": {"var": {"warped_batch": {"?": [[688, "        warped_batch = np.array([cv2.remap(image, interp[0], interp[1], cv2.INTER_LINEAR)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._apply_": {"var": {"masks": {"None": [[254, "            masks = self._resize_masks(batch.shape[1], masks)"]], "?": [[249, "            masks = np.ones_like(batch[..., :1], dtype=batch.dtype)"], [252, "            masks = np.array([self._masks[side][filename].mask"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data": {"var": {"logger": {"?": [[16, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_warp_landmarks": {"var": {"grid_z": {"?": [[720, "        grid_z = np.array([griddata(dst, src, (grids[0], grids[1]), method=\"linear\")"]]}, "warped_batch": {"?": [[726, "        warped_batch = np.array([cv2.remap(image,"], [732, "        warped_batch = np.array([cv2.resize(image[slices, slices, :],"]]}}, "param": {"batch": {"?": [[694, "    def _random_warp_landmarks(self, batch, batch_src_points, batch_dst_points):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_": {"var": {"clahes": {"[?]": [[543, "        clahes = [cv2.createCLAHE(clipLimit=2.0,  # pylint: disable=no-member"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._get_landmark": {"var": {"msg": {"?": [[286, "            msg = (\"Files missing alignments for this batch: {}\""]]}, "src_points": {"[?]": [[282, "        src_points = [self._landmarks[side].get(filename, None) for filename in filenames]"]]}, "missing": {"{[?] | [list]}": [[285, "            missing = [filenames[idx] for idx, pts in enumerate(src_points) if pts is None]"]]}}, "param": {"self": {"TrainingDataGenerator": [[277, "    def _get_landmarks(self, filenames, side):"]]}, "side": {"?": [[277, "    def _get_landmarks(self, filenames, side):"]]}, "filenames": {"[?]": [[277, "    def _get_landmarks(self, filenames, side):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation.initialize": {"var": {"warp_mapx": {"?": [[419, "        warp_mapx = np.broadcast_to(warp_range_, (self._batchsize, 5, 5)).astype(\"float32\")"]]}, "warp_mapy": {"?": [[420, "        warp_mapy = np.broadcast_to(warp_mapx[0].T, (self._batchsize, 5, 5)).astype(\"float32\")"]]}, "warp_pad": {"int": [[422, "        warp_pad = int(1.25 * self._input_size)"]]}, "grids": {"?": [[431, "        grids = np.mgrid[0:p_mx:complex(self._training_size), 0:p_mx:complex(self._training_size)]"]]}, "p_hf": {"int": [[427, "        p_hf = (self._training_size // 2) - 1"]]}, "p_mx": {"int": [[426, "        p_mx = self._training_size - 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_l": {"var": {"amount_ab": {"int": [[555, "        amount_ab = self._config.get(\"color_ab\", 8) / 100"]]}}, "param": {"batch": {"None": [[551, "    def _random_lab(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.ImageAugmentation._random_clah": {"var": {"indices": {"?": [[534, "        indices = np.where(batch_random > self._config.get(\"color_clahe_chance\", 50) / 100)[0]"]]}, "base_contrast": {"?": [[531, "        base_contrast = self._constants[\"clahe_base_contrast\"]"]]}, "contrast_adjustment": {"int": [[539, "        contrast_adjustment = (grid_bases * (base_contrast // 2))"]]}, "grid_sizes": {"int": [[540, "        grid_sizes = contrast_adjustment + base_contrast"]]}, "grid_bases": {"?": [[536, "        grid_bases = np.rint(np.random.uniform(0,"]]}}, "param": {"self": {"ImageAugmentation": [[528, "    def _random_clahe(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator.__ini": {"param": {"model_output_shapes": {"?": [[65, "    def __init__(self, model_input_size, model_output_shapes, training_opts, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.training_data.TrainingDataGenerator._validate_sample": {"var": {"msg": {"?": [[162, "        msg = (\"Number of images is lower than batch-size (Note that too few \""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dfl_sae_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"DFL SAE Model (Adapted from https://github.com/iperov/DeepFaceLab)\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/unet_dfl.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.predi": {"param": {"batch": {"?": [[49, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.process_inpu": {"param": {"batch": {"?": [[42, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask": {"func": {"predict": {"(Mask, ?) -> None": [[49, "    def predict(self, batch):"]]}, "process_output": {"(Mask, ?) -> None": [[54, "    def process_output(self, batch):"]]}, "process_input": {"(Mask, ?) -> None": [[42, "    def process_input(self, batch):"]]}, "init_model": {"Mask -> None": [[34, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[23, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.__in": {"var": {"git_model_id": {"int": [[24, "        git_model_id = 6"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.__init__": {"param": {"self": {"Mask": [[23, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.process_output": {"param": {"self": {"Mask": [[54, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.process_input": {"param": {"self": {"Mask": [[42, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl": {"class": {"Mask": {"<Mask>": [[21, "class Mask(Masker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.process_outpu": {"param": {"batch": {"?": [[54, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.init_mod": {"param": {"self": {"Mask": [[34, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.init_m": {"var": {"placeholder": {"?": [[38, "        placeholder = np.zeros((self.batchsize, self.input_size, self.input_size, 3),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.__init": {"var": {"model_filename": {"str": [[25, "        model_filename = \"DFL_256_sigmoid_v1.h5\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl.Mask.predict": {"param": {"self": {"Mask": [[49, "    def predict(self, batch):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/scripts/convert.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._sa": {"var": {"write_preview": {"?": [[612, "        write_preview = self._args.redirect_gui and self._writer.is_stream"]]}}, "param": {"completion_event": {"?": [[600, "    def _save(self, completion_event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert.proc": {"param": {"self": {"Convert": [[149, "    def process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._convert_images": {"var": {"patch_queue": {"None": [[178, "        patch_queue = queue_manager.get_queue(\"patch\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._alignments_": {"var": {"faces": {"None": [[548, "        faces = self._alignments.get_faces_in_frame(frame_name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalAction": {"func": {"_get_face_hashes": {"OptionalActions -> list": [[1064, "    def _get_face_hashes(self):"]]}, "_remove_skipped_faces": {"OptionalActions -> None": [[1052, "    def _remove_skipped_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert": {"func": {"_pool_processes": {"Convert -> int": [[87, "    def _pool_processes(self):"]]}, "process": {"Convert -> ?": [[149, "    def process(self):"]]}, "_add_queues": {"Convert -> None": [[143, "    def _add_queues(self):"]]}, "_queue_size": {"Convert -> int": [[77, "    def _queue_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._pool_proc": {"param": {"self": {"Convert": [[87, "    def _pool_processes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._pool_processes": {"var": {"retval": {"int": [[91, "            retval = 1"], [93, "            retval = min(self._args.jobs, total_cpus(), self._images.count)"], [95, "            retval = min(total_cpus(), self._images.count)"], [96, "        retval = 1 if retval == 0 else retval"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check_skipfram": {"var": {"indices": {"?": [[494, "        indices = self._imageidxre.findall(filename)"]]}}, "param": {"self": {"DiskIO": [[479, "    def _check_skipframe(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predic": {"func": {"_input_size": {"Predict -> None": [[710, "    def _input_size(self):"]]}, "thread": {"Predict -> MultiThread": [[669, "    def thread(self):"]]}, "output_size": {"Predict -> None": [[705, "    def output_size(self):"]]}, "_input_mask": {"Predict -> None": [[715, "    def _input_mask(self):"]]}, "verify_output": {"Predict -> None": [[690, "    def verify_output(self):"]]}, "_queue_out_frames": {"(Predict, list, {None | list}) -> None / (Predict, ?, ?) -> None": [[996, "    def _queue_out_frames(self, batch, swapped_faces):"]]}, "out_queue": {"Predict -> None": [[680, "    def out_queue(self):"]]}, "_set_tf_allow_growth": {"() -> None": [[741, "    def _set_tf_allow_growth():"]]}, "_filter_multi_out": {"(Predict, ?) -> {[?] | [None]} / (Predict, [?]) -> {[?] | [list]}": [[971, "    def _filter_multi_out(self, predicted):"]]}, "_get_model_name": {"(Predict, ?) -> None / (Predict, None) -> None": [[772, "    def _get_model_name(self, model_dir):"]]}, "__init__": {"? -> ?": [[647, "    def __init__(self, in_queue, queue_size, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.__init__": {"param": {"images": {"ImagesLoader": [[225, "    def __init__(self, alignments, images, arguments):"]]}, "self": {"DiskIO": [[225, "    def __init__(self, alignments, images, arguments):"]]}, "alignments": {"Alignments": [[225, "    def __init__(self, alignments, images, arguments):"]]}, "arguments": {"?": [[225, "    def __init__(self, alignments, images, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._load_extractor": {"param": {"self": {"DiskIO": [[355, "    def _load_extractor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.load_thread": {"param": {"self": {"DiskIO": [[275, "    def load_thread(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._detect_fac": {"param": {"self": {"DiskIO": [[578, "    def _detect_faces(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._predict_faces": {"var": {"item": {"?": [[835, "            item = self._in_queue.get()"]]}, "predicted": {"None": [[873, "                    predicted = self._predict(feed_faces, batch_size)"]], "list": [[875, "                    predicted = list()"]]}, "batch": {"list": [[832, "        batch = list()"], [881, "            batch = list()"]]}, "detected_batch": {"[?]": [[865, "                detected_batch = [detected_face for item in batch"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._launch_predictor": {"param": {"self": {"Predict": [[810, "    def _launch_predictor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_frame_range": {"var": {"start": {"?": [[350, "            start, end = rng.split(\"-\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predi": {"func": {"faces_count": {"Predict -> int": [[685, "    def faces_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.faces_count": {"param": {"self": {"Predict": [[685, "    def faces_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._load_mod": {"param": {"self": {"Predict": [[754, "    def _load_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._g": {"var": {"detected_faces": {"None": [[526, "            detected_faces = self._detect_faces(filename, image)"]], "list": [[524, "            detected_faces = self._alignments_faces(os.path.basename(filename), image)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._predict_fac": {"param": {"self": {"Predict": [[824, "    def _predict_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._check_thread_error": {"param": {"self": {"Convert": [[198, "    def _check_thread_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check_skipframe": {"var": {"idx": {"int": [[499, "        idx = int(indices[0]) if indices else None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.conver": {"class": {"OptionalActions": {"<OptionalActions>": [[1026, "class OptionalActions():  # pylint:disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._s": {"var": {"io_thread": {"MultiThread": [[434, "        io_thread = MultiThread(func, args, thread_count=1)"]]}, "preview_image": {"str": [[613, "        preview_image = os.path.join(self._writer.output_folder, \".gui_preview.jpg\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._validat": {"var": {"available_masks": {"[?]": [[131, "            available_masks = [k for k, v in self._alignments.mask_summary.items()"]]}}, "param": {"self": {"Convert": [[100, "    def _validate(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._pred": {"var": {"consecutive_no_faces": {"int": [[831, "        consecutive_no_faces = 0"], [844, "                consecutive_no_faces = consecutive_no_faces + 1 if faces_count == 0 else 0"], [879, "            consecutive_no_faces = 0"]]}}, "param": {"batch_size": {"int": [[936, "    def _predict(self, feed_faces, batch_size=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._check_thread_erro": {"var": {"thread": {"{DiskIO -> None | DiskIO -> None | Predict -> MultiThread}": [[200, "        for thread in (self._predictor.thread,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions.__init__": {"param": {"self": {"OptionalActions": [[1042, "    def __init__(self, arguments, input_images, alignments):"]]}, "alignments": {"Alignments": [[1042, "    def __init__(self, arguments, input_images, alignments):"]]}, "arguments": {"?": [[1042, "    def __init__(self, arguments, input_images, alignments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions._remove_skipped": {"var": {"face_hashes": {"list": [[1056, "        face_hashes = self._get_face_hashes()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._load_model": {"var": {"trainer": {"None": [[766, "        trainer = self._get_model_name(model_dir)"]]}, "gpus": {"int": [[767, "        gpus = 1 if not hasattr(self._args, \"gpus\") else self._args.gpus"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._get_batchsize": {"var": {"is_cpu": {"bool": [[733, "        is_cpu = GPUStats().device_count == 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.verify_output": {"param": {"self": {"Predict": [[690, "    def verify_output(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.__init__": {"param": {"self": {"Predict": [[647, "    def __init__(self, in_queue, queue_size, arguments):"]]}, "arguments": {"?": [[647, "    def __init__(self, in_queue, queue_size, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.load_aligned": {"param": {"item": {"?": [[889, "    def load_aligned(self, item):"]]}, "self": {"Predict": [[889, "    def load_aligned(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._lo": {"var": {"detected_faces": {"list": [[470, "            detected_faces = self._get_detected_faces(filename, image)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.__init": {"param": {"queue_size": {"{Convert -> int | int}": [[647, "    def __init__(self, in_queue, queue_size, arguments):"]]}, "in_queue": {"{DiskIO -> None | None}": [[647, "    def __init__(self, in_queue, queue_size, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.draw_transparent": {"param": {"self": {"DiskIO": [[253, "    def draw_transparent(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_frame_ranges": {"var": {"rng": {"?": [[347, "        for rng in self._args.frame_ranges:"]]}, "minframe": {"int": [[334, "            minframe, maxframe = 1, self._images.count"], [339, "                minframe, maxframe = min(indices), max(indices)"]], "None": [[332, "        minframe, maxframe = None, None"]]}, "retval": {"list": [[346, "        retval = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_writer": {"var": {"configfile": {"None": [[313, "        configfile = self._args.configfile if hasattr(self._args, \"configfile\") else None"]]}}, "param": {"self": {"DiskIO": [[296, "    def _get_writer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions._get_face_hash": {"var": {"file_list": {"list": [[1083, "            file_list = get_image_paths(input_aligned_dir)"]]}}, "param": {"self": {"OptionalActions": [[1064, "    def _get_face_hashes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check": {"var": {"have_alignments": {"bool": [[572, "        have_alignments = self._alignments.frame_exists(frame_name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._load": {"var": {"item": {"dict": [[471, "            item = dict(filename=filename, image=image, detected_faces=detected_faces)"]]}, "out_file": {"str": [[464, "                    out_file = os.path.join(self._args.output_dir, os.path.basename(filename))"]]}, "filename": {"?": [[452, "        for filename, image in self._images.load():"]]}}, "param": {"self": {"DiskIO": [[440, "    def _load(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._input_mask": {"param": {"self": {"Predict": [[715, "    def _input_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._validate": {"var": {"msg": {"str": [[134, "                msg = (\"Predicted Mask selected, but the model was not trained with a mask and no \""]], "?": [[123, "            msg = (\"You have selected the Mask Type `{}` but at least one face does not have this \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check_alignment": {"param": {"self": {"DiskIO": [[557, "    def _check_alignments(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions": {"func": {"__init__": {"? -> ?": [[1042, "    def __init__(self, arguments, input_images, alignments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._queue_siz": {"var": {"retval": {"int": [[80, "            retval = 16"], [82, "            retval = 32"]]}}, "param": {"self": {"Convert": [[77, "    def _queue_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._add_queu": {"param": {"self": {"Convert": [[143, "    def _add_queues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Conver": {"func": {"_validate": {"Convert -> None": [[100, "    def _validate(self):"]]}, "__init__": {"? -> ?": [[50, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.c": {"class": {"Convert": {"<Convert>": [[32, "class Convert():  # pylint:disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._predict_f": {"var": {"batch_size": {"int": [[872, "                        batch_size = 1"]], "None": [[869, "                    batch_size = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._alignmen": {"var": {"detected_faces": {"list": [[549, "        detected_faces = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.has_predicted_mask": {"param": {"self": {"Predict": [[700, "    def has_predicted_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._input_": {"var": {"mask": {"?": [[717, "        mask = np.zeros((1, ) + self._model.state.mask_shapes[0], dtype=\"float32\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO": {"func": {"_alignments_faces": {"(DiskIO, ?, ?) -> list / (DiskIO, str, ?) -> list": [[530, "    def _alignments_faces(self, frame_name, image):"]]}, "pre_encode": {"DiskIO -> None / Converter -> None": [[259, "    def pre_encode(self):"]]}, "_load": {"DiskIO -> None": [[440, "    def _load(self, *args):  # pylint: disable=unused-argument"]]}, "_add_queue": {"(DiskIO, ?) -> None / (DiskIO, str) -> None": [[405, "    def _add_queue(self, task):"]]}, "_get_writer": {"DiskIO -> None": [[296, "    def _get_writer(self):"]]}, "_get_frame_ranges": {"DiskIO -> list": [[317, "    def _get_frame_ranges(self):"]]}, "_detect_faces": {"(DiskIO, ?, ?) -> None": [[578, "    def _detect_faces(self, filename, image):"]]}, "_get_detected_faces": {"(DiskIO, ?, ?) -> list": [[504, "    def _get_detected_faces(self, filename, image):"]]}, "save_thread": {"DiskIO -> None": [[269, "    def save_thread(self):"]]}, "_load_extractor": {"DiskIO -> Extractor": [[355, "    def _load_extractor(self):"]]}, "draw_transparent": {"DiskIO -> None": [[253, "    def draw_transparent(self):"]]}, "_total_count": {"DiskIO -> {ImagesLoader -> int | int}": [[286, "    def _total_count(self):"]]}, "load_thread": {"DiskIO -> None": [[275, "    def load_thread(self):"]]}, "_start_thread": {"(DiskIO, ?) -> None / (DiskIO, str) -> None": [[423, "    def _start_thread(self, task):"]]}, "load_queue": {"DiskIO -> None": [[281, "    def load_queue(self):"]]}, "_check_alignments": {"(DiskIO, ?) -> bool / (DiskIO, str) -> bool": [[557, "    def _check_alignments(self, frame_name):"]]}, "_check_skipframe": {"(DiskIO, ?) -> int": [[479, "    def _check_skipframe(self, filename):"]]}, "_init_threads": {"DiskIO -> None": [[394, "    def _init_threads(self):"]]}, "completion_event": {"DiskIO -> None": [[248, "    def completion_event(self):"]]}, "__init__": {"? -> ?": [[225, "    def __init__(self, alignments, images, arguments):"]]}, "_save": {"(DiskIO, ?) -> None": [[600, "    def _save(self, completion_event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions._get_face_hashes": {"var": {"input_aligned_dir": {"?": [[1074, "        input_aligned_dir = self._args.input_aligned_dir"]]}, "face": {"?": [[1085, "            for face in tqdm(file_list, desc=\"Hashing Faces\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._input_siz": {"param": {"self": {"Predict": [[710, "    def _input_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check_": {"var": {"skipframe": {"int": [[500, "        skipframe = not any(map(lambda b: b[0] <= idx <= b[1], self._frame_ranges))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions._remove_skipped_faces": {"var": {"pre_face_count": {"Alignments -> int": [[1060, "        pre_face_count = self._alignments.faces_count"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_detected_faces": {"param": {"image": {"?": [[504, "    def _get_detected_faces(self, filename, image):"]]}, "filename": {"?": [[504, "    def _get_detected_faces(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._": {"var": {"predicted": {"{[?] | [list]}": [[962, "        predicted = self._filter_multi_out(predicted)"]], "list": [[965, "        predicted = np.concatenate(predicted, axis=-1) if len(predicted) == 2 else predicted[0]"]], "[?]": [[959, "        predicted = predicted if isinstance(predicted, list) else [predicted]"]], "?": [[958, "        predicted = self._predictor(feed, batch_size=batch_size)"], [966, "        predicted = predicted.astype(\"float32\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert": {"var": {"logger": {"?": [[29, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"DiskIO": {"<DiskIO>": [[207, "class DiskIO():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.pre_encod": {"var": {"test": {"?": [[263, "        test = self._writer.pre_encode(dummy)"]]}, "retval": {"None": [[264, "        retval = None if test is None else self._writer.pre_encode"]]}}, "param": {"self": {"{Converter | DiskIO}": [[259, "    def pre_encode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._get_batch": {"param": {"queue_size": {"{Convert -> int | int}": [[721, "    def _get_batchsize(queue_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._filter_multi_out": {"var": {"mask_idx": {"?": [[990, "        mask_idx = self._output_indices[\"mask\"]"]]}, "mask": {"list": [[991, "        mask = predicted[mask_idx] if mask_idx is not None else None"]]}, "face": {"list": [[989, "        face = predicted[self._output_indices[\"face\"]]"]]}}, "param": {"self": {"Predict": [[971, "    def _filter_multi_out(self, predicted):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._start_thread": {"var": {"args": {"None": [[432, "        args = self._completion_event if task == \"save\" else None"]]}, "func": {"?": [[433, "        func = getattr(self, \"_{}\".format(task))"]]}}, "param": {"self": {"DiskIO": [[423, "    def _start_thread(self, task):"]]}, "task": {"str": [[423, "    def _start_thread(self, task):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._predict": {"var": {"feed": {"{[?] | [float]}": [[953, "        feed = [feed_faces]"]]}, "feed_faces": {"float": [[868, "                    feed_faces = self._compile_feed_faces(detected_batch)"]]}, "faces_seen": {"int": [[830, "        faces_seen = 0"], [880, "            faces_seen = 0"]]}}, "param": {"feed_faces": {"float": [[936, "    def _predict(self, feed_faces, batch_size=None):"]]}, "self": {"Predict": [[936, "    def _predict(self, feed_faces, batch_size=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._add_queu": {"var": {"q_name": {"str": [[415, "            q_name = \"convert_in\""], [417, "            q_name = \"convert_out\""], [419, "            q_name = task"]]}}, "param": {"self": {"DiskIO": [[405, "    def _add_queue(self, task):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._valid": {"var": {"mask_type": {"?": [[138, "            mask_type = available_masks[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert.__init__": {"var": {"configfile": {"None": [[66, "        configfile = self._args.configfile if hasattr(self._args, \"configfile\") else None"]]}}, "param": {"self": {"Convert": [[50, "    def __init__(self, arguments):"]]}, "arguments": {"?": [[50, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._add_queue": {"param": {"task": {"str": [[405, "    def _add_queue(self, task):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._get_": {"var": {"batchsize": {"int": [[734, "        batchsize = 1 if is_cpu else 16"], [735, "        batchsize = min(queue_size, batchsize)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._queue_out_frames": {"var": {"item": {"<list>": [[1011, "        for item in batch:"]]}, "pointer": {"int": [[1010, "        pointer = 0"]]}}, "param": {"batch": {"list": [[996, "    def _queue_out_frames(self, batch, swapped_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._loa": {"var": {"model_dir": {"None": [[763, "        model_dir = get_folder(self._args.model_dir, make_folder=False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Pred": {"func": {"coverage_ratio": {"Predict -> None": [[695, "    def coverage_ratio(self):"]]}, "_get_batchsize": {"Convert -> int -> int / int -> int / ? -> int": [[721, "    def _get_batchsize(queue_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._filter_multi_ou": {"var": {"predicted": {"{[?] | [None] | [list]}": [[992, "        predicted = [face, mask] if mask is not None else [face]"]]}}, "param": {"predicted": {"[?]": [[971, "    def _filter_multi_out(self, predicted):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._add_queues": {"var": {"qname": {"str": [[146, "        for qname in (\"convert_in\", \"convert_out\", \"patch\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._set_tf_allow_growth": {"var": {"config": {"?": [[748, "        config = tf.ConfigProto()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check_alignments": {"param": {"frame_name": {"str": [[557, "    def _check_alignments(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_write": {"var": {"args": {"[?]": [[304, "        args = [self._args.output_dir]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._loa": {"var": {"idx": {"int": [[451, "        idx = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._check_skipfr": {"param": {"filename": {"?": [[479, "    def _check_skipframe(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._predict_face": {"var": {"is_amd": {"bool": [[833, "        is_amd = get_backend() == \"amd\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._total_coun": {"var": {"retval": {"int": [[289, "            retval = sum([fr[1] - fr[0] + 1 for fr in self._frame_ranges])"]], "ImagesLoader -> int": [[291, "            retval = self._images.count"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.completion_event": {"param": {"self": {"DiskIO": [[248, "    def completion_event(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict": {"func": {"_compile_feed_faces": {"[?] -> float / ? -> float": [[917, "    def _compile_feed_faces(detected_faces):"]]}, "in_queue": {"Predict -> DiskIO -> None": [[675, "    def in_queue(self):"]]}, "_load_model": {"Predict -> None": [[754, "    def _load_model(self):"]]}, "load_aligned": {"(Predict, ?) -> None": [[889, "    def load_aligned(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert._convert_imag": {"var": {"save_queue": {"None": [[177, "        save_queue = queue_manager.get_queue(\"convert_out\")"]]}}, "param": {"self": {"Convert": [[173, "    def _convert_images(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._compil": {"var": {"feed_faces": {"float": [[931, "        feed_faces = np.stack([detected_face.feed_face[..., :3]"]]}}, "param": {"detected_faces": {"[?]": [[917, "    def _compile_feed_faces(detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._total_count": {"param": {"self": {"DiskIO": [[286, "    def _total_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._load_": {"var": {"extractor": {"Extractor": [[384, "        extractor = Extractor(detector=\"cv2-dnn\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.save_thread": {"param": {"self": {"DiskIO": [[269, "    def save_thread(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActio": {"param": {"input_images": {"ImagesLoader -> None": [[1042, "    def __init__(self, arguments, input_images, alignments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.output_siz": {"param": {"self": {"Predict": [[705, "    def output_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.load_align": {"var": {"detected_face": {"?": [[902, "        for detected_face in item[\"detected_faces\"]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.coverage_ratio": {"param": {"self": {"Predict": [[695, "    def coverage_ratio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.out_queu": {"param": {"self": {"Predict": [[680, "    def out_queue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_frame_rang": {"var": {"indices": {"[int]": [[336, "            indices = [int(self._imageidxre.findall(os.path.basename(filename))[0])"]]}}, "param": {"self": {"DiskIO": [[317, "    def _get_frame_ranges(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._predi": {"var": {"faces_count": {"int": [[838, "                faces_count = len(item[\"detected_faces\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._save": {"var": {"idx": {"?": [[615, "        for idx in tqdm(range(self._total_count), desc=\"Converting\", file=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.conv": {"class": {"Predict": {"<Predict>": [[634, "class Predict():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._load_": {"var": {"model": {"?": [[768, "        model = PluginLoader.get_model(trainer)(model_dir, gpus, predict=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._get_model_nam": {"var": {"statefile": {"[str]": [[793, "        statefile = [fname for fname in os.listdir(str(model_dir))"]], "str": [[799, "        statefile = os.path.join(str(model_dir), statefile[0])"]]}, "trainer": {"?": [[802, "        trainer = state.get(\"name\", None)"]]}, "state": {"?": [[801, "        state = self._serializer.load(statefile)"]]}}, "param": {"self": {"Predict": [[772, "    def _get_model_name(self, model_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.pre_encode": {"var": {"dummy": {"?": [[262, "        dummy = np.zeros((20, 20, 3), dtype=\"uint8\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._sav": {"var": {"item": {"?": [[619, "            item = self._queues[\"save\"].get()"]]}, "filename": {"?": [[623, "            filename, image = item"]]}}, "param": {"self": {"DiskIO": [[600, "    def _save(self, completion_event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Conv": {"func": {"_check_thread_error": {"Convert -> None": [[198, "    def _check_thread_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._detect_faces": {"param": {"image": {"?": [[578, "    def _detect_faces(self, filename, image):"]]}, "filename": {"?": [[578, "    def _detect_faces(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO.load_queu": {"param": {"self": {"DiskIO": [[281, "    def load_queue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Convert.proce": {"var": {"msg": {"str": [[166, "            msg = (\"Faceswap ran out of RAM running convert. Conversion is very system RAM \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._detect_": {"var": {"faces": {"?": [[596, "        faces = next(self._extractor.detected_faces())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.P": {"func": {"_launch_predictor": {"Predict -> MultiThread": [[810, "    def _launch_predictor(self):"]]}, "_predict_faces": {"Predict -> None": [[824, "    def _predict_faces(self):"]]}, "_predict": {"(Predict, float, int) -> None / (Predict, ?, None) -> None": [[936, "    def _predict(self, feed_faces, batch_size=None):"]]}, "has_predicted_mask": {"Predict -> bool": [[700, "    def has_predicted_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._get_model_na": {"param": {"model_dir": {"None": [[772, "    def _get_model_name(self, model_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.thread": {"param": {"self": {"Predict": [[669, "    def thread(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.C": {"func": {"_convert_images": {"Convert -> None": [[173, "    def _convert_images(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._queue_out_fr": {"var": {"num_faces": {"int": [[1012, "            num_faces = len(item[\"detected_faces\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._get_detected_fac": {"param": {"self": {"DiskIO": [[504, "    def _get_detected_faces(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict.in_queu": {"param": {"self": {"Predict": [[675, "    def in_queue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._queue_out_fram": {"param": {"self": {"Predict": [[996, "    def _queue_out_frames(self, batch, swapped_faces):"]]}, "swapped_faces": {"{None | list}": [[996, "    def _queue_out_frames(self, batch, swapped_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._alignments_faces": {"var": {"rawface": {"?": [[551, "        for rawface in faces:"]]}, "face": {"DetectedFace": [[552, "            face = DetectedFace()"]]}}, "param": {"image": {"?": [[530, "    def _alignments_faces(self, frame_name, image):"]]}, "frame_name": {"str": [[530, "    def _alignments_faces(self, frame_name, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._alignments_fac": {"param": {"self": {"DiskIO": [[530, "    def _alignments_faces(self, frame_name, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.Predict._launch_predicto": {"var": {"thread": {"MultiThread": [[820, "        thread = MultiThread(self._predict_faces, thread_count=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions._remove_skipped_fac": {"param": {"self": {"OptionalActions": [[1052, "    def _remove_skipped_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.DiskIO._init_thread": {"var": {"task": {"str": [[400, "        for task in (\"load\", \"save\"):"]]}}, "param": {"self": {"DiskIO": [[394, "    def _init_threads(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.convert.OptionalActions._get": {"var": {"face_hashes": {"list": [[1073, "        face_hashes = list()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/villain_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[50, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/unbalanced_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.unbalanced_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[50, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/scaling/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._bas": {"var": {"logger": {"?": [[9, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"get_config": {"(?, None) -> FaceswapConfig -> dict / (str, None) -> FaceswapConfig -> dict": [[12, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.__init__": {"param": {"self": {"{Adjustment | Scaling}": [[19, "    def __init__(self, configfile=None, config=None):"]]}, "config": {"None": [[19, "    def __init__(self, configfile=None, config=None):"]]}, "configfile": {"None": [[19, "    def __init__(self, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.process": {"param": {"new_face": {"?": [[40, "    def process(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.ru": {"var": {"final_mask": {"?": [[51, "            final_mask = new_face[:, :, -1]"]]}, "reinsert_mask": {"bool": [[48, "        reinsert_mask = False"], [50, "            reinsert_mask = True"]]}, "new_face": {"None": [[53, "        new_face = self.process(new_face)"]], "?": [[52, "            new_face = new_face[:, :, :3]"], [54, "        new_face = np.clip(new_face, 0.0, 1.0)"], [57, "            new_face = np.concatenate((new_face, np.expand_dims(final_mask, axis=-1)), -1)"]]}}, "param": {"new_face": {"?": [[44, "    def run(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._ba": {"class": {"Adjustment": {"<Adjustment>": [[17, "class Adjustment():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.proc": {"param": {"self": {"Adjustment": [[40, "    def process(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.get_": {"param": {"configfile": {"None": [[12, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustme": {"func": {"__init__": {"? -> ?": [[19, "    def __init__(self, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustm": {"func": {"set_config": {"(Adjustment, ?, ?) -> FaceswapConfig -> dict / (Scaling, None, None) -> FaceswapConfig -> dict / (Adjustment, None, None) -> FaceswapConfig -> dict": [[26, "    def set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment": {"func": {"process": {"(Adjustment, ?) -> None": [[40, "    def process(self, new_face):"]]}, "run": {"(Adjustment, ?) -> None": [[44, "    def run(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.set_": {"param": {"configfile": {"None": [[26, "    def set_config(self, configfile, config):"]]}, "config": {"None": [[26, "    def set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.run": {"param": {"self": {"Adjustment": [[44, "    def run(self, new_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.Adjustment.set_config": {"var": {"section": {"str": [[28, "        section = \".\".join(self.__module__.split(\".\")[-2:])"]]}, "retval": {"FaceswapConfig -> dict": [[31, "            retval = get_config(section, configfile=configfile)"]], "?": [[35, "            retval = config.config_dict"]]}}, "param": {"self": {"{Adjustment | Scaling}": [[26, "    def set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.scaling._base.get_conf": {"param": {"plugin_name": {"str": [[12, "def get_config(plugin_name, configfile=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/lib/model/initializers_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test._runn": {"var": {"variable": {"?": [[22, "    variable = K.variable(init(shape))"]]}, "target_max": {"None": [[21, "            target_max=None, target_min=None):"]]}}, "param": {"target_std": {"None": [[21, "            target_max=None, target_min=None):"]]}, "target_max": {"None": [[21, "            target_max=None, target_min=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test._runner": {"var": {"output": {"?": [[23, "    output = K.get_value(variable)"]]}, "lim": {"float": [[24, "    lim = 3e-2"]]}}, "param": {"init": {"{ConvolutionAware | ICNR}": [[21, "            target_max=None, target_min=None):"]]}, "shape": {"?": [[21, "            target_max=None, target_min=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test": {"var": {"CONV_ID": {"str": [[17, "CONV_ID = get_backend().upper()"]]}, "CONV_SHAPE": {"(int, int, int, int)": [[16, "CONV_SHAPE = (3, 3, 256, 2048)"]]}}, "func": {"_runner": {"(?, ?, None, None, None, None) -> None / (ICNR, ?, None, None, None, None) -> None / (ConvolutionAware, ?, None, None, None, None) -> None": [[20, "def _runner(init, shape, target_mean=None, target_std=None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test._ru": {"param": {"target_min": {"None": [[21, "            target_max=None, target_min=None):"]]}, "target_mean": {"None": [[21, "            target_max=None, target_min=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test.test_convolution_aw": {"param": {"tensor_shape": {"?": [[51, "def test_convolution_aware(tensor_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializ": {"func": {"test_convolution_aware": {"? -> None": [[51, "def test_convolution_aware(tensor_shape):"]]}, "test_icnr": {"? -> None": [[36, "def test_icnr(tensor_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test.test_icnr": {"var": {"std": {"?": [[45, "    std = np.sqrt(2. / fan_in)"]]}, "fan_in": {"?": [[44, "    fan_in, _ = k_initializers._compute_fans(tensor_shape)  # pylint:disable=protected-access"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test.test_convolution_aware": {"var": {"std": {"?": [[60, "    std = np.sqrt(2. / fan_in)"]]}, "fan_in": {"?": [[59, "    fan_in, _ = k_initializers._compute_fans(tensor_shape)  # pylint:disable=protected-access"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.initializers_test.test_ic": {"param": {"tensor_shape": {"?": [[36, "def test_icnr(tensor_shape):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/utils.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetMode": {"func": {"_url_download": {"GetModel -> str": [[341, "    def _url_download(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_nam": {"var": {"retval": {"?": [[287, "        retval = self._model_full_name[:self._model_full_name.rfind(\"_\")]"]]}}, "param": {"self": {"GetModel": [[285, "    def _model_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetM": {"func": {"_model_exists": {"GetModel -> int": [[314, "    def _model_exists(self):"]]}, "unzip_model": {"GetModel -> ?": [[416, "    def unzip_model(self):"]]}, "_model_name": {"GetModel -> None": [[285, "    def _model_name(self):"]]}, "_model_path": {"GetModel -> {[str] | str}": [[299, "    def _model_path(self):"]]}, "_model_version": {"GetModel -> int": [[292, "    def _model_version(self):"]]}, "_model_zip_path": {"GetModel -> str": [[307, "    def _model_zip_path(self):"]]}, "write_model": {"(GetModel, ?) -> None": [[426, "    def write_model(self, zip_file):"]]}, "download_model": {"GetModel -> ?": [[365, "    def download_model(self):"]]}, "_model_full_name": {"GetModel -> str": [[277, "    def _model_full_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.full_path_split": {"var": {"logger": {"?": [[154, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.download_mod": {"param": {"self": {"GetModel": [[365, "    def download_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"func": {"full_path_split": {"? -> list / str -> list": [[152, "def full_path_split(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_exists": {"var": {"retval": {"int": [[317, "            retval = all(os.path.exists(pth) for pth in self._model_path)"], [319, "            retval = os.path.exists(self._model_path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.safe_shutdown": {"var": {"logger": {"?": [[227, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}, "param": {"got_error": {"bool": [[225, "def safe_shutdown(got_error=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.write_zipf": {"param": {"downloaded_size": {"GetModel -> int": [[393, "    def write_zipfile(self, response, downloaded_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.download_m": {"var": {"downloaded_size": {"GetModel -> int": [[370, "                downloaded_size = self._url_partial_size"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_version": {"var": {"retval": {"int": [[294, "        retval = int(self._model_full_name[self._model_full_name.rfind(\"_\") + 2:])"]]}}, "param": {"self": {"GetModel": [[292, "    def _model_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend.get_backend": {"var": {"config": {"?": [[61, "                    config = json.load(cnf)"]]}}, "param": {"self": {"Backend": [[44, "    def get_backend(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.camel_case_spl": {"param": {"identifier": {"?": [[216, "def camel_case_split(identifier):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.set_system_verbosity": {"var": {"loglevel": {"str": [[198, "    loglevel = \"2\" if numeric_level > 15 else \"0\""]]}, "logger": {"?": [[195, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}, "numeric_level": {"None": [[197, "    numeric_level = get_loglevel(loglevel)"]]}, "warncat": {"{<DeprecationWarning> | <FutureWarning> | <UserWarning>}": [[202, "        for warncat in (FutureWarning, DeprecationWarning, UserWarning):"]]}}, "param": {"loglevel": {"?": [[184, "def set_system_verbosity(loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.deprecation_warnin": {"var": {"msg": {"str": [[210, "    msg = \"{}  has been deprecated and will be removed from a future update.\".format(func_name)"]]}, "logger": {"?": [[208, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend.get": {"var": {"config_file": {"str": [[41, "        config_file = os.path.join(pypath, \"config\", \".faceswap\")"]]}, "fs_backend": {"?": [[66, "        fs_backend = config.get(\"backend\", None)"]], "str": [[49, "            fs_backend = os.environ[\"FACESWAP_BACKEND\"].lower()"], [68, "            fs_backend = self.configure_backend()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.full_path_spli": {"var": {"path": {"str": [[164, "        path = parts[0]"]]}, "parts": {"(str, str)": [[157, "        parts = os.path.split(path)"]]}, "allparts": {"list": [[155, "    allparts = list()"]]}}, "param": {"path": {"str": [[152, "def full_path_split(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.B": {"func": {"configure_backend": {"Backend -> str": [[73, "    def configure_backend(self):"]]}, "get_backend": {"Backend -> str": [[44, "    def get_backend(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils": {"var": {"_FS_BACKEND": {"str": [[91, "_FS_BACKEND = Backend().backend"]]}}, "class": {"GetModel": {"<GetModel>": [[240, "class GetModel():"]]}, "Backend": {"<Backend>": [[27, "class Backend():"]]}}, "func": {"get_folder": {"(None, bool) -> None / (ImageIO -> None, bool) -> None / (?, bool) -> None / (str, bool) -> None": [[99, "def get_folder(path, make_folder=True):"]]}, "get_backend": {"() -> str": [[94, "def get_backend():"]]}, "deprecation_warning": {"(?, None) -> None / (str, None) -> None": [[206, "def deprecation_warning(func_name, additional_info=None):"]]}, "backup_file": {"(?, ?) -> None": [[170, "def backup_file(directory, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend.configure_backend": {"var": {"selection": {"?": [[78, "            selection = input(\"1: AMD, 2: CPU, 3: NVIDIA: \")"]]}, "config": {"dict": [[84, "        config = {\"backend\": fs_backend}"]]}}, "param": {"self": {"Backend": [[73, "    def configure_backend(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.__init": {"var": {"model_filename": {"{[?] | [None] | [[str]]}": [[266, "            model_filename = [model_filename]"]]}}, "param": {"cache_dir": {"str": [[263, "    def __init__(self, model_filename, cache_dir, git_model_id):"]]}, "model_filename": {"[str]": [[263, "    def __init__(self, model_filename, cache_dir, git_model_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_path": {"var": {"retval": {"[str]": [[301, "        retval = [os.path.join(self.cache_dir, fname) for fname in self.model_filename]"]], "{[str] | str}": [[302, "        retval = retval[0] if len(retval) == 1 else retval"]]}}, "param": {"self": {"GetModel": [[299, "    def _model_path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.get_fold": {"var": {"logger": {"?": [[101, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend": {"func": {"get_config_file": {"() -> str": [[38, "    def get_config_file():"]]}, "__init__": {"? -> ?": [[32, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.write_zipfil": {"var": {"buffer": {"?": [[409, "                buffer = response.read(self.chunk_size)"]]}, "write_type": {"str": [[399, "        write_type = \"wb\" if downloaded_size == 0 else \"ab\""]]}}, "param": {"response": {"?": [[393, "    def write_zipfile(self, response, downloaded_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend.get_config_file": {"var": {"pypath": {"str": [[40, "        pypath = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._url_partial_siz": {"var": {"retval": {"int": [[352, "        retval = os.path.getsize(zip_file) if os.path.exists(zip_file) else 0"]]}}, "param": {"self": {"GetModel": [[349, "    def _url_partial_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_full_nam": {"var": {"retval": {"str": [[280, "        retval = os.path.splitext(common_prefix)[0]"]]}}, "param": {"self": {"GetModel": [[277, "    def _model_full_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel": {"func": {"__init__": {"? -> ?": [[263, "    def __init__(self, model_filename, cache_dir, git_model_id):"]]}, "get": {"GetModel -> None": [[356, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.write_zipfile": {"var": {"pbar": {"?": [[401, "            pbar = tqdm(desc=\"Downloading\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.util": {"var": {"_image_extensions": {"[str]": [[20, "_image_extensions = [  # pylint:disable=invalid-name"]]}, "_video_extensions": {"[str]": [[22, "_video_extensions = [  # pylint:disable=invalid-name"]]}}, "class": {"FaceswapError": {"<FaceswapError>": [[235, "class FaceswapError(Exception):"]]}}, "func": {"get_image_paths": {"None -> list / ? -> list / ImageIO -> None -> list": [[112, "def get_image_paths(directory):"]]}, "safe_shutdown": {"bool -> None": [[225, "def safe_shutdown(got_error=False):"]]}, "set_system_verbosity": {"? -> None": [[184, "def set_system_verbosity(loglevel):"]]}, "convert_to_secs": {"() -> {float | int}": [[136, "def convert_to_secs(*args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._plugin_section": {"var": {"path": {"str": [[326, "        path = os.path.normpath(self.cache_dir)"]]}, "retval": {"list": [[328, "        retval = split[split.index(\"plugins\") + 1]"]]}, "split": {"[str]": [[327, "        split = path.split(os.sep)"]]}}, "param": {"self": {"GetModel": [[324, "    def _plugin_section(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.unzip_mod": {"var": {"zip_file": {"?": [[420, "            zip_file = zipfile.ZipFile(self._model_zip_path, \"r\")"]]}}, "param": {"self": {"GetModel": [[416, "    def unzip_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.backup_": {"var": {"backupfile": {"str": [[175, "    backupfile = origfile + '.bk'"]]}, "origfile": {"str": [[174, "    origfile = os.path.join(directory, filename)"]]}}, "param": {"filename": {"?": [[170, "def backup_file(directory, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend.configur": {"var": {"fs_backend": {"str": [[83, "        fs_backend = self.backends[selection].lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.download_model": {"var": {"req": {"?": [[371, "                req = urllib.request.Request(self._url_download)"]]}, "attempt": {"int": [[368, "        for attempt in range(self.retries):"]]}, "response": {"?": [[374, "                response = urllib.request.urlopen(req, timeout=10)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.u": {"func": {"camel_case_split": {"? -> [?]": [[216, "def camel_case_split(identifier):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_full_na": {"var": {"common_prefix": {"str": [[279, "        common_prefix = os.path.commonprefix(self.model_filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetMod": {"func": {"_plugin_section": {"GetModel -> list": [[324, "    def _plugin_section(self):"]]}, "write_zipfile": {"(GetModel, ?, ?) -> None / (GetModel, ?, GetModel -> int) -> None": [[393, "    def write_zipfile(self, response, downloaded_size):"]]}, "_url_partial_size": {"GetModel -> int": [[349, "    def _url_partial_size(self):"]]}, "_url_section": {"GetModel -> None": [[333, "    def _url_section(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.convert_to_secs": {"var": {"logger": {"?": [[139, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}, "retval": {"int": [[145, "        retval = 60 * float(args[0]) + float(args[1])"], [147, "        retval = 3600 * float(args[0]) + 60 * float(args[1]) + float(args[2])"]], "float": [[141, "    retval = 0.0"], [143, "        retval = float(args[0])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.__init__": {"param": {"self": {"GetModel": [[263, "    def __init__(self, model_filename, cache_dir, git_model_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.write_mod": {"var": {"length": {"int": [[428, "        length = sum(f.file_size for f in zip_file.infolist())"]]}}, "param": {"self": {"GetModel": [[426, "    def write_model(self, zip_file):"]]}, "zip_file": {"?": [[426, "    def write_model(self, zip_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.get_image_path": {"var": {"dir_contents": {"list": [[116, "    dir_contents = list()"]]}, "image_extensions": {"[str]": [[115, "    image_extensions = _image_extensions"]]}, "dir_scanned": {"?": [[122, "    dir_scanned = sorted(os.scandir(directory), key=lambda x: x.name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.write_zipfi": {"var": {"length": {"int": [[395, "        length = int(response.getheader(\"content-length\")) + downloaded_size"]]}}, "param": {"self": {"GetModel": [[393, "    def write_zipfile(self, response, downloaded_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._url_": {"var": {"sections": {"dict": [[335, "        sections = dict(extract=1, train=2, convert=3)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.backup_fil": {"param": {"directory": {"?": [[170, "def backup_file(directory, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.backup_fi": {"var": {"logger": {"?": [[172, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.get_folder": {"param": {"path": {"{ImageIO -> None | str}": [[99, "def get_folder(path, make_folder=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._url_partial_s": {"var": {"zip_file": {"GetModel -> str": [[351, "        zip_file = self._model_zip_path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._url_section": {"var": {"retval": {"?": [[336, "        retval = sections[self._plugin_section]"]]}}, "param": {"self": {"GetModel": [[333, "    def _url_section(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.Backend.__init__": {"param": {"self": {"Backend": [[32, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.write_model": {"var": {"buffer": {"?": [[442, "                    buffer = zipped.read(self.chunk_size)"]]}, "zipped": {"?": [[439, "            zipped = zip_file.open(fname)"]]}, "fnames": {"?": [[429, "        fnames = zip_file.namelist()"]]}, "pbar": {"?": [[431, "        pbar = tqdm(desc=\"Decompressing\","]]}, "fname": {"?": [[436, "        for fname in fnames:"]]}, "out_fname": {"str": [[437, "            out_fname = os.path.join(self.cache_dir, fname)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_exist": {"param": {"self": {"GetModel": [[314, "    def _model_exists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.__in": {"param": {"git_model_id": {"int": [[263, "    def __init__(self, model_filename, cache_dir, git_model_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.get_folde": {"var": {"output_dir": {"?": [[103, "    output_dir = Path(path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel.get": {"param": {"self": {"GetModel": [[356, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.camel_case_spli": {"var": {"matches": {"?": [[219, "    matches = finditer("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.get_image_paths": {"var": {"directory": {"None": [[120, "        directory = get_folder(directory)"]]}, "logger": {"?": [[114, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}, "chkfile": {"?": [[126, "    for chkfile in dir_scanned:"]]}}, "param": {"directory": {"ImageIO -> None": [[112, "def get_image_paths(directory):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._model_zip_path": {"var": {"retval": {"str": [[309, "        retval = os.path.join(self.cache_dir, \"{}.zip\".format(self._model_full_name))"]]}}, "param": {"self": {"GetModel": [[307, "    def _model_zip_path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.GetModel._url_download": {"var": {"tag": {"str": [[343, "        tag = \"v{}.{}.{}\".format(self._url_section, self.git_model_id, self._model_version)"]]}, "retval": {"str": [[344, "        retval = \"{}/{}/{}.zip\".format(self.url_base, tag, self._model_full_name)"]]}}, "param": {"self": {"GetModel": [[341, "    def _url_download(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.get": {"param": {"make_folder": {"bool": [[99, "def get_folder(path, make_folder=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.utils.deprecation_warning": {"param": {"func_name": {"str": [[206, "def deprecation_warning(func_name, additional_info=None):"]]}, "additional_info": {"None": [[206, "def deprecation_warning(func_name, additional_info=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/display_analysis.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_check_boundaries": {"var": {"boundary_y": {"int": [[440, "        boundary_y = self.winfo_screenheight() - 120"]]}, "boundary_x": {"int": [[439, "        boundary_x = self.winfo_screenwidth() - 120"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.initialize_session": {"var": {"kwargs": {"dict": [[480, "        kwargs = dict(is_training=False)"]]}}, "param": {"self": {"SessionPopUp": [[477, "    def initialize_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Anal": {"func": {"set_session_summary": {"(Analysis, ?) -> None / (Analysis, str) -> None": [[159, "    def set_session_summary(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_checkbuttons": {"var": {"var": {"?": [[580, "            var = tk.BooleanVar()"]]}, "item": {"str": [[573, "        for item in (\"raw\", \"trend\", \"avg\", \"smoothed\", \"outliers\"):"]]}, "hlp": {"str": [[590, "            hlp = self.set_help(item)"]]}, "ctl": {"?": [[587, "            ctl = ttk.Checkbutton(frame, variable=var, text=text)"]]}, "text": {"str": [[575, "                text = \"Show Rolling Average\""], [577, "                text = \"Flatten Outliers\""], [579, "                text = \"Show {}\".format(item.title())"]]}}, "param": {"frame": {"None": [[568, "    def opts_checkbuttons(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options.add_option": {"param": {"self": {"Options": [[230, "    def add_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_column": {"param": {"self": {"StatsData": [[315, "    def tree_columns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.save_sessio": {"var": {"fieldnames": {"?": [[214, "        fieldnames = sorted(key for key in self.summary[0].keys())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.__in": {"param": {"selected_id": {"?": [[264, "    def __init__(self, parent, selected_id, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.save_session": {"var": {"savefile": {"?": [[208, "        savefile = FileHandler(\"save\", \"csv\").retfile"]]}, "csvout": {"?": [[216, "            csvout = csv.DictWriter(outfile, fieldnames)"]]}, "row": {"?": [[218, "            for row in self.summary:"]]}}, "param": {"self": {"Analysis": [[201, "    def save_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_slid": {"param": {"frame": {"None": [[624, "    def opts_slider(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.add_main_fram": {"param": {"self": {"Analysis": [[61, "    def add_main_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.set_callback": {"var": {"var": {"?": [[498, "        var = tk.BooleanVar()"]]}}, "param": {"self": {"SessionPopUp": [[495, "    def set_callback(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_get_position": {"var": {"pos": {"[int]": [[425, "        pos = init_pos"], [430, "            pos = [item + 200 for item in pos]"]]}}, "param": {"self": {"StatsData": [[421, "    def data_popup_get_position(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_columns": {"var": {"column": {"(str, int, str)": [[327, "        for column in columns:"]]}, "text": {"{int | str}": [[328, "            text = column[2] if column[2] else column[0].title()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.check_valid_data": {"var": {"idx": {"None": [[378, "        for idx in col_indices:"]]}, "col_indices": {"[None]": [[377, "        col_indices = [self.columns.index(\"batch\"), self.columns.index(\"iterations\")]"]]}}, "param": {"self": {"StatsData": [[375, "    def check_valid_data(self, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.update_current_session": {"param": {"self": {"Analysis": [[42, "    def update_current_session(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_insert_data": {"var": {"item": {"?": [[342, "        for item in sessions_summary:"]]}}, "param": {"self": {"StatsData": [[337, "    def tree_insert_data(self, sessions_summary):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_button": {"var": {"lblstatus": {"?": [[658, "        lblstatus = ttk.Label(btnframe,"]]}}, "param": {"self": {"int": [[652, "    def opts_buttons(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.graph_build": {"param": {"self": {"SessionPopUp": [[819, "    def graph_build(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.selections_to_list": {"var": {"key": {"?": [[811, "        for key, val in self.vars.items():"]]}}, "param": {"self": {"SessionPopUp": [[807, "    def selections_to_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.add_labe": {"var": {"lbl": {"?": [[294, "        lbl = ttk.Label(self.sub_frame, text=\"Session Stats\", anchor=tk.CENTER)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.set_help": {"var": {"control": {"str": [[714, "        control = control.lower()"]]}}, "param": {"control": {"str": [[711, "    def set_help(control):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.__init__": {"param": {"self": {"StatsData": [[264, "    def __init__(self, parent, selected_id, helptext):"]]}, "helptext": {"?": [[264, "    def __init__(self, parent, selected_id, helptext):"]]}, "parent": {"None": [[264, "    def __init__(self, parent, selected_id, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.optbtn_sav": {"var": {"fieldnames": {"?": [[683, "        fieldnames = sorted(key for key in save_data.keys())"]]}}, "param": {"self": {"SessionPopUp": [[674, "    def optbtn_save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options.add_buttons": {"var": {"hlp": {"str": [[243, "            hlp = self.set_help(btntype)"]]}, "cmd": {"?": [[238, "            cmd = getattr(self.parent, \"{}_session\".format(btntype))"]]}, "btn": {"?": [[239, "            btn = ttk.Button(self.optsframe,"]]}, "btntype": {"str": [[236, "        for btntype in (\"clear\", \"save\", \"load\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.reset_session": {"var": {"msg": {"str": [[153, "        msg = \"Currently running training session\""]]}}, "param": {"self": {"Analysis": [[142, "    def reset_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.check_valid_data": {"param": {"self": {"SessionPopUp": [[796, "    def check_valid_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopU": {"func": {"optbtn_save": {"SessionPopUp -> None": [[674, "    def optbtn_save(self):"]]}, "opts_loss_keys": {"(SessionPopUp, ?) -> None / (SessionPopUp, None) -> None": [[594, "    def opts_loss_keys(self, frame):"]]}, "compile_display_data": {"SessionPopUp -> bool": [[740, "    def compile_display_data(self):"]]}, "opts_combobox": {"(SessionPopUp, ?) -> None / (SessionPopUp, None) -> None": [[530, "    def opts_combobox(self, frame):"]]}, "graph_build": {"SessionPopUp -> None": [[819, "    def graph_build(self, *args):  # pylint:disable=unused-argument"]]}, "optbtn_reload": {"SessionPopUp -> None": [[690, "    def optbtn_reload(self, *args):  # pylint: disable=unused-argument"]]}, "opts_checkbuttons": {"(SessionPopUp, ?) -> None / (SessionPopUp, None) -> None": [[568, "    def opts_checkbuttons(self, frame):"]]}, "opts_buttons": {"(SessionPopUp, ?) -> None / (SessionPopUp, None) -> None": [[652, "    def opts_buttons(self, frame):"]]}, "get_display_data": {"() -> Calculations": [[783, "    def get_display_data(**kwargs):"]]}, "opts_build": {"(SessionPopUp, ?) -> None / (SessionPopUp, None) -> None": [[518, "    def opts_build(self, frame):"]]}, "graph_scale": {"SessionPopUp -> None": [[704, "    def graph_scale(self, *args):  # pylint: disable=unused-argument"]]}, "opts_slider": {"(SessionPopUp, ?) -> None / (SessionPopUp, None) -> None": [[624, "    def opts_slider(self, frame):"]]}, "set_help": {"? -> str / str -> str": [[711, "    def set_help(control):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.get_model_name": {"var": {"logs_dir": {"str": [[136, "        logs_dir = os.path.join(model_dir, \"{}_logs\".format(model_name))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.optbtn_reload": {"param": {"self": {"SessionPopUp": [[690, "    def optbtn_reload(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_loss_key": {"var": {"section_added": {"bool": [[599, "        section_added = False"], [615, "                section_added = True"]]}, "lk_vars": {"dict": [[598, "        lk_vars = dict()"]]}}, "param": {"self": {"SessionPopUp": [[594, "    def opts_loss_keys(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analy": {"func": {"save_session": {"Analysis -> None": [[201, "    def save_session(self):"]]}, "load_session": {"(Analysis, None) -> None": [[109, "    def load_session(self, fullpath=None):"]]}, "reset_session": {"Analysis -> None": [[142, "    def reset_session(self):"]]}, "clear_session": {"Analysis -> None": [[189, "    def clear_session(self):"]]}, "reset_session_info": {"Analysis -> None": [[79, "    def reset_session_info(self):"]]}, "add_options": {"Analysis -> None": [[71, "    def add_options(self):"]]}, "summarise_data": {"? -> None": [[185, "    def summarise_data(session):"]]}, "update_current_session": {"Analysis -> None": [[42, "    def update_current_session(self, *args):  # pylint:disable=unused-argument"]]}, "remove_current_session": {"Analysis -> None": [[49, "    def remove_current_session(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.reset_session_info": {"param": {"self": {"Analysis": [[79, "    def reset_session_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options.set_hel": {"param": {"btntype": {"str": [[247, "    def set_help(btntype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.optbtn_": {"var": {"savefile": {"?": [[677, "        savefile = FileHandler(\"save\", \"csv\").retfile"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.graph_sca": {"param": {"self": {"SessionPopUp": [[704, "    def graph_scale(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis": {"func": {"populate_from_folder": {"Analysis -> None": [[84, "    def populate_from_folder(self, *args):  # pylint:disable=unused-argument"]]}, "get_model_name": {"(?, ?) -> None / (str, str) -> str": [[131, "    def get_model_name(model_dir, state_file):"]]}, "__init__": {"? -> ?": [[22, "    def __init__(self, parent, tabname, helptext):"]]}, "add_main_frame": {"Analysis -> None": [[61, "    def add_main_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.populate_from_": {"var": {"folder": {"?": [[88, "        folder = get_config().tk_vars[\"analysis_folder\"].get()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.set_var": {"var": {"selected_id": {"?": [[58, "        selected_id = tk.StringVar()"]]}}, "param": {"self": {"Analysis": [[56, "    def set_vars(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.layout_fram": {"var": {"sep": {"?": [[509, "        sep = ttk.Frame(self, width=2, relief=tk.RIDGE)"]]}}, "param": {"self": {"SessionPopUp": [[503, "    def layout_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.get": {"var": {"model_name": {"str": [[134, "        model_name = state_file.replace(\"_state.json\", \"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.__init__": {"param": {"self": {"Analysis": [[22, "    def __init__(self, parent, tabname, helptext):"]]}, "tabname": {"str": [[22, "    def __init__(self, parent, tabname, helptext):"]]}, "helptext": {"dict": [[22, "    def __init__(self, parent, tabname, helptext):"]]}, "parent": {"DisplayNotebook": [[22, "    def __init__(self, parent, tabname, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysi": {"func": {"set_callbacks": {"Analysis -> None": [[35, "    def set_callbacks(self):"]]}, "set_vars": {"Analysis -> dict": [[56, "    def set_vars(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.load_session": {"var": {"msg": {"None": [[125, "        msg = fullpath"]], "str": [[127, "            msg = \"...{}\".format(msg[-70:])"]]}, "fullpath": {"?": [[113, "            fullpath = FileHandler(\"filename\", \"state\").retfile"]]}, "model_dir": {"str": [[118, "        model_dir, state_file = os.path.split(fullpath)"]]}}, "param": {"self": {"Analysis": [[109, "    def load_session(self, fullpath=None):"]]}, "fullpath": {"None": [[109, "    def load_session(self, fullpath=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_check_boundari": {"param": {"self": {"StatsData": [[435, "    def data_popup_check_boundaries(self, initial_position, position):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.selections_to_": {"var": {"selections": {"list": [[810, "        selections = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.is_tota": {"param": {"self": {"SessionPopUp": [[473, "    def is_totals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_slide": {"var": {"rounding": {"int": [[634, "                rounding = 25"], [640, "                rounding = 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options.add_button": {"param": {"self": {"Options": [[234, "    def add_buttons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_": {"class": {"Analysis": {"<Analysis>": [[20, "class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.add_main_": {"var": {"mainframe": {"None": [[65, "        mainframe = self.subnotebook_add_page(\"stats\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.optbtn_save": {"var": {"csvout": {"?": [[686, "            csvout = csv.writer(outfile, delimiter=\",\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_insert_dat": {"var": {"values": {"[?]": [[343, "            values = [item[column] for column in self.columns]"]]}, "kwargs": {"dict": [[344, "            kwargs = {\"values\": values}"]]}}, "param": {"sessions_summary": {"?": [[337, "    def tree_insert_data(self, sessions_summary):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.get_model_na": {"param": {"model_dir": {"str": [[131, "    def get_model_name(model_dir, state_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popu": {"var": {"toplevel": {"SessionPopUp": [[393, "        toplevel = SessionPopUp(self.session.modeldir,"]]}, "position": {"[int]": [[402, "        position = self.data_popup_get_position()"]]}}, "param": {"toplevel": {"?": [[401, "            toplevel._w, get_images().icons[\"favicon\"])  # pylint:disable=protected-access"]]}, "datapoints": {"int": [[384, "    def data_popup(self, datapoints):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.__init": {"param": {"session_id": {"?": [[451, "    def __init__(self, model_dir, model_name, session_id, datapoints):"]]}, "model_name": {"?": [[451, "    def __init__(self, model_dir, model_name, session_id, datapoints):"]]}, "model_dir": {"?": [[451, "    def __init__(self, model_dir, model_name, session_id, datapoints):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.add_option": {"param": {"self": {"Analysis": [[71, "    def add_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opt": {"var": {"loss_keys": {"Session -> list": [[597, "        loss_keys = self.session.loss_keys"]]}, "loss_key": {"?": [[600, "        for loss_key in sorted(loss_keys):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.summarise_data": {"param": {"session": {"?": [[185, "    def summarise_data(session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.set_he": {"var": {"hlp": {"str": [[713, "        hlp = \"\""], [716, "            hlp = \"Refresh graph\""], [718, "            hlp = \"Save display data to csv\""], [720, "            hlp = \"Number of data points to sample for rolling average\""], [722, "            hlp = \"Set the smoothing amount. 0 is no smoothing, 0.99 is maximum smoothing\""], [724, "            hlp = \"Flatten data points that fall more than 1 standard \" \\"], [727, "            hlp = \"Display rolling average of the data\""], [729, "            hlp = \"Smooth the data\""], [731, "            hlp = \"Display raw data\""], [733, "            hlp = \"Display polynormal data trend\""], [735, "            hlp = \"Set the data to display\""], [737, "            hlp = \"Change y-axis scale\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_combobox": {"var": {"cmbframe": {"?": [[539, "            cmbframe = ttk.Frame(frame)"]]}, "cmd": {"{SessionPopUp -> None | SessionPopUp -> None}": [[552, "            cmd = self.optbtn_reload if item == \"Display\" else self.graph_scale"]]}, "cmb": {"?": [[547, "            cmb = ttk.Combobox(cmbframe, textvariable=var, width=10)"]]}, "choices": {"dict": [[533, "        choices = {\"Display\": (\"Loss\", \"Rate\"),"]]}, "item": {"str": [[536, "        for item in [\"Display\", \"Scale\"]:"]]}, "lblcmb": {"?": [[541, "            lblcmb = ttk.Label(cmbframe,"]]}, "var": {"?": [[537, "            var = tk.StringVar()"]]}, "hlp": {"str": [[556, "            hlp = self.set_help(item)"]]}}, "param": {"self": {"SessionPopUp": [[530, "    def opts_combobox(self, frame):"]]}, "frame": {"None": [[530, "    def opts_combobox(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.build": {"var": {"optsframe": {"None": [[489, "        optsframe = self.layout_frames()"]]}}, "param": {"self": {"SessionPopUp": [[486, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.get_model_nam": {"param": {"state_file": {"str": [[131, "    def get_model_name(model_dir, state_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.populate_from_folder": {"var": {"state_files": {"[str]": [[94, "        state_files = [fname"]]}, "state_file": {"str": [[102, "        state_file = state_files[0]"]]}}, "param": {"self": {"Analysis": [[84, "    def populate_from_folder(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_": {"var": {"columns": {"((str, int, str), (str, int, None), (str, int, None), (str, int, None), (str, int, None), (str, int, None), (str, int, str))": [[318, "        columns = ((\"session\", 40, \"#\"),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_ge": {"var": {"init_pos": {"[int]": [[424, "        init_pos = [120, 120]"], [431, "            init_pos, pos = self.data_popup_check_boundaries(init_pos, pos)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.resize_frame": {"var": {"canvas_width": {"?": [[300, "        canvas_width = event.width"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.add_lab": {"param": {"self": {"StatsData": [[291, "    def add_label(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Opti": {"func": {"add_buttons": {"Options -> None": [[234, "    def add_buttons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_": {"var": {"slider": {"ControlPanelOption": [[642, "            slider = ControlPanelOption(text,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsD": {"func": {"data_popup_title": {"StatsData -> str": [[411, "    def data_popup_title(self):"]]}, "data_popup": {"(StatsData, ?) -> None / (StatsData, int) -> None": [[384, "    def data_popup(self, datapoints):"]]}, "tree_insert_data": {"(StatsData, ?) -> None": [[337, "    def tree_insert_data(self, sessions_summary):"]]}, "data_popup_get_position": {"StatsData -> [int]": [[421, "    def data_popup_get_position(self):"]]}, "data_popup_check_boundaries": {"(StatsData, ?, ?) -> ([int], [int]) / (StatsData, [int], [int]) -> ([int], [int])": [[435, "    def data_popup_check_boundaries(self, initial_position, position):"]]}, "tree_clear": {"StatsData -> ?": [[352, "    def tree_clear(self):"]]}, "check_valid_data": {"(StatsData, [?]) -> bool / (StatsData, ?) -> bool": [[375, "    def check_valid_data(self, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsDat": {"func": {"resize_frame": {"(StatsData, ?) -> None": [[297, "    def resize_frame(self, event):"]]}, "add_label": {"StatsData -> None": [[291, "    def add_label(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.load_sessi": {"var": {"model_name": {"str": [[120, "        model_name = self.get_model_name(model_dir, state_file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_checkbutton": {"param": {"self": {"SessionPopUp": [[568, "    def opts_checkbuttons(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.optbtn": {"var": {"save_data": {"?": [[682, "        save_data = self.display_data.stats"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.clear_session": {"param": {"self": {"Analysis": [[189, "    def clear_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.__init__": {"param": {"self": {"SessionPopUp": [[451, "    def __init__(self, model_dir, model_name, session_id, datapoints):"]]}, "datapoints": {"int": [[451, "    def __init__(self, model_dir, model_name, session_id, datapoints):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_tit": {"param": {"self": {"StatsData": [[411, "    def data_popup_title(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.set_callback": {"param": {"self": {"Analysis": [[35, "    def set_callbacks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_loss_keys": {"var": {"var": {"?": [[603, "            var = tk.BooleanVar()"]]}, "text": {"?": [[601, "            text = loss_key.replace(\"_\", \" \").title()"]]}, "helptext": {"str": [[602, "            helptext = \"Display {}\".format(text)"]]}, "ctl": {"?": [[617, "            ctl = ttk.Checkbutton(frame, variable=var, text=text)"]]}}, "param": {"frame": {"None": [[594, "    def opts_loss_keys(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup": {"var": {"width": {"int": [[404, "        width = int(480 * scaling_factor)"]]}, "scaling_factor": {"?": [[392, "        scaling_factor = get_config().scaling_factor"]]}, "selected_id": {"?": [[414, "        selected_id = self.selected_id.get()"]]}, "height": {"int": [[403, "        height = int(900 * scaling_factor)"]]}}, "param": {"self": {"StatsData": [[384, "    def data_popup(self, datapoints):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Option": {"func": {"set_help": {"? -> str / str -> str": [[247, "    def set_help(btntype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData": {"func": {"tree_columns": {"StatsData -> [{int | str}]": [[315, "    def tree_columns(self):"]]}, "select_item": {"(StatsData, ?) -> None": [[362, "    def select_item(self, event):"]]}, "__init__": {"? -> ?": [[264, "    def __init__(self, parent, selected_id, helptext):"]]}, "tree_configure": {"(StatsData, ?) -> [{int | str}]": [[305, "    def tree_configure(self, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.layout_frames": {"var": {"leftframe": {"?": [[506, "        leftframe = ttk.Frame(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_": {"var": {"title": {"str": [[415, "        title = \"All Sessions\""], [417, "            title = \"{} Model: Session #{}\".format(self.session.modelname.title(), selected_id)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.O": {"func": {"add_options": {"Options -> None": [[230, "    def add_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analy": {"class": {"Options": {"<Options>": [[222, "class Options():"]]}, "SessionPopUp": {"<SessionPopUp>": [[449, "class SessionPopUp(tk.Toplevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.select_item": {"var": {"region": {"?": [[365, "        region = self.tree.identify(\"region\", event.x, event.y)"]]}, "selection": {"?": [[366, "        selection = self.tree.focus()"]]}, "values": {"?": [[367, "        values = self.tree.item(selection, \"values\")"]]}, "datapoints": {"int": [[372, "                datapoints = int(values[self.columns.index(\"iterations\")])"]]}}, "param": {"self": {"StatsData": [[362, "    def select_item(self, event):"]]}, "event": {"?": [[362, "    def select_item(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_buttons": {"var": {"cmd": {"?": [[665, "            cmd = getattr(self, \"optbtn_{}\".format(btntype))"]]}, "hlp": {"str": [[670, "            hlp = self.set_help(btntype)"]]}, "btntype": {"str": [[664, "        for btntype in (\"reload\", \"save\"):"]]}, "btn": {"?": [[666, "            btn = ttk.Button(btnframe,"]]}, "btnframe": {"?": [[655, "        btnframe = ttk.Frame(frame)"]]}}, "param": {"frame": {"(int, {float | int})": [[652, "    def opts_buttons(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_slider": {"var": {"default": {"int": [[633, "                default = 500"]], "float": [[639, "                default = 0.90"]]}, "item": {"str": [[629, "        for item in (\"avgiterations\", \"smoothamount\"):"]]}, "text": {"str": [[632, "                text = \"Iterations to Average:\""], [638, "                text = \"Smoothing Amount:\""]]}, "min_max": {"(int, float)": [[641, "                min_max = (0, 0.99)"]], "(int, int)": [[635, "                min_max = (25, 2500)"]]}, "dtype": {"<int>": [[631, "                dtype = int"]], "<float>": [[637, "                dtype = float"]]}}, "param": {"self": {"SessionPopUp": [[624, "    def opts_slider(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.set_callbacks": {"var": {"tkv": {"?": [[37, "        tkv = get_config().tk_vars"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.add_section": {"var": {"lbl": {"?": [[565, "        lbl = ttk.Label(frame, text=title)"]]}, "sep": {"?": [[563, "        sep = ttk.Frame(frame, height=2, relief=tk.SOLID)"]]}}, "param": {"frame": {"None": [[561, "    def add_section(frame, title):"]]}, "title": {"str": [[561, "    def add_section(frame, title):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options.set_he": {"var": {"hlp": {"str": [[250, "        hlp = \"\""], [252, "            hlp = \"Load/Refresh stats for the currently training session\""], [254, "            hlp = \"Clear currently displayed session stats\""], [256, "            hlp = \"Save session stats to csv\""], [258, "            hlp = \"Load saved session stats\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.check_valid_": {"param": {"selections": {"list": [[787, "    def check_valid_selection(self, loss_keys, selections):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.remove_current_session": {"param": {"self": {"Analysis": [[49, "    def remove_current_session(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.compile_display_data": {"var": {"loss_keys": {"[?]": [[744, "            loss_keys = [key for key, val in self.vars[\"loss_keys\"].items()"]]}, "selections": {"list": [[748, "            selections = self.selections_to_list()"]]}}, "param": {"self": {"SessionPopUp": [[740, "    def compile_display_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.opts_build": {"var": {"sep": {"?": [[526, "        sep = ttk.Frame(frame, height=2, relief=tk.RIDGE)"]]}}, "param": {"self": {"SessionPopUp": [[518, "    def opts_build(self, frame):"]]}, "frame": {"None": [[518, "    def opts_build(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.set_session_summary": {"var": {"result": {"None": [[173, "            result = self.thread.get_result()"]]}}, "param": {"self": {"Analysis": [[159, "    def set_session_summary(self, message):"]]}, "message": {"str": [[159, "    def set_session_summary(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.resize_fram": {"var": {"canvas_height": {"?": [[301, "        canvas_height = event.height"]]}}, "param": {"self": {"StatsData": [[297, "    def resize_frame(self, event):"]]}, "event": {"?": [[297, "    def resize_frame(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.add_": {"var": {"options": {"Options": [[75, "        options = Options(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.check_valid_selection": {"var": {"display": {"?": [[789, "        display = self.vars[\"display\"].get().lower()"]]}}, "param": {"self": {"SessionPopUp": [[787, "    def check_valid_selection(self, loss_keys, selections):"]]}, "loss_keys": {"[?]": [[787, "    def check_valid_selection(self, loss_keys, selections):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.optbtn_relo": {"var": {"valid": {"bool": [[695, "        valid = self.compile_display_data()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.check_valid_dat": {"param": {"values": {"[?]": [[375, "    def check_valid_data(self, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options": {"func": {"__init__": {"? -> ?": [[224, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp": {"func": {"selections_to_list": {"SessionPopUp -> list": [[807, "    def selections_to_list(self):"]]}, "initialize_session": {"SessionPopUp -> None": [[477, "    def initialize_session(self):"]]}, "set_callback": {"SessionPopUp -> None": [[495, "    def set_callback(self):"]]}, "is_totals": {"SessionPopUp -> bool": [[473, "    def is_totals(self):"]]}, "check_valid_selection": {"(SessionPopUp, ?, ?) -> bool / (SessionPopUp, [?], list) -> bool": [[787, "    def check_valid_selection(self, loss_keys, selections):"]]}, "build": {"SessionPopUp -> None": [[486, "    def build(self):"]]}, "__init__": {"? -> ?": [[451, "    def __init__(self, model_dir, model_name, session_id, datapoints):"]]}, "check_valid_data": {"SessionPopUp -> bool": [[796, "    def check_valid_data(self):"]]}, "add_section": {"(?, ?) -> None / (None, str) -> None / (?, str) -> None": [[561, "    def add_section(frame, title):"]]}, "layout_frames": {"SessionPopUp -> None": [[503, "    def layout_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.data_popup_check_boundarie": {"var": {"position": {"[int]": [[443, "            position = initial_position"]]}, "initial_position": {"[int]": [[442, "            initial_position = [initial_position[0] + 50, initial_position[1]]"]]}}, "param": {"position": {"[int]": [[435, "    def data_popup_check_boundaries(self, initial_position, position):"]]}, "initial_position": {"[int]": [[435, "    def data_popup_check_boundaries(self, initial_position, position):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_clear": {"param": {"self": {"StatsData": [[352, "    def tree_clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis": {"var": {"logger": {"?": [[17, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.StatsData.tree_configur": {"param": {"self": {"StatsData": [[305, "    def tree_configure(self, helptext):"]]}, "helptext": {"?": [[305, "    def tree_configure(self, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysi": {"class": {"StatsData": {"<StatsData>": [[262, "class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.SessionPopUp.compile_display_dat": {"var": {"kwargs": {"dict": [[754, "            kwargs = dict(session=self.session,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Analysis.reset_": {"var": {"session": {"?": [[146, "        session = get_config().session"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_analysis.Options.__init__": {"param": {"self": {"Options": [[224, "    def __init__(self, parent):"]]}, "parent": {"Analysis": [[224, "    def __init__(self, parent):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dlight.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder": {"var": {"mask_complexity": {"int": [[207, "        mask_complexity = 128"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder_b_f": {"var": {"mask_complexity": {"int": [[242, "        mask_complexity = 128"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x_hy": {"var": {"res_block_follows": {"bool": [[32, "                  res_block_follows=False, **kwargs):"]]}}, "param": {"res_block_follows": {"bool": [[32, "                  res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.M": {"var": {"decoder_a_complexity": {"int": [[206, "        decoder_a_complexity = 256"]]}, "decoder_b_complexity": {"int": [[278, "        decoder_b_complexity = 512"]]}}, "func": {"compile_predictors": {"Model -> None": [[144, "    def compile_predictors(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x_f": {"var": {"sr_ratio": {"float": [[56, "                   sr_ratio=0.5, scale_factor=2, interpolation='bilinear',"]]}}, "param": {"sr_ratio": {"float": [[57, "                   res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.set_networks_trainabl": {"var": {"decoder_a": {"?": [[157, "        decoder_a = self.networks['decoder_a'].network"]]}, "decoder_b": {"?": [[161, "        decoder_b = self.networks['decoder_b'].network"]]}, "encoder": {"?": [[153, "        encoder = self.networks['encoder'].network"]]}, "train_encoder": {"bool": [[149, "        train_encoder = True"]]}, "train_decoder_a": {"bool": [[150, "        train_decoder_a = True"]]}, "train_decoder_b": {"bool": [[151, "        train_decoder_b = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x_fas": {"param": {"interpolation": {"str": [[57, "                   res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.encoder": {"var": {"input_": {"?": [[167, "        input_ = Input(shape=self.input_shape)"]]}}, "param": {"self": {"Model": [[165, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight": {"class": {"Model": {"<Model>": [[74, "class Model(OriginalModel):"]]}}, "func": {"upscale2x_hyb": {"(?, ?, ?, int, str, float, int, str, bool) -> None": [[30, "def upscale2x_hyb(self, inp, filters, kernel_size=3, padding='same',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder_b_fast": {"var": {"var_xy": {"?": [[244, "        var_xy = input_"], [246, "        var_xy = self.blocks.upscale(var_xy, 512, scale_factor=self.upscale_ratio)"]]}, "var_y": {"?": [[260, "            var_y = var_xy  # mask decoder"], [262, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity)"], [263, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 2)"], [264, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 4)"], [265, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 8)"], [267, "            var_y = self.blocks.conv2d(var_y, 1, kernel_size=5, padding=\"same\","]]}, "var_x": {"?": [[247, "        var_x = var_xy"], [249, "        var_x = self.blocks.upscale2x_fast(var_x, decoder_b_complexity)"], [250, "        var_x = self.blocks.upscale2x_fast(var_x, decoder_b_complexity // 2)"], [251, "        var_x = self.blocks.upscale2x_fast(var_x, decoder_b_complexity // 4)"], [252, "        var_x = self.blocks.upscale2x_fast(var_x, decoder_b_complexity // 8)"], [254, "        var_x = self.blocks.conv2d(var_x, 3, kernel_size=5, padding=\"same\","]]}}, "param": {"self": {"Model": [[237, "    def decoder_b_fast(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x_fast": {"var": {"var_x1": {"?": [[67, "    var_x1 = self.upscale(var_x, filters, kernel_size=kernel_size,"]]}, "var_x2": {"?": [[62, "    var_x2 = self.conv2d(var_x, filters,  kernel_size=3, padding=padding,"], [64, "    var_x2 = UpSampling2D(size=(scale_factor, scale_factor), interpolation=interpolation,"]]}, "name": {"?": [[59, "    name = self._get_name(\"upscale2x_fast\")"]]}, "res_block_follows": {"bool": [[57, "                   res_block_follows=False, **kwargs):"]]}, "var_x": {"?": [[60, "    var_x = inp"], [70, "    var_x = Add()([var_x2, var_x1])"]]}}, "param": {"padding": {"str": [[57, "                   res_block_follows=False, **kwargs):"]]}, "self": {"?": [[57, "                   res_block_follows=False, **kwargs):"]]}, "inp": {"?": [[57, "                   res_block_follows=False, **kwargs):"]]}, "res_block_follows": {"bool": [[57, "                   res_block_follows=False, **kwargs):"]]}, "kernel_size": {"int": [[57, "                   res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Mode": {"func": {"build": {"Model -> None": [[127, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dligh": {"func": {"upscale2x_fast": {"(?, ?, ?, int, str, float, int, str, bool) -> None": [[55, "def upscale2x_fast(self, inp, filters, kernel_size=3, padding='same',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.set_networks_trainab": {"var": {"layer": {"?": [[154, "        for layer in encoder.layers:"], [158, "        for layer in decoder_a.layers:"], [162, "        for layer in decoder_b.layers:"]]}}, "param": {"self": {"Model": [[148, "    def set_networks_trainable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder_b_fa": {"var": {"outputs": {"[?]": [[257, "        outputs = [var_x]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.__init__": {"param": {"self": {"Model": [[77, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x": {"param": {"scale_factor": {"int": [[57, "                   res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.add_network": {"param": {"self": {"Model": [[134, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.compile_predictor": {"param": {"self": {"Model": [[144, "    def compile_predictors(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model._detail_level_setup": {"var": {"bonum_fortunam": {"int": [[101, "        bonum_fortunam = 128"]]}}, "param": {"self": {"Model": [[89, "    def _detail_level_setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Mo": {"func": {"_detail_level_setup": {"Model -> ?": [[89, "    def _detail_level_setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Mod": {"func": {"set_networks_trainable": {"Model -> None": [[148, "    def set_networks_trainable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder_b_fas": {"var": {"input_": {"?": [[239, "        input_ = Input(shape=(4, 4, 1024))"]]}, "decoder_b_complexity": {"int": [[241, "        decoder_b_complexity = 512"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x_hyb": {"var": {"upscale_filters": {"int": [[38, "    upscale_filters = filters - sr_filters"]]}, "var_x_sr": {"?": [[40, "    var_x_sr = self.upscale(var_x, upscale_filters, kernel_size=kernel_size,"]]}, "name": {"?": [[34, "    name = self._get_name(\"upscale2x_hyb\")"]]}, "var_x_us": {"?": [[44, "        var_x_us = self.conv2d(var_x, upscale_filters,  kernel_size=3, padding=padding,"], [46, "        var_x_us = UpSampling2D(size=(scale_factor, scale_factor), interpolation=interpolation,"]]}, "var_x": {"?": [[35, "    var_x = inp"], [48, "        var_x = Concatenate(name=\"{}_concatenate\".format(name))([var_x_sr, var_x_us])"], [50, "        var_x = var_x_sr"]]}, "sr_ratio": {"float": [[31, "                  sr_ratio=0.5, scale_factor=2, interpolation='bilinear',"]]}, "sr_filters": {"int": [[37, "    sr_filters = int(filters * sr_ratio)"]]}}, "param": {"scale_factor": {"int": [[32, "                  res_block_follows=False, **kwargs):"]]}, "self": {"?": [[32, "                  res_block_follows=False, **kwargs):"]]}, "inp": {"?": [[32, "                  res_block_follows=False, **kwargs):"]]}, "padding": {"str": [[32, "                  res_block_follows=False, **kwargs):"]]}, "filters": {"?": [[32, "                  res_block_follows=False, **kwargs):"]]}, "sr_ratio": {"float": [[32, "                  res_block_follows=False, **kwargs):"]]}, "kernel_size": {"int": [[32, "                  res_block_follows=False, **kwargs):"]]}, "interpolation": {"str": [[32, "                  res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.encode": {"var": {"var_x1": {"?": [[170, "        var_x1 = self.blocks.conv(var_x, self.encoder_filters // 2)"], [175, "        var_x1 = self.blocks.conv(var_x, self.encoder_filters)"], [180, "        var_x1 = self.blocks.conv(var_x, self.encoder_filters * 2)"], [185, "        var_x1 = self.blocks.conv(var_x, self.encoder_filters * 4)"], [190, "        var_x1 = self.blocks.conv(var_x, self.encoder_filters * 8)"]]}, "var_x2": {"?": [[171, "        var_x2 = AveragePooling2D()(var_x)"], [172, "        var_x2 = LeakyReLU(0.1)(var_x2)"], [176, "        var_x2 = AveragePooling2D()(var_x)"], [177, "        var_x2 = LeakyReLU(0.1)(var_x2)"], [181, "        var_x2 = AveragePooling2D()(var_x)"], [182, "        var_x2 = LeakyReLU(0.1)(var_x2)"], [186, "        var_x2 = AveragePooling2D()(var_x)"], [187, "        var_x2 = LeakyReLU(0.1)(var_x2)"], [191, "        var_x2 = AveragePooling2D()(var_x)"], [192, "        var_x2 = LeakyReLU(0.1)(var_x2)"]]}, "var_x": {"?": [[168, "        var_x = input_"], [173, "        var_x = Concatenate()([var_x1, var_x2])"], [178, "        var_x = Concatenate()([var_x1, var_x2])"], [183, "        var_x = Concatenate()([var_x1, var_x2])"], [188, "        var_x = Concatenate()([var_x1, var_x2])"], [193, "        var_x = Concatenate()([var_x1, var_x2])"], [195, "        var_x = Dense(self.encoder_dim)(Flatten()(var_x))"], [196, "        var_x = Dropout(0.05)(var_x)"], [197, "        var_x = Dense(4 * 4 * 1024)(var_x)"], [198, "        var_x = Dropout(0.05)(var_x)"], [199, "        var_x = Reshape((4, 4, 1024))(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model": {"func": {"decoder_a": {"Model -> None": [[203, "    def decoder_a(self):"]]}, "decoder_b": {"Model -> None": [[274, "    def decoder_b(self):"]]}, "encoder": {"Model -> None": [[165, "    def encoder(self):"]]}, "decoder_b_fast": {"Model -> None": [[237, "    def decoder_b_fast(self):"]]}, "__init__": {"? -> ?": [[77, "    def __init__(self, *args, **kwargs):"]]}, "add_networks": {"Model -> None": [[134, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.upscale2x_fa": {"param": {"filters": {"?": [[57, "                   res_block_follows=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.build": {"param": {"self": {"Model": [[127, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decode": {"var": {"var_xy": {"?": [[209, "        var_xy = input_"], [210, "        var_xy = UpSampling2D(self.upscale_ratio, interpolation='bilinear')(var_xy)"]]}, "var_y": {"?": [[224, "            var_y = var_xy  # mask decoder"], [225, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity)"], [226, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 2)"], [227, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 4)"], [228, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 8)"], [230, "            var_y = self.blocks.conv2d(var_y, 1, kernel_size=5, padding=\"same\","]]}, "var_x": {"?": [[212, "        var_x = var_xy"], [213, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_a_complexity)"], [214, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_a_complexity // 2)"], [215, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_a_complexity // 4)"], [216, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_a_complexity // 8)"], [218, "        var_x = self.blocks.conv2d(var_x, 3, kernel_size=5, padding=\"same\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder_b": {"var": {"var_xy": {"?": [[281, "        var_xy = input_"], [283, "        var_xy = self.blocks.upscale2x_hyb(var_xy, 512, scale_factor=self.upscale_ratio)"]]}, "var_x": {"?": [[285, "        var_x = var_xy"], [287, "        var_x = self.blocks.res_block(var_x, 512, use_bias=True)"], [288, "        var_x = self.blocks.res_block(var_x, 512, use_bias=False)"], [289, "        var_x = self.blocks.res_block(var_x, 512, use_bias=False)"], [290, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_b_complexity)"], [291, "        var_x = self.blocks.res_block(var_x, decoder_b_complexity, use_bias=True)"], [292, "        var_x = self.blocks.res_block(var_x, decoder_b_complexity, use_bias=False)"], [293, "        var_x = BatchNormalization()(var_x)"], [294, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_b_complexity // 2)"], [295, "        var_x = self.blocks.res_block(var_x, decoder_b_complexity // 2, use_bias=True)"], [296, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_b_complexity // 4)"], [297, "        var_x = self.blocks.res_block(var_x, decoder_b_complexity // 4, use_bias=False)"], [298, "        var_x = BatchNormalization()(var_x)"], [299, "        var_x = self.blocks.upscale2x_hyb(var_x, decoder_b_complexity // 8)"], [301, "        var_x = self.blocks.conv2d(var_x, 3, kernel_size=5, padding=\"same\","]]}, "input_": {"?": [[276, "        input_ = Input(shape=(4, 4, 1024))"]]}, "var_y": {"?": [[307, "            var_y = var_xy  # mask decoder"], [309, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity)"], [310, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 2)"], [311, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 4)"], [312, "            var_y = self.blocks.upscale2x_hyb(var_y, mask_complexity // 8)"], [314, "            var_y = self.blocks.conv2d(var_y, 1, kernel_size=5, padding=\"same\","]]}, "outputs": {"[?]": [[304, "        outputs = [var_x]"]]}, "mask_complexity": {"int": [[279, "        mask_complexity = 128"]]}}, "param": {"self": {"Model": [[274, "    def decoder_b(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight.Model.decoder_a": {"var": {"outputs": {"[?]": [[221, "        outputs = [var_x]"]]}, "input_": {"?": [[205, "        input_ = Input(shape=(4, 4, 1024))"]]}}, "param": {"self": {"Model": [[203, "    def decoder_a(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/display_page.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_page_from": {"param": {"tab_id": {"?": [[143, "    def subnotebook_page_from_id(self, tab_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_add_pag": {"var": {"frame": {"None": [[96, "        frame = widget if widget else ttk.Frame(self.subnotebook)"]]}}, "param": {"self": {"{Analysis | DisplayPage | GraphDisplay | PreviewExtract | PreviewTrain}": [[93, "    def subnotebook_add_page(self, tabtitle, widget=None):"]]}, "tabtitle": {"str": [[93, "    def subnotebook_add_page(self, tabtitle, widget=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.set_info": {"param": {"msg": {"str": [[74, "    def set_info(self, msg):"]]}, "self": {"{Analysis | DisplayOptionalPage | DisplayPage | GraphDisplay | PreviewExtract}": [[74, "    def set_info(self, msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.set_info_text": {"var": {"msg": {"str": [[190, "            msg = \"{} disabled\".format(self.tabname.title())"], [192, "            msg = \"Waiting for {}...\".format(self.tabname)"], [194, "            msg = \"Displaying {}\".format(self.tabname)"]]}}, "param": {"self": {"{DisplayOptionalPage | PreviewExtract}": [[187, "    def set_info_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.add_option_sav": {"param": {"self": {"{DisplayOptionalPage | PreviewExtract}": [[204, "    def add_option_save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.display_item_set": {"param": {"self": {"DisplayOptionalPage": [[250, "    def display_item_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_options_info": {"param": {"self": {"{<DisplayPage> | DisplayPage}": [[65, "    def add_options_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.add_option_": {"var": {"btnsave": {"?": [[207, "        btnsave = ttk.Button(self.optsframe,"]]}, "chkenable": {"?": [[218, "        chkenable = ttk.Checkbutton(self.optsframe,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_subnotebook": {"param": {"self": {"{<DisplayPage> | DisplayOptionalPage | DisplayPage}": [[51, "    def add_subnotebook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_hid": {"param": {"self": {"{DisplayOptionalPage | DisplayPage}": [[111, "    def subnotebook_hide(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.set_mainframe_single_tab_": {"var": {"nbstyle": {"?": [[89, "        nbstyle = ttk.Style()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.__init__": {"param": {"parent": {"DisplayNotebook": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "self": {"{DisplayOptionalPage | PreviewExtract}": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "waittime": {"int": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "tabname": {"str": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "command": {"str": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "helptext": {"str": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.clo": {"param": {"self": {"DisplayOptionalPage": [[267, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage": {"func": {"add_options_info": {"DisplayPage -> None / <DisplayPage> -> None": [[65, "    def add_options_info(self):"]]}, "add_optional_vars": {"(DisplayPage, ?) -> None / (<DisplayPage>, dict) -> None / (DisplayPage, dict) -> None": [[39, "    def add_optional_vars(self, varsdict):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self, parent, tabname, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.se": {"var": {"tk_vars": {"dict": [[180, "        tk_vars = {\"enabled\": enabled,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_add_pa": {"param": {"widget": {"None": [[93, "    def subnotebook_add_page(self, tabtitle, widget=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_optional_": {"param": {"varsdict": {"dict": [[39, "    def add_optional_vars(self, varsdict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPag": {"func": {"save_items": {"DisplayOptionalPage -> None": [[227, "    def save_items(self):"]]}, "set_vars": {"() -> dict": [[169, "    def set_vars():"]]}, "add_option_save": {"PreviewExtract -> None / DisplayOptionalPage -> None": [[204, "    def add_option_save(self):"]]}, "display_item_set": {"DisplayOptionalPage -> None": [[250, "    def display_item_set(self):"]]}, "add_option_enable": {"PreviewExtract -> None / DisplayOptionalPage -> None": [[215, "    def add_option_enable(self):"]]}, "close": {"DisplayOptionalPage -> None": [[267, "    def close(self):"]]}, "set_info_text": {"PreviewExtract -> None / DisplayOptionalPage -> None": [[187, "    def set_info_text(self):"]]}, "display_item_process": {"DisplayOptionalPage -> None": [[263, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayP": {"func": {"subnotebook_page_from_id": {"(DisplayPage, ?) -> None / (PreviewTrain, ?) -> None": [[143, "    def subnotebook_page_from_id(self, tab_id):"]]}, "subnotebook_add_page": {"(DisplayPage, ?, None) -> None / (GraphDisplay, ?, None) -> None / (PreviewExtract, ?, None) -> None / (Analysis, str, None) -> None / (PreviewTrain, ?, None) -> None": [[93, "    def subnotebook_add_page(self, tabtitle, widget=None):"]]}, "set_mainframe_single_tab_style": {"() -> None": [[86, "    def set_mainframe_single_tab_style():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_su": {"var": {"notebook": {"?": [[54, "        notebook = ttk.Notebook(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_get_titles_id": {"var": {"tabs": {"dict": [[137, "        tabs = dict()"]]}}, "param": {"self": {"{DisplayPage | GraphDisplay | PreviewTrain}": [[135, "    def subnotebook_get_titles_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_page_from_id": {"var": {"tab_name": {"?": [[145, "        tab_name = self.subnotebook.tabs()[tab_id].split(\".\")[-1]"]]}}, "param": {"self": {"{DisplayPage | PreviewTrain}": [[143, "    def subnotebook_page_from_id(self, tab_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_show": {"param": {"self": {"{DisplayOptionalPage | DisplayPage}": [[120, "    def subnotebook_show(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_pa": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.update_pag": {"param": {"waittime": {"int": [[240, "    def update_page(self, waittime):"]]}, "self": {"{DisplayOptionalPage | PreviewExtract}": [[240, "    def update_page(self, waittime):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.close": {"var": {"child": {"?": [[271, "        for child in self.winfo_children():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.display_item_proc": {"param": {"self": {"DisplayOptionalPage": [[263, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPag": {"func": {"add_frame_separator": {"DisplayPage -> None / <DisplayPage> -> None": [[79, "    def add_frame_separator(self):"]]}, "set_vars": {"() -> dict": [[47, "    def set_vars():"]]}, "add_options_frame": {"DisplayPage -> None / <DisplayPage> -> None": [[58, "    def add_options_frame(self):"]]}, "add_subnotebook": {"DisplayOptionalPage -> None / <DisplayPage> -> None / DisplayPage -> None": [[51, "    def add_subnotebook(self):"]]}, "set_info": {"(DisplayPage, ?) -> None / (GraphDisplay, str) -> None / (DisplayOptionalPage, str) -> None / (Analysis, str) -> None / (PreviewExtract, str) -> None": [[74, "    def set_info(self, msg):"]]}, "subnotebook_hide": {"DisplayOptionalPage -> None / DisplayPage -> None": [[111, "    def subnotebook_hide(self):"]]}, "subnotebook_show": {"DisplayOptionalPage -> None / DisplayPage -> None": [[120, "    def subnotebook_show(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_optional_vars": {"var": {"key": {"?": [[42, "            for key, val in varsdict.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_get_titles_ids": {"var": {"tab_id": {"int": [[138, "        for tab_id in range(0, self.subnotebook.index(\"end\")):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.save_item": {"param": {"self": {"DisplayOptionalPage": [[227, "    def save_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.add_option": {"param": {"self": {"{DisplayOptionalPage | PreviewExtract}": [[199, "    def add_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_optional_var": {"param": {"self": {"{<DisplayPage> | DisplayPage}": [[39, "    def add_optional_vars(self, varsdict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage": {"func": {"add_options": {"PreviewExtract -> None / DisplayOptionalPage -> None": [[199, "    def add_options(self):"]]}, "__init__": {"? -> ?": [[153, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "load_display": {"PreviewExtract -> None / DisplayOptionalPage -> None": [[254, "    def load_display(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_configur": {"param": {"self": {"{Analysis | DisplayPage | GraphDisplay | PreviewExtract | PreviewTrain}": [[102, "    def subnotebook_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_options_": {"var": {"lblinfo": {"?": [[68, "        lblinfo = ttk.Label(self.optsframe,"]]}, "optsframe": {"?": [[61, "        optsframe = ttk.Frame(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_options_fram": {"param": {"self": {"{<DisplayPage> | DisplayPage}": [[58, "    def add_options_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalP": {"func": {"update_page": {"(PreviewExtract, int) -> None / (DisplayOptionalPage, ?) -> None / (PreviewExtract, ?) -> None": [[240, "    def update_page(self, waittime):"]]}, "on_chkenable_change": {"DisplayOptionalPage -> None": [[231, "    def on_chkenable_change(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.__init__": {"param": {"self": {"{<DisplayPage> | DisplayPage}": [[17, "    def __init__(self, parent, tabname, helptext):"]]}, "tabname": {"DisplayNotebook": [[17, "    def __init__(self, parent, tabname, helptext):"]]}, "helptext": {"str": [[17, "    def __init__(self, parent, tabname, helptext):"]]}, "parent": {"{DisplayOptionalPage | PreviewExtract}": [[17, "    def __init__(self, parent, tabname, helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.add_frame_separator": {"var": {"sep": {"?": [[82, "        sep = ttk.Frame(self, height=2, relief=tk.RIDGE)"]]}}, "param": {"self": {"{<DisplayPage> | DisplayPage}": [[79, "    def add_frame_separator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_": {"class": {"DisplayOptionalPage": {"<DisplayOptionalPage>": [[150, "class DisplayOptionalPage(DisplayPage):  # pylint: disable=too-many-ancestors"]]}, "DisplayPage": {"<DisplayPage>": [[14, "class DisplayPage(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.on_chkenable_chang": {"param": {"self": {"DisplayOptionalPage": [[231, "    def on_chkenable_change(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPa": {"func": {"subnotebook_get_widgets": {"DisplayPage -> None / PreviewExtract -> None": [[127, "    def subnotebook_get_widgets(self):"]]}, "subnotebook_configure": {"DisplayPage -> None / GraphDisplay -> None / PreviewExtract -> None / Analysis -> None / PreviewTrain -> None": [[102, "    def subnotebook_configure(self):"]]}, "subnotebook_get_titles_ids": {"DisplayPage -> dict / PreviewTrain -> dict / GraphDisplay -> dict": [[135, "    def subnotebook_get_titles_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.add_option_enab": {"param": {"self": {"{DisplayOptionalPage | PreviewExtract}": [[215, "    def add_option_enable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.set_vars": {"var": {"ready": {"?": [[174, "        ready = tk.BooleanVar()"]]}, "enabled": {"?": [[171, "        enabled = tk.BooleanVar()"]]}, "modified": {"?": [[177, "        modified = tk.DoubleVar()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_get_widget": {"param": {"self": {"{DisplayPage | PreviewExtract}": [[127, "    def subnotebook_get_widgets(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayOptionalPage.load_display": {"param": {"self": {"{DisplayOptionalPage | PreviewExtract}": [[254, "    def load_display(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_page.DisplayPage.subnotebook_get_widgets": {"var": {"widget": {"?": [[132, "            for widget in child.winfo_children():"]]}, "child": {"?": [[131, "        for child in self.subnotebook.winfo_children():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/logger.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.file_handler": {"var": {"log_file": {"?": [[127, "    log_file = RotatingFileHandler(filename, backupCount=1)"]]}, "filename": {"str": [[122, "        filename = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), \"faceswap\")"]], "?": [[120, "        filename = logfile"]]}}, "param": {"loglevel": {"None": [[117, "def file_handler(loglevel, logfile, log_format, command):"]]}, "logfile": {"?": [[117, "def file_handler(loglevel, logfile, log_format, command):"]]}, "command": {"?": [[117, "def file_handler(loglevel, logfile, log_format, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"class": {"RollingBuffer": {"<RollingBuffer>": [[78, "class RollingBuffer(collections.deque):"]]}}, "func": {"faceswap_logrecord": {"() -> None": [[192, "def faceswap_logrecord(*args, **kwargs):"]]}, "set_root_logger": {"? -> None": [[93, "def set_root_logger(loglevel=logging.INFO):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger": {"func": {"log_setup": {"(?, ?, ?, int) -> None / (?, ?, ?, bool) -> None": [[100, "def log_setup(loglevel, logfile, command, is_gui=False):"]]}, "get_loglevel": {"? -> None": [[162, "def get_loglevel(loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.TqdmHandler.emit": {"var": {"msg": {"?": [[89, "        msg = self.format(record)"]]}}, "param": {"record": {"?": [[88, "    def emit(self, record):"]]}, "self": {"TqdmHandler": [[88, "    def emit(self, record):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger.verbose": {"param": {"msg": {"?": [[25, "    def verbose(self, msg, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger": {"func": {"__init__": {"? -> ?": [[16, "    def __init__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger.trac": {"param": {"self": {"FaceswapLogger": [[32, "    def trace(self, msg, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapFormatter.rewrite_tf_deprecation": {"param": {"record": {"?": [[69, "    def rewrite_tf_deprecation(record):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapFormatte": {"func": {"format": {"(FaceswapFormatter, ?) -> str": [[43, "    def format(self, record):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger.__init__": {"param": {"self": {"FaceswapLogger": [[16, "    def __init__(self, name):"]]}, "name": {"?": [[16, "    def __init__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapForm": {"func": {"rewrite_tf_deprecation": {"? -> None": [[69, "    def rewrite_tf_deprecation(record):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.faceswap_log": {"var": {"record": {"?": [[194, "    record = old_factory(*args, **kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger.__init": {"var": {"new_level": {"(str, int)": [[17, "        for new_level in ((\"VERBOSE\", 15), (\"TRACE\", 5)):"]]}, "level_name": {"str": [[18, "            level_name, level_num = new_level"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.set_root_logger": {"param": {"loglevel": {"?": [[93, "def set_root_logger(loglevel=logging.INFO):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger.verbo": {"param": {"self": {"FaceswapLogger": [[25, "    def verbose(self, msg, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.RollingBuff": {"func": {"write": {"(RollingBuffer, ?) -> None": [[80, "    def write(self, buffer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.set_root_": {"var": {"rootlogger": {"?": [[95, "    rootlogger = logging.getLogger()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.RollingBuffer.writ": {"var": {"line": {"?": [[82, "        for line in buffer.rstrip().splitlines():"]]}}, "param": {"buffer": {"?": [[80, "    def write(self, buffer):"]]}, "self": {"RollingBuffer": [[80, "    def write(self, buffer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.file_handle": {"param": {"log_format": {"FaceswapFormatter": [[117, "def file_handler(loglevel, logfile, log_format, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapFormatter.format": {"var": {"msg": {"str": [[60, "                msg = msg + \"\\n\""], [61, "            msg = msg + record.exc_text"], [64, "                msg = msg + \"\\n\""], [65, "            msg = msg + self.formatStack(record.stack_info)"]], "?": [[52, "        msg = self.formatMessage(record)"]]}, "record": {"None": [[45, "        record = self.rewrite_tf_deprecation(record)"]]}}, "param": {"record": {"?": [[43, "    def format(self, record):"]]}, "self": {"FaceswapFormatter": [[43, "    def format(self, record):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.get_log": {"var": {"numeric_level": {"?": [[164, "    numeric_level = getattr(logging, loglevel.upper(), None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogger.trace": {"param": {"msg": {"?": [[32, "    def trace(self, msg, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.stream_handle": {"var": {"log_format": {"FaceswapFormatter": [[139, "    log_format = FaceswapFormatter(\"%(asctime)s %(levelname)-8s %(message)s\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logg": {"class": {"TqdmHandler": {"<TqdmHandler>": [[86, "class TqdmHandler(logging.StreamHandler):"]]}, "FaceswapFormatter": {"<FaceswapFormatter>": [[40, "class FaceswapFormatter(logging.Formatter):"]]}}, "func": {"file_handler": {"(?, ?, ?, ?) -> None / (None, ?, FaceswapFormatter, ?) -> None": [[117, "def file_handler(loglevel, logfile, log_format, command):"]]}, "crash_handler": {"FaceswapFormatter -> None / ? -> None": [[153, "def crash_handler(log_format):"]]}, "stream_handler": {"(None, int) -> TqdmHandler / (None, bool) -> TqdmHandler / (?, ?) -> TqdmHandler": [[135, "def stream_handler(loglevel, is_gui):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.crash_handle": {"var": {"log_crash": {"?": [[156, "    log_crash = logging.StreamHandler(debug_buffer)"]]}}, "param": {"log_format": {"FaceswapFormatter": [[153, "def crash_handler(log_format):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.l": {"class": {"FaceswapLogger": {"<FaceswapLogger>": [[14, "class FaceswapLogger(logging.Logger):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logge": {"var": {"old_factory": {"?": [[189, "old_factory = logging.getLogRecordFactory()  # pylint: disable=invalid-name"]]}}, "func": {"crash_log": {"() -> str": [[171, "def crash_log():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.get_": {"param": {"loglevel": {"?": [[162, "def get_loglevel(loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.log_setup": {"var": {"numeric_loglevel": {"None": [[102, "    numeric_loglevel = get_loglevel(loglevel)"]]}, "c_handler": {"None": [[110, "    c_handler = crash_handler(log_format)"]]}, "root_loglevel": {"int": [[103, "    root_loglevel = min(logging.DEBUG, numeric_loglevel)"]]}, "f_handler": {"None": [[108, "    f_handler = file_handler(numeric_loglevel, logfile, log_format, command)"]]}, "s_handler": {"TqdmHandler": [[109, "    s_handler = stream_handler(numeric_loglevel, is_gui)"]]}, "log_format": {"FaceswapFormatter": [[105, "    log_format = FaceswapFormatter(\"%(asctime)s %(processName)-15s %(threadName)-15s \""]]}, "rootlogger": {"None": [[104, "    rootlogger = set_root_logger(loglevel=root_loglevel)"]]}}, "param": {"loglevel": {"?": [[100, "def log_setup(loglevel, logfile, command, is_gui=False):"]]}, "logfile": {"?": [[100, "def log_setup(loglevel, logfile, command, is_gui=False):"]]}, "command": {"?": [[100, "def log_setup(loglevel, logfile, command, is_gui=False):"]]}, "is_gui": {"{bool | int}": [[100, "def log_setup(loglevel, logfile, command, is_gui=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.TqdmHandler": {"func": {"emit": {"(TqdmHandler, ?) -> None": [[88, "    def emit(self, record):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.lo": {"var": {"debug_buffer": {"RollingBuffer": [[205, "debug_buffer = RollingBuffer(maxlen=100)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.crash_log": {"var": {"path": {"str": [[174, "    path = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}, "sysinfo": {"?": [[180, "        sysinfo = (\"\\n\\nThere was an error importing System Information from lib.sysinfo. This is \""]]}, "filename": {"str": [[175, "    filename = os.path.join(path, datetime.now().strftime(\"crash_report.%Y.%m.%d.%H%M%S%f.log\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.crash": {"var": {"original_traceback": {"?": [[173, "    original_traceback = traceback.format_exc()"]]}, "freeze_log": {"list": [[176, "    freeze_log = list(debug_buffer)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.file_han": {"var": {"should_rotate": {"int": [[126, "    should_rotate = os.path.isfile(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.stream_handler": {"var": {"loglevel": {"int": [[138, "    loglevel = max(loglevel, 15)"]]}, "log_console": {"TqdmHandler": [[147, "        log_console = TqdmHandler(sys.stdout)"]], "?": [[145, "        log_console = logging.StreamHandler(sys.stdout)"]]}}, "param": {"loglevel": {"None": [[135, "def stream_handler(loglevel, is_gui):"]]}, "is_gui": {"{bool | int}": [[135, "def stream_handler(loglevel, is_gui):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.logger.FaceswapLogg": {"func": {"verbose": {"(FaceswapLogger, ?) -> None": [[25, "    def verbose(self, msg, *args, **kwargs):"]]}, "trace": {"(FaceswapLogger, ?) -> None": [[32, "    def trace(self, msg, *args, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/config.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.insert_config_sect": {"var": {"config": {"None": [[224, "        config = self.config if config is None else config"]]}}, "param": {"config": {"None": [[220, "    def insert_config_section(self, section, helptext, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.format_help": {"param": {"is_section": {"bool": [[243, "    def format_help(helptext, is_section=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.save_con": {"var": {"f_cfgfile": {"file": [[262, "        f_cfgfile = open(self.configfile, \"w\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.check_config_choices": {"var": {"opt_value": {"?": [[307, "                opt_value = self.config.get(section, item)"]]}, "item": {"?": [[304, "            for item, opt in items.items():"]]}, "default": {"str": [[312, "                    default = str(opt[\"default\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfi": {"func": {"get": {"(FaceswapConfig, ?, ?) -> None / (Config, ?, ?) -> None / (FaceswapConfig, str, ?) -> None": [[80, "    def get(self, section, option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"class": {"FaceswapConfig": {"<FaceswapConfig>": [[16, "class FaceswapConfig():"]]}}, "func": {"generate_configs": {"() -> None": [[345, "def generate_configs():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.add_ite": {"param": {"min_max": {"None": [[123, "                 group=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.config_dict": {"var": {"key": {"?": [[74, "            for key in self.config[sect]:"]]}, "conf": {"dict": [[70, "        conf = dict()"]]}}, "param": {"self": {"FaceswapConfig": [[67, "    def config_dict(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.create_defaul": {"var": {"item": {"?": [[210, "            for item, opt in items.items():"]]}, "section": {"?": [[207, "        for section, items in self.defaults.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.ge": {"param": {"option": {"?": [[80, "    def get(self, section, option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.get_config_": {"param": {"configfile": {"None": [[98, "    def get_config_file(self, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.load_config": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[254, "    def load_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.get_config_fil": {"var": {"dirname": {"str": [[106, "        dirname = os.path.dirname(sys.modules[self.__module__].__file__)"]]}, "err": {"str": [[102, "                err = \"Config file does not exist at: {}\".format(configfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.add_new_config_items": {"var": {"opt_value": {"?": [[287, "                    opt_value = opt[\"default\"]"], [289, "                    opt_value = self.config[section].get(item, opt[\"default\"])"]]}, "new_config": {"?": [[279, "        new_config = ConfigParser(allow_no_value=True)"]]}, "item": {"?": [[282, "            for item, opt in items.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.insert_config_": {"param": {"item": {"?": [[231, "                           config=None):"]]}, "section": {"?": [[220, "    def insert_config_section(self, section, helptext, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.g": {"var": {"datatype": {"?": [[83, "        datatype = self.defaults[section][option][\"type\"]"]]}, "retval": {"None": [[94, "            retval = None"]], "?": [[92, "        retval = func(section, option)"]]}}, "param": {"section": {"str": [[80, "    def get(self, section, option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.format_": {"var": {"helptext": {"str": [[246, "        helptext = '# {}'.format(helptext.replace(\"\\n\", \"\\n# \"))"], [248, "            helptext = helptext.upper()"], [250, "            helptext = \"\\n{}\".format(helptext)"]]}}, "param": {"helptext": {"?": [[243, "    def format_help(helptext, is_section=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.add_item": {"var": {"rounding": {"None": [[122, "                 rounding=None, min_max=None, choices=None, gui_radio=False, fixed=True,"]]}, "info": {"None": [[167, "        info = self.expand_helptext(info, choices, default, datatype, min_max, fixed)"]]}, "group": {"None": [[123, "                 group=None):"]]}, "choices": {"list": [[151, "        choices = list() if not choices else choices"]]}}, "param": {"info": {"None": [[123, "                 group=None):"]]}, "gui_radio": {"bool": [[123, "                 group=None):"]]}, "title": {"None": [[123, "                 group=None):"]]}, "datatype": {"<str>": [[123, "                 group=None):"]]}, "self": {"{Config | Config | Config | Config | FaceswapConfig}": [[123, "                 group=None):"]]}, "rounding": {"None": [[123, "                 group=None):"]]}, "choices": {"None": [[123, "                 group=None):"]]}, "default": {"None": [[123, "                 group=None):"]]}, "group": {"None": [[123, "                 group=None):"]]}, "fixed": {"bool": [[123, "                 group=None):"]]}, "section": {"None": [[123, "                 group=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConf": {"func": {"changeable_items": {"FaceswapConfig -> dict": [[32, "    def changeable_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.insert_config_section": {"var": {"helptext": {"str": [[225, "        helptext = self.format_help(helptext, is_section=True)"]]}}, "param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[220, "    def insert_config_section(self, section, helptext, config=None):"]]}, "helptext": {"?": [[220, "    def insert_config_section(self, section, helptext, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.check_exist": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[196, "    def check_exists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.set_default": {"param": {"self": {"FaceswapConfig": [[47, "    def set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.validate_config": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[267, "    def validate_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.check_config_ch": {"var": {"section": {"?": [[303, "        for section, items in self.defaults.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.config_di": {"var": {"sect": {"str": [[71, "        for sect in (\"global\", self.section):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.generate_conf": {"var": {"plugins_path": {"str": [[353, "    plugins_path = os.path.join(base_path, \"plugins\")"]]}}, "param": {"plugins_path": {"str": [[355, "    for dirpath, _, filenames in os.walk(plugins_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapC": {"func": {"insert_config_item": {"(FaceswapConfig, ?, ?, ?, ?, ?) -> ? / (FaceswapConfig, ?, ?, ?, ?, None) -> None / (Config, ?, ?, ?, ?, ?) -> None / (Config, ?, ?, ?, ?, None) -> None": [[230, "    def insert_config_item(self, section, item, default, option,"]]}, "get_config_file": {"(FaceswapConfig, ?) -> str / (FaceswapConfig, None) -> str / (Config, None) -> str": [[98, "    def get_config_file(self, configfile):"]]}, "check_config_change": {"FaceswapConfig -> bool / Config -> bool": [[318, "    def check_config_change(self):"]]}, "config_dict": {"FaceswapConfig -> dict": [[67, "    def config_dict(self):"]]}, "save_config": {"FaceswapConfig -> None / Config -> None": [[259, "    def save_config(self):"]]}, "validate_config": {"FaceswapConfig -> None / Config -> None": [[267, "    def validate_config(self):"]]}, "insert_config_section": {"(FaceswapConfig, ?, ?, ?) -> ? / (FaceswapConfig, ?, ?, None) -> None / (Config, ?, ?, ?) -> None / (Config, ?, ?, None) -> None": [[220, "    def insert_config_section(self, section, helptext, config=None):"]]}, "load_config": {"FaceswapConfig -> None / Config -> None": [[254, "    def load_config(self):"]]}, "check_config_choices": {"FaceswapConfig -> None / Config -> None": [[300, "    def check_config_choices(self):"]]}, "add_new_config_items": {"FaceswapConfig -> None / Config -> None": [[276, "    def add_new_config_items(self):"]]}, "handle_config": {"FaceswapConfig -> None / Config -> None": [[335, "    def handle_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.create_default": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[204, "    def create_default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.expand_helptex": {"param": {"default": {"None": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}, "datatype": {"<str>": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.__init__": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[18, "    def __init__(self, section, configfile=None):"]]}, "section": {"{ModelBase -> str | str}": [[18, "    def __init__(self, section, configfile=None):"]]}, "configfile": {"None": [[18, "    def __init__(self, section, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.generate": {"var": {"configs_path": {"str": [[354, "    configs_path = os.path.join(base_path, \"config\")"]]}}, "param": {"configs_path": {"str": [[355, "    for dirpath, _, filenames in os.walk(plugins_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.check_config_change": {"var": {"opts": {"[?]": [[326, "            opts = [opt for opt in items.keys() if opt != \"helptext\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.generate_configs": {"var": {"mod": {"?": [[360, "                mod = import_module(\"plugins.{}.{}\".format(section, \"_config\"))"]]}, "config_file": {"str": [[358, "            config_file = os.path.join(configs_path, \"{}.ini\".format(section))"]]}, "dirpath": {"str": [[355, "    for dirpath, _, filenames in os.walk(plugins_path):"]]}}, "param": {"_": {"str": [[355, "    for dirpath, _, filenames in os.walk(plugins_path):"]]}, "dirpath": {"str": [[355, "    for dirpath, _, filenames in os.walk(plugins_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.handle_config": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[335, "    def handle_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.changeable_items": {"var": {"retval": {"dict": [[36, "        retval = dict()"]]}, "key": {"?": [[40, "            for key, val in self.defaults[sect].items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.generate_config": {"var": {"section": {"str": [[357, "            section = os.path.split(dirpath)[-1]"]]}, "base_path": {"str": [[352, "    base_path = os.path.realpath(os.path.dirname(sys.argv[0]))"]]}}, "param": {"filenames": {"str": [[355, "    for dirpath, _, filenames in os.walk(plugins_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.add_sect": {"param": {"info": {"None": [[112, "    def add_section(self, title=None, info=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.confi": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.check_config_choic": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[300, "    def check_config_choices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.get": {"var": {"func": {"?": [[85, "            func = self.config.getboolean"], [87, "            func = self.config.getint"], [89, "            func = self.config.getfloat"], [91, "            func = self.config.get"]]}}, "param": {"self": {"{Config | FaceswapConfig}": [[80, "    def get(self, section, option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.expand_": {"param": {"helptext": {"None": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.changeable_item": {"var": {"sect": {"str": [[37, "        for sect in (\"global\", self.section):"]]}}, "param": {"self": {"FaceswapConfig": [[32, "    def changeable_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.expand_helptext": {"var": {"cmin": {"?": [[188, "            cmin, cmax = min_max"], [191, "            cmin, cmax = min_max"]]}}, "param": {"min_max": {"None": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}, "fixed": {"bool": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}, "choices": {"list": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.save_config": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[259, "    def save_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.add_section": {"param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[112, "    def add_section(self, title=None, info=None):"]]}, "title": {"None": [[112, "    def add_section(self, title=None, info=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.insert_config_item": {"var": {"helptext": {"str": [[237, "        helptext = self.format_help(helptext, is_section=False)"]], "?": [[236, "        helptext = option[\"helptext\"]"]]}, "config": {"None": [[231, "                           config=None):"], [235, "        config = self.config if config is None else config"]]}}, "param": {"default": {"?": [[231, "                           config=None):"]]}, "self": {"{Config | Config | Config | Config | FaceswapConfig}": [[231, "                           config=None):"]]}, "config": {"None": [[231, "                           config=None):"]]}, "section": {"?": [[231, "                           config=None):"]]}, "option": {"?": [[231, "                           config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig": {"func": {"format_help": {"(?, bool) -> str": [[243, "    def format_help(helptext, is_section=False):"]]}, "set_defaults": {"FaceswapConfig -> None": [[47, "    def set_defaults(self):"]]}, "add_item": {"(FaceswapConfig, None, None, <str>, None, None, None, None, None, bool, bool, None) -> None / (Config, None, None, <str>, None, None, None, None, None, bool, bool, None) -> None": [[121, "    def add_item(self, section=None, title=None, datatype=str, default=None, info=None,"]]}, "check_exists": {"FaceswapConfig -> bool / Config -> bool": [[196, "    def check_exists(self):"]]}, "expand_helptext": {"(?, ?, ?, ?, ?, ?) -> str / (None, list, None, <str>, None, bool) -> None": [[179, "    def expand_helptext(helptext, choices, default, datatype, min_max, fixed):"]]}, "create_default": {"FaceswapConfig -> None / Config -> None": [[204, "    def create_default(self):"]]}, "add_section": {"(FaceswapConfig, None, None) -> None / (Config, None, None) -> None": [[112, "    def add_section(self, title=None, info=None):"]]}, "__init__": {"? -> ?": [[18, "    def __init__(self, section, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.add_new_config_item": {"var": {"section": {"?": [[280, "        for section, items in self.defaults.items():"]]}}, "param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[276, "    def add_new_config_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.get_config_fi": {"var": {"folder": {"str": [[107, "        folder, fname = os.path.split(dirname)"]]}, "retval": {"str": [[108, "        retval = os.path.join(os.path.dirname(folder), \"config\", \"{}.ini\".format(fname))"]]}}, "param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[98, "    def get_config_file(self, configfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.config.FaceswapConfig.check_config_chang": {"var": {"section": {"?": [[325, "        for section, items in self.defaults.items():"]]}, "exists": {"[?]": [[327, "            exists = [opt for opt in self.config[section].keys()"]]}}, "param": {"self": {"{Config | Config | Config | Config | FaceswapConfig}": [[318, "    def check_config_change(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/scripts/fsmedia.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter": {"func": {"__init__": {"? -> ?": [[530, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostPr": {"func": {"_set_actions": {"PostProcess -> list": [[352, "    def _set_actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._set_action": {"var": {"task": {"?": [[368, "            task = globals()[action](*args, **kwargs)"]]}, "args": {"?": [[364, "            args = options.get(\"args\", tuple())"]], "tuple": [[366, "            args = args if isinstance(args, tuple) else tuple()"]]}, "postprocess_items": {"dict": [[360, "        postprocess_items = self._get_items()"]]}, "kwargs": {"dict": [[367, "            kwargs = kwargs if isinstance(kwargs, dict) else dict()"]], "?": [[365, "            kwargs = options.get(\"kwargs\", dict())"]]}}, "param": {"self": {"PostProcess": [[352, "    def _set_actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_face_fi": {"param": {"ref_threshold": {"?": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_face_f": {"param": {"multiprocess": {"?": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcessAction.proc": {"param": {"self": {"PostProcessAction": [[470, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments": {"func": {"_load": {"Alignments -> dict": [[109, "    def _load(self):"]]}, "__init__": {"? -> ?": [[65, "    def __init__(self, arguments, is_extract, input_is_video=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_fac": {"var": {"filter_files": {"[list]": [[561, "        filter_files = [self._set_face_filter(f_type, filter_lists[f_type])"]]}}, "param": {"filter_lists": {"?": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcessAction.valid": {"param": {"self": {"PostProcessAction": [[465, "    def valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images.is_video": {"param": {"self": {"Images": [[172, "    def is_video(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter.pro": {"var": {"ret_faces": {"list": [[621, "        ret_faces = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Imag": {"func": {"_load_video_frames": {"Images -> None": [[267, "    def _load_video_frames(self):"]]}, "is_video": {"Images -> bool": [[172, "    def is_video(self):"]]}, "_load_disk_frames": {"Images -> None": [[250, "    def _load_disk_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._set_": {"var": {"actions": {"list": [[361, "        actions = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcessAction.process": {"param": {"extract_media": {"?": [[470, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_disk_frames": {"var": {"image": {"(?, ?)": [[262, "            image = read_image(filename, raise_error=False)"]]}, "filename": {"<list>": [[261, "        for filename in self._input_images:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_disk_fram": {"param": {"self": {"Images": [[250, "    def _load_disk_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments.__init__": {"var": {"folder": {"str": [[70, "        folder, filename = self._set_folder_filename(input_is_video)"]]}}, "param": {"self": {"Alignments": [[65, "    def __init__(self, arguments, is_extract, input_is_video=False):"]]}, "arguments": {"?": [[65, "    def __init__(self, arguments, is_extract, input_is_video=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProc": {"func": {"_get_items": {"PostProcess -> dict": [[379, "    def _get_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images.load": {"var": {"iterator": {"{Images -> None | Images -> None}": [[246, "        iterator = self._load_video_frames if self._is_video else self._load_disk_frames"]]}, "filename": {"?": [[247, "        for filename, image in iterator():"]]}}, "param": {"self": {"Images": [[236, "    def load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.DebugLandmarks.process": {"var": {"frame": {"str": [[500, "        frame = os.path.splitext(os.path.basename(extract_media.filename))[0]"]]}, "idx": {"?": [[501, "        for idx, face in enumerate(extract_media.detected_faces):"]]}}, "param": {"extract_media": {"?": [[485, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceF": {"func": {"_set_face_filter": {"(?, ?) -> list / (str, ?) -> list": [[577, "    def _set_face_filter(f_type, f_args):"]]}, "_load_face_filter": {"(FaceFilter, ?, ?, ?, ?, ?) -> FaceFilter": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._set_face_filte": {"param": {"f_args": {"?": [[577, "    def _set_face_filter(f_type, f_args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess.__init__": {"param": {"self": {"PostProcess": [[346, "    def __init__(self, arguments):"]]}, "arguments": {"?": [[346, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images.load_one_imag": {"var": {"retval": {"None": [[309, "            retval = self._load_one_video_frame(int(frame_no))"]], "(?, ?)": [[311, "            retval = read_image(filename, raise_error=True)"]]}, "frame_no": {"list": [[305, "                frame_no = filename"]], "str": [[307, "                frame_no = os.path.splitext(filename)[0][filename.rfind(\"_\") + 1:]"]]}}, "param": {"self": {"Images": [[288, "    def load_one_image(self, filename):"]]}, "filename": {"list": [[288, "    def load_one_image(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcessAction": {"func": {"process": {"(PostProcessAction, ?) -> None": [[470, "    def process(self, extract_media):"]]}, "valid": {"{PostProcessAction -> bool | bool}": [[465, "    def valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments._set_folder_filenam": {"var": {"folder": {"str": [[97, "            folder, filename = os.path.split(str(self._args.alignments_path))"], [100, "            folder, filename = os.path.split(self._args.input_dir)"], [104, "            folder = str(self._args.input_dir)"]]}}, "param": {"self": {"Alignments": [[74, "    def _set_folder_filename(self, input_is_video):"]]}, "input_is_video": {"{ImagesLoader -> None | bool}": [[74, "    def _set_folder_filename(self, input_is_video):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.finaliz": {"param": {"verify_output": {"{Predict -> None | bool}": [[25, "def finalize(images_found, num_faces_detected, verify_output):"]]}, "num_faces_detected": {"{Alignments -> int | Predict -> int}": [[25, "def finalize(images_found, num_faces_detected, verify_output):"]]}, "images_found": {"ImagesLoader -> int": [[25, "def finalize(images_found, num_faces_detected, verify_output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmed": {"class": {"FaceFilter": {"<FaceFilter>": [[508, "class FaceFilter(PostProcessAction):"]]}}, "func": {"finalize": {"(ImagesLoader -> int, Predict -> int, Predict -> None) -> None / (?, ?, ?) -> None / (?, Alignments -> int, bool) -> None": [[25, "def finalize(images_found, num_faces_detected, verify_output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_video_frames": {"var": {"i": {"?": [[280, "        for i, frame in enumerate(reader):"]]}, "frame": {"?": [[282, "            frame = frame[:, :, ::-1]"]]}, "vidname": {"str": [[278, "        vidname = os.path.splitext(os.path.basename(self._args.input_dir))[0]"]]}, "filename": {"str": [[283, "            filename = \"{}_{:06d}.png\".format(vidname, i + 1)"]]}, "reader": {"?": [[279, "        reader = imageio.get_reader(self._args.input_dir, \"ffmpeg\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_face_": {"var": {"facefilter": {"None": [[560, "        facefilter = None"]], "FaceFilter": [[565, "            facefilter = FilterFunc(filter_files[0],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess": {"func": {"__init__": {"? -> ?": [[346, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia": {"var": {"logger": {"?": [[22, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"Alignments": {"<Alignments>": [[51, "class Alignments(AlignmentsBase):"]]}, "PostProcessAction": {"<PostProcessAction>": [[445, "class PostProcessAction():  # pylint: disable=too-few-public-methods"]]}, "PostProcess": {"<PostProcess>": [[335, "class PostProcess():  # pylint:disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._get_item": {"var": {"filter_lists": {"dict": [[413, "            filter_lists = dict()"]]}, "filter_args": {"None": [[418, "                filter_args = None if not filter_args else filter_args"]], "?": [[417, "                filter_args = getattr(self._args, filter_type, None)"]]}}, "param": {"self": {"PostProcess": [[379, "    def _get_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._get_input_imag": {"param": {"self": {"Images": [[221, "    def _get_input_images(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._check_input_fold": {"var": {"retval": {"bool": [[215, "            retval = True"], [218, "            retval = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._check_input_folder": {"param": {"self": {"Images": [[201, "    def _check_input_folder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_one_video_fram": {"var": {"reader": {"?": [[328, "        reader = imageio.get_reader(self._args.input_dir, \"ffmpeg\")"]]}}, "param": {"self": {"Images": [[314, "    def _load_one_video_frame(self, frame_no):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alig": {"func": {"_set_folder_filename": {"(Alignments, ?) -> (str, str) / (Alignments, bool) -> (str, str) / (Alignments, ImagesLoader -> None) -> (str, str)": [[74, "    def _set_folder_filename(self, input_is_video):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._count_imag": {"param": {"self": {"Images": [[187, "    def _count_images(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images.images_found": {"param": {"self": {"Images": [[183, "    def images_found(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.DebugLandmark": {"func": {"process": {"(DebugLandmarks, ?) -> None": [[485, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.DebugLandmarks.proc": {"var": {"aligned_landmarks": {"?": [[503, "            aligned_landmarks = face.aligned_landmarks"]]}}, "param": {"self": {"DebugLandmarks": [[485, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess.do_actions": {"var": {"action": {"<list>": [[440, "        for action in self._actions:"]]}}, "param": {"extract_media": {"dict": [[426, "    def do_actions(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images.input_imag": {"param": {"self": {"Images": [[177, "    def input_images(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedi": {"class": {"Images": {"<Images>": [[154, "class Images():"]]}, "DebugLandmarks": {"<DebugLandmarks>": [[482, "class DebugLandmarks(PostProcessAction):  # pylint: disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._set_face_filter": {"param": {"f_type": {"str": [[577, "    def _set_face_filter(f_type, f_args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images.__init__": {"param": {"self": {"Images": [[163, "    def __init__(self, arguments):"]]}, "arguments": {"?": [[163, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._get_items": {"var": {"detector": {"str": [[404, "                detector = \"cv2_dnn\""]], "?": [[402, "                detector = self._args.detector.replace(\"-\", \"_\").lower()"]]}, "aligner": {"str": [[408, "                aligner = \"cv2_dnn\""]], "?": [[406, "                aligner = self._args.aligner.replace(\"-\", \"_\").lower()"]]}, "filter_type": {"str": [[416, "            for filter_type in ('filter', 'nfilter'):"]]}, "face_filter": {"dict": [[410, "            face_filter = dict(detector=detector,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.I": {"var": {"input_images": {"list": [[232, "            input_images = get_image_paths(self._args.input_dir)"]], "?": [[230, "            input_images = self._args.input_dir"]]}}, "func": {"_count_images": {"Images -> int": [[187, "    def _count_images(self):"]]}, "input_images": {"Images -> list": [[177, "    def input_images(self):"]]}, "_get_input_images": {"Images -> list": [[221, "    def _get_input_images(self):"]]}, "images_found": {"Images -> int": [[183, "    def images_found(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments._load": {"var": {"skip_faces": {"int": [[130, "        skip_faces = hasattr(self._args, 'skip_faces') and self._args.skip_faces"]]}, "skip_existing": {"int": [[129, "        skip_existing = hasattr(self._args, 'skip_existing') and self._args.skip_existing"]]}, "key": {"?": [[147, "            for key in del_keys:"]]}}, "param": {"self": {"Alignments": [[109, "    def _load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments.__in": {"param": {"is_extract": {"bool": [[65, "    def __init__(self, arguments, is_extract, input_is_video=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcessAction.__init__": {"param": {"self": {"{DebugLandmarks | PostProcessAction}": [[458, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter.proc": {"param": {"self": {"FaceFilter": [[604, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_face_fil": {"param": {"detector": {"?": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter.process": {"var": {"check_item": {"?": [[623, "            check_item = detect_face[\"face\"] if isinstance(detect_face, dict) else detect_face"]]}, "idx": {"?": [[622, "        for idx, detect_face in enumerate(extract_media.detected_faces):"]]}}, "param": {"extract_media": {"?": [[604, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_video_fram": {"param": {"self": {"Images": [[267, "    def _load_video_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments._lo": {"var": {"data": {"dict": [[122, "        data = dict()"]], "?": [[126, "            data = super()._load()"], [140, "        data = self._serializer.load(self.file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._set_fac": {"var": {"filter_files": {"list": [[597, "        filter_files = list(filter(lambda fpath: Path(fpath).exists(), filter_files))"]], "[?]": [[596, "        filter_files = f_args if isinstance(f_args, list) else [f_args]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcessActio": {"func": {"__init__": {"? -> ?": [[458, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter.__init__": {"param": {"self": {"FaceFilter": [[530, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess.do_action": {"param": {"self": {"PostProcess": [[426, "    def do_actions(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._count_images": {"var": {"retval": {"int": [[196, "            retval = int(count_frames(self._args.input_dir, fast=True))"], [198, "            retval = len(self._input_images)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilt": {"func": {"process": {"(FaceFilter, ?) -> None": [[604, "    def process(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_one_vid": {"param": {"frame_no": {"int": [[314, "    def _load_one_video_frame(self, frame_no):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._set_actions": {"var": {"action": {"<list>": [[373, "        for action in actions:"]], "?": [[362, "        for action, options in postprocess_items.items():"]]}, "action_name": {"[?]": [[374, "            action_name = camel_case_split(action.__class__.__name__)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images": {"func": {"_check_input_folder": {"Images -> bool": [[201, "    def _check_input_folder(self):"]]}, "load": {"Images -> None": [[236, "    def load(self):"]]}, "load_one_image": {"(Images, ?) -> (?, ?) / (Images, list) -> (?, ?)": [[288, "    def load_one_image(self, filename):"]]}, "__init__": {"? -> ?": [[163, "    def __init__(self, arguments):"]]}, "_load_one_video_frame": {"(Images, ?) -> None / (Images, int) -> None": [[314, "    def _load_one_video_frame(self, frame_no):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._set_ac": {"var": {"options": {"dict": [[363, "            options = dict() if options is None else options"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments._loa": {"var": {"del_keys": {"[?]": [[145, "            del_keys = [key for key, val in data.items() if not val]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_face_filter": {"param": {"self": {"FaceFilter": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignm": {"param": {"input_is_video": {"{ImagesLoader -> None | bool}": [[65, "    def __init__(self, arguments, is_extract, input_is_video=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProce": {"func": {"do_actions": {"(PostProcess, dict) -> None / (PostProcess, ?) -> None": [[426, "    def do_actions(self, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Alignments._set_folder_": {"var": {"filename": {"str": [[101, "            filename = \"{}_alignments\".format(os.path.splitext(filename)[0])"], [105, "            filename = \"alignments\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.FaceFilter._load_face_filt": {"param": {"aligner": {"?": [[536, "    def _load_face_filter(self, filter_lists, ref_threshold, aligner, detector, multiprocess):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.PostProcess._g": {"var": {"postprocess_items": {"dict": [[391, "        postprocess_items = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.fsmedia.Images._load_one_video_": {"var": {"frame": {"?": [[330, "        frame = reader.get_next_data()[:, :, ::-1]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/cv2_dnn.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.init_mod": {"param": {"self": {"Detect": [[22, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.__init__": {"param": {"self": {"Detect": [[11, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn": {"class": {"Detect": {"<Detect>": [[9, "class Detect(Detector):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.process_input": {"param": {"self": {"Detect": [[28, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.process_outpu": {"param": {"batch": {"?": [[60, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.__in": {"var": {"git_model_id": {"int": [[12, "        git_model_id = 4"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.process_inpu": {"param": {"batch": {"?": [[28, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.finalize_predictions": {"var": {"i": {"int": [[48, "        for i in range(predictions.shape[2]):"]]}, "confidence": {"?": [[49, "            confidence = predictions[0, 0, i, 2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.__init": {"var": {"model_filename": {"[str]": [[13, "        model_filename = [\"resnet_ssd_v1.caffemodel\", \"resnet_ssd_v1.prototxt\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.finalize_": {"param": {"predictions": {"?": [[45, "    def finalize_predictions(self, predictions):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.D": {"var": {"predictions": {"?": [[41, "        predictions = self.model.forward()"]]}}, "func": {"predict": {"(Detect, ?) -> None": [[38, "    def predict(self, batch):"]]}, "finalize_predictions": {"(Detect, ?) -> [?]": [[45, "    def finalize_predictions(self, predictions):"]]}, "process_input": {"(Detect, ?) -> None": [[28, "    def process_input(self, batch):"]]}, "process_output": {"(Detect, ?) -> None": [[60, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.finalize_prediction": {"var": {"faces": {"list": [[47, "        faces = list()"]]}}, "param": {"self": {"Detect": [[45, "    def finalize_predictions(self, predictions):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.process_output": {"param": {"self": {"Detect": [[60, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.predict": {"param": {"self": {"Detect": [[38, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detect.predi": {"param": {"batch": {"?": [[38, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn.Detec": {"func": {"init_model": {"Detect -> None": [[22, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[11, "    def __init__(self, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/villain.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model.encoder": {"var": {"dense_shape": {"int": [[35, "        dense_shape = self.input_shape[0] // 16"]]}, "nn_x": {"?": [[41, "            nn_x = self.blocks.res_block(var_x, in_conv_filters, **kwargs)"]]}, "input_": {"?": [[31, "        input_ = Input(shape=self.input_shape)"]]}, "_": {"int": [[40, "        for _ in range(res_cycles):"]]}, "tmp_x": {"?": [[38, "        tmp_x = var_x"]]}}, "param": {"self": {"Model": [[28, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model.decoder": {"var": {"outputs": {"[?]": [[79, "        outputs = [var_x]"]]}, "input_": {"?": [[65, "        input_ = Input(shape=(decoder_shape, decoder_shape, 512))"]]}}, "param": {"self": {"Model": [[61, "    def decoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model.decode": {"var": {"var_x": {"?": [[67, "        var_x = input_"], [68, "        var_x = self.blocks.upscale(var_x, 512, res_block_follows=True, **kwargs)"], [69, "        var_x = self.blocks.res_block(var_x, 512, **kwargs)"], [70, "        var_x = self.blocks.upscale(var_x, 256, res_block_follows=True, **kwargs)"], [71, "        var_x = self.blocks.res_block(var_x, 256, **kwargs)"], [72, "        var_x = self.blocks.upscale(var_x, self.input_shape[0], res_block_follows=True, **kwargs)"], [73, "        var_x = self.blocks.res_block(var_x, self.input_shape[0], **kwargs)"], [74, "        var_x = self.blocks.conv2d(var_x, 3,"]]}, "var_y": {"?": [[82, "            var_y = input_"], [83, "            var_y = self.blocks.upscale(var_y, 512)"], [84, "            var_y = self.blocks.upscale(var_y, 256)"], [85, "            var_y = self.blocks.upscale(var_y, self.input_shape[0])"], [86, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "kwargs": {"dict": [[63, "        kwargs = dict(kernel_initializer=self.kernel_initializer)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain": {"class": {"Model": {"<Model>": [[14, "class Model(OriginalModel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model": {"var": {"decoder_shape": {"int": [[64, "        decoder_shape = self.input_shape[0] // 8"]]}}, "func": {"decoder": {"Model -> None": [[61, "    def decoder(self):"]]}, "__init__": {"? -> ?": [[16, "    def __init__(self, *args, **kwargs):"]]}, "encoder": {"Model -> None": [[28, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model.__init__": {"param": {"self": {"Model": [[16, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model.encod": {"var": {"in_conv_filters": {"int": [[34, "            in_conv_filters = 128 + (self.input_shape[0] - 128) // 4"]], "?": [[32, "        in_conv_filters = self.input_shape[0]"]]}, "res_cycles": {"int": [[39, "        res_cycles = 8 if self.config.get(\"lowmem\", False) else 16"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.villain.Model.encode": {"var": {"var_x": {"?": [[37, "        var_x = self.blocks.conv(input_, in_conv_filters, res_block_follows=True, **kwargs)"], [42, "            var_x = nn_x"], [44, "        var_x = add([var_x, tmp_x])"], [45, "        var_x = self.blocks.conv(var_x, 128, **kwargs)"], [46, "        var_x = PixelShuffler()(var_x)"], [47, "        var_x = self.blocks.conv(var_x, 128, **kwargs)"], [48, "        var_x = PixelShuffler()(var_x)"], [49, "        var_x = self.blocks.conv(var_x, 128, **kwargs)"], [50, "        var_x = self.blocks.conv_sep(var_x, 256, **kwargs)"], [51, "        var_x = self.blocks.conv(var_x, 512, **kwargs)"], [53, "            var_x = self.blocks.conv_sep(var_x, 1024, **kwargs)"], [55, "        var_x = Dense(self.encoder_dim, **kwargs)(Flatten()(var_x))"], [56, "        var_x = Dense(dense_shape * dense_shape * 1024, **kwargs)(var_x)"], [57, "        var_x = Reshape((dense_shape, dense_shape, 1024))(var_x)"], [58, "        var_x = self.blocks.upscale(var_x, 512, **kwargs)"]]}, "kwargs": {"dict": [[30, "        kwargs = dict(kernel_initializer=self.kernel_initializer)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/project.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._get_options_for_": {"param": {"command": {"{None | _GuiSession -> None | _GuiSession -> None}": [[194, "    def _get_options_for_command(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._reset_modified_var": {"var": {"key": {"?": [[250, "        for key, tk_var in self._modified_vars.items():"]]}}, "param": {"self": {"{Project | Tasks | _GuiSession}": [[240, "    def _reset_modified_var(self, command=None):"]]}, "command": {"_GuiSession -> None": [[240, "    def _reset_modified_var(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession": {"var": {"loaded": {"None": [[994, "        loaded = self._load()"]]}}, "func": {"load": {"LastSession -> None": [[987, "    def load(self):"]]}, "ask_load": {"LastSession -> None": [[975, "    def ask_load(self):"]]}, "from_dict": {"(LastSession, None) -> None / (LastSession, ?) -> None": [[938, "    def from_dict(self, options):"]]}, "to_dict": {"LastSession -> None": [[954, "    def to_dict(self):"]]}, "_set_project": {"LastSession -> bool": [[1001, "    def _set_project(self):"]]}, "save": {"LastSession -> None": [[1021, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._check_valid_choic": {"param": {"self": {"{LastSession | Project | Tasks | _GuiSession}": [[351, "    def _check_valid_choices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.sav": {"param": {"self": {"Project": [[811, "    def save(self, *args, save_as=False):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._update_tasks": {"var": {"key": {"?": [[782, "        for key, val in self._cli_options.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._current_gui_state": {"param": {"command": {"None": [[111, "    def _current_gui_state(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSe": {"func": {"_cli_options": {"_GuiSession -> dict": [[62, "    def _cli_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.P": {"func": {"_project_modified": {"Project -> int": [[685, "    def _project_modified(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.load": {"param": {"self": {"LastSession": [[987, "    def load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._selected_to_choic": {"param": {"self": {"_GuiSession": [[90, "    def _selected_to_choices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.__init__": {"param": {"self": {"Tasks": [[433, "    def __init__(self, config, file_handler):"]]}, "config": {"Config": [[433, "    def __init__(self, config, file_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.T": {"func": {"_update_legacy_task": {"(Tasks, ?) -> str": [[519, "    def _update_legacy_task(self, filename):"]]}, "clear_tasks": {"Tasks -> None": [[608, "    def clear_tasks(self):"]]}, "add_project_task": {"(Tasks, ?, ?, ?) -> None": [[617, "    def add_project_task(self, filename, command, options):"]]}, "_set_active_task": {"(Tasks, None) -> None": [[635, "    def _set_active_task(self, command=None):"]]}, "_add_task": {"(Tasks, _GuiSession -> None) -> None / (Tasks, ?) -> None / (Tasks, {None | _GuiSession -> None | _GuiSession -> None}) -> None": [[590, "    def _add_task(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Projec": {"param": {"_update_tasks": {"Project": [[780, "    def _update_tasks(self):"]]}}, "func": {"_tasks": {"Project -> None": [[690, "    def _tasks(self):"]]}, "_update_root_title": {"Project -> None": [[804, "    def _update_root_title(self):"]]}, "_update_tasks": {"Project -> None": [[780, "    def _update_tasks(self):"]]}, "set_default_options": {"Project -> None": [[694, "    def set_default_options(self):"]]}, "__init__": {"? -> ?": [[670, "    def __init__(self, config, file_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._add_task": {"param": {"self": {"Tasks": [[590, "    def _add_task(self, command):"]]}, "command": {"{None | _GuiSession -> None | _GuiSession -> None}": [[590, "    def _add_task(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.from_dict": {"param": {"self": {"LastSession": [[938, "    def from_dict(self, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.add_project_task": {"param": {"self": {"Tasks": [[617, "    def add_project_task(self, filename, command, options):"]]}, "command": {"?": [[617, "    def add_project_task(self, filename, command, options):"]]}, "options": {"?": [[617, "    def add_project_task(self, filename, command, options):"]]}, "filename": {"?": [[617, "    def add_project_task(self, filename, command, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Task": {"var": {"save_as": {"?": [[561, "        save_as = save_as or self._is_project or self._filename is None"]]}}, "param": {"save_as": {"?": [[549, "    def save(self, save_as=False):"]]}}, "func": {"save": {"(Tasks, ?) -> None": [[549, "    def save(self, save_as=False):"]]}, "_is_project": {"Tasks -> int": [[438, "    def _is_project(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.clear": {"param": {"self": {"Tasks": [[574, "    def clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.sav": {"param": {"self": {"LastSession": [[1021, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_": {"var": {"filename": {"?": [[155, "            filename = cfgfile.name"]]}}, "param": {"filename": {"str": [[126, "    def _set_filename(self, filename=None, sess_type=\"project\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_gui_state_for_command": {"var": {"optvar": {"?": [[233, "            optvar = self._config.cli_opts.get_one_option_variable(command, srcopt)"]]}, "srcopt": {"?": [[232, "        for srcopt, srcval in options.items():"]]}}, "param": {"self": {"{LastSession | Project | Tasks | _GuiSession}": [[218, "    def _set_gui_state_for_command(self, command, options):"]]}, "options": {"?": [[218, "    def _set_gui_state_for_command(self, command, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"Tasks": {"<Tasks>": [[419, "class Tasks(_GuiSession):"]]}, "_GuiSession": {"<_GuiSession>": [[14, "class _GuiSession():  # pylint:disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.reload": {"param": {"self": {"Tasks": [[578, "    def reload(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._selected_to_choices": {"var": {"retval": {"dict": [[100, "        retval = {command: {option: {\"value\": value,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._set_active_": {"var": {"task": {"?": [[647, "        task = self._tasks.get(command, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._project_filenam": {"param": {"self": {"Tasks": [[445, "    def _project_filename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._project_modified": {"param": {"self": {"Project": [[685, "    def _project_modified(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._get_options_for_command": {"var": {"retval": {"{dict | dict | dict}": [[210, "        retval = {command: opts}"]], "None": [[214, "            retval = None"]]}, "opts": {"?": [[209, "        opts = self._options.get(command, None)"]]}}, "param": {"self": {"{LastSession | Project | Tasks | _GuiSession}": [[194, "    def _get_options_for_command(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastS": {"func": {"_save_option": {"LastSession -> None": [[929, "    def _save_option(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.__init": {"param": {"file_handler": {"<FileHandler>": [[670, "    def __init__(self, config, file_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._sav": {"param": {"self": {"{Project | Tasks | _GuiSession}": [[398, "    def _save(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSessi": {"func": {"_add_to_recent": {"(_GuiSession, None) -> None / (Tasks, {None | _GuiSession -> None | _GuiSession -> None}) -> None / (Project, None) -> None / (Tasks, None) -> None": [[256, "    def _add_to_recent(self, command=None):"]]}, "_get_lone_task": {"Project -> None / Tasks -> None / _GuiSession -> None": [[319, "    def _get_lone_task(self):"]]}, "_stored_tab_name": {"_GuiSession -> None": [[83, "    def _stored_tab_name(self):"]]}, "_del_from_recent": {"(_GuiSession, ?, None, ?) -> None / (_GuiSession, None, [?], ?) -> [?] / (Tasks, {Tasks -> None | str}, [?], ?) -> [?] / (Tasks, ?, None, ?) -> None / (Project, ?, [?], ?) -> [?] / (Tasks, str, [?], ?) -> [?]": [[286, "    def _del_from_recent(self, filename, recent_files=None, save=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_options": {"var": {"tab_name": {"{None | _GuiSession -> None | _GuiSession -> None}": [[189, "        tab_name = self._options.get(\"tab_name\", None) if command is None else command"]], "{None | _GuiSession -> None | _GuiSession -> None | str}": [[190, "        tab_name = tab_name if tab_name is not None else \"extract\""]]}, "cmd": {"?": [[187, "        for cmd, opt in opts.items():"]]}}, "param": {"command": {"{None | _GuiSession -> None | _GuiSession -> None}": [[172, "    def _set_options(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_filenam": {"var": {"ext": {"str": [[162, "        ext = os.path.splitext(filename)[1]"]]}, "handler": {"str": [[147, "        handler = \"config_{}\".format(sess_type)"]]}, "cfgfile": {"?": [[151, "            cfgfile = self._file_handler(\"open\", handler).retfile"]]}}, "param": {"self": {"{Project | Tasks | _GuiSession}": [[126, "    def _set_filename(self, filename=None, sess_type=\"project\"):"]]}, "sess_type": {"str": [[126, "    def _set_filename(self, filename=None, sess_type=\"project\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._add_to_recent": {"param": {"self": {"{Project | Tasks | _GuiSession}": [[256, "    def _add_to_recent(self, command=None):"]]}, "command": {"{None | _GuiSession -> None | _GuiSession -> None}": [[256, "    def _add_to_recent(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._set_active_task": {"var": {"command": {"_GuiSession -> None": [[646, "        command = self._active_tab if command is None else command"]]}}, "param": {"self": {"Tasks": [[635, "    def _set_active_task(self, command=None):"]]}, "command": {"None": [[635, "    def _set_active_task(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.ask_load": {"param": {"self": {"LastSession": [[975, "    def ask_load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.sav": {"param": {"self": {"Tasks": [[549, "    def save(self, save_as=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.load": {"var": {"legacy": {"bool": [[755, "        legacy = command is not None"]]}, "filename_set": {"None": [[742, "        filename_set = self._set_filename(filename, sess_type=\"project\")"]]}}, "param": {"self": {"Project": [[730, "    def load(self, *args, filename=None):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.reload": {"param": {"self": {"Project": [[787, "    def reload(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._active_ta": {"var": {"toolsbook": {"?": [[44, "        toolsbook = self._config.tools_notebook"]]}, "notebook": {"?": [[43, "        notebook = self._config.command_notebook"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.save": {"var": {"opts": {"None": [[1033, "        opts = self.to_dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._update_task": {"var": {"opts": {"dict": [[783, "            opts = {key: val}"]]}}, "param": {"self": {"None": [[780, "    def _update_tasks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.clear_task": {"param": {"self": {"Tasks": [[608, "    def clear_tasks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.cli_option": {"param": {"self": {"Project": [[680, "    def cli_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.set_modified_callbac": {"var": {"key": {"?": [[713, "        for key, tkvar in self._modified_vars.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.save": {"var": {"command": {"_GuiSession -> None": [[566, "        command = self._active_tab"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.from_dic": {"param": {"options": {"None": [[938, "    def from_dict(self, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._handoff_legacy_task": {"var": {"filename": {"None": [[773, "        filename = self._filename"]]}}, "param": {"self": {"Project": [[767, "    def _handoff_legacy_task(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._save_as_to_filenam": {"var": {"cfgfile": {"?": [[385, "        cfgfile = self._file_handler(\"save\","]]}, "title": {"str": [[383, "        title = \"Save {}As...\".format(\"{} \".format(session_type.title())"]]}}, "param": {"self": {"{Project | Tasks | _GuiSession}": [[369, "    def _save_as_to_filename(self, session_type):"]]}, "session_type": {"str": [[369, "    def _save_as_to_filename(self, session_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.__init": {"param": {"file_handler": {"<FileHandler>": [[433, "    def __init__(self, config, file_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.confirm_clo": {"param": {"self": {"Project": [[885, "    def confirm_close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._add_to": {"var": {"recent_filename": {"str": [[269, "        recent_filename = os.path.join(self._config.pathcache, \".recent.json\")"]]}, "recent_files": {"[?]": [[274, "            recent_files = []"], [279, "        recent_files = self._del_from_recent(self._filename, recent_files)"], [282, "        recent_files = recent_files[:20]"]], "?": [[277, "            recent_files = self._serializer.load(recent_filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._basenam": {"param": {"self": {"_GuiSession": [[78, "    def _basename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession._save_option": {"param": {"self": {"LastSession": [[929, "    def _save_option(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._modified_callback": {"param": {"self": {"Project": [[717, "    def _modified_callback(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._get_lone_task": {"var": {"command": {"None": [[327, "        command = None"]], "?": [[329, "            command = list(self._cli_options.keys())[0]"]]}}, "param": {"self": {"{Project | Tasks | _GuiSession}": [[319, "    def _get_lone_task(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.l": {"var": {"command": {"{None | _GuiSession -> None | _GuiSession -> None}": [[497, "        command = self._get_lone_task() if command is None else command"]], "{_GuiSession -> None | _GuiSession -> None}": [[496, "        command = self._active_tab if current_tab else self._stored_tab_name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_option": {"var": {"opts": {"{_GuiSession -> dict | dict | dict}": [[182, "        opts = self._get_options_for_command(command) if command else self._cli_options"]]}}, "param": {"self": {"{LastSession | Project | Tasks | _GuiSession}": [[172, "    def _set_options(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.p": {"class": {"Project": {"<Project>": [[656, "class Project(_GuiSession):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession._set_project": {"param": {"self": {"LastSession": [[1001, "    def _set_project(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._del_from": {"var": {"recent_files": {"?": [[306, "            recent_files = self._serializer.load(recent_filename)"]]}}, "param": {"recent_files": {"[?]": [[286, "    def _del_from_recent(self, filename, recent_files=None, save=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._active_tab": {"var": {"command": {"?": [[45, "        command = notebook.tab(notebook.select(), \"text\").lower()"], [47, "            command = toolsbook.tab(toolsbook.select(), \"text\").lower()"]]}}, "param": {"self": {"_GuiSession": [[40, "    def _active_tab(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project": {"var": {"loaded": {"None": [[747, "        loaded = self._load()"]]}, "save_as": {"bool": [[825, "        save_as = save_as or self._filename is None"]]}}, "func": {"load": {"Project -> None": [[730, "    def load(self, *args, filename=None):  # pylint:disable=unused-argument"]]}, "_modified_callback": {"Project -> None": [[717, "    def _modified_callback(self, *args):  # pylint:disable=unused-argument"]]}, "filename": {"Project -> None": [[675, "    def filename(self):"]]}, "reload": {"Project -> None": [[787, "    def reload(self, *args):  # pylint:disable=unused-argument"]]}, "confirm_close": {"Project -> None": [[885, "    def confirm_close(self):"]]}, "close": {"Project -> None": [[866, "    def close(self, *args):  # pylint:disable=unused-argument"]]}, "new": {"Project -> None": [[836, "    def new(self, *args):  # pylint:disable=unused-argument"]]}, "save": {"Project -> None": [[811, "    def save(self, *args, save_as=False):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_gui_state_for_": {"param": {"command": {"?": [[218, "    def _set_gui_state_for_command(self, command, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession": {"func": {"_check_valid_choices": {"Project -> None / _GuiSession -> None / LastSession -> None / Tasks -> None": [[351, "    def _check_valid_choices(self):"]]}, "_save": {"(_GuiSession, None) -> None / (Project, None) -> None / (Tasks, None) -> None": [[398, "    def _save(self, command=None):"]]}, "_reset_modified_var": {"(Tasks, _GuiSession -> None) -> None / (_GuiSession, None) -> None / (Project, None) -> None / (Tasks, None) -> None": [[240, "    def _reset_modified_var(self, command=None):"]]}, "_selected_to_choices": {"_GuiSession -> dict": [[90, "    def _selected_to_choices(self):"]]}, "_active_tab": {"_GuiSession -> None": [[40, "    def _active_tab(self):"]]}, "_file_exists": {"_GuiSession -> None": [[57, "    def _file_exists(self):"]]}, "_modified_vars": {"_GuiSession -> None": [[52, "    def _modified_vars(self):"]]}, "_load": {"Project -> None / _GuiSession -> None / LastSession -> None / Tasks -> None": [[334, "    def _load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._update_root_tit": {"param": {"self": {"Project": [[804, "    def _update_root_title(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._update_root_titl": {"var": {"text": {"{_GuiSession -> str | str}": [[807, "        text = \"<untitled project>\" if self._basename is None else self._basename"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._dirnam": {"param": {"self": {"?": [[72, "    def _dirname(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Proje": {"func": {"cli_options": {"Project -> _GuiSession -> dict": [[680, "    def cli_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.l": {"var": {"command": {"None": [[754, "        command = self._get_lone_task()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.clo": {"param": {"self": {"Project": [[866, "    def close(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._cli_option": {"param": {"self": {"_GuiSession": [[62, "    def _cli_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.new": {"var": {"cfgfile": {"?": [[851, "        cfgfile = self._file_handler(\"save\","]]}}, "param": {"self": {"Project": [[836, "    def new(self, *args):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._default_option": {"param": {"self": {"_GuiSession": [[67, "    def _default_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSessio": {"func": {"_basename": {"_GuiSession -> str": [[78, "    def _basename(self):"]]}, "_current_gui_state": {"(_GuiSession, None) -> None / (Tasks, None) -> None / (Project, None) -> None / (LastSession, None) -> None": [[111, "    def _current_gui_state(self, command=None):"]]}, "_set_filename": {"(_GuiSession, None, str) -> None / (Tasks, str, str) -> None / (Project, ?, str) -> None": [[126, "    def _set_filename(self, filename=None, sess_type=\"project\"):"]]}, "_dirname": {"_GuiSession -> str": [[72, "    def _dirname(self):"]]}, "__init__": {"? -> ?": [[25, "    def __init__(self, config, file_handler=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project._task": {"param": {"self": {"Project": [[690, "    def _tasks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession.__init": {"param": {"file_handler": {"None": [[25, "    def __init__(self, config, file_handler=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession._enabled": {"param": {"self": {"LastSession": [[934, "    def _enabled(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._is_projec": {"var": {"retval": {"int": [[440, "        retval = False if not self._tasks else all(v.get(\"is_project\", False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._del_from_recent": {"var": {"idx": {"None": [[309, "            idx = filenames.index(filename)"]]}, "filenames": {"[?]": [[307, "        filenames = [recent[0] for recent in recent_files]"]]}}, "param": {"self": {"{Project | Tasks | _GuiSession}": [[286, "    def _del_from_recent(self, filename, recent_files=None, save=False):"]]}, "save": {"?": [[286, "    def _del_from_recent(self, filename, recent_files=None, save=False):"]]}, "filename": {"{Tasks -> None | str}": [[286, "    def _del_from_recent(self, filename, recent_files=None, save=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.filenam": {"param": {"self": {"Project": [[675, "    def filename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._del_fro": {"var": {"recent_filename": {"str": [[300, "        recent_filename = os.path.join(self._config.pathcache, \".recent.json\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.__init__": {"param": {"self": {"LastSession": [[917, "    def __init__(self, config):"]]}, "config": {"Config": [[917, "    def __init__(self, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.to_dic": {"var": {"opts": {"None": [[964, "        opts = self._current_gui_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._save": {"param": {"command": {"None": [[398, "    def _save(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.lo": {"var": {"needs_update": {"bool": [[997, "        needs_update = self._set_project()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSessio": {"func": {"_enabled": {"LastSession -> bool": [[934, "    def _enabled(self):"]]}, "__init__": {"? -> ?": [[917, "    def __init__(self, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._add_to_recen": {"var": {"ftype": {"{None | _GuiSession -> None | _GuiSession -> None | str}": [[280, "        ftype = \"project\" if command is None else command"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._load": {"var": {"retval": {"?": [[345, "            retval = True"], [348, "            retval = False"]]}}, "param": {"self": {"{LastSession | Project | Tasks | _GuiSession}": [[334, "    def _load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._project_filename": {"var": {"val": {"<list>": [[451, "        for val in self._tasks.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession.__init__": {"param": {"self": {"_GuiSession": [[25, "    def __init__(self, config, file_handler=None):"]]}, "config": {"?": [[25, "    def __init__(self, config, file_handler=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._update_legacy_task": {"var": {"new_filename": {"str": [[542, "        new_filename = \"{}.fst\".format(fname)"]]}, "fname": {"str": [[537, "        fname, ext = os.path.splitext(filename)"]]}}, "param": {"self": {"Tasks": [[519, "    def _update_legacy_task(self, filename):"]]}, "filename": {"?": [[519, "    def _update_legacy_task(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._check_valid_choices": {"var": {"command": {"?": [[354, "        for command, options in self._selected_to_choices.items():"]]}, "option": {"?": [[355, "            for option, data in options.items():"]]}, "val": {"str": [[360, "                    val = \" \".join([v for v in data[\"value\"].split() if v in data[\"choices\"]])"], [362, "                    val = \"\""], [363, "                val = self._default_options[command][option] if not val else val"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.set_modified_callback": {"param": {"self": {"_GuiSession -> None": [[704, "    def set_modified_callback(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._current_gui_stat": {"param": {"self": {"{LastSession | Project | Tasks | _GuiSession}": [[111, "    def _current_gui_state(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._modified_var": {"param": {"self": {"_GuiSession": [[52, "    def _modified_vars(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.__init__": {"param": {"self": {"Project": [[670, "    def __init__(self, config, file_handler):"]]}, "config": {"Config": [[670, "    def __init__(self, config, file_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._selected_t": {"var": {"valid_choices": {"dict": [[93, "        valid_choices = {cmd: {opt: dict(choices=val[\"cpanel_option\"].choices,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks.load": {"var": {"is_legacy": {"bool": [[482, "        is_legacy = (not self._is_project and"]]}, "sess_type": {"str": [[480, "        sess_type = \"all\" if current_tab else \"task\""]]}, "filename_set": {"None": [[489, "        filename_set = self._set_filename(filename, sess_type=sess_type)"]]}, "filename": {"str": [[487, "            filename = self._update_legacy_task(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.confirm_close": {"var": {"confirmtxt": {"str": [[895, "        confirmtxt = \"You have unsaved changes.\\n\\nAre you sure you want to close the project?\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiS": {"func": {"_get_options_for_command": {"(_GuiSession, None) -> dict / (_GuiSession, ?) -> dict / (Tasks, {None | _GuiSession -> None | _GuiSession -> None}) -> dict / (LastSession, None) -> dict / (Project, None) -> dict": [[194, "    def _get_options_for_command(self, command):"]]}, "_set_options": {"(_GuiSession, None) -> None / (Tasks, {None | _GuiSession -> None | _GuiSession -> None}) -> None / (LastSession, None) -> None / (Project, None) -> None": [[172, "    def _set_options(self, command=None):"]]}, "_save_as_to_filename": {"(_GuiSession, ?) -> None / (Project, str) -> None / (Tasks, str) -> None": [[369, "    def _save_as_to_filename(self, session_type):"]]}, "_default_options": {"_GuiSession -> None": [[67, "    def _default_options(self):"]]}, "_set_gui_state_for_command": {"(_GuiSession, ?, ?) -> None / (Tasks, ?, ?) -> None / (LastSession, ?, ?) -> None / (Project, ?, ?) -> None": [[218, "    def _set_gui_state_for_command(self, command, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks": {"var": {"loaded": {"None": [[492, "        loaded = self._load()"]]}}, "func": {"load": {"Tasks -> None": [[456, "    def load(self, *args,  # pylint:disable=unused-argument"]]}, "reload": {"Tasks -> None": [[578, "    def reload(self):"]]}, "clear": {"Tasks -> None": [[574, "    def clear(self):"]]}, "_project_filename": {"Tasks -> None": [[445, "    def _project_filename(self):"]]}, "__init__": {"? -> ?": [[433, "    def __init__(self, config, file_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._file_exist": {"param": {"self": {"_GuiSession": [[57, "    def _file_exists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession.to_dict": {"param": {"self": {"LastSession": [[954, "    def to_dict(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._is_project": {"param": {"self": {"Tasks": [[438, "    def _is_project(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Proj": {"param": {"set_modified_callback": {"Project": [[704, "    def set_modified_callback(self):"]]}}, "func": {"set_modified_callback": {"Project -> None": [[704, "    def set_modified_callback(self):"]]}, "_handoff_legacy_task": {"Project -> None": [[767, "    def _handoff_legacy_task(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Project.set_default_option": {"param": {"self": {"Project": [[694, "    def set_default_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.Tasks._project_fil": {"var": {"fname": {"None": [[447, "        fname = None"]], "?": [[452, "            fname = val[\"filename\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._set_filename": {"var": {"msg": {"str": [[159, "            msg = \"File does not exist: '{}'\".format(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project.LastSession._set_projec": {"var": {"retval": {"bool": [[1016, "            retval = self._cli_options != self._config.project.cli_options"]], "?": [[1012, "            retval = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.project._GuiSession._stored_tab_nam": {"param": {"self": {"_GuiSession": [[83, "    def _stored_tab_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.projec": {"class": {"LastSession": {"<LastSession>": [[903, "class LastSession(_GuiSession):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/display.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.set_wrapper_var_trac": {"param": {"self": {"DisplayNotebook": [[34, "    def set_wrapper_var_trace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.extract_tabs": {"var": {"helptext": {"str": [[70, "        helptext = (\"Updates preview from output every 5 \""]]}}, "param": {"command": {"str": [[67, "    def extract_tabs(self, command=\"extract\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.add_": {"var": {"frame": {"?": [[57, "        frame = ttk.Frame(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.command_display": {"var": {"build_tabs": {"?": [[64, "        build_tabs = getattr(self, \"{}_tabs\".format(command))"]]}}, "param": {"self": {"DisplayNotebook": [[61, "    def command_display(self, command):"]]}, "command": {"?": [[61, "    def command_display(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.remove_tab": {"param": {"self": {"DisplayNotebook": [[94, "    def remove_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.remove_tabs": {"var": {"child_name": {"?": [[100, "            child_name = child.split(\".\")[-1]"]]}, "child_object": {"?": [[101, "            child_object = self.children[child_name]  # returns the OptionalDisplayPage object"]]}, "child": {"?": [[96, "        for child in self.tabs():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.d": {"class": {"DisplayNotebook": {"<DisplayNotebook>": [[18, "class DisplayNotebook(ttk.Notebook):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.__init__": {"param": {"self": {"DisplayNotebook": [[21, "    def __init__(self, parent):"]]}, "parent": {"?": [[21, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.add_static_tab": {"param": {"self": {"DisplayNotebook": [[40, "    def add_static_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook": {"func": {"add_frame": {"DisplayNotebook -> None": [[54, "    def add_frame(self):"]]}, "extract_tabs": {"(DisplayNotebook, str) -> None": [[67, "    def extract_tabs(self, command=\"extract\"):"]]}, "command_display": {"(DisplayNotebook, ?) -> None": [[61, "    def command_display(self, command):"]]}, "convert_tabs": {"DisplayNotebook -> None": [[87, "    def convert_tabs(self):"]]}, "remove_tabs": {"DisplayNotebook -> None": [[94, "    def remove_tabs(self):"]]}, "train_tabs": {"DisplayNotebook -> None": [[75, "    def train_tabs(self):"]]}, "set_wrapper_var_trace": {"DisplayNotebook -> None": [[34, "    def set_wrapper_var_trace(self):"]]}, "add_static_tabs": {"DisplayNotebook -> None": [[40, "    def add_static_tabs(self):"]]}, "__init__": {"? -> ?": [[21, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.extract_tab": {"param": {"self": {"DisplayNotebook": [[67, "    def extract_tabs(self, command=\"extract\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display": {"var": {"logger": {"?": [[15, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.update_displaybook": {"var": {"command": {"?": [[107, "        command = self.wrapper_var.get()"]]}}, "param": {"self": {"DisplayNotebook": [[105, "    def update_displaybook(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.train_tab": {"param": {"self": {"DisplayNotebook": [[75, "    def train_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.add_static_tabs": {"var": {"frame": {"None": [[51, "                frame = self.add_frame()"]], "Analysis": [[49, "                frame = Analysis(self, tab, helptext)"]]}, "helptext": {"dict": [[47, "                helptext = {\"stats\":"]]}, "tab": {"str": [[43, "        for tab in (\"job queue\", \"analysis\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.train_tabs": {"var": {"helptext": {"str": [[80, "                helptext = \"Graph showing Loss vs Iterations\""], [83, "                helptext = \"Training preview. Updated on every save iteration\""]]}, "tab": {"str": [[78, "        for tab in (\"graph\", \"preview\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayN": {"func": {"update_displaybook": {"DisplayNotebook -> None": [[105, "    def update_displaybook(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.convert_tab": {"param": {"self": {"DisplayNotebook": [[87, "    def convert_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.add_fram": {"param": {"self": {"DisplayNotebook": [[54, "    def add_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display.DisplayNotebook.__ini": {"var": {"tk_vars": {"?": [[25, "        tk_vars = get_config().tk_vars"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/lib/model/nn_blocks_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn_blocks_test": {"var": {"_VALUES": {"list": [[19, "_VALUES = list(product([True, False], repeat=len(_PARAMS)))"]]}, "_PARAMS": {"[str]": [[18, "_PARAMS = [\"use_icnr_init\", \"use_convaware_init\", \"use_reflect_padding\"]"]]}, "_IDS": {"[str]": [[20, "_IDS = [\"{}[{}]\".format(\"|\".join([_PARAMS[idx] for idx, b in enumerate(v) if b]),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn_blocks_test.block_test": {"var": {"i": {"?": [[34, "    for i, var_e in enumerate(input_data_shape):"]]}, "model_config": {"?": [[52, "    model_config = model.get_config()"]]}, "model": {"?": [[47, "    model = Model(inp, outp)"]]}, "inp": {"?": [[42, "    inp = Input(shape=input_shape[1:], dtype=input_dtype)"]]}, "recovered_model": {"?": [[53, "    recovered_model = model.__class__.from_config(model_config)"]]}}, "param": {"layer_func": {"{(NNBlocks, ?, ?, ?, (int, int), str) -> None / (NNBlocks, ?, ?, int, (int, int), str) -> None / (NNBlocks, ?, int, int, (int, int), str) -> None | (NNBlocks, ?, ?, int, int) -> None | (NNBlocks, ?, ?, int, int, str, bool, bool) -> None | (NNBlocks, ?, ?, int, str) -> None | (NNBlocks, ?, ?, int, str, bool, bool, int) -> None}": [[24, "def block_test(layer_func, kwargs={}, input_shape=None):"]]}, "kwargs": {"dict": [[24, "def block_test(layer_func, kwargs={}, input_shape=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn_blocks_test.test_block": {"var": {"cls_": {"NNBlocks": [[67, "    cls_ = NNBlocks(use_icnr_init=use_icnr_init,"]]}}, "param": {"use_icnr_init": {"?": [[65, "def test_blocks(use_icnr_init, use_convaware_init, use_reflect_padding):"]]}, "use_reflect_padding": {"?": [[65, "def test_blocks(use_icnr_init, use_convaware_init, use_reflect_padding):"]]}, "use_convaware_init": {"?": [[65, "def test_blocks(use_icnr_init, use_convaware_init, use_reflect_padding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn": {"func": {"block_test": {"((NNBlocks, ?, ?, int, str) -> None, dict, None) -> None / ((NNBlocks, ?, ?, int, str, bool, bool, int) -> None, dict, None) -> None / ((NNBlocks, ?, ?, int, int) -> None, dict, None) -> None / ((NNBlocks, ?, ?, ?, (int, int), str) -> None / (NNBlocks, ?, ?, int, (int, int), str) -> None / (NNBlocks, ?, int, int, (int, int), str) -> None, dict, None) -> None / (?, dict, None) -> None / ((NNBlocks, ?, ?, int, int, str, bool, bool) -> None, dict, None) -> None": [[24, "def block_test(layer_func, kwargs={}, input_shape=None):"]]}, "test_blocks": {"(?, ?, ?) -> None": [[65, "def test_blocks(use_icnr_init, use_convaware_init, use_reflect_padding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn_blocks_test.block_": {"var": {"weights": {"?": [[55, "        weights = model.get_weights()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn_blocks_test.block_tes": {"var": {"outp": {"None": [[43, "    outp = layer_func(inp, **kwargs)"]]}, "actual_output": {"?": [[49, "    actual_output = model.predict(input_data)"]]}, "expected_output_dtype": {"?": [[39, "    expected_output_dtype = input_dtype"]]}, "input_data": {"int": [[37, "    input_data = (10 * np.random.random(input_data_shape))"]], "?": [[38, "    input_data = input_data.astype(input_dtype)"]]}, "_output": {"?": [[57, "        _output = recovered_model.predict(input_data)"]]}, "input_dtype": {"?": [[32, "    input_dtype = K.floatx()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.nn_blocks_test.block": {"var": {"input_data_shape": {"list": [[33, "    input_data_shape = list(input_shape)"]]}}, "param": {"input_shape": {"None": [[24, "def block_test(layer_func, kwargs={}, input_shape=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/align/fan.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fa": {"class": {"Align": {"<Align>": [[15, "class Align(Aligner):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.init": {"var": {"model_kwargs": {"dict": [[32, "        model_kwargs = dict(custom_objects={'TorchBatchNorm2D': TorchBatchNorm2D})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.__init__": {"param": {"self": {"Align": [[17, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_pts_from_predict": {"var": {"max_clipped": {"?": [[146, "        max_clipped = np.maximum(indices - 1, 0)"]]}, "subpixel_landmarks": {"?": [[141, "        subpixel_landmarks = np.ones((num_images, num_landmarks, 3), dtype='float32')"]]}, "image_slice": {"?": [[138, "        image_slice = np.repeat(np.arange(num_images)[:, None], num_landmarks, axis=1)"]]}, "num_images": {"?": [[137, "        num_images, num_landmarks, height, width = batch[\"prediction\"].shape"]]}, "landmark_slice": {"?": [[139, "        landmark_slice = np.repeat(np.arange(num_landmarks)[None, :], num_images, axis=0)"]]}, "indices": {"?": [[144, "        indices = np.array(np.unravel_index(flat_indices, (height, width)))"]]}, "min_clipped": {"?": [[145, "        min_clipped = np.minimum(indices + 1, height - 1)"]]}}, "param": {"self": {"Align": [[134, "    def get_pts_from_predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.__init__": {"param": {"epsilon": {"float": [[164, "    def __init__(self, axis=-1, momentum=0.99, epsilon=1e-3, **kwargs):"]]}, "self": {"TorchBatchNorm2D": [[164, "    def __init__(self, axis=-1, momentum=0.99, epsilon=1e-3, **kwargs):"]]}, "momentum": {"float": [[164, "    def __init__(self, axis=-1, momentum=0.99, epsilon=1e-3, **kwargs):"]]}, "axis": {"int": [[164, "    def __init__(self, axis=-1, momentum=0.99, epsilon=1e-3, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.init_m": {"var": {"placeholder_shape": {"(?, int, int, int)": [[39, "        placeholder_shape = (self.batchsize, 3, self.input_size, self.input_size)"]]}, "placeholder": {"?": [[40, "        placeholder = np.zeros(placeholder_shape, dtype=\"float32\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_center_scal": {"var": {"index": {"?": [[57, "        for index, face in enumerate(detected_faces):"]]}, "x_center": {"float": [[58, "            x_center = (face.left + face.right) / 2.0"]]}, "y_center": {"float": [[59, "            y_center = (face.top + face.bottom) / 2.0 - face.h * 0.12"]]}}, "param": {"detected_faces": {"?": [[53, "    def get_center_scale(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Alig": {"var": {"transform_matrix": {"?": [[108, "        transform_matrix = np.eye(3, dtype='float32')"], [109, "        transform_matrix = np.repeat(transform_matrix[None, :], num_landmarks, axis=0)"], [110, "        transform_matrix = np.repeat(transform_matrix[None, :, :], num_images, axis=0)"]]}}, "func": {"process_input": {"(Align, ?) -> None": [[43, "    def process_input(self, batch):"]]}, "init_model": {"Align -> None": [[30, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self, **kwargs):"]]}, "transform": {"(?, ?, ?) -> None": [[104, "    def transform(points, center_scales, resolutions):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.predict": {"param": {"self": {"Align": [[122, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_pts_from_pr": {"var": {"flat_indices": {"?": [[143, "        flat_indices = batch[\"prediction\"].reshape(num_images, num_landmarks, -1).argmax(-1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.process_inpu": {"param": {"batch": {"?": [[43, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.process_output": {"param": {"self": {"Align": [[129, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.buil": {"var": {"dim": {"?": [[179, "        dim = input_shape[self.axis]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.build": {"var": {"shape": {"?": [[185, "        shape = (dim,)"]]}}, "param": {"self": {"TorchBatchNorm2D": [[178, "    def build(self, input_shape):"]]}, "input_shape": {"?": [[178, "    def build(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan": {"class": {"TorchBatchNorm2D": {"<TorchBatchNorm2D>": [[161, "class TorchBatchNorm2D(keras.engine.base_layer.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.process_outpu": {"param": {"batch": {"?": [[129, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.init_mod": {"param": {"self": {"Align": [[30, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.cro": {"var": {"batch_shape": {"?": [[71, "        batch_shape = batch[\"center_scale\"].shape[:2]"]]}, "interp": {"?": [[98, "            interp = cv2.INTER_CUBIC if new_dim[0] < self.input_size else cv2.INTER_AREA"]]}, "upper_left": {"None": [[76, "        upper_left = self.transform(matrix_ones, batch[\"center_scale\"], resolutions)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Ali": {"func": {"get_center_scale": {"(Align, ?) -> None": [[53, "    def get_center_scale(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.crop": {"var": {"old_y": {"?": [[95, "            old_y = slice(max(0, top_left_height), min(bottom_right_height, height))"]]}, "matrix_ones": {"?": [[73, "        matrix_ones = np.ones(batch_shape + (3,), dtype='float32')"]]}, "old_x": {"?": [[94, "            old_x = slice(max(0, top_left_width), min(bottom_right_width, width))"]]}, "new_x": {"?": [[91, "            new_x = slice(max(0, -top_left_width), min(bottom_right_width, width) - top_left_width)"]]}, "sizes": {"(int, int)": [[70, "        sizes = (self.input_size, self.input_size)"]]}, "new_img": {"?": [[89, "            new_img = np.empty(new_dim, dtype=np.uint8)"]]}, "bot_right": {"None": [[77, "        bot_right = self.transform(matrix_size, batch[\"center_scale\"], resolutions)"]]}, "new_dim": {"(?, ?, int)": [[86, "            new_dim = (bottom_right_height - top_left_height,"]]}, "height": {"?": [[82, "            height, width = image.shape[:2]"]]}, "channels": {"int": [[83, "            channels = 3 if image.ndim > 2 else 1"]]}, "new_images": {"[?]": [[80, "        new_images = []"]]}, "matrix_size": {"?": [[74, "        matrix_size = np.full(batch_shape + (3,), self.input_size, dtype='float32')"]]}, "bottom_right_width": {"?": [[84, "            bottom_right_width, bottom_right_height = bottom_right[0].astype('int32')"]]}, "resolutions": {"?": [[72, "        resolutions = np.full(batch_shape, self.input_size, dtype='float32')"]]}, "new_y": {"?": [[92, "            new_y = slice(max(0, -top_left_height),"]]}}, "param": {"self": {"Align": [[67, "    def crop(self, batch):  # pylint:disable=too-many-locals"]]}, "batch": {"?": [[67, "    def crop(self, batch):  # pylint:disable=too-many-locals"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.get_config": {"param": {"self": {"TorchBatchNorm2D": [[227, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.transform": {"var": {"retval": {"?": [[118, "        retval = new_points[:, :, :2].astype('float32')"]]}, "new_points": {"?": [[117, "        new_points = np.einsum('abij, abj -> abi', transform_matrix, points, optimize='greedy')"]]}, "translations": {"float": [[112, "        translations = center_scales[..., 2:3] * -0.5 + center_scales[..., :2]"]]}, "scales": {"?": [[111, "        scales = center_scales[:, :, 2] / resolutions"]]}}, "param": {"resolutions": {"?": [[104, "    def transform(points, center_scales, resolutions):"]]}, "points": {"?": [[104, "    def transform(points, center_scales, resolutions):"]]}, "center_scales": {"?": [[104, "    def transform(points, center_scales, resolutions):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.cr": {"var": {"top_left_width": {"?": [[85, "            top_left_width, top_left_height = top_left[0].astype('int32')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.transfor": {"var": {"num_images": {"?": [[107, "        num_images, num_landmarks = points.shape[:2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_pts_from_predi": {"param": {"batch": {"?": [[134, "    def get_pts_from_predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.get": {"var": {"base_config": {"?": [[231, "        base_config = super(TorchBatchNorm2D, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.__init": {"var": {"model_filename": {"str": [[19, "        model_filename = \"face-alignment-network_2d4_keras_v1.h5\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_center_sca": {"param": {"self": {"Align": [[53, "    def get_center_scale(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align": {"func": {"predict": {"(Align, ?) -> None": [[122, "    def predict(self, batch):"]]}, "process_output": {"(Align, ?) -> None": [[129, "    def process_output(self, batch):"]]}, "crop": {"(Align, ?) -> [?]": [[67, "    def crop(self, batch):  # pylint:disable=too-many-locals"]]}, "get_pts_from_predict": {"(Align, ?) -> None": [[134, "    def get_pts_from_predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.ca": {"param": {"self": {"TorchBatchNorm2D": [[206, "    def call(self, inputs, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.get_": {"var": {"config": {"dict": [[228, "        config = {'axis': self.axis,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D.call": {"var": {"broadcast_gamma": {"?": [[215, "        broadcast_gamma = K.reshape(self.gamma, broadcast_shape)"]]}, "broadcast_shape": {"?": [[209, "        broadcast_shape = [1] * len(input_shape)"]]}, "invstd": {"?": [[217, "        invstd = ("]]}, "broadcast_moving_variance": {"?": [[213, "        broadcast_moving_variance = K.reshape(self.moving_variance,"]]}, "input_shape": {"?": [[207, "        input_shape = K.int_shape(inputs)"]]}, "broadcast_moving_mean": {"?": [[212, "        broadcast_moving_mean = K.reshape(self.moving_mean, broadcast_shape)"]]}, "broadcast_beta": {"?": [[216, "        broadcast_beta = K.reshape(self.beta, broadcast_shape)"]]}}, "param": {"inputs": {"None": [[206, "    def call(self, inputs, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.TorchBatchNorm2D": {"param": {"call": {"?": [[206, "    def call(self, inputs, **kwargs):"]]}}, "func": {"get_config": {"TorchBatchNorm2D -> dict": [[227, "    def get_config(self):"]]}, "call": {"(TorchBatchNorm2D, ?) -> None": [[206, "    def call(self, inputs, **kwargs):"]]}, "build": {"(TorchBatchNorm2D, ?) -> None": [[178, "    def build(self, input_shape):"]]}, "__init__": {"? -> ?": [[164, "    def __init__(self, axis=-1, momentum=0.99, epsilon=1e-3, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.__in": {"var": {"git_model_id": {"int": [[18, "        git_model_id = 9"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_center_": {"var": {"scale": {"float": [[60, "            scale = (face.w + face.h) * self.reference_scale"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.g": {"var": {"center_scale": {"?": [[56, "        center_scale = np.empty((len(detected_faces), 68, 3), dtype='float32')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.predi": {"param": {"batch": {"?": [[122, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.get_pts_from_predic": {"var": {"x_subpixel_shift": {"?": [[151, "        x_subpixel_shift = batch[\"prediction\"][offsets[0]] - batch[\"prediction\"][offsets[1]]"]]}, "y_subpixel_shift": {"?": [[152, "        y_subpixel_shift = batch[\"prediction\"][offsets[2]] - batch[\"prediction\"][offsets[3]]"]]}, "resolution": {"?": [[140, "        resolution = np.full((num_images, num_landmarks), 64, dtype='int32')"]]}, "offsets": {"[(?, ?, ?, ?)]": [[147, "        offsets = [(image_slice, landmark_slice, indices[0], min_clipped[1]),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align.fan.Align.process_input": {"var": {"faces": {"[?]": [[47, "        faces = self.crop(batch)"], [49, "        faces = self._normalize_faces(faces)"]]}}, "param": {"self": {"Align": [[43, "    def process_input(self, batch):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._bas": {"var": {"logger": {"?": [[9, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"get_config": {"(str, ?) -> FaceswapConfig -> dict / (str, None) -> FaceswapConfig -> dict / (?, None) -> FaceswapConfig -> dict": [[12, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustme": {"func": {"__init__": {"? -> ?": [[19, "    def __init__(self, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.set_config": {"var": {"section": {"str": [[28, "        section = \".\".join(self.__module__.split(\".\")[-2:])"]]}, "retval": {"FaceswapConfig -> dict": [[30, "            retval = get_config(section, configfile)"]], "?": [[33, "            retval = config.config_dict"]]}}, "param": {"self": {"{Adjustment | Color | Color | Color}": [[26, "    def set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.process": {"param": {"old_face": {"?": [[38, "    def process(self, old_face, new_face, raw_mask):"]]}, "new_face": {"?": [[38, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment": {"func": {"process": {"(Adjustment, ?, ?, ?) -> None": [[38, "    def process(self, old_face, new_face, raw_mask):"]]}, "run": {"(Adjustment, ?, ?, ?) -> None": [[42, "    def run(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.proce": {"param": {"raw_mask": {"?": [[38, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.set_": {"param": {"configfile": {"None": [[26, "    def set_config(self, configfile, config):"]]}, "config": {"None": [[26, "    def set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.get_conf": {"param": {"plugin_name": {"str": [[12, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.get_": {"param": {"configfile": {"None": [[12, "def get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.run": {"param": {"self": {"Adjustment": [[42, "    def run(self, old_face, new_face, raw_mask):"]]}, "old_face": {"?": [[42, "    def run(self, old_face, new_face, raw_mask):"]]}, "raw_mask": {"?": [[42, "    def run(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._ba": {"class": {"Adjustment": {"<Adjustment>": [[17, "class Adjustment():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.__init__": {"param": {"self": {"{Adjustment | Color | Color | Color}": [[19, "    def __init__(self, configfile=None, config=None):"]]}, "config": {"None": [[19, "    def __init__(self, configfile=None, config=None):"]]}, "configfile": {"None": [[19, "    def __init__(self, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustm": {"func": {"set_config": {"(Adjustment, ?, ?) -> FaceswapConfig -> dict / (Color, None, None) -> FaceswapConfig -> dict / (Adjustment, None, None) -> FaceswapConfig -> dict": [[26, "    def set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.ru": {"var": {"final_mask": {"?": [[49, "            final_mask = new_face[:, :, -1]"]]}, "reinsert_mask": {"bool": [[46, "        reinsert_mask = False"], [48, "            reinsert_mask = True"]]}, "new_face": {"None": [[51, "        new_face = self.process(old_face, new_face, raw_mask)"]], "?": [[50, "            new_face = new_face[:, :, :3]"], [52, "        new_face = np.clip(new_face, 0.0, 1.0)"], [55, "            new_face = np.concatenate((new_face, np.expand_dims(final_mask, axis=-1)), -1)"]]}}, "param": {"new_face": {"?": [[42, "    def run(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color._base.Adjustment.proc": {"param": {"self": {"Adjustment": [[38, "    def process(self, old_face, new_face, raw_mask):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/update_deps.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.update_deps": {"var": {"_LOGGER": {"None": [[9, "_LOGGER = None"]]}}, "func": {"output": {"str -> None": [[12, "def output(msg):"]]}, "main": {"None -> None": [[20, "def main(logger=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.update_deps.output": {"param": {"msg": {"str": [[12, "def output(msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.update_deps.main": {"var": {"update": {"Environment": [[26, "    update = Environment(logger=logger, updater=True)"]]}}, "param": {"logger": {"None": [[20, "def main(logger=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/umeyama.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.umeyama.umey": {"var": {"src_demean": {"?": [[85, "    src_demean = src - src_mean"]]}, "src_mean": {"?": [[81, "    src_mean = src.mean(axis=0)"]]}, "dst_demean": {"None": [[86, "    dst_demean = dst - dst_mean"]]}, "dst_mean": {"?": [[82, "    dst_mean = dst.mean(axis=0)"]]}}, "param": {"estimate_scale": {"bool": [[54, "def umeyama(src, estimate_scale, dst=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.umeyama.umeyama": {"var": {"A": {"?": [[89, "    A = np.dot(dst_demean.T, src_demean) / num"]]}, "dim": {"?": [[78, "    dim = src.shape[1]"]]}, "d": {"?": [[92, "    d = np.ones((dim,), dtype=np.double)"]]}, "dst": {"?": [[75, "        dst = np.stack([MEAN_FACE_X, MEAN_FACE_Y], axis=1)"]]}, "s": {"?": [[108, "            s = d[dim - 1]"]]}, "num": {"?": [[77, "    num = src.shape[0]"]]}, "U": {"?": [[98, "    U, S, V = np.linalg.svd(A)"]]}, "T": {"?": [[96, "    T = np.eye(dim + 1, dtype=np.double)"]]}}, "param": {"src": {"?": [[54, "def umeyama(src, estimate_scale, dst=None):"]]}, "dst": {"None": [[54, "def umeyama(src, estimate_scale, dst=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.umeyama.umeyam": {"var": {"scale": {"float": [[117, "        scale = 1.0 / src_demean.var(axis=0).sum() * np.dot(S, d)"], [119, "        scale = 1.0"]]}, "rank": {"?": [[101, "    rank = np.linalg.matrix_rank(A)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"func": {"umeyama": {"(?, ?, None) -> None / (?, bool, None) -> None": [[54, "def umeyama(src, estimate_scale, dst=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.umeyama": {"var": {"MEAN_FACE_Y": {"?": [[43, "MEAN_FACE_Y = np.array(["]]}, "MEAN_FACE_X": {"?": [[33, "MEAN_FACE_X = np.array(["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/utils.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._filenam": {"param": {"self": {"FileHandler": [[291, "    def _filename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.LongRunningTask": {"func": {"get_result": {"LongRunningTask -> None": [[1128, "    def get_result(self):"]]}, "run": {"LongRunningTask -> ?": [[1112, "    def run(self):"]]}, "complete": {"LongRunningTask -> None": [[1106, "    def complete(self):"]]}, "__init__": {"? -> ?": [[1090, "    def __init__(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=True,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.LongRunningTask.__init__": {"param": {"group": {"None": [[1091, "                 widget=None):"]]}, "target": {"None": [[1091, "                 widget=None):"]]}, "self": {"LongRunningTask": [[1091, "                 widget=None):"]]}, "args": {"()": [[1091, "                 widget=None):"]]}, "kwargs": {"None": [[1091, "                 widget=None):"]]}, "name": {"None": [[1091, "                 widget=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._create_placeholder": {"param": {"self": {"Images": [[622, "    def _create_placeholder(self, thumbnail_size):"]]}, "thumbnail_size": {"?": [[622, "    def _create_placeholder(self, thumbnail_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._open": {"param": {"self": {"FileHandler": [[271, "    def _open(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._sav": {"param": {"self": {"FileHandler": [[276, "    def _save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._filetypes": {"var": {"multi": {"[str]": [[170, "            multi = [\"{} Files\".format(key.title())]"]]}, "key": {"?": [[167, "        for key, val in filetypes.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.LongRunningTask.get_resu": {"var": {"retval": {"?": [[1148, "        retval = self._queue.get()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.tools_notebook": {"param": {"self": {"Config": [[835, "    def tools_notebook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.LongRunningTask.get_result": {"param": {"self": {"LongRunningTask": [[1128, "    def get_result(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_cursor_busy": {"var": {"widget": {"Config -> None": [[966, "        widget = self.root if widget is None else widget"]]}}, "param": {"self": {"Config": [[956, "    def set_cursor_busy(self, widget=None):"]]}, "widget": {"None": [[956, "    def set_cursor_busy(self, widget=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_default_option": {"param": {"self": {"Config": [[887, "    def set_default_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.previewoutput": {"param": {"self": {"Images": [[334, "    def previewoutput(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.modified_var": {"param": {"self": {"Config": [[840, "    def modified_vars(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_command_notebook": {"param": {"self": {"Config -> None": [[900, "    def set_command_notebook(self, notebook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Conf": {"func": {"_get_scaling": {"? -> float / FaceswapGui -> float / Preview -> float": [[874, "    def _get_scaling(root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_modified_tru": {"param": {"self": {"Config": [[936, "    def set_modified_true(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_active_tab_by_nam": {"param": {"self": {"Config": [[913, "    def set_active_tab_by_name(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.root": {"param": {"self": {"() -> dict": [[782, "    def root(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_images": {"param": {"image_path": {"str": [[440, "    def _get_images(image_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._context": {"param": {"self": {"FileHandler": [[176, "    def _contexts(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_context_handletyp": {"param": {"variable": {"None": [[252, "    def _set_context_handletype(self, command, action, variable):"]]}, "self": {"FileHandler": [[252, "    def _set_context_handletype(self, command, action, variable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_": {"var": {"pathicons": {"str": [[384, "        pathicons = os.path.join(PATHCACHE, \"icons\")"]]}, "icons": {"dict": [[383, "        icons = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._clear_image_cach": {"param": {"self": {"Images": [[428, "    def _clear_image_cache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.pathcach": {"param": {"self": {"Config": [[792, "    def pathcache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandl": {"func": {"_savedir": {"FileHandler -> None": [[286, "    def _savedir(self):"]]}, "_set_kwargs": {"(FileHandler, None, None, str, None, None, None) -> dict / (FileHandler, ?, ?, ?, ?, ?, None) -> dict / (FileHandler, None, None, ?, None, None, None) -> dict / (FileHandler, None, None, None, None, None, None) -> dict": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.previewtrain": {"param": {"self": {"Images": [[344, "    def previewtrain(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_newest_filenames": {"var": {"retval": {"[str]": [[519, "            retval = image_files"]], "{[?] | [str]}": [[521, "            retval = [fname for fname in image_files"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.LongRunningTask.complet": {"param": {"self": {"LongRunningTask": [[1106, "    def complete(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_imag": {"var": {"files": {"[str]": [[458, "        files = [os.path.join(image_path, f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.load_latest_prev": {"var": {"show_image": {"None": [[498, "        show_image = self._place_previews(frame_dims)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.statusbar": {"param": {"self": {"dict": [[823, "    def statusbar(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Image": {"func": {"_load_icons": {"() -> dict": [[371, "    def _load_icons():"]]}, "icons": {"Images -> dict": [[356, "    def icons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Imag": {"func": {"load_latest_preview": {"(Images, ?, ?) -> None / (Images, int, (?, ?)) -> None": [[463, "    def load_latest_preview(self, thumbnail_size, frame_dims):"]]}, "_place_previews": {"(Images, ?) -> None / (Images, (?, ?)) -> None": [[583, "    def _place_previews(self, frame_dims):"]]}, "set_faceswap_output_path": {"(Images, str) -> None / (Images, ?) -> None": [[395, "    def set_faceswap_output_path(self, location):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.user_config": {"param": {"self": {"Config": [[856, "    def user_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_images_to_cach": {"var": {"new_img": {"?": [[563, "                new_img = Image.new(\"RGB\", (thumbnail_size, thumbnail_size))"]]}, "num_images": {"int": [[548, "        num_images = (frame_dims[0] // thumbnail_size) * (frame_dims[1] // thumbnail_size)"]]}, "fname": {"?": [[555, "        for fname in show_files:"]]}, "samples": {"list": [[552, "        samples = list()"]], "?": [[570, "        samples = np.array(samples)"]]}}, "param": {"image_files": {"[str]": [[531, "    def _load_images_to_cache(self, image_files, frame_dims, thumbnail_size):"]]}, "frame_dims": {"(?, ?)": [[531, "    def _load_images_to_cache(self, image_files, frame_dims, thumbnail_size):"]]}, "self": {"Images": [[531, "    def _load_images_to_cache(self, image_files, frame_dims, thumbnail_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_cursor_defaul": {"var": {"widget": {"Config -> None": [[980, "        widget = self.root if widget is None else widget"]]}}, "param": {"widget": {"None": [[970, "    def set_cursor_default(self, widget=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.set_faceswap_output_path": {"param": {"self": {"Images": [[395, "    def set_faceswap_output_path(self, location):"]]}, "location": {"str": [[395, "    def set_faceswap_output_path(self, location):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_cursor_default": {"param": {"self": {"Config": [[970, "    def set_cursor_default(self, widget=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Ima": {"func": {"_get_current_size": {"(Images, ?) -> (?, ?) / (Images, str) -> (?, ?)": [[676, "    def _get_current_size(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._command_tab": {"param": {"self": {"Config": [[845, "    def _command_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._create_placeholde": {"var": {"draw": {"?": [[633, "        draw = ImageDraw.Draw(placeholder)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.user_config_dict": {"param": {"self": {"Config": [[861, "    def user_config_dict(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Confi": {"func": {"set_geometry": {"(Config, ?, ?, ?) -> None / (Config, int, int, ?) -> None": [[1047, "    def set_geometry(self, width, height, fullscreen=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._savedir": {"param": {"self": {"FileHandler": [[286, "    def _savedir(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_active_tab_by_name": {"var": {"tab_id": {"?": [[924, "            tab_id = self._command_tabs[name]"], [929, "            tab_id = self._tools_tabs[name]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._create_": {"var": {"placeholder": {"?": [[632, "        placeholder = Image.new(\"RGB\", (thumbnail_size, thumbnail_size))"], [635, "        placeholder = np.array(placeholder)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_images_to_": {"var": {"cache": {"?": [[573, "        cache = self._previewcache[\"images\"]"], [576, "            cache = samples[-num_images:]"], [579, "            cache = np.concatenate((cache, samples))[-num_images:]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler.__init__": {"var": {"action": {"None": [[127, "                 action=None, variable=None):"]]}}, "param": {"initialdir": {"None": [[127, "                 action=None, variable=None):"]]}, "variable": {"None": [[127, "                 action=None, variable=None):"]]}, "title": {"None": [[127, "                 action=None, variable=None):"]]}, "self": {"FileHandler": [[127, "                 action=None, variable=None):"]]}, "action": {"None": [[127, "                 action=None, variable=None):"]]}, "command": {"None": [[127, "                 action=None, variable=None):"]]}, "handletype": {"str": [[127, "                 action=None, variable=None):"]]}, "filetype": {"str": [[127, "                 action=None, variable=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.default_": {"var": {"font": {"?": [[869, "        font = self.user_config_dict[\"font\"]"], [870, "        font = self._default_font if font == \"default\" else font"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_default": {"param": {"self": {"FileHandler": [[202, "    def _set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._get_scaling": {"var": {"dpi": {"?": [[882, "        dpi = root.winfo_fpixels(\"1i\")"]]}}, "param": {"root": {"{FaceswapGui | Preview}": [[874, "    def _get_scaling(root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.cli_opt": {"param": {"self": {"Config": [[798, "    def cli_opts(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images": {"func": {"previewtrain": {"Images -> dict": [[344, "    def previewtrain(self):"]]}, "_create_placeholder": {"(Images, ?) -> None": [[622, "    def _create_placeholder(self, thumbnail_size):"]]}, "load_training_preview": {"Images -> ?": [[639, "    def load_training_preview(self):"]]}, "previewoutput": {"Images -> (None, ?)": [[334, "    def previewoutput(self):"]]}, "delete_preview": {"Images -> ?": [[408, "    def delete_preview(self):"]]}, "_clear_image_cache": {"Images -> None": [[428, "    def _clear_image_cache(self):"]]}, "__init__": {"? -> ?": [[319, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.load_latest": {"var": {"gui_preview": {"str": [[480, "        gui_preview = os.path.join(self._pathoutput, \".gui_preview.jpg\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._set_tk_var": {"var": {"display": {"?": [[990, "        display = tk.StringVar()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.tk_var": {"param": {"self": {"Config": [[803, "    def tk_vars(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.I": {"func": {"_get_newest_filenames": {"(Images, ?) -> [?] / (Images, [str]) -> [str]": [[505, "    def _get_newest_filenames(self, image_files):"]]}, "_load_images_to_cache": {"(Images, ?, ?, ?) -> None / (Images, [str], (?, ?), int) -> None / (Images, [str], ?, ?) -> None": [[531, "    def _load_images_to_cache(self, image_files, frame_dims, thumbnail_size):"]]}, "resize_image": {"(Images, ?, ?) -> None / (Images, str, (?, ?)) -> None / (Images, ?, None) -> None / (Images, ?, (?, ?)) -> None": [[701, "    def resize_image(self, name, frame_dims):"]]}, "_get_images": {"str -> [str] / None -> [str] / ? -> [str]": [[440, "    def _get_images(image_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.u": {"func": {"initialize_images": {"() -> None": [[60, "def initialize_images():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.C": {"param": {"_user_config": {"dict": [[782, "    def root(self):"]]}}, "func": {"refresh_config": {"Config -> None": [[952, "    def refresh_config(self):"]]}, "user_config_dict": {"Config -> FaceswapConfig -> dict": [[861, "    def user_config_dict(self):"]]}, "scaling_factor": {"Config -> None": [[787, "    def scaling_factor(self):"]]}, "user_config": {"Config -> Config": [[856, "    def user_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_current_size": {"var": {"img": {"?": [[694, "        img = self._previewtrain[name][1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_context_handletype": {"param": {"action": {"None": [[252, "    def _set_context_handletype(self, command, action, variable):"]]}, "command": {"None": [[252, "    def _set_context_handletype(self, command, action, variable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandle": {"func": {"_dir": {"FileHandler -> None": [[281, "    def _dir(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.__init__": {"param": {"self": {"Images": [[319, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils": {"var": {"PATHCACHE": {"str": [[20, "PATHCACHE = os.path.join(os.path.realpath(os.path.dirname(sys.argv[0])), \"lib\", \"gui\", \".cache\")"]]}, "logger": {"?": [[17, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}, "_CONFIG": {"Config": [[18, "_CONFIG = None"]]}, "_IMAGES": {"Images": [[19, "_IMAGES = None"]]}}, "class": {"FileHandler": {"<FileHandler>": [[84, "class FileHandler():  # pylint:disable=too-few-public-methods"]]}, "Config": {"<Config>": [[742, "class Config():"]]}}, "func": {"initialize_config": {"(?, ?, ?, ?) -> Config / (FaceswapGui, CliOptions, StatusBar, Session) -> Config / (Preview, None, None, None) -> Config": [[23, "def initialize_config(root, cli_opts, statusbar, session):"]]}, "get_config": {"() -> None": [[49, "def get_config():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_modified_true": {"var": {"tkvar": {"?": [[945, "        tkvar = self.modified_vars.get(command, None)"]]}}, "param": {"command": {"?": [[936, "    def set_modified_true(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._dir": {"param": {"self": {"FileHandler": [[281, "    def _dir(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_geometry": {"var": {"initial_dimensions": {"(?, ?)": [[1062, "            initial_dimensions = (self.root.winfo_screenwidth(), self.root.winfo_screenheight())"]], "(int, int)": [[1064, "            initial_dimensions = (round(width * self.scaling_factor),"]]}}, "param": {"width": {"int": [[1047, "    def set_geometry(self, width, height, fullscreen=False):"]]}, "self": {"Config": [[1047, "    def set_geometry(self, width, height, fullscreen=False):"]]}, "fullscreen": {"?": [[1047, "    def set_geometry(self, width, height, fullscreen=False):"]]}, "height": {"int": [[1047, "    def set_geometry(self, width, height, fullscreen=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._set_tk_vars": {"var": {"updatepreview": {"?": [[1014, "        updatepreview = tk.BooleanVar()"]]}, "generatecommand": {"?": [[1002, "        generatecommand = tk.StringVar()"]]}, "actioncommand": {"?": [[999, "        actioncommand = tk.StringVar()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.delete_preview": {"var": {"item": {"str": [[414, "        for item in os.listdir(self._pathpreview):"]]}, "fullitem": {"str": [[416, "                fullitem = os.path.join(self._pathpreview, item)"]]}, "fname": {"?": [[419, "        for fname in self._previewcache[\"filenames\"]:"]]}}, "param": {"self": {"Images": [[408, "    def delete_preview(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.__in": {"param": {"cli_opts": {"CliOptions": [[760, "    def __init__(self, root, cli_opts, statusbar, session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._filename_multi": {"param": {"self": {"FileHandler": [[296, "    def _filename_multi(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.project": {"param": {"self": {"Config": [[808, "    def project(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._get_": {"var": {"scaling": {"float": [[883, "        scaling = dpi / 72.0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_context_": {"var": {"handletype": {"?": [[265, "            handletype = self._contexts[command][variable][action]"], [267, "            handletype = self._contexts[command][action]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler": {"func": {"_set_context_handletype": {"(FileHandler, ?, ?, ?) -> None / (FileHandler, None, None, None) -> None / (FileHandler, ?, ?, None) -> None": [[252, "    def _set_context_handletype(self, command, action, variable):"]]}, "_save": {"FileHandler -> None": [[276, "    def _save(self):"]]}, "_filename": {"FileHandler -> None": [[291, "    def _filename(self):"]]}, "_savefilename": {"FileHandler -> None": [[301, "    def _savefilename(self):"]]}, "_open": {"FileHandler -> None": [[271, "    def _open(self):"]]}, "_nothing": {"() -> None": [[307, "    def _nothing():  # pylint: disable=useless-return"]]}, "_filename_multi": {"FileHandler -> None": [[296, "    def _filename_multi(self):"]]}, "__init__": {"? -> ?": [[126, "    def __init__(self, handletype, filetype, title=None, initialdir=None, command=None,"]]}, "_filetypes": {"FileHandler -> dict": [[139, "    def _filetypes(self):"]]}, "_contexts": {"FileHandler -> dict": [[176, "    def _contexts(self):"]]}, "_set_defaults": {"FileHandler -> dict": [[202, "    def _set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._place_previews": {"var": {"placeholder": {"?": [[613, "            placeholder = np.concatenate([np.expand_dims(self._previewcache[\"placeholder\"],"]]}, "remainder": {"?": [[610, "        remainder = (cols * rows) - num_images"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._tools_tab": {"param": {"self": {"Config": [[850, "    def _tools_tabs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_images_to_cache": {"var": {"scaling": {"int": [[558, "            scaling = thumbnail_size / max(width, height)"]]}, "width": {"?": [[557, "            width, height = img.size"]]}, "draw": {"?": [[567, "            draw = ImageDraw.Draw(img)"]]}, "start_idx": {"int": [[553, "        start_idx = len(image_files) - num_images if len(image_files) > num_images else 0"]]}, "img": {"?": [[556, "            img = Image.open(fname)"], [560, "            img = img.resize((int(width * scaling), int(height * scaling)))"], [566, "                img = new_img"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._set_tk_v": {"var": {"smoothgraph": {"?": [[1011, "        smoothgraph = tk.DoubleVar()"]]}, "analysis_folder": {"?": [[1017, "        analysis_folder = tk.StringVar()"]]}, "consoleclear": {"?": [[1005, "        consoleclear = tk.BooleanVar()"]]}, "istraining": {"?": [[996, "        istraining = tk.BooleanVar()"]]}, "runningtask": {"?": [[993, "        runningtask = tk.BooleanVar()"]]}, "refreshgraph": {"?": [[1008, "        refreshgraph = tk.BooleanVar()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_current_siz": {"param": {"self": {"Images": [[676, "    def _get_current_size(self, name):"]]}, "name": {"str": [[676, "    def _get_current_size(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_kwarg": {"param": {"self": {"FileHandler": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_default_options": {"var": {"default": {"?": [[895, "        default = self.cli_opts.get_option_values()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_": {"var": {"defaults": {"dict": [[211, "        defaults = {key: val[0][1].replace(\"*\", \"\")"]]}, "kwargs": {"dict": [[230, "        kwargs = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_root_tit": {"param": {"self": {"Config": [[1033, "    def set_root_title(self, text=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._filetyp": {"var": {"all_files": {"(str, str)": [[141, "        all_files = (\"All files\", \"*.*\")"]]}}, "param": {"self": {"FileHandler": [[139, "    def _filetypes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.default_option": {"param": {"self": {"Config": [[818, "    def default_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.default_font": {"param": {"self": {"Config": [[866, "    def default_font(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.initialize_config": {"param": {"statusbar": {"StatusBar": [[23, "def initialize_config(root, cli_opts, statusbar, session):"]]}, "session": {"Session": [[23, "def initialize_config(root, cli_opts, statusbar, session):"]]}, "root": {"{FaceswapGui | Preview}": [[23, "def initialize_config(root, cli_opts, statusbar, session):"]]}, "cli_opts": {"CliOptions": [[23, "def initialize_config(root, cli_opts, statusbar, session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.load_training_preview": {"var": {"image_files": {"[str]": [[646, "        image_files = self._get_images(self._pathpreview)"]]}, "size": {"(?, ?)": [[659, "                size = self._get_current_size(name)"]]}, "modified": {"int": [[653, "            modified = os.path.getmtime(img) if modified is None else modified"]], "None": [[647, "        modified = None"]]}, "img": {"str": [[652, "        for img in image_files:"]]}, "name": {"str": [[654, "            name = os.path.basename(img)"], [655, "            name = os.path.splitext(name)[0]"], [656, "            name = name[name.rfind(\"_\") + 1:].title()"]]}}, "param": {"self": {"Images": [[639, "    def load_training_preview(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_root_": {"var": {"title": {"str": [[1043, "        title = \"Faceswap.py\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.LongRunningTask.run": {"var": {"retval": {"?": [[1116, "                retval = self._target(*self._args, **self._kwargs)"]]}}, "param": {"self": {"LongRunningTask": [[1112, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_icon": {"var": {"size": {"int": [[382, "        size = int(round(size * get_config().scaling_factor))"]], "?": [[381, "        size = get_config().user_config_dict.get(\"icon_size\", 16)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_newest_filenam": {"param": {"self": {"Images": [[505, "    def _get_newest_filenames(self, image_files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._place_preview": {"var": {"num_images": {"?": [[600, "        num_images, thumbnail_size = samples.shape[:2]"]]}, "cols": {"?": [[605, "        cols, rows = frame_dims[0] // thumbnail_size, frame_dims[1] // thumbnail_size"]]}, "samples": {"?": [[599, "        samples = self._previewcache[\"images\"].copy()"], [615, "            samples = np.concatenate((samples, placeholder))"]]}, "display": {"?": [[617, "        display = np.vstack([np.hstack(samples[row * cols: (row + 1) * cols])"]]}}, "param": {"frame_dims": {"(?, ?)": [[583, "    def _place_previews(self, frame_dims):"]]}, "self": {"Images": [[583, "    def _place_previews(self, frame_dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.resize_image": {"var": {"i": {"int": [[731, "            for i in range(0, 1000):"]]}, "displayimg": {"?": [[715, "        displayimg = self._previewtrain[name][0]"], [733, "                    displayimg = displayimg.resize(size, Image.ANTIALIAS)"]]}, "imgratio": {"float": [[718, "            imgratio = float(displayimg.size[0]) / float(displayimg.size[1])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.icon": {"param": {"self": {"Images": [[356, "    def icons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.refresh_config": {"param": {"self": {"Config": [[952, "    def refresh_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_icons": {"var": {"img": {"?": [[389, "            img = Image.open(os.path.join(pathicons, fname))"], [390, "            img = ImageTk.PhotoImage(img.resize((size, size), resample=Image.HAMMING))"]]}, "name": {"str": [[386, "            name, ext = os.path.splitext(fname)"]]}, "fname": {"str": [[385, "        for fname in os.listdir(pathicons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_command_": {"param": {"notebook": {"?": [[900, "    def set_command_notebook(self, notebook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._get_newest_filen": {"param": {"image_files": {"[str]": [[505, "    def _get_newest_filenames(self, image_files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config": {"param": {"set_command_notebook": {"Config": [[900, "    def set_command_notebook(self, notebook):"]]}, "session": {"dict": [[782, "    def root(self):"]]}, "root": {"Config": [[782, "    def root(self):"]]}, "_default_font": {"CliOptions": [[782, "    def root(self):"]]}}, "func": {"_tools_tabs": {"Config -> None": [[850, "    def _tools_tabs(self):"]]}, "tasks": {"Config -> None": [[813, "    def tasks(self):"]]}, "set_cursor_default": {"(Config, None) -> None": [[970, "    def set_cursor_default(self, widget=None):"]]}, "set_cursor_busy": {"(Config, None) -> None": [[956, "    def set_cursor_busy(self, widget=None):"]]}, "default_options": {"Config -> None": [[818, "    def default_options(self):"]]}, "__init__": {"? -> ?": [[760, "    def __init__(self, root, cli_opts, statusbar, session):"]]}, "set_modified_true": {"(Config, ?) -> None": [[936, "    def set_modified_true(self, command):"]]}, "default_font": {"Config -> (?, ?)": [[866, "    def default_font(self):"]]}, "set_command_notebook": {"(Config, ?) -> None": [[900, "    def set_command_notebook(self, notebook):"]]}, "tk_vars": {"Config -> None": [[803, "    def tk_vars(self):"]]}, "tools_notebook": {"Config -> None": [[835, "    def tools_notebook(self):"]]}, "set_root_title": {"(Config, None) -> None": [[1033, "    def set_root_title(self, text=None):"]]}, "cli_opts": {"Config -> None": [[798, "    def cli_opts(self):"]]}, "command_notebook": {"Config -> None": [[829, "    def command_notebook(self):"]]}, "set_default_options": {"Config -> None": [[887, "    def set_default_options(self):"]]}, "_command_tabs": {"Config -> None": [[845, "    def _command_tabs(self):"]]}, "pathcache": {"Config -> str": [[792, "    def pathcache(self):"]]}, "modified_vars": {"Config -> None": [[840, "    def modified_vars(self):"]]}, "_set_tk_vars": {"() -> dict": [[985, "    def _set_tk_vars():"]]}, "statusbar": {"Config -> None": [[823, "    def statusbar(self):"]]}, "project": {"Config -> None": [[808, "    def project(self):"]]}, "set_active_tab_by_name": {"(Config, ?) -> None": [[913, "    def set_active_tab_by_name(self, name):"]]}, "root": {"Config -> None": [[782, "    def root(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.scaling_factor": {"param": {"self": {"Config": [[787, "    def scaling_factor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.task": {"param": {"self": {"Config": [[813, "    def tasks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._set_kwargs": {"param": {"initialdir": {"None": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}, "title": {"None": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}, "filetype": {"str": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}, "variable": {"None": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}, "command": {"None": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}, "action": {"None": [[219, "    def _set_kwargs(self, title, initialdir, filetype, command, action, variable=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.resize_imag": {"var": {"scale": {"float": [[721, "                scale = frame_dims[0] / float(displayimg.size[0])"], [724, "                scale = frame_dims[1] / float(displayimg.size[1])"]]}, "frameratio": {"float": [[717, "            frameratio = float(frame_dims[0]) / float(frame_dims[1])"]]}, "size": {"(?, int)": [[722, "                size = (frame_dims[0], int(displayimg.size[1] * scale))"]], "(int, ?)": [[725, "                size = (int(displayimg.size[0] * scale), frame_dims[1])"]]}}, "param": {"frame_dims": {"(?, ?)": [[701, "    def resize_image(self, name, frame_dims):"]]}, "self": {"Images": [[701, "    def resize_image(self, name, frame_dims):"]]}, "name": {"str": [[701, "    def resize_image(self, name, frame_dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images.load_latest_preview": {"var": {"image_files": {"[str]": [[479, "        image_files = self._get_images(self._pathoutput)"], [486, "        image_files = [gui_preview] if gui_preview in image_files else image_files"], [489, "        image_files = self._get_newest_filenames(image_files)"]]}}, "param": {"frame_dims": {"(?, ?)": [[463, "    def load_latest_preview(self, thumbnail_size, frame_dims):"]]}, "self": {"Images": [[463, "    def load_latest_preview(self, thumbnail_size, frame_dims):"]]}, "thumbnail_size": {"int": [[463, "    def load_latest_preview(self, thumbnail_size, frame_dims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.__init__": {"param": {"statusbar": {"StatusBar": [[760, "    def __init__(self, root, cli_opts, statusbar, session):"]]}, "self": {"Config": [[760, "    def __init__(self, root, cli_opts, statusbar, session):"]]}, "session": {"Session": [[760, "    def __init__(self, root, cli_opts, statusbar, session):"]]}, "root": {"{FaceswapGui | Preview}": [[760, "    def __init__(self, root, cli_opts, statusbar, session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_root_titl": {"param": {"text": {"None": [[1033, "    def set_root_title(self, text=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.util": {"class": {"Images": {"<Images>": [[313, "class Images():"]]}, "LongRunningTask": {"<LongRunningTask>": [[1077, "class LongRunningTask(Thread):"]]}}, "func": {"get_images": {"() -> Images": [[73, "def get_images():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.command_notebook": {"param": {"self": {"Config": [[829, "    def command_notebook(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._": {"var": {"filetypes": {"dict": [[142, "        filetypes = {\"default\": (all_files,),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config._se": {"var": {"tk_vars": {"dict": [[1020, "        tk_vars = {\"display\": display,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.FileHandler._savefilenam": {"param": {"self": {"FileHandler": [[301, "    def _savefilename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Config.set_active_tab_by_": {"var": {"name": {"?": [[922, "        name = name.lower()"]]}}, "param": {"name": {"?": [[913, "    def set_active_tab_by_name(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.utils.Images._load_images_to_cac": {"var": {"show_files": {"?": [[554, "        show_files = sorted(image_files, key=os.path.getctime)[start_idx:]"]]}}, "param": {"thumbnail_size": {"int": [[531, "    def _load_images_to_cache(self, image_files, frame_dims, thumbnail_size):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.finalize": {"var": {"output": {"?": [[200, "            output = self._extract_media.pop(filename)"]]}}, "param": {"batch": {"?": [[166, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Mask": {"param": {"target_size": {"?": [[209, "    def _resize(image, target_size):"]]}}, "func": {"_resize": {"(?, ?) -> None": [[209, "    def _resize(image, target_size):"]]}, "_predict": {"(Masker, ?) -> None": [[162, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._collect_item": {"param": {"queue": {"?": [[145, "    def _collect_item(self, queue):"]]}, "self": {"Masker": [[145, "    def _collect_item(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.__init__": {"var": {"instance": {"int": [[53, "                 instance=0, image_is_aligned=False):"]]}}, "param": {"instance": {"int": [[53, "                 instance=0, image_is_aligned=False):"]]}, "self": {"Masker": [[53, "                 instance=0, image_is_aligned=False):"]]}, "configfile": {"None": [[53, "                 instance=0, image_is_aligned=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.__in": {"param": {"git_model_id": {"None": [[53, "                 instance=0, image_is_aligned=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._predi": {"param": {"batch": {"?": [[162, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._collect_": {"var": {"item": {"ExtractMedia": [[155, "            item = self._get_item(queue)"]], "None": [[152, "            item = self._rollover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._r": {"var": {"image_size": {"int": [[212, "        image_size = max(height, width)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._b": {"class": {"Masker": {"<Masker>": [[22, "class Masker(Extractor):  # pylint:disable=abstract-method"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._": {"var": {"resized": {"?": [[217, "        resized = cv2.resize(image, (0, 0), fx=scale, fy=scale, interpolation=method)"], [218, "        resized = resized if channels > 1 else resized[..., None]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.finaliz": {"param": {"self": {"Masker": [[166, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.__init": {"param": {"image_is_aligned": {"bool": [[53, "                 instance=0, image_is_aligned=False):"]]}, "model_filename": {"None": [[53, "                 instance=0, image_is_aligned=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.get_": {"var": {"batch": {"dict": [[105, "        batch = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._resiz": {"var": {"scale": {"int": [[213, "        scale = target_size / image_size"]]}, "method": {"?": [[216, "        method = cv2.INTER_CUBIC if scale > 1. else cv2.INTER_AREA  # pylint: disable=no-member"]]}, "height": {"?": [[211, "        height, width, channels = image.shape"]]}}, "param": {"image": {"?": [[209, "    def _resize(image, target_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker": {"func": {"finalize": {"(Masker, ?) -> None": [[166, "    def finalize(self, batch):"]]}, "get_batch": {"(Masker, ?) -> (bool, dict)": [[71, "    def get_batch(self, queue):"]]}, "_collect_item": {"(Masker, ?) -> ExtractMedia": [[145, "    def _collect_item(self, queue):"]]}, "__init__": {"? -> ?": [[52, "    def __init__(self, git_model_id=None, model_filename=None, configfile=None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker._predict": {"param": {"self": {"Masker": [[162, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.get_batch": {"var": {"item": {"ExtractMedia": [[108, "            item = self._collect_item(queue)"]]}, "frame_faces": {"int": [[128, "                    frame_faces = len(item.detected_faces)"]]}, "idx": {"int": [[106, "        idx = 0"]]}, "f_idx": {"?": [[117, "            for f_idx, face in enumerate(item.detected_faces):"]]}}, "param": {"queue": {"?": [[71, "    def get_batch(self, queue):"]]}, "self": {"Masker": [[71, "    def get_batch(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask._base.Masker.get_batc": {"var": {"exhausted": {"bool": [[104, "        exhausted = False"], [111, "                exhausted = True"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/color_transfer.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color.process": {"var": {"target": {"?": [[76, "        target = cv2.cvtColor(  # pylint: disable=no-member"]]}, "clip": {"?": [[67, "        clip = self.config.get(\"clip\", True)"]]}, "col_b": {"int": [[113, "        col_b = self._scale_array(col_b, clip=clip)"]], "?": [[97, "            col_b = (b_std_tar / b_std_src) * col_b"], [102, "            col_b = (b_std_src / b_std_tar) * col_b"]]}, "light": {"int": [[111, "        light = self._scale_array(light, clip=clip)"]], "?": [[95, "            light = (l_std_tar / l_std_src) * light"], [100, "            light = (l_std_src / l_std_tar) * light"]]}, "col_a": {"int": [[112, "        col_a = self._scale_array(col_a, clip=clip)"]], "?": [[96, "            col_a = (a_std_tar / a_std_src) * col_a"], [101, "            col_a = (a_std_src / a_std_tar) * col_a"]]}, "b_mean_tar": {"?": [[85, "         b_mean_tar, b_std_tar) = self.image_stats(target)"]]}, "a_mean_tar": {"?": [[84, "         a_mean_tar, a_std_tar,"]]}, "background": {"int": [[122, "        background = new_face * (1 - raw_mask)"]]}, "merged": {"float": [[123, "        merged = transfer + background"]]}}, "param": {"old_face": {"?": [[41, "    def process(self, old_face, new_face, raw_mask):"]]}, "new_face": {"?": [[41, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Col": {"func": {"process": {"(Color, ?, ?, ?) -> float": [[41, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color": {"func": {"image_stats": {"? -> (?, ?, ?, ?, ?, ?)": [[128, "    def image_stats(image):"]]}, "_min_max_scale": {"(?, (int, int)) -> int": [[150, "    def _min_max_scale(arr, new_range=(0, 255)):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color._min_max_": {"var": {"scaled": {"int": [[172, "            scaled = (new_range[1] - new_range[0]) * (arr - arr_min) / (arr_max -"]], "?": [[176, "            scaled = arr"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color.proce": {"param": {"raw_mask": {"?": [[41, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color.proc": {"var": {"transfer": {"float": [[119, "        transfer = cv2.cvtColor(  # pylint: disable=no-member"]], "?": [[118, "        transfer = cv2.merge([light, col_a, col_b])  # pylint: disable=no-member"]]}, "preserve_paper": {"?": [[68, "        preserve_paper = self.config.get(\"preserve_paper\", True)"]]}}, "param": {"self": {"Color": [[41, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color._min_max_scale": {"var": {"arr_max": {"?": [[167, "        arr_max = arr.max()"]]}, "arr_min": {"?": [[166, "        arr_min = arr.min()"]]}}, "param": {"arr": {"?": [[150, "    def _min_max_scale(arr, new_range=(0, 255)):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Colo": {"func": {"_scale_array": {"(Color, ?, bool) -> int": [[180, "    def _scale_array(self, arr, clip=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color._min_max_scal": {"param": {"new_range": {"(int, int)": [[150, "    def _min_max_scale(arr, new_range=(0, 255)):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color._scale_array": {"var": {"scaled": {"int": [[200, "            scaled = self._min_max_scale(arr, new_range=scale_range)"]], "?": [[197, "            scaled = np.clip(arr, 0, 255)"]]}, "scale_range": {"(int, int)": [[199, "            scale_range = (max([arr.min(), 0]), min([arr.max(), 255]))"]]}}, "param": {"self": {"Color": [[180, "    def _scale_array(self, arr, clip=True):"]]}, "arr": {"?": [[180, "    def _scale_array(self, arr, clip=True):"]]}, "clip": {"bool": [[180, "    def _scale_array(self, arr, clip=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color.pro": {"var": {"a_mean_src": {"?": [[81, "         a_mean_src, a_std_src,"]]}, "b_mean_src": {"?": [[82, "         b_mean_src, b_std_src) = self.image_stats(source)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color.p": {"var": {"source": {"?": [[73, "        source = cv2.cvtColor(  # pylint: disable=no-member"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfe": {"class": {"Color": {"<Color>": [[31, "class Color(Adjustment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.color_transfer.Color.image_stats": {"param": {"image": {"?": [[128, "    def image_stats(image):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/realface.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.build_autoencoders": {"var": {"output": {"?": [[85, "            output = decoder(self.networks[\"encoder\"].network(inputs[0]))"]]}, "autoencoder": {"?": [[86, "            autoencoder = KerasModel(inputs, output)"]]}, "decoder": {"?": [[84, "            decoder = self.networks[\"decoder_{}\".format(side)].network"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Mo": {"func": {"dense_filters": {"Model -> int": [[44, "    def dense_filters(self):"]]}, "get_dense_width_upscalers_numbers": {"Model -> (int, int)": [[60, "    def get_dense_width_upscalers_numbers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.M": {"var": {"encoder_complexity": {"?": [[95, "        encoder_complexity = self.config[\"complexity_encoder\"]"]]}, "decoder_a_complexity": {"int": [[174, "        decoder_a_complexity = int(self.config[\"complexity_decoder\"] / 1.5)"]]}, "decoder_b_complexity": {"?": [[122, "        decoder_b_complexity = self.config[\"complexity_decoder\"]"]]}}, "func": {"downscalers_no": {"Model -> int": [[34, "    def downscalers_no(self):"]]}, "_downscale_ratio": {"Model -> int": [[39, "    def _downscale_ratio(self):"]]}, "build_autoencoders": {"(Model, ?) -> None": [[79, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.encode": {"var": {"var_x": {"?": [[93, "        var_x = input_"], [98, "            var_x = self.blocks.conv(var_x, encoder_complexity * 2**idx)"], [99, "            var_x = self.blocks.res_block(var_x, encoder_complexity * 2**idx, use_bias=True)"], [100, "            var_x = self.blocks.res_block(var_x, encoder_complexity * 2**idx, use_bias=True)"], [102, "        var_x = self.blocks.conv(var_x, encoder_complexity * 2**(idx + 1))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model._downscale_ratio": {"param": {"self": {"Model": [[39, "    def _downscale_ratio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.decoder_b": {"var": {"idx": {"int": [[123, "        for idx in range(self.upscalers_no - 2):"], [140, "            for idx in range(self.upscalers_no-2):"]]}, "var_xy": {"?": [[112, "        var_xy = input_"], [114, "        var_xy = Dense(self.config[\"dense_nodes\"])(Flatten()(var_xy))"], [115, "        var_xy = Dense(self.dense_width * self.dense_width * self.dense_filters)(var_xy)"], [116, "        var_xy = Reshape((self.dense_width, self.dense_width, self.dense_filters))(var_xy)"], [117, "        var_xy = self.blocks.upscale(var_xy, self.dense_filters)"]]}, "input_": {"?": [[110, "        input_ = Input(shape=(input_width, input_width, input_filters))"]]}, "input_width": {"Model -> int": [[109, "        input_width = self.config[\"input_size\"] // self._downscale_ratio"]]}, "var_y": {"?": [[138, "            var_y = var_xy"], [141, "                var_y = self.blocks.upscale(var_y, mask_b_complexity // 2**idx)"], [142, "            var_y = self.blocks.upscale(var_y, mask_b_complexity // 2**(idx + 1))"], [144, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[119, "        var_x = var_xy"], [120, "        var_x = self.blocks.res_block(var_x, self.dense_filters, use_bias=False)"], [124, "            var_x = self.blocks.upscale(var_x, decoder_b_complexity // 2**idx)"], [125, "            var_x = self.blocks.res_block(var_x, decoder_b_complexity // 2**idx, use_bias=False)"], [126, "            var_x = self.blocks.res_block(var_x, decoder_b_complexity // 2**idx, use_bias=True)"], [127, "        var_x = self.blocks.upscale(var_x, decoder_b_complexity // 2**(idx + 1))"], [129, "        var_x = self.blocks.conv2d(var_x, 3,"]]}, "input_filters": {"int": [[108, "        input_filters = self.config[\"complexity_encoder\"] * 2**(self.downscalers_no-1)"]]}, "outputs": {"[?]": [[135, "        outputs = [var_x]"]]}}, "param": {"self": {"Model": [[106, "    def decoder_b(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realfac": {"class": {"Model": {"<Model>": [[18, "class Model(ModelBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.check_input_output": {"param": {"self": {"Model": [[48, "    def check_input_output(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.decode": {"var": {"var_xy": {"?": [[160, "        var_xy = input_"], [165, "        var_xy = Dense(dense_nodes)(Flatten()(var_xy))"], [166, "        var_xy = Dense(self.dense_width * self.dense_width * dense_filters)(var_xy)"], [167, "        var_xy = Reshape((self.dense_width, self.dense_width, dense_filters))(var_xy)"], [169, "        var_xy = self.blocks.upscale(var_xy, dense_filters)"]]}, "var_y": {"?": [[188, "            var_y = var_xy"], [191, "                var_y = self.blocks.upscale(var_y, mask_a_complexity // 2**idx)"], [192, "            var_y = self.blocks.upscale(var_y, mask_a_complexity // 2**(idx + 1))"], [194, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[171, "        var_x = var_xy"], [172, "        var_x = self.blocks.res_block(var_x, dense_filters, use_bias=False)"], [176, "            var_x = self.blocks.upscale(var_x, decoder_a_complexity // 2**idx)"], [177, "        var_x = self.blocks.upscale(var_x, decoder_a_complexity // 2**(idx + 1))"], [179, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.downscalers_no": {"param": {"self": {"Model": [[34, "    def downscalers_no(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.__init__": {"param": {"self": {"Model": [[20, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.encoder": {"var": {"input_": {"?": [[92, "        input_ = Input(shape=self.input_shape)"]]}, "idx": {"int": [[97, "        for idx in range(self.downscalers_no - 1):"]]}}, "param": {"self": {"Model": [[90, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.decoder_a": {"var": {"idx": {"int": [[175, "        for idx in range(self.upscalers_no-2):"], [190, "            for idx in range(self.upscalers_no-2):"]]}, "dense_nodes": {"int": [[162, "        dense_nodes = int(self.config[\"dense_nodes\"]/1.5)"]]}, "outputs": {"[?]": [[185, "        outputs = [var_x]"]]}, "input_": {"?": [[158, "        input_ = Input(shape=(input_width, input_width, input_filters))"]]}, "input_width": {"Model -> int": [[157, "        input_width = self.config[\"input_size\"] // self._downscale_ratio"]]}, "dense_filters": {"int": [[163, "        dense_filters = int(self.dense_filters/1.5)"]]}, "input_filters": {"int": [[156, "        input_filters = self.config[\"complexity_encoder\"] * 2**(self.downscalers_no-1)"]]}}, "param": {"self": {"Model": [[154, "    def decoder_a(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model": {"func": {"decoder_a": {"Model -> None": [[154, "    def decoder_a(self):"]]}, "decoder_b": {"Model -> None": [[106, "    def decoder_b(self):"]]}, "check_input_output": {"Model -> None": [[48, "    def check_input_output(self):"]]}, "encoder": {"Model -> None": [[90, "    def encoder(self):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self, *args, **kwargs):"]]}, "add_networks": {"Model -> None": [[71, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.decoder": {"var": {"mask_b_complexity": {"int": [[139, "            mask_b_complexity = 384"]]}, "mask_a_complexity": {"int": [[189, "            mask_a_complexity = 384"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.dense_filter": {"param": {"self": {"Model": [[44, "    def dense_filters(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.add_network": {"param": {"self": {"Model": [[71, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.get_dense_width_upscalers_number": {"var": {"closest": {"int": [[64, "        closest = min([x * self._downscale_ratio for x, _ in sides],"]]}, "dense_width": {"int": [[66, "        dense_width, upscalers_no = [(s, n) for s, n in sides"]]}, "sides": {"[(int, int)]": [[63, "        sides = [(output_size // 2**n, n) for n in [4, 5] if (output_size // 2**n) < 10]"]]}, "output_size": {"?": [[62, "        output_size = self.config[\"output_size\"]"]]}}, "param": {"self": {"Model": [[60, "    def get_dense_width_upscalers_numbers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.realface.Model.build_autoencoder": {"var": {"side": {"str": [[82, "        for side in \"a\", \"b\":"]]}}, "param": {"inputs": {"?": [[79, "    def build_autoencoders(self, inputs):"]]}, "self": {"Model": [[79, "    def build_autoencoders(self, inputs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/plaidml_tools.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.get": {"var": {"all_devices": {"[?]": [[166, "        all_devices = experimental + self.supported_devices"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.vram": {"param": {"self": {"PlaidMLStats": [[54, "    def vram(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.set_largest_gpu": {"var": {"category": {"str": [[183, "        category = \"supported\" if self.supported_devices else \"experimental\""]]}, "indices": {"?": [[186, "        indices = getattr(self, \"{}_indices\".format(category))"]]}, "max_vram": {"int": [[191, "        max_vram = max([self.vram[idx] for idx in indices])"]]}}, "param": {"self": {"PlaidMLStats": [[181, "    def set_largest_gpu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.nam": {"param": {"self": {"PlaidMLStats": [[71, "    def names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.driver": {"param": {"self": {"PlaidMLStats": [[49, "    def drivers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStat": {"func": {"drivers": {"PlaidMLStats -> [?]": [[49, "    def drivers(self):"]]}, "ids": {"PlaidMLStats -> [?]": [[66, "    def ids(self):"]]}, "names": {"PlaidMLStats -> [str]": [[71, "    def names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.load_active_devic": {"param": {"self": {"PlaidMLStats": [[171, "    def load_active_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.setup_plaidm": {"var": {"logger": {"?": [[210, "    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}, "plaid": {"PlaidMLStats": [[214, "    plaid = PlaidMLStats(loglevel)"]]}}, "param": {"loglevel": {"?": [[208, "def setup_plaidml(loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.active_devic": {"param": {"self": {"PlaidMLStats": [[39, "    def active_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.get_supported_": {"var": {"devices": {"?": [[146, "        devices, _ = plaidml.devices(self.ctx, limit=100, return_all=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.get_all_devic": {"var": {"experimental_setting": {"?": [[157, "        experimental_setting = plaidml.settings.experimental"]]}}, "param": {"self": {"PlaidMLStats": [[155, "    def get_all_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.max_alloc": {"param": {"self": {"PlaidMLStats": [[60, "    def max_alloc(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.set_lar": {"var": {"selected_gpu": {"?": [[199, "        selected_gpu = self.ids[gpu_idx]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.supported_indices": {"var": {"retval": {"[?]": [[82, "        retval = [idx for idx, device in enumerate(self.devices)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.set_verbosity": {"var": {"numeric_level": {"int": [[129, "            numeric_level = loglevel"]], "?": [[131, "            numeric_level = getattr(logging, loglevel.upper(), None)"]]}}, "param": {"loglevel": {"str": [[124, "    def set_verbosity(loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.get_supported_devic": {"var": {"supported": {"[?]": [[149, "        supported = [device for device in devices"]]}, "experimental_setting": {"?": [[144, "        experimental_setting = plaidml.settings.experimental"]]}}, "param": {"self": {"PlaidMLStats": [[142, "    def get_supported_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.experimental_indic": {"param": {"self": {"PlaidMLStats": [[89, "    def experimental_indices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.supported_indic": {"param": {"self": {"PlaidMLStats": [[80, "    def supported_indices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.device_count": {"param": {"self": {"PlaidMLStats": [[44, "    def device_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.set_largest": {"var": {"gpu_idx": {"int": [[194, "        gpu_idx = min([idx for idx, vram in enumerate(self.vram)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats": {"func": {"initialize": {"(PlaidMLStats, ?) -> None / (PlaidMLStats, str) -> None": [[98, "    def initialize(self, loglevel):"]]}, "max_alloc": {"PlaidMLStats -> [int]": [[60, "    def max_alloc(self):"]]}, "vram": {"PlaidMLStats -> [int]": [[54, "    def vram(self):"]]}, "device_count": {"PlaidMLStats -> int": [[44, "    def device_count(self):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self, loglevel=\"INFO\", log=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLSta": {"func": {"supported_indices": {"PlaidMLStats -> [?]": [[80, "    def supported_indices(self):"]]}, "set_verbosity": {"? -> None / str -> None": [[124, "    def set_verbosity(loglevel):"]]}, "get_supported_devices": {"PlaidMLStats -> [?]": [[142, "    def get_supported_devices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.get_all_devices": {"var": {"experimental": {"[?]": [[162, "        experimental = [device for device in devices"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.experimental_indices": {"var": {"retval": {"[?]": [[91, "        retval = [idx for idx, device in enumerate(self.devices)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.initializ": {"param": {"loglevel": {"str": [[98, "    def initialize(self, loglevel):"]]}, "self": {"PlaidMLStats": [[98, "    def initialize(self, loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_too": {"class": {"PlaidMLStats": {"<PlaidMLStats>": [[18, "class PlaidMLStats():"]]}}, "func": {"setup_plaidml": {"? -> None": [[208, "def setup_plaidml(loglevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLS": {"func": {"set_plaidml_logger": {"() -> None": [[114, "    def set_plaidml_logger():"]]}, "load_active_devices": {"PlaidMLStats -> None": [[171, "    def load_active_devices(self):"]]}, "active_devices": {"PlaidMLStats -> [?]": [[39, "    def active_devices(self):"]]}, "set_largest_gpu": {"PlaidMLStats -> None": [[181, "    def set_largest_gpu(self):"]]}, "get_all_devices": {"PlaidMLStats -> [?]": [[155, "    def get_all_devices(self):"]]}, "experimental_indices": {"PlaidMLStats -> [?]": [[89, "    def experimental_indices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.get_all_": {"var": {"devices": {"?": [[159, "        devices, _ = plaidml.devices(self.ctx, limit=100, return_all=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools": {"var": {"_LOGGER": {"None": [[15, "_LOGGER = None"]]}, "_INIT": {"bool": [[14, "_INIT = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.id": {"param": {"self": {"PlaidMLStats": [[66, "    def ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_tools.PlaidMLStats.__init__": {"param": {"loglevel": {"str": [[20, "    def __init__(self, loglevel=\"INFO\", log=True):"]]}, "self": {"PlaidMLStats": [[20, "    def __init__(self, loglevel=\"INFO\", log=True):"]]}, "log": {"bool": [[20, "    def __init__(self, loglevel=\"INFO\", log=True):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/_config.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._c": {"class": {"Config": {"<Config>": [[20, "class Config(FaceswapConfig):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.load_mod": {"param": {"plugin_type": {"(FaceswapConfig, None, None, <str>, None, None, None, None, None, bool, bool, None) -> None / (Config, None, None, <str>, None, None, None, None, None, bool, bool, None) -> None": [[193, "    def load_module(self, filename, module_path, plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config": {"var": {"ADDITIONAL_INFO": {"str": [[16, "ADDITIONAL_INFO = (\"\\nNB: Unless specifically stated, values changed here will only take effect \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.set_defaul": {"var": {"base_path": {"str": [[32, "            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.load_modul": {"var": {"section": {"str": [[198, "        section = \".\".join((plugin_type, module.replace(\"_defaults\", \"\")))"]]}, "key": {"?": [[204, "        for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access"]]}}, "param": {"section": {"str": [[198, "        section = \".\".join((plugin_type, module.replace(\"_defaults\", \"\")))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Confi": {"func": {"set_globals": {"Config -> None": [[38, "    def set_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.load_module": {"var": {"mod": {"?": [[200, "        mod = import_module(\"{}.{}\".format(module_path, module))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.set_default": {"param": {"self": {"Config": [[23, "    def set_defaults(self):"]]}, "filenames": {"str": [[28, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.load_": {"var": {"module": {"str": [[197, "        module = os.path.splitext(filename)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.set_global": {"var": {"section": {"str": [[56, "        section = \"global\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.set_globa": {"param": {"self": {"Config": [[38, "    def set_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._confi": {"var": {"logger": {"?": [[14, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.load_modu": {"var": {"helptext": {"?": [[201, "        helptext = mod._HELPTEXT  # pylint:disable=protected-access"]]}}, "param": {"self": {"(FaceswapConfig, None, None, <str>, None, None, None, None, None, bool, bool, None) -> None / (Config, None, None, <str>, None, None, None, None, None, bool, bool, None) -> None": [[193, "    def load_module(self, filename, module_path, plugin_type):"]]}, "filename": {"str": [[193, "    def load_module(self, filename, module_path, plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config": {"var": {"default_files": {"[str]": [[29, "            default_files = [fname for fname in filenames if fname.endswith(\"_defaults.py\")]"]]}}, "param": {"module_path": {"Config": [[193, "    def load_module(self, filename, module_path, plugin_type):"]]}}, "func": {"load_module": {"(Config, ?, ?, ?) -> None / (Config, str, str, str) -> None": [[193, "    def load_module(self, filename, module_path, plugin_type):"]]}, "set_defaults": {"Config -> None": [[23, "    def set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train._config.Config.set_defaults": {"var": {"import_path": {"str": [[33, "            import_path = \".\".join(full_path_split(dirpath.replace(base_path, \"\"))[1:])"]]}, "plugin_type": {"str": [[34, "            plugin_type = import_path.split(\".\")[-1]"]]}, "current_dir": {"str": [[27, "        current_dir = os.path.dirname(__file__)"]]}, "filename": {"str": [[35, "            for filename in default_files:"]]}, "dirpath": {"str": [[28, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}, "param": {"_": {"Config -> None": [[28, "        for dirpath, _, filenames in os.walk(current_dir):"]]}, "dirpath": {"Config": [[28, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/losses.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_bl": {"param": {"radius": {"{float | int}": [[588, "def gaussian_blur(radius=2.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective._preprocess_": {"var": {"padding": {"str": [[189, "            padding = 'SAME'"], [191, "            padding = 'VALID'"]]}}, "param": {"padding": {"str": [[170, "    def _preprocess_padding(padding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective": {"func": {"__call__": {"(DSSIMObjective, ?, ?) -> None": [[117, "    def __call__(self, y_true, y_pred):"]]}, "__init__": {"? -> ?": [[90, "    def __init__(self, k_1=0.01, k_2=0.03, kernel_size=3, max_value=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.mask_loss_wrapper.func": {"var": {"y_true": {"?": [[38, "            y_true = K.reshape(y_true, [-1] + list(K.int_shape(y_pred)[1:]))"], [39, "            y_true = preprocessing_func(y_true)"]]}}, "param": {"y_true": {"?": [[35, "    def func(y_true, y_pred):"]]}, "y_pred": {"?": [[35, "    def func(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.__call": {"var": {"patches_true": {"None": [[146, "        patches_true = self.extract_image_patches(y_true,"]]}, "y_true": {"?": [[139, "        y_true = K.reshape(y_true, [-1] + list(self.__int_shape(y_pred)[1:]))"]]}, "var_true": {"?": [[156, "        var_true = K.var(patches_true, axis=-1)"]]}, "u_pred": {"?": [[154, "        u_pred = K.mean(patches_pred, axis=-1)"]]}, "patches_pred": {"None": [[141, "        patches_pred = self.extract_image_patches(y_pred,"]]}, "covar_true_pred": {"?": [[159, "        covar_true_pred = K.mean("]]}, "y_pred": {"?": [[140, "        y_pred = K.reshape(y_pred, [-1] + list(self.__int_shape(y_pred)[1:]))"]]}, "u_true": {"?": [[153, "        u_true = K.mean(patches_true, axis=-1)"]]}, "var_pred": {"?": [[157, "        var_pred = K.var(patches_pred, axis=-1)"]]}}, "param": {"y_true": {"DSSIMObjective": [[139, "        y_true = K.reshape(y_true, [-1] + list(self.__int_shape(y_pred)[1:]))"]], "?": [[117, "    def __call__(self, y_true, y_pred):"]]}, "y_pred": {"?": [[117, "    def __call__(self, y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blur._gaussian": {"param": {"sigma": {"{float | int}": [[607, "    def _gaussian(var_x, radius, sigma):"]]}, "radius": {"?": [[607, "    def _gaussian(var_x, radius, sigma):"]]}, "var_x": {"int": [[607, "    def _gaussian(var_x, radius, sigma):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjectiv": {"func": {"_preprocess_padding": {"? -> str / str -> str": [[170, "    def _preprocess_padding(padding):"]]}, "__int_shape": {"? -> None": [[102, "    def __int_shape(input_tensor):"]]}, "extract_image_patches": {"(DSSIMObjective, ?, [int], [int], str, ?) -> None / (DSSIMObjective, ?, ?, ?, str, str) -> None": [[196, "    def extract_image_patches(self, input_tensor, k_sizes, s_sizes,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._diff_xx": {"param": {"img": {"?": [[415, "    def _diff_xx(img):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blur._ma": {"var": {"kernel_1d": {"?": [[615, "        kernel_1d = np.array([_gaussian(x, mean, sigma) for x in range(kernel_size)])"]]}, "kernel_size": {"int": [[613, "        kernel_size = max(3, int(2 * 2 * sigma + 1))"]]}, "np_kernel": {"?": [[616, "        np_kernel = np.outer(kernel_1d, kernel_1d).astype(dtype=K.floatx())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.__init": {"param": {"k_1": {"float": [[90, "    def __init__(self, k_1=0.01, k_2=0.03, kernel_size=3, max_value=1.0):"]]}, "max_value": {"float": [[90, "    def __init__(self, k_1=0.01, k_2=0.03, kernel_size=3, max_value=1.0):"]]}, "k_2": {"float": [[90, "    def __init__(self, k_1=0.01, k_2=0.03, kernel_size=3, max_value=1.0):"]]}, "kernel_size": {"int": [[90, "    def __init__(self, k_1=0.01, k_2=0.03, kernel_size=3, max_value=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losse": {"func": {"gmsd_loss": {"(?, ?) -> None": [[551, "def gmsd_loss(y_true, y_pred):"]]}, "gaussian_blur": {"float -> ? -> ? / int -> ? -> None": [[588, "def gaussian_blur(radius=2.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gmsd_loss": {"var": {"upper": {"float": [[577, "    upper = 2.0 * true_edge * pred_edge"]]}, "lower": {"?": [[578, "    lower = K.square(true_edge) + K.square(pred_edge)"]]}, "true_edge": {"None": [[574, "    true_edge = scharr_edges(y_true, True)"]]}, "pred_edge": {"None": [[575, "    pred_edge = scharr_edges(y_pred, True)"]]}}, "param": {"y_true": {"?": [[551, "def gmsd_loss(y_true, y_pred):"]]}, "y_pred": {"?": [[551, "def gmsd_loss(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.extract_image_patches": {"var": {"padding": {"str": [[197, "                              padding='same', data_format='channels_last'):"], [221, "        padding = self._preprocess_padding(padding)"]]}, "kernel": {"[int]": [[219, "        kernel = [1, k_sizes[0], k_sizes[1], 1]"]]}}, "param": {"padding": {"str": [[197, "                              padding='same', data_format='channels_last'):"]]}, "data_format": {"str": [[197, "                              padding='same', data_format='channels_last'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.mask_loss_wra": {"param": {"preprocessing_func": {"None": [[24, "def mask_loss_wrapper(loss_func, preprocessing_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.l_inf_norm": {"var": {"diff": {"?": [[367, "    diff = K.abs(y_true - y_pred)"]]}, "loss": {"?": [[369, "    loss = K.mean(max_loss, axis=-1)"]]}}, "param": {"y_true": {"?": [[352, "def l_inf_norm(y_true, y_pred):"]]}, "y_pred": {"?": [[352, "def l_inf_norm(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.generalized_loss": {"var": {"diff": {"float": [[345, "    diff = y_pred - y_true"]]}}, "param": {"alpha": {"float": [[314, "def generalized_loss(y_true, y_pred, alpha=1.0, beta=1.0/255.0):"]]}, "y_true": {"float": [[314, "def generalized_loss(y_true, y_pred, alpha=1.0, beta=1.0/255.0):"]]}, "beta": {"float": [[314, "def generalized_loss(y_true, y_pred, alpha=1.0, beta=1.0/255.0):"]]}, "y_pred": {"float": [[314, "def generalized_loss(y_true, y_pred, alpha=1.0, beta=1.0/255.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.__int_sha": {"param": {"input_tensor": {"?": [[102, "    def __int_shape(input_tensor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.PenalizedL": {"var": {"mask_prop": {"float": [[230, "                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):"]]}, "mask_as_k_inv_prop": {"int": [[280, "    mask_as_k_inv_prop = 1 - mask_prop"]]}}, "param": {"mask_prop": {"float": [[230, "                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):"]]}, "loss_func": {"Loss -> None": [[230, "                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):"]]}, "preprocessing_func": {"None": [[230, "                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):"]]}}, "func": {"_inner_loss": {"(?, ?) -> None": [[283, "    def _inner_loss(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss": {"var": {"tv_weight": {"float": [[469, "    tv_weight = 1.0"]]}, "tv2_weight": {"float": [[470, "    tv2_weight = 1.0"]]}}, "param": {"y_true": {"?": [[373, "def gradient_loss(y_true, y_pred):"]]}, "y_pred": {"?": [[373, "def gradient_loss(y_true, y_pred):"]]}}, "func": {"_diff_x": {"? -> float": [[399, "    def _diff_x(img):"]]}, "_diff_y": {"? -> float": [[407, "    def _diff_y(img):"]]}, "_diff_yy": {"? -> float": [[423, "    def _diff_yy(img):"]]}, "_diff_xy": {"? -> float": [[431, "    def _diff_xy(img):"]]}, "_diff_xx": {"? -> float": [[415, "    def _diff_xx(img):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.mask_loss_wrapper": {"param": {"loss_func": {"?": [[24, "def mask_loss_wrapper(loss_func, preprocessing_func=None):"]]}}, "func": {"func": {"(?, ?) -> None": [[35, "    def func(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses": {"var": {"logger": {"?": [[21, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"DSSIMObjective": {"<DSSIMObjective>": [[44, "class DSSIMObjective():"]]}}, "func": {"l_inf_norm": {"(?, ?) -> None": [[352, "def l_inf_norm(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._di": {"var": {"xy_left": {"?": [[437, "        xy_left = K.concatenate([top_left, inner_left, bot_left], axis=1)"], [453, "        xy_left = K.concatenate([top_left, inner_left, bot_left], axis=1)"]]}, "x_left": {"?": [[401, "        x_left = img[:, :, 1:2, :] - img[:, :, 0:1, :]"], [417, "        x_left = img[:, :, 1:2, :] + img[:, :, 0:1, :]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gmsd_lo": {"var": {"gms": {"float": [[579, "    gms = (upper + ephsilon) / (lower + ephsilon)"]]}, "gmsd": {"?": [[580, "    gmsd = K.std(gms, axis=(1, 2, 3), keepdims=True)"], [581, "    gmsd = K.squeeze(gmsd, axis=-1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.scharr_ed": {"var": {"static_image_shape": {"?": [[502, "    static_image_shape = image.shape.dims if get_backend() == \"amd\" else image.get_shape()"]]}, "image_shape": {"?": [[503, "    image_shape = K.shape(image)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._diff_xy": {"var": {"inner_left": {"?": [[435, "        inner_left = img[:, 2:, 1:2, :] + img[:, :-2, 0:1, :]"], [451, "        inner_left = img[:, :-2, 1:2, :] + img[:, 2:, 0:1, :]"]]}, "top_right": {"?": [[444, "        top_right = img[:, 1:2, -1:, :] + img[:, 0:1, -2:-1, :]"], [460, "        top_right = img[:, 0:1, -1:, :] + img[:, 1:2, -2:-1, :]"]]}, "top_left": {"?": [[434, "        top_left = img[:, 1:2, 1:2, :] + img[:, 0:1, 0:1, :]"], [450, "        top_left = img[:, 0:1, 1:2, :] + img[:, 1:2, 0:1, :]"]]}, "bot_left": {"?": [[436, "        bot_left = img[:, -1:, 1:2, :] + img[:, -2:-1, 0:1, :]"], [452, "        bot_left = img[:, -2:-1, 1:2, :] + img[:, -1:, 0:1, :]"]]}, "bot_mid": {"?": [[441, "        bot_mid = img[:, -1:, 2:, :] + img[:, -2:-1, :-2, :]"], [457, "        bot_mid = img[:, -2:-1, 2:, :] + img[:, -1:, :-2, :]"]]}, "bot_right": {"?": [[446, "        bot_right = img[:, -1:, -1:, :] + img[:, -2:-1, -2:-1, :]"], [462, "        bot_right = img[:, -2:-1, -1:, :] + img[:, -1:, -2:-1, :]"]]}, "inner_right": {"?": [[445, "        inner_right = img[:, 2:, -1:, :] + img[:, :-2, -2:-1, :]"], [461, "        inner_right = img[:, :-2, -1:, :] + img[:, 2:, -2:-1, :]"]]}, "top_mid": {"?": [[439, "        top_mid = img[:, 1:2, 2:, :] + img[:, 0:1, :-2, :]"], [455, "        top_mid = img[:, 0:1, 2:, :] + img[:, 1:2, :-2, :]"]]}, "mid_mid": {"?": [[440, "        mid_mid = img[:, 2:, 2:, :] + img[:, :-2, :-2, :]"], [456, "        mid_mid = img[:, :-2, 2:, :] + img[:, 2:, :-2, :]"]]}}, "param": {"img": {"?": [[431, "    def _diff_xy(img):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.PenalizedLoss._inner_loss": {"var": {"n_pred": {"int": [[305, "            n_pred = y_pred * mask"]], "?": [[308, "            n_pred = K.concatenate([y_pred[:, :, :, i:i+1] * mask for i in range(3)], axis=-1)"]]}, "n_true": {"int": [[304, "            n_true = y_true * mask"]], "?": [[307, "            n_true = K.concatenate([y_true[:, :, :, i:i+1] * mask for i in range(3)], axis=-1)"]]}}, "param": {"y_true": {"?": [[283, "    def _inner_loss(y_true, y_pred):"]]}, "y_pred": {"?": [[283, "    def _inner_loss(y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.PenalizedLoss._scale_": {"var": {"mask": {"?": [[268, "            mask = K.pool2d(mask,"]]}}, "param": {"mask": {"Loss -> None": [[251, "    def _scale_mask(mask, scaling):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.generalized_l": {"var": {"second": {"float": [[346, "    second = (K.pow(K.pow(diff/beta, 2.) / K.abs(2.-alpha) + 1., (alpha/2.)) - 1.)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.__init__": {"param": {"self": {"DSSIMObjective": [[90, "    def __init__(self, k_1=0.01, k_2=0.03, kernel_size=3, max_value=1.0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blu": {"func": {"_make_kernel": {"int -> None": [[611, "    def _make_kernel(sigma):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_": {"var": {"loss": {"float": [[471, "    loss = 0.0"], [477, "    loss = loss / (tv_weight + tv2_weight)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.PenalizedLo": {"var": {"mask": {"int": [[281, "    mask = (mask * mask_prop) + mask_as_k_inv_prop"]], "{Loss -> None | None}": [[277, "    mask = _scale_mask(mask, mask_scaling)"]], "?": [[279, "        mask = preprocessing_func(mask)"]]}}, "param": {"mask_scaling": {"float": [[230, "                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):"]]}, "mask": {"Loss -> None": [[230, "                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):"]]}}, "func": {"_scale_mask": {"(Loss -> None, float) -> Loss -> None": [[251, "    def _scale_mask(mask, scaling):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blur._make_kernel": {"var": {"mean": {"?": [[614, "        mean = np.floor(0.5 * kernel_size)"]]}}, "param": {"sigma": {"{float | int}": [[611, "    def _make_kernel(sigma):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._diff": {"var": {"x_out": {"?": [[404, "        x_out = K.concatenate([x_left, x_inner, x_right], axis=2)"], [420, "        x_out = K.concatenate([x_left, x_inner, x_right], axis=2)"]]}, "y_inner": {"?": [[410, "        y_inner = img[:, 2:, :, :] - img[:, :-2, :, :]"], [426, "        y_inner = img[:, 2:, :, :] + img[:, :-2, :, :]"]]}, "xy_out1": {"?": [[465, "        xy_out1 = K.concatenate([xy_left, xy_mid, xy_right], axis=2)"]]}, "x_inner": {"?": [[402, "        x_inner = img[:, :, 2:, :] - img[:, :, :-2, :]"], [418, "        x_inner = img[:, :, 2:, :] + img[:, :, :-2, :]"]]}, "xy_out2": {"?": [[466, "        xy_out2 = K.concatenate([xy_left, xy_mid, xy_right], axis=2)"]]}, "y_bot": {"?": [[411, "        y_bot = img[:, -1:, :, :] - img[:, -2:-1, :, :]"], [427, "        y_bot = img[:, -1:, :, :] + img[:, -2:-1, :, :]"]]}, "x_right": {"?": [[403, "        x_right = img[:, :, -1:, :] - img[:, :, -2:-1, :]"], [419, "        x_right = img[:, :, -1:, :] + img[:, :, -2:-1, :]"]]}, "xy_right": {"?": [[447, "        xy_right = K.concatenate([top_right, inner_right, bot_right], axis=1)"], [463, "        xy_right = K.concatenate([top_right, inner_right, bot_right], axis=1)"]]}, "xy_mid": {"?": [[442, "        xy_mid = K.concatenate([top_mid, mid_mid, bot_mid], axis=1)"], [458, "        xy_mid = K.concatenate([top_mid, mid_mid, bot_mid], axis=1)"]]}, "y_out": {"?": [[412, "        y_out = K.concatenate([y_top, y_inner, y_bot], axis=1)"], [428, "        y_out = K.concatenate([y_top, y_inner, y_bot], axis=1)"]]}, "y_top": {"?": [[409, "        y_top = img[:, 1:2, :, :] - img[:, 0:1, :, :]"], [425, "        y_top = img[:, 1:2, :, :] + img[:, 0:1, :, :]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.m": {"func": {"generalized_loss": {"(float, float, float, float) -> float / (?, ?, float, float) -> float": [[314, "def generalized_loss(y_true, y_pred, alpha=1.0, beta=1.0/255.0):"]]}, "gradient_loss": {"(?, ?) -> float": [[373, "def gradient_loss(y_true, y_pred):"]]}, "PenalizedLoss": {"(?, ?, float, float, None) -> ? -> ? / (Loss -> None, Loss -> None, float, float, None) -> (?, ?) -> None": [[229, "def PenalizedLoss(mask, loss_func,  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.extract_image_patch": {"var": {"strides": {"[int]": [[220, "        strides = [1, s_sizes[0], s_sizes[1], 1]"]]}, "input_tensor": {"?": [[223, "            input_tensor = K.permute_dimensions(input_tensor, (0, 2, 3, 1))"]]}}, "param": {"self": {"DSSIMObjective": [[197, "                              padding='same', data_format='channels_last'):"]]}, "s_sizes": {"[int]": [[197, "                              padding='same', data_format='channels_last'):"]]}, "input_tensor": {"?": [[197, "                              padding='same', data_format='channels_last'):"]]}, "k_sizes": {"[int]": [[197, "                              padding='same', data_format='channels_last'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.PenalizedLoss._scale_mask": {"var": {"size": {"int": [[267, "            size = round(1 / scaling)"]]}}, "param": {"scaling": {"float": [[251, "    def _scale_mask(mask, scaling):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.mod": {"func": {"mask_loss_wrapper": {"(?, None) -> (?, ?) -> None": [[24, "def mask_loss_wrapper(loss_func, preprocessing_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.scharr_edges": {"var": {"padded": {"None": [[538, "    padded = pad(image, pad_sizes, mode='REFLECT')"]]}, "output": {"?": [[539, "    output = K.depthwise_conv2d(padded, kernels)"], [544, "        output = K.reshape(output, shape=shape)"], [546, "        output = tf.atan(K.squeeze(output[:, :, :, :, 0] / output[:, :, :, :, 1], axis=None))"]]}, "matrix": {"?": [[506, "    matrix = np.array([[[[0.00070, 0.00070]],"]]}}, "param": {"image": {"?": [[482, "def scharr_edges(image, magnitude):"]]}, "magnitude": {"bool": [[482, "def scharr_edges(image, magnitude):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.scharr_edg": {"var": {"num_kernels": {"[int]": [[531, "    num_kernels = [2]"]]}, "kernels": {"?": [[532, "    kernels = K.constant(matrix, dtype='float32')"], [533, "    kernels = K.tile(kernels, [1, 1, image_shape[-1], 1])"]]}, "shape": {"?": [[543, "        shape = K.concatenate([image_shape, num_kernels], axis=0)"]]}, "pad_sizes": {"[[int]]": [[537, "    pad_sizes = [[0, 0], [2, 2], [2, 2], [0, 0]]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_b": {"var": {"gauss_kernel": {"None": [[620, "    gauss_kernel = _make_kernel(radius)"]], "?": [[621, "    gauss_kernel = gauss_kernel[:, :, np.newaxis, np.newaxis]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._diff_x": {"param": {"img": {"?": [[399, "    def _diff_x(img):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._diff_y": {"param": {"img": {"?": [[407, "    def _diff_y(img):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blur": {"func": {"_gaussian": {"(int, ?, int) -> None": [[607, "    def _gaussian(var_x, radius, sigma):"]]}, "func": {"? -> None": [[623, "    def func(input_tensor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.l_inf_nor": {"var": {"max_loss": {"?": [[368, "    max_loss = K.max(diff, axis=(1, 2), keepdims=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gmsd_": {"var": {"ephsilon": {"float": [[576, "    ephsilon = 0.0025"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.lo": {"func": {"scharr_edges": {"(?, ?) -> None / (?, bool) -> None": [[482, "def scharr_edges(image, magnitude):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.extract_image_": {"var": {"patches": {"?": [[224, "        patches = extract_image_patches(input_tensor, kernel, strides, [1, 1, 1, 1], padding)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gradient_loss._diff_yy": {"param": {"img": {"?": [[423, "    def _diff_yy(img):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blur.func": {"var": {"inputs": {"[?]": [[636, "        inputs = [input_tensor[:, :, :, i:i + 1] for i in range(K.int_shape(input_tensor)[-1])]"]]}, "outputs": {"[?]": [[637, "        outputs = [K.conv2d(inp, K.constant(gauss_kernel), strides=(1, 1), padding=\"same\")"]]}}, "param": {"input_tensor": {"?": [[623, "    def func(input_tensor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.generalized_": {"var": {"loss": {"float": [[347, "    loss = (K.abs(2.-alpha)/alpha) * second"], [348, "    loss = K.mean(loss, axis=-1) * beta"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.DSSIMObjective.__call__": {"var": {"denom": {"float": [[164, "        denom = (K.square(u_true) + K.square(u_pred) + self.c_1) * ("]]}, "kernel": {"[int]": [[138, "        kernel = [self.kernel_size, self.kernel_size]"]]}, "ssim": {"int": [[162, "        ssim = (2 * u_true * u_pred + self.c_1) * ("]]}}, "param": {"self": {"DSSIMObjective": [[117, "    def __call__(self, y_true, y_pred):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.losses.gaussian_blur._make_": {"var": {"kernel": {"?": [[617, "        kernel = np_kernel / np.sum(np_kernel)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/normalization.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.__init__": {"var": {"epsilon": {"float": [[59, "                 epsilon=1e-3,"]]}, "scale": {"bool": [[61, "                 scale=True,"]]}, "center": {"bool": [[60, "                 center=True,"]]}, "axis": {"None": [[58, "                 axis=None,"]]}}, "param": {"epsilon": {"float": [[68, "                 **kwargs):"]]}, "self": {"InstanceNormalization": [[68, "                 **kwargs):"]]}, "scale": {"bool": [[68, "                 **kwargs):"]]}, "center": {"bool": [[68, "                 **kwargs):"]]}, "axis": {"None": [[68, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalizatio": {"var": {"name": {"?": [[182, "for name, obj in inspect.getmembers(sys.modules[__name__]):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.get_": {"var": {"config": {"dict": [[165, "        config = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.__init": {"var": {"gamma_regularizer": {"None": [[65, "                 gamma_regularizer=None,"]]}}, "param": {"gamma_regularizer": {"None": [[68, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.__in": {"var": {"beta_regularizer": {"None": [[64, "                 beta_regularizer=None,"]]}}, "param": {"beta_regularizer": {"None": [[68, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalizatio": {"var": {"gamma_initializer": {"str": [[63, "                 gamma_initializer=\"ones\","]]}, "beta_initializer": {"str": [[62, "                 beta_initializer=\"zeros\","]]}}, "param": {"gamma_initializer": {"str": [[68, "                 **kwargs):"]]}, "beta_initializer": {"str": [[68, "                 **kwargs):"]]}}, "func": {"__init__": {"? -> ?": [[57, "    def __init__(self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormaliza": {"func": {"get_config": {"InstanceNormalization -> dict": [[164, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization": {"func": {"call": {"(InstanceNormalization, ?, None) -> float": [[127, "    def call(self, inputs, training=None):  # pylint:disable=arguments-differ,unused-argument"]]}, "build": {"(InstanceNormalization, ?) -> None": [[84, "    def build(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.get": {"var": {"base_config": {"?": [[177, "        base_config = super(InstanceNormalization, self).get_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.buil": {"var": {"ndim": {"int": [[95, "        ndim = len(input_shape)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.build": {"var": {"shape": {"int": [[105, "            shape = (1,)"]], "?": [[107, "            shape = (input_shape[self.axis],)"]]}}, "param": {"self": {"InstanceNormalization": [[84, "    def build(self, input_shape):"]]}, "input_shape": {"?": [[84, "    def build(self, input_shape):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.ca": {"param": {"self": {"InstanceNormalization": [[127, "    def call(self, inputs, training=None):  # pylint:disable=arguments-differ,unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormaliz": {"var": {"gamma_constraint": {"None": [[67, "                 gamma_constraint=None,"]]}, "beta_constraint": {"None": [[66, "                 beta_constraint=None,"]]}}, "param": {"gamma_constraint": {"None": [[68, "                 **kwargs):"]]}, "beta_constraint": {"None": [[68, "                 **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.call": {"var": {"broadcast_gamma": {"?": [[157, "            broadcast_gamma = K.reshape(self.gamma, broadcast_shape)"]]}, "normed": {"float": [[150, "        normed = (inputs - mean) / stddev"], [158, "            normed = normed * broadcast_gamma"], [161, "            normed = normed + broadcast_beta"]]}, "broadcast_shape": {"?": [[152, "        broadcast_shape = [1] * len(input_shape)"]]}, "input_shape": {"?": [[140, "        input_shape = K.int_shape(inputs)"]]}, "broadcast_beta": {"?": [[160, "            broadcast_beta = K.reshape(self.beta, broadcast_shape)"]]}, "stddev": {"float": [[149, "        stddev = K.std(inputs, reduction_axes, keepdims=True) + self.epsilon"]]}, "reduction_axes": {"list": [[141, "        reduction_axes = list(range(0, len(input_shape)))"]]}, "mean": {"?": [[148, "        mean = K.mean(inputs, reduction_axes, keepdims=True)"]]}}, "param": {"inputs": {"?": [[127, "    def call(self, inputs, training=None):  # pylint:disable=arguments-differ,unused-argument"]]}, "training": {"None": [[127, "    def call(self, inputs, training=None):  # pylint:disable=arguments-differ,unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.mod": {"class": {"InstanceNormalization": {"<InstanceNormalization>": [[13, "class InstanceNormalization(Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.normalization.InstanceNormalization.get_config": {"param": {"self": {"InstanceNormalization": [[164, "    def get_config(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/mask/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.dummy": {"param": {"self": {"Adjustment": [[70, "    def dummy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.proc": {"param": {"self": {"Adjustment": [[110, "    def process(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.__ini": {"param": {"mask_type": {"?": [[59, "    def __init__(self, mask_type, output_size, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base._get_": {"param": {"configfile": {"None": [[13, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.skip": {"param": {"self": {"Adjustment": [[77, "    def skip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._bas": {"var": {"logger": {"?": [[10, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "func": {"_get_config": {"(?, None) -> FaceswapConfig -> dict / (str, None) -> FaceswapConfig -> dict": [[13, "def _get_config(plugin_name, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment._set_": {"param": {"configfile": {"None": [[81, "    def _set_config(self, configfile, config):"]]}, "config": {"None": [[81, "    def _set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment._set_config": {"var": {"section": {"str": [[100, "        section = \".\".join(self.__module__.split(\".\")[-2:])"]]}, "retval": {"FaceswapConfig -> dict": [[102, "            retval = _get_config(section, configfile=configfile)"]], "?": [[105, "            retval = config.config_dict"]]}}, "param": {"self": {"Adjustment": [[81, "    def _set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment": {"func": {"process": {"Adjustment -> None": [[110, "    def process(self, *args, **kwargs):"]]}, "dummy": {"Adjustment -> None": [[70, "    def dummy(self):"]]}, "run": {"Adjustment -> None": [[119, "    def run(self, *args, **kwargs):"]]}, "skip": {"Adjustment -> bool": [[77, "    def skip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustm": {"func": {"_set_config": {"(Adjustment, ?, ?) -> FaceswapConfig -> dict / (Adjustment, None, None) -> FaceswapConfig -> dict": [[81, "    def _set_config(self, configfile, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._ba": {"class": {"Adjustment": {"<Adjustment>": [[33, "class Adjustment():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.__init__": {"param": {"self": {"Adjustment": [[59, "    def __init__(self, mask_type, output_size, configfile=None, config=None):"]]}, "config": {"None": [[59, "    def __init__(self, mask_type, output_size, configfile=None, config=None):"]]}, "configfile": {"None": [[59, "    def __init__(self, mask_type, output_size, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.__in": {"param": {"output_size": {"?": [[59, "    def __init__(self, mask_type, output_size, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustme": {"func": {"__init__": {"? -> ?": [[59, "    def __init__(self, mask_type, output_size, configfile=None, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base.Adjustment.run": {"var": {"retval": {"None": [[123, "        retval = self.process(*args, **kwargs)"]]}}, "param": {"self": {"Adjustment": [[119, "    def run(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask._base._get_conf": {"param": {"plugin_name": {"str": [[13, "def _get_config(plugin_name, configfile=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/queue_manager.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.debug_monitor": {"param": {"self": {"QueueManager": [[84, "    def debug_monitor(self, update_secs=2):"]]}, "update_secs": {"int": [[84, "    def debug_monitor(self, update_secs=2):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager": {"func": {"add_queue": {"(QueueManager, ?, int) -> None / (QueueManager, str, int) -> None / (QueueManager, str, Convert -> int) -> None": [[27, "    def add_queue(self, name, maxsize=0):"]]}, "flush_queue": {"(QueueManager, str) -> None / (QueueManager, <list>) -> None / (QueueManager, ?) -> None": [[77, "    def flush_queue(self, q_name):"]]}, "del_queue": {"(QueueManager, ?) -> None": [[43, "    def del_queue(self, name):"]]}, "get_queue": {"(QueueManager, ?, int) -> None / (QueueManager, str, int) -> None": [[49, "    def get_queue(self, name, maxsize=0):"]]}, "debug_queue_sizes": {"(QueueManager, ?) -> None": [[91, "    def debug_queue_sizes(self, update_secs):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self):"]]}, "flush_queues": {"QueueManager -> None": [[71, "    def flush_queues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.__init__": {"param": {"self": {"QueueManager": [[20, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.get_": {"var": {"queue": {"?": [[53, "        queue = self.queues.get(name, None)"], [56, "            queue = self.queues[name]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.debug_monito": {"var": {"thread": {"?": [[86, "        thread = threading.Thread(target=self.debug_queue_sizes,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.flush_queues": {"var": {"q_name": {"<list>": [[73, "        for q_name in self.queues.keys():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"var": {"queue_manager": {"QueueManager": [[102, "queue_manager = QueueManager()  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.flush_": {"var": {"queue": {"?": [[80, "        queue = self.queues[q_name]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.terminate_queu": {"param": {"self": {"QueueManager": [[60, "    def terminate_queues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_mana": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.add_queu": {"param": {"self": {"QueueManager": [[27, "    def add_queue(self, name, maxsize=0):"]]}, "maxsize": {"{Convert -> int | int}": [[27, "    def add_queue(self, name, maxsize=0):"]]}, "name": {"str": [[27, "    def add_queue(self, name, maxsize=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.flush_queu": {"param": {"self": {"QueueManager": [[71, "    def flush_queues(self):"], [77, "    def flush_queue(self, q_name):"]]}, "q_name": {"{<list> | str}": [[77, "    def flush_queue(self, q_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.del_queu": {"param": {"self": {"QueueManager": [[43, "    def del_queue(self, name):"]]}, "name": {"?": [[43, "    def del_queue(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.add_": {"var": {"queue": {"?": [[37, "        queue = Queue(maxsize=maxsize)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_m": {"class": {"QueueManager": {"<QueueManager>": [[16, "class QueueManager():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.terminate_queues": {"var": {"q_name": {"?": [[66, "        for q_name, queue in self.queues.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManag": {"func": {"terminate_queues": {"QueueManager -> None": [[60, "    def terminate_queues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.get_queu": {"param": {"self": {"QueueManager": [[49, "    def get_queue(self, name, maxsize=0):"]]}, "maxsize": {"int": [[49, "    def get_queue(self, name, maxsize=0):"]]}, "name": {"str": [[49, "    def get_queue(self, name, maxsize=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.debug_queue_sizes": {"var": {"name": {"?": [[97, "            for name in sorted(self.queues.keys()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueMana": {"func": {"debug_monitor": {"(QueueManager, int) -> None": [[84, "    def debug_monitor(self, update_secs=2):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.queue_manager.QueueManager.debug_queue_siz": {"param": {"self": {"QueueManager": [[91, "    def debug_queue_sizes(self, update_secs):"]]}, "update_secs": {"?": [[91, "    def debug_queue_sizes(self, update_secs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/mask/box_blend_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.box_blend_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for blending the edges of the swapped box with the background image\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dfaker.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfaker.Model.decode": {"var": {"var_y": {"?": [[44, "            var_y = input_"], [45, "            var_y = self.blocks.upscale(var_y, 512)"], [46, "            var_y = self.blocks.upscale(var_y, 256)"], [47, "            var_y = self.blocks.upscale(var_y, 128)"], [48, "            var_y = self.blocks.upscale(var_y, 64)"], [49, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[27, "        var_x = input_"], [29, "        var_x = self.blocks.upscale(var_x, 512, res_block_follows=True)"], [30, "        var_x = self.blocks.res_block(var_x, 512, kernel_initializer=self.kernel_initializer)"], [31, "        var_x = self.blocks.upscale(var_x, 256, res_block_follows=True)"], [32, "        var_x = self.blocks.res_block(var_x, 256, kernel_initializer=self.kernel_initializer)"], [33, "        var_x = self.blocks.upscale(var_x, 128, res_block_follows=True)"], [34, "        var_x = self.blocks.res_block(var_x, 128, kernel_initializer=self.kernel_initializer)"], [35, "        var_x = self.blocks.upscale(var_x, 64)"], [36, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfaker": {"class": {"Model": {"<Model>": [[13, "class Model(OriginalModel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfaker.Model": {"func": {"__init__": {"? -> ?": [[15, "    def __init__(self, *args, **kwargs):"]]}, "decoder": {"Model -> None": [[24, "    def decoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfaker.Model.__init__": {"param": {"self": {"Model": [[15, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfaker.Model.decoder": {"var": {"outputs": {"[?]": [[41, "        outputs = [var_x]"]]}, "input_": {"?": [[26, "        input_ = Input(shape=(8, 8, 512))"]]}}, "param": {"self": {"Model": [[24, "    def decoder(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/alignments.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.update_fac": {"param": {"self": {"Alignments": [[436, "    def update_face(self, frame_name, face_index, face):"]]}, "frame_name": {"str": [[436, "    def update_face(self, frame_name, face_index, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.A": {"func": {"_has_legacy_landmarks_list": {"Alignments -> int": [[630, "    def _has_legacy_landmarks_list(self):"]]}, "have_alignments_file": {"Alignments -> int": [[73, "    def have_alignments_file(self):"]]}, "_update_legacy_landmarks_list": {"Alignments -> None": [[644, "    def _update_legacy_landmarks_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.yield_faces": {"var": {"face_count": {"int": [[501, "            face_count = len(val[\"faces\"])"]]}, "frame_fullname": {"?": [[499, "        for frame_fullname, val in self._data.items():"]]}, "frame_name": {"str": [[500, "            frame_name = os.path.splitext(frame_fullname)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._get_": {"var": {"location": {"str": [[161, "        location = os.path.join(str(folder), filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frame_has_fac": {"param": {"self": {"{Alignments | Alignments}": [[280, "    def frame_has_faces(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_file_form": {"var": {"new_location": {"str": [[565, "        new_location = \"{}.{}\".format(os.path.splitext(old_location)[0],"]]}, "old_location": {"str": [[564, "        old_location = os.path.join(str(folder), filename)"]]}, "data": {"?": [[575, "                data = load_serializer.load(old_location)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.get_faces_in_fram": {"param": {"self": {"{AlignmentData | Alignments | Alignments}": [[348, "    def get_faces_in_frame(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frame_exists": {"var": {"retval": {"bool": [[276, "        retval = frame_name in self._data.keys()"]]}}, "param": {"frame_name": {"str": [[262, "    def frame_exists(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._count_faces_i": {"param": {"frame_name": {"?": [[365, "    def _count_faces_in_frame(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.have_alignments_fi": {"var": {"retval": {"int": [[76, "        retval = os.path.exists(self._file)"]]}}, "param": {"self": {"Alignments": [[73, "    def have_alignments_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frames_count": {"param": {"self": {"Alignments": [[49, "    def frames_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_legacy": {"var": {"updated": {"bool": [[511, "        updated = False"], [518, "            updated = True"], [522, "            updated = True"]]}}, "param": {"self": {"Alignments": [[508, "    def _update_legacy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._test_for_legacy": {"var": {"ext": {"str": [[540, "        for ext in (\".json\", \".p\", \".pickle\", \".yaml\"):"]]}, "_": {"str": [[544, "                _ = self._update_file_format(*os.path.split(legacy_filename))"]]}, "filename": {"str": [[539, "        filename = os.path.splitext(location)[0]"]]}}, "param": {"self": {"{AlignmentData | Alignments}": [[529, "    def _test_for_legacy(self, location):"]]}, "location": {"str": [[529, "    def _test_for_legacy(self, location):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._test_for": {"var": {"legacy_filename": {"str": [[541, "            legacy_filename = \"{}{}\".format(filename, ext)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frame_has_faces": {"var": {"retval": {"bool": [[295, "        retval = bool(self._data.get(frame_name, dict()).get(\"faces\", []))"]]}}, "param": {"frame_name": {"str": [[280, "    def frame_has_faces(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Al": {"func": {"get_faces_in_frame": {"(Alignments, ?) -> None / (Alignments, str) -> None / (AlignmentData, ?) -> None": [[348, "    def get_faces_in_frame(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._has_legacy_landmarks_lis": {"var": {"retval": {"int": [[639, "        retval = not all(isinstance(face[\"landmarks_xy\"], np.ndarray)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.add_": {"param": {"face": {"?": [[411, "    def add_face(self, frame_name, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._has_legacy_landmarksxy": {"var": {"retval": {"int": [[613, "        retval = (any(key == \"landmarksXY\""]]}}, "param": {"self": {"Alignments": [[604, "    def _has_legacy_landmarksxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.mask_summar": {"var": {"key": {"?": [[108, "                for key in face.get(\"mask\", dict()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._count_faces_in_fram": {"var": {"retval": {"int": [[379, "        retval = len(self._data.get(frame_name, dict()).get(\"faces\", []))"]]}}, "param": {"self": {"Alignments": [[365, "    def _count_faces_in_frame(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.yield_fac": {"param": {"self": {"Alignments": [[479, "    def yield_faces(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frame_exist": {"param": {"self": {"{Alignments | Alignments}": [[262, "    def frame_exists(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.updat": {"param": {"face_index": {"?": [[436, "    def update_face(self, frame_name, face_index, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.filter_hash": {"param": {"self": {"{Alignments | Alignments}": [[453, "    def filter_hashes(self, hash_list, filter_out=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.add_fac": {"var": {"retval": {"int": [[432, "        retval = self._count_faces_in_frame(frame_name) - 1"]]}}, "param": {"self": {"Alignments": [[411, "    def add_face(self, frame_name, face):"]]}, "frame_name": {"?": [[411, "    def add_face(self, frame_name, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.delete_face_at_index": {"param": {"self": {"Alignments": [[385, "    def delete_face_at_index(self, frame_name, face_index):"]]}, "frame_name": {"?": [[385, "    def delete_face_at_index(self, frame_name, face_index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.filter_hashe": {"param": {"hash_list": {"list": [[453, "    def filter_hashes(self, hash_list, filter_out=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.faces_count": {"param": {"self": {"Alignments": [[56, "    def faces_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.filter_hashes": {"var": {"idx": {"?": [[468, "            for idx, face in reversed(list(enumerate(val[\"faces\"]))):"]]}, "filename": {"?": [[467, "        for filename, val in self._data.items():"]]}}, "param": {"filter_out": {"bool": [[453, "    def filter_hashes(self, hash_list, filter_out=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._lo": {"var": {"data": {"?": [[186, "        data = self._serializer.load(self._file)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignment": {"func": {"yield_faces": {"Alignments -> None": [[479, "    def yield_faces(self):"]]}, "mask_is_valid": {"(Alignments, ?) -> int": [[322, "    def mask_is_valid(self, mask_type):"]]}, "_has_legacy_landmarksxy": {"Alignments -> int": [[604, "    def _has_legacy_landmarksxy(self):"]]}, "save": {"Alignments -> None": [[190, "    def save(self):"]]}, "mask_summary": {"Alignments -> dict": [[100, "    def mask_summary(self):"]]}, "frame_has_faces": {"(Alignments, str) -> bool / (Alignments, ?) -> bool": [[280, "    def frame_has_faces(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.update_": {"param": {"face": {"?": [[436, "    def update_face(self, frame_name, face_index, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignmen": {"func": {"_update_legacy_structure": {"Alignments -> None": [[595, "    def _update_legacy_structure(self):"]]}, "hashes_to_frame": {"Alignments -> dict": [[81, "    def hashes_to_frame(self):"]]}, "frame_exists": {"(Alignments, str) -> bool / (Alignments, ?) -> bool": [[262, "    def frame_exists(self, frame_name):"]]}, "_test_for_legacy": {"(AlignmentData, str) -> None / (Alignments, str) -> None / (Alignments, ?) -> None": [[529, "    def _test_for_legacy(self, location):"]]}, "filter_hashes": {"(Alignments, ?, bool) -> None / (Alignments, list, bool) -> None": [[453, "    def filter_hashes(self, hash_list, filter_out=False):"]]}, "_has_legacy_structure": {"Alignments -> int": [[582, "    def _has_legacy_structure(self):"]]}, "save_video_meta_data": {"(Alignments, ?, ?) -> None": [[217, "    def save_video_meta_data(self, pts_time, keyframes):"]]}, "frame_has_multiple_faces": {"(Alignments, ?) -> bool": [[299, "    def frame_has_multiple_faces(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.fi": {"param": {"self": {"Alignments": [[63, "    def file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.mask_is_valid": {"var": {"retval": {"int": [[339, "        retval = any([(face.get(\"mask\", None) is not None and"]]}}, "param": {"self": {"{Alignments | Alignments}": [[322, "    def mask_is_valid(self, mask_type):"]]}, "mask_type": {"?": [[322, "    def mask_is_valid(self, mask_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.save_video_meta_data": {"var": {"key": {"str": [[238, "            key = \"{}_{:06d}.png\".format(basename, idx + 1)"]]}, "idx": {"?": [[236, "        for idx, pts in enumerate(pts_time):"]]}}, "param": {"self": {"Alignments": [[217, "    def save_video_meta_data(self, pts_time, keyframes):"]]}, "pts_time": {"?": [[217, "    def save_video_meta_data(self, pts_time, keyframes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.a": {"class": {"Alignments": {"<Alignments>": [[17, "class Alignments():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frame_has_multiple_fac": {"param": {"self": {"Alignments": [[299, "    def frame_has_multiple_faces(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.faces_coun": {"var": {"retval": {"int": [[58, "        retval = sum(len(val[\"faces\"]) for val in self._data.values())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.save_video_meta_dat": {"var": {"sample_filename": {"?": [[232, "        sample_filename = next(fname for fname in self.data)"]]}, "basename": {"?": [[233, "        basename = sample_filename[:sample_filename.rfind(\"_\")]"]]}}, "param": {"keyframes": {"?": [[217, "    def save_video_meta_data(self, pts_time, keyframes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignm": {"func": {"faces_count": {"Alignments -> int": [[56, "    def faces_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.backup": {"var": {"src": {"str": [[210, "        src = self._file"]]}, "dst": {"str": [[212, "        dst = split[0] + \"_\" + now + split[1]"]]}, "now": {"str": [[209, "        now = datetime.now().strftime(\"%Y%m%d_%H%M%S\")"]]}}, "param": {"self": {"{AlignmentData | Alignments}": [[198, "    def backup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.video_meta_dat": {"var": {"keyframes": {"[?]": [[118, "        keyframes = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.hashes_to_fram": {"param": {"self": {"Alignments": [[81, "    def hashes_to_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.__init__": {"param": {"self": {"Alignments": [[36, "    def __init__(self, folder, filename=\"alignments\"):"]]}, "folder": {"str": [[36, "    def __init__(self, folder, filename=\"alignments\"):"]]}, "filename": {"str": [[36, "    def __init__(self, folder, filename=\"alignments\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.mask_summary": {"var": {"val": {"?": [[104, "        for val in self._data.values():"]]}, "masks": {"dict": [[103, "        masks = dict()"]]}, "face": {"?": [[105, "            for face in val[\"faces\"]:"]]}}, "param": {"self": {"Alignments": [[100, "    def mask_summary(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.save_video_meta_d": {"var": {"meta": {"dict": [[237, "            meta = dict(pts_time=pts, keyframe=idx in keyframes)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._has_legacy_structur": {"param": {"self": {"Alignments": [[582, "    def _has_legacy_structure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Ali": {"func": {"_update_legacy_landmarksxy": {"Alignments -> None": [[620, "    def _update_legacy_landmarksxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.delete_face_at": {"var": {"face_index": {"int": [[402, "        face_index = int(face_index)"]]}}, "param": {"face_index": {"?": [[385, "    def delete_face_at_index(self, frame_name, face_index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.video_meta_d": {"var": {"meta": {"?": [[122, "            meta = self.data[key][\"video_meta\"]"]]}, "retval": {"dict": [[116, "        retval = dict(pts_time=None, keyframes=None)"], [126, "        retval = dict(pts_time=pts_time, keyframes=keyframes)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._get_locatio": {"var": {"filename": {"str": [[153, "            filename = self._update_file_format(folder, filename)"], [158, "            filename = \"{}.{}\".format(noext_name, self._serializer.file_extension)"]]}}, "param": {"filename": {"str": [[131, "    def _get_location(self, folder, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_legacy_landmarks_list": {"var": {"val": {"?": [[647, "        for val in self._data.values():"]]}}, "param": {"self": {"Alignments": [[644, "    def _update_legacy_landmarks_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.hashes_to": {"var": {"frame_name": {"?": [[94, "            for frame_name, val in self._data.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments": {"func": {"video_meta_data": {"Alignments -> dict": [[113, "    def video_meta_data(self):"]]}, "delete_face_at_index": {"(Alignments, ?, ?) -> bool": [[385, "    def delete_face_at_index(self, frame_name, face_index):"]]}, "backup": {"AlignmentData -> None / Alignments -> None": [[198, "    def backup(self):"]]}, "add_face": {"(Alignments, ?, ?) -> int": [[411, "    def add_face(self, frame_name, face):"]]}, "_get_location": {"(Alignments, ?, ?) -> str / (Alignments, str, str) -> str / (Alignments, ?, str) -> str / (AlignmentData, ?, str) -> str": [[131, "    def _get_location(self, folder, filename):"]]}, "_update_file_format": {"(Alignments, ?, ?) -> str / (AlignmentData, str, str) -> str / (Alignments, str, str) -> str / (Alignments, ?, str) -> str / (AlignmentData, ?, str) -> str": [[548, "    def _update_file_format(self, folder, filename):"]]}, "__init__": {"? -> ?": [[36, "    def __init__(self, folder, filename=\"alignments\"):"]]}, "file": {"Alignments -> str": [[63, "    def file(self):"]]}, "update_face": {"(Alignments, ?, ?, ?) -> None / (Alignments, str, ?, ?) -> None": [[436, "    def update_face(self, frame_name, face_index, face):"]]}, "_update_legacy": {"Alignments -> None": [[508, "    def _update_legacy(self):"]]}, "data": {"Alignments -> None": [[68, "    def data(self):"]]}, "_load": {"AlignmentData -> None / Alignments -> None": [[172, "    def _load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_legacy_structur": {"var": {"key": {"?": [[598, "        for key, val in self._data.items():"]]}}, "param": {"self": {"Alignments": [[595, "    def _update_legacy_structure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alig": {"func": {"_count_faces_in_frame": {"(Alignments, ?) -> int": [[365, "    def _count_faces_in_frame(self, frame_name):"]]}, "frames_count": {"Alignments -> int": [[49, "    def frames_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._has_legacy_landmarks_list": {"param": {"self": {"Alignments": [[630, "    def _has_legacy_landmarks_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frame_has_multiple_faces": {"var": {"retval": {"bool": [[316, "            retval = False"], [318, "            retval = bool(len(self._data.get(frame_name, dict()).get(\"faces\", [])) > 1)"]]}}, "param": {"frame_name": {"?": [[299, "    def frame_has_multiple_faces(self, frame_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_legacy_landmarks_li": {"var": {"test": {"?": [[649, "                test = alignment[\"landmarks_xy\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_legacy_landmarksxy": {"var": {"alignment": {"?": [[624, "            for alignment in val[\"faces\"]:"]]}, "val": {"?": [[623, "        for val in self._data.values():"]]}, "update_count": {"int": [[622, "        update_count = 0"]]}}, "param": {"self": {"Alignments": [[620, "    def _update_legacy_landmarksxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_file_format": {"var": {"load_serializer": {"{_CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}": [[574, "                load_serializer = get_serializer_from_filename(old_location)"]]}}, "param": {"self": {"{AlignmentData | Alignments}": [[548, "    def _update_file_format(self, folder, filename):"]]}, "folder": {"str": [[548, "    def _update_file_format(self, folder, filename):"]]}, "filename": {"str": [[548, "    def _update_file_format(self, folder, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._has_legacy_structu": {"var": {"retval": {"int": [[591, "        retval = any(isinstance(val, list) for val in self._data.values())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.sav": {"param": {"self": {"{Alignments | Alignments}": [[190, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.frames_coun": {"var": {"retval": {"int": [[51, "        retval = len(self._data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._get_location": {"param": {"self": {"{AlignmentData | Alignments}": [[131, "    def _get_location(self, folder, filename):"]]}, "folder": {"str": [[131, "    def _get_location(self, folder, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.video_meta_data": {"var": {"pts_time": {"[?]": [[117, "        pts_time = []"]]}, "idx": {"?": [[119, "        for idx, key in enumerate(sorted(self.data)):"]]}}, "param": {"self": {"Alignments": [[113, "    def video_meta_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._update_legacy_landmarks_lis": {"var": {"alignment": {"?": [[648, "            for alignment in val[\"faces\"]:"]]}, "update_count": {"int": [[646, "        update_count = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._load": {"param": {"self": {"{AlignmentData | Alignments}": [[172, "    def _load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.filter_": {"var": {"hashset": {"?": [[466, "        hashset = set(hash_list)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.backu": {"var": {"split": {"(str, str)": [[211, "        split = os.path.splitext(src)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.data": {"param": {"self": {"Alignments": [[68, "    def data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.hashes_to_frame": {"var": {"idx": {"?": [[95, "                for idx, face in enumerate(val[\"faces\"]):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments": {"var": {"logger": {"?": [[14, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments._get_locati": {"var": {"noext_name": {"str": [[150, "        noext_name, extension = os.path.splitext(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.alignments.Alignments.get_faces_i": {"param": {"frame_name": {"str": [[348, "    def get_faces_in_frame(self, frame_name):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/_config.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.set_defaults": {"var": {"import_path": {"str": [[28, "            import_path = \".\".join(full_path_split(dirpath.replace(base_path, \"\"))[1:])"]]}, "plugin_type": {"str": [[29, "            plugin_type = import_path.split(\".\")[-1]"]]}, "current_dir": {"str": [[22, "        current_dir = os.path.dirname(__file__)"]]}, "filename": {"str": [[30, "            for filename in default_files:"]]}, "dirpath": {"str": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}, "param": {"_": {"str": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}, "dirpath": {"str": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.load_": {"var": {"module": {"str": [[37, "        module = os.path.splitext(filename)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.set_default": {"param": {"self": {"Config": [[19, "    def set_defaults(self):"]]}, "filenames": {"str": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._c": {"class": {"Config": {"<Config>": [[16, "class Config(FaceswapConfig):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.load_mod": {"param": {"plugin_type": {"str": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.set_defaul": {"var": {"base_path": {"str": [[27, "            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.load_modul": {"var": {"section": {"str": [[38, "        section = \".\".join((plugin_type, module.replace(\"_defaults\", \"\")))"]]}, "key": {"?": [[42, "        for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access"]]}}, "param": {"section": {"str": [[38, "        section = \".\".join((plugin_type, module.replace(\"_defaults\", \"\")))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config": {"var": {"default_files": {"[str]": [[24, "            default_files = [fname for fname in filenames if fname.endswith(\"_defaults.py\")]"]]}}, "param": {"module_path": {"str": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}}, "func": {"load_module": {"(Config, ?, ?, ?) -> None / (Config, str, str, str) -> None": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}, "set_defaults": {"Config -> None": [[19, "    def set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._confi": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.load_modu": {"param": {"self": {"Config": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}, "filename": {"str": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert._config.Config.load_module": {"var": {"mod": {"?": [[40, "        mod = import_module(\"{}.{}\".format(module_path, module))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/aligner.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.extract": {"var": {"padding": {"int": [[21, "        padding = int(size * 0.1875)"]]}}, "param": {"self": {"Extract": [[18, "    def extract(self, image, face, size):"]]}, "size": {"?": [[18, "    def extract(self, image, face, size):"]]}, "image": {"?": [[18, "    def extract(self, image, face, size):"]]}, "face": {"?": [[18, "    def extract(self, image, face, size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transform": {"var": {"interpolators": {"(?, ?)": [[40, "        interpolators = get_matrix_scaling(matrix)"]]}, "retval": {"?": [[41, "        retval = cv2.warpAffine(image, matrix, (size, size), flags=interpolators[0])"]]}}, "param": {"padding": {"int": [[36, "    def transform(self, image, mat, size, padding=0):"]]}, "self": {"Extract": [[36, "    def transform(self, image, mat, size, padding=0):"]]}, "size": {"int": [[36, "    def transform(self, image, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transfor": {"param": {"image": {"(?, ?)": [[36, "    def transform(self, image, mat, size, padding=0):"]]}, "mat": {"None": [[36, "    def transform(self, image, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"func": {"get_matrix_scaling": {"DetectedFace -> int -> (?, ?) / ? -> (?, ?) / int -> (?, ?) / None -> (?, ?)": [[107, "def get_matrix_scaling(mat):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.extrac": {"var": {"alignment": {"None": [[22, "        alignment = get_align_mat(face)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transform_points": {"var": {"retval": {"?": [[50, "        retval = np.squeeze(points)"]]}, "matrix": {"int": [[47, "        matrix = self.transform_matrix(mat, size, padding)"]]}}, "param": {"padding": {"int": [[44, "    def transform_points(self, points, mat, size, padding=0):"]]}, "mat": {"?": [[44, "    def transform_points(self, points, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.E": {"var": {"extracted": {"None": [[23, "        extracted = self.transform(image, alignment, size, padding)"]]}}, "func": {"extract": {"(Extract, ?, ?, ?) -> (None, None)": [[18, "    def extract(self, image, face, size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_featu": {"var": {"aligned_landmarks_68": {"?": [[72, "        aligned_landmarks_68 = np.expand_dims(aligned_landmarks_68, axis=1)"], [73, "        aligned_landmarks_68 = cv2.transform(aligned_landmarks_68,"], [76, "        aligned_landmarks_68 = np.squeeze(aligned_landmarks_68)"]]}}, "param": {"aligned_landmarks_68": {"?": [[65, "    def get_feature_mask(aligned_landmarks_68, size, padding=0, dilation=30):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.get_matrix_scaling": {"var": {"interpolators": {"(?, ?)": [[113, "        interpolators = cv2.INTER_CUBIC, cv2.INTER_AREA"], [115, "        interpolators = cv2.INTER_AREA, cv2.INTER_CUBIC"]]}, "x_scale": {"?": [[109, "    x_scale = np.sqrt(mat[0, 0] * mat[0, 0] + mat[0, 1] * mat[0, 1])"]]}, "y_scale": {"?": [[110, "    y_scale = (mat[0, 0] * mat[1, 1] - mat[0, 1] * mat[1, 0]) / x_scale"]]}}, "param": {"mat": {"{DetectedFace -> int | DetectedFace -> int | DetectedFace -> int | None | int}": [[107, "def get_matrix_scaling(mat):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligne": {"class": {"Extract": {"<Extract>": [[14, "class Extract():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transfo": {"var": {"matrix": {"{None | int}": [[39, "        matrix = self.transform_matrix(mat, size, padding)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transform_matrix": {"param": {"padding": {"int": [[28, "    def transform_matrix(mat, size, padding):"]]}, "mat": {"None": [[28, "    def transform_matrix(mat, size, padding):"]]}, "size": {"int": [[28, "    def transform_matrix(mat, size, padding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.align": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.get_align_mat": {"param": {"face": {"DetectedFace": [[120, "def get_align_mat(face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_feature_": {"var": {"mask": {"?": [[94, "        mask = np.zeros((size, size, 3), dtype=float)"], [101, "            mask = cv2.dilate(mask, kernel, iterations=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transform_": {"var": {"points": {"?": [[48, "        points = np.expand_dims(points, axis=1)"], [49, "        points = cv2.transform(points, matrix, points.shape)"]]}, "matrix": {"int": [[31, "        matrix = mat * (size - 2 * padding)"]]}}, "param": {"points": {"None": [[44, "    def transform_points(self, points, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner": {"func": {"get_align_mat": {"? -> None / DetectedFace -> None": [[120, "def get_align_mat(face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_original_roi": {"param": {"self": {"Extract": [[54, "    def get_original_roi(self, mat, size, padding=0):"]]}, "mat": {"?": [[54, "    def get_original_roi(self, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.get_align": {"var": {"mat_umeyama": {"?": [[122, "    mat_umeyama = umeyama(face.landmarks_xy[17:], True)[0:2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_feature_mas": {"var": {"kernel": {"?": [[100, "            kernel = np.ones((dilation, dilation), np.uint8)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_original_ro": {"var": {"matrix": {"int": [[57, "        matrix = self.transform_matrix(mat, size, padding)"]], "?": [[60, "        matrix = cv2.invertAffineTransform(matrix)"]]}}, "param": {"padding": {"int": [[54, "    def get_original_roi(self, mat, size, padding=0):"]]}, "size": {"?": [[54, "    def get_original_roi(self, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_feature_mask": {"var": {"l_brow_points": {"?": [[78, "        l_brow_points = aligned_landmarks_68[22:27].tolist()"]]}, "chin_points": {"?": [[82, "        chin_points = aligned_landmarks_68[8:11].tolist()"]]}, "scale": {"int": [[69, "        scale = size - 2 * padding"]]}, "r_eye_hull": {"?": [[91, "        r_eye_hull = cv2.convexHull(r_eye.reshape((-1, 2)))"]]}, "r_eye": {"?": [[87, "        r_eye = np.array(r_eye_points + r_brow_points).reshape((-1, 2)).astype('int32').flatten()"]]}, "pad_mat": {"?": [[71, "        pad_mat = np.matrix([[scale, 0.0, translation], [0.0, scale, translation]])"]]}, "r_brow_points": {"?": [[80, "        r_brow_points = aligned_landmarks_68[17:22].tolist()"]]}, "l_eye": {"?": [[86, "        l_eye = np.array(l_eye_points + l_brow_points).reshape((-1, 2)).astype('int32').flatten()"]]}, "r_eye_points": {"?": [[79, "        r_eye_points = aligned_landmarks_68[36:42].tolist()"]]}, "l_eye_points": {"?": [[77, "        l_eye_points = aligned_landmarks_68[42:48].tolist()"]]}, "mouth_points": {"?": [[83, "        mouth_points = aligned_landmarks_68[48:68].tolist()"]]}, "l_eye_hull": {"?": [[90, "        l_eye_hull = cv2.convexHull(l_eye.reshape((-1, 2)))"]]}, "nose_points": {"?": [[81, "        nose_points = aligned_landmarks_68[27:36].tolist()"]]}, "translation": {"int": [[70, "        translation = padding"]]}, "mouth_hull": {"?": [[92, "        mouth_hull = cv2.convexHull(mouth.reshape((-1, 2)))"]]}, "mouth": {"?": [[88, "        mouth = np.array(mouth_points + nose_points + chin_points)"], [89, "        mouth = mouth.reshape((-1, 2)).astype('int32').flatten()"]]}}, "param": {"padding": {"int": [[65, "    def get_feature_mask(aligned_landmarks_68, size, padding=0, dilation=30):"]]}, "dilation": {"int": [[65, "    def get_feature_mask(aligned_landmarks_68, size, padding=0, dilation=30):"]]}, "size": {"?": [[65, "    def get_feature_mask(aligned_landmarks_68, size, padding=0, dilation=30):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.get_original_r": {"var": {"points": {"?": [[58, "        points = np.array([[0, 0], [0, size - 1], [size - 1, size - 1], [size - 1, 0]], np.int32)"], [59, "        points = points.reshape((-1, 1, 2))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extract.transform_point": {"param": {"self": {"Extract": [[44, "    def transform_points(self, points, mat, size, padding=0):"]]}, "size": {"?": [[44, "    def transform_points(self, points, mat, size, padding=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.get_matrix_scalin": {"var": {"avg_scale": {"float": [[111, "    avg_scale = (x_scale + y_scale) * 0.5"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.aligner.Extrac": {"func": {"transform_matrix": {"(?, int, ?) -> int / (None, ?, int) -> None / (?, ?, int) -> int / (?, int, int) -> int / (?, ?, ?) -> int": [[28, "    def transform_matrix(mat, size, padding):"]]}, "get_feature_mask": {"(?, ?, int, int) -> None": [[65, "    def get_feature_mask(aligned_landmarks_68, size, padding=0, dilation=30):"]]}, "transform": {"(Extract, ?, ?, int, ?) -> None / (Extract, (?, ?), ?, ?, int) -> None / (Extract, None, ?, int, int) -> None / (Extract, (?, ?), ?, int, int) -> None / (Extract, ?, ?, ?, int) -> None / (Extract, ?, None, ?, int) -> None / (Extract, ?, ?, int, int) -> None": [[36, "    def transform(self, image, mat, size, padding=0):"]]}, "transform_points": {"(Extract, ?, ?, ?, int) -> None / (Extract, None, ?, ?, ?) -> None": [[44, "    def transform_points(self, points, mat, size, padding=0):"]]}, "get_original_roi": {"(Extract, ?, ?, ?) -> None / (Extract, ?, ?, int) -> None": [[54, "    def get_original_roi(self, mat, size, padding=0):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/original.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.encode": {"var": {"var_x": {"?": [[50, "        var_x = input_"], [51, "        var_x = self.blocks.conv(var_x, 128)"], [52, "        var_x = self.blocks.conv(var_x, 256)"], [53, "        var_x = self.blocks.conv(var_x, 512)"], [55, "            var_x = self.blocks.conv(var_x, 1024)"], [56, "        var_x = Dense(self.encoder_dim)(Flatten()(var_x))"], [57, "        var_x = Dense(4 * 4 * 1024)(var_x)"], [58, "        var_x = Reshape((4, 4, 1024))(var_x)"], [59, "        var_x = self.blocks.upscale(var_x, 512)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.add_network": {"param": {"self": {"Model": [[28, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.build_autoencoder": {"var": {"side": {"str": [[39, "        for side in (\"a\", \"b\"):"]]}}, "param": {"inputs": {"?": [[36, "    def build_autoencoders(self, inputs):"]]}, "self": {"Model": [[36, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.decode": {"var": {"var_y": {"?": [[77, "            var_y = input_"], [78, "            var_y = self.blocks.upscale(var_y, 256)"], [79, "            var_y = self.blocks.upscale(var_y, 128)"], [80, "            var_y = self.blocks.upscale(var_y, 64)"], [81, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[65, "        var_x = input_"], [66, "        var_x = self.blocks.upscale(var_x, 256)"], [67, "        var_x = self.blocks.upscale(var_x, 128)"], [68, "        var_x = self.blocks.upscale(var_x, 64)"], [69, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.decoder": {"var": {"outputs": {"[?]": [[74, "        outputs = [var_x]"]]}, "input_": {"?": [[64, "        input_ = Input(shape=(8, 8, 512))"]]}}, "param": {"self": {"Model": [[62, "    def decoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.origina": {"class": {"Model": {"<Model>": [[13, "class Model(ModelBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model": {"func": {"decoder": {"Model -> None": [[62, "    def decoder(self):"]]}, "add_networks": {"Model -> None": [[28, "    def add_networks(self):"]]}, "__init__": {"? -> ?": [[15, "    def __init__(self, *args, **kwargs):"]]}, "encoder": {"Model -> None": [[47, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.__init__": {"param": {"self": {"Model": [[15, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.M": {"func": {"build_autoencoders": {"(Model, ?) -> None": [[36, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.build_autoencoders": {"var": {"output": {"?": [[42, "            output = decoder(self.networks[\"encoder\"].network(inputs[0]))"]]}, "autoencoder": {"?": [[43, "            autoencoder = KerasModel(inputs, output)"]]}, "decoder": {"?": [[41, "            decoder = self.networks[\"decoder_{}\".format(side)].network"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.original.Model.encoder": {"var": {"input_": {"?": [[49, "        input_ = Input(shape=self.input_shape)"]]}}, "param": {"self": {"Model": [[47, "    def encoder(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/docs/conf.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.docs.conf": {"var": {"html_theme_options": {"dict": [[50, "html_theme_options = {"]]}, "autosummary_generate": {"bool": [[72, "autosummary_generate = True"]]}, "copyright": {"str": [[21, "copyright = '2019, faceswap.dev'"]]}, "templates_path": {"[str]": [[36, "templates_path = ['_templates']"]]}, "author": {"str": [[22, "author = 'faceswap.dev'"]]}, "exclude_patterns": {"[str]": [[41, "exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']"]]}, "project": {"str": [[20, "project = 'faceswap'"]]}, "html_logo": {"str": [[56, "html_logo = '_static/logo.png'"]]}, "extensions": {"[str]": [[33, "extensions = ['sphinx.ext.napoleon', \"sphinx.ext.autosummary\", ]"]]}, "latext_logo": {"str": [[57, "latext_logo = '_static/logo.png'"]]}, "html_static_path": {"[str]": [[62, "html_static_path = ['_static']"]]}, "html_theme": {"str": [[49, "html_theme = 'sphinx_rtd_theme'"]]}, "release": {"str": [[25, "release = '0.99'"]]}, "master_doc": {"str": [[70, "master_doc = 'index'"]]}, "html_context": {"dict": [[64, "html_context = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/manual_balance_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.manual_balance_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for manually altering the balance of colors of the swapped face\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/_travis/simple_tests.py": {".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.main": {"var": {"vid_extract": {"bool": [[142, "    vid_extract = run_test("]]}, "vid_path": {"str": [[138, "    vid_path = download_file(vid_src, pathjoin(vid_base, \"test.mp4\"))"]]}, "py_exe": {"str": [[135, "    py_exe = sys.executable"]]}, "img_base": {"str": [[132, "    img_base = pathjoin(base_dir, \"imgs\")"]]}, "img_path": {"str": [[147, "    img_path = download_file(img_src, pathjoin(img_base, \"test_img.jpg\"))"]]}, "vid_src": {"str": [[127, "    vid_src = \"https://faceswap.dev/data/test.mp4\""]]}, "vid_base": {"str": [[131, "    vid_base = pathjoin(base_dir, \"vid\")"]]}, "img_src": {"str": [[128, "    img_src = \"https://archive.org/download/GPN-2003-00070/GPN-2003-00070.jpg\""]]}, "base_dir": {"str": [[129, "    base_dir = pathjoin(expanduser(\"~\"), \"cache\", \"tests\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.sort_arg": {"param": {"sortby": {"str": [[116, "def sort_args(in_path, out_path, sortby=\"face\", groupby=\"hist\", method=\"rename\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.extract_": {"param": {"args": {"None": [[84, "def extract_args(detector, aligner, in_path, out_path, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.download_file": {"param": {"url": {"str": [[70, "def download_file(url, filename):  # TODO: retry"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_te": {"var": {"_sort_args": {"?": [[119, "    _sort_args = \"%s tools.py sort -i %s -o %s -s %s -fp %s -g %s -k\" % ("]]}}, "func": {"sort_args": {"(str, str, str, str, str) -> None": [[116, "def sort_args(in_path, out_path, sortby=\"face\", groupby=\"hist\", method=\"rename\"):"]]}, "print_status": {"str -> None / ? -> None": [[49, "def print_status(text):"]]}, "train_args": {"(str, str, str, str, int, int, str) -> None": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.train_args": {"var": {"py_exe": {"str": [[97, "    py_exe = sys.executable"]]}}, "param": {"model": {"str": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}, "model_path": {"str": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.extract_args": {"var": {"py_exe": {"str": [[86, "    py_exe = sys.executable"]]}}, "param": {"in_path": {"str": [[84, "def extract_args(detector, aligner, in_path, out_path, args=None):"]]}, "detector": {"str": [[84, "def extract_args(detector, aligner, in_path, out_path, args=None):"]]}, "aligner": {"str": [[84, "def extract_args(detector, aligner, in_path, out_path, args=None):"]]}, "out_path": {"str": [[84, "def extract_args(detector, aligner, in_path, out_path, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.print_colored": {"var": {"color": {"?": [[33, "    color = _COLORS.get(color, color)"]]}}, "param": {"color": {"str": [[28, "def print_colored(text, color=\"OK\", bold=False):"]]}, "text": {"str": [[28, "def print_colored(text, color=\"OK\", bold=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.print_ok": {"param": {"text": {"str": [[39, "def print_ok(text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests": {"var": {"FAIL_COUNT": {"int": [[17, "FAIL_COUNT = 0"]]}, "_COLORS": {"dict": [[19, "_COLORS = {"]]}, "TEST_COUNT": {"int": [[18, "TEST_COUNT = 0"]]}}, "func": {"main": {"() -> None": [[125, "def main():"]]}, "download_file": {"(str, str) -> str": [[70, "def download_file(url, filename):  # TODO: retry"]]}, "print_fail": {"? -> None / str -> None": [[44, "def print_fail(text):"]]}, "print_ok": {"? -> None / str -> None": [[39, "def print_ok(text):"]]}, "print_colored": {"(str, str, bool) -> None / (?, str, bool) -> None": [[28, "def print_colored(text, color=\"OK\", bold=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.print_fail": {"param": {"text": {"str": [[44, "def print_fail(text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simpl": {"var": {"_extract_args": {"?": [[87, "    _extract_args = \"%s faceswap.py extract -i %s -o %s -D %s -A %s\" % ("]]}}, "func": {"run_test": {"(str, (str, str, str, str, str, str, str, str, str)) -> bool / (str, None) -> bool": [[54, "def run_test(name, cmd):"]]}, "convert_args": {"(str, str, str, str, None) -> None": [[105, "def convert_args(in_path, out_path, model_path, writer, args=None):"]]}, "extract_args": {"(str, str, str, str, None) -> None": [[84, "def extract_args(detector, aligner, in_path, out_path, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.print_status": {"param": {"text": {"str": [[49, "def print_status(text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.train": {"param": {"extra_args": {"str": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.sort_args": {"var": {"py_exe": {"str": [[118, "    py_exe = sys.executable"]]}}, "param": {"in_path": {"str": [[116, "def sort_args(in_path, out_path, sortby=\"face\", groupby=\"hist\", method=\"rename\"):"]]}, "groupby": {"str": [[116, "def sort_args(in_path, out_path, sortby=\"face\", groupby=\"hist\", method=\"rename\"):"]]}, "out_path": {"str": [[116, "def sort_args(in_path, out_path, sortby=\"face\", groupby=\"hist\", method=\"rename\"):"]]}, "method": {"str": [[116, "def sort_args(in_path, out_path, sortby=\"face\", groupby=\"hist\", method=\"rename\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.train_arg": {"param": {"batchsize": {"int": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}, "iterations": {"int": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}, "faces": {"str": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.train_": {"var": {"args": {"?": [[98, "    args = \"%s faceswap.py train -A %s -ala %s -B %s -alb %s -m %s -t %s -bs %i -it %s %s\" % ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.convert": {"var": {"conv_args": {"?": [[108, "    conv_args = \"%s faceswap.py convert -i %s -o %s -m %s -w %s\" % ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.download_": {"param": {"filename": {"str": [[70, "def download_file(url, filename):  # TODO: retry"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.train_ar": {"param": {"alignments": {"str": [[95, "def train_args(model, model_path, faces, alignments, iterations=5, batchsize=8, extra_args=\"\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.convert_": {"param": {"args": {"None": [[105, "def convert_args(in_path, out_path, model_path, writer, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.convert_args": {"var": {"py_exe": {"str": [[107, "    py_exe = sys.executable"]]}}, "param": {"in_path": {"str": [[105, "def convert_args(in_path, out_path, model_path, writer, args=None):"]]}, "writer": {"str": [[105, "def convert_args(in_path, out_path, model_path, writer, args=None):"]]}, "model_path": {"str": [[105, "def convert_args(in_path, out_path, model_path, writer, args=None):"]]}, "out_path": {"str": [[105, "def convert_args(in_path, out_path, model_path, writer, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.m": {"var": {"was_trained": {"bool": [[136, "    was_trained = False"], [183, "        was_trained = run_test("]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.run_test": {"param": {"cmd": {"{(str, str, str, str, str, str, str, str, str) | None}": [[54, "def run_test(name, cmd):"]]}, "name": {"str": [[54, "def run_test(name, cmd):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.print_colore": {"param": {"bold": {"bool": [[28, "def print_colored(text, color=\"OK\", bold=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap._travis.simple_tests.download_fil": {"var": {"video": {"?": [[77, "        video, _ = urlretrieve(url, filename)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dfl_sae.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sa": {"class": {"Model": {"<Model>": [[14, "class Model(ModelBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.ae_dim": {"param": {"self": {"Model": [[37, "    def ae_dims(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.use_mask": {"param": {"self": {"Model": [[32, "    def use_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_liae_aut": {"var": {"encoder": {"?": [[76, "            encoder = self.networks[\"encoder\"].network(inputs[0])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Mod": {"func": {"multiscale_count": {"Model -> int": [[45, "    def multiscale_count(self):"]]}, "inter_liae": {"Model -> None": [[124, "    def inter_liae(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.multiscale_coun": {"var": {"retval": {"int": [[47, "        retval = 3 if self.config[\"multiscale_decoder\"] else 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.encoder_lia": {"param": {"self": {"Model": [[112, "    def encoder_liae(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.ae_dims": {"var": {"retval": {"int": [[41, "            retval = 256 if self.architecture == \"liae\" else 512"]], "?": [[39, "        retval = self.config[\"autoencoder_dims\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model": {"func": {"use_mask": {"Model -> None": [[32, "    def use_mask(self):"]]}, "add_networks": {"Model -> None": [[50, "    def add_networks(self):"]]}, "ae_dims": {"Model -> int": [[37, "    def ae_dims(self):"]]}, "architecture": {"Model -> None": [[27, "    def architecture(self):"]]}, "decoder": {"Model -> None": [[135, "    def decoder(self):"]]}, "__init__": {"? -> ?": [[16, "    def __init__(self, *args, **kwargs):"]]}, "encoder_df": {"Model -> None": [[96, "    def encoder_df(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.multiscale_count": {"param": {"self": {"Model": [[45, "    def multiscale_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_df_": {"var": {"autoencoder": {"?": [[93, "            autoencoder = KerasModel(inputs, output)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_liae_autoencoder": {"var": {"output": {"?": [[83, "            output = self.networks[\"decoder\"].network(intermediate)"]]}, "side": {"str": [[75, "        for side in (\"a\", \"b\"):"]]}}, "param": {"inputs": {"?": [[73, "    def build_liae_autoencoder(self, inputs):"]]}, "self": {"Model": [[73, "    def build_liae_autoencoder(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.decoder": {"var": {"outputs": {"list": [[142, "        outputs = list()"]]}, "dims": {"?": [[144, "        dims = self.input_shape[-1] * self.config[\"decoder_dims\"]"]]}, "input_shape": {"(int, int, int)": [[138, "            input_shape = np.array(self.networks[\"intermediate\"].output_shapes[0][1:]) * (1, 1, 2)"]], "?": [[140, "            input_shape = self.networks[\"encoder\"].output_shapes[0][1:]"]]}, "input_": {"?": [[141, "        input_ = Input(shape=input_shape)"]]}}, "param": {"self": {"Model": [[135, "    def decoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.inter_lia": {"var": {"lowest_dense_res": {"int": [[127, "        lowest_dense_res = self.input_shape[0] // 16"]]}}, "param": {"self": {"Model": [[124, "    def inter_liae(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.__init__": {"param": {"self": {"Model": [[16, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_liae_": {"var": {"autoencoder": {"?": [[84, "            autoencoder = KerasModel(inputs, output)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_df_autoen": {"var": {"decoder": {"?": [[91, "            decoder = self.networks[\"decoder_{}\".format(side)].network"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_liae_autoenco": {"var": {"intermediate": {"?": [[78, "                intermediate = Concatenate()([self.networks[\"intermediate\"].network(encoder),"], [81, "                intermediate = Concatenate()([self.networks[\"intermediate_b\"].network(encoder),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.add_network": {"var": {"decoder_sides": {"{[None] | [str]}": [[62, "        decoder_sides = [None] if self.architecture == \"liae\" else [\"a\", \"b\"]"]]}, "side": {"?": [[63, "        for side in decoder_sides:"]]}}, "param": {"self": {"Model": [[50, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.encoder_d": {"param": {"self": {"Model": [[96, "    def encoder_df(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.M": {"func": {"build_liae_autoencoder": {"(Model, ?) -> None": [[73, "    def build_liae_autoencoder(self, inputs):"]]}, "build_autoencoders": {"(Model, ?) -> None": [[67, "    def build_autoencoders(self, inputs):"]]}, "encoder_liae": {"Model -> None": [[112, "    def encoder_liae(self):"]]}, "build_df_autoencoder": {"(Model, ?) -> None": [[87, "    def build_df_autoencoder(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.inter_liae": {"var": {"input_": {"?": [[126, "        input_ = Input(shape=self.networks[\"encoder\"].output_shapes[0][1:])"]]}, "var_x": {"?": [[128, "        var_x = input_"], [129, "        var_x = Dense(self.ae_dims)(var_x)"], [130, "        var_x = Dense(lowest_dense_res * lowest_dense_res * self.ae_dims * 2)(var_x)"], [131, "        var_x = Reshape((lowest_dense_res, lowest_dense_res, self.ae_dims * 2))(var_x)"], [132, "        var_x = self.blocks.upscale(var_x, self.ae_dims * 2)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.decode": {"var": {"var_x1": {"?": [[147, "        var_x1 = self.blocks.upscale(var_x, dims * 8, res_block_follows=True)"], [148, "        var_x1 = self.blocks.res_block(var_x1, dims * 8)"], [149, "        var_x1 = self.blocks.res_block(var_x1, dims * 8)"]]}, "var_x2": {"?": [[157, "        var_x2 = self.blocks.upscale(var_x1, dims * 4, res_block_follows=True)"], [158, "        var_x2 = self.blocks.res_block(var_x2, dims * 4)"], [159, "        var_x2 = self.blocks.res_block(var_x2, dims * 4)"]]}, "var_x3": {"?": [[167, "        var_x3 = self.blocks.upscale(var_x2, dims * 2, res_block_follows=True)"], [168, "        var_x3 = self.blocks.res_block(var_x3, dims * 2)"], [169, "        var_x3 = self.blocks.res_block(var_x3, dims * 2)"]]}, "var_y": {"?": [[178, "            var_y = input_"], [179, "            var_y = self.blocks.upscale(var_y, self.config[\"decoder_dims\"] * 8)"], [180, "            var_y = self.blocks.upscale(var_y, self.config[\"decoder_dims\"] * 4)"], [181, "            var_y = self.blocks.upscale(var_y, self.config[\"decoder_dims\"] * 2)"], [182, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[145, "        var_x = input_"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.architectur": {"param": {"self": {"Model": [[27, "    def architecture(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.encoder_liae": {"var": {"dims": {"?": [[115, "        dims = self.input_shape[-1] * self.config[\"encoder_dims\"]"]]}, "input_": {"?": [[114, "        input_ = Input(shape=self.input_shape)"]]}, "var_x": {"?": [[116, "        var_x = input_"], [117, "        var_x = self.blocks.conv(var_x, dims)"], [118, "        var_x = self.blocks.conv(var_x, dims * 2)"], [119, "        var_x = self.blocks.conv(var_x, dims * 4)"], [120, "        var_x = self.blocks.conv(var_x, dims * 8)"], [121, "        var_x = Flatten()(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.encoder_df": {"var": {"dims": {"?": [[99, "        dims = self.input_shape[-1] * self.config[\"encoder_dims\"]"]]}, "var_x": {"?": [[101, "        var_x = input_"], [102, "        var_x = self.blocks.conv(var_x, dims)"], [103, "        var_x = self.blocks.conv(var_x, dims * 2)"], [104, "        var_x = self.blocks.conv(var_x, dims * 4)"], [105, "        var_x = self.blocks.conv(var_x, dims * 8)"], [106, "        var_x = Dense(self.ae_dims)(Flatten()(var_x))"], [107, "        var_x = Dense(lowest_dense_res * lowest_dense_res * self.ae_dims)(var_x)"], [108, "        var_x = Reshape((lowest_dense_res, lowest_dense_res, self.ae_dims))(var_x)"], [109, "        var_x = self.blocks.upscale(var_x, self.ae_dims)"]]}, "input_": {"?": [[98, "        input_ = Input(shape=self.input_shape)"]]}, "lowest_dense_res": {"int": [[100, "        lowest_dense_res = self.input_shape[0] // 16"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_autoencoder": {"param": {"inputs": {"?": [[67, "    def build_autoencoders(self, inputs):"]]}, "self": {"Model": [[67, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_sae.Model.build_df_autoencoder": {"var": {"output": {"?": [[92, "            output = decoder(self.networks[\"encoder\"].network(inputs[0]))"]]}, "side": {"str": [[89, "        for side in (\"a\", \"b\"):"]]}}, "param": {"inputs": {"?": [[87, "    def build_df_autoencoder(self, inputs):"]]}, "self": {"Model": [[87, "    def build_df_autoencoder(self, inputs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/mtcnn_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[53, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.calculate_coverage_ratio": {"param": {"self": {"ModelBase": [[232, "    def calculate_coverage_ratio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Stat": {"func": {"new_session_id": {"State -> int": [[917, "    def new_session_id(self):"]]}, "loss_names": {"State -> None": [[903, "    def loss_names(self):"]]}, "mask_shapes": {"State -> [tuple]": [[898, "    def mask_shapes(self):"]]}, "add_session_loss_names": {"(State, ?, ?) -> None / (State, ?, [str]) -> None": [[937, "    def add_session_loss_names(self, side, loss_names):"]]}, "replace_config": {"(State, ?) -> None / (State, ModelBase -> FaceswapConfig -> dict) -> None": [[984, "    def replace_config(self, config_changeable_items):"]]}, "save": {"(State, None) -> None": [[969, "    def save(self, backup_func=None):"]]}, "face_shapes": {"State -> [tuple]": [[893, "    def face_shapes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSavings.__init__": {"param": {"self": {"VRAMSavings": [[602, "    def __init__(self, pingpong, optimizer_savings, memory_saving_gradients):"]]}, "pingpong": {"?": [[602, "    def __init__(self, pingpong, optimizer_savings, memory_saving_gradients):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBas": {"func": {"converter": {"(ModelBase, ?) -> None": [[389, "    def converter(self, swap):"]]}, "calculate_coverage_ratio": {"ModelBase -> int": [[232, "    def calculate_coverage_ratio(self):"]]}, "get_optimizer": {"(ModelBase, float, float, float) -> Adam": [[374, "    def get_optimizer(self, lr=5e-5, beta_1=0.5, beta_2=0.999):  # pylint: disable=invalid-name"]]}, "add_predictor": {"(Model, str, ?) -> None / (ModelBase, ?, ?) -> None": [[320, "    def add_predictor(self, side, model):"]]}, "add_network": {"(Model, str, None, None, ?) -> ? / (Model, str, str, None, ?) -> None / (Model, str, ?, None, ?) -> None / (Model, str, None, None, ?) -> None / (Model, str, None, ?, ?) -> None": [[302, "    def add_network(self, network_type, side, network, is_output=False):"]]}, "rename_legacy": {"ModelBase -> None": [[544, "    def rename_legacy(self):"]]}, "name": {"ModelBase -> str": [[152, "    def name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSavings": {"func": {"__init__": {"? -> ?": [[602, "    def __init__(self, pingpong, optimizer_savings, memory_saving_gradients):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.store_input_shap": {"param": {"self": {"{Model | Model | Model | Model | ModelBase}": [[330, "    def store_input_shapes(self, model):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.save_mod": {"param": {"self": {"ModelBase": [[463, "    def save_models(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.should_": {"var": {"backup": {"None": [[523, "                backup = self.check_loss_drop(side, loss)"]], "?": [[509, "        backup = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.__init": {"var": {"no_logs": {"?": [[871, "                 no_logs, pingpong, training_image_size):"]]}}, "param": {"no_logs": {"?": [[871, "                 no_logs, pingpong, training_image_size):"]]}, "model_name": {"ModelBase -> str": [[871, "                 no_logs, pingpong, training_image_size):"]]}, "model_dir": {"?": [[871, "                 no_logs, pingpong, training_image_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNM": {"var": {"output_names": {"[str]": [[816, "            output_names = self.get_output_names()"]], "[?]": [[812, "        output_names = [output.name for output in self.network.outputs]"]]}}, "func": {"set_name": {"NNMeta -> str": [[802, "    def set_name(self):"]]}, "convert_legacy_weights": {"NNMeta -> None": [[860, "    def convert_legacy_weights(self):"]]}, "output_names": {"NNMeta -> {[?] | [str]}": [[810, "    def output_names(self):"]]}, "output_shapes": {"NNMeta -> [?]": [[798, "    def output_shapes(self):"]]}, "get_output_names": {"NNMeta -> [str]": [[819, "    def get_output_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBa": {"func": {"multiple_models_in_folder": {"ModelBase -> bool": [[167, "    def multiple_models_in_folder(self):"]]}, "get_inputs": {"ModelBase -> [?]": [[261, "    def get_inputs(self):"]]}, "config_section": {"ModelBase -> str": [[129, "    def config_section(self):"]]}, "models_exist": {"ModelBase -> int": [[160, "    def models_exist(self):"]]}, "reset_pingpong": {"ModelBase -> None": [[342, "    def reset_pingpong(self):"]]}, "check_loss_drop": {"(ModelBase, ?, ?) -> None": [[536, "    def check_loss_drop(self, side, avg):"]]}, "compile_predictors": {"(ModelBase, ?) -> None": [[360, "    def compile_predictors(self, initialize=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get_loss_functions": {"var": {"idx": {"?": [[749, "        for idx, loss_name in enumerate(self.names):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.__ini": {"var": {"augment_color": {"?": [[43, "                 augment_color=True,"]]}, "warp_to_landmarks": {"?": [[42, "                 warp_to_landmarks=False,"]]}}, "param": {"augment_color": {"?": [[54, "                 predict=False):"]]}, "warp_to_landmarks": {"?": [[54, "                 predict=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.map_mod": {"param": {"self": {"ModelBase": [[406, "    def map_models(self, swapped):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.__init": {"var": {"encoder_dim": {"None": [[49, "                 encoder_dim=None,"]]}, "preview_scale": {"int": [[47, "                 preview_scale=100,"]]}, "no_logs": {"?": [[41, "                 no_logs=False,"]]}, "model_dir": {"?": [[37, "                 model_dir,"]]}, "no_flip": {"?": [[44, "                 no_flip=False,"]]}}, "param": {"encoder_dim": {"None": [[54, "                 predict=False):"]]}, "preview_scale": {"int": [[54, "                 predict=False):"]]}, "no_logs": {"?": [[54, "                 predict=False):"]]}, "model_dir": {"?": [[54, "                 predict=False):"]]}, "no_flip": {"?": [[54, "                 predict=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.multiple_models_in_fold": {"var": {"retval": {"bool": [[170, "        retval = False if not model_files else os.path.commonprefix(model_files) == \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.map_models": {"var": {"network": {"<list>": [[411, "        for network in self.networks.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.largest_mask_index": {"var": {"retval": {"?": [[213, "        retval = [idx for idx, shape in enumerate(self.output_shapes)"]]}, "sizes": {"[?]": [[209, "        sizes = [shape[1] for shape in self.output_shapes if shape[2] == 1]"]]}}, "param": {"self": {"ModelBase": [[204, "    def largest_mask_index(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.calculate_coverage_rat": {"var": {"cropped_size": {"int": [[236, "        cropped_size = (self.state.training_size * coverage_ratio) // 2 * 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.models_exist": {"param": {"self": {"ModelBase": [[160, "    def models_exist(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta": {"func": {"__init__": {"? -> ?": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.selected_loss": {"var": {"retval": {"?": [[688, "        retval = self.loss_dict[self.config.get(\"loss_function\", \"mae\")]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.largest_face_ind": {"var": {"max_face": {"int": [[197, "        max_face = max(sizes)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.largest_mask_inde": {"var": {"max_mask": {"int": [[212, "        max_mask = max(sizes)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.mask_shap": {"param": {"self": {"State": [[898, "    def mask_shapes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.save": {"var": {"fullpath": {"str": [[853, "        fullpath = fullpath if fullpath else self.filename"]]}}, "param": {"backup_func": {"None": [[851, "    def save(self, fullpath=None, backup_func=None):"]]}, "fullpath": {"None": [[851, "    def save(self, fullpath=None, backup_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.save": {"param": {"backup_func": {"None": [[969, "    def save(self, backup_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.add": {"param": {"network_type": {"str": [[302, "    def add_network(self, network_type, side, network, is_output=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.add_session_loss_nam": {"param": {"self": {"State": [[937, "    def add_session_loss_names(self, side, loss_names):"]]}, "side": {"?": [[937, "    def add_session_loss_names(self, side, loss_names):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.mask_shap": {"param": {"self": {"Loss": [[717, "    def mask_shape(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._b": {"class": {"ModelBase": {"<ModelBase>": [[34, "class ModelBase():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.config_section": {"var": {"retval": {"str": [[131, "        retval = \".\".join(self.__module__.split(\".\")[-2:])"]]}}, "param": {"self": {"ModelBase": [[129, "    def config_section(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.update_changed": {"param": {"config_changeable_items": {"ModelBase -> FaceswapConfig -> dict": [[1062, "    def update_changed_config_items(self, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Lo": {"var": {"mask_inputs": {"[?]": [[711, "        mask_inputs = [inp for inp in self.inputs if inp.name.startswith(\"mask\")]"]]}}, "func": {"mask_shape": {"Loss -> None": [[717, "    def mask_shape(self):"]]}, "mask_input": {"Loss -> None": [[709, "    def mask_input(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.output_nam": {"param": {"self": {"NNMeta": [[810, "    def output_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get": {"var": {"loss_names": {"[str]": [[732, "            loss_names = self.update_loss_names()"], [733, "        loss_names = [\"{}_loss\".format(name) for name in loss_names]"]], "[?]": [[727, "        loss_names = [name[name.find(\"/\") + 1:name.rfind(\"/\")].replace(\"_out\", \"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_save_average": {"var": {"avgs": {"dict": [[491, "        avgs = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.do_snapshot": {"param": {"self": {"ModelBase": [[432, "    def do_snapshot(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.selected_mask_lo": {"param": {"self": {"Loss": [[693, "    def selected_mask_loss(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.config": {"param": {"self": {"Loss": [[672, "    def config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.create_new": {"param": {"config_changeable_items": {"ModelBase -> FaceswapConfig -> dict": [[926, "    def create_new_session(self, no_logs, pingpong, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.selected_lo": {"param": {"self": {"Loss": [[686, "    def selected_loss(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.update_loss_nam": {"var": {"output_types": {"[str]": [[739, "        output_types = [\"mask\" if shape[-1] == 1 else \"face\" for shape in self.output_shapes]"]]}}, "param": {"self": {"Loss": [[737, "    def update_loss_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.selected_mask": {"var": {"loss_func": {"?": [[697, "        loss_func = self.loss_dict[\"mse\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.build": {"var": {"msg": {"str": [[250, "                msg = (\"There was an error loading saved weights. This is most likely due to \""]]}, "inputs": {"[?]": [[245, "        inputs = self.get_inputs()"]]}}, "param": {"self": {"ModelBase": [[241, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.nam": {"var": {"retval": {"str": [[155, "        retval = os.path.splitext(basename)[0].lower()"]]}}, "param": {"self": {"ModelBase": [[152, "    def name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.add_session_": {"param": {"batchsize": {"?": [[942, "    def add_session_batchsize(self, batchsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.rep": {"param": {"config_changeable_items": {"ModelBase -> FaceswapConfig -> dict": [[984, "    def replace_config(self, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.load": {"var": {"fullpath": {"str": [[831, "        fullpath = fullpath if fullpath else self.filename"]]}, "network": {"?": [[834, "            network = load_model(self.filename, custom_objects=get_custom_objects())"]]}}, "param": {"self": {"NNMeta": [[829, "    def load(self, fullpath=None):"]]}, "fullpath": {"None": [[829, "    def load(self, fullpath=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.create_new_sessi": {"param": {"no_logs": {"?": [[926, "    def create_new_session(self, no_logs, pingpong, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.config_changeable_item": {"param": {"self": {"ModelBase": [[146, "    def config_changeable_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.g": {"var": {"output_names": {"[str]": [[823, "        output_names = [\"{}{}\".format(name,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.load_config": {"var": {"model_name": {"ModelBase -> str": [[228, "            model_name = self.config_section"]]}}, "param": {"self": {"ModelBase": [[224, "    def load_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.log_summary": {"var": {"side": {"?": [[423, "        for side in sorted(list(self.predictors.keys())):"]]}, "name": {"?": [[426, "            for name, nnmeta in self.networks.items():"]]}}, "param": {"self": {"ModelBase": [[419, "    def log_summary(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.load_mod": {"param": {"self": {"ModelBase": [[438, "    def load_models(self, swapped):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get_loss_function": {"var": {"face_size": {"?": [[753, "                face_size = self.output_shapes[idx][1]"]]}, "mask_size": {"?": [[754, "                mask_size = self.mask_shape[1]"]]}}, "param": {"self": {"Loss": [[746, "    def get_loss_functions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base": {"var": {"_CONFIG": {"{FaceswapConfig -> dict | dict}": [[31, "_CONFIG = None"]]}}, "class": {"VRAMSavings": {"<VRAMSavings>": [[600, "class VRAMSavings():"]]}, "Loss": {"<Loss>": [[645, "class Loss():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.build_autoencoder": {"param": {"inputs": {"[?]": [[274, "    def build_autoencoders(self, inputs):"]]}, "self": {"ModelBase": [[274, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.current_session": {"param": {"self": {"State": [[908, "    def current_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.save_model": {"var": {"msg": {"str": [[479, "        msg = \"[Saved models]\""]]}, "save_averages": {"dict": [[468, "        save_averages = self.get_save_averages()"]]}, "save_threads": {"[?]": [[473, "        save_threads = [executor.submit(network.save, backup_func=backup_func)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_inputs": {"var": {"output_network": {"<list>": [[265, "        output_network = [network for network in self.networks.values() if network.is_output][0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.config": {"var": {"model_name": {"ModelBase -> str": [[140, "            model_name = self.config_section"]]}}, "param": {"self": {"ModelBase": [[136, "    def config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.new": {"var": {"session_id": {"int": [[920, "            session_id = 1"], [922, "            session_id = max(int(key) for key in self.sessions.keys()) + 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.new_session_id": {"param": {"self": {"State": [[917, "    def new_session_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.add_sessi": {"param": {"loss_names": {"[str]": [[937, "    def add_session_loss_names(self, side, loss_names):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.load_model": {"param": {"swapped": {"?": [[438, "    def load_models(self, swapped):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.update_changed_config_item": {"param": {"self": {"State": [[1062, "    def update_changed_config_items(self, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.store_input_shapes": {"param": {"model": {"?": [[330, "    def store_input_shapes(self, model):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.update_changed_config_items": {"var": {"old_val": {"?": [[1068, "            old_val = self.config[key]"]]}, "key": {"?": [[1067, "        for key, val in config_changeable_items.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State": {"func": {"load": {"(State, ?) -> None / (State, ModelBase -> FaceswapConfig -> dict) -> None": [[952, "    def load(self, config_changeable_items):"]]}, "first_run": {"State -> bool": [[913, "    def first_run(self):"]]}, "__init__": {"? -> ?": [[870, "    def __init__(self, model_dir, model_name, config_changeable_items,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.r": {"var": {"legacy_mapping": {"dict": [[547, "        legacy_mapping = {\"iae\": [(\"IAE_decoder.h5\", \"iae_decoder.h5\"),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.sav": {"param": {"self": {"NNMeta": [[851, "    def save(self, fullpath=None, backup_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.L": {"var": {"loss_dict": {"dict": [[661, "        loss_dict = dict(mae=losses.mean_absolute_error,"]]}}, "func": {"get_loss_functions": {"Loss -> [{(?, ?) -> None | Loss -> (?, ?) -> None | Loss -> None}]": [[746, "    def get_loss_functions(self):"]]}, "get_loss_names": {"Loss -> [str]": [[723, "    def get_loss_names(self):"]]}, "loss_dict": {"Loss -> dict": [[659, "    def loss_dict(self):"]]}, "selected_loss": {"Loss -> None": [[686, "    def selected_loss(self):"]]}, "update_loss_names": {"Loss -> [str]": [[737, "    def update_loss_names(self):"]]}, "output_shapes": {"Loss -> [?]": [[704, "    def output_shapes(self):"]]}, "selected_mask_loss": {"Loss -> (?, ?) -> None": [[693, "    def selected_mask_loss(self):"]]}, "mask_preprocessing_func": {"Loss -> ? -> None": [[677, "    def mask_preprocessing_func(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._bas": {"var": {"logger": {"?": [[30, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"State": {"<State>": [[868, "class State():"]]}, "NNMeta": {"<NNMeta>": [[768, "class NNMeta():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSavings.set_pingpong": {"param": {"self": {"VRAMSavings": [[612, "    def set_pingpong(self, pingpong):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_": {"var": {"inputs": {"[?]": [[264, "        inputs = [Input(shape=self.input_shape, name=\"face_in\")]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.set_nam": {"param": {"self": {"NNMeta": [[802, "    def set_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.create_new_session": {"param": {"self": {"State": [[926, "    def create_new_session(self, no_logs, pingpong, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get_l": {"var": {"output_names": {"[?]": [[725, "        output_names = [output.name for output in self.outputs]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get_loss_functio": {"var": {"scaling": {"?": [[755, "                scaling = face_size / mask_size"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.__init__": {"var": {"trainer": {"str": [[50, "                 trainer=\"original\","]]}, "gpus": {"int": [[38, "                 gpus=1,"]]}, "configfile": {"None": [[39, "                 configfile=None,"]]}, "predict": {"?": [[54, "                 predict=False):"]]}, "pingpong": {"?": [[51, "                 pingpong=False,"]]}}, "param": {"trainer": {"str": [[54, "                 predict=False):"]]}, "predict": {"?": [[54, "                 predict=False):"]]}, "self": {"ModelBase": [[54, "                 predict=False):"]]}, "pingpong": {"?": [[54, "                 predict=False):"]]}, "configfile": {"None": [[54, "                 predict=False):"]]}, "gpus": {"int": [[54, "                 predict=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.S": {"param": {"training_image_size": {"int": [[871, "                 no_logs, pingpong, training_image_size):"]]}, "config_changeable_items": {"ModelBase -> FaceswapConfig -> dict": [[871, "                 no_logs, pingpong, training_image_size):"]]}}, "func": {"update_changed_config_items": {"(State, ?) -> None / (State, ModelBase -> FaceswapConfig -> dict) -> None": [[1062, "    def update_changed_config_items(self, config_changeable_items):"]]}, "increment_iterations": {"State -> None": [[947, "    def increment_iterations(self):"]]}, "add_session_batchsize": {"(State, ?) -> None": [[942, "    def add_session_batchsize(self, batchsize):"]]}, "create_new_session": {"(State, ?, ?, ?) -> None / (State, ?, None, ModelBase -> FaceswapConfig -> dict) -> None": [[926, "    def create_new_session(self, no_logs, pingpong, config_changeable_items):"]]}, "_update_legacy_config": {"State -> None": [[1003, "    def _update_legacy_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.updat": {"var": {"loss_names": {"[str]": [[740, "        loss_names = [\"{}{}\".format(name,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.add_session_batchsiz": {"param": {"self": {"State": [[942, "    def add_session_batchsize(self, batchsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.__init__": {"var": {"filename": {"str": [[877, "        filename = \"{}_state.{}\".format(model_name, self.serializer.file_extension)"]]}}, "param": {"self": {"State": [[871, "                 no_logs, pingpong, training_image_size):"]]}, "pingpong": {"None": [[871, "                 no_logs, pingpong, training_image_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.__ini": {"param": {"network_type": {"str": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.__init__": {"param": {"network": {"None": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}, "self": {"NNMeta": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}, "side": {"str": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}, "filename": {"str": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get_loss_functi": {"var": {"loss_funcs": {"[{(?, ?) -> None | Loss -> (?, ?) -> None | Loss -> None}]": [[748, "        loss_funcs = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.set_": {"var": {"name": {"str": [[804, "        name = self.type"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.save_models": {"var": {"backup_func": {"? -> None": [[469, "        backup_func = self.backup.backup_model if self.should_backup(save_averages) else None"]]}, "_": {"[?]": [[478, "        _ = [thread.result() for thread in save_threads]"]]}, "executor": {"?": [[472, "        executor = futures.ThreadPoolExecutor()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.feed_mask": {"param": {"self": {"ModelBase": [[219, "    def feed_mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.converter": {"var": {"model": {"?": [[393, "        model = self.predictors[side]"]]}, "side": {"str": [[392, "        side = \"a\" if swap else \"b\""]]}}, "param": {"self": {"ModelBase": [[389, "    def converter(self, swap):"]]}, "swap": {"?": [[389, "    def converter(self, swap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.sav": {"var": {"state": {"dict": [[974, "        state = {\"name\": self.name,"]]}}, "param": {"self": {"State": [[969, "    def save(self, backup_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss": {"func": {"config": {"Loss -> {FaceswapConfig -> dict | dict}": [[672, "    def config(self):"]]}, "__init__": {"? -> ?": [[647, "    def __init__(self, inputs, outputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.largest_face_index": {"var": {"retval": {"?": [[198, "        retval = [idx for idx, shape in enumerate(self.output_shapes)"]]}, "sizes": {"[?]": [[194, "        sizes = [shape[1] for shape in self.output_shapes if shape[2] == 3]"]]}}, "param": {"self": {"ModelBase": [[189, "    def largest_face_index(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSavings.set_": {"var": {"pingpong": {"?": [[616, "            pingpong = False"]]}}, "param": {"pingpong": {"?": [[612, "    def set_pingpong(self, pingpong):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State._update_legacy_config": {"var": {"priors": {"[str]": [[1025, "        priors = [\"dssim_loss\", \"mask_type\", \"mask_type\"]"]]}, "updated": {"?": [[1027, "        updated = False"], [1037, "                updated = True"], [1045, "                updated = True"], [1055, "                updated = True"]]}, "old_mask": {"?": [[1053, "                old_mask = self.config[old]"]]}, "new_items": {"[str]": [[1026, "        new_items = [\"loss_function\", \"learn_mask\", \"mask_type\"]"]]}}, "param": {"self": {"State": [[1003, "    def _update_legacy_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.calcul": {"var": {"coverage_ratio": {"int": [[234, "        coverage_ratio = self.config.get(\"coverage\", 62.5) / 100"], [237, "        coverage_ratio = cropped_size / self.state.training_size"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.map_model": {"var": {"sides": {"(str, str)": [[410, "        sides = (\"a\", \"b\") if not swapped else (\"b\", \"a\")"]]}}, "param": {"swapped": {"?": [[406, "    def map_models(self, swapped):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.load_models": {"var": {"model_mapping": {"dict": [[451, "        model_mapping = self.map_models(swapped)"]]}, "network": {"<list>": [[452, "        for network in self.networks.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.output_shap": {"param": {"self": {"NNMeta": [[798, "    def output_shapes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_save_averag": {"var": {"side": {"?": [[492, "        for side, loss in self.history.items():"]]}}, "param": {"self": {"ModelBase": [[488, "    def get_save_averages(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.create_new_sess": {"param": {"pingpong": {"None": [[926, "    def create_new_session(self, no_logs, pingpong, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.__in": {"param": {"is_output": {"?": [[782, "    def __init__(self, filename, network_type, side, network, is_output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.reset_pingpong": {"var": {"inputs": {"[?]": [[355, "        inputs = self.get_inputs()"]]}, "model": {"<list>": [[351, "        for model in self.networks.values():"]]}}, "param": {"self": {"ModelBase": [[342, "    def reset_pingpong(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.first_run": {"param": {"self": {"State": [[913, "    def first_run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.output_shapes": {"var": {"predictor": {"<list>": [[178, "        for predictor in self.predictors.values():"]]}, "out": {"list": [[177, "        out = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.increment_iteration": {"param": {"self": {"State": [[947, "    def increment_iterations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.store_input_shape": {"var": {"inputs": {"dict": [[333, "        inputs = {tensor.name: K.int_shape(tensor)[-3:] for tensor in model.inputs}"], [338, "        inputs = {key: tuple(int(i) for i in val) for key, val in inputs.items()}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.face_shap": {"param": {"self": {"State": [[893, "    def face_shapes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.mask_input": {"param": {"self": {"Loss": [[709, "    def mask_input(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.selected_mask_loss": {"var": {"retval": {"(?, ?) -> None": [[700, "        retval = mask_loss_wrapper(loss_func, preprocessing_func=func)"]]}, "func": {"Loss -> ? -> None": [[698, "        func = self.mask_preprocessing_func"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.check_loss_drop": {"param": {"self": {"ModelBase": [[536, "    def check_loss_drop(self, side, avg):"]]}, "avg": {"?": [[536, "    def check_loss_drop(self, side, avg):"]]}, "side": {"?": [[536, "    def check_loss_drop(self, side, avg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.con": {"var": {"retval": {"?": [[397, "        retval = model.predict"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.models_exis": {"var": {"retval": {"int": [[162, "        retval = all([os.path.isfile(model.filename) for model in self.networks.values()])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.loss_nam": {"param": {"self": {"State": [[903, "    def loss_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.replace_config": {"var": {"key": {"?": [[991, "        for key, val in _CONFIG.items():"]]}}, "param": {"self": {"State": [[984, "    def replace_config(self, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase": {"func": {"should_backup": {"(ModelBase, ?) -> None / (ModelBase, dict) -> None": [[501, "    def should_backup(self, save_averages):"]]}, "log_summary": {"ModelBase -> None": [[419, "    def log_summary(self):"]]}, "do_snapshot": {"ModelBase -> None": [[432, "    def do_snapshot(self):"]]}, "load_config": {"ModelBase -> None": [[224, "    def load_config(self):"]]}, "build": {"ModelBase -> ?": [[241, "    def build(self):"]]}, "config": {"ModelBase -> {FaceswapConfig -> dict | dict}": [[136, "    def config(self):"]]}, "__init__": {"? -> ?": [[36, "    def __init__(self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.add_": {"param": {"network": {"None": [[302, "    def add_network(self, network_type, side, network, is_output=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSavings.set_optimizer_saving": {"param": {"self": {"VRAMSavings": [[622, "    def set_optimizer_savings(self, optimizer_savings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.rename_legacy": {"var": {"new_path": {"str": [[566, "            new_path = os.path.join(str(self.model_dir), new_name)"]]}, "updated": {"?": [[563, "        updated = False"], [572, "                updated = True"]]}, "old_path": {"str": [[565, "            old_path = os.path.join(str(self.model_dir), old_name)"]]}, "set_lowmem": {"?": [[562, "        set_lowmem = False"], [571, "                    set_lowmem = True"]]}, "old_name": {"str": [[564, "        for old_name, new_name in legacy_mapping[self.name]:"]]}}, "param": {"self": {"ModelBase": [[544, "    def rename_legacy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.get_loss_nam": {"param": {"self": {"Loss": [[723, "    def get_loss_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.save_mode": {"var": {"lossmsg": {"[str]": [[481, "            lossmsg = [\"{}_{}: {:.5f}\".format(self.state.loss_names[side][0],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.multiple_models_in_folder": {"var": {"model_files": {"[str]": [[169, "        model_files = [fname for fname in os.listdir(str(self.model_dir)) if fname.endswith(\".h5\")]"]]}}, "param": {"self": {"ModelBase": [[167, "    def multiple_models_in_folder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_input": {"var": {"mask_shape": {"?": [[269, "            mask_shape = output_network.output_shapes[-1]"]]}}, "param": {"self": {"ModelBase": [[261, "    def get_inputs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.iteration": {"param": {"self": {"ModelBase": [[402, "    def iterations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Sta": {"func": {"current_session": {"State -> None": [[908, "    def current_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.mask_preprocessing_func": {"var": {"retval": {"None": [[679, "        retval = None"]], "? -> None": [[681, "            retval = gaussian_blur(max(1, self.mask_shape[1] // 32))"]]}}, "param": {"self": {"Loss": [[677, "    def mask_preprocessing_func(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSavings.set_gradient_typ": {"var": {"memory_saving_gradients": {"?": [[636, "            memory_saving_gradients = False"]]}}, "param": {"self": {"VRAMSavings": [[632, "    def set_gradient_type(self, memory_saving_gradients):"]]}, "memory_saving_gradients": {"?": [[632, "    def set_gradient_type(self, memory_saving_gradients):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.add_network": {"var": {"side": {"str": [[309, "            side = side.lower()"]]}, "name": {"str": [[307, "        name = network_type.lower()"]]}, "filename": {"str": [[306, "        filename = \"{}_{}\".format(self.name, network_type.lower())"]]}}, "param": {"self": {"ModelBase": [[284, "    def add_networks(self):"]], "{Model | Model | Model | Model | Model | Model | ModelBase}": [[302, "    def add_network(self, network_type, side, network, is_output=False):"]]}, "side": {"str": [[302, "    def add_network(self, network_type, side, network, is_output=False):"]]}, "is_output": {"?": [[302, "    def add_network(self, network_type, side, network, is_output=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.get_output_nam": {"var": {"output_types": {"[str]": [[821, "        output_types = [\"mask_out\" if K.int_shape(output)[-1] == 1 else \"face_out\""]]}}, "param": {"self": {"NNMeta": [[819, "    def get_output_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.load_m": {"var": {"is_loaded": {"?": [[454, "                is_loaded = network.load()"], [456, "                is_loaded = network.load(fullpath=model_mapping[network.side][network.type])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_optimize": {"var": {"opt_kwargs": {"dict": [[376, "        opt_kwargs = dict(lr=lr, beta_1=beta_1, beta_2=beta_2)"]]}}, "param": {"lr": {"float": [[374, "    def get_optimizer(self, lr=5e-5, beta_1=0.5, beta_2=0.999):  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelB": {"var": {"snapshot_interval": {"int": [[40, "                 snapshot_interval=0,"]]}, "basename": {"str": [[154, "        basename = os.path.basename(sys.modules[self.__module__].__file__)"]]}, "optimizer_savings": {"?": [[53, "                 optimizer_savings=False,"]]}, "input_shape": {"None": [[48, "                 input_shape=None,"]]}, "memory_saving_gradients": {"?": [[52, "                 memory_saving_gradients=False,"]]}, "alignments_paths": {"None": [[46, "                 alignments_paths=None,"]]}, "training_image_size": {"int": [[45, "                 training_image_size=256,"]]}, "models_map": {"dict": [[409, "        models_map = {\"a\": dict(), \"b\": dict()}"]]}}, "param": {"snapshot_interval": {"int": [[54, "                 predict=False):"]]}, "optimizer_savings": {"?": [[54, "                 predict=False):"]]}, "input_shape": {"None": [[54, "                 predict=False):"]]}, "memory_saving_gradients": {"?": [[54, "                 predict=False):"]]}, "alignments_paths": {"None": [[54, "                 predict=False):"]]}, "training_image_size": {"int": [[54, "                 predict=False):"]]}}, "func": {"load_models": {"(ModelBase, ?) -> None": [[438, "    def load_models(self, swapped):"]]}, "iterations": {"ModelBase -> int": [[402, "    def iterations(self):"]]}, "store_input_shapes": {"(Model, ?) -> None / (ModelBase, ?) -> None": [[330, "    def store_input_shapes(self, model):"]]}, "add_networks": {"ModelBase -> None": [[284, "    def add_networks(self):"]]}, "get_save_averages": {"ModelBase -> dict": [[488, "    def get_save_averages(self):"]]}, "largest_mask_index": {"ModelBase -> None": [[204, "    def largest_mask_index(self):"]]}, "save_models": {"ModelBase -> None": [[463, "    def save_models(self):"]]}, "output_shapes": {"ModelBase -> [tuple]": [[175, "    def output_shapes(self):"]]}, "feed_mask": {"ModelBase -> bool": [[219, "    def feed_mask(self):"]]}, "config_changeable_items": {"ModelBase -> FaceswapConfig -> dict": [[146, "    def config_changeable_items(self):"]]}, "map_models": {"(ModelBase, ?) -> dict": [[406, "    def map_models(self, swapped):"]]}, "load_state_info": {"ModelBase -> None": [[288, "    def load_state_info(self):"]]}, "build_autoencoders": {"(ModelBase, ?) -> None / (ModelBase, [?]) -> None": [[274, "    def build_autoencoders(self, inputs):"]]}, "output_shape": {"ModelBase -> None": [[184, "    def output_shape(self):"]]}, "largest_face_index": {"ModelBase -> None": [[189, "    def largest_face_index(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.load_state_info": {"var": {"input_shape": {"?": [[298, "        input_shape = self.state.face_shapes[0]"]]}}, "param": {"self": {"ModelBase": [[288, "    def load_state_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.get_optimizer": {"param": {"beta_1": {"float": [[374, "    def get_optimizer(self, lr=5e-5, beta_1=0.5, beta_2=0.999):  # pylint: disable=invalid-name"]]}, "self": {"ModelBase": [[374, "    def get_optimizer(self, lr=5e-5, beta_1=0.5, beta_2=0.999):  # pylint: disable=invalid-name"]]}, "beta_2": {"float": [[374, "    def get_optimizer(self, lr=5e-5, beta_1=0.5, beta_2=0.999):  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMS": {"var": {"optimizer_savings": {"?": [[626, "            optimizer_savings = False"]]}}, "param": {"optimizer_savings": {"?": [[602, "    def __init__(self, pingpong, optimizer_savings, memory_saving_gradients):"], [622, "    def set_optimizer_savings(self, optimizer_savings):"]]}, "memory_saving_gradients": {"?": [[602, "    def __init__(self, pingpong, optimizer_savings, memory_saving_gradients):"]]}}, "func": {"set_optimizer_savings": {"(VRAMSavings, ?) -> None": [[622, "    def set_optimizer_savings(self, optimizer_savings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.loss_dict": {"param": {"self": {"Loss": [[659, "    def loss_dict(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.add_predictor": {"var": {"model": {"?": [[325, "            model = multi_gpu_model(model, self.gpus)"]]}}, "param": {"model": {"?": [[320, "    def add_predictor(self, side, model):"]]}, "self": {"{Model | Model | Model | Model | ModelBase}": [[320, "    def add_predictor(self, side, model):"]]}, "side": {"str": [[320, "    def add_predictor(self, side, model):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.output_shap": {"param": {"self": {"ModelBase": [[175, "    def output_shapes(self):"], [184, "    def output_shape(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.output_shap": {"param": {"self": {"Loss": [[704, "    def output_shapes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.replace_confi": {"var": {"legacy_update": {"None": [[989, "        legacy_update = self._update_legacy_config()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMet": {"func": {"load": {"(NNMeta, None) -> ?": [[829, "    def load(self, fullpath=None):"]]}, "save": {"(NNMeta, None, None) -> None": [[851, "    def save(self, fullpath=None, backup_func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.compile_predictor": {"var": {"loss": {"Loss": [[367, "            loss = Loss(model.inputs, model.outputs)"]]}, "side": {"?": [[366, "        for side, model in self.predictors.items():"]]}}, "param": {"self": {"ModelBase": [[360, "    def compile_predictors(self, initialize=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.State.load": {"var": {"state": {"?": [[958, "        state = self.serializer.load(self.filename)"]]}}, "param": {"self": {"State": [[952, "    def load(self, config_changeable_items):"]]}, "config_changeable_items": {"ModelBase -> FaceswapConfig -> dict": [[952, "    def load(self, config_changeable_items):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.compile_predictors": {"var": {"learning_rate": {"?": [[363, "        learning_rate = self.config.get(\"learning_rate\", 5e-5)"]]}, "optimizer": {"Adam": [[364, "        optimizer = self.get_optimizer(lr=learning_rate, beta_1=0.5, beta_2=0.999)"]]}}, "param": {"initialize": {"?": [[360, "    def compile_predictors(self, initialize=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.ModelBase.should_backup": {"var": {"side": {"?": [[515, "        for side, loss in save_averages.items():"], [529, "            for side, avg_loss in save_averages.items():"]]}}, "param": {"self": {"ModelBase": [[501, "    def should_backup(self, save_averages):"]]}, "save_averages": {"dict": [[501, "    def should_backup(self, save_averages):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.VRAMSav": {"func": {"set_gradient_type": {"(VRAMSavings, ?) -> memory_saving_gradients": [[632, "    def set_gradient_type(self, memory_saving_gradients):"]]}, "set_pingpong": {"(VRAMSavings, ?) -> None": [[612, "    def set_pingpong(self, pingpong):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.NNMeta.convert_legacy_weight": {"param": {"self": {"NNMeta": [[860, "    def convert_legacy_weights(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model._base.Loss.__init__": {"param": {"inputs": {"?": [[647, "    def __init__(self, inputs, outputs):"]]}, "self": {"Loss": [[647, "    def __init__(self, inputs, outputs):"]]}, "outputs": {"?": [[647, "    def __init__(self, inputs, outputs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/_config.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._c": {"class": {"Config": {"<Config>": [[15, "class Config(FaceswapConfig):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.load_modu": {"param": {"self": {"Config": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}, "filename": {"str": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._confi": {"var": {"logger": {"?": [[12, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.set_defaul": {"var": {"base_path": {"str": [[27, "            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.set_default": {"param": {"self": {"Config": [[18, "    def set_defaults(self):"]]}, "filenames": {"str": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.set_globa": {"param": {"self": {"Config": [[46, "    def set_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config": {"var": {"default_files": {"[str]": [[24, "            default_files = [fname for fname in filenames if fname.endswith(\"_defaults.py\")]"]]}}, "param": {"module_path": {"str": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}}, "func": {"load_module": {"(Config, ?, ?, ?) -> None / (Config, str, str, str) -> None": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}, "set_defaults": {"Config -> None": [[18, "    def set_defaults(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.set_defaults": {"var": {"import_path": {"str": [[28, "            import_path = \".\".join(full_path_split(dirpath.replace(base_path, \"\"))[1:])"]]}, "plugin_type": {"str": [[29, "            plugin_type = import_path.split(\".\")[-1]"]]}, "current_dir": {"str": [[22, "        current_dir = os.path.dirname(__file__)"]]}, "filename": {"str": [[30, "            for filename in default_files:"]]}, "dirpath": {"str": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}, "param": {"_": {"Config -> None": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}, "dirpath": {"Config": [[23, "        for dirpath, _, filenames in os.walk(current_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.load_": {"var": {"module": {"str": [[37, "        module = os.path.splitext(filename)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.load_modul": {"var": {"section": {"str": [[38, "        section = \".\".join((plugin_type, module.replace(\"_defaults\", \"\")))"]]}, "key": {"?": [[42, "        for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access"]]}}, "param": {"section": {"str": [[38, "        section = \".\".join((plugin_type, module.replace(\"_defaults\", \"\")))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Confi": {"func": {"set_globals": {"Config -> None": [[46, "    def set_globals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.load_module": {"var": {"mod": {"?": [[40, "        mod = import_module(\"{}.{}\".format(module_path, module))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.load_mod": {"param": {"plugin_type": {"str": [[33, "    def load_module(self, filename, module_path, plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract._config.Config.set_global": {"var": {"section": {"str": [[51, "        section = \"global\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/cv2_dnn_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.cv2_dnn_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[53, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/display_graph.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar._init_toolbar": {"var": {"xmin": {"?": [[49, "        xmin, xmax = self.canvas.figure.bbox.intervalx"]]}, "text": {"?": [[61, "        for text, tooltip_text, image_file, callback in self.toolitems:"]]}, "button": {"None": [[66, "                button = self._Button(btnframe, text=text, file=image_file,"]]}, "sep": {"?": [[53, "        sep = ttk.Frame(self, height=2, relief=tk.RIDGE)"]]}, "height": {"int": [[50, "        height, width = 50, xmax-xmin"]]}}, "param": {"self": {"NavigationToolbar": [[46, "    def _init_toolbar(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_": {"class": {"TrainingGraph": {"<TrainingGraph>": [[253, "class TrainingGraph(GraphBase):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_groupsiz": {"var": {"keys": {"[?]": [[207, "            keys = [key[0][:key[0].find(\"_\")] for key in sorted_lines]"]]}, "distinct_keys": {"?": [[208, "            distinct_keys = set(keys)"]]}}, "param": {"sorted_lines": {"list": [[199, "    def lines_groupsize(raw_lines, sorted_lines):"]]}, "raw_lines": {"list": [[199, "    def lines_groupsize(raw_lines, sorted_lines):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase": {"func": {"__init__": {"? -> ?": [[79, "    def __init__(self, parent, data, ylabel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph": {"func": {"add_callback": {"TrainingGraph -> None": [[261, "    def add_callback(self):"]]}, "save_fig": {"(TrainingGraph, ?) -> None": [[293, "    def save_fig(self, location):"]]}, "build": {"TrainingGraph -> None": [[265, "    def build(self):"]]}, "__init__": {"? -> ?": [[256, "    def __init__(self, parent, data, ylabel):"]]}, "resize_fig": {"TrainingGraph -> None": [[307, "    def resize_fig(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar._Butt": {"var": {"iconmapping": {"dict": [[37, "        iconmapping = {\"home\": \"reload\","]]}, "icon": {"str": [[40, "        icon = iconmapping[file] if iconmapping.get(file, None) else file"]]}}, "param": {"command": {"?": [[34, "    def _Button(frame, text, file, command, extension=\".gif\"):  # pylint: disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationT": {"func": {"_init_toolbar": {"NavigationToolbar -> None": [[46, "    def _init_toolbar(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.toolbar_plac": {"param": {"self": {"{GraphBase | SessionGraph}": [[239, "    def toolbar_place(self, parent):"]]}, "parent": {"SessionGraph": [[239, "    def toolbar_place(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph.save_fig": {"var": {"keys": {"?": [[296, "        keys = sorted([key.replace(\"raw_\", \"\") for key in self.calcs.stats.keys()"]]}, "now": {"str": [[299, "        now = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")"]]}, "filename": {"str": [[298, "        filename = \" - \".join(keys)"], [300, "        filename = os.path.join(location, \"{}_{}.{}\".format(filename, now, \"png\"))"]]}}, "param": {"self": {"TrainingGraph": [[293, "    def save_fig(self, location):"]]}, "location": {"?": [[293, "    def save_fig(self, location):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph.resize_fig": {"class": {"Event": {"<Event>": [[309, "        class Event():  # pylint: disable=too-few-public-methods"]]}}, "param": {"self": {"TrainingGraph": [[307, "    def resize_fig(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_styl": {"param": {"groupsize": {"int": [[213, "    def lines_style(self, lines, groupsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_create_": {"var": {"colours": {"list": [[225, "        colours = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_create_col": {"param": {"groups": {"int": [[223, "    def lines_create_colors(self, groupsize, groups):"]]}, "groupsize": {"int": [[223, "    def lines_create_colors(self, groupsize, groups):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph.refresh": {"param": {"self": {"TrainingGraph": [[271, "    def refresh(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_data_get_min_max": {"var": {"item": {"?": [[164, "        for item in data:"]]}, "ymin": {"int": [[170, "        ymin = floor(min(ymin)) / 1000"]], "list": [[163, "        ymin, ymax = list(), list()"]]}, "dataset": {"list": [[165, "            dataset = list(filter(lambda x: x is not None, item))"]]}}, "param": {"data": {"[?]": [[161, "    def axes_data_get_min_max(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_": {"var": {"groupsize": {"int": [[203, "        groupsize = 1"], [205, "            groupsize = len(raw_lines)"], [209, "            groupsize = len(keys) // len(distinct_keys)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.legend_plac": {"param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[234, "    def legend_place(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph": {"var": {"logger": {"?": [[23, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"NavigationToolbar": {"<NavigationToolbar>": [[26, "class NavigationToolbar(NavigationToolbar2Tk):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar._Button": {"var": {"img": {"?": [[41, "        img = get_images().icons[icon]"]]}}, "param": {"text": {"?": [[34, "    def _Button(frame, text, file, command, extension=\".gif\"):  # pylint: disable=arguments-differ"]]}, "frame": {"?": [[34, "    def _Button(frame, text, file, command, extension=\".gif\"):  # pylint: disable=arguments-differ"]]}, "file": {"?": [[34, "    def _Button(frame, text, file, command, extension=\".gif\"):  # pylint: disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.SessionGraph.build": {"param": {"self": {"SessionGraph": [[323, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar._Bu": {"param": {"extension": {"str": [[34, "    def _Button(frame, text, file, command, extension=\".gif\"):  # pylint: disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_create_colors": {"var": {"i": {"int": [[226, "        for i in range(1, groups + 1):"]]}, "cpoint": {"int": [[229, "                cpoint = 1 - (i / 5)"]]}, "colour": {"str": [[227, "            for colour in self.colourmaps[0:groupsize]:"]]}, "cmap": {"?": [[228, "                cmap = matplotlib.cm.get_cmap(colour)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_sor": {"var": {"title": {"?": [[187, "            title = key.replace(\"_\", \" \").title()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.initiate_graph": {"param": {"self": {"{<GraphBase> | GraphBase}": [[99, "    def initiate_graph(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBas": {"func": {"toolbar_place": {"(GraphBase, ?) -> None / (SessionGraph, SessionGraph) -> None": [[239, "    def toolbar_place(self, parent):"]]}, "clear": {"GraphBase -> None": [[246, "    def clear(self):"]]}, "legend_place": {"TrainingGraph -> None / <GraphBase> -> None / GraphBase -> None / SessionGraph -> None": [[234, "    def legend_place(self):"]]}, "update_plot": {"(TrainingGraph, bool) -> None / (<GraphBase>, bool) -> None / (GraphBase, bool) -> None / (SessionGraph, bool) -> None": [[111, "    def update_plot(self, initiate=True):"]]}, "initiate_graph": {"<GraphBase> -> None / GraphBase -> None": [[99, "    def initiate_graph(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_set_ysca": {"param": {"self": {"{GraphBase | SessionGraph}": [[175, "    def axes_set_yscale(self, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.SessionGraph": {"func": {"set_yscale_type": {"(SessionGraph, ?) -> None": [[338, "    def set_yscale_type(self, scale):"]]}, "build": {"SessionGraph -> None": [[323, "    def build(self):"]]}, "__init__": {"? -> ?": [[319, "    def __init__(self, parent, data, ylabel, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_sty": {"var": {"linewidth": {"int": [[219, "            linewidth = ceil((idx + 1) / groupsize)"]]}}, "param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[213, "    def lines_style(self, lines, groupsize):"]]}, "lines": {"list": [[213, "    def lines_style(self, lines, groupsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_limits_set_default": {"param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[143, "    def axes_limits_set_default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar": {"var": {"toolitems": {"[?]": [[30, "    toolitems = [t for t in NavigationToolbar2Tk.toolitems if"]]}}, "func": {"_Button": {"(?, ?, ?, ?, str) -> None": [[34, "    def _Button(frame, text, file, command, extension=\".gif\"):  # pylint: disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_data_get_min_": {"var": {"ymax": {"int": [[171, "        ymax = ceil(max(ymax)) / 1000"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph.build": {"param": {"self": {"TrainingGraph": [[265, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_limits_se": {"param": {"data": {"?": [[149, "    def axes_limits_set(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph.add_callback": {"param": {"self": {"TrainingGraph": [[261, "    def add_callback(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.SessionGraph.set_yscale_typ": {"param": {"self": {"SessionGraph": [[338, "    def set_yscale_type(self, scale):"]]}, "scale": {"?": [[338, "    def set_yscale_type(self, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.SessionGrap": {"func": {"refresh": {"(SessionGraph, ?, ?, ?) -> None / (SessionGraph, None, ?, ?) -> None": [[330, "    def refresh(self, data, ylabel, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar._Butto": {"var": {"btn": {"?": [[42, "        btn = ttk.Button(frame, text=text, image=img, command=command)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.__init__": {"param": {"self": {"{<GraphBase> | GraphBase}": [[79, "    def __init__(self, parent, data, ylabel):"]]}, "data": {"None": [[79, "    def __init__(self, parent, data, ylabel):"]]}, "parent": {"{SessionGraph | TrainingGraph}": [[79, "    def __init__(self, parent, data, ylabel):"]]}, "ylabel": {"{Calculations | None}": [[79, "    def __init__(self, parent, data, ylabel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_limits_set": {"var": {"ymin": {"int": [[153, "            ymin, ymax = self.axes_data_get_min_max(data)"]]}, "xmax": {"int": [[151, "        xmax = self.calcs.iterations - 1 if self.calcs.iterations > 1 else 1"]]}}, "param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[149, "    def axes_limits_set(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_labels_set": {"param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[137, "    def axes_labels_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_sort": {"var": {"raw_lines": {"list": [[184, "        raw_lines = list()"]]}, "lines": {"list": [[195, "        lines = self.lines_style(sorted_lines, groupsize)"]]}, "key": {"?": [[186, "        for key in sorted(keys):"]]}, "groupsize": {"int": [[193, "        groupsize = self.lines_groupsize(raw_lines, sorted_lines)"]]}}, "param": {"keys": {"list": [[180, "    def lines_sort(self, keys):"]]}, "self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[180, "    def lines_sort(self, keys):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.SessionGraph.__init__": {"param": {"self": {"SessionGraph": [[319, "    def __init__(self, parent, data, ylabel, scale):"]]}, "scale": {"?": [[319, "    def __init__(self, parent, data, ylabel, scale):"]]}, "data": {"None": [[319, "    def __init__(self, parent, data, ylabel, scale):"]]}, "parent": {"None": [[319, "    def __init__(self, parent, data, ylabel, scale):"]]}, "ylabel": {"?": [[319, "    def __init__(self, parent, data, ylabel, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_g": {"class": {"GraphBase": {"<GraphBase>": [[77, "class GraphBase(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}, "SessionGraph": {"<SessionGraph>": [[317, "class SessionGraph(GraphBase):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBa": {"var": {"sorted_lines": {"list": [[185, "        sorted_lines = list()"], [194, "        sorted_lines = raw_lines + sorted_lines"]]}}, "func": {"lines_style": {"(TrainingGraph, list, int) -> list / (GraphBase, ?, ?) -> None / (<GraphBase>, list, int) -> list / (GraphBase, list, int) -> list / (SessionGraph, list, int) -> list": [[213, "    def lines_style(self, lines, groupsize):"]]}, "lines_sort": {"(TrainingGraph, list) -> list / (SessionGraph, list) -> list / (GraphBase, ?) -> list / (GraphBase, list) -> list / (<GraphBase>, list) -> list": [[180, "    def lines_sort(self, keys):"]]}, "lines_groupsize": {"(?, ?) -> int / (list, list) -> int": [[199, "    def lines_groupsize(raw_lines, sorted_lines):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.update_plot": {"var": {"keys": {"list": [[125, "        keys = list(self.calcs.stats.keys())"]]}, "xrng": {"[int]": [[124, "        xrng = [x for x in range(self.calcs.iterations)]"]]}, "idx": {"?": [[126, "        for idx, item in enumerate(self.lines_sort(keys)):"]]}}, "param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[111, "    def update_plot(self, initiate=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphB": {"func": {"axes_limits_set": {"(TrainingGraph, [?]) -> None / (GraphBase, ?) -> None / (<GraphBase>, [?]) -> None / (GraphBase, [?]) -> None / (SessionGraph, [?]) -> None": [[149, "    def axes_limits_set(self, data):"]]}, "axes_labels_set": {"TrainingGraph -> None / <GraphBase> -> None / GraphBase -> None / SessionGraph -> None": [[137, "    def axes_labels_set(self):"]]}, "lines_create_colors": {"(TrainingGraph, int, int) -> list / (GraphBase, ?, int) -> list / (GraphBase, ?, ?) -> list / (<GraphBase>, int, int) -> list / (GraphBase, int, int) -> list / (SessionGraph, int, int) -> list": [[223, "    def lines_create_colors(self, groupsize, groups):"]]}, "axes_limits_set_default": {"TrainingGraph -> None / <GraphBase> -> None / GraphBase -> None / SessionGraph -> None": [[143, "    def axes_limits_set_default(self):"]]}, "axes_data_get_min_max": {"? -> (int, int) / [?] -> (int, int)": [[161, "    def axes_data_get_min_max(data):"]]}, "axes_set_yscale": {"(GraphBase, ?) -> None / (SessionGraph, ?) -> None": [[175, "    def axes_set_yscale(self, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_create_color": {"param": {"self": {"{<GraphBase> | GraphBase | SessionGraph | TrainingGraph}": [[223, "    def lines_create_colors(self, groupsize, groups):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.NavigationToolbar._init_tool": {"var": {"btnframe": {"?": [[58, "        btnframe = ttk.Frame(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGraph.__init__": {"param": {"self": {"TrainingGraph": [[256, "    def __init__(self, parent, data, ylabel):"]]}, "data": {"Calculations": [[256, "    def __init__(self, parent, data, ylabel):"]]}, "parent": {"None": [[256, "    def __init__(self, parent, data, ylabel):"]]}, "ylabel": {"str": [[256, "    def __init__(self, parent, data, ylabel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.SessionGraph.refresh": {"param": {"self": {"SessionGraph": [[330, "    def refresh(self, data, ylabel, scale):"]]}, "scale": {"?": [[330, "    def refresh(self, data, ylabel, scale):"]]}, "data": {"None": [[330, "    def refresh(self, data, ylabel, scale):"]]}, "ylabel": {"?": [[330, "    def refresh(self, data, ylabel, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.lines_style": {"var": {"colours": {"list": [[217, "        colours = self.lines_create_colors(groupsize, groups)"]]}, "idx": {"?": [[218, "        for idx, item in enumerate(lines):"]]}, "groups": {"int": [[216, "        groups = int(len(lines) / groupsize)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.TrainingGrap": {"var": {"refresh_var": {"?": [[273, "        refresh_var = get_config().tk_vars[\"refreshgraph\"]"]]}}, "func": {"refresh": {"TrainingGraph -> None": [[271, "    def refresh(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.axes_set_y": {"param": {"scale": {"?": [[175, "    def axes_set_yscale(self, scale):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.clear": {"param": {"self": {"GraphBase": [[246, "    def clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_graph.GraphBase.update_plo": {"var": {"fulldata": {"[?]": [[121, "        fulldata = [item for item in self.calcs.stats.values()]"]]}}, "param": {"initiate": {"bool": [[111, "    def update_plot(self, initiate=True):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/popup_configure.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.build": {"var": {"category": {"?": [[97, "        for category in categories:"]]}, "panel_kwargs": {"dict": [[109, "        panel_kwargs = dict(columns=2, max_columns=2, option_columns=2, blank_nones=False)"]]}, "container": {"?": [[92, "        container = ttk.Notebook(self.page_frame)"]]}, "page": {"ControlPanel": [[98, "            page = self.build_page(container, category)"]]}, "categories": {"?": [[94, "        categories = sorted(list(self.config_cpanel_dict.keys()))"]]}}, "param": {"self": {"ConfigurePlugins": [[89, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.build_pag": {"var": {"frame": {"ControlPanel": [[115, "                frame = ControlPanel(page,"]]}, "title": {"?": [[119, "                title = plugin[plugin.rfind(\".\") + 1:]"], [120, "                title = title.replace(\"_\", \" \").title()"]]}}, "param": {"self": {"ConfigurePlugins": [[105, "    def build_page(self, container, category):"]]}, "container": {"?": [[105, "    def build_page(self, container, category):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.set_geometr": {"var": {"pos_y": {"int": [[55, "        pos_y = self._root.winfo_y() + 80"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.set_geometry": {"var": {"width": {"int": [[56, "        width = int(600 * scaling_factor)"]]}, "pos_x": {"int": [[54, "        pos_x = self._root.winfo_x() + 80"]]}, "scaling_factor": {"?": [[53, "        scaling_factor = get_config().scaling_factor"]]}, "height": {"int": [[57, "        height = int(400 * scaling_factor)"]]}}, "param": {"self": {"ConfigurePlugins": [[51, "    def set_geometry(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.build_p": {"param": {"category": {"?": [[105, "    def build_page(self, container, category):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configu": {"var": {"logger": {"?": [[15, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_c": {"class": {"ConfigurePlugins": {"<ConfigurePlugins>": [[30, "class ConfigurePlugins(tk.Toplevel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins": {"func": {"build_page": {"(ConfigurePlugins, ?, ?) -> ControlPanel": [[105, "    def build_page(self, container, category):"]]}, "get_config": {"ConfigurePlugins -> dict": [[61, "    def get_config(self):"]]}, "build": {"ConfigurePlugins -> None": [[89, "    def build(self):"]]}, "__init__": {"? -> ?": [[32, "    def __init__(self, config, root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.popup_config": {"var": {"p_key": {"?": [[22, "        p_key = list(POPUP.keys())[0]"]]}, "window": {"ConfigurePlugins": [[26, "    window = ConfigurePlugins(config, root)"]]}}, "param": {"root": {"FaceswapGui": [[19, "def popup_config(config, root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.add_frame_separator": {"var": {"sep": {"?": [[136, "        sep = ttk.Frame(self.page_frame, height=2, relief=tk.RIDGE)"]]}}, "param": {"self": {"ConfigurePlugins": [[133, "    def add_frame_separator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.build_": {"var": {"page": {"ControlPanel": [[124, "            page = ControlPanel(container,"]], "?": [[111, "            page = ttk.Notebook(container)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.popup_": {"param": {"config": {"(str, ?)": [[19, "def popup_config(config, root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.get_confi": {"var": {"category": {"?": [[67, "            category = section.split(\".\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.get_config": {"var": {"key": {"?": [[71, "            for key, val in options.items():"]]}, "section": {"?": [[65, "        for section in self.config.config.sections():"], [69, "            section = section.split(\".\")[-1]"]]}, "options": {"?": [[68, "            options = self.config.defaults[section]"]]}, "conf": {"dict": [[64, "        conf = dict()"]]}}, "param": {"self": {"ConfigurePlugins": [[61, "    def get_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.save_conf": {"var": {"running_task": {"?": [[194, "        running_task = get_config().tk_vars[\"runningtask\"].get()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.build_page": {"var": {"plugin": {"?": [[113, "            for plugin in plugins:"]]}, "cp_options": {"list": [[114, "                cp_options = list(self.config_cpanel_dict[category][plugin].values())"], [123, "            cp_options = list(self.config_cpanel_dict[category][plugins[0]].values())"]]}, "plugins": {"?": [[108, "        plugins = sorted(list(key for key in self.config_cpanel_dict[category].keys()))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.add_actio": {"var": {"btn_rst": {"?": [[151, "        btn_rst = ttk.Button(frame, text=\"Reset\", width=10, command=self.reset)"]]}, "btn_cls": {"?": [[145, "        btn_cls = ttk.Button(frame, text=\"Cancel\", width=10, command=self.destroy)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugin": {"func": {"reset": {"ConfigurePlugins -> None": [[156, "    def reset(self):"]]}, "add_frame_separator": {"ConfigurePlugins -> None": [[133, "    def add_frame_separator(self):"]]}, "set_geometry": {"ConfigurePlugins -> None": [[51, "    def set_geometry(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlu": {"func": {"save_config": {"ConfigurePlugins -> None": [[169, "    def save_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.__init__": {"param": {"root": {"FaceswapGui": [[32, "    def __init__(self, config, root):"]]}, "self": {"ConfigurePlugins": [[32, "    def __init__(self, config, root):"]]}, "config": {"(str, ?)": [[32, "    def __init__(self, config, root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.sav": {"var": {"new_config": {"?": [[175, "        new_config = ConfigParser(allow_no_value=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlug": {"func": {"add_actions": {"ConfigurePlugins -> None": [[140, "    def add_actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure": {"var": {"POPUP": {"dict": [[16, "POPUP = dict()"]]}}, "func": {"popup_config": {"((None, ?), ?) -> None / ((str, ?), FaceswapGui) -> None / (?, ?) -> None / ((None, ?), FaceswapGui) -> None": [[19, "def popup_config(config, root):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.save_config": {"var": {"item": {"?": [[179, "            for item, def_opt in items.items():"]]}, "section": {"?": [[176, "        for section, items in self.config.defaults.items():"]]}, "helptext": {"?": [[185, "                helptext = def_opt[\"helptext\"]"], [186, "                helptext = self.config.format_help(helptext, is_section=False)"]]}, "options": {"dict": [[172, "        options = {\".\".join((key, sect)) if sect != key else key: opts"]]}, "new_opt": {"?": [[182, "                new_opt = options[section][item].get()"]]}}, "param": {"self": {"ConfigurePlugins": [[169, "    def save_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.add_action": {"param": {"self": {"ConfigurePlugins": [[140, "    def add_actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.reset": {"var": {"lookup": {"[?]": [[161, "            lookup = [section.split(\".\")[0], section.split(\".\")[-1]]"]]}}, "param": {"self": {"ConfigurePlugins": [[156, "    def reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.r": {"var": {"section": {"?": [[159, "        for section, items in self.config.defaults.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.res": {"var": {"default": {"?": [[165, "                default = def_opt[\"default\"]"]]}, "item": {"?": [[162, "            for item, def_opt in items.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.popup_configure.ConfigurePlugins.add_actions": {"var": {"frame": {"?": [[143, "        frame = ttk.Frame(self.page_frame)"]]}, "btn_ok": {"?": [[148, "        btn_ok = ttk.Button(frame, text=\"OK\", width=10, command=self.save_config)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/keypress.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHi": {"func": {"set_normal_term": {"KBHit -> None": [[52, "    def set_normal_term(self):"]]}, "getch": {"KBHit -> None": [[59, "    def getch(self):"]]}, "getarrow": {"KBHit -> None": [[68, "    def getarrow(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHit.kbhit": {"var": {"d_r": {"[?]": [[94, "        d_r, _, _ = select([sys.stdin], [], [], 0)"]]}}, "param": {"self": {"KBHit": [[88, "    def kbhit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHit.getarrow": {"var": {"char": {"?": [[80, "            char = msvcrt.getch()"], [83, "            char = sys.stdin.read(3)[2]"]]}, "vals": {"[int]": [[81, "            vals = [72, 77, 80, 75]"], [84, "            vals = [65, 67, 66, 68]"]]}}, "param": {"self": {"KBHit": [[68, "    def getarrow(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHit.getch": {"param": {"self": {"KBHit": [[59, "    def getch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress": {"class": {"KBHit": {"<KBHit>": [[33, "class KBHit:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHit.set_normal_term": {"param": {"self": {"KBHit": [[52, "    def set_normal_term(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHit.__init": {"param": {"is_gui": {"bool": [[35, "    def __init__(self, is_gui=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBHit.__init__": {"param": {"self": {"KBHit": [[35, "    def __init__(self, is_gui=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.keypress.KBH": {"func": {"__init__": {"? -> ?": [[35, "    def __init__(self, is_gui=False):"]]}, "kbhit": {"KBHit -> bool": [[88, "    def kbhit(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/options.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOpti": {"func": {"sort_commands": {"(CliOptions, ?, ?) -> None / (CliOptions, str, dict) -> None / (CliOptions, str, [?]) -> None": [[70, "    def sort_commands(self, category, classes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_cli_classes": {"var": {"name": {"?": [[48, "        for name, obj in inspect.getmembers(cli_source):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.expand_action_": {"param": {"option": {"?": [[204, "    def expand_action_option(option, options):"]]}, "options": {"?": [[204, "    def expand_action_option(option, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.gen_cli_arguments": {"var": {"opt": {"[?]": [[294, "                    opt = [opt] + optval"]], "(?, str)": [[296, "                    opt = (opt, optval)"]], "?": [[281, "            opt = option[\"opts\"][0]"]]}, "optval": {"[?]": [[291, "                        optval = [arg[1:-1] for arg in re.findall(r\"\\\".+?\\\"\", optval)]"]], "?": [[293, "                        optval = optval.split(\" \")"]], "str": [[280, "            optval = str(option[\"cpanel_option\"].get())"]]}, "_": {"?": [[279, "        for _, option in self.gen_command_options(command):"]]}}, "param": {"command": {"?": [[277, "    def gen_cli_arguments(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options": {"var": {"logger": {"?": [[16, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_sysbrowser": {"var": {"action": {"?": [[170, "        action = option.get(\"action\", None)"]]}, "action_option": {"None": [[180, "        action_option = None"]], "?": [[183, "            action_option = option[\"action_option\"]"]]}}, "param": {"self": {"CliOptions": [[168, "    def get_sysbrowser(self, option, options, command):"]]}, "command": {"None": [[168, "    def get_sysbrowser(self, option, options, command):"]]}, "option": {"?": [[168, "    def get_sysbrowser(self, option, options, command):"]]}, "options": {"?": [[168, "    def get_sysbrowser(self, option, options, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.format_command_": {"param": {"classname": {"?": [[84, "    def format_command_name(classname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions._get_tools_cli_classes": {"var": {"cli_file": {"str": [[64, "            cli_file = os.path.join(tools_dir, tool_name, \"cli.py\")"]]}, "tool_name": {"?": [[63, "        for tool_name in sorted(os.listdir(tools_dir)):"]]}, "mod": {"str": [[66, "                mod = \".\".join((\"tools\", tool_name, \"cli\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptio": {"func": {"gen_cli_arguments": {"(CliOptions, ?) -> None": [[277, "    def gen_cli_arguments(self, command):"]]}, "get_cli_arguments": {"(?, ?, ?) -> (?, ?) / (?, ?, None) -> (?, ?) / (args, ?, None) -> (?, ?)": [[104, "    def get_cli_arguments(cli_source, classname, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_data_typ": {"var": {"retval": {"<str>": [[153, "            retval = str"]], "? -> bool": [[151, "            retval = bool"]], "?": [[149, "            retval = opt[\"type\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.extract_optio": {"var": {"classname": {"?": [[92, "        for classname in mod_classes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_rounding": {"var": {"dtype": {"?": [[159, "        dtype = opt.get(\"type\", None)"]]}, "retval": {"None": [[165, "            retval = None"]], "?": [[161, "            retval = opt.get(\"rounding\", 2)"], [163, "            retval = opt.get(\"rounding\", 1)"]]}}, "param": {"opt": {"?": [[157, "    def get_rounding(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.clear": {"var": {"cp_opt": {"?": [[246, "            cp_opt = option[\"cpanel_option\"]"]]}, "option": {"?": [[245, "        for option in self.options_to_process(command):"]]}}, "param": {"self": {"CliOptions": [[242, "    def clear(self, command=None):"]]}, "command": {"None": [[242, "    def clear(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_sysbrows": {"var": {"retval": {"dict": [[179, "        retval = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_one_option_variable": {"param": {"command": {"?": [[269, "    def get_one_option_variable(self, command, title):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.extract_options": {"var": {"info": {"?": [[95, "            info, options = self.get_cli_arguments(cli_source, classname, command)"]]}, "command": {"None": [[94, "            command = self.format_command_name(classname)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOp": {"func": {"set_control_title": {"? -> None": [[139, "    def set_control_title(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions._get_tools_cli": {"var": {"mod_classes": {"dict": [[62, "        mod_classes = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.process_options": {"var": {"opt": {"?": [[112, "        for opt in command_options:"]]}, "cpanel_option": {"ControlPanelOption": [[118, "            cpanel_option = ControlPanelOption("]]}, "title": {"None": [[117, "            title = self.set_control_title(opt[\"opts\"])"]]}}, "param": {"command": {"None": [[109, "    def process_options(self, command_options, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.sort_commands": {"var": {"ordered": {"[str]": [[77, "            ordered = [\"extract\", \"train\", \"convert\"]"]]}}, "param": {"category": {"str": [[70, "    def sort_commands(self, category, classes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.res": {"var": {"default": {"str": [[236, "            default = \"\" if cp_opt.default is None else cp_opt.default"], [239, "                default = ' '.join(str(val) for val in default)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliO": {"func": {"options_to_process": {"(CliOptions, None) -> [?]": [[220, "    def options_to_process(self, command=None):"]]}, "get_option_values": {"(CliOptions, None) -> dict": [[254, "    def get_option_values(self, command=None):"]]}, "build_options": {"CliOptions -> None": [[29, "    def build_options(self):"]]}, "extract_options": {"(CliOptions, ?, ?) -> dict / (CliOptions, ?, [?]) -> dict / (CliOptions, args, [?]) -> dict": [[88, "    def extract_options(self, cli_source, mod_classes):"]]}, "process_options": {"(CliOptions, ?, ?) -> None / (CliOptions, ?, None) -> None": [[109, "    def process_options(self, command_options, command):"]]}, "gen_command_options": {"(CliOptions, ?) -> None": [[213, "    def gen_command_options(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.gen_command_option": {"param": {"self": {"CliOptions": [[213, "    def gen_command_options(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gu": {"class": {"CliOptions": {"<CliOptions>": [[19, "class CliOptions():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.__init__": {"param": {"self": {"CliOptions": [[21, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.build_options": {"var": {"category": {"str": [[31, "        for category in self.categories:"]]}, "tool": {"?": [[36, "                for tool in sorted(mod_classes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.options_to_proce": {"var": {"options": {"[?]": [[224, "            options = [opt for opts in self.opts.values()"], [227, "            options = [opt for opt in self.opts[command].values() if isinstance(opt, dict)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.extract_option": {"var": {"subopts": {"dict": [[91, "        subopts = dict()"]]}}, "param": {"self": {"CliOptions": [[88, "    def extract_options(self, cli_source, mod_classes):"]]}, "cli_source": {"args": [[88, "    def extract_options(self, cli_source, mod_classes):"]]}, "mod_classes": {"[?]": [[88, "    def extract_options(self, cli_source, mod_classes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.sort_command": {"param": {"self": {"CliOptions": [[70, "    def sort_commands(self, category, classes):"]]}, "classes": {"{[?] | dict}": [[70, "    def sort_commands(self, category, classes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_data_type": {"param": {"opt": {"?": [[146, "    def get_data_type(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_option_valu": {"param": {"self": {"CliOptions": [[254, "    def get_option_values(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions": {"func": {"get_rounding": {"? -> None": [[157, "    def get_rounding(opt):"]]}, "clear": {"(CliOptions, None) -> None": [[242, "    def clear(self, command=None):"]]}, "get_data_type": {"? -> {<str> | ? -> bool}": [[146, "    def get_data_type(opt):"]]}, "get_one_option_variable": {"(CliOptions, ?, ?) -> None": [[269, "    def get_one_option_variable(self, command, title):"]]}, "format_command_name": {"? -> None": [[84, "    def format_command_name(classname):"]]}, "expand_action_option": {"(?, ?) -> None": [[204, "    def expand_action_option(option, options):"]]}, "__init__": {"? -> ?": [[21, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.proce": {"var": {"gui_options": {"?": [[111, "        gui_options = OrderedDict()"]]}}, "param": {"command_options": {"?": [[109, "    def process_options(self, command_options, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.expand_action_optio": {"var": {"new_val": {"?": [[209, "        new_val = opts[old_val]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_option_values": {"var": {"ctl_dict": {"dict": [[256, "        ctl_dict = dict()"]]}, "cmd": {"?": [[257, "        for cmd, opts in self.opts.items():"]]}, "cmd_dict": {"dict": [[260, "            cmd_dict = dict()"]]}, "key": {"?": [[261, "            for key, val in opts.items():"]]}}, "param": {"command": {"None": [[254, "    def get_option_values(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions._get_tools_cli_cl": {"var": {"base_path": {"str": [[60, "        base_path = os.path.realpath(os.path.dirname(sys.argv[0]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.options_to_proc": {"param": {"self": {"CliOptions": [[220, "    def options_to_process(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.gen_command_options": {"var": {"key": {"?": [[215, "        for key, val in self.opts[command].items():"]]}}, "param": {"command": {"?": [[213, "    def gen_command_options(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_one_option_variab": {"var": {"opt_title": {"?": [[272, "        for opt_title, option in self.gen_command_options(command):"]]}}, "param": {"self": {"CliOptions": [[269, "    def get_one_option_variable(self, command, title):"]]}, "title": {"?": [[269, "    def get_one_option_variable(self, command, title):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.options_to_process": {"param": {"command": {"None": [[220, "    def options_to_process(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.rese": {"var": {"cp_opt": {"?": [[235, "            cp_opt = option[\"cpanel_option\"]"]]}, "option": {"?": [[234, "        for option in self.options_to_process(command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.set_control_title": {"param": {"opts": {"?": [[139, "    def set_control_title(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_cli_arguments": {"var": {"meth": {"?": [[106, "        meth = getattr(cli_source, classname)(None, command)"]]}}, "param": {"command": {"None": [[104, "    def get_cli_arguments(cli_source, classname, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_cli": {"var": {"mod_classes": {"[?]": [[47, "        mod_classes = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.expand_action_option": {"var": {"old_val": {"?": [[208, "        old_val = option[\"action_option\"]"]]}, "opts": {"dict": [[206, "        opts = {opt[\"opts\"][0]: opt[\"opts\"][-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.reset": {"param": {"self": {"CliOptions": [[230, "    def reset(self, command=None):"]]}, "command": {"None": [[230, "    def reset(self, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.extract_": {"var": {"options": {"None": [[96, "            options = self.process_options(options, command)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions._get_tools_cli_classe": {"var": {"tools_dir": {"str": [[61, "        tools_dir = os.path.join(base_path, \"tools\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.gen_cli_argument": {"param": {"self": {"CliOptions": [[277, "    def gen_cli_arguments(self, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.build_option": {"var": {"mod_classes": {"[?]": [[39, "                mod_classes = self.get_cli_classes(cli)"]], "dict": [[34, "                mod_classes = self._get_tools_cli_classes()"]]}}, "param": {"self": {"CliOptions": [[29, "    def build_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.process_option": {"param": {"self": {"CliOptions": [[109, "    def process_options(self, command_options, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.set_control_": {"var": {"ctltitle": {"?": [[141, "        ctltitle = opts[1] if len(opts) == 2 else opts[0]"], [142, "        ctltitle = ctltitle.replace(\"-\", \" \").replace(\"_\", \" \").strip().title()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.get_cli_argument": {"param": {"classname": {"?": [[104, "    def get_cli_arguments(cli_source, classname, command):"]]}, "cli_source": {"args": [[104, "    def get_cli_arguments(cli_source, classname, command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOption": {"func": {"reset": {"(CliOptions, None) -> None": [[230, "    def reset(self, command=None):"]]}, "get_sysbrowser": {"(CliOptions, ?, ?, ?) -> dict / (CliOptions, ?, ?, None) -> dict": [[168, "    def get_sysbrowser(self, option, options, command):"]]}, "get_cli_classes": {"? -> [?] / args -> [?]": [[45, "    def get_cli_classes(cli_source):"]]}, "_get_tools_cli_classes": {"() -> dict": [[58, "    def _get_tools_cli_classes():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.options.CliOptions.sort_": {"var": {"commands": {"?": [[74, "        commands = sorted(self.format_command_name(command)"], [78, "            commands = ordered + [command for command in commands"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/startup_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.startup_test.test_backen": {"param": {"dummy": {"?": [[13, "def test_backend(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.startup": {"func": {"test_backend": {"? -> None": [[13, "def test_backend(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.startup_test.test_": {"var": {"backend": {"?": [[15, "    backend = get_backend()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.startup_test.test_backend": {"var": {"lib": {"?": [[17, "    lib = inspect.getmodule(test_var).__name__.split(\".\")[0]"]]}, "test_var": {"?": [[16, "    test_var = K.variable((1, 1, 4, 4))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dfl_h128_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"DFL H128 Model (Adapted from https://github.com/iperov/DeepFaceLab)\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/match_hist.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.hist_match": {"var": {"new_masked": {"?": [[32, "        new_masked = new_channel[mask_indices]"]]}, "t_quants": {"?": [[36, "        t_quants = np.cumsum(t_counts, dtype='float32')"]]}, "t_values": {"?": [[34, "        t_values, t_counts = np.unique(old_masked, return_counts=True)"]]}, "s_quants": {"int": [[37, "        s_quants = threshold * s_quants / s_quants[-1]  # cdf"]], "?": [[35, "        s_quants = np.cumsum(s_counts, dtype='float32')"]]}, "old_masked": {"?": [[31, "        old_masked = old_channel[mask_indices]"]]}, "interp_s_values": {"?": [[39, "        interp_s_values = np.interp(s_quants, t_quants, t_values)"]]}, "_": {"?": [[33, "        _, bin_idx, s_counts = np.unique(new_masked, return_inverse=True, return_counts=True)"]]}}, "param": {"mask_indices": {"?": [[23, "    def hist_match(old_channel, new_channel, mask_indices, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.hist_matc": {"param": {"threshold": {"int": [[23, "    def hist_match(old_channel, new_channel, mask_indices, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Col": {"func": {"process": {"(Color, ?, ?, ?) -> None": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color": {"func": {"hist_match": {"(?, ?, ?, int) -> None / (?, ?, ?, ?) -> None": [[23, "    def hist_match(old_channel, new_channel, mask_indices, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.hist_mat": {"param": {"old_channel": {"?": [[23, "    def hist_match(old_channel, new_channel, mask_indices, threshold):"]]}, "new_channel": {"?": [[23, "    def hist_match(old_channel, new_channel, mask_indices, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.proc": {"param": {"self": {"Color": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.pro": {"var": {"mask_indices": {"?": [[13, "        mask_indices = np.nonzero(raw_mask.squeeze())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.proce": {"param": {"raw_mask": {"?": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist.Color.process": {"var": {"new_face": {"[None]": [[14, "        new_face = [self.hist_match(old_face[:, :, c],"]], "?": [[19, "        new_face = np.stack(new_face, axis=-1)"]]}}, "param": {"old_face": {"?": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}, "new_face": {"?": [[12, "    def process(self, old_face, new_face, raw_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist": {"class": {"Color": {"<Color>": [[9, "class Color(Adjustment):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/control_helper.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.build_control_labe": {"var": {"lbl": {"?": [[782, "        lbl = ttk.Label(self.frame, text=self.option.title, width=self.label_width, anchor=tk.W)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.destroy_children": {"var": {"subframe": {"?": [[666, "        for subframe in self.subframes:"]]}, "child": {"?": [[667, "            for child in subframe.winfo_children():"]]}}, "param": {"self": {"AutoFillContainer": [[664, "    def destroy_children(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.build_pane": {"var": {"ctl": {"ControlBuilder": [[434, "            ctl = ControlBuilder(group_frame[\"frame\"],"]]}, "control": {"ControlBuilder": [[444, "        for control in self.controls:"]]}}, "param": {"scrollbar": {"bool": [[425, "    def build_panel(self, blank_nones, scrollbar):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilde": {"func": {"_multi_option_control": {"(ControlBuilder, ?) -> None": [[807, "    def _multi_option_control(self, option_type):"]]}, "build_control": {"ControlBuilder -> None": [[771, "    def build_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPan": {"func": {"update_scrollbar": {"(ControlPanel, ?) -> None": [[480, "    def update_scrollbar(self, event):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.__init__": {"param": {"self": {"AutoFillContainer": [[505, "    def __init__(self, parent, initial_columns, max_columns):"]]}, "parent": {"?": [[505, "    def __init__(self, parent, initial_columns, max_columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.item": {"param": {"self": {"AutoFillContainer": [[533, "    def items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.set_": {"var": {"subframes": {"[?]": [[549, "        subframes = []"]]}, "subframe": {"?": [[552, "            subframe = ttk.Frame(self.parent, name=name)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.get_tk_var": {"param": {"self": {"ControlPanelOption": [[267, "    def get_tk_var(self, track_modified):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.build_p": {"param": {"blank_nones": {"bool": [[425, "    def build_panel(self, blank_nones, scrollbar):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.is_radio": {"param": {"self": {"ControlPanelOption": [[178, "    def is_radio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get_group_f": {"var": {"is_master": {"bool": [[455, "            is_master = group == \"_master\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.__init__": {"param": {"self": {"ControlBuilder": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}, "option": {"ControlPanelOption": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}, "parent": {"None": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder._multi_option_cont": {"var": {"holder": {"AutoFillContainer": [[822, "        holder = AutoFillContainer(ctl, self.option_columns, self.option_columns)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.set_subfram": {"param": {"self": {"AutoFillContainer": [[547, "    def set_subframes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder._get_multi_help_items": {"var": {"intro": {"?": [[860, "            intro = all_help[0]"]], "str": [[858, "        intro = \"\""]]}, "retval": {"(str, dict)": [[861, "        retval = (intro, {re.sub(r'[^A-Za-z0-9\\-]+', '',"]]}, "all_help": {"?": [[857, "        all_help = helptext.splitlines()"]]}}, "param": {"helptext": {"?": [[841, "    def _get_multi_help_items(helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_to_optionsframe": {"var": {"ctl": {"?": [[929, "            ctl = self.option.control(self.frame, variable=self.option.tk_var, text=None)"], [936, "            ctl = self.option.control(self.frame,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder._multi_option_contro": {"var": {"ctl": {"<MultiOption>": [[824, "            ctl = ttk.Radiobutton if option_type == \"radio\" else MultiOption"]], "?": [[819, "        ctl = ttk.LabelFrame(self.frame,"]], "MultiOption": [[825, "            ctl = ctl(holder.subframe,"]]}, "helptext": {"str": [[831, "                helptext = help_items[choice.lower()].capitalize()"], [832, "                helptext = \"{}\\n\\n - {}\".format("]]}}, "param": {"self": {"ControlBuilder": [[807, "    def _multi_option_control(self, option_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.get_": {"var": {"control": {"?": [[257, "            control = ttk.Combobox"], [259, "            control = ttk.Checkbutton"], [263, "            control = ttk.Entry"]], "str": [[253, "            control = \"radio\""], [255, "            control = \"multi\""], [261, "            control = \"scale\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.__ini": {"param": {"header_text": {"None": [[357, "                 blank_nones=True, scrollbar=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.helptext": {"param": {"self": {"FileBrowser": [[979, "    def helptext(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.get_all_children_confi": {"var": {"custom_kwargs": {"dict": [[618, "                    custom_kwargs = dict("], [622, "                    custom_kwargs = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.sub": {"var": {"frame": {"?": [[540, "        frame = self.subframes[self._idx]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.repack_column": {"param": {"self": {"AutoFillContainer": [[670, "    def repack_columns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.slider_control": {"var": {"cmd": {"?": [[882, "        cmd = partial(set_slider_rounding,"]]}, "vcmd": {"?": [[873, "        vcmd = (self.frame.register(validate))"]]}, "tbox": {"?": [[874, "        tbox = ttk.Entry(self.frame,"]]}, "rc_menu": {"ContextMenu": [[889, "        rc_menu = _get_contextmenu(tbox)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser": {"func": {"ask_context": {"(FileBrowser, ?, ?) -> None": [[1084, "    def ask_context(self, filepath, filetypes):"]]}, "ask_load": {"(?, ?) -> None": [[1055, "    def ask_load(filepath, filetypes):"]]}, "__init__": {"? -> ?": [[964, "    def __init__(self, opt_name, tk_var, control_frame, sysbrowser_dict):"]]}, "helptext": {"FileBrowser -> dict": [[979, "    def helptext(self):"]]}, "ask_save": {"(?, None) -> None": [[1072, "    def ask_save(filepath, filetypes=None):"]]}, "set_context_action_option": {"(FileBrowser, ?) -> None / (FileBrowser, [?]) -> None": [[1033, "    def set_context_action_option(self, options):"]]}, "ask_nothing": {"(?, None) -> None": [[1080, "    def ask_nothing(filepath, filetypes=None):  # pylint:disable=unused-argument"]]}, "ask_multi_load": {"(?, ?) -> None": [[1063, "    def ask_multi_load(filepath, filetypes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_to_checkframe": {"var": {"ctl": {"?": [[952, "        ctl = self.option.control(chkframe,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileB": {"func": {"add_browser_buttons": {"FileBrowser -> None": [[1003, "    def add_browser_buttons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.checkbuttons_": {"param": {"frame": {"?": [[492, "    def checkbuttons_frame(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.__init__": {"param": {"self": {"FileBrowser": [[964, "    def __init__(self, opt_name, tk_var, control_frame, sysbrowser_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_to_": {"var": {"chkframe": {"?": [[951, "        chkframe = self.chkbtns.subframe"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.get_all_children_config": {"var": {"id_": {"str": [[614, "                id_ = str(child)"]]}, "child": {"?": [[612, "        for child in widget.winfo_children():"]]}}, "param": {"self": {"AutoFillContainer": [[610, "    def get_all_children_config(self, widget, child_list):"]]}, "child_list": {"[dict]": [[610, "    def get_all_children_config(self, widget, child_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_to_optionsfra": {"var": {"rc_menu": {"ContextMenu": [[939, "            rc_menu = _get_contextmenu(ctl)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_h": {"class": {"ControlPanelOption": {"<ControlPanelOption>": [[74, "class ControlPanelOption():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get_group_fram": {"param": {"self": {"ControlPanel": [[450, "    def get_group_frame(self, group):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.set": {"param": {"self": {"ControlPanelOption": [[235, "    def set(self, value):"]]}, "value": {"?": [[235, "    def set(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.resize_frame": {"var": {"canvas_width": {"?": [[487, "        canvas_width = event.width"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.rounding": {"param": {"self": {"ControlPanelOption": [[189, "    def rounding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.build_pan": {"var": {"filebrowser": {"FileBrowser": [[445, "            filebrowser = control.filebrowser"]]}}, "param": {"self": {"ControlPanel": [[425, "    def build_panel(self, blank_nones, scrollbar):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.form": {"param": {"action_option": {"?": [[993, "    def format_action_option(action_option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_to_optionsfram": {"param": {"self": {"ControlBuilder": [[924, "    def control_to_optionsframe(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_fram": {"param": {"self": {"ControlBuilder": [[755, "    def control_frame(self, parent):"]]}, "parent": {"None": [[755, "    def control_frame(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.get_contro": {"param": {"self": {"ControlPanelOption": [[250, "    def get_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.set_initial_valu": {"param": {"self": {"ControlPanelOption": [[239, "    def set_initial_value(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get_grou": {"var": {"opts_frame": {"AutoFillContainer -> None": [[456, "            opts_frame = self.optsframe.subframe"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper": {"var": {"_RECREATE_OBJECTS": {"dict": [[21, "_RECREATE_OBJECTS = dict(tooltips=dict(), commands=dict(), contextmenus=dict())"]]}}, "func": {"_get_contextmenu": {"? -> ContextMenu": [[33, "def _get_contextmenu(widget):"]]}, "_get_tooltip": {"(None, ?, int) -> Tooltip / (?, ?, int) -> Tooltip / (MultiOption, str, int) -> Tooltip": [[24, "def _get_tooltip(widget, text, wraplength=600):"]]}, "_add_command": {"(?, ?) -> None": [[42, "def _add_command(name, func):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.__ini": {"param": {"checkbuttons_frame": {"None": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder._multi_option_c": {"var": {"help_intro": {"str": [[818, "        help_intro, help_items = self._get_multi_help_items(self.option.helptext)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillConta": {"func": {"destroy_children": {"AutoFillContainer -> None": [[664, "    def destroy_children(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.validat": {"var": {"range_max": {"int": [[586, "        range_max = (self.columns + 1) * self.single_column_width"]]}, "range_min": {"int": [[585, "        range_min = self.columns * self.single_column_width"]]}}, "param": {"self": {"AutoFillContainer": [[578, "    def validate(self, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.pack_config_cleaner": {"param": {"widget": {"?": [[659, "    def pack_config_cleaner(widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.__init": {"param": {"max_columns": {"int": [[505, "    def __init__(self, parent, initial_columns, max_columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get_group_frame": {"var": {"group": {"?": [[452, "        group = group.lower()"]]}}, "param": {"group": {"ControlPanelOption -> str": [[450, "    def get_group_frame(self, group):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel": {"func": {"get_opts_frame": {"ControlPanel -> (?, AutoFillContainer)": [[392, "    def get_opts_frame(self):"]]}, "checkbuttons_frame": {"(ControlPanel, ?) -> AutoFillContainer": [[492, "    def checkbuttons_frame(self, frame):"]]}, "add_info": {"(ControlPanel, ?) -> None": [[403, "    def add_info(self, frame):"]]}, "get_group_frame": {"(ControlPanel, ControlPanelOption -> str) -> None / (ControlPanel, ?) -> None": [[450, "    def get_group_frame(self, group):"]]}, "__init__": {"? -> ?": [[355, "    def __init__(self, parent, options,  # pylint:disable=too-many-arguments"]]}, "resize_frame": {"(ControlPanel, ?) -> None": [[484, "    def resize_frame(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_sav": {"var": {"filename": {"?": [[1074, "        filename = FileHandler(\"savefilename\", filetypes).retfile"]]}}, "param": {"filetypes": {"None": [[1072, "    def ask_save(filepath, filetypes=None):"]]}, "filepath": {"?": [[1072, "    def ask_save(filepath, filetypes=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.__in": {"var": {"label_width": {"int": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}}, "param": {"label_width": {"int": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.__in": {"param": {"track_modified": {"bool": [[118, "                 helptext=None, track_modified=False, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.group": {"param": {"self": {"ControlPanelOption": [[154, "    def group(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.set_initial_": {"param": {"value": {"?": [[239, "    def set_initial_value(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_load": {"var": {"filename": {"?": [[1057, "        filename = FileHandler(\"filename\", filetypes).retfile"]]}}, "param": {"filetypes": {"?": [[1055, "    def ask_load(filepath, filetypes):"]]}, "filepath": {"?": [[1055, "    def ask_load(filepath, filetypes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.add_scrollbar": {"param": {"self": {"ControlPanel": [[471, "    def add_scrollbar(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.get_tk_": {"var": {"var": {"?": [[270, "            var = tk.BooleanVar()"], [272, "            var = tk.IntVar()"], [274, "            var = tk.DoubleVar()"], [276, "            var = tk.StringVar()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.checkbuttons": {"var": {"chk_frame": {"?": [[497, "        chk_frame = ttk.Frame(frame, name=\"chkbuttons\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelO": {"var": {"is_multi_option": {"bool": [[117, "                 is_multi_option=False, rounding=None, min_max=None, sysbrowser=None,"]]}}, "param": {"is_multi_option": {"bool": [[118, "                 helptext=None, track_modified=False, command=None):"]]}}, "func": {"is_multi_option": {"ControlPanelOption -> None": [[183, "    def is_multi_option(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPane": {"param": {"option_columns": {"int": [[357, "                 blank_nones=True, scrollbar=True):"]]}}, "func": {"add_scrollbar": {"ControlPanel -> None": [[471, "    def add_scrollbar(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.__in": {"param": {"sysbrowser_dict": {"?": [[964, "    def __init__(self, opt_name, tk_var, control_frame, sysbrowser_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowse": {"func": {"format_action_option": {"? -> None": [[993, "    def format_action_option(action_option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_nothing": {"param": {"filetypes": {"None": [[1080, "    def ask_nothing(filepath, filetypes=None):  # pylint:disable=unused-argument"]]}, "filepath": {"?": [[1080, "    def ask_nothing(filepath, filetypes=None):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get": {"var": {"group_frame": {"?": [[458, "                group_frame = ttk.Frame(opts_frame, name=group.lower())"], [460, "                group_frame = ttk.LabelFrame(opts_frame,"], [468, "        group_frame = self.group_frames[group]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.set_context_action_": {"param": {"options": {"[?]": [[1033, "    def set_context_action_option(self, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlB": {"func": {"build_control_label": {"ControlBuilder -> None": [[779, "    def build_control_label(self):"]]}, "build_one_control": {"ControlBuilder -> None": [[789, "    def build_one_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.build_panel": {"var": {"group_frame": {"None": [[433, "            group_frame = self.get_group_frame(option.group)"]]}, "option": {"ControlPanelOption": [[432, "        for option in self.options:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel._adjust_wraplength": {"var": {"label": {"?": [[389, "        label = event.widget"]]}}, "param": {"event": {"?": [[387, "    def _adjust_wraplength(event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.set_context_action_op": {"var": {"actions": {"dict": [[1038, "        actions = {opt.name: opt.tk_var for opt in options}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.__init": {"var": {"blank_nones": {"bool": [[357, "                 blank_nones=True, scrollbar=True):"]]}}, "param": {"max_columns": {"int": [[357, "                 blank_nones=True, scrollbar=True):"]]}, "blank_nones": {"bool": [[357, "                 blank_nones=True, scrollbar=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.add_info": {"var": {"gui_style": {"?": [[405, "        gui_style = ttk.Style()"]]}, "label_frame": {"?": [[415, "        label_frame = ttk.Frame(info_frame, style='White.TFrame')"]]}, "style": {"str": [[420, "            style = \"Header.TLabel\" if idx == 0 else \"Body.TLabel\""]]}, "idx": {"?": [[417, "        for idx, line in enumerate(self.header_text.splitlines()):"]]}}, "param": {"self": {"ControlPanel": [[403, "    def add_info(self, frame):"]]}, "frame": {"?": [[403, "    def add_info(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_context": {"var": {"filename": {"?": [[1089, "        filename = FileHandler(\"context\","]]}}, "param": {"self": {"FileBrowser": [[1084, "    def ask_context(self, filepath, filetypes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.helptex": {"var": {"retval": {"dict": [[981, "        retval = dict(folder=\"Select a folder...\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.build_control_lab": {"param": {"self": {"ControlBuilder": [[779, "    def build_control_label(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillCont": {"func": {"config_cleaner": {"? -> dict": [[638, "    def config_cleaner(widget):"]]}, "pack_config_cleaner": {"? -> dict": [[659, "    def pack_config_cleaner(widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.validate": {"param": {"width": {"?": [[578, "    def validate(self, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlP": {"func": {"_adjust_wraplength": {"? -> None": [[387, "    def _adjust_wraplength(event):"]]}, "build_panel": {"(ControlPanel, ?, ?) -> None / (ControlPanel, bool, bool) -> None": [[425, "    def build_panel(self, blank_nones, scrollbar):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.add_": {"var": {"info": {"?": [[421, "            info = ttk.Label(label_frame, text=line, style=style, anchor=tk.W)"]]}, "scrollbar": {"?": [[474, "        scrollbar = ttk.Scrollbar(self, command=self._canvas.yview)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.helptext": {"param": {"self": {"ControlPanelOption": [[199, "    def helptext(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.subfram": {"var": {"next_idx": {"int": [[541, "        next_idx = self._idx + 1 if self._idx + 1 < self.columns else 0"]]}}, "param": {"self": {"AutoFillContainer": [[538, "    def subframe(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOptio": {"param": {"name": {"None": [[144, "    def name(self):"]]}, "initial_value": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}}, "func": {"min_max": {"ControlPanelOption -> None": [[194, "    def min_max(self):"]]}, "set_initial_value": {"(ControlPanelOption, ?) -> None": [[239, "    def set_initial_value(self, value):"]]}, "name": {"ControlPanelOption -> None": [[144, "    def name(self):"]]}, "__init__": {"? -> ?": [[115, "    def __init__(self, title, dtype,  # pylint:disable=too-many-arguments"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder._multi_option_control": {"var": {"choice": {"?": [[823, "        for choice in self.option.choices:"]]}}, "param": {"option_type": {"?": [[807, "    def _multi_option_control(self, option_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.rearrange_column": {"param": {"self": {"AutoFillContainer": [[560, "    def rearrange_columns(self, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.nam": {"param": {"self": {"bool": [[144, "    def name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper._add_command": {"param": {"name": {"?": [[42, "def _add_command(name, func):"]]}, "func": {"?": [[42, "def _add_command(name, func):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_multi_load": {"var": {"final_names": {"str": [[1067, "            final_names = \" \".join(\"\\\"{}\\\"\".format(fname) for fname in filenames)"]]}, "filenames": {"?": [[1065, "        filenames = FileHandler(\"filename_multi\", filetypes).retfile"]]}}, "param": {"filetypes": {"?": [[1063, "    def ask_multi_load(filepath, filetypes):"]]}, "filepath": {"?": [[1063, "    def ask_multi_load(filepath, filetypes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.default": {"param": {"self": {"ControlPanelOption": [[161, "    def default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_contex": {"var": {"selected_variable": {"?": [[1088, "        selected_variable = self.destination"]]}, "selected_action": {"?": [[1087, "        selected_action = self.action_option.get()"]]}}, "param": {"filetypes": {"?": [[1084, "    def ask_context(self, filepath, filetypes):"]]}, "filepath": {"?": [[1084, "    def ask_context(self, filepath, filetypes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.slider_check_float": {"param": {"value": {"?": [[910, "    def slider_check_float(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.build_contro": {"param": {"self": {"ControlBuilder": [[771, "    def build_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_": {"var": {"frame": {"?": [[758, "        frame = ttk.Frame(parent, name=\"fr_{}\".format(self.option.name))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_fol": {"var": {"dirname": {"?": [[1049, "        dirname = FileHandler(\"dir\", filetypes).retfile"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption": {"var": {"helptext": {"str": [[209, "        helptext = \". \".join(i.capitalize() for i in helptext.split(\". \"))"], [210, "        helptext = self.title + \" - \" + helptext"]], "?": [[201, "        helptext = self._options[\"helptext\"]"], [206, "            helptext = helptext[2:].replace(\"\\nL|\", \"\\n - \").replace(\"\\n\", \"\\n\\n\")"], [208, "            helptext = helptext.replace(\"\\n\\t\", \"\\n - \").replace(\"%%\", \"%\")"]]}, "group": {"str": [[157, "        group = \"_master\" if group is None else group"]], "?": [[156, "        group = self._options[\"group\"]"]]}}, "param": {"choices": {"dict": [[173, "    def choices(self):"]]}, "tk_var": {"None": [[144, "    def name(self):"]]}}, "func": {"set": {"(ControlPanelOption, ?) -> None": [[235, "    def set(self, value):"]]}, "is_radio": {"ControlPanelOption -> None": [[178, "    def is_radio(self):"]]}, "title": {"ControlPanelOption -> None": [[149, "    def title(self):"]]}, "default": {"ControlPanelOption -> None": [[161, "    def default(self):"]]}, "_modified_callback": {"None -> None / ? -> None": [[290, "    def _modified_callback(command):"]]}, "get": {"ControlPanelOption -> ?": [[214, "    def get(self):"]]}, "value": {"ControlPanelOption -> ControlPanelOption -> None": [[166, "    def value(self):"]]}, "choices": {"ControlPanelOption -> None": [[173, "    def choices(self):"]]}, "helptext": {"ControlPanelOption -> str": [[199, "    def helptext(self):"]]}, "group": {"ControlPanelOption -> str": [[154, "    def group(self):"]]}, "get_tk_var": {"(ControlPanelOption, ?) -> None / (ControlPanelOption, bool) -> None": [[267, "    def get_tk_var(self, track_modified):"]]}, "_model_callback": {"? -> None": [[302, "    def _model_callback(var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.get": {"var": {"val": {"int": [[228, "                val = 0"]], "float": [[230, "                val = 0.0"]], "?": [[225, "            val = self.tk_var.get()"]]}}, "param": {"self": {"ControlPanelOption": [[214, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper._get_contextmenu": {"param": {"widget": {"?": [[33, "def _get_contextmenu(widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper._get_tooltip": {"param": {"text": {"str": [[24, "def _get_tooltip(widget, text, wraplength=600):"]]}, "widget": {"{MultiOption | None}": [[24, "def _get_tooltip(widget, text, wraplength=600):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.compile_widget_config": {"var": {"zipped": {"?": [[595, "        zipped = zip_longest(*(subframe.winfo_children() for subframe in self.subframes))"]]}, "children": {"[?]": [[596, "        children = [child for group in zipped for child in group if child is not None]"]]}}, "param": {"self": {"AutoFillContainer": [[593, "    def compile_widget_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.set_tk_var": {"var": {"val": {"{ControlPanelOption -> ControlPanelOption -> None | str}": [[765, "        val = \"\" if self.option.value is None and blank_nones else self.option.value"]]}}, "param": {"self": {"ControlBuilder": [[763, "    def set_tk_var(self, blank_nones):"]]}, "blank_nones": {"bool": [[763, "    def set_tk_var(self, blank_nones):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.add": {"var": {"info_frame": {"?": [[413, "        info_frame = ttk.Frame(frame, style='White.TFrame', relief=tk.SOLID)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.rearrange_columns": {"param": {"width": {"?": [[560, "    def rearrange_columns(self, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.update_scrollbar": {"param": {"self": {"ControlPanel": [[480, "    def update_scrollbar(self, event):  # pylint: disable=unused-argument"]]}, "event": {"?": [[480, "    def update_scrollbar(self, event):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.config_cleaner": {"var": {"new_config": {"dict": [[643, "        new_config = dict()"]]}, "val": {"str": [[652, "            val = str(val) if isinstance(val, Tcl_Obj) else val"], [654, "            val = _RECREATE_OBJECTS[\"commands\"][val] if key == \"command\" and val != \"\" else val"]], "?": [[647, "            val = widget.cget(key)"]]}, "key": {"?": [[644, "        for key in widget.config():"]]}}, "param": {"widget": {"?": [[638, "    def config_cleaner(widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.slider_contro": {"var": {"ctl": {"?": [[887, "        ctl = ttk.Scale(self.frame, variable=self.option.tk_var, command=cmd)"]]}, "validate": {"{? -> bool | ? -> bool}": [[872, "        validate = self.slider_check_int if self.option.dtype == int else self.slider_check_float"]]}}, "param": {"self": {"ControlBuilder": [[867, "    def slider_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.min_max": {"param": {"self": {"ControlPanelOption": [[194, "    def min_max(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.build_one_contro": {"var": {"ctl": {"None": [[793, "            ctl = self.slider_control()"], [795, "            ctl = self._multi_option_control(self.option.control)"], [797, "            ctl = self.control_to_checkframe()"], [799, "            ctl = self.control_to_optionsframe()"]]}}, "param": {"self": {"ControlBuilder": [[789, "    def build_one_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.get_tk_v": {"param": {"track_modified": {"bool": [[267, "    def get_tk_var(self, track_modified):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.checkbuttons_fram": {"var": {"holder": {"AutoFillContainer": [[498, "        holder = AutoFillContainer(chk_frame, self.option_columns, self.option_columns)"]]}}, "param": {"self": {"ControlPanel": [[492, "    def checkbuttons_frame(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.slider_check_int": {"param": {"value": {"?": [[897, "    def slider_check_int(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.valu": {"param": {"self": {"dict": [[166, "    def value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.set_subframes": {"var": {"name": {"str": [[551, "            name = \"af_subframe_{}\".format(idx)"]]}, "idx": {"int": [[550, "        for idx in range(self.max_columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuild": {"func": {"control_frame": {"(ControlBuilder, None) -> None / (ControlBuilder, ?) -> None": [[755, "    def control_frame(self, parent):"]]}, "set_tk_var": {"(ControlBuilder, bool) -> None / (ControlBuilder, ?) -> None": [[763, "    def set_tk_var(self, blank_nones):"]]}, "control_to_checkframe": {"ControlBuilder -> None": [[948, "    def control_to_checkframe(self):"]]}, "control_to_optionsframe": {"ControlBuilder -> None": [[924, "    def control_to_optionsframe(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.choic": {"param": {"self": {"ControlPanelOption -> None": [[173, "    def choices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBu": {"func": {"slider_check_float": {"? -> bool": [[910, "    def slider_check_float(value):"]]}, "slider_check_int": {"? -> bool": [[897, "    def slider_check_int(value):"]]}, "slider_control": {"ControlBuilder -> None": [[867, "    def slider_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.pack_widget_clon": {"param": {"self": {"AutoFillContainer": [[681, "    def pack_widget_clones(self, widget_dicts, old_children=None, new_children=None):"]]}, "widget_dicts": {"{[?] | [dict]}": [[681, "    def pack_widget_clones(self, widget_dicts, old_children=None, new_children=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.__in": {"var": {"label_width": {"int": [[356, "                 label_width=20, columns=1, max_columns=4, option_columns=4, header_text=None,"]]}}, "param": {"label_width": {"int": [[357, "                 blank_nones=True, scrollbar=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get_opts_": {"var": {"mainframe": {"?": [[394, "        mainframe = ttk.Frame(self._canvas)"]]}, "optsframe": {"?": [[397, "        optsframe = ttk.Frame(mainframe, name=\"opts_frame\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.tit": {"param": {"self": {"ControlPanelOption": [[149, "    def title(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.set_slider_rounding": {"var": {"steps": {"[int]": [[69, "        steps = range(min_max[0], min_max[1] + round_to, round_to)"]]}, "value": {"int": [[70, "        value = min(steps, key=lambda x: abs(x - int(float(value))))"]]}}, "param": {"var": {"?": [[49, "def set_slider_rounding(value, var, d_type, round_to, min_max):"]]}, "min_max": {"(int, float)": [[49, "def set_slider_rounding(value, var, d_type, round_to, min_max):"]]}, "round_to": {"int": [[49, "def set_slider_rounding(value, var, d_type, round_to, min_max):"]]}, "d_type": {"<float>": [[49, "def set_slider_rounding(value, var, d_type, round_to, min_max):"]]}, "value": {"?": [[49, "def set_slider_rounding(value, var, d_type, round_to, min_max):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.add_browser_button": {"var": {"browser": {"?": [[1009, "        for browser in self.browser:"]]}}, "param": {"self": {"FileBrowser": [[1003, "    def add_browser_buttons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContain": {"func": {"set_subframes": {"AutoFillContainer -> [?]": [[547, "    def set_subframes(self):"]]}, "subframe": {"AutoFillContainer -> None": [[538, "    def subframe(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption._model_callback": {"var": {"folder": {"?": [[312, "        folder = var.get()"]]}, "config": {"None": [[305, "        config = get_config()"]]}}, "param": {"var": {"?": [[302, "    def _model_callback(var):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.set_context_action_option": {"param": {"self": {"FileBrowser": [[1033, "    def set_context_action_option(self, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.scale_column_width": {"var": {"retval": {"int": [[527, "        retval = round(original_size * scale)"]]}, "scale": {"int": [[526, "        scale = 1 + (((font_size / original_fontsize) - 1) / 2)"]]}, "font_size": {"?": [[523, "        font_size = get_config().user_config_dict[\"font_size\"]"]]}}, "param": {"original_fontsize": {"int": [[521, "    def scale_column_width(original_size, original_fontsize):"]]}, "original_size": {"int": [[521, "    def scale_column_width(original_size, original_fontsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer": {"param": {"initial_columns": {"int": [[505, "    def __init__(self, parent, initial_columns, max_columns):"]]}}, "func": {"pack_widget_clones": {"(AutoFillContainer, ?, None, None) -> None / (AutoFillContainer, {[?] | [dict]}, None, None) -> None / (AutoFillContainer, ?, [?], [?]) -> None": [[681, "    def pack_widget_clones(self, widget_dicts, old_children=None, new_children=None):"]]}, "compile_widget_config": {"AutoFillContainer -> None": [[593, "    def compile_widget_config(self):"]]}, "items": {"AutoFillContainer -> int": [[533, "    def items(self):"]]}, "validate": {"(AutoFillContainer, ?) -> bool": [[578, "    def validate(self, width):"]]}, "scale_column_width": {"(?, ?) -> int / (int, int) -> int": [[521, "    def scale_column_width(original_size, original_fontsize):"]]}, "__init__": {"? -> ?": [[505, "    def __init__(self, parent, initial_columns, max_columns):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.add_browser_buttons": {"var": {"img": {"?": [[1023, "            img = get_images().icons[lbl]"]]}, "frame": {"?": [[1006, "        frame = ttk.Frame(self.frame)"]]}, "cmd": {"?": [[1025, "            cmd = partial(action, filepath=self.tk_var, filetypes=self.filetypes)"]]}, "fileopn": {"?": [[1026, "            fileopn = ttk.Button(frame, image=img, command=cmd)"]]}, "action": {"?": [[1024, "            action = getattr(self, \"ask_\" + browser)"]]}, "lbl": {"?": [[1013, "                lbl = self.filetypes"], [1022, "                lbl = browser"]], "str": [[1011, "                lbl = \"save_as\""], [1015, "                lbl = \"load2\""], [1018, "                lbl = \"picture\""], [1020, "                lbl = \"model\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillC": {"func": {"get_all_children_config": {"(AutoFillContainer, ?, ?) -> None / (AutoFillContainer, ?, [dict]) -> [dict]": [[610, "    def get_all_children_config(self, widget, child_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContai": {"func": {"rearrange_columns": {"(AutoFillContainer, ?) -> None": [[560, "    def rearrange_columns(self, width):"]]}, "repack_columns": {"AutoFillContainer -> None": [[670, "    def repack_columns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOpt": {"func": {"rounding": {"ControlPanelOption -> None": [[189, "    def rounding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.ask_folder": {"param": {"filetypes": {"None": [[1043, "    def ask_folder(filepath, filetypes=None):"]]}, "filepath": {"?": [[1043, "    def ask_folder(filepath, filetypes=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper._get_context": {"var": {"rc_menu": {"ContextMenu": [[35, "    rc_menu = ContextMenu(widget)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.is_multi_option": {"param": {"self": {"ControlPanelOption": [[183, "    def is_multi_option(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption._modified_callback": {"var": {"config": {"None": [[296, "        config = get_config()"]]}}, "param": {"command": {"None": [[290, "    def _modified_callback(command):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper._get_toolti": {"param": {"wraplength": {"int": [[24, "def _get_tooltip(widget, text, wraplength=600):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.value": {"var": {"val": {"ControlPanelOption -> None": [[169, "        val = self.default if val is None else val"]], "?": [[168, "        val = self._options[\"initial_value\"]"]]}}, "param": {"val": {"ControlPanelOption": [[173, "    def choices(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOpti": {"func": {"get_control": {"ControlPanelOption -> str": [[250, "    def get_control(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.pack_widget_clones": {"var": {"parent": {"list": [[689, "                parent = new_children[old_children.index(widget_dict[\"parent\"])]"]], "AutoFillContainer -> None": [[693, "                parent = self.subframe"]]}, "clone": {"?": [[694, "            clone = widget_dict[\"class\"](parent,"]]}, "old_children": {"[?]": [[686, "            old_children = [] if old_children is None else old_children"]]}, "widget_dict": {"?": [[684, "        for widget_dict in widget_dicts:"]]}, "new_children": {"[?]": [[687, "            new_children = [] if new_children is None else new_children"]]}, "rc_menu": {"?": [[701, "            rc_menu = widget_dict[\"rc_menu\"]"]]}}, "param": {"new_children": {"[?]": [[681, "    def pack_widget_clones(self, widget_dicts, old_children=None, new_children=None):"]]}, "old_children": {"[?]": [[681, "    def pack_widget_clones(self, widget_dicts, old_children=None, new_children=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.resize_fram": {"param": {"self": {"ControlPanel": [[484, "    def resize_frame(self, event):"]]}, "event": {"?": [[484, "    def resize_frame(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.get_all_children_conf": {"param": {"widget": {"?": [[610, "    def get_all_children_config(self, widget, child_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.__init__": {"var": {"helptext": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "group": {"None": [[116, "                 group=None, default=None, initial_value=None, choices=None, is_radio=False,"]]}}, "param": {"group": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "title": {"{None | str}": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "default": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "dtype": {"{<float> | <int> | <str> | ? -> bool}": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "self": {"ControlPanelOption": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "sysbrowser": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "choices": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "rounding": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "helptext": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "command": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.__init__": {"param": {"scrollbar": {"bool": [[357, "                 blank_nones=True, scrollbar=True):"]]}, "self": {"ControlPanel": [[357, "                 blank_nones=True, scrollbar=True):"]]}, "columns": {"int": [[357, "                 blank_nones=True, scrollbar=True):"]]}, "options": {"{[?] | [ControlPanelOption] | list}": [[357, "                 blank_nones=True, scrollbar=True):"]]}, "parent": {"CommandTab": [[357, "                 blank_nones=True, scrollbar=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanel.get_opts_fram": {"var": {"holder": {"AutoFillContainer": [[399, "        holder = AutoFillContainer(optsframe, self.columns, self.max_columns)"]]}}, "param": {"self": {"ControlPanel": [[392, "    def get_opts_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.__init": {"param": {"blank_nones": {"bool": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrowser.__ini": {"param": {"control_frame": {"None": [[964, "    def __init__(self, opt_name, tk_var, control_frame, sysbrowser_dict):"]]}, "opt_name": {"?": [[964, "    def __init__(self, opt_name, tk_var, control_frame, sysbrowser_dict):"]]}, "tk_var": {"?": [[964, "    def __init__(self, opt_name, tk_var, control_frame, sysbrowser_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_help": {"var": {"logger": {"?": [[16, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"ControlPanel": {"<ControlPanel>": [[317, "class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors"]]}, "ControlBuilder": {"<ControlBuilder>": [[713, "class ControlBuilder():"]]}, "AutoFillContainer": {"<AutoFillContainer>": [[503, "class AutoFillContainer():"]]}, "FileBrowser": {"<FileBrowser>": [[962, "class FileBrowser():"]]}}, "func": {"set_slider_rounding": {"(?, ?, <float>, int, (int, float)) -> None / (?, ?, ?, ?, ?) -> None": [[49, "def set_slider_rounding(value, var, d_type, round_to, min_max):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder": {"param": {"option_columns": {"int": [[735, "                 label_width, checkbuttons_frame, blank_nones):"]]}}, "func": {"__init__": {"? -> ?": [[734, "    def __init__(self, parent, option, option_columns,  # pylint: disable=too-many-arguments"]]}, "_get_multi_help_items": {"? -> (str, dict)": [[841, "    def _get_multi_help_items(helptext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlBuilder.control_to_checkfram": {"param": {"self": {"ControlBuilder": [[948, "    def control_to_checkframe(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.repack_columns": {"var": {"idx": {"?": [[672, "        for idx, subframe in enumerate(self.subframes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.AutoFillContainer.rearrang": {"var": {"new_columns": {"int": [[565, "        new_columns = min(self.max_columns, max(1, width // self.single_column_width))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.FileBrow": {"func": {"ask_folder": {"(?, None) -> None": [[1043, "    def ask_folder(filepath, filetypes=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.control_helper.ControlPanelOption.__init": {"param": {"min_max": {"None": [[118, "                 helptext=None, track_modified=False, command=None):"]]}, "is_radio": {"bool": [[118, "                 helptext=None, track_modified=False, command=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/display_command.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.display_item_proc": {"var": {"should_update": {"?": [[90, "        should_update = self.update_preview.get()"]]}, "sortednames": {"?": [[88, "        sortednames = sorted(list(get_images().previewtrain.keys()))"]]}, "existing": {"dict": [[89, "        existing = self.subnotebook_get_titles_ids()"]]}}, "param": {"self": {"PreviewTrain": [[85, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.save_item": {"param": {"self": {"PreviewTrain": [[118, "    def save_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.__init__": {"param": {"self": {"PreviewTrain": [[72, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.update_chil": {"var": {"widget": {"None": [[115, "            widget = self.subnotebook_page_from_id(tab_id)"]]}}, "param": {"tab_id": {"?": [[110, "    def update_child(self, tab_id, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphD": {"func": {"display_item_set": {"GraphDisplay -> None": [[229, "    def display_item_set(self):"]]}, "display_item_process": {"GraphDisplay -> None": [[251, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.add_child": {"var": {"lblpreview": {"?": [[44, "        lblpreview = ttk.Label(preview, image=get_images().previewoutput[1])"]]}, "preview": {"None": [[43, "        preview = self.subnotebook_add_page(self.tabname, widget=None)"]]}}, "param": {"self": {"PreviewExtract": [[40, "    def add_child(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.display_item_set": {"param": {"self": {"PreviewTrain": [[76, "    def display_item_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.update_chil": {"var": {"widget": {"?": [[51, "        for widget in self.subnotebook_get_widgets():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtrac": {"func": {"save_items": {"PreviewExtract -> None": [[54, "    def save_items(self):"]]}, "display_item_set": {"PreviewExtract -> None": [[24, "    def display_item_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.save_items": {"var": {"graph": {"?": [[292, "        for graph in self.subnotebook.children.values():"]]}, "graphlocation": {"?": [[289, "        graphlocation = FileHandler(\"dir\", None).retfile"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.add_option_smoothing": {"var": {"ctl_frame": {"?": [[206, "        ctl_frame = ttk.Frame(self.optsframe)"]]}, "tbox": {"?": [[212, "        tbox = ttk.Entry(ctl_frame, width=6, textvariable=tk_var, justify=tk.RIGHT)"]]}, "min_max": {"(int, float)": [[203, "        min_max = (0, 0.99)"]]}, "hlp": {"str": [[204, "        hlp = \"Set the smoothing amount. 0 is no smoothing, 0.99 is maximum smoothing.\""]]}, "item": {"?": [[223, "        for item in (tbox, ctl):"]]}, "ctl": {"?": [[215, "        ctl = ttk.Scale("]]}, "tk_var": {"?": [[202, "        tk_var = get_config().tk_vars[\"smoothgraph\"]"]]}, "lbl": {"?": [[209, "        lbl = ttk.Label(ctl_frame, text=\"Smoothing Amount:\", anchor=tk.W)"]]}}, "param": {"self": {"GraphDisplay": [[199, "    def add_option_smoothing(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanvas.reload": {"param": {"self": {"PreviewTrainCanvas": [[155, "    def reload(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.update_child": {"param": {"self": {"PreviewExtract": [[48, "    def update_child(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.smooth_amount_callback": {"var": {"smooth_amount": {"?": [[273, "        smooth_amount = get_config().tk_vars[\"smoothgraph\"].get()"]]}, "graph": {"?": [[276, "        for graph in self.subnotebook.children.values():"]]}}, "param": {"self": {"GraphDisplay": [[271, "    def smooth_amount_callback(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract": {"func": {"add_child": {"PreviewExtract -> None": [[40, "    def add_child(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay": {"func": {"add_options": {"GraphDisplay -> None": [[180, "    def add_options(self):"]]}, "save_items": {"GraphDisplay -> None": [[287, "    def save_items(self):"]]}, "add_option_smoothing": {"GraphDisplay -> None": [[199, "    def add_option_smoothing(self):"]]}, "add_option_refresh": {"GraphDisplay -> None": [[186, "    def add_option_refresh(self):"]]}, "add_child": {"(GraphDisplay, ?, ?) -> None / (GraphDisplay, ?, Calculations) -> None": [[279, "    def add_child(self, name, data):"]]}, "smooth_amount_callback": {"GraphDisplay -> None": [[271, "    def smooth_amount_callback(self, *args):"]]}, "close": {"GraphDisplay -> None": [[295, "    def close(self):"]]}, "__init__": {"? -> ?": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.display_item_se": {"var": {"smooth_amount_var": {"?": [[232, "        smooth_amount_var = get_config().tk_vars[\"smoothgraph\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.save_item": {"param": {"self": {"GraphDisplay": [[287, "    def save_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanvas.__init__": {"param": {"self": {"PreviewTrainCanvas": [[129, "    def __init__(self, parent, previewname):"]]}, "previewname": {"?": [[129, "    def __init__(self, parent, previewname):"]]}, "parent": {"None": [[129, "    def __init__(self, parent, previewname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.add_option": {"param": {"self": {"GraphDisplay": [[180, "    def add_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCan": {"func": {"save_preview": {"(PreviewTrainCanvas, ?) -> None": [[161, "    def save_preview(self, location):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanvas": {"func": {"reload": {"PreviewTrainCanvas -> None": [[155, "    def reload(self):"]]}, "__init__": {"? -> ?": [[129, "    def __init__(self, parent, previewname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.clos": {"var": {"name": {"?": [[303, "        for name, graph in self.subnotebook.children.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.display_item_proc": {"var": {"loss_key": {"?": [[259, "        for loss_key in display_tabs:"]]}, "existing": {"list": [[254, "        existing = list(self.subnotebook_get_titles_ids().keys())"]]}}, "param": {"self": {"GraphDisplay": [[251, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.update_child": {"param": {"self": {"PreviewTrain": [[110, "    def update_child(self, tab_id, name):"]]}, "name": {"?": [[110, "    def update_child(self, tab_id, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.display_item_process": {"var": {"tab_id": {"?": [[96, "                tab_id = existing[name]"]]}, "name": {"?": [[92, "        for name in sortednames:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanvas.save_preview": {"var": {"filename": {"str": [[165, "        filename = os.path.join(location,"]], "?": [[163, "        filename = self.name"]]}}, "param": {"self": {"PreviewTrainCanvas": [[161, "    def save_preview(self, location):"]]}, "location": {"?": [[161, "    def save_preview(self, location):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.display_item_set": {"var": {"session": {"?": [[231, "        session = get_config().session"]]}}, "param": {"self": {"GraphDisplay": [[229, "    def display_item_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command": {"var": {"logger": {"?": [[18, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"PreviewExtract": {"<PreviewExtract>": [[21, "class PreviewExtract(DisplayOptionalPage):  # pylint: disable=too-many-ancestors"]]}, "GraphDisplay": {"<GraphDisplay>": [[174, "class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors"]]}, "PreviewTrainCanvas": {"<PreviewTrainCanvas>": [[127, "class PreviewTrainCanvas(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}, "PreviewTrain": {"<PreviewTrain>": [[70, "class PreviewTrain(DisplayOptionalPage):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanva": {"func": {"resize": {"(PreviewTrainCanvas, ?) -> None": [[146, "    def resize(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanvas.save_previe": {"var": {"now": {"str": [[164, "        now = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTra": {"func": {"__init__": {"? -> ?": [[72, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.add_child": {"var": {"preview": {"None": [[106, "        preview = self.subnotebook_add_page(name, widget=preview)"]], "PreviewTrainCanvas": [[105, "        preview = PreviewTrainCanvas(self.subnotebook, name)"]]}}, "param": {"self": {"PreviewTrain": [[102, "    def add_child(self, name):"]]}, "name": {"?": [[102, "    def add_child(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.add_child": {"var": {"graph": {"None": [[284, "        graph = self.subnotebook_add_page(name, widget=graph)"]], "TrainingGraph": [[282, "        graph = TrainingGraph(self.subnotebook, data, \"Loss\")"]]}}, "param": {"self": {"GraphDisplay": [[279, "    def add_child(self, name, data):"]]}, "name": {"?": [[279, "    def add_child(self, name, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.display_item_process": {"var": {"total_idx": {"?": [[257, "            total_idx = [idx for idx, key in enumerate(display_tabs) if key.startswith(\"total\")][0]"]]}, "data": {"Calculations": [[264, "            data = Calculations(session=get_config().session,"]]}, "tabname": {"?": [[260, "            tabname = loss_key.replace(\"_\", \" \").title()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.save_item": {"param": {"self": {"PreviewExtract": [[54, "    def save_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanv": {"var": {"framesize": {"(?, ?)": [[149, "        framesize = (event.width, event.height)"], [151, "        framesize = None if framesize == (1, 1) else framesize"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.display_item_proc": {"param": {"self": {"PreviewExtract": [[32, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.display_item_proce": {"var": {"display_tabs": {"?": [[255, "        display_tabs = sorted(self.display_item.loss_keys)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.clo": {"param": {"self": {"GraphDisplay": [[295, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.__init__": {"param": {"parent": {"DisplayNotebook": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "self": {"GraphDisplay": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "waittime": {"int": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "tabname": {"str": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "command": {"None": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}, "helptext": {"str": [[176, "    def __init__(self, parent, tabname, helptext, waittime, command=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.save_items": {"var": {"now": {"str": [[60, "        now = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")"]]}, "location": {"?": [[56, "        location = FileHandler(\"dir\", None).retfile"]]}, "filename": {"str": [[59, "        filename = \"extract_convert_preview\""], [61, "        filename = os.path.join(location,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.add_option_refresh": {"var": {"tk_var": {"?": [[189, "        tk_var = get_config().tk_vars[\"refreshgraph\"]"]]}}, "param": {"self": {"GraphDisplay": [[186, "    def add_option_refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrainCanvas.resiz": {"param": {"self": {"PreviewTrainCanvas": [[146, "    def resize(self, event):"]]}, "event": {"?": [[146, "    def resize(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.add_option_": {"var": {"btnrefresh": {"?": [[190, "        btnrefresh = ttk.Button(self.optsframe,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtract.display_item_set": {"var": {"size": {"int": [[27, "        size = 256 if self.command == \"convert\" else 128"]]}}, "param": {"self": {"PreviewExtract": [[24, "    def display_item_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain": {"func": {"save_items": {"PreviewTrain -> None": [[118, "    def save_items(self):"]]}, "update_child": {"(PreviewTrain, ?, ?) -> None": [[110, "    def update_child(self, tab_id, name):"]]}, "display_item_set": {"PreviewTrain -> None": [[76, "    def display_item_set(self):"]]}, "display_item_process": {"PreviewTrain -> None": [[85, "    def display_item_process(self):"]]}, "add_child": {"(PreviewTrain, ?) -> None": [[102, "    def add_child(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewTrain.save_items": {"var": {"preview": {"?": [[123, "        for preview in self.subnotebook.children.values():"]]}, "location": {"?": [[120, "        location = FileHandler(\"dir\", None).retfile"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewEx": {"func": {"display_item_process": {"PreviewExtract -> None": [[32, "    def display_item_process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.GraphDisplay.add_chil": {"param": {"data": {"Calculations": [[279, "    def add_child(self, name, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.display_command.PreviewExtr": {"func": {"update_child": {"PreviewExtract -> None": [[48, "    def update_child(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dfl_h128.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128.Model.encode": {"var": {"var_x": {"?": [[28, "        var_x = input_"], [29, "        var_x = self.blocks.conv(var_x, 128)"], [30, "        var_x = self.blocks.conv(var_x, 256)"], [31, "        var_x = self.blocks.conv(var_x, 512)"], [32, "        var_x = self.blocks.conv(var_x, 1024)"], [33, "        var_x = Dense(self.encoder_dim)(Flatten()(var_x))"], [34, "        var_x = Dense(8 * 8 * self.encoder_dim)(var_x)"], [35, "        var_x = Reshape((8, 8, self.encoder_dim))(var_x)"], [36, "        var_x = self.blocks.upscale(var_x, self.encoder_dim)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128.Model.decode": {"var": {"var_y": {"?": [[55, "            var_y = input_"], [56, "            var_y = self.blocks.upscale(var_y, self.encoder_dim)"], [57, "            var_y = self.blocks.upscale(var_y, self.encoder_dim // 2)"], [58, "            var_y = self.blocks.upscale(var_y, self.encoder_dim // 4)"], [59, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[43, "        var_x = input_"], [44, "        var_x = self.blocks.upscale(var_x, self.encoder_dim)"], [45, "        var_x = self.blocks.upscale(var_x, self.encoder_dim // 2)"], [46, "        var_x = self.blocks.upscale(var_x, self.encoder_dim // 4)"], [47, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128.Model.__init__": {"param": {"self": {"Model": [[14, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128.Model.encoder": {"var": {"input_": {"?": [[27, "        input_ = Input(shape=self.input_shape)"]]}}, "param": {"self": {"Model": [[25, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128": {"class": {"Model": {"<Model>": [[12, "class Model(OriginalModel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128.Model": {"func": {"decoder": {"Model -> None": [[39, "    def decoder(self):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, *args, **kwargs):"]]}, "encoder": {"Model -> None": [[25, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dfl_h128.Model.decoder": {"var": {"outputs": {"[?]": [[52, "        outputs = [var_x]"]]}, "input_": {"?": [[41, "        input_ = Input(shape=(16, 16, self.encoder_dim))"]]}}, "param": {"self": {"Model": [[39, "    def decoder(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/custom_widgets.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter._get_ta": {"param": {"string": {"?": [[236, "    def _get_tag(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._": {"var": {"statusframe": {"?": [[455, "        statusframe = ttk.Frame(self)"]]}, "lblstatus": {"?": [[461, "        lblstatus = ttk.Label(statusframe,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirecto": {"func": {"unregister": {"(_WidgetRedirector, ?) -> {() -> str | () -> str} / (_WidgetRedirector, <list>) -> {() -> str | () -> str}": [[343, "    def unregister(self, operation):"]]}, "register": {"(_WidgetRedirector, ?, ?) -> _OriginalCommand / (_WidgetRedirector, str, () -> str) -> _OriginalCommand": [[328, "    def register(self, operation, function):"]]}, "__repr__": {"_WidgetRedirector -> ?": [[310, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._master_needs_upd": {"var": {"active": {"?": [[720, "        active = self._tk_var.get()"]]}, "retval": {"bool": [[721, "        retval = ((active and self._value not in self._master_list) or"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._progress_bar": {"var": {"lblmessage": {"?": [[472, "        lblmessage = ttk.Label(progressframe, textvariable=self._pbar_message)"]]}}, "param": {"self": {"StatusBar": [[467, "    def _progress_bar(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._on_update": {"var": {"val": {"str": [[743, "        val = \" \".join(new_vals)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.regis": {"param": {"operation": {"str": [[328, "    def register(self, operation, function):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._on_master_upd": {"var": {"state": {"bool": [[760, "        state = self._value in self._master_list"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.RightClickMenu.__init__": {"param": {"self": {"RightClickMenu": [[89, "    def __init__(self, labels, actions, hotkeys=None):"]]}, "labels": {"?": [[89, "    def __init__(self, labels, actions, hotkeys=None):"]]}, "hotkeys": {"None": [[89, "    def __init__(self, labels, actions, hotkeys=None):"]]}, "actions": {"?": [[89, "    def __init__(self, labels, actions, hotkeys=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter": {"func": {"_get_tag": {"(_SysOutRouter, ?) -> str": [[236, "    def _get_tag(self, string):"]]}, "__init__": {"? -> ?": [[228, "    def __init__(self, console, out_type):"]]}, "flush": {"() -> None": [[254, "    def flush():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._set_": {"param": {"mode": {"str": [[502, "    def _set_mode(self, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ContextMenu._standard_action": {"param": {"self": {"ContextMenu": [[43, "    def _standard_actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.__init__": {"param": {"self": {"StatusBar": [[424, "    def __init__(self, parent, hide_status=False):"]]}, "parent": {"FaceswapGui": [[424, "    def __init__(self, parent, hide_status=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._sho": {"var": {"win": {"?": [[656, "        win = tk.Frame(self._topwidget,"]]}, "widget": {"?": [[643, "        widget = self._widget"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._h": {"var": {"topwidget": {"None": [[678, "        topwidget = self._topwidget"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._statu": {"param": {"self": {"StatusBar": [[443, "    def _status(self, hide_status):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut._build_conso": {"param": {"self": {"ConsoleOut": [[156, "    def _build_console(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip.__init__": {"param": {"self": {"Tooltip": [[561, "                 waittime=400, wraplength=250):"]]}, "widget": {"{MultiOption | None}": [[561, "                 waittime=400, wraplength=250):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter._get_tag": {"var": {"output": {"?": [[242, "        output = self._recolor.match(string)"]]}}, "param": {"self": {"_SysOutRouter": [[236, "    def _get_tag(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOptio": {"func": {"_master_needs_update": {"MultiOption -> bool": [[718, "    def _master_needs_update(self):"]]}, "__init__": {"? -> ?": [[700, "    def __init__(self, parent, value, variable, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption": {"func": {"_master_list": {"MultiOption -> None": [[710, "    def _master_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._on_lea": {"param": {"event": {"None": [[579, "    def _on_leave(self, event=None):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut._clear": {"param": {"self": {"ConsoleOut": [[190, "    def _clear(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.clo": {"param": {"self": {"_WidgetRedirector": [[315, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._show": {"var": {"xpos": {"?": [[672, "        xpos, ypos = tip_pos_calculator(widget, label)"]]}, "pad": {"?": [[642, "        pad = self._pad"]]}, "background": {"?": [[641, "        background = self._background"]]}, "label": {"?": [[659, "        label = tk.Label(win,"]]}}, "param": {"self": {"Tooltip": [[596, "    def _show(self):"]]}}, "func": {"tip_pos_calculator": {"(?, ?) -> (?, int)": [[598, "        def tip_pos_calculator(widget, label,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._master_lis": {"var": {"retval": {"?": [[713, "        retval = self._master_variable.get().split()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ContextMenu.__init__": {"param": {"self": {"ContextMenu": [[35, "    def __init__(self, widget):"]]}, "widget": {"_ReadOnlyText": [[35, "    def __init__(self, widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip": {"func": {"_on_enter": {"(Tooltip, None) -> None": [[575, "    def _on_enter(self, event=None):  # pylint:disable=unused-argument"]]}, "_unschedule": {"Tooltip -> None": [[589, "    def _unschedule(self):"]]}, "_show": {"Tooltip -> None": [[596, "    def _show(self):"]]}, "_hide": {"Tooltip -> None": [[676, "    def _hide(self):"]]}, "_on_leave": {"(Tooltip, None) -> None": [[579, "    def _on_leave(self, event=None):  # pylint:disable=unused-argument"]]}, "__init__": {"? -> ?": [[560, "    def __init__(self, widget, *, background=\"#FFFFEA\", pad=(5, 3, 5, 3), text=\"widget info\","]]}, "_schedule": {"Tooltip -> None": [[584, "    def _schedule(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.stop": {"param": {"self": {"StatusBar": [[495, "    def stop(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOpti": {"func": {"_on_master_update": {"MultiOption -> None": [[747, "    def _on_master_update(self, *args):  # pylint: disable=unused-argument"]]}, "_on_update": {"MultiOption -> None": [[726, "    def _on_update(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut": {"func": {"_clear": {"ConsoleOut -> None": [[190, "    def _clear(self, *args):  # pylint: disable=unused-argument"]]}, "_build_console": {"ConsoleOut -> None": [[156, "    def _build_console(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._progress_": {"var": {"pbar": {"?": [[475, "        pbar = ttk.Progressbar(progressframe,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._unschedule": {"var": {"id_": {"None": [[591, "        id_ = self._ident"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._OriginalCommand.__call__": {"param": {"self": {"_OriginalCommand": [[408, "    def __call__(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar": {"param": {"hide_status": {"?": [[443, "    def _status(self, hide_status):"]]}}, "func": {"_set_mode": {"(StatusBar, ?) -> None / (StatusBar, str) -> None": [[502, "    def _set_mode(self, mode):"]]}, "message": {"StatusBar -> None": [[438, "    def message(self):"]]}, "stop": {"StatusBar -> None": [[495, "    def stop(self):"]]}, "_status": {"(StatusBar, ?) -> None": [[443, "    def _status(self, hide_status):"]]}, "__init__": {"? -> ?": [[424, "    def __init__(self, parent, hide_status=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}, "class": {"_WidgetRedirector": {"<_WidgetRedirector>": [[259, "class _WidgetRedirector:"]]}, "ContextMenu": {"<ContextMenu>": [[16, "class ContextMenu(tk.Menu):  # pylint: disable=too-many-ancestors"]]}, "_OriginalCommand": {"<_OriginalCommand>": [[379, "class _OriginalCommand:"]]}, "Tooltip": {"<Tooltip>": [[530, "class Tooltip:"]]}, "_ReadOnlyText": {"<_ReadOnlyText>": [[201, "class _ReadOnlyText(tk.Text):  # pylint: disable=too-many-ancestors"]]}, "MultiOption": {"<MultiOption>": [[684, "class MultiOption(ttk.Checkbutton):  # pylint: disable=too-many-ancestors"]]}, "RightClickMenu": {"<RightClickMenu>": [[72, "class RightClickMenu(tk.Menu):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._progress_b": {"var": {"progressframe": {"?": [[469, "        progressframe = ttk.Frame(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.unregis": {"param": {"operation": {"<list>": [[343, "    def unregister(self, operation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._on_master_updat": {"param": {"self": {"MultiOption": [[747, "    def _on_master_update(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ContextMenu._select_a": {"param": {"self": {"ContextMenu": [[61, "    def _select_all(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRou": {"param": {"write": {"?": [[248, "    def write(self, string):"]]}}, "func": {"write": {"(_SysOutRouter, ?) -> None": [[248, "    def write(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.register": {"param": {"function": {"{() -> str | () -> str}": [[328, "    def register(self, operation, function):"]]}, "self": {"_WidgetRedirector": [[328, "    def register(self, operation, function):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._unschedu": {"param": {"self": {"Tooltip": [[589, "    def _unschedule(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut.__init__": {"param": {"debug": {"?": [[135, "    def __init__(self, parent, debug):"]]}, "self": {"ConsoleOut": [[135, "    def __init__(self, parent, debug):"]]}, "parent": {"?": [[135, "    def __init__(self, parent, debug):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.messag": {"param": {"self": {"StatusBar": [[438, "    def message(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widg": {"class": {"ConsoleOut": {"<ConsoleOut>": [[118, "class ConsoleOut(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}, "_SysOutRouter": {"<_SysOutRouter>": [[217, "class _SysOutRouter():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._status": {"var": {"lbltitle": {"?": [[458, "        lbltitle = ttk.Label(statusframe, text=\"Status:\", width=6, anchor=tk.W)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.progress_update": {"param": {"position": {"?": [[512, "    def progress_update(self, message, position, update_position=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._schedu": {"param": {"self": {"Tooltip": [[584, "    def _schedule(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.start": {"param": {"self": {"StatusBar": [[484, "    def start(self, mode):"]]}, "mode": {"?": [[484, "    def start(self, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar._set_mod": {"param": {"self": {"StatusBar": [[502, "    def _set_mode(self, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut.__init": {"var": {"rc_menu": {"ContextMenu": [[142, "        rc_menu = ContextMenu(self._console)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.progr": {"param": {"update_position": {"?": [[512, "    def progress_update(self, message, position, update_position=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._on_leav": {"param": {"self": {"Tooltip": [[579, "    def _on_leave(self, event=None):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter.__ini": {"param": {"out_type": {"str": [[228, "    def __init__(self, console, out_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._master_needs_updat": {"param": {"self": {"MultiOption": [[718, "    def _master_needs_update(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ContextMenu": {"func": {"cm_bind": {"ContextMenu -> None": [[51, "    def cm_bind(self):"]]}, "_select_all": {"ContextMenu -> None": [[61, "    def _select_all(self):"]]}, "_standard_actions": {"ContextMenu -> None": [[43, "    def _standard_actions(self):"]]}, "__init__": {"? -> ?": [[35, "    def __init__(self, widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption.__init__": {"param": {"variable": {"?": [[700, "    def __init__(self, parent, value, variable, **kwargs):"]]}, "self": {"MultiOption": [[700, "    def __init__(self, parent, value, variable, **kwargs):"]]}, "value": {"?": [[700, "    def __init__(self, parent, value, variable, **kwargs):"]]}, "parent": {"AutoFillContainer -> None": [[700, "    def __init__(self, parent, value, variable, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.__in": {"param": {"hide_status": {"?": [[424, "    def __init__(self, parent, hide_status=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.RightClickMenu.popup": {"param": {"self": {"RightClickMenu": [[107, "    def popup(self, event):"]]}, "event": {"?": [[107, "    def popup(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._OriginalCommand": {"func": {"__call__": {"_OriginalCommand -> ?": [[408, "    def __call__(self, *args):"]]}, "__repr__": {"_OriginalCommand -> ?": [[404, "    def __repr__(self):"]]}, "__init__": {"? -> ?": [[390, "    def __init__(self, redir, operation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ContextMenu.cm_bind": {"var": {"button": {"str": [[57, "        button = \"<Button-2>\" if platform.system() == \"Darwin\" else \"<Button-3>\""]]}}, "param": {"self": {"ContextMenu": [[51, "    def cm_bind(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.RightClickM": {"func": {"_create_menu": {"RightClickMenu -> None": [[99, "    def _create_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut._redirect_conso": {"param": {"self": {"ConsoleOut": [[180, "    def _redirect_console(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut._add_tag": {"param": {"self": {"ConsoleOut": [[169, "    def _add_tags(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._ReadOnlyText.__init__": {"param": {"self": {"_ReadOnlyText": [[210, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._OriginalCommand.__init__": {"param": {"self": {"_OriginalCommand": [[390, "    def __init__(self, redir, operation):"]]}, "redir": {"_WidgetRedirector": [[390, "    def __init__(self, redir, operation):"]]}, "operation": {"str": [[390, "    def __init__(self, redir, operation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._hid": {"param": {"self": {"Tooltip": [[676, "    def _hide(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.dispatch": {"var": {"op_": {"?": [[370, "        op_ = self._operations.get(operation)"]]}}, "param": {"self": {"_WidgetRedirector": [[358, "    def dispatch(self, operation, *args):"]]}, "operation": {"?": [[358, "    def dispatch(self, operation, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._OriginalCommand.__repr__": {"param": {"self": {"_OriginalCommand": [[404, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter.writ": {"param": {"self": {"?": [[248, "    def write(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._on_updat": {"var": {"new_vals": {"[?]": [[739, "        new_vals = self._master_list + [self._value] if self._tk_var.get() else ["]]}}, "param": {"self": {"MultiOption": [[726, "    def _on_update(self, *args):  # pylint: disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.__init__": {"var": {"wgt": {"?": [[302, "        wgt = widget._w  # pylint:disable=protected-access  # widget's (full) Tk pathname"]]}}, "param": {"self": {"_WidgetRedirector": [[298, "    def __init__(self, widget):"]]}, "widget": {"_ReadOnlyText": [[298, "    def __init__(self, widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter._get_": {"var": {"tag": {"?": [[245, "        tag = output.groupdict()[\"lvl\"].strip().lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOu": {"func": {"_redirect_console": {"ConsoleOut -> None": [[180, "    def _redirect_console(self):"]]}, "_set_console_clear_var_trace": {"ConsoleOut -> None": [[151, "    def _set_console_clear_var_trace(self):"]]}, "_add_tags": {"ConsoleOut -> None": [[169, "    def _add_tags(self):"]]}, "__init__": {"? -> ?": [[135, "    def __init__(self, parent, debug):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widge": {"class": {"StatusBar": {"<StatusBar>": [[412, "class StatusBar(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter.__init__": {"param": {"self": {"_SysOutRouter": [[228, "    def __init__(self, console, out_type):"]]}, "console": {"_ReadOnlyText": [[228, "    def __init__(self, console, out_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._on_enter": {"param": {"self": {"Tooltip": [[575, "    def _on_enter(self, event=None):  # pylint:disable=unused-argument"]]}, "event": {"None": [[575, "    def _on_enter(self, event=None):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusBar.progress_updat": {"param": {"self": {"StatusBar": [[512, "    def progress_update(self, message, position, update_position=True):"]]}, "message": {"?": [[512, "    def progress_update(self, message, position, update_position=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.RightClickMen": {"func": {"popup": {"(RightClickMenu, ?) -> None": [[107, "    def popup(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector": {"func": {"close": {"_WidgetRedirector -> None": [[315, "    def close(self):"]]}, "dispatch": {"(_WidgetRedirector, ?) -> str": [[358, "    def dispatch(self, operation, *args):"]]}, "__init__": {"? -> ?": [[298, "    def __init__(self, widget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.unregister": {"var": {"function": {"{() -> str | () -> str}": [[349, "            function = self._operations[operation]"]]}}, "param": {"self": {"_WidgetRedirector": [[343, "    def unregister(self, operation):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._SysOutRouter.write": {"param": {"string": {"(_SysOutRouter, ?) -> None": [[248, "    def write(self, string):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._ReadOnlyTex": {"func": {"__init__": {"? -> ?": [[210, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.__repr__": {"param": {"self": {"_WidgetRedirector": [[310, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.close": {"var": {"tk_": {"?": [[320, "        tk_ = widget.tk"]]}, "wgt": {"?": [[321, "        wgt = widget._w  # pylint:disable=protected-access"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._show.tip_pos_calculat": {"var": {"offscreen_again": {"bool": [[630, "            offscreen_again = y_1 < 0  # out on the top"]]}, "offscreen": {"bool": [[620, "            offscreen = (x_delta, y_delta) != (0, 0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets._WidgetRedirector.clos": {"var": {"operation": {"<list>": [[317, "        for operation in list(self._operations):"]]}, "widget": {"_ReadOnlyText": [[319, "        widget = self.widget"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.StatusB": {"func": {"progress_update": {"(StatusBar, ?, ?, ?) -> None": [[512, "    def progress_update(self, message, position, update_position=True):"]]}, "_progress_bar": {"StatusBar -> None": [[467, "    def _progress_bar(self):"]]}, "start": {"(StatusBar, ?) -> None": [[484, "    def start(self, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.MultiOption._master_list": {"param": {"self": {"MultiOption": [[710, "    def _master_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.RightClickMenu._create_menu": {"var": {"idx": {"?": [[101, "        for idx, (label, action) in enumerate(zip(self._labels, self._actions)):"]]}, "kwargs": {"dict": [[102, "            kwargs = dict(label=label, command=action)"]]}}, "param": {"self": {"RightClickMenu": [[99, "    def _create_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut._build_console": {"var": {"scrollbar": {"?": [[162, "        scrollbar = ttk.Scrollbar(self, command=self._console.yview)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.Tooltip._show.tip_pos_calculator": {"var": {"mouse_x": {"?": [[608, "            mouse_x, mouse_y = widget.winfo_pointerxy()"]]}, "x_delta": {"int": [[615, "                x_delta = 0"]], "?": [[613, "            x_delta = x_2 - s_width"]]}, "s_width": {"?": [[603, "            s_width, s_height = widget.winfo_screenwidth(), widget.winfo_screenheight()"]]}, "y_1": {"int": [[637, "                y_1 = 0"]], "?": [[628, "                    y_1 = mouse_y - tip_delta[1] - height"]]}, "width": {"?": [[605, "            width, height = (pad[0] + label.winfo_reqwidth() + pad[2],"]]}, "x_2": {"?": [[611, "            x_2, y_2 = x_1 + width, y_1 + height"]]}, "x_1": {"?": [[610, "            x_1, y_1 = mouse_x + tip_delta[0], mouse_y + tip_delta[1]"], [625, "                    x_1 = mouse_x - tip_delta[0] - width"]]}, "y_delta": {"int": [[618, "                y_delta = 0"]], "?": [[616, "            y_delta = y_2 - s_height"]]}}, "param": {"widget": {"?": [[600, "                               tip_delta=(10, 5), pad=(5, 3, 5, 3)):"]]}, "label": {"?": [[600, "                               tip_delta=(10, 5), pad=(5, 3, 5, 3)):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.RightClickMenu": {"func": {"__init__": {"? -> ?": [[89, "    def __init__(self, labels, actions, hotkeys=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.custom_widgets.ConsoleOut._set_console_clear_var_trac": {"param": {"self": {"ConsoleOut": [[151, "    def _set_console_clear_var_trace(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/iae.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.M": {"func": {"build_autoencoders": {"(Model, ?) -> None": [[30, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.ia": {"class": {"Model": {"<Model>": [[10, "class Model(ModelBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.encoder": {"var": {"input_": {"?": [[47, "        input_ = Input(shape=self.input_shape)"]]}}, "param": {"self": {"Model": [[45, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.encode": {"var": {"var_x": {"?": [[48, "        var_x = input_"], [49, "        var_x = self.blocks.conv(var_x, 128)"], [50, "        var_x = self.blocks.conv(var_x, 256)"], [51, "        var_x = self.blocks.conv(var_x, 512)"], [52, "        var_x = self.blocks.conv(var_x, 1024)"], [53, "        var_x = Flatten()(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.build_autoencoder": {"var": {"side": {"str": [[36, "        for side in (\"a\", \"b\"):"]]}}, "param": {"inputs": {"?": [[30, "    def build_autoencoders(self, inputs):"]]}, "self": {"Model": [[30, "    def build_autoencoders(self, inputs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.build_autoenco": {"var": {"inter_side": {"?": [[37, "            inter_side = self.networks[\"intermediate_{}\".format(side)].network"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.decoder": {"var": {"outputs": {"[?]": [[78, "        outputs = [var_x]"]]}, "input_": {"?": [[67, "        input_ = Input(shape=(4, 4, self.encoder_dim))"]]}}, "param": {"self": {"Model": [[65, "    def decoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.intermediat": {"param": {"self": {"Model": [[56, "    def intermediate(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.intermediate": {"var": {"input_": {"?": [[58, "        input_ = Input(shape=(None, 4 * 4 * 1024))"]]}, "var_x": {"?": [[59, "        var_x = input_"], [60, "        var_x = Dense(self.encoder_dim)(var_x)"], [61, "        var_x = Dense(4 * 4 * int(self.encoder_dim/2))(var_x)"], [62, "        var_x = Reshape((4, 4, int(self.encoder_dim/2)))(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model": {"func": {"decoder": {"Model -> None": [[65, "    def decoder(self):"]]}, "intermediate": {"Model -> None": [[56, "    def intermediate(self):"]]}, "add_networks": {"Model -> None": [[20, "    def add_networks(self):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, *args, **kwargs):"]]}, "encoder": {"Model -> None": [[45, "    def encoder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.__init__": {"param": {"self": {"Model": [[12, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.build_autoencoders": {"var": {"output": {"?": [[38, "            output = decoder(Concatenate()([inter_side(encoder(inputs[0])),"]]}, "encoder": {"?": [[34, "        encoder = self.networks[\"encoder\"].network"]]}, "autoencoder": {"?": [[41, "            autoencoder = KerasModel(inputs, output)"]]}, "inter_both": {"?": [[35, "        inter_both = self.networks[\"inter\"].network"]]}, "decoder": {"?": [[33, "        decoder = self.networks[\"decoder\"].network"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.add_network": {"param": {"self": {"Model": [[20, "    def add_networks(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.iae.Model.decode": {"var": {"var_y": {"?": [[81, "            var_y = input_"], [82, "            var_y = self.blocks.upscale(var_y, 512)"], [83, "            var_y = self.blocks.upscale(var_y, 256)"], [84, "            var_y = self.blocks.upscale(var_y, 128)"], [85, "            var_y = self.blocks.upscale(var_y, 64)"], [86, "            var_y = self.blocks.conv2d(var_y, 1,"]]}, "var_x": {"?": [[68, "        var_x = input_"], [69, "        var_x = self.blocks.upscale(var_x, 512)"], [70, "        var_x = self.blocks.upscale(var_x, 256)"], [71, "        var_x = self.blocks.upscale(var_x, 128)"], [72, "        var_x = self.blocks.upscale(var_x, 64)"], [73, "        var_x = self.blocks.conv2d(var_x, 3,"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/plaidml_utils.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_utils.pad": {"param": {"constant_value": {"int": [[8, "def pad(data, paddings, mode=\"CONSTANT\", name=None, constant_value=0):"]]}, "name": {"None": [[8, "def pad(data, paddings, mode=\"CONSTANT\", name=None, constant_value=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_utils": {"func": {"pad": {"(?, ?, str, None, int) -> None / (?, [[int]], str, None, int) -> None": [[8, "def pad(data, paddings, mode=\"CONSTANT\", name=None, constant_value=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_utils.p": {"param": {"data": {"?": [[8, "def pad(data, paddings, mode=\"CONSTANT\", name=None, constant_value=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_util": {"param": {"paddings": {"[[int]]": [[8, "def pad(data, paddings, mode=\"CONSTANT\", name=None, constant_value=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.plaidml_utils.pa": {"param": {"mode": {"str": [[8, "def pad(data, paddings, mode=\"CONSTANT\", name=None, constant_value=0):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/align/_base.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.get_batc": {"var": {"exhausted": {"bool": [[115, "        exhausted = False"], [122, "                exhausted = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.get_batch": {"var": {"item": {"ExtractMedia": [[119, "            item = self._collect_item(queue)"]]}, "f_idx": {"?": [[130, "            for f_idx, face in enumerate(item.detected_faces):"]]}, "frame_faces": {"int": [[136, "                    frame_faces = len(item.detected_faces)"]]}, "idx": {"int": [[117, "        idx = 0"]]}, "converted_image": {"None": [[129, "            converted_image = item.get_image_copy(self.color_format)"]]}}, "param": {"queue": {"?": [[81, "    def get_batch(self, queue):"]]}, "self": {"Aligner": [[81, "    def get_batch(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_me": {"var": {"chan": {"int": [[237, "        for chan in range(3):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_clah": {"param": {"face": {"?": [[251, "    def _normalize_clahe(face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._bas": {"class": {"Aligner": {"<Aligner>": [[23, "class Aligner(Extractor):  # pylint:disable=abstract-method"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_clahe": {"var": {"chan": {"int": [[254, "        for chan in range(3):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._collect_": {"var": {"item": {"ExtractMedia": [[163, "            item = self._get_item(queue)"]], "None": [[160, "            item = self._rollover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Align": {"func": {"_predict": {"(Aligner, ?) -> None": [[215, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Alig": {"param": {"normalize_method": {"None": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}}, "func": {"set_normalize_method": {"(Aligner, ?) -> None / (Aligner, None) -> None": [[69, "    def set_normalize_method(self, method):"]]}, "_normalize_clahe": {"? -> None": [[251, "    def _normalize_clahe(face):"]]}, "_normalize_faces": {"(Align, [?]) -> [?] / (Aligner, ?) -> [?]": [[220, "    def _normalize_faces(self, faces):"]]}, "_normalize_hist": {"? -> None": [[244, "    def _normalize_hist(face):"]]}, "_normalize_mean": {"? -> float": [[234, "    def _normalize_mean(face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._predi": {"param": {"batch": {"?": [[215, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.set_normalize_method": {"param": {"self": {"Aligner": [[69, "    def set_normalize_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.__in": {"param": {"git_model_id": {"None": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.get_": {"var": {"batch": {"dict": [[116, "        batch = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_": {"var": {"clahe": {"?": [[253, "        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(4, 4))"]]}, "faces": {"[?]": [[229, "        faces = [meth(face) for face in faces]"]]}}, "param": {"faces": {"[?]": [[220, "    def _normalize_faces(self, faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.__init": {"param": {"model_filename": {"None": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_fac": {"param": {"self": {"{Align | Align | Aligner}": [[220, "    def _normalize_faces(self, faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_faces": {"var": {"meth": {"?": [[228, "        meth = getattr(self, \"_normalize_{}\".format(self._normalize_method.lower()))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.finalize": {"var": {"output": {"?": [[204, "            output = self._extract_media.pop(filename)"]]}, "landmarks": {"?": [[193, "                landmarks = np.array(landmarks)"]]}}, "param": {"batch": {"?": [[171, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._predict": {"param": {"self": {"Aligner": [[215, "    def _predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_mean": {"var": {"layer": {"?": [[238, "            layer = face[:, :, chan]"], [239, "            layer = (layer - layer.min()) / (layer.max() - layer.min())"]]}, "face": {"float": [[236, "        face = face / 255.0"]]}}, "param": {"face": {"?": [[234, "    def _normalize_mean(face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._collect_item": {"param": {"queue": {"?": [[153, "    def _collect_item(self, queue):"]]}, "self": {"Aligner": [[153, "    def _collect_item(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner": {"func": {"finalize": {"(Aligner, ?) -> None": [[171, "    def finalize(self, batch):"]]}, "get_batch": {"(Aligner, ?) -> (bool, dict)": [[81, "    def get_batch(self, queue):"]]}, "_collect_item": {"(Aligner, ?) -> ExtractMedia": [[153, "    def _collect_item(self, queue):"]]}, "__init__": {"? -> ?": [[52, "    def __init__(self, git_model_id=None, model_filename=None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.finaliz": {"param": {"self": {"Aligner": [[171, "    def finalize(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner._normalize_hist": {"var": {"chan": {"int": [[246, "        for chan in range(3):"]]}}, "param": {"face": {"?": [[244, "    def _normalize_hist(face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.__init__": {"var": {"configfile": {"None": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}}, "param": {"instance": {"int": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}, "self": {"Aligner": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}, "configfile": {"None": [[53, "                 configfile=None, instance=0, normalize_method=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.align._base.Aligner.set_normalize_": {"var": {"method": {"None": [[77, "        method = None if method is None or method.lower() == \"none\" else method"]]}}, "param": {"method": {"None": [[69, "    def set_normalize_method(self, method):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/convert.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._patch_imag": {"var": {"patched_face": {"None": [[197, "            patched_face = self._writer_pre_encode(patched_face)"]], "float": [[190, "        patched_face = self._post_warp_adjustments(background, new_image)"], [191, "        patched_face = self._scale_image(patched_face)"]], "?": [[193, "        patched_face = np.rint(patched_face,"]]}, "frame_size": {"(?, ?)": [[188, "        frame_size = (predicted[\"image\"].shape[1], predicted[\"image\"].shape[0])"]]}}, "param": {"self": {"Converter": [[169, "    def _patch_image(self, predicted):"]]}, "predicted": {"dict": [[169, "    def _patch_image(self, predicted):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.proc": {"var": {"items": {"[dict]": [[152, "                items = [items]"]], "?": [[142, "            items = in_queue.get()"]]}}, "param": {"self": {"Converter": [[124, "    def process(self, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._patch": {"var": {"new_image": {"?": [[189, "        new_image, background = self._get_new_image(predicted, frame_size)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._pre_warp_adjustmen": {"param": {"predicted_mask": {"None": [[250, "    def _pre_warp_adjustments(self, new_face, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._post_warp_adjustment": {"param": {"self": {"Converter": [[316, "    def _post_warp_adjustments(self, background, new_image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._load_plu": {"param": {"disable_logging": {"bool": [[79, "    def _load_plugins(self, config=None, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._pre_warp_adjustment": {"param": {"self": {"Converter": [[250, "    def _pre_warp_adjustments(self, new_face, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._get_imag": {"param": {"predicted_mask": {"None": [[285, "    def _get_image_mask(self, new_face, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._get_new_image": {"var": {"background": {"?": [[225, "        background = predicted[\"image\"] / np.array(255.0, dtype=\"float32\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._load_plugins": {"param": {"config": {"None": [[79, "    def _load_plugins(self, config=None, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.reinitialize": {"param": {"config": {"ConfigTools -> Config": [[63, "    def reinitialize(self, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.__in": {"param": {"coverage_ratio": {"Predict -> None": [[39, "                 arguments, configfile=None):"]]}, "output_size": {"Predict -> None": [[39, "                 arguments, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.cli_argument": {"param": {"self": {"Converter": [[58, "    def cli_arguments(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.__init": {"param": {"pre_encode": {"DiskIO -> None / Converter -> None": [[39, "                 arguments, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._get_new_imag": {"var": {"predicted_mask": {"None": [[230, "            predicted_mask = new_face[:, :, -1] if new_face.shape[2] == 4 else None"]]}, "interpolator": {"?": [[232, "            interpolator = detected_face.reference_interpolators[1]"]]}, "placeholder": {"?": [[224, "        placeholder = np.zeros((frame_size[1], frame_size[0], 4), dtype=\"float32\")"]]}, "new_face": {"None": [[234, "            new_face = self._pre_warp_adjustments(new_face, detected_face, predicted_mask)"]], "?": [[231, "            new_face = new_face[:, :, :3]"]]}}, "param": {"self": {"Converter": [[201, "    def _get_new_image(self, predicted, frame_size):"]]}, "predicted": {"dict": [[201, "    def _get_new_image(self, predicted, frame_size):"]]}, "frame_size": {"(?, ?)": [[201, "    def _get_new_image(self, predicted, frame_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._pre_warp_adjustments": {"var": {"old_face": {"float": [[275, "        old_face = detected_face.reference_face[..., :3] / 255.0"]]}, "new_face": {"?": [[276, "        new_face = self._adjustments[\"box\"].run(new_face)"], [277, "        new_face, raw_mask = self._get_image_mask(new_face, detected_face, predicted_mask)"], [279, "            new_face = self._adjustments[\"color\"].run(old_face, new_face, raw_mask)"], [281, "            new_face = self._adjustments[\"seamless\"].run(old_face, new_face, raw_mask)"]]}}, "param": {"detected_face": {"?": [[250, "    def _pre_warp_adjustments(self, new_face, detected_face, predicted_mask):"]]}, "new_face": {"?": [[250, "    def _pre_warp_adjustments(self, new_face, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._scale_image": {"var": {"dims": {"(int, int)": [[368, "        dims = (round((frame.shape[1] / 2 * self._scale) * 2),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._load_plugin": {"param": {"self": {"Converter": [[79, "    def _load_plugins(self, config=None, disable_logging=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.c": {"class": {"Converter": {"<Converter>": [[14, "class Converter():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._scale_imag": {"var": {"frame": {"?": [[370, "        frame = cv2.resize(frame, dims, interpolation=interp)"]]}, "interp": {"?": [[367, "        interp = cv2.INTER_CUBIC if self._scale > 1 else cv2.INTER_AREA"]]}}, "param": {"self": {"Converter": [[348, "    def _scale_image(self, frame):"]]}, "frame": {"float": [[348, "    def _scale_image(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.__ini": {"param": {"draw_transparent": {"DiskIO -> None": [[39, "                 arguments, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Convert": {"func": {"process": {"(Converter, ?, None) -> ? / (Converter, ?, ?) -> ?": [[124, "    def process(self, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter": {"func": {"_patch_image": {"(Converter, ?) -> None / (Converter, dict) -> None": [[169, "    def _patch_image(self, predicted):"]]}, "_get_image_mask": {"(Converter, ?, ?, ?) -> (?, ?) / (Converter, ?, ?, None) -> (?, ?)": [[285, "    def _get_image_mask(self, new_face, detected_face, predicted_mask):"]]}, "_scale_image": {"(Converter, ?) -> None / (Converter, float) -> float": [[348, "    def _scale_image(self, frame):"]]}, "_get_new_image": {"(Converter, ?, ?) -> (?, ?) / (Converter, dict, (?, ?)) -> (?, ?) / (Converter, ?, (?, ?)) -> (?, ?)": [[201, "    def _get_new_image(self, predicted, frame_size):"]]}, "_load_plugins": {"(Converter, None, bool) -> None": [[79, "    def _load_plugins(self, config=None, disable_logging=False):"]]}, "__init__": {"? -> ?": [[38, "    def __init__(self, output_size, coverage_ratio, draw_transparent, pre_encode,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.process": {"var": {"item": {"dict": [[153, "            for item in items:"]]}, "image": {"None": [[156, "                    image = self._patch_image(item)"]], "?": [[161, "                    image = item[\"image\"]"]]}}, "param": {"in_queue": {"?": [[124, "    def process(self, in_queue, out_queue):"]]}, "out_queue": {"None": [[124, "    def process(self, in_queue, out_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Conv": {"func": {"reinitialize": {"(Converter, ConfigTools -> Config) -> None / (Converter, ?) -> None": [[63, "    def reinitialize(self, config):"]]}, "cli_arguments": {"Converter -> None": [[58, "    def cli_arguments(self):"]]}, "_pre_warp_adjustments": {"(Converter, ?, ?, ?) -> None / (Converter, ?, ?, None) -> None": [[250, "    def _pre_warp_adjustments(self, new_face, detected_face, predicted_mask):"]]}, "_post_warp_adjustments": {"(Converter, ?, ?) -> float": [[316, "    def _post_warp_adjustments(self, background, new_image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._get_image_mask": {"var": {"new_face": {"?": [[312, "            new_face = np.concatenate((new_face, mask), -1)"]]}}, "param": {"self": {"Converter": [[285, "    def _get_image_mask(self, new_face, detected_face, predicted_mask):"]]}, "detected_face": {"?": [[285, "    def _get_image_mask(self, new_face, detected_face, predicted_mask):"]]}, "new_face": {"?": [[285, "    def _get_image_mask(self, new_face, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.__init__": {"var": {"arguments": {"?": [[39, "                 arguments, configfile=None):"]]}}, "param": {"self": {"Converter": [[39, "                 arguments, configfile=None):"]]}, "arguments": {"?": [[39, "                 arguments, configfile=None):"]]}, "configfile": {"None": [[39, "                 arguments, configfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._post_warp_adjustments": {"var": {"new_image": {"?": [[333, "            new_image = self._adjustments[\"scaling\"].run(new_image)"]]}, "frame": {"float": [[344, "            frame = background"]], "?": [[336, "            frame = new_image"]]}, "foreground": {"?": [[338, "            foreground, mask = np.split(new_image,  # pylint:disable=unbalanced-tuple-unpacking"]]}}, "param": {"new_image": {"?": [[316, "    def _post_warp_adjustments(self, background, new_image):"]]}, "background": {"?": [[316, "    def _post_warp_adjustments(self, background, new_image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter.reinitializ": {"param": {"self": {"Converter": [[63, "    def reinitialize(self, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.convert.Converter._get_image_": {"var": {"mask": {"?": [[306, "        mask, raw_mask = self._adjustments[\"mask\"].run(detected_face, predicted_mask)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/sysinfo.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._State.__init__": {"param": {"self": {"_State": [[539, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._is_virtual_env": {"var": {"prefix": {"str": [[66, "            prefix = os.path.dirname(sys.prefix)"]]}}, "param": {"self": {"_SysInfo": [[60, "    def _is_virtual_env(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo": {"class": {"_State": {"<_State>": [[536, "class _State():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_path_linux": {"var": {"paths": {"?": [[284, "            paths = ld_library_path.split(\":\")"]]}, "chk": {"str": [[282, "        chk = os.popen(\"ldconfig -p | grep -P \\\"libcudart.so.\\\\d+.\\\\d+\\\" | head -n 1\").read()"], [286, "                chk = os.popen(\"ls {} | grep -P -o \\\"libcudart.so.\\\\d+.\\\\d+\\\" | \""]]}, "ld_library_path": {"?": [[281, "        ld_library_path = os.environ.get(\"LD_LIBRARY_PATH\", None)"]]}, "path": {"?": [[285, "            for path in paths:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._par": {"param": {"config_files": {"[str]": [[447, "    def _parse_configs(self, config_files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"var": {"sysinfo": {"str": [[585, "sysinfo = get_sysinfo()  # pylint: disable=invalid-name"]]}}, "func": {"get_sysinfo": {"() -> str": [[407, "def get_sysinfo():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs.__init__": {"param": {"self": {"_Configs": [[429, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._conda_version": {"var": {"stdout": {"?": [[121, "        stdout, stderr = conda.communicate()"]]}}, "param": {"self": {"_SysInfo": [[116, "    def _conda_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._is_virtual_en": {"var": {"retval": {"int": [[63, "            retval = (hasattr(sys, \"real_prefix\") or"]], "bool": [[67, "            retval = (os.path.basename(prefix) == \"envs\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._installed_pip": {"var": {"installed": {"?": [[100, "        installed = pip.communicate()[0].decode().splitlines()"]]}}, "param": {"self": {"_SysInfo": [[96, "    def _installed_pip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._format_text": {"param": {"value": {"str": [[518, "    def _format_text(key, value):"]]}, "key": {"str": [[518, "    def _format_text(key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._ram_fr": {"param": {"self": {"_SysInfo": [[71, "    def _ram_free(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._is_maco": {"param": {"self": {"_SysInfo": [[50, "    def _is_macos(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._git_branch": {"var": {"git": {"?": [[130, "        git = Popen(\"git status\", shell=True, stdout=PIPE, stderr=PIPE)"]]}, "stdout": {"?": [[131, "        stdout, stderr = git.communicate()"]]}}, "param": {"self": {"_SysInfo": [[128, "    def _git_branch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._fs_command": {"param": {"self": {"_SysInfo": [[91, "    def _fs_command(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._get_cuda_": {"var": {"path": {"None": [[267, "            path = self._cuda_path_windows()"], [269, "            path = None"]], "str": [[265, "            path = self._cuda_path_linux()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._get_config": {"param": {"self": {"_Configs": [[433, "    def _get_configs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_version_windows": {"var": {"retval": {"str": [[339, "            retval = \"No global version found\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._ram_tota": {"param": {"self": {"_SysInfo": [[76, "    def _ram_total(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_keys_window": {"param": {"self": {"_SysInfo": [[149, "    def _cuda_keys_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._format_ram": {"var": {"retval": {"list": [[399, "        retval = list()"]]}, "value": {"int": [[402, "            value = int(value / (1024 * 1024))"]], "?": [[401, "            value = getattr(self, \"_ram_{}\".format(name))"]]}}, "param": {"self": {"_SysInfo": [[391, "    def _format_ram(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo.__init__": {"param": {"self": {"_SysInfo": [[19, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInf": {"func": {"_ram_total": {"_SysInfo -> None": [[76, "    def _ram_total(self):"]]}, "_encoding": {"_SysInfo -> None": [[34, "    def _encoding(self):"]]}, "_cuda_version": {"_SysInfo -> str": [[154, "    def _cuda_version(self):"]]}, "_cuda_version_linux": {"_SysInfo -> str": [[306, "    def _cuda_version_linux(self):"]]}, "_cuda_version_windows": {"_SysInfo -> str": [[330, "    def _cuda_version_windows(self):"]]}, "_is_windows": {"_SysInfo -> bool": [[55, "    def _is_windows(self):"]]}, "_conda_version": {"_SysInfo -> str": [[116, "    def _conda_version(self):"]]}, "_cuda_path_windows": {"() -> None": [[295, "    def _cuda_path_windows():"]]}, "_cuda_keys_windows": {"_SysInfo -> [<list>]": [[149, "    def _cuda_keys_windows(self):"]]}, "_is_conda": {"_SysInfo -> None": [[39, "    def _is_conda(self):"]]}, "_cudnn_version": {"_SysInfo -> str": [[176, "    def _cudnn_version(self):"]]}, "_is_macos": {"_SysInfo -> bool": [[50, "    def _is_macos(self):"]]}, "_git_commits": {"_SysInfo -> str": [[138, "    def _git_commits(self):"]]}, "_installed_conda": {"_SysInfo -> str": [[104, "    def _installed_conda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_version": {"var": {"chk": {"?": [[157, "        chk = Popen(\"nvcc -V\", shell=True, stdout=PIPE, stderr=PIPE)"]]}, "stdout": {"?": [[158, "        stdout, stderr = chk.communicate()"]]}}, "param": {"self": {"_SysInfo": [[154, "    def _cuda_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo": {"func": {"_cudnn_checkfiles_linux": {"() -> {[str] | list}": [[222, "    def _cudnn_checkfiles_linux():"]]}, "_installed_pip": {"_SysInfo -> str": [[96, "    def _installed_pip(self):"]]}, "_get_cuda_path": {"_SysInfo -> str": [[256, "    def _get_cuda_path(self):"]]}, "_ram_used": {"_SysInfo -> None": [[86, "    def _ram_used(self):"]]}, "_ram_free": {"_SysInfo -> None": [[71, "    def _ram_free(self):"]]}, "_cuda_path_linux": {"() -> str": [[273, "    def _cuda_path_linux():"]]}, "_is_virtual_env": {"_SysInfo -> {bool | int}": [[60, "    def _is_virtual_env(self):"]]}, "_ram_available": {"_SysInfo -> None": [[81, "    def _ram_available(self):"]]}, "_is_linux": {"_SysInfo -> bool": [[45, "    def _is_linux(self):"]]}, "__init__": {"? -> ?": [[19, "    def __init__(self):"]]}, "_git_branch": {"_SysInfo -> str": [[128, "    def _git_branch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_config": {"param": {"self": {"_Configs": [[447, "    def _parse_configs(self, config_files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._installed_conda": {"var": {"stdout": {"?": [[109, "        stdout, stderr = conda.communicate()"]]}}, "param": {"self": {"_SysInfo": [[104, "    def _installed_conda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._State._get_state_fi": {"var": {"retval": {"str": [[579, "        retval = \"\\n\\n=============== State File =================\\n\""]]}}, "param": {"self": {"_State": [[565, "    def _get_state_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._is_conda": {"param": {"self": {"_SysInfo": [[39, "    def _is_conda(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._encoding": {"param": {"self": {"_SysInfo": [[34, "    def _encoding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo.get_sysinfo": {"var": {"retval": {"str": [[419, "        retval = _SysInfo().full_info()"], [421, "        retval = \"Exception occured trying to retrieve sysinfo: {}\".format(err)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._State._is_training": {"param": {"self": {"_State": [[545, "    def _is_training(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_path_windows": {"var": {"cuda_path": {"?": [[303, "        cuda_path = os.environ.get(\"CUDA_PATH\", None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs": {"func": {"_format_text": {"(?, ?) -> str / (str, str) -> str": [[518, "    def _format_text(key, value):"]]}, "__init__": {"? -> ?": [[429, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._get_cuda_path": {"param": {"self": {"_SysInfo": [[256, "    def _get_cuda_path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_version": {"var": {"major": {"?": [[204, "                    major = line[line.rfind(\" \") + 1:].strip()"]]}, "checkfile": {"?": [[189, "        for checkfile in cudnn_checkfiles:"]]}, "retval": {"str": [[183, "            retval = \"Unsupported OS\""], [195, "            retval = \"No global version found\""], [215, "            retval = \"No global version found\""]]}, "patchlevel": {"?": [[210, "                    patchlevel = line[line.rfind(\" \") + 1:].strip()"]]}}, "param": {"self": {"_SysInfo": [[176, "    def _cudnn_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._ram_used": {"param": {"self": {"_SysInfo": [[86, "    def _ram_used(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._installed_": {"var": {"pip": {"?": [[98, "        pip = Popen(\"{} -m pip freeze\".format(sys.executable),"]]}, "conda": {"?": [[108, "        conda = Popen(\"conda list\", shell=True, stdout=PIPE, stderr=PIPE)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_checkfiles_windows": {"var": {"cudnn_checkfile": {"str": [[253, "        cudnn_checkfile = os.path.join(self._cuda_path, \"include\", \"cudnn.h\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._C": {"func": {"_get_configs": {"_Configs -> str": [[433, "    def _get_configs(self):"]]}, "_parse_configs": {"(_Configs, [str]) -> str": [[447, "    def _parse_configs(self, config_files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._is_window": {"param": {"self": {"_SysInfo": [[55, "    def _is_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._is_linux": {"param": {"self": {"_SysInfo": [[45, "    def _is_linux(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_checkfiles_window": {"param": {"self": {"_SysInfo": [[240, "    def _cudnn_checkfiles_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_version_window": {"var": {"cuda_keys": {"_SysInfo -> [<list>]": [[337, "        cuda_keys = self._cuda_keys_windows"]]}, "cudavers": {"[?]": [[343, "        cudavers = [key.lower().replace(\"cuda_path_v\", \"\").replace(\"_\", \".\") for key in cuda_keys]"]]}}, "param": {"self": {"_SysInfo": [[330, "    def _cuda_version_windows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._State": {"func": {"_is_training": {"_State -> bool": [[545, "    def _is_training(self):"]]}, "__init__": {"? -> ?": [[539, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._git_": {"var": {"commits": {"?": [[145, "        commits = stdout.decode().splitlines()"]]}, "branch": {"?": [[134, "        branch = stdout.decode().splitlines()[0].replace(\"On branch \", \"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_": {"var": {"version": {"str": [[166, "            version = self._cuda_version_linux()"], [168, "            version = self._cuda_version_windows()"], [170, "            version = \"Unsupported OS\""]], "?": [[160, "            version = re.search(r\".*release (?P<cuda>\\d+\\.\\d+)\", stdout.decode(self._encoding))"], [161, "            version = version.groupdict().get(\"cuda\", None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_configs": {"var": {"cfile": {"str": [[461, "        for cfile in config_files:"]]}, "ext": {"str": [[463, "            ext = os.path.splitext(cfile)[1]"]]}, "formatted": {"str": [[460, "        formatted = \"\""]]}, "fname": {"str": [[462, "            fname = os.path.basename(cfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._ram_availab": {"param": {"self": {"_SysInfo": [[81, "    def _ram_available(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_versi": {"var": {"found": {"int": [[200, "        found = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysi": {"class": {"_SysInfo": {"<_SysInfo>": [[17, "class _SysInfo():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._S": {"func": {"_get_arg": {"() -> list": [[551, "    def _get_arg(*args):"]]}, "_get_state_file": {"_State -> str": [[565, "    def _get_state_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_vers": {"var": {"minor": {"?": [[207, "                    minor = line[line.rfind(\" \") + 1:].strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_checkfiles_linux": {"var": {"chk": {"str": [[229, "        chk = os.popen(\"ldconfig -p | grep -P \\\"libcudnn.so.\\\\d+\\\" | head -n 1\").read()"], [232, "        chk = chk.strip().replace(\"libcudnn.so.\", \"\")"]]}, "cudnn_path": {"str": [[234, "        cudnn_path = chk[chk.find(\"=>\") + 3:chk.find(\"libcudnn\") - 1]"], [235, "        cudnn_path = cudnn_path.replace(\"lib\", \"include\")"]]}, "cudnn_checkfiles": {"[str]": [[236, "        cudnn_checkfiles = [os.path.join(cudnn_path, \"cudnn_v{}.h\".format(cudnn_vers)),"]]}, "cudnn_vers": {"str": [[233, "        cudnn_vers = chk[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._git_commit": {"param": {"self": {"_SysInfo": [[138, "    def _git_commits(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo.full": {"var": {"sys_info": {"dict": [[356, "        sys_info = {\"os_platform\": self._system[\"platform\"],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._State._get_state_fil": {"var": {"fname": {"str": [[575, "        fname = os.path.join(self._model_dir, \"{}_state.json\".format(self._trainer))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_in": {"var": {"item": {"[str]": [[490, "                item = line.split(\"=\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysIn": {"func": {"_format_ram": {"_SysInfo -> str": [[391, "    def _format_ram(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._format_r": {"var": {"name": {"str": [[400, "        for name in (\"total\", \"available\", \"used\", \"free\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_js": {"var": {"conf_dict": {"?": [[512, "            conf_dict = json.load(cfile)"]]}}, "param": {"config_file": {"str": [[497, "    def _parse_json(self, config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._conda_": {"var": {"version": {"?": [[124, "        version = stdout.decode().splitlines()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cuda_version_linux": {"var": {"paths": {"?": [[316, "            paths = ld_library_path.split(\":\")"]]}, "chk": {"str": [[314, "        chk = os.popen(\"ldconfig -p | grep -P \\\"libcudart.so.\\\\d+.\\\\d+\\\" | head -n 1\").read()"], [318, "                chk = os.popen(\"ls {} | grep -P -o \\\"libcudart.so.\\\\d+.\\\\d+\\\" | \""]]}, "path": {"?": [[317, "            for path in paths:"]]}, "retval": {"str": [[323, "            retval = \"No global version found\""]]}, "ld_library_path": {"?": [[313, "        ld_library_path = os.environ.get(\"LD_LIBRARY_PATH\", None)"]]}, "cudavers": {"str": [[327, "        cudavers = chk.strip().replace(\"libcudart.so.\", \"\")"]]}}, "param": {"self": {"_SysInfo": [[306, "    def _cuda_version_linux(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._State._get_arg": {"var": {"opt": {"str": [[560, "        for opt in args:"]]}, "cmd": {"[str]": [[559, "        cmd = sys.argv"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._git_commits": {"var": {"git": {"?": [[140, "        git = Popen(\"git log --pretty=oneline --abbrev-commit -n 5\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._installed_co": {"var": {"installed": {"?": [[112, "        installed = stdout.decode().splitlines()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._get": {"var": {"config_files": {"[str]": [[441, "        config_files = [os.path.join(self.config_dir, cfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_json": {"var": {"formatted": {"str": [[510, "        formatted = \"\""]]}, "key": {"?": [[513, "            for key in sorted(conf_dict.keys()):"]]}}, "param": {"self": {"_Configs": [[497, "    def _parse_json(self, config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sy": {"class": {"_Configs": {"<_Configs>": [[425, "class _Configs():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_ini": {"var": {"formatted": {"str": [[484, "        formatted = \"\""]]}}, "param": {"self": {"_Configs": [[471, "    def _parse_ini(self, config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._pars": {"param": {"config_file": {"str": [[471, "    def _parse_ini(self, config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Configs._parse_": {"var": {"line": {"str": [[486, "            for line in cfile.readlines():"], [487, "                line = line.strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo.full_info": {"var": {"retval": {"str": [[355, "        retval = \"\\n============ System Information ============\\n\""]]}, "key": {"?": [[379, "        for key in sorted(sys_info.keys()):"]]}}, "param": {"self": {"_SysInfo": [[346, "    def full_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._cudnn_versio": {"var": {"cudnn_checkfile": {"None": [[188, "        cudnn_checkfile = None"]], "?": [[191, "                cudnn_checkfile = checkfile"]]}, "line": {"?": [[202, "            for line in ofile:"]]}, "cudnn_checkfiles": {"{[str] | list}": [[179, "            cudnn_checkfiles = self._cudnn_checkfiles_linux()"], [181, "            cudnn_checkfiles = self._cudnn_checkfiles_windows()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysI": {"func": {"full_info": {"_SysInfo -> str": [[346, "    def full_info(self):"]]}, "_cudnn_checkfiles_windows": {"_SysInfo -> {[str] | list}": [[240, "    def _cudnn_checkfiles_windows(self):"]]}, "_fs_command": {"_SysInfo -> str": [[91, "    def _fs_command(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._conda_versi": {"var": {"conda": {"?": [[120, "        conda = Popen(\"conda --version\", shell=True, stdout=PIPE, stderr=PIPE)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._Config": {"func": {"_parse_ini": {"(_Configs, str) -> str": [[471, "    def _parse_ini(self, config_file):"]]}, "_parse_json": {"(_Configs, str) -> str": [[497, "    def _parse_json(self, config_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.sysinfo._SysInfo._git_commi": {"var": {"stdout": {"?": [[142, "        stdout, stderr = git.communicate()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/color/match_hist_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.color.match_hist_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for matching the histograms between the source and destination faces\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/mask/mask_blend.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._crop_to_coverage": {"var": {"padding": {"int": [[110, "        padding = round((mask_size * (1 - self._coverage_ratio)) / 2)"]]}, "mask": {"?": [[112, "        mask = mask[mask_slice, mask_slice, :]"]]}}, "param": {"mask": {"?": [[94, "    def _crop_to_coverage(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.M": {"func": {"_get_mask": {"(Mask, ?, ?) -> float / (Mask, ?, None) -> float": [[55, "    def _get_mask(self, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._get_erosion_kernel": {"var": {"mask_radius": {"int": [[154, "        mask_radius = np.sqrt(np.sum(mask)) / 2"]]}, "erosion_ratio": {"int": [[153, "        erosion_ratio = self.config[\"erosion\"] / 100"]]}}, "param": {"mask": {"float": [[140, "    def _get_erosion_kernel(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.proc": {"param": {"self": {"Mask": [[30, "    def process(self, detected_face, predicted_mask=None):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask": {"func": {"process": {"(Mask, ?, None) -> ({None | float}, ?)": [[30, "    def process(self, detected_face, predicted_mask=None):  # pylint:disable=arguments-differ"]]}, "_crop_to_coverage": {"(Mask, ?) -> None": [[94, "    def _crop_to_coverage(self, mask):"]]}, "_erode": {"(Mask, ?) -> None / (Mask, float) -> None": [[118, "    def _erode(self, mask):"]]}, "__init__": {"? -> ?": [[25, "    def __init__(self, mask_type, output_size, coverage_ratio, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._get_erosio": {"var": {"kernel_size": {"int": [[155, "        kernel_size = max(1, int(abs(erosion_ratio * mask_radius)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._erod": {"var": {"kernel": {"None": [[131, "        kernel = self._get_erosion_kernel(mask)"]]}}, "param": {"self": {"Mask": [[118, "    def _erode(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._get_": {"var": {"mask": {"None": [[82, "            mask = self._crop_to_coverage(mask.mask)"]], "float": [[90, "            mask = mask.astype(\"float32\") / 255.0"]], "?": [[73, "            mask = np.ones_like(self.dummy[:, :, 1], dtype=\"float32\")[..., None]"], [75, "            mask = predicted_mask[..., None]"], [77, "            mask = detected_face.mask[self.mask_type]"], [87, "                mask = cv2.resize(mask,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.pro": {"param": {"predicted_mask": {"None": [[30, "    def process(self, detected_face, predicted_mask=None):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.proce": {"var": {"mask": {"None": [[51, "            mask = self._erode(mask)"]], "float": [[48, "        mask = self._get_mask(detected_face, predicted_mask)"]]}, "raw_mask": {"?": [[49, "        raw_mask = mask.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.__ini": {"param": {"mask_type": {"?": [[25, "    def __init__(self, mask_type, output_size, coverage_ratio, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend": {"class": {"Mask": {"<Mask>": [[10, "class Mask(Adjustment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.process": {"param": {"detected_face": {"?": [[30, "    def process(self, detected_face, predicted_mask=None):  # pylint:disable=arguments-differ"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._crop_to_coverag": {"var": {"mask_slice": {"?": [[111, "        mask_slice = slice(padding, mask_size - padding)"]]}, "mask_size": {"?": [[109, "        mask_size = mask.shape[0]"]]}}, "param": {"self": {"Mask": [[94, "    def _crop_to_coverage(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._get": {"var": {"mask_size": {"?": [[83, "            mask_size = mask.shape[0]"]]}, "erosion_kernel": {"?": [[156, "        erosion_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kernel_size, kernel_size))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._g": {"param": {"predicted_mask": {"None": [[55, "    def _get_mask(self, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._get_erosion_kern": {"param": {"self": {"Mask": [[140, "    def _get_erosion_kernel(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._erode": {"var": {"mask": {"?": [[134, "            mask = cv2.erode(mask, kernel, iterations=1)"], [137, "            mask = cv2.dilate(mask, kernel, iterations=1)"]]}}, "param": {"mask": {"float": [[118, "    def _erode(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.__init__": {"param": {"self": {"Mask": [[25, "    def __init__(self, mask_type, output_size, coverage_ratio, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Ma": {"func": {"_get_erosion_kernel": {"(Mask, ?) -> None / (Mask, float) -> None": [[140, "    def _get_erosion_kernel(self, mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask._get_mask": {"var": {"face_size": {"?": [[84, "            face_size = self.dummy.shape[0]"]]}, "interp": {"?": [[86, "                interp = cv2.INTER_CUBIC if mask_size < face_size else cv2.INTER_AREA"]]}}, "param": {"self": {"Mask": [[55, "    def _get_mask(self, detected_face, predicted_mask):"]]}, "detected_face": {"?": [[55, "    def _get_mask(self, detected_face, predicted_mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend.Mask.__in": {"param": {"coverage_ratio": {"?": [[25, "    def __init__(self, mask_type, output_size, coverage_ratio, **kwargs):"]]}, "output_size": {"?": [[25, "    def __init__(self, mask_type, output_size, coverage_ratio, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/trainer/original.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer.original": {"class": {"Trainer": {"<Trainer>": [[7, "class Trainer(TrainerBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer.original.Trainer": {"func": {"__init__": {"? -> ?": [[9, "    def __init__(self, *args, **kwargs):  # pylint:disable=useless-super-delegation"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer.original.Trainer.__init__": {"param": {"self": {"Trainer": [[9, "    def __init__(self, *args, **kwargs):  # pylint:disable=useless-super-delegation"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/vgg_face.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFa": {"func": {"predict": {"(VGGFace, ?) -> None": [[56, "    def predict(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.get_mod": {"param": {"self": {"VGGFace": [[38, "    def get_model(self, git_model_id, model_filename, backend):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.predict": {"var": {"preds": {"?": [[67, "        preds = self.model.forward(\"fc7\")[0, :]"]]}, "blob": {"?": [[60, "        blob = cv2.dnn.blobFromImage(face[..., :3],"]]}, "face": {"None": [[59, "            face = self.resize_face(face)"]]}}, "param": {"self": {"VGGFace": [[56, "    def predict(self, face):"]]}, "face": {"?": [[56, "    def predict(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGF": {"func": {"find_cosine_similiarity": {"(?, ?) -> int / (?, None) -> int": [[78, "    def find_cosine_similiarity(source_face, test_face):"]]}, "get_backend": {"? -> None / str -> None": [[48, "    def get_backend(backend):"]]}, "resize_face": {"(VGGFace, ?) -> None": [[70, "    def resize_face(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace": {"func": {"__init__": {"? -> ?": [[26, "    def __init__(self, backend=\"CPU\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_f": {"class": {"VGGFace": {"<VGGFace>": [[22, "class VGGFace():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.seria": {"param": {"points": {"?": [[106, "    def seriation(self, tree, points, current_index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.get_model": {"var": {"cache_path": {"str": [[41, "        cache_path = os.path.join(root_path, \"plugins\", \"extract\", \"recognition\", \".cache\")"]]}, "root_path": {"str": [[40, "        root_path = os.path.abspath(os.path.dirname(sys.argv[0]))"]]}}, "param": {"backend": {"str": [[38, "    def get_model(self, git_model_id, model_filename, backend):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.resize_": {"var": {"face": {"?": [[74, "        face = cv2.resize(face, dsize=sizes, interpolation=interpolation)"]]}}, "param": {"face": {"?": [[70, "    def resize_face(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.sorted_similarity": {"var": {"num_predictions": {"?": [[98, "        num_predictions = predictions.shape[0]"]]}, "result_linkage": {"?": [[99, "        result_linkage = linkage(predictions, method=method, preserve_input=False)"]]}, "result_order": {"[int]": [[100, "        result_order = self.seriation(result_linkage,"]]}}, "param": {"self": {"VGGFace": [[85, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}, "predictions": {"?": [[85, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}, "method": {"str": [[85, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.__in": {"var": {"git_model_id": {"int": [[28, "        git_model_id = 7"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_fac": {"var": {"logger": {"?": [[19, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.__init": {"var": {"model_filename": {"[str]": [[29, "        model_filename = [\"vgg_face_v1.caffemodel\", \"vgg_face_v1.prototxt\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.get": {"param": {"model_filename": {"[str]": [[38, "    def get_model(self, git_model_id, model_filename, backend):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.seriatio": {"param": {"current_index": {"int": [[106, "    def seriation(self, tree, points, current_index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.get_backend": {"var": {"retval": {"?": [[53, "        retval = getattr(cv2.dnn, \"DNN_TARGET_{}\".format(backend))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.resize_fac": {"var": {"interpolation": {"?": [[73, "        interpolation = cv2.INTER_CUBIC if face.shape[0] < self.input_size else cv2.INTER_AREA"]]}, "sizes": {"(int, int)": [[72, "        sizes = (self.input_size, self.input_size)"]]}}, "param": {"self": {"VGGFace": [[70, "    def resize_face(self, face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.seriation": {"var": {"right": {"int": [[120, "        right = int(tree[current_index-points, 1])"]]}, "left": {"int": [[119, "        left = int(tree[current_index-points, 0])"]]}}, "param": {"self": {"VGGFace": [[106, "    def seriation(self, tree, points, current_index):"]]}, "tree": {"?": [[106, "    def seriation(self, tree, points, current_index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFac": {"param": {"git_model_id": {"int": [[38, "    def get_model(self, git_model_id, model_filename, backend):"]]}}, "func": {"get_model": {"(VGGFace, ?, ?, ?) -> None / (VGGFace, int, [str], str) -> None": [[38, "    def get_model(self, git_model_id, model_filename, backend):"]]}, "sorted_similarity": {"(VGGFace, ?, str) -> [int]": [[85, "    def sorted_similarity(self, predictions, method=\"ward\"):"]]}, "seriation": {"(VGGFace, ?, ?, int) -> [int] / (VGGFace, ?, ?, ?) -> {[?] | [int]}": [[106, "    def seriation(self, tree, points, current_index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.find_cosine_similiarity": {"var": {"var_c": {"?": [[82, "        var_c = np.sum(np.multiply(test_face, test_face))"]]}, "var_b": {"?": [[81, "        var_b = np.sum(np.multiply(source_face, source_face))"]]}, "var_a": {"?": [[80, "        var_a = np.matmul(np.transpose(source_face), test_face)"]]}}, "param": {"test_face": {"None": [[78, "    def find_cosine_similiarity(source_face, test_face):"]]}, "source_face": {"?": [[78, "    def find_cosine_similiarity(source_face, test_face):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.__init__": {"param": {"self": {"VGGFace": [[26, "    def __init__(self, backend=\"CPU\"):"]]}, "backend": {"str": [[26, "    def __init__(self, backend=\"CPU\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.vgg_face.VGGFace.get_": {"var": {"model": {"?": [[43, "        model = cv2.dnn.readNetFromCaffe(model[1], model[0])"]], "GetModel -> {[str] | str}": [[42, "        model = GetModel(model_filename, cache_path, git_model_id).model_path"]]}}, "param": {"backend": {"str": [[48, "    def get_backend(backend):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/cli/actions.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.MultiOptio": {"func": {"__init__": {"? -> ?": [[280, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions._FullPaths.__call": {"param": {"option_string": {"None": [[21, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.ContextFullPaths._get_kwarg": {"var": {"names": {"[str]": [[219, "        names = [\"option_strings\","]]}}, "param": {"self": {"ContextFullPaths": [[218, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Slider._get_kwarg": {"var": {"names": {"[str]": [[353, "        names = [\"option_strings\","]]}}, "param": {"self": {"Slider": [[352, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.action": {"class": {"FilesFullPaths": {"<FilesFullPaths>": [[89, "class FilesFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods"]]}, "FileFullPaths": {"<FileFullPaths>": [[48, "class FileFullPaths(_FullPaths):"]]}, "DirFullPaths": {"<DirFullPaths>": [[29, "class DirFullPaths(_FullPaths):"]]}, "SaveFileFullPaths": {"<SaveFileFullPaths>": [[150, "class SaveFileFullPaths(FileFullPaths):"]]}, "_FullPaths": {"<_FullPaths>": [[14, "class _FullPaths(argparse.Action):  # pylint: disable=too-few-public-methods"]]}, "DirOrFileFullPaths": {"<DirOrFileFullPaths>": [[120, "class DirOrFileFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods"]]}}, "param": {"FilesFullPaths": {"FileFullPaths": [[89, "class FilesFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Slider": {"param": {"__call__": {"Slider": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}, "func": {"__call__": {"(Slider, ?, ?, ?, None) -> None": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "__init__": {"? -> ?": [[335, "    def __init__(self, *args, min_max=None, rounding=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.FilesFullPaths.__init__": {"var": {"opt": {"?": [[115, "            opt = kwargs[\"option_strings\"]"]]}}, "param": {"self": {"FilesFullPaths": [[113, "    def __init__(self, *args, filetypes=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions._FullPaths": {"func": {"__call__": {"(_FullPaths, ?, ?, ?, None) -> None": [[21, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.FileFullPath": {"func": {"_get_kwargs": {"FileFullPaths -> [(str, ?)]": [[75, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Slid": {"func": {"_get_kwargs": {"Slider -> [(str, ?)]": [[352, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Slider.__init__": {"var": {"opt": {"?": [[336, "        opt = kwargs[\"option_strings\"]"]]}}, "param": {"self": {"Slider": [[335, "    def __init__(self, *args, min_max=None, rounding=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.MultiOption.__init__": {"var": {"opt": {"?": [[281, "        opt = kwargs[\"option_strings\"]"]]}}, "param": {"self": {"MultiOption": [[280, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.FileFullPaths._get_kwarg": {"var": {"names": {"[str]": [[76, "        names = [\"option_strings\","]]}}, "param": {"self": {"FileFullPaths": [[75, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions._FullPaths.__call__": {"var": {"vals": {"[str]": [[23, "            vals = [os.path.abspath(os.path.expanduser(val)) for val in values]"]], "str": [[25, "            vals = os.path.abspath(os.path.expanduser(values))"]]}}, "param": {"values": {"?": [[21, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "self": {"_FullPaths": [[21, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "parser": {"?": [[21, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "namespace": {"?": [[21, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.FileFullPaths": {"func": {"__init__": {"? -> ?": [[71, "    def __init__(self, *args, filetypes=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.ContextFullPath": {"func": {"_get_kwargs": {"ContextFullPaths -> [(str, ?)]": [[218, "    def _get_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.MultiOption.__call__": {"param": {"values": {"?": [[288, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "self": {"MultiOption": [[288, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "parser": {"?": [[288, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "namespace": {"?": [[288, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.FileFullPaths.__init__": {"param": {"self": {"FileFullPaths": [[71, "    def __init__(self, *args, filetypes=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Radio": {"func": {"__call__": {"(Radio, ?, ?, ?, None) -> None": [[260, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "__init__": {"? -> ?": [[252, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.ContextFullPaths": {"func": {"__init__": {"? -> ?": [[207, "    def __init__(self, *args, filetypes=None, action_option=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.MultiOption": {"func": {"__call__": {"(MultiOption, ?, ?, ?, None) -> None": [[288, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Radio.__call": {"param": {"option_string": {"None": [[260, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.FilesFullPaths": {"func": {"__init__": {"? -> ?": [[113, "    def __init__(self, *args, filetypes=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions": {"class": {"Slider": {"<Slider>": [[292, "class Slider(argparse.Action):  # pylint: disable=too-few-public-methods"]]}, "Radio": {"<Radio>": [[235, "class Radio(argparse.Action):  # pylint: disable=too-few-public-methods"]]}, "MultiOption": {"<MultiOption>": [[264, "class MultiOption(argparse.Action):  # pylint: disable=too-few-public-methods"]]}}, "param": {"Radio": {"ContextFullPaths": [[235, "class Radio(argparse.Action):  # pylint: disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.MultiOption.__call": {"param": {"option_string": {"None": [[288, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Radio.__call__": {"param": {"values": {"?": [[260, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "self": {"Radio": [[260, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "parser": {"?": [[260, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "namespace": {"?": [[260, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.ContextFullPaths.__init__": {"var": {"opt": {"?": [[208, "        opt = kwargs[\"option_strings\"]"]]}}, "param": {"self": {"ContextFullPaths": [[207, "    def __init__(self, *args, filetypes=None, action_option=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Slider.__call": {"param": {"option_string": {"(Slider, ?, ?, ?, None) -> None": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.acti": {"class": {"ContextFullPaths": {"<ContextFullPaths>": [[176, "class ContextFullPaths(FileFullPaths):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Slider.__call__": {"param": {"values": {"[str]": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "self": {"str": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "parser": {"str": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}, "namespace": {"str": [[366, "    def __call__(self, parser, namespace, values, option_string=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli.actions.Radio.__init__": {"var": {"opt": {"?": [[253, "        opt = kwargs[\"option_strings\"]"]]}}, "param": {"self": {"Radio": [[252, "    def __init__(self, *args, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/gui/menu.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.refresh_recent_menu": {"param": {"self": {"FileMenu": [[224, "    def refresh_recent_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.load_config": {"var": {"module": {"?": [[89, "        module = import_module(mod)"]]}, "mod": {"str": [[88, "        mod = \".\".join((\"plugins\", plugin_type, \"_config\"))"]]}}, "param": {"module": {"str": [[94, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.do_upd": {"var": {"retval": {"bool": [[473, "            retval = False"], [475, "            retval = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._task_btns": {"var": {"loadtype": {"str": [[515, "        for loadtype in (\"load\", \"save\", \"save_as\", \"clear\", \"reload\"):"]]}, "btntype": {"str": [[516, "            btntype = \"{}2\".format(loadtype)"]]}, "frame": {"?": [[512, "        frame = ttk.Frame(self._btn_frame)"]]}, "cmd": {"?": [[522, "            cmd = getattr(self._config.tasks, loader)"]]}, "loader": {"str": [[519, "            loader, kwargs = self._loader_and_kwargs(loadtype)"]]}, "btn": {"?": [[523, "            btn = ttk.Button("]]}, "hlp": {"str": [[528, "            hlp = self.set_help(btntype)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu": {"func": {"load_config": {"? -> None / str -> None": [[85, "    def load_config(plugin_type):"]]}, "__init__": {"? -> ?": [[55, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.__init__": {"param": {"self": {"FileMenu": [[116, "    def __init__(self, parent):"]]}, "parent": {"MainMenuBar": [[116, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._get_branche": {"var": {"stdout": {"?": [[298, "        stdout, _ = cmd.communicate()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.do_update": {"var": {"output": {"?": [[463, "            output = cmd.stdout.readline().decode(encoding)"]]}, "cmd": {"?": [[461, "        cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT, bufsize=1, cwd=_WORKING_DIR)"]]}, "gitcmd": {"str": [[460, "        gitcmd = \"git pull\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.MainMenuBar": {"func": {"__init__": {"? -> ?": [[38, "    def __init__(self, master=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._project_btns": {"var": {"btn": {"?": [[504, "            btn = ttk.Button(frame,"]]}, "btntype": {"str": [[499, "        for btntype in (\"new\", \"load\", \"save\", \"save_as\", \"reload\"):"]]}, "frame": {"?": [[496, "        frame = ttk.Frame(self._btn_frame)"]]}, "cmd": {"?": [[503, "            cmd = getattr(self._config.project, loader)"]]}, "hlp": {"str": [[508, "            hlp = self.set_help(btntype)"]]}, "loader": {"str": [[502, "            loader, kwargs = self._loader_and_kwargs(btntype)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._build_branches_men": {"var": {"stdout": {"None": [[272, "        stdout = self._get_branches()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu": {"func": {"clear_recent_files": {"({<_JSONSerializer> | _CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}, str) -> None / (?, ?) -> None": [[219, "    def clear_recent_files(serializer, menu_file):"]]}, "__init__": {"? -> ?": [[116, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.build_recent_me": {"var": {"load_func": {"?": [[195, "                load_func = self._config.project.load"], [199, "                load_func = self._config.tasks.load"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.MainMenuBar.__init__": {"param": {"self": {"MainMenuBar": [[38, "    def __init__(self, master=None):"]]}, "master": {"FaceswapGui": [[38, "    def __init__(self, master=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._group_separator": {"param": {"self": {"TaskBar": [[586, "    def _group_separator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.scan_for_plugin_conf": {"var": {"plugins_path": {"str": [[67, "        plugins_path = os.path.join(root_path, \"plugins\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.build": {"var": {"config": {"?": [[100, "            config = self.configs[name]"]]}, "name": {"None": [[98, "        for name in _CONFIG_FILES:"]]}, "conf": {"?": [[106, "        conf = get_config().user_config"]]}, "label": {"str": [[99, "            label = \"Configure {} Plugins...\".format(name.title())"]]}}, "param": {"self": {"?": [[94, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMe": {"func": {"scan_for_plugin_configs": {"SettingsMenu -> dict": [[63, "    def scan_for_plugin_configs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.output_sysinfo": {"param": {"self": {"HelpMenu": [[383, "    def output_sysinfo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._section_": {"var": {"separator": {"?": [[593, "        separator = ttk.Separator(frame, orient=\"horizontal\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.check": {"var": {"encoding": {"?": [[402, "        encoding = locale.getpreferredencoding()"]]}}, "param": {"self": {"HelpMenu": [[398, "    def check(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar.set_hel": {"param": {"btntype": {"str": [[564, "    def set_help(btntype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._filter_": {"var": {"branches": {"?": [[322, "        branches = set()"], [335, "        branches = sorted(list(branches), key=str.casefold)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.load_conf": {"param": {"plugin_type": {"str": [[85, "    def load_config(plugin_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar": {"func": {"_task_btns": {"TaskBar -> None": [[511, "    def _task_btns(self):"]]}, "_settings_btns": {"TaskBar -> None": [[545, "    def _settings_btns(self):"]]}, "__init__": {"? -> ?": [[481, "    def __init__(self, parent):"]]}, "set_help": {"? -> str / str -> str": [[564, "    def set_help(btntype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileM": {"func": {"build_recent_menu": {"FileMenu -> None": [[175, "    def build_recent_menu(self):"]]}, "refresh_recent_menu": {"FileMenu -> None": [[224, "    def refresh_recent_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.do_updat": {"param": {"encoding": {"?": [[457, "    def do_update(encoding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu": {"var": {"_CONFIG_FILES": {"[None]": [[28, "_CONFIG_FILES = []"]]}, "_CONFIGS": {"dict": [[29, "_CONFIGS = dict()"]]}, "logger": {"?": [[33, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}, "_RESOURCES": {"[(str, str)]": [[23, "_RESOURCES = [(\"faceswap.dev - Guides and Forum\", \"https://www.faceswap.dev\"),"]]}, "_WORKING_DIR": {"str": [[30, "_WORKING_DIR = os.path.dirname(os.path.realpath(sys.argv[0]))"]]}}, "class": {"TaskBar": {"<TaskBar>": [[479, "class TaskBar(ttk.Frame):  # pylint: disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.do_upda": {"var": {"retcode": {"?": [[469, "        retcode = cmd.poll()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._filter_branche": {"param": {"stdout": {"None": [[307, "    def _filter_branches(stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.load_": {"var": {"config": {"?": [[90, "        config = module.Config(None)"]]}}, "param": {"config": {"?": [[94, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.check_for_update": {"var": {"msg": {"str": [[427, "        msg = \"\""], [433, "            msg = (\"Git is not installed or you are not running a cloned repo. \""], [439, "                    msg = \"Your branch is ahead of the remote repo. Not updating\""], [442, "                    msg = \"Faceswap is up to date.\""], [445, "                    msg = \"There are updates available\""], [449, "                    msg = \"Your branch has diverged from the remote repo. Not updating\""]]}, "stdout": {"?": [[430, "        stdout, _ = cmd.communicate()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._project_btn": {"param": {"self": {"TaskBar": [[495, "    def _project_btns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._section_separator": {"param": {"self": {"TaskBar": [[590, "    def _section_separator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.scan_for_plugin_config": {"var": {"keys": {"list": [[76, "        keys = list(configs.keys())"]]}}, "param": {"self": {"SettingsMenu": [[63, "    def scan_for_plugin_configs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.output_sys": {"var": {"info": {"str": [[390, "            info = sysinfo"], [392, "            info = \"Error obtaining system info: {}\".format(str(err))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.__init__": {"param": {"self": {"HelpMenu": [[232, "    def __init__(self, parent):"]]}, "parent": {"MainMenuBar": [[232, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.in_thread": {"param": {"action": {"str": [[371, "    def in_thread(self, action):"]]}, "self": {"HelpMenu": [[371, "    def in_thread(self, action):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._filter_branches": {"var": {"current": {"None": [[321, "        current = None"]], "?": [[327, "                current = branch"]]}, "line": {"?": [[323, "        for line in stdout.splitlines():"]]}, "branch": {"?": [[324, "            branch = line[line.rfind(\"/\") + 1:] if \"/\" in line else line.strip()"], [326, "                branch = branch.replace(\"*\", \"\").strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar.set_help": {"var": {"msg": {"str": [[580, "            msg = task"]]}, "task": {"str": [[568, "        task = \"currently selected Task\" if btntype[-1] == \"2\" else \"Project\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._get_branches": {"var": {"cmd": {"?": [[297, "        cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT, cwd=_WORKING_DIR)"]]}, "retcode": {"?": [[299, "        retcode = cmd.poll()"]]}, "gitcmd": {"str": [[296, "        gitcmd = \"git branch -a\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._build_recources_men": {"var": {"resource": {"(str, str)": [[365, "        for resource in _RESOURCES:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar.__init__": {"param": {"self": {"TaskBar": [[481, "    def __init__(self, parent):"]]}, "parent": {"FaceswapGui": [[481, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._loader_and_": {"var": {"kwargs": {"dict": [[535, "            kwargs = dict(save_as=False)"], [538, "            kwargs = dict(save_as=True)"], [541, "            kwargs = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._switch_branch": {"var": {"cmd": {"?": [[350, "        cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT, cwd=_WORKING_DIR)"]]}, "retcode": {"?": [[352, "        retcode = cmd.poll()"]]}, "gitcmd": {"str": [[349, "        gitcmd = \"git checkout {}\".format(branch)"]]}, "stdout": {"?": [[351, "        stdout, _ = cmd.communicate()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMen": {"param": {"build": {"str": [[94, "    def build(self):"]]}}, "func": {"build": {"SettingsMenu -> None": [[94, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.scan_for_plugin_configs": {"var": {"root_path": {"str": [[66, "        root_path = os.path.abspath(os.path.dirname(sys.argv[0]))"]]}, "config": {"None": [[73, "                config = self.load_config(plugin_type)"]]}, "plugin_type": {"str": [[72, "                plugin_type = os.path.split(dirpath)[-1]"]]}, "key": {"str": [[77, "        for key in (\"extract\", \"train\", \"convert\"):"]]}, "dirpath": {"str": [[70, "        for dirpath, _, filenames in os.walk(plugins_path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu": {"func": {"_get_branches": {"() -> None": [[287, "    def _get_branches():"]]}, "in_thread": {"(HelpMenu, str) -> None / (HelpMenu, ?) -> None": [[371, "    def in_thread(self, action):"]]}, "_switch_branch": {"? -> None": [[340, "    def _switch_branch(branch):"]]}, "clear_console": {"() -> None": [[379, "    def clear_console():"]]}, "_filter_branches": {"? -> None / None -> None": [[307, "    def _filter_branches(stdout):"]]}, "check": {"HelpMenu -> None": [[398, "    def check(self):"]]}, "__init__": {"? -> ?": [[232, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._switch_": {"param": {"branch": {"?": [[340, "    def _switch_branch(branch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._group_": {"var": {"separator": {"?": [[587, "        separator = ttk.Separator(self._btn_frame, orient=\"vertical\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.clear_recent_files": {"param": {"menu_file": {"str": [[219, "    def clear_recent_files(serializer, menu_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._task_btn": {"param": {"self": {"TaskBar": [[511, "    def _task_btns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMe": {"func": {"output_sysinfo": {"HelpMenu -> ?": [[383, "    def output_sysinfo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.updat": {"var": {"success": {"bool": [[413, "        success = False"], [415, "            success = self.do_update(encoding)"]]}, "encoding": {"?": [[411, "        encoding = locale.getpreferredencoding()"]]}}, "param": {"self": {"HelpMenu": [[407, "    def update(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpM": {"func": {"_build_branches_menu": {"HelpMenu -> bool": [[262, "    def _build_branches_menu(self):"]]}, "_build_recources_menu": {"HelpMenu -> None": [[361, "    def _build_recources_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.build": {"param": {"self": {"HelpMenu": [[241, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.scan_for_plugin_": {"var": {"configs": {"dict": [[69, "        configs = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBa": {"func": {"_project_btns": {"TaskBar -> None": [[495, "    def _project_btns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._section_separato": {"var": {"frame": {"?": [[591, "        frame = ttk.Frame(self)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar.set_he": {"var": {"hlp": {"str": [[567, "        hlp = \"\""], [570, "            hlp = \"Reload {} from disk\".format(task)"], [572, "            hlp = \"Create a new {}...\".format(task)"], [574, "            hlp = \"Reset {} to default\".format(task)"], [576, "            hlp = \"Save {}\".format(task)"], [578, "            hlp = \"Save {} as...\".format(task)"], [583, "            hlp = \"Load {}...\".format(msg)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.check_for_updates": {"var": {"cmd": {"?": [[429, "        cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT, cwd=_WORKING_DIR)"]]}, "retcode": {"?": [[431, "        retcode = cmd.poll()"]]}, "chk": {"?": [[436, "            chk = stdout.decode(encoding).splitlines()"]]}, "update": {"bool": [[426, "        update = False"], [446, "                    update = True"]]}, "gitcmd": {"str": [[428, "        gitcmd = \"git remote update && git status -uno\""]]}, "line": {"?": [[437, "            for line in chk:"]]}}, "param": {"check": {"bool": [[422, "    def check_for_updates(encoding, check=False):"]]}, "encoding": {"?": [[422, "    def check_for_updates(encoding, check=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.m": {"class": {"MainMenuBar": {"<MainMenuBar>": [[36, "class MainMenuBar(tk.Menu):  # pylint:disable=too-many-ancestors"]]}, "FileMenu": {"<FileMenu>": [[114, "class FileMenu(tk.Menu):  # pylint:disable=too-many-ancestors"]]}, "HelpMenu": {"<HelpMenu>": [[230, "class HelpMenu(tk.Menu):  # pylint:disable=too-many-ancestors"]]}, "SettingsMenu": {"<SettingsMenu>": [[53, "class SettingsMenu(tk.Menu):  # pylint:disable=too-many-ancestors"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMen": {"func": {"build": {"FileMenu -> None": [[125, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.build_recent": {"var": {"menu_file": {"str": [[179, "        menu_file = os.path.join(self._config.pathcache, \".recent.json\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMen": {"func": {"do_update": {"? -> bool": [[457, "    def do_update(encoding):"]]}, "build": {"HelpMenu -> None": [[241, "    def build(self):"]]}, "check_for_updates": {"(?, bool) -> bool": [[422, "    def check_for_updates(encoding, check=False):"]]}, "update": {"HelpMenu -> None": [[407, "    def update(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskB": {"func": {"_group_separator": {"TaskBar -> None": [[586, "    def _group_separator(self):"]]}, "_section_separator": {"TaskBar -> None": [[590, "    def _section_separator(self):"]]}, "_loader_and_kwargs": {"? -> (str, dict) / str -> (str, dict)": [[532, "    def _loader_and_kwargs(btntype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.clear_recent_f": {"param": {"serializer": {"{<_JSONSerializer> | _CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}": [[219, "    def clear_recent_files(serializer, menu_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._build_branches_menu": {"var": {"branches": {"None": [[276, "        branches = self._filter_branches(stdout)"]]}, "branch": {"?": [[280, "        for branch in branches:"]]}}, "param": {"self": {"HelpMenu": [[262, "    def _build_branches_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.build_recent_menu": {"var": {"recent_item": {"?": [[185, "        for recent_item in recent_files:"], [206, "            for recent_item in removed_files:"]]}, "filename": {"?": [[186, "            filename, command = recent_item"]]}, "command": {"str": [[192, "            command = command if command else \"project\""]]}, "recent_files": {"?": [[182, "        recent_files = serializer.load(menu_file)"]]}, "kwargs": {"dict": [[197, "                kwargs = dict(filename=filename)"], [201, "                kwargs = dict(filename=filename, current_tab=False)"]]}, "removed_files": {"[?]": [[184, "        removed_files = []"]]}, "lbl": {"str": [[196, "                lbl = command"], [200, "                lbl = \"{} Task\".format(command)"]]}, "serializer": {"{<_JSONSerializer> | _CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}": [[178, "        serializer = get_serializer(\"json\")"]]}}, "param": {"self": {"FileMenu": [[175, "    def build_recent_menu(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._settings_btn": {"param": {"self": {"TaskBar": [[545, "    def _settings_btns(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._settings_btns": {"var": {"name": {"None": [[550, "        for name in _CONFIG_FILES:"]]}, "btntype": {"str": [[552, "            btntype = \"settings_{}\".format(name)"], [553, "            btntype = btntype if btntype in get_images().icons else \"settings\""]]}, "root": {"?": [[549, "        root = get_config().root"]]}, "frame": {"?": [[547, "        frame = ttk.Frame(self._btn_frame)"]]}, "hlp": {"str": [[560, "            hlp = \"Configure {} settings...\".format(name.title())"]]}, "btn": {"?": [[555, "            btn = ttk.Button("]]}, "config": {"?": [[551, "            config = _CONFIGS[name]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.FileMenu.build": {"param": {"self": {"FileMenu": [[125, "    def build(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.TaskBar._loader_and_kwargs": {"var": {"loader": {"str": [[534, "            loader = btntype"], [537, "            loader = \"save\""], [540, "            loader = btntype"]]}}, "param": {"btntype": {"str": [[532, "    def _loader_and_kwargs(btntype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu.in_": {"var": {"thread": {"MultiThread": [[374, "        thread = MultiThread(getattr(self, action), thread_count=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.SettingsMenu.__init__": {"param": {"self": {"SettingsMenu": [[55, "    def __init__(self, parent):"]]}, "parent": {"MainMenuBar": [[55, "    def __init__(self, parent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.gui.menu.HelpMenu._build_recources_menu": {"param": {"self": {"HelpMenu": [[361, "    def _build_recources_menu(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/cli/args.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.cli": {"param": {"args": {"args": [[45, "        If the text is not prefixed with \"R|\" then the standard"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/s3fd_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.s3fd_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[52, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tests/lib/model/layers_test.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.test_global_min_pooling_2": {"param": {"dummy": {"?": [[124, "def test_global_min_pooling_2d(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.test_reflection_padding_2": {"param": {"dummy": {"?": [[118, "def test_reflection_padding_2d(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.test_pixel_shuffler": {"param": {"dummy": {"?": [[105, "def test_pixel_shuffler(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.test_subpixel_upscaling": {"param": {"dummy": {"?": [[112, "def test_subpixel_upscaling(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.layer_tes": {"var": {"outp": {"?": [[64, "    outp = layer(inp)"]]}, "actual_output": {"?": [[70, "    actual_output = model.predict(input_data)"]]}, "expected_output_dtype": {"None": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"], [46, "        expected_output_dtype = input_dtype"]]}, "input_data": {"int": [[38, "        input_data = (10 * np.random.random(input_data_shape))"]], "None": [[24, "               input_data=None, expected_output=None,"]], "?": [[39, "        input_data = input_data.astype(input_dtype)"]]}, "_output": {"?": [[86, "        _output = recovered_model.predict(input_data)"]]}, "input_dtype": {"?": [[33, "            input_dtype = K.floatx()"], [44, "            input_dtype = input_data.dtype"]]}}, "param": {"expected_output_dtype": {"None": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}, "input_data": {"None": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}, "expected_output": {"None": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}, "input_dtype": {"None": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.test_l2_normalize": {"param": {"dummy": {"?": [[136, "def test_l2_normalize(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.test_global_std_pooling_2": {"param": {"dummy": {"?": [[130, "def test_global_std_pooling_2d(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test": {"var": {"CONV_ID": {"str": [[20, "CONV_ID = get_backend().upper()"]]}, "CONV_SHAPE": {"(int, int, int, int)": [[19, "CONV_SHAPE = (3, 3, 256, 2048)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.layer": {"var": {"expected_output_shape": {"(?, int, int, ?)": [[57, "    expected_output_shape = layer.compute_output_shape(input_shape)"]]}, "input_data_shape": {"list": [[34, "        input_data_shape = list(input_shape)"]]}, "actual_output_shape": {"?": [[71, "    actual_output_shape = actual_output.shape"]]}, "input_shape": {"?": [[42, "            input_shape = input_data.shape"]]}}, "param": {"fixed_batch_size": {"bool": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}, "input_shape": {"None": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.lay": {"func": {"test_l2_normalize": {"? -> None": [[136, "def test_l2_normalize(dummy):  # pylint:disable=unused-argument"]]}, "test_pixel_shuffler": {"? -> None": [[105, "def test_pixel_shuffler(dummy):  # pylint:disable=unused-argument"]]}, "test_reflection_padding_2d": {"? -> None": [[118, "def test_reflection_padding_2d(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.layer_test": {"var": {"layer": {"?": [[98, "    layer = layer.__class__.from_config(layer_config)"]], "{GlobalMinPooling2D | GlobalStdDevPooling2D | InstanceNormalization | L2_normalize | PixelShuffler | ReflectionPadding2D | SubPixelUpscaling}": [[49, "    layer = layer_cls(**kwargs)"]]}, "i": {"?": [[35, "        for i, var_e in enumerate(input_data_shape):"]]}, "inp": {"?": [[61, "        inp = Input(batch_shape=input_shape, dtype=input_dtype)"], [63, "        inp = Input(shape=input_shape[1:], dtype=input_dtype)"]]}, "model_config": {"?": [[81, "    model_config = model.get_config()"]]}, "layer_config": {"dict": [[96, "    layer_config = layer.get_config()"]]}, "recovered_model": {"?": [[82, "    recovered_model = model.__class__.from_config(model_config)"]]}, "model": {"?": [[68, "    model = Model(inp, outp)"]]}}, "param": {"layer_cls": {"{<GlobalMinPooling2D> | <GlobalStdDevPooling2D> | <InstanceNormalization> | <L2_normalize> | <PixelShuffler> | <ReflectionPadding2D> | <SubPixelUpscaling>}": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}, "kwargs": {"dict": [[25, "               expected_output_dtype=None, fixed_batch_size=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layer": {"func": {"test_global_min_pooling_2d": {"? -> None": [[124, "def test_global_min_pooling_2d(dummy):  # pylint:disable=unused-argument"]]}, "test_subpixel_upscaling": {"? -> None": [[112, "def test_subpixel_upscaling(dummy):  # pylint:disable=unused-argument"]]}, "test_global_std_pooling_2d": {"? -> None": [[130, "def test_global_std_pooling_2d(dummy):  # pylint:disable=unused-argument"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.mod": {"func": {"layer_test": {"(<SubPixelUpscaling>, dict, None, None, None, None, None, bool) -> None / (<L2_normalize>, dict, None, None, None, None, None, bool) -> None / (<ReflectionPadding2D>, dict, None, None, None, None, None, bool) -> None / (<PixelShuffler>, dict, None, None, None, None, None, bool) -> None / (<GlobalStdDevPooling2D>, dict, None, None, None, None, None, bool) -> None / (<GlobalMinPooling2D>, dict, None, None, None, None, None, bool) -> None / (<InstanceNormalization>, dict, None, None, None, None, None, bool) -> None / (?, dict, None, None, None, None, None, bool) -> None": [[23, "def layer_test(layer_cls, kwargs={}, input_shape=None, input_dtype=None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tests.lib.model.layers_test.layer_": {"var": {"weights": {"?": [[52, "    weights = layer.get_weights()"], [84, "        weights = model.get_weights()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/tools.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._get_extractor": {"param": {"self": {"Mask": [[102, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._input": {"var": {"faces_in_frame": {"None": [[205, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._save": {"param": {"idx": {"?": [[347, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._input_fac": {"var": {"frames": {"dict": [[163, ""]], "?": [[157, ""]]}}, "param": {"self": {"Mask": [[139, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mas": {"func": {"_check_input": {"(Mask, ?) -> None": [[59, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._set_save": {"var": {"output_dir": {"str": [[96, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._input_faces": {"var": {"detected_face": {"DetectedFace": [[173, ""]]}, "frame": {"?": [[168, ""]]}, "filename": {"?": [[151, ""]]}, "queue": {"?": [[150, ""]]}, "lookup": {"str": [[162, ""]]}, "alignment": {"?": [[170, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask.__init__": {"var": {"loader": {"{<FacesLoader> | <ImagesLoader>}": [[49, "    ARGUMENTS = PARSER.parse_args()"]]}}, "param": {"self": {"Mask": [[35, "            yield tool_name, help_text, cliarg_class"]]}, "arguments": {"?": [[35, "            yield tool_name, help_text, cliarg_class"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Ma": {"func": {"_check_for_missing": {"(Mask, str, ?, ?) -> bool / (Mask, ?, ?, ?) -> bool": [[226, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._sav": {"var": {"image": {"None": [[368, ""]]}, "filename": {"str": [[359, ""]]}}, "param": {"self": {"Mask": [[347, ""]]}, "detected_face": {"DetectedFace": [[347, ""]]}, "frame": {"str": [[347, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._g": {"var": {"detected_face": {"DetectedFace": [[283, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._get_": {"var": {"extractor": {"Extractor": [[114, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._chec": {"param": {"mask_input": {"?": [[59, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask.process": {"var": {"extractor_output": {"?": [[292, ""]]}, "updater": {"?": [[290, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._input_fram": {"var": {"detected_faces": {"[DetectedFace]": [[215, ""]]}}, "param": {"self": {"Mask": [[183, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._set_sav": {"param": {"arguments": {"?": [[76, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._get_output_suffix": {"param": {"self": {"Mask": [[251, ""]]}, "arguments": {"?": [[251, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask": {"func": {"_set_saver": {"(Mask, ?) -> ImagesSaver": [[76, ""]]}, "_get_output_suffix": {"(Mask, ?) -> str": [[251, ""]]}, "_save": {"(Mask, ?, ?, ?) -> None / (Mask, ?, ?, DetectedFace) -> None / (Mask, str, ?, ?) -> None": [[347, ""]]}, "_get_extractor": {"Mask -> Extractor": [[102, ""]]}, "_update_frames": {"(Mask, ?) -> None": [[331, ""]]}, "process": {"Mask -> None": [[287, ""]]}, "_create_image": {"(Mask, ?) -> None / (Mask, DetectedFace) -> None": [[372, ""]]}, "_input_frames": {"Mask -> None": [[183, ""]]}, "_feed_extractor": {"Mask -> MultiThread": [[120, ""]]}, "_update_faces": {"(Mask, ?) -> None": [[314, ""]]}, "_input_faces": {"Mask -> None": [[139, ""]]}, "_get_detected_face": {"? -> DetectedFace": [[270, ""]]}, "__init__": {"? -> ?": [[35, "            yield tool_name, help_text, cliarg_class"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._update_fram": {"param": {"self": {"Mask": [[331, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._check_input": {"param": {"self": {"Mask": [[59, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._set_saver": {"param": {"self": {"Mask": [[76, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask": {"var": {"logger": {"?": [[20, "    PARSER.print_help()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._input_frames": {"var": {"queue": {"?": [[194, ""]]}, "frame": {"str": [[196, ""]]}, "idx": {"?": [[217, ""]]}, "filename": {"?": [[195, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._get_detected_fac": {"param": {"alignment": {"?": [[270, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._set_": {"var": {"saver": {"ImagesSaver": [[98, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._create_ima": {"var": {"height": {"?": [[403, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._check_for_missing": {"var": {"retval": {"bool": [[244, ""]]}}, "param": {"self": {"Mask": [[226, ""]]}, "frame": {"str": [[226, ""]]}, "idx": {"?": [[226, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._cr": {"var": {"out_image": {"?": [[409, ""], [411, ""], [413, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask.proc": {"param": {"self": {"Mask": [[287, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.m": {"class": {"Mask": {"<Mask>": [[23, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._update_frames": {"var": {"frame": {"str": [[341, ""]]}, "idx": {"?": [[342, ""]]}}, "param": {"extractor_output": {"?": [[331, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._feed_extracto": {"var": {"masker_input": {"?": [[129, ""]]}, "args": {"{Extractor -> None | tuple}": [[133, ""]]}, "input_thread": {"MultiThread": [[134, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._update_faces": {"var": {"frame": {"?": [[325, ""]]}, "face": {"?": [[324, ""]]}}, "param": {"extractor_output": {"?": [[314, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._create_image": {"var": {"mask": {"?": [[387, ""], [395, ""], [400, ""], [401, ""], [406, ""]]}, "img": {"DetectedFace -> None": [[407, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._check_for_miss": {"param": {"alignment": {"?": [[226, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._get_output_suffi": {"var": {"sfx": {"str": [[264, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._create_imag": {"var": {"masked": {"?": [[405, ""]]}, "face": {"DetectedFace -> None": [[394, ""]], "None": [[391, ""], [399, ""]]}}, "param": {"self": {"Mask": [[372, ""]]}, "detected_face": {"DetectedFace": [[372, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._feed_extractor": {"param": {"self": {"Mask": [[120, ""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.tools.mask.mask.Mask._update_fac": {"param": {"self": {"Mask": [[314, ""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/model/backup_restore.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.snapshot_mo": {"var": {"dstfile": {"str": [[73, "            dstfile = os.path.join(dst, filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore_file": {"var": {"src": {"str": [[115, "            src = os.path.join(self.model_dir, filename)"]]}, "dst": {"str": [[116, "            dst = os.path.join(self.model_dir, dstfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.mo": {"var": {"archive_dir": {"str": [[93, "        archive_dir = os.path.join(self.model_dir, \"{}_archived_{}\".format(self.model_name, now))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.move_archive": {"var": {"dst": {"str": [[101, "            dst = os.path.join(archive_dir, filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.move_archived": {"var": {"src": {"str": [[100, "            src = os.path.join(self.model_dir, filename)"]]}, "now": {"str": [[92, "        now = datetime.now().strftime(\"%Y%m%d_%H%M%S\")"]]}, "filename": {"str": [[95, "        for filename in os.listdir(self.model_dir):"]]}}, "param": {"self": {"Backup": [[89, "    def move_archived(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.__init": {"param": {"model_name": {"{ModelBase -> str | str}": [[19, "    def __init__(self, model_dir, model_name):"]]}, "model_dir": {"?": [[19, "    def __init__(self, model_dir, model_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.backup_mode": {"param": {"fullpath": {"?": [[48, "    def backup_model(fullpath):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup": {"func": {"check_valid": {"(Backup, ?, bool) -> bool / (Backup, str, bool) -> bool": [[26, "    def check_valid(self, filename, for_restore=False):"]]}, "restore": {"Backup -> None": [[79, "    def restore(self):"]]}, "get_session_names": {"Backup -> [str]": [[132, "    def get_session_names(self):"]]}, "restore_files": {"Backup -> None": [[106, "    def restore_files(self):"]]}, "move_archived": {"Backup -> str": [[89, "    def move_archived(self):"]]}, "restore_logs": {"(Backup, str) -> None / (Backup, ?) -> None": [[120, "    def restore_logs(self, archive_dir):"]]}, "get_log_dirs": {"(Backup, str, [str]) -> [str] / (Backup, ?, ?) -> [str] / (Backup, ?, [str]) -> [str]": [[143, "    def get_log_dirs(self, archive_dir, session_names):"]]}, "__init__": {"? -> ?": [[19, "    def __init__(self, model_dir, model_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.check_valid": {"var": {"fullpath": {"str": [[28, "        fullpath = os.path.join(self.model_dir, filename)"]]}, "retval": {"bool": [[32, "            retval = False"], [35, "            retval = True"], [41, "            retval = True"], [43, "            retval = False"]]}}, "param": {"self": {"Backup": [[26, "    def check_valid(self, filename, for_restore=False):"]]}, "for_restore": {"bool": [[26, "    def check_valid(self, filename, for_restore=False):"]]}, "filename": {"str": [[26, "    def check_valid(self, filename, for_restore=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore_fi": {"param": {"self": {"Backup": [[106, "    def restore_files(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backu": {"func": {"snapshot_models": {"(Backup, ModelBase -> int) -> None / (Backup, ?) -> None": [[58, "    def snapshot_models(self, iterations):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore_": {"var": {"dstfile": {"str": [[113, "            dstfile = os.path.splitext(filename)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.get_log_dirs": {"param": {"archive_dir": {"str": [[143, "    def get_log_dirs(self, archive_dir, session_names):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore_files": {"var": {"filename": {"str": [[109, "        for filename in os.listdir(self.model_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.resto": {"var": {"archive_dir": {"str": [[85, "        archive_dir = self.move_archived()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore": {"var": {"log_dirs": {"[str]": [[124, "        log_dirs = self.get_log_dirs(archive_dir, session_names)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore": {"class": {"Backup": {"<Backup>": [[16, "class Backup():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.__init__": {"param": {"self": {"Backup": [[19, "    def __init__(self, model_dir, model_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.snapshot_mod": {"var": {"srcfile": {"str": [[72, "            srcfile = os.path.join(self.model_dir, filename)"]]}}, "param": {"self": {"Backup": [[58, "    def snapshot_models(self, iterations):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.get": {"var": {"session_names": {"[str]": [[138, "        session_names = [\"session_{}\".format(key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restor": {"param": {"self": {"Backup": [[79, "    def restore(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.get_log_d": {"var": {"archive_logs": {"str": [[145, "        archive_logs = os.path.join(archive_dir, \"{}_logs\".format(self.model_name))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.B": {"func": {"backup_model": {"? -> None": [[48, "    def backup_model(fullpath):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.snapshot_models": {"var": {"copyfunc": {"?": [[74, "            copyfunc = copytree if os.path.isdir(srcfile) else copyfile"]]}, "filename": {"str": [[68, "        for filename in os.listdir(self.model_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore_log": {"var": {"src": {"str": [[126, "            src = os.path.join(archive_dir, log_dir)"]]}, "dst": {"str": [[127, "            dst = os.path.join(self.model_dir, log_dir)"]]}, "session_names": {"[str]": [[123, "        session_names = self.get_session_names()"]]}}, "param": {"self": {"Backup": [[120, "    def restore_logs(self, archive_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.backup_mod": {"var": {"backupfile": {"str": [[51, "        backupfile = fullpath + \".bk\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.snapshot_model": {"var": {"dst": {"str": [[67, "        dst = str(get_folder(snapshot_dir))"]]}, "snapshot_dir": {"str": [[61, "        snapshot_dir = \"{}_snapshot_{}_iters\".format(self.model_dir, iterations)"]]}}, "param": {"iterations": {"ModelBase -> int": [[58, "    def snapshot_models(self, iterations):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.get_session_nam": {"var": {"state_file": {"str": [[135, "        state_file = os.path.join(self.model_dir,"]]}, "state": {"?": [[137, "        state = serializer.load(state_file)"]]}, "serializer": {"{<_JSONSerializer> | _CompressedSerializer | _JSONSerializer | _NPYSerializer | _PickleSerializer | _YAMLSerializer}": [[134, "        serializer = get_serializer(\"json\")"]]}}, "param": {"self": {"Backup": [[132, "    def get_session_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_rest": {"var": {"logger": {"?": [[13, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.restore_logs": {"var": {"log_dir": {"str": [[125, "        for log_dir in log_dirs:"]]}}, "param": {"archive_dir": {"str": [[120, "    def restore_logs(self, archive_dir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.model.backup_restore.Backup.get_log_dir": {"var": {"paths": {"[str]": [[146, "        paths = [os.path.join(dirpath.replace(archive_dir, \"\")[1:], folder)"]]}}, "param": {"self": {"Backup": [[143, "    def get_log_dirs(self, archive_dir, session_names):"]]}, "session_names": {"[str]": [[143, "    def get_log_dirs(self, archive_dir, session_names):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/trainer/original_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.trainer.original_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = (\"Original Trainer Options.\\n\""]]}, "_DEFAULTS": {"dict": [[49, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/mask/mask_blend_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.mask.mask_blend_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = \"Options for blending the edges between the mask and the background image\""]]}, "_DEFAULTS": {"dict": [[47, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/train/model/dlight_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.train.model.dlight_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = (\"A lightweight, high resolution Dfaker variant \""]]}, "_DEFAULTS": {"dict": [[48, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/faceswap.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.faceswap": {"var": {"_PARSER": {"FullHelpArgumentParser": [[14, "_PARSER = args.FullHelpArgumentParser()"]]}}, "func": {"_bad_args": {"() -> None": [[17, "def _bad_args():"]]}, "_main": {"() -> None": [[23, "def _main():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.faceswap._mai": {"var": {"arguments": {"?": [[42, "    arguments = _PARSER.parse_args()"]]}}, "param": {"arguments": {"?": [[43, "    arguments.func(arguments)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.faceswap._main": {"var": {"subparser": {"?": [[34, "    subparser = _PARSER.add_subparsers()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/pillow_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow_defaults": {"var": {"_HELPTEXT": {"str": [[44, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[50, "_DEFAULTS = {"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/lib/image.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader": {"func": {"_initialize": {"(FfmpegReader, int) -> ?": [[123, "    def _initialize(self, index=0):"]]}, "__init__": {"? -> ?": [[35, "    def __init__(self, format, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoader.__init__": {"param": {"count": {"None": [[943, "    def __init__(self, path, skip_list=None, count=None):"]]}, "path": {"?": [[943, "    def __init__(self, path, skip_list=None, count=None):"]]}, "self": {"FacesLoader": [[943, "    def __init__(self, path, skip_list=None, count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.__init__": {"var": {"count": {"None": [[681, "                 count=None):"]]}, "path": {"?": [[677, "                 path,"]]}}, "param": {"count": {"None": [[681, "                 count=None):"]]}, "path": {"?": [[681, "                 count=None):"]]}, "self": {"ImagesLoader": [[681, "                 count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO.__init__": {"param": {"path": {"?": [[575, "    def __init__(self, path, queue_size, args=None):"]]}, "self": {"ImageIO": [[575, "    def __init__(self, path, queue_size, args=None):"]]}, "args": {"None": [[575, "    def __init__(self, path, queue_size, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.encode_image_with_hash": {"var": {"encoded_image": {"?": [[425, "    encoded_image = cv2.imencode(extension, image)[1]"]]}}, "param": {"image": {"?": [[402, "def encode_image_with_hash(image, extension):"]]}, "extension": {"str": [[402, "def encode_image_with_hash(image, extension):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver.__init": {"param": {"queue_size": {"int": [[1080, "    def __init__(self, path, queue_size=8, as_bytes=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver.__ini": {"param": {"as_bytes": {"?": [[1080, "    def __init__(self, path, queue_size=8, as_bytes=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader.get_frame_i": {"var": {"frame_count": {"int": [[107, "        frame_count = len(frame_pts)"]]}, "frame_no": {"int": [[93, "            frame_no = int(line[line.index(\"n\") + 1])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoader._from_folder": {"var": {"idx": {"?": [[963, "        for idx, filename in enumerate(self.file_list):"]]}}, "param": {"self": {"FacesLoader": [[948, "    def _from_folder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_": {"var": {"image": {"None": [[267, "    image = None"]], "?": [[269, "        image = cv2.imread(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._get_count_and_filelist": {"param": {"self": {"ImagesLoader": [[779, "    def _get_count_and_filelist(self, fast_count, count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.batch_convert_": {"param": {"colorspace": {"str": [[430, "def batch_convert_color(batch, colorspace):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO._proc": {"param": {"self": {"ImageIO": [[619, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read": {"var": {"image_hash": {"?": [[358, "    image_hash = sha1(img).hexdigest()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._get_fps": {"var": {"retval": {"float": [[775, "            retval = 25.0"]], "?": [[772, "            retval = reader.get_meta_data()[\"fps\"]"]]}, "reader": {"?": [[771, "            reader = imageio.get_reader(self.location, \"ffmpeg\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.count_frame": {"param": {"fast": {"?": [[477, "def count_frames(filename, fast=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_imag": {"var": {"retval": {"(?, ?)": [[292, "    retval = (image, sha1(image).hexdigest()) if with_hash else image"]]}, "success": {"?": [[266, "    success = True"], [273, "        success = False"], [279, "        success = False"], [286, "        success = False"]]}}, "param": {"raise_error": {"?": [[233, "def read_image(filename, raise_error=False, with_hash=False):"]]}, "filename": {"{<list> | list | str}": [[233, "def read_image(filename, raise_error=False, with_hash=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader.get_frame_inf": {"var": {"process": {"?": [[73, "        process = subprocess.Popen(cmd,"]]}, "output": {"?": [[85, "            output = process.stdout.readline().strip()"]]}, "return_code": {"?": [[106, "        return_code = process.poll()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver._proc": {"param": {"self": {"ImagesSaver": [[1102, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver._sav": {"var": {"filename": {"str": [[1131, "        filename = os.path.join(self.location, os.path.basename(filename))"]]}}, "param": {"self": {"ImagesSaver": [[1120, "    def _save(self, filename, image):"]]}, "image": {"?": [[1120, "    def _save(self, filename, image):"]]}, "filename": {"?": [[1120, "    def _save(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader.image_from_": {"param": {"index": {"?": [[1018, "    def image_from_index(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSav": {"func": {"_process": {"(ImagesSaver, ?) -> None": [[1102, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._from_fol": {"var": {"image_read": {"(?, ?)": [[891, "            image_read = read_image(filename, raise_error=False, with_hash=False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._proc": {"param": {"self": {"ImagesLoader": [[810, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader._get_count_and_filelist": {"param": {"self": {"SingleFrameLoader": [[1008, "    def _get_count_and_filelist(self, fast_count, count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.count_": {"var": {"frames": {"int": [[521, "    frames = 0"], [540, "            frames = int(output[frame_idx:].strip().split(\" \")[0].strip())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._get_count_and_fileli": {"param": {"fast_count": {"?": [[779, "    def _get_count_and_filelist(self, fast_count, count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegRead": {"func": {"_previous_keyframe_info": {"(FfmpegReader, int) -> (list, int)": [[115, "    def _previous_keyframe_info(self, index=0):"]]}, "get_frame_info": {"(FfmpegReader, None, None) -> (int, dict)": [[41, "    def get_frame_info(self, frame_pts=None, keyframes=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._get_fp": {"param": {"self": {"ImagesLoader": [[760, "    def _get_fps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.count": {"param": {"self": {"ImagesLoader": [[696, "    def count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader._get_count_and_fileli": {"param": {"fast_count": {"?": [[1008, "    def _get_count_and_filelist(self, fast_count, count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader": {"func": {"video_meta_data": {"SingleFrameLoader -> dict": [[997, "    def video_meta_data(self):"]]}, "_get_count_and_filelist": {"(SingleFrameLoader, ?, ?) -> None": [[1008, "    def _get_count_and_filelist(self, fast_count, count):"]]}, "__init__": {"? -> ?": [[989, "    def __init__(self, path, video_meta_data=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib": {"class": {"SingleFrameLoader": {"<SingleFrameLoader>": [[975, "class SingleFrameLoader(ImagesLoader):"]]}}, "func": {"read_image": {"(str, ?, ?) -> (?, ?) / (<list>, ?, ?) -> (?, ?) / (list, ?, ?) -> (?, ?) / (?, ?, ?) -> (?, ?)": [[233, "def read_image(filename, raise_error=False, with_hash=False):"]]}, "encode_image_with_hash": {"(?, ?) -> (?, ?) / (?, str) -> (?, ?)": [[402, "def encode_image_with_hash(image, extension):"]]}, "read_image_hash": {"? -> None": [[340, "def read_image_hash(filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO": {"func": {"_process": {"(ImageIO, ?) -> None": [[619, "    def _process(self, queue):"]]}, "_check_location_exists": {"ImageIO -> None": [[592, "    def _check_location_exists(self):"]]}, "_set_thread": {"ImageIO -> None / ImagesSaver -> None / ImagesLoader -> None": [[606, "    def _set_thread(self):"]]}, "close": {"ImageIO -> None / ImagesLoader -> None": [[629, "    def close(self):"]]}, "__init__": {"? -> ?": [[575, "    def __init__(self, path, queue_size, args=None):"]]}, "location": {"ImageIO -> None": [[588, "    def location(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO.clo": {"param": {"self": {"{ImageIO | ImagesLoader}": [[629, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver.__init__": {"param": {"path": {"str": [[1080, "    def __init__(self, path, queue_size=8, as_bytes=False):"]]}, "self": {"ImagesSaver": [[1080, "    def __init__(self, path, queue_size=8, as_bytes=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._get_count_and_filelis": {"param": {"count": {"None": [[779, "    def _get_count_and_filelist(self, fast_count, count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader._get_count_and_filelis": {"var": {"count": {"?": [[1012, "            count, video_meta_data = self._reader.get_frame_info("]]}}, "param": {"count": {"?": [[1008, "    def _get_count_and_filelist(self, fast_count, count):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver._process": {"var": {"item": {"?": [[1112, "            item = queue.get()"]]}, "executor": {"?": [[1110, "        executor = futures.ThreadPoolExecutor(thread_name_prefix=self.__class__.__name__)"]]}}, "param": {"queue": {"?": [[1102, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver.clo": {"param": {"self": {"ImagesSaver": [[1158, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_image_batch": {"var": {"images": {"dict": [[324, "        images = {executor.submit(read_image, filename, raise_error=True): filename"]]}, "future": {"?": [[333, "        for future in futures.as_completed(images):"]]}, "return_indices": {"dict": [[330, "        return_indices = {filename: [idx for idx, fname in enumerate(filenames)"]]}, "executor": {"?": [[322, "    executor = futures.ThreadPoolExecutor()"]]}}, "param": {"filenames": {"[?]": [[296, "def read_image_batch(filenames):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO._check_location_exist": {"param": {"self": {"ImageIO": [[592, "    def _check_location_exists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader.__init__": {"param": {"path": {"?": [[989, "    def __init__(self, path, video_meta_data=None):"]]}, "self": {"SingleFrameLoader": [[989, "    def __init__(self, path, video_meta_data=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader.video_meta_data": {"param": {"self": {"SingleFrameLoader": [[997, "    def video_meta_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver": {"func": {"close": {"ImagesSaver -> None": [[1158, "    def close(self):"]]}, "save": {"(ImagesSaver, ?, ?) -> None / (ImagesSaver, str, None) -> None / (ImagesSaver, str, ?) -> None": [[1142, "    def save(self, filename, image):"]]}, "_check_location_exists": {"ImagesSaver -> None": [[1087, "    def _check_location_exists(self):"]]}, "__init__": {"? -> ?": [[1080, "    def __init__(self, path, queue_size=8, as_bytes=False):"]]}, "_save": {"(ImagesSaver, ?, ?) -> ?": [[1120, "    def _save(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.add": {"param": {"skip_list": {"[?]": [[726, "    def add_skip_list(self, skip_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_image": {"var": {"msg": {"?": [[280, "        msg = (\"Error while reading image. This is most likely caused by special characters in \""]], "str": [[274, "        msg = \"Error while reading image (TypeError): '{}'\".format(filename)"], [287, "        msg = \"Failed to load image '{}'. Original Error: {}\".format(filename, str(err))"]]}}, "param": {"with_hash": {"?": [[233, "def read_image(filename, raise_error=False, with_hash=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.__init": {"var": {"queue_size": {"int": [[678, "                 queue_size=8,"]]}}, "param": {"queue_size": {"int": [[681, "                 count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader._initialize": {"var": {"pix_fmt": {"?": [[190, "        pix_fmt = self._pix_fmt"]]}, "iargs": {"[?]": [[138, "        iargs = []"]]}, "bpp": {"?": [[191, "        bpp = self._depth * self._bytes_per_channel"]]}, "rf": {"?": [[194, "        rf = self._ffmpeg_api.read_frames"]]}, "fps": {"float": [[185, "            fps = float(self.request.kwargs[\"fps\"])"]]}, "oargs": {"[?]": [[139, "        oargs = []"]]}, "_": {"?": [[225, "                    _ = self._read_gen.__next__()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoa": {"func": {"_from_folder": {"FacesLoader -> None": [[948, "    def _from_folder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver._check_location_exist": {"param": {"self": {"ImagesSaver": [[1087, "    def _check_location_exists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader.image_from_index": {"var": {"image": {"(?, ?)": [[1049, "            image = read_image(filename, raise_error=True)"]], "?": [[1045, "            image = self._reader.get_data(index)[..., ::-1]"]]}, "filename": {"?": [[1048, "            filename = self.file_list[index]"]], "str": [[1046, "            filename = self._dummy_video_framename(index)"], [1050, "            filename = os.path.basename(filename)"]]}}, "param": {"self": {"SingleFrameLoader": [[1018, "    def image_from_index(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.imag": {"class": {"FacesLoader": {"<FacesLoader>": [[932, "class FacesLoader(ImagesLoader):"]]}}, "func": {"count_frames": {"(ImageIO -> None, ?) -> int / (?, ?) -> int": [[477, "def count_frames(filename, fast=False):"]]}, "batch_convert_color": {"(?, ?) -> None / (?, str) -> None / (None, str) -> None": [[430, "def batch_convert_color(batch, colorspace):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.is_video": {"param": {"self": {"ImagesLoader": [[709, "    def is_video(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.__ini": {"var": {"fast_count": {"?": [[679, "                 fast_count=True,"]]}}, "param": {"fast_count": {"?": [[681, "                 count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesSaver.sav": {"param": {"self": {"ImagesSaver": [[1142, "    def save(self, filename, image):"]]}, "image": {"None": [[1142, "    def save(self, filename, image):"]]}, "filename": {"str": [[1142, "    def save(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.batch_convert_color": {"var": {"batch": {"?": [[468, "    batch = batch.reshape((original_shape[0] * original_shape[1], *original_shape[2:]))"], [469, "    batch = cv2.cvtColor(batch, getattr(cv2, \"COLOR_{}\".format(colorspace)))"]]}}, "param": {"batch": {"None": [[430, "def batch_convert_color(batch, colorspace):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._check_for_video": {"var": {"retval": {"?": [[752, "            retval = False"], [754, "            retval = True"]]}}, "param": {"self": {"ImagesLoader": [[738, "    def _check_for_video(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO.location": {"param": {"self": {"ImageIO": [[588, "    def location(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_image_": {"var": {"batch": {"[None]": [[326, "        batch = [None for _ in range(len(filenames))]"]], "?": [[335, "    batch = np.array(batch)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._process": {"var": {"retval": {"?": [[822, "        for retval in iterator():"]]}, "iterator": {"{ImagesLoader -> None | ImagesLoader -> None}": [[820, "        iterator = self._from_video if self._is_video else self._from_folder"]]}, "filename": {"?": [[823, "            filename, image = retval[:2]"]]}}, "param": {"queue": {"?": [[810, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.__in": {"var": {"skip_list": {"None": [[680, "                 skip_list=None,"]]}}, "param": {"skip_list": {"None": [[681, "                 count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameLoader.__in": {"param": {"video_meta_data": {"None": [[989, "    def __init__(self, path, video_meta_data=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoader._from_fold": {"var": {"retval": {"(?, (?, ?))": [[968, "            retval = filename, *image_read"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.batch_convert_c": {"var": {"original_shape": {"?": [[467, "    original_shape = batch.shape"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_image_hash": {"var": {"img": {"(?, ?)": [[357, "    img = read_image(filename, raise_error=True)"]]}}, "param": {"filename": {"?": [[340, "def read_image_hash(filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.add_skip_list": {"param": {"self": {"ImagesLoader": [[726, "    def add_skip_list(self, skip_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoad": {"func": {"process_count": {"ImagesLoader -> None": [[703, "    def process_count(self):"]]}, "_process": {"(ImagesLoader, ?) -> None": [[810, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_image_hash_batc": {"var": {"read_hashes": {"{dict | dict}": [[393, "        read_hashes = {executor.submit(read_image_hash, filename): filename"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._dummy_video_framenam": {"param": {"index": {"int": [[857, "    def _dummy_video_framename(self, index):"]]}, "self": {"{ImagesLoader | SingleFrameLoader}": [[857, "    def _dummy_video_framename(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._from_fold": {"var": {"retval": {"(?, (?, ?))": [[892, "            retval = filename, image_read"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.file_list": {"param": {"self": {"ImagesLoader": [[720, "    def file_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.process_count": {"param": {"self": {"ImagesLoader": [[703, "    def process_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO._set_thread": {"param": {"self": {"{ImageIO | ImagesLoader | ImagesSaver}": [[606, "    def _set_thread(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoader._from_fol": {"var": {"image_read": {"(?, ?)": [[967, "            image_read = read_image(filename, raise_error=False, with_hash=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.count_frames": {"var": {"init_tqdm": {"?": [[519, "    init_tqdm = False"], [537, "                init_tqdm = True"]]}, "vid_time": {"int": [[541, "            vid_time = int(convert_to_secs(*output[time_idx:].split(\" \")[0].strip().split(\":\")))"]]}, "idx": {"int": [[529, "            idx = output.find(\"Duration:\") + len(\"Duration:\")"]]}, "return_code": {"?": [[548, "    return_code = process.poll()"]]}, "cmd": {"{[str] | [{ImageIO -> None | str}]}": [[507, "    cmd = [im_ffm.get_ffmpeg_exe(), \"-i\", filename, \"-map\", \"0:v:0\"]"]]}, "update": {"int": [[520, "    update = 0"], [544, "            update = vid_time"]]}, "prev_update": {"int": [[543, "            prev_update = update"]]}, "time_idx": {"int": [[538, "            time_idx = output.find(\"time=\") + len(\"time=\")"]]}, "pbar": {"None": [[517, "    pbar = None"]], "?": [[536, "                pbar = tqdm(desc=\"Analyzing Video\", leave=False, total=duration, unit=\"secs\")"]]}, "duration": {"int": [[530, "            duration = int(convert_to_secs(*output[idx:].split(\",\", 1)[0].strip().split(\":\")))"]], "None": [[518, "    duration = None"]]}, "output": {"?": [[523, "        output = process.stdout.readline().strip()"]]}, "frame_idx": {"int": [[539, "            frame_idx = output.find(\"frame=\") + len(\"frame=\")"]]}}, "param": {"filename": {"ImageIO -> None": [[477, "def count_frames(filename, fast=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO.__init": {"param": {"queue_size": {"?": [[575, "    def __init__(self, path, queue_size, args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.read_image_hash_batch": {"var": {"future": {"?": [[396, "        for future in futures.as_completed(read_hashes):"]]}, "retval": {"(str, ?)": [[397, "            retval = (read_hashes[future], future.result())"]]}, "executor": {"?": [[390, "    executor = futures.ThreadPoolExecutor()"]]}}, "param": {"filenames": {"[str]": [[363, "def read_image_hash_batch(filenames):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImageIO._process": {"param": {"queue": {"?": [[619, "    def _process(self, queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.ima": {"var": {"logger": {"?": [[24, "logger = logging.getLogger(__name__)  # pylint:disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._from_folder": {"var": {"idx": {"?": [[887, "        for idx, filename in enumerate(self.file_list):"]]}}, "param": {"self": {"ImagesLoader": [[876, "    def _from_folder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.SingleFrameL": {"func": {"image_from_index": {"(SingleFrameLoader, ?) -> (str, (?, ?))": [[1018, "    def image_from_index(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.encode_image_wit": {"var": {"image_hash": {"?": [[426, "    image_hash = sha1(cv2.imdecode(encoded_image, cv2.IMREAD_UNCHANGED)).hexdigest()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader": {"func": {"count": {"ImagesLoader -> int": [[696, "    def count(self):"]]}, "load": {"ImagesLoader -> ?": [[898, "    def load(self):"]]}, "add_skip_list": {"(ImagesLoader, ?) -> None / (ImagesLoader, [?]) -> None / (ImagesLoader, None) -> None": [[726, "    def add_skip_list(self, skip_list):"]]}, "_get_count_and_filelist": {"(ImagesLoader, ?, ?) -> None / (ImagesLoader, ?, None) -> None": [[779, "    def _get_count_and_filelist(self, fast_count, count):"]]}, "fps": {"ImagesLoader -> float": [[714, "    def fps(self):"]]}, "file_list": {"ImagesLoader -> None": [[720, "    def file_list(self):"]]}, "is_video": {"ImagesLoader -> None": [[709, "    def is_video(self):"]]}, "_get_fps": {"ImagesLoader -> float": [[760, "    def _get_fps(self):"]]}, "__init__": {"? -> ?": [[676, "    def __init__(self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._dummy_video_fr": {"var": {"vidname": {"str": [[873, "        vidname = os.path.splitext(os.path.basename(self.location))[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.count_fram": {"var": {"process": {"?": [[513, "    process = subprocess.Popen(cmd,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.fp": {"param": {"self": {"ImagesLoader": [[714, "    def fps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader.__init__": {"param": {"self": {"FfmpegReader": [[35, "    def __init__(self, format, request):"]]}, "request": {"?": [[35, "    def __init__(self, format, request):"]]}, "format": {"?": [[35, "    def __init__(self, format, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoader.__in": {"param": {"skip_list": {"None": [[943, "    def __init__(self, path, skip_list=None, count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.l": {"func": {"read_image_hash_batch": {"? -> None / [str] -> None": [[363, "def read_image_hash_batch(filenames):"]]}, "read_image_batch": {"? -> None / [?] -> None": [[296, "def read_image_batch(filenames):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader.load": {"var": {"retval": {"?": [[919, "                retval = self._queue.get(True, 1)"]]}}, "param": {"self": {"ImagesLoader": [[898, "    def load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoa": {"func": {"_check_for_video": {"ImagesLoader -> None": [[738, "    def _check_for_video(self):"]]}, "_from_video": {"ImagesLoader -> None": [[834, "    def _from_video(self):"]]}, "_from_folder": {"ImagesLoader -> None": [[876, "    def _from_folder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FacesLoader": {"func": {"__init__": {"? -> ?": [[943, "    def __init__(self, path, skip_list=None, count=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.i": {"class": {"FfmpegReader": {"<FfmpegReader>": [[33, "class FfmpegReader(imageio.plugins.ffmpeg.FfmpegFormat.Reader):"]]}, "ImagesLoader": {"<ImagesLoader>": [[638, "class ImagesLoader(ImageIO):"]]}, "ImageIO": {"<ImageIO>": [[553, "class ImageIO():"]]}, "ImagesSaver": {"<ImagesSaver>": [[1055, "class ImagesSaver(ImageIO):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader._previous_keyframe_info": {"var": {"prev_pts_time": {"list": [[119, "        prev_pts_time = self._frame_pts[prev_keyframe]"]]}, "prev_keyframe": {"int": [[118, "        prev_keyframe = self._keyframes[prev_keyframe_idx]"]]}, "prev_keyframe_idx": {"int": [[117, "        prev_keyframe_idx = bisect(self._keyframes, index) - 1"]]}}, "param": {"index": {"int": [[115, "    def _previous_keyframe_info(self, index=0):"]]}, "self": {"FfmpegReader": [[115, "    def _previous_keyframe_info(self, index=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesL": {"func": {"_dummy_video_framename": {"(SingleFrameLoader, ?) -> str / (ImagesLoader, int) -> str / (ImagesLoader, ?) -> str": [[857, "    def _dummy_video_framename(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.ImagesLoader._from_video": {"var": {"frame": {"?": [[851, "            frame = frame[:, :, ::-1]"]]}, "filename": {"str": [[852, "            filename = self._dummy_video_framename(idx)"]]}, "idx": {"?": [[846, "        for idx, frame in enumerate(reader):"]]}, "reader": {"?": [[845, "        reader = imageio.get_reader(self.location, \"ffmpeg\")"]]}}, "param": {"self": {"ImagesLoader": [[834, "    def _from_video(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader._initializ": {"var": {"frames_skipped": {"int": [[222, "                frames_skipped = 0"]]}, "keyframe_pts": {"list": [[166, "                keyframe_pts, keyframe = self._previous_keyframe_info(index)"]]}, "skip_frames": {"int": [[140, "        skip_frames = 0"], [168, "                skip_frames = index - keyframe"]]}, "seek_slow": {"int": [[171, "                seek_slow = min(10, starttime)"]]}, "meta": {"?": [[203, "                meta = self._read_gen.__next__()"]]}, "err_text": {"str": [[205, "                err_text = str(err)"]]}, "starttime": {"int": [[170, "                starttime = index / self._meta[\"fps\"]"]]}, "seek_fast": {"int": [[172, "                seek_fast = starttime - seek_slow"]], "list": [[167, "                seek_fast = keyframe_pts"]]}}, "param": {"index": {"int": [[123, "    def _initialize(self, index=0):"]]}, "self": {"FfmpegReader": [[123, "    def _initialize(self, index=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.lib.image.FfmpegReader.get_frame_info": {"var": {"frame_pts": {"[float]": [[77, "        frame_pts = []"]]}, "cmd": {"[str]": [[63, "        cmd = [im_ffm.get_ffmpeg_exe(),"]]}, "last_update": {"int": [[79, "        last_update = 0"], [104, "            last_update = int(pts_time)"]]}, "pbar": {"?": [[80, "        pbar = tqdm(desc=\"Analyzing Video\","]]}, "key_frames": {"[int]": [[78, "        key_frames = []"]]}, "line": {"?": [[91, "            line = re.split(r\"\\s+|:\\s*\", output)"]]}, "pts_time": {"float": [[92, "            pts_time = float(line[line.index(\"pts_time\") + 1])"]]}}, "param": {"frame_pts": {"None": [[41, "    def get_frame_info(self, frame_pts=None, keyframes=None):"]]}, "self": {"FfmpegReader": [[41, "    def get_frame_info(self, frame_pts=None, keyframes=None):"]]}, "keyframes": {"None": [[41, "    def get_frame_info(self, frame_pts=None, keyframes=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/detect/mtcnn.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_rn": {"var": {"predict_24_batch": {"[?]": [[280, "            predict_24_batch = []"]], "?": [[286, "            predict_24_batch = np.array(predict_24_batch)"]]}, "rect": {"?": [[281, "            for rect in rectangles:"]]}, "ret": {"[{[[int]] | list}]": [[272, "        ret = []"]]}}, "param": {"height": {"?": [[270, "    def detect_rnet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.ONet.__init__": {"param": {"self": {"ONet": [[162, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.RNet.__init__": {"param": {"self": {"RNet": [[132, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.__ini": {"param": {"model_path": {"?": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}, "allow_growth": {"?": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.PNet.__init__": {"param": {"self": {"PNet": [[109, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.d": {"param": {"rectangle_batch": {"[[?]]": [[270, "    def detect_rnet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_pn": {"var": {"out_side": {"int": [[255, "            out_side = max(out_h, out_w)"]]}, "batch_items": {"?": [[245, "        batch_items = images.shape[0]"]]}}, "param": {"height": {"?": [[239, "    def detect_pnet(self, images, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.PNe": {"func": {"__init__": {"? -> ?": [[109, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_48net": {"var": {"dx4": {"?": [[442, "    dx4 = roi[pick, 3]"]]}, "pick": {"[[int]]": [[462, "    pick = []"]], "?": [[432, "    pick = np.where(prob >= threshold)"]]}, "dx3": {"?": [[441, "    dx3 = roi[pick, 2]"]]}, "y_2": {"int": [[467, "        y_2 = int(min(height, rect[3]))"]], "?": [[437, "    y_2 = rectangles[pick, 3]"], [458, "    y_2 = np.array([(y_2 + dx4 * r_height)[0]]).T"]]}, "y_1": {"int": [[465, "        y_1 = int(max(0, rect[1]))"]], "?": [[435, "    y_1 = rectangles[pick, 1]"], [456, "    y_1 = np.array([(y_1 + dx_2 * r_height)[0]]).T"]]}, "sc_": {"?": [[438, "    sc_ = np.array([prob[pick]]).T"]]}, "x_2": {"int": [[466, "        x_2 = int(min(width, rect[2]))"]], "?": [[436, "    x_2 = rectangles[pick, 2]"], [457, "    x_2 = np.array([(x_2 + dx3 * r_width)[0]]).T"]]}, "x_1": {"int": [[464, "        x_1 = int(max(0, rect[0]))"]], "?": [[434, "    x_1 = rectangles[pick, 0]"], [455, "    x_1 = np.array([(x_1 + dx_1 * r_width)[0]]).T"]]}, "dx_1": {"?": [[439, "    dx_1 = roi[pick, 0]"]]}, "prob": {"?": [[431, "    prob = cls_prob[:, 1]"]]}, "dx_2": {"?": [[440, "    dx_2 = roi[pick, 1]"]]}}, "param": {"roi": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}, "cls_prob": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.calculate_scales": {"var": {"var_m": {"float": [[525, "    var_m = 12.0 / minsize"]]}, "minl": {"float": [[526, "    minl = minl * var_m"], [531, "        minl = minl * factor"]], "?": [[524, "    minl = np.amin([height, width])"]]}, "factor_count": {"int": [[523, "    factor_count = 0"]]}}, "param": {"width": {"?": [[513, "def calculate_scales(height, width, minsize, factor):"]]}, "factor": {"?": [[513, "def calculate_scales(height, width, minsize, factor):"]]}, "height": {"?": [[513, "def calculate_scales(height, width, minsize, factor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_24ne": {"var": {"r_width": {"?": [[397, "    r_width = x_2-x_1"]]}}, "param": {"width": {"?": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_on": {"var": {"predict_batch": {"[?]": [[307, "            predict_batch = []"]], "?": [[313, "            predict_batch = np.array(predict_batch)"]]}, "rect": {"?": [[308, "            for rect in rectangles:"]]}, "ret": {"list": [[299, "        ret = list()"]]}}, "param": {"height": {"?": [[297, "    def detect_onet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_48n": {"var": {"r_height": {"?": [[444, "    r_height = y_2-y_1"]]}, "rect": {"?": [[463, "    for rect in rectangles:"]]}}, "param": {"threshold": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}, "height": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.detect_face_12": {"var": {"rectangles": {"None": [[359, "    rectangles = rect2square(rectangles)"]], "?": [[358, "    rectangles = np.concatenate((boundingbox, score), axis=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.calculate_": {"var": {"scales": {"[?]": [[528, "    scales = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.detect_face_12n": {"var": {"stride": {"int": [[343, "    stride = 0"]], "?": [[345, "        stride = float(in_side-12)/(out_side-1)"]]}, "rect": {"?": [[361, "    for rect in rectangles:"]]}, "offset": {"?": [[356, "    offset = np.array([dx_1, dx_2, dx3, dx4]).T"]]}}, "param": {"threshold": {"?": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}, "out_side": {"int": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}, "height": {"?": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_f": {"var": {"rectangles": {"[[?]]": [[223, "        rectangles = self.detect_pnet(batch, origin_h, origin_w)"]], "list": [[225, "        rectangles = self.detect_onet(batch, rectangles, origin_h, origin_w)"]], "[{[[int]] | list}]": [[224, "        rectangles = self.detect_rnet(batch, rectangles, origin_h, origin_w)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.detect_face_12ne": {"param": {"width": {"?": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.PNet.model_definitio": {"var": {"input_": {"?": [[117, "        input_ = Input(shape=(None, None, 3))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.validate_kwargs": {"var": {"valid": {"bool": [[32, "        valid = True"], [41, "            valid = False"], [43, "            valid = False"], [45, "            valid = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_rnet": {"var": {"idx": {"?": [[274, "        for idx, rectangles in enumerate(rectangle_batch):"]]}, "image": {"?": [[278, "            image = images[idx]"]]}, "crop_number": {"int": [[279, "            crop_number = 0"]]}, "cls_prob": {"?": [[288, "            cls_prob = output[0]"], [289, "            cls_prob = np.array(cls_prob)"]]}, "crop_img": {"?": [[282, "                crop_img = image[int(rect[1]):int(rect[3]), int(rect[0]):int(rect[2])]"]]}, "roi_prob": {"?": [[290, "            roi_prob = output[1]"], [291, "            roi_prob = np.array(roi_prob)"]]}, "scale_img": {"?": [[283, "                scale_img = cv2.resize(crop_img, (24, 24))"]]}}, "param": {"images": {"?": [[270, "    def detect_rnet(self, images, rectangle_batch, height, width):"]]}, "self": {"MTCNN": [[270, "    def detect_rnet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.init_mod": {"param": {"self": {"Detect": [[55, "    def init_model(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.__init__": {"param": {"self": {"Detect": [[17, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_one": {"var": {"output": {"[?]": [[314, "            output = self.onet.predict(predict_batch, batch_size=128)"]]}, "pts_prob": {"?": [[317, "            pts_prob = output[2]  # index"]]}}, "param": {"width": {"?": [[297, "    def detect_onet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.process_input": {"param": {"self": {"Detect": [[59, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.process_outpu": {"param": {"batch": {"?": [[72, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_face": {"var": {"points": {"?": [[231, "                points = np.array([result[5:] for result in rects]).T"], [234, "                points = np.empty(0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_fac": {"var": {"total_boxes": {"?": [[230, "                total_boxes = np.array([result[:5] for result in rects])"], [233, "                total_boxes = np.empty((0, 9))"]]}, "ret_boxes": {"list": [[226, "        ret_boxes = list()"]]}, "ret_points": {"list": [[227, "        ret_points = list()"]]}}, "param": {"self": {"MTCNN": [[218, "    def detect_faces(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtc": {"func": {"nms": {"([?], float, str) -> [?] / (?, ?, ?) -> None / ([[int]], float, str) -> [[int]]": [[475, "def nms(rectangles, threshold, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.RNet.__ini": {"param": {"model_path": {"?": [[132, "    def __init__(self, model_path, allow_growth):"]]}, "allow_growth": {"?": [[132, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.ONet.model_definition": {"var": {"bbox_regress": {"?": [[188, "        bbox_regress = Dense(4, name='conv6-2')(var_x)"]]}, "classifier": {"?": [[187, "        classifier = Dense(2, activation='softmax', name='conv6-1')(var_x)"]]}, "var_x": {"?": [[171, "        var_x = Conv2D(32, (3, 3), strides=1, padding='valid', name='conv1')(input_)"], [172, "        var_x = PReLU(shared_axes=[1, 2], name='prelu1')(var_x)"], [173, "        var_x = MaxPool2D(pool_size=3, strides=2, padding='same')(var_x)"], [174, "        var_x = Conv2D(64, (3, 3), strides=1, padding='valid', name='conv2')(var_x)"], [175, "        var_x = PReLU(shared_axes=[1, 2], name='prelu2')(var_x)"], [176, "        var_x = MaxPool2D(pool_size=3, strides=2)(var_x)"], [177, "        var_x = Conv2D(64, (3, 3), strides=1, padding='valid', name='conv3')(var_x)"], [178, "        var_x = PReLU(shared_axes=[1, 2], name='prelu3')(var_x)"], [179, "        var_x = MaxPool2D(pool_size=2)(var_x)"], [180, "        var_x = Conv2D(128, (2, 2), strides=1, padding='valid', name='conv4')(var_x)"], [181, "        var_x = PReLU(shared_axes=[1, 2], name='prelu4')(var_x)"], [182, "        var_x = Permute((3, 2, 1))(var_x)"], [183, "        var_x = Flatten()(var_x)"], [184, "        var_x = Dense(256, name='conv5')(var_x)"], [185, "        var_x = PReLU(name='prelu5')(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.rect2squ": {"param": {"rectangles": {"?": [[537, "def rect2square(rectangles):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_48ne": {"var": {"pts9": {"?": [[454, "    pts9 = np.array([(r_height * pts[pick, 9] + y_1)[0]]).T"]]}, "pts8": {"?": [[453, "    pts8 = np.array([(r_width * pts[pick, 4] + x_1)[0]]).T"]]}, "pts1": {"?": [[446, "    pts1 = np.array([(r_height * pts[pick, 5] + y_1)[0]]).T"]]}, "pts0": {"?": [[445, "    pts0 = np.array([(r_width * pts[pick, 0] + x_1)[0]]).T"]]}, "pts3": {"?": [[448, "    pts3 = np.array([(r_height * pts[pick, 6] + y_1)[0]]).T"]]}, "pts2": {"?": [[447, "    pts2 = np.array([(r_width * pts[pick, 1] + x_1)[0]]).T"]]}, "pts5": {"?": [[450, "    pts5 = np.array([(r_height * pts[pick, 7] + y_1)[0]]).T"]]}, "pts4": {"?": [[449, "    pts4 = np.array([(r_width * pts[pick, 2] + x_1)[0]]).T"]]}, "pts7": {"?": [[452, "    pts7 = np.array([(r_height * pts[pick, 8] + y_1)[0]]).T"]]}, "pts6": {"?": [[451, "    pts6 = np.array([(r_width * pts[pick, 3] + x_1)[0]]).T"]]}, "r_width": {"?": [[443, "    r_width = x_2-x_1"]]}}, "param": {"width": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}, "pts": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.validate_kwarg": {"var": {"threshold": {"[?]": [[33, "        threshold = [self.config[\"threshold_1\"],"]]}}, "param": {"self": {"Detect": [[30, "    def validate_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.m": {"func": {"filter_face_24net": {"(?, ?, ?, ?, ?, ?) -> [[int]]": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}, "detect_face_12net": {"(?, ?, int, int, ?, ?, ?) -> [[int]] / (?, ?, ?, ?, ?, ?, ?) -> [[int]]": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}, "filter_face_48net": {"(?, ?, ?, ?, ?, ?, ?) -> [[int]]": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_faces": {"var": {"origin_h": {"?": [[222, "        origin_h, origin_w = batch.shape[1:3]"]]}}, "param": {"batch": {"?": [[218, "    def detect_faces(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.predi": {"param": {"batch": {"?": [[64, "    def predict(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.RNe": {"func": {"__init__": {"? -> ?": [[132, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_pne": {"var": {"rwidth": {"int": [[247, "            rwidth, rheight = int(width * scale), int(height * scale)"]]}, "output": {"[?]": [[251, "            output = self.pnet.predict(batch)"]]}, "out_h": {"?": [[254, "            out_h, out_w = cls_prob.shape[1:3]"]]}, "batch": {"?": [[248, "            batch = np.empty((batch_items, rheight, rwidth, 3), dtype=\"float32\")"]]}}, "param": {"width": {"?": [[239, "    def detect_pnet(self, images, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.validate_": {"var": {"kwargs": {"dict": [[36, "        kwargs = {\"minsize\": self.config[\"minsize\"],"], [48, "            kwargs = {\"minsize\": 20,  # minimum size of face"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.rect2square": {"var": {"width": {"?": [[544, "    width = rectangles[:, 2] - rectangles[:, 0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.ONet.__ini": {"param": {"model_path": {"?": [[162, "    def __init__(self, model_path, allow_growth):"]]}, "allow_growth": {"?": [[162, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_48": {"var": {"rectangles": {"?": [[433, "    rectangles = np.array(rectangles)"], [459, "    rectangles = np.concatenate((x_1, y_1, x_2, y_2, sc_,"]]}}, "param": {"rectangles": {"?": [[417, "def filter_face_48net(cls_prob, roi, pts, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn": {"class": {"MTCNN": {"<MTCNN>": [[193, "class MTCNN():"]]}, "Detect": {"<Detect>": [[15, "class Detect(Detector):"]]}, "ONet": {"<ONet>": [[160, "class ONet(KSession):"]]}, "PNet": {"<PNet>": [[107, "class PNet(KSession):"]]}, "RNet": {"<RNet>": [[130, "class RNet(KSession):"]]}}, "func": {"rect2square": {"? -> None": [[537, "def rect2square(rectangles):"]]}, "calculate_scales": {"(?, ?, ?, ?) -> {[?] | [float]}": [[513, "def calculate_scales(height, width, minsize, factor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_24n": {"var": {"r_height": {"?": [[398, "    r_height = y_2-y_1"]]}, "rect": {"?": [[406, "    for rect in rectangles:"]]}}, "param": {"threshold": {"?": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}, "height": {"?": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_24": {"var": {"rectangles": {"None": [[404, "    rectangles = rect2square(rectangles)"]], "?": [[387, "    rectangles = np.array(rectangles)"], [403, "    rectangles = np.concatenate((x_1, y_1, x_2, y_2, sc_), axis=1)"]]}}, "param": {"rectangles": {"?": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_fa": {"var": {"rects": {"<list>": [[228, "        for rects in rectangles:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_rne": {"var": {"output": {"[?]": [[287, "            output = self.rnet.predict(predict_24_batch, batch_size=128)"]]}}, "param": {"width": {"?": [[270, "    def detect_rnet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.ONet.model_definitio": {"var": {"landmark_regress": {"?": [[189, "        landmark_regress = Dense(10, name='conv6-3')(var_x)"]]}, "input_": {"?": [[170, "        input_ = Input(shape=(48, 48, 3))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.process_inpu": {"param": {"batch": {"?": [[59, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.__init__": {"param": {"minsize": {"?": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}, "threshold": {"?": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}, "self": {"MTCNN": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}, "factor": {"?": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_pnet": {"var": {"roi": {"?": [[253, "            roi = output[1]"], [257, "            roi = np.swapaxes(roi, 1, 3)"]]}, "scale": {"?": [[246, "        for scale in self._pnet_scales:"]]}, "cls_prob": {"?": [[252, "            cls_prob = output[0][..., 1]"], [256, "            cls_prob = np.swapaxes(cls_prob, 1, 2)"]]}, "idx": {"int": [[249, "            for idx in range(batch_items):"], [258, "            for idx in range(batch_items):"]]}}, "param": {"images": {"?": [[239, "    def detect_pnet(self, images, height, width):"]]}, "self": {"MTCNN": [[239, "    def detect_pnet(self, images, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.RNet.model_definition": {"var": {"bbox_regress": {"?": [[156, "        bbox_regress = Dense(4, name='conv5-2')(var_x)"]]}, "classifier": {"?": [[155, "        classifier = Dense(2, activation='softmax', name='conv5-1')(var_x)"]]}, "var_x": {"?": [[141, "        var_x = Conv2D(28, (3, 3), strides=1, padding='valid', name='conv1')(input_)"], [142, "        var_x = PReLU(shared_axes=[1, 2], name='prelu1')(var_x)"], [143, "        var_x = MaxPool2D(pool_size=3, strides=2, padding='same')(var_x)"], [145, "        var_x = Conv2D(48, (3, 3), strides=1, padding='valid', name='conv2')(var_x)"], [146, "        var_x = PReLU(shared_axes=[1, 2], name='prelu2')(var_x)"], [147, "        var_x = MaxPool2D(pool_size=3, strides=2)(var_x)"], [149, "        var_x = Conv2D(64, (2, 2), strides=1, padding='valid', name='conv3')(var_x)"], [150, "        var_x = PReLU(shared_axes=[1, 2], name='prelu3')(var_x)"], [151, "        var_x = Permute((3, 2, 1))(var_x)"], [152, "        var_x = Flatten()(var_x)"], [153, "        var_x = Dense(128, name='conv4')(var_x)"], [154, "        var_x = PReLU(name='prelu4')(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.RNet.model_definitio": {"var": {"input_": {"?": [[140, "        input_ = Input(shape=(24, 24, 3))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.rect2squar": {"var": {"length": {"?": [[546, "    length = np.maximum(width, height).T"]]}, "height": {"?": [[545, "    height = rectangles[:, 3] - rectangles[:, 1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.detect_face_12net": {"var": {"x_1": {"int": [[362, "        x_1 = int(max(0, rect[0]))"]]}, "dx4": {"?": [[354, "    dx4 = roi[3][var_x, var_y]"]]}, "dx3": {"?": [[353, "    dx3 = roi[2][var_x, var_y]"]]}, "y_2": {"int": [[365, "        y_2 = int(min(height, rect[3]))"]]}, "y_1": {"int": [[363, "        y_1 = int(max(0, rect[1]))"]]}, "sc_": {"?": [[366, "        sc_ = rect[4]"]]}, "score": {"?": [[355, "    score = np.array([cls_prob[var_x, var_y]]).T"]]}, "x_2": {"int": [[364, "        x_2 = int(min(width, rect[2]))"]]}, "in_side": {"int": [[342, "    in_side = 2*out_side+11"]]}, "pick": {"[[int]]": [[360, "    pick = []"]]}, "boundingbox": {"float": [[357, "    boundingbox = boundingbox + offset*12.0*scale"]], "?": [[347, "    boundingbox = np.array([var_x, var_y]).T"], [350, "    boundingbox = np.concatenate((bb1, bb2), axis=1)"]]}, "dx_1": {"?": [[351, "    dx_1 = roi[0][var_x, var_y]"]]}, "bb2": {"?": [[349, "    bb2 = np.fix((stride * (boundingbox) + 11) * scale)"]]}, "bb1": {"?": [[348, "    bb1 = np.fix((stride * (boundingbox) + 0) * scale)"]]}, "dx_2": {"?": [[352, "    dx_2 = roi[1][var_x, var_y]"]]}}, "param": {"roi": {"?": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}, "scale": {"int": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}, "cls_prob": {"?": [[330, "def detect_face_12net(cls_prob, roi, out_side, scale, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.__init": {"var": {"model_filename": {"[str]": [[19, "        model_filename = [\"mtcnn_det_v2.1.h5\", \"mtcnn_det_v2.2.h5\", \"mtcnn_det_v2.3.h5\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.PNet.model_definition": {"var": {"bbox_regress": {"?": [[126, "        bbox_regress = Conv2D(4, (1, 1), name='conv4-2')(var_x)"]]}, "classifier": {"?": [[125, "        classifier = Conv2D(2, (1, 1), activation='softmax', name='conv4-1')(var_x)"]]}, "var_x": {"?": [[118, "        var_x = Conv2D(10, (3, 3), strides=1, padding='valid', name='conv1')(input_)"], [119, "        var_x = PReLU(shared_axes=[1, 2], name='PReLU1')(var_x)"], [120, "        var_x = MaxPool2D(pool_size=2)(var_x)"], [121, "        var_x = Conv2D(16, (3, 3), strides=1, padding='valid', name='conv2')(var_x)"], [122, "        var_x = PReLU(shared_axes=[1, 2], name='PReLU2')(var_x)"], [123, "        var_x = Conv2D(32, (3, 3), strides=1, padding='valid', name='conv3')(var_x)"], [124, "        var_x = PReLU(shared_axes=[1, 2], name='PReLU3')(var_x)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.__in": {"var": {"git_model_id": {"int": [[18, "        git_model_id = 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.nm": {"var": {"s_sort": {"?": [[492, "    s_sort = np.array(var_s.argsort())"], [508, "        s_sort = s_sort[np.where(var_o <= threshold)[0]]"]]}, "result_rectangle": {"?": [[509, "    result_rectangle = boxes[pick].tolist()"]]}, "boxes": {"?": [[485, "    boxes = np.array(rectangles)"]]}, "var_s": {"?": [[490, "    var_s = boxes[:, 4]"]]}}, "param": {"threshold": {"float": [[475, "def nms(rectangles, threshold, method):"]]}, "rectangles": {"{[?] | [[int]]}": [[475, "def nms(rectangles, threshold, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.ON": {"func": {"model_definition": {"() -> ([?], [?])": [[168, "    def model_definition():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.nms": {"var": {"var_o": {"?": [[504, "            var_o = inter / np.minimum(area[s_sort[-1]], area[s_sort[0:-1]])"], [506, "            var_o = inter / (area[s_sort[-1]] + area[s_sort[0:-1]] - inter)"]]}, "inter": {"?": [[502, "        inter = width * height"]]}, "area": {"?": [[491, "    area = np.multiply(x_2-x_1+1, y_2-y_1+1)"]]}, "x_1": {"?": [[486, "    x_1 = boxes[:, 0]"]]}, "y_2": {"?": [[489, "    y_2 = boxes[:, 3]"]]}, "y_1": {"?": [[487, "    y_1 = boxes[:, 1]"]]}, "yy_2": {"?": [[499, "        yy_2 = np.minimum(y_2[s_sort[-1]], y_2[s_sort[0:-1]])"]]}, "height": {"?": [[501, "        height = np.maximum(0.0, yy_2 - yy_1 + 1)"]]}, "width": {"?": [[500, "        width = np.maximum(0.0, xx_2 - xx_1 + 1)"]]}, "x_2": {"?": [[488, "    x_2 = boxes[:, 2]"]]}, "yy_1": {"?": [[497, "        yy_1 = np.maximum(y_1[s_sort[-1]], y_1[s_sort[0:-1]])"]]}, "pick": {"[?]": [[493, "    pick = []"]]}, "xx_1": {"?": [[496, "        xx_1 = np.maximum(x_1[s_sort[-1]], x_1[s_sort[0:-1]])"]]}, "xx_2": {"?": [[498, "        xx_2 = np.minimum(x_2[s_sort[-1]], x_2[s_sort[0:-1]])"]]}}, "param": {"method": {"str": [[475, "def nms(rectangles, threshold, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_p": {"var": {"rectangles": {"[[?]]": [[244, "        rectangles = [[] for _ in range(images.shape[0])]"]]}, "rectangle": {"[[int]]": [[260, "                rectangle = detect_face_12net(cls_prob[idx, ...],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_o": {"param": {"rectangle_batch": {"[{[[int]] | list}]": [[297, "    def detect_onet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.PN": {"func": {"model_definition": {"() -> ([?], [?])": [[115, "    def model_definition():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN.detect_onet": {"var": {"idx": {"?": [[301, "        for idx, rectangles in enumerate(rectangle_batch):"]]}, "image": {"?": [[305, "            image = images[idx]"]]}, "crop_number": {"int": [[306, "            crop_number = 0"]]}, "cls_prob": {"?": [[315, "            cls_prob = output[0]"]]}, "crop_img": {"?": [[309, "                crop_img = image[int(rect[1]):int(rect[3]), int(rect[0]):int(rect[2])]"]]}, "roi_prob": {"?": [[316, "            roi_prob = output[1]"]]}, "scale_img": {"?": [[310, "                scale_img = cv2.resize(crop_img, (48, 48))"]]}}, "param": {"images": {"?": [[297, "    def detect_onet(self, images, rectangle_batch, height, width):"]]}, "self": {"MTCNN": [[297, "    def detect_onet(self, images, rectangle_batch, height, width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.ONe": {"func": {"__init__": {"? -> ?": [[162, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.filter_face_24net": {"var": {"dx4": {"?": [[396, "    dx4 = roi[pick, 3]"]]}, "pick": {"[[int]]": [[405, "    pick = []"]], "?": [[386, "    pick = np.where(prob >= threshold)"]]}, "dx3": {"?": [[395, "    dx3 = roi[pick, 2]"]]}, "y_2": {"int": [[410, "        y_2 = int(min(height, rect[3]))"]], "?": [[391, "    y_2 = rectangles[pick, 3]"], [402, "    y_2 = np.array([(y_2 + dx4 * r_height)[0]]).T"]]}, "y_1": {"int": [[408, "        y_1 = int(max(0, rect[1]))"]], "?": [[389, "    y_1 = rectangles[pick, 1]"], [400, "    y_1 = np.array([(y_1 + dx_2 * r_height)[0]]).T"]]}, "sc_": {"?": [[392, "    sc_ = np.array([prob[pick]]).T"], [411, "        sc_ = rect[4]"]]}, "x_2": {"int": [[409, "        x_2 = int(min(width, rect[2]))"]], "?": [[390, "    x_2 = rectangles[pick, 2]"], [401, "    x_2 = np.array([(x_2 + dx3 * r_width)[0]]).T"]]}, "x_1": {"int": [[407, "        x_1 = int(max(0, rect[0]))"]], "?": [[388, "    x_1 = rectangles[pick, 0]"], [399, "    x_1 = np.array([(x_1 + dx_1 * r_width)[0]]).T"]]}, "dx_1": {"?": [[393, "    dx_1 = roi[pick, 0]"]]}, "prob": {"?": [[385, "    prob = cls_prob[:, 1]"]]}, "dx_2": {"?": [[394, "    dx_2 = roi[pick, 1]"]]}}, "param": {"roi": {"?": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}, "cls_prob": {"?": [[372, "def filter_face_24net(cls_prob, roi, rectangles, width, height, threshold):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.RN": {"func": {"model_definition": {"() -> ([?], [?])": [[138, "    def model_definition():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.PNet.__ini": {"param": {"model_path": {"?": [[109, "    def __init__(self, model_path, allow_growth):"]]}, "allow_growth": {"?": [[109, "    def __init__(self, model_path, allow_growth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detec": {"func": {"validate_kwargs": {"Detect -> {dict | dict}": [[30, "    def validate_kwargs(self):"]]}, "init_model": {"Detect -> None": [[55, "    def init_model(self):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.D": {"var": {"prediction": {"list": [[66, "        prediction, points = self.model.detect_faces(batch[\"feed\"])"]]}}, "func": {"predict": {"(Detect, ?) -> None": [[64, "    def predict(self, batch):"]]}, "process_output": {"(Detect, ?) -> None": [[72, "    def process_output(self, batch):"]]}, "process_input": {"(Detect, ?) -> None": [[59, "    def process_input(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.MTCNN": {"func": {"detect_rnet": {"(MTCNN, ?, [[?]], ?, ?) -> [{[[int]] | list}] / (MTCNN, ?, ?, ?, ?) -> [{[[int]] | list}]": [[270, "    def detect_rnet(self, images, rectangle_batch, height, width):"]]}, "detect_pnet": {"(MTCNN, ?, ?, ?) -> [[?]]": [[239, "    def detect_pnet(self, images, height, width):"]]}, "detect_onet": {"(MTCNN, ?, [{[[int]] | list}], ?, ?) -> list / (MTCNN, ?, ?, ?, ?) -> list": [[297, "    def detect_onet(self, images, rectangle_batch, height, width):"]]}, "detect_faces": {"(MTCNN, ?) -> (list, list)": [[218, "    def detect_faces(self, batch):"]]}, "__init__": {"? -> ?": [[197, "    def __init__(self, model_path, allow_growth, minsize, threshold, factor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.calculate_scal": {"param": {"minsize": {"?": [[513, "def calculate_scales(height, width, minsize, factor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.process_output": {"param": {"self": {"Detect": [[72, "    def process_output(self, batch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.detect.mtcnn.Detect.predict": {"param": {"self": {"Detect": [[64, "    def predict(self, batch):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/convert/writer/pillow.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow": {"class": {"Writer": {"<Writer>": [[10, "class Writer(Output):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.pre_": {"var": {"encoded": {"?": [[57, "        encoded = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.get_save_": {"var": {"kwargs": {"dict": [[31, "        kwargs = dict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.pre_encode": {"var": {"fmt": {"?": [[55, "        fmt = self.format_dict.get(self.config[\"format\"], None)"], [56, "        fmt = self.config[\"format\"].upper() if fmt is None else fmt"]]}, "rgb": {"[int]": [[58, "        rgb = [2, 1, 0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer": {"func": {"close": {"Writer -> None": [[66, "    def close(self):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, output_folder, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.check_transparency_format": {"param": {"self": {"Writer": [[19, "    def check_transparency_format(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Wri": {"func": {"check_transparency_format": {"Writer -> None": [[19, "    def check_transparency_format(self):"]]}, "get_save_kwargs": {"Writer -> dict": [[28, "    def get_save_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.__ini": {"param": {"output_folder": {"?": [[12, "    def __init__(self, output_folder, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.get_save_kwarg": {"param": {"self": {"Writer": [[28, "    def get_save_kwargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.W": {"func": {"write": {"(Writer, ?, ?) -> ?": [[43, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.get_save_kwargs": {"var": {"filetype": {"?": [[30, "        filetype = self.config[\"format\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.clo": {"param": {"self": {"Writer": [[66, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writ": {"func": {"pre_encode": {"(Writer, ?) -> None": [[52, "    def pre_encode(self, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.__init__": {"param": {"self": {"Writer": [[12, "    def __init__(self, output_folder, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.writ": {"var": {"filename": {"str": [[45, "        filename = self.output_filename(filename)"]]}}, "param": {"self": {"Writer": [[43, "    def write(self, filename, image):"]]}, "image": {"?": [[43, "    def write(self, filename, image):"]]}, "filename": {"?": [[43, "    def write(self, filename, image):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.check_transparency_form": {"var": {"transparent": {"?": [[21, "        transparent = self.config[\"draw_transparent\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.convert.writer.pillow.Writer.pre_encod": {"var": {"out_image": {"?": [[61, "        out_image = Image.fromarray(image[..., rgb])"]]}}, "param": {"self": {"Writer": [[52, "    def pre_encode(self, image):"]]}, "image": {"?": [[52, "    def pre_encode(self, image):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/scripts/extract.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extrac": {"func": {"_set_skip_list": {"Extract -> None": [[81, "    def _set_skip_list(self):"]]}, "_save_interval": {"Extract -> None": [[69, "    def _save_interval(self):"]]}, "__init__": {"? -> ?": [[38, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract": {"var": {"logger": {"?": [[17, "logger = logging.getLogger(__name__)  # pylint: disable=invalid-name"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract.__init__": {"var": {"configfile": {"None": [[51, "        configfile = self._args.configfile if hasattr(self._args, \"configfile\") else None"]]}, "maskers": {"[str]": [[54, "        maskers = [\"components\", \"extended\"]"]]}, "normalization": {"None": [[52, "        normalization = None if self._args.normalization == \"none\" else self._args.normalization"]]}}, "param": {"self": {"Extract": [[38, "    def __init__(self, arguments):"]]}, "arguments": {"?": [[38, "    def __init__(self, arguments):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._run_extraction": {"var": {"idx": {"?": [[212, "            for idx, extract_media in enumerate(status_bar):"]]}, "ph_desc": {"{Extractor -> str | str}": [[204, "            ph_desc = \"Extraction\" if self._extractor.passes == 1 else self._extractor.phase_text"]]}, "saver": {"ImagesSaver": [[194, "        saver = ImagesSaver(self._output_dir, as_bytes=True)"]]}, "status_bar": {"?": [[208, "            status_bar = tqdm(self._extractor.detected_faces(),"]]}, "detected_faces": {"dict": [[201, "            detected_faces = dict()"]]}, "phase": {"int": [[197, "        for phase in range(self._extractor.passes):"]]}, "size": {"int": [[193, "        size = self._args.size if hasattr(self._args, \"size\") else 256"]]}, "desc": {"str": [[205, "            desc = \"Running pass {} of {}: {}\".format(phase + 1,"]]}}, "param": {"self": {"Extract": [[186, "    def _run_extraction(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._output": {"var": {"final_faces": {"list": [[277, "        final_faces = list()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._threaded_redirec": {"var": {"io_thread": {"MultiThread": [[137, "        io_thread = MultiThread(func, *io_args, thread_count=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._relo": {"var": {"extract_media": {"?": [[177, "            extract_media = detected_faces.pop(filename, None)"]]}}, "param": {"detected_faces": {"?": [[158, "    def _reload(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._threaded_redirector": {"var": {"func": {"?": [[136, "        func = getattr(self, \"_{}\".format(task))"]]}}, "param": {"self": {"Extract": [[124, "    def _threaded_redirector(self, task, io_args=None):"]]}, "task": {"str": [[124, "    def _threaded_redirector(self, task, io_args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._load": {"var": {"item": {"ExtractMedia": [[153, "            item = ExtractMedia(filename, image[..., :3])"]]}, "filename": {"?": [[149, "        for filename, image in self._images.load():"]]}}, "param": {"self": {"Extract": [[141, "    def _load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract.process": {"var": {"thread": {"<list>": [[117, "        for thread in self._threads:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._run_extra": {"var": {"exception": {"bool": [[195, "        exception = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._se": {"var": {"skip_list": {"[?]": [[91, "        skip_list = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._skip_num": {"param": {"self": {"Extract": [[77, "    def _skip_num(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._run_extractio": {"var": {"is_final": {"Extractor -> bool": [[200, "            is_final = self._extractor.final_pass"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._check_thread_error": {"param": {"self": {"Extract": [[231, "    def _check_thread_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._reload": {"var": {"filename": {"?": [[172, "        for filename, image in self._images.load():"]]}}, "param": {"self": {"Extract": [[158, "    def _reload(self, detected_faces):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._output_processing": {"var": {"faces_count": {"int": [[254, "        faces_count = len(extract_media.detected_faces)"]]}, "face": {"?": [[248, "        for face in extract_media.detected_faces:"]]}}, "param": {"self": {"Extract": [[236, "    def _output_processing(self, extract_media, size):"]]}, "extract_media": {"?": [[236, "    def _output_processing(self, extract_media, size):"]]}, "size": {"int": [[236, "    def _output_processing(self, extract_media, size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._r": {"var": {"load_queue": {"Extractor -> None": [[171, "        load_queue = self._extractor.input_queue"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._save_interva": {"param": {"self": {"Extract": [[69, "    def _save_interval(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.e": {"class": {"Extract": {"<Extract>": [[20, "class Extract():  # pylint:disable=too-few-public-methods"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extr": {"func": {"_output_faces": {"(Extract, ?, ?) -> None / (Extract, ImagesSaver, ?) -> None": [[262, "    def _output_faces(self, saver, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._output_fac": {"param": {"self": {"Extract": [[262, "    def _output_faces(self, saver, extract_media):"]]}, "saver": {"ImagesSaver": [[262, "    def _output_faces(self, saver, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.E": {"func": {"_run_extraction": {"Extract -> None": [[186, "    def _run_extraction(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract.proc": {"param": {"self": {"Extract": [[108, "    def process(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extra": {"func": {"_output_processing": {"(Extract, ?, int) -> None / (Extract, ?, ?) -> None": [[236, "    def _output_processing(self, extract_media, size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._check_thread_erro": {"var": {"thread": {"<list>": [[233, "        for thread in self._threads:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._output_faces": {"var": {"output_filename": {"str": [[280, "            output_filename = \"{}_{}{}\".format(filename, str(idx), extension)"]]}, "idx": {"?": [[279, "        for idx, face in enumerate(extract_media.detected_faces):"]]}, "filename": {"str": [[278, "        filename, extension = os.path.splitext(os.path.basename(extract_media.filename))"]]}}, "param": {"extract_media": {"?": [[262, "    def _output_faces(self, saver, extract_media):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._threaded_redirect": {"var": {"io_args": {"{None | dict | tuple}": [[135, "        io_args = tuple() if io_args is None else (io_args, )"]]}}, "param": {"io_args": {"dict": [[124, "    def _threaded_redirector(self, task, io_args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Ex": {"func": {"_check_thread_error": {"Extract -> None": [[231, "    def _check_thread_error(self):"]]}, "_threaded_redirector": {"(Extract, str, None) -> None / (Extract, ?, None) -> None / (Extract, str, dict) -> None": [[124, "    def _threaded_redirector(self, task, io_args=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract": {"var": {"load_queue": {"Extractor -> None": [[148, "        load_queue = self._extractor.input_queue"]]}}, "func": {"process": {"Extract -> None": [[108, "    def process(self):"]]}, "_reload": {"(Extract, ?) -> None": [[158, "    def _reload(self, detected_faces):"]]}, "_load": {"Extract -> None": [[141, "    def _load(self):"]]}, "_skip_num": {"Extract -> int": [[77, "    def _skip_num(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.faceswap.scripts.extract.Extract._set_skip_list": {"var": {"idx": {"?": [[92, "        for idx, filename in enumerate(self._images.file_list):"]]}}, "param": {"self": {"Extract": [[81, "    def _set_skip_list(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/faceswap/plugins/extract/mask/unet_dfl_defaults.py": {".home.xxm.Desktop.EMSE.dataset.faceswap.plugins.extract.mask.unet_dfl_defaults": {"var": {"_HELPTEXT": {"str": [[46, "_HELPTEXT = ("]]}, "_DEFAULTS": {"dict": [[53, "_DEFAULTS = {"]]}}}}}