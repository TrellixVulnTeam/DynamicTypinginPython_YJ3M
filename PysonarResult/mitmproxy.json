{"/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/window.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.keypress": {"var": {"k": {"?": [[310, "        k = super().keypress(size, k)"]]}}, "param": {"k": {"str": [[309, "    def keypress(self, size, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.flow_chang": {"param": {"sender": {"?": [[200, "    def flow_changed(self, sender, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget.__init__": {"var": {"header": {"None": [[29, "            header = None"]], "?": [[24, "            header = urwid.AttrWrap("]]}}, "param": {"widget": {"None": [[19, "    def __init__(self, window, widget, title, focus):"]]}, "self": {"StackWidget": [[19, "    def __init__(self, window, widget, title, focus):"]]}, "focus": {"bool": [[19, "    def __init__(self, window, widget, title, focus):"]]}, "window": {"Window": [[19, "    def __init__(self, window, widget, title, focus):"]]}, "title": {"None": [[19, "    def __init__(self, window, widget, title, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.top_window": {"param": {"self": {"WindowStack": [[81, "    def top_window(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Windo": {"func": {"switch": {"Window -> None": [[282, "    def switch(self):"]]}, "view_changed": {"Window -> None": [[213, "    def view_changed(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.__init__": {"param": {"self": {"Window": [[126, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[126, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.configure": {"param": {"otions": {"?": [[157, "    def configure(self, otions, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.pop": {"param": {"self": {"Window": [[236, "    def pop(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.current_window": {"var": {"s": {"?": [[274, "        for s in self.stacks_sorted_by_focus():"]]}, "t": {"?": [[275, "            t = s.top_window()"]]}}, "param": {"self": {"Window": [[268, "    def current_window(self, keyctx):"]]}, "keyctx": {"?": [[268, "    def current_window(self, keyctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.configur": {"param": {"self": {"Window": [[157, "    def configure(self, otions, updated):"]]}, "updated": {"?": [[157, "    def configure(self, otions, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidge": {"func": {"__init__": {"? -> ?": [[19, "    def __init__(self, window, widget, title, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.switch": {"param": {"self": {"Window": [[282, "    def switch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window": {"func": {"set_overlay": {"(Window, DataViewerOverlay) -> None / (Window, ?) -> None / (Window, OptionsOverlay) -> None": [[220, "    def set_overlay(self, o, **kwargs):"]]}, "configure": {"(Window, ?, ?) -> None": [[157, "    def configure(self, otions, updated):"]]}, "keypress": {"(Window, ?, ?) -> None / (Window, ?, str) -> None": [[309, "    def keypress(self, size, k):"]]}, "refresh": {"Window -> None": [[160, "    def refresh(self):"]]}, "sig_focus": {"(Window, ?, ?) -> None": [[279, "    def sig_focus(self, sender, section):"]]}, "current": {"(Window, ?) -> None": [[257, "    def current(self, keyctx):"]]}, "pop": {"Window -> None": [[236, "    def pop(self, *args, **kwargs):"]]}, "focus_changed": {"Window -> None": [[205, "    def focus_changed(self, *args, **kwargs):"]]}, "focus_stack": {"Window -> WindowStack": [[154, "    def focus_stack(self):"]]}, "mouse_event": {"Window -> None": [[292, "    def mouse_event(self, *args, **kwargs):"]]}, "push": {"(Window, ?) -> None": [[227, "    def push(self, wname):"]]}, "stacks_sorted_by_focus": {"Window -> None": [[248, "    def stacks_sorted_by_focus(self):"]]}, "__init__": {"? -> ?": [[126, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window": {"class": {"Screen": {"<Screen>": [[318, "class Screen(urwid.raw_display.Screen):"]]}, "StackWidget": {"<StackWidget>": [[18, "class StackWidget(urwid.Frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.__init__": {"param": {"self": {"WindowStack": [[52, "    def __init__(self, master, base):"]]}, "base": {"str": [[52, "    def __init__(self, master, base):"]]}, "master": {"ConsoleMaster": [[52, "    def __init__(self, master, base):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Screen.writ": {"param": {"self": {"Screen": [[320, "    def write(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidg": {"func": {"mouse_event": {"(StackWidget, ?, ?, ?, ?, ?, ?) -> None": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget.keypress": {"var": {"command": {"?": [[45, "        command = self._command_map[ret]  # awkward as they don't implement a full dict api"]]}, "ret": {"?": [[44, "        ret = super().keypress(size, key)"]]}}, "param": {"key": {"?": [[40, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Wi": {"func": {"flow_changed": {"(Window, ?, ?) -> None": [[200, "    def flow_changed(self, sender, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget.mouse_eve": {"param": {"button": {"?": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.set_overlay": {"param": {"self": {"Window": [[220, "    def set_overlay(self, o, **kwargs):"]]}, "o": {"{DataViewerOverlay | OptionsOverlay}": [[220, "    def set_overlay(self, o, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.W": {"func": {"current_window": {"(Window, ?) -> None": [[268, "    def current_window(self, keyctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.focus_changed": {"var": {"i": {"WindowStack": [[210, "        for i in self.stacks:"]]}}, "param": {"self": {"Window": [[205, "    def focus_changed(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.top_widget": {"param": {"self": {"WindowStack": [[87, "    def top_widget(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.push": {"var": {"prev": {"None": [[98, "        prev = self.top_window()"]]}}, "param": {"self": {"WindowStack": [[95, "    def push(self, wname):"]]}, "wname": {"?": [[95, "    def push(self, wname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.call": {"param": {"name": {"str": [[114, "    def call(self, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.flow_changed": {"param": {"self": {"Window": [[200, "    def flow_changed(self, sender, flow):"]]}, "flow": {"?": [[200, "    def flow_changed(self, sender, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.focus_stack": {"param": {"self": {"Window": [[154, "    def focus_stack(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.current": {"var": {"s": {"?": [[263, "        for s in self.stacks_sorted_by_focus():"]]}}, "param": {"self": {"Window": [[257, "    def current(self, keyctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.pop": {"param": {"self": {"WindowStack": [[102, "    def pop(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget.mouse_event": {"param": {"self": {"StackWidget": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "row": {"?": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "focus": {"?": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "col": {"?": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "size": {"?": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.refresh": {"var": {"c": {"?": [[164, "        c = self.master.options.console_layout"]]}, "w": {"None": [[181, "        w = None"]], "?": [[185, "            w = urwid.Pile("], [192, "            w = urwid.Columns("]], "StackWidget": [[183, "            w = wrapped(0)"]]}}, "param": {"self": {"Window": [[160, "    def refresh(self):"]]}}, "func": {"wrapped": {"? -> StackWidget / int -> StackWidget": [[168, "        def wrapped(idx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget": {"func": {"keypress": {"(StackWidget, ?, ?) -> None": [[40, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.view_changed": {"var": {"i": {"WindowStack": [[217, "        for i in self.stacks:"]]}}, "param": {"self": {"Window": [[213, "    def view_changed(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.refresh.wrapped": {"var": {"title": {"None": [[173, "                title = None"]], "?": [[171, "                title = self.stacks[idx].top_window().title"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.keypr": {"param": {"self": {"Window": [[309, "    def keypress(self, size, k):"]]}, "size": {"?": [[309, "    def keypress(self, size, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.curren": {"var": {"t": {"?": [[264, "            t = s.top_widget()"]]}}, "param": {"keyctx": {"?": [[257, "    def current(self, keyctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget.mouse_": {"param": {"event": {"?": [[35, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Screen.write": {"var": {"data": {"?": [[324, "            data = re.sub(\"[\\x0e\\x0f]\", \"\", data)"]]}}, "param": {"data": {"?": [[320, "    def write(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Screen": {"func": {"write": {"(Screen, ?) -> None": [[320, "    def write(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.mouse_event": {"var": {"k": {"?": [[294, "        k = super().mouse_event(*args, **kwargs)"]]}}, "param": {"self": {"Window": [[292, "    def mouse_event(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.stacks_sorted_by_focu": {"var": {"stacks": {"?": [[253, "        stacks = self.stacks.copy()"]]}}, "param": {"self": {"Window": [[248, "    def stacks_sorted_by_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.ca": {"param": {"self": {"WindowStack": [[114, "    def call(self, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack": {"func": {"set_overlay": {"(WindowStack, DataViewerOverlay) -> None / (WindowStack, ?) -> None / (WindowStack, OptionsOverlay) -> None": [[76, "    def set_overlay(self, o, **kwargs):"]]}, "pop": {"WindowStack -> None": [[102, "    def pop(self, *args, **kwargs):"]]}, "call": {"(WindowStack, ?) -> None / (WindowStack, str) -> None": [[114, "    def call(self, name, *args, **kwargs):"]]}, "push": {"(WindowStack, ?) -> None": [[95, "    def push(self, wname):"]]}, "top_widget": {"WindowStack -> None": [[87, "    def top_widget(self):"]]}, "top_window": {"WindowStack -> None": [[81, "    def top_window(self):"]]}, "__init__": {"? -> ?": [[52, "    def __init__(self, master, base):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.WindowStack.set_overlay": {"param": {"self": {"WindowStack": [[76, "    def set_overlay(self, o, **kwargs):"]]}, "o": {"{DataViewerOverlay | OptionsOverlay}": [[76, "    def set_overlay(self, o, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.sig_focu": {"param": {"self": {"Window": [[279, "    def sig_focus(self, sender, section):"]]}, "sender": {"?": [[279, "    def sig_focus(self, sender, section):"]]}, "section": {"?": [[279, "    def sig_focus(self, sender, section):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.refresh.wrapp": {"var": {"widget": {"None": [[169, "            widget = self.stacks[idx].top_widget()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.refresh.wrappe": {"param": {"idx": {"int": [[168, "        def wrapped(idx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.StackWidget.keypr": {"param": {"self": {"StackWidget": [[40, "    def keypress(self, size, key):"]]}, "size": {"?": [[40, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.window.Window.push": {"param": {"self": {"Window": [[227, "    def push(self, wname):"]]}, "wname": {"?": [[227, "    def push(self, wname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console": {"class": {"Window": {"<Window>": [[125, "class Window(urwid.Frame):"]]}, "WindowStack": {"<WindowStack>": [[51, "class WindowStack:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_css.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_css.test_beautify": {"var": {"expected": {"str": [[24, "        expected = f.read()"]]}, "path": {"?": [[20, "    path = tdata.path(\"mitmproxy/contentviews/test_css_data/\" + filename)"]]}, "formatted": {"str": [[25, "    formatted = css.beautify(input)"]]}, "input": {"str": [[22, "        input = f.read()"]]}}, "param": {"tdata": {"?": [[19, "def test_beautify(filename, tdata):"]]}, "filename": {"?": [[19, "def test_beautify(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_css.test_simple": {"var": {"v": {"?": [[30, "    v = full_eval(css.ViewCSS())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_c": {"func": {"test_simple": {"() -> None": [[29, "def test_simple():"]]}, "test_beautify": {"(?, ?) -> None": [[19, "def test_beautify(filename, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/test_tcp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestE": {"func": {"test_echo": {"TestEcho -> None": [[143, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBind.handler.handl": {"var": {"peername": {"?": [[104, "            peername = self.connection.getpeername()"]]}, "address": {"?": [[105, "            address = re.sub(r\"^::ffff:(?=\\d+.\\d+.\\d+.\\d+$)\", \"\", peername[0])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertC": {"func": {"test_mode_strict_w_confdir_should_pass": {"(TestSSLUpstreamCertVerificationWValidCertChain, ?) -> None": [[341, "    def test_mode_strict_w_confdir_should_pass(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadHostname.test_mode_none_should_pass_without_sni": {"var": {"c": {"TCPClient": [[296, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[295, "    def test_mode_none_should_pass_without_sni(self, tdata):"]]}, "self": {"TestSSLUpstreamCertVerificationWBadHostname": [[295, "    def test_mode_none_should_pass_without_sni(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerSSL.test_get_current_ciph": {"var": {"ret": {"(?, ?, ?)": [[195, "            ret = c.get_current_cipher()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestPeek.test_peek": {"var": {"c": {"TCPClient": [[793, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain.test_mode_strict_w_confdir_should_pa": {"param": {"self": {"TestSSLUpstreamCertVerificationWValidCertChain": [[341, "    def test_mode_strict_w_confdir_should_pass(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI.handler": {"var": {"sni": {"None": [[392, "        sni = None"]]}}, "func": {"handle_sni": {"(handler, ?) -> None": [[394, "        def handle_sni(self, connection):"]]}, "handle": {"handler -> None": [[397, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChai": {"var": {"handler": {"<EchoHandler>": [[318, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestInvalidTrustFile.test_invalid_trust_file_should_fai": {"param": {"self": {"TestInvalidTrustFile": [[215, "    def test_invalid_trust_file_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServ": {"var": {"handler": {"<EchoHandler>": [[77, "    handler = EchoHandler"]]}}, "func": {"test_thread_start_error": {"TestServer -> None": [[87, "    def test_thread_start_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.EchoHandler": {"var": {"sni": {"None": [[25, "    sni = None"]]}}, "func": {"handle_sni": {"(EchoHandler, ?) -> None": [[27, "    def handle_sni(self, connection):"]]}, "handle": {"EchoHandler -> None": [[30, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServer": {"func": {"test_echo": {"TestServer -> None": [[79, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_strict_should_fai": {"param": {"self": {"TestSSLUpstreamCertVerificationWBadServerCert": [[261, "    def test_mode_strict_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBi": {"class": {"handler": {"<handler>": [[99, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert": {"var": {"ssl": {"dict": [[370, "    ssl = dict("]]}}, "class": {"handler": {"<handler>": [[360, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tc": {"class": {"ClientCipherListHandler": {"<ClientCipherListHandler>": [[36, "class ClientCipherListHandler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadH": {"func": {"test_mode_none_should_pass_without_sni": {"(TestSSLUpstreamCertVerificationWBadHostname, ?) -> None": [[295, "    def test_mode_none_should_pass_without_sni(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestEcho": {"var": {"handler": {"<EchoHandler>": [[141, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerSSL.test_echo": {"var": {"c": {"TCPClient": [[182, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "testval": {"str": [[185, "            testval = b\"echo!\\n\""]]}}, "param": {"self": {"TestServerSSL": [[181, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.handler": {"var": {"sni": {"None": [[361, "        sni = None"]]}}, "func": {"handle_sni": {"(handler, ?) -> None": [[363, "        def handle_sni(self, connection):"]]}, "handle": {"handler -> None": [[366, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.ALPNHandler.hand": {"param": {"self": {"ALPNHandler": [[67, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_none_should_p": {"var": {"testval": {"str": [[256, "            testval = b\"echo!\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_": {"class": {"TestSSLUpstreamCertVerificationWBadServerCert": {"<TestSSLUpstreamCertVerificationWBadServerCert>": [[226, "class TestSSLUpstreamCertVerificationWBadServerCert(tservers.ServerTestBase):"]]}, "TestSSLUpstreamCertVerificationWBadHostname": {"<TestSSLUpstreamCertVerificationWBadHostname>": [[278, "class TestSSLUpstreamCertVerificationWBadHostname(tservers.ServerTestBase):"]]}, "TestSSLUpstreamCertVerificationWValidCertChain": {"<TestSSLUpstreamCertVerificationWValidCertChain>": [[317, "class TestSSLUpstreamCertVerificationWValidCertChain(tservers.ServerTestBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI": {"var": {"ssl": {"?": [[401, "    ssl = True"]]}}, "class": {"handler": {"<handler>": [[391, "    class handler(tcp.BaseHandler):"]]}}, "func": {"test_echo": {"TestSNI -> None": [[403, "    def test_echo(self):"]]}, "test_idn": {"TestSNI -> None": [[410, "    def test_idn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestPeekSSL._connect": {"var": {"c": {"?": [[811, "        with c.connect() as conn:"]]}}, "param": {"self": {"TestPeekSSL": [[810, "    def _connect(self, c):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain": {"var": {"ssl": {"dict": [[320, "    ssl = dict("]]}}, "func": {"test_mode_strict_w_pemfile_should_pass": {"(TestSSLUpstreamCertVerificationWValidCertChain, ?) -> None": [[325, "    def test_mode_strict_w_pemfile_should_pass(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp": {"var": {"cdata": {"Data": [[21, "cdata = data.Data(__name__)"]]}}, "class": {"TestSSLv3Only": {"<TestSSLv3Only>": [[200, "class TestSSLv3Only(tservers.ServerTestBase):"]]}, "HardDisconnectHandler": {"<HardDisconnectHandler>": [[152, "class HardDisconnectHandler(tcp.BaseHandler):"]]}, "TestInvalidTrustFile": {"<TestInvalidTrustFile>": [[214, "class TestInvalidTrustFile(tservers.ServerTestBase):"]]}, "ALPNHandler": {"<ALPNHandler>": [[64, "class ALPNHandler(tcp.BaseHandler):"]]}, "TestServer": {"<TestServer>": [[76, "class TestServer(tservers.ServerTestBase):"]]}, "TestSSLClientCert": {"<TestSSLClientCert>": [[358, "class TestSSLClientCert(tservers.ServerTestBase):"]]}, "TestFinishFail": {"<TestFinishFail>": [[158, "class TestFinishFail(tservers.ServerTestBase):"]]}, "TestServerSSL": {"<TestServerSSL>": [[174, "class TestServerSSL(tservers.ServerTestBase):"]]}, "TestEcho": {"<TestEcho>": [[140, "class TestEcho(tservers.ServerTestBase):"]]}, "TestServerIPv6": {"<TestServerIPv6>": [[127, "class TestServerIPv6(tservers.ServerTestBase):"]]}, "EchoHandler": {"<EchoHandler>": [[24, "class EchoHandler(tcp.BaseHandler):"]]}, "HangHandler": {"<HangHandler>": [[44, "class HangHandler(tcp.BaseHandler):"]]}, "TestServerBind": {"<TestServerBind>": [[97, "class TestServerBind(tservers.ServerTestBase):"]]}, "TestSNI": {"<TestSNI>": [[389, "class TestSNI(tservers.ServerTestBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerIPv6": {"var": {"handler": {"<EchoHandler>": [[128, "    handler = EchoHandler"]]}, "addr": {"(str, int)": [[129, "    addr = (\"::1\", 0)"]]}}, "func": {"test_echo": {"TestServerIPv6 -> None": [[131, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain.test_mode_strict_w_pemfile_should_pa": {"param": {"self": {"TestSSLUpstreamCertVerificationWValidCertChain": [[325, "    def test_mode_strict_w_pemfile_should_pass(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.test_clientcer": {"param": {"tdata": {"?": [[375, "    def test_clientcert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.ALPNHandler": {"var": {"sni": {"None": [[65, "    sni = None"]]}}, "func": {"handle": {"ALPNHandler -> None": [[67, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerIPv6.test_echo": {"var": {"c": {"TCPClient": [[133, "        c = tcp.TCPClient((\"::1\", self.port))"]]}, "testval": {"str": [[132, "        testval = b\"echo!\\n\""]]}}, "param": {"self": {"TestServerIPv6": [[131, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestInvalidTrustF": {"func": {"test_invalid_trust_file_should_fail": {"(TestInvalidTrustFile, ?) -> None": [[215, "    def test_invalid_trust_file_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain.test_mode_strict_w_pemfile_should_p": {"var": {"testval": {"str": [[336, "            testval = b\"echo!\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.ClientCipherListHandler.hand": {"param": {"self": {"ClientCipherListHandler": [[39, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerCurrentCipher.test_echo": {"var": {"c": {"TCPClient": [[451, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBind.handler.handle": {"var": {"port": {"?": [[106, "            port = peername[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_default_should_pass": {"var": {"c": {"TCPClient": [[235, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLv3Only.test_failure": {"var": {"c": {"TCPClient": [[208, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestFileLike.test_blocksize": {"var": {"d": {"str": [[663, "        d = s.read(-1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI.test_echo": {"var": {"c": {"TCPClient": [[404, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestSNI": [[403, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientC": {"func": {"test_clientcert_err": {"(TestSSLClientCert, ?) -> None": [[382, "    def test_clientcert_err(self, tdata):"]]}, "test_clientcert": {"(TestSSLClientCert, ?) -> None": [[375, "    def test_clientcert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestEcho.test_echo": {"var": {"c": {"TCPClient": [[145, "        c = tcp.TCPClient((\"localhost\", self.port))"]]}, "testval": {"str": [[144, "        testval = b\"echo!\\n\""]]}}, "param": {"self": {"TestEcho": [[143, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServer.test_thread_start_error": {"var": {"c": {"TCPClient": [[89, "            c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestServer": [[87, "    def test_thread_start_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestPeek._connect": {"var": {"c": {"TCPClient": [[789, "        return c.connect()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.handler.hand": {"param": {"self": {"handler": [[366, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.handler.handle_s": {"param": {"connection": {"?": [[363, "        def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadHostname.test_should_fail_without_sni": {"var": {"c": {"TCPClient": [[287, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[286, "    def test_should_fail_without_sni(self, tdata):"]]}, "self": {"TestSSLUpstreamCertVerificationWBadHostname": [[286, "    def test_should_fail_without_sni(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestFinishFail": {"func": {"test_disconnect_in_finish": {"TestFinishFail -> None": [[166, "    def test_disconnect_in_finish(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.EchoHandler.hand": {"param": {"self": {"EchoHandler": [[30, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_none_should_pass": {"var": {"c": {"TCPClient": [[249, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain.test_mode_strict_w_confdir_should_pass": {"var": {"c": {"TCPClient": [[342, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[341, "    def test_mode_strict_w_confdir_should_pass(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain.test_mode_strict_w_pemfile_should_pass": {"var": {"c": {"TCPClient": [[326, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[325, "    def test_mode_strict_w_pemfile_should_pass(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerSSL.test_get_current_cipher": {"var": {"c": {"TCPClient": [[191, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestServerSSL": [[190, "    def test_get_current_cipher(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerCipherList.test_echo": {"var": {"c": {"TCPClient": [[428, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_strict_should_fail": {"var": {"c": {"TCPClient": [[262, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[261, "    def test_mode_strict_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLv3Only.test_failur": {"param": {"self": {"TestSSLv3Only": [[207, "    def test_failure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_default_should_pa": {"param": {"self": {"TestSSLUpstreamCertVerificationWBadServerCert": [[234, "    def test_mode_default_should_pass(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestFinishFail.test_disconnect_in_finish": {"var": {"c": {"TCPClient": [[167, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestFinishFail": [[166, "    def test_disconnect_in_finish(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.ALPNHandler.handle": {"var": {"alp": {"str": [[68, "        alp = self.get_alpn_proto_negotiated()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestInvalidTrustFile.test_invalid_trust_file_should_fail": {"var": {"c": {"TCPClient": [[216, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[215, "    def test_invalid_trust_file_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestALPNClient.test_alpn": {"var": {"c": {"TCPClient": [[574, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestALPNClient": [[573, "    def test_alpn(self, monkeypatch, alpn_protos, expected_negotiated, expected_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_none_should_pa": {"param": {"self": {"TestSSLUpstreamCertVerificationWBadServerCert": [[248, "    def test_mode_none_should_pass(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBind.test_bi": {"var": {"random_port": {"?": [[114, "            random_port = random.randrange(1024, 65535)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.handler.handle_sni": {"param": {"self": {"handler": [[363, "        def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadHostname.test_should_fai": {"param": {"self": {"TestSSLUpstreamCertVerificationWBadHostname": [[305, "    def test_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCer": {"func": {"test_mode_none_should_pass": {"TestSSLUpstreamCertVerificationWBadServerCert -> None": [[248, "    def test_mode_none_should_pass(self):"]]}, "test_mode_default_should_pass": {"TestSSLUpstreamCertVerificationWBadServerCert -> None": [[234, "    def test_mode_default_should_pass(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.EchoHandler.handle_s": {"param": {"connection": {"?": [[27, "    def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBind.test_bind": {"var": {"i": {"int": [[113, "        for i in range(20):"]]}, "c": {"TCPClient": [[116, "                c = tcp.TCPClient("]]}}, "param": {"self": {"TestServerBind": [[111, "    def test_bind(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert.test_mode_default_should_p": {"var": {"testval": {"str": [[243, "            testval = b\"echo!\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerCert": {"var": {"ssl": {"dict": [[229, "    ssl = dict("]]}, "handler": {"<EchoHandler>": [[227, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBind.handler.hand": {"param": {"self": {"handler": [[101, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerBind.handler": {"func": {"handle": {"handler -> None": [[101, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerSSL": {"var": {"ssl": {"dict": [[176, "    ssl = dict("]]}, "handler": {"<EchoHandler>": [[175, "    handler = EchoHandler"]]}}, "func": {"test_echo": {"TestServerSSL -> None": [[181, "    def test_echo(self):"]]}, "test_get_current_cipher": {"TestServerSSL -> None": [[190, "    def test_get_current_cipher(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.HangHandler.handl": {"var": {"ret": {"?": [[51, "                ret = self.connection.recv(1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadHostname.test_should_fail": {"var": {"c": {"TCPClient": [[306, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[305, "    def test_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.EchoHandler.handle": {"var": {"v": {"?": [[31, "        v = self.rfile.readline()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.test_clientcert": {"var": {"c": {"TCPClient": [[376, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestSSLClientCert": [[375, "    def test_clientcert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.EchoHandler.handle_sni": {"param": {"self": {"EchoHandler": [[27, "    def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestALPNClient.test_al": {"param": {"expected_negotiated": {"?": [[573, "    def test_alpn(self, monkeypatch, alpn_protos, expected_negotiated, expected_response):"]]}, "expected_response": {"?": [[573, "    def test_alpn(self, monkeypatch, alpn_protos, expected_negotiated, expected_response):"]]}, "monkeypatch": {"?": [[573, "    def test_alpn(self, monkeypatch, alpn_protos, expected_negotiated, expected_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLClientCert.test_clientcert_err": {"var": {"c": {"TCPClient": [[383, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[382, "    def test_clientcert_err(self, tdata):"]]}, "self": {"TestSSLClientCert": [[382, "    def test_clientcert_err(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWValidCertChain.test_mode_strict_w_confdir_should_p": {"var": {"testval": {"str": [[352, "            testval = b\"echo!\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestDHParams.test_dhparams": {"var": {"ret": {"(?, ?, ?)": [[617, "            ret = c.get_current_cipher()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestFinishFai": {"var": {"handler": {"<EchoHandler>": [[164, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadHostname": {"var": {"ssl": {"dict": [[281, "    ssl = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.HardDisconnectHandler.hand": {"param": {"self": {"HardDisconnectHandler": [[154, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI.test_idn": {"var": {"c": {"TCPClient": [[411, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}}, "param": {"self": {"TestSNI": [[410, "    def test_idn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadHostnam": {"var": {"handler": {"<EchoHandler>": [[279, "    handler = EchoHandler"]]}}, "func": {"test_should_fail_without_sni": {"(TestSSLUpstreamCertVerificationWBadHostname, ?) -> None": [[286, "    def test_should_fail_without_sni(self, tdata):"]]}, "test_should_fail": {"(TestSSLUpstreamCertVerificationWBadHostname, ?) -> None": [[305, "    def test_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI.handler.handle_sni": {"param": {"self": {"handler": [[394, "        def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI.handler.hand": {"param": {"self": {"handler": [[397, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSNI.handler.handle_s": {"param": {"connection": {"?": [[394, "        def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.ClientCipherListHandler": {"var": {"sni": {"None": [[37, "    sni = None"]]}}, "func": {"handle": {"ClientCipherListHandler -> None": [[39, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLUpstreamCertVerificationWBadServerC": {"func": {"test_mode_strict_should_fail": {"(TestSSLUpstreamCertVerificationWBadServerCert, ?) -> None": [[261, "    def test_mode_strict_should_fail(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.HangHandler.hand": {"param": {"self": {"HangHandler": [[46, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.HangHandler": {"func": {"handle": {"HangHandler -> ?": [[46, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestSSLv3Only": {"var": {"ssl": {"dict": [[202, "    ssl = dict("]]}, "handler": {"<EchoHandler>": [[201, "    handler = EchoHandler"]]}}, "func": {"test_failure": {"TestSSLv3Only -> None": [[207, "    def test_failure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServer.test_echo": {"var": {"c": {"TCPClient": [[81, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "testval": {"str": [[80, "        testval = b\"echo!\\n\""]]}}, "param": {"self": {"TestServer": [[79, "    def test_echo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.HardDisconnectHandler": {"func": {"handle": {"HardDisconnectHandler -> None": [[154, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestALPNClient.te": {"param": {"alpn_protos": {"?": [[573, "    def test_alpn(self, monkeypatch, alpn_protos, expected_negotiated, expected_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tcp.TestServerB": {"func": {"test_bind": {"TestServerBind -> ?": [[111, "    def test_bind(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy": {"var": {"__all__": {"[str]": [[5, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/test_urlindex.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_loa": {"param": {"tmpdir": {"?": [[49, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_save": {"var": {"url": {"None": [[143, "        url = f\"{f.request.scheme}://{f.request.host}:{f.request.port}\""]]}, "f": {"?": [[142, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"tmpdir": {"?": [[139, "    def test_save(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_format": {"param": {"self": {"TestUrlIndexAddon": [[181, "    def test_init_format(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_a": {"var": {"code": {"?": [[130, "        code = f.response.status_code"]]}, "method": {"?": [[129, "        method = f.request.method"]]}}, "param": {"tmpdir": {"?": [[124, "    def test_add(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_done": {"param": {"tmpdir": {"?": [[229, "    def test_done(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_add": {"var": {"url": {"None": [[128, "        url = f\"{f.request.scheme}://{f.request.host}:{f.request.port}\""]]}, "content": {"str": [[134, "            content = results.read()"]]}, "tmpfile": {"?": [[125, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[126, "        writer = TextUrlIndexWriter(filename=tmpfile)"]]}, "f": {"?": [[127, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestTestUrlIndexWriter": [[124, "    def test_add(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_sav": {"var": {"code": {"?": [[145, "        code = f.response.status_code"]]}, "content": {"str": [[150, "            content = results.read()"]]}, "tmpfile": {"?": [[140, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[141, "        writer = TextUrlIndexWriter(filename=tmpfile)"]]}, "method": {"?": [[144, "        method = f.request.method"]]}}, "param": {"self": {"TestTestUrlIndexWriter": [[139, "    def test_save(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestBaseClass.test_base_class": {"var": {"tmpfile": {"?": [[20, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "index_writer": {"?": [[21, "        index_writer = UrlIndexWriter(tmpfile)"]]}}, "param": {"tmpdir": {"?": [[19, "    def test_base_class(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init": {"param": {"self": {"TestUrlIndexAddon": [[177, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_u": {"class": {"TestJSONUrlIndexWriter": {"<TestJSONUrlIndexWriter>": [[47, "class TestJSONUrlIndexWriter:"]]}, "TestTestUrlIndexWriter": {"<TestTestUrlIndexWriter>": [[100, "class TestTestUrlIndexWriter:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_do": {"var": {"url_index": {"?": [[231, "        url_index = UrlIndexAddon(tmpfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_response_No": {"var": {"url_index": {"?": [[219, "        url_index = UrlIndexAddon(tmpfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_load": {"var": {"tmpfile": {"?": [[102, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[106, "        writer = TextUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestTestUrlIndexWriter": [[101, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_respons": {"var": {"tmpfile": {"?": [[210, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "url_index": {"?": [[211, "        url_index = UrlIndexAddon(tmpfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_load_nonexisting": {"var": {"tmpfile": {"?": [[119, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[120, "        writer = TextUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestTestUrlIndexWriter": [[118, "    def test_load_nonexisting(self, tmpdir):"]]}, "tmpdir": {"?": [[118, "    def test_load_nonexisting(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestSetEncoder.test_set_encoder_set": {"param": {"self": {"TestSetEncoder": [[29, "    def test_set_encoder_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter": {"func": {"test_add": {"(TestTestUrlIndexWriter, ?) -> None": [[124, "    def test_add(self, tmpdir):"]]}, "test_save": {"(TestTestUrlIndexWriter, ?) -> None": [[139, "    def test_save(self, tmpdir):"]]}, "test_load_empty": {"(TestTestUrlIndexWriter, ?) -> None": [[110, "    def test_load_empty(self, tmpdir):"]]}, "test_load": {"(TestTestUrlIndexWriter, ?) -> None": [[101, "    def test_load(self, tmpdir):"]]}, "test_load_nonexisting": {"(TestTestUrlIndexWriter, ?) -> None": [[118, "    def test_load_nonexisting(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_load_empty": {"var": {"tmpfile": {"?": [[111, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[114, "        writer = TextUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestTestUrlIndexWriter": [[110, "    def test_load_empty(self, tmpdir):"]]}, "tmpdir": {"?": [[110, "    def test_load_empty(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_a": {"param": {"tmpdir": {"?": [[75, "    def test_add(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestBaseClass.test_base_cla": {"param": {"self": {"TestBaseClass": [[19, "    def test_base_class(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_response": {"var": {"f": {"?": [[212, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"tmpdir": {"?": [[209, "    def test_response(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_add": {"var": {"url": {"None": [[79, "        url = f\"{f.request.scheme}://{f.request.host}:{f.request.port}\""]]}, "tmpfile": {"?": [[76, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[77, "        writer = JSONUrlIndexWriter(filename=tmpfile)"]]}, "f": {"?": [[78, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestJSONUrlIndexWriter": [[75, "    def test_add(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_append": {"var": {"tmpfile": {"?": [[200, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "f": {"?": [[204, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestUrlIndexAddon": [[199, "    def test_init_append(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_load": {"var": {"tmpfile": {"?": [[50, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[54, "        writer = JSONUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestJSONUrlIndexWriter": [[49, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestSetEncoder.test_set_encoder_str": {"param": {"self": {"TestSetEncoder": [[37, "    def test_set_encoder_str(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_forma": {"var": {"tmpfile": {"?": [[182, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"tmpdir": {"?": [[181, "    def test_init_format(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_appen": {"param": {"tmpdir": {"?": [[199, "    def test_init_append(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_load_nonexisting": {"var": {"tmpfile": {"?": [[70, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[71, "        writer = JSONUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestJSONUrlIndexWriter": [[69, "    def test_load_nonexisting(self, tmpdir):"]]}, "tmpdir": {"?": [[69, "    def test_load_nonexisting(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestBaseC": {"func": {"test_base_class": {"(TestBaseClass, ?) -> None": [[19, "    def test_base_class(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexA": {"func": {"test_done": {"(TestUrlIndexAddon, ?) -> None": [[229, "    def test_done(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_filte": {"param": {"tmpdir": {"?": [[190, "    def test_init_filter(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_respon": {"param": {"self": {"TestUrlIndexAddon": [[209, "    def test_response(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_save": {"var": {"url": {"None": [[88, "        url = f\"{f.request.scheme}://{f.request.host}:{f.request.port}\""]]}, "f": {"?": [[87, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"tmpdir": {"?": [[84, "    def test_save(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestFilter.test_filer_tru": {"param": {"self": {"TestFilter": [[165, "    def test_filer_true(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestF": {"func": {"test_filter_false": {"TestFilter -> None": [[169, "    def test_filter_false(self):"]]}, "test_filer_true": {"TestFilter -> None": [[165, "    def test_filer_true(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_sav": {"var": {"content": {"?": [[94, "                content = json.load(results)"]]}, "tmpfile": {"?": [[85, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[86, "        writer = JSONUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestJSONUrlIndexWriter": [[84, "    def test_save(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestSetE": {"func": {"test_set_encoder_str": {"TestSetEncoder -> ?": [[37, "    def test_set_encoder_str(self):"]]}, "test_set_encoder_set": {"TestSetEncoder -> None": [[29, "    def test_set_encoder_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_in": {"var": {"tmpfile": {"?": [[178, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"tmpdir": {"?": [[177, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAdd": {"func": {"test_init_format": {"(TestUrlIndexAddon, ?) -> ?": [[181, "    def test_init_format(self, tmpdir):"]]}, "test_response": {"(TestUrlIndexAddon, ?) -> None": [[209, "    def test_response(self, tmpdir):"]]}, "test_response_None": {"(TestUrlIndexAddon, ?) -> ?": [[217, "    def test_response_None(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urli": {"class": {"TestUrlIndexAddon": {"<TestUrlIndexAddon>": [[175, "class TestUrlIndexAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestSetEncoder.test_set_encoder_": {"var": {"result": {"?": [[31, "        result = SetEncoder.default(SetEncoder(), test_set)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex": {"class": {"TestFilter": {"<TestFilter>": [[164, "class TestFilter:"]]}, "TestSetEncoder": {"<TestSetEncoder>": [[27, "class TestSetEncoder:"]]}, "TestWriter": {"<TestWriter>": [[156, "class TestWriter:"]]}, "TestBaseClass": {"<TestBaseClass>": [[16, "class TestBaseClass:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestW": {"func": {"test_writer_dict": {"TestWriter -> None": [[157, "    def test_writer_dict(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestSetEncoder.test_set_encod": {"var": {"test_str": {"str": [[38, "        test_str = \"test\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestFilter.test_filter_fa": {"param": {"self": {"TestFilter": [[169, "    def test_filter_false(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestSetEncoder.test_set_encoder": {"var": {"test_set": {"[str]": [[30, "        test_set = {\"foo\", \"bar\", \"42\"}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestFilter.test_filer_true": {"var": {"f": {"?": [[166, "        f = tflow.tflow(resp=tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestFilter.test_filter_false": {"var": {"f": {"?": [[170, "        f = tflow.tflow(resp=tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_app": {"var": {"url_index": {"?": [[203, "        url_index = UrlIndexAddon(tmpfile, append=False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_response_None": {"var": {"f": {"?": [[221, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"tmpdir": {"?": [[217, "    def test_response_None(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_response_Non": {"var": {"tmpfile": {"?": [[218, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"self": {"TestUrlIndexAddon": [[217, "    def test_response_None(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter.test_load_empty": {"var": {"tmpfile": {"?": [[62, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "writer": {"?": [[65, "        writer = JSONUrlIndexWriter(filename=tmpfile)"]]}}, "param": {"self": {"TestJSONUrlIndexWriter": [[61, "    def test_load_empty(self, tmpdir):"]]}, "tmpdir": {"?": [[61, "    def test_load_empty(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestJSONUrlIndexWriter": {"func": {"test_add": {"(TestJSONUrlIndexWriter, ?) -> None": [[75, "    def test_add(self, tmpdir):"]]}, "test_save": {"(TestJSONUrlIndexWriter, ?) -> ?": [[84, "    def test_save(self, tmpdir):"]]}, "test_load_empty": {"(TestJSONUrlIndexWriter, ?) -> None": [[61, "    def test_load_empty(self, tmpdir):"]]}, "test_load": {"(TestJSONUrlIndexWriter, ?) -> None": [[49, "    def test_load(self, tmpdir):"]]}, "test_load_nonexisting": {"(TestJSONUrlIndexWriter, ?) -> None": [[69, "    def test_load_nonexisting(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestTestUrlIndexWriter.test_loa": {"param": {"tmpdir": {"?": [[101, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_don": {"var": {"tmpfile": {"?": [[230, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"self": {"TestUrlIndexAddon": [[229, "    def test_done(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddon.test_init_filter": {"var": {"tmpfile": {"?": [[191, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"self": {"TestUrlIndexAddon": [[190, "    def test_init_filter(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestUrlIndexAddo": {"func": {"test_init_append": {"(TestUrlIndexAddon, ?) -> None": [[199, "    def test_init_append(self, tmpdir):"]]}, "test_init": {"(TestUrlIndexAddon, ?) -> None": [[177, "    def test_init(self, tmpdir):"]]}, "test_init_filter": {"(TestUrlIndexAddon, ?) -> ?": [[190, "    def test_init_filter(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlindex.TestWriter.test_writer_dict": {"param": {"self": {"TestWriter": [[157, "    def test_writer_dict(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/helper_tools/inspect_dumpfile.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.inspect_dumpfile.read_tnetstring": {"param": {"input": {"?": [[8, "def read_tnetstring(input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.inspect_dumpfil": {"func": {"inspect": {"? -> None": [[21, "def inspect(input):"]]}, "read_tnetstring": {"? -> None": [[8, "def read_tnetstring(input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.inspect_dumpfile.inspec": {"var": {"data": {"None": [[26, "        data = read_tnetstring(input)"]]}}, "param": {"input": {"?": [[21, "def inspect(input):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_stickycookie.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response": {"var": {"sc": {"StickyCookie": [[52, "        sc = stickycookie.StickyCookie()"]]}, "c": {"str": [[56, "            c = \"SSID=mooo; domain=.google.com, FOO=bar; Domain=.google.com; Path=/; \" \\"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_simp": {"param": {"self": {"TestStickyCookie": [[27, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycook": {"func": {"test_domain_match": {"() -> None": [[10, "def test_domain_match():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_multip": {"var": {"googlekey": {"?": [[80, "            googlekey = list(sc.jar.keys())[0]"]]}}, "param": {"self": {"TestStickyCookie": [[69, "    def test_response_multiple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_weird": {"var": {"sc": {"StickyCookie": [[84, "        sc = stickycookie.StickyCookie()"]]}, "cs": {"[str]": [[90, "            cs = ["]]}, "c": {"str": [[95, "            for c in cs:"]]}, "googlekey": {"?": [[98, "            googlekey = list(sc.jar.keys())[0]"]]}, "f": {"?": [[89, "            f = tflow.tflow(req=ntutils.treq(host=\"www.google.com\", port=80), resp=True)"]]}}, "param": {"self": {"TestStickyCookie": [[83, "    def test_response_weird(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_simple": {"var": {"sc": {"StickyCookie": [[28, "        sc = stickycookie.StickyCookie()"]]}, "f": {"?": [[31, "            f = tflow.tflow(resp=True)"], [41, "            f = f.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_multiple": {"var": {"sc": {"StickyCookie": [[70, "        sc = stickycookie.StickyCookie()"]]}, "c2": {"str": [[76, "            c2 = \"othercookie=helloworld; Path=/\""]]}, "c1": {"str": [[75, "            c1 = \"somecookie=test; Path=/\""]]}, "f": {"None": [[77, "            f = self._response(sc, c1, \"www.google.com\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_overwrite": {"var": {"sc": {"StickyCookie": [[102, "        sc = stickycookie.StickyCookie()"]]}, "c2": {"str": [[108, "            c2 = \"somecookie=newvalue; Path=/\""]]}, "c1": {"str": [[107, "            c1 = \"somecookie=helloworld; Path=/\""]]}, "f": {"None": [[109, "            f = self._response(sc, c1, \"www.google.com\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie._respon": {"param": {"self": {"TestStickyCookie": [[45, "    def _response(self, sc, cookie, host):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCooki": {"func": {"test_response_delete": {"TestStickyCookie -> None": [[116, "    def test_response_delete(self):"]]}, "test_response": {"TestStickyCookie -> None": [[51, "    def test_response(self):"]]}, "_response": {"(TestStickyCookie, ?, ?, ?) -> None / (TestStickyCookie, StickyCookie, str, str) -> None": [[45, "    def _response(self, sc, cookie, host):"]]}, "test_request": {"TestStickyCookie -> None": [[128, "    def test_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_": {"class": {"TestStickyCookie": {"<TestStickyCookie>": [[15, "class TestStickyCookie:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie._response": {"var": {"f": {"?": [[46, "        f = tflow.tflow(req=ntutils.treq(host=host, port=80), resp=True)"]]}}, "param": {"sc": {"StickyCookie": [[45, "    def _response(self, sc, cookie, host):"]]}, "host": {"str": [[45, "    def _response(self, sc, cookie, host):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCook": {"func": {"test_response_overwrite": {"TestStickyCookie -> None": [[101, "    def test_response_overwrite(self):"]]}, "test_config": {"TestStickyCookie -> None": [[16, "    def test_config(self):"]]}, "test_response_weird": {"TestStickyCookie -> None": [[83, "    def test_response_weird(self):"]]}, "test_simple": {"TestStickyCookie -> None": [[27, "    def test_simple(self):"]]}, "test_response_multiple": {"TestStickyCookie -> None": [[69, "    def test_response_multiple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_config": {"var": {"sc": {"StickyCookie": [[17, "        sc = stickycookie.StickyCookie()"]]}}, "param": {"self": {"TestStickyCookie": [[16, "    def test_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_delet": {"param": {"self": {"TestStickyCookie": [[116, "    def test_response_delete(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_overwrit": {"var": {"googlekey": {"?": [[112, "            googlekey = list(sc.jar.keys())[0]"]]}}, "param": {"self": {"TestStickyCookie": [[101, "    def test_response_overwrite(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_request": {"var": {"sc": {"StickyCookie": [[129, "        sc = stickycookie.StickyCookie()"]]}, "f": {"None": [[133, "            f = self._response(sc, \"SSID=mooo\", \"www.google.com\")"]]}}, "param": {"self": {"TestStickyCookie": [[128, "    def test_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_respon": {"param": {"self": {"TestStickyCookie": [[51, "    def test_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie.test_response_delete": {"var": {"sc": {"StickyCookie": [[117, "        sc = stickycookie.StickyCookie()"]]}, "f": {"None": [[123, "            f = self._response(sc, \"duffer=zafar; Path=/\", \"www.google.com\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickycookie.TestStickyCookie._respons": {"param": {"cookie": {"str": [[45, "    def _response(self, sc, cookie, host):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/image/test_view.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_image": {"? -> None": [[5, "def test_view_image(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_view.test_view_image": {"var": {"img": {"str": [[7, "    for img in ["]]}, "v": {"?": [[6, "    v = full_eval(image.ViewImage())"]]}}, "param": {"tdata": {"?": [[5, "def test_view_image(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_view.test_view_imag": {"var": {"viewname": {"?": [[14, "            viewname, lines = v(f.read())"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/helper_tools/passive_close.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.passive_close.servic": {"func": {"handle": {"service -> None": [[7, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.passive_close.service.hand": {"param": {"self": {"service": [[7, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.passive_clos": {"class": {"ThreadedTCPServer": {"<ThreadedTCPServer>": [[19, "class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.passive_close.service.handle": {"var": {"data": {"?": [[13, "            data = self.request.recv(1024)"]], "str": [[8, "        data = 'dummy'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.passive_clo": {"var": {"server": {"ThreadedTCPServer": [[23, "server = ThreadedTCPServer(('', 1520), service)"]]}}, "class": {"service": {"<service>": [[5, "class service(socketserver.BaseRequestHandler):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/session.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.running": {"var": {"loop": {"?": [[245, "            loop = asyncio.get_event_loop()"]]}}, "param": {"self": {"Session": [[241, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.__init__": {"param": {"self": {"Session": [[215, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.KeyifyList.__init__": {"param": {"self": {"KeyifyList": [[21, "    def __init__(self, inner, key):"]]}, "inner": {"[(?, ?)]": [[21, "    def __init__(self, inner, key):"]]}, "key": {"? -> ?": [[21, "    def __init__(self, inner, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB": {"var": {"content_threshold": {"int": [[39, "    content_threshold = 1000"]]}, "type_mappings": {"dict": [[40, "    type_mappings = {"]]}}, "func": {"is_session_db": {"str -> ? / None -> ? / ? -> ?": [[95, "    def is_session_db(path):"]]}, "_load_session": {"(SessionDB, str) -> None / (SessionDB, None) -> None / (SessionDB, ?) -> None": [[83, "    def _load_session(self, path):"]]}, "__del__": {"SessionDB -> None": [[71, "    def __del__(self):"]]}, "clear": {"SessionDB -> None": [[195, "    def clear(self):"]]}, "__contains__": {"(SessionDB, ?) -> bool": [[77, "    def __contains__(self, fid):"]]}, "store_flows": {"(SessionDB, ?) -> None": [[146, "    def store_flows(self, flows):"]]}, "_disassemble": {"(SessionDB, ?) -> None": [[116, "    def _disassemble(self, flow):"]]}, "_reassemble": {"(SessionDB, ?) -> None / (SessionDB, HTTPFlow) -> HTTPFlow": [[132, "    def _reassemble(self, flow):"]]}, "__init__": {"? -> ?": [[47, "    def __init__(self, db_path=None):"]]}, "_create_session": {"SessionDB -> None": [[88, "    def _create_session(self):"]]}, "retrieve_flows": {"(SessionDB, None) -> [HTTPFlow]": [[171, "    def retrieve_flows(self, ids=None):"]]}, "__len__": {"SessionDB -> int": [[80, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Sessi": {"func": {"store_count": {"Session -> int": [[297, "    def store_count(self) -> int:"]]}, "_generate_order": {"(str, None) -> int / (str, ?) -> int / (?, ?) -> int": [[305, "    def _generate_order(o: str, f: http.HTTPFlow) -> typing.Optional[typing.Union[str, int, float]]:"]]}, "response": {"(Session, ?) -> None / (Session, None) -> None": [[375, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.load_view": {"var": {"ids": {"[?]": [[269, "        ids = [fid for _, fid in self._view]"]]}}, "param": {"self": {"Session": [[268, "    def load_view(self) -> typing.Sequence[http.HTTPFlow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB._reassemb": {"param": {"self": {"SessionDB": [[132, "    def _reassemble(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.response": {"param": {"f": {"None": [[375, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.load_storage": {"var": {"flow": {"?": [[285, "            for flow in self._hot_store.values():"], [287, "            for flow in self.db_store.retrieve_flows():"]]}, "fid": {"str": [[277, "            for fid in ids:"]]}, "flows": {"[?]": [[274, "        flows = []"]]}}, "param": {"ids": {"{[?] | [str]}": [[273, "    def load_storage(self, ids=None) -> typing.Sequence[http.HTTPFlow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB._reassemble": {"var": {"cwf": {"?": [[134, "            cwf, crf, crp, swf, srf, srp, via, rep = self.live_components[flow.id]"]]}}, "param": {"flow": {"HTTPFlow": [[132, "    def _reassemble(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.resum": {"param": {"self": {"Session": [[381, "    def resume(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.kill": {"param": {"f": {"None": [[384, "    def kill(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.store_": {"param": {"flows": {"?": [[146, "    def store_flows(self, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.KeyifyList.__getitem__": {"param": {"self": {"KeyifyList": [[28, "    def __getitem__(self, k):"]]}, "k": {"?": [[28, "    def __getitem__(self, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB._load_session": {"param": {"path": {"str": [[83, "    def _load_session(self, path):"]]}, "self": {"SessionDB": [[83, "    def _load_session(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.retrieve_flow": {"var": {"sql": {"None": [[180, "                sql = \"SELECT f.content, b.type_id, b.content \" \\"]], "str": [[175, "                sql = \"SELECT f.content, b.type_id, b.content \" \\"]]}}, "param": {"self": {"SessionDB": [[171, "    def retrieve_flows(self, ids=None):"]]}, "ids": {"None": [[171, "    def retrieve_flows(self, ids=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session": {"var": {"_FP_DEFAULT": {"float": [[213, "    _FP_DEFAULT = 3.0"]]}, "_FP_RATE": {"int": [[211, "    _FP_RATE = 150"]]}, "_FP_DECREMENT": {"float": [[212, "    _FP_DECREMENT = 0.9"]]}}, "param": {"loader": {"?": [[226, "    def load(self, loader):"]]}}, "func": {"load": {"(Session, ?) -> None": [[226, "    def load(self, loader):"]]}, "_store_order": {"(Session, None) -> None / (Session, ?) -> None": [[321, "    def _store_order(self, f: http.HTTPFlow):"]]}, "load_view": {"Session -> None": [[268, "    def load_view(self) -> typing.Sequence[http.HTTPFlow]:"]]}, "resume": {"(Session, None) -> None / (Session, ?) -> None": [[381, "    def resume(self, f):"]]}, "clear_storage": {"Session -> None": [[292, "    def clear_storage(self):"]]}, "load_storage": {"(Session, [str]) -> [?] / (Session, None) -> [?] / (Session, [?]) -> [?]": [[273, "    def load_storage(self, ids=None) -> typing.Sequence[http.HTTPFlow]:"]]}, "error": {"(Session, ?) -> None / (Session, None) -> None": [[372, "    def error(self, f):"]]}, "set_order": {"(Session, str) -> None / (Session, ?) -> None": [[326, "    def set_order(self, order: str) -> None:"]]}, "update": {"(Session, ?) -> None / (Session, [?]) -> None / (Session, [None]) -> None": [[360, "    def update(self, flows: typing.Sequence[http.HTTPFlow]) -> None:"]]}, "kill": {"(Session, None) -> None / (Session, ?) -> None": [[384, "    def kill(self, f):"]]}, "_refilter": {"Session -> None": [[338, "    def _refilter(self):"]]}, "request": {"(Session, ?) -> None / (Session, None) -> None": [[369, "    def request(self, f):"]]}, "update_view": {"(Session, None) -> None / (Session, ?) -> None": [[354, "    def update_view(self, f):"]]}, "set_filter": {"(Session, None) -> None / (Session, ?) -> None / (Session, str) -> None": [[345, "    def set_filter(self, input_filter: typing.Optional[str]) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.retrieve_": {"var": {"flows": {"[HTTPFlow]": [[172, "        flows = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.update_view": {"var": {"o": {"?": [[357, "        o = self._order_store[f.id][self.order]"]]}}, "param": {"self": {"Session": [[354, "    def update_view(self, f):"]]}, "f": {"None": [[354, "    def update_view(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.store_count": {"var": {"ln": {"int": [[298, "        ln = 0"]]}, "fid": {"?": [[299, "        for fid in self._hot_store.keys():"]]}}, "param": {"self": {"Session": [[297, "    def store_count(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.clear": {"param": {"self": {"SessionDB": [[195, "    def clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.__contains__": {"param": {"self": {"SessionDB": [[77, "    def __contains__(self, fid):"]]}, "fid": {"?": [[77, "    def __contains__(self, fid):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.set_order": {"var": {"newview": {"[(?, ?)]": [[333, "            newview = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.load_vie": {"var": {"flows": {"[?]": [[270, "        flows = self.load_storage(ids)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.__len__": {"param": {"self": {"SessionDB": [[80, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.set_filter": {"var": {"filt": {"None": [[346, "        filt = matchall if not input_filter else flowfilter.parse(input_filter)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session._generate_order": {"var": {"s": {"int": [[313, "            s = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.respon": {"param": {"self": {"Session": [[375, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Sessio": {"func": {"running": {"Session -> None": [[241, "    def running(self):"]]}, "intercept": {"(Session, None) -> None / (Session, ?) -> None": [[378, "    def intercept(self, f):"]]}, "__init__": {"? -> ?": [[215, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.retrieve_flows": {"var": {"typ": {"str": [[188, "                    typ = self.type_mappings[\"body\"][row[1]]"]]}, "flow": {"HTTPFlow": [[186, "                flow = protobuf.loads(row[0])"], [191, "                flow = self._reassemble(flow)"]]}, "row": {"?": [[185, "            for row in rows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.retrieve_fl": {"var": {"rows": {"?": [[178, "                rows = con.execute(sql).fetchall()"], [184, "                rows = con.execute(sql, ids).fetchall()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.__init__": {"var": {"path": {"str": [[64, "                path = db_path"], [67, "                path = os.path.join(self.tempdir, 'tmp.sqlite')"]]}}, "param": {"self": {"SessionDB": [[47, "    def __init__(self, db_path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.load_storag": {"var": {"ids_from_store": {"{[?] | [str]}": [[275, "        ids_from_store = []"]]}}, "param": {"self": {"Session": [[273, "    def load_storage(self, ids=None) -> typing.Sequence[http.HTTPFlow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB._disassemble": {"param": {"flow": {"?": [[116, "    def _disassemble(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.KeyifyList.__len__": {"param": {"self": {"KeyifyList": [[25, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.intercept": {"param": {"self": {"Session": [[378, "    def intercept(self, f):"]]}, "f": {"None": [[378, "    def intercept(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session._writer": {"var": {"batches": {"int": [[257, "            batches = -(-len(self._hot_store) // self._flush_rate)"]]}, "tof": {"[?]": [[260, "                tof = []"]]}, "_": {"int": [[262, "                for _ in range(to_dump):"]]}, "to_dump": {"int": [[261, "                to_dump = min(len(self._hot_store), self._flush_rate)"]]}}, "param": {"self": {"Session": [[254, "    async def _writer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB._disassemb": {"param": {"self": {"SessionDB": [[116, "    def _disassemble(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.KeyifyList": {"func": {"__len__": {"KeyifyList -> int": [[25, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.store_flows": {"var": {"body_buf": {"[(?, int, ?)]": [[147, "        body_buf = []"]]}, "flow": {"?": [[149, "        for flow in flows:"]]}, "flow_buf": {"[(?, None)]": [[148, "        flow_buf = []"]]}, "f": {"?": [[152, "            f = copy.copy(flow)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB._create_session": {"var": {"script_path": {"None": [[89, "        script_path = pkg_data.path(\"io/sql/session_create.sql\")"]]}}, "param": {"self": {"SessionDB": [[88, "    def _create_session(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.ki": {"param": {"self": {"Session": [[384, "    def kill(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.resume": {"param": {"f": {"None": [[381, "    def resume(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session._store_": {"var": {"order": {"str": [[323, "        for order in orders:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.request": {"param": {"self": {"Session": [[369, "    def request(self, f):"]]}, "f": {"None": [[369, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.configur": {"param": {"self": {"Session": [[248, "    def configure(self, updated):"]]}, "updated": {"[str]": [[248, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.__del__": {"param": {"self": {"SessionDB": [[71, "    def __del__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session": {"var": {"matchall": {"None": [[199, "matchall = flowfilter.parse(\".\")"]]}, "orders": {"[str]": [[201, "orders = ["]]}}, "class": {"KeyifyList": {"<KeyifyList>": [[20, "class KeyifyList(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.__ini": {"param": {"db_path": {"str": [[47, "    def __init__(self, db_path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.update": {"var": {"f": {"None": [[361, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.load": {"param": {"self": {"Session": [[226, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.is_session_d": {"var": {"tables": {"[str]": [[107, "            tables = [('flow',), ('body',), ('annotation',)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.is_session_db": {"var": {"cursor": {"?": [[104, "            cursor = c.cursor()"]]}, "c": {"None": [[101, "        c = None"]], "?": [[103, "            c = sqlite3.connect(f'file:{path}?mode=rw', uri=True)"]]}, "rows": {"?": [[106, "            rows = cursor.fetchall()"]]}}, "param": {"path": {"str": [[95, "    def is_session_db(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Sess": {"func": {"configure": {"(Session, ?) -> None / (Session, [str]) -> None": [[248, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.KeyifyLis": {"func": {"__getitem__": {"(KeyifyList, ?) -> ?": [[28, "    def __getitem__(self, k):"]]}, "__init__": {"? -> ?": [[21, "    def __init__(self, inner, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.SessionDB.store_flow": {"param": {"self": {"SessionDB": [[146, "    def store_flows(self, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session._refilter": {"var": {"flows": {"[?]": [[340, "        flows = self.load_storage()"]]}, "f": {"?": [[341, "        for f in flows:"]]}}, "param": {"self": {"Session": [[338, "    def _refilter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.add": {"class": {"SessionDB": {"<SessionDB>": [[33, "class SessionDB:"]]}, "Session": {"<Session>": [[209, "class Session:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.error": {"param": {"self": {"Session": [[372, "    def error(self, f):"]]}, "f": {"None": [[372, "    def error(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.session.Session.clear_storag": {"param": {"self": {"Session": [[292, "    def clear_storage(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_command_history.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_clear": {"var": {"saved_commands": {"None": [[126, "            saved_commands = ch.get_history()"]]}, "ch": {"CommandHistory": [[118, "        ch = command_history.CommandHistory()"]]}}, "param": {"self": {"TestCommandHistory": [[117, "    def test_clear(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_get_next_and_prev": {"var": {"ch": {"CommandHistory": [[37, "        ch = command_history.CommandHistory()"]]}}, "param": {"self": {"TestCommandHistory": [[36, "    def test_get_next_and_prev(self, tmpdir):"]]}, "tmpdir": {"?": [[36, "    def test_get_next_and_prev(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory": {"func": {"test_add_command": {"TestCommandHistory -> None": [[25, "    def test_add_command(self):"]]}, "test_clear": {"(TestCommandHistory, ?) -> None": [[117, "    def test_clear(self, tmpdir):"]]}, "test_filter": {"(TestCommandHistory, ?) -> None": [[136, "    def test_filter(self, tmpdir):"]]}, "test_multiple_instances": {"(TestCommandHistory, ?) -> None": [[171, "    def test_multiple_instances(self, tmpdir):"]]}, "test_get_next_and_prev": {"(TestCommandHistory, ?) -> None": [[36, "    def test_get_next_and_prev(self, tmpdir):"]]}, "test_load_and_save": {"(TestCommandHistory, ?) -> None": [[8, "    def test_load_and_save(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_filte": {"param": {"tmpdir": {"?": [[136, "    def test_filter(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_filter": {"var": {"ch": {"CommandHistory": [[137, "        ch = command_history.CommandHistory()"]]}}, "param": {"self": {"TestCommandHistory": [[136, "    def test_filter(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_clea": {"param": {"tmpdir": {"?": [[117, "    def test_clear(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_multiple_inst": {"var": {"saved_commands": {"None": [[184, "            saved_commands = i.get_history()"], [188, "        saved_commands = instances[0].get_history()"], [195, "        saved_commands = instances[1].get_history()"], [197, "        saved_commands = instances[2].get_history()"], [204, "        saved_commands = instances[1].get_history()"], [207, "        saved_commands = instances[0].get_history()"], [211, "        saved_commands = instances[2].get_history()"], [215, "        saved_commands = instances[2].get_history()"], [219, "        saved_commands = instances[0].get_history()"], [224, "        saved_commands = instances[3].get_history()"], [230, "        saved_commands = instances[0].get_history()"], [234, "        saved_commands = instances[0].get_history()"], [254, "            saved_commands = i.get_history()"], [263, "        saved_commands = instances[1].get_history()"]], "[str]": [[243, "        saved_commands = [cmd.strip() for cmd in lines]"], [271, "        saved_commands = [cmd.strip() for cmd in lines]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_multiple_instanc": {"var": {"lines": {"[str]": [[242, "        lines = open(_path, 'r').readlines()"], [270, "        lines = open(_path, 'r').readlines()"]]}}, "param": {"self": {"TestCommandHistory": [[171, "    def test_multiple_instances(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_multiple_instances": {"var": {"i": {"CommandHistory": [[182, "        for i in instances:"], [251, "        for i in instances:"]]}, "ch": {"CommandHistory": [[172, "        ch = command_history.CommandHistory()"]]}, "_path": {"str": [[241, "        _path = os.path.join(tctx.options.confdir, 'command_history')"], [269, "        _path = os.path.join(tctx.options.confdir, 'command_history')"]]}}, "param": {"tmpdir": {"?": [[171, "    def test_multiple_instances(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_load_and_save": {"var": {"commands": {"[str]": [[10, "        commands = [\"cmd1\", \"cmd2\", \"cmd3\"]"]]}, "ch": {"CommandHistory": [[14, "        ch = command_history.CommandHistory()"]]}}, "param": {"tmpdir": {"?": [[8, "    def test_load_and_save(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_h": {"class": {"TestCommandHistory": {"<TestCommandHistory>": [[7, "class TestCommandHistory:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_multiple_": {"var": {"instances": {"[CommandHistory]": [[176, "        instances = ["], [246, "        instances = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_add_command": {"var": {"history": {"CommandHistory": [[26, "        history = command_history.CommandHistory()"]]}}, "param": {"self": {"TestCommandHistory": [[25, "    def test_add_command(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_command_history.TestCommandHistory.test_load_and_sav": {"var": {"history_file": {"?": [[9, "        history_file = tmpdir.join('command_history')"]]}}, "param": {"self": {"TestCommandHistory": [[8, "    def test_load_and_save(self, tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/stickycookie.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.load": {"param": {"self": {"StickyCookie": [[37, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.reques": {"var": {"match": {"[{None | bool}]": [[80, "                    match = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.respons": {"var": {"name": {"?": [[58, "            for name, (value, attrs) in flow.response.cookies.items(multi=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.configure": {"var": {"flt": {"None": [[46, "                flt = flowfilter.parse(ctx.options.stickycookie)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.response": {"var": {"dom_port_path": {"(?, ?, str)": [[61, "                dom_port_path = ckey(attrs, flow)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCook": {"func": {"configure": {"(StickyCookie, ?) -> None": [[43, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.__init__": {"param": {"self": {"StickyCookie": [[33, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.ckey": {"var": {"path": {"?": [[20, "        path = attrs[\"path\"]"]], "str": [[16, "    path = \"/\""]]}, "domain": {"?": [[15, "    domain = f.request.host"], [18, "        domain = attrs[\"domain\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie.configur": {"param": {"self": {"StickyCookie": [[43, "    def configure(self, updated):"]]}, "updated": {"?": [[43, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycooki": {"func": {"ckey": {"(?, None) -> (?, ?, str) / (?, ?) -> (?, ?, str)": [[11, "def ckey(attrs: Dict[str, str], f: http.HTTPFlow) -> TOrigin:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.s": {"class": {"StickyCookie": {"<StickyCookie>": [[32, "class StickyCookie:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie": {"var": {"TOrigin": {"?": [[8, "TOrigin = Tuple[str, int, str]"]]}}, "func": {"domain_match": {"(str, str) -> None / (?, str) -> None / (?, ?) -> None": [[24, "def domain_match(a: str, b: str) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCooki": {"param": {"loader": {"?": [[37, "    def load(self, loader):"]]}}, "func": {"request": {"(StickyCookie, ?) -> None / (StickyCookie, None) -> None": [[75, "    def request(self, flow: http.HTTPFlow):"]]}, "response": {"(StickyCookie, None) -> None / (StickyCookie, ?) -> None": [[55, "    def response(self, flow: http.HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickycookie.StickyCookie": {"func": {"load": {"(StickyCookie, ?) -> None": [[37, "    def load(self, loader):"]]}, "__init__": {"? -> ?": [[33, "    def __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_log.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_log.test_disconnec": {"var": {"outf": {"DummyIO": [[17, "    outf = DummyIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_log.DummyIO.get_log": {"param": {"self": {"DummyIO": [[12, "    def get_log(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_log.DummyIO": {"func": {"get_log": {"DummyIO -> str": [[12, "    def get_log(self, *args, **kwargs):"]]}, "start_log": {"DummyIO -> None": [[9, "    def start_log(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_log.DummyIO.start_log": {"param": {"self": {"DummyIO": [[9, "    def start_log(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_log": {"class": {"DummyIO": {"<DummyIO>": [[7, "class DummyIO(io.StringIO):"]]}}, "func": {"test_disconnect": {"() -> ?": [[16, "def test_disconnect():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_log.test_disconnect": {"var": {"rw": {"DummyIO": [[18, "    rw = DummyIO()"]]}, "l": {"ConnectionLogger": [[19, "    l = log.ConnectionLogger(outf, False, True, rw, rw)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/filter-flows.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flows.Filter.load": {"param": {"self": {"Filter": [[15, "    def load(self, l):"]]}, "l": {"?": [[15, "    def load(self, l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flows.Filt": {"func": {"configure": {"(Filter, ?) -> None": [[12, "    def configure(self, updated):"]]}, "response": {"(Filter, ?) -> None": [[20, "    def response(self, flow: http.HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flows.Filter": {"func": {"load": {"(Filter, ?) -> None": [[15, "    def load(self, l):"]]}, "__init__": {"? -> ?": [[9, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flows.Filter.__init__": {"param": {"self": {"Filter": [[9, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flow": {"var": {"addons": {"[Filter]": [[26, "addons = [Filter()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flows": {"class": {"Filter": {"<Filter>": [[8, "class Filter:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.filter-flows.Filter.configur": {"param": {"self": {"Filter": [[12, "    def configure(self, updated):"]]}, "updated": {"?": [[12, "    def configure(self, updated):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/platform/test_pf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.platform.test_pf": {"class": {"TestLookup": {"<TestLookup>": [[6, "class TestLookup:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.platform.test_pf.TestLookup.test_simple": {"var": {"p": {"?": [[10, "            p = tdata.path(\"mitmproxy/data/pf02\")"], [12, "            p = tdata.path(\"mitmproxy/data/pf01\")"]]}, "d": {"str": [[14, "            d = f.read()"]]}}, "param": {"tdata": {"?": [[8, "    def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.platform.test_pf.TestLooku": {"func": {"test_simple": {"(TestLookup, ?) -> None": [[8, "    def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.platform.test_pf.TestLookup.test_simp": {"param": {"self": {"TestLookup": [[8, "    def test_simple(self, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/check.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.check": {"var": {"_label_valid": {"?": [[6, "_label_valid = re.compile(br\"[A-Z\\d\\-_]{1,63}$\", re.IGNORECASE)"]]}}, "func": {"is_valid_host": {"str -> ? / ? -> ?": [[9, "def is_valid_host(host: bytes) -> bool:"]]}, "is_valid_port": {"? -> bool / int -> bool": [[33, "def is_valid_port(port: int) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.check.is_valid_": {"var": {"host": {"str": [[21, "        host = host[:-1]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/auto.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.a": {"class": {"ViewAuto": {"<ViewAuto>": [[7, "class ViewAuto(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.auto.ViewAuto.__call__": {"var": {"headers": {"?": [[11, "        headers = metadata.get(\"headers\", {})"]]}, "ctype": {"?": [[12, "        ctype = headers.get(\"content-type\")"]]}, "ct": {"(?, ?, ?)": [[14, "            ct = http.parse_content_type(ctype) if ctype else None"]], "?": [[15, "            ct = \"%s/%s\" % (ct[0], ct[1])"]]}}, "param": {"self": {"ViewAuto": [[10, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[10, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.auto.ViewAuto": {"var": {"name": {"str": [[8, "    name = \"Auto\""]]}}, "func": {"__call__": {"(ViewAuto, ?) -> (str, [?])": [[10, "    def __call__(self, data, **metadata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_typecheck.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_typecheck.TBase": {"func": {"__init__": {"? -> ?": [[9, "    def __init__(self, bar: int):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.util": {"func": {"test_check_option_type": {"() -> None": [[18, "def test_check_option_type():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_ty": {"func": {"test_check_tuple": {"() -> None": [[35, "def test_check_tuple():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_typ": {"func": {"test_check_sequence": {"() -> None": [[47, "def test_check_sequence():"]]}, "test_check_union": {"() -> None": [[28, "def test_check_union():"]]}, "test_check_any": {"() -> None": [[65, "def test_check_any():"]]}, "test_check_io": {"() -> None": [[59, "def test_check_io():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_typecheck": {"class": {"T": {"<T>": [[13, "class T(TBase):"]]}, "TBase": {"<TBase>": [[8, "class TBase:"]]}}, "func": {"test_mapping_types": {"() -> None": [[80, "def test_mapping_types():"]]}, "test_typesec_to_str": {"() -> None": [[71, "def test_typesec_to_str():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_typecheck.T": {"func": {"__init__": {"? -> ?": [[14, "    def __init__(self, foo: str):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_http.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http": {"class": {"TestHTTPRequest": {"<TestHTTPRequest>": [[12, "class TestHTTPRequest:"]]}, "TestHTTPFlow": {"<TestHTTPFlow>": [[77, "class TestHTTPFlow:"]]}}, "func": {"test_make_connect_request": {"() -> None": [[207, "def test_make_connect_request():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_simple": {"var": {"r": {"?": [[16, "        r = f.request"]]}, "u": {"?": [[17, "        u = r.url"]]}, "r2": {"?": [[22, "        r2 = r.copy()"]]}, "f": {"?": [[15, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_backup_idempotenc": {"param": {"self": {"TestHTTPFlow": [[130, "    def test_backup_idempotence(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_get_content_ty": {"var": {"resp": {"HTTPResponse": [[58, "        resp = http.HTTPResponse.wrap(mitmproxy.test.tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPR": {"func": {"test_get_content_type": {"TestHTTPResponse -> None": [[71, "    def test_get_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPReq": {"func": {"test_get_url": {"TestHTTPRequest -> None": [[26, "    def test_get_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_constrain_encoding": {"var": {"r": {"HTTPRequest": [[48, "        r = http.HTTPRequest.wrap(mitmproxy.test.tutils.treq())"]]}}, "param": {"self": {"TestHTTPRequest": [[47, "    def test_constrain_encoding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_get_content_typ": {"param": {"self": {"TestHTTPRequest": [[57, "    def test_get_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_get_url": {"var": {"r": {"HTTPRequest": [[27, "        r = http.HTTPRequest.wrap(mitmproxy.test.tutils.treq())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_get_ur": {"param": {"self": {"TestHTTPRequest": [[26, "    def test_get_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.test_make_connect_request": {"var": {"req": {"HTTPRequest": [[208, "    req = http.make_connect_request(('invalidhost', 1234))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPResponse.test_simple": {"var": {"f": {"?": [[66, "        f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_resume_duplicated": {"var": {"f2": {"?": [[191, "        f2 = f.copy()"]]}, "f": {"?": [[189, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestHTTPFlow": [[188, "    def test_resume_duplicated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_kill": {"var": {"f": {"?": [[161, "        f = tflow.tflow()"], [167, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_resume": {"var": {"f": {"?": [[182, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequest.test_simp": {"param": {"self": {"TestHTTPRequest": [[14, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_getset_": {"var": {"state": {"?": [[139, "        state = f.get_state()"], [145, "        state = f.get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRequ": {"func": {"test_constrain_encoding": {"TestHTTPRequest -> None": [[47, "    def test_constrain_encoding(self):"]]}, "test_simple": {"TestHTTPRequest -> None": [[14, "    def test_simple(self):"]]}, "test_get_content_type": {"TestHTTPRequest -> None": [[57, "    def test_get_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_timestamp_start": {"var": {"f": {"?": [[198, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestHTTPFlow": [[197, "    def test_timestamp_start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_getset_stat": {"param": {"self": {"TestHTTPFlow": [[137, "    def test_getset_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow": {"func": {"test_timestamp_start": {"TestHTTPFlow -> None": [[197, "    def test_timestamp_start(self):"]]}, "test_resume": {"TestHTTPFlow -> None": [[181, "    def test_resume(self):"]]}, "test_backup": {"TestHTTPFlow -> None": [[119, "    def test_backup(self):"]]}, "test_backup_idempotence": {"TestHTTPFlow -> None": [[130, "    def test_backup_idempotence(self):"]]}, "test_resume_duplicated": {"TestHTTPFlow -> None": [[188, "    def test_resume_duplicated(self):"]]}, "test_copy": {"TestHTTPFlow -> None": [[79, "    def test_copy(self):"]]}, "test_getset_state": {"TestHTTPFlow -> None": [[137, "    def test_getset_state(self):"]]}, "test_intercept": {"TestHTTPFlow -> None": [[174, "    def test_intercept(self):"]]}, "test_match": {"TestHTTPFlow -> None": [[107, "    def test_match(self):"]]}, "test_kill": {"TestHTTPFlow -> None": [[160, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_copy": {"var": {"a": {"?": [[84, "        a = f.get_state()"]]}, "f2": {"?": [[83, "        f2 = f.copy()"], [99, "        f2 = f.copy()"]]}, "b": {"?": [[85, "        b = f2.get_state()"]]}, "f": {"?": [[80, "        f = tflow.tflow(resp=True)"], [98, "        f = tflow.tflow(err=True)"]]}}, "param": {"self": {"TestHTTPFlow": [[79, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPResponse.test_simp": {"param": {"self": {"TestHTTPResponse": [[65, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPResponse.test_get_content_typ": {"param": {"self": {"TestHTTPResponse": [[71, "    def test_get_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_h": {"class": {"TestHTTPResponse": {"<TestHTTPResponse>": [[63, "class TestHTTPResponse:"]]}}, "func": {"test_make_error_response": {"() -> None": [[202, "def test_make_error_response():"]]}, "test_make_connect_response": {"() -> None": [[214, "def test_make_connect_response():"]]}, "test_expect_continue_response": {"() -> None": [[220, "def test_expect_continue_response():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_ki": {"param": {"self": {"TestHTTPFlow": [[160, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_match": {"var": {"f": {"?": [[108, "        f = tflow.tflow(resp=True)"], [113, "        f = tflow.tflow(err=True)"]]}}, "param": {"self": {"TestHTTPFlow": [[107, "    def test_match(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.test_make_error_respon": {"var": {"resp": {"HTTPResponse": [[203, "    resp = http.make_error_response(543, 'foobar', Headers())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPResponse.test_get_content_ty": {"var": {"resp": {"HTTPResponse": [[72, "        resp = http.HTTPResponse.wrap(mitmproxy.test.tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_intercept": {"var": {"f": {"?": [[175, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestHTTPFlow": [[174, "    def test_intercept(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPRespon": {"func": {"test_simple": {"TestHTTPResponse -> None": [[65, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_backup": {"var": {"f": {"?": [[120, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestHTTPFlow": [[119, "    def test_backup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_backup_idempotence": {"var": {"f": {"?": [[131, "        f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPResponse.test_simpl": {"var": {"resp": {"?": [[67, "        resp = f.response"]]}, "resp2": {"?": [[68, "        resp2 = resp.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_resum": {"param": {"self": {"TestHTTPFlow": [[181, "    def test_resume(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.test_make_connect_respon": {"var": {"resp": {"HTTPResponse": [[215, "    resp = http.make_connect_response('foobar')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_http.TestHTTPFlow.test_getset_state": {"var": {"f2": {"?": [[149, "        f2 = f.copy()"]]}, "f": {"?": [[138, "        f = tflow.tflow(resp=True)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/base.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.base.format_pairs": {"var": {"max_key_len": {"int": [[51, "    max_key_len = max((len(k[0]) for k in items), default=0)"], [52, "    max_key_len = min((max_key_len, KEY_MAX), default=0)"]]}, "key": {"str": [[54, "    for key, value in items:"], [61, "        key = key.ljust(max_key_len + 2)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.base.format_dict": {"var": {"d": {"{MultiDict | dict | dict}": [[70, "        d: typing.Mapping[TTextType, TTextType]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.base.format_text": {"var": {"line": {"str": [[88, "    for line in text.splitlines():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.base.View": {"func": {"__call__": {"(View, ?) -> None": [[15, "    def __call__(self, data: bytes, **metadata) -> TViewResult:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.base.format_pair": {"var": {"items": {"{[(?, ?)] | [(str, str)] | [?] | tuple}": [[39, "        items: typing.Iterable[typing.Tuple[TTextType, TTextType]]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.base": {"var": {"KEY_MAX": {"int": [[4, "KEY_MAX = 30"]]}}, "func": {"format_dict": {"dict -> None / MultiDict -> None / ? -> None": [[69, "def format_dict("]]}, "format_pairs": {"[(?, ?)] -> None / [?] -> None / tuple -> None / ? -> None / [(str, str)] -> None": [[38, "def format_pairs("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.ba": {"var": {"TViewResult": {"?": [[8, "TViewResult = typing.Tuple[str, typing.Iterator[TViewLine]]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.bas": {"var": {"TTextType": {"?": [[6, "TTextType = typing.Union[str, bytes]  # FIXME: This should be either bytes or str ultimately."]]}, "TViewLine": {"?": [[7, "TViewLine = typing.List[typing.Tuple[str, TTextType]]"]]}}, "class": {"View": {"<View>": [[11, "class View:"]]}}, "func": {"format_text": {"str -> None / ? -> None / None -> None": [[84, "def format_text(text: TTextType) -> typing.Iterator[TViewLine]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/web/test_static_viewer.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_filter_help": {"var": {"f": {"?": [[25, "    f = tmpdir.join('/filter-help.json')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_static_viewe": {"var": {"rf": {"ReadFile": [[64, "    rf = readfile.ReadFile()"]]}}, "param": {"tmpdir": {"?": [[62, "async def test_static_viewer(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_flows_conten": {"var": {"flows_path": {"?": [[48, "    flows_path = tmpdir.join('flows')"]]}}, "param": {"ctx": {"?": [[44, "def test_save_flows_content(ctx, tmpdir):"]]}, "tmpdir": {"?": [[44, "def test_save_flows_content(ctx, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_flows_content": {"var": {"p": {"?": [[50, "    for p in flows_path.listdir():"]]}, "flows": {"[?]": [[45, "    flows = [tflow.tflow(req=True, resp=None), tflow.tflow(req=True, resp=True)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_static": {"param": {"tmpdir": {"?": [[15, "def test_save_static(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_view": {"func": {"test_save_filter_help": {"? -> None": [[23, "def test_save_filter_help(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_flows": {"param": {"tmpdir": {"?": [[36, "def test_save_flows(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer": {"func": {"test_save_flows_content": {"(?, ?) -> None": [[44, "def test_save_flows_content(ctx, tmpdir):"]]}, "test_save_static": {"? -> None": [[15, "def test_save_static(tmpdir):"]]}, "test_save_settings": {"? -> None": [[30, "def test_save_settings(tmpdir):"]]}, "test_save_flows": {"? -> None": [[36, "def test_save_flows(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_static_viewer": {"var": {"s": {"StaticViewer": [[63, "    s = static_viewer.StaticViewer()"]]}, "sa": {"Save": [[65, "    sa = save.Save()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_filter_hel": {"param": {"tmpdir": {"?": [[23, "def test_save_filter_help(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_": {"var": {"flows": {"[?]": [[37, "    flows = [tflow.tflow(req=True, resp=None), tflow.tflow(req=True, resp=True)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_static_viewer.test_save_settings": {"var": {"f": {"?": [[32, "    f = tmpdir.join('/settings.json')"]]}}, "param": {"tmpdir": {"?": [[30, "def test_save_settings(tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/cibuild.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_whee": {"var": {"whl": {"?": [[341, "    whl, = glob.glob(os.path.join(be.dist_dir, 'mitmproxy-*-py3-none-any.whl'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.upload_dir": {"param": {"self": {"BuildEnviron": [[310, "    def upload_dir(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_pyinstaller": {"var": {"excludes": {"[str]": [[406, "                    excludes = []"]]}, "executable": {"str": [[434, "                executable = os.path.join(PYINSTALLER_DIST, tool)"], [444, "                    executable = executable.replace(\"_main\", \"\")"]]}, "PYINSTALLER_ARGS": {"[?]": [[389, "        PYINSTALLER_ARGS = []"]], "[str]": [[384, "        PYINSTALLER_ARGS = ["]]}, "tool": {"str": [[401, "                    tool = \"mitmproxy_main\""]], "?": [[398, "            for tool in tools:"]]}, "bdist": {"?": [[396, "    for bdist, tools in sorted(be.bdists.items()):"]]}, "PYINSTALLER_TEMP": {"str": [[378, "    PYINSTALLER_TEMP = os.path.abspath(os.path.join(be.build_dir, \"pyinstaller\"))"]]}, "PYINSTALLER_DIST": {"str": [[379, "    PYINSTALLER_DIST = os.path.abspath(os.path.join(be.build_dir, \"binaries\", be.platform_tag))"]]}, "PYINSTALLER_HOOKS": {"str": [[377, "    PYINSTALLER_HOOKS = os.path.abspath(os.path.join(be.release_dir, \"hooks\"))"]]}, "PYINSTALLER_SPEC": {"str": [[375, "    PYINSTALLER_SPEC = os.path.join(be.release_dir, \"specs\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibui": {"func": {"upload": {"() -> None": [[535, "def upload():  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.build_dir": {"param": {"self": {"BuildEnviron": [[171, "    def build_dir(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.check_": {"var": {"version": {"?": [[218, "        version = match.group(1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnvi": {"func": {"from_env": {"<BuildEnviron> -> BuildEnviron": [[104, "    def from_env(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.dump_info": {"var": {"lst": {"[str]": [[187, "        lst = ["]]}, "attr": {"str": [[206, "        for attr in lst:"]]}}, "param": {"fp": {"?": [[186, "    def dump_info(self, fp=sys.stdout) -> None:"]]}, "self": {"BuildEnviron": [[186, "    def dump_info(self, fp=sys.stdout) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.is_pull_request": {"param": {"self": {"BuildEnviron": [[257, "    def is_pull_request(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.bdist": {"param": {"self": {"BuildEnviron": [[149, "    def bdists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_wininstaller": {"var": {"f": {"?": [[486, "    f = cryptography.fernet.Fernet(be.build_key.encode())"]]}, "IB_LICENSE": {"str": [[463, "    IB_LICENSE = IB_DIR / \"license.xml\""]]}, "IB_VERSION": {"str": [[459, "    IB_VERSION = \"20.3.0\""]]}, "IB_SETUP": {"?": [[461, "    IB_SETUP = IB_DIR / \"setup\" / f\"{IB_VERSION}-installer.exe\""]]}, "IB_DIR": {"str": [[460, "    IB_DIR = pathlib.Path(be.release_dir) / \"installbuilder\""]]}, "IB_CLI": {"None": [[462, "    IB_CLI = fr\"C:\\Program Files (x86)\\VMware InstallBuilder Enterprise {IB_VERSION}\\bin\\builder-cli.exe\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.release_dir": {"param": {"self": {"BuildEnviron": [[273, "    def release_dir(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.version": {"param": {"self": {"BuildEnviron": [[317, "    def version(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild": {"func": {"cli": {"() -> None": [[506, "def cli():  # pragma: no cover"]]}, "bool_from_env": {"? -> None / str -> None": [[34, "def bool_from_env(envvar: str) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.is_prod_release": {"var": {"v": {"?": [[251, "            v = parver.Version.parse(self.version, strict=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.tag": {"param": {"self": {"BuildEnviron": [[300, "    def tag(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.from_env": {"param": {"cls": {"<BuildEnviron>": [[104, "    def from_env(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_wininstaller.repor": {"param": {"total": {"?": [[469, "            def report(block, blocksize, total):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.is_maintenance_branch": {"param": {"self": {"BuildEnviron": [[234, "    def is_maintenance_branch(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.archive": {"var": {"a": {"?": [[130, "            a = zipfile.ZipFile(path, \"w\")"]]}}, "param": {"path": {"str": [[127, "    def archive(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.releas": {"func": {"build_docker_image": {"? -> None / BuildEnviron -> None": [[347, "def build_docker_image(be: BuildEnviron):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.archive_nam": {"var": {"ext": {"str": [[138, "            ext = \"zip\""], [140, "            ext = \"tar.gz\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.check_versi": {"var": {"contents": {"str": [[215, "            contents = f.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.upload": {"var": {"whl": {"?": [[562, "        whl = glob.glob(os.path.join(be.dist_dir, 'mitmproxy-*-py3-none-any.whl'))[0]"]]}, "be": {"BuildEnviron": [[543, "    be = BuildEnviron.from_env()"]]}, "num_files": {"int": [[551, "        num_files = len([name for name in os.listdir(be.dist_dir) if os.path.isfile(name)])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuil": {"func": {"chdir": {"str -> None / ? -> None": [[23, "def chdir(path: str):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.should_upload_docker": {"param": {"self": {"BuildEnviron": [[277, "    def should_upload_docker(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.should_upload_pypi": {"param": {"self": {"BuildEnviron": [[292, "    def should_upload_pypi(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.check": {"var": {"version_info": {"?": [[229, "            version_info = parver.Version.parse(version)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.ch": {"var": {"old_dir": {"str": [[24, "    old_dir = os.getcwd()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_wininstaller.report": {"var": {"done": {"?": [[470, "                done = block * blocksize"]]}}, "param": {"blocksize": {"?": [[469, "            def report(block, blocksize, total):"]]}, "block": {"?": [[469, "            def report(block, blocksize, total):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnvir": {"func": {"dump_info": {"(BuildEnviron, ?) -> None": [[186, "    def dump_info(self, fp=sys.stdout) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.is_prod_relea": {"param": {"self": {"BuildEnviron": [[247, "    def is_prod_release(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build": {"var": {"be": {"BuildEnviron": [[518, "    be = BuildEnviron.from_env()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.platform_tag": {"param": {"self": {"BuildEnviron": [[267, "    def platform_tag(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.has_docker_cred": {"param": {"self": {"BuildEnviron": [[243, "    def has_docker_creds(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildE": {"func": {"check_version": {"BuildEnviron -> None": [[209, "    def check_version(self) -> None:"]]}, "version": {"BuildEnviron -> {BuildEnviron -> str | BuildEnviron -> str}": [[317, "    def version(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.dist_dir": {"param": {"self": {"BuildEnviron": [[175, "    def dist_dir(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_docker_image": {"var": {"whl": {"?": [[348, "    whl, = glob.glob(os.path.join(be.dist_dir, 'mitmproxy-*-py3-none-any.whl'))"]]}, "r": {"?": [[360, "    r = subprocess.run(["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.check_version": {"var": {"match": {"?": [[216, "        match = re.search(r'^VERSION = \"(.+?)\"', contents, re.M)"]]}}, "param": {"self": {"BuildEnviron": [[209, "    def check_version(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.bdists": {"var": {"ret": {"dict": [[150, "        ret = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviro": {"func": {"is_maintenance_branch": {"BuildEnviron -> None": [[234, "    def is_maintenance_branch(self) -> bool:"]]}, "archive_name": {"(BuildEnviron, ?) -> str / (BuildEnviron, str) -> str": [[136, "    def archive_name(self, bdist: str) -> str:"]]}, "branch": {"BuildEnviron -> str": [[159, "    def branch(self) -> str:"]]}, "__init__": {"? -> ?": [[49, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron": {"var": {"PLATFORM_TAGS": {"dict": [[43, "    PLATFORM_TAGS = {"]]}}, "func": {"platform_tag": {"BuildEnviron -> str": [[267, "    def platform_tag(self) -> str:"]]}, "upload_dir": {"BuildEnviron -> BuildEnviron -> {BuildEnviron -> str | BuildEnviron -> str}": [[310, "    def upload_dir(self) -> str:"]]}, "should_upload_docker": {"BuildEnviron -> int": [[277, "    def should_upload_docker(self) -> bool:"]]}, "should_upload_aws": {"BuildEnviron -> int": [[285, "    def should_upload_aws(self) -> bool:"]]}, "has_docker_creds": {"BuildEnviron -> bool": [[243, "    def has_docker_creds(self) -> bool:"]]}, "is_pull_request": {"BuildEnviron -> None": [[257, "    def is_pull_request(self) -> bool:"]]}, "build_dir": {"BuildEnviron -> str": [[171, "    def build_dir(self) -> str:"]]}, "tag": {"BuildEnviron -> str": [[300, "    def tag(self) -> str:"]]}, "release_dir": {"BuildEnviron -> str": [[273, "    def release_dir(self) -> str:"]]}, "docker_tag": {"BuildEnviron -> str": [[179, "    def docker_tag(self) -> str:"]]}, "should_upload_pypi": {"BuildEnviron -> int": [[292, "    def should_upload_pypi(self) -> bool:"]]}, "is_prod_release": {"BuildEnviron -> ?": [[247, "    def is_prod_release(self) -> bool:"]]}, "dist_dir": {"BuildEnviron -> str": [[175, "    def dist_dir(self) -> str:"]]}, "archive": {"(BuildEnviron, str) -> None / (BuildEnviron, ?) -> None": [[127, "    def archive(self, path):"]]}, "bdists": {"BuildEnviron -> dict": [[149, "    def bdists(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.c": {"func": {"build_wininstaller": {"BuildEnviron -> None / ? -> None": [[453, "def build_wininstaller(be: BuildEnviron):  # pragma: no cover"]]}, "build_pyinstaller": {"? -> None / BuildEnviron -> None": [[372, "def build_pyinstaller(be: BuildEnviron):  # pragma: no cover"]]}, "build": {"() -> None": [[514, "def build():  # pragma: no cover"]]}, "build_wheel": {"BuildEnviron -> None / ? -> None": [[332, "def build_wheel(be: BuildEnviron):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.should_upload_aw": {"param": {"self": {"BuildEnviron": [[285, "    def should_upload_aws(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cib": {"class": {"BuildError": {"<BuildError>": [[30, "class BuildError(Exception):"]]}, "BuildEnviron": {"<BuildEnviron>": [[42, "class BuildEnviron:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.branch": {"param": {"self": {"BuildEnviron": [[159, "    def branch(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.docker_tag": {"var": {"t": {"BuildEnviron -> {BuildEnviron -> str | BuildEnviron -> str}": [[183, "            t = self.version"]], "str": [[181, "            t = \"dev\""]]}}, "param": {"self": {"BuildEnviron": [[179, "    def docker_tag(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.bool_from_en": {"var": {"val": {"?": [[35, "    val = os.environ.get(envvar, \"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.build_wininstall": {"func": {"report": {"(?, ?, ?) -> None": [[469, "            def report(block, blocksize, total):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.archiv": {"param": {"self": {"BuildEnviron": [[127, "    def archive(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.cibuild.BuildEnviron.__init__": {"var": {"self": {"BuildEnviron": [[50, "            self,"]]}}, "param": {"self": {"BuildEnviron": [[71, "    ):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_mapremote.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemoteFile.test_simp": {"param": {"self": {"TestMapRemoteFile": [[48, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemote.test_has_reply": {"var": {"f": {"?": [[40, "            f = tflow.tflow()"]]}, "mr": {"MapRemote": [[37, "        mr = mapremote.MapRemote()"]]}}, "param": {"self": {"TestMapRemote": [[36, "    def test_has_reply(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemote.test_configure": {"var": {"mr": {"MapRemote": [[11, "        mr = mapremote.MapRemote()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemo": {"func": {"test_simple": {"TestMapRemote -> None": [[22, "    def test_simple(self):"]]}, "test_has_reply": {"TestMapRemote -> None": [[36, "    def test_has_reply(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemoteF": {"func": {"test_simple": {"(TestMapRemoteFile, ?) -> None": [[48, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemote.test_simp": {"param": {"self": {"TestMapRemote": [[22, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemoteFile.test_s": {"var": {"tmpfile": {"?": [[51, "            tmpfile = tmpdir.join(\"replacement\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemoteFile.test_simple": {"var": {"f": {"?": [[57, "            f = tflow.tflow()"]]}, "mr": {"MapRemote": [[49, "        mr = mapremote.MapRemote()"]]}}, "param": {"tmpdir": {"?": [[48, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemote.test_simple": {"var": {"f": {"?": [[31, "            f = tflow.tflow()"]]}, "mr": {"MapRemote": [[23, "        mr = mapremote.MapRemote()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemoteFile.test_nonexistent": {"var": {"f": {"?": [[79, "            f = tflow.tflow()"]]}, "mr": {"MapRemote": [[64, "        mr = mapremote.MapRemote()"]]}}, "param": {"self": {"TestMapRemoteFile": [[63, "    async def test_nonexistent(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemoteFile.test_nonexisten": {"var": {"tmpfile": {"?": [[72, "            tmpfile = tmpdir.join(\"replacement\")"]]}}, "param": {"tmpdir": {"?": [[63, "    async def test_nonexistent(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRem": {"func": {"test_configure": {"TestMapRemote -> None": [[10, "    def test_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapremote.TestMapRemote.test_configur": {"param": {"self": {"TestMapRemote": [[10, "    def test_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_mapr": {"class": {"TestMapRemoteFile": {"<TestMapRemoteFile>": [[47, "class TestMapRemoteFile:"]]}, "TestMapRemote": {"<TestMapRemote>": [[8, "class TestMapRemote:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_stateobject.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobjec": {"class": {"TList": {"<TList>": [[34, "class TList(TObject):"]]}}, "func": {"test_tuple_err": {"() -> None": [[94, "def test_tuple_err():"]]}, "test_simple": {"() -> None": [[58, "def test_simple():"]]}, "test_none": {"() -> None": [[141, "def test_none():"]]}, "test_list": {"() -> None": [[100, "def test_list():"]]}, "test_any": {"() -> None": [[122, "def test_any():"]]}, "test_tuple": {"() -> None": [[83, "def test_tuple():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_too_much_state": {"var": {"a": {"Child": [[133, "    a = Child(42)"]]}, "s": {"dict": [[134, "    s = a.get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TAny": {"var": {"_stateobject_attributes": {"dict": [[47, "    _stateobject_attributes = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateo": {"class": {"TObject": {"<TObject>": [[8, "class TObject(StateObject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TD": {"var": {"_stateobject_attributes": {"dict": [[41, "    _stateobject_attributes = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_tuple_err": {"var": {"a": {"TTuple": [[95, "    a = TTuple(None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TL": {"var": {"_stateobject_attributes": {"dict": [[35, "    _stateobject_attributes = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_none": {"var": {"a": {"Child": [[142, "    a = Child(None)"], [144, "    a = Child(42)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.Child": {"var": {"_stateobject_attributes": {"dict": [[20, "    _stateobject_attributes = dict("]]}}, "func": {"__eq__": {"(Child, ?) -> ? / (Child, None) -> ?": [[24, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobj": {"func": {"test_too_much_state": {"() -> None": [[132, "def test_too_much_state():"]]}, "test_dict": {"() -> None": [[111, "def test_dict():"]]}, "test_serializable_child": {"() -> None": [[67, "def test_serializable_child():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject": {"class": {"TTuple": {"<TTuple>": [[28, "class TTuple(TObject):"]]}, "TSerializableChild": {"<TSerializableChild>": [[52, "class TSerializableChild(TObject):"]]}, "TAny": {"<TAny>": [[46, "class TAny(TObject):"]]}, "Child": {"<Child>": [[19, "class Child(TObject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TTupl": {"var": {"_stateobject_attributes": {"dict": [[29, "    _stateobject_attributes = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_serializable_": {"var": {"child": {"Child": [[68, "    child = Child(42)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.Child.__eq__": {"param": {"self": {"Child": [[24, "    def __eq__(self, other):"]]}, "other": {"None": [[24, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_simple": {"var": {"a": {"Child": [[59, "    a = Child(42)"]]}, "b": {"TObject": [[61, "    b = a.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobje": {"class": {"TDict": {"<TDict>": [[40, "class TDict(TObject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TSerializableChild": {"var": {"_stateobject_attributes": {"dict": [[53, "    _stateobject_attributes = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TObject.from_state": {"var": {"obj": {"TObject": [[14, "        obj = cls(None)"]]}}, "param": {"cls": {"<TObject>": [[13, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TObjec": {"func": {"from_state": {"(<TObject>, ?) -> TObject / (<TObject>, dict) -> TObject": [[13, "    def from_state(cls, state):"]]}, "__init__": {"? -> ?": [[9, "    def __init__(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_serializable_child": {"var": {"a": {"TSerializableChild": [[69, "    a = TSerializableChild(child)"]]}, "b": {"TObject": [[78, "    b = a.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TObject.from_": {"param": {"state": {"dict": [[13, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_tuple": {"var": {"a": {"TTuple": [[84, "    a = TTuple((42, Child(43)))"]]}, "b": {"TObject": [[88, "    b = a.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_list": {"var": {"a": {"TList": [[101, "    a = TList([Child(1), Child(2)])"]]}, "copy": {"TObject": [[105, "    copy = a.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.TObject.__init__": {"param": {"x": {"{(int, Child) | Child | [Child] | dict | int | object}": [[9, "    def __init__(self, x):"]]}, "self": {"{Child | TAny | TDict | TList | TObject | TSerializableChild | TTuple}": [[9, "    def __init__(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_any": {"var": {"a": {"TAny": [[123, "    a = TAny(42)"], [127, "    a = TAny(object())"]]}, "b": {"TObject": [[124, "    b = a.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_stateobject.test_dict": {"var": {"a": {"TDict": [[112, "    a = TDict({\"foo\": Child(42)})"]]}, "b": {"TObject": [[116, "    b = a.copy()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/streambodies.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodi": {"func": {"requestheaders": {"(StreamBodies, ?) -> None": [[52, "    def requestheaders(self, f):"]]}, "responseheaders": {"(StreamBodies, ?) -> None": [[55, "    def responseheaders(self, f):"]]}, "websocket_start": {"(StreamBodies, ?) -> None": [[58, "    def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.responseheaders": {"param": {"f": {"?": [[55, "    def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.load": {"param": {"self": {"StreamBodies": [[13, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.websocket_start": {"param": {"self": {"StreamBodies": [[58, "    def websocket_start(self, f):"]]}, "f": {"?": [[58, "    def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.requestheader": {"param": {"self": {"StreamBodies": [[52, "    def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.run": {"var": {"expected_size": {"int": [[41, "                expected_size = http1.expected_http_body_size("]]}, "r": {"?": [[39, "            r = f.request if is_request else f.response"]]}}, "param": {"self": {"StreamBodies": [[37, "    def run(self, f, is_request):"]]}, "is_request": {"bool": [[37, "    def run(self, f, is_request):"]]}, "f": {"?": [[37, "    def run(self, f, is_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.__init__": {"param": {"self": {"StreamBodies": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.responseheader": {"param": {"self": {"StreamBodies": [[55, "    def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies": {"param": {"loader": {"?": [[13, "    def load(self, loader):"]]}}, "func": {"load": {"(StreamBodies, ?) -> None": [[13, "    def load(self, loader):"]]}, "run": {"(StreamBodies, ?, ?) -> ? / (StreamBodies, ?, bool) -> ?": [[37, "    def run(self, f, is_request):"]]}, "configure": {"(StreamBodies, ?) -> ?": [[30, "    def configure(self, updated):"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.requestheaders": {"param": {"f": {"?": [[52, "    def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streambodies.StreamBodies.configur": {"param": {"self": {"StreamBodies": [[30, "    def configure(self, updated):"]]}, "updated": {"?": [[30, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.streamb": {"class": {"StreamBodies": {"<StreamBodies>": [[9, "class StreamBodies:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_eventsequence.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_eventsequen": {"func": {"test_websocket_flow": {"? -> None": [[26, "def test_websocket_flow(err):"]]}, "test_tcp_flow": {"? -> None": [[43, "def test_tcp_flow(err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_eventsequenc": {"func": {"test_invalid": {"() -> None": [[57, "def test_invalid():"]]}, "test_http_flow": {"(?, ?) -> None": [[13, "def test_http_flow(resp, err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_eventsequence.test_tcp_flow": {"var": {"i": {"?": [[45, "    i = eventsequence.iterate(f)"]]}, "f": {"?": [[44, "    f = tflow.ttcpflow(err=err)"]]}}, "param": {"err": {"?": [[43, "def test_tcp_flow(err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_eventsequence.test_http_flow": {"var": {"i": {"?": [[15, "    i = eventsequence.iterate(f)"]]}, "f": {"?": [[14, "    f = tflow.tflow(resp=resp, err=err)"]]}}, "param": {"resp": {"?": [[13, "def test_http_flow(resp, err):"]]}, "err": {"?": [[13, "def test_http_flow(resp, err):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_eventsequence.test_websocket_flow": {"var": {"i": {"?": [[28, "    i = eventsequence.iterate(f)"]]}, "f": {"?": [[27, "    f = tflow.twebsocketflow(err=err)"]]}}, "param": {"err": {"?": [[26, "def test_websocket_flow(err):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_script.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestCutTraceback.raise_": {"param": {"i": {"int": [[167, "    def raise_(self, i):"]]}, "self": {"TestCutTraceback": [[167, "    def raise_(self, i):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_simp": {"param": {"self": {"TestScriptLoader": [[206, "    def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_script_run_nonexistent": {"var": {"sc": {"ScriptLoader": [[201, "        sc = script.ScriptLoader()"]]}}, "param": {"self": {"TestScriptLoader": [[200, "    async def test_script_run_nonexistent(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_reloa": {"param": {"tmpdir": {"?": [[104, "    async def test_reload(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestCutTraceback.test_simple": {"var": {"tb_cut2": {"None": [[180, "            tb_cut2 = addonmanager.cut_traceback(tb, \"nonexistent\")"]]}, "tb_cut": {"None": [[177, "            tb_cut = addonmanager.cut_traceback(tb, \"test_simple\")"]]}, "tb": {"?": [[176, "            tb = sys.exc_info()[2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_simple": {"var": {"sc": {"Script": [[84, "        sc = script.Script("]]}, "f": {"?": [[98, "            f = tflow.tflow(resp=True)"]]}}, "param": {"tdata": {"?": [[83, "    async def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_ord": {"var": {"rec": {"?": [[267, "        rec = tdata.path(\"mitmproxy/data/addonscripts/recorder\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_": {"class": {"TestScriptLoader": {"<TestScriptLoader>": [[184, "class TestScriptLoader:"]]}, "TestScript": {"<TestScript>": [[63, "class TestScript:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.test_load_script": {"var": {"ns": {"?": [[22, "        ns = script.load_script("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_reload": {"var": {"sc": {"Script": [[109, "            sc = script.Script(str(f), True)"]]}, "i": {"int": [[114, "            for i in range(20):"]]}, "f": {"?": [[106, "            f = tmpdir.join(\"foo.py\")"]]}}, "param": {"self": {"TestScript": [[104, "    async def test_reload(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestCutTraceback.test_simp": {"param": {"self": {"TestCutTraceback": [[172, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_quotes_around_filenam": {"param": {"self": {"TestScript": [[69, "    def test_quotes_around_filename(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_script_error_handler": {"var": {"msg": {"str": [[256, "        msg = \"Error raised\""]]}, "path": {"str": [[254, "        path = \"/sample/path/example.py\""]]}, "tb": {"?": [[257, "        tb = True"]]}, "exc": {"<SyntaxError>": [[255, "        exc = SyntaxError"]]}}, "param": {"self": {"TestScriptLoader": [[253, "    async def test_script_error_handler(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.test_load_fullname": {"var": {"ns2": {"?": [[54, "    ns2 = script.load_script("]]}, "ns": {"?": [[48, "    ns = script.load_script("]]}}, "param": {"tdata": {"?": [[42, "def test_load_fullname(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_optionexception": {"var": {"sc": {"Script": [[142, "            sc = script.Script("]]}}, "param": {"self": {"TestScript": [[140, "    async def test_optionexceptions(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_exception": {"var": {"sc": {"Script": [[125, "            sc = script.Script("]]}, "f": {"?": [[133, "            f = tflow.tflow(resp=True)"]]}}, "param": {"tdata": {"?": [[123, "    async def test_exception(self, tdata):"]]}, "self": {"TestScript": [[123, "    async def test_exception(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_simpl": {"var": {"rec": {"?": [[93, "            rec = tctx.master.addons.get(\"recorder\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScrip": {"func": {"test_notfound": {"TestScript -> None": [[64, "    def test_notfound(self):"]]}, "test_quotes_around_filename": {"(TestScript, ?) -> None": [[69, "    def test_quotes_around_filename(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_scrip": {"class": {"TestCutTraceback": {"<TestCutTraceback>": [[166, "class TestCutTraceback:"]]}}, "func": {"test_load_fullname": {"? -> None": [[42, "def test_load_fullname(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_dupe": {"var": {"sc": {"ScriptLoader": [[226, "        sc = script.ScriptLoader()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_quotes_around_filename": {"var": {"path": {"?": [[74, "        path = tdata.path(\"mitmproxy/data/addonscripts/recorder/recorder.py\")"]]}, "s": {"Script": [[76, "        s = script.Script("]]}}, "param": {"tdata": {"?": [[69, "    def test_quotes_around_filename(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_optionexceptions": {"param": {"tdata": {"?": [[140, "    async def test_optionexceptions(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_simple": {"var": {"sc": {"ScriptLoader": [[207, "        sc = script.ScriptLoader()"]]}}, "param": {"tdata": {"?": [[206, "    def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestCutTraceback": {"func": {"raise_": {"(TestCutTraceback, ?) -> None / (TestCutTraceback, int) -> None": [[167, "    def raise_(self, i):"]]}, "test_simple": {"TestCutTraceback -> ?": [[172, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_simp": {"param": {"self": {"TestScript": [[83, "    async def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_notfound": {"param": {"self": {"TestScript": [[64, "    def test_notfound(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_order": {"var": {"sc": {"ScriptLoader": [[268, "        sc = script.ScriptLoader()"]]}, "debug": {"[?]": [[280, "            debug = [i.msg for i in tctx.master.logs if i.level == \"debug\"]"], [306, "            debug = [i.msg for i in tctx.master.logs if i.level == \"debug\"]"], [322, "            debug = [i.msg for i in tctx.master.logs if i.level == \"debug\"]"]]}}, "param": {"tdata": {"?": [[266, "    async def test_order(self, tdata):"]]}, "self": {"TestScriptLoader": [[266, "    async def test_order(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_dup": {"param": {"self": {"TestScriptLoader": [[225, "    def test_dupes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.test_load_scrip": {"param": {"tdata": {"?": [[20, "async def test_load_script(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader": {"func": {"test_simple": {"(TestScriptLoader, ?) -> None": [[206, "    def test_simple(self, tdata):"]]}, "test_dupes": {"TestScriptLoader -> None": [[225, "    def test_dupes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_script_run": {"var": {"sc": {"ScriptLoader": [[188, "        sc = script.ScriptLoader()"]]}, "debug": {"[?]": [[192, "            debug = [i.msg for i in tctx.master.logs if i.level == \"debug\"]"]]}, "rp": {"?": [[187, "        rp = tdata.path(\"mitmproxy/data/addonscripts/recorder/recorder.py\")"]]}}, "param": {"tdata": {"?": [[186, "    async def test_script_run(self, tdata):"]]}, "self": {"TestScriptLoader": [[186, "    async def test_script_run(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScriptLoader.test_script_deletion": {"var": {"tdir": {"?": [[236, "        tdir = tdata.path(\"mitmproxy/data/addonscripts/\")"]]}, "sl": {"ScriptLoader": [[241, "            sl = script.ScriptLoader()"]]}}, "param": {"tdata": {"?": [[235, "    async def test_script_deletion(self, tdata):"]]}, "self": {"TestScriptLoader": [[235, "    async def test_script_deletion(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_script.TestScript.test_addon": {"var": {"sc": {"Script": [[153, "            sc = script.Script("]]}}, "param": {"tdata": {"?": [[151, "    async def test_addon(self, tdata):"]]}, "self": {"TestScript": [[151, "    async def test_addon(self, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/test/taddons.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.comman": {"var": {"cmd": {"Command": [[126, "        cmd = command.Command(self.master.commands, \"test.command\", func)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMaster.await_log": {"var": {"i": {"int": [[42, "        for i in range(20):"]]}}, "param": {"self": {"RecordingMaster": [[41, "    async def await_log(self, txt, level=None):"]]}, "txt": {"?": [[41, "    async def await_log(self, txt, level=None):"]]}, "level": {"None": [[41, "    async def await_log(self, txt, level=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMaster": {"func": {"dump_log": {"(RecordingMaster, ?) -> None": [[29, "    def dump_log(self, outf=sys.stdout):"]]}, "has_log": {"(RecordingMaster, ?, None) -> None": [[33, "    def has_log(self, txt, level=None):"]]}, "__init__": {"? -> ?": [[24, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.TestAddons.trigger": {"param": {"self": {"TestAddons": [[17, "    def trigger(self, event, *args, **kwargs):"]]}, "event": {"?": [[17, "    def trigger(self, event, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMaster.has_log": {"var": {"i": {"?": [[34, "        for i in self.logs:"]]}}, "param": {"self": {"RecordingMaster": [[33, "    def has_log(self, txt, level=None):"]]}, "txt": {"?": [[33, "    def has_log(self, txt, level=None):"]]}, "level": {"None": [[33, "    def has_log(self, txt, level=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.contex": {"func": {"__enter__": {"context -> context": [[73, "    def __enter__(self):"]]}, "__init__": {"? -> ?": [[60, "    def __init__(self, *addons, options=None, loadcore=True):"]]}, "script": {"(context, ?) -> None": [[109, "    def script(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.configure": {"param": {"addon": {"?": [[95, "    def configure(self, addon, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.__init__": {"var": {"a": {"?": [[70, "        for a in addons:"]]}, "options": {"Options": [[61, "        options = options or mitmproxy.options.Options()"]]}}, "param": {"self": {"context": [[60, "    def __init__(self, *addons, options=None, loadcore=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.__exit__": {"param": {"self": {"context": [[76, "    def __exit__(self, exc_type, exc_value, traceback):"]]}, "traceback": {"?": [[76, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.script": {"var": {"sc": {"Script": [[113, "        sc = script.Script(path, False)"]]}}, "param": {"self": {"context": [[109, "    def script(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.cycle": {"param": {"f": {"?": [[80, "    def cycle(self, addon, f):"]]}, "addon": {"?": [[80, "    def cycle(self, addon, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.configur": {"param": {"self": {"context": [[95, "    def configure(self, addon, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMaster.clear": {"param": {"self": {"RecordingMaster": [[49, "    def clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.TestAddons.__init__": {"param": {"self": {"TestAddons": [[14, "    def __init__(self, master):"]]}, "master": {"RecordingMaster": [[14, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.cyc": {"param": {"self": {"context": [[80, "    def cycle(self, addon, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.command": {"param": {"self": {"context": [[122, "    def command(self, func, *args):"]]}, "func": {"?": [[122, "    def command(self, func, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context": {"func": {"command": {"(context, ?) -> None": [[122, "    def command(self, func, *args):"]]}, "configure": {"(context, ?) -> None": [[95, "    def configure(self, addon, **kwargs):"]]}, "invoke": {"(context, ?, ?) -> None": [[116, "    def invoke(self, addon, event, *args, **kwargs):"]]}, "cycle": {"(context, ?, ?) -> None": [[80, "    def cycle(self, addon, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMaster.__init__": {"param": {"self": {"RecordingMaster": [[24, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMaster.dump_log": {"var": {"i": {"?": [[30, "        for i in self.logs:"]]}}, "param": {"self": {"RecordingMaster": [[29, "    def dump_log(self, outf=sys.stdout):"]]}, "outf": {"?": [[29, "    def dump_log(self, outf=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.TestAddons": {"func": {"trigger": {"(TestAddons, ?) -> None": [[17, "    def trigger(self, event, *args, **kwargs):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.__exi": {"param": {"exc_type": {"?": [[76, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons": {"class": {"context": {"<context>": [[53, "class context:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.invoke": {"param": {"addon": {"?": [[116, "    def invoke(self, addon, event, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.cycl": {"var": {"evt": {"?": [[86, "        for evt, arg in eventsequence.iterate(f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.__enter__": {"param": {"self": {"context": [[73, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.__exit": {"param": {"exc_value": {"?": [[76, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"class": {"RecordingMaster": {"<RecordingMaster>": [[23, "class RecordingMaster(mitmproxy.master.Master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.ta": {"class": {"TestAddons": {"<TestAddons>": [[13, "class TestAddons(addonmanager.AddonManager):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.invok": {"param": {"self": {"context": [[116, "    def invoke(self, addon, event, *args, **kwargs):"]]}, "event": {"?": [[116, "    def invoke(self, addon, event, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.context.scri": {"param": {"path": {"?": [[109, "    def script(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.con": {"func": {"__exit__": {"(context, ?, ?, ?) -> ?": [[76, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.taddons.RecordingMast": {"func": {"clear": {"RecordingMaster -> None": [[49, "    def clear(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/intercept.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.response": {"param": {"f": {"?": [[50, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.tcp_message": {"param": {"f": {"?": [[53, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Inter": {"func": {"tcp_message": {"(Intercept, ?) -> None": [[53, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.__init__": {"param": {"self": {"Intercept": [[9, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.load": {"param": {"self": {"Intercept": [[12, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.process_flow": {"var": {"should_intercept": {"int": [[38, "            should_intercept = all(["]]}}, "param": {"self": {"Intercept": [[36, "    def process_flow(self, f):"]]}, "f": {"?": [[36, "    def process_flow(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.tcp_messag": {"param": {"self": {"Intercept": [[53, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.respon": {"param": {"self": {"Intercept": [[50, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.request": {"param": {"self": {"Intercept": [[47, "    def request(self, f):"]]}, "f": {"?": [[47, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept": {"param": {"loader": {"?": [[12, "    def load(self, loader):"]]}}, "func": {"load": {"(Intercept, ?) -> None": [[12, "    def load(self, loader):"]]}, "process_flow": {"(Intercept, ?) -> None": [[36, "    def process_flow(self, f):"]]}, "configure": {"(Intercept, ?) -> None": [[23, "    def configure(self, updated):"]]}, "response": {"(Intercept, ?) -> None": [[50, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.i": {"class": {"Intercept": {"<Intercept>": [[8, "class Intercept:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercep": {"func": {"request": {"(Intercept, ?) -> None": [[47, "    def request(self, f):"]]}, "__init__": {"? -> ?": [[9, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.intercept.Intercept.configur": {"param": {"self": {"Intercept": [[23, "    def configure(self, updated):"]]}, "updated": {"?": [[23, "    def configure(self, updated):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/protocols/test_http2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestTCPHandlerWrapper.test_direct": {"var": {"p": {"HTTP2StateProtocol": [[23, "        p = HTTP2StateProtocol(rfile='foo', wfile='bar')"]]}}, "param": {"self": {"TestTCPHandlerWrapper": [[22, "    def test_direct(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleResponse.test_with_body": {"param": {"self": {"TestAssembleResponse": [[498, "    def test_with_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRequest.test_request_simp": {"param": {"self": {"TestAssembleRequest": [[424, "    def test_request_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequest.test_read_request": {"var": {"c": {"TCPClient": [[303, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "req": {"Request": [[309, "            req = protocol.read_request(NotImplemented)"]]}}, "param": {"self": {"TestReadRequest": [[302, "    def test_read_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestTCPHandlerWrapper.test_wrapped": {"var": {"h": {"TCPHandler": [[17, "        h = TCPHandler(rfile='foo', wfile='bar')"]]}, "p": {"HTTP2StateProtocol": [[18, "        p = HTTP2StateProtocol(h)"]]}}, "param": {"self": {"TestTCPHandlerWrapper": [[16, "    def test_wrapped(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRespons": {"class": {"handler": {"<handler>": [[367, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestserverstreamI": {"func": {"test_server_stream_ids": {"TestserverstreamIds -> None": [[186, "    def test_server_stream_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody.test_create_body_single_frame": {"var": {"protocol": {"HTTP2StateProtocol": [[275, "        protocol = HTTP2StateProtocol(self.c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestClientStreamI": {"func": {"test_client_stream_ids": {"TestClientStreamIds -> None": [[172, "    def test_client_stream_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplySettings.test_apply_settings": {"var": {"c": {"TCPClient": [[208, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[211, "            protocol = HTTP2StateProtocol(c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestProtocol.test_perform_connection_prefac": {"param": {"self": {"TestProtocol": [[42, "    def test_perform_connection_preface(self, mock_client_method, mock_server_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformClientConnectionPrefac": {"class": {"handler": {"<handler>": [[136, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyRespons": {"class": {"handler": {"<handler>": [[396, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequest.handler": {"func": {"handle": {"handler -> None": [[292, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformClientConnectionP": {"func": {"test_perform_client_connection_preface": {"TestPerformClientConnectionPreface -> None": [[158, "    def test_perform_client_connection_preface(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateHeaders.test_create_header": {"var": {"bytes": {"[?]": [[239, "        bytes = HTTP2StateProtocol(self.c)._create_headers("], [244, "        bytes = HTTP2StateProtocol(self.c)._create_headers("]]}}, "param": {"self": {"TestCreateHeaders": [[232, "    def test_create_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRequest": {"var": {"c": {"TCPClient": [[422, "    c = tcp.TCPClient((\"127.0.0.1\", 0))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleResponse.test_simpl": {"var": {"bytes": {"list": [[479, "        bytes = HTTP2StateProtocol(self.c, is_server=True).assemble_response(http.Response("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestTCPHandlerW": {"func": {"test_wrapped": {"TestTCPHandlerWrapper -> None": [[16, "    def test_wrapped(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplyS": {"func": {"test_apply_settings": {"TestApplySettings -> None": [[207, "    def test_apply_settings(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadResponse.test_read_response": {"var": {"c": {"TCPClient": [[379, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[382, "            protocol = HTTP2StateProtocol(c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMismatch": {"var": {"ssl": {"dict": [[85, "    ssl = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody.test_create_body_multiple_frames": {"var": {"protocol": {"HTTP2StateProtocol": [[280, "        protocol = HTTP2StateProtocol(self.c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestClientStreamIds.test_client_stream_id": {"param": {"self": {"TestClientStreamIds": [[172, "    def test_client_stream_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformClientConnectionPreface.handler.hand": {"param": {"self": {"handler": [[138, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionPrefac": {"class": {"handler": {"<handler>": [[99, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplySettings.test_apply_setting": {"param": {"self": {"TestApplySettings": [[207, "    def test_apply_settings(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadResponse.test_read_respon": {"var": {"resp": {"Response": [[385, "            resp = protocol.read_response(NotImplemented, stream_id=42)"]]}}, "param": {"self": {"TestReadResponse": [[378, "    def test_read_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateHeaders": {"var": {"c": {"TCPClient": [[230, "    c = tcp.TCPClient((\"127.0.0.1\", 0))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyResponse": {"var": {"ssl": {"bool": [[402, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionPreface.handler.hand": {"param": {"self": {"handler": [[101, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.EchoHandler": {"var": {"sni": {"None": [[30, "    sni = None"]]}}, "func": {"handle": {"EchoHandler -> None": [[32, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplySettings.handler.hand": {"param": {"self": {"handler": [[198, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestClientStreamIds": {"var": {"c": {"TCPClient": [[169, "    c = tcp.TCPClient((\"127.0.0.1\", 0))"]]}, "protocol": {"HTTP2StateProtocol": [[170, "    protocol = HTTP2StateProtocol(c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadResponse.handler.hand": {"param": {"self": {"handler": [[368, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformClientConnectionPreface.test_perform_client_connection_prefac": {"param": {"self": {"TestPerformClientConnectionPreface": [[158, "    def test_perform_client_connection_preface(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestProtocol.test_perform_connection_preface_server": {"param": {"self": {"TestProtocol": [[56, "    def test_perform_connection_preface_server(self, mock_client_method, mock_server_method):"]]}, "mock_client_method": {"?": [[56, "    def test_perform_connection_preface_server(self, mock_client_method, mock_server_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestProtocol": {"func": {"test_perform_connection_preface": {"(TestProtocol, ?, ?) -> None": [[42, "    def test_perform_connection_preface(self, mock_client_method, mock_server_method):"]]}, "test_perform_connection_preface_server": {"(TestProtocol, ?, ?) -> None": [[56, "    def test_perform_connection_preface_server(self, mock_client_method, mock_server_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody.test_create_body_multiple_fram": {"var": {"bytes": {"{[?] | str}": [[282, "        bytes = protocol._create_body(b'foobarmehm42', 1)"]]}}, "param": {"self": {"TestCreateBody": [[279, "    def test_create_body_multiple_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestAbsolut": {"class": {"handler": {"<handler>": [[343, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestRelative.handler": {"func": {"handle": {"handler -> None": [[321, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.EchoHandler.hand": {"param": {"self": {"EchoHandler": [[32, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformClientConnectionPreface.test_perform_client_connection_preface": {"var": {"c": {"TCPClient": [[159, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[161, "            protocol = HTTP2StateProtocol(c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRequest.test_request_with_bod": {"var": {"bytes": {"list": [[457, "        bytes = HTTP2StateProtocol(self.c).assemble_request(http.Request("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.EchoHandler.handle": {"var": {"v": {"?": [[34, "            v = self.rfile.safe_read(1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestProtocol.test_perform_connection_prefa": {"param": {"mock_server_method": {"?": [[42, "    def test_perform_connection_preface(self, mock_client_method, mock_server_method):"], [56, "    def test_perform_connection_preface_server(self, mock_client_method, mock_server_method):"]]}, "mock_client_method": {"?": [[42, "    def test_perform_connection_preface(self, mock_client_method, mock_server_method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestAbsolute.handler": {"func": {"handle": {"handler -> None": [[344, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMatch.test_check_alpn": {"var": {"c": {"TCPClient": [[76, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[79, "            protocol = HTTP2StateProtocol(c)"]]}}, "param": {"self": {"TestCheckALPNMatch": [[75, "    def test_check_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMatc": {"var": {"handler": {"<EchoHandler>": [[70, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMismatch.test_check_alpn": {"var": {"c": {"TCPClient": [[90, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[93, "            protocol = HTTP2StateProtocol(c)"]]}}, "param": {"self": {"TestCheckALPNMismatch": [[89, "    def test_check_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyResponse.handler.hand": {"param": {"self": {"handler": [[397, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionPreface.handler": {"func": {"handle": {"handler -> None": [[101, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestAbsolute.test_absolute_form": {"var": {"c": {"TCPClient": [[352, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "req": {"Request": [[358, "            req = protocol.read_request(NotImplemented)"]]}, "protocol": {"HTTP2StateProtocol": [[355, "            protocol = HTTP2StateProtocol(c, is_server=True)"]]}}, "param": {"self": {"TestReadRequestAbsolute": [[351, "    def test_absolute_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestRelativ": {"class": {"handler": {"<handler>": [[320, "    class handler(tcp.BaseHandler):"]]}}, "func": {"test_asterisk_form": {"TestReadRequestRelative -> None": [[328, "    def test_asterisk_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateHeaders.test_create_headers_multiple_fram": {"var": {"headers": {"Headers": [[250, "        headers = http.Headers(["]]}, "bytes": {"[?]": [[259, "        bytes = protocol._create_headers(headers, 1, end_stream=True)"]]}}, "param": {"self": {"TestCreateHeaders": [[249, "    def test_create_headers_multiple_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestA": {"func": {"test_absolute_form": {"TestReadRequestAbsolute -> None": [[351, "    def test_absolute_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadR": {"func": {"test_read_request": {"TestReadRequest -> None": [[302, "    def test_read_request(self):"]]}, "test_read_response": {"TestReadResponse -> None": [[378, "    def test_read_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionPreface.handler.handle": {"var": {"raw": {"[?]": [[111, "            raw = http2.read_raw_frame(self.rfile)"], [115, "            raw = http2.read_raw_frame(self.rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequest.handler.hand": {"param": {"self": {"handler": [[292, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestRelative": {"var": {"ssl": {"bool": [[326, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleResponse.test_simp": {"param": {"self": {"TestAssembleResponse": [[478, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestProtocol.test_perform_connection_preface": {"var": {"protocol": {"HTTP2StateProtocol": [[43, "        protocol = HTTP2StateProtocol(is_server=False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleR": {"func": {"test_request_simple": {"TestAssembleRequest -> None": [[424, "    def test_request_simple(self):"]]}, "test_request_with_body": {"TestAssembleRequest -> None": [[456, "    def test_request_with_body(self):"]]}, "test_request_with_stream_id": {"TestAssembleRequest -> None": [[439, "    def test_request_with_stream_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody.test_create_body_single_fram": {"var": {"bytes": {"{[?] | str}": [[276, "        bytes = protocol._create_body(b'foobar', 1)"]]}}, "param": {"self": {"TestCreateBody": [[274, "    def test_create_body_single_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMismatc": {"var": {"handler": {"<EchoHandler>": [[84, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleResponse": {"var": {"c": {"TCPClient": [[476, "    c = tcp.TCPClient((\"127.0.0.1\", 0))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplySettings": {"class": {"handler": {"<handler>": [[197, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformClientConnectionPreface.handler": {"func": {"handle": {"handler -> None": [[138, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadResponse": {"var": {"ssl": {"bool": [[376, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestAbsolute.handler.hand": {"param": {"self": {"handler": [[344, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMatch": {"var": {"ssl": {"dict": [[71, "    ssl = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody.test_create_body_empty": {"var": {"protocol": {"HTTP2StateProtocol": [[270, "        protocol = HTTP2StateProtocol(self.c)"]]}}, "param": {"self": {"TestCreateBody": [[269, "    def test_create_body_empty(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyResponse.test_read_empty_respon": {"var": {"resp": {"Response": [[411, "            resp = protocol.read_response(NotImplemented, stream_id=42)"]]}}, "param": {"self": {"TestReadEmptyResponse": [[404, "    def test_read_empty_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRequest.test_request_simpl": {"var": {"bytes": {"list": [[425, "        bytes = HTTP2StateProtocol(self.c).assemble_request(http.Request("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody": {"var": {"c": {"TCPClient": [[267, "    c = tcp.TCPClient((\"127.0.0.1\", 0))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestserverstreamIds": {"var": {"c": {"TCPClient": [[183, "    c = tcp.TCPClient((\"127.0.0.1\", 0))"]]}, "protocol": {"HTTP2StateProtocol": [[184, "    protocol = HTTP2StateProtocol(c, is_server=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleResponse.test_with_stream_id": {"var": {"resp": {"Response": [[488, "        resp = http.Response("]]}, "bytes": {"list": [[493, "        bytes = HTTP2StateProtocol(self.c, is_server=True).assemble_response(resp)"]]}}, "param": {"self": {"TestAssembleResponse": [[487, "    def test_with_stream_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionPreface.test_perform_server_connection_prefac": {"param": {"self": {"TestPerformServerConnectionPreface": [[122, "    def test_perform_server_connection_preface(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateHeaders.test_create_": {"var": {"headers": {"Headers": [[233, "        headers = http.Headers(["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNMism": {"func": {"test_check_alpn": {"TestCheckALPNMismatch -> None": [[89, "    def test_check_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadResponse.handler": {"func": {"handle": {"handler -> None": [[368, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplySettings.handler": {"func": {"handle": {"handler -> None": [[198, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestRelative.test_asterisk_form": {"var": {"c": {"TCPClient": [[329, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "req": {"Request": [[335, "            req = protocol.read_request(NotImplemented)"]]}, "protocol": {"HTTP2StateProtocol": [[332, "            protocol = HTTP2StateProtocol(c, is_server=True)"]]}}, "param": {"self": {"TestReadRequestRelative": [[328, "    def test_asterisk_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestProtocol.test_perform_connection_preface_serve": {"var": {"protocol": {"HTTP2StateProtocol": [[57, "        protocol = HTTP2StateProtocol(is_server=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateH": {"func": {"test_create_headers_multiple_frames": {"TestCreateHeaders -> None": [[249, "    def test_create_headers_multiple_frames(self):"]]}, "test_create_headers": {"TestCreateHeaders -> None": [[232, "    def test_create_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleResponse.test_with_bod": {"var": {"bytes": {"list": [[499, "        bytes = HTTP2StateProtocol(self.c, is_server=True).assemble_response(http.Response("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyResponse.handler": {"func": {"handle": {"handler -> None": [[397, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestApplySetting": {"var": {"ssl": {"bool": [[205, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateB": {"func": {"test_create_body_multiple_frames": {"TestCreateBody -> None": [[279, "    def test_create_body_multiple_frames(self):"]]}, "test_create_body_single_frame": {"TestCreateBody -> None": [[274, "    def test_create_body_single_frame(self):"]]}, "test_create_body_empty": {"TestCreateBody -> None": [[269, "    def test_create_body_empty(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestRelative.handler.hand": {"param": {"self": {"handler": [[321, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestTCPHandlerWrapp": {"func": {"test_direct": {"TestTCPHandlerWrapper -> None": [[22, "    def test_direct(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateBody.test_create_body_emp": {"var": {"bytes": {"{[?] | str}": [[271, "        bytes = protocol._create_body(b'', 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestserverstreamIds.test_server_stream_id": {"param": {"self": {"TestserverstreamIds": [[186, "    def test_server_stream_ids(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequest.test_read_reques": {"var": {"protocol": {"HTTP2StateProtocol": [[306, "            protocol = HTTP2StateProtocol(c, is_server=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCheckALPNM": {"func": {"test_check_alpn": {"TestCheckALPNMatch -> None": [[75, "    def test_check_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionPreface.test_perform_server_connection_preface": {"var": {"c": {"TCPClient": [[123, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[125, "            protocol = HTTP2StateProtocol(c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRequest.test_request_with_body": {"param": {"self": {"TestAssembleRequest": [[456, "    def test_request_with_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRequest.test_request_with_stream_id": {"var": {"req": {"Request": [[440, "        req = http.Request("]]}, "bytes": {"list": [[452, "        bytes = HTTP2StateProtocol(self.c).assemble_request(req)"]]}}, "param": {"self": {"TestAssembleRequest": [[439, "    def test_request_with_stream_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestAssembleRespon": {"func": {"test_with_body": {"TestAssembleResponse -> None": [[498, "    def test_with_body(self):"]]}, "test_with_stream_id": {"TestAssembleResponse -> None": [[487, "    def test_with_stream_id(self):"]]}, "test_simple": {"TestAssembleResponse -> None": [[478, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequest": {"var": {"ssl": {"bool": [[300, "    ssl = True"]]}}, "class": {"handler": {"<handler>": [[290, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyResponse.test_read_empty_response": {"var": {"c": {"TCPClient": [[405, "        c = tcp.TCPClient((\"127.0.0.1\", self.port))"]]}, "protocol": {"HTTP2StateProtocol": [[408, "            protocol = HTTP2StateProtocol(c)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestPerformServerConnectionP": {"func": {"test_perform_server_connection_preface": {"TestPerformServerConnectionPreface -> None": [[122, "    def test_perform_server_connection_preface(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadRequestAbsolute": {"var": {"ssl": {"bool": [[349, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2": {"class": {"TestAssembleRequest": {"<TestAssembleRequest>": [[421, "class TestAssembleRequest:"]]}, "TestCheckALPNMatch": {"<TestCheckALPNMatch>": [[69, "class TestCheckALPNMatch(net_tservers.ServerTestBase):"]]}, "TestReadEmptyResponse": {"<TestReadEmptyResponse>": [[395, "class TestReadEmptyResponse(net_tservers.ServerTestBase):"]]}, "TestClientStreamIds": {"<TestClientStreamIds>": [[168, "class TestClientStreamIds:"]]}, "TestApplySettings": {"<TestApplySettings>": [[196, "class TestApplySettings(net_tservers.ServerTestBase):"]]}, "TestCreateHeaders": {"<TestCreateHeaders>": [[229, "class TestCreateHeaders:"]]}, "TestReadRequest": {"<TestReadRequest>": [[289, "class TestReadRequest(net_tservers.ServerTestBase):"]]}, "TestCreateBody": {"<TestCreateBody>": [[266, "class TestCreateBody:"]]}, "TestPerformServerConnectionPreface": {"<TestPerformServerConnectionPreface>": [[98, "class TestPerformServerConnectionPreface(net_tservers.ServerTestBase):"]]}, "TestReadResponse": {"<TestReadResponse>": [[366, "class TestReadResponse(net_tservers.ServerTestBase):"]]}, "TestReadRequestAbsolute": {"<TestReadRequestAbsolute>": [[342, "class TestReadRequestAbsolute(net_tservers.ServerTestBase):"]]}, "TestPerformClientConnectionPreface": {"<TestPerformClientConnectionPreface>": [[135, "class TestPerformClientConnectionPreface(net_tservers.ServerTestBase):"]]}, "TestTCPHandlerWrapper": {"<TestTCPHandlerWrapper>": [[15, "class TestTCPHandlerWrapper:"]]}, "TestCheckALPNMismatch": {"<TestCheckALPNMismatch>": [[83, "class TestCheckALPNMismatch(net_tservers.ServerTestBase):"]]}, "TestAssembleResponse": {"<TestAssembleResponse>": [[475, "class TestAssembleResponse:"]]}, "EchoHandler": {"<EchoHandler>": [[29, "class EchoHandler(tcp.BaseHandler):"]]}, "TestReadRequestRelative": {"<TestReadRequestRelative>": [[319, "class TestReadRequestRelative(net_tservers.ServerTestBase):"]]}, "TestserverstreamIds": {"<TestserverstreamIds>": [[182, "class TestserverstreamIds:"]]}, "TestProtocol": {"<TestProtocol>": [[39, "class TestProtocol:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestReadEmptyR": {"func": {"test_read_empty_response": {"TestReadEmptyResponse -> None": [[404, "    def test_read_empty_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.protocols.test_http2.TestCreateHeaders.test_create_headers_multiple_frames": {"var": {"protocol": {"HTTP2StateProtocol": [[257, "        protocol = HTTP2StateProtocol(self.c)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/websocket-inject-message.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-inject-message.InjectWebSocketMessage.inject": {"var": {"i": {"int": [[14, "        i = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-inject-message.InjectWebSocketMessage.websocket_start": {"param": {"self": {"InjectWebSocketMessage": [[20, "    def websocket_start(self, flow):"]]}, "flow": {"?": [[20, "    def websocket_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-inject-m": {"class": {"InjectWebSocketMessage": {"<InjectWebSocketMessage>": [[12, "class InjectWebSocketMessage:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-inject-message": {"var": {"addons": {"[InjectWebSocketMessage]": [[24, "addons = [InjectWebSocketMessage()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-inject-message.InjectWebSocketMessag": {"func": {"websocket_start": {"(InjectWebSocketMessage, ?) -> None": [[20, "    def websocket_start(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_data.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.util": {"func": {"test_pkg_data": {"() -> None": [[5, "def test_pkg_data():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/data/verificationcerts/generate.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.generate": {"var": {"h": {"?": [[63, "h = do(\"openssl x509 -hash -noout -in trusted-root.crt\").decode(\"ascii\").strip()"]]}, "ROOT_CA": {"str": [[10, "ROOT_CA = \"trusted-root\""]]}, "SUBJECT": {"str": [[11, "SUBJECT = \"example.mitmproxy.org\""]]}}, "func": {"do": {"str -> None / None -> None": [[14, "def do(args):"]]}, "sign": {"(str, None) -> None": [[25, "def sign(cert: str, subject: str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.generate.mkcer": {"param": {"subject": {"None": [[45, "def mkcert(cert, subject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.genera": {"func": {"mkcert": {"(str, None) -> None": [[45, "def mkcert(cert, subject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.generat": {"func": {"genrsa": {"str -> None": [[21, "def genrsa(cert: str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.generate.mk": {"param": {"cert": {"str": [[45, "def mkcert(cert, subject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.generate.d": {"var": {"output": {"?": [[17, "    output = subprocess.check_output(args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.data.verificationcerts.generate.do": {"var": {"args": {"?": [[16, "    args = shlex.split(args)"]]}}, "param": {"args": {"str": [[14, "def do(args):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/check_ca.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.check_ca.CheckCA.__init__": {"param": {"self": {"CheckCA": [[6, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.check_ca.CheckCA.configure": {"var": {"has_ca": {"?": [[10, "        has_ca = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.check_ca.CheckCA.configur": {"param": {"self": {"CheckCA": [[9, "    def configure(self, updated):"]]}, "updated": {"?": [[9, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.check_ca.CheckCA": {"func": {"configure": {"(CheckCA, ?) -> None": [[9, "    def configure(self, updated):"]]}, "__init__": {"? -> ?": [[6, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.check_ca": {"class": {"CheckCA": {"<CheckCA>": [[5, "class CheckCA:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/socks.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.SocksError": {"func": {"__init__": {"? -> ?": [[10, "    def __init__(self, code, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthResponse.assert_authver1": {"param": {"self": {"UsernamePasswordAuthResponse": [[158, "    def assert_authver1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthRespon": {"func": {"assert_authver1": {"UsernamePasswordAuthResponse -> None": [[158, "    def assert_authver1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthResponse.from_file": {"param": {"f": {"?": [[166, "    def from_file(cls, f):"]]}, "cls": {"<UsernamePasswordAuthResponse>": [[166, "    def from_file(cls, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.sock": {"class": {"Message": {"<Message>": [[174, "class Message:"]]}, "UsernamePasswordAuthResponse": {"<UsernamePasswordAuthResponse>": [[151, "class UsernamePasswordAuthResponse:"]]}, "UsernamePasswordAuth": {"<UsernamePasswordAuth>": [[121, "class UsernamePasswordAuth:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthResponse.to_file": {"param": {"f": {"?": [[170, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Message.assert_socks5": {"param": {"self": {"Message": [[183, "    def assert_socks5(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks": {"var": {"ATYP": {"BiDi": [[26, "ATYP = bidi.BiDi("]]}, "REP": {"BiDi": [[32, "REP = bidi.BiDi("]]}, "CMD": {"BiDi": [[20, "CMD = bidi.BiDi("]]}, "VERSION": {"BiDi": [[15, "VERSION = bidi.BiDi("]]}, "USERNAME_PASSWORD_VERSION": {"BiDi": [[51, "USERNAME_PASSWORD_VERSION = bidi.BiDi("]]}, "METHOD": {"BiDi": [[44, "METHOD = bidi.BiDi("]]}}, "class": {"ServerGreeting": {"<ServerGreeting>": [[93, "class ServerGreeting:"]]}, "ClientGreeting": {"<ClientGreeting>": [[56, "class ClientGreeting:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Message.to_file": {"param": {"f": {"Writer": [[217, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.SocksError.__init__": {"param": {"self": {"SocksError": [[10, "    def __init__(self, code, message):"]]}, "code": {"?": [[10, "    def __init__(self, code, message):"]]}, "message": {"?": [[10, "    def __init__(self, code, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordA": {"func": {"assert_authver1": {"UsernamePasswordAuth -> None": [[129, "    def assert_authver1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net": {"class": {"SocksError": {"<SocksError>": [[9, "class SocksError(Exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth.from_fil": {"var": {"username": {"?": [[139, "        username = f.safe_read(ulen)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Message.from_file": {"var": {"host": {"str": [[205, "            host = f.safe_read(length)"], [208, "            host = host.decode(\"idna\")"]], "?": [[200, "            host = ipaddress.IPv4Address(f.safe_read(4)).compressed"], [202, "            host = ipaddress.IPv6Address(f.safe_read(16)).compressed"]]}, "addr": {"(str, ?)": [[214, "        addr = (host, port)"]]}}, "param": {"f": {"Reader": [[191, "    def from_file(cls, f):"]]}, "cls": {"<Message>": [[191, "    def from_file(cls, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.from": {"param": {"fail_early": {"bool": [[77, "    def from_file(cls, f, fail_early=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.__init__": {"param": {"self": {"ClientGreeting": [[59, "    def __init__(self, ver, methods):"]]}, "ver": {"?": [[59, "    def __init__(self, ver, methods):"]]}, "methods": {"[?]": [[59, "    def __init__(self, ver, methods):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ServerGreeting": {"var": {"__slots__": {"(str, str)": [[94, "    __slots__ = (\"ver\", \"method\")"]]}}, "func": {"from_file": {"(<ServerGreeting>, Reader) -> ServerGreeting / (<ServerGreeting>, ?) -> ServerGreeting": [[113, "    def from_file(cls, f):"]]}, "to_file": {"(ServerGreeting, ?) -> None": [[117, "    def to_file(self, f):"]]}, "assert_socks5": {"ServerGreeting -> None": [[100, "    def assert_socks5(self):"]]}, "__init__": {"? -> ?": [[96, "    def __init__(self, ver, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth.__init__": {"param": {"username": {"?": [[124, "    def __init__(self, ver, username, password):"]]}, "self": {"UsernamePasswordAuth": [[124, "    def __init__(self, ver, username, password):"]]}, "password": {"?": [[124, "    def __init__(self, ver, username, password):"]]}, "ver": {"?": [[124, "    def __init__(self, ver, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ServerGreeting.assert_socks5": {"var": {"guess": {"str": [[103, "                guess = \"Probably not a SOCKS request but a regular HTTP response. \""], [105, "                guess = \"\""]]}}, "param": {"self": {"ServerGreeting": [[100, "    def assert_socks5(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting": {"var": {"__slots__": {"(str, str)": [[57, "    __slots__ = (\"ver\", \"methods\")"]]}}, "func": {"from_file": {"(<ClientGreeting>, ?, bool) -> ClientGreeting": [[77, "    def from_file(cls, f, fail_early=False):"]]}, "to_file": {"(ClientGreeting, Writer) -> None / (ClientGreeting, ?) -> None": [[88, "    def to_file(self, f):"]]}, "assert_socks5": {"ClientGreeting -> None": [[64, "    def assert_socks5(self):"]]}, "__init__": {"? -> ?": [[59, "    def __init__(self, ver, methods):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth.assert_authver1": {"param": {"self": {"UsernamePasswordAuth": [[129, "    def assert_authver1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth": {"var": {"__slots__": {"(str, str, str)": [[122, "    __slots__ = (\"ver\", \"username\", \"password\")"]]}}, "func": {"from_file": {"(<UsernamePasswordAuth>, ?) -> UsernamePasswordAuth": [[137, "    def from_file(cls, f):"]]}, "to_file": {"(UsernamePasswordAuth, ?) -> None": [[144, "    def to_file(self, f):"]]}, "__init__": {"? -> ?": [[124, "    def __init__(self, ver, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthResponse": {"var": {"__slots__": {"(str, str)": [[152, "    __slots__ = (\"ver\", \"status\")"]]}}, "func": {"__init__": {"? -> ?": [[154, "    def __init__(self, ver, status):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth.to_file": {"param": {"f": {"?": [[144, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ServerGreeting.to_fi": {"param": {"self": {"ServerGreeting": [[117, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthRespons": {"func": {"from_file": {"(<UsernamePasswordAuthResponse>, ?) -> UsernamePasswordAuthResponse": [[166, "    def from_file(cls, f):"]]}, "to_file": {"(UsernamePasswordAuthResponse, ?) -> None": [[170, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ServerGreeting.__init__": {"param": {"self": {"ServerGreeting": [[96, "    def __init__(self, ver, method):"]]}, "ver": {"?": [[96, "    def __init__(self, ver, method):"]]}, "method": {"?": [[96, "    def __init__(self, ver, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.from_file": {"param": {"f": {"?": [[77, "    def from_file(cls, f, fail_early=False):"]]}, "cls": {"<ClientGreeting>": [[77, "    def from_file(cls, f, fail_early=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Messag": {"func": {"from_file": {"(<Message>, Reader) -> Message / (<Message>, ?) -> Message": [[191, "    def from_file(cls, f):"]]}, "to_file": {"(Message, Writer) -> None / (Message, ?) -> None": [[217, "    def to_file(self, f):"]]}, "assert_socks5": {"Message -> None": [[183, "    def assert_socks5(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ServerGreeting.to_file": {"param": {"f": {"?": [[117, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthResponse.__init__": {"param": {"status": {"?": [[154, "    def __init__(self, ver, status):"]]}, "self": {"UsernamePasswordAuthResponse": [[154, "    def __init__(self, ver, status):"]]}, "ver": {"?": [[154, "    def __init__(self, ver, status):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Message.to_fi": {"param": {"self": {"Message": [[217, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth.to_fi": {"param": {"self": {"UsernamePasswordAuth": [[144, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ServerGreeting.from_file": {"param": {"f": {"Reader": [[113, "    def from_file(cls, f):"]]}, "cls": {"<ServerGreeting>": [[113, "    def from_file(cls, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Message.__init__": {"param": {"msg": {"int": [[177, "    def __init__(self, ver, msg, atyp, addr):"]]}, "atyp": {"int": [[177, "    def __init__(self, ver, msg, atyp, addr):"]]}, "self": {"Message": [[177, "    def __init__(self, ver, msg, atyp, addr):"]]}, "ver": {"int": [[177, "    def __init__(self, ver, msg, atyp, addr):"]]}, "addr": {"(str, int)": [[177, "    def __init__(self, ver, msg, atyp, addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.Message": {"var": {"__slots__": {"(str, str, str, str)": [[175, "    __slots__ = (\"ver\", \"msg\", \"atyp\", \"addr\")"]]}}, "func": {"__init__": {"? -> ?": [[177, "    def __init__(self, ver, msg, atyp, addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.from_f": {"var": {"client_greeting": {"ClientGreeting": [[82, "        client_greeting = cls(ver, [])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.to_file": {"param": {"f": {"Writer": [[88, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.assert_socks5": {"var": {"guess": {"str": [[67, "                guess = \"Probably not a SOCKS request but a regular HTTP request. \""], [69, "                guess = \"\""]]}}, "param": {"self": {"ClientGreeting": [[64, "    def assert_socks5(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.ClientGreeting.to_fi": {"param": {"self": {"ClientGreeting": [[88, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuthResponse.to_fi": {"param": {"self": {"UsernamePasswordAuthResponse": [[170, "    def to_file(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.socks.UsernamePasswordAuth.from_file": {"var": {"password": {"?": [[141, "        password = f.safe_read(plen)"]]}}, "param": {"f": {"?": [[137, "    def from_file(cls, f):"]]}, "cls": {"<UsernamePasswordAuth>": [[137, "    def from_file(cls, f):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_json.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_json.test_view_json": {"var": {"v": {"?": [[31, "    v = full_eval(json.ViewJSON())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_json.test_view_json_doesnt_crash": {"var": {"v": {"?": [[42, "    v = full_eval(json.ViewJSON())"]]}}, "param": {"data": {"?": [[41, "def test_view_json_doesnt_crash(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy": {"func": {"test_view_json_doesnt_crash": {"? -> None": [[41, "def test_view_json_doesnt_crash(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.c": {"func": {"test_view_json": {"() -> None": [[30, "def test_view_json():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentview": {"func": {"test_format_json": {"() -> None": [[16, "def test_format_json():"]]}, "test_parse_json": {"() -> None": [[8, "def test_parse_json():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/data.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils": {"var": {"pkg_data": {"Data": [[36, "pkg_data = Data(__name__).push(\"..\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.data.Data.push": {"var": {"dirname": {"?": [[18, "        dirname = os.path.normpath(os.path.join(self.dirname, subpath))"]]}, "ret": {"Data": [[19, "        ret = Data(self.name)"]]}}, "param": {"self": {"Data": [[14, "    def push(self, subpath):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.data.D": {"var": {"fullpath": {"?": [[30, "        fullpath = os.path.normpath(os.path.join(self.dirname, path))"]]}}, "param": {"path": {"str": [[23, "    def path(self, path):"]]}, "subpath": {"str": [[14, "    def push(self, subpath):"]]}}, "func": {"path": {"(Data, str) -> None": [[23, "    def path(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.d": {"class": {"Data": {"<Data>": [[6, "class Data:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.data.Data": {"func": {"push": {"(Data, str) -> Data": [[14, "    def push(self, subpath):"]]}, "__init__": {"? -> ?": [[8, "    def __init__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.data.Data.path": {"param": {"self": {"Data": [[23, "    def path(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.data.Data.__init__": {"var": {"dirname": {"?": [[11, "        dirname = os.path.dirname(inspect.getsourcefile(m))"]]}, "m": {"?": [[10, "        m = importlib.import_module(name)"]]}}, "param": {"self": {"Data": [[8, "    def __init__(self, name):"]]}, "name": {"?": [[8, "    def __init__(self, name):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/response.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.__init__": {"param": {"self": {"{<Response> | Response}": [[56, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Resp": {"func": {"reason": {"{? -> ? | str}": [[139, "    def reason(self, reason):"]], "Response -> str": [[126, "    def reason(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.r": {"class": {"ResponseData": {"<ResponseData>": [[17, "class ResponseData(message.MessageData):"]]}, "Response": {"<Response>": [[50, "class Response(message.Message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.ref": {"var": {"set_cookie_header": {"?": [[201, "        for set_cookie_header in self.headers.get_all(\"set-cookie\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.status_cod": {"param": {"self": {"Response": [[115, "    def status_code(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.ResponseData.__init__": {"var": {"content": {"None": [[24, "        content=None,"]]}, "headers": {"Headers": [[34, "            headers = nheaders.Headers(headers)"]], "()": [[23, "        headers=(),"]]}, "self": {"ResponseData": [[19, "        self,"]]}, "trailers": {"Headers": [[38, "            trailers = nheaders.Headers(trailers)"]], "None": [[25, "        trailers=None,"]]}, "reason": {"None": [[22, "        reason=None,"]], "str": [[32, "            reason = reason.encode(\"ascii\", \"strict\")"]]}}, "param": {"content": {"None": [[28, "    ):"]]}, "headers": {"()": [[28, "    ):"]]}, "self": {"ResponseData": [[28, "    ):"]]}, "trailers": {"None": [[28, "    ):"]]}, "reason": {"None": [[28, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response._get_cookies": {"var": {"h": {"?": [[143, "        h = self.headers.get_all(\"set-cookie\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.ResponseData.__ini": {"var": {"status_code": {"?": [[21, "        status_code,"]]}}, "param": {"status_code": {"?": [[28, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response._set_cookies": {"var": {"header": {"str": [[153, "            header = cookies.format_set_cookie_header([(k, v[0], v[1])])"]]}, "k": {"?": [[152, "        for k, v in value:"]]}}, "param": {"value": {"?": [[150, "    def _set_cookies(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.__repr__": {"var": {"details": {"str": [[62, "            details = \"{}, {}\".format("], [67, "            details = \"no content\""]]}}, "param": {"self": {"Response": [[60, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Respons": {"func": {"make": {"(<Response>, int, str, dict) -> Response / (<Response>, int, str, ()) -> Response": [[75, "    def make("]]}, "__repr__": {"Response -> str": [[60, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.cooki": {"param": {"self": {"Response": [[158, "    def cookies(self) -> multidict.MultiDictView:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response._get_cooki": {"param": {"self": {"Response": [[142, "    def _get_cookies(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.ResponseData": {"var": {"http_version": {"{(?, int, ?, Headers, None, None, int) | (HTTPResponse, ?, ?, ?, ?, ?, None) | (HTTPResponse, ?, int, str, Headers, str, None) | (HTTPResponse, str, ?, ?, Headers, str, None) | (HTTPResponse, str, int, ?, ?, ?, None) | (HTTPResponse, str, int, ?, Headers, str, None) | (HTTPResponse, str, int, str, Headers, str, None) | (str, int) | (str, int, ?, (), None) | (str, int, str, Headers, _HTTP2Message -> ?) | (str, int, str, Headers, str) | (str, int, str, dict, None, None) | ({HTTPResponse | str}, {int | str}, {int | str}, {Headers | str}, Headers, str, int)}": [[20, "        http_version,"]], "str": [[30, "            http_version = http_version.encode(\"ascii\", \"strict\")"]]}}, "param": {"http_version": {"{(?, int, ?, Headers, None, None, int) | (HTTPResponse, ?, ?, ?, ?, ?, None) | (HTTPResponse, ?, int, str, Headers, str, None) | (HTTPResponse, str, ?, ?, Headers, str, None) | (HTTPResponse, str, int, ?, ?, ?, None) | (HTTPResponse, str, int, ?, Headers, str, None) | (HTTPResponse, str, int, str, Headers, str, None) | (str, int) | (str, int, ?, (), None) | (str, int, str, Headers, _HTTP2Message -> ?) | (str, int, str, Headers, str) | (str, int, str, dict, None, None) | ({HTTPResponse | str}, {int | str}, {int | str}, {Headers | str}, Headers, str, int)}": [[28, "    ):"]]}}, "func": {"__init__": {"? -> ?": [[18, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response": {"func": {"__init__": {"? -> ?": [[56, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.reason": {"param": {"self": {"Response": [[126, "    def reason(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response._get": {"var": {"all_cookies": {"[?]": [[144, "        all_cookies = cookies.parse_set_cookie_headers(h)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.make": {"var": {"cls": {"<Response>": [[76, "            cls,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Respon": {"var": {"refresh_headers": {"[str]": [[189, "        refresh_headers = ["]]}, "refreshed": {"?": [[205, "                refreshed = set_cookie_header"]], "str": [[203, "                refreshed = cookies.refresh_set_cookie_header(set_cookie_header, delta)"]]}}, "func": {"status_code": {"? -> ?": [[122, "    def status_code(self, status_code):"]], "Response -> None": [[115, "    def status_code(self):"]]}, "cookies": {"{? -> ? | [[{(str, CookieAttrs) | str}]]}": [[175, "    def cookies(self, value):"]], "Response -> MultiDictView": [[158, "    def cookies(self) -> multidict.MultiDictView:"]]}, "_set_cookies": {"(Response, ?) -> None": [[150, "    def _set_cookies(self, value):"]]}, "refresh": {"(Response, None) -> ? / (Response, int) -> ?": [[178, "    def refresh(self, now=None):"]]}, "_get_cookies": {"Response -> tuple": [[142, "    def _get_cookies(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response._set_cooki": {"param": {"self": {"Response": [[150, "    def _set_cookies(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.ResponseData.__in": {"var": {"timestamp_start": {"None": [[26, "        timestamp_start=None,"]]}}, "param": {"timestamp_start": {"None": [[28, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.ResponseD": {"var": {"timestamp_end": {"None": [[27, "        timestamp_end=None"]]}}, "param": {"timestamp_end": {"None": [[28, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response._set": {"var": {"cookie_headers": {"[str]": [[151, "        cookie_headers = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.mak": {"var": {"content": {"str": [[78, "            content: Union[bytes, str]=b\"\","]]}, "status_code": {"int": [[77, "            status_code: int=200,"]]}, "resp": {"Response": [[84, "        resp = cls("]]}, "headers": {"{() | dict}": [[79, "            headers: Union[Dict[str, AnyStr], Iterable[Tuple[bytes, bytes]]]=()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.response.Response.refresh": {"var": {"c": {"[str]": [[200, "        c = []"]]}, "d": {"?": [[196, "                d = parsedate_tz(self.headers[i])"]]}, "i": {"str": [[194, "        for i in refresh_headers:"]]}, "delta": {"int": [[188, "        delta = now - self.timestamp_start"]]}, "new": {"int": [[198, "                    new = mktime_tz(d) + delta"]]}, "now": {"int": [[187, "            now = time.time()"]]}}, "param": {"self": {"Response": [[178, "    def refresh(self, now=None):"]]}, "now": {"int": [[178, "    def refresh(self, now=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_save.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_tcp": {"var": {"sa": {"Save": [[34, "    sa = save.Save()"]]}, "tt": {"?": [[39, "        tt = tflow.ttcpflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save": {"func": {"rd": {"str -> list / ? -> list": [[27, "def rd(p):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_sav": {"func": {"test_websocket": {"? -> None": [[46, "def test_websocket(tmpdir):"]]}, "test_configure": {"? -> None": [[12, "def test_configure(tmpdir):"]]}, "test_tcp": {"? -> None": [[33, "def test_tcp(tmpdir):"]]}, "test_simple": {"? -> None": [[79, "def test_simple(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.rd": {"var": {"x": {"FlowReader": [[29, "        x = io.FlowReader(f)"]]}}, "param": {"p": {"str": [[27, "def rd(p):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_save_command": {"var": {"p": {"str": [[62, "        p = str(tmpdir.join(\"foo\"))"]]}, "sa": {"Save": [[60, "    sa = save.Save()"]]}, "v": {"View": [[73, "        v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_configure": {"var": {"sa": {"Save": [[13, "    sa = save.Save()"]]}}, "param": {"tmpdir": {"?": [[12, "def test_configure(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_websocke": {"param": {"tmpdir": {"?": [[46, "def test_websocket(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy": {"func": {"test_save_command": {"? -> None": [[59, "def test_save_command(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_simple": {"var": {"p": {"str": [[82, "        p = str(tmpdir.join(\"foo\"))"]]}, "sa": {"Save": [[80, "    sa = save.Save()"]]}, "f": {"?": [[86, "        f = tflow.tflow(resp=True)"], [93, "        f = tflow.tflow()"]]}}, "param": {"tmpdir": {"?": [[79, "def test_simple(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_websocket": {"var": {"p": {"str": [[49, "        p = str(tmpdir.join(\"foo\"))"]]}, "sa": {"Save": [[47, "    sa = save.Save()"]]}, "f": {"?": [[52, "        f = tflow.twebsocketflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_tc": {"var": {"p": {"str": [[36, "        p = str(tmpdir.join(\"foo\"))"]]}}, "param": {"tmpdir": {"?": [[33, "def test_tcp(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_save.test_save_comman": {"param": {"tmpdir": {"?": [[59, "def test_save_command(tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/configure.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.configure.OptionAddon.load": {"param": {"self": {"OptionAddon": [[7, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.configure.OptionAddon.configur": {"param": {"self": {"OptionAddon": [[15, "    def configure(self, updates):"]]}, "updates": {"?": [[15, "    def configure(self, updates):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.configure.OptionAdd": {"func": {"configure": {"(OptionAddon, ?) -> None": [[15, "    def configure(self, updates):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.configure": {"var": {"addons": {"[OptionAddon]": [[18, "addons = ["]]}}, "class": {"OptionAddon": {"<OptionAddon>": [[6, "class OptionAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.configure.OptionAddon": {"param": {"loader": {"?": [[7, "    def load(self, loader):"]]}}, "func": {"load": {"(OptionAddon, ?) -> None": [[7, "    def load(self, loader):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/stickyauth.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth.configur": {"param": {"self": {"StickyAuth": [[19, "    def configure(self, updated):"]]}, "updated": {"?": [[19, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth": {"param": {"loader": {"?": [[13, "    def load(self, loader):"]]}}, "func": {"load": {"(StickyAuth, ?) -> None": [[13, "    def load(self, loader):"]]}, "request": {"(StickyAuth, ?) -> None": [[31, "    def request(self, flow):"]]}, "configure": {"(StickyAuth, ?) -> None": [[19, "    def configure(self, updated):"]]}, "__init__": {"? -> ?": [[9, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth.configure": {"var": {"flt": {"None": [[22, "                flt = flowfilter.parse(ctx.options.stickyauth)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth.request": {"param": {"self": {"StickyAuth": [[31, "    def request(self, flow):"]]}, "flow": {"?": [[31, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth.reque": {"var": {"host": {"?": [[33, "            host = flow.request.host"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth.load": {"param": {"self": {"StickyAuth": [[13, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickya": {"class": {"StickyAuth": {"<StickyAuth>": [[8, "class StickyAuth:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.stickyauth.StickyAuth.__init__": {"param": {"self": {"StickyAuth": [[9, "    def __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/base.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Value.freez": {"param": {"self": {"{FixedLengthValue | Value}": [[435, "    def freeze(self, settings):"]]}, "settings": {"?": [[435, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.FixedLengthV": {"func": {"values": {"(FixedLengthValue, ?) -> [?]": [[464, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Settings.__init__": {"var": {"self": {"Settings": [[16, "        self,"]]}, "protocol": {"None": [[22, "        protocol=None,"]]}, "staticdir": {"None": [[18, "        staticdir=None,"]]}}, "param": {"self": {"Settings": [[23, "    ):"]]}, "protocol": {"None": [[23, "    ):"]]}, "staticdir": {"None": [[23, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._Component.string": {"param": {"self": {"_Component": [[272, "    def string(self, settings=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolean.spec": {"param": {"self": {"Boolean": [[505, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Settings": {"func": {"__init__": {"? -> ?": [[15, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._TokValueLiteral.__init__": {"param": {"self": {"{TokValueLiteral | TokValueNakedLiteral | _TokValueLiteral}": [[111, "    def __init__(self, val):"]]}, "val": {"str": [[111, "    def __init__(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.IntField.ex": {"var": {"parts": {"[?]": [[528, "        parts = [pp.CaselessLiteral(i) for i in cls.names.keys()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolea": {"func": {"__init__": {"? -> ?": [[489, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue.ex": {"var": {"parts": {"[?]": [[355, "        parts = [pp.CaselessLiteral(i) for i in cls.options]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.__init__": {"var": {"unit": {"str": [[157, "            unit = \"b\""]]}}, "param": {"datatype": {"str": [[155, "    def __init__(self, usize, unit, datatype):"]]}, "self": {"TokValueGenerate": [[155, "    def __init__(self, usize, unit, datatype):"]]}, "unit": {"str": [[155, "    def __init__(self, usize, unit, datatype):"]]}, "usize": {"int": [[155, "    def __init__(self, usize, unit, datatype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiteral.freez": {"param": {"self": {"CaselessLiteral": [[327, "    def freeze(self, settings_):"]]}, "settings_": {"?": [[327, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token.__repr__": {"param": {"self": {"Token": [[105, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._Component": {"func": {"values": {"(_Component, dict) -> None / (_Component, ?) -> None": [[266, "    def values(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFile": {"func": {"__init__": {"? -> ?": [[199, "    def __init__(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueLiteral.expr": {"var": {"e": {"?": [[128, "        e = v_literal.copy()"]]}}, "param": {"cls": {"<TokValueLiteral>": [[127, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiter": {"func": {"values": {"(CL, Settings) -> str / (CaselessLiteral, ?) -> ?": [[321, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue.freez": {"param": {"self": {"OptionsOrValue": [[374, "    def freeze(self, settings):"]]}, "settings": {"?": [[374, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Bool": {"var": {"name": {"str": [[487, "    name = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue.spec": {"var": {"s": {"?": [[369, "        s = self.value.spec()"], [371, "            s = s[1:-1].lower()"]]}}, "param": {"self": {"OptionsOrValue": [[368, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueNakedLiteral.expr": {"var": {"e": {"?": [[146, "        e = v_naked_literal.copy()"]]}}, "param": {"cls": {"<TokValueNakedLiteral>": [[145, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueG": {"func": {"get_generator": {"(TokValueGenerate, ?) -> ? / (TokValueGenerate, Settings) -> ?": [[163, "    def get_generator(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.KeyValue.expr": {"var": {"e": {"?": [[291, "        e = pp.Literal(cls.preamble).suppress()"]]}}, "param": {"cls": {"<KeyValue>": [[290, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.IntField.__init__": {"param": {"self": {"IntField": [[518, "    def __init__(self, value):"]]}, "value": {"?": [[518, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueLiteral.spec": {"var": {"inner": {"str": [[137, "        inner = strutils.bytes_to_escaped_str(self.val)"], [138, "        inner = inner.replace(r\"'\", r\"\\x27\")"]]}}, "param": {"self": {"TokValueLiteral": [[136, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue.__init__": {"var": {"i": {"?": [[345, "            for i in self.options:"]]}, "value": {"TokValueLiteral": [[349, "                    value = TokValueLiteral(i)"]]}}, "param": {"self": {"OptionsOrValue": [[339, "    def __init__(self, value):"]]}, "value": {"?": [[339, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFile.expr": {"var": {"e": {"?": [[204, "        e = pp.Literal(\"<\").suppress()"], [205, "        e = e + v_naked_literal"]]}}, "param": {"cls": {"<TokValueFile>": [[203, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._Component.str": {"param": {"settings": {"None": [[272, "    def string(self, settings=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.freez": {"param": {"self": {"TokValueGenerate": [[166, "    def freeze(self, settings):"]]}, "settings": {"Settings": [[166, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiteral.expr": {"var": {"spec": {"?": [[317, "        spec = pp.CaselessLiteral(cls.TOK)"], [318, "        spec = spec.setParseAction(lambda x: cls(*x))"]]}}, "param": {"cls": {"<CaselessLiteral>": [[316, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFil": {"func": {"expr": {"<TokValueFile> -> None": [[203, "    def expr(cls):"]]}, "get_generator": {"(TokValueFile, ?) -> None": [[211, "    def get_generator(self, settings):"]]}, "spec": {"TokValueFile -> str": [[227, "    def spec(self):"]]}, "freeze": {"(TokValueFile, ?) -> TokValueFile": [[208, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Value": {"func": {"__init__": {"? -> ?": [[419, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Value.valu": {"param": {"self": {"{<Value> | Value}": [[429, "    def values(self, settings):"]]}, "settings": {"FixedLengthValue": [[429, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.IntField.valu": {"param": {"self": {"IntField": [[536, "    def values(self, settings):"]]}, "settings": {"?": [[536, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token": {"var": {"__metaclass__": {"?": [[70, "    __metaclass__ = abc.ABCMeta"]]}}, "func": {"expr": {"<Token> -> None": [[73, "    def expr(cls):  # pragma: no cover"]]}, "resolve": {"(Token, ?, ?) -> Token": [[95, "    def resolve(self, settings_, msg_):"]]}, "spec": {"Token -> None": [[80, "    def spec(self):  # pragma: no cover"]]}, "__repr__": {"Token -> None": [[105, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.b": {"class": {"CaselessLiteral": {"<CaselessLiteral>": [[306, "class CaselessLiteral(_Component):"]]}, "OptionsOrValue": {"<OptionsOrValue>": [[331, "class OptionsOrValue(_Component):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token.expr": {"param": {"cls": {"<Token>": [[73, "    def expr(cls):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.byt": {"param": {"self": {"TokValueGenerate": [[160, "    def bytes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.FixedLengthValue.values": {"var": {"l": {"int": [[466, "        l = sum(len(i) for i in ret)"]]}, "ret": {"[?]": [[465, "        ret = Value.values(self, settings)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.V": {"func": {"values": {"(Value, ?) -> [?] / (<Value>, FixedLengthValue) -> [?]": [[429, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.FixedLengthValue": {"func": {"__init__": {"? -> ?": [[447, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.spec": {"var": {"s": {"?": [[189, "        s = \"@%s\" % self.usize"]]}}, "param": {"self": {"TokValueGenerate": [[188, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token.spec": {"param": {"self": {"Token": [[80, "    def spec(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolean": {"func": {"expr": {"<Boolean> -> None": [[493, "    def expr(cls):"]]}, "spec": {"Boolean -> ?": [[505, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token.unique_nam": {"param": {"self": {"Token": [[87, "    def unique_name(self) -> typing.Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Value.expr": {"var": {"e": {"?": [[424, "        e = (TokValue | TokNakedValue)"], [426, "            e = pp.Literal(cls.preamble).suppress() + e"]]}}, "param": {"cls": {"<Value>": [[423, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._TokValueLiteral.get_generator": {"param": {"self": {"_TokValueLiteral": [[114, "    def get_generator(self, settings_):"]]}, "settings_": {"?": [[114, "    def get_generator(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.freeze": {"var": {"g": {"?": [[167, "        g = self.get_generator(settings)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._TokValueLiteral.freez": {"param": {"self": {"_TokValueLiteral": [[117, "    def freeze(self, settings_):"]]}, "settings_": {"?": [[117, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._Component.valu": {"param": {"self": {"_Component": [[266, "    def values(self, settings):  # pragma: no cover"]]}, "settings": {"dict": [[266, "    def values(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.KeyValue.__init__": {"param": {"self": {"{KeyValue | TKeyValue}": [[286, "    def __init__(self, key, value):"]]}, "value": {"?": [[286, "    def __init__(self, key, value):"]]}, "key": {"?": [[286, "    def __init__(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.IntField.expr": {"var": {"m": {"?": [[529, "        m = pp.MatchFirst(parts)"]]}, "spec": {"?": [[530, "        spec = m | v_integer.copy()"], [531, "        spec = spec.setParseAction(lambda x: cls(*x))"], [533, "            spec = pp.Literal(cls.preamble).suppress() + spec"]]}}, "param": {"cls": {"<IntField>": [[527, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.FixedLengthValue.valu": {"param": {"self": {"FixedLengthValue": [[464, "    def values(self, settings):"]]}, "settings": {"?": [[464, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFile.freez": {"param": {"self": {"TokValueFile": [[208, "    def freeze(self, settings_):"]]}, "settings_": {"?": [[208, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integer.freez": {"param": {"self": {"Integer": [[408, "    def freeze(self, settings_):"]]}, "settings_": {"?": [[408, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Valu": {"var": {"preamble": {"str": [[417, "    preamble = \"\""]]}}, "func": {"expr": {"<Value> -> None": [[423, "    def expr(cls):"]]}, "spec": {"FixedLengthValue -> ? / Value -> ?": [[432, "    def spec(self):"]]}, "freeze": {"(FixedLengthValue, ?) -> ? / (Value, ?) -> ?": [[435, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerat": {"func": {"expr": {"<TokValueGenerate> -> None": [[171, "    def expr(cls):"]]}, "spec": {"TokValueGenerate -> str": [[188, "    def spec(self):"]]}, "freeze": {"(TokValueGenerate, ?) -> TokValueLiteral / (TokValueGenerate, Settings) -> TokValueLiteral": [[166, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integer": {"func": {"values": {"(Integer, ?) -> [?]": [[402, "    def values(self, settings):"]]}, "spec": {"Integer -> ?": [[405, "    def spec(self):"]]}, "__init__": {"? -> ?": [[382, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue": {"func": {"__init__": {"? -> ?": [[339, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Value.__init__": {"param": {"self": {"{<Value> | Value}": [[419, "    def __init__(self, value):"]]}, "value": {"FixedLengthValue": [[419, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue.expr": {"var": {"m": {"?": [[356, "        m = pp.MatchFirst(parts)"]]}, "spec": {"?": [[357, "        spec = m | TokValue.copy()"], [358, "        spec = spec.setParseAction(lambda x: cls(*x))"], [360, "            spec = pp.Literal(cls.preamble).suppress() + spec"]]}}, "param": {"cls": {"<OptionsOrValue>": [[354, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integer.expr": {"var": {"e": {"?": [[397, "        e = v_integer.copy()"], [399, "            e = pp.Literal(cls.preamble).suppress() + e"]]}}, "param": {"cls": {"<Integer>": [[396, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integ": {"var": {"preamble": {"str": [[380, "    preamble = \"\""]]}}, "func": {"expr": {"<Integer> -> None": [[396, "    def expr(cls):"]]}, "freeze": {"(Integer, ?) -> Integer": [[408, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.bas": {"var": {"v_literal": {"?": [[40, "v_literal = pp.MatchFirst("]]}, "v_integer": {"?": [[35, "v_integer = pp.Word(pp.nums)\\"]]}, "TokValue": {"?": [[231, "TokValue = pp.MatchFirst("]]}, "TokNakedValue": {"?": [[240, "TokNakedValue = pp.MatchFirst("]]}, "Sep": {"?": [[32, "Sep = pp.Optional(pp.Literal(\":\")).suppress()"]]}, "v_naked_literal": {"?": [[55, "v_naked_literal = pp.MatchFirst("]]}}, "class": {"Boolean": {"<Boolean>": [[480, "class Boolean(_Component):"]]}, "TokValueNakedLiteral": {"<TokValueNakedLiteral>": [[142, "class TokValueNakedLiteral(_TokValueLiteral):"]]}, "FixedLengthValue": {"<FixedLengthValue>": [[439, "class FixedLengthValue(Value):"]]}, "_Component": {"<_Component>": [[259, "class _Component(Token):"]]}, "Value": {"<Value>": [[412, "class Value(_Component):"]]}, "TokValueGenerate": {"<TokValueGenerate>": [[153, "class TokValueGenerate(Token):"]]}, "IntField": {"<IntField>": [[509, "class IntField(_Component):"]]}, "Token": {"<Token>": [[63, "class Token:"]]}, "_TokValueLiteral": {"<_TokValueLiteral>": [[109, "class _TokValueLiteral(Token):"]]}, "KeyValue": {"<KeyValue>": [[279, "class KeyValue(_Component):"]]}, "TokValueLiteral": {"<TokValueLiteral>": [[121, "class TokValueLiteral(_TokValueLiteral):"]]}, "Integer": {"<Integer>": [[378, "class Integer(_Component):"]]}, "TokValueFile": {"<TokValueFile>": [[197, "class TokValueFile(Token):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.KeyValue.freez": {"param": {"self": {"KeyValue": [[300, "    def freeze(self, settings):"]]}, "settings": {"?": [[300, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.get_generator": {"param": {"self": {"TokValueGenerate": [[163, "    def get_generator(self, settings_):"]]}, "settings_": {"Settings": [[163, "    def get_generator(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValue.valu": {"param": {"self": {"OptionsOrValue": [[363, "    def values(self, settings):"]]}, "settings": {"?": [[363, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueNakedLiteral.spec": {"param": {"self": {"TokValueNakedLiteral": [[149, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Settings.__ini": {"var": {"request_host": {"None": [[20, "        request_host=None,"]]}, "websocket_key": {"None": [[21, "        websocket_key=None,"]]}}, "param": {"request_host": {"None": [[23, "    ):"]]}, "websocket_key": {"None": [[23, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiteral": {"func": {"expr": {"<CaselessLiteral> -> None": [[316, "    def expr(cls):"]]}, "spec": {"CaselessLiteral -> ?": [[324, "    def spec(self):"]]}, "__init__": {"? -> ?": [[312, "    def __init__(self, value):"]]}, "freeze": {"(CaselessLiteral, ?) -> CaselessLiteral": [[327, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate.expr": {"var": {"u": {"?": [[174, "        u = functools.reduce("]]}, "s": {"?": [[180, "        s = pp.Literal(\",\").suppress()"]]}, "e": {"?": [[172, "        e = pp.Literal(\"@\").suppress() + v_integer"], [178, "        e = e + pp.Optional(u, default=None)"]]}}, "param": {"cls": {"<TokValueGenerate>": [[171, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.KeyValue": {"func": {"__init__": {"? -> ?": [[286, "    def __init__(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token.resolve": {"param": {"msg_": {"?": [[95, "    def resolve(self, settings_, msg_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrValu": {"var": {"preamble": {"str": [[336, "    preamble = \"\""]]}}, "func": {"expr": {"<OptionsOrValue> -> None": [[354, "    def expr(cls):"]]}, "spec": {"OptionsOrValue -> None": [[368, "    def spec(self):"]]}, "freeze": {"(OptionsOrValue, ?) -> ?": [[374, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._TokValueLiteral": {"func": {"freeze": {"(_TokValueLiteral, ?) -> _TokValueLiteral": [[117, "    def freeze(self, settings_):"]]}, "__init__": {"? -> ?": [[111, "    def __init__(self, val):"]]}, "get_generator": {"(_TokValueLiteral, ?) -> None": [[114, "    def get_generator(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiteral.__init__": {"param": {"self": {"{CL | CaselessLiteral}": [[312, "    def __init__(self, value):"]]}, "value": {"str": [[312, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueNakedLiteral": {"func": {"expr": {"<TokValueNakedLiteral> -> None": [[145, "    def expr(cls):"]]}, "spec": {"TokValueNakedLiteral -> str": [[149, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolean.ex": {"func": {"parse": {"(?, ?, ?) -> Boolean": [[497, "        def parse(s_, loc_, toks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.FixedLengthValu": {"var": {"preamble": {"str": [[444, "    preamble = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiteral.valu": {"param": {"self": {"{CL | CaselessLiteral}": [[321, "    def values(self, settings):"]]}, "settings": {"Settings": [[321, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenerate": {"func": {"__init__": {"? -> ?": [[155, "    def __init__(self, usize, unit, datatype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueLiteral": {"func": {"expr": {"<TokValueLiteral> -> None": [[127, "    def expr(cls):"]]}, "parseAction": {"(<TokValueLiteral>, ?) -> TokValueLiteral": [[132, "    def parseAction(cls, x):"]]}, "spec": {"TokValueLiteral -> str": [[136, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.KeyValue.spec": {"param": {"self": {"KeyValue": [[297, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.ba": {"var": {"TokOffset": {"?": [[250, "TokOffset = pp.MatchFirst("]]}}, "class": {"Settings": {"<Settings>": [[13, "class Settings:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Token.resolv": {"param": {"self": {"Token": [[95, "    def resolve(self, settings_, msg_):"]]}, "settings_": {"?": [[95, "    def resolve(self, settings_, msg_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.IntField": {"var": {"max": {"int": [[515, "    max = 16"]]}, "preamble": {"str": [[516, "    preamble = \"\""]]}}, "func": {"expr": {"<IntField> -> None": [[527, "    def expr(cls):"]]}, "values": {"(IntField, ?) -> [str]": [[536, "    def values(self, settings):"]]}, "spec": {"IntField -> ?": [[539, "    def spec(self):"]]}, "__init__": {"? -> ?": [[518, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Setting": {"var": {"unconstrained_file_access": {"?": [[19, "        unconstrained_file_access=False,"]]}, "is_client": {"?": [[17, "        is_client=False,"]]}}, "param": {"unconstrained_file_access": {"?": [[23, "    ):"]]}, "is_client": {"?": [[23, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base._Compone": {"func": {"string": {"(_Component, None) -> str": [[272, "    def string(self, settings=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.OptionsOrV": {"func": {"values": {"(OptionsOrValue, ?) -> [?]": [[363, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolean.__init__": {"param": {"self": {"{Boolean | TBoolean}": [[489, "    def __init__(self, value):"]]}, "value": {"bool": [[489, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.IntField.spec": {"param": {"self": {"IntField": [[539, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFile.__init__": {"param": {"path": {"?": [[199, "    def __init__(self, path):"]]}, "self": {"TokValueFile": [[199, "    def __init__(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFile.get_generator": {"var": {"s": {"str": [[214, "        s = os.path.expanduser(self.path)"], [215, "        s = os.path.normpath("]]}, "uf": {"?": [[218, "        uf = settings.unconstrained_file_access"]]}}, "param": {"self": {"TokValueFile": [[211, "    def get_generator(self, settings):"]]}, "settings": {"?": [[211, "    def get_generator(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolean.expr": {"var": {"e": {"?": [[494, "        e = pp.Optional(pp.Literal(\"-\"), default=True)"]]}}, "param": {"cls": {"<Boolean>": [[493, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.FixedLengthValue.__init__": {"var": {"lenguess": {"int": [[451, "            lenguess = len(value.get_generator(Settings()))"]], "None": [[449, "        lenguess = None"]]}}, "param": {"self": {"FixedLengthValue": [[447, "    def __init__(self, value):"]]}, "value": {"?": [[447, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integer.__init__": {"var": {"outofbounds": {"int": [[384, "        outofbounds = any(["]]}, "v": {"int": [[383, "        v = int(value)"]]}}, "param": {"self": {"{BInt | Integer}": [[382, "    def __init__(self, value):"]]}, "value": {"int": [[382, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueFile.spec": {"param": {"self": {"TokValueFile": [[227, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.KeyValu": {"func": {"expr": {"<KeyValue> -> None": [[290, "    def expr(cls):"]]}, "spec": {"KeyValue -> ?": [[297, "    def spec(self):"]]}, "freeze": {"(KeyValue, ?) -> ?": [[300, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Value.spec": {"param": {"self": {"{FixedLengthValue | Value}": [[432, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Boolean.expr.parse": {"var": {"val": {"?": [[498, "            val = True"], [500, "                val = False"]]}}, "param": {"toks": {"?": [[497, "        def parse(s_, loc_, toks):"]]}, "s_": {"?": [[497, "        def parse(s_, loc_, toks):"]]}, "loc_": {"?": [[497, "        def parse(s_, loc_, toks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integer.spec": {"param": {"self": {"Integer": [[405, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Integer.valu": {"param": {"self": {"Integer": [[402, "    def values(self, settings):"]]}, "settings": {"?": [[402, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueGenera": {"func": {"bytes": {"TokValueGenerate -> int": [[160, "    def bytes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.TokValueLiteral.parseAction": {"var": {"v": {"TokValueLiteral": [[133, "        v = cls(*x)"]]}}, "param": {"x": {"?": [[132, "    def parseAction(cls, x):"]]}, "cls": {"<TokValueLiteral>": [[132, "    def parseAction(cls, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.CaselessLiteral.spec": {"param": {"self": {"CaselessLiteral": [[324, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.base.Tok": {"func": {"unique_name": {"Token -> None": [[87, "    def unique_name(self) -> typing.Optional[str]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/protocols/http.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol": {"func": {"read_request": {"(HTTPProtocol, None) -> Request": [[46, "    def read_request(self, lg=None):"]]}, "make_error_response": {"(HTTPProtocol, ?, ?) -> ?": [[11, "    def make_error_response(self, reason, body):"]]}, "__init__": {"? -> ?": [[8, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.read_request": {"param": {"lg": {"None": [[46, "    def read_request(self, lg=None):"]]}, "self": {"HTTPProtocol": [[46, "    def read_request(self, lg=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.make_error_respon": {"param": {"self": {"HTTPProtocol": [[11, "    def make_error_response(self, reason, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPPr": {"func": {"handle_http_connect": {"(HTTPProtocol, ?, ?) -> (None, dict)": [[14, "    def handle_http_connect(self, connect, lg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.handle_http_connect": {"var": {"s": {"str": [[41, "                s = str(v)"]]}}, "param": {"lg": {"?": [[14, "    def handle_http_connect(self, connect, lg):"]]}, "self": {"HTTPProtocol": [[14, "    def handle_http_connect(self, connect, lg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.handle_http_conn": {"var": {"cert": {"?": [[27, "                cert, key, chain_file_ = self.pathod_handler.server.ssloptions.get_cert("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http": {"class": {"HTTPProtocol": {"<HTTPProtocol>": [[7, "class HTTPProtocol:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.handle_http_": {"param": {"connect": {"?": [[14, "    def handle_http_connect(self, connect, lg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.make_error_response": {"param": {"body": {"?": [[11, "    def make_error_response(self, reason, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.make_error_resp": {"param": {"reason": {"?": [[11, "    def make_error_response(self, reason, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.__init__": {"param": {"self": {"HTTPProtocol": [[8, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http.HTTPProtocol.__ini": {"param": {"pathod_handler": {"?": [[8, "    def __init__(self, pathod_handler):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/anticomp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticomp.AntiComp.load": {"param": {"self": {"AntiComp": [[5, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.antic": {"class": {"AntiComp": {"<AntiComp>": [[4, "class AntiComp:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticomp.AntiComp": {"param": {"loader": {"?": [[5, "    def load(self, loader):"]]}}, "func": {"load": {"(AntiComp, ?) -> None": [[5, "    def load(self, loader):"]]}, "request": {"(AntiComp, ?) -> None": [[11, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticomp.AntiComp.request": {"param": {"self": {"AntiComp": [[11, "    def request(self, flow):"]]}, "flow": {"?": [[11, "    def request(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/test_jsondump.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_simp": {"param": {"self": {"TestJSONDump": [[30, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDum": {"func": {"echo_response": {"(TestJSONDump, ?, ?) -> str": [[14, "    def echo_response(self, request, context):"]]}, "test_http": {"(TestJSONDump, ?) -> None": [[56, "    def test_http(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_simpl": {"var": {"entry": {"?": [[38, "                entry = json.loads(inp.readline())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_simple": {"var": {"a": {"?": [[32, "            a = tctx.script(example_dir.path(\"complex/jsondump.py\"))"]]}, "path": {"str": [[33, "            path = str(tmpdir.join(\"jsondump.out\"))"]]}}, "param": {"tmpdir": {"?": [[30, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondu": {"var": {"example_dir": {"?": [[10, "example_dir = tutils.test_data.push(\"../examples\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_http": {"var": {"a": {"?": [[60, "                a = tctx.script(example_dir.path(\"complex/jsondump.py\"))"]]}}, "param": {"self": {"TestJSONDump": [[56, "    def test_http(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.flow": {"var": {"times": {"dict": [[19, "        times = dict("]]}}, "param": {"self": {"TestJSONDump": [[18, "    def flow(self, resp_content=b'message'):"]]}, "resp_content": {"str": [[18, "    def flow(self, resp_content=b'message'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsond": {"class": {"TestJSONDump": {"<TestJSONDump>": [[13, "class TestJSONDump:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDu": {"func": {"test_simple": {"(TestJSONDump, ?) -> None": [[30, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.echo_respon": {"param": {"self": {"TestJSONDump": [[14, "    def echo_response(self, request, context):"]]}, "request": {"?": [[14, "    def echo_response(self, request, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_contentencode": {"var": {"a": {"?": [[43, "            a = tctx.script(example_dir.path(\"complex/jsondump.py\"))"]]}, "path": {"str": [[44, "            path = str(tmpdir.join(\"jsondump.out\"))"]]}}, "param": {"tmpdir": {"?": [[41, "    def test_contentencode(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump": {"func": {"flow": {"(TestJSONDump, str) -> None": [[18, "    def flow(self, resp_content=b'message'):"]]}, "test_contentencode": {"(TestJSONDump, ?) -> None": [[41, "    def test_contentencode(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.echo_respons": {"param": {"context": {"?": [[14, "    def echo_response(self, request, context):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_contentencod": {"var": {"content": {"str": [[45, "            content = b\"foo\" + b\"\\xFF\" * 10"]]}, "entry": {"?": [[53, "                entry = json.loads(inp.readline())"]]}}, "param": {"self": {"TestJSONDump": [[41, "    def test_contentencode(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_jsondump.TestJSONDump.test_h": {"param": {"tmpdir": {"?": [[56, "    def test_http(self, tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/websockets/masker.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.masker.Masker": {"var": {"mask": {"?": [[22, "        mask = int.from_bytes((self.key * num_keys)[offset_mod:datalen +"]]}}, "func": {"__call__": {"(Masker, ?) -> None": [[26, "    def __call__(self, data):"]]}, "mask": {"(Masker, ?, ?) -> None / (Masker, int, ?) -> None": [[17, "    def mask(self, offset, data):"]]}, "__init__": {"? -> ?": [[13, "    def __init__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.masker.Masker.__call__": {"var": {"ret": {"None": [[27, "        ret = self.mask(self.offset, data)"]]}}, "param": {"self": {"Masker": [[26, "    def __call__(self, data):"]]}, "data": {"?": [[26, "    def __call__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.masker.Masker.__init__": {"param": {"self": {"Masker": [[13, "    def __init__(self, key):"]]}, "key": {"{object | str}": [[13, "    def __init__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.masker.Masker.mask": {"var": {"datalen": {"int": [[18, "        datalen = len(data)"]]}, "data": {"?": [[20, "        data = int.from_bytes(data, sys.byteorder)"]]}, "offset_mod": {"int": [[19, "        offset_mod = offset % 4"]]}}, "param": {"self": {"Masker": [[17, "    def mask(self, offset, data):"]]}, "data": {"?": [[17, "    def mask(self, offset, data):"]]}, "offset": {"int": [[17, "    def mask(self, offset, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.m": {"class": {"Masker": {"<Masker>": [[4, "class Masker:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.masker.Masker.ma": {"var": {"num_keys": {"int": [[21, "        num_keys = (datalen + offset_mod + 3) // 4"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/coretypes/test_basethread.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretyp": {"func": {"test_basethread": {"() -> None": [[5, "def test_basethread():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_basethread.test_basethread": {"var": {"t": {"BaseThread": [[6, "    t = basethread.BaseThread('foobar')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/proto/http_pb2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.proto.http_pb2": {"var": {"HTTPFlow": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_ADDRESS": {"?": [[379, "_ADDRESS = _descriptor.Descriptor("]]}, "_sym_db": {"?": [[13, "_sym_db = _symbol_database.Default()"]]}, "HTTPHeader": {"?": [[743, "HTTPHeader = _reflection.GeneratedProtocolMessageType('HTTPHeader', (_message.Message,), dict("]]}, "Address": {"?": [[750, "Address = _reflection.GeneratedProtocolMessageType('Address', (_message.Message,), dict("]]}, "_HTTPFLOW": {"?": [[28, "_HTTPFLOW = _descriptor.Descriptor("]]}, "_CLIENTCONNECTION": {"?": [[417, "_CLIENTCONNECTION = _descriptor.Descriptor("]]}, "HTTPRequest": {"?": [[722, "HTTPRequest = _reflection.GeneratedProtocolMessageType('HTTPRequest', (_message.Message,), dict("]]}, "_SERVERCONNECTION": {"?": [[532, "_SERVERCONNECTION = _descriptor.Descriptor("]]}, "TLSExtension": {"?": [[771, "TLSExtension = _reflection.GeneratedProtocolMessageType('TLSExtension', (_message.Message,), dict("]]}, "_HTTPRESPONSE": {"?": [[223, "_HTTPRESPONSE = _descriptor.Descriptor("]]}, "DESCRIPTOR": {"?": [[18, "DESCRIPTOR = _descriptor.FileDescriptor("]]}, "_HTTPREQUEST": {"?": [[115, "_HTTPREQUEST = _descriptor.Descriptor("]]}, "_HTTPHEADER": {"?": [[341, "_HTTPHEADER = _descriptor.Descriptor("]]}, "ServerConnection": {"?": [[764, "ServerConnection = _reflection.GeneratedProtocolMessageType('ServerConnection', (_message.Message,), dict("]]}, "HTTPResponse": {"?": [[729, "HTTPResponse = _reflection.GeneratedProtocolMessageType('HTTPResponse', (_message.Message,), dict("]]}, "ClientConnection": {"?": [[757, "ClientConnection = _reflection.GeneratedProtocolMessageType('ClientConnection', (_message.Message,), dict("]]}, "_HTTPERROR": {"?": [[303, "_HTTPERROR = _descriptor.Descriptor("]]}, "HTTPError": {"?": [[736, "HTTPError = _reflection.GeneratedProtocolMessageType('HTTPError', (_message.Message,), dict("]]}, "_TLSEXTENSION": {"?": [[654, "_TLSEXTENSION = _descriptor.Descriptor("]]}, "_b": {"str -> str": [[5, "_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))"]]}}, "param": {"HTTPFlow": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_ADDRESS": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_CLIENTCONNECTION": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_SERVERCONNECTION": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_HTTPRESPONSE": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_HTTPHEADER": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_HTTPERROR": {"?": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}, "_TLSEXTENSION": {"str -> str": [[715, "HTTPFlow = _reflection.GeneratedProtocolMessageType('HTTPFlow', (_message.Message,), dict("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/modes/transparent_proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.transparent_": {"class": {"TransparentProxy": {"<TransparentProxy>": [[6, "class TransparentProxy(protocol.Layer, protocol.ServerConnectionMixin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.transparent_proxy.TransparentProxy.__call__": {"var": {"layer": {"?": [[17, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"TransparentProxy": [[11, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.transparent_proxy.TransparentProxy": {"func": {"__call__": {"TransparentProxy -> ?": [[11, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[8, "    def __init__(self, ctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.transparent_proxy.TransparentProxy.__init__": {"param": {"self": {"TransparentProxy": [[8, "    def __init__(self, ctx):"]]}, "ctx": {"RootContext": [[8, "    def __init__(self, ctx):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/websocket-simple.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-simpl": {"func": {"websocket_message": {"? -> None": [[6, "def websocket_message(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-simple.websocket_message": {"param": {"flow": {"?": [[6, "def websocket_message(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.websocket-simple.websocket_": {"var": {"message": {"?": [[8, "    message = flow.messages[-1]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/contentview.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.content": {"var": {"view": {"ViewSwapCase": [[19, "view = ViewSwapCase()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.contentview.ViewSwapCase": {"func": {"__call__": {"(ViewSwapCase, ?) -> (str, None)": [[15, "    def __call__(self, data, **metadata) -> contentviews.TViewResult:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.contentv": {"class": {"ViewSwapCase": {"<ViewSwapCase>": [[11, "class ViewSwapCase(contentviews.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.contentview.ViewSwapCase.__call__": {"param": {"self": {"ViewSwapCase": [[15, "    def __call__(self, data, **metadata) -> contentviews.TViewResult:"]]}, "data": {"?": [[15, "    def __call__(self, data, **metadata) -> contentviews.TViewResult:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.contentview.ViewSwapCa": {"var": {"content_types": {"[str]": [[13, "    content_types = [\"text/plain\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.contentview": {"func": {"load": {"? -> None": [[22, "def load(l):"]]}, "done": {"() -> None": [[26, "def done():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.contentview.ViewSwapCas": {"var": {"name": {"str": [[12, "    name = \"swapcase\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/pathod/test_setupall.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall": {"class": {"Test": {"<Test>": [[5, "class Test:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.Test.test_simp": {"param": {"self": {"Test": [[24, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.Test.teardown_cla": {"param": {"cls": {"<Test>": [[17, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.Test.setup_cla": {"param": {"cls": {"<Test>": [[13, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.Test.setup": {"param": {"self": {"Test": [[20, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.Test.test_simple": {"var": {"url": {"?": [[26, "        url = self.d.p(\"200:b@100\")"]]}, "r": {"?": [[28, "        r = requests.put(url)"]]}, "log": {"?": [[35, "        log = self.d.last_log()[\"request\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.Test.test_two": {"param": {"self": {"Test": [[38, "    def test_two(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setupall.T": {"func": {"setup_class": {"<Test> -> None": [[13, "    def setup_class(cls):"]]}, "setup": {"Test -> None": [[20, "    def setup(self):"]]}, "teardown_class": {"<Test> -> None": [[17, "    def teardown_class(cls):"]]}, "test_simple": {"Test -> None": [[24, "    def test_simple(self):"]]}, "test_two": {"Test -> None": [[38, "    def test_two(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/http.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPFlow.copy": {"var": {"f": {"?": [[187, "        f = super().copy()"]]}}, "param": {"self": {"HTTPFlow": [[186, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse.wra": {"var": {"resp": {"HTTPResponse": [[129, "        resp = HTTPResponse("]]}}, "param": {"response": {"Response": [[125, "    def wrap(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequ": {"var": {"http_version": {"str": [[26, "            http_version,"]]}, "first_line_format": {"str": [[20, "            first_line_format,"]]}, "timestamp_end": {"None": [[31, "            timestamp_end=None,"]]}}, "param": {"http_version": {"str": [[33, "    ):"]]}, "first_line_format": {"str": [[33, "    ):"]]}, "timestamp_end": {"None": [[33, "    ):"]]}}, "func": {"set_state": {"(HTTPRequest, ?) -> None": [[58, "    def set_state(self, state):"]]}, "get_state": {"HTTPRequest -> None": [[53, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse.wrap": {"param": {"self": {"<HTTPResponse>": [[125, "    def wrap(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPFlow.__repr__": {"var": {"a": {"str": [[176, "        for a in (\"request\", \"response\", \"error\", \"client_conn\", \"server_conn\"):"]]}, "s": {"str": [[175, "        s = \"<HTTPFlow\""]]}}, "param": {"self": {"HTTPFlow": [[174, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.__init": {"var": {"is_replay": {"?": [[32, "            is_replay=False,"]]}}, "param": {"is_replay": {"?": [[33, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse": {"func": {"wrap": {"(<HTTPResponse>, Response) -> HTTPResponse / (<HTTPResponse>, ?) -> HTTPResponse / (<HTTPResponse>, None) -> HTTPResponse": [[125, "    def wrap(self, response):"]]}, "__init__": {"? -> ?": [[96, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.h": {"var": {"expect_continue_response": {"HTTPResponse": [[253, "expect_continue_response = HTTPResponse("]]}}, "func": {"make_connect_response": {"str -> HTTPResponse / ? -> HTTPResponse": [[241, "def make_connect_response(http_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRespo": {"var": {"timestamp_end": {"None": [[105, "            timestamp_end=None,"]]}}, "param": {"timestamp_end": {"None": [[107, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.__init__": {"var": {"trailers": {"None": [[29, "            trailers=None,"]]}, "self": {"HTTPRequest": [[19, "            self,"]]}, "port": {"{int | str}": [[24, "            port,"]]}, "content": {"str": [[28, "            content,"]]}, "headers": {"Headers": [[27, "            headers,"]]}, "host": {"{int | str}": [[23, "            host,"]]}, "path": {"str": [[25, "            path,"]]}, "scheme": {"str": [[22, "            scheme,"]]}, "method": {"str": [[21, "            method,"]]}}, "param": {"trailers": {"None": [[33, "    ):"]]}, "self": {"HTTPRequest": [[33, "    ):"]]}, "port": {"{int | str}": [[33, "    ):"]]}, "content": {"str": [[33, "    ):"]]}, "headers": {"Headers": [[33, "    ):"]]}, "host": {"{int | str}": [[33, "    ):"]]}, "path": {"str": [[33, "    ):"]]}, "scheme": {"str": [[33, "    ):"]]}, "method": {"str": [[33, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPR": {"var": {"http_version": {"str": [[98, "            http_version,"]]}}, "param": {"http_version": {"str": [[107, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest": {"func": {"wrap": {"(<HTTPRequest>, bool) -> HTTPRequest / (<HTTPRequest>, ?) -> HTTPRequest / (<HTTPRequest>, Request) -> HTTPRequest": [[64, "    def wrap(self, request):"]]}, "__hash__": {"HTTPRequest -> int": [[84, "    def __hash__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.make_error_resp": {"var": {"reason": {"?": [[200, "    reason = http.status_codes.RESPONSES.get(status_code, \"Unknown\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPFlow": {"var": {"_stateobject_attributes": {"?": [[166, "    _stateobject_attributes = flow.Flow._stateobject_attributes.copy()"]]}}, "param": {"client_conn": {"{ClientConnection | bool}": [[162, "    def __init__(self, client_conn, server_conn, live=None, mode=\"regular\"):"]]}}, "func": {"timestamp_start": {"HTTPFlow -> {? -> ? | int}": [[183, "    def timestamp_start(self) -> float:"]]}, "copy": {"HTTPFlow -> None": [[186, "    def copy(self):"]]}, "__repr__": {"HTTPFlow -> str": [[174, "    def __repr__(self):"]]}, "__init__": {"? -> ?": [[162, "    def __init__(self, client_conn, server_conn, live=None, mode=\"regular\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPReques": {"func": {"__init__": {"? -> ?": [[18, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.make_error_respon": {"var": {"status_code": {"int": [[196, "        status_code: int,"]]}, "message": {"str": [[197, "        message: str = \"\","]]}, "headers": {"Headers": [[198, "        headers: Optional[http.Headers] = None,"], [218, "        headers = http.Headers("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.get_stat": {"param": {"self": {"HTTPRequest": [[53, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.__in": {"var": {"timestamp_start": {"None": [[30, "            timestamp_start=None,"]]}}, "param": {"timestamp_start": {"None": [[33, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse.__ini": {"var": {"status_code": {"int": [[99, "            status_code,"]]}}, "param": {"status_code": {"int": [[107, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse.__init": {"var": {"is_replay": {"?": [[106, "            is_replay=False"]]}}, "param": {"is_replay": {"?": [[107, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.wrap": {"var": {"req": {"HTTPRequest": [[68, "        req = HTTPRequest("]]}}, "param": {"self": {"<HTTPRequest>": [[64, "    def wrap(self, request):"]]}, "request": {"{Request | bool}": [[64, "    def wrap(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.htt": {"class": {"HTTPResponse": {"<HTTPResponse>": [[88, "class HTTPResponse(http.Response):"]]}}, "func": {"make_error_response": {"(?, ?, None) -> HTTPResponse / (int, str, Headers) -> HTTPResponse / (int, str, None) -> HTTPResponse / (?, str, None) -> HTTPResponse": [[195, "def make_error_response("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.set_": {"var": {"state": {"?": [[59, "        state = state.copy()"]]}}, "param": {"state": {"?": [[58, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.set_stat": {"param": {"self": {"HTTPRequest": [[58, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPFlow.timestamp_start": {"param": {"self": {"HTTPFlow": [[183, "    def timestamp_start(self) -> float:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPFlow.__init": {"param": {"server_conn": {"{ServerConnection | bool}": [[162, "    def __init__(self, client_conn, server_conn, live=None, mode=\"regular\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.make_error_response": {"var": {"body": {"str": [[201, "    body = \"\"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse.__in": {"var": {"timestamp_start": {"None": [[104, "            timestamp_start=None,"]]}}, "param": {"timestamp_start": {"None": [[107, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPResponse.__init__": {"var": {"content": {"str": [[102, "            content,"]]}, "headers": {"Headers": [[101, "            headers,"]]}, "self": {"HTTPResponse": [[97, "            self,"]]}, "trailers": {"None": [[103, "            trailers=None,"]]}, "reason": {"str": [[100, "            reason,"]]}}, "param": {"content": {"str": [[107, "    ):"]]}, "headers": {"Headers": [[107, "    ):"]]}, "self": {"HTTPResponse": [[107, "    ):"]]}, "trailers": {"None": [[107, "    ):"]]}, "reason": {"str": [[107, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.__hash__": {"param": {"self": {"HTTPRequest": [[84, "    def __hash__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPRequest.get_": {"var": {"state": {"?": [[54, "        state = super().get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.make_connect_request": {"param": {"address": {"(str, int)": [[234, "def make_connect_request(address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.make_connec": {"param": {"http_version": {"str": [[241, "def make_connect_response(http_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http": {"class": {"HTTPRequest": {"<HTTPRequest>": [[10, "class HTTPRequest(http.Request):"]]}, "HTTPFlow": {"<HTTPFlow>": [[142, "class HTTPFlow(flow.Flow):"]]}}, "func": {"make_connect_request": {"? -> HTTPRequest / (str, int) -> HTTPRequest / (?, ?) -> HTTPRequest": [[234, "def make_connect_request(address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.http.HTTPFlow.__init__": {"param": {"self": {"HTTPFlow": [[162, "    def __init__(self, client_conn, server_conn, live=None, mode=\"regular\"):"]]}, "live": {"None": [[162, "    def __init__(self, client_conn, server_conn, live=None, mode=\"regular\"):"]]}, "mode": {"str": [[162, "    def __init__(self, client_conn, server_conn, live=None, mode=\"regular\"):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/tcp-simple.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.tcp-simple.tcp_": {"var": {"message": {"?": [[19, "    message = flow.messages[-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.tcp-simpl": {"func": {"tcp_message": {"? -> None": [[18, "def tcp_message(flow: tcp.TCPFlow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/grideditor/col_bytes.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Display.get_data": {"param": {"self": {"Display": [[31, "    def get_data(self) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Display.__init__": {"var": {"escaped": {"str": [[27, "        escaped = strutils.bytes_to_escaped_str(data)"]]}, "w": {"?": [[28, "        w = urwid.Text(escaped, wrap=\"any\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes": {"class": {"Column": {"<Column>": [[7, "class Column(base.Column):"]]}, "Edit": {"<Edit>": [[35, "class Edit(base.Cell):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Ed": {"func": {"__init__": {"? -> ?": [[36, "    def __init__(self, data: bytes) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Display": {"func": {"get_data": {"Display -> ?": [[31, "    def get_data(self) -> bytes:"]]}, "__init__": {"? -> ?": [[25, "    def __init__(self, data: bytes) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column.Edit": {"param": {"self": {"Column": [[11, "    def Edit(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column.Display": {"param": {"self": {"Column": [[8, "    def Display(self, data):"]]}, "data": {"?": [[8, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Edit.__init__": {"var": {"data": {"str": [[37, "        data = strutils.bytes_to_escaped_str(data)"]]}, "w": {"?": [[38, "        w = urwid.Edit(edit_text=data, wrap=\"any\", multiline=True)"], [39, "        w = urwid.AttrWrap(w, \"editfield\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column": {"func": {"Edit": {"(Column, ?) -> Edit": [[11, "    def Edit(self, data):"]]}, "keypress": {"(Column, ?, BaseGridEditor) -> None / (Column, ?, ?) -> None": [[17, "    def keypress(self, key, editor):"]]}, "Display": {"(Column, ?) -> Display": [[8, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column.Edi": {"param": {"data": {"?": [[11, "    def Edit(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_byte": {"class": {"Display": {"<Display>": [[24, "class Display(base.Cell):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column.keypr": {"param": {"self": {"{Column | Column}": [[17, "    def keypress(self, key, editor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Colum": {"func": {"blank": {"Column -> str": [[14, "    def blank(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Edit.get_data": {"var": {"txt": {"?": [[43, "        txt = self._w.get_text()[0].strip()"]]}}, "param": {"self": {"Edit": [[42, "    def get_data(self) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Edi": {"func": {"get_data": {"Edit -> ?": [[42, "    def get_data(self) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column.keypress": {"param": {"editor": {"BaseGridEditor": [[17, "    def keypress(self, key, editor):"]]}, "key": {"?": [[17, "    def keypress(self, key, editor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_bytes.Column.blank": {"param": {"self": {"Column": [[14, "    def blank(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/check_ssl_pinning.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_pinning.CheckSSLPinning": {"param": {"loader": {"?": [[62, "    def load(self, loader):"]]}}, "func": {"load": {"(CheckSSLPinning, ?) -> None": [[62, "    def load(self, loader):"]]}, "clientconnect": {"(CheckSSLPinning, ?) -> None": [[83, "    def clientconnect(self, layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_pinning.monkey_dummy_": {"var": {"cert": {"?": [[27, "    cert = OpenSSL.crypto.X509()"]]}}, "param": {"cacert": {"?": [[12, "def monkey_dummy_cert(privkey, cacert, commonname, sans):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_pinning": {"func": {"monkey_dummy_cert": {"(?, ?, str, [str]) -> Cert / (?, ?, None, [?]) -> Cert / (?, ?, str, [?]) -> Cert / (?, ?, ?, ?) -> Cert / (?, ?, str, ()) -> Cert": [[12, "def monkey_dummy_cert(privkey, cacert, commonname, sans):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_pinning.monkey_dummy_cert": {"var": {"ss": {"[str]": [[13, "    ss = []"]], "str": [[25, "    ss = b\", \".join(ss)"]]}, "i": {"str": [[14, "    for i in sans:"]]}, "new_cn": {"str": [[45, "            new_cn = commonname + b'm'"]]}}, "param": {"commonname": {"str": [[12, "def monkey_dummy_cert(privkey, cacert, commonname, sans):"]]}, "sans": {"{() | [?] | [str]}": [[12, "def monkey_dummy_cert(privkey, cacert, commonname, sans):"]]}, "privkey": {"?": [[12, "def monkey_dummy_cert(privkey, cacert, commonname, sans):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_pinning.CheckSSLPinning.load": {"param": {"self": {"CheckSSLPinning": [[62, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_p": {"class": {"CheckSSLPinning": {"<CheckSSLPinning>": [[61, "class CheckSSLPinning(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.check_ssl_pinning.CheckSSLPinning.clientconnect": {"param": {"self": {"CheckSSLPinning": [[83, "    def clientconnect(self, layer):"]]}, "layer": {"?": [[83, "    def clientconnect(self, layer):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/io/test_db.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_db.TestDB": {"func": {"test_create": {"(TestDB, ?) -> None": [[7, "    def test_create(self, tdata):"]]}, "test_roundtrip": {"(TestDB, ?) -> None": [[14, "    def test_roundtrip(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_db.TestDB.test_create": {"var": {"cur": {"?": [[10, "            cur = c.cursor()"]]}, "dh": {"DBHandler": [[8, "        dh = db.DBHandler(db_path=tdata.path(\"mitmproxy/data\") + \"/tmp.sqlite\")"]]}}, "param": {"tdata": {"?": [[7, "    def test_create(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_db.TestDB.test_creat": {"param": {"self": {"TestDB": [[7, "    def test_create(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_db": {"class": {"TestDB": {"<TestDB>": [[5, "class TestDB:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_db.TestDB.test_roundtrip": {"var": {"i": {"int": [[17, "        for i in range(10):"]]}, "loaded_flows": {"[HTTPFlow]": [[25, "        loaded_flows = dh.load()"]]}, "flows": {"[?]": [[16, "        flows = []"]]}, "dh": {"DBHandler": [[15, "        dh = db.DBHandler(db_path=tdata.path(\"mitmproxy/data\") + \"/tmp.sqlite\", mode='write')"], [20, "        dh = db.DBHandler(db_path=tdata.path(\"mitmproxy/data\") + \"/tmp.sqlite\")"]]}, "cur": {"?": [[22, "            cur = c.cursor()"]]}}, "param": {"tdata": {"?": [[14, "    def test_roundtrip(self, tdata):"]]}, "self": {"TestDB": [[14, "    def test_roundtrip(self, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/filename_matching.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching.check_test_files_have_sr": {"var": {"excluded": {"[str]": [[28, "    excluded = ['test/mitmproxy/data/', 'test/mitmproxy/net/data/', '/tservers.py', '/conftest.py']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching.check_test_files_have_src": {"var": {"p": {"str": [[33, "        p = os.path.join(re.sub('^test/', '', os.path.dirname(f)), re.sub('^test_', '', os.path.basename(f)))"]]}, "unknown_test_files": {"[(?, str)]": [[26, "    unknown_test_files = []"]]}, "test_files": {"[?]": [[30, "    test_files = [f for f in test_files if os.path.basename(f) != '__init__.py']"], [31, "    test_files = [f for f in test_files if not any(os.path.normpath(p) in f for p in excluded)]"]], "?": [[29, "    test_files = glob.glob('test/mitmproxy/**/*.py', recursive=True) + glob.glob('test/pathod/**/*.py', recursive=True)"]]}, "f": {"?": [[32, "    for f in test_files:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching.main": {"var": {"f": {"?": [[46, "        for f, p in sorted(missing_test_files):"], [53, "        for f, p in sorted(unknown_test_files):"]]}, "exitcode": {"int": [[41, "    exitcode = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching.check_src_files_have_test": {"var": {"p": {"str": [[18, "        p = os.path.join(\"test\", os.path.dirname(f), \"test_\" + os.path.basename(f))"]]}, "f": {"?": [[17, "    for f in src_files:"]]}, "excluded": {"[str]": [[12, "    excluded = ['mitmproxy/contrib/', 'mitmproxy/io/proto/',"]]}, "src_files": {"[?]": [[15, "    src_files = [f for f in src_files if os.path.basename(f) != '__init__.py']"], [16, "    src_files = [f for f in src_files if not any(os.path.normpath(p) in f for p in excluded)]"]], "?": [[14, "    src_files = glob.glob('mitmproxy/**/*.py', recursive=True) + glob.glob('pathod/**/*.py', recursive=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching.check_src_files_hav": {"var": {"missing_test_files": {"[(?, str)]": [[10, "    missing_test_files = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching.ma": {"var": {"missing_test_files": {"[(?, str)]": [[43, "    missing_test_files = check_src_files_have_test()"]]}, "unknown_test_files": {"[(?, str)]": [[49, "    unknown_test_files = check_test_files_have_src()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.filename_matching": {"func": {"main": {"() -> None": [[40, "def main():"]]}, "check_test_files_have_src": {"() -> [(?, str)]": [[25, "def check_test_files_have_src():"]]}, "check_src_files_have_test": {"() -> [(?, str)]": [[9, "def check_src_files_have_test():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_upstream_auth.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_upstream_auth.test_simple": {"var": {"up": {"UpstreamAuth": [[31, "    up = upstream_auth.UpstreamAuth()"]]}, "f": {"?": [[35, "        f = tflow.tflow()"], [40, "        f = tflow.tflow()"], [45, "        f = tflow.tflow()"], [50, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_upstream_auth.test_configure": {"var": {"up": {"UpstreamAuth": [[11, "    up = upstream_auth.UpstreamAuth()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_upstream_auth": {"func": {"test_simple": {"() -> None": [[30, "def test_simple():"]]}, "test_configure": {"() -> None": [[10, "def test_configure():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/individual_coverage.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.m": {"var": {"no_individual_cov": {"[?]": [[63, "    no_individual_cov = [f.strip() for f in fs]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.run_": {"var": {"stderr": {"?": [[15, "    stderr = io.StringIO()"]]}}, "param": {"test": {"?": [[14, "def run_tests(src, test, fail):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.run_te": {"var": {"stdout": {"?": [[16, "    stdout = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage": {"func": {"main": {"() -> None": [[59, "def main():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.run_tests": {"var": {"e": {"int": [[32, "            e = 42"], [38, "            e = 0"]], "?": [[19, "            e = pytest.main(["]]}, "cov": {"[?]": [[40, "            cov = [l for l in stdout.getvalue().split(\"\\n\") if (src in l) or (\"was never imported\" in l)]"]]}}, "param": {"fail": {"?": [[14, "def run_tests(src, test, fail):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.start_py": {"param": {"test": {"?": [[51, "def start_pytest(src, test, fail):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.start_pytest": {"var": {"proc": {"?": [[53, "    proc = multiprocessing.Process(target=run_tests, args=(src, test, fail))"]]}}, "param": {"fail": {"?": [[51, "def start_pytest(src, test, fail):"]]}, "src": {"?": [[51, "def start_pytest(src, test, fail):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.main": {"var": {"ps": {"[(?, str, bool)]": [[70, "    ps = []"]]}, "c": {"?": [[60, "    c = configparser.ConfigParser()"]]}, "fs": {"?": [[62, "    fs = c['tool:individual_coverage']['exclude'].strip().split('\\n')"]]}, "src": {"?": [[71, "    for src in sorted(src_files):"]]}, "result": {"list": [[76, "    result = list(itertools.starmap(start_pytest, ps))"]]}, "excluded": {"[str]": [[65, "    excluded = ['mitmproxy/contrib/', 'mitmproxy/test/', 'mitmproxy/tools/', 'mitmproxy/platform/']"]]}, "test": {"str": [[72, "        test = os.path.join(\"test\", os.path.dirname(src), \"test_\" + os.path.basename(src))"]]}, "src_files": {"[?]": [[67, "    src_files = [f for f in src_files if os.path.basename(f) != '__init__.py']"], [68, "    src_files = [f for f in src_files if not any(os.path.normpath(p) in f for p in excluded)]"]], "?": [[66, "    src_files = glob.glob('mitmproxy/**/*.py', recursive=True) + glob.glob('pathod/**/*.py', recursive=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverag": {"func": {"run_tests": {"(?, ?, ?) -> None": [[14, "def run_tests(src, test, fail):"]]}, "start_pytest": {"(?, ?, ?) -> (?, ?, ?)": [[51, "def start_pytest(src, test, fail):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.individual_coverage.run_test": {"param": {"src": {"?": [[14, "def run_tests(src, test, fail):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_status_codes.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_status_cod": {"func": {"test_simple": {"() -> None": [[4, "def test_simple():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/events-tcp-specific.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-tcp-specific.Events": {"func": {"tcp_end": {"(Events, ?) -> None": [[22, "    def tcp_end(self, flow: mitmproxy.tcp.TCPFlow):"]]}, "tcp_error": {"(Events, ?) -> None": [[17, "    def tcp_error(self, flow: mitmproxy.tcp.TCPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-tcp-specific.Even": {"func": {"tcp_start": {"(Events, ?) -> None": [[6, "    def tcp_start(self, flow: mitmproxy.tcp.TCPFlow):"]]}, "tcp_message": {"(Events, ?) -> None": [[11, "    def tcp_message(self, flow: mitmproxy.tcp.TCPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-tcp-specific": {"class": {"Events": {"<Events>": [[5, "class Events:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/wbxml/ASWBXML.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML.loadXml": {"param": {"strXML": {"?": [[817, "\tdef loadXml(self, strXML):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML.loadByt": {"param": {"self": {"ASWBXML": [[828, "\tdef loadBytes(self, byteWBXML):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML": {"func": {"loadXml": {"(ASWBXML, ?) -> None": [[817, "\tdef loadXml(self, strXML):"]]}, "getXml": {"ASWBXML -> None": [[821, "\tdef getXml(self):"]]}, "loadBytes": {"(ASWBXML, ?) -> None / (ASWBXML, str) -> None": [[828, "\tdef loadBytes(self, byteWBXML):"]]}, "__init__": {"? -> ?": [[44, "\tdef __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML.loadBytes": {"param": {"byteWBXML": {"str": [[828, "\tdef loadBytes(self, byteWBXML):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML.loadXm": {"param": {"self": {"ASWBXML": [[817, "\tdef loadXml(self, strXML):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml": {"class": {"ASWBXML": {"<ASWBXML>": [[38, "class ASWBXML:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML.getXm": {"param": {"self": {"ASWBXML": [[821, "\tdef getXml(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXML.ASWBXML.__init__": {"param": {"self": {"ASWBXML": [[44, "\tdef __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/flowlist.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.set_focu": {"param": {"self": {"FlowListWalker": [[64, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.get_prev": {"var": {"pos": {"int": [[76, "        pos = pos - 1"]]}, "f": {"FlowItem": [[79, "        f = FlowItem(self.master, self.master.view[pos])"]]}}, "param": {"self": {"FlowListWalker": [[75, "    def get_prev(self, pos):"]]}, "pos": {"?": [[75, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.__init__": {"var": {"self": {"FlowListBox": [[88, "        self, master: \"mitmproxy.tools.console.master.ConsoleMaster\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.mouse_event": {"param": {"self": {"FlowItem": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "row": {"?": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "focus": {"?": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "col": {"?": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "size": {"?": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.keypress": {"param": {"key": {"?": [[38, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.get_focu": {"param": {"self": {"FlowListWalker": [[58, "    def get_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.__init__": {"param": {"self": {"FlowListWalker": [[44, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[44, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.set_flowlist_layo": {"param": {"updated": {"?": [[109, "    def set_flowlist_layout(self, opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.get_tex": {"var": {"layout": {"?": [[17, "        layout = self.master.options.console_flowlist_layout"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.position": {"param": {"self": {"FlowListWalker": [[47, "    def positions(self, reverse=False):"]]}, "reverse": {"?": [[47, "    def positions(self, reverse=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.get_next": {"var": {"pos": {"int": [[69, "        pos = pos + 1"]]}, "f": {"FlowItem": [[72, "        f = FlowItem(self.master, self.master.view[pos])"]]}}, "param": {"self": {"FlowListWalker": [[68, "    def get_next(self, pos):"]]}, "pos": {"?": [[68, "    def get_next(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowI": {"func": {"mouse_event": {"(FlowItem, ?, ?, ?, ?, ?, ?) -> None": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.set_flowlist_layout": {"param": {"self": {"FlowListBox": [[109, "    def set_flowlist_layout(self, opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.mouse_eve": {"param": {"button": {"?": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.positions": {"var": {"ret": {"[int]": [[50, "        ret = range(self.master.commands.execute(\"view.properties.length\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.view_changed": {"param": {"self": {"FlowListWalker": [[55, "    def view_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox": {"var": {"title": {"str": [[84, "    title = \"Flows\""]]}}, "func": {"keypress": {"(FlowListBox, ?, ?) -> None": [[97, "    def keypress(self, size, key):"]]}, "view_changed": {"FlowListBox -> None": [[106, "    def view_changed(self):"]]}, "__init__": {"? -> ?": [[87, "    def __init__("]]}, "set_flowlist_layout": {"(FlowListBox, ?, ?) -> None": [[109, "    def set_flowlist_layout(self, opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.set_focus": {"param": {"index": {"?": [[64, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.view_changed": {"param": {"self": {"FlowListBox": [[106, "    def view_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.get_text": {"var": {"cols": {"?": [[16, "        cols, _ = self.master.ui.get_cols_rows()"]]}, "render_mode": {"int": [[19, "            render_mode = common.RenderMode.LIST"], [21, "            render_mode = common.RenderMode.TABLE"]]}}, "param": {"self": {"FlowItem": [[15, "    def get_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.set_flowlist_layou": {"param": {"opts": {"?": [[109, "    def set_flowlist_layout(self, opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem": {"func": {"selectable": {"FlowItem -> ?": [[30, "    def selectable(self):"]]}, "get_text": {"FlowItem -> None": [[15, "    def get_text(self):"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self, master, flow):"]]}, "keypress": {"(FlowItem, ?, ?) -> ?": [[38, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.__init__": {"var": {"w": {"None": [[12, "        w = self.get_text()"]]}}, "param": {"flow": {"?": [[10, "    def __init__(self, master, flow):"]]}, "self": {"FlowItem": [[10, "    def __init__(self, master, flow):"]]}, "master": {"ConsoleMaster": [[10, "    def __init__(self, master, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.keypr": {"param": {"self": {"FlowListBox": [[97, "    def keypress(self, size, key):"]]}, "size": {"?": [[97, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBo": {"var": {"keyctx": {"str": [[85, "    keyctx = \"flowlist\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListBox.keypress": {"param": {"key": {"?": [[97, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalk": {"func": {"get_prev": {"(FlowListWalker, ?) -> (FlowItem, int)": [[75, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.f": {"class": {"FlowListWalker": {"<FlowListWalker>": [[42, "class FlowListWalker(urwid.ListWalker):"]]}, "FlowListBox": {"<FlowListBox>": [[83, "class FlowListBox(urwid.ListBox, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker": {"func": {"set_focus": {"(FlowListWalker, ?) -> None": [[64, "    def set_focus(self, index):"]]}, "get_focus": {"FlowListWalker -> (FlowItem, int)": [[58, "    def get_focus(self):"]]}, "view_changed": {"FlowListWalker -> None": [[55, "    def view_changed(self):"]]}, "positions": {"(FlowListWalker, ?) -> [int]": [[47, "    def positions(self, reverse=False):"]]}, "get_next": {"(FlowListWalker, ?) -> (FlowItem, int)": [[68, "    def get_next(self, pos):"]]}, "__init__": {"? -> ?": [[44, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.selectab": {"param": {"self": {"FlowItem": [[30, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.keypr": {"param": {"self": {"FlowItem": [[38, "    def keypress(self, size, key):"]]}, "size": {"?": [[38, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlis": {"class": {"FlowItem": {"<FlowItem>": [[8, "class FlowItem(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowListWalker.get_focus": {"var": {"f": {"FlowItem": [[61, "        f = FlowItem(self.master, self.master.view.focus.flow)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowlist.FlowItem.mouse_": {"param": {"event": {"?": [[33, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/wbxml/ASWBXMLByteQueue.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.checkContinuationBi": {"param": {"byteval": {"None": [[61, "    def checkContinuationBit(self, byteval):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.dequeueAndLo": {"var": {"singleByte": {"?": [[53, "        singleByte = self.get()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.dequeueMultibyteI": {"var": {"singleByte": {"int": [[67, "        singleByte = 0xFF"]], "None": [[74, "                singleByte = self.dequeueAndLog()"]]}, "iReturn": {"int": [[66, "        iReturn = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQ": {"func": {"dequeueString": {"(ASWBXMLByteQueue, None) -> str / (ASWBXMLByteQueue, int) -> str": [[79, "    def dequeueString(self, length=None):"]]}, "checkContinuationBit": {"(ASWBXMLByteQueue, None) -> bool": [[61, "    def checkContinuationBit(self, byteval):"]]}, "dequeueAndLog": {"ASWBXMLByteQueue -> None": [[52, "    def dequeueAndLog(self):"]]}, "dequeueMultibyteInt": {"ASWBXMLByteQueue -> int": [[65, "    def dequeueMultibyteInt(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.__init__": {"var": {"byte": {"str": [[42, "        for byte in wbxmlBytes:"]]}}, "param": {"self": {"ASWBXMLByteQueue": [[35, "    def __init__(self, wbxmlBytes):"]]}, "wbxmlBytes": {"str": [[35, "    def __init__(self, wbxmlBytes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.dequeueAndLog": {"param": {"self": {"ASWBXMLByteQueue": [[52, "    def dequeueAndLog(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml": {"class": {"ASWBXMLByteQueue": {"<ASWBXMLByteQueue>": [[33, "class ASWBXMLByteQueue(Queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.dequeueStri": {"param": {"length": {"int": [[79, "    def dequeueString(self, length=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.dequeueString": {"var": {"i": {"int": [[83, "            for i in range(0, length):"]]}, "strReturn": {"str": [[82, "            strReturn = \"\""], [94, "            strReturn = \"\""]]}, "currentByte": {"int": [[81, "            currentByte = 0x00"], [93, "            currentByte = 0x00"]], "None": [[89, "                currentByte = self.dequeueAndLog()"], [96, "                currentByte = self.dequeueAndLog()"]]}}, "param": {"self": {"ASWBXMLByteQueue": [[79, "    def dequeueString(self, length=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue": {"func": {"__init__": {"? -> ?": [[35, "    def __init__(self, wbxmlBytes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.checkContinuationBit": {"param": {"self": {"ASWBXMLByteQueue": [[61, "    def checkContinuationBit(self, byteval):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.dequeueMultibyteInt": {"param": {"self": {"ASWBXMLByteQueue": [[65, "    def dequeueMultibyteInt(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLByteQueue.ASWBXMLByteQueue.checkC": {"var": {"continuationBitmask": {"int": [[62, "        continuationBitmask = 0x80"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/image/view.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.v": {"class": {"ViewImage": {"<ViewImage>": [[16, "class ViewImage(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.view.ViewImag": {"var": {"content_types": {"[str]": [[20, "    content_types = ["]]}, "name": {"str": [[17, "    name = \"Image\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.view.test_ico": {"param": {"h": {"?": [[8, "def test_ico(h, f):"]]}, "f": {"?": [[8, "def test_ico(h, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.view.ViewImage.__call__": {"param": {"self": {"ViewImage": [[29, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[29, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.view.ViewImage": {"func": {"__call__": {"(ViewImage, ?) -> (str, None)": [[29, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.view": {"func": {"test_ico": {"(?, ?) -> str": [[8, "def test_ico(h, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.view.ViewImage.__call": {"var": {"image_type": {"?": [[30, "        image_type = imghdr.what('', h=data)"]]}, "view_name": {"str": [[44, "            view_name = \"{} Image\".format(image_type.upper())"], [46, "            view_name = \"Unknown Image\""]]}, "image_metadata": {"[(str, str)]": [[40, "            image_metadata = ["]], "?": [[32, "            image_metadata = image_parser.parse_png(data)"], [34, "            image_metadata = image_parser.parse_gif(data)"], [36, "            image_metadata = image_parser.parse_jpeg(data)"], [38, "            image_metadata = image_parser.parse_ico(data)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/keepserving.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServing": {"param": {"loader": {"?": [[6, "    def load(self, loader):"]]}}, "func": {"load": {"(KeepServing, ?) -> None": [[6, "    def load(self, loader):"]]}, "shutdown": {"KeepServing -> None": [[24, "    def shutdown(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServing.load": {"param": {"self": {"KeepServing": [[6, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServing.keepgoing": {"var": {"checks": {"[str]": [[17, "        checks = ["]]}}, "param": {"self": {"{KeepServing | TKS}": [[16, "    def keepgoing(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServ": {"func": {"keepgoing": {"TKS -> int / KeepServing -> int": [[16, "    def keepgoing(self) -> bool:"]]}, "running": {"KeepServing -> None / TKS -> None": [[33, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServing.running": {"var": {"opts": {"[?]": [[34, "        opts = ["]]}}, "param": {"self": {"{KeepServing | TKS}": [[33, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServing.watch": {"param": {"self": {"{KeepServing | TKS}": [[27, "    async def watch(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keeps": {"class": {"KeepServing": {"<KeepServing>": [[5, "class KeepServing:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.keepserving.KeepServing.shutdown": {"param": {"self": {"KeepServing": [[24, "    def shutdown(self):  # pragma: no cover"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/test_server_spec.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_server_spec": {"func": {"test_parse": {"() -> None": [[6, "def test_parse():"]]}, "test_parse_with_mode": {"() -> None": [[29, "def test_parse_with_mode():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/test_watchdog.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_w": {"class": {"TestWatchdog": {"<TestWatchdog>": [[14, "class TestWatchdog:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_init_fil": {"var": {"event": {"?": [[20, "        event = multiprocessing.Event()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_serverconnect_None": {"var": {"w": {"?": [[44, "        w = WatchdogAddon(event, Path(tmpdir))"]]}}, "param": {"tmpdir": {"?": [[42, "    def test_serverconnect_None(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdo": {"func": {"test_trigger_http_synatx": {"(TestWatchdog, ?) -> None": [[62, "    def test_trigger_http_synatx(self, tmpdir):"]]}, "test_trigger": {"(TestWatchdog, ?) -> None": [[49, "    def test_trigger(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_serverconnect_Non": {"param": {"self": {"TestWatchdog": [[42, "    def test_serverconnect_None(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_trigge": {"param": {"tmpdir": {"?": [[49, "    def test_trigger(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog": {"func": {"test_init_dir": {"(TestWatchdog, ?) -> None": [[28, "    def test_init_dir(self, tmpdir):"]]}, "test_timeout": {"(TestWatchdog, ?) -> None": [[76, "    def test_timeout(self, tmpdir):"]]}, "test_serverconnect_None": {"(TestWatchdog, ?) -> None": [[42, "    def test_serverconnect_None(self, tmpdir):"]]}, "test_init_file": {"(TestWatchdog, ?) -> ?": [[16, "    def test_init_file(self, tmpdir):"]]}, "test_serverconnect": {"(TestWatchdog, ?) -> None": [[35, "    def test_serverconnect(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_serverconnec": {"var": {"event": {"?": [[36, "        event = multiprocessing.Event()"]]}}, "param": {"tmpdir": {"?": [[35, "    def test_serverconnect(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_init_fi": {"param": {"self": {"TestWatchdog": [[16, "    def test_init_file(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_trigger_http_synatx": {"var": {"open_mock": {"?": [[70, "            open_mock = mock.mock_open()"]]}, "event": {"?": [[63, "        event = multiprocessing.Event()"]]}, "w": {"?": [[64, "        w = WatchdogAddon(event, Path(tmpdir))"]]}, "f": {"?": [[65, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestWatchdog": [[62, "    def test_trigger_http_synatx(self, tmpdir):"]]}, "tmpdir": {"?": [[62, "    def test_trigger_http_synatx(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_serverconnect": {"var": {"w": {"?": [[37, "        w = WatchdogAddon(event, Path(tmpdir), timeout=10)"]]}}, "param": {"self": {"TestWatchdog": [[35, "    def test_serverconnect(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_init_file": {"param": {"tmpdir": {"?": [[16, "    def test_init_file(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_serverconnect_No": {"var": {"event": {"?": [[43, "        event = multiprocessing.Event()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_timeout": {"var": {"w": {"?": [[78, "        w = WatchdogAddon(event, Path(tmpdir))"]]}}, "param": {"self": {"TestWatchdog": [[76, "    def test_timeout(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_timeou": {"var": {"event": {"?": [[77, "        event = multiprocessing.Event()"]]}}, "param": {"tmpdir": {"?": [[76, "    def test_timeout(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_init_": {"var": {"tmpfile": {"?": [[17, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "mydir": {"?": [[30, "        mydir = tmpdir.join(\"mydir\")"]]}}, "param": {"tmpdir": {"?": [[28, "    def test_init_dir(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_init_dir": {"var": {"event": {"?": [[29, "        event = multiprocessing.Event()"]]}}, "param": {"self": {"TestWatchdog": [[28, "    def test_init_dir(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_watchdog.TestWatchdog.test_trigger": {"var": {"open_mock": {"?": [[56, "            open_mock = mock.mock_open()"]]}, "event": {"?": [[50, "        event = multiprocessing.Event()"]]}, "w": {"?": [[51, "        w = WatchdogAddon(event, Path(tmpdir))"]]}, "f": {"?": [[52, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestWatchdog": [[49, "    def test_trigger(self, tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/platform/osx.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.osx": {"var": {"STATECMD": {"(str, str, str, str, str)": [[17, "STATECMD = (\"sudo\", \"-n\", \"/sbin/pfctl\", \"-s\", \"state\")"]]}}, "func": {"original_addr": {"? -> ?": [[20, "def original_addr(csock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.osx.original_addr": {"var": {"stxt": {"?": [[23, "        stxt = subprocess.check_output(STATECMD, stderr=subprocess.STDOUT)"]]}}, "param": {"csock": {"?": [[20, "def original_addr(csock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.osx.original_add": {"var": {"peer": {"?": [[21, "    peer = csock.getpeername()"]]}, "insufficient_priv": {"bool": [[26, "            insufficient_priv = True"], [30, "        insufficient_priv = \"sudo: a password is required\" in stxt.decode(errors=\"replace\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/message.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Messa": {"func": {"get_content": {"(Request, ?) -> {? -> ? | str} / (Message, ?) -> {? -> ? | str}": [[89, "    def get_content(self, strict: bool=True) -> Optional[bytes]:"]]}, "_guess_encoding": {"(Message, {? -> ? | str}) -> str / (Request, {? -> ? | str}) -> str / (Message, str) -> str": [[190, "    def _guess_encoding(self, content=b\"\") -> str:"]]}, "get_text": {"(Message, ?) -> {? -> ? | str} / (Request, ?) -> {? -> ? | str}": [[207, "    def get_text(self, strict: bool=True) -> Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.set_stat": {"param": {"self": {"MessageData": [[22, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message._guess_encoding": {"var": {"meta_charset": {"?": [[196, "            meta_charset = re.search(rb\"\"\"<meta[^>]+charset=['\"]?([^'\">]+)\"\"\", content)"]]}, "enc": {"None": [[191, "        enc = self._get_content_type_charset()"]], "?": [[198, "                enc = meta_charset.group(1).decode(\"ascii\", \"ignore\")"]], "str": [[194, "                enc = \"utf8\""], [200, "            enc = \"latin-1\""], [203, "            enc = \"gb18030\""]]}}, "param": {"content": {"{? -> ? | str}": [[190, "    def _guess_encoding(self, content=b\"\") -> str:"]]}, "self": {"{Message | Request}": [[190, "    def _guess_encoding(self, content=b\"\") -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.from_state": {"param": {"cls": {"<Message>": [[56, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Messag": {"var": {"content": {"{? -> ? | str}": [[135, "    content = property(get_content, set_content)"]]}, "text": {"str": [[243, "    text = property(get_text, set_text)"]]}, "decoded": {"{? -> ? | str}": [[254, "        decoded = self.get_content(strict)"]]}}, "func": {"from_state": {"(<Message>, ?) -> Message": [[56, "    def from_state(cls, state):"]]}, "decode": {"(Message, ?) -> None": [[245, "    def decode(self, strict=True):"]]}, "set_state": {"(Message, ?) -> None": [[52, "    def set_state(self, state):"]]}, "set_content": {"(Message, ?) -> ?": [[115, "    def set_content(self, value):"]]}, "http_version": {"? -> ?": [[159, "    def http_version(self, http_version):"]], "Message -> None": [[152, "    def http_version(self):"]]}, "raw_content": {"{? -> ? | str}": [[86, "    def raw_content(self, content):"]], "Message -> None": [[77, "    def raw_content(self) -> bytes:"]]}, "trailers": {"? -> ?": [[148, "    def trailers(self, h):"]], "Message -> None": [[138, "    def trailers(self):"]]}, "headers": {"{? -> ? | Headers}": [[73, "    def headers(self, h):"]], "Message -> None": [[63, "    def headers(self):"]]}, "timestamp_start": {"Message -> None": [[163, "    def timestamp_start(self):"]], "{? -> ? | int}": [[170, "    def timestamp_start(self, timestamp_start):"]]}, "encode": {"(Message, ?) -> None": [[258, "    def encode(self, e):"]]}, "set_text": {"(Message, ?) -> ?": [[227, "    def set_text(self, text):"]]}, "timestamp_end": {"Message -> None": [[174, "    def timestamp_end(self):"]], "{? -> ? | int}": [[181, "    def timestamp_end(self, timestamp_end):"]]}, "__eq__": {"(Message, ?) -> bool": [[44, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.m": {"class": {"Message": {"<Message>": [[41, "class Message(serializable.Serializable):"]]}, "MessageData": {"<MessageData>": [[10, "class MessageData(serializable.Serializable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.M": {"func": {"_get_content_type_charset": {"Message -> None / Request -> None": [[184, "    def _get_content_type_charset(self) -> Optional[str]:"]]}, "get_state": {"Message -> ?": [[49, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.set_tex": {"var": {"ct": {"?": [[237, "            ct = mheaders.parse_content_type(self.headers.get(\"content-type\", \"\")) or (\"text\", \"plain\", {})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.get_text": {"var": {"enc": {"str": [[219, "        enc = self._guess_encoding(content)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message._get_content_type_charset": {"param": {"self": {"{Message | Request}": [[184, "    def _get_content_type_charset(self) -> Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.get_stat": {"param": {"self": {"MessageData": [[28, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.raw_content": {"param": {"self": {"Message": [[77, "    def raw_content(self) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.set_text": {"var": {"enc": {"str": [[231, "        enc = self._guess_encoding()"], [240, "            enc = \"utf8\""]]}}, "param": {"self": {"Message": [[227, "    def set_text(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.set_state": {"var": {"k": {"?": [[23, "        for k, v in state.items():"]]}, "v": {"MultiDict": [[25, "                v = mheaders.Headers.from_state(v)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.from_": {"param": {"state": {"?": [[56, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.set_": {"param": {"state": {"?": [[22, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.decod": {"param": {"self": {"Message": [[245, "    def decode(self, strict=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData": {"func": {"__eq__": {"(MessageData, ?) -> bool": [[17, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.__eq__": {"param": {"self": {"Message": [[44, "    def __eq__(self, other):"]]}, "other": {"?": [[44, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.from_state": {"param": {"cls": {"<MessageData>": [[36, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.get_content": {"var": {"ce": {"?": [[100, "        ce = self.headers.get(\"content-encoding\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.set_stat": {"param": {"self": {"Message": [[52, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.header": {"param": {"self": {"Message": [[63, "    def headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.timestamp_start": {"param": {"self": {"Message": [[163, "    def timestamp_start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.get_": {"var": {"state": {"?": [[29, "        state = vars(self).copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.decode": {"param": {"strict": {"?": [[245, "    def decode(self, strict=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.encod": {"param": {"self": {"Message": [[258, "    def encode(self, e):"]]}, "e": {"?": [[258, "    def encode(self, e):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.get_stat": {"param": {"self": {"Message": [[49, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.http_version": {"param": {"self": {"Message": [[152, "    def http_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.timestamp_end": {"param": {"self": {"Message": [[174, "    def timestamp_end(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.from_": {"param": {"state": {"?": [[36, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message._get_content_type_charse": {"var": {"ct": {"(?, ?, ?)": [[185, "        ct = mheaders.parse_content_type(self.headers.get(\"content-type\", \"\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.set_": {"param": {"text": {"?": [[227, "    def set_text(self, text):"]]}, "state": {"?": [[52, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageD": {"func": {"from_state": {"(<MessageData>, ?) -> MessageData": [[36, "    def from_state(cls, state):"]]}, "set_state": {"(MessageData, ?) -> None": [[22, "    def set_state(self, state):"]]}, "get_state": {"MessageData -> None": [[28, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.get_tex": {"var": {"content": {"{? -> ? | str}": [[216, "        content = self.get_content(strict)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.trailer": {"param": {"self": {"Message": [[138, "    def trailers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.set_content": {"var": {"ce": {"?": [[125, "        ce = self.headers.get(\"content-encoding\")"]]}}, "param": {"self": {"Message": [[115, "    def set_content(self, value):"]]}, "value": {"?": [[115, "    def set_content(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.Message.get_": {"var": {"content": {"{? -> ? | str}": [[103, "                content = encoding.decode(self.raw_content, ce)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.message.MessageData.__eq__": {"param": {"self": {"MessageData": [[17, "    def __eq__(self, other):"]]}, "other": {"?": [[17, "    def __eq__(self, other):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/pathoc_cmdline.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc_cmdline": {"func": {"go_pathoc": {"() -> None": [[225, "def go_pathoc():  # pragma: no cover"]]}, "args_pathoc": {"(?, ?, ?) -> ? / ([str], ?, ?) -> ?": [[12, "def args_pathoc(argv, stdout=sys.stdout, stderr=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc_cmdline.args_pathoc": {"var": {"r": {"str": [[214, "                r = f.read()"]], "?": [[210, "    for r in args.requests:"], [211, "        r = os.path.expanduser(r)"]]}, "args": {"?": [[163, "    args = parser.parse_args(argv[1:])"]]}, "group": {"?": [[93, "    group = parser.add_argument_group("], [119, "    group = parser.add_argument_group("]]}, "i": {"(str, str, str)": [[21, "        for i in user_agents.UASTRINGS:"]]}, "h": {"?": [[169, "        h, p = args.host.rsplit(\":\", 1)"]]}, "parser": {"?": [[25, "    parser = argparse.ArgumentParser("]]}, "parts": {"?": [[188, "        parts = args.connect_to.split(\":\")"]]}, "reqs": {"[?]": [[209, "    reqs = []"]]}, "p": {"int": [[171, "            p = int(p)"]]}, "pa": {"?": [[18, "    pa = preparser.parse_known_args(argv)[0]"]]}, "preparser": {"?": [[13, "    preparser = argparse.ArgumentParser(add_help=False)"]]}}, "param": {"stderr": {"?": [[12, "def args_pathoc(argv, stdout=sys.stdout, stderr=sys.stderr):"]]}, "argv": {"[str]": [[12, "def args_pathoc(argv, stdout=sys.stdout, stderr=sys.stderr):"]]}, "stdout": {"?": [[12, "def args_pathoc(argv, stdout=sys.stdout, stderr=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc_cmdline.go_pathoc": {"var": {"args": {"?": [[226, "    args = args_pathoc(sys.argv)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/dump.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump.DumpMaster": {"func": {"__init__": {"? -> ?": [[18, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump.DumpMaster.__init__": {"var": {"self": {"DumpMaster": [[19, "        self,"]]}, "options": {"Options": [[20, "        options: options.Options,"]]}}, "param": {"self": {"DumpMaster": [[23, "    ) -> None:"]]}, "options": {"Options": [[23, "    ) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.d": {"class": {"DumpMaster": {"<DumpMaster>": [[16, "class DumpMaster(master.Master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump.DumpMaster.__in": {"var": {"with_termlog": {"?": [[21, "        with_termlog=True,"]]}, "with_dumper": {"?": [[22, "        with_dumper=True,"]]}}, "param": {"with_termlog": {"?": [[23, "    ) -> None:"]]}, "with_dumper": {"?": [[23, "    ) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump.ErrorCheck.log": {"param": {"self": {"ErrorCheck": [[11, "    def log(self, e):"]]}, "e": {"?": [[11, "    def log(self, e):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump.ErrorCheck.__init__": {"param": {"self": {"ErrorCheck": [[8, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump.ErrorCheck": {"func": {"log": {"(ErrorCheck, ?) -> None": [[11, "    def log(self, e):"]]}, "__init__": {"? -> ?": [[8, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.dump": {"class": {"ErrorCheck": {"<ErrorCheck>": [[7, "class ErrorCheck:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/test_urlinjection.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestSitemapI": {"func": {"test_inject_not404": {"TestSitemapInjection -> None": [[79, "    def test_inject_not404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLInjection.test_inject_inser": {"var": {"html_injection": {"?": [[35, "        html_injection = HTMLInjection(insert=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestUrlInjectionAddon.test_ini": {"var": {"fltr": {"None": [[105, "        fltr = flowfilter.parse(flt)"]]}, "flt": {"None": [[102, "        flt = f\"~u .*/site.html$\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestInjectionGenerator.tes": {"var": {"injection_generator": {"?": [[19, "        injection_generator = InjectionGenerator()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_u": {"class": {"TestUrlInjectionAddon": {"<TestUrlInjectionAddon>": [[96, "class TestUrlInjectionAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLI": {"func": {"test_inject_not404": {"TestHTMLInjection -> None": [[26, "    def test_inject_not404(self):"]]}, "test_inject_insert_body": {"TestHTMLInjection -> None": [[41, "    def test_inject_insert_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestUrlInjectionAddon.tes": {"var": {"url_injection": {"?": [[103, "        url_injection = UrlInjectionAddon(f\"~u .*/site.html$\", tmpfile, HTMLInjection(insert=True))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestUrlInjectionAddo": {"func": {"test_init": {"(TestUrlInjectionAddon, ?) -> None": [[98, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjectio": {"var": {"index": {"?": [[11, "index = json.loads("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestSitemapInjection.test_inject_not404": {"var": {"sitemap_injection": {"?": [[80, "        sitemap_injection = SitemapInjection()"]]}, "f": {"?": [[81, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestSitemapInjection": [[79, "    def test_inject_not404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_url": {"class": {"TestInjectionGenerator": {"<TestInjectionGenerator>": [[15, "class TestInjectionGenerator:"]]}, "TestSitemapInjection": {"<TestSitemapInjection>": [[77, "class TestSitemapInjection:"]]}, "TestHTMLInjection": {"<TestHTMLInjection>": [[24, "class TestHTMLInjection:"]]}, "TestRobotsInjection": {"<TestRobotsInjection>": [[58, "class TestRobotsInjection:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestSitemapInjection.test_inject_404": {"var": {"sitemap_injection": {"?": [[88, "        sitemap_injection = SitemapInjection()"]]}, "f": {"?": [[89, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestSitemapInjection": [[87, "    def test_inject_404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLInjection.test_inject_insert": {"var": {"f": {"?": [[36, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestHTMLInjection": [[34, "    def test_inject_insert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestInjectionGenerator.test_inject": {"var": {"f": {"?": [[18, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestInjectionGenerator": [[17, "    def test_inject(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLInjection.test_inject_404": {"var": {"html_injection": {"?": [[50, "        html_injection = HTMLInjection()"]]}, "f": {"?": [[51, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestHTMLInjection": [[49, "    def test_inject_404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestRobotsI": {"func": {"test_inject_not404": {"TestRobotsInjection -> None": [[60, "    def test_inject_not404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestRobotsInjection.test_inject_not404": {"var": {"robots_injection": {"?": [[61, "        robots_injection = RobotsInjection()"]]}, "f": {"?": [[62, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestRobotsInjection": [[60, "    def test_inject_not404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestUrlInjectionAddon.test_in": {"var": {"tmpfile": {"?": [[99, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"tmpdir": {"?": [[98, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestUrlInjectionAddon.test_init": {"var": {"f": {"?": [[106, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestUrlInjectionAddon": [[98, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestRobotsInjection.test_inject_404": {"var": {"robots_injection": {"?": [[69, "        robots_injection = RobotsInjection()"]]}, "f": {"?": [[70, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestRobotsInjection": [[68, "    def test_inject_404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLInjection.test_inject_not404": {"var": {"html_injection": {"?": [[27, "        html_injection = HTMLInjection()"]]}, "f": {"?": [[28, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestHTMLInjection": [[26, "    def test_inject_not404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLInjection.test_inject_insert_body": {"var": {"html_injection": {"?": [[42, "        html_injection = HTMLInjection(insert=True)"]]}, "f": {"?": [[43, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestHTMLInjection": [[41, "    def test_inject_insert_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestHTMLInjectio": {"func": {"test_inject_insert": {"TestHTMLInjection -> None": [[34, "    def test_inject_insert(self):"]]}, "test_inject_404": {"TestHTMLInjection -> None": [[49, "    def test_inject_404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestSitemapInjectio": {"func": {"test_inject_404": {"TestSitemapInjection -> None": [[87, "    def test_inject_404(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestInjectionGenerator": {"func": {"test_inject": {"TestInjectionGenerator -> None": [[17, "    def test_inject(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urlinjection.TestRobotsInjectio": {"func": {"test_inject_404": {"TestRobotsInjection -> None": [[68, "    def test_inject_404(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/docs/scripts/options.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scr": {"var": {"unified_options": {"dict": [[12, "unified_options = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scripts.option": {"var": {"masters": {"dict": [[6, "masters = {"]]}, "opts": {"Options": [[15, "    opts = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scripts.optio": {"var": {"inst": {"?": [[16, "    inst = master(opts)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scripts.options": {"var": {"tool_name": {"?": [[14, "for tool_name, master in masters.items():"]]}, "key": {"?": [[17, "    for key, option in optmanager.dump_dicts(opts).items():"], [35, "for key, option in sorted(unified_options.items(), key=lambda t: t[0]):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/eventlog.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog": {"var": {"keyctx": {"str": [[13, "    keyctx = \"eventlog\""]]}, "title": {"str": [[14, "    title = \"Events\""]]}}, "param": {"loader": {"?": [[29, "    def load(self, loader):"]]}}, "func": {"load": {"(EventLog, ?) -> None": [[29, "    def load(self, loader):"]]}, "set_focus": {"(EventLog, int) -> None / (EventLog, ?) -> None": [[35, "    def set_focus(self, index):"]]}, "keypress": {"(EventLog, ?, ?) -> None": [[39, "    def keypress(self, size, key):"]]}, "refresh_events": {"EventLog -> None": [[58, "    def refresh_events(self, *_):"]]}, "add_event": {"(EventLog, ?, ?) -> None / (EventLog, None, ?) -> None": [[46, "    def add_event(self, event_store, entry: log.LogEntry):"]]}, "__init__": {"? -> ?": [[16, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.keypress": {"param": {"key": {"?": [[39, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.add_even": {"var": {"txt": {"?": [[49, "        txt = \"%s: %s\" % (entry.level, str(entry.msg))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.refresh_event": {"param": {"self": {"EventLog": [[58, "    def refresh_events(self, *_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.__init__": {"param": {"self": {"EventLog": [[16, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[16, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.add_event": {"var": {"e": {"?": [[51, "            e = urwid.Text((entry.level, txt))"], [53, "            e = urwid.Text(txt)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.load": {"param": {"self": {"EventLog": [[29, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.set_focus": {"param": {"index": {"int": [[35, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.event": {"class": {"LogBufferWalker": {"<LogBufferWalker>": [[8, "class LogBufferWalker(urwid.SimpleListWalker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.set_focu": {"param": {"self": {"EventLog": [[35, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventl": {"class": {"EventLog": {"<EventLog>": [[12, "class EventLog(urwid.ListBox, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.refresh_events": {"var": {"event": {"?": [[60, "        for event in self.master.events.data:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.eventlog.EventLog.keypr": {"param": {"self": {"EventLog": [[39, "    def keypress(self, size, key):"]]}, "size": {"?": [[39, "    def keypress(self, size, key):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/commands.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem": {"func": {"get_widget": {"CommandItem -> None": [[20, "    def get_widget(self):"]]}, "get_edit_text": {"CommandItem -> ?": [[41, "    def get_edit_text(self):"]]}, "selectable": {"CommandItem -> ?": [[44, "    def selectable(self):"]]}, "__init__": {"? -> ?": [[15, "    def __init__(self, walker, cmd: command.Command, focused: bool):"]]}, "keypress": {"(CommandItem, ?, ?) -> ?": [[47, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandsList.__init__": {"param": {"self": {"CommandsList": [[92, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[92, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker": {"func": {"set_focus": {"(CommandListWalker, ?) -> None / (CommandListWalker, int) -> None": [[72, "    def set_focus(self, index):"]]}, "get_focus": {"CommandListWalker -> (?, int)": [[69, "    def get_focus(self):"]]}, "_get": {"(CommandListWalker, ?) -> CommandItem / (CommandListWalker, int) -> CommandItem": [[65, "    def _get(self, pos):"]]}, "get_next": {"(CommandListWalker, ?) -> (CommandItem, int)": [[78, "    def get_next(self, pos):"]]}, "get_edit_text": {"CommandListWalker -> ?": [[62, "    def get_edit_text(self):"]]}, "__init__": {"? -> ?": [[52, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.set_focus": {"var": {"cmd": {"?": [[73, "        cmd = self.cmds[index]"]]}}, "param": {"index": {"int": [[72, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp.__init__": {"param": {"self": {"CommandHelp": [[111, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[111, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp.widge": {"param": {"txt": {"str": [[122, "    def widget(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Comman": {"func": {"layout_pushed": {"(Commands, ?) -> None": [[146, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem.get_edit_text": {"param": {"self": {"CommandItem": [[41, "    def get_edit_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.get_focu": {"param": {"self": {"CommandListWalker": [[69, "    def get_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalk": {"func": {"get_prev": {"(CommandListWalker, ?) -> (CommandItem, int)": [[84, "    def get_prev(self, pos):"]]}, "refresh": {"CommandListWalker -> None": [[57, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.get_edit_text": {"param": {"self": {"CommandListWalker": [[62, "    def get_edit_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandsLis": {"func": {"__init__": {"? -> ?": [[92, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Commands.__init__": {"var": {"oh": {"CommandHelp": [[137, "        oh = CommandHelp(master)"]]}}, "param": {"self": {"Commands": [[136, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[136, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker._get": {"var": {"cmd": {"?": [[66, "        cmd = self.cmds[pos]"]]}}, "param": {"self": {"CommandListWalker": [[65, "    def _get(self, pos):"]]}, "pos": {"int": [[65, "    def _get(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandsList.keypress": {"var": {"foc": {"?": [[99, "            foc, idx = self.get_focus()"]]}}, "param": {"key": {"?": [[97, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp": {"func": {"sig_mod": {"(CommandHelp, ?) -> None": [[128, "    def sig_mod(self, txt):"]]}, "widget": {"(CommandHelp, ?) -> None / (CommandHelp, str) -> None": [[122, "    def widget(self, txt):"]]}, "__init__": {"? -> ?": [[111, "    def __init__(self, master):"]]}, "set_active": {"(CommandHelp, ?) -> None": [[117, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem.keypr": {"param": {"self": {"CommandItem": [[47, "    def keypress(self, size, key):"]]}, "size": {"?": [[47, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Commands.keyp": {"var": {"item_rows": {"None": [[159, "        item_rows = None"]], "?": [[161, "            item_rows = self.get_item_rows(size, focus = True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.refresh": {"param": {"self": {"CommandListWalker": [[57, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.consol": {"var": {"command_focus_change": {"?": [[11, "command_focus_change = blinker.Signal()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandsList.keypr": {"param": {"self": {"CommandsList": [[97, "    def keypress(self, size, key):"]]}, "size": {"?": [[97, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp.sig_mod": {"param": {"self": {"CommandHelp": [[128, "    def sig_mod(self, txt):"]]}, "txt": {"?": [[128, "    def sig_mod(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.get_prev": {"var": {"pos": {"int": [[85, "        pos = pos - 1"]]}}, "param": {"self": {"CommandListWalker": [[84, "    def get_prev(self, pos):"]]}, "pos": {"?": [[84, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp.set_activ": {"var": {"style": {"str": [[119, "        style = \"heading\" if val else \"heading_inactive\""]]}}, "param": {"self": {"CommandHelp": [[117, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandsList": {"func": {"keypress": {"(CommandsList, ?, ?) -> None": [[97, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Commands.keypress": {"var": {"i": {"?": [[162, "        i = self.widget_list.index(self.focus_item)"]]}, "key": {"None": [[155, "            key = None"]]}}, "param": {"key": {"?": [[149, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem.selectab": {"param": {"self": {"CommandItem": [[44, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp.set_active": {"var": {"h": {"?": [[118, "        h = urwid.Text(\"Command Help\")"]]}}, "param": {"val": {"?": [[117, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.c": {"class": {"CommandsList": {"<CommandsList>": [[91, "class CommandsList(urwid.ListBox):"]]}, "CommandListWalker": {"<CommandListWalker>": [[51, "class CommandListWalker(urwid.ListWalker):"]]}, "Commands": {"<Commands>": [[132, "class Commands(urwid.Pile, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.__init__": {"param": {"self": {"CommandListWalker": [[52, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[52, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.get_next": {"var": {"pos": {"int": [[81, "        pos = pos + 1"]]}}, "param": {"self": {"CommandListWalker": [[78, "    def get_next(self, pos):"]]}, "pos": {"?": [[78, "    def get_next(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandHelp.widget": {"var": {"cols": {"?": [[123, "        cols, _ = self.master.ui.get_cols_rows()"]]}}, "param": {"self": {"CommandHelp": [[122, "    def widget(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Command": {"func": {"keypress": {"(Commands, ?, ?) -> None": [[149, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem.get_widge": {"var": {"parts": {"[(str, str)]": [[21, "        parts = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem.keypress": {"param": {"key": {"?": [[47, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands": {"var": {"HELP_HEIGHT": {"int": [[9, "HELP_HEIGHT = 5"]]}}, "class": {"CommandHelp": {"<CommandHelp>": [[110, "class CommandHelp(urwid.Frame):"]]}, "CommandItem": {"<CommandItem>": [[14, "class CommandItem(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Commands.keypr": {"var": {"tsize": {"?": [[163, "        tsize = self.get_item_size(size, i, True, item_rows)"]]}}, "param": {"self": {"Commands": [[149, "    def keypress(self, size, key):"]]}, "size": {"?": [[149, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Commands": {"var": {"keyctx": {"str": [[134, "    keyctx = \"commands\""]]}, "title": {"str": [[133, "    title = \"Command Reference\""]]}}, "func": {"__init__": {"? -> ?": [[136, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.Commands.layout_pushed": {"param": {"self": {"Commands": [[146, "    def layout_pushed(self, prev):"]]}, "prev": {"?": [[146, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandItem.get_widget": {"param": {"self": {"CommandItem": [[20, "    def get_widget(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commands.CommandListWalker.set_focu": {"param": {"self": {"CommandListWalker": [[72, "    def set_focus(self, index):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_streambodies.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_streambod": {"func": {"test_simple": {"() -> None": [[8, "def test_simple():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_streambodies.test_simple": {"var": {"sa": {"StreamBodies": [[9, "    sa = streambodies.StreamBodies()"]]}, "f": {"?": [[15, "        f = tflow.tflow()"], [22, "        f = tflow.tflow(resp=True)"], [29, "        f = tflow.tflow(resp=True)"], [34, "        f = tflow.twebsocketflow()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/http2/framereader.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.framereader.parse_": {"var": {"frame": {"?": [[23, "    frame, _ = hyperframe.frame.Frame.parse_frame_header(header)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.framereader.parse_fram": {"var": {"header": {"?": [[21, "        header = header[:9]"]]}}, "param": {"header": {"?": [[18, "def parse_frame(header, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.framereader.parse_frame": {"var": {"body": {"?": [[20, "        body = header[9:]"]]}}, "param": {"body": {"None": [[18, "def parse_frame(header, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.frameread": {"func": {"parse_frame": {"(?, ?) -> None / (?, None) -> None": [[18, "def parse_frame(header, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.framereader.read_raw_fram": {"var": {"header": {"str": [[8, "    header = rfile.safe_read(9)"]]}, "length": {"int": [[9, "    length = int(codecs.encode(header[:3], 'hex_codec'), 16)"]]}}, "param": {"rfile": {"Reader": [[7, "def read_raw_frame(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.framereader.read_raw_frame": {"var": {"body": {"str": [[14, "    body = rfile.safe_read(length)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2": {"func": {"read_raw_frame": {"Reader -> [str] / ? -> [?]": [[7, "def read_raw_frame(rfile):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io": {"var": {"__all__": {"[str]": [[6, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_base.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_base.test_format_dict": {"var": {"f_d": {"None": [[7, "    f_d = base.format_dict(d)"], [11, "    f_d = base.format_dict(d)"], [15, "    f_d = base.format_dict(d)"]]}, "d": {"dict": [[6, "    d = {\"one\": \"two\", \"three\": \"four\"}"], [10, "    d = {\"adsfa\": \"\"}"], [14, "    d = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_b": {"func": {"test_format_dict": {"() -> None": [[5, "def test_format_dict():"]]}, "test_format_pairs": {"() -> None": [[20, "def test_format_pairs():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_base.test_format_pairs": {"var": {"f_d": {"None": [[22, "    f_d = base.format_pairs(d)"], [26, "    f_d = base.format_pairs(d)"], [30, "    f_d = base.format_pairs(d)"]]}, "d": {"[(str, str)]": [[21, "    d = [(\"a\", \"c\"), (\"b\", \"d\")]"], [25, "    d = [(\"abc\", \"\")]"]], "[?]": [[29, "    d = []"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_response.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseData.test_init": {"param": {"self": {"TestResponseData": [[14, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_get_cookies_no_valu": {"var": {"self": {"TestResponseUtils": [[128, "        resp = tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_get_cookies_empty": {"var": {"self": {"TestResponseUtils": [[100, "        resp = tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_get_cookies_twocooki": {"var": {"self": {"TestResponseUtils": [[137, "        resp = tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_get_cookies_non": {"var": {"self": {"TestResponseUtils": [[95, "        resp = tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_set_cooki": {"var": {"self": {"TestResponseUtils": [[150, "        resp = tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_r": {"class": {"TestResponseData": {"<TestResponseData>": [[13, "class TestResponseData:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseData": {"func": {"test_init": {"TestResponseData -> None": [[14, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_get_cookies_simp": {"var": {"self": {"TestResponseUtils": [[105, "        resp = tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_refresh": {"var": {"self": {"TestResponseUtils": [[158, "        r = tresp()"]]}, "m": {"?": [[178, "            m.side_effect = ValueError"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_response.TestResponseUtils.test_get_cookies_with_parameter": {"var": {"self": {"TestResponseUtils": [[113, "        resp = tresp()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/export.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.Export.format": {"param": {"self": {"Export": [[117, "    def formats(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.exp": {"var": {"formats": {"dict": [[106, "formats = dict("]]}}, "func": {"request_content_for_console": {"? -> str / None -> str": [[39, "def request_content_for_console(request: http.HTTPRequest) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.Exp": {"func": {"formats": {"Export -> list": [[117, "    def formats(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.Export.file": {"var": {"v": {"?": [[131, "        v = func(flow)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.expo": {"func": {"cleanup_request": {"? -> None": [[15, "def cleanup_request(f: flow.Flow) -> http.HTTPRequest:"]]}, "raw_request": {"? -> None": [[82, "def raw_request(f: flow.Flow) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.expor": {"func": {"httpie_command": {"? -> str": [[71, "def httpie_command(f: flow.Flow) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.cleanup_": {"var": {"request": {"?": [[19, "    request = f.request.copy()"]]}, "response": {"?": [[34, "    response = f.response.copy()  # type: ignore"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.curl_command": {"var": {"k": {"?": [[57, "    for k, v in request.headers.items(multi=True):"]]}, "args": {"[str]": [[56, "    args = [\"curl\"]"]]}, "request": {"None": [[55, "    request = cleanup_request(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.raw": {"var": {"request_present": {"int": [[92, "    request_present = hasattr(f, \"request\") and f.request  # type: ignore"]]}, "response_present": {"int": [[93, "    response_present = hasattr(f, \"response\") and f.response  # type: ignore"]]}}, "param": {"separator": {"str": [[90, "def raw(f: flow.Flow, separator=b\"\\r\\n\\r\\n\") -> bytes:"]]}, "f": {"?": [[90, "def raw(f: flow.Flow, separator=b\"\\r\\n\\r\\n\") -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.e": {"class": {"Export": {"<Export>": [[115, "class Export():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.request_content_for_consol": {"var": {"text": {"?": [[41, "        text = request.get_text(strict=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.httpie_comman": {"var": {"cmd": {"str": [[76, "    cmd = ' '.join(shlex.quote(arg) for arg in args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.Export.clip": {"var": {"v": {"None": [[149, "        v = strutils.always_str(func(flow))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.Export": {"func": {"clip": {"(Export, ?, ?) -> None / (Export, str, ?) -> None": [[142, "    def clip(self, format: str, flow: flow.Flow) -> None:"]]}, "file": {"(Export, str, ?, str) -> None / (Export, ?, ?, ?) -> None": [[124, "    def file(self, format: str, flow: flow.Flow, path: mitmproxy.types.Path) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export": {"func": {"curl_command": {"? -> str": [[54, "def curl_command(f: flow.Flow) -> str:"]]}, "raw": {"(?, str) -> str": [[90, "def raw(f: flow.Flow, separator=b\"\\r\\n\\r\\n\") -> bytes:"]]}, "raw_response": {"? -> None": [[86, "def raw_response(f: flow.Flow) -> bytes:"]]}, "cleanup_response": {"? -> None": [[30, "def cleanup_response(f: flow.Flow) -> http.HTTPResponse:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.httpie_command": {"var": {"k": {"?": [[74, "    for k, v in request.headers.items(multi=True):"]]}, "args": {"[str]": [[73, "    args = [\"http\", request.method, request.url]"]]}, "request": {"None": [[72, "    request = cleanup_request(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.export.request_content_f": {"var": {"escape_control_chars": {"dict": [[47, "    escape_control_chars = {chr(i): f\"\\\\x{i:02x}\" for i in range(32)}"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/options.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options.keypress": {"var": {"i": {"?": [[281, "        i = self.widget_list.index(self.focus_item)"]]}, "key": {"None": [[274, "            key = None"]]}}, "param": {"key": {"?": [[268, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp": {"func": {"sig_mod": {"(OptionHelp, ?) -> None": [[245, "    def sig_mod(self, txt):"]]}, "widget": {"(OptionHelp, ?) -> None / (OptionHelp, str) -> None": [[239, "    def widget(self, txt):"]]}, "__init__": {"? -> ?": [[228, "    def __init__(self, master):"]]}, "set_active": {"(OptionHelp, ?) -> None / (OptionHelp, bool) -> None": [[234, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionsList.keypress": {"var": {"v": {"?": [[175, "                v = self.walker.get_edit_text()"]]}, "d": {"?": [[177, "                    d = self.master.options.parse_setval(foc.opt, v)"]]}, "foc": {"?": [[174, "                foc, idx = self.get_focus()"], [194, "                foc, idx = self.get_focus()"]]}}, "param": {"key": {"?": [[171, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options.current_name": {"var": {"foc": {"?": [[265, "        foc, idx = self.optionslist.get_focus()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker._": {"param": {"editing": {"bool": [[128, "    def _get(self, pos, editing):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.keypr": {"param": {"self": {"OptionItem": [[88, "    def keypress(self, size, key):"]]}, "size": {"?": [[88, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp.set_active": {"var": {"h": {"?": [[235, "        h = urwid.Text(\"Option Help\")"]]}}, "param": {"val": {"bool": [[234, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options.keypr": {"var": {"tsize": {"?": [[282, "        tsize = self.get_item_size(size, i, True, item_rows)"]]}}, "param": {"self": {"Options": [[268, "    def keypress(self, size, key):"]]}, "size": {"?": [[268, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.set_focu": {"param": {"self": {"OptionListWalker": [[138, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options": {"var": {"keyctx": {"str": [[251, "    keyctx = \"options\""]]}, "title": {"str": [[250, "    title = \"Options\""]]}}, "func": {"current_name": {"Options -> None": [[264, "    def current_name(self):"]]}, "__init__": {"? -> ?": [[253, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.sig_mod": {"param": {"self": {"OptionListWalker": [[108, "    def sig_mod(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.set_focus": {"var": {"opt": {"?": [[141, "        opt = self.master.options._options[name]"]]}, "name": {"?": [[140, "        name = self.opts[index]"]]}}, "param": {"index": {"int": [[138, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options.current_nam": {"param": {"self": {"Options": [[264, "    def current_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker": {"func": {"set_focus": {"(OptionListWalker, ?) -> None / (OptionListWalker, int) -> None": [[138, "    def set_focus(self, index):"]]}, "get_focus": {"OptionListWalker -> (OptionItem, int)": [[135, "    def get_focus(self):"]]}, "_get": {"(OptionListWalker, ?, ?) -> OptionItem / (OptionListWalker, int, bool) -> OptionItem": [[128, "    def _get(self, pos, editing):"]]}, "stop_editing": {"OptionListWalker -> None": [[119, "    def stop_editing(self):"]]}, "sig_mod": {"OptionListWalker -> None": [[108, "    def sig_mod(self, *args, **kwargs):"]]}, "get_next": {"(OptionListWalker, ?) -> (OptionItem, int)": [[146, "    def get_next(self, pos):"]]}, "get_edit_text": {"OptionListWalker -> ?": [[125, "    def get_edit_text(self):"]]}, "__init__": {"? -> ?": [[96, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.fcol": {"var": {"s": {"str": [[24, "    s = str(s)"]]}}, "param": {"width": {"?": [[23, "def fcol(s, width, attr):"]]}, "s": {"?": [[23, "def fcol(s, width, attr):"]]}, "attr": {"?": [[23, "def fcol(s, width, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.selectab": {"param": {"self": {"OptionItem": [[85, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionsList": {"func": {"keypress": {"(OptionsList, ?, ?) -> None": [[171, "    def keypress(self, size, key):"]]}, "save_config": {"(OptionsList, ?) -> ?": [[165, "    def save_config(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.get_edit_text": {"param": {"self": {"OptionItem": [[82, "    def get_edit_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker._ge": {"var": {"opt": {"?": [[130, "        opt = self.master.options._options[name]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalk": {"func": {"get_prev": {"(OptionListWalker, ?) -> (OptionItem, int)": [[152, "    def get_prev(self, pos):"]]}, "start_editing": {"OptionListWalker -> None": [[114, "    def start_editing(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console": {"class": {"OptionsList": {"<OptionsList>": [[159, "class OptionsList(urwid.ListBox):"]]}, "Options": {"<Options>": [[249, "class Options(urwid.Pile, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.consol": {"var": {"option_focus_change": {"?": [[32, "option_focus_change = blinker.Signal()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp.widget": {"var": {"cols": {"?": [[240, "        cols, _ = self.master.ui.get_cols_rows()"]]}}, "param": {"self": {"OptionHelp": [[239, "    def widget(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options.__init__": {"var": {"oh": {"OptionHelp": [[254, "        oh = OptionHelp(master)"]]}}, "param": {"self": {"Options": [[253, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[253, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options": {"var": {"HELP_HEIGHT": {"int": [[13, "HELP_HEIGHT = 5"]]}}, "class": {"OptionHelp": {"<OptionHelp>": [[227, "class OptionHelp(urwid.Frame):"]]}, "OptionItem": {"<OptionItem>": [[35, "class OptionItem(urwid.WidgetWrap):"]]}}, "func": {"fcol": {"(?, ?, ?) -> (str, ?, ?)": [[23, "def fcol(s, width, attr):"]]}, "can_edit_inplace": {"? -> bool": [[16, "def can_edit_inplace(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.start_editing": {"param": {"self": {"OptionListWalker": [[114, "    def start_editing(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.get_widg": {"var": {"valstyle": {"str": [[56, "            valstyle = \"option_active_selected\" if changed else \"option_selected\""], [58, "            valstyle = \"option_active\" if changed else \"text\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.keypress": {"param": {"key": {"?": [[88, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionsList.save_config": {"param": {"path": {"?": [[165, "    def save_config(self, path):"]]}, "self": {"OptionsList": [[165, "    def save_config(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionsList.keypr": {"param": {"self": {"OptionsList": [[171, "    def keypress(self, size, key):"]]}, "size": {"?": [[171, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.__init__": {"param": {"opt": {"?": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}, "self": {"OptionItem": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}, "namewidth": {"int": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}, "focused": {"bool": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}, "walker": {"OptionListWalker": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}, "editing": {"bool": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem": {"func": {"get_widget": {"OptionItem -> None": [[43, "    def get_widget(self):"]]}, "get_edit_text": {"OptionItem -> ?": [[82, "    def get_edit_text(self):"]]}, "selectable": {"OptionItem -> bool": [[85, "    def selectable(self):"]]}, "__init__": {"? -> ?": [[36, "    def __init__(self, walker, opt, focused, namewidth, editing):"]]}, "keypress": {"(OptionItem, ?, ?) -> None": [[88, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionItem.get_widget": {"var": {"changed": {"?": [[54, "        changed = self.walker.master.options.has_changed(self.opt.name)"]]}, "valw": {"?": [[61, "            valw = urwid.Edit(edit_text=displayval)"], [63, "            valw = urwid.AttrMap("]]}, "displayval": {"?": [[50, "            displayval = pprint.pformat(val, indent=1)"]], "str": [[46, "            displayval = \"true\" if val else \"false\""], [48, "            displayval = \"\""], [52, "            displayval = str(val)"]]}, "val": {"?": [[44, "        val = self.opt.current()"]]}}, "param": {"self": {"OptionItem": [[43, "    def get_widget(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.get_prev": {"var": {"pos": {"int": [[153, "        pos = pos - 1"]]}}, "param": {"self": {"OptionListWalker": [[152, "    def get_prev(self, pos):"]]}, "pos": {"?": [[152, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.__init__": {"param": {"self": {"OptionListWalker": [[96, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[96, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.can_edit_inplace": {"param": {"opt": {"?": [[16, "def can_edit_inplace(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp.widge": {"param": {"txt": {"str": [[239, "    def widget(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp.__init__": {"param": {"self": {"OptionHelp": [[228, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[228, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionsList.__init__": {"param": {"self": {"OptionsList": [[160, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[160, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp.sig_mod": {"param": {"self": {"OptionHelp": [[245, "    def sig_mod(self, txt):"]]}, "txt": {"?": [[245, "    def sig_mod(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.stop_editing": {"param": {"self": {"OptionListWalker": [[119, "    def stop_editing(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionHelp.set_activ": {"var": {"style": {"str": [[236, "        style = \"heading\" if val else \"heading_inactive\""]]}}, "param": {"self": {"OptionHelp": [[234, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.c": {"class": {"OptionListWalker": {"<OptionListWalker>": [[95, "class OptionListWalker(urwid.ListWalker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Option": {"func": {"keypress": {"(Options, ?, ?) -> None": [[268, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.get_next": {"var": {"pos": {"int": [[149, "        pos = pos + 1"]]}}, "param": {"self": {"OptionListWalker": [[146, "    def get_next(self, pos):"]]}, "pos": {"?": [[146, "    def get_next(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.get_focu": {"param": {"self": {"OptionListWalker": [[135, "    def get_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker._get": {"var": {"name": {"?": [[129, "        name = self.opts[pos]"]]}}, "param": {"self": {"OptionListWalker": [[128, "    def _get(self, pos, editing):"]]}, "pos": {"int": [[128, "    def _get(self, pos, editing):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionListWalker.get_edit_text": {"param": {"self": {"OptionListWalker": [[125, "    def get_edit_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.Options.keyp": {"var": {"item_rows": {"None": [[278, "        item_rows = None"]], "?": [[280, "            item_rows = self.get_item_rows(size, focus = True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.options.OptionsLis": {"func": {"__init__": {"? -> ?": [[160, "    def __init__(self, master):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_flow.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestFlowMaster.test_a": {"param": {"self": {"TestFlowMaster": [[123, "    async def test_all(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestFlowMaster.test_load_http_flow_rever": {"param": {"self": {"TestFlowMaster": [[98, "    async def test_load_http_flow_reverse(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerializ": {"func": {"test_versioncheck": {"TestSerialize -> None": [[72, "    def test_versioncheck(self):"]]}, "test_filter": {"TestSerialize -> None": [[35, "    def test_filter(self):"]]}, "test_error": {"TestSerialize -> None": [[52, "    def test_error(self):"]]}, "test_roundtrip": {"TestSerialize -> None": [[17, "    def test_roundtrip(self):"]]}, "test_copy": {"TestSerialize -> None": [[84, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_filte": {"var": {"r": {"FlowReader": [[49, "        r = mitmproxy.io.FlowReader(sio)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_erro": {"var": {"r": {"FlowReader": [[56, "        r = mitmproxy.io.FlowReader(sio)"], [65, "        r = mitmproxy.io.FlowReader(sio)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestError": {"func": {"test_getset_state": {"TestError -> None": [[147, "    def test_getset_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestError.test_getset_": {"var": {"state": {"dict": [[149, "        state = e.get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestError.test_repr": {"var": {"e": {"Error": [[163, "        e = flow.Error(\"yay\")"]]}}, "param": {"self": {"TestError": [[162, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_copy": {"var": {"f2": {"?": [[91, "        f2 = f.copy()"]]}, "f": {"?": [[88, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestSerialize": [[84, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_f": {"class": {"TestFlowMaster": {"<TestFlowMaster>": [[96, "class TestFlowMaster:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestFlowMaster.test_all": {"var": {"s": {"?": [[127, "        s = tservers.TestState()"]]}, "opts": {"Options": [[124, "        opts = options.Options("]]}, "f": {"?": [[129, "            f = tflow.tflow(req=None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_versioncheck": {"var": {"r": {"FlowReader": [[80, "        r = mitmproxy.io.FlowReader(sio)"]]}, "sio": {"?": [[76, "        sio = io.BytesIO()"]]}, "d": {"?": [[74, "        d = f.get_state()"]]}, "f": {"?": [[73, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestSerialize": [[72, "    def test_versioncheck(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_roundtrip": {"var": {"f2": {"?": [[30, "        f2 = l[0]"]]}, "f": {"?": [[19, "        f = tflow.tflow()"]]}, "l": {"list": [[27, "        l = list(r.stream())"]]}, "r": {"FlowReader": [[26, "        r = mitmproxy.io.FlowReader(sio)"]]}, "w": {"FlowWriter": [[22, "        w = mitmproxy.io.FlowWriter(sio)"]]}, "sio": {"?": [[18, "        sio = io.BytesIO()"]]}}, "param": {"self": {"TestSerialize": [[17, "    def test_roundtrip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow": {"class": {"TestSerialize": {"<TestSerialize>": [[15, "class TestSerialize:"]]}, "TestError": {"<TestError>": [[145, "class TestError:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestFlowMaster.test_load_websocket_flow": {"var": {"s": {"?": [[113, "        s = tservers.TestState()"]]}, "opts": {"Options": [[110, "        opts = options.Options("]]}, "f": {"?": [[115, "            f = tflow.twebsocketflow()"]]}}, "param": {"self": {"TestFlowMaster": [[109, "    async def test_load_websocket_flow(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_filter": {"var": {"sio": {"?": [[36, "        sio = io.BytesIO()"]]}, "flt": {"None": [[37, "        flt = flowfilter.parse(\"~c 200\")"]]}, "w": {"FilteredFlowWriter": [[38, "        w = mitmproxy.io.FilteredFlowWriter(sio, flt)"]]}, "f": {"?": [[40, "        f = tflow.tflow(resp=True)"], [44, "        f = tflow.tflow(resp=True)"]]}}, "param": {"self": {"TestSerialize": [[35, "    def test_filter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestFlowMaster.test_load_http_flow_reverse": {"var": {"s": {"?": [[102, "        s = tservers.TestState()"]]}, "opts": {"Options": [[99, "        opts = options.Options("]]}, "f": {"?": [[104, "            f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestSerialize.test_error": {"var": {"sio": {"?": [[53, "        sio = io.BytesIO()"], [60, "        sio = io.BytesIO()"]]}, "w": {"FlowWriter": [[62, "        w = mitmproxy.io.FlowWriter(sio)"]]}, "f": {"FlowReadException": [[69, "        f = FlowReadException(\"foo\")"]], "?": [[61, "        f = tflow.tdummyflow()"]]}}, "param": {"self": {"TestSerialize": [[52, "    def test_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestError.test_getset_stat": {"var": {"e": {"Error": [[148, "        e = flow.Error(\"Error\")"]]}, "e3": {"?": [[159, "        e3 = e.copy()"]]}, "e2": {"Error": [[154, "        e2 = flow.Error(\"bar\")"]]}}, "param": {"self": {"TestError": [[147, "    def test_getset_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flow.TestErro": {"func": {"test_repr": {"TestError -> None": [[162, "    def test_repr(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/headers.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers._native": {"param": {"x": {"?": [[9, "def _native(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.h": {"class": {"Headers": {"<Headers>": [[17, "class Headers(multidict.MultiDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.head": {"func": {"parse_content_type": {"str -> (str, str, ?) / ? -> (?, ?, ?)": [[149, "def parse_content_type(c):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.items": {"param": {"multi": {"bool": [[139, "    def items(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.get_a": {"param": {"self": {"Headers": [[113, "    def get_all(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.assemble_content_ty": {"param": {"parameters": {"{dict | dict}": [[176, "def assemble_content_type(type, subtype, parameters):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.insert": {"var": {"value": {"str": [[136, "        value = _always_bytes(value)"]]}, "key": {"str": [[135, "        key = _always_bytes(key)"]]}}, "param": {"index": {"?": [[134, "    def insert(self, index, key, value):"]]}, "self": {"Headers": [[134, "    def insert(self, index, key, value):"]]}, "value": {"?": [[134, "    def insert(self, index, key, value):"]]}, "key": {"?": [[134, "    def insert(self, index, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.set_": {"var": {"values": {"{[None] | [str]}": [[131, "        values = [_always_bytes(x) for x in values]"]]}}, "param": {"values": {"[str]": [[125, "    def set_all(self, name, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.assemble_content_type": {"var": {"params": {"str": [[179, "    params = \"; \".join("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers": {"func": {"_native": {"? -> ?": [[9, "def _native(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.set_all": {"var": {"name": {"{None | str}": [[130, "        name = _always_bytes(name)"]]}}, "param": {"name": {"str": [[125, "    def set_all(self, name, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Head": {"func": {"insert": {"(Headers, ?, ?, ?) -> None": [[134, "    def insert(self, index, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.get_all": {"var": {"name": {"str": [[119, "        name = _always_bytes(name)"]]}}, "param": {"name": {"?": [[113, "    def get_all(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.H": {"func": {"_reduce_values": {"? -> str": [[90, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.parse_content_typ": {"var": {"clause": {"[str]": [[170, "            clause = i.split(\"=\", 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.header": {"func": {"assemble_content_type": {"(str, str, ?) -> str / (str, str, dict) -> str / (?, ?, ?) -> str": [[176, "def assemble_content_type(type, subtype, parameters):"]]}, "_always_bytes": {"str -> None / ? -> str": [[13, "def _always_bytes(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers._kconv": {"param": {"key": {"?": [[95, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Header": {"func": {"__bytes__": {"Headers -> str": [[99, "    def __bytes__(self):"]]}, "items": {"(Headers, bool) -> [(?, ?)]": [[139, "    def items(self, multi=False):"]]}, "set_all": {"(Headers, str, [str]) -> None / (Headers, ?, ?) -> None": [[125, "    def set_all(self, name, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.assemble_content_": {"param": {"subtype": {"str": [[176, "def assemble_content_type(type, subtype, parameters):"]]}, "type": {"str": [[176, "def assemble_content_type(type, subtype, parameters):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers._reduce_": {"param": {"values": {"?": [[90, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.__bytes__": {"param": {"self": {"Headers": [[99, "    def __bytes__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.item": {"param": {"self": {"Headers": [[139, "    def items(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.parse_content_type": {"var": {"i": {"str": [[169, "        for i in parts[1].split(\";\"):"]]}, "parts": {"[str]": [[163, "    parts = c.split(\";\", 1)"]]}, "ts": {"[str]": [[164, "    ts = parts[0].split(\"/\", 1)"]]}, "d": {"?": [[167, "    d = collections.OrderedDict()"]]}}, "param": {"c": {"str": [[149, "def parse_content_type(c):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers._always_bytes": {"param": {"x": {"str": [[13, "def _always_bytes(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers": {"func": {"__delitem__": {"(Headers, ?) -> None": [[105, "    def __delitem__(self, key):"]]}, "__iter__": {"Headers -> None": [[109, "    def __iter__(self):"]]}, "_kconv": {"? -> ?": [[95, "    def _kconv(key):"]]}, "__init__": {"? -> ?": [[65, "    def __init__(self, fields=(), **headers):"]]}, "get_all": {"(Headers, ?) -> [?]": [[113, "    def get_all(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.__iter__": {"var": {"x": {"?": [[110, "        for x in super().__iter__():"]]}}, "param": {"self": {"Headers": [[109, "    def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.__init__": {"var": {"headers": {"dict": [[83, "        headers = {"]]}, "key": {"?": [[78, "        for key, value in self.fields:"]]}}, "param": {"fields": {"{((str, str), (str, str)) | ((str, str), (str, str), (str, str)) | () | [(str, str)] | [?] | [[?]] | [[str]]}": [[65, "    def __init__(self, fields=(), **headers):"]]}, "self": {"Headers": [[65, "    def __init__(self, fields=(), **headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.set_a": {"param": {"self": {"Headers": [[125, "    def set_all(self, name, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.headers.Headers.__delitem__": {"var": {"key": {"str": [[106, "        key = _always_bytes(key)"]]}}, "param": {"self": {"Headers": [[105, "    def __delitem__(self, key):"]]}, "key": {"?": [[105, "    def __delitem__(self, key):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/helper_tools/dumperview.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.dumpervie": {"func": {"show": {"(?, [?]) -> None / (?, ?) -> None": [[9, "def show(flow_detail, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.dumperview.sh": {"param": {"flows": {"[?]": [[9, "def show(flow_detail, flows):"]]}, "flow_detail": {"?": [[9, "def show(flow_detail, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.dumperview.ault": {"var": {"f1": {"?": [[25, "    f1 = tflow.ttcpflow(client_conn=True, server_conn=True)"]]}}, "param": {"level": {"?": [[24, "def tcp(level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.dumperview.show": {"var": {"d": {"Dumper": [[10, "    d = dumper.Dumper()"]]}, "f": {"?": [[13, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.dumperview": {"func": {"cli": {"() -> None": [[18, "def cli():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_sliding_window.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_sliding_window.test_simple": {"var": {"y": {"list": [[5, "    y = list(sliding_window.window(range(1000, 1005), 1, 2))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_sliding_window.test_is_lazy": {"var": {"x": {"None": [[24, "    x = sliding_window.window(gen(), 1, 1)"]]}, "done": {"?": [[17, "    done = False"]]}}, "func": {"gen": {"() -> None": [[19, "    def gen():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_sliding_window": {"func": {"test_simple": {"() -> None": [[4, "def test_simple():"]]}, "test_is_lazy": {"() -> None": [[16, "def test_is_lazy():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/websockets.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.fin": {"param": {"self": {"WebsocketFrame": [[122, "    def fin(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.rawbody": {"param": {"self": {"WebsocketFrame": [[114, "    def rawbody(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFram": {"func": {"resolve": {"(WebsocketFrame, ?, None) -> None": [[175, "    def resolve(self, settings, msg=None):"]]}, "expr": {"<WebsocketFrame> -> None": [[158, "    def expr(cls):"]]}, "opcode": {"WebsocketFrame -> ?": [[118, "    def opcode(self):"]]}, "key": {"WebsocketFrame -> ?": [[142, "    def key(self):"]]}, "knone": {"WebsocketFrame -> ?": [[146, "    def knone(self):"]]}, "values": {"(WebsocketFrame, ?) -> [str]": [[191, "    def values(self, settings):"]]}, "spec": {"WebsocketFrame -> str": [[235, "    def spec(self):"]]}, "toklength": {"WebsocketFrame -> ?": [[154, "    def toklength(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.rsv1": {"param": {"self": {"WebsocketFrame": [[126, "    def rsv1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFr": {"var": {"unique_name": {"str": [[103, "    unique_name = \"body\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.rsv3": {"param": {"self": {"WebsocketFrame": [[134, "    def rsv3(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.rsv2": {"param": {"self": {"WebsocketFrame": [[130, "    def rsv2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.value": {"var": {"vals": {"[str]": [[221, "        vals = [bytes(frame)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.NestedF": {"var": {"preamble": {"str": [[240, "    preamble = \"f\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.Key": {"var": {"length": {"int": [[62, "    length = 4"]]}, "preamble": {"str": [[61, "    preamble = \"k\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketClientFra": {"var": {"components": {"?": [[245, "    components = COMPONENTS + [NestedFrame]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.valu": {"var": {"masker": {"Masker": [[224, "                masker = mitmproxy.net.websockets.Masker(frame.masking_key)"]]}, "frameparts": {"dict": [[206, "        frameparts = dict("]]}}, "param": {"self": {"WebsocketFrame": [[191, "    def values(self, settings):"]]}, "settings": {"?": [[191, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.RSV2": {"var": {"name": {"str": [[49, "    name = \"rsv2\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.KeyNone": {"var": {"TOK": {"str": [[67, "    TOK = \"knone\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.Mask": {"var": {"name": {"str": [[57, "    name = \"mask\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.spec": {"param": {"self": {"WebsocketFrame": [[235, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.expr": {"var": {"atom": {"?": [[160, "        atom = pp.MatchFirst(parts)"]]}}, "param": {"cls": {"<WebsocketFrame>": [[158, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.NestedFram": {"var": {"nest_type": {"<WebsocketFrame>": [[241, "    nest_type = WebsocketFrame"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.nested_fram": {"param": {"self": {"WebsocketFrame": [[172, "    def nested_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.values": {"var": {"bodygen": {"None": [[202, "            bodygen = None"]], "str": [[199, "            bodygen = NESTED_LEADER + strutils.always_bytes(self.nested_frame.parsed.spec())"]], "?": [[193, "            bodygen = self.body.value.get_generator(settings)"], [196, "            bodygen = self.rawbody.value.get_generator(settings)"]]}, "i": {"str": [[216, "        for i in [\"opcode\", \"fin\", \"rsv1\", \"rsv2\", \"rsv3\", \"mask\"]:"]]}, "frame": {"FrameHeader": [[220, "        frame = mitmproxy.net.websockets.FrameHeader(**frameparts)"]]}, "length": {"int": [[194, "            length = len(self.body.value.get_generator(settings))"], [197, "            length = len(self.rawbody.value.get_generator(settings))"], [200, "            length = len(bodygen)"], [203, "            length = 0"], [205, "            length = int(self.toklength.value)"]]}, "key": {"?": [[214, "            key = self.key.values(settings)[0][:]"]]}, "v": {"?": [[217, "            v = getattr(self, i, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.w": {"class": {"WebsocketFrame": {"<WebsocketFrame>": [[99, "class WebsocketFrame(message.Message):"]]}, "WebsocketClientFrame": {"<WebsocketClientFrame>": [[244, "class WebsocketClientFrame(WebsocketFrame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.toklength": {"param": {"self": {"WebsocketFrame": [[154, "    def toklength(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.Body": {"var": {"preamble": {"str": [[32, "    preamble = \"b\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.body": {"param": {"self": {"WebsocketFrame": [[110, "    def body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.ex": {"var": {"resp": {"?": [[161, "        resp = pp.And("], [168, "        resp = resp.setParseAction(cls)"]]}, "parts": {"[?]": [[159, "        parts = [i.expr() for i in cls.components]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websock": {"class": {"NestedFrame": {"<NestedFrame>": [[239, "class NestedFrame(message.NestedMessage):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame": {"var": {"logattrs": {"[str]": [[101, "    logattrs = [\"body\"]"]]}}, "func": {"body": {"WebsocketFrame -> ?": [[110, "    def body(self):"]]}, "rsv3": {"WebsocketFrame -> ?": [[134, "    def rsv3(self):"]]}, "rawbody": {"WebsocketFrame -> ?": [[114, "    def rawbody(self):"]]}, "mask": {"WebsocketFrame -> ?": [[138, "    def mask(self):"]]}, "actions": {"WebsocketFrame -> ?": [[106, "    def actions(self):"]]}, "fin": {"WebsocketFrame -> ?": [[122, "    def fin(self):"]]}, "rsv2": {"WebsocketFrame -> ?": [[130, "    def rsv2(self):"]]}, "rsv1": {"WebsocketFrame -> ?": [[126, "    def rsv1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.Fi": {"var": {"name": {"str": [[41, "    name = \"fin\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.RSV3": {"var": {"name": {"str": [[53, "    name = \"rsv3\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.RawBody": {"var": {"unique_name": {"str": [[36, "    unique_name = \"body\""]]}, "preamble": {"str": [[37, "    preamble = \"r\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.RSV1": {"var": {"name": {"str": [[45, "    name = \"rsv1\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.action": {"param": {"self": {"WebsocketFrame": [[106, "    def actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFra": {"func": {"times": {"WebsocketFrame -> ?": [[150, "    def times(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.resolve": {"var": {"k": {"str": [[183, "            k = ''.join([allowed_chars[random.randrange(0, len(allowed_chars))] for i in range(4)])"]]}}, "param": {"msg": {"None": [[175, "    def resolve(self, settings, msg=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.OpCode": {"var": {"max": {"int": [[27, "    max = 15"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.key": {"param": {"self": {"WebsocketFrame": [[142, "    def key(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.opcod": {"param": {"self": {"WebsocketFrame": [[118, "    def opcode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.KeyNo": {"var": {"unique_name": {"str": [[66, "    unique_name = \"key\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.Length": {"var": {"preamble": {"str": [[72, "    preamble = \"l\""]]}, "bounds": {"(int, int)": [[71, "    bounds = (0, 1 << 64)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websocket": {"class": {"Mask": {"<Mask>": [[56, "class Mask(base.Boolean):"]]}, "Times": {"<Times>": [[75, "class Times(base.Integer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketF": {"func": {"nested_frame": {"WebsocketFrame -> ?": [[172, "    def nested_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.knon": {"param": {"self": {"WebsocketFrame": [[146, "    def knone(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets": {"var": {"NESTED_LEADER": {"str": [[11, "NESTED_LEADER = b\"pathod!\""]]}, "COMPONENTS": {"[{<Body> | <Fin> | <Key> | <KeyNone> | <Length> | <Mask> | <OpCode> | <RSV1> | <RSV2> | <RSV3> | <RawBody> | <Times>}]": [[79, "COMPONENTS = ["]]}}, "class": {"Body": {"<Body>": [[31, "class Body(base.Value):"]]}, "WF": {"<WF>": [[14, "class WF(base.CaselessLiteral):"]]}, "RawBody": {"<RawBody>": [[35, "class RawBody(base.Value):"]]}, "KeyNone": {"<KeyNone>": [[65, "class KeyNone(base.CaselessLiteral):"]]}, "RSV3": {"<RSV3>": [[52, "class RSV3(base.Boolean):"]]}, "Length": {"<Length>": [[70, "class Length(base.Integer):"]]}, "OpCode": {"<OpCode>": [[18, "class OpCode(base.IntField):"]]}, "Key": {"<Key>": [[60, "class Key(base.FixedLengthValue):"]]}, "Fin": {"<Fin>": [[40, "class Fin(base.Boolean):"]]}, "RSV2": {"<RSV2>": [[48, "class RSV2(base.Boolean):"]]}, "RSV1": {"<RSV1>": [[44, "class RSV1(base.Boolean):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.mask": {"param": {"self": {"WebsocketFrame": [[138, "    def mask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.Times": {"var": {"preamble": {"str": [[76, "    preamble = \"x\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.tim": {"param": {"self": {"WebsocketFrame": [[150, "    def times(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WF": {"var": {"TOK": {"str": [[15, "    TOK = \"wf\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.OpCod": {"var": {"preamble": {"str": [[28, "    preamble = \"c\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.websockets.WebsocketFrame.resolv": {"var": {"tokens": {"?": [[176, "        tokens = self.tokens[:]"]]}, "allowed_chars": {"?": [[182, "            allowed_chars = string.ascii_letters + string.digits"]]}}, "param": {"self": {"WebsocketFrame": [[175, "    def resolve(self, settings, msg=None):"]]}, "settings": {"?": [[175, "    def resolve(self, settings, msg=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/recorder/c.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.c": {"var": {"addons": {"[Recorder]": [[3, "addons = [recorder.Recorder(\"c\")]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_pathod_cmdline.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod_cmdli": {"func": {"test_parse_anchor_spec": {"() -> None": [[6, "def test_parse_anchor_spec():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod_cmdlin": {"func": {"test_pathod": {"(?, ?) -> None": [[12, "def test_pathod(perror, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod_cmdline.test_pathod": {"var": {"a": {"?": [[15, "    a = cmdline.args_pathod("], [24, "    a = cmdline.args_pathod("], [34, "    a = cmdline.args_pathod("], [43, "    a = cmdline.args_pathod("], [52, "    a = cmdline.args_pathod("], [62, "    a = cmdline.args_pathod("], [72, "    a = cmdline.args_pathod("], [81, "    a = cmdline.args_pathod("]]}}, "param": {"perror": {"?": [[12, "def test_pathod(perror, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod_cmdline.test_patho": {"param": {"tdata": {"?": [[12, "def test_pathod(perror, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/pathod/libpathod_pathoc.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.libpathod_pathoc": {"var": {"p": {"Pathoc": [[4, "p = pathoc.Pathoc((\"google.com\", 80))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/websocket.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.w": {"class": {"WebSocketMessage": {"<WebSocketMessage>": [[14, "class WebSocketMessage(serializable.Serializable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.inject_message": {"param": {"payload": {"?": [[144, "    def inject_message(self, endpoint, payload):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.__init__": {"param": {"self": {"WebSocketFlow": [[64, "    def __init__(self, client_conn, server_conn, handshake_flow, live=None):"]]}, "live": {"None": [[64, "    def __init__(self, client_conn, server_conn, handshake_flow, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.__init__": {"var": {"self": {"WebSocketMessage": [[20, "        self, type: int, from_client: bool, content: bytes, timestamp: Optional[float]=None, killed: bool=False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.webs": {"class": {"WebSocketFlow": {"<WebSocketFlow>": [[59, "class WebSocketFlow(flow.Flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.__repr__": {"param": {"self": {"WebSocketMessage": [[44, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.get_stat": {"param": {"self": {"WebSocketMessage": [[37, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.inject_messag": {"param": {"self": {"WebSocketFlow": [[144, "    def inject_message(self, endpoint, payload):"]]}, "endpoint": {"?": [[144, "    def inject_message(self, endpoint, payload):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage": {"func": {"kill": {"WebSocketMessage -> None": [[50, "    def kill(self):"]]}, "__init__": {"? -> ?": [[19, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.from_": {"param": {"state": {"?": [[127, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.set_": {"param": {"state": {"?": [[40, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.from_state": {"param": {"cls": {"<WebSocketMessage>": [[34, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.from_": {"param": {"state": {"?": [[34, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.get_state": {"var": {"d": {"?": [[122, "        d = super().get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketM": {"func": {"get_state": {"WebSocketMessage -> (int, ?, str, ?, ?)": [[37, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.get_stat": {"param": {"self": {"WebSocketFlow": [[121, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.set_stat": {"param": {"self": {"WebSocketMessage": [[40, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.from_state": {"var": {"f": {"WebSocketFlow": [[128, "        f = cls(None, None, None)"]]}}, "param": {"cls": {"<WebSocketFlow>": [[127, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.__init": {"param": {"handshake_flow": {"{HTTPFlow | bool}": [[64, "    def __init__(self, client_conn, server_conn, handshake_flow, live=None):"]]}, "server_conn": {"{ServerConnection | bool}": [[64, "    def __init__(self, client_conn, server_conn, handshake_flow, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow.__repr__": {"param": {"self": {"WebSocketFlow": [[132, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessage.ki": {"param": {"self": {"WebSocketMessage": [[50, "    def kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketFlow": {"var": {"_stateobject_attributes": {"?": [[102, "    _stateobject_attributes = flow.Flow._stateobject_attributes.copy()"]]}}, "param": {"client_conn": {"{ClientConnection | bool}": [[64, "    def __init__(self, client_conn, server_conn, handshake_flow, live=None):"]]}}, "func": {"from_state": {"(<WebSocketFlow>, ?) -> WebSocketFlow": [[127, "    def from_state(cls, state):"]]}, "message_info": {"(WebSocketFlow, ?) -> str": [[135, "    def message_info(self, message: WebSocketMessage) -> str:"]]}, "__repr__": {"WebSocketFlow -> str": [[132, "    def __repr__(self):"]]}, "get_state": {"WebSocketFlow -> None": [[121, "    def get_state(self):"]]}, "inject_message": {"(WebSocketFlow, ?, ?) -> None": [[144, "    def inject_message(self, endpoint, payload):"]]}, "__init__": {"? -> ?": [[64, "    def __init__(self, client_conn, server_conn, handshake_flow, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.websocket.WebSocketMessag": {"func": {"from_state": {"(<WebSocketMessage>, ?) -> WebSocketMessage": [[34, "    def from_state(cls, state):"]]}, "set_state": {"(WebSocketMessage, ?) -> None": [[40, "    def set_state(self, state):"]]}, "__repr__": {"WebSocketMessage -> str": [[44, "    def __repr__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/recorder/recorder.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.recorder.Recorder.__init__": {"param": {"self": {"Recorder": [[9, "    def __init__(self, name = \"recorder\"):"]]}, "name": {"str": [[9, "    def __init__(self, name = \"recorder\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.recorder.Recorder": {"var": {"call_log": {"[(str, ?, ?, ?)]": [[7, "    call_log = []"]]}}, "func": {"__init__": {"? -> ?": [[9, "    def __init__(self, name = \"recorder\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.recorder": {"var": {"addons": {"[Recorder]": [[24, "addons = [Recorder()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.recorder.Recorder.__getattr__": {"param": {"self": {"Recorder": [[12, "    def __getattr__(self, attr):"]]}, "attr": {"?": [[12, "    def __getattr__(self, attr):"]]}}, "func": {"prox": {"() -> None": [[14, "            def prox(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.recorder.Record": {"func": {"__getattr__": {"(Recorder, ?) -> () -> None": [[12, "    def __getattr__(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.recorder.Recorder.__getattr__.prox": {"var": {"lg": {"(str, ?, ?, ?)": [[15, "                lg = (self.name, attr, args, kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts": {"class": {"Recorder": {"<Recorder>": [[6, "class Recorder:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/io-write-flow-file.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.io-write-flow-fil": {"class": {"Writer": {"<Writer>": [[16, "class Writer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.io-write-flow-file": {"var": {"addons": {"[Writer]": [[29, "addons = [Writer(sys.argv[1])]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.io-write-flow-file.Writ": {"func": {"response": {"(Writer, ?) -> None": [[21, "    def response(self, flow: http.HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.io-write-flow-file.Writer": {"func": {"done": {"Writer -> None": [[25, "    def done(self):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self, path: str) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.io-write-flow-file.Writer.don": {"param": {"self": {"Writer": [[25, "    def done(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/addon.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon": {"func": {"load": {"? -> None": [[22, "def load(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.Addon": {"func": {"load": {"(Addon, ?) -> None": [[10, "    def load(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.configur": {"param": {"updated": {"?": [[18, "def configure(updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.add": {"var": {"event_log": {"[str]": [[2, "event_log = []"]]}}, "func": {"configure": {"? -> None": [[18, "def configure(updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.Addon.configur": {"param": {"self": {"Addon": [[14, "    def configure(self, updated):"]]}, "updated": {"?": [[14, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.a": {"class": {"Addon": {"<Addon>": [[5, "class Addon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.Addon.load": {"param": {"self": {"Addon": [[10, "    def load(self, opts):"]]}, "opts": {"?": [[10, "    def load(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.load": {"param": {"l": {"?": [[22, "def load(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.Addon.event_log": {"param": {"self": {"Addon": [[7, "    def event_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.addon.Add": {"func": {"event_log": {"Addon -> [str]": [[7, "    def event_log(self):"]]}, "configure": {"(Addon, ?) -> None": [[14, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscript": {"var": {"addons": {"[Addon]": [[26, "addons = [Addon()]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/flowfilter.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FReq.__call__": {"param": {"self": {"FReq": [[128, "    def __call__(self, f):"]]}, "f": {"?": [[128, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FMarked.__call__": {"param": {"self": {"FMarked": [[92, "    def __call__(self, f):"]]}, "f": {"?": [[92, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBod": {"var": {"flags": {"?": [[257, "    flags = re.DOTALL"]]}, "help": {"str": [[256, "    help = \"Body\""]]}}, "func": {"__call__": {"(FBod, ?) -> None": [[260, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHTTP.__call__": {"param": {"self": {"FHTTP": [[101, "    def __call__(self, f):"]]}, "f": {"?": [[101, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FSr": {"var": {"code": {"str": [[358, "    code = \"src\""]]}}, "func": {"__call__": {"(FSrc, ?) -> None": [[362, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBod.__call__": {"var": {"msg": {"?": [[269, "            for msg in f.messages:"]]}}, "param": {"self": {"FBod": [[260, "    def __call__(self, f):"]]}, "f": {"?": [[260, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTypeResponse": {"func": {"__call__": {"(FContentTypeResponse, ?) -> int": [[212, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Rex": {"var": {"flags": {"int": [[143, "    flags = 0"]]}, "is_binary": {"?": [[144, "    is_binary = True"]]}}, "func": {"__init__": {"? -> ?": [[146, "    def __init__(self, expr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBodResponse.__call__": {"var": {"msg": {"?": [[304, "            for msg in f.messages:"]]}}, "param": {"self": {"FBodResponse": [[298, "    def __call__(self, f):"]]}, "f": {"?": [[298, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.only.decorator.filter_typ": {"param": {"self": {"?": [[51, "        def filter_types(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowf": {"var": {"TFilter": {"?": [[523, "TFilter = Callable[[flow.Flow], bool]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHea": {"var": {"code": {"str": [[219, "    code = \"h\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FSrc.__call__": {"var": {"r": {"str": [[365, "        r = \"{}:{}\".format(f.client_conn.address[0], f.client_conn.address[1])"]]}}, "param": {"self": {"FSrc": [[362, "    def __call__(self, f):"]]}, "f": {"?": [[362, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Token": {"func": {"dump": {"(_Token, int, ?) -> None": [[63, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHeadResponse.__call__": {"param": {"self": {"FHeadResponse": [[249, "    def __call__(self, f):"]]}, "f": {"?": [[249, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FOr.__call__": {"param": {"self": {"FOr": [[421, "    def __call__(self, f):"]]}, "f": {"?": [[421, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FDomain.__call__": {"var": {"f": {"HTTPFlow": [[328, "            f = f.handshake_flow"]]}}, "param": {"self": {"FDomain": [[326, "    def __call__(self, f):"]]}, "f": {"?": [[326, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FErr.__call__": {"param": {"self": {"FErr": [[84, "    def __call__(self, f):"]]}, "f": {"?": [[84, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._check_content_typ": {"param": {"rex": {"?": [[156, "def _check_content_type(rex, message):"]]}, "message": {"?": [[156, "def _check_content_type(rex, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FErr": {"var": {"code": {"str": [[81, "    code = \"e\""]]}, "help": {"str": [[82, "    help = \"Match error\""]]}}, "func": {"__call__": {"(FErr, ?) -> ?": [[84, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHead.__call__": {"param": {"self": {"FHead": [[224, "    def __call__(self, f):"]]}, "f": {"?": [[224, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FResp": {"var": {"code": {"str": [[134, "    code = \"s\""]]}}, "func": {"__call__": {"(FResp, ?) -> bool": [[138, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FDst.__call__": {"var": {"r": {"str": [[377, "        r = \"{}:{}\".format(f.server_conn.address[0], f.server_conn.address[1])"]]}}, "param": {"self": {"FDst": [[374, "    def __call__(self, f):"]]}, "f": {"?": [[374, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.only.decorator.filter_types": {"param": {"flow": {"?": [[51, "        def filter_types(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTyp": {"var": {"code": {"str": [[186, "    code = \"t\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBodResponse": {"var": {"flags": {"?": [[295, "    flags = re.DOTALL"]]}}, "func": {"__call__": {"(FBodResponse, ?) -> None": [[298, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FNo": {"func": {"__init__": {"? -> ?": [[427, "    def __init__(self, itm):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FSrc": {"var": {"help": {"str": [[359, "    help = \"Match source address\""]]}, "is_binary": {"?": [[360, "    is_binary = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FDomain": {"var": {"code": {"str": [[320, "    code = \"d\""]]}, "flags": {"?": [[322, "    flags = re.IGNORECASE"]]}, "help": {"str": [[321, "    help = \"Domain\""]]}}, "func": {"__call__": {"(FDomain, ?) -> bool": [[326, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTypeRequest.__call__": {"param": {"self": {"FContentTypeRequest": [[203, "    def __call__(self, f):"]]}, "f": {"?": [[203, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FUr": {"var": {"help": {"str": [[337, "    help = \"URL\""]]}}, "func": {"__call__": {"(FUrl, ?) -> None": [[349, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FUrl.make": {"var": {"toks": {"?": [[345, "            toks = toks[1:]"]]}}, "param": {"loc": {"?": [[343, "    def make(klass, s, loc, toks):"]]}, "s": {"?": [[343, "    def make(klass, s, loc, toks):"]]}, "klass": {"<FUrl>": [[343, "    def make(klass, s, loc, toks):"]]}, "toks": {"?": [[343, "    def make(klass, s, loc, toks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBodRequest.__call__": {"var": {"msg": {"?": [[287, "            for msg in f.messages:"]]}}, "param": {"self": {"FBodRequest": [[281, "    def __call__(self, f):"]]}, "f": {"?": [[281, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FRes": {"var": {"help": {"str": [[135, "    help = \"Match response\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FNot": {"func": {"__call__": {"(FNot, ?) -> ?": [[434, "    def __call__(self, f):"]]}, "dump": {"(FNot, int, ?) -> None": [[430, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FReq": {"var": {"code": {"str": [[124, "    code = \"q\""]]}, "help": {"str": [[125, "    help = \"Match request with no response\""]]}}, "func": {"__call__": {"(FReq, ?) -> None": [[128, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FOr.dump": {"var": {"i": {"?": [[418, "        for i in self.lst:"]]}}, "param": {"self": {"FOr": [[416, "    def dump(self, indent=0, fp=sys.stdout):"]]}, "indent": {"int": [[416, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAnd.dump": {"var": {"i": {"?": [[404, "        for i in self.lst:"]]}}, "param": {"self": {"FAnd": [[402, "    def dump(self, indent=0, fp=sys.stdout):"]]}, "indent": {"int": [[402, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHeadResponse": {"var": {"flags": {"?": [[246, "    flags = re.MULTILINE"]]}}, "func": {"__call__": {"(FHeadResponse, ?) -> None": [[249, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FMethod": {"var": {"flags": {"?": [[312, "    flags = re.IGNORECASE"]]}, "help": {"str": [[311, "    help = \"Method\""]]}}, "func": {"__call__": {"(FMethod, ?) -> bool": [[315, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAsset": {"var": {"code": {"str": [[165, "    code = \"a\""]]}, "help": {"str": [[166, "    help = \"Match asset in response: CSS, Javascript, Flash, images.\""]]}, "ASSET_TYPES": {"[?]": [[167, "    ASSET_TYPES = [re.compile(x) for x in ["]]}}, "func": {"__call__": {"(FAsset, ?) -> None": [[177, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FWebSocket": {"var": {"code": {"str": [[106, "    code = \"websocket\""]]}, "help": {"str": [[107, "    help = \"Match WebSocket flows\""]]}}, "func": {"__call__": {"(FWebSocket, ?) -> ?": [[110, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FOr": {"func": {"__call__": {"(FOr, ?) -> int": [[421, "    def __call__(self, f):"]]}, "dump": {"(FOr, int, ?) -> None": [[416, "    def dump(self, indent=0, fp=sys.stdout):"]]}, "__init__": {"? -> ?": [[413, "    def __init__(self, lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAnd.__call__": {"param": {"self": {"FAnd": [[407, "    def __call__(self, f):"]]}, "f": {"?": [[407, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FUrl": {"var": {"code": {"str": [[336, "    code = \"u\""]]}, "is_binary": {"?": [[338, "    is_binary = False"]]}}, "func": {"make": {"(<FUrl>, ?, ?, ?) -> FUrl": [[343, "    def make(klass, s, loc, toks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FDom": {"var": {"is_binary": {"?": [[323, "    is_binary = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentType.__call__": {"param": {"self": {"FContentType": [[190, "    def __call__(self, f):"]]}, "f": {"?": [[190, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentType": {"func": {"__call__": {"(FContentType, ?) -> None": [[190, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FWebSocket.__call__": {"param": {"self": {"FWebSocket": [[110, "    def __call__(self, f):"]]}, "f": {"?": [[110, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHeadRequest.__call__": {"param": {"self": {"FHeadRequest": [[238, "    def __call__(self, f):"]]}, "f": {"?": [[238, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FTCP.__call__": {"param": {"self": {"FTCP": [[119, "    def __call__(self, f):"]]}, "f": {"?": [[119, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FMeth": {"var": {"code": {"str": [[310, "    code = \"m\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.only.decorato": {"func": {"filter_types": {"(?, ?) -> None": [[51, "        def filter_types(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FC": {"var": {"code": {"str": [[388, "    code = \"c\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.only": {"func": {"decorator": {"? -> (?, ?) -> None": [[49, "    def decorator(fn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBodRespons": {"var": {"code": {"str": [[293, "    code = \"bs\""]]}, "help": {"str": [[294, "    help = \"Response body\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._mak": {"var": {"regex": {"?": [[482, "    regex = ("]]}, "expr": {"?": [[503, "    expr = pp.infixNotation("], [518, "    expr = pp.OneOrMore(expr)"]]}, "unicode_words": {"?": [[480, "    unicode_words = pp.CharsNotIn(\"()~'\\\"\" + pp.ParserElement.DEFAULT_WHITE_CHARS)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FCode.__call__": {"param": {"self": {"FCode": [[392, "    def __call__(self, f):"]]}, "f": {"?": [[392, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FB": {"var": {"code": {"str": [[255, "    code = \"b\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAnd": {"func": {"__call__": {"(FAnd, ?) -> int": [[407, "    def __call__(self, f):"]]}, "__init__": {"? -> ?": [[399, "    def __init__(self, lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHeadRespons": {"var": {"code": {"str": [[244, "    code = \"hs\""]]}, "help": {"str": [[245, "    help = \"Response header\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FUrl.__call__": {"var": {"f": {"HTTPFlow": [[351, "            f = f.handshake_flow"]]}}, "param": {"self": {"FUrl": [[349, "    def __call__(self, f):"]]}, "f": {"?": [[349, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter": {"var": {"a": {"?": [[555, "for a in filter_unary:"]]}, "c": {"<FCode>": [[563, "for c in filter_int:"]]}, "b": {"?": [[559, "for b in filter_rex:"]]}, "bnf": {"None": [[522, "bnf = _make()"]]}, "help": {"[(None, str)]": [[554, "help = []"]]}}, "class": {"FHead": {"<FHead>": [[218, "class FHead(_Rex):"]]}, "_Int": {"<_Int>": [[381, "class _Int(_Action):"]]}, "FContentTypeRequest": {"<FContentTypeRequest>": [[198, "class FContentTypeRequest(_Rex):"]]}, "FHeadResponse": {"<FHeadResponse>": [[243, "class FHeadResponse(_Rex):"]]}, "FReq": {"<FReq>": [[123, "class FReq(_Action):"]]}, "FHTTP": {"<FHTTP>": [[96, "class FHTTP(_Action):"]]}, "FResp": {"<FResp>": [[133, "class FResp(_Action):"]]}, "FDst": {"<FDst>": [[369, "class FDst(_Rex):"]]}, "_Token": {"<_Token>": [[61, "class _Token:"]]}, "FHeadRequest": {"<FHeadRequest>": [[232, "class FHeadRequest(_Rex):"]]}, "FMethod": {"<FMethod>": [[309, "class FMethod(_Rex):"]]}, "FDomain": {"<FDomain>": [[319, "class FDomain(_Rex):"]]}, "FNot": {"<FNot>": [[425, "class FNot(_Token):"]]}, "FBod": {"<FBod>": [[254, "class FBod(_Rex):"]]}, "_Action": {"<_Action>": [[71, "class _Action(_Token):"]]}, "FAsset": {"<FAsset>": [[164, "class FAsset(_Action):"]]}, "FBodResponse": {"<FBodResponse>": [[292, "class FBodResponse(_Rex):"]]}, "FBodRequest": {"<FBodRequest>": [[275, "class FBodRequest(_Rex):"]]}, "FContentType": {"<FContentType>": [[185, "class FContentType(_Rex):"]]}, "_Rex": {"<_Rex>": [[142, "class _Rex(_Action):"]]}, "FAnd": {"<FAnd>": [[397, "class FAnd(_Token):"]]}, "FTCP": {"<FTCP>": [[114, "class FTCP(_Action):"]]}, "FWebSocket": {"<FWebSocket>": [[105, "class FWebSocket(_Action):"]]}, "FCode": {"<FCode>": [[387, "class FCode(_Int):"]]}, "FContentTypeResponse": {"<FContentTypeResponse>": [[207, "class FContentTypeResponse(_Rex):"]]}}, "func": {"_make": {"() -> None": [[469, "def _make():"]]}, "_check_content_type": {"(?, ?) -> int": [[156, "def _check_content_type(rex, message):"]]}, "only": {"() -> ? -> (?, ?) -> None": [[48, "def only(*types):"]]}, "match": {"(None, None) -> None / (str, None) -> None / (None, ?) -> None / (?, None) -> None / (?, ?) -> None / (str, ?) -> None": [[537, "def match(flt, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Token.dum": {"param": {"fp": {"?": [[63, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Int.__init__": {"param": {"self": {"{FCode | _Int}": [[383, "    def __init__(self, num):"]]}, "num": {"?": [[383, "    def __init__(self, num):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FBodRequest": {"var": {"code": {"str": [[276, "    code = \"bq\""]]}, "flags": {"?": [[278, "    flags = re.DOTALL"]]}, "help": {"str": [[277, "    help = \"Request body\""]]}}, "func": {"__call__": {"(FBodRequest, ?) -> None": [[281, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FTCP": {"var": {"code": {"str": [[115, "    code = \"tcp\""]]}, "help": {"str": [[116, "    help = \"Match TCP flows\""]]}}, "func": {"__call__": {"(FTCP, ?) -> ?": [[119, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Token.dump": {"param": {"self": {"_Token": [[63, "    def dump(self, indent=0, fp=sys.stdout):"]]}, "indent": {"int": [[63, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Rex.__init__": {"var": {"expr": {"?": [[149, "            expr = expr.encode()"]]}}, "param": {"expr": {"?": [[146, "    def __init__(self, expr):"]]}, "self": {"{FBod | FBodRequest | FBodResponse | FContentType | FContentTypeRequest | FContentTypeResponse | FDomain | FDst | FHead | FHeadRequest | FHeadResponse | FMethod | FSrc | FUrl | _Rex}": [[146, "    def __init__(self, expr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAnd.__init__": {"param": {"self": {"FAnd": [[399, "    def __init__(self, lst):"]]}, "lst": {"?": [[399, "    def __init__(self, lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FCod": {"var": {"help": {"str": [[389, "    help = \"HTTP response code\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Action": {"func": {"make": {"(<_Action>, ?, ?, ?) -> _Action": [[76, "    def make(klass, s, loc, toks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._Action.make": {"param": {"loc": {"?": [[76, "    def make(klass, s, loc, toks):"]]}, "s": {"?": [[76, "    def make(klass, s, loc, toks):"]]}, "klass": {"<_Action>": [[76, "    def make(klass, s, loc, toks):"]]}, "toks": {"?": [[76, "    def make(klass, s, loc, toks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FNot.__init__": {"param": {"self": {"FNot": [[427, "    def __init__(self, itm):"]]}, "itm": {"?": [[427, "    def __init__(self, itm):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FMethod.__call__": {"param": {"self": {"FMethod": [[315, "    def __call__(self, f):"]]}, "f": {"?": [[315, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.match": {"var": {"flt": {"None": [[546, "        flt = parse(flt)"]]}}, "param": {"flow": {"None": [[537, "def match(flt, flow):"]]}, "flt": {"str": [[537, "def match(flt, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._make": {"var": {"atom": {"?": [[502, "    atom = pp.MatchFirst(parts)"]]}, "parts": {"[?]": [[472, "    parts = []"]]}, "f": {"?": [[474, "        f = pp.Literal(f\"~{cls.code}\") + pp.WordEnd()"], [488, "        f = pp.Literal(f\"~{cls.code}\") + pp.WordEnd() + regex.copy()"], [493, "        f = pp.Literal(f\"~{cls.code}\") + pp.WordEnd() + pp.Word(pp.nums)"], [498, "    f = regex.copy()"]]}, "cls": {"<FCode>": [[492, "    for cls in filter_int:"]], "?": [[473, "    for cls in filter_unary:"], [487, "    for cls in filter_rex:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FDst": {"var": {"code": {"str": [[370, "    code = \"dst\""]]}, "help": {"str": [[371, "    help = \"Match destination address\""]]}, "is_binary": {"?": [[372, "    is_binary = False"]]}}, "func": {"__call__": {"(FDst, ?) -> None": [[374, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTypeRespons": {"var": {"code": {"str": [[208, "    code = \"ts\""]]}, "help": {"str": [[209, "    help = \"Response Content-Type header\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FMarked": {"var": {"help": {"str": [[90, "    help = \"Match marked flows\""]]}}, "func": {"__call__": {"(FMarked, ?) -> ?": [[92, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAsset.__call__": {"var": {"i": {"?": [[179, "            for i in self.ASSET_TYPES:"]]}}, "param": {"self": {"FAsset": [[177, "    def __call__(self, f):"]]}, "f": {"?": [[177, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.parse": {"var": {"flt": {"?": [[528, "        flt = bnf.parseString(s, parseAll=True)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FNot.dump": {"param": {"self": {"FNot": [[430, "    def dump(self, indent=0, fp=sys.stdout):"]]}, "indent": {"int": [[430, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHTTP": {"var": {"code": {"str": [[97, "    code = \"http\""]]}, "help": {"str": [[98, "    help = \"Match HTTP flows\""]]}}, "func": {"__call__": {"(FHTTP, ?) -> ?": [[101, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAn": {"func": {"dump": {"(FAnd, int, ?) -> None": [[402, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FAnd.dum": {"param": {"fp": {"?": [[402, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter._I": {"func": {"__init__": {"? -> ?": [[383, "    def __init__(self, num):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilte": {"class": {"FErr": {"<FErr>": [[80, "class FErr(_Action):"]]}, "FSrc": {"<FSrc>": [[357, "class FSrc(_Rex):"]]}, "FUrl": {"<FUrl>": [[335, "class FUrl(_Rex):"]]}, "FOr": {"<FOr>": [[411, "class FOr(_Token):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHead": {"var": {"flags": {"?": [[221, "    flags = re.MULTILINE"]]}, "help": {"str": [[220, "    help = \"Header\""]]}}, "func": {"__call__": {"(FHead, ?) -> None": [[224, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FOr.__init__": {"param": {"self": {"FOr": [[413, "    def __init__(self, lst):"]]}, "lst": {"?": [[413, "    def __init__(self, lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FNot.__call__": {"param": {"self": {"FNot": [[434, "    def __call__(self, f):"]]}, "f": {"?": [[434, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow": {"var": {"filter_int": {"[<FCode>]": [[464, "filter_int = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FOr.dum": {"param": {"fp": {"?": [[416, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FNot.dum": {"param": {"fp": {"?": [[430, "    def dump(self, indent=0, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTypeResponse.__call__": {"param": {"self": {"FContentTypeResponse": [[212, "    def __call__(self, f):"]]}, "f": {"?": [[212, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FCode": {"func": {"__call__": {"(FCode, ?) -> None": [[392, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTypeRequest": {"var": {"code": {"str": [[199, "    code = \"tq\""]]}, "help": {"str": [[200, "    help = \"Request Content-Type header\""]]}}, "func": {"__call__": {"(FContentTypeRequest, ?) -> int": [[203, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilt": {"class": {"FMarked": {"<FMarked>": [[88, "class FMarked(_Action):"]]}}, "func": {"parse": {"None -> None / str -> None / ? -> None": [[526, "def parse(s: str) -> Optional[TFilter]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FMark": {"var": {"code": {"str": [[89, "    code = \"marked\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FContentTy": {"var": {"help": {"str": [[187, "    help = \"Content-type header\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FHeadRequest": {"var": {"code": {"str": [[233, "    code = \"hq\""]]}, "flags": {"?": [[235, "    flags = re.MULTILINE"]]}, "help": {"str": [[234, "    help = \"Request header\""]]}}, "func": {"__call__": {"(FHeadRequest, ?) -> None": [[238, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flowfilter.FResp.__call__": {"param": {"self": {"FResp": [[138, "    def __call__(self, f):"]]}, "f": {"?": [[138, "    def __call__(self, f):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_termlog.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_termlog.TestTermLog.test_outpu": {"var": {"t": {"TermLog": [[17, "        t = termlog.TermLog(outfile=outfile)"]]}}, "param": {"expected_err": {"?": [[16, "    def test_output(self, outfile, expected_out, expected_err, capfd):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_terml": {"class": {"TestTermLog": {"<TestTermLog>": [[9, "class TestTermLog:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_termlog.TestTermLog.test_output": {"param": {"self": {"TestTermLog": [[16, "    def test_output(self, outfile, expected_out, expected_err, capfd):"]]}, "capfd": {"?": [[16, "    def test_output(self, outfile, expected_out, expected_err, capfd):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_termlog.TestTermLog.tes": {"param": {"expected_out": {"?": [[16, "    def test_output(self, outfile, expected_out, expected_err, capfd):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_termlog.TestTermLog": {"func": {"test_output": {"(TestTermLog, ?, ?, ?, ?) -> None": [[16, "    def test_output(self, outfile, expected_out, expected_err, capfd):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_termlog.TestTermLog.test_outp": {"var": {"out": {"?": [[25, "        out, err = capfd.readouterr()"]]}}, "param": {"outfile": {"?": [[16, "    def test_output(self, outfile, expected_out, expected_err, capfd):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/debug.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.debug": {"func": {"dump_system_info": {"() -> str": [[14, "def dump_system_info():"]]}, "dump_info": {"(None, None, ?, ?) -> ?": [[26, "def dump_info(signal=None, frame=None, file=sys.stdout, testing=False):  # pragma: no cover"]]}, "dump_stacks": {"(None, None, ?, ?) -> None": [[86, "def dump_stacks(signal=None, frame=None, file=sys.stdout, testing=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.debug.dump_stack": {"param": {"signal": {"None": [[86, "def dump_stacks(signal=None, frame=None, file=sys.stdout, testing=False):"]]}, "testing": {"?": [[86, "def dump_stacks(signal=None, frame=None, file=sys.stdout, testing=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.debug.dump_system_inf": {"var": {"mitmproxy_version": {"str": [[15, "    mitmproxy_version = version.get_dev_version()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.debug.dump_info": {"var": {"d": {"dict": [[71, "    d = {}"]]}, "i": {"?": [[45, "        for i in p.open_files():"], [51, "        for i in p.connections():"], [58, "    for i in threading.enumerate():"], [64, "    for i in bthreads:"], [72, "    for i in gc.get_objects():"], [78, "    for i in itms[-20:]:"]]}, "bthreads": {"[?]": [[57, "    bthreads = []"]]}, "p": {"?": [[36, "        p = psutil.Process()"]]}, "t": {"str": [[73, "        t = str(type(i))"]]}, "itms": {"list": [[76, "    itms = list(d.items())"]]}}, "param": {"signal": {"None": [[26, "def dump_info(signal=None, frame=None, file=sys.stdout, testing=False):  # pragma: no cover"]]}, "testing": {"?": [[26, "def dump_info(signal=None, frame=None, file=sys.stdout, testing=False):  # pragma: no cover"]]}, "frame": {"None": [[26, "def dump_info(signal=None, frame=None, file=sys.stdout, testing=False):  # pragma: no cover"]]}, "file": {"?": [[26, "def dump_info(signal=None, frame=None, file=sys.stdout, testing=False):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.debug.dump_system_info": {"var": {"data": {"[str]": [[17, "    data = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.debug.dump_stacks": {"var": {"filename": {"?": [[95, "        for filename, lineno, name, line in traceback.extract_stack(stack):"]]}, "code": {"[str]": [[88, "    code = []"]]}, "id2name": {"dict": [[87, "    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])"]]}, "threadId": {"?": [[89, "    for threadId, stack in sys._current_frames().items():"]]}}, "param": {"frame": {"None": [[86, "def dump_stacks(signal=None, frame=None, file=sys.stdout, testing=False):"]]}, "file": {"?": [[86, "def dump_stacks(signal=None, frame=None, file=sys.stdout, testing=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.deb": {"func": {"register_info_dumpers": {"() -> None": [[104, "def register_info_dumpers():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/options-simple.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simpl": {"class": {"AddHeader": {"<AddHeader>": [[11, "class AddHeader:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddHeader.load": {"param": {"self": {"AddHeader": [[15, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddHeader": {"func": {"load": {"(AddHeader, ?) -> None": [[15, "    def load(self, loader):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddHeader.__init__": {"param": {"self": {"AddHeader": [[12, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple": {"var": {"addons": {"[AddHeader]": [[29, "addons = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddHeader.response": {"param": {"flow": {"?": [[23, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddHead": {"func": {"response": {"(AddHeader, ?) -> None": [[23, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddH": {"param": {"loader": {"?": [[15, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-simple.AddHeader.respon": {"param": {"self": {"AddHeader": [[23, "    def response(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/wbxml/GlobalTokens.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.GlobalTokens.GlobalTokens": {"var": {"EXT_T_1": {"int": [[42, "    EXT_T_1 = 0x81"]]}, "END": {"int": [[32, "    END = 0x01"]]}, "SWITCH_PAGE": {"int": [[31, "    SWITCH_PAGE = 0x00"]]}, "EXT_0": {"int": [[46, "    EXT_0 = 0xC0"]]}, "LITERAL_A": {"int": [[45, "    LITERAL_A = 0x84"]]}, "LITERAL_C": {"int": [[40, "    LITERAL_C = 0x44"]]}, "OPAQUE": {"int": [[49, "    OPAQUE = 0xC3"]]}, "STR_I": {"int": [[34, "    STR_I = 0x03"]]}, "ENTITY": {"int": [[33, "    ENTITY = 0x02"]]}, "EXT_1": {"int": [[47, "    EXT_1 = 0xC1"]]}, "STR_T": {"int": [[44, "    STR_T = 0x83"]]}, "LITERAL": {"int": [[35, "    LITERAL = 0x04"]]}, "EXT_2": {"int": [[48, "    EXT_2 = 0xC2"]]}, "LITERAL_AC": {"int": [[50, "    LITERAL_AC = 0xC4"]]}, "EXT_T_2": {"int": [[43, "    EXT_T_2 = 0x82"]]}, "EXT_T_0": {"int": [[41, "    EXT_T_0 = 0x80"]]}, "PI": {"int": [[39, "    PI = 0x43"]]}, "EXT_I_2": {"int": [[38, "    EXT_I_2 = 0x42"]]}, "EXT_I_1": {"int": [[37, "    EXT_I_1 = 0x41"]]}, "EXT_I_0": {"int": [[36, "    EXT_I_0 = 0x40"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxm": {"class": {"GlobalTokens": {"<GlobalTokens>": [[30, "class GlobalTokens:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/scripting-minimal-example.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.scripting-minimal-example.request": {"param": {"flow": {"?": [[2, "def request(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.scripting-minimal-exampl": {"func": {"request": {"? -> None": [[2, "def request(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/ico.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.i": {"class": {"Ico": {"<Ico>": [[11, "class Ico(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry.png_header": {"var": {"_pos": {"?": [[74, "            _pos = self._io.pos()"]]}}, "param": {"self": {"IconDirEntry": [[67, "        def png_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.__ini": {"param": {"_parent": {"None": [[20, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[20, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry.__init": {"param": {"_io": {"?": [[35, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry.__ini": {"param": {"_parent": {"Ico": [[35, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Ico": [[35, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry.__init__": {"param": {"self": {"IconDirEntry": [[35, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico._read": {"var": {"i": {"int": [[30, "        for i in range(self.num_images):"]]}}, "param": {"self": {"Ico": [[26, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry._read": {"param": {"self": {"IconDirEntry": [[41, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.__init": {"param": {"_io": {"?": [[20, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistru": {"class": {"IconDirEntry": {"<IconDirEntry>": [[34, "    class IconDirEntry(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico": {"func": {"_read": {"Ico -> None": [[26, "    def _read(self):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry.is_png": {"param": {"self": {"IconDirEntry": [[81, "        def is_png(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.__init__": {"param": {"self": {"Ico": [[20, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry": {"func": {"_read": {"IconDirEntry -> None": [[41, "        def _read(self):"]]}, "is_png": {"IconDirEntry -> bool": [[81, "        def is_png(self):"]]}, "img": {"IconDirEntry -> None": [[52, "        def img(self):"]]}, "__init__": {"? -> ?": [[35, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "png_header": {"IconDirEntry -> None": [[67, "        def png_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.ico.Ico.IconDirEntry.img": {"var": {"_pos": {"?": [[60, "            _pos = self._io.pos()"]]}}, "param": {"self": {"IconDirEntry": [[52, "        def img(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/multipart.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.multipart.ViewMultipart": {"var": {"name": {"str": [[7, "    name = \"Multipart Form\""]]}}, "func": {"__call__": {"(ViewMultipart, ?) -> (str, None)": [[16, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.multipart.ViewMultipart.__call__": {"var": {"headers": {"?": [[17, "        headers = metadata.get(\"headers\", {})"]]}, "v": {"{[(?, str)] | [?]}": [[18, "        v = http.multipart.decode(headers, data)"]]}}, "param": {"self": {"ViewMultipart": [[16, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[16, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.m": {"class": {"ViewMultipart": {"<ViewMultipart>": [[6, "class ViewMultipart(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.multipart.ViewMultipart._format": {"var": {"message": {"?": [[13, "        for message in base.format_dict(multidict.MultiDict(v)):"]]}}, "param": {"v": {"{[(?, str)] | [?]}": [[11, "    def _format(v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.multipart.ViewMultipar": {"var": {"content_types": {"[str]": [[8, "    content_types = [\"multipart/form-data\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.multipart.ViewMultip": {"func": {"_format": {"{[(?, str)] | [?]} -> None / ? -> None": [[11, "    def _format(v):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/controller.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.stat": {"param": {"self": {"Reply": [[67, "    def state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Channel.__init__": {"param": {"self": {"Channel": [[11, "    def __init__(self, master, loop, should_exit):"]]}, "master": {"Master": [[11, "    def __init__(self, master, loop, should_exit):"]]}, "loop": {"?": [[11, "    def __init__(self, master, loop, should_exit):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.DummyReply.mark_reset": {"param": {"self": {"DummyReply": [[145, "    def mark_reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.send": {"param": {"msg": {"{<Kill> | int | str}": [[119, "    def send(self, msg, force=False):"]]}, "self": {"{DummyReply | Reply}": [[119, "    def send(self, msg, force=False):"]]}, "force": {"bool": [[119, "    def send(self, msg, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Channel.__in": {"param": {"should_exit": {"?": [[11, "    def __init__(self, master, loop, should_exit):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Channel.ask": {"var": {"g": {"?": [[30, "            g = m.reply.q.get()"]]}}, "param": {"mtype": {"?": [[16, "    def ask(self, mtype, m):"]]}, "self": {"Channel": [[16, "    def ask(self, mtype, m):"]]}, "m": {"?": [[16, "    def ask(self, mtype, m):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.has_messag": {"param": {"self": {"Reply": [[82, "    def has_message(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.DummyReply.__del__": {"param": {"self": {"DummyReply": [[155, "    def __del__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Channel.t": {"param": {"self": {"Channel": [[35, "    def tell(self, mtype, m):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.kill": {"param": {"force": {"bool": [[114, "    def kill(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Channel.tell": {"param": {"mtype": {"?": [[35, "    def tell(self, mtype, m):"]]}, "m": {"?": [[35, "    def tell(self, mtype, m):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Chann": {"func": {"tell": {"(Channel, ?, ?) -> None": [[35, "    def tell(self, mtype, m):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.ack": {"param": {"self": {"{DummyReply | Reply}": [[111, "    def ack(self, force=False):"]]}, "force": {"bool": [[111, "    def ack(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller": {"var": {"NO_REPLY": {"object": [[48, "NO_REPLY = object()  # special object we can distinguish from a valid \"None\" reply."]]}}, "class": {"Reply": {"<Reply>": [[51, "class Reply:"]]}, "DummyReply": {"<DummyReply>": [[134, "class DummyReply(Reply):"]]}, "Channel": {"<Channel>": [[6, "class Channel:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.DummyReply": {"func": {"reset": {"DummyReply -> None": [[150, "    def reset(self):"]]}, "__del__": {"DummyReply -> None": [[155, "    def __del__(self):"]]}, "mark_reset": {"DummyReply -> None": [[145, "    def mark_reset(self):"]]}, "__init__": {"? -> ?": [[141, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.DummyReply.reset": {"param": {"self": {"DummyReply": [[150, "    def reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.__del__": {"param": {"self": {"Reply": [[128, "    def __del__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.ki": {"param": {"self": {"Reply": [[114, "    def kill(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.commit": {"param": {"self": {"{DummyReply | Reply}": [[96, "    def commit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.tak": {"param": {"self": {"{DummyReply | Reply}": [[85, "    def take(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply": {"func": {"ack": {"(DummyReply, bool) -> None / (Reply, bool) -> None": [[111, "    def ack(self, force=False):"]]}, "send": {"(Reply, None, bool) -> None / (Reply, str, bool) -> None / (Reply, ?, bool) -> None / (DummyReply, ?, bool) -> None / (Reply, int, bool) -> None / (Reply, <Kill>, bool) -> None": [[119, "    def send(self, msg, force=False):"]]}, "__del__": {"Reply -> None": [[128, "    def __del__(self):"]]}, "state": {"Reply -> str": [[67, "    def state(self):"]]}, "kill": {"(Reply, bool) -> None": [[114, "    def kill(self, force=False):"]]}, "take": {"DummyReply -> None / Reply -> None": [[85, "    def take(self):"]]}, "has_message": {"Reply -> bool": [[82, "    def has_message(self):"]]}, "commit": {"DummyReply -> None / Reply -> None": [[96, "    def commit(self):"]]}, "__init__": {"? -> ?": [[56, "    def __init__(self, obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Reply.__init__": {"param": {"self": {"Reply": [[56, "    def __init__(self, obj):"]]}, "obj": {"int": [[56, "    def __init__(self, obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.Channel": {"func": {"ask": {"(Channel, ?, ?) -> None": [[16, "    def ask(self, mtype, m):"]]}, "__init__": {"? -> ?": [[11, "    def __init__(self, master, loop, should_exit):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.controller.DummyReply.__init__": {"param": {"self": {"DummyReply": [[141, "    def __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/wbxml.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.wbxml": {"class": {"ViewWBXML": {"<ViewWBXML>": [[5, "class ViewWBXML(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.wbxml.ViewWBXML.__call__": {"var": {"parser": {"ASCommandResponse": [[14, "            parser = ASCommandResponse.ASCommandResponse(data)"]]}, "parsedContent": {"None": [[15, "            parsedContent = parser.xmlString"]]}}, "param": {"self": {"ViewWBXML": [[12, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[12, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.wbxml.ViewWBXML": {"var": {"content_types": {"[str]": [[7, "    content_types = ["]]}, "name": {"str": [[6, "    name = \"WBXML\""]]}}, "func": {"__call__": {"(ViewWBXML, ?) -> (str, ?)": [[12, "    def __call__(self, data, **metadata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/coretypes/multidict.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict.from_state": {"param": {"cls": {"<MultiDict>": [[181, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDictView._kconv": {"param": {"key": {"?": [[197, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.keys": {"param": {"multi": {"?": [[116, "    def keys(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.inser": {"var": {"item": {"(str, str)": [[113, "        item = (key, value)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.set_a": {"var": {"field": {"?": [[89, "        for field in self.fields:"]]}, "new_fields": {"{[(?, ?)] | [(?, None)] | [(str, None)]}": [[88, "        new_fields = []"]]}}, "param": {"self": {"{CookieAttrs | TMultiDict | _MultiDict}": [[82, "    def set_all(self, key, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDictView.field": {"param": {"self": {"MultiDictView": [[208, "    def fields(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.get_all": {"var": {"key": {"{None | str}": [[75, "        key = self._kconv(key)"]]}}, "param": {"key": {"str": [[70, "    def get_all(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.add": {"param": {"self": {"{TMultiDict | _MultiDict}": [[103, "    def add(self, key, value):"]]}, "value": {"str": [[103, "    def add(self, key, value):"]]}, "key": {"str": [[103, "    def add(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.items": {"param": {"multi": {"?": [[144, "    def items(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict": {"func": {"_reduce_values": {"? -> ?": [[167, "    def _reduce_values(values):"]]}, "_kconv": {"? -> ?": [[171, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDic": {"func": {"__delitem__": {"(_MultiDict, ?) -> None": [[45, "    def __delitem__(self, key):"]]}, "set_all": {"(TMultiDict, str, [str]) -> None / (CookieAttrs, str, [?]) -> None / (_MultiDict, ?, ?) -> None / (_MultiDict, ?, [?]) -> None": [[82, "    def set_all(self, key, values):"]]}, "__getitem__": {"(_MultiDict, ?) -> None": [[36, "    def __getitem__(self, key):"]]}, "get_all": {"(TMultiDict, str) -> [?] / (_MultiDict, ?) -> [?]": [[70, "    def get_all(self, key):"]]}, "items": {"(CookieAttrs, ?) -> tuple / (MultiDictView, ?) -> ? -> ? / (MultiDict, ?) -> tuple / (_MultiDict, ?) -> tuple / (TMultiDict, ?) -> {(str, str) | [(str, str)] | tuple}": [[144, "    def items(self, multi=False):"]]}, "__iter__": {"TMultiDict -> None / _MultiDict -> None": [[54, "    def __iter__(self):"]]}, "__setitem__": {"(_MultiDict, ?, ?) -> None": [[42, "    def __setitem__(self, key, value):"]]}, "insert": {"(_MultiDict, ?, ?, ?) -> None / (TMultiDict, int, str, str) -> None / (_MultiDict, int, ?, ?) -> None": [[109, "    def insert(self, index, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.get_a": {"param": {"self": {"{TMultiDict | _MultiDict}": [[70, "    def get_all(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.set_all": {"var": {"key_kconv": {"{None | str}": [[86, "        key_kconv = self._kconv(key)"]]}}, "param": {"key": {"str": [[82, "    def set_all(self, key, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__getitem__": {"var": {"values": {"[?]": [[37, "        values = self.get_all(key)"]]}}, "param": {"self": {"_MultiDict": [[36, "    def __getitem__(self, key):"]]}, "key": {"?": [[36, "    def __getitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict._reduce_": {"param": {"values": {"[?]": [[20, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict.set_": {"param": {"state": {"{(str, str) | [(str, str)] | tuple}": [[177, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDic": {"func": {"from_state": {"(<MultiDict>, {(str, str) | [(str, str)] | tuple}) -> MultiDict / (<MultiDict>, ?) -> MultiDict / (<MultiDict>, MultiDict) -> MultiDict": [[181, "    def from_state(cls, state):"]]}, "set_state": {"(MultiDict, ?) -> None / (TMultiDict, {(str, str) | [(str, str)] | tuple}) -> None": [[177, "    def set_state(self, state):"]]}, "__init__": {"? -> ?": [[160, "    def __init__(self, fields=()):"]]}, "get_state": {"TMultiDict -> {(str, str) | [(str, str)] | tuple} / MultiDict -> tuple": [[174, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__iter__": {"var": {"seen": {"?": [[55, "        seen = set()"]]}, "key": {"?": [[56, "        for key, _ in self.fields:"]]}}, "param": {"self": {"{TMultiDict | _MultiDict}": [[54, "    def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDictView.__init__": {"param": {"self": {"MultiDictView": [[191, "    def __init__(self, getter, setter):"]]}, "getter": {"{MultiDictView -> {() | [(?, str)] | [?]} / Request -> {() | [(?, str)] | [?]} | Request -> tuple | Request -> tuple | Request -> {() | tuple} | Response -> tuple | TParent -> tuple}": [[191, "    def __init__(self, getter, setter):"]]}, "setter": {"{(Request, ?) -> None | (Request, ?) -> None | (Request, ?) -> None | (Request, ?) -> None | (Response, ?) -> None | (TParent, ?) -> None}": [[191, "    def __init__(self, getter, setter):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__len__": {"param": {"self": {"_MultiDict": [[62, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict": {"func": {"keys": {"(TMultiDict, ?) -> [?] / (_MultiDict, ?) -> [?]": [[116, "    def keys(self, multi=False):"]]}, "_reduce_values": {"? -> None / [?] -> None": [[20, "    def _reduce_values(values):"]]}, "_kconv": {"? -> None": [[30, "    def _kconv(key):"]]}, "add": {"(_MultiDict, ?, ?) -> None / (TMultiDict, str, str) -> None": [[103, "    def add(self, key, value):"]]}, "values": {"(_MultiDict, ?) -> [?] / (TMultiDict, ?) -> [?]": [[130, "    def values(self, multi=False):"]]}, "__repr__": {"_MultiDict -> str": [[8, "    def __repr__(self):"]]}, "__eq__": {"(CookieAttrs, ?) -> None / (TMultiDict, MultiDict) -> bool / (TMultiDict, int) -> None / (TMultiDict, TMultiDict) -> None / (_MultiDict, ?) -> bool": [[65, "    def __eq__(self, other):"]]}, "__len__": {"_MultiDict -> int": [[62, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict._kconv": {"param": {"key": {"?": [[171, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.set_": {"param": {"values": {"{[?] | [str]}": [[82, "    def set_all(self, key, values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__delitem__": {"var": {"key": {"None": [[48, "        key = self._kconv(key)"]]}}, "param": {"self": {"_MultiDict": [[45, "    def __delitem__(self, key):"]]}, "key": {"?": [[45, "    def __delitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict._kconv": {"param": {"key": {"?": [[30, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDictView._reduce_": {"param": {"values": {"?": [[202, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDictView": {"func": {"fields": {"? -> ?": [[212, "    def fields(self, value):"]], "MultiDictView -> {() | [(?, str)] | [?]}": [[208, "    def fields(self):"]]}, "copy": {"MultiDictView -> MultiDict": [[215, "    def copy(self):"]]}, "_reduce_values": {"? -> ?": [[202, "    def _reduce_values(values):"]]}, "_kconv": {"? -> ?": [[197, "    def _kconv(key):"]]}, "__init__": {"? -> ?": [[191, "    def __init__(self, getter, setter):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.insert": {"param": {"index": {"int": [[109, "    def insert(self, index, key, value):"]]}, "self": {"{TMultiDict | _MultiDict}": [[109, "    def insert(self, index, key, value):"]]}, "value": {"str": [[109, "    def insert(self, index, key, value):"]]}, "key": {"str": [[109, "    def insert(self, index, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict.from_": {"param": {"state": {"{(str, str) | MultiDict | [(str, str)] | tuple}": [[181, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.item": {"param": {"self": {"{CookieAttrs | MultiDict | MultiDictView | TMultiDict | _MultiDict}": [[144, "    def items(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict.__init__": {"param": {"fields": {"{((str, str), (str, str), (str, str)) | ((str, str), (str, str), (str, str), (str, str), (str, str)) | () | (str, str) | ? -> ? | MultiDict | [(?, ?)] | [(?, str)] | [(str, None)] | [(str, str)] | [({[(str, str, CookieAttrs)] | str}, {[(str, str, CookieAttrs)] | str})] | [?] | tuple}": [[160, "    def __init__(self, fields=()):"]]}, "self": {"{CookieAttrs | MultiDict | TMultiDict}": [[160, "    def __init__(self, fields=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDictView.copy": {"param": {"self": {"MultiDictView": [[215, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__repr__": {"var": {"fields": {"[str]": [[9, "        fields = ("]]}}, "param": {"self": {"_MultiDict": [[8, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict.set_stat": {"param": {"self": {"{MultiDict | TMultiDict}": [[177, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__eq__": {"param": {"self": {"{CookieAttrs | TMultiDict | _MultiDict}": [[65, "    def __eq__(self, other):"]]}, "other": {"{MultiDict | TMultiDict | int}": [[65, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__iter": {"var": {"key_kconv": {"None": [[57, "            key_kconv = self._kconv(key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multid": {"class": {"_MultiDict": {"<_MultiDict>": [[7, "class _MultiDict(MutableMapping, metaclass=ABCMeta):"]]}, "MultiDictView": {"<MultiDictView>": [[185, "class MultiDictView(_MultiDict):"]]}, "MultiDict": {"<MultiDict>": [[159, "class MultiDict(_MultiDict, serializable.Serializable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.__setitem__": {"param": {"self": {"_MultiDict": [[42, "    def __setitem__(self, key, value):"]]}, "value": {"?": [[42, "    def __setitem__(self, key, value):"]]}, "key": {"?": [[42, "    def __setitem__(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict._reduce_": {"param": {"values": {"?": [[167, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.values": {"param": {"multi": {"?": [[130, "    def values(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.valu": {"param": {"self": {"{TMultiDict | _MultiDict}": [[130, "    def values(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict._MultiDict.key": {"param": {"self": {"{TMultiDict | _MultiDict}": [[116, "    def keys(self, multi=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.multidict.MultiDict.get_stat": {"param": {"self": {"{MultiDict | TMultiDict}": [[174, "    def get_state(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/eventsequence.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.eventsequence._iterate_tcp": {"var": {"messages": {"?": [[70, "    messages = f.messages"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.eventsequen": {"func": {"_iterate_websocket": {"? -> None": [[56, "def _iterate_websocket(f: websocket.WebSocketFlow) -> TEventGenerator:"]]}, "_iterate_tcp": {"? -> None": [[69, "def _iterate_tcp(f: tcp.TCPFlow) -> TEventGenerator:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.eventsequence.iterat": {"var": {"e": {"?": [[91, "        e = _iterate_map[type(f)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.eventsequence._iterate_websocket": {"var": {"messages": {"?": [[57, "    messages = f.messages"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.eventsequenc": {"var": {"TEventGenerator": {"?": [[42, "TEventGenerator = typing.Iterator[typing.Tuple[str, typing.Any]]"]]}, "Events": {"?": [[9, "Events = frozenset(["]]}}, "func": {"iterate": {"int -> ? / ? -> ? / {HTTPFlow | WebSocketFlow} -> ?": [[89, "def iterate(f: flow.Flow) -> TEventGenerator:"]]}, "_iterate_http": {"? -> None": [[45, "def _iterate_http(f: http.HTTPFlow) -> TEventGenerator:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_defaultkeys.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_defaultkeys.test_commands_exist": {"var": {"args": {"[?]": [[26, "        args = ["]]}, "binding": {"?": [[22, "    for binding in km.bindings:"]]}, "cmd": {"?": [[25, "        cmd = parsed[0].value"]]}, "m": {"ConsoleMaster": [[19, "    m = master.ConsoleMaster(None)"]]}, "km": {"Keymap": [[16, "    km = keymap.Keymap(None)"]]}, "cmd_obj": {"?": [[33, "        cmd_obj = m.commands.commands[cmd]"]]}, "parsed": {"?": [[23, "        parsed, _ = command_manager.parse_partial(binding.command.strip())"]]}, "command_manager": {"CommandManager": [[14, "    command_manager = command.CommandManager(ctx)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/platform/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform": {"var": {"original_addr": {"? -> (str, ?)": [[22, "    original_addr = linux.original_addr"], [26, "    original_addr = osx.original_addr"], [30, "    original_addr = openbsd.original_addr"], [36, "    original_addr = resolver.original_addr"], [38, "    original_addr = None"]]}, "__all__": {"[str]": [[40, "__all__ = ["]]}, "resolver": {"?": [[34, "    resolver = windows.Resolver()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platf": {"var": {"init_transparent_mode": {"{() -> ? | () -> None}": [[35, "    init_transparent_mode = resolver.setup  # noqa"]]}}, "func": {"init_transparent_mode": {"{() -> ? | () -> None}": [[7, "def init_transparent_mode() -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/overlay.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker._get": {"var": {"c": {"?": [[76, "        c = self.choices[idx]"]]}}, "param": {"self": {"ChooserListWalker": [[75, "    def _get(self, idx, focus):"]]}, "focus": {"bool": [[75, "    def _get(self, idx, focus):"]]}, "idx": {"int": [[75, "    def _get(self, idx, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.OptionsOverlay": {"func": {"__init__": {"? -> ?": [[157, "    def __init__(self, master, name, vals, vspace):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay.key_responder": {"param": {"self": {"SimpleOverlay": [[29, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Chooser.keypr": {"param": {"self": {"Chooser": [[131, "    def keypress(self, size, key):"]]}, "size": {"?": [[131, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Ch": {"var": {"selection_type": {"str": [[45, "            selection_type = \"option_selected_key\" if focus else \"key\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.OptionsOverlay.key_responder": {"param": {"self": {"OptionsOverlay": [[174, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.choice_by_shortcut": {"var": {"i": {"?": [[98, "        for i, choice in enumerate(self.choices):"]]}}, "param": {"self": {"ChooserListWalker": [[97, "    def choice_by_shortcut(self, shortcut):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choo": {"func": {"keypress": {"(Chooser, ?, ?) -> None": [[131, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choice.__init__": {"var": {"s": {"str": [[50, "            s = \"option_active_selected\" if focus else \"option_active\""], [52, "            s = \"option_selected\" if focus else \"text\""]]}, "txt": {"{[{(str, ?) | str}] | [{(str, str) | str}]}": [[46, "            txt = [(selection_type, shortcut), \") \", txt]"]], "str": [[48, "            txt = \"   \" + txt"]]}}, "param": {"current": {"bool": [[43, "    def __init__(self, txt, focus, current, shortcut):"]]}, "self": {"Choice": [[43, "    def __init__(self, txt, focus, current, shortcut):"]]}, "txt": {"?": [[43, "    def __init__(self, txt, focus, current, shortcut):"]]}, "focus": {"bool": [[43, "    def __init__(self, txt, focus, current, shortcut):"]]}, "shortcut": {"str": [[43, "    def __init__(self, txt, focus, current, shortcut):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choice.keypr": {"param": {"self": {"Choice": [[63, "    def keypress(self, size, key):"]]}, "size": {"?": [[63, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.get_prev": {"var": {"pos": {"int": [[92, "        pos = pos - 1"]]}}, "param": {"self": {"ChooserListWalker": [[91, "    def get_prev(self, pos):"]]}, "pos": {"?": [[91, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choi": {"func": {"selectable": {"Choice -> bool": [[60, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.OptionsOverla": {"var": {"keyctx": {"str": [[155, "    keyctx = \"grideditor\""]]}}, "func": {"key_responder": {"OptionsOverlay -> OptionsEditor": [[174, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.DataViewerOver": {"func": {"layout_popping": {"DataViewerOverlay -> None": [[204, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay.view_changed": {"param": {"self": {"SimpleOverlay": [[35, "    def view_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choice.selectab": {"param": {"self": {"Choice": [[60, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.set_focus": {"param": {"index": {"?": [[79, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay.keyctx": {"param": {"self": {"SimpleOverlay": [[26, "    def keyctx(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.DataViewerOverlay.layout_popping": {"param": {"self": {"DataViewerOverlay": [[204, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.OptionsOver": {"func": {"layout_popping": {"OptionsOverlay -> None": [[177, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.DataViewerOverla": {"var": {"keyctx": {"str": [[182, "    keyctx = \"dataviewer\""]]}}, "func": {"key_responder": {"DataViewerOverlay -> DataViewer": [[201, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.get_focu": {"param": {"self": {"ChooserListWalker": [[82, "    def get_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.set_focu": {"param": {"self": {"ChooserListWalker": [[79, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker": {"func": {"set_focus": {"(ChooserListWalker, ?) -> None": [[79, "    def set_focus(self, index):"]]}, "_get": {"(ChooserListWalker, ?, ?) -> Choice / (ChooserListWalker, int, bool) -> Choice": [[75, "    def _get(self, idx, focus):"]]}, "get_next": {"(ChooserListWalker, ?) -> (Choice, int)": [[85, "    def get_next(self, pos):"]]}, "get_focus": {"ChooserListWalker -> (Choice, int)": [[82, "    def get_focus(self):"]]}, "__init__": {"? -> ?": [[70, "    def __init__(self, choices, current):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.DataViewerOverlay": {"func": {"__init__": {"? -> ?": [[184, "    def __init__(self, master, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choice": {"func": {"__init__": {"? -> ?": [[43, "    def __init__(self, txt, focus, current, shortcut):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay": {"func": {"focus_changed": {"SimpleOverlay -> ?": [[32, "    def focus_changed(self):"]]}, "view_changed": {"SimpleOverlay -> ?": [[35, "    def view_changed(self):"]]}, "__init__": {"? -> ?": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay.__init__": {"param": {"widget": {"{DataViewerOverlay | OptionsOverlay}": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}, "parent": {"None": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}, "self": {"SimpleOverlay": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}, "width": {"int": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}, "master": {"WindowStack": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}, "valign": {"str": [[13, "    def __init__(self, master, widget, parent, width, valign=\"middle\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.get_next": {"var": {"pos": {"int": [[88, "        pos = pos + 1"]]}}, "param": {"self": {"ChooserListWalker": [[85, "    def get_next(self, pos):"]]}, "pos": {"?": [[85, "    def get_next(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalke": {"var": {"shortcuts": {"str": [[68, "    shortcuts = \"123456789abcdefghijklmnoprstuvwxyz\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.OptionsOverlay.layout_popping": {"param": {"self": {"OptionsOverlay": [[177, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.DataViewerOverlay.__init__": {"var": {"cols": {"?": [[188, "        cols, rows = master.ui.get_cols_rows()"]]}}, "param": {"vals": {"?": [[184, "    def __init__(self, master, vals):"]]}, "self": {"DataViewerOverlay": [[184, "    def __init__(self, master, vals):"]]}, "master": {"ConsoleMaster": [[184, "    def __init__(self, master, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverla": {"func": {"keyctx": {"SimpleOverlay -> ?": [[26, "    def keyctx(self):"]]}, "key_responder": {"SimpleOverlay -> ?": [[29, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay.focus_changed": {"param": {"self": {"SimpleOverlay": [[32, "    def focus_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.DataViewerOverlay.key_responder": {"param": {"self": {"DataViewerOverlay": [[201, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Chooser.selectab": {"param": {"self": {"Chooser": [[128, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOver": {"func": {"layout_popping": {"SimpleOverlay -> ?": [[38, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choice.keypress": {"param": {"key": {"?": [[63, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.__init__": {"param": {"current": {"str": [[70, "    def __init__(self, choices, current):"]]}, "self": {"ChooserListWalker": [[70, "    def __init__(self, choices, current):"]]}, "choices": {"?": [[70, "    def __init__(self, choices, current):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.OptionsOverlay.__init__": {"var": {"cols": {"?": [[161, "        cols, rows = master.ui.get_cols_rows()"]]}}, "param": {"vals": {"?": [[157, "    def __init__(self, master, name, vals, vspace):"]]}, "vspace": {"int": [[157, "    def __init__(self, master, name, vals, vspace):"]]}, "self": {"OptionsOverlay": [[157, "    def __init__(self, master, name, vals, vspace):"]]}, "master": {"ConsoleMaster": [[157, "    def __init__(self, master, name, vals, vspace):"]]}, "name": {"?": [[157, "    def __init__(self, master, name, vals, vspace):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.o": {"class": {"SimpleOverlay": {"<SimpleOverlay>": [[11, "class SimpleOverlay(urwid.Overlay, layoutwidget.LayoutWidget):"]]}, "DataViewerOverlay": {"<DataViewerOverlay>": [[181, "class DataViewerOverlay(urwid.WidgetWrap, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.SimpleOverlay.layout_popping": {"param": {"self": {"SimpleOverlay": [[38, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalker.choice_by_": {"param": {"shortcut": {"None": [[97, "    def choice_by_shortcut(self, shortcut):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Chooser.__init__": {"var": {"choicewidth": {"int": [[111, "        choicewidth = max([len(i) for i in choices])"]]}}, "param": {"title": {"?": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}, "self": {"Chooser": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}, "choices": {"?": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}, "current": {"str": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}, "callback": {"{? -> ? | Chooser -> ?}": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}, "master": {"ConsoleMaster": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.c": {"class": {"OptionsOverlay": {"<OptionsOverlay>": [[154, "class OptionsOverlay(urwid.WidgetWrap, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.ChooserListWalk": {"func": {"get_prev": {"(ChooserListWalker, ?) -> (Choice, int)": [[91, "    def get_prev(self, pos):"]]}, "choice_by_shortcut": {"(ChooserListWalker, None) -> None / (ChooserListWalker, ?) -> None": [[97, "    def choice_by_shortcut(self, shortcut):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Chooser.keypress": {"var": {"binding": {"None": [[146, "        binding = self.master.keymap.get(\"global\", key)"]]}, "key": {"None": [[132, "        key = self.master.keymap.handle_only(\"chooser\", key)"]]}, "choice": {"None": [[133, "        choice = self.walker.choice_by_shortcut(key)"]]}}, "param": {"key": {"?": [[131, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay": {"class": {"Chooser": {"<Chooser>": [[104, "class Chooser(urwid.WidgetWrap, layoutwidget.LayoutWidget):"]]}, "ChooserListWalker": {"<ChooserListWalker>": [[67, "class ChooserListWalker(urwid.ListWalker):"]]}, "Choice": {"<Choice>": [[42, "class Choice(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Chooser": {"var": {"keyctx": {"str": [[105, "    keyctx = \"chooser\""]]}}, "func": {"selectable": {"Chooser -> bool": [[128, "    def selectable(self):"]]}, "__init__": {"? -> ?": [[107, "    def __init__(self, master, title, choices, current, callback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.overlay.Choic": {"func": {"keypress": {"(Choice, ?, ?) -> ?": [[63, "    def keypress(self, size, key):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/tls_client_hello.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Protocol.__init": {"param": {"_io": {"?": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.ServerName.__init": {"param": {"_io": {"?": [[34, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CompressionMethods.__ini": {"param": {"_parent": {"TlsClientHello": [[79, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"TlsClientHello": [[79, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CipherSuites.__init__": {"var": {"i": {"int": [[75, "            for i in range(self.len // 2):"]]}}, "param": {"self": {"CipherSuites": [[69, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Alp": {"func": {"__init__": {"? -> ?": [[87, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.ServerName": {"func": {"__init__": {"? -> ?": [[34, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_h": {"class": {"TlsClientHello": {"<TlsClientHello>": [[15, "class TlsClientHello(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHe": {"class": {"Protocol": {"<Protocol>": [[114, "    class Protocol(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extensio": {"func": {"__init__": {"? -> ?": [[123, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.__init__": {"var": {"i": {"int": [[27, "            for i in range(0):"]]}}, "param": {"self": {"TlsClientHello": [[16, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Alpn.__init": {"param": {"_io": {"?": [[87, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Versio": {"func": {"__init__": {"? -> ?": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extensions.__init": {"param": {"_io": {"?": [[97, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extension.__ini": {"param": {"_parent": {"None": [[123, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[123, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extension.__init": {"var": {"_on": {"?": [[129, "            _on = self.type"]]}}, "param": {"_io": {"?": [[123, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Sni.__init__": {"param": {"self": {"Sni": [[59, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Random.__init__": {"param": {"self": {"Random": [[43, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CipherSuites.__ini": {"param": {"_parent": {"TlsClientHello": [[69, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"TlsClientHello": [[69, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.S": {"func": {"__init__": {"? -> ?": [[59, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extensions.__init__": {"param": {"self": {"Extensions": [[97, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Protocol.__ini": {"param": {"_parent": {"None": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Alpn.__init__": {"param": {"self": {"Alpn": [[87, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CompressionMethods.__init": {"param": {"_io": {"?": [[79, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Protocol": {"func": {"__init__": {"? -> ?": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.ServerName.__ini": {"param": {"_parent": {"None": [[34, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[34, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.SessionId.__ini": {"param": {"_parent": {"TlsClientHello": [[51, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"TlsClientHello": [[51, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Alpn.__ini": {"param": {"_parent": {"None": [[87, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[87, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CompressionMethods": {"func": {"__init__": {"? -> ?": [[79, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHell": {"class": {"CompressionMethods": {"<CompressionMethods>": [[78, "    class CompressionMethods(KaitaiStruct):"]]}, "Extension": {"<Extension>": [[122, "    class Extension(KaitaiStruct):"]]}, "Random": {"<Random>": [[42, "    class Random(KaitaiStruct):"]]}, "SessionId": {"<SessionId>": [[50, "    class SessionId(KaitaiStruct):"]]}, "Version": {"<Version>": [[106, "    class Version(KaitaiStruct):"]]}, "Extensions": {"<Extensions>": [[96, "    class Extensions(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extensions": {"func": {"__init__": {"? -> ?": [[97, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Protocol.__init__": {"param": {"self": {"Protocol": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Random.__init": {"param": {"_io": {"?": [[43, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CipherSuites.__init": {"param": {"_io": {"?": [[69, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Sni.__ini": {"param": {"_parent": {"None": [[59, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[59, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.SessionId": {"func": {"__init__": {"? -> ?": [[51, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.SessionId.__init": {"param": {"_io": {"?": [[51, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CompressionMethods.__init__": {"param": {"self": {"CompressionMethods": [[79, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Version.__init": {"param": {"_io": {"?": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Random": {"func": {"__init__": {"? -> ?": [[43, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extensions.__ini": {"param": {"_parent": {"TlsClientHello": [[97, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"TlsClientHello": [[97, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.__init": {"param": {"_io": {"?": [[16, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello": {"class": {"ServerName": {"<ServerName>": [[33, "    class ServerName(KaitaiStruct):"]]}, "Alpn": {"<Alpn>": [[86, "    class Alpn(KaitaiStruct):"]]}, "CipherSuites": {"<CipherSuites>": [[68, "    class CipherSuites(KaitaiStruct):"]]}, "Sni": {"<Sni>": [[58, "    class Sni(KaitaiStruct):"]]}}, "func": {"__init__": {"? -> ?": [[16, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Random.__ini": {"param": {"_parent": {"TlsClientHello": [[43, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"TlsClientHello": [[43, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.ServerName.__init__": {"param": {"self": {"ServerName": [[34, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Version.__ini": {"param": {"_parent": {"TlsClientHello": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"TlsClientHello": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Version.__init__": {"param": {"self": {"Version": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.SessionId.__init__": {"param": {"self": {"SessionId": [[51, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.CipherSuites": {"func": {"__init__": {"? -> ?": [[69, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.__ini": {"param": {"_parent": {"None": [[16, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[16, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Extension.__init__": {"var": {"io": {"?": [[132, "                io = KaitaiStream(BytesIO(self._raw_body))"], [136, "                io = KaitaiStream(BytesIO(self._raw_body))"]]}}, "param": {"self": {"Extension": [[123, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.tls_client_hello.TlsClientHello.Sni.__init": {"param": {"_io": {"?": [[59, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_flowfilter.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestParsing.test_simp": {"param": {"self": {"TestParsing": [[20, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_body": {"var": {"f": {"?": [[325, "        assert self.q(\"~b hello\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfil": {"class": {"TestParsing": {"<TestParsing>": [[10, "class TestParsing:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_src": {"var": {"f": {"?": [[342, "        assert not self.q(\"~src foobar\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_url": {"var": {"q": {"?": [[454, "        assert self.q(\"~u example.com/ws\", q)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_dst": {"var": {"q": {"?": [[265, "        assert self.q(\"~dst address\", q)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_not": {"var": {"f": {"?": [[376, "        assert self.q(\"! ~src :99\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_websocket": {"var": {"f": {"?": [[439, "        assert not self.q(\"~tcp\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.q": {"param": {"self": {"TestMatchingHTTPFlow": [[93, "    def q(self, q, o):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_and": {"var": {"f": {"?": [[359, "        assert self.q(\"~b hello & ~b me\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.err": {"param": {"self": {"TestMatchingTCPFlow": [[308, "    def q(self, q, o):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_dst": {"var": {"f": {"?": [[489, "        assert self.q(\"~dst address\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestParsing.test_non_ascii": {"param": {"self": {"TestParsing": [[31, "    def test_non_ascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_or": {"var": {"s": {"?": [[288, "        assert self.q(\"~c 201 | ~h head\", s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_code": {"var": {"s": {"?": [[246, "        assert self.q(\"~c 200\", s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_src": {"var": {"f": {"?": [[481, "        assert not self.q(\"~src foobar\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_and": {"var": {"f": {"?": [[498, "        assert self.q(\"~b hello & ~b me\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow": {"var": {"test_url": {"TestMatchingHTTPFlow -> None": [[231, "        assert self.q(\"~u address\", q)"]]}}, "param": {"q": {"str": [[93, "    def q(self, q, o):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_src": {"var": {"q": {"?": [[252, "        assert not self.q(\"~src foobar\", q)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_headers": {"var": {"f": {"?": [[392, "        # Request headers"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_dst": {"var": {"f": {"?": [[350, "        assert self.q(\"~dst address\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestParsing.test_parse_err": {"param": {"self": {"TestParsing": [[17, "    def test_parse_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestParsing": {"func": {"_dump": {"(TestParsing, ?) -> None / (TestParsing, None) -> None": [[12, "    def _dump(self, x):"]]}, "test_parse_err": {"TestParsing -> None": [[17, "    def test_parse_err(self):"]]}, "test_simple": {"TestParsing -> None": [[20, "    def test_simple(self):"]]}, "test_non_ascii": {"TestParsing -> None": [[31, "    def test_non_ascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_body": {"var": {"f": {"?": [[464, "        assert self.q(\"~b hello\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_content_type": {"var": {"f": {"?": [[402, "        # Request content-type"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_url": {"var": {"s": {"?": [[232, "        assert self.q(\"~u address:22/path\", q)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_domain": {"var": {"f": {"?": [[416, "    def test_method(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingDummyFlow.err": {"param": {"self": {"TestMatchingDummyFlow": [[528, "    def q(self, q, o):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_or": {"var": {"f": {"?": [[368, "        assert self.q(\"~b hello | ~b me\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow": {"param": {"q": {"str": [[311, "    def test_tcp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingDummyFlow.test_filters": {"var": {"f": {"?": [[536, "        assert not self.q(\"~a\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_or": {"var": {"f": {"?": [[507, "        assert self.q(\"~b hello | ~b me\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_not": {"var": {"f": {"?": [[515, "        assert self.q(\"! ~src :99\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingWebSocketFlow.test_domain": {"var": {"q": {"?": [[449, "        assert not self.q(\"~d none\", q)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestParsing.test_simple": {"var": {"p": {"None": [[27, "        p = flowfilter.parse(\"~q ~c 10\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_not": {"var": {"s": {"?": [[295, "        assert self.q(\"! ~c 201\", s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestParsing._dump": {"var": {"c": {"?": [[13, "        c = io.StringIO()"]]}}, "param": {"x": {"None": [[12, "    def _dump(self, x):"]]}, "self": {"TestParsing": [[12, "    def _dump(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.q": {"param": {"self": {"TestMatchingTCPFlow": [[311, "    def test_tcp(self):"]]}, "o": {"?": [[311, "    def test_tcp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingHTTPFlow.test_and": {"var": {"s": {"?": [[279, "        assert self.q(\"~c 200 & ~h head\", s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_flowfilter.TestMatchingTCPFlow.test_method": {"var": {"f": {"?": [[420, "    def test_url(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/test_har_dump.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump": {"func": {"test_base64": {"(TestHARDump, ?, ?) -> None": [[33, "    def test_base64(self, tmpdir, tdata):"]]}, "test_binary": {"(TestHARDump, ?, ?) -> None": [[66, "    def test_binary(self, tmpdir, tdata):"]]}, "flow": {"(TestHARDump, str) -> None": [[10, "    def flow(self, resp_content=b'message'):"]]}, "test_format_cookies": {"(TestHARDump, ?) -> None": [[47, "    def test_format_cookies(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_d": {"class": {"TestHARDump": {"<TestHARDump>": [[9, "class TestHARDump:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.test_format_cooki": {"param": {"self": {"TestHARDump": [[47, "    def test_format_cookies(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDu": {"func": {"test_simple": {"(TestHARDump, ?, ?) -> None": [[22, "    def test_simple(self, tmpdir, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.test_binary": {"var": {"a": {"?": [[68, "            a = tctx.script(tdata.path(\"../examples/complex/har_dump.py\"))"]]}, "path": {"str": [[69, "            path = str(tmpdir.join(\"somefile\"))"]]}, "har": {"?": [[83, "                har = json.load(inp)"]]}, "f": {"None": [[72, "            f = self.flow()"]]}}, "param": {"tdata": {"?": [[66, "    def test_binary(self, tmpdir, tdata):"]]}, "self": {"TestHARDump": [[66, "    def test_binary(self, tmpdir, tdata):"]]}, "tmpdir": {"?": [[66, "    def test_binary(self, tmpdir, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.test_simp": {"param": {"self": {"TestHARDump": [[22, "    def test_simple(self, tmpdir, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.flow": {"var": {"times": {"dict": [[11, "        times = dict("]]}}, "param": {"self": {"TestHARDump": [[10, "    def flow(self, resp_content=b'message'):"]]}, "resp_content": {"str": [[10, "    def flow(self, resp_content=b'message'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.test_format_cookies": {"var": {"a": {"?": [[49, "            a = tctx.script(tdata.path(\"../examples/complex/har_dump.py\"))"]]}, "CA": {"<CookieAttrs>": [[51, "            CA = cookies.CookieAttrs"]]}, "f": {"?": [[53, "            f = a.format_cookies([(\"n\", \"v\", CA([(\"k\", \"v\")]))])[0]"], [59, "            f = a.format_cookies([(\"n\", \"v\", CA([(\"httponly\", None), (\"secure\", None)]))])[0]"], [63, "            f = a.format_cookies([(\"n\", \"v\", CA([(\"expires\", \"Mon, 24-Aug-2037 00:00:00 GMT\")]))])[0]"]]}}, "param": {"tdata": {"?": [[47, "    def test_format_cookies(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.test_simple": {"var": {"a": {"?": [[24, "            a = tctx.script(tdata.path(\"../examples/complex/har_dump.py\"))"]]}, "path": {"str": [[25, "            path = str(tmpdir.join(\"somefile\"))"]]}, "har": {"?": [[30, "                har = json.load(inp)"]]}}, "param": {"tdata": {"?": [[22, "    def test_simple(self, tmpdir, tdata):"]]}, "tmpdir": {"?": [[22, "    def test_simple(self, tmpdir, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_har_dump.TestHARDump.test_base64": {"var": {"a": {"?": [[35, "            a = tctx.script(tdata.path(\"../examples/complex/har_dump.py\"))"]]}, "path": {"str": [[36, "            path = str(tmpdir.join(\"somefile\"))"]]}, "har": {"?": [[44, "                har = json.load(inp)"]]}}, "param": {"tdata": {"?": [[33, "    def test_base64(self, tmpdir, tdata):"]]}, "self": {"TestHARDump": [[33, "    def test_base64(self, tmpdir, tdata):"]]}, "tmpdir": {"?": [[33, "    def test_base64(self, tmpdir, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/har_dump.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.configur": {"param": {"updated": {"?": [[42, "def configure(updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dum": {"var": {"response_body_size": {"int": [[102, "    response_body_size = len(flow.response.raw_content) if flow.response.raw_content else 0"]]}, "response_body_decoded_size": {"int": [[103, "    response_body_decoded_size = len(flow.response.content) if flow.response.content else 0"]]}}, "func": {"response": {"? -> None": [[56, "def response(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.format_cook": {"var": {"expire_ts": {"int": [[201, "        expire_ts = cookies.get_expiration_ts(attrs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.respons": {"var": {"entry": {"dict": [[106, "    entry = {"]]}, "connect_time": {"int": [[63, "    connect_time = -1"]], "?": [[66, "        connect_time = (flow.server_conn.timestamp_tcp_setup -"]]}, "full_time": {"int": [[97, "    full_time = sum(v for v in timings.values() if v > -1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.name_value": {"param": {"obj": {"dict": [[218, "def name_value(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.format_response_cook": {"param": {"fields": {"?": [[214, "def format_response_cookies(fields):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.done": {"var": {"raw": {"str": [[174, "                raw = zlib.compress(raw, 9)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.format_request_cook": {"param": {"fields": {"?": [[210, "def format_request_cookies(fields):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.respon": {"var": {"started_date_time": {"?": [[99, "    started_date_time = datetime.fromtimestamp(flow.request.timestamp_start, timezone.utc).isoformat()"]]}, "ssl_time": {"int": [[62, "    ssl_time = -1"]], "?": [[70, "            ssl_time = (flow.server_conn.timestamp_tls_setup -"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_du": {"var": {"response_body_compression": {"int": [[104, "    response_body_compression = response_body_decoded_size - response_body_size"]]}}, "func": {"format_response_cookies": {"? -> [dict]": [[214, "def format_response_cookies(fields):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump": {"func": {"load": {"? -> None": [[36, "def load(l):"]]}, "configure": {"? -> None": [[42, "def configure(updated):"]]}, "format_request_cookies": {"? -> [dict]": [[210, "def format_request_cookies(fields):"]]}, "format_cookies": {"? -> [dict] / {[(?, ?, CookieAttrs)] | [?]} -> [dict] / [(?, ?, ?)] -> [dict]": [[182, "def format_cookies(cookie_list):"]]}, "done": {"() -> None": [[162, "def done():"]]}, "name_value": {"dict -> [dict] / ? -> [dict]": [[218, "def name_value(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.forma": {"param": {"cookie_list": {"{[(?, ?, ?)] | [(?, ?, CookieAttrs)] | [?]}": [[182, "def format_cookies(cookie_list):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.format_cookies": {"var": {"cookie_har": {"dict": [[186, "        cookie_har = {"]]}, "rv": {"[dict]": [[183, "    rv = []"]]}, "name": {"?": [[185, "    for name, value, attrs in cookie_list:"]]}, "key": {"str": [[192, "        for key in [\"path\", \"domain\", \"comment\"]:"], [197, "        for key in [\"httpOnly\", \"secure\"]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.har_dump.response": {"var": {"params": {"[dict]": [[146, "        params = ["]]}, "timings_raw": {"dict": [[81, "    timings_raw = {"]]}, "timings": {"dict": [[90, "    timings = {"]]}}, "param": {"flow": {"?": [[56, "def response(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/release/test_cibuild.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_common": {"var": {"cs": {"?": [[26, "    cs = io.StringIO()"]]}, "be": {"BuildEnviron": [[15, "    be = cibuild.BuildEnviron("], [30, "    be = cibuild.BuildEnviron("], [40, "        be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_pr": {"var": {"be": {"BuildEnviron": [[51, "    be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_releasetag": {"var": {"be": {"BuildEnviron": [[121, "    be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.relea": {"func": {"test_buildenviron_common": {"() -> None": [[14, "def test_buildenviron_common():"]]}, "test_buildenviron_commit": {"() -> None": [[98, "def test_buildenviron_commit():"]]}, "test_buildenviron_check_version": {"(?, ?, ?, ?) -> None": [[263, "def test_buildenviron_check_version(version, tag, ok, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_check_": {"param": {"version": {"?": [[263, "def test_buildenviron_check_version(version, tag, ok, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_check_version": {"var": {"be": {"BuildEnviron": [[266, "    be = cibuild.BuildEnviron("]]}}, "param": {"tag": {"?": [[263, "def test_buildenviron_check_version(version, tag, ok, tmpdir):"]]}, "ok": {"?": [[263, "def test_buildenviron_check_version(version, tag, ok, tmpdir):"]]}, "tmpdir": {"?": [[263, "def test_buildenviron_check_version(version, tag, ok, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_osx": {"var": {"a": {"None": [[229, "    a = be.archive(os.path.join(tmpdir, \"arch\"))"]]}, "be": {"BuildEnviron": [[216, "    be = cibuild.BuildEnviron("]]}}, "param": {"tmpdir": {"?": [[215, "def test_buildenviron_osx(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_namedtag": {"var": {"be": {"BuildEnviron": [[146, "    be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_ci_systems": {"var": {"github2": {"BuildEnviron": [[89, "    github2 = cibuild.BuildEnviron("]]}, "github": {"BuildEnviron": [[81, "    github = cibuild.BuildEnviron("]]}, "appveyor": {"BuildEnviron": [[63, "    appveyor = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_dev_branch": {"var": {"be": {"BuildEnviron": [[171, "    be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_windows": {"var": {"a": {"None": [[248, "    a = be.archive(os.path.join(tmpdir, \"arch\"))"]]}, "be": {"BuildEnviron": [[235, "    be = cibuild.BuildEnviron("]]}}, "param": {"tmpdir": {"?": [[234, "def test_buildenviron_windows(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_c": {"func": {"test_buildenviron_pr": {"() -> None": [[48, "def test_buildenviron_pr():"]]}, "test_buildenviron_namedtag": {"() -> None": [[144, "def test_buildenviron_namedtag():"]]}, "test_buildenviron_releasetag": {"() -> None": [[119, "def test_buildenviron_releasetag():"]]}, "test_buildenviron_osx": {"? -> None": [[215, "def test_buildenviron_osx(tmpdir):"]]}, "test_buildenviron_live": {"() -> None": [[9, "def test_buildenviron_live():"]]}, "test_buildenviron_windows": {"? -> None": [[234, "def test_buildenviron_windows(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_bool_from_env": {"param": {"monkeypatch": {"?": [[278, "def test_bool_from_env(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_liv": {"var": {"be": {"BuildEnviron": [[10, "    be = cibuild.BuildEnviron.from_env()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_maintenance_branch": {"var": {"be": {"BuildEnviron": [[194, "    be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy": {"func": {"test_buildenviron_dev_branch": {"() -> None": [[169, "def test_buildenviron_dev_branch():"]]}, "test_buildenviron_maintenance_branch": {"() -> None": [[192, "def test_buildenviron_maintenance_branch():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_ci_system": {"var": {"travis": {"BuildEnviron": [[72, "    travis = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild.test_buildenviron_commit": {"var": {"be": {"BuildEnviron": [[100, "    be = cibuild.BuildEnviron("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.release.test_cibuild": {"func": {"test_bool_from_env": {"? -> None": [[278, "def test_bool_from_env(monkeypatch):"]]}, "test_ci_systems": {"() -> None": [[62, "def test_ci_systems():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_optmanager.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_serialize_defaults": {"var": {"o": {"Options": [[282, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_se": {"var": {"opts": {"TTypes": [[390, "    opts = TTypes()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.Re": {"func": {"__call__": {"Rec -> None": [[142, "    def __call__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanag": {"func": {"test_serialize": {"() -> None": [[241, "def test_serialize():"]]}, "test_make_parser": {"() -> None": [[373, "def test_make_parser():"]]}, "test_setter": {"() -> None": [[114, "def test_setter():"]]}, "test_serialize_defaults": {"() -> None": [[281, "def test_serialize_defaults():"]]}, "test_subscribe": {"() -> ?": [[146, "def test_subscribe():"]]}, "test_rollback": {"() -> None": [[188, "def test_rollback():"]]}, "test_required_int": {"() -> None": [[70, "def test_required_int():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmana": {"func": {"test_merge": {"() -> None": [[325, "def test_merge():"]]}, "test_toggler": {"() -> None": [[123, "def test_toggler():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_toggler": {"var": {"o": {"TO": [[124, "    o = TO()"]]}, "f": {"() -> None": [[125, "    f = o.toggler(\"bool\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_subsc": {"class": {"binder": {"<binder>": [[172, "    class binder:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_options.sub": {"param": {"updated": {"?": [[100, "    def sub(opts, updated):"]]}, "opts": {"?": [[100, "    def sub(opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TD.__init__": {"param": {"self": {"TD": [[21, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_rollback.err": {"param": {"updated": {"?": [[201, "    def err(opts, updated):"]]}, "opts": {"?": [[201, "    def err(opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_make_": {"var": {"parser": {"?": [[374, "    parser = argparse.ArgumentParser()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_make_parser": {"var": {"opts": {"TTypes": [[375, "    opts = TTypes()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager": {"class": {"TTypes": {"<TTypes>": [[360, "class TTypes(optmanager.OptManager):"]]}, "TO": {"<TO>": [[11, "class TO(optmanager.OptManager):"]]}, "TM": {"<TM>": [[34, "class TM(optmanager.OptManager):"]]}, "TD2": {"<TD2>": [[27, "class TD2(TD):"]]}, "Rec": {"<Rec>": [[138, "class Rec():"]]}, "TD": {"<TD>": [[20, "class TD(optmanager.OptManager):"]]}}, "func": {"test_dump_defaults": {"() -> None": [[349, "def test_dump_defaults():"]]}, "test_dump_dicts": {"() -> None": [[354, "def test_dump_dicts():"]]}, "test_deepcopy": {"() -> None": [[76, "def test_deepcopy():"]]}, "test_set": {"() -> None": [[389, "def test_set():"]]}, "test_simple": {"() -> None": [[232, "def test_simple():"]]}, "test_option": {"() -> None": [[335, "def test_option():"]]}, "test_defaults": {"() -> None": [[41, "def test_defaults():"]]}, "test_items": {"() -> None": [[237, "def test_items():"]]}, "test_saving": {"? -> None": [[286, "def test_saving(tmpdir):"]]}, "test_options": {"() -> None": [[81, "def test_options():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_setter": {"var": {"o": {"TO": [[115, "    o = TO()"]]}, "f": {"int -> None": [[116, "    f = o.setter(\"two\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_required_int": {"var": {"o": {"TO": [[71, "    o = TO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.Rec.__call__": {"param": {"self": {"Rec": [[142, "    def __call__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TTypes.__init__": {"param": {"self": {"TTypes": [[361, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_subscribe.binder.bound": {"param": {"self": {"binder": [[178, "        def bound(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TM.__init__": {"param": {"self": {"TM": [[35, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TD": {"func": {"__init__": {"? -> ?": [[21, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_deepcopy": {"var": {"o": {"TD": [[77, "    o = TD()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TD2.__init__": {"param": {"self": {"TD2": [[28, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TO": {"func": {"__init__": {"? -> ?": [[12, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TM": {"func": {"__init__": {"? -> ?": [[35, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_": {"var": {"defaults": {"dict": [[43, "    defaults = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_rollback": {"var": {"rec": {"[?]": [[191, "    rec = []"]]}, "recerr": {"[?]": [[196, "    recerr = []"]]}, "o": {"TO": [[189, "    o = TO()"]]}}, "func": {"sub": {"(?, ?) -> None": [[193, "    def sub(opts, updated):"]]}, "err": {"(?, ?) -> None": [[201, "    def err(opts, updated):"]]}, "errsub": {"? -> None": [[198, "    def errsub(opts, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.Rec": {"func": {"__init__": {"? -> ?": [[139, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_dump_defaults": {"var": {"o": {"Options": [[350, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.Rec.__init__": {"param": {"self": {"Rec": [[139, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TO.__init__": {"param": {"self": {"TO": [[12, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TD2": {"func": {"__init__": {"? -> ?": [[28, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_subscribe.binder": {"func": {"bound": {"binder -> None": [[178, "        def bound(self, *args, **kwargs):"]]}, "__init__": {"? -> ?": [[173, "        def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_defaults": {"var": {"k": {"?": [[49, "    for k, v in defaults.items():"], [61, "    for k, v in newvals.items():"], [66, "    for k in o.keys():"]]}, "o": {"TD2": [[42, "    o = TD2()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_rollback.sub": {"param": {"updated": {"?": [[193, "    def sub(opts, updated):"]]}, "opts": {"?": [[193, "    def sub(opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_dump_dicts": {"var": {"o": {"Options": [[355, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_option": {"var": {"o2": {"_Option": [[343, "    o2 = optmanager._Option(\"test\", int, 1, \"help\", None)"]]}, "o": {"_Option": [[336, "    o = optmanager._Option(\"test\", int, 1, \"help\", None)"]]}}, "func": {"sub": {"(?, ?) -> None": [[100, "    def sub(opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_saving": {"var": {"dst": {"str": [[289, "    dst = str(tmpdir.join(\"conf\"))"]]}, "o2": {"TD2": [[292, "    o2 = TD2()"]]}, "o": {"TD2": [[287, "    o = TD2()"]]}}, "param": {"tmpdir": {"?": [[286, "def test_saving(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_serialize": {"var": {"data": {"None": [[246, "    data = optmanager.serialize(o, None)"], [257, "    data = optmanager.serialize(o, t)"]]}, "o2": {"TD2": [[249, "    o2 = TD2()"], [258, "    o2 = TD2()"]]}, "o": {"TD2": [[242, "    o = TD2()"]]}, "t": {"str": [[254, "    t = \"\"\""], [262, "    t = \"invalid: foo\\ninvalid\""], [266, "    t = \"invalid\""], [270, "    t = \"# a comment\""], [275, "    t = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.TTypes": {"func": {"__init__": {"? -> ?": [[361, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_default": {"var": {"newvals": {"dict": [[53, "    newvals = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_subscribe.binder.__init__": {"param": {"self": {"binder": [[173, "        def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_subscribe": {"var": {"r": {"Rec": [[148, "    r = Rec()"]]}, "t": {"binder": [[181, "    t = binder()"]]}, "o": {"TO": [[147, "    o = TO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_merge": {"var": {"m": {"TM": [[326, "    m = TM()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_rollback.errsub": {"param": {"opts": {"?": [[198, "    def errsub(opts, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_optmanager.test_options": {"var": {"rec": {"[?]": [[98, "    rec = []"]]}, "o": {"TO": [[82, "    o = TO()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_session.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.start_session": {"var": {"s": {"Session": [[26, "        s = session.Session()"]]}}, "param": {"fp": {"None": [[25, "    def start_session(fp=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_new_persistent": {"param": {"self": {"TestSession": [[57, "    def test_session_new_persistent(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_order_generators": {"var": {"tf": {"?": [[90, "        tf = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_bodie": {"var": {"s": {"Session": [[193, "        s = self.start_session(fp=0.5)"]]}, "rows": {"?": [[213, "        rows = s.db_store.con.execute("], [217, "        rows = s.db_store.con.execute("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_flush_with_specia": {"var": {"flows": {"[None]": [[182, "        flows = [self.tft() for _ in range(500)]"]]}}, "param": {"self": {"TestSession": [[163, "    async def test_storage_flush_with_specials(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_simp": {"param": {"self": {"TestSession": [[97, "    def test_storage_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_temporary": {"var": {"s": {"SessionDB": [[39, "        s = session.SessionDB()"]]}, "td": {"?": [[40, "        td = s.tempdir"]]}, "filename": {"str": [[41, "        filename = os.path.join(td, 'tmp.sqlite')"]]}}, "param": {"self": {"TestSession": [[38, "    def test_session_temporary(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_order_generator": {"var": {"s": {"Session": [[89, "        s = session.Session()"]]}}, "param": {"self": {"TestSession": [[88, "    def test_session_order_generators(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_not_vali": {"param": {"tdata": {"?": [[47, "    def test_session_not_valid(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestS": {"func": {"test_session_order_generators": {"TestSession -> None": [[88, "    def test_session_order_generators(self):"]]}, "start_session": {"None -> Session": [[25, "    def start_session(fp=None):"]]}, "test_session_new_persistent": {"(TestSession, ?) -> None": [[57, "    def test_session_new_persistent(self, tdata):"]]}, "test_session_not_valid": {"(TestSession, ?) -> None": [[47, "    def test_session_not_valid(self, tdata):"]]}, "test_session_temporary": {"TestSession -> None": [[38, "    def test_session_temporary(self):"]]}, "test_session_load_existing": {"(TestSession, ?) -> None": [[65, "    def test_session_load_existing(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_flush_with_special": {"var": {"s": {"Session": [[164, "        s = self.start_session(fp=0.5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_new_persisten": {"var": {"path": {"str": [[58, "        path = tdata.path('mitmproxy/data/') + '/test_np.sqlite'"]]}}, "param": {"tdata": {"?": [[57, "    def test_session_new_persistent(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_simple": {"var": {"s": {"Session": [[98, "        s = session.Session()"]]}, "f3": {"None": [[133, "        f3 = self.tft(start=2)"]]}, "f2": {"None": [[127, "        f2 = self.tft(start=3)"]]}, "f": {"None": [[102, "        f = self.tft(start=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_not_valid": {"var": {"path": {"str": [[48, "        path = tdata.path('mitmproxy/data/') + '/test_snv.sqlite'"]]}}, "param": {"self": {"TestSession": [[47, "    def test_session_not_valid(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_session_load_existing": {"var": {"rows": {"?": [[83, "            rows = cur.fetchall()"]]}, "cur": {"?": [[81, "            cur = con.cursor()"]]}, "blob": {"str": [[75, "            blob = b'blob_of_data'"]]}, "qry": {"str": [[72, "            qry = f.read()"]]}, "path": {"str": [[66, "        path = tdata.path('mitmproxy/data/') + '/test_le.sqlite'"]]}, "script_path": {"None": [[70, "        script_path = pkg_data.path(\"io/sql/session_create.sql\")"]]}, "con": {"?": [[69, "        con = sqlite3.connect(path)"], [79, "        con = sqlite3.connect(path)"]]}}, "param": {"tdata": {"?": [[65, "    def test_session_load_existing(self, tdata):"]]}, "self": {"TestSession": [[65, "    def test_session_load_existing(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession": {"func": {"test_storage_filter": {"TestSession -> None": [[144, "    def test_storage_filter(self):"]]}, "tft": {"() -> None": [[18, "    def tft(*, method=\"GET\", start=0):"]]}, "test_storage_simple": {"TestSession -> None": [[97, "    def test_storage_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_flush_with_specials": {"var": {"f": {"None": [[165, "        f = self.tft()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_filter": {"var": {"s": {"Session": [[145, "        s = self.start_session()"]]}}, "param": {"self": {"TestSession": [[144, "    def test_storage_filter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.tft": {"var": {"f": {"?": [[19, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_": {"class": {"TestSession": {"<TestSession>": [[15, "class TestSession:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_order": {"var": {"s": {"Session": [[226, "        s = self.start_session(fp=0.5)"]]}}, "param": {"self": {"TestSession": [[225, "    async def test_storage_order(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_bodies": {"var": {"content": {"?": [[200, "        content = s.db_store.con.execute("]]}, "f2": {"None": [[195, "        f2 = self.tft(start=1)"]]}, "f": {"None": [[194, "        f = self.tft()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_session.TestSession.test_storage_bodi": {"param": {"self": {"TestSession": [[190, "    async def test_storage_bodies(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_taddons.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_taddons.test_load_scrip": {"param": {"tdata": {"?": [[28, "def test_load_script(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_taddon": {"func": {"test_load_script": {"? -> None": [[28, "def test_load_script(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_taddons.test_dumplog": {"var": {"s": {"?": [[23, "        s = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_taddons.test_load_script": {"var": {"s": {"?": [[30, "        s = tctx.script("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_api.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_api.test_get_content_view": {"var": {"desc": {"str": [[30, "    desc, lines, err = contentviews.get_content_view("], [38, "    desc, lines, err = contentviews.get_content_view("], [46, "    desc, lines, err = contentviews.get_content_view("], [55, "        desc, lines, err = contentviews.get_content_view("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_ap": {"class": {"TestContentView": {"<TestContentView>": [[11, "class TestContentView(contentviews.View):"]]}}, "func": {"test_get_message_content_view": {"() -> None": [[63, "def test_get_message_content_view():"]]}, "test_get_content_view": {"() -> None": [[29, "def test_get_content_view():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_api": {"func": {"test_add_remove": {"() -> None": [[16, "def test_add_remove():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_api.test_get_message_content_view": {"var": {"desc": {"str": [[66, "    desc, lines, err = contentviews.get_message_content_view(\"raw\", r, f)"], [69, "    desc, lines, err = contentviews.get_message_content_view(\"unknown\", r, f)"], [73, "    desc, lines, err = contentviews.get_message_content_view(\"raw\", r, f)"], [77, "    desc, lines, err = contentviews.get_message_content_view(\"raw\", r, f)"], [81, "    desc, lines, err = contentviews.get_message_content_view(\"raw\", r, f)"]]}, "r": {"?": [[65, "    r = tutils.treq()"]]}, "f": {"?": [[64, "    f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_api.test_add_remove": {"var": {"tcv": {"TestContentView": [[17, "    tcv = TestContentView()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_api.TestContentView": {"var": {"content_types": {"[str]": [[13, "    content_types = [\"test/123\"]"]]}, "name": {"str": [[12, "    name = \"test\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/tcp_stream_modify.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.tcp_stream_modify.tcp_message": {"param": {"flow": {"?": [[1, "def tcp_message(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.tcp_stream_modify": {"func": {"tcp_message": {"? -> None": [[1, "def tcp_message(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.tcp_stream_modify.tcp_": {"var": {"message": {"?": [[2, "    message = flow.messages[-1]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/signals.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"var": {"flowlist_change": {"?": [[32, "flowlist_change = blinker.Signal()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.signal": {"var": {"keybindings_change": {"?": [[39, "keybindings_change = blinker.Signal()"]]}, "push_view_state": {"?": [[36, "push_view_state = blinker.Signal()"]]}, "status_prompt": {"?": [[8, "status_prompt = blinker.Signal()"]]}, "status_prompt_onekey": {"?": [[14, "status_prompt_onekey = blinker.Signal()"]]}, "focus": {"?": [[23, "focus = blinker.Signal()"]]}, "pop_view_state": {"?": [[35, "pop_view_state = blinker.Signal()"]]}, "status_prompt_command": {"?": [[17, "status_prompt_command = blinker.Signal()"]]}, "update_settings": {"?": [[26, "update_settings = blinker.Signal()"]]}, "status_message": {"?": [[5, "status_message = blinker.Signal()"]]}, "status_prompt_path": {"?": [[11, "status_prompt_path = blinker.Signal()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.signals": {"var": {"flow_change": {"?": [[29, "flow_change = blinker.Signal()"]]}, "call_in": {"?": [[20, "call_in = blinker.Signal()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/http.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.tim": {"param": {"self": {"Request": [[290, "    def times(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.spec": {"param": {"self": {"Response": [[252, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutLocation": {"var": {"preamble": {"str": [[81, "    preamble = \"l\""]]}, "key": {"?": [[82, "    key = base.TokValueLiteral(\"Location\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.preamble": {"var": {"l": {"[str]": [[176, "        l = [self.version, b\" \"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.path": {"param": {"self": {"Request": [[286, "    def path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.WS": {"var": {"TOK": {"str": [[16, "    TOK = \"ws\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Respon": {"func": {"status_code": {"Response -> ?": [[168, "    def status_code(self):"]]}, "resolve": {"(Response, dict, None) -> None / (Response, ?, None) -> None": [[191, "    def resolve(self, settings, msg=None):"]]}, "spec": {"Response -> str": [[252, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.preambl": {"var": {"status_code": {"int": [[178, "        status_code = int(self.status_code.value)"]]}}, "param": {"settings": {"?": [[175, "    def preamble(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.languag": {"class": {"ShortcutContentType": {"<ShortcutContentType>": [[75, "class ShortcutContentType(_HeaderMixin, base.Value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessag": {"var": {"version": {"str": [[114, "    version = b\"HTTP/1.1\""]]}}, "func": {"values": {"(_HTTPMessage, ?) -> None": [[136, "    def values(self, settings):"]]}, "headers": {"_HTTPMessage -> ?": [[133, "    def headers(self):"]]}, "preamble": {"(_HTTPMessage, ?) -> None": [[129, "    def preamble(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.action": {"param": {"self": {"_HTTPMessage": [[117, "    def actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutUserAgent.valu": {"param": {"self": {"ShortcutUserAgent": [[90, "    def values(self, settings):"]]}, "settings": {"?": [[90, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.get_": {"param": {"headers": {"_HTTPMessage -> ?": [[101, "def get_header(val, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.preambl": {"param": {"settings": {"?": [[129, "    def preamble(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.raw": {"param": {"self": {"_HTTPMessage": [[121, "    def raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.ex": {"var": {"resp": {"?": [[236, "        resp = pp.And("], [249, "        resp = resp.setParseAction(cls)"]]}, "parts": {"[?]": [[234, "        parts = [i.expr() for i in cls.comps]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutUserAgent": {"var": {"preamble": {"str": [[86, "    preamble = \"u\""]]}, "key": {"?": [[88, "    key = base.TokValueLiteral(\"User-Agent\")"]]}}, "func": {"values": {"(ShortcutUserAgent, ?) -> [str]": [[90, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutContentTyp": {"var": {"key": {"?": [[77, "    key = base.TokValueLiteral(\"Content-Type\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.h": {"class": {"NestedResponse": {"<NestedResponse>": [[256, "class NestedResponse(message.NestedMessage):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.nested_respon": {"param": {"self": {"Request": [[294, "    def nested_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.NestedRespons": {"var": {"preamble": {"str": [[257, "    preamble = \"s\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http": {"class": {"Body": {"<Body>": [[35, "class Body(base.Value):"]]}, "ShortcutUserAgent": {"<ShortcutUserAgent>": [[85, "class ShortcutUserAgent(_HeaderMixin, base.OptionsOrValue):"]]}, "Header": {"<Header>": [[71, "class Header(_HeaderMixin, base.KeyValue):"]]}, "Request": {"<Request>": [[261, "class Request(_HTTPMessage):"]]}, "Times": {"<Times>": [[39, "class Times(base.Integer):"]]}, "Raw": {"<Raw>": [[19, "class Raw(base.CaselessLiteral):"]]}, "Reason": {"<Reason>": [[31, "class Reason(base.Value):"]]}, "WS": {"<WS>": [[15, "class WS(base.CaselessLiteral):"]]}, "_HeaderMixin": {"<_HeaderMixin>": [[56, "class _HeaderMixin:"]]}, "_HTTPMessage": {"<_HTTPMessage>": [[113, "class _HTTPMessage(message.Message):"]]}, "Path": {"<Path>": [[23, "class Path(base.Value):"]]}, "ShortcutLocation": {"<ShortcutLocation>": [[80, "class ShortcutLocation(_HeaderMixin, base.Value):"]]}, "Method": {"<Method>": [[43, "class Method(base.OptionsOrValue):"]]}, "StatusCode": {"<StatusCode>": [[27, "class StatusCode(base.Integer):"]]}}, "func": {"get_header": {"(?, ?) -> None / (str, _HTTPMessage -> ?) -> None / (?, _HTTPMessage -> ?) -> None / (str, ?) -> None": [[101, "def get_header(val, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request": {"var": {"comps": {"(<Header>, <ShortcutContentType>, <ShortcutUserAgent>, <Raw>, <NestedResponse>, <Body>, <Times>, ?, ?, ?)": [[262, "    comps = ("]]}}, "func": {"preamble": {"(Request, ?) -> None": [[297, "    def preamble(self, settings):"]]}, "resolve": {"(Request, ?, None) -> ?": [[307, "    def resolve(self, settings, msg=None):"]]}, "ws": {"Request -> ?": [[278, "    def ws(self):"]]}, "spec": {"Request -> str": [[380, "    def spec(self):"]]}, "expr": {"<Request> -> None": [[359, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutUserAgent.values": {"var": {"value": {"str": [[93, "            value = user_agents.get_by_shortcut(value.lower().decode())[2].encode()"]], "?": [[91, "        value = self.value.val"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.resolv": {"var": {"tokens": {"?": [[192, "        tokens = self.tokens[:]"]]}, "headers": {"Headers": [[203, "            headers = mitmproxy.net.websockets.server_handshake_headers("]]}, "length": {"int": [[216, "                    length = 0"], [218, "                    length = sum("]]}, "intermediate": {"?": [[227, "        intermediate = self.__class__(tokens)"]]}}, "param": {"self": {"Response": [[191, "    def resolve(self, settings, msg=None):"]]}, "settings": {"dict": [[191, "    def resolve(self, settings, msg=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.values": {"var": {"h": {"?": [[139, "        for h in self.headers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Times": {"var": {"preamble": {"str": [[40, "    preamble = \"x\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.htt": {"class": {"Response": {"<Response>": [[147, "class Response(_HTTPMessage):"]]}}, "func": {"make_error_response": {"(str, None) -> Response / (?, None) -> Response": [[384, "def make_error_response(reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.status_cod": {"param": {"self": {"Response": [[168, "    def status_code(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.header": {"param": {"self": {"_HTTPMessage": [[133, "    def headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Raw": {"var": {"TOK": {"str": [[20, "    TOK = \"r\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Method": {"var": {"options": {"[str]": [[44, "    options = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.w": {"param": {"self": {"Response": [[164, "    def ws(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HeaderMixin": {"func": {"values": {"(_HeaderMixin, ?) -> [str]": [[64, "    def values(self, settings):"]]}, "format_header": {"(ShortcutUserAgent, ?, str) -> [str] / (_HeaderMixin, ?, ?) -> [str]": [[61, "    def format_header(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.w": {"param": {"self": {"Request": [[278, "    def ws(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Respons": {"var": {"unique_name": {"None": [[148, "    unique_name = None  # type: ignore"]]}}, "func": {"expr": {"<Response> -> None": [[233, "    def expr(cls):"]]}, "preamble": {"(Response, ?) -> [str]": [[175, "    def preamble(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Body": {"var": {"preamble": {"str": [[36, "    preamble = \"b\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.valu": {"param": {"self": {"_HTTPMessage": [[136, "    def values(self, settings):"]]}, "settings": {"?": [[136, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.method": {"param": {"self": {"Request": [[282, "    def method(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HeaderMix": {"func": {"unique_name": {"_HeaderMixin -> None": [[58, "    def unique_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Reason": {"var": {"preamble": {"str": [[32, "    preamble = \"m\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.spec": {"param": {"self": {"Request": [[380, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.value": {"var": {"vals": {"None": [[137, "        vals = self.preamble(settings)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HeaderMixin.format_header": {"param": {"self": {"{ShortcutUserAgent | _HeaderMixin}": [[61, "    def format_header(self, key, value):"]]}, "value": {"str": [[61, "    def format_header(self, key, value):"]]}, "key": {"?": [[61, "    def format_header(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutUserAge": {"var": {"options": {"[str]": [[87, "    options = [i[1] for i in user_agents.UASTRINGS]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.reason": {"param": {"self": {"Response": [[172, "    def reason(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.ShortcutContentTy": {"var": {"preamble": {"str": [[76, "    preamble = \"c\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Resp": {"func": {"reason": {"Response -> ?": [[172, "    def reason(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.get_header": {"var": {"h": {"?": [[106, "    for h in headers:"]]}, "k": {"?": [[107, "        k = h.key.get_generator({})"]]}}, "param": {"val": {"str": [[101, "def get_header(val, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.expr": {"var": {"atom": {"?": [[235, "        atom = pp.MatchFirst(parts)"]]}}, "param": {"cls": {"<Response>": [[233, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.make_error_resp": {"var": {"tokens": {"[{Body | Header | Reason | StatusCode}]": [[385, "    tokens = ["]]}}, "param": {"reason": {"str": [[384, "def make_error_response(reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Requ": {"func": {"nested_response": {"Request -> ?": [[294, "    def nested_response(self):"]]}, "times": {"Request -> ?": [[290, "    def times(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Head": {"var": {"preamble": {"str": [[72, "    preamble = \"h\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.preamb": {"param": {"self": {"_HTTPMessage": [[129, "    def preamble(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.NestedRespo": {"var": {"nest_type": {"<Response>": [[258, "    nest_type = Response"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage": {"func": {"body": {"_HTTPMessage -> ?": [[125, "    def body(self):"]]}, "raw": {"_HTTPMessage -> bool": [[121, "    def raw(self):"]]}, "actions": {"_HTTPMessage -> ?": [[117, "    def actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.preambl": {"param": {"settings": {"?": [[297, "    def preamble(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.make_error_response": {"param": {"body": {"None": [[384, "def make_error_response(reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.resolve": {"var": {"i": {"?": [[206, "            for i in headers.fields:"]]}}, "param": {"msg": {"None": [[191, "    def resolve(self, settings, msg=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HeaderMixin.unique_nam": {"param": {"self": {"_HeaderMixin": [[58, "    def unique_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HTTPMessage.body": {"param": {"self": {"_HTTPMessage": [[125, "    def body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.preamb": {"param": {"self": {"Request": [[297, "    def preamble(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response": {"var": {"comps": {"(<Header>, <ShortcutContentType>, <ShortcutLocation>, <Raw>, <Reason>, <Body>, ?, ?, ?)": [[149, "    comps = ("]]}, "logattrs": {"[str]": [[161, "    logattrs = [\"status_code\", \"reason\", \"version\", \"body\"]"]]}}, "func": {"ws": {"Response -> ?": [[164, "    def ws(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.preamble": {"var": {"v": {"?": [[298, "        v = self.method.values(settings)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Reque": {"var": {"logattrs": {"[str]": [[275, "    logattrs = [\"method\", \"path\", \"body\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.expr": {"var": {"atom": {"?": [[361, "        atom = pp.MatchFirst(parts)"]]}}, "param": {"cls": {"<Request>": [[359, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Reques": {"func": {"path": {"Request -> ?": [[286, "    def path(self):"]]}, "method": {"Request -> ?": [[282, "    def method(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Response.preamb": {"param": {"self": {"Response": [[175, "    def preamble(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http._HeaderMixin.valu": {"param": {"self": {"_HeaderMixin": [[64, "    def values(self, settings):"]]}, "settings": {"?": [[64, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.resolve": {"var": {"i": {"?": [[315, "            for i in mitmproxy.net.websockets.client_handshake_headers().fields:"]]}, "h": {"?": [[337, "                    h = settings.request_host"], [344, "                            h = h.decode(\"ascii\", errors=\"ignore\")"]]}, "_": {"?": [[343, "                            _, h, _, _ = url.parse(path)"]]}, "path": {"str": [[339, "                        path = b\"\".join(self.path.values({})).decode("]]}}, "param": {"msg": {"None": [[307, "    def resolve(self, settings, msg=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.ex": {"var": {"resp": {"?": [[362, "        resp = pp.And("], [377, "        resp = resp.setParseAction(cls)"]]}, "parts": {"[?]": [[360, "        parts = [i.expr() for i in cls.comps]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http.Request.resolv": {"var": {"tokens": {"?": [[308, "        tokens = self.tokens[:]"]]}, "length": {"int": [[326, "                    length = sum("]]}, "intermediate": {"?": [[353, "        intermediate = self.__class__(tokens)"]]}}, "param": {"self": {"Request": [[307, "    def resolve(self, settings, msg=None):"]]}, "settings": {"?": [[307, "    def resolve(self, settings, msg=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/io-read-saved-flows.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.io-read-saved-flows": {"var": {"freader": {"FlowReader": [[11, "    freader = io.FlowReader(logfile)"]]}, "pp": {"?": [[12, "    pp = pprint.PrettyPrinter(indent=4)"]]}, "f": {"?": [[14, "        for f in freader.stream():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/platform/linux.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.linux.original_addr": {"var": {"ip": {"?": [[29, "        ip = socket.inet_ntop(socket.AF_INET, raw_ip)"], [33, "        ip = socket.inet_ntop(socket.AF_INET6, raw_ip)"]]}, "dst": {"?": [[27, "        dst = csock.getsockopt(socket.SOL_IP, SO_ORIGINAL_DST, 16)"], [31, "        dst = csock.getsockopt(SOL_IPV6, SO_ORIGINAL_DST, 28)"]]}, "is_ipv4": {"bool": [[23, "    is_ipv4 = \".\" in csock.getsockname()[0]  # either 127.0.0.1 or ::ffff:127.0.0.1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.linux": {"var": {"SOL_IPV6": {"int": [[7, "SOL_IPV6 = 41"]]}, "SO_ORIGINAL_DST": {"int": [[6, "SO_ORIGINAL_DST = 80"]]}}, "func": {"original_addr": {"? -> (?, ?)": [[10, "def original_addr(csock: socket.socket) -> typing.Tuple[str, int]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_tcp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_tcp.TestTCPFlow": {"func": {"test_copy": {"TestTCPFlow -> None": [[10, "    def test_copy(self):"]]}, "test_match": {"TestTCPFlow -> None": [[44, "    def test_match(self):"]]}, "test_repr": {"TestTCPFlow -> None": [[56, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_tcp": {"class": {"TestTCPFlow": {"<TestTCPFlow>": [[8, "class TestTCPFlow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_tcp.TestTCPFlow.test_repr": {"var": {"f": {"?": [[57, "        f = tflow.ttcpflow()"]]}}, "param": {"self": {"TestTCPFlow": [[56, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_tcp.TestTCPFlow.test_match": {"var": {"f": {"?": [[45, "        f = tflow.ttcpflow()"], [50, "        f = tflow.ttcpflow(err=True)"]]}}, "param": {"self": {"TestTCPFlow": [[44, "    def test_match(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_tcp.TestTCPFlow.test_copy": {"var": {"a": {"?": [[14, "        a = f.get_state()"], [30, "            a = m.get_state()"]]}, "f2": {"?": [[13, "        f2 = f.copy()"], [39, "        f2 = f.copy()"]]}, "b": {"?": [[15, "        b = f2.get_state()"], [31, "            b = m2.get_state()"]]}, "f": {"?": [[11, "        f = tflow.ttcpflow()"], [38, "        f = tflow.ttcpflow(err=True)"]]}, "m": {"TCPMessage": [[34, "        m = tcp.TCPMessage(False, 'foo')"]], "?": [[24, "        for m in f.messages:"]]}, "m2": {"?": [[26, "            m2 = m.copy()"]]}}, "param": {"self": {"TestTCPFlow": [[10, "    def test_copy(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_serverplayback.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmprox": {"func": {"test_server_playback_response_deleted": {"() -> None": [[362, "def test_server_playback_response_deleted():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_headers": {"var": {"r": {"?": [[177, "        r = tflow.tflow(resp=True)"], [186, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[179, "        r2 = tflow.tflow(resp=True)"], [187, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback": {"func": {"test_ignore_params": {"() -> None": [[236, "def test_ignore_params():"]]}, "thash": {"(?, ?, ? -> None) -> None / (?, ?, ?) -> None": [[257, "def thash(r, r2, setter):"]]}, "test_ignore_content": {"() -> None": [[76, "def test_ignore_content():"]]}, "test_load": {"() -> None": [[191, "def test_load():"]]}, "test_ignore_host": {"() -> None": [[61, "def test_ignore_host():"]]}, "test_config": {"? -> None": [[31, "def test_config(tmpdir):"]]}, "test_headers": {"() -> None": [[172, "def test_headers():"]]}, "test_ignore_payload_params_other_content_type": {"() -> None": [[128, "def test_ignore_payload_params_other_content_type():"]]}, "test_ignore_content_wins_over_params": {"() -> None": [[104, "def test_ignore_content_wins_over_params():"]]}, "test_hash": {"() -> None": [[152, "def test_hash():"]]}, "test_ignore_payload_params": {"() -> None": [[289, "def test_ignore_payload_params():"]]}, "tdump": {"(?, ?) -> None / (str, [?]) -> None": [[13, "def tdump(path, flows):"]]}, "test_load_file": {"? -> None": [[20, "def test_load_file(tmpdir):"]]}, "test_load_with_server_replay_nopop": {"() -> None": [[218, "def test_load_with_server_replay_nopop():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.tdump": {"var": {"i": {"?": [[16, "        for i in flows:"]]}, "w": {"FlowWriter": [[15, "        w = io.FlowWriter(f)"]]}}, "param": {"flows": {"[?]": [[13, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_content_wins_over_params": {"var": {"r": {"?": [[116, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[120, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload_params.urlencode_sette": {"param": {"r": {"?": [[290, "    def urlencode_setter(r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_host": {"var": {"r": {"?": [[66, "        r = tflow.tflow(resp=True)"]]}, "sp": {"ServerPlayback": [[62, "    sp = serverplayback.ServerPlayback()"]]}, "r2": {"?": [[67, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_load": {"var": {"s": {"ServerPlayback": [[192, "    s = serverplayback.ServerPlayback()"]]}, "r": {"?": [[196, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[199, "        r2 = tflow.tflow(resp=True)"]]}, "n": {"None": [[206, "        n = s.next_flow(r)"], [210, "        n = s.next_flow(r)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_load_file": {"var": {"s": {"ServerPlayback": [[21, "    s = serverplayback.ServerPlayback()"]]}, "fpath": {"str": [[23, "        fpath = str(tmpdir.join(\"flows\"))"]]}}, "param": {"tmpdir": {"?": [[20, "def test_load_file(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_server_playback": {"var": {"sp": {"ServerPlayback": [[43, "    sp = serverplayback.ServerPlayback()"]]}, "f": {"?": [[46, "        f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload_params.multipart_setter": {"var": {"k": {"?": [[304, "        for k, v in kwargs.items():"]]}, "b": {"str": [[302, "        b = \"--{0}\\n\".format(boundary)"]]}, "c": {"str": [[309, "        c = b + b.join(parts) + b"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_content_wins_over_param": {"var": {"s": {"ServerPlayback": [[105, "    s = serverplayback.ServerPlayback()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_params": {"var": {"r": {"?": [[244, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[246, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_server_playback_response_deleted": {"var": {"f1": {"?": [[371, "        f1 = tflow.tflow(resp=True)"]]}, "f2": {"?": [[372, "        f2 = tflow.tflow(resp=True)"]]}, "sp": {"ServerPlayback": [[368, "    sp = serverplayback.ServerPlayback()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload_param": {"func": {"urlencode_setter": {"? -> None": [[290, "    def urlencode_setter(r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_server_playback_kill": {"var": {"s": {"ServerPlayback": [[344, "    s = serverplayback.ServerPlayback()"]]}, "f": {"?": [[352, "        f = tflow.tflow()"], [356, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload_params.multipart_sette": {"var": {"parts": {"[?]": [[303, "        parts = []"]]}}, "param": {"r": {"?": [[301, "    def multipart_setter(r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload_params_other_content_type": {"var": {"s": {"ServerPlayback": [[129, "    s = serverplayback.ServerPlayback()"]]}, "r": {"?": [[139, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[142, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_param": {"var": {"s": {"ServerPlayback": [[237, "    s = serverplayback.ServerPlayback()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_hash": {"var": {"s": {"ServerPlayback": [[153, "    s = serverplayback.ServerPlayback()"]]}, "r": {"?": [[157, "        r = tflow.tflow()"]]}, "r2": {"?": [[158, "        r2 = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_header": {"var": {"s": {"ServerPlayback": [[173, "    s = serverplayback.ServerPlayback()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_server_playback_full": {"var": {"tf": {"?": [[331, "        tf = tflow.tflow()"], [336, "        tf = tflow.tflow()"]]}, "s": {"ServerPlayback": [[320, "    s = serverplayback.ServerPlayback()"]]}, "f": {"?": [[327, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.thash": {"var": {"s": {"ServerPlayback": [[258, "    s = serverplayback.ServerPlayback()"], [260, "        s = serverplayback.ServerPlayback()"]]}}, "param": {"r": {"?": [[257, "def thash(r, r2, setter):"]]}, "r2": {"?": [[257, "def thash(r, r2, setter):"]]}, "setter": {"{? -> None | ? -> None}": [[257, "def thash(r, r2, setter):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_content": {"var": {"s": {"ServerPlayback": [[77, "    s = serverplayback.ServerPlayback()"]]}, "r": {"?": [[81, "        r = tflow.tflow(resp=True)"], [91, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[82, "        r2 = tflow.tflow(resp=True)"], [92, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_load_with_server_replay_nopop": {"var": {"s": {"ServerPlayback": [[219, "    s = serverplayback.ServerPlayback()"]]}, "r": {"?": [[223, "        r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[226, "        r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload": {"func": {"multipart_setter": {"? -> None": [[301, "    def multipart_setter(r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_ignore_payload_params": {"var": {"boundary": {"str": [[299, "    boundary = 'somefancyboundary'"]]}, "r": {"?": [[293, "    r = tflow.tflow(resp=True)"], [314, "    r = tflow.tflow(resp=True)"]]}, "r2": {"?": [[295, "    r2 = tflow.tflow(resp=True)"], [315, "    r2 = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.test_config": {"var": {"s": {"ServerPlayback": [[32, "    s = serverplayback.ServerPlayback()"]]}, "fpath": {"str": [[34, "        fpath = str(tmpdir.join(\"flows\"))"]]}}, "param": {"tmpdir": {"?": [[31, "def test_config(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_serverplayback.tdum": {"param": {"path": {"str": [[13, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addon": {"func": {"test_server_playback_kill": {"() -> None": [[343, "def test_server_playback_kill():"]]}, "test_server_playback_full": {"() -> None": [[319, "def test_server_playback_full():"]]}, "test_server_playback": {"() -> None": [[42, "def test_server_playback():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/platform/pf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.pf.looku": {"var": {"port": {"[str]": [[39, "                port = s[1].split(\"]\")"]], "str": [[40, "                port = port[0]"]]}, "specv4": {"?": [[18, "    specv4 = \"%s:%s\" % (address, port)"]]}, "specv6": {"?": [[21, "    specv6 = \"%s[%s]\" % (address, port)"]]}}, "param": {"port": {"int": [[5, "def lookup(address, port, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.pf.lookup": {"var": {"i": {"str": [[23, "    for i in s.split(\"\\n\"):"]]}, "s": {"[str]": [[25, "            s = i.split()"], [31, "                    s = s[4].split(\":\")"], [36, "            s = i.split()"], [38, "                s = s[4].split(\"[\")"]], "?": [[29, "                    s = s[3][1:-1].split(\":\")"]], "str": [[15, "    s = s.decode()"]]}, "address": {"?": [[14, "    address = re.sub(r\"^::ffff:(?=\\d+.\\d+.\\d+.\\d+$)\", \"\", address)"]]}}, "param": {"s": {"str": [[5, "def lookup(address, port, s):"]]}, "address": {"str": [[5, "def lookup(address, port, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.pf": {"func": {"lookup": {"(str, int, str) -> (str, int) / (?, ?, ?) -> (?, int)": [[5, "def lookup(address, port, s):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/test/tutils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tutils": {"func": {"treq": {"() -> Request": [[15, "def treq(**kwargs):"]]}, "treader": {"? -> Reader": [[7, "def treader(bytes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tutils.tresp": {"var": {"default": {"dict": [[42, "    default = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tutils.treq": {"var": {"default": {"dict": [[20, "    default = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tutils.treader": {"var": {"fp": {"?": [[11, "    fp = BytesIO(bytes)"]]}}, "param": {"bytes": {"?": [[7, "def treader(bytes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tutil": {"func": {"tresp": {"() -> Response": [[37, "def tresp(**kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/strutils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.stru": {"var": {"_control_char_trans_newline": {"?": [[40, "_control_char_trans_newline = _control_char_trans.copy()"], [45, "_control_char_trans_newline = str.maketrans(_control_char_trans_newline)"]]}}, "func": {"is_mostly_bin": {"str -> bool / ? -> bool": [[105, "def is_mostly_bin(s: bytes) -> bool:"]]}, "split_special_areas": {"(?, (str, str, str, str)) -> None / (str, (str, str, str, str, str, str, str)) -> None / (?, (str, str, str, str, str, str, str)) -> None / (str, (str, str, str, str)) -> None / (str, [str]) -> None": [[162, "def split_special_areas("]]}, "_restore_from_private_code_plane": {"? -> str": [[152, "def _restore_from_private_code_plane(matchobj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils._restore_from_private_code_plane": {"param": {"matchobj": {"?": [[152, "def _restore_from_private_code_plane(matchobj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.escaped_str_to_bytes": {"param": {"data": {"str": [[90, "def escaped_str_to_bytes(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.bytes_to_escaped_s": {"var": {"ret": {"?": [[80, "        ret = re.sub(r\"(?<!\\\\)(\\\\\\\\)*\\\\'\", lambda m: (m.group(1) or \"\") + \"'\", ret)"], [82, "        ret = re.sub("]], "str": [[78, "    ret = repr(b'\"' + data).lstrip(\"b\")[2:-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.escape_special_areas": {"var": {"x": {"?": [[216, "            x = rex.sub(_move_to_private_code_plane, x)"]]}, "data": {"str": [[186, "        data: str,"]]}, "area_delimiter": {"{(str, str, str, str) | (str, str, str, str, str, str, str) | [str]}": [[187, "        area_delimiter: Iterable[str],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.struti": {"var": {"_control_char_trans": {"dict": [[35, "_control_char_trans = {"]], "?": [[44, "_control_char_trans = str.maketrans(_control_char_trans)"]]}}, "func": {"always_str": {"None -> None / int -> None / {int | str} -> None / {(int, int) | (int, int, int) | None | dict | dict | str} -> None / ? -> None / {(int, int) | (int, int, int) | None | dict | list | str} -> None / list -> None / str -> None": [[16, "def always_str(str_or_bytes: Union[str, bytes, None], *decode_args) -> Optional[str]:"]]}, "always_bytes": {"int -> None / ? -> str / str -> None": [[7, "def always_bytes(str_or_bytes: Union[str, bytes, None], *encode_args) -> Optional[bytes]:"]]}, "escape_control_characters": {"(?, bool) -> None / (str, bool) -> str / (None, ?) -> None / (str, ?) -> str / (? -> ?, ?) -> None / (?, ?) -> None": [[48, "def escape_control_characters(text: str, keep_spacing=True) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.bytes_to_escaped_str": {"param": {"escape_single_quotes": {"?": [[62, "def bytes_to_escaped_str(data, keep_spacing=False, escape_single_quotes=False):"]]}, "keep_spacing": {"bool": [[62, "def bytes_to_escaped_str(data, keep_spacing=False, escape_single_quotes=False):"]]}, "data": {"{None | str}": [[62, "def bytes_to_escaped_str(data, keep_spacing=False, escape_single_quotes=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.escape_speci": {"var": {"control_characters": {"str": [[188, "        control_characters,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.escape_control_character": {"param": {"keep_spacing": {"bool": [[48, "def escape_control_characters(text: str, keep_spacing=True) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.escape_control_characte": {"var": {"trans": {"?": [[58, "    trans = _control_char_trans_newline if keep_spacing else _control_char_trans"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.split_special_areas": {"var": {"data": {"str": [[163, "        data: str,"]]}, "area_delimiter": {"{(str, str, str, str) | (str, str, str, str, str, str, str) | [str]}": [[164, "        area_delimiter: Iterable[str],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.escape_control_characters": {"param": {"text": {"{? -> ? | None | str}": [[48, "def escape_control_characters(text: str, keep_spacing=True) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strut": {"func": {"is_xml": {"str -> int / ? -> ?": [[115, "def is_xml(s: bytes) -> bool:"]]}, "escape_special_areas": {"(?, (str, str, str, str), str) -> None / (str, [str], str) -> None / (?, (str, str, str, str, str, str, str), str) -> None / (str, (str, str, str, str), str) -> None / (str, (str, str, str, str, str, str, str), str) -> None": [[185, "def escape_special_areas("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils._move_to_private_code_plane": {"param": {"matchobj": {"?": [[148, "def _move_to_private_code_plane(matchobj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutil": {"func": {"bytes_to_escaped_str": {"(?, bool, ?) -> str / (str, bool, ?) -> str / (None, ?, ?) -> str / (?, ?, ?) -> str / (str, ?, ?) -> str": [[62, "def bytes_to_escaped_str(data, keep_spacing=False, escape_single_quotes=False):"]]}, "escaped_str_to_bytes": {"? -> None / str -> None": [[90, "def escaped_str_to_bytes(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils": {"var": {"NO_ESCAPE": {"str": [[156, "NO_ESCAPE = r\"(?<!\\\\)(?:\\\\\\\\)*\""]]}, "x": {"str": [[41, "for x in (\"\\r\", \"\\n\", \"\\t\"):"]]}, "SINGLELINE_CONTENT": {"str": [[158, "SINGLELINE_CONTENT = r\".*?\""]]}, "MULTILINE_CONTENT": {"str": [[157, "MULTILINE_CONTENT = r\"[\\s\\S]*?\""]]}, "MULTILINE_CONTENT_LINE_CONTINUATION": {"str": [[159, "MULTILINE_CONTENT_LINE_CONTINUATION = r\"(?:.|(?<=\\\\)\\n)*?\""]]}}, "func": {"hexdump": {"None -> None / ? -> None": [[131, "def hexdump(s):"]]}, "_move_to_private_code_plane": {"? -> str": [[148, "def _move_to_private_code_plane(matchobj):"]]}, "clean_hanging_newline": {"str -> str / ? -> None": [[119, "def clean_hanging_newline(t):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.hexdum": {"var": {"part_repr": {"None": [[141, "        part_repr = always_str(escape_control_characters("]]}, "part": {"?": [[138, "        part = s[i:i + 16]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.strutils.hexdump": {"var": {"i": {"int": [[136, "    for i in range(0, len(s), 16):"]]}, "x": {"str": [[139, "        x = \" \".join(\"{:0=2x}\".format(i) for i in part)"], [140, "        x = x.ljust(47)  # 16*2 + 15"]]}, "offset": {"str": [[137, "        offset = \"{:0=10x}\".format(i)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/message.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message": {"func": {"toks": {"(Message, ?) -> [?]": [[34, "    def toks(self, klass):"]]}, "log": {"(Message, ?) -> dict": [[77, "    def log(self, settings):"]]}, "__init__": {"? -> ?": [[16, "    def __init__(self, tokens):"]]}, "tok": {"(Message, ?) -> None": [[40, "    def tok(self, klass):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.__init__": {"var": {"track": {"?": [[17, "        track = set([])"]]}, "i": {"?": [[18, "        for i in tokens:"]]}}, "param": {"tokens": {"?": [[16, "    def __init__(self, tokens):"]]}, "self": {"Message": [[16, "    def __init__(self, tokens):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Messa": {"func": {"length": {"(Message, ?) -> int": [[48, "    def length(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.log": {"var": {"i": {"?": [[82, "        for i in self.logattrs:"]]}, "ret": {"dict": [[81, "        ret = {}"]]}, "v": {"[?]": [[87, "                v = [x[:LOG_TRUNCATE] for x in v.values(settings)]"]], "str": [[88, "                v = strutils.bytes_to_escaped_str(b\"\".join(v))"], [91, "                v = strutils.bytes_to_escaped_str(v)"]], "?": [[83, "            v = getattr(self, i)"], [90, "                v = v[:LOG_TRUNCATE]"]]}}, "param": {"self": {"Message": [[77, "    def log(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.preview_sa": {"param": {"self": {"Message": [[55, "    def preview_safe(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.strike_tok": {"param": {"name": {"?": [[30, "    def strike_token(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage.expr": {"var": {"e": {"?": [[126, "        e = pp.Literal(cls.preamble).suppress()"], [127, "        e = e + base.TokValueLiteral.expr()"]]}}, "param": {"cls": {"<NestedMessage>": [[125, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage.__init__": {"param": {"self": {"NestedMessage": [[111, "    def __init__(self, value):"]]}, "value": {"?": [[111, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Messag": {"var": {"__metaclass__": {"?": [[13, "    __metaclass__ = abc.ABCMeta"]]}}, "func": {"strike_token": {"(Message, ?) -> None": [[30, "    def strike_token(self, name):"]]}, "preview_safe": {"Message -> None": [[55, "    def preview_safe(self):"]]}, "freeze": {"(Message, ?) -> None": [[96, "    def freeze(self, settings):"]]}, "__repr__": {"Message -> ?": [[100, "    def __repr__(self):"]]}, "expr": {"<Message> -> None": [[74, "    def expr(cls):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Mess": {"func": {"maximum_length": {"(Message, ?) -> int": [[62, "    def maximum_length(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.tok": {"var": {"l": {"[?]": [[44, "        l = self.toks(klass)"]]}}, "param": {"self": {"Message": [[34, "    def toks(self, klass):"], [40, "    def tok(self, klass):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.m": {"class": {"Message": {"<Message>": [[12, "class Message:"]]}, "NestedMessage": {"<NestedMessage>": [[104, "class NestedMessage(base.Token):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message": {"var": {"LOG_TRUNCATE": {"int": [[9, "LOG_TRUNCATE = 1024"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage.freeze": {"var": {"f": {"?": [[139, "        f = self.parsed.freeze(settings).spec()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage.spec": {"param": {"self": {"NestedMessage": [[135, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.preview_saf": {"var": {"tokens": {"[?]": [[59, "        tokens = [i for i in self.tokens if not isinstance(i, actions.PauseAt)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.length": {"param": {"self": {"Message": [[48, "    def length(self, settings):"]]}, "settings": {"?": [[48, "    def length(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.strike_token": {"var": {"toks": {"[?]": [[31, "        toks = [i for i in self.tokens if i.unique_name != name]"]]}}, "param": {"self": {"Message": [[30, "    def strike_token(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.freeze": {"var": {"r": {"?": [[97, "        r = self.resolve(settings)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage.freez": {"param": {"self": {"NestedMessage": [[138, "    def freeze(self, settings):"]]}, "settings": {"?": [[138, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage": {"func": {"__init__": {"? -> ?": [[111, "    def __init__(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessag": {"var": {"preamble": {"str": [[108, "    preamble = \"\""]]}}, "func": {"expr": {"<NestedMessage> -> None": [[125, "    def expr(cls):"]]}, "values": {"(NestedMessage, ?) -> [?]": [[130, "    def values(self, settings):"]]}, "spec": {"NestedMessage -> ?": [[135, "    def spec(self):"]]}, "freeze": {"(NestedMessage, ?) -> None": [[138, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.to": {"param": {"klass": {"?": [[34, "    def toks(self, klass):"], [40, "    def tok(self, klass):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.expr": {"param": {"cls": {"<Message>": [[74, "    def expr(cls):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.__repr__": {"param": {"self": {"Message": [[100, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.NestedMessage.valu": {"param": {"self": {"NestedMessage": [[130, "    def values(self, settings):"]]}, "settings": {"?": [[130, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.freez": {"param": {"self": {"Message": [[96, "    def freeze(self, settings):"]]}, "settings": {"?": [[96, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.maximum_length": {"var": {"i": {"?": [[68, "        for i in self.actions:"]]}, "l": {"int": [[67, "        l = self.length(settings)"]]}}, "param": {"self": {"Message": [[62, "    def maximum_length(self, settings):"]]}, "settings": {"?": [[62, "    def maximum_length(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.message.Message.lo": {"param": {"settings": {"?": [[77, "    def log(self, settings):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/palettes.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.gen_gradien": {"param": {"palette": {"dict": [[82, "def gen_gradient(palette, cols):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.gen_rgb_gradien": {"var": {"parts": {"int": [[88, "    parts = len(cols) - 1"]]}, "t": {"(int, int, int)": [[95, "        t = ("]]}, "t0": {"list": [[92, "        t0 = cols[idx]"]]}, "t1": {"list": [[93, "        t1 = cols[idx + 1]"]]}}, "param": {"palette": {"dict": [[87, "def gen_rgb_gradient(palette, cols):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.p": {"var": {"sol_magenta": {"str": [[336, "sol_magenta = \"h125\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.conso": {"var": {"palettes": {"dict": [[511, "palettes = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.P": {"func": {"palette": {"(Palette, ?) -> [{[str] | tuple}]": [[52, "    def palette(self, transparent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.Palette.palette": {"var": {"i": {"str": [[60, "        for i in self._fields:"]]}, "lowback": {"?": [[58, "            lowback = self.low[\"background\"][1]"]]}, "l": {"[{[str] | tuple}]": [[53, "        l = []"]]}, "high": {"[None]": [[76, "                    high = [None, low[0], highback]"]], "list": [[71, "                    high = list(self.high[i])"]]}, "low": {"list": [[65, "                low = list(self.low[i])"]]}, "v": {"[str]": [[64, "                v = [i]"]]}, "highback": {"None": [[54, "        highback, lowback = None, None"]], "?": [[57, "                highback = self.high[\"background\"][1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.LowLight": {"var": {"low": {"dict": [[217, "    low = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palett": {"var": {"sol_blue": {"str": [[338, "sol_blue = \"h33\""]]}, "sol_yellow": {"str": [[333, "sol_yellow = \"h136\""]]}, "sol_red": {"str": [[335, "sol_red = \"h160\""]]}, "sol_green": {"str": [[340, "sol_green = \"h64\""]]}, "sol_base00": {"str": [[328, "sol_base00 = \"h241\""]]}, "sol_base01": {"str": [[327, "sol_base01 = \"h240\""]]}, "sol_base02": {"str": [[326, "sol_base02 = \"h235\""]]}, "sol_base03": {"str": [[325, "sol_base03 = \"h234\""]]}, "sol_orange": {"str": [[334, "sol_orange = \"h166\""]]}, "sol_base3": {"str": [[332, "sol_base3 = \"h230\""]]}, "sol_base2": {"str": [[331, "sol_base2 = \"h254\""]]}, "sol_base1": {"str": [[330, "sol_base1 = \"h245\""]]}, "sol_base0": {"str": [[329, "sol_base0 = \"h244\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.SolarizedDark": {"var": {"high": {"dict": [[428, "    high = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.pa": {"var": {"sol_violet": {"str": [[337, "sol_violet = \"h61\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palette": {"var": {"sol_cyan": {"str": [[339, "sol_cyan = \"h37\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes": {"var": {"DEFAULT": {"str": [[510, "DEFAULT = \"dark\""]]}}, "class": {"SolarizedDark": {"<SolarizedDark>": [[427, "class SolarizedDark(LowDark):"]]}, "Palette": {"<Palette>": [[9, "class Palette:"]]}, "Light": {"<Light>": [[309, "class Light(LowLight):"]]}, "LowDark": {"<LowDark>": [[103, "class LowDark(Palette):"]]}, "Dark": {"<Dark>": [[201, "class Dark(LowDark):"]]}, "LowLight": {"<LowLight>": [[212, "class LowLight(Palette):"]]}, "SolarizedLight": {"<SolarizedLight>": [[343, "class SolarizedLight(LowLight):"]]}}, "func": {"gen_gradient": {"(dict, [str]) -> None": [[82, "def gen_gradient(palette, cols):"]]}, "gen_rgb_gradient": {"(dict, [(int, int, int)]) -> None": [[87, "def gen_rgb_gradient(palette, cols):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.Palett": {"var": {"_fields": {"[str]": [[10, "    _fields = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.Palette.pal": {"param": {"transparent": {"?": [[52, "    def palette(self, transparent):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.Light": {"var": {"high": {"dict": [[310, "    high = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.Dark": {"var": {"high": {"dict": [[202, "    high = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.LowDark": {"var": {"low": {"dict": [[108, "    low = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.SolarizedLight": {"var": {"high": {"dict": [[344, "    high = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.gen_gradient": {"var": {"i": {"int": [[83, "    for i in range(100):"]]}}, "param": {"cols": {"[str]": [[82, "def gen_gradient(palette, cols):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.gen_rgb_gradient": {"var": {"i": {"int": [[89, "    for i in range(100):"]]}, "p": {"int": [[90, "        p = i / 100"]]}, "pp": {"int": [[94, "        pp = p * parts % 1"]]}, "idx": {"int": [[91, "        idx = int(p * parts)"]]}}, "param": {"cols": {"[(int, int, int)]": [[87, "def gen_rgb_gradient(palette, cols):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.palettes.Palette.palett": {"param": {"self": {"Palette": [[52, "    def palette(self, transparent):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_writer.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.languag": {"func": {"test_write_values_disconnects": {"() -> None": [[35, "def test_write_values_disconnects():"]]}, "test_write_values": {"() -> None": [[42, "def test_write_values():"]]}, "test_write_values_after": {"() -> None": [[78, "def test_write_values_after():"]]}, "test_write_values_pauses": {"() -> None": [[57, "def test_write_values_pauses():"]]}, "test_write_values_inject": {"() -> None": [[19, "def test_write_values_inject():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_disconnect": {"var": {"s": {"?": [[36, "    s = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_pause": {"var": {"tst": {"?": [[71, "    tst = [tst] * 5"]], "str": [[58, "    tst = \"\".join(str(i) for i in range(10)).encode()"]]}, "s": {"?": [[60, "        s = io.BytesIO()"], [67, "        s = io.BytesIO()"], [73, "        s = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_value": {"var": {"tst": {"str": [[43, "    tst = b\"foobarvoing\""]]}, "s": {"?": [[44, "    s = io.BytesIO()"], [50, "            s = io.BytesIO()"]]}, "bs": {"int": [[48, "    for bs in range(1, len(tst) + 2):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_afte": {"var": {"r": {"?": [[80, "    r = next(language.parse_pathod(\"400:da\"))"], [84, "    r = next(language.parse_pathod(\"400:pa,0\"))"], [88, "    r = next(language.parse_pathod(\"400:ia,'xx'\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_after": {"var": {"s": {"?": [[79, "    s = io.BytesIO()"], [83, "    s = io.BytesIO()"], [87, "    s = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_injec": {"var": {"tst": {"str": [[20, "    tst = b\"foo\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_disconnec": {"var": {"tst": {"?": [[37, "    tst = b\"foo\" * 100"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_send_chunk": {"var": {"start": {"int": [[12, "        for start in range(len(v)):"]]}, "s": {"?": [[9, "        s = io.BytesIO()"], [14, "                s = io.BytesIO()"]]}, "bs": {"int": [[8, "    for bs in range(1, len(v) + 2):"]]}, "end": {"int": [[13, "            for end in range(len(v)):"]]}, "v": {"str": [[7, "    v = b\"foobarfoobar\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer": {"func": {"test_send_chunk": {"() -> None": [[6, "def test_send_chunk():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_inject": {"var": {"s": {"?": [[22, "    s = io.BytesIO()"], [26, "    s = io.BytesIO()"], [30, "    s = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values_pauses": {"var": {"i": {"int": [[59, "    for i in range(2, 10):"], [66, "    for i in range(2, 10):"], [72, "    for i in range(2, 10):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_writer.test_write_values": {"var": {"off": {"int": [[49, "        for off in range(len(tst)):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/protocols/http2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._handle_unexpected_frame": {"param": {"frm": {"None": [[278, "    def _handle_unexpected_frame(self, frm):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.__ini": {"param": {"pathod_handler": {"?": [[407, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.__init__": {"var": {"self": {"HTTP2StateProtocol": [[54, "        self,"]]}, "decoder": {"None": [[61, "        decoder=None,"]]}, "wfile": {"None": [[57, "        wfile=None,"]]}, "rfile": {"None": [[56, "        rfile=None,"]]}, "encoder": {"None": [[60, "        encoder=None,"]]}}, "param": {"self": {"HTTP2StateProtocol": [[63, "    ):"]]}, "decoder": {"None": [[63, "    ):"]]}, "wfile": {"None": [[63, "    ):"]]}, "rfile": {"None": [[63, "    ):"]]}, "encoder": {"None": [[63, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http": {"class": {"HTTP2Protocol": {"<HTTP2Protocol>": [[405, "class HTTP2Protocol:"]]}, "HTTP2StateProtocol": {"<HTTP2StateProtocol>": [[23, "class HTTP2StateProtocol:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol": {"func": {"read_request": {"(HTTP2Protocol, None) -> Request": [[416, "    def read_request(self, lg=None):"]]}, "make_error_response": {"(HTTP2Protocol, ?, ?) -> ?": [[413, "    def make_error_response(self, reason, body):"]]}, "__init__": {"? -> ?": [[407, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.send_frame": {"param": {"frm": {"?": [[247, "    def send_frame(self, frm, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.__init": {"var": {"dump_frames": {"bool": [[59, "        dump_frames=False,"]]}, "unhandled_frame_cb": {"None": [[62, "        unhandled_frame_cb=None,"]]}, "is_server": {"bool": [[58, "        is_server=False,"]]}}, "param": {"dump_frames": {"bool": [[63, "    ):"]]}, "unhandled_frame_cb": {"None": [[63, "    ):"]]}, "is_server": {"bool": [[63, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_fram": {"var": {"raw_bytes": {"?": [[261, "                raw_bytes = hyperframe.frame.PingFrame(flags=['ACK'], payload=frm.payload).serialize()"]]}}, "param": {"self": {"HTTP2StateProtocol": [[254, "    def read_frame(self, hide=False):"]]}, "hide": {"bool": [[254, "    def read_frame(self, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.__init__": {"param": {"self": {"HTTP2Protocol": [[407, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assemb": {"param": {"self": {"HTTP2StateProtocol": [[165, "    def assemble(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtoc": {"func": {"assemble_response": {"(HTTP2StateProtocol, ?) -> list / (HTTP2StateProtocol, Response) -> list": [[197, "    def assemble_response(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol": {"var": {"ERROR_CODES": {"BiDi": [[25, "    ERROR_CODES = bidi.BiDi("]]}, "CLIENT_CONNECTION_PREFACE": {"str": [[42, "    CLIENT_CONNECTION_PREFACE = b'PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n'"]]}, "HTTP2_DEFAULT_SETTINGS": {"dict": [[44, "    HTTP2_DEFAULT_SETTINGS = {"]]}}, "func": {"perform_connection_preface": {"(HTTP2StateProtocol, bool) -> None": [[215, "    def perform_connection_preface(self, force=False):"]]}, "send_frame": {"(HTTP2StateProtocol, ?, bool) -> None": [[247, "    def send_frame(self, frm, hide=False):"]]}, "_create_headers": {"(HTTP2StateProtocol, ?, ?, bool) -> [?] / (HTTP2StateProtocol, ?, int, bool) -> [?] / (HTTP2StateProtocol, Headers, int, bool) -> [?]": [[320, "    def _create_headers(self, headers, stream_id, end_stream=True):"]]}, "_next_stream_id": {"HTTP2StateProtocol -> int": [[292, "    def _next_stream_id(self):"]]}, "_receive_settings": {"(HTTP2StateProtocol, bool) -> None": [[284, "    def _receive_settings(self, hide=False):"]]}, "_create_body": {"(HTTP2StateProtocol, ?, ?) -> {[?] | str} / (HTTP2StateProtocol, ?, int) -> {[?] | str} / (HTTP2StateProtocol, str, int) -> {[?] | str}": [[347, "    def _create_body(self, body, stream_id):"]]}, "read_frame": {"(HTTP2StateProtocol, bool) -> None": [[254, "    def read_frame(self, hide=False):"]]}, "perform_server_connection_preface": {"(HTTP2StateProtocol, bool) -> None": [[222, "    def perform_server_connection_preface(self, force=False):"]]}, "read_response": {"(HTTP2StateProtocol, ?, str, None, bool, None) -> Response / (HTTP2StateProtocol, <NotImplemented>, str, None, bool, None) -> Response": [[121, "    def read_response("]]}, "_receive_transmission": {"(HTTP2StateProtocol, None, bool) -> (None, Headers, str)": [[365, "    def _receive_transmission(self, stream_id=None, include_body=True):"]]}, "__init__": {"? -> ?": [[53, "    def __init__("]]}, "read_request": {"(HTTP2StateProtocol, ?, bool, None, bool) -> Request / (HTTP2StateProtocol, <NotImplemented>, bool, None, bool) -> Request": [[75, "    def read_request("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_respo": {"var": {"timestamp_end": {"int": [[148, "            timestamp_end = time.time()"]], "None": [[150, "            timestamp_end = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assemble_respon": {"var": {"headers": {"?": [[200, "        headers = response.headers.copy()"]]}, "stream_id": {"int": [[208, "            stream_id = self._next_stream_id()"]], "?": [[206, "            stream_id = response.stream_id"]]}}, "param": {"self": {"HTTP2StateProtocol": [[197, "    def assemble_response(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_connection_prefa": {"param": {"force": {"bool": [[215, "    def perform_connection_preface(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2": {"class": {"TCPHandler": {"<TCPHandler>": [[16, "class TCPHandler:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_client_connection_prefa": {"param": {"force": {"bool": [[237, "    def perform_client_connection_preface(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_respon": {"var": {"timestamp_start": {"int": [[134, "        timestamp_start = time.time()"]], "?": [[145, "            timestamp_start = self.tcp_handler.rfile.first_byte_timestamp"]]}, "stream_id": {"None": [[127, "        stream_id=None,"], [138, "        stream_id, headers, body = self._receive_transmission("]]}, "self": {"HTTP2StateProtocol": [[122, "        self,"]]}, "request_method": {"str": [[124, "        request_method=b'',"]]}, "body_size_limit": {"None": [[125, "        body_size_limit=None,"]]}}, "param": {"stream_id": {"None": [[128, "    ):"]]}, "self": {"HTTP2StateProtocol": [[128, "    ):"]]}, "request_method": {"str": [[128, "    ):"]]}, "body_size_limit": {"None": [[128, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assemble_": {"param": {"request": {"Request": [[173, "    def assemble_request(self, request):"]]}, "response": {"Response": [[197, "    def assemble_response(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_headers": {"var": {"header_block_fragment": {"?": [[328, "        header_block_fragment = self.encoder.encode(headers.fields)"]]}, "frm": {"?": [[342, "            for frm in frms:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.check_alpn": {"var": {"alp": {"?": [[272, "        alp = self.tcp_handler.get_alpn_proto_negotiated()"]]}}, "param": {"self": {"HTTP2StateProtocol": [[271, "    def check_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_respons": {"var": {"__rfile": {"<NotImplemented>": [[123, "        __rfile,"]]}, "include_body": {"bool": [[126, "        include_body=True,"]]}}, "param": {"__rfile": {"<NotImplemented>": [[128, "    ):"]]}, "include_body": {"bool": [[128, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtoco": {"func": {"assemble": {"(HTTP2StateProtocol, ?) -> list": [[165, "    def assemble(self, message):"]]}, "_apply_settings": {"(HTTP2StateProtocol, dict, bool) -> None / (HTTP2StateProtocol, ?, bool) -> None": [[304, "    def _apply_settings(self, settings, hide=False):"]]}, "check_alpn": {"HTTP2StateProtocol -> bool": [[271, "    def check_alpn(self):"]]}, "assemble_request": {"(HTTP2StateProtocol, ?) -> list / (HTTP2StateProtocol, Request) -> list": [[173, "    def assemble_request(self, request):"]]}, "_handle_unexpected_frame": {"(HTTP2StateProtocol, ?) -> None / (HTTP2StateProtocol, None) -> None": [[278, "    def _handle_unexpected_frame(self, frm):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protoco": {"func": {"assemble": {"(HTTP2Protocol, ?) -> list": [[420, "    def assemble(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._handle_unexpected_fram": {"param": {"self": {"HTTP2StateProtocol": [[278, "    def _handle_unexpected_frame(self, frm):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_body": {"var": {"chunks": {"[int]": [[352, "        chunks = range(0, len(body), chunk_size)"]]}, "frms": {"[?]": [[353, "        frms = [hyperframe.frame.DataFrame("]]}, "frm": {"?": [[360, "            for frm in frms:"]]}, "chunk_size": {"?": [[351, "        chunk_size = self.http2_settings[hyperframe.frame.SettingsFrame.MAX_FRAME_SIZE]"]]}}, "param": {"stream_id": {"int": [[347, "    def _create_body(self, body, stream_id):"]]}, "self": {"HTTP2StateProtocol": [[347, "    def _create_body(self, body, stream_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.__ini": {"var": {"tcp_handler": {"{TCPClient | TCPHandler}": [[55, "        tcp_handler=None,"]]}}, "param": {"tcp_handler": {"{TCPClient | TCPHandler}": [[63, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.make_error_response": {"param": {"body": {"?": [[413, "    def make_error_response(self, reason, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_header": {"var": {"chunks": {"[int]": [[331, "        chunks = range(0, len(header_block_fragment), chunk_size)"]]}, "chunk_size": {"?": [[330, "        chunk_size = self.http2_settings[hyperframe.frame.SettingsFrame.MAX_FRAME_SIZE]"]]}}, "param": {"self": {"HTTP2StateProtocol": [[320, "    def _create_headers(self, headers, stream_id, end_stream=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_client_connection_prefac": {"param": {"self": {"HTTP2StateProtocol": [[237, "    def perform_client_connection_preface(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_frame": {"var": {"frm": {"None": [[256, "            frm = http2.parse_frame(*http2.read_raw_frame(self.tcp_handler.rfile))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_headers.frame_cls": {"var": {"i": {"int": [[322, "            for i in chunks:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._apply_settings": {"var": {"old_value": {"str": [[308, "                old_value = '-'"]], "?": [[306, "            old_value = self.http2_settings[setting]"]]}, "frm": {"?": [[311, "        frm = hyperframe.frame.SettingsFrame(flags=['ACK'])"]]}}, "param": {"hide": {"bool": [[304, "    def _apply_settings(self, settings, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.make_error_respon": {"param": {"self": {"HTTP2Protocol": [[413, "    def make_error_response(self, reason, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateP": {"func": {"perform_client_connection_preface": {"(HTTP2StateProtocol, bool) -> None": [[237, "    def perform_client_connection_preface(self, force=False):"]]}, "_update_flow_control_window": {"(HTTP2StateProtocol, ?, ?) -> None": [[314, "    def _update_flow_control_window(self, stream_id, increment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._receive_transmiss": {"param": {"include_body": {"bool": [[365, "    def _receive_transmission(self, stream_id=None, include_body=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.assemb": {"param": {"self": {"HTTP2Protocol": [[420, "    def assemble(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assemble_requ": {"var": {"stream_id": {"int": [[191, "            stream_id = self._next_stream_id()"]], "?": [[189, "            stream_id = request.stream_id"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_h": {"param": {"end_stream": {"bool": [[320, "    def _create_headers(self, headers, stream_id, end_stream=True):"]]}, "stream_id": {"int": [[320, "    def _create_headers(self, headers, stream_id, end_stream=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.send_fram": {"var": {"raw_bytes": {"?": [[248, "        raw_bytes = frm.serialize()"]]}}, "param": {"self": {"HTTP2StateProtocol": [[247, "    def send_frame(self, frm, hide=False):"]]}, "hide": {"bool": [[247, "    def send_frame(self, frm, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_server_connection_pref": {"var": {"magic_length": {"int": [[226, "            magic_length = len(self.CLIENT_CONNECTION_PREFACE)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_server_connection_preface": {"var": {"magic": {"?": [[227, "            magic = self.tcp_handler.rfile.safe_read(magic_length)"]]}, "frm": {"?": [[230, "            frm = hyperframe.frame.SettingsFrame(settings={"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_connection_prefac": {"param": {"self": {"HTTP2StateProtocol": [[215, "    def perform_connection_preface(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.make_error_resp": {"param": {"reason": {"?": [[413, "    def make_error_response(self, reason, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assemble_request": {"var": {"headers": {"?": [[180, "        headers = request.headers.copy()"]]}}, "param": {"self": {"HTTP2StateProtocol": [[173, "    def assemble_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._update_flow_control_window": {"var": {"frm": {"?": [[315, "        frm = hyperframe.frame.WindowUpdateFrame(stream_id=0, window_increment=increment)"], [317, "        frm = hyperframe.frame.WindowUpdateFrame(stream_id=stream_id, window_increment=increment)"]]}}, "param": {"stream_id": {"?": [[314, "    def _update_flow_control_window(self, stream_id, increment):"]]}, "self": {"HTTP2StateProtocol": [[314, "    def _update_flow_control_window(self, stream_id, increment):"]]}, "increment": {"?": [[314, "    def _update_flow_control_window(self, stream_id, increment):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._receive_setting": {"param": {"self": {"HTTP2StateProtocol": [[284, "    def _receive_settings(self, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_server_connection_prefac": {"param": {"self": {"HTTP2StateProtocol": [[222, "    def perform_server_connection_preface(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._receive_settings": {"var": {"frm": {"None": [[286, "            frm = self.read_frame(hide)"]]}}, "param": {"hide": {"bool": [[284, "    def _receive_settings(self, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._apply_": {"var": {"setting": {"?": [[305, "        for setting, value in settings.items():"]]}}, "param": {"settings": {"dict": [[304, "    def _apply_settings(self, settings, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_": {"var": {"request": {"Request": [[103, "        request = mitmproxy.net.http.request.Request("]]}, "response": {"Response": [[152, "        response = mitmproxy.net.http.response.Response("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._apply_setting": {"param": {"self": {"HTTP2StateProtocol": [[304, "    def _apply_settings(self, settings, hide=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.assembl": {"param": {"message": {"?": [[420, "    def assemble(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assemble_reques": {"var": {"authority": {"?": [[176, "        authority = self.tcp_handler.sni if self.tcp_handler.sni else self.tcp_handler.address[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_": {"param": {"body": {"str": [[347, "    def _create_body(self, body, stream_id):"]]}, "headers": {"Headers": [[320, "    def _create_headers(self, headers, stream_id, end_stream=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._receive_transmission": {"var": {"body": {"str": [[372, "        body = b''"]]}, "headers": {"Headers": [[398, "        headers = mitmproxy.net.http.headers.Headers("]]}, "body_expected": {"bool": [[369, "        body_expected = True"], [383, "                    body_expected = False"]]}, "frm": {"None": [[375, "            frm = self.read_frame()"], [390, "            frm = self.read_frame()"]]}, "stream_id": {"?": [[380, "                stream_id = frm.stream_id"]]}, "header_blocks": {"str": [[371, "        header_blocks = b''"]]}}, "param": {"stream_id": {"None": [[365, "    def _receive_transmission(self, stream_id=None, include_body=True):"]]}, "self": {"HTTP2StateProtocol": [[365, "    def _receive_transmission(self, stream_id=None, include_body=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_headers.frame_cl": {"param": {"chunks": {"[int]": [[321, "        def frame_cls(chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.perform_server_connection_prefa": {"param": {"force": {"bool": [[222, "    def perform_server_connection_preface(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_request": {"var": {"__rfile": {"<NotImplemented>": [[77, "        __rfile,"]]}, "self": {"HTTP2StateProtocol": [[76, "        self,"]]}, "include_body": {"bool": [[78, "        include_body=True,"]]}}, "param": {"__rfile": {"<NotImplemented>": [[81, "    ):"]]}, "self": {"HTTP2StateProtocol": [[81, "    ):"]]}, "include_body": {"bool": [[81, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.assembl": {"param": {"message": {"?": [[165, "    def assemble(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._next_stream_id": {"param": {"self": {"HTTP2StateProtocol": [[292, "    def _next_stream_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.TCPHandler": {"func": {"__init__": {"? -> ?": [[18, "    def __init__(self, rfile, wfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.TCPHandler.__init__": {"param": {"self": {"TCPHandler": [[18, "    def __init__(self, rfile, wfile=None):"]]}, "wfile": {"None": [[18, "    def __init__(self, rfile, wfile=None):"]]}, "rfile": {"None": [[18, "    def __init__(self, rfile, wfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_reques": {"var": {"allow_empty": {"bool": [[80, "        allow_empty=False,"]]}}, "param": {"allow_empty": {"bool": [[81, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_heade": {"var": {"frms": {"[?]": [[332, "        frms = [frm_cls("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol._create_head": {"func": {"frame_cls": {"[int] -> None": [[321, "        def frame_cls(chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2Protocol.read_request": {"param": {"lg": {"None": [[416, "    def read_request(self, lg=None):"]]}, "self": {"HTTP2Protocol": [[416, "    def read_request(self, lg=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.http2.HTTP2StateProtocol.read_requ": {"var": {"timestamp_end": {"int": [[99, "        timestamp_end = time.time()"]]}, "stream_id": {"None": [[91, "        stream_id, headers, body = self._receive_transmission("]]}, "timestamp_start": {"int": [[87, "        timestamp_start = time.time()"]], "?": [[97, "            timestamp_start = self.tcp_handler.rfile.first_byte_timestamp"]]}, "body_size_limit": {"None": [[79, "        body_size_limit=None,"]]}, "first_line_format": {"str": [[101, "        first_line_format, method, scheme, host, port, path = http2.parse_headers(headers)"]]}}, "param": {"body_size_limit": {"None": [[81, "    ):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/mitmproxywrapper.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.proxy_state_for_servic": {"var": {"state": {"?": [[28, "        state = self.run_networksetup_command("]]}}, "param": {"self": {"Wrapper": [[27, "    def proxy_state_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.__ini": {"param": {"extra_arguments": {"None": [[19, "    def __init__(self, port, extra_arguments=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.connected": {"var": {"service_names": {"[?]": [[88, "        service_names = []"]]}, "service_name": {"?": [[95, "            service_name, = re.findall(r'UserDefinedName\\s*:\\s*(.+)', stdout)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.connected_service_name": {"var": {"scutil_script": {"str": [[84, "        scutil_script = 'list\\n'"], [90, "            scutil_script = 'show Setup:/Network/Service/{}\\n'.format("]]}, "stdout": {"None": [[85, "        stdout = self.run_command_with_input('/usr/sbin/scutil', scutil_script)"], [92, "            stdout = self.run_command_with_input("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.interface_name_to_service_name_": {"var": {"mapping": {"?": [[47, "        mapping = re.findall("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.disable_proxy_for_": {"param": {"service": {"?": [[40, "    def disable_proxy_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.connected_service_nam": {"var": {"service_ids": {"?": [[86, "        service_ids = re.findall(r'State:/Network/Service/(.+)/IPv4', stdout)"]]}, "service_id": {"?": [[89, "        for service_id in service_ids:"]]}}, "param": {"self": {"Wrapper": [[83, "    def connected_service_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrappe": {"func": {"wrap_mitmproxy": {"Wrapper -> None": [[100, "    def wrap_mitmproxy(self):"]]}, "wrap_proxy": {"Wrapper -> None": [[116, "    def wrap_proxy(self):"]]}, "run_command_with_input": {"(Wrapper, str, str) -> None": [[53, "    def run_command_with_input(self, command, input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.wrap_proxy": {"var": {"service_name": {"?": [[118, "        for service_name in connected_service_names:"], [124, "        for service_name in connected_service_names:"]]}, "connected_service_names": {"[?]": [[117, "        connected_service_names = self.connected_service_names()"]]}}, "param": {"self": {"Wrapper": [[116, "    def wrap_proxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.run_command_with_": {"param": {"input": {"str": [[53, "    def run_command_with_input(self, command, input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.proxy_enabled_for_": {"param": {"service": {"?": [[71, "    def proxy_enabled_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.mai": {"param": {"extra_arguments": {"?": [[153, "        wrapper = cls(port=args.port, extra_arguments=extra_arguments)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.__init__": {"param": {"self": {"Wrapper": [[19, "    def __init__(self, port, extra_arguments=None):"]]}, "port": {"?": [[19, "    def __init__(self, port, extra_arguments=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.disable_proxy_for_servic": {"param": {"self": {"Wrapper": [[40, "    def disable_proxy_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.primary_interace_nam": {"var": {"interface": {"?": [[64, "        interface, = re.findall(r'PrimaryInterface\\s*:\\s*(.+)', stdout)"]]}}, "param": {"self": {"Wrapper": [[61, "    def primary_interace_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.toggle_proxy": {"var": {"service_name": {"?": [[77, "        for service_name in self.connected_service_names():"]]}, "new_state": {"bool": [[75, "        new_state = not self.proxy_enabled_for_service("]]}}, "param": {"self": {"Wrapper": [[74, "    def toggle_proxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper": {"func": {"main": {"<Wrapper> -> None": [[135, "    def main(cls):"]]}, "__init__": {"? -> ?": [[19, "    def __init__(self, port, extra_arguments=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.interface_name_to_service_name_map": {"var": {"order": {"?": [[46, "        order = self.run_networksetup_command('-listnetworkserviceorder')"]]}}, "param": {"self": {"Wrapper": [[45, "    def interface_name_to_service_name_map(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.wrap_honeyproxy": {"var": {"popen": {"?": [[109, "            popen = subprocess.Popen('honeyproxy.sh')"]]}}, "param": {"self": {"Wrapper": [[107, "    def wrap_honeyproxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.main": {"var": {"parser": {"?": [[136, "        parser = argparse.ArgumentParser("]]}, "wrapper": {"Wrapper": [[153, "        wrapper = cls(port=args.port, extra_arguments=extra_arguments)"]]}, "args": {"?": [[151, "        args, extra_arguments = parser.parse_known_args()"]]}}, "param": {"wrapper": {"?": [[153, "        wrapper = cls(port=args.port, extra_arguments=extra_arguments)"]]}, "cls": {"<Wrapper>": [[135, "    def main(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.enable_proxy_for_": {"param": {"service": {"?": [[33, "    def enable_proxy_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.wrap_mitmproxy": {"var": {"cmd": {"[str]": [[102, "            cmd = ['mitmproxy', '-p', str(self.port)]"]]}}, "param": {"self": {"Wrapper": [[100, "    def wrap_mitmproxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.run_command_with_input": {"var": {"popen": {"?": [[54, "        popen = subprocess.Popen("]]}}, "param": {"self": {"Wrapper": [[53, "    def run_command_with_input(self, command, input):"]]}, "command": {"str": [[53, "    def run_command_with_input(self, command, input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.proxy_enabled_for_servic": {"param": {"self": {"Wrapper": [[71, "    def proxy_enabled_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.enable_proxy_for_service": {"var": {"subcommand": {"str": [[35, "        for subcommand in ['-setwebproxy', '-setsecurewebproxy']:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.primary_interace_name": {"var": {"scutil_script": {"str": [[62, "        scutil_script = 'get State:/Network/Global/IPv4\\nd.show\\n'"]]}, "stdout": {"None": [[63, "        stdout = self.run_command_with_input('/usr/sbin/scutil', scutil_script)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.primary_service_nam": {"param": {"self": {"Wrapper": [[67, "    def primary_service_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.proxy_state_for_": {"param": {"service": {"?": [[27, "    def proxy_state_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxyw": {"class": {"Wrapper": {"<Wrapper>": [[18, "class Wrapper:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wra": {"func": {"toggle_proxy": {"Wrapper -> None": [[74, "    def toggle_proxy(self):"]]}, "ensure_superuser": {"<Wrapper> -> None": [[129, "    def ensure_superuser(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.enable_proxy_for_servic": {"param": {"self": {"Wrapper": [[33, "    def enable_proxy_for_service(self, service):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapp": {"func": {"connected_service_names": {"Wrapper -> [?]": [[83, "    def connected_service_names(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.ensure_superuser": {"param": {"cls": {"<Wrapper>": [[129, "    def ensure_superuser(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.W": {"func": {"enable_proxy_for_service": {"(Wrapper, ?) -> None": [[33, "    def enable_proxy_for_service(self, service):"]]}, "primary_interace_name": {"Wrapper -> None": [[61, "    def primary_interace_name(self):"]]}, "run_networksetup_command": {"Wrapper -> ?": [[23, "    def run_networksetup_command(self, *arguments):"]]}, "proxy_state_for_service": {"(Wrapper, ?) -> dict": [[27, "    def proxy_state_for_service(self, service):"]]}, "interface_name_to_service_name_map": {"Wrapper -> dict": [[45, "    def interface_name_to_service_name_map(self):"]]}, "disable_proxy_for_service": {"(Wrapper, ?) -> None": [[40, "    def disable_proxy_for_service(self, service):"]]}, "primary_service_name": {"Wrapper -> ?": [[67, "    def primary_service_name(self):"]]}, "proxy_enabled_for_service": {"(Wrapper, ?) -> bool": [[71, "    def proxy_enabled_for_service(self, service):"]]}, "wrap_honeyproxy": {"Wrapper -> ?": [[107, "    def wrap_honeyproxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.disable_proxy_for_service": {"var": {"subcommand": {"str": [[42, "        for subcommand in ['-setwebproxystate', '-setsecurewebproxystate']:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.mitmproxywrapper.Wrapper.run_networksetup_command": {"param": {"self": {"Wrapper": [[23, "    def run_networksetup_command(self, *arguments):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/web/static_viewer.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.StaticViewer.load": {"param": {"self": {"StaticViewer": [[89, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer": {"func": {"save_flows_content": {"(?, ?) -> None / (?, [?]) -> None": [[50, "def save_flows_content(path: pathlib.Path, flows: typing.Iterable[flow.Flow]) -> None:"]]}, "save_flows": {"(?, ?) -> None / (?, [?]) -> None": [[42, "def save_flows(path: pathlib.Path, flows: typing.Iterable[flow.Flow]) -> None:"]]}, "save_settings": {"? -> None": [[37, "def save_settings(path: pathlib.Path) -> None:"]]}, "save_static": {"? -> None": [[18, "def save_static(path: pathlib.Path) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.save_flows_conten": {"var": {"message_path": {"str": [[54, "            message_path = path / \"flows\" / f.id / m"]]}, "t": {"int": [[65, "            t = time.time()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.StaticViewer.configur": {"param": {"self": {"StaticViewer": [[95, "    def configure(self, updated):"]]}, "updated": {"?": [[95, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.StaticView": {"param": {"loader": {"?": [[89, "    def load(self, loader):"]]}}, "func": {"export": {"(StaticViewer, ?, ?) -> None / (StaticViewer, ?, [?]) -> None": [[101, "    def export(self, path: pathlib.Path, flows: typing.Iterable[flow.Flow]) -> None:"]]}, "configure": {"(StaticViewer, ?) -> None": [[95, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.save_flows_content": {"var": {"message": {"?": [[53, "            message = getattr(f, m)"]]}, "m": {"str": [[52, "        for m in ('request', 'response'):"]]}, "f": {"?": [[51, "    for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.StaticViewer": {"func": {"load": {"(StaticViewer, ?) -> None": [[89, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_view": {"func": {"save_filter_help": {"? -> None": [[32, "def save_filter_help(path: pathlib.Path) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_v": {"var": {"web_dir": {"?": [[15, "web_dir = pathlib.Path(__file__).absolute().parent"]]}}, "class": {"StaticViewer": {"<StaticViewer>": [[87, "class StaticViewer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.save_flows_": {"var": {"description": {"str": [[67, "                description, lines, error = contentviews.get_message_content_view("], [71, "                description, lines = 'No content.', []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.static_viewer.StaticViewer.configure": {"var": {"p": {"?": [[98, "            p = pathlib.Path(ctx.options.web_static_viewer).expanduser()"]]}, "flows": {"[?]": [[97, "            flows = io.read_flows_from_paths([ctx.options.rfile])"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/generators.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.TransformGenerator.__len__": {"param": {"self": {"TransformGenerator": [[35, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.FileGenerator": {"func": {"__getitem__": {"(FileGenerator, ?) -> str": [[83, "    def __getitem__(self, x):"]]}, "__len__": {"FileGenerator -> int": [[80, "    def __len__(self):"]]}, "__init__": {"? -> ?": [[77, "    def __init__(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.FileGenerator.__init__": {"param": {"path": {"str": [[77, "    def __init__(self, path):"]]}, "self": {"FileGenerator": [[77, "    def __init__(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.RandomGenerator.__repr__": {"param": {"self": {"RandomGenerator": [[72, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.FileGenerator.__getitem__": {"param": {"x": {"?": [[83, "    def __getitem__(self, x):"]]}, "self": {"FileGenerator": [[83, "    def __getitem__(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.FileGenerato": {"func": {"__repr__": {"FileGenerator -> str": [[92, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.RandomGenerato": {"func": {"__repr__": {"RandomGenerator -> ?": [[72, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.RandomGenerator.__getitem__": {"var": {"chars": {"?": [[67, "        chars = DATATYPES[self.dtype]"]]}}, "param": {"x": {"?": [[66, "    def __getitem__(self, x):"]]}, "self": {"RandomGenerator": [[66, "    def __getitem__(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.RandomGenerator.__init__": {"param": {"dtype": {"str": [[59, "    def __init__(self, dtype, length):"]]}, "self": {"RandomGenerator": [[59, "    def __init__(self, dtype, length):"]]}, "length": {"int": [[59, "    def __init__(self, dtype, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.TransformGenerator": {"func": {"__getitem__": {"(TransformGenerator, ?) -> None": [[38, "    def __getitem__(self, x):"]]}, "__len__": {"TransformGenerator -> int": [[35, "    def __len__(self):"]]}, "__init__": {"? -> ?": [[31, "    def __init__(self, gen, transform):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.TransformGenerator.__init__": {"param": {"self": {"TransformGenerator": [[31, "    def __init__(self, gen, transform):"]]}, "gen": {"str": [[31, "    def __init__(self, gen, transform):"]]}, "transform": {"(TransformGenerator, ?) -> ?": [[31, "    def __init__(self, gen, transform):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.FileGenerator.__repr__": {"param": {"self": {"FileGenerator": [[92, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.TransformGenerator.__repr__": {"param": {"self": {"TransformGenerator": [[44, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.FileGenerator.__len__": {"param": {"self": {"FileGenerator": [[80, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.rand_byte": {"param": {"chars": {"?": [[48, "def rand_byte(chars):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.TransformGenerator.__getitem__": {"var": {"d": {"str": [[39, "        d = self.gen.__getitem__(x)"]]}}, "param": {"x": {"?": [[38, "    def __getitem__(self, x):"]]}, "self": {"TransformGenerator": [[38, "    def __getitem__(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators": {"var": {"DATATYPES": {"dict": [[7, "DATATYPES = dict("]]}}, "class": {"RandomGenerator": {"<RandomGenerator>": [[57, "class RandomGenerator:"]]}, "FileGenerator": {"<FileGenerator>": [[76, "class FileGenerator:"]]}}, "func": {"rand_byte": {"? -> None": [[48, "def rand_byte(chars):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.RandomGenerator.__len__": {"param": {"self": {"RandomGenerator": [[63, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.TransformGenerato": {"func": {"__repr__": {"TransformGenerator -> str": [[44, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.generators.RandomGenerator": {"func": {"__getitem__": {"(RandomGenerator, ?) -> str": [[66, "    def __getitem__(self, x):"]]}, "__len__": {"RandomGenerator -> ?": [[63, "    def __len__(self):"]]}, "__init__": {"? -> ?": [[59, "    def __init__(self, dtype, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.g": {"class": {"TransformGenerator": {"<TransformGenerator>": [[21, "class TransformGenerator:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/io/test_tnetstring.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Format.test_roundtrip_format_examples": {"var": {"data": {"?": [[71, "        for data, expect in FORMAT_EXAMPLES.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoading.test_roundtrip_file_examp": {"param": {"self": {"Test_FileLoading": [[98, "    def test_roundtrip_file_examples(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Format.test_roundtrip_format_random": {"var": {"_": {"int": [[78, "        for _ in range(500):"]]}, "v": {"{[?] | bool | dict | int}": [[79, "            v = get_random_object()"]]}}, "param": {"self": {"Test_Format": [[77, "    def test_roundtrip_format_random(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Format.test_roundtrip_format_unicod": {"param": {"self": {"Test_Format": [[83, "    def test_roundtrip_format_unicode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Format.test_roundtrip_big_integer": {"var": {"i1": {"int": [[90, "        i1 = math.factorial(30000)"]]}, "s": {"None": [[91, "        s = tnetstring.dumps(i1)"]]}, "i2": {"{[?] | dict | float | int}": [[92, "        i2 = tnetstring.loads(s)"]]}}, "param": {"self": {"Test_Format": [[89, "    def test_roundtrip_big_integer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoadi": {"func": {"test_error_on_absurd_lengths": {"Test_FileLoading -> None": [[123, "    def test_error_on_absurd_lengths(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoading.test_roundtrip_file_example": {"var": {"s": {"?": [[100, "            s = io.BytesIO()"], [106, "            s = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Format.test_roundtrip_format_unicode": {"var": {"_": {"int": [[84, "        for _ in range(500):"]]}, "v": {"{[?] | bool | dict | int}": [[85, "            v = get_random_object()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.get_random_object": {"var": {"d": {"dict": [[45, "            d = {}"]]}, "k": {"str": [[48, "                k = str([random.randint(32, 126) for _ in range(n)])"]]}, "l": {"[?]": [[39, "            l = []"]]}, "_": {"int": [[40, "            for _ in range(n):"], [46, "            for _ in range(n):"]]}, "n": {"?": [[38, "            n = random.randint(0, 10)"], [44, "            n = random.randint(0, 10)"], [47, "                n = random.randint(0, 100)"], [64, "        n = random.randint(0, 100)"]]}}, "param": {"random": {"?": [[31, "def get_random_object(random=random, depth=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoading.test_roundtrip_file_examples": {"var": {"data": {"?": [[99, "        for data, expect in FORMAT_EXAMPLES.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.get_random_objec": {"var": {"what": {"?": [[36, "        what = random.randint(0, 1)"], [52, "        what = random.randint(0, 4)"]]}}, "param": {"depth": {"int": [[31, "def get_random_object(random=random, depth=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_F": {"func": {"test_roundtrip_format_examples": {"Test_Format -> None": [[70, "    def test_roundtrip_format_examples(self):"]]}, "test_roundtrip_format_unicode": {"Test_Format -> None": [[83, "    def test_roundtrip_format_unicode(self):"]]}, "test_roundtrip_format_random": {"Test_Format -> None": [[77, "    def test_roundtrip_format_random(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoading.test_error_on_absurd_length": {"var": {"s": {"?": [[124, "        s = io.BytesIO()"]]}}, "param": {"self": {"Test_FileLoading": [[123, "    def test_error_on_absurd_lengths(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Forma": {"func": {"test_roundtrip_big_integer": {"Test_Format -> None": [[89, "    def test_roundtrip_big_integer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_Format.test_roundtrip_format_examp": {"param": {"self": {"Test_Format": [[70, "    def test_roundtrip_format_examples(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstr": {"class": {"Test_FileLoading": {"<Test_FileLoading>": [[96, "class Test_FileLoading(unittest.TestCase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoading": {"func": {"test_roundtrip_file_random": {"Test_FileLoading -> None": [[113, "    def test_roundtrip_file_random(self):"]]}, "test_roundtrip_file_examples": {"Test_FileLoading -> None": [[98, "    def test_roundtrip_file_examples(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring": {"var": {"suite": {"TestSuite": [[134, "    suite = unittest.TestSuite()"]]}, "MAXINT": {"int": [[9, "MAXINT = 2 ** (struct.Struct('i').size * 8 - 1) - 1"]]}, "FORMAT_EXAMPLES": {"dict": [[11, "FORMAT_EXAMPLES = {"]]}}, "class": {"Test_Format": {"<Test_Format>": [[68, "class Test_Format(unittest.TestCase):"]]}}, "func": {"suite": {"() -> TestSuite": [[132, "def suite():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstri": {"func": {"get_random_object": {"(?, int) -> {[?] | bool | dict | int}": [[31, "def get_random_object(random=random, depth=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.suit": {"var": {"loader": {"TestLoader": [[133, "    loader = unittest.TestLoader()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_tnetstring.Test_FileLoading.test_roundtrip_file_random": {"var": {"s": {"?": [[116, "            s = io.BytesIO()"]]}, "_": {"int": [[114, "        for _ in range(500):"]]}, "v": {"{[?] | bool | dict | int}": [[115, "            v = get_random_object()"]]}}, "param": {"self": {"Test_FileLoading": [[113, "    def test_roundtrip_file_random(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/hook-passlib.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-passlib": {"var": {"hiddenimports": {"[str]": [[1, "hiddenimports = [\"configparser\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_human.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_hum": {"func": {"test_pretty_duration": {"() -> None": [[37, "def test_pretty_duration():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_human": {"func": {"test_format_timestamp_with_milli": {"() -> None": [[10, "def test_format_timestamp_with_milli():"]]}, "test_pretty_size": {"() -> None": [[28, "def test_pretty_size():"]]}, "test_parse_size": {"() -> None": [[14, "def test_parse_size():"]]}, "test_format_timestamp": {"() -> None": [[6, "def test_format_timestamp():"]]}, "test_format_address": {"() -> None": [[53, "def test_format_address():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/compat.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_013_014": {"param": {"data": {"{None | dict}": [[25, "def convert_013_014(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_100_200": {"param": {"data": {"{None | dict}": [[98, "def convert_100_200(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_017_018": {"var": {"data": {"{dict | dict}": [[63, "    data = convert_unicode(data)"]]}}, "param": {"data": {"{None | dict}": [[61, "def convert_017_018(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_012_013": {"param": {"data": {"{None | dict}": [[20, "def convert_012_013(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_unicode": {"var": {"data": {"{dict | dict}": [[204, "    data = _convert_dict_keys(data)"], [205, "    data = _convert_dict_vals("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_300_4": {"param": {"data": {"{None | dict}": [[124, "def convert_300_4(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_7_8": {"param": {"data": {"{None | dict}": [[175, "def convert_7_8(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_011_012": {"param": {"data": {"{None | dict}": [[15, "def convert_011_012(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_4_5": {"var": {"client_conn_key": {"(list, list)": [[136, "    client_conn_key = ("]]}, "server_conn_key": {"(list, list)": [[140, "    server_conn_key = ("]], "(?, ?)": [[148, "        server_conn_key = ("]]}}, "param": {"data": {"{None | dict}": [[134, "def convert_4_5(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_016_017": {"param": {"data": {"{None | dict}": [[55, "def convert_016_017(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.migrat": {"var": {"flow_version": {"?": [[242, "        flow_version = flow_data.get(b\"version\", flow_data.get(\"version\"))"], [246, "            flow_version = tuple(flow_version)[:2]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_5_6": {"param": {"data": {"{None | dict}": [[157, "def convert_5_6(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat._convert_dict_vals": {"var": {"k": {"?": [[190, "    for k, v in values_to_convert.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_6_7": {"param": {"data": {"{None | dict}": [[169, "def convert_6_7(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.migrate": {"var": {"flow_data": {"{None | dict | dict}": [[251, "            flow_data = converters[flow_version](flow_data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_019_100": {"var": {"data": {"{dict | dict}": [[92, "    data = convert_unicode(data)"]]}}, "param": {"data": {"{None | dict}": [[90, "def convert_019_100(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compa": {"var": {"converters": {"dict": [[220, "converters = {"]]}}, "func": {"convert_100_200": {"{None | dict} -> dict / ? -> None": [[98, "def convert_100_200(data):"]]}, "convert_012_013": {"{None | dict} -> dict / ? -> None": [[20, "def convert_012_013(data):"]]}, "convert_015_016": {"{None | dict} -> dict / ? -> None": [[44, "def convert_015_016(data):"]]}, "convert_200_300": {"{None | dict} -> dict / ? -> None": [[115, "def convert_200_300(data):"]]}, "convert_4_5": {"{None | dict} -> dict / ? -> None": [[134, "def convert_4_5(data):"]]}, "convert_017_018": {"{None | dict} -> {dict | dict} / ? -> dict": [[61, "def convert_017_018(data):"]]}, "convert_014_015": {"{None | dict} -> dict / ? -> None": [[39, "def convert_014_015(data):"]]}, "convert_019_100": {"{None | dict} -> {dict | dict} / ? -> dict": [[90, "def convert_019_100(data):"]]}, "convert_unicode": {"{None | dict} -> {dict | dict} / ? -> dict": [[200, "def convert_unicode(data: dict) -> dict:"]]}, "convert_016_017": {"{None | dict} -> dict / ? -> None": [[55, "def convert_016_017(data):"]]}, "convert_7_8": {"{None | dict} -> dict / ? -> None": [[175, "def convert_7_8(data):"]]}, "convert_300_4": {"{None | dict} -> dict / ? -> None": [[124, "def convert_300_4(data):"]]}, "convert_5_6": {"{None | dict} -> dict / ? -> None": [[157, "def convert_5_6(data):"]]}, "_convert_dict_keys": {"{None | dict} -> {dict | dict} / ? -> dict": [[182, "def _convert_dict_keys(o: Any) -> Any:"]]}, "convert_013_014": {"{None | dict} -> dict / ? -> None": [[25, "def convert_013_014(data):"]]}, "convert_6_7": {"{None | dict} -> dict / ? -> None": [[169, "def convert_6_7(data):"]]}, "convert_018_019": {"{None | dict} -> {dict | dict} / ? -> dict": [[71, "def convert_018_019(data):"]]}, "convert_011_012": {"{None | dict} -> dict / ? -> None": [[15, "def convert_011_012(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.comp": {"func": {"_convert_dict_vals": {"(list, ?) -> list / (?, ?) -> None / (dict, dict) -> dict / (None, ?) -> None / ({dict | dict}, dict) -> {dict | dict} / ({(int, int) | (int, int, int) | None | dict | dict | str}, ?) -> {(int, int) | (int, int, int) | dict | dict | str} / ({(int, int) | (int, int, int) | None | dict | list | str}, ?) -> {(int, int) | (int, int, int) | dict | list | str}": [[189, "def _convert_dict_vals(o: dict, values_to_convert: dict) -> dict:"]]}, "migrate_flow": {"? -> {dict | dict}": [[240, "def migrate_flow(flow_data: Dict[Union[bytes, str], Any]) -> Dict[Union[bytes, str], Any]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_014_015": {"param": {"data": {"{None | dict}": [[39, "def convert_014_015(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.migrate_flow": {"var": {"should_upgrade": {"?": [[253, "            should_upgrade = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_018_019": {"var": {"data": {"{dict | dict}": [[73, "    data = convert_unicode(data)"]]}}, "param": {"data": {"{None | dict}": [[71, "def convert_018_019(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_200_300": {"param": {"data": {"{None | dict}": [[115, "def convert_200_300(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.compat.convert_015_016": {"var": {"m": {"str": [[45, "    for m in (b\"request\", b\"response\"):"]]}}, "param": {"data": {"{None | dict}": [[44, "def convert_015_016(data):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/proxy/test_server.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.test_a": {"param": {"self": {"TestHttps2Http": [[555, "    def test_all(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_blank_leading_lin": {"var": {"req": {"str": [[255, "            req = \"get:'%s/p/201':i0,'\\r\\n'\""]]}}, "param": {"self": {"TestHTTP": [[252, "    def test_blank_leading_line(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamRequest.test_stream_chunked": {"var": {"chunks": {"list": [[801, "        chunks = list(http1.read_body(fconn, None))"]]}, "connection": {"?": [[787, "        connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"]]}, "fconn": {"?": [[789, "        fconn = connection.makefile(\"rb\")"]]}, "resp": {"Response": [[796, "        resp = http1.read_response_head(fconn)"]]}, "spec": {"str": [[790, "        spec = '200:h\"Transfer-Encoding\"=\"chunked\":r:b\"4\\\\r\\\\nthis\\\\r\\\\n11\\\\r\\\\nisatest__reachhex\\\\r\\\\n0\\\\r\\\\n\\\\r\\\\n\"'"]]}}, "param": {"self": {"TestStreamRequest": [[785, "    def test_stream_chunked(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestFakeRespon": {"func": {"test_fake": {"TestFakeResponse -> None": [[814, "    def test_fake(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestRedirectRequ": {"func": {"test_redirect": {"TestRedirectRequest -> None": [[716, "    def test_redirect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadCert._request": {"var": {"p": {"?": [[390, "        p = self.pathoc(sni=\"example.mitmproxy.org\")"]]}}, "param": {"self": {"TestHTTPSUpstreamServerVerificationWBadCert": [[389, "    def _request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._host_pattern_on": {"var": {"old_matcher": {"?": [[906, "            old_matcher = getattr("]]}, "backup": {"[?]": [[902, "        backup = []"]]}, "attr": {"str": [[904, "        attr = \"filter\" if attr in [\"allow\", \"ignore\"] else attr"]]}, "proxy": {"?": [[905, "        for proxy in self.chain:"]]}}, "param": {"self": {"TestUpstreamProxySSL": [[897, "    def _host_pattern_on(self, attr):"]]}, "attr": {"str": [[897, "    def _host_pattern_on(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSNoCommonName.test_http": {"var": {"f": {"?": [[430, "        f = self.pathod(\"202\")"]]}}, "param": {"self": {"TestHTTPSNoCommonName": [[429, "    def test_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AddUpstreamCertsToClientChainMixin.test_add_upstream_certs_to_client_chain": {"var": {"p": {"?": [[1092, "        p = self.pathoc()"]]}, "receivedCert": {"?": [[1095, "            for receivedCert in p.server_certs:"]]}, "d": {"str": [[1090, "            d = f.read()"]]}, "upstreamCert": {"Cert": [[1091, "        upstreamCert = certs.Cert.from_pem(d)"]]}}, "param": {"self": {"AddUpstreamCertsToClientChainMixin": [[1088, "    def test_add_upstream_certs_to_client_chain(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin": {"func": {"test_allow": {"TcpMixin -> None": [[124, "    def test_allow(self):"]]}, "_tcpproxy_off": {"TestTransparent -> None / TcpMixin -> None": [[163, "    def _tcpproxy_off(self):"]]}, "test_tcp": {"TcpMixin -> None": [[168, "    def test_tcp(self):"]]}, "_allow_off": {"TcpMixin -> None": [[86, "    def _allow_off(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.test_sni": {"var": {"p": {"Pathoc": [[561, "        p = self.pathoc(ssl=True, sni=\"example.com\")"]]}}, "param": {"self": {"TestHttps2Http": [[560, "    def test_sni(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparent.test_tcp_stream_modify": {"var": {"s": {"Script": [[575, "        s = script.Script("]]}, "d": {"?": [[581, "        d = self.pathod('200:b\"foo\"')"]]}}, "param": {"tdata": {"?": [[574, "    def test_tcp_stream_modify(self, tdata):"]]}, "self": {"TestTransparent": [[574, "    def test_tcp_stream_modify(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparen": {"func": {"test_tcp_stream_modify": {"(TestTransparent, ?) -> None": [[574, "    def test_tcp_stream_modify(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamRequest.test_stream_multip": {"param": {"self": {"TestStreamRequest": [[773, "    def test_stream_multiple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamRequest.test_stream_simp": {"param": {"self": {"TestStreamRequest": [[764, "    def test_stream_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectRequest": {"func": {"response": {"(ARedirectRequest, ?) -> None": [[708, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5SSL.test_simp": {"param": {"self": {"TestSocks5SSL": [[530, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxyChainingSSLR": {"func": {"test_reconnect": {"TestProxyChainingSSLReconnect -> None": [[1039, "    def test_reconnect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.UpstreamProxyChanger": {"func": {"__init__": {"? -> ?": [[1018, "    def __init__(self, addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._host_pattern_o": {"var": {"handle": {"str": [[903, "        handle = attr"]]}}, "param": {"self": {"TestUpstreamProxySSL": [[919, "    def _host_pattern_off(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL": {"var": {"ssl": {"?": [[895, "    ssl = True"]]}}, "func": {"_ignore_off": {"TestUpstreamProxySSL -> None": [[936, "    def _ignore_off(self):"]]}, "test_change_upstream_proxy_connect": {"TestUpstreamProxySSL -> None": [[967, "    def test_change_upstream_proxy_connect(self):"]]}, "test_connect_https_to_http": {"TestUpstreamProxySSL -> None": [[982, "    def test_connect_https_to_http(self):"]]}, "test_simple": {"TestUpstreamProxySSL -> None": [[948, "    def test_simple(self):"]]}, "_tcpproxy_on": {"TestUpstreamProxySSL -> None": [[940, "    def _tcpproxy_on(self):"]]}, "_ignore_on": {"TestUpstreamProxySSL -> None": [[932, "    def _ignore_on(self):"]]}, "_tcpproxy_off": {"TestUpstreamProxySSL -> None": [[944, "    def _tcpproxy_off(self):"]]}, "_host_pattern_on": {"(TestUpstreamProxySSL, ?) -> None / (TestUpstreamProxySSL, str) -> None": [[897, "    def _host_pattern_on(self, attr):"]]}, "_host_pattern_off": {"(TestUpstreamProxySSL, ?) -> None / (TestUpstreamProxySSL, str) -> None": [[919, "    def _host_pattern_off(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin._tcpproxy_on": {"param": {"self": {"{TcpMixin | TestTransparent}": [[158, "    def _tcpproxy_on(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_tcp_setup_timestamp_pres": {"var": {"connection": {"?": [[641, "        connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5": {"func": {"test_simple": {"TestSocks5 -> None": [[474, "    def test_simple(self):"]]}, "test_with_authentication": {"TestSocks5 -> None": [[513, "    def test_with_authentication(self):"]]}, "test_no_connect": {"TestSocks5 -> None": [[489, "    def test_no_connect(self):"]]}, "test_with_authentication_only": {"TestSocks5 -> None": [[481, "    def test_with_authentication_only(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedCert": {"var": {"ssl": {"?": [[343, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin.test_tcp": {"var": {"i": {"?": [[171, "        i = self.pathod(\"305\")"]]}, "i2": {"?": [[172, "        i2 = self.pathod(\"306\")"]]}, "i_cert": {"Cert": [[184, "            i_cert = certs.Cert(i.sslinfo.certchain[0])"]]}, "i2_cert": {"Cert": [[185, "            i2_cert = certs.Cert(i2.sslinfo.certchain[0])"]]}, "n": {"?": [[169, "        n = self.pathod(\"304\")"]]}, "n_cert": {"Cert": [[186, "            n_cert = certs.Cert(n.sslinfo.certchain[0])"]]}}, "param": {"self": {"TcpMixin": [[168, "    def test_tcp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestIncompleteResponse.test_incomplet": {"param": {"self": {"TestIncompleteResponse": [[882, "    def test_incomplete(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestKillRequest.test_ki": {"param": {"self": {"TestKillRequest": [[845, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_tcp_setup_timestamp_presenc": {"param": {"self": {"TestProxy": [[639, "    def test_request_tcp_setup_timestamp_presence(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_first_line_rewrite": {"var": {"p": {"?": [[286, "        p = self.pathoc()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL.test_simpl": {"var": {"req": {"?": [[951, "            req = p.request(\"get:'/p/418:b\\\"content\\\"'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestServerConnect": {"var": {"ssl": {"?": [[821, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_invalid_head": {"var": {"resp": {"?": [[261, "            resp = p.request(\"get:'http://foo':h':foo'='bar'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestReverse.test_overridden_host_header": {"var": {"p": {"?": [[449, "        p = self.pathoc()"]]}}, "param": {"self": {"TestReverse": [[447, "    def test_overridden_host_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_invalid_connect": {"param": {"self": {"TestHTTP": [[198, "    def test_invalid_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_timestamps": {"var": {"connection": {"?": [[621, "        connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_response_timestamp": {"param": {"self": {"TestProxy": [[608, "    def test_response_timestamps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin._ignore_on": {"param": {"self": {"TcpMixin": [[71, "    def _ignore_on(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_tcp_setup_timestamp_pr": {"var": {"second_flow": {"?": [[661, "        second_flow = self.master.state.flows[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2H": {"func": {"get_options": {"<TestHttps2Http> -> None": [[542, "    def get_options(cls):"]]}, "test_http": {"TestHttps2Http -> None": [[565, "    def test_http(self):"]]}, "pathoc": {"(TestHttps2Http, ?, None) -> Pathoc": [[546, "    def pathoc(self, ssl, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.UpstreamProxyChang": {"func": {"request": {"(UpstreamProxyChanger, ?) -> None": [[1021, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPS.test_clientcert_fi": {"param": {"self": {"TestHTTPS": [[296, "    def test_clientcert_file(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_timestamp": {"var": {"request": {"?": [[633, "        request, response = self.master.state.flows["]]}}, "param": {"self": {"TestProxy": [[619, "    def test_request_timestamps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin._allow_on": {"param": {"self": {"TcpMixin": [[81, "    def _allow_on(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5.test_simp": {"param": {"self": {"TestSocks5": [[474, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AKillR": {"func": {"request": {"(AKillRequest, ?) -> None": [[840, "    def request(self, f):"]]}, "response": {"(AKillResponse, ?) -> None": [[854, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPS.test_error_post_connect": {"var": {"p": {"?": [[316, "        p = self.pathoc()"]]}}, "param": {"self": {"TestHTTPS": [[315, "    def test_error_post_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.UpstreamProxyChanger.request": {"param": {"self": {"UpstreamProxyChanger": [[1021, "    def request(self, f):"]]}, "f": {"?": [[1021, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy": {"func": {"test_request_tcp_setup_timestamp_presence": {"TestProxy -> None": [[639, "    def test_request_tcp_setup_timestamp_presence(self):"]]}, "test_http": {"TestProxy -> None": [[598, "    def test_http(self):"]]}, "test_request_timestamps": {"TestProxy -> None": [[619, "    def test_request_timestamps(self):"]]}, "test_response_timestamps": {"TestProxy -> None": [[608, "    def test_response_timestamps(self):"]]}, "test_request_ip": {"TestProxy -> None": [[667, "    def test_request_ip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_": {"class": {"TestHTTPSUpstreamServerVerificationWTrustedCert": {"<TestHTTPSUpstreamServerVerificationWTrustedCert>": [[338, "class TestHTTPSUpstreamServerVerificationWTrustedCert(tservers.HTTPProxyTest):"]]}, "TestReverse": {"<TestReverse>": [[434, "class TestReverse(tservers.ReverseProxyTest, CommonMixin, TcpMixin):"]]}, "TestHTTPSUpstreamServerVerificationWBadCert": {"<TestHTTPSUpstreamServerVerificationWBadCert>": [[377, "class TestHTTPSUpstreamServerVerificationWBadCert(tservers.HTTPProxyTest):"]]}, "TestReverseSSL": {"<TestReverseSSL>": [[467, "class TestReverseSSL(tservers.ReverseProxyTest, CommonMixin, TcpMixin):"]]}, "TestServerConnect": {"<TestServerConnect>": [[820, "class TestServerConnect(tservers.HTTPProxyTest):"]]}, "TestTransparentResolveError": {"<TestTransparentResolveError>": [[867, "class TestTransparentResolveError(tservers.TransparentProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AKillResponse.respon": {"param": {"self": {"AKillResponse": [[854, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AFakeRespon": {"func": {"request": {"(AFakeResponse, ?) -> None": [[808, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSAddUpstreamCertsToClientChainFal": {"func": {"get_options": {"<TestHTTPSAddUpstreamCertsToClientChainFalse> -> None": [[1126, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestKillRequ": {"func": {"test_kill": {"TestKillRequest -> None": [[845, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL.test_change_upstream_proxy_connect": {"var": {"p": {"?": [[974, "        p = self.pathoc()"]]}, "req": {"?": [[976, "            req = p.request(\"get:'/p/418'\")"]]}}, "param": {"self": {"TestUpstreamProxySSL": [[967, "    def test_change_upstream_proxy_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_tcp_setup_timestamp_presence": {"var": {"first_flow": {"?": [[660, "        first_flow = self.master.state.flows[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AKillResponse.response": {"param": {"f": {"?": [[854, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSCertfile.test_certfi": {"param": {"self": {"TestHTTPSCertfile": [[325, "    def test_certfile(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestReverse.test_host_head": {"var": {"resp": {"?": [[441, "            resp = p.request(\"get:/p/200:h'Host'='example.com'\")"]]}, "req": {"?": [[444, "        req = self.master.state.flows[0].request"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RequestKill": {"func": {"request": {"(RequestKiller, ?) -> None": [[1030, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonMixin.test_invalid_http": {"var": {"line": {"str": [[50, "            line = t.rfile.readline()"]]}, "t": {"TCPClient": [[46, "        t = tcp.TCPClient((\"127.0.0.1\", self.proxy.port))"]]}}, "param": {"self": {"CommonMixin": [[45, "    def test_invalid_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5SSL": {"var": {"ssl": {"?": [[528, "    ssl = True"]]}}, "func": {"test_simple": {"TestSocks5SSL -> None": [[530, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxySSL.test_via": {"var": {"first_flow": {"?": [[689, "        first_flow = self.master.state.flows[0]"]]}, "f": {"?": [[687, "        f = self.pathod(\"200:b@10\")"]]}}, "param": {"self": {"TestProxySSL": [[685, "    def test_via(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AIncompl": {"func": {"request": {"(AIncomplete, ?) -> None": [[875, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonMix": {"func": {"test_sni": {"CommonMixin -> None": [[53, "    def test_sni(self):"]]}, "test_invalid_http": {"CommonMixin -> None": [[45, "    def test_invalid_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedCert._request": {"var": {"p": {"?": [[352, "        p = self.pathoc(sni=\"example.mitmproxy.org\")"]]}}, "param": {"self": {"TestHTTPSUpstreamServerVerificationWTrustedCert": [[351, "    def _request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestReverse.test_host_header": {"var": {"p": {"?": [[439, "        p = self.pathoc()"]]}}, "param": {"self": {"TestReverse": [[437, "    def test_host_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestReverseSSL": {"var": {"ssl": {"?": [[469, "    ssl = True"]]}, "reverse": {"?": [[468, "    reverse = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparent": {"var": {"ssl": {"?": [[572, "    ssl = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonMixin.test_larg": {"param": {"self": {"CommonMixin": [[31, "    def test_large(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxySSL.test_request_tls_attribute_presence": {"var": {"first_flow": {"?": [[681, "        first_flow = self.master.state.flows[0]"]]}, "f": {"?": [[679, "        f = self.pathod(\"304:b@10k\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AddUpstreamCertsToClientChainMix": {"var": {"upstream_cert_found_in_client_chain": {"?": [[1094, "            upstream_cert_found_in_client_chain = False"], [1097, "                    upstream_cert_found_in_client_chain = True"]]}, "ssloptions": {"SSLOptions": [[1081, "    ssloptions = pathod.SSLOptions("]]}}, "func": {"test_add_upstream_certs_to_client_chain": {"AddUpstreamCertsToClientChainMixin -> None": [[1088, "    def test_add_upstream_certs_to_client_chain(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectRequest.__in": {"param": {"redirect_port": {"?": [[694, "    def __init__(self, redirect_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonMixin.test_sni": {"var": {"log": {"?": [[65, "        log = self.server.last_log()"]]}, "f": {"?": [[63, "        f = self.pathod(\"304\", sni=\"testserver.com\")"]]}}, "param": {"self": {"CommonMixin": [[53, "    def test_sni(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._tcpproxy_on": {"param": {"self": {"TestUpstreamProxySSL": [[940, "    def _tcpproxy_on(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSSecureByD": {"func": {"test_secure_by_default": {"TestHTTPSSecureByDefault -> None": [[330, "    def test_secure_by_default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparentSSL.test_ssle": {"var": {"r": {"Response": [[592, "        r = p.request(\"get:/\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_response_timestam": {"var": {"response": {"?": [[614, "        response = self.master.state.flows[0].response"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadCert": {"var": {"ssl": {"?": [[382, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.UpstreamProxyChanger.__init__": {"param": {"self": {"UpstreamProxyChanger": [[1018, "    def __init__(self, addr):"]]}, "addr": {"(str, ?)": [[1018, "    def __init__(self, addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestRev": {"func": {"test_host_header": {"TestReverse -> None": [[437, "    def test_host_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestServerConnec": {"func": {"get_options": {"<TestServerConnect> -> None": [[824, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_tcp_setup_timestamp_presen": {"var": {"recvd": {"int": [[648, "        recvd = 0"], [655, "        recvd = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestServerConnect.get_option": {"var": {"opts": {"?": [[825, "        opts = tservers.HTTPProxyTest.get_options()"]]}}, "param": {"cls": {"<TestServerConnect>": [[824, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPS.test_clientcert_file": {"var": {"f": {"?": [[300, "            f = self.pathod(\"304\")"]]}}, "param": {"tdata": {"?": [[296, "    def test_clientcert_file(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.test_http": {"param": {"self": {"TestHttps2Http": [[565, "    def test_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadC": {"func": {"test_no_verification_w_bad_cert": {"TestHTTPSUpstreamServerVerificationWBadCert -> None": [[402, "    def test_no_verification_w_bad_cert(self):"]]}, "test_verification_w_bad_cert": {"TestHTTPSUpstreamServerVerificationWBadCert -> None": [[407, "    def test_verification_w_bad_cert(self):"]]}, "_request": {"TestHTTPSUpstreamServerVerificationWBadCert -> None": [[389, "    def _request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectRequest.__init__": {"param": {"self": {"ARedirectRequest": [[694, "    def __init__(self, redirect_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPS.test_clientcert_dir": {"var": {"f": {"?": [[309, "            f = self.pathod(\"304\")"]]}}, "param": {"tdata": {"?": [[306, "    def test_clientcert_dir(self, tdata):"]]}, "self": {"TestHTTPS": [[306, "    def test_clientcert_dir(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSAddUpstreamCertsToClientChainFalse.get_option": {"var": {"opts": {"?": [[1127, "        opts = super().get_options()"]]}}, "param": {"cls": {"<TestHTTPSAddUpstreamCertsToClientChainFalse>": [[1126, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSAddUpstreamCertsToClientChainTrue.get_option": {"var": {"opts": {"?": [[1112, "        opts = super().get_options()"]]}}, "param": {"cls": {"<TestHTTPSAddUpstreamCertsToClientChainTrue>": [[1111, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSAddUpstreamCertsToClientChainTru": {"func": {"get_options": {"<TestHTTPSAddUpstreamCertsToClientChainTrue> -> None": [[1111, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin.test_igno": {"var": {"n_cert": {"Cert": [[109, "            n_cert = certs.Cert(n.sslinfo.certchain[0])"]]}, "i_cert": {"Cert": [[107, "            i_cert = certs.Cert(i.sslinfo.certchain[0])"]]}, "i2_cert": {"Cert": [[108, "            i2_cert = certs.Cert(i2.sslinfo.certchain[0])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToH": {"func": {"http_connect": {"(RewriteToHttp, ?) -> None": [[1002, "    def http_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RequestKiller.__init__": {"param": {"exclude": {"[int]": [[1026, "    def __init__(self, exclude):"]]}, "self": {"RequestKiller": [[1026, "    def __init__(self, exclude):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AKillRequest.request": {"param": {"self": {"AKillRequest": [[840, "    def request(self, f):"]]}, "f": {"?": [[840, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL.test_simple": {"var": {"p": {"?": [[949, "        p = self.pathoc()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_invalid_connec": {"var": {"t": {"TCPClient": [[199, "        t = tcp.TCPClient((\"127.0.0.1\", self.proxy.port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToHttps": {"func": {"http_connect": {"(RewriteToHttps, ?) -> None": [[1010, "    def http_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedCer": {"var": {"ssloptions": {"SSLOptions": [[344, "    ssloptions = pathod.SSLOptions("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin._ignore_o": {"param": {"self": {"TcpMixin": [[76, "    def _ignore_off(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSCertfile": {"var": {"ssl": {"?": [[322, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparentResolveError.test_resolve_error": {"param": {"self": {"TestTransparentResolveError": [[869, "    def test_resolve_error(self, original_addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._ignore_on": {"param": {"self": {"TestUpstreamProxySSL": [[932, "    def _ignore_on(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestFakeResponse.test_fak": {"param": {"self": {"TestFakeResponse": [[814, "    def test_fake(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin.test_allow": {"var": {"i": {"?": [[127, "        i = self.pathod(\"305\")"]]}, "i2": {"?": [[128, "        i2 = self.pathod(\"306\")"]]}, "i_cert": {"Cert": [[141, "            i_cert = certs.Cert(i.sslinfo.certchain[0])"]]}, "i2_cert": {"Cert": [[142, "            i2_cert = certs.Cert(i2.sslinfo.certchain[0])"]]}, "n": {"?": [[125, "        n = self.pathod(\"304\")"]]}, "n_cert": {"Cert": [[143, "            n_cert = certs.Cert(n.sslinfo.certchain[0])"]]}, "spec": {"str": [[149, "        spec = \"200:i0,@100:d0\"  # this results in just 100 random bytes"]]}}, "param": {"self": {"TcpMixin": [[124, "    def test_allow(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestReverse.test_selfconnection": {"var": {"p": {"?": [[461, "        p = self.pathoc()"]]}}, "param": {"self": {"TestReverse": [[458, "    async def test_selfconnection(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonM": {"var": {"expected_sni": {"str": [[59, "            expected_sni = \"127.0.0.1\""], [61, "            expected_sni = \"testserver.com\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server": {"var": {"cdata": {"Data": [[26, "cdata = data.Data(__name__)"]]}}, "class": {"TestKillRequest": {"<TestKillRequest>": [[844, "class TestKillRequest(tservers.HTTPProxyTest):"]]}, "TestKillResponse": {"<TestKillResponse>": [[858, "class TestKillResponse(tservers.HTTPProxyTest):"]]}, "TestHTTP": {"<TestHTTP>": [[197, "class TestHTTP(tservers.HTTPProxyTest, CommonMixin):"]]}, "AFakeResponse": {"<AFakeResponse>": [[807, "class AFakeResponse:"]]}, "AKillResponse": {"<AKillResponse>": [[853, "class AKillResponse:"]]}, "TestSocks5SSL": {"<TestSocks5SSL>": [[527, "class TestSocks5SSL(tservers.SocksModeTest):"]]}, "CommonMixin": {"<CommonMixin>": [[29, "class CommonMixin:"]]}, "TestFakeResponse": {"<TestFakeResponse>": [[812, "class TestFakeResponse(tservers.HTTPProxyTest):"]]}, "AIncomplete": {"<AIncomplete>": [[874, "class AIncomplete:"]]}, "AKillRequest": {"<AKillRequest>": [[838, "class AKillRequest:"]]}, "TestHttps2Http": {"<TestHttps2Http>": [[539, "class TestHttps2Http(tservers.ReverseProxyTest):"]]}, "TestSocks5": {"<TestSocks5>": [[472, "class TestSocks5(tservers.SocksModeTest):"]]}, "TestIncompleteResponse": {"<TestIncompleteResponse>": [[881, "class TestIncompleteResponse(tservers.HTTPProxyTest):"]]}, "TcpMixin": {"<TcpMixin>": [[69, "class TcpMixin:"]]}, "TestHTTPSNoCommonName": {"<TestHTTPSNoCommonName>": [[417, "class TestHTTPSNoCommonName(tservers.HTTPProxyTest):"]]}, "TestHTTPS": {"<TestHTTPS>": [[292, "class TestHTTPS(tservers.HTTPProxyTest, CommonMixin, TcpMixin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSSecureByDefault.test_secure_by": {"var": {"default_opts": {"Options": [[334, "        default_opts = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin._allow_o": {"param": {"self": {"TcpMixin": [[86, "    def _allow_off(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToHttp.request": {"param": {"self": {"RewriteToHttp": [[1005, "    def request(self, f):"]]}, "f": {"?": [[1005, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin.test_ignor": {"var": {"spec": {"str": [[115, "        spec = \"200:i0,@100:d0\"  # this results in just 100 random bytes"]]}}, "param": {"self": {"TcpMixin": [[91, "    def test_ignore(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_upstream_ssl_erro": {"var": {"ret": {"?": [[208, "            ret = p.request(\"get:'https://localhost:%s/'\" % self.server.port)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RequestKiller.request": {"param": {"self": {"RequestKiller": [[1030, "    def request(self, f):"]]}, "f": {"?": [[1030, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedC": {"func": {"test_verification_w_confdir": {"(TestHTTPSUpstreamServerVerificationWTrustedCert, ?) -> None": [[356, "    def test_verification_w_confdir(self, tdata):"]]}, "test_verification_w_pemfile": {"(TestHTTPSUpstreamServerVerificationWTrustedCert, ?) -> None": [[366, "    def test_verification_w_pemfile(self, tdata):"]]}, "_request": {"TestHTTPSUpstreamServerVerificationWTrustedCert -> None": [[351, "    def _request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._tcpproxy_o": {"param": {"self": {"TestUpstreamProxySSL": [[944, "    def _tcpproxy_off(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectRequest.respon": {"param": {"self": {"ARedirectRequest": [[708, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestFakeResponse.test_fake": {"var": {"f": {"?": [[816, "        f = self.pathod(\"200\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.get_option": {"var": {"opts": {"?": [[543, "        opts = super().get_options()"]]}}, "param": {"cls": {"<TestHttps2Http>": [[542, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadCert.test_no_verification_w_bad_cert": {"var": {"r": {"None": [[404, "        r = self._request()"]]}}, "param": {"self": {"TestHTTPSUpstreamServerVerificationWBadCert": [[402, "    def test_no_verification_w_bad_cert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_connection_cl": {"var": {"response": {"str": [[214, "        response = '%s/p/200:b@1' % self.server.urlbase"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestKillRespon": {"func": {"test_kill": {"TestKillResponse -> None": [[859, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL.test_connect_https_to_http": {"param": {"self": {"TestUpstreamProxySSL": [[982, "    def test_connect_https_to_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5.test_simple": {"var": {"p": {"?": [[475, "        p = self.pathoc()"]]}, "f": {"?": [[478, "            f = p.request(\"get:/p/200\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectRequest.response": {"param": {"f": {"?": [[708, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_connection_clo": {"param": {"self": {"TestHTTP": [[211, "    def test_connection_close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_request_ip": {"var": {"f": {"?": [[668, "        f = self.pathod(\"200:b@100\")"], [670, "        f = self.master.state.flows[0]"]]}}, "param": {"self": {"TestProxy": [[667, "    def test_request_ip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedCert.test_verification_w_pemfile": {"param": {"tdata": {"?": [[366, "    def test_verification_w_pemfile(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxyChainingSSLReconnect": {"var": {"ssl": {"?": [[1037, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestIncompleteR": {"func": {"test_incomplete": {"TestIncompleteResponse -> None": [[882, "    def test_incomplete(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AStreamRequest": {"func": {"responseheaders": {"(AStreamRequest, ?) -> None": [[759, "    def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_upstream_ssl_error": {"var": {"p": {"?": [[206, "        p = self.pathoc()"]]}}, "param": {"self": {"TestHTTP": [[205, "    def test_upstream_ssl_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestRedirectRequest": {"var": {"ssl": {"?": [[714, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_get_connection_switching": {"var": {"p": {"?": [[246, "        p = self.pathoc()"]]}, "req": {"str": [[245, "        req = \"get:'%s/p/200:b@1'\""]]}}, "param": {"self": {"TestHTTP": [[244, "    async def test_get_connection_switching(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonMixin.test_http": {"var": {"l": {"?": [[40, "        l = self.master.state.flows[-1]"]]}, "f": {"?": [[35, "        f = self.pathod(\"304\")"]]}}, "param": {"self": {"CommonMixin": [[34, "    def test_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToHttps.request": {"param": {"self": {"RewriteToHttps": [[1013, "    def request(self, f):"]]}, "f": {"?": [[1013, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestServerConnect.test_unnecessary_serverconnect": {"param": {"self": {"TestServerConnect": [[830, "    async def test_unnecessary_serverconnect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSNoCommonNam": {"func": {"test_http": {"TestHTTPSNoCommonName -> None": [[429, "    def test_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparentResolveE": {"func": {"test_resolve_error": {"(TestTransparentResolveError, ?) -> None": [[869, "    def test_resolve_error(self, original_addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_http": {"var": {"f": {"?": [[599, "        f = self.pathod(\"304\")"], [602, "        f = self.master.state.flows[0]"]]}}, "param": {"self": {"TestProxy": [[598, "    def test_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestRedirectRequest.test_redirect": {"var": {"p": {"?": [[728, "        p = self.pathoc()"]]}, "r1": {"?": [[732, "            r1 = p.request(\"get:'/p/200'\")"]]}, "r2": {"?": [[739, "            r2 = p.request(\"get:'/p/201'\")"]]}, "r3": {"?": [[746, "            r3 = p.request(\"get:'/p/202'\")"]]}}, "param": {"self": {"TestRedirectRequest": [[716, "    def test_redirect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._ignore_o": {"param": {"self": {"TestUpstreamProxySSL": [[936, "    def _ignore_off(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectRequest.request": {"var": {"addr2": {"(str, ?)": [[701, "            addr2 = (\"127.0.0.1\", self.redirect_port)"]]}, "addr": {"?": [[700, "            addr = f.live.server_conn.address"]]}}, "param": {"self": {"ARedirectRequest": [[697, "    def request(self, f):"]]}, "f": {"?": [[697, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPS": {"var": {"ssl": {"?": [[293, "    ssl = True"]]}, "ssloptions": {"SSLOptions": [[294, "    ssloptions = pathod.SSLOptions(request_client_cert=True)"]]}}, "func": {"test_clientcert_file": {"(TestHTTPS, ?) -> ?": [[296, "    def test_clientcert_file(self, tdata):"]]}, "test_clientcert_dir": {"(TestHTTPS, ?) -> ?": [[306, "    def test_clientcert_dir(self, tdata):"]]}, "test_error_post_connect": {"TestHTTPS -> None": [[315, "    def test_error_post_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparentResolveError.test_resolve_e": {"param": {"original_addr": {"?": [[869, "    def test_resolve_error(self, original_addr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectReques": {"func": {"__init__": {"? -> ?": [[694, "    def __init__(self, redirect_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.test_all": {"var": {"p": {"Pathoc": [[556, "        p = self.pathoc(ssl=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RequestKiller": {"func": {"__init__": {"? -> ?": [[1026, "    def __init__(self, exclude):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadCer": {"var": {"ssloptions": {"SSLOptions": [[383, "    ssloptions = pathod.SSLOptions("]]}}, "func": {"get_options": {"<TestHTTPSUpstreamServerVerificationWBadCert> -> None": [[395, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5SSL.test_simple": {"var": {"p": {"?": [[531, "        p = self.pathoc_raw()"]]}, "f": {"?": [[535, "            f = p.request(\"get:/p/200\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin.test_ignore": {"var": {"i": {"?": [[94, "        i = self.pathod(\"305\")"]]}, "i2": {"?": [[95, "        i2 = self.pathod(\"306\")"]]}, "n": {"?": [[92, "        n = self.pathod(\"304\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixi": {"func": {"_tcpproxy_on": {"TcpMixin -> None / TestTransparent -> None": [[158, "    def _tcpproxy_on(self):"]]}, "_allow_on": {"TcpMixin -> None": [[81, "    def _allow_on(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparentSSL.test_sslerr": {"var": {"p": {"Pathoc": [[590, "        p = pathoc.Pathoc((\"localhost\", self.proxy.port), fp=None)"]]}}, "param": {"self": {"TestTransparentSSL": [[589, "    def test_sslerr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedCert.test_verification_w_pemfi": {"param": {"self": {"TestHTTPSUpstreamServerVerificationWTrustedCert": [[366, "    def test_verification_w_pemfile(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.test_htt": {"var": {"p": {"Pathoc": [[566, "        p = self.pathoc(ssl=False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamReq": {"func": {"test_stream_chunked": {"TestStreamRequest -> None": [[785, "    def test_stream_chunked(self):"]]}, "test_stream_multiple": {"TestStreamRequest -> None": [[773, "    def test_stream_multiple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5.test_no_connect": {"var": {"p": {"?": [[493, "        p = self.pathoc()"]]}, "f": {"?": [[508, "            f = p.request(\"get:/p/200\")  # the request doesn't matter, error response from handshake will be read anyway."]]}}, "param": {"self": {"TestSocks5": [[489, "    def test_no_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSSecureByDefault.test_secure_by_default": {"param": {"self": {"TestHTTPSSecureByDefault": [[330, "    def test_secure_by_default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.ARedirectR": {"func": {"request": {"(ARedirectRequest, ?) -> None": [[697, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestReverse.test_overridden_host_head": {"var": {"resp": {"?": [[451, "            resp = p.request(\"get:/p/200:h'Host'='example.com'\")"]]}, "req": {"?": [[454, "        req = self.master.state.flows[0].request"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestTransparentSSL": {"var": {"ssl": {"?": [[587, "    ssl = True"]]}}, "func": {"test_sslerr": {"TestTransparentSSL -> None": [[589, "    def test_sslerr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToHttps.http_connect": {"param": {"self": {"RewriteToHttps": [[1010, "    def http_connect(self, f):"]]}, "f": {"?": [[1010, "    def http_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWTrustedCert.test_verification_w_confdir": {"param": {"tdata": {"?": [[356, "    def test_verification_w_confdir(self, tdata):"]]}, "self": {"TestHTTPSUpstreamServerVerificationWTrustedCert": [[356, "    def test_verification_w_confdir(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxyChainingSSLReconnect.test_reconnect": {"var": {"p": {"?": [[1050, "        p = self.pathoc()"]]}, "req": {"?": [[1052, "            req = p.request(\"get:'/p/418:b\\\"content\\\"'\")"], [1061, "            req = p.request(\"get:'/p/418:b\\\"content2\\\"'\")"]]}}, "param": {"self": {"TestProxyChainingSSLReconnect": [[1039, "    def test_reconnect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AStreamRequest.responseheader": {"param": {"self": {"AStreamRequest": [[759, "    def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_connection_close": {"var": {"p": {"?": [[218, "        p = self.pathoc()"], [224, "        p = self.pathoc()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP": {"func": {"test_reconnect": {"TestHTTP -> None": [[233, "    def test_reconnect(self):"]]}, "test_connection_close": {"TestHTTP -> None": [[211, "    def test_connection_close(self):"]]}, "test_invalid_headers": {"TestHTTP -> None": [[258, "    def test_invalid_headers(self):"]]}, "test_upstream_ssl_error": {"TestHTTP -> None": [[205, "    def test_upstream_ssl_error(self):"]]}, "test_invalid_connect": {"TestHTTP -> None": [[198, "    def test_invalid_connect(self):"]]}, "test_first_line_rewrite": {"TestHTTP -> None": [[276, "    def test_first_line_rewrite(self):"]]}, "test_blank_leading_line": {"TestHTTP -> None": [[252, "    def test_blank_leading_line(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL._host_pattern_off": {"var": {"backup": {"?": [[921, "        backup = getattr(self, \"_ignore_%s_backup\" % attr)"]]}, "attr": {"str": [[920, "        attr = \"filter\" if attr in [\"allow\", \"ignore\"] else attr"]]}, "proxy": {"?": [[922, "        for proxy in reversed(self.chain):"]]}}, "param": {"attr": {"str": [[919, "    def _host_pattern_off(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestKillResponse.test_ki": {"param": {"self": {"TestKillResponse": [[859, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToHttp.http_connect": {"param": {"self": {"RewriteToHttp": [[1002, "    def http_connect(self, f):"]]}, "f": {"?": [[1002, "    def http_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamRequest.test_stream_simple": {"var": {"p": {"?": [[766, "        p = self.pathoc()"]]}, "r1": {"?": [[769, "            r1 = p.request(\"get:'%s/p/200:r:b@100k:d102400'\" % self.server.urlbase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http.pathoc": {"var": {"p": {"Pathoc": [[550, "        p = pathoc.Pathoc("]]}}, "param": {"ssl": {"?": [[546, "    def pathoc(self, ssl, sni=None):"]]}, "self": {"TestHttps2Http": [[546, "    def pathoc(self, ssl, sni=None):"]]}, "sni": {"None": [[546, "    def pathoc(self, ssl, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHttps2Http": {"func": {"test_all": {"TestHttps2Http -> None": [[555, "    def test_all(self):"]]}, "test_sni": {"TestHttps2Http -> None": [[560, "    def test_sni(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxySSL": {"var": {"ssl": {"?": [[675, "    ssl = True"]]}}, "func": {"test_request_tls_attribute_presence": {"TestProxySSL -> None": [[677, "    def test_request_tls_attribute_presence(self):"]]}, "test_via": {"TestProxySSL -> None": [[685, "    def test_via(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxySSL.test_request_tls_attribute_presenc": {"param": {"self": {"TestProxySSL": [[677, "    def test_request_tls_attribute_presence(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_blank_leading_line": {"var": {"p": {"?": [[253, "        p = self.pathoc()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestR": {"var": {"reverse": {"?": [[435, "    reverse = True"]]}}, "func": {"test_overridden_host_header": {"TestReverse -> None": [[447, "    def test_overridden_host_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_stream_modify": {"var": {"s": {"Script": [[266, "        s = script.Script("]]}, "d": {"?": [[273, "        d = self.pathod('200:b\"foo\"')"]]}}, "param": {"tdata": {"?": [[265, "    async def test_stream_modify(self, tdata):"]]}, "self": {"TestHTTP": [[265, "    async def test_stream_modify(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestProxy.test_response_timestamps": {"var": {"f": {"?": [[611, "        f = self.pathod(\"304:b@1k:p50,1\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_invalid_header": {"param": {"self": {"TestHTTP": [[258, "    def test_invalid_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5.test_with_authentication": {"var": {"p": {"?": [[514, "        p = self.pathoc()"]]}, "f": {"?": [[521, "            f = p.request(\"get:/p/200\")  # the request doesn't matter, error response from handshake will be read anyway."]]}}, "param": {"self": {"TestSocks5": [[513, "    def test_with_authentication(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSNoCommonName": {"var": {"ssl": {"?": [[422, "    ssl = True"]]}, "ssloptions": {"SSLOptions": [[423, "    ssloptions = pathod.SSLOptions("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamRequest.test_stream_multiple": {"var": {"p": {"?": [[775, "        p = self.pathoc()"]]}, "r1": {"?": [[778, "            r1 = p.request(\"get:'%s/p/200'\" % self.server.urlbase)"], [782, "            r1 = p.request(\"get:'%s/p/201:b@100k'\" % self.server.urlbase)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_invalid_headers": {"var": {"p": {"?": [[259, "        p = self.pathoc()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AStreamRequest.responseheaders": {"param": {"f": {"?": [[759, "    def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestStreamRequ": {"func": {"test_stream_simple": {"TestStreamRequest -> None": [[764, "    def test_stream_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL.test_connect_https_to_htt": {"var": {"p": {"?": [[990, "        p = self.pathoc()"]]}, "resp": {"?": [[992, "            resp = p.request(\"get:'/p/418'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadCert.test_verification_w_bad_cert": {"var": {"r": {"None": [[412, "        r = self._request()"]]}}, "param": {"self": {"TestHTTPSUpstreamServerVerificationWBadCert": [[407, "    def test_verification_w_bad_cert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSUpstreamServerVerificationWBadCert.get_option": {"var": {"opts": {"?": [[396, "        opts = super().get_options()"]]}}, "param": {"cls": {"<TestHTTPSUpstreamServerVerificationWBadCert>": [[395, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AIncomplete.request": {"var": {"resp": {"HTTPResponse": [[876, "        resp = http.HTTPResponse.wrap(mitmproxy.test.tutils.tresp())"]]}}, "param": {"self": {"AIncomplete": [[875, "    def request(self, f):"]]}, "f": {"?": [[875, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMix": {"func": {"_ignore_off": {"TcpMixin -> None": [[76, "    def _ignore_off(self):"]]}, "_ignore_on": {"TcpMixin -> None": [[71, "    def _ignore_on(self):"]]}, "test_ignore": {"TcpMixin -> None": [[91, "    def test_ignore(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AFakeResponse.request": {"param": {"self": {"AFakeResponse": [[808, "    def request(self, f):"]]}, "f": {"?": [[808, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.CommonMixin": {"func": {"test_large": {"CommonMixin -> None": [[31, "    def test_large(self):"]]}, "test_http": {"CommonMixin -> None": [[34, "    def test_http(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_serv": {"class": {"TestProxySSL": {"<TestProxySSL>": [[674, "class TestProxySSL(tservers.HTTPProxyTest):"]]}, "TestRedirectRequest": {"<TestRedirectRequest>": [[713, "class TestRedirectRequest(tservers.HTTPProxyTest):"]]}, "TestProxy": {"<TestProxy>": [[596, "class TestProxy(tservers.HTTPProxyTest):"]]}, "TestProxyChainingSSLReconnect": {"<TestProxyChainingSSLReconnect>": [[1036, "class TestProxyChainingSSLReconnect(tservers.HTTPUpstreamProxyTest):"]]}, "TestTransparentSSL": {"<TestTransparentSSL>": [[586, "class TestTransparentSSL(tservers.TransparentProxyTest, CommonMixin, TcpMixin):"]]}, "RewriteToHttp": {"<RewriteToHttp>": [[1001, "class RewriteToHttp:"]]}, "AStreamRequest": {"<AStreamRequest>": [[754, "class AStreamRequest:"]]}, "TestHTTPSAddUpstreamCertsToClientChainFalse": {"<TestHTTPSAddUpstreamCertsToClientChainFalse>": [[1117, "class TestHTTPSAddUpstreamCertsToClientChainFalse("]]}, "TestTransparent": {"<TestTransparent>": [[571, "class TestTransparent(tservers.TransparentProxyTest, CommonMixin, TcpMixin):"]]}, "UpstreamProxyChanger": {"<UpstreamProxyChanger>": [[1017, "class UpstreamProxyChanger:"]]}, "ARedirectRequest": {"<ARedirectRequest>": [[693, "class ARedirectRequest:"]]}, "TestUpstreamProxySSL": {"<TestUpstreamProxySSL>": [[891, "class TestUpstreamProxySSL("]]}, "TestStreamRequest": {"<TestStreamRequest>": [[763, "class TestStreamRequest(tservers.HTTPProxyTest):"]]}, "AddUpstreamCertsToClientChainMixin": {"<AddUpstreamCertsToClientChainMixin>": [[1077, "class AddUpstreamCertsToClientChainMixin:"]]}, "RewriteToHttps": {"<RewriteToHttps>": [[1009, "class RewriteToHttps:"]]}, "TestHTTPSAddUpstreamCertsToClientChainTrue": {"<TestHTTPSAddUpstreamCertsToClientChainTrue>": [[1102, "class TestHTTPSAddUpstreamCertsToClientChainTrue("]]}, "TestUpstreamProxy": {"<TestUpstreamProxy>": [[887, "class TestUpstreamProxy(tservers.HTTPUpstreamProxyTest, CommonMixin):"]]}, "TestHTTPSSecureByDefault": {"<TestHTTPSSecureByDefault>": [[329, "class TestHTTPSSecureByDefault:"]]}, "TestHTTPSCertfile": {"<TestHTTPSCertfile>": [[321, "class TestHTTPSCertfile(tservers.HTTPProxyTest, CommonMixin):"]]}, "RequestKiller": {"<RequestKiller>": [[1025, "class RequestKiller:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxy": {"var": {"ssl": {"?": [[888, "    ssl = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestUpstreamProxySSL.test_simp": {"param": {"self": {"TestUpstreamProxySSL": [[948, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TcpMixin._tcpproxy_o": {"param": {"self": {"{TcpMixin | TestTransparent}": [[163, "    def _tcpproxy_off(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_reconnect": {"var": {"p": {"?": [[235, "        p = self.pathoc()"]]}, "req": {"str": [[234, "        req = \"get:'%s/p/200:b@1:da'\" % self.server.urlbase"]]}}, "param": {"self": {"TestHTTP": [[233, "    def test_reconnect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTPSC": {"var": {"certfile": {"?": [[323, "    certfile = True"]]}}, "func": {"test_certfile": {"TestHTTPSCertfile -> None": [[325, "    def test_certfile(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.AddUpstreamCertsToClientChainMixin": {"var": {"ssl": {"?": [[1079, "    ssl = True"]]}, "servercert": {"None": [[1080, "    servercert = cdata.path(\"../data/servercert/trusted-root.pem\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.RewriteToHttp": {"func": {"request": {"(RewriteToHttps, ?) -> None": [[1013, "    def request(self, f):"]], "(RewriteToHttp, ?) -> None": [[1005, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestSocks5.test_with_authentication_only": {"var": {"p": {"?": [[482, "        p = self.pathoc()"]]}, "f": {"?": [[484, "            f = p.request(\"get:/p/200\")"]]}}, "param": {"self": {"TestSocks5": [[481, "    def test_with_authentication_only(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_server.TestHTTP.test_first_line_rewrit": {"var": {"req": {"str": [[285, "        req = \"get:'%s/p/200'\" % self.server.urlbase"]]}}, "param": {"self": {"TestHTTP": [[276, "    def test_first_line_rewrite(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/test_dump.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_dump.TestDumpM": {"func": {"test_addons_dumper": {"(TestDumpMaster, ?) -> None": [[33, "    def test_addons_dumper(self, dumper):"]]}, "test_addons_termlog": {"(TestDumpMaster, ?) -> None": [[26, "    def test_addons_termlog(self, termlog):"]]}, "test_has_error": {"TestDumpMaster -> None": [[18, "    def test_has_error(self):"]]}, "mkmaster": {"TestDumpMaster -> DumpMaster": [[13, "    def mkmaster(self, **opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_dump.TestDumpMaster.test_addons_termlog": {"var": {"m": {"DumpMaster": [[29, "            m = dump.DumpMaster(o, with_termlog=termlog)"]]}, "o": {"Options": [[28, "            o = options.Options()"]]}}, "param": {"self": {"TestDumpMaster": [[26, "    def test_addons_termlog(self, termlog):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_dump.TestDumpMaster.test_addons_": {"param": {"dumper": {"?": [[33, "    def test_addons_dumper(self, dumper):"]]}, "termlog": {"?": [[26, "    def test_addons_termlog(self, termlog):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_d": {"class": {"TestDumpMaster": {"<TestDumpMaster>": [[12, "class TestDumpMaster(tservers.MasterTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_dump.TestDumpMaster.test_has_error": {"var": {"ent": {"LogEntry": [[20, "        ent = log.LogEntry(\"foo\", \"error\")"]]}, "m": {"DumpMaster": [[19, "        m = self.mkmaster()"]]}}, "param": {"self": {"TestDumpMaster": [[18, "    def test_has_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_dump.TestDumpMaster.mkmaster": {"var": {"m": {"DumpMaster": [[15, "        m = dump.DumpMaster(o, with_termlog=False, with_dumper=False)"]]}, "o": {"Options": [[14, "        o = options.Options(**opts)"]]}}, "param": {"self": {"TestDumpMaster": [[13, "    def mkmaster(self, **opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_dump.TestDumpMaster.test_addons_dumper": {"var": {"m": {"DumpMaster": [[36, "            m = dump.DumpMaster(o, with_dumper=dumper)"]]}, "o": {"Options": [[35, "            o = options.Options()"]]}}, "param": {"self": {"TestDumpMaster": [[33, "    def test_addons_dumper(self, dumper):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/jpeg.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp0.__init": {"param": {"_io": {"?": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segment.__init": {"var": {"_on": {"MarkerEnum": [[80, "                _on = self.marker"]]}}, "param": {"_io": {"?": [[70, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp1.__ini": {"param": {"_parent": {"None": [[130, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[130, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.__init": {"param": {"_io": {"?": [[25, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.Component.__ini": {"param": {"_parent": {"None": [[120, "            def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[120, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.__ini": {"param": {"_parent": {"None": [[141, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[141, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.__init__": {"var": {"i": {"int": [[112, "            for i in range(self.num_components):"]]}}, "param": {"self": {"SegmentSos": [[106, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jp": {"class": {"SegmentSof0": {"<SegmentSof0>": [[140, "    class SegmentSof0(KaitaiStruct):"]]}, "SegmentSos": {"<SegmentSos>": [[105, "    class SegmentSos(KaitaiStruct):"]]}, "Segment": {"<Segment>": [[34, "    class Segment(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.Compone": {"func": {"__init__": {"? -> ?": [[120, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp0.DensityU": {"var": {"no_units": {"int": [[195, "            no_units = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Component.__init__": {"param": {"self": {"Component": [[155, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.j": {"class": {"Jpeg": {"<Jpeg>": [[17, "class Jpeg(KaitaiStruct):"]]}, "ExifInJpeg": {"<ExifInJpeg>": [[181, "    class ExifInJpeg(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segment.__init__": {"var": {"io": {"?": [[83, "                    io = KaitaiStream(BytesIO(self._raw_data))"], [87, "                    io = KaitaiStream(BytesIO(self._raw_data))"], [91, "                    io = KaitaiStream(BytesIO(self._raw_data))"], [95, "                    io = KaitaiStream(BytesIO(self._raw_data))"]]}}, "param": {"self": {"Segment": [[70, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp0.__init__": {"param": {"self": {"SegmentApp0": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp0.DensityUnit": {"var": {"pixels_per_cm": {"int": [[197, "            pixels_per_cm = 2"]]}, "pixels_per_inch": {"int": [[196, "            pixels_per_inch = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp1.__init": {"var": {"_on": {"?": [[135, "            _on = self.magic"]]}}, "param": {"_io": {"?": [[130, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.Component.__init__": {"param": {"self": {"Component": [[120, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Component": {"func": {"sampling_x": {"Component -> int": [[164, "            def sampling_x(self):"]]}, "sampling_y": {"Component -> int": [[172, "            def sampling_y(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0": {"class": {"Component": {"<Component>": [[154, "        class Component(KaitaiStruct):"]]}}, "func": {"__init__": {"? -> ?": [[141, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.ExifInJpeg.__init__": {"var": {"io": {"?": [[188, "            io = KaitaiStream(BytesIO(self._raw_data))"]]}}, "param": {"self": {"ExifInJpeg": [[182, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.__init": {"param": {"_io": {"?": [[141, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.ExifInJpeg": {"func": {"__init__": {"? -> ?": [[182, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.ExifInJpeg.__ini": {"param": {"_parent": {"None": [[182, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[182, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.__init__": {"param": {"self": {"Jpeg": [[25, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.__ini": {"param": {"_parent": {"None": [[106, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[106, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.__init": {"param": {"_io": {"?": [[106, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Component.__ini": {"param": {"_parent": {"None": [[155, "            def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[155, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos": {"class": {"Component": {"<Component>": [[119, "        class Component(KaitaiStruct):"]]}}, "func": {"__init__": {"? -> ?": [[106, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segme": {"func": {"__init__": {"? -> ?": [[70, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp1.__init__": {"param": {"self": {"SegmentApp1": [[130, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.__init__": {"var": {"i": {"int": [[150, "            for i in range(self.num_components):"]]}}, "param": {"self": {"SegmentSof0": [[141, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSos.Component.__init": {"param": {"_io": {"?": [[120, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.J": {"class": {"SegmentApp1": {"<SegmentApp1>": [[129, "    class SegmentApp1(KaitaiStruct):"]]}, "SegmentApp0": {"<SegmentApp0>": [[192, "    class SegmentApp0(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp0": {"class": {"DensityUnit": {"<DensityUnit>": [[194, "        class DensityUnit(Enum):"]]}}, "func": {"__init__": {"? -> ?": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp1": {"func": {"__init__": {"? -> ?": [[130, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.ComponentId": {"var": {"y": {"int": [[20, "        y = 1"]]}, "cb": {"int": [[21, "        cb = 2"]]}, "q": {"int": [[24, "        q = 5"]]}, "i": {"int": [[23, "        i = 4"]]}, "cr": {"int": [[22, "        cr = 3"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Component.__init": {"param": {"_io": {"?": [[155, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Compone": {"func": {"__init__": {"? -> ?": [[155, "            def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segment.__ini": {"param": {"_parent": {"Jpeg": [[70, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Jpeg": [[70, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segment": {"class": {"MarkerEnum": {"<MarkerEnum>": [[36, "        class MarkerEnum(Enum):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Component.sampling_y": {"param": {"self": {"Component": [[172, "            def sampling_y(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentSof0.Component.sampling_x": {"param": {"self": {"Component": [[164, "            def sampling_x(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.__ini": {"param": {"_parent": {"None": [[25, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[25, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.SegmentApp0.__ini": {"param": {"_parent": {"None": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segment.MarkerEnum": {"var": {"soi": {"int": [[46, "            soi = 216"]]}, "app12": {"int": [[65, "            app12 = 236"]]}, "app11": {"int": [[64, "            app11 = 235"]]}, "app10": {"int": [[63, "            app10 = 234"]]}, "app15": {"int": [[68, "            app15 = 239"]]}, "app14": {"int": [[67, "            app14 = 238"]]}, "sos": {"int": [[48, "            sos = 218"]]}, "dqt": {"int": [[49, "            dqt = 219"]]}, "dnl": {"int": [[50, "            dnl = 220"]]}, "app13": {"int": [[66, "            app13 = 237"]]}, "sof0": {"int": [[38, "            sof0 = 192"]]}, "sof1": {"int": [[39, "            sof1 = 193"]]}, "sof2": {"int": [[40, "            sof2 = 194"]]}, "dht": {"int": [[42, "            dht = 196"]]}, "sof5": {"int": [[43, "            sof5 = 197"]]}, "sof6": {"int": [[44, "            sof6 = 198"]]}, "dhp": {"int": [[52, "            dhp = 222"]]}, "sof3": {"int": [[41, "            sof3 = 195"]]}, "app9": {"int": [[62, "            app9 = 233"]]}, "app8": {"int": [[61, "            app8 = 232"]]}, "app7": {"int": [[60, "            app7 = 231"]]}, "app6": {"int": [[59, "            app6 = 230"]]}, "app5": {"int": [[58, "            app5 = 229"]]}, "app4": {"int": [[57, "            app4 = 228"]]}, "app3": {"int": [[56, "            app3 = 227"]]}, "app2": {"int": [[55, "            app2 = 226"]]}, "app1": {"int": [[54, "            app1 = 225"]]}, "app0": {"int": [[53, "            app0 = 224"]]}, "dri": {"int": [[51, "            dri = 221"]]}, "sof7": {"int": [[45, "            sof7 = 199"]]}, "eoi": {"int": [[47, "            eoi = 217"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg": {"class": {"ComponentId": {"<ComponentId>": [[19, "    class ComponentId(Enum):"]]}}, "func": {"__init__": {"? -> ?": [[25, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.ExifInJpeg.__init": {"param": {"_io": {"?": [[182, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.jpeg.Jpeg.Segment.MarkerEnu": {"var": {"com": {"int": [[69, "            com = 254"]]}, "tem": {"int": [[37, "            tem = 1"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/command_lexer.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command_lex": {"var": {"PartialQuotedString": {"?": [[10, "PartialQuotedString = pyparsing.Regex("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command_lexer": {"func": {"unquote": {"str -> str / ? -> ?": [[38, "def unquote(x: str) -> str:"]]}, "quote": {"? -> str": [[32, "def quote(val: str) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command_l": {"var": {"expr": {"?": [[25, "expr = pyparsing.ZeroOrMore("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command_lexer.un": {"var": {"quoted": {"int": [[39, "    quoted = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command_lexer.unquote": {"var": {"x": {"str": [[48, "            x = x[1:-1]"]], "?": [[46, "            x = ast.literal_eval(x)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/save.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.tcp_end": {"param": {"self": {"Save": [[83, "    def tcp_end(self, flow):"]]}, "flow": {"?": [[83, "    def tcp_end(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.response": {"param": {"flow": {"?": [[97, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save": {"func": {"load": {"(Save, ?) -> None": [[19, "    def load(self, loader):"]]}, "tcp_start": {"(Save, ?) -> None": [[79, "    def tcp_start(self, flow):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.websocket_start": {"param": {"self": {"Save": [[88, "    def websocket_start(self, flow):"]]}, "flow": {"?": [[88, "    def websocket_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.start_stream_to_path": {"var": {"f": {"file": [[40, "            f = self.open_file(path)"]]}}, "param": {"self": {"Save": [[38, "    def start_stream_to_path(self, path, flt):"]]}, "flt": {"None": [[38, "    def start_stream_to_path(self, path, flt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.s": {"class": {"Save": {"<Save>": [[13, "class Save:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.__init__": {"param": {"self": {"Save": [[14, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.respon": {"param": {"self": {"Save": [[97, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.load": {"param": {"self": {"Save": [[19, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Sav": {"param": {"loader": {"?": [[19, "    def load(self, loader):"]]}}, "func": {"configure": {"(Save, ?) -> None": [[46, "    def configure(self, updated):"]]}, "open_file": {"(Save, ?) -> file / (Save, str) -> file": [[29, "    def open_file(self, path):"]]}, "start_stream_to_path": {"(Save, ?, None) -> ? / (Save, ?, ?) -> ?": [[38, "    def start_stream_to_path(self, path, flt):"]]}, "request": {"(Save, ?) -> None": [[102, "    def request(self, flow):"]]}, "websocket_end": {"(Save, ?) -> None": [[92, "    def websocket_end(self, flow):"]]}, "websocket_start": {"(Save, ?) -> None": [[88, "    def websocket_start(self, flow):"]]}, "done": {"Save -> None": [[106, "    def done(self):"]]}, "tcp_end": {"(Save, ?) -> None": [[83, "    def tcp_end(self, flow):"]]}, "response": {"(Save, ?) -> None": [[97, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.done": {"var": {"f": {"?": [[108, "            for f in self.active_flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.request": {"param": {"self": {"Save": [[102, "    def request(self, flow):"]]}, "flow": {"?": [[102, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.open_fil": {"var": {"mode": {"str": [[32, "            mode = \"ab\""], [34, "            mode = \"wb\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.start_stream_to_": {"param": {"path": {"?": [[38, "    def start_stream_to_path(self, path, flt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.websocket_end": {"param": {"self": {"Save": [[92, "    def websocket_end(self, flow):"]]}, "flow": {"?": [[92, "    def websocket_end(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.S": {"func": {"save": {"(Save, ?, ?) -> ? / (Save, [?], str) -> ?": [[64, "    def save(self, flows: typing.Sequence[flow.Flow], path: mitmproxy.types.Path) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.open_fi": {"param": {"self": {"Save": [[29, "    def open_file(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.sav": {"var": {"stream": {"FlowWriter": [[73, "        stream = io.FlowWriter(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.tcp_start": {"param": {"self": {"Save": [[79, "    def tcp_start(self, flow):"]]}, "flow": {"?": [[79, "    def tcp_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.open_file": {"var": {"path": {"?": [[31, "            path = path[1:]"], [35, "        path = os.path.expanduser(path)"]]}}, "param": {"path": {"str": [[29, "    def open_file(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.save": {"var": {"i": {"?": [[74, "        for i in flows:"]]}, "f": {"file": [[70, "            f = self.open_file(path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.don": {"param": {"self": {"Save": [[106, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.save.Save.configur": {"param": {"self": {"Save": [[46, "    def configure(self, updated):"]]}, "updated": {"?": [[46, "    def configure(self, updated):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_onboarding.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding.TestApp.test_head": {"var": {"p": {"?": [[35, "            p = self.pathoc()"]]}, "resp": {"?": [[37, "                resp = p.request(\"head:'http://%s/cert/%s'\" % (tctx.options.onboarding_host, ext))"]]}, "ob": {"Onboarding": [[32, "        ob = onboarding.Onboarding()"]]}}, "param": {"self": {"TestApp": [[31, "    async def test_head(self, ext):"]]}, "ext": {"?": [[31, "    async def test_head(self, ext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding": {"class": {"TestApp": {"<TestApp>": [[8, "class TestApp(tservers.HTTPProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding.TestApp.test_basic": {"var": {"ob": {"Onboarding": [[14, "        ob = onboarding.Onboarding()"]]}}, "param": {"self": {"TestApp": [[13, "    async def test_basic(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding.TestApp.test_cer": {"param": {"ext": {"?": [[21, "    async def test_cert(self, ext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding.TestApp.test_cert": {"var": {"resp": {"?": [[25, "            resp = self.app(\"/cert/%s\" % ext)"]]}, "ob": {"Onboarding": [[22, "        ob = onboarding.Onboarding()"]]}}, "param": {"self": {"TestApp": [[21, "    async def test_cert(self, ext):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding.TestApp.addon": {"param": {"self": {"TestApp": [[9, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_onboarding.TestApp": {"func": {"addons": {"TestApp -> [Onboarding]": [[9, "    def addons(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/writer.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.writer.write_valu": {"var": {"offset": {"int": [[36, "            offset = 0"]]}}, "param": {"blocksize": {"int": [[21, "def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.writer.write_value": {"var": {"sofar": {"int": [[32, "    sofar = 0"]]}}, "param": {"vals": {"{None | [?] | [str]}": [[21, "def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):"]]}, "sofar": {"int": [[21, "def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):"]]}, "actions": {"{[(int, str)] | [(int, str, int)] | [(int, str, str)] | [?]}": [[21, "def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.writer.send_chunk": {"var": {"i": {"int": [[14, "    for i in range(start, end, blocksize):"]]}}, "param": {"fp": {"?": [[10, "def send_chunk(fp, val, blocksize, start, end):"]]}, "start": {"int": [[10, "def send_chunk(fp, val, blocksize, start, end):"]]}, "end": {"int": [[10, "def send_chunk(fp, val, blocksize, start, end):"]]}, "val": {"str": [[10, "def send_chunk(fp, val, blocksize, start, end):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.writer.send_chun": {"param": {"blocksize": {"int": [[10, "def send_chunk(fp, val, blocksize, start, end):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.languag": {"func": {"write_values": {"(?, [str], [(int, str)], int, int) -> bool / (?, [str], [?], int, int) -> bool / (?, [?], [(int, str)], int, int) -> bool / (?, [str], [(int, str, int)], int, int) -> bool / (?, ?, [?], int, int) -> bool / (?, [str], [(int, str, str)], int, int) -> bool / (?, ?, [(int, str, int)], int, int) -> bool / (?, ?, ?, int, int) -> bool / (?, None, [?], int, int) -> bool": [[21, "def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.writer": {"var": {"BLOCKSIZE": {"int": [[4, "BLOCKSIZE = 1024"]]}, "FOREVER": {"int": [[7, "FOREVER = 60 * 60 * 24 * 365"]]}}, "func": {"send_chunk": {"(?, ?, ?, ?, ?) -> None / (?, None, int, int, int) -> int / (?, ?, int, int, int) -> int / (?, str, int, int, int) -> int": [[10, "def send_chunk(fp, val, blocksize, start, end):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.writer.write_values": {"var": {"a": {"None": [[38, "                a = actions.pop()"], [58, "            a = actions.pop()"]]}, "v": {"None": [[35, "            v = vals.pop()"]]}}, "param": {"fp": {"?": [[21, "def write_values(fp, vals, actions, sofar=0, blocksize=BLOCKSIZE):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_javascript.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_javascrip": {"func": {"test_format_xml": {"(?, ?) -> None": [[22, "def test_format_xml(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_javascript.test_view_javascript": {"var": {"v": {"?": [[8, "    v = full_eval(javascript.ViewJavaScript())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_javascript.test_format_xml": {"var": {"expected": {"str": [[27, "        expected = f.read()"]]}, "path": {"?": [[23, "    path = tdata.path(\"mitmproxy/contentviews/test_js_data/\" + filename)"]]}, "js": {"None": [[28, "    js = javascript.beautify(input)"]]}, "input": {"str": [[25, "        input = f.read()"]]}}, "param": {"tdata": {"?": [[22, "def test_format_xml(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_javascript": {"() -> None": [[7, "def test_view_javascript():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_javascript.test_format_x": {"param": {"filename": {"?": [[22, "def test_format_xml(filename, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/google_protobuf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf._read": {"param": {"self": {"GoogleProtobuf": [[50, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pai": {"func": {"_read": {"Pair -> None": [[72, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.DelimitedBytes": {"func": {"_read": {"DelimitedBytes -> None": [[119, "        def _read(self):"]]}, "__init__": {"? -> ?": [[113, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.WireTypes": {"var": {"varint": {"int": [[60, "            varint = 0"]]}, "len_delimited": {"int": [[62, "            len_delimited = 2"]]}, "group_end": {"int": [[64, "            group_end = 4"]]}, "bit_64": {"int": [[61, "            bit_64 = 1"]]}, "bit_32": {"int": [[65, "            bit_32 = 5"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_p": {"class": {"GoogleProtobuf": {"<GoogleProtobuf>": [[12, "class GoogleProtobuf(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.DelimitedBytes.__init__": {"param": {"self": {"DelimitedBytes": [[113, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.__init__": {"param": {"self": {"Pair": [[66, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.__ini": {"param": {"_parent": {"GoogleProtobuf": [[66, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"GoogleProtobuf": [[66, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.wire_typ": {"param": {"self": {"Pair": [[85, "        def wire_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.__init": {"param": {"_io": {"?": [[66, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair": {"func": {"field_tag": {"Pair -> int": [[101, "        def field_tag(self):"]]}, "__init__": {"? -> ?": [[66, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pa": {"class": {"WireTypes": {"<WireTypes>": [[59, "        class WireTypes(Enum):"]]}}, "func": {"wire_type": {"Pair -> None": [[85, "        def wire_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.__init__": {"param": {"self": {"GoogleProtobuf": [[44, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.DelimitedBytes._read": {"param": {"self": {"DelimitedBytes": [[119, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.WireType": {"var": {"group_start": {"int": [[63, "            group_start = 3"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.DelimitedBytes.__init": {"param": {"_io": {"?": [[113, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair.field_tag": {"param": {"self": {"Pair": [[101, "        def field_tag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.DelimitedBytes.__ini": {"param": {"_parent": {"None": [[113, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[113, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.__ini": {"param": {"_parent": {"None": [[44, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[44, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf": {"class": {"Pair": {"<Pair>": [[56, "    class Pair(KaitaiStruct):"]]}, "DelimitedBytes": {"<DelimitedBytes>": [[112, "    class DelimitedBytes(KaitaiStruct):"]]}}, "func": {"_read": {"GoogleProtobuf -> None": [[50, "    def _read(self):"]]}, "__init__": {"? -> ?": [[44, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.__init": {"param": {"_io": {"?": [[44, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.google_protobuf.GoogleProtobuf.Pair._read": {"var": {"_on": {"Pair -> None": [[74, "            _on = self.wire_type"]]}}, "param": {"self": {"Pair": [[72, "        def _read(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_pathoc.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_showresp": {"var": {"reqs": {"[str]": [[129, "        reqs = [\"get:/p/200:da\", \"get:/p/200:da\"]"]]}}, "param": {"self": {"TestDaemon": [[128, "    def test_showresp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_websocket_shutdown": {"param": {"self": {"TestDaemon": [[155, "    def test_websocket_shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.PathocTestDaemon.tval": {"var": {"i": {"str": [[33, "            for i in requests:"]]}, "s": {"?": [[23, "        s = io.StringIO()"]]}, "r": {"?": [[34, "                r = next(language.parse_pathoc(i))"], [36, "                    r = r.freeze(language.Settings())"]]}, "c": {"Pathoc": [[24, "        c = pathoc.Pathoc("]]}}, "param": {"requests": {"[str]": [[22, "    def tval(self, requests, timeout=None, showssl=False, **kwargs):"]]}, "timeout": {"None": [[22, "    def tval(self, requests, timeout=None, showssl=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_showreq": {"param": {"self": {"TestDaemon": [[145, "    def test_showreq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.PathocTestDaemon": {"func": {"tval": {"(TestDaemonSSL, [str], None, bool) -> ? / (PathocTestDaemon, ?, None, bool) -> ? / (TestDaemon, [str], None, bool) -> ?": [[22, "    def tval(self, requests, timeout=None, showssl=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonHTTP2.test_http2": {"var": {"c": {"Pathoc": [[219, "        c = pathoc.Pathoc("], [227, "        c = pathoc.Pathoc("]]}}, "param": {"self": {"TestDaemonHTTP2": [[218, "    def test_http2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonHTTP": {"func": {"test_http2": {"TestDaemonHTTP2 -> None": [[218, "    def test_http2(self):"]]}, "test_http2_alpn": {"TestDaemonHTTP2 -> None": [[232, "    def test_http2_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_wait_finish": {"var": {"c": {"Pathoc": [[159, "        c = pathoc.Pathoc("]]}}, "param": {"self": {"TestDaemon": [[158, "    def test_wait_finish(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon": {"var": {"ssl": {"bool": [[85, "    ssl = False"]]}}, "func": {"_test_timeout": {"TestDaemon -> None": [[114, "    def _test_timeout(self):"]]}, "test_showresp_httperr": {"TestDaemon -> None": [[136, "    def test_showresp_httperr(self):"]]}, "test_showreq": {"TestDaemon -> None": [[145, "    def test_showreq(self):"]]}, "test_ssl_error": {"TestDaemon -> ?": [[87, "    def test_ssl_error(self):"]]}, "test_showssl": {"TestDaemon -> None": [[97, "    def test_showssl(self):"]]}, "test_showresp": {"TestDaemon -> None": [[128, "    def test_showresp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_showresp_httperr": {"var": {"v": {"?": [[137, "        v = self.tval([\"get:'/p/200:d20'\"], showresp=True, showsummary=True)"]]}}, "param": {"self": {"TestDaemon": [[136, "    def test_showresp_httperr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL.test_clientcert": {"var": {"log": {"?": [[69, "        log = self.d.log()"]]}}, "param": {"self": {"TestDaemonSSL": [[64, "    def test_clientcert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.PathocTestDaemon.tva": {"param": {"self": {"{PathocTestDaemon | TestDaemon | TestDaemonSSL}": [[22, "    def tval(self, requests, timeout=None, showssl=False, **kwargs):"]]}, "showssl": {"bool": [[22, "    def tval(self, requests, timeout=None, showssl=False, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL.test_clientcer": {"param": {"tdata": {"?": [[64, "    def test_clientcert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_socks_connect": {"var": {"c": {"Pathoc": [[189, "        c = pathoc.Pathoc((\"127.0.0.1\", self.d.port), fp=None)"]]}}, "param": {"self": {"TestDaemon": [[187, "    def test_socks_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_ignorecod": {"param": {"self": {"TestDaemon": [[102, "    def test_ignorecodes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_conn_err": {"param": {"self": {"TestDaemon": [[152, "    def test_conn_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonHTTP2.test_request": {"var": {"c": {"Pathoc": [[249, "        c = pathoc.Pathoc("]]}, "resp": {"Response": [[256, "            resp = c.request(\"get:/p/200\")"]]}}, "param": {"self": {"TestDaemonHTTP2": [[248, "    def test_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemo": {"func": {"test_wait_finish": {"TestDaemon -> None": [[158, "    def test_wait_finish(self):"]]}, "test_explain": {"TestDaemon -> None": [[141, "    def test_explain(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc": {"class": {"TestDaemon": {"<TestDaemon>": [[84, "class TestDaemon(PathocTestDaemon):"]]}, "TestDaemonHTTP2": {"<TestDaemonHTTP2>": [[214, "class TestDaemonHTTP2(PathocTestDaemon):"]]}, "TestDaemonSSL": {"<TestDaemonSSL>": [[45, "class TestDaemonSSL(PathocTestDaemon):"]]}}, "func": {"test_response": {"() -> None": [[16, "def test_response():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL": {"var": {"ssl": {"bool": [[46, "    ssl = True"]]}, "ssloptions": {"dict": [[47, "    ssloptions = dict("]]}}, "func": {"test_sni": {"TestDaemonSSL -> None": [[53, "    def test_sni(self):"]]}, "test_clientcert": {"(TestDaemonSSL, ?) -> None": [[64, "    def test_clientcert(self, tdata):"]]}, "test_showssl": {"TestDaemonSSL -> None": [[61, "    def test_showssl(self):"]]}, "test_http2_without_ssl": {"TestDaemonSSL -> None": [[72, "    def test_http2_without_ssl(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_connect_fail": {"var": {"to": {"(str, int)": [[172, "        to = (\"foobar\", 80)"]]}, "c": {"Pathoc": [[173, "        c = pathoc.Pathoc((\"127.0.0.1\", self.d.port), fp=None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL.test_http2_without_ssl": {"var": {"fp": {"?": [[73, "        fp = io.StringIO()"]]}, "c": {"Pathoc": [[74, "        c = pathoc.Pathoc("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonHTTP2.test_http2_alpn": {"var": {"c": {"Pathoc": [[233, "        c = pathoc.Pathoc("]]}, "_": {"?": [[245, "            _, kwargs = c.convert_to_tls.call_args"]]}}, "param": {"self": {"TestDaemonHTTP2": [[232, "    def test_http2_alpn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_show": {"var": {"reqs": {"[str]": [[146, "        reqs = [\"get:/p/200:da\", \"get:/p/200:da\"]"]]}}, "param": {"self": {"TestDaemon": [[97, "    def test_showssl(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_connect_fai": {"param": {"self": {"TestDaemon": [[171, "    def test_connect_fail(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL.test_sni": {"var": {"log": {"?": [[58, "        log = self.d.log()"]]}}, "param": {"self": {"TestDaemonSSL": [[53, "    def test_sni(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon._test_timeout": {"param": {"self": {"TestDaemon": [[114, "    def _test_timeout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.test_response": {"var": {"r": {"Response": [[17, "    r = http.Response(b\"HTTP/1.1\", 200, b\"Message\", {}, None, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonHTTP2": {"var": {"ssl": {"bool": [[215, "    ssl = True"]]}, "explain": {"bool": [[216, "    explain = False"]]}}, "func": {"test_request": {"TestDaemonHTTP2 -> None": [[248, "    def test_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL.test_show": {"param": {"self": {"TestDaemonSSL": [[61, "    def test_showssl(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_socks_connec": {"var": {"to": {"(str, int)": [[188, "        to = (\"foobar\", 80)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonHTTP2.test_http2_a": {"var": {"tmp_convert_to_tls": {"(ServerConnection, None, None) -> ? / (TCPClient, None, None) -> ? / (Pathoc, None, None) -> ? / (<Pathoc>, None, None) -> ?": [[241, "        tmp_convert_to_tls = c.convert_to_tls"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaem": {"func": {"test_websocket_shutdown": {"TestDaemon -> None": [[155, "    def test_websocket_shutdown(self):"]]}, "test_connect_fail": {"TestDaemon -> None": [[171, "    def test_connect_fail(self):"]]}, "test_conn_err": {"TestDaemon -> None": [[152, "    def test_conn_err(self):"]]}, "test_ignorecodes": {"TestDaemon -> None": [[102, "    def test_ignorecodes(self):"]]}, "test_socks_connect": {"TestDaemon -> None": [[187, "    def test_socks_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_explain": {"var": {"reqs": {"[str]": [[142, "        reqs = [\"get:/p/200:b@100\"]"]]}}, "param": {"self": {"TestDaemon": [[141, "    def test_explain(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemon.test_ssl_error": {"var": {"c": {"Pathoc": [[88, "        c = pathoc.Pathoc((\"127.0.0.1\", self.d.port), ssl=True, fp=None)"]]}}, "param": {"self": {"TestDaemon": [[87, "    def test_ssl_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc.TestDaemonSSL.test_http2_without_": {"param": {"self": {"TestDaemonSSL": [[72, "    def test_http2_without_ssl(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_p": {"class": {"PathocTestDaemon": {"<PathocTestDaemon>": [[21, "class PathocTestDaemon(tservers.DaemonTests):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/urlencoded.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.urlencoded.ViewURLEncoded.__call__": {"var": {"data": {"?": [[11, "            data = data.decode(\"ascii\", \"strict\")"]]}, "d": {"None": [[14, "        d = url.decode(data)"]]}}, "param": {"self": {"ViewURLEncoded": [[9, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[9, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.urlencoded.ViewURLEncoded": {"var": {"content_types": {"[str]": [[7, "    content_types = [\"application/x-www-form-urlencoded\"]"]]}, "name": {"str": [[6, "    name = \"URL-encoded\""]]}}, "func": {"__call__": {"(ViewURLEncoded, ?) -> (str, ?)": [[9, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.url": {"class": {"ViewURLEncoded": {"<ViewURLEncoded>": [[5, "class ViewURLEncoded(base.View):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_addonmanager.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_": {"var": {"halt": {"THalt": [[57, "    halt = THalt()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.THalt.running": {"param": {"self": {"THalt": [[38, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_halt": {"var": {"a": {"AddonManager": [[56, "    a = addonmanager.AddonManager(m)"]]}, "end": {"TAddon": [[58, "    end = TAddon(\"end\")"]]}, "m": {"Master": [[55, "    m = master.Master(o)"]]}, "o": {"Options": [[54, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_simple": {"var": {"a": {"?": [[118, "        a = tctx.master.addons"]]}, "ta": {"TAddon": [[146, "        ta = TAddon(\"one\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddon.running": {"param": {"self": {"TAddon": [[33, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddon.__init__": {"param": {"self": {"TAddon": [[16, "    def __init__(self, name, addons=None):"]]}, "addons": {"None": [[16, "    def __init__(self, name, addons=None):"]]}, "name": {"str": [[16, "    def __init__(self, name, addons=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_loader": {"var": {"l": {"Loader": [[97, "            l = addonmanager.Loader(tctx.master)"]]}}, "func": {"cmd": {"? -> str": [[109, "            def cmd(a: str) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.AOption.load": {"param": {"self": {"AOption": [[43, "    def load(self, l):"]]}, "l": {"?": [[43, "    def load(self, l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddo": {"func": {"running": {"TAddon -> None": [[33, "    def running(self):"]]}, "__init__": {"? -> ?": [[16, "    def __init__(self, name, addons=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddon.__repr__": {"param": {"self": {"TAddon": [[27, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.D.log": {"param": {"x": {"?": [[197, "    def log(self, x):"]]}, "self": {"D": [[197, "    def log(self, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.D": {"func": {"log": {"(D, ?) -> None": [[197, "    def log(self, x):"]]}, "__init__": {"? -> ?": [[194, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_load_option": {"var": {"a": {"AddonManager": [[157, "    a = addonmanager.AddonManager(m)"]]}, "m": {"Master": [[156, "    m = master.Master(o)"]]}, "o": {"Options": [[155, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddon.don": {"param": {"self": {"TAddon": [[30, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.AOption": {"func": {"load": {"(AOption, ?) -> None": [[43, "    def load(self, l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TA": {"func": {"done": {"TAddon -> None": [[30, "    def done(self):"]]}, "testcommand": {"TAddon -> str": [[24, "    def testcommand(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager": {"class": {"TAddon": {"<TAddon>": [[15, "class TAddon:"]]}, "THalt": {"<THalt>": [[37, "class THalt:"]]}, "AOption": {"<AOption>": [[42, "class AOption:"]]}, "D": {"<D>": [[193, "class D:"]]}}, "func": {"test_load_option": {"() -> None": [[154, "def test_load_option():"]]}, "test_halt": {"() -> None": [[53, "def test_halt():"]]}, "test_defaults": {"() -> None": [[89, "def test_defaults():"]]}, "test_command": {"() -> None": [[47, "def test_command():"]]}, "test_nesting": {"() -> None": [[162, "def test_nesting():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.THalt": {"func": {"running": {"THalt -> None": [[38, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddon.testcommand": {"param": {"self": {"TAddon": [[24, "    def testcommand(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_nesting": {"var": {"a": {"AddonManager": [[165, "    a = addonmanager.AddonManager(m)"]]}, "m": {"Master": [[164, "    m = master.Master(o)"]]}, "o": {"Options": [[163, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.TAddon": {"func": {"__repr__": {"TAddon -> str": [[27, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.D.__init__": {"param": {"self": {"D": [[194, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_addonmanager.test_lifecycle": {"var": {"a": {"AddonManager": [[75, "    a = addonmanager.AddonManager(m)"]]}, "m": {"Master": [[74, "    m = master.Master(o)"]]}, "o": {"Options": [[73, "    o = options.Options()"]]}, "f": {"?": [[83, "    f = tflow.tflow()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/commands-paths.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-paths.MyAddon": {"func": {"histogram": {"(MyAddon, ?, ?) -> None": [[12, "    def histogram("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-paths.MyAddon.histogram": {"var": {"cnt": {"?": [[22, "            for cnt, dom in sorted([(v, k) for (k, v) in totals.items()]):"]]}, "f": {"?": [[18, "        for f in flows:"]]}, "self": {"MyAddon": [[13, "        self,"]]}, "flows": {"?": [[14, "        flows: typing.Sequence[flow.Flow],"]]}, "totals": {"dict": [[17, "        totals = {}"]]}, "path": {"?": [[15, "        path: types.Path,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-path": {"var": {"addons": {"[MyAddon]": [[28, "addons = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-paths": {"class": {"MyAddon": {"<MyAddon>": [[10, "class MyAddon:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/test_wsgi.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.ExampleApp": {"func": {"__call__": {"(ExampleApp, ?, ?) -> [str]": [[18, "    def __call__(self, environ, start_response):"]]}, "__init__": {"? -> ?": [[15, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_single_err.app": {"var": {"status": {"str": [[88, "            status = '200 OK'"]]}, "ei": {"?": [[87, "                ei = sys.exc_info()"]]}}, "param": {"environ": {"?": [[83, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI._serve": {"var": {"w": {"WSGIAdaptor": [[54, "        w = wsgi.WSGIAdaptor(app, \"foo\", 80, \"version\")"]]}, "f": {"Flow": [[55, "        f = tflow()"]]}}, "param": {"app": {"{(?, ?) -> ? | (?, ?) -> ? | (?, ?) -> [?] | (WSGIAdaptor, dict) -> ?}": [[53, "    def _serve(self, app):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_make_environ": {"var": {"tf": {"Flow": [[30, "        tf = tflow()"]]}, "r": {"dict": [[34, "        r = w.make_environ(tf, None)"]]}, "w": {"WSGIAdaptor": [[29, "        w = wsgi.WSGIAdaptor(None, \"foo\", 80, \"version\")"]]}}, "param": {"self": {"TestWSGI": [[28, "    def test_make_environ(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_double_err": {"param": {"self": {"TestWSGI": [[94, "    def test_serve_double_err(self):"]]}}, "func": {"app": {"(WSGIAdaptor, dict) -> ?": [[95, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi": {"class": {"TestWSGI": {"<TestWSGI>": [[26, "class TestWSGI:"]]}, "ExampleApp": {"<ExampleApp>": [[13, "class ExampleApp:"]]}}, "func": {"tflow": {"() -> Flow": [[7, "def tflow():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_double_start.app": {"var": {"status": {"str": [[76, "            status = '200 OK'"]]}}, "param": {"environ": {"?": [[71, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_singl": {"var": {"response_headers": {"[(str, str)]": [[89, "            response_headers = [('Content-type', 'text/plain')]"]]}}, "param": {"start_response": {"?": [[83, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.ExampleApp.__call__": {"var": {"status": {"str": [[20, "        status = '200 OK'"]]}}, "param": {"self": {"ExampleApp": [[18, "    def __call__(self, environ, start_response):"]]}, "environ": {"?": [[18, "    def __call__(self, environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_doubl": {"var": {"response_headers": {"[(str, str)]": [[101, "            response_headers = [('Content-type', 'text/plain')]"]]}}, "param": {"start_response": {"dict": [[95, "        def app(environ, start_response):"]], "?": [[71, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serv": {"var": {"wfile": {"?": [[44, "        wfile = BytesIO()"]]}, "err": {"?": [[45, "        err = w.serve(f, wfile)"]]}}, "param": {"self": {"TestWSGI": [[37, "    def test_serve(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI": {"func": {"_serve": {"(TestWSGI, (?, ?) -> ?) -> None / (TestWSGI, (?, ?) -> [?]) -> None / (TestWSGI, ?) -> None / (TestWSGI, (WSGIAdaptor, dict) -> ?) -> None": [[53, "    def _serve(self, app):"]]}, "test_serve_empty_body": {"TestWSGI -> None": [[62, "    def test_serve_empty_body(self):"]]}, "test_serve_single_err": {"TestWSGI -> None": [[82, "    def test_serve_single_err(self):"]]}, "test_serve_double_err": {"TestWSGI -> None": [[94, "    def test_serve_double_err(self):"]]}, "test_serve_double_start": {"TestWSGI -> None": [[70, "    def test_serve_double_start(self):"]]}, "test_make_environ": {"TestWSGI -> None": [[28, "    def test_make_environ(self):"]]}, "test_serve": {"TestWSGI -> None": [[37, "    def test_serve(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve": {"var": {"f": {"Flow": [[40, "        f = tflow()"]]}, "val": {"?": [[49, "        val = wfile.getvalue()"]]}, "w": {"WSGIAdaptor": [[39, "        w = wsgi.WSGIAdaptor(ta, \"foo\", 80, \"version\")"]]}, "ta": {"ExampleApp": [[38, "        ta = ExampleApp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_double_start": {"var": {"response_headers": {"[(str, str)]": [[77, "            response_headers = [('Content-type', 'text/plain')]"]]}}, "param": {"self": {"TestWSGI": [[70, "    def test_serve_double_start(self):"]]}}, "func": {"app": {"(?, ?) -> ?": [[71, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.ExampleApp.__init__": {"param": {"self": {"ExampleApp": [[15, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.ExampleApp.__call": {"var": {"response_headers": {"[(str, str)]": [[21, "        response_headers = [('Content-type', 'text/plain')]"]]}}, "param": {"start_response": {"?": [[18, "    def __call__(self, environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_empty_body": {"var": {"response_headers": {"[(str, str)]": [[65, "            response_headers = [('Foo', 'bar')]"]]}}, "param": {"start_response": {"?": [[63, "        def app(environ, start_response):"]]}, "self": {"TestWSGI": [[62, "    def test_serve_empty_body(self):"]]}}, "func": {"app": {"(?, ?) -> [?]": [[63, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI._serv": {"var": {"wfile": {"?": [[58, "        wfile = BytesIO()"]]}}, "param": {"self": {"TestWSGI": [[53, "    def _serve(self, app):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_single_err": {"param": {"self": {"TestWSGI": [[82, "    def test_serve_single_err(self):"]]}}, "func": {"app": {"(?, ?) -> ?": [[83, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_double_err.app": {"var": {"status": {"str": [[100, "            status = '200 OK'"]]}, "ei": {"?": [[99, "                ei = sys.exc_info()"]]}}, "param": {"environ": {"WSGIAdaptor": [[95, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.TestWSGI.test_serve_empty_body.app": {"var": {"status": {"str": [[64, "            status = '200 OK'"]]}}, "param": {"environ": {"?": [[63, "        def app(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_wsgi.tflow": {"var": {"headers": {"Headers": [[8, "    headers = Headers(test=b\"value\")"]]}, "req": {"Request": [[9, "    req = wsgi.Request(\"http\", \"GET\", \"/\", \"HTTP/1.1\", headers, \"\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/status_codes.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.status_codes": {"var": {"GONE": {"int": [[30, "GONE = 410"]]}, "MOVED_PERMANENTLY": {"int": [[13, "MOVED_PERMANENTLY = 301"]]}, "REQUESTED_RANGE_NOT_SATISFIABLE": {"int": [[36, "REQUESTED_RANGE_NOT_SATISFIABLE = 416"]]}, "PROXY_AUTH_REQUIRED": {"int": [[27, "PROXY_AUTH_REQUIRED = 407"]]}, "IM_A_TEAPOT": {"int": [[38, "IM_A_TEAPOT = 418"]]}, "LENGTH_REQUIRED": {"int": [[31, "LENGTH_REQUIRED = 411"]]}, "REQUEST_ENTITY_TOO_LARGE": {"int": [[33, "REQUEST_ENTITY_TOO_LARGE = 413"]]}, "ACCEPTED": {"int": [[5, "ACCEPTED = 202"]]}, "BAD_GATEWAY": {"int": [[42, "BAD_GATEWAY = 502"]]}, "REQUEST_TIMEOUT": {"int": [[28, "REQUEST_TIMEOUT = 408"]]}, "EXPECTATION_FAILED": {"int": [[37, "EXPECTATION_FAILED = 417"]]}, "USE_PROXY": {"int": [[17, "USE_PROXY = 305"]]}, "UNAUTHORIZED": {"int": [[21, "UNAUTHORIZED = 401"]]}, "MULTIPLE_CHOICE": {"int": [[12, "MULTIPLE_CHOICE = 300"]]}, "FORBIDDEN": {"int": [[23, "FORBIDDEN = 403"]]}, "NOT_MODIFIED": {"int": [[16, "NOT_MODIFIED = 304"]]}, "BAD_REQUEST": {"int": [[20, "BAD_REQUEST = 400"]]}, "GATEWAY_TIMEOUT": {"int": [[44, "GATEWAY_TIMEOUT = 504"]]}, "NON_AUTHORITATIVE_INFORMATION": {"int": [[6, "NON_AUTHORITATIVE_INFORMATION = 203"]]}, "PAYMENT_REQUIRED": {"int": [[22, "PAYMENT_REQUIRED = 402"]]}, "CONFLICT": {"int": [[29, "CONFLICT = 409"]]}, "SERVICE_UNAVAILABLE": {"int": [[43, "SERVICE_UNAVAILABLE = 503"]]}, "TEMPORARY_REDIRECT": {"int": [[18, "TEMPORARY_REDIRECT = 307"]]}, "INTERNAL_SERVER_ERROR": {"int": [[40, "INTERNAL_SERVER_ERROR = 500"]]}, "PARTIAL_CONTENT": {"int": [[9, "PARTIAL_CONTENT = 206"]]}, "CREATED": {"int": [[4, "CREATED = 201"]]}, "RESET_CONTENT": {"int": [[8, "RESET_CONTENT = 205"]]}, "PRECONDITION_FAILED": {"int": [[32, "PRECONDITION_FAILED = 412"]]}, "NOT_ACCEPTABLE": {"int": [[26, "NOT_ACCEPTABLE = 406"]]}, "UNSUPPORTED_MEDIA_TYPE": {"int": [[35, "UNSUPPORTED_MEDIA_TYPE = 415"]]}, "INSUFFICIENT_STORAGE_SPACE": {"int": [[46, "INSUFFICIENT_STORAGE_SPACE = 507"]]}, "FOUND": {"int": [[14, "FOUND = 302"]]}, "NOT_FOUND": {"int": [[24, "NOT_FOUND = 404"]]}, "MULTI_STATUS": {"int": [[10, "MULTI_STATUS = 207"]]}, "SWITCHING": {"int": [[2, "SWITCHING = 101"]]}, "NOT_EXTENDED": {"int": [[47, "NOT_EXTENDED = 510"]]}, "OK": {"int": [[3, "OK = 200"]]}, "RESPONSES": {"dict": [[49, "RESPONSES = {"]]}, "NO_CONTENT": {"int": [[7, "NO_CONTENT = 204"]]}, "NOT_IMPLEMENTED": {"int": [[41, "NOT_IMPLEMENTED = 501"]]}, "CONTINUE": {"int": [[1, "CONTINUE = 100"]]}, "REQUEST_URI_TOO_LONG": {"int": [[34, "REQUEST_URI_TOO_LONG = 414"]]}, "NOT_ALLOWED": {"int": [[25, "NOT_ALLOWED = 405"]]}, "SEE_OTHER": {"int": [[15, "SEE_OTHER = 303"]]}, "HTTP_VERSION_NOT_SUPPORTED": {"int": [[45, "HTTP_VERSION_NOT_SUPPORTED = 505"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/http1/test_assemble.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_assemble.test_assemble_request_lin": {"var": {"authority_request": {"RequestData": [[68, "    authority_request = treq(method=b\"CONNECT\", first_line_format=\"authority\").data"]]}, "absolute_request": {"RequestData": [[71, "    absolute_request = treq(first_line_format=\"absolute\").data"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1": {"func": {"test_assemble_request_line": {"() -> None": [[65, "def test_assemble_request_line():"]]}, "test_assemble_response": {"() -> None": [[34, "def test_assemble_response():"]]}, "test_assemble_request_headers": {"() -> None": [[78, "def test_assemble_request_headers():"]]}, "test_assemble_request": {"() -> None": [[13, "def test_assemble_request():"]]}, "test_assemble_request_head": {"() -> None": [[26, "def test_assemble_request_head():"]]}, "test_assemble_response_headers": {"() -> None": [[86, "def test_assemble_response_headers():"]]}, "test_assemble_body": {"() -> None": [[54, "def test_assemble_body():"]]}, "test_assemble_response_head": {"() -> None": [[47, "def test_assemble_response_head():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_assemble.test_assemble_body": {"var": {"c": {"list": [[55, "    c = list(assemble_body(Headers(), [b\"body\"]))"], [58, "    c = list(assemble_body(Headers(transfer_encoding=\"chunked\"), [b\"123456789a\", b\"\"]))"], [61, "    c = list(assemble_body(Headers(transfer_encoding=\"chunked\"), [b\"123456789a\"]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_assemble.test_assemble_request_headers": {"var": {"c": {"None": [[82, "    c = _assemble_request_headers(r.data)"]]}, "r": {"Request": [[80, "    r = treq(content=b\"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_assemble.test_assemble_request_head": {"var": {"c": {"None": [[27, "    c = assemble_request_head(treq(content=b\"foo\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_assemble.test_assemble_response_headers": {"var": {"c": {"?": [[90, "    c = _assemble_response_headers(r)"]]}, "r": {"Response": [[88, "    r = tresp(content=b\"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_assemble.test_assemble_response_head": {"var": {"c": {"None": [[48, "    c = assemble_response_head(tresp())"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_keymap.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap.test_binding": {"var": {"b": {"Binding": [[8, "    b = keymap.Binding(\"space\", \"cmd\", [\"options\"], \"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap.test_parse": {"var": {"kmc": {"KeymapConfig": [[151, "    kmc = keymap.KeymapConfig()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap.test_load_path": {"var": {"dst": {"str": [[76, "    dst = str(tmpdir.join(\"conf\"))"]]}, "kmc": {"KeymapConfig": [[78, "    kmc = keymap.KeymapConfig()"]]}, "km": {"Keymap": [[80, "        km = keymap.Keymap(tctx.master)"]]}}, "param": {"tmpdir": {"?": [[75, "def test_load_path(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap.test_bind": {"var": {"km": {"Keymap": [[14, "        km = keymap.Keymap(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap.test_remove": {"var": {"km": {"Keymap": [[62, "        km = keymap.Keymap(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap.test_join": {"var": {"km": {"Keymap": [[42, "        km = keymap.Keymap(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keymap": {"func": {"test_remove": {"() -> None": [[60, "def test_remove():"]]}, "test_join": {"() -> None": [[40, "def test_join():"]]}, "test_binding": {"() -> None": [[7, "def test_binding():"]]}, "test_bind": {"() -> None": [[12, "def test_bind():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_keym": {"func": {"test_load_path": {"? -> None": [[75, "def test_load_path(tmpdir):"]]}, "test_parse": {"() -> None": [[150, "def test_parse():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_strutils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_struti": {"func": {"test_escape_control_characters": {"() -> None": [[23, "def test_escape_control_characters():"]]}, "test_always_bytes": {"() -> None": [[6, "def test_always_bytes():"]]}, "test_always_str": {"() -> None": [[15, "def test_always_str():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_strutil": {"func": {"test_hexdump": {"() -> None": [[97, "def test_hexdump():"]]}, "test_bytes_to_escaped_str": {"() -> None": [[44, "def test_bytes_to_escaped_str():"]]}, "test_escaped_str_to_bytes": {"() -> None": [[67, "def test_escaped_str_to_bytes():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_strutils.test_escape_special_area": {"var": {"esc": {"None": [[126, "    esc = strutils.escape_special_areas('foo \"b*r\" b*z', ESCAPE_QUOTES, \"*\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_strutils.test_clean_hanging_newline": {"var": {"s": {"str": [[92, "    s = \"foo\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_stru": {"func": {"test_escape_special_areas": {"() -> None": [[124, "def test_escape_special_areas():"]]}, "test_clean_hanging_newline": {"() -> None": [[91, "def test_clean_hanging_newline():"]]}, "test_is_xml": {"() -> None": [[85, "def test_is_xml():"]]}, "test_is_mostly_bin": {"() -> None": [[79, "def test_is_mostly_bin():"]]}, "test_split_special_areas": {"() -> None": [[107, "def test_split_special_areas():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_strutils": {"var": {"ESCAPE_QUOTES": {"[str]": [[101, "ESCAPE_QUOTES = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/test_cmdline.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_cmdline.test_mitmweb": {"var": {"ap": {"None": [[33, "    ap = cmdline.mitmweb(opts)"]]}, "opts": {"Options": [[31, "    opts = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_cmdlin": {"func": {"test_mitmproxy": {"() -> None": [[16, "def test_mitmproxy():"]]}, "test_mitmdump": {"() -> None": [[23, "def test_mitmdump():"]]}, "test_mitmweb": {"() -> None": [[30, "def test_mitmweb():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_cmdli": {"func": {"test_common": {"() -> None": [[8, "def test_common():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_cmdline.test_mitmdum": {"var": {"ap": {"None": [[26, "    ap = cmdline.mitmdump(opts)"]]}, "opts": {"Options": [[24, "    opts = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_cmdline.test_common": {"var": {"args": {"?": [[12, "    args = parser.parse_args(args=[])"]]}, "parser": {"?": [[9, "    parser = argparse.ArgumentParser()"]]}, "opts": {"Options": [[10, "    opts = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_cmdline.test_mitmproxy": {"var": {"ap": {"None": [[19, "    ap = cmdline.mitmproxy(opts)"]]}, "opts": {"Options": [[17, "    opts = options.Options()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/defaultkeys.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.defaultkeys": {"func": {"map": {"? -> None / Keymap -> None": [[2, "def map(km):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.defaultkeys.map": {"param": {"km": {"Keymap": [[2, "def map(km):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_log.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmprox": {"func": {"test_logentry": {"() -> None": [[4, "def test_logentry():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_log.test_logentry": {"var": {"e": {"LogEntry": [[5, "    e = log.LogEntry(\"foo\", \"info\")"]]}, "f": {"LogEntry": [[8, "    f = log.LogEntry(\"foo\", \"warning\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/version.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.version": {"var": {"MITMPROXY": {"str": [[7, "MITMPROXY = \"mitmproxy \" + VERSION"]]}, "FLOW_FORMAT_VERSION": {"int": [[11, "FLOW_FORMAT_VERSION = 8"]]}, "PATHOD": {"str": [[6, "PATHOD = \"pathod \" + VERSION"]]}, "VERSION": {"str": [[5, "VERSION = \"6.0.0.dev\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"get_dev_version": {"() -> str": [[14, "def get_dev_version() -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.version.get_d": {"var": {"mitmproxy_version": {"str": [[19, "    mitmproxy_version = VERSION"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.version.get_dev_version": {"var": {"last_tag": {"?": [[36, "        last_tag, tag_dist_str, commit = git_describe.decode().strip().rsplit(\"-\", 2)"]]}, "tag_dist": {"int": [[38, "        tag_dist = int(tag_dist_str)"]]}, "git_describe": {"?": [[31, "        git_describe = subprocess.check_output("]]}, "here": {"str": [[21, "    here = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))"]]}, "commit": {"?": [[37, "        commit = commit.lstrip(\"g\")[:7]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/websockets/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets": {"var": {"__all__": {"[str]": [[18, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/layoutwidget.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidget": {"func": {"focus_changed": {"LayoutWidget -> None": [[19, "    def focus_changed(self):"]]}, "view_changed": {"LayoutWidget -> None": [[26, "    def view_changed(self):"]]}, "key_responder": {"OptionsEditor -> OptionsEditor / LayoutWidget -> LayoutWidget / DataViewer -> DataViewer": [[12, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidget.layout_pushed": {"param": {"self": {"LayoutWidget": [[38, "    def layout_pushed(self, prev):"]]}, "prev": {"?": [[38, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidge": {"func": {"layout_popping": {"LayoutWidget -> None": [[32, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutw": {"class": {"LayoutWidget": {"<LayoutWidget>": [[3, "class LayoutWidget:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidget.key_responder": {"param": {"self": {"{DataViewer | LayoutWidget | OptionsEditor}": [[12, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidg": {"var": {"keyctx": {"str": [[10, "    keyctx = \"\""]]}, "title": {"str": [[9, "    title = \"\""]]}}, "func": {"layout_pushed": {"(LayoutWidget, ?) -> None": [[38, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidget.view_changed": {"param": {"self": {"LayoutWidget": [[26, "    def view_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidget.focus_changed": {"param": {"self": {"LayoutWidget": [[19, "    def focus_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.layoutwidget.LayoutWidget.layout_popping": {"param": {"self": {"LayoutWidget": [[32, "    def layout_popping(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_headers.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.TestHeader": {"func": {"test_bytes": {"TestHeaders -> None": [[55, "    def test_bytes(self):"]]}, "_2host": {"TestHeaders -> Headers": [[8, "    def _2host(self):"]]}, "test_init": {"TestHeaders -> None": [[16, "    def test_init(self):"]]}, "test_set": {"TestHeaders -> None": [[46, "    def test_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.test_assemble_content_type": {"var": {"p": {"(str, str, ?) -> str / (str, str, dict) -> str / (?, ?, ?) -> str": [[79, "    p = assemble_content_type"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.TestHeaders.test_byt": {"var": {"headers": {"Headers": [[56, "        headers = Headers(Host=\"example.com\")"], [59, "        headers = Headers(["], [65, "        headers = Headers()"]]}}, "param": {"self": {"TestHeaders": [[55, "    def test_bytes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.TestHeaders.test_init": {"var": {"headers": {"Headers": [[17, "        headers = Headers()"], [20, "        headers = Headers([[b\"Host\", b\"example.com\"]])"], [24, "        headers = Headers(Host=\"example.com\")"], [28, "        headers = Headers("], [35, "        headers = Headers("]]}}, "param": {"self": {"TestHeaders": [[16, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.TestHeaders.test_set": {"var": {"headers": {"Headers": [[47, "        headers = Headers()"]]}}, "param": {"self": {"TestHeaders": [[46, "    def test_set(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_h": {"class": {"TestHeaders": {"<TestHeaders>": [[7, "class TestHeaders:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.TestHeaders._2host": {"param": {"self": {"TestHeaders": [[8, "    def _2host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_header": {"func": {"test_assemble_content_type": {"() -> None": [[78, "def test_assemble_content_type():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_headers.test_parse_content_type": {"var": {"p": {"str -> (str, str, ?) / ? -> (?, ?, ?)": [[70, "    p = parse_content_type"]]}, "v": {"(str, str, ?)": [[74, "    v = p(\"text/html; charset=UTF-8\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_head": {"func": {"test_parse_content_type": {"() -> None": [[69, "def test_parse_content_type():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_block.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_block.test_block_global": {"var": {"ar": {"Block": [[56, "    ar = block.Block()"]]}}, "param": {"address": {"?": [[55, "async def test_block_global(block_global, block_private, should_be_killed, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_block.test_block_g": {"param": {"block_private": {"?": [[55, "async def test_block_global(block_global, block_private, should_be_killed, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_block.test_block_globa": {"param": {"should_be_killed": {"?": [[55, "async def test_block_global(block_global, block_private, should_be_killed, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_block.test": {"param": {"block_global": {"?": [[55, "async def test_block_global(block_global, block_private, should_be_killed, address):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/types.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmprox": {"param": {"types": {"types": [[152, "        if os.path.isdir(path):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/optmanager.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptMan": {"func": {"__getattr__": {"(OptManager, ?) -> None": [[168, "    def __getattr__(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.add_option": {"var": {"default": {"{[?] | [str] | bool | float | int | str}": [[105, "        default: typing.Any,"]]}, "typespec": {"{<float> | <int> | <str> | ? -> bool}": [[104, "        typespec: type,"]]}, "self": {"{Options | TD | TD2 | TM | TO | TTypes}": [[102, "        self,"]]}, "help": {"str": [[106, "        help: str,"]]}, "choices": {"str": [[107, "        choices: typing.Optional[typing.Sequence[str]] = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.dum": {"var": {"options_dict": {"dict": [[465, "    options_dict = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.make_pars": {"param": {"metavar": {"None": [[363, "    def make_parser(self, parser, optname, metavar=None, short=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.has_changed": {"param": {"self": {"_Option": [[63, "    def has_changed(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.add_optio": {"var": {"name": {"str": [[103, "        name: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.__deepcopy__": {"var": {"o": {"_Option": [[73, "        o = _Option("]]}}, "param": {"self": {"_Option": [[72, "    def __deepcopy__(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.pars": {"param": {"text": {"{None | str}": [[481, "def parse(text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.s": {"var": {"optname": {"str": [[302, "                optname, optval = parts[0], None"], [304, "                optname, optval = parts[0], parts[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optm": {"class": {"OptManager": {"<OptManager>": [[81, "class OptManager:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.make_parser.mk": {"var": {"f": {"[str]": [[375, "            f = [\"--%s\" % l]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.reset": {"param": {"self": {"_Option": [[60, "    def reset(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.dump_defaul": {"param": {"opts": {"Options": [[437, "def dump_defaults(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.dump_defaults": {"var": {"k": {"?": [[443, "    for k in sorted(opts.keys()):"]]}, "txt": {"str": [[454, "        txt = \"\\n\".join(textwrap.wrap(txt))"]], "?": [[446, "        txt = o.help.strip()"]]}, "t": {"str": [[451, "            t = typecheck.typespec_to_str(o.typespec)"]]}, "o": {"?": [[444, "        o = opts._options[k]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.update": {"var": {"u": {"dict": [[225, "        u = self.update_known(**kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager": {"var": {"unset": {"object": [[20, "unset = object()"]]}}, "class": {"_Option": {"<_Option>": [[23, "class _Option:"]]}}, "func": {"load": {"(?, ?) -> None / (Options, str) -> None / (?, str) -> None / (TD2, str) -> None / (TD2, None) -> None": [[502, "def load(opts: OptManager, text: str) -> None:"]]}, "save": {"(?, str, ?) -> ? / (?, ?, ?) -> ? / (TD2, str, ?) -> ?": [[558, "def save(opts: OptManager, path: str, defaults: bool =False) -> None:"]]}, "dump_defaults": {"Options -> None / ? -> None": [[437, "def dump_defaults(opts):"]]}, "load_paths": {"Options -> ? / TD2 -> ? / ? -> ?": [[511, "def load_paths(opts: OptManager, *paths: str) -> None:"]]}, "dump_dicts": {"(Options, [str]) -> dict / (?, None) -> dict / (Options, None) -> dict / (?, ?) -> dict": [[459, "def dump_dicts(opts, keys: typing.List[str]=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.load_paths": {"var": {"p": {"str": [[517, "    for p in paths:"], [518, "        p = os.path.expanduser(p)"]]}, "txt": {"str": [[522, "                    txt = f.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.se": {"var": {"parts": {"[str]": [[300, "            parts = i.split(\"=\", maxsplit=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.key": {"param": {"self": {"{Options | TD2 | TO}": [[184, "    def keys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.set": {"var": {"vals": {"{dict | dict}": [[297, "        vals = {}"]]}, "unknown": {"{dict | dict}": [[298, "        unknown = {}"]]}, "i": {"{[None] | str}": [[299, "        for i in spec:"]]}}, "param": {"self": {"{OptManager | Options | TTypes}": [[290, "    def set(self, *spec, defer=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.__init__": {"var": {"name": {"str": [[28, "        name: str,"]]}, "default": {"{[?] | _Option -> ? | bool | int | str}": [[30, "        default: typing.Any,"]]}, "self": {"_Option": [[27, "        self,"]]}, "choices": {"str": [[32, "        choices: typing.Optional[typing.Sequence[str]]"]]}, "typespec": {"{<int> | <str> | ? -> bool}": [[29, "        typespec: type,"]]}, "help": {"str": [[31, "        help: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanag": {"func": {"parse": {"? -> {dict | str} / None -> {dict | str} / str -> {dict | str}": [[481, "def parse(text):"]]}, "serialize": {"(?, ?, ?) -> None / (Options, None, ?) -> None / (TD2, str, ?) -> None / (?, str, ?) -> None / (TD2, None, ?) -> None": [[535, "def serialize(opts: OptManager, text: str, defaults: bool = False) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.__eq__": {"var": {"i": {"str": [[67, "        for i in self.__slots__:"]]}}, "param": {"self": {"_Option": [[66, "    def __eq__(self, other) -> bool:"]]}, "other": {"_Option": [[66, "    def __eq__(self, other) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.dump_default": {"var": {"s": {"?": [[442, "    s = ruamel.yaml.comments.CommentedMap()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptMana": {"func": {"toggler": {"(TO, str) -> () -> None / (OptManager, ?) -> ? -> ?": [[241, "    def toggler(self, attr):"]]}, "merge": {"(OptManager, ?) -> None / (Options, dict) -> None / (TM, dict) -> None": [[265, "    def merge(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.setter": {"param": {"self": {"{OptManager | TO}": [[229, "    def setter(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__init__": {"param": {"self": {"OptManager": [[93, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.update_": {"var": {"known": {"dict": [[206, "        known, unknown = {}, {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.update_defer": {"var": {"unknown": {"dict": [[221, "        unknown = self.update_known(**kwargs)"]]}}, "param": {"self": {"{OptManager | Options | TD2}": [[220, "    def update_defer(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__eq__": {"param": {"self": {"{OptManager | TD2}": [[156, "    def __eq__(self, other):"]]}, "other": {"{TD2 | int}": [[156, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__contains__": {"param": {"self": {"OptManager": [[190, "    def __contains__(self, k):"]]}, "k": {"?": [[190, "    def __contains__(self, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.updat": {"param": {"self": {"{OptManager | Options | TD2 | TM | TO | TTypes}": [[224, "    def update(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.process_deferred": {"var": {"optname": {"?": [[321, "        for optname, optval in self.deferred.items():"]]}, "k": {"<list>": [[326, "        for k in update.keys():"]]}, "optval": {"{[?] | [{[?] | int}] | int}": [[323, "                optval = self.parse_setval(self._options[optname], optval)"]]}}, "param": {"self": {"{OptManager | TTypes}": [[315, "    def process_deferred(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.merg": {"var": {"toset": {"dict": [[271, "        toset = {}"]]}}, "param": {"self": {"str": [[265, "    def merge(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.item": {"param": {"self": {"{OptManager | TO}": [[187, "    def items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.subscribe": {"var": {"i": {"str": [[134, "        for i in opts:"]]}, "func": {"?": [[140, "        func = blinker._saferef.safe_ref(func)"]]}}, "param": {"opts": {"[str]": [[126, "    def subscribe(self, func, opts):"]]}, "func": {"{Rec | binder -> None}": [[126, "    def subscribe(self, func, opts):"]]}}, "func": {"_call": {"(?, ?) -> None": [[143, "        def _call(options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.dump_dict": {"var": {"keys": {"[str]": [[466, "    keys = keys if keys else opts.keys()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.toggle": {"param": {"attr": {"str": [[241, "    def toggler(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.__deepcopy": {"param": {"_": {"?": [[72, "    def __deepcopy__(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.parse": {"var": {"snip": {"?": [[488, "            snip = v.problem_mark.get_snippet()"]]}, "data": {"?": [[485, "        data = ruamel.yaml.load(text, ruamel.yaml.RoundTripLoader)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__setattr__": {"var": {"opts": {"?": [[178, "        opts = self.__dict__.get(\"_options\")"]]}}, "param": {"self": {"OptManager": [[174, "    def __setattr__(self, attr, value):"]]}, "attr": {"?": [[174, "    def __setattr__(self, attr, value):"]]}, "value": {"?": [[174, "    def __setattr__(self, attr, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.make_parser": {"var": {"onf": {"[str]": [[384, "            onf = mkf(optname, None)"], [391, "                    onf = mkf(optname, short)"]]}, "flags": {"[str]": [[380, "        flags = mkf(optname, short)"]]}, "g": {"?": [[383, "            g = parser.add_mutually_exclusive_group(required=False)"]]}, "o": {"?": [[371, "        o = self._options[optname]"]]}, "offf": {"[str]": [[385, "            offf = mkf(\"no-\" + optname, None)"], [389, "                    offf = mkf(\"no-\" + optname, short)"]]}}, "param": {"optname": {"str": [[363, "    def make_parser(self, parser, optname, metavar=None, short=None):"]]}, "self": {"{OptManager | Options | TTypes}": [[363, "    def make_parser(self, parser, optname, metavar=None, short=None):"]]}}, "func": {"mkf": {"(str, None) -> [str]": [[373, "        def mkf(l, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.lo": {"var": {"data": {"{dict | str}": [[507, "    data = parse(text)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.subscrib": {"param": {"self": {"{OptManager | TO}": [[126, "    def subscribe(self, func, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__deepcopy__": {"var": {"o": {"OptManager": [[162, "        o = OptManager()"]]}}, "param": {"self": {"OptManager": [[161, "    def __deepcopy__(self, memodict = None):"]]}, "memodict": {"None": [[161, "    def __deepcopy__(self, memodict = None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__getattr__": {"param": {"self": {"OptManager": [[168, "    def __getattr__(self, attr):"]]}, "attr": {"?": [[168, "    def __getattr__(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.toggler": {"var": {"o": {"?": [[248, "        o = self._options[attr]"]]}}, "param": {"self": {"{OptManager | TO}": [[241, "    def toggler(self, attr):"]]}}, "func": {"toggle": {"? -> ?": [[252, "        def toggle():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.reset": {"var": {"o": {"?": [[197, "        for o in self._options.values():"]]}}, "param": {"self": {"{OptManager | TD2}": [[193, "    def reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.rollback": {"var": {"old": {"?": [[114, "        old = copy.deepcopy(self._options)"]]}}, "param": {"self": {"{OptManager | Options | TD2 | TM | TO | TTypes}": [[113, "    def rollback(self, updated, reraise=False):"]]}, "updated": {"[str]": [[113, "    def rollback(self, updated, reraise=False):"]]}, "reraise": {"?": [[113, "    def rollback(self, updated, reraise=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.sette": {"param": {"attr": {"str": [[229, "    def setter(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.serialize": {"var": {"k": {"<list>": [[550, "    for k in list(data.keys()):"]], "?": [[547, "    for k in opts.keys():"]]}, "data": {"{dict | str}": [[546, "    data = parse(text)"]]}}, "param": {"k": {"? -> {dict | str} / None -> {dict | str} / str -> {dict | str}": [[547, "    for k in opts.keys():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.dump_dicts": {"var": {"k": {"?": [[467, "    for k in sorted(keys):"]]}, "t": {"str": [[469, "        t = typecheck.typespec_to_str(o.typespec)"]]}, "o": {"?": [[468, "        o = opts._options[k]"]]}, "option": {"dict": [[470, "        option = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.serializ": {"var": {"ret": {"?": [[553, "    ret = ruamel.yaml.round_trip_dump(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager": {"var": {"__copy__": {"(OptManager, None) -> OptManager": [[166, "    __copy__ = __deepcopy__"]]}}, "func": {"has_changed": {"(OptManager, ?) -> None / (Options, ?) -> None / (TD2, ?) -> None / (TD2, str) -> None": [[259, "    def has_changed(self, option):"]]}, "set": {"OptManager -> None / TTypes -> None / Options -> None": [[290, "    def set(self, *spec, defer=False):"]]}, "__contains__": {"(OptManager, ?) -> bool": [[190, "    def __contains__(self, k):"]]}, "keys": {"TO -> ? / Options -> ? / TD2 -> ?": [[184, "    def keys(self):"]]}, "__deepcopy__": {"(OptManager, None) -> OptManager": [[161, "    def __deepcopy__(self, memodict = None):"]]}, "update": {"TD2 -> None / TM -> None / TO -> None / TTypes -> None / Options -> None / OptManager -> None": [[224, "    def update(self, **kwargs):"]]}, "default": {"(TD2, ?) -> ? / (OptManager, ?) -> ?": [[256, "    def default(self, option: str) -> typing.Any:"]]}, "add_option": {"(TTypes, str, ?, int, str, None) -> ? / (TTypes, str, <int>, int, str, None) -> None / (TTypes, str, ? -> bool, bool, str, None) -> None / (TTypes, str, ?, str, str, str) -> None / (Options, str, ?, [?], str, None) -> None / (Options, str, ? -> bool, ?, str, None) -> None / (Options, str, <str>, str, str, None) -> None / (Options, str, ?, None, str, None) -> None / (Options, str, <int>, int, str, None) -> None / (TTypes, str, <str>, str, str, None) -> None": [[101, "    def add_option("]]}, "items": {"OptManager -> ? / TO -> ?": [[187, "    def items(self):"]]}, "__eq__": {"(TD2, int) -> bool / (OptManager, ?) -> bool / (TD2, TD2) -> bool": [[156, "    def __eq__(self, other):"]]}, "__init__": {"? -> ?": [[93, "    def __init__(self):"]]}, "update_known": {"TM -> dict / TO -> dict / OptManager -> dict / TTypes -> dict / Options -> dict / TD2 -> dict": [[201, "    def update_known(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.__repr__": {"param": {"self": {"_Option": [[42, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Optio": {"func": {"current": {"_Option -> None": [[49, "    def current(self) -> typing.Any:"]]}, "has_changed": {"_Option -> bool": [[63, "    def has_changed(self) -> bool:"]]}, "__init__": {"? -> ?": [[26, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManage": {"func": {"rollback": {"(TO, [str], ?) -> ? / (TD2, ?, ?) -> ? / (Options, ?, ?) -> ? / (TTypes, ?, ?) -> ? / (OptManager, ?, ?) -> ? / (TO, ?, ?) -> ? / (TM, ?, ?) -> ?": [[113, "    def rollback(self, updated, reraise=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.default": {"param": {"self": {"_Option": [[46, "    def default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option": {"var": {"__slots__": {"(str, str, str, str, str, str)": [[24, "    __slots__ = (\"name\", \"typespec\", \"value\", \"_default\", \"choices\", \"help\")"]]}}, "func": {"reset": {"_Option -> None": [[60, "    def reset(self) -> None:"]]}, "set": {"(_Option, ?) -> None / (_Option, str) -> None / (_Option, int) -> None": [[56, "    def set(self, value: typing.Any) -> None:"]]}, "default": {"_Option -> ?": [[46, "    def default(self):"]]}, "__deepcopy__": {"(_Option, ?) -> _Option": [[72, "    def __deepcopy__(self, _):"]]}, "__repr__": {"_Option -> str": [[42, "    def __repr__(self):"]]}, "__eq__": {"(_Option, _Option) -> None / (_Option, ?) -> None": [[66, "    def __eq__(self, other) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.update_known": {"var": {"k": {"?": [[207, "        for k, v in kwargs.items():"], [215, "                for k, v in known.items():"]]}, "updated": {"?": [[212, "        updated = set(known.keys())"]]}}, "param": {"self": {"{OptManager | Options | TD2 | TM | TO | TTypes}": [[201, "    def update_known(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManag": {"func": {"reset": {"TD2 -> None / OptManager -> None": [[193, "    def reset(self):"]]}, "__setattr__": {"(OptManager, ?, ?) -> None": [[174, "    def __setattr__(self, attr, value):"]]}, "process_deferred": {"OptManager -> None / TTypes -> None": [[315, "    def process_deferred(self):"]]}, "parse_setval": {"(OptManager, ?, {[?] | int}) -> {[?] | [{[?] | int}] | int} / (OptManager, ?, ?) -> {[?] | int} / (TTypes, ?, {[?] | int}) -> {[?] | [{[?] | int}] | int} / (TTypes, ?, str) -> {[?] | [str] | int | str} / (TTypes, ?, ?) -> {[?] | int} / (TO, ?, None) -> {[?] | [None] | int} / (Options, ?, None) -> {[?] | [None] | int} / (OptManager, ?, None) -> {[?] | [None] | int}": [[329, "    def parse_setval(self, o: _Option, optstr: typing.Optional[str]) -> typing.Any:"]]}, "update_defer": {"OptManager -> None / TD2 -> None / Options -> None": [[220, "    def update_defer(self, **kwargs):"]]}, "subscribe": {"(TO, binder -> None, [str]) -> None / (OptManager, ?, ?) -> None / (TO, Rec, [str]) -> None": [[126, "    def subscribe(self, func, opts):"]]}, "__repr__": {"OptManager -> str": [[280, "    def __repr__(self):"]]}, "make_parser": {"(TTypes, ?, str, None, None) -> None / (Options, ?, str, None, None) -> None / (Options, MockParser, str, None, None) -> None / (OptManager, ?, ?, None, None) -> None": [[363, "    def make_parser(self, parser, optname, metavar=None, short=None):"]]}, "setter": {"? -> ?": [[237, "        def setter(x):"]], "(TO, str) -> int -> None / (OptManager, ?) -> ? -> ?": [[229, "    def setter(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.merge": {"var": {"k": {"?": [[272, "        for k, v in opts.items():"]]}}, "param": {"opts": {"(OptManager, ?) -> None / (Options, dict) -> None / (TM, dict) -> None": [[265, "    def merge(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.make_": {"param": {"parser": {"MockParser": [[363, "    def make_parser(self, parser, optname, metavar=None, short=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.__repr__": {"var": {"options": {"str": [[283, "            options = \"\\n    \" + options + \"\\n\""]], "?": [[281, "        options = pprint.pformat(self._options, indent=4).strip(\" {}\")"]]}}, "param": {"self": {"OptManager": [[280, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.has_changed": {"param": {"self": {"{OptManager | Options | TD2}": [[259, "    def has_changed(self, option):"]]}, "option": {"str": [[259, "    def has_changed(self, option):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.make_parser.mkf": {"var": {"l": {"str": [[374, "            l = l.replace(\"_\", \"-\")"]]}}, "param": {"s": {"None": [[373, "        def mkf(l, s):"]]}, "l": {"str": [[373, "        def mkf(l, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.make_parse": {"param": {"short": {"None": [[363, "    def make_parser(self, parser, optname, metavar=None, short=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager._Option.current": {"var": {"v": {"object": [[53, "            v = self.value"]], "_Option -> ?": [[51, "            v = self.default"]]}}, "param": {"self": {"_Option": [[49, "    def current(self) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.process_deferr": {"var": {"update": {"dict": [[320, "        update = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.OptManager.subscribe._call": {"var": {"f": {"?": [[145, "                f = func()"]]}}, "param": {"updated": {"?": [[143, "        def _call(options, updated):"]]}, "options": {"?": [[143, "        def _call(options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.optmanager.save": {"var": {"path": {"str": [[564, "    path = os.path.expanduser(path)"]]}, "data": {"None": [[575, "    data = serialize(opts, data, defaults)"]], "str": [[568, "                data = f.read()"], [574, "        data = \"\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_eventstore.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_eventstore.test_simple": {"var": {"sig_add": {"?": [[10, "    sig_add = mock.Mock(spec=lambda: 42)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_eventstor": {"func": {"test_max_size": {"() -> None": [[35, "def test_max_size():"]]}, "test_simple": {"() -> None": [[6, "def test_simple():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_eventstore.test_simpl": {"var": {"sig_refresh": {"?": [[11, "    sig_refresh = mock.Mock(spec=lambda: 42)"]]}, "store": {"EventStore": [[7, "    store = eventstore.EventStore()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_eventstore.test_max_siz": {"var": {"store": {"EventStore": [[36, "    store = eventstore.EventStore(3)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/cookies.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http": {"func": {"refresh_set_cookie_header": {"(str, int) -> str / (?, ?) -> str / (?, int) -> str": [[287, "def refresh_set_cookie_header(c: str, delta: int) -> str:"]]}, "format_set_cookie_header": {"[(?, ?, ?)] -> str / [(?, ?, CookieAttrs)] -> str / ? -> str": [[268, "def format_set_cookie_header(set_cookies: List[TSetCookie]) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.p": {"param": {"cookie_headers": {"?": [[224, "def parse_cookie_headers(cookie_headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_quoted_string": {"var": {"i": {"int": [[72, "    i = start  # initialize in case the loop doesn't run."], [73, "    for i in range(start + 1, len(s)):"]]}, "ret": {"{[?] | [str] | [{(str, str, CookieAttrs) | str}] | [{[[str]] | str}] | [{[str] | str}]}": [[70, "    ret = []"]]}}, "param": {"i": {"int": [[73, "    for i in range(start + 1, len(s)):"], [73, "    for i in range(start + 1, len(s)):"]]}, "start": {"int": [[59, "def _read_quoted_string(s, start):"]]}, "s": {"{[(str, str, CookieAttrs)] | [[[str]]] | [[str]] | str}": [[59, "def _read_quoted_string(s, start):"]]}, "ret": {"{[?] | [str] | [{(str, str, CookieAttrs) | str}] | [{[[str]] | str}] | [{[str] | str}]}": [[73, "    for i in range(start + 1, len(s)):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.format_set_cookie_header": {"var": {"name": {"?": [[275, "    for name, value, attrs in set_cookies:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_cookie_headers": {"var": {"header": {"?": [[226, "    for header in cookie_headers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.group_cookies": {"var": {"k": {"{[(str, str, CookieAttrs)] | str}": [[376, "    for k, v in pairs[1:]:"]]}, "name": {"{[(str, str, CookieAttrs)] | str}": [[373, "    name, value = pairs[0]"], [381, "            name, value, attrs = k, v, []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_set_cookie_": {"var": {"pairs": {"{[?] | [[str]] | [{[str] | [{[[[str]]] | str}]}]}": [[172, "            pairs = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.h": {"func": {"_read_set_cookie_pairs": {"(str, int) -> None / (?, int) -> None / ({[[[str]]] | str}, int) -> None": [[131, "def _read_set_cookie_pairs(s: str, off=0) -> Tuple[List[TPairs], int]:"]]}, "_format_set_cookie_pairs": {"? -> str / [(?, ?)] -> str / {[[str]] | str} -> str": [[208, "def _format_set_cookie_pairs(lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.c": {"class": {"CookieAttrs": {"<CookieAttrs>": [[31, "class CookieAttrs(multidict.MultiDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_valu": {"param": {"delims": {"str": [[93, "def _read_value(s, start, delims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.format_set_cookie_heade": {"var": {"rv": {"[str]": [[273, "    rv = []"]]}, "pairs": {"[(?, ?)]": [[277, "        pairs = [(name, value)]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._format_": {"param": {"pairs": {"{[(?, ?)] | [[str]] | str}": [[195, "def _format_pairs(pairs, specials=(), sep=\"; \"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_key": {"param": {"start": {"int": [[86, "def _read_key(s, start, delims=\";=\"):"]]}, "s": {"{[(str, str, CookieAttrs)] | [[[str]]] | [[str]] | str}": [[86, "def _read_key(s, start, delims=\";=\"):"]]}, "delims": {"str": [[86, "def _read_key(s, start, delims=\";=\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.n": {"func": {"parse_set_cookie_header": {"str -> [(?, ?, CookieAttrs)] / ? -> [(?, ?, CookieAttrs)]": [[238, "def parse_set_cookie_header(line: str) -> List[TSetCookie]:"]]}, "parse_set_cookie_headers": {"? -> [?]": [[260, "def parse_set_cookie_headers(headers: Iterable[str]) -> List[TSetCookie]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_cookie_pair": {"var": {"lhs": {"str": [[115, "        lhs = lhs.lstrip()"]], "{[(str, str, CookieAttrs)] | [[str]] | str}": [[114, "        lhs, off = _read_key(s, off)"]]}}, "param": {"s": {"{[(str, str, CookieAttrs)] | [[str]] | str}": [[105, "def _read_cookie_pairs(s, off=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_set_cookie_pair": {"var": {"lhs": {"str": [[143, "        lhs = lhs.lstrip()"]], "{[[[str]]] | str}": [[142, "        lhs, off = _read_key(s, off, \";=,\")"]]}}, "param": {"s": {"{[[[str]]] | str}": [[131, "def _read_set_cookie_pairs(s: str, off=0) -> Tuple[List[TPairs], int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_set_cookie_heade": {"var": {"pairs": {"?": [[249, "    for pairs in cookie_pairs:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_value": {"param": {"start": {"int": [[93, "def _read_value(s, start, delims):"]]}, "s": {"{[(str, str, CookieAttrs)] | [[[str]]] | [[str]] | str}": [[93, "def _read_value(s, start, delims):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.group": {"var": {"cookie_list": {"{[(?, ?, CookieAttrs)] | [({[(str, str, CookieAttrs)] | str}, {[(str, str, CookieAttrs)] | str}, CookieAttrs)]}": [[370, "    cookie_list = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._has_special": {"var": {"i": {"str": [[186, "    for i in s:"]]}, "o": {"int": [[189, "        o = ord(i)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_set_cookie_head": {"var": {"cookie_pairs": {"?": [[247, "    cookie_pairs, off = _read_set_cookie_pairs(line)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_cookie_header": {"var": {"cookie_list": {"[?]": [[225, "    cookie_list = []"]]}}, "param": {"line": {"{[(str, str, CookieAttrs)] | str}": [[215, "def parse_cookie_header(line):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.CookieAttrs._kconv": {"param": {"key": {"str": [[33, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_cookie_pairs": {"param": {"off": {"int": [[105, "def _read_cookie_pairs(s, off=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.get_expirati": {"var": {"now_ts": {"int": [[339, "            now_ts = time.time()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_set_cookie_header": {"var": {"cookies": {"[(?, ?, CookieAttrs)]": [[248, "    cookies = []"], [263, "        cookies = parse_set_cookie_header(header)"]]}, "cookie": {"?": [[251, "            cookie, *attrs = pairs"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.refresh_set_cookie_header": {"var": {"e": {"?": [[304, "            e = email.utils.parsedate_tz(attrs[\"expires\"])"]]}, "cookies": {"[(?, ?, CookieAttrs)]": [[297, "    cookies = parse_set_cookie_header(c)"]]}, "cookie": {"(?, ?, CookieAttrs)": [[298, "    for cookie in cookies:"]]}, "name": {"?": [[299, "        name, value, attrs = cookie"]]}, "f": {"int": [[306, "                f = email.utils.mktime_tz(e) + delta"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_set_cookie_pai": {"var": {"rhs": {"str": [[145, "        rhs = \"\""]], "{[[[str]]] | str}": [[147, "            rhs, off = _read_value(s, off + 1, \";,\")"], [161, "                    rhs = rhs + \",\" + trail"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_cookie_heade": {"var": {"pairs": {"{[[str]] | [[{[(str, str, CookieAttrs)] | str}]]}": [[220, "    pairs, off_ = _read_cookie_pairs(line)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookie": {"var": {"TPairs": {"?": [[44, "TPairs = List[List[str]]  # TODO: Should be List[Tuple[str,str]]?"]]}}, "func": {"_format_pairs": {"({[[str]] | str}, (), str) -> str / (?, (), str) -> str / ([(?, ?)], (), str) -> str": [[195, "def _format_pairs(pairs, specials=(), sep=\"; \"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.CookieAttrs._reduce_": {"param": {"values": {"?": [[37, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.htt": {"var": {"_cookie_params": {"[str]": [[26, "_cookie_params = {'expires', 'path', 'comment', 'max-age', 'secure', 'httponly', 'version'}"]]}}, "func": {"group_cookies": {"[[{[(str, str, CookieAttrs)] | str}]] -> {[({[(str, str, CookieAttrs)] | str}, {[(str, str, CookieAttrs)] | str}, CookieAttrs)] | [?]} / ? -> {[(?, ?, CookieAttrs)] | [?]}": [[362, "def group_cookies(pairs):"]]}, "_read_cookie_pairs": {"({[(str, str, CookieAttrs)] | str}, int) -> ([[{[(str, str, CookieAttrs)] | str}]], int) / (str, int) -> ([[str]], int) / (?, int) -> ([[str]], int) / ({[[str]] | str}, int) -> ([[{[[str]] | str}]], int)": [[105, "def _read_cookie_pairs(s, off=0):"]]}, "parse_cookie_header": {"{[(str, str, CookieAttrs)] | str} -> [[{[(str, str, CookieAttrs)] | str}]] / ? -> [[str]] / str -> [[str]]": [[215, "def parse_cookie_header(line):"]]}, "parse_cookie_headers": {"? -> [?]": [[224, "def parse_cookie_headers(cookie_headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies": {"var": {"TSetCookie": {"?": [[43, "TSetCookie = Tuple[str, str, CookieAttrs]"]]}, "ESCAPE": {"?": [[28, "ESCAPE = re.compile(r\"([\\\"\\\\])\")"]]}}, "func": {"_read_until": {"({[(str, str, CookieAttrs)] | str}, int, str) -> ({[(str, str, CookieAttrs)] | str}, int) / (?, ?, str) -> (str, int) / (?, int, str) -> (str, int) / (str, int, str) -> (str, int) / (?, ?, ?) -> (str, int) / ({[[str]] | str}, int, str) -> ({[[str]] | str}, int) / ({[[[str]]] | str}, int, str) -> ({[[[str]]] | str}, int)": [[47, "def _read_until(s, start, term):"]]}, "format_cookie_header": {"? -> str": [[231, "def format_cookie_header(lst):"]]}, "_read_value": {"({[(str, str, CookieAttrs)] | str}, int, str) -> ({[(str, str, CookieAttrs)] | str}, int) / ({[[[str]]] | str}, int, str) -> ({[[[str]]] | str}, int) / ({[[str]] | str}, int, str) -> ({[[str]] | str}, int) / (str, int, str) -> (str, int) / (?, int, str) -> (str, int) / (?, ?, ?) -> (str, int)": [[93, "def _read_value(s, start, delims):"]]}, "_read_key": {"({[(str, str, CookieAttrs)] | str}, int, str) -> ({[(str, str, CookieAttrs)] | str}, int) / ({[[[str]]] | str}, int, str) -> ({[[[str]]] | str}, int) / ({[[str]] | str}, int, str) -> ({[[str]] | str}, int) / (str, int, str) -> (str, int) / (?, int, str) -> (str, int) / (?, ?, str) -> (str, int)": [[86, "def _read_key(s, start, delims=\";=\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.parse_set_cookie_headers": {"var": {"header": {"?": [[262, "    for header in headers:"]]}, "rv": {"[?]": [[261, "    rv = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cook": {"func": {"_has_special": {"str -> None / ? -> None": [[185, "def _has_special(s: str) -> bool:"]]}, "is_expired": {"CookieAttrs -> bool / ? -> bool": [[345, "def is_expired(cookie_attrs):"]]}, "_read_quoted_string": {"({[(str, str, CookieAttrs)] | str}, int) -> (str, int) / ({[[[str]]] | str}, int) -> (str, int) / ({[[str]] | str}, int) -> (str, int) / (str, int) -> (str, int) / (?, int) -> (str, int) / (?, ?) -> (str, int)": [[59, "def _read_quoted_string(s, start):"]]}, "get_expiration_ts": {"CookieAttrs -> int / ? -> int": [[319, "def get_expiration_ts(cookie_attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_quoted_str": {"var": {"escaping": {"?": [[69, "    escaping = False"], [76, "            escaping = False"], [80, "            escaping = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._format_pairs": {"var": {"k": {"?": [[200, "    for k, v in pairs:"]]}, "v": {"str": [[203, "            v = '\"%s\"' % v"]], "?": [[202, "            v = ESCAPE.sub(r\"\\\\\\1\", v)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.CookieAtt": {"func": {"_reduce_values": {"? -> ?": [[37, "    def _reduce_values(values):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.CookieAttrs": {"func": {"_kconv": {"? -> ? / str -> str": [[33, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_set_cookie_pairs": {"var": {"trail": {"{[[[str]]] | str}": [[160, "                    trail, off = _read_value(s, off + 1, \";,\")"]]}}, "param": {"off": {"int": [[131, "def _read_set_cookie_pairs(s: str, off=0) -> Tuple[List[TPairs], int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.get_expiration": {"param": {"cookie_attrs": {"CookieAttrs": [[319, "def get_expiration_ts(cookie_attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._format_set_cookie_pair": {"param": {"lst": {"{[(?, ?)] | [[str]] | str}": [[208, "def _format_set_cookie_pairs(lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.is_expired": {"var": {"exp_ts": {"int": [[352, "    exp_ts = get_expiration_ts(cookie_attrs)"]]}, "now_ts": {"int": [[353, "    now_ts = time.time()"]]}}, "param": {"cookie_attrs": {"CookieAttrs": [[345, "def is_expired(cookie_attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._format_pair": {"var": {"vals": {"[?]": [[199, "    vals = []"]]}}, "param": {"specials": {"()": [[195, "def _format_pairs(pairs, specials=(), sep=\"; \"):"]]}, "sep": {"str": [[195, "def _format_pairs(pairs, specials=(), sep=\"; \"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.group_cookie": {"var": {"attrs": {"{[(?, ?)] | [({[(str, str, CookieAttrs)] | str}, {[(str, str, CookieAttrs)] | str})]}": [[374, "    attrs = []"]]}}, "param": {"pairs": {"[[{[(str, str, CookieAttrs)] | str}]]": [[362, "def group_cookies(pairs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.get_expiration_ts": {"var": {"max_age": {"int": [[335, "            max_age = int(cookie_attrs['Max-Age'])"]]}, "e": {"?": [[329, "        e = email.utils.parsedate_tz(cookie_attrs[\"expires\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_until": {"var": {"i": {"int": [[53, "    for i in range(start, len(s)):"]]}}, "param": {"start": {"int": [[47, "def _read_until(s, start, term):"]]}, "s": {"{[(str, str, CookieAttrs)] | [[[str]]] | [[str]] | str}": [[47, "def _read_until(s, start, term):"]]}, "term": {"str": [[47, "def _read_until(s, start, term):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_cookie_": {"var": {"pairs": {"{[[str]] | [[{[(str, str, CookieAttrs)] | str}]] | [[{[[str]] | str}]]}": [[111, "    pairs = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies.format_cookie_header": {"param": {"lst": {"?": [[231, "def format_cookie_header(lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.cookies._read_cookie_pai": {"var": {"rhs": {"{[(str, str, CookieAttrs)] | [[str]] | str}": [[119, "            rhs, off = _read_value(s, off + 1, \";\")"]], "str": [[117, "        rhs = \"\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_base.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_valu": {"param": {"self": {"TestMisc": [[172, "    def test_value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestKeyValue.test_freeze": {"var": {"v2": {"?": [[247, "        v2 = v.freeze({})"]]}, "v3": {"?": [[248, "        v3 = v2.freeze({})"]]}, "v": {"?": [[246, "        v = e.parseString(\"h@10=@10'\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TKeyValu": {"var": {"preamble": {"str": [[218, "    preamble = \"h\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueF": {"func": {"test_file_value": {"TestTokValueFile -> None": [[129, "    def test_file_value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueNakedLiteral.test_expr": {"var": {"v": {"TokValueNakedLiteral": [[28, "        v = base.TokValueNakedLiteral(\"foo\")"]]}}, "param": {"self": {"TestTokValueNakedLiteral": [[27, "    def test_expr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc": {"func": {"test_value": {"TestMisc -> None": [[172, "    def test_value(self):"]]}, "test_generators": {"TestMisc -> None": [[167, "    def test_generators(self):"]]}, "test_fixedlengthvalue": {"(TestMisc, ?) -> None": [[192, "    def test_fixedlengthvalue(self, tmpdir):"]]}, "test_value2": {"TestMisc -> None": [[177, "    def test_value2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFil": {"func": {"test_freeze": {"TestTokValueFile -> None": [[159, "    def test_freeze(self):"]]}, "test_spec": {"TestTokValueFile -> None": [[154, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestKeyValu": {"func": {"test_freeze": {"TestKeyValue -> None": [[244, "    def test_freeze(self):"]]}, "test_simple": {"TestKeyValue -> None": [[231, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestKeyValue.test_simpl": {"var": {"e": {"None": [[232, "        e = TKeyValue.expr()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_options_or_value.TT": {"var": {"options": {"[str]": [[283, "        options = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TKeyValue.valu": {"param": {"self": {"TKeyValue": [[220, "    def values(self, settings):"]]}, "settings": {"?": [[220, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_intfield": {"var": {"e": {"None": [[262, "    e = TT.expr()"]]}, "v": {"?": [[264, "    v = e.parseString(\"tone\")[0]"], [269, "    v = e.parseString(\"t1\")[0]"], [273, "    v = e.parseString(\"t4\")[0]"]]}}, "class": {"TT": {"<TT>": [[254, "    class TT(base.IntField):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_value2.TT": {"var": {"preamble": {"str": [[179, "            preamble = \"m\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_file_value": {"var": {"v": {"?": [[130, "        v = base.TokValue.parseString(\"<'one two'\")[0]"], [134, "        v = base.TokValue.parseString(\"<path\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_freez": {"param": {"self": {"TestTokValueFile": [[159, "    def test_freeze(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueLiteral.test_spec": {"var": {"v": {"TokValueLiteral": [[52, "        v = base.TokValueLiteral(\"foo\")"], [55, "        v = base.TokValueLiteral(\"f\\x00oo\")"], [58, "        v = base.TokValueLiteral('\"')"], [65, "        v = base.TokValueLiteral(\"'\")"]]}}, "param": {"self": {"TestTokValueLiteral": [[51, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestKeyValue.test_simple": {"var": {"v2": {"?": [[237, "        v2 = e.parseString(v.spec())[0]"]]}, "s": {"?": [[241, "        s = v.spec()"]]}, "v": {"?": [[233, "        v = e.parseString(\"h'foo'='bar'\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueLiteral.roundtrip": {"var": {"v2": {"?": [[71, "        v2 = e.parseString(v.spec())"]]}, "e": {"None": [[69, "        e = base.TokValueLiteral.expr()"]]}, "v": {"TokValueLiteral": [[70, "        v = base.TokValueLiteral(spec)"]]}}, "param": {"self": {"TestTokValueLiteral": [[68, "    def roundtrip(self, spec):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFi": {"func": {"test_access_control": {"(TestTokValueFile, ?) -> None": [[137, "    def test_access_control(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_bas": {"class": {"TBoolean": {"<TBoolean>": [[328, "class TBoolean(base.Boolean):"]]}, "TKeyValue": {"<TKeyValue>": [[217, "class TKeyValue(base.KeyValue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueGenerate.test_freez": {"param": {"self": {"TestTokValueGenerate": [[121, "    def test_freeze(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueNakedLiteral.test_spec": {"var": {"v": {"TokValueNakedLiteral": [[32, "        v = base.TokValueNakedLiteral(\"foo\")"], [35, "        v = base.TokValueNakedLiteral(\"f\\x00oo\")"]]}}, "param": {"self": {"TestTokValueNakedLiteral": [[31, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_boolean.roundtrip": {"var": {"s2": {"?": [[344, "        s2 = e.parseString(s)[0].spec()"]]}, "v2": {"?": [[346, "        v2 = e.parseString(s2)[0].value"]]}, "e": {"None": [[343, "        e = TBoolean.expr()"]]}, "v1": {"?": [[345, "        v1 = e.parseString(s)[0].value"]]}}, "param": {"s": {"test_boolean": [[342, "    def roundtrip(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_access_contro": {"param": {"self": {"TestTokValueFile": [[137, "    def test_access_control(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TBool": {"var": {"name": {"str": [[329, "    name = \"test\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_fixedlengthvalue.TT": {"var": {"length": {"int": [[195, "            length = 4"]]}, "preamble": {"str": [[194, "            preamble = \"m\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_unique_name": {"var": {"b": {"TBoolean": [[333, "    b = TBoolean(True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_ba": {"class": {"TestMisc": {"<TestMisc>": [[165, "class TestMisc:"]]}}, "func": {"test_times": {"() -> None": [[11, "def test_times():"]]}, "test_integer": {"() -> None": [[308, "def test_integer():"]]}, "test_intfield": {"() -> None": [[253, "def test_intfield():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_caseless_literal.CL": {"var": {"TOK": {"str": [[19, "        TOK = \"foo\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_options_or_valu": {"var": {"e": {"None": [[288, "    e = TT.expr()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_integer.BInt": {"var": {"bounds": {"(int, int)": [[317, "        bounds = (1, 5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueNakedLiteral": {"func": {"test_spec": {"TestTokValueNakedLiteral -> None": [[31, "    def test_spec(self):"]]}, "test_expr": {"TestTokValueNakedLiteral -> None": [[27, "    def test_expr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_boolea": {"func": {"roundtrip": {"test_boolean -> None": [[342, "    def roundtrip(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.languag": {"class": {"test_boolean": {"<test_boolean>": [[337, "class test_boolean:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_fixedlengthvalue": {"var": {"s": {"Settings": [[204, "        s = base.Settings(staticdir=str(tmpdir))"]]}, "v": {"?": [[207, "        v = e.parseString(\"m<path\")[0]"], [213, "        v = e.parseString(\"m<path2\")[0]"]]}}, "class": {"TT": {"<TT>": [[193, "        class TT(base.FixedLengthValue):"]]}}, "param": {"tmpdir": {"?": [[192, "    def test_fixedlengthvalue(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_b": {"class": {"TestTokValueGenerate": {"<TestTokValueGenerate>": [[85, "class TestTokValueGenerate:"]]}, "TestTokValueNakedLiteral": {"<TestTokValueNakedLiteral>": [[25, "class TestTokValueNakedLiteral:"]]}, "TestKeyValue": {"<TestKeyValue>": [[229, "class TestKeyValue:"]]}, "TestTokValueLiteral": {"<TestTokValueLiteral>": [[39, "class TestTokValueLiteral:"]]}, "TestTokValueFile": {"<TestTokValueFile>": [[127, "class TestTokValueFile:"]]}}, "func": {"test_caseless_literal": {"() -> None": [[17, "def test_caseless_literal():"]]}, "test_unique_name": {"() -> None": [[332, "def test_unique_name():"]]}, "test_options_or_value": {"() -> None": [[281, "def test_options_or_value():"]]}, "parse_request": {"? -> ?": [[7, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueGenera": {"func": {"test_freeze": {"TestTokValueGenerate -> None": [[121, "    def test_freeze(self):"]]}, "test_spec": {"TestTokValueGenerate -> None": [[108, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueLiteral.test_roundtrip": {"param": {"self": {"TestTokValueLiteral": [[75, "    def test_roundtrip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_generators": {"var": {"g": {"?": [[169, "        g = v.get_generator({})"]]}, "v": {"?": [[168, "        v = base.TokValue.parseString(\"'val'\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueGener": {"func": {"test_basic": {"TestTokValueGenerate -> None": [[87, "    def test_basic(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_access_control": {"var": {"f": {"?": [[139, "        f = tmpdir.join(\"path\")"]]}, "v": {"?": [[138, "        v = base.TokValue.parseString(\"<path\")[0]"], [144, "        v = base.TokValue.parseString(\"<path2\")[0]"], [150, "        v = base.TokValue.parseString(\"</outside\")[0]"]]}}, "param": {"tmpdir": {"?": [[137, "    def test_access_control(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueGenerate.test_freeze": {"var": {"f": {"TokValueLiteral": [[123, "        f = v.freeze(language.Settings())"]]}, "v": {"TokValueGenerate": [[122, "        v = base.TokValueGenerate(100, \"b\", \"ascii\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_caseless_literal": {"var": {"v": {"CL": [[20, "    v = CL(\"foo\")"]]}}, "class": {"CL": {"<CL>": [[18, "    class CL(base.CaselessLiteral):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_generator": {"param": {"self": {"TestMisc": [[167, "    def test_generators(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueGenerate.test_spec": {"var": {"v": {"TokValueGenerate": [[109, "        v = base.TokValueGenerate(1, \"b\", \"bytes\")"], [112, "        v = base.TokValueGenerate(1, \"k\", \"bytes\")"], [115, "        v = base.TokValueGenerate(1, \"k\", \"ascii\")"], [118, "        v = base.TokValueGenerate(1, \"b\", \"ascii\")"]]}}, "param": {"self": {"TestTokValueGenerate": [[108, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_integer": {"var": {"e": {"None": [[309, "    e = base.Integer.expr()"]]}, "v": {"?": [[310, "    v = e.parseString(\"200\")[0]"]]}}, "class": {"BInt": {"<BInt>": [[316, "    class BInt(base.Integer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_value": {"var": {"v2": {"?": [[188, "        v2 = v.freeze({})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_spec": {"var": {"v2": {"?": [[156, "        v2 = base.TokValue.parseString(v.spec())[0]"]]}, "v": {"?": [[155, "        v = base.TokValue.parseString(\"<'one two'\")[0]"]]}}, "param": {"self": {"TestTokValueFile": [[154, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_intfield.TT": {"var": {"max": {"int": [[261, "        max = 4"]]}, "preamble": {"str": [[255, "        preamble = \"t\""]]}, "names": {"dict": [[256, "        names = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestKeyValue.test_freez": {"var": {"e": {"None": [[245, "        e = TKeyValue.expr()"]]}}, "param": {"self": {"TestKeyValue": [[244, "    def test_freeze(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueGenerate.test_basic": {"var": {"g": {"?": [[101, "        g = v.get_generator({})"]]}, "v": {"?": [[88, "        v = base.TokValue.parseString(\"@10b\")[0]"], [92, "        v = base.TokValue.parseString(\"@10\")[0]"], [94, "        v = base.TokValue.parseString(\"@10k\")[0]"], [96, "        v = base.TokValue.parseString(\"@10g\")[0]"], [99, "        v = base.TokValue.parseString(\"@10g,digits\")[0]"], [104, "        v = base.TokValue.parseString(\"@10,digits\")[0]"]]}}, "param": {"self": {"TestTokValueGenerate": [[87, "    def test_basic(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueLiteral": {"func": {"roundtrip": {"(TestTokValueLiteral, str) -> None / (TestTokValueLiteral, ?) -> None": [[68, "    def roundtrip(self, spec):"]]}, "test_spec": {"TestTokValueLiteral -> None": [[51, "    def test_spec(self):"]]}, "test_roundtrip": {"TestTokValueLiteral -> None": [[75, "    def test_roundtrip(self):"]]}, "test_expr": {"TestTokValueLiteral -> None": [[41, "    def test_expr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_value2": {"var": {"s": {"?": [[184, "        s = v.spec()"]]}, "v3": {"?": [[189, "        v3 = v2.freeze({})"]]}, "e": {"None": [[180, "        e = TT.expr()"]]}, "v": {"?": [[181, "        v = e.parseString(\"m'msg'\")[0]"], [187, "        v = e.parseString(\"m@100\")[0]"]]}}, "class": {"TT": {"<TT>": [[178, "        class TT(base.Value):"]]}}, "param": {"self": {"TestMisc": [[177, "    def test_value2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueLiteral.roundtri": {"param": {"spec": {"str": [[68, "    def roundtrip(self, spec):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_tim": {"var": {"reqs": {"list": [[12, "    reqs = list(language.parse_pathoc(\"get:/:x5\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestMisc.test_fixedlengthvalu": {"var": {"e": {"None": [[197, "        e = TT.expr()"]]}}, "param": {"self": {"TestMisc": [[192, "    def test_fixedlengthvalue(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_boolean": {"var": {"e": {"None": [[338, "    e = TBoolean.expr()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueLiteral.test_expr": {"var": {"v": {"TokValueLiteral": [[42, "        v = base.TokValueLiteral(\"foo\")"], [46, "        v = base.TokValueLiteral(\"foo\\n\")"]]}}, "param": {"self": {"TestTokValueLiteral": [[41, "    def test_expr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.parse_request": {"param": {"s": {"?": [[7, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_freeze": {"var": {"v2": {"?": [[161, "        v2 = v.freeze({})"]]}, "v": {"?": [[160, "        v = base.TokValue.parseString(\"<'one two'\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TKeyV": {"func": {"values": {"(TKeyValue, ?) -> [str]": [[220, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestKeyValue.test_simp": {"param": {"self": {"TestKeyValue": [[231, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.test_options_or_value": {"var": {"s": {"?": [[296, "    s = e.parseString(\"one\")[0].spec()"], [299, "    s = e.parseString(\"'foo'\")[0].spec()"]]}, "v3": {"?": [[304, "    v3 = v2.freeze({})"]]}, "v2": {"?": [[303, "    v2 = v.freeze({})"]]}, "v": {"?": [[302, "    v = e.parseString(\"@100\")[0]"]]}}, "class": {"TT": {"<TT>": [[282, "    class TT(base.OptionsOrValue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_base.TestTokValueFile.test_file_valu": {"param": {"self": {"TestTokValueFile": [[129, "    def test_file_value(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/human.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.format_addre": {"var": {"host": {"?": [[86, "        host = ipaddress.ip_address(address[0])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.pretty_duration": {"var": {"limit": {"int": [[60, "    for limit, formatter in formatters:"]]}, "formatters": {"[(int, str)]": [[52, "    formatters = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.pretty_": {"param": {"size": {"int": [[18, "def pretty_size(size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.pretty_size": {"var": {"suf": {"?": [[21, "            suf = bottom[0]"]]}, "x": {"int": [[23, "            x = round(size / lim, 2)"], [25, "                x = int(x)"]]}, "lim": {"?": [[22, "            lim = bottom[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human": {"var": {"SIZE_TABLE": {"[(str, int)]": [[7, "SIZE_TABLE = ["]]}, "SIZE_UNITS": {"dict": [[15, "SIZE_UNITS = dict(SIZE_TABLE)"]]}}, "func": {"parse_size": {"None -> int / ? -> int / str -> int": [[31, "def parse_size(s: typing.Optional[str]) -> typing.Optional[int]:"]]}, "format_timestamp_with_milli": {"? -> str / int -> str": [[73, "def format_timestamp_with_milli(s):"]]}, "format_timestamp": {"int -> str / ? -> str": [[67, "def format_timestamp(s):"]]}, "format_address": {"(str, str) -> str / (str, str, str, str) -> str / {(str, int) | Pathod | _TServer} -> str / {(str, ?) | (str, int) | <Pathoc> | Pathoc | ServerConnection} -> str / ? -> str / None -> str": [[78, "def format_address(address: typing.Optional[tuple]) -> str:"]]}, "pretty_size": {"int -> str / ? -> str": [[18, "def pretty_size(size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.format_timestamp_with_milli": {"var": {"d": {"<datetime>": [[74, "    d = datetime.datetime.fromtimestamp(s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.format_timestamp": {"var": {"s": {"datetime": [[68, "    s = time.localtime(s)"]]}, "d": {"<datetime>": [[69, "    d = datetime.datetime.fromtimestamp(time.mktime(s))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.human.parse_size": {"var": {"i": {"<list>": [[42, "    for i in SIZE_UNITS.keys():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.hum": {"func": {"pretty_duration": {"None -> str / float -> str / ? -> str / int -> str": [[51, "def pretty_duration(secs: typing.Optional[float]) -> str:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_wbxml.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_wbxml": {"var": {"datadir": {"str": [[4, "datadir = \"mitmproxy/contentviews/test_wbxml_data/\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentvi": {"func": {"test_wbxml": {"? -> None": [[7, "def test_wbxml(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_wbxml.test_wbxml": {"var": {"expected": {"str": [[17, "        expected = f.read()"]]}, "path": {"?": [[13, "    path = tdata.path(datadir + \"data.wbxml\")  # File taken from https://github.com/davidpshaw/PyWBXMLDecoder/tree/master/wbxml_samples"]]}, "input": {"str": [[15, "        input = f.read()"]]}, "p": {"ASCommandResponse": [[19, "    p = wbxml.ASCommandResponse.ASCommandResponse(input)"]]}, "v": {"?": [[8, "    v = full_eval(wbxml.ViewWBXML())"]]}}, "param": {"tdata": {"?": [[7, "def test_wbxml(tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/cmdline.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdline.mitmweb": {"var": {"parser": {"?": [[129, "    parser = argparse.ArgumentParser(usage=\"%(prog)s [options]\")"]]}, "group": {"?": [[131, "    group = parser.add_argument_group(\"Mitmweb\")"], [137, "    group = parser.add_argument_group("]]}}, "param": {"opts": {"Options": [[128, "def mitmweb(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdline.common_options": {"var": {"group": {"?": [[55, "    group = parser.add_argument_group(\"Proxy Options\")"], [68, "    group = parser.add_argument_group(\"SSL\")"], [74, "    group = parser.add_argument_group(\"Client Replay\")"], [78, "    group = parser.add_argument_group(\"Server Replay\")"], [85, "    group = parser.add_argument_group(\"Map Remote\")"], [89, "    group = parser.add_argument_group(\"Modify Body\")"], [93, "    group = parser.add_argument_group(\"Modify Headers\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdline.mitmdum": {"var": {"parser": {"?": [[113, "    parser = argparse.ArgumentParser(usage=\"%(prog)s [options] [filter]\")"]]}}, "param": {"opts": {"Options": [[112, "def mitmdump(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdline.mitmproxy": {"var": {"parser": {"?": [[98, "    parser = argparse.ArgumentParser(usage=\"%(prog)s [options]\")"]]}, "group": {"?": [[103, "    group = parser.add_argument_group("]]}}, "param": {"opts": {"Options": [[97, "def mitmproxy(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdline.common_option": {"param": {"parser": {"MockParser": [[4, "def common_options(parser, opts):"]]}, "opts": {"Options": [[4, "def common_options(parser, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdline": {"func": {"mitmproxy": {"Options -> None / ? -> None": [[97, "def mitmproxy(opts):"]]}, "common_options": {"(?, Options) -> None / (MockParser, Options) -> None / (?, ?) -> None": [[4, "def common_options(parser, opts):"]]}, "mitmdump": {"? -> None / Options -> None": [[112, "def mitmdump(opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.cmdlin": {"func": {"mitmweb": {"? -> None / Options -> None": [[128, "def mitmweb(opts):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/keybindings.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem": {"func": {"get_widget": {"KeyItem -> None": [[19, "    def get_widget(self):"]]}, "get_edit_text": {"KeyItem -> ?": [[29, "    def get_edit_text(self):"]]}, "selectable": {"KeyItem -> bool": [[32, "    def selectable(self):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, walker, binding, focused):"]]}, "keypress": {"(KeyItem, ?, ?) -> ?": [[35, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.get_edit_text": {"param": {"self": {"KeyListWalker": [[54, "    def get_edit_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keyb": {"class": {"KeyBindings": {"<KeyBindings>": [[124, "class KeyBindings(urwid.Pile, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyList.keypr": {"param": {"self": {"KeyList": [[89, "    def keypress(self, size, key):"]]}, "size": {"?": [[89, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.get_focu": {"param": {"self": {"KeyListWalker": [[61, "    def get_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBindings.__init__": {"var": {"oh": {"KeyHelp": [[129, "        oh = KeyHelp(master)"]]}}, "param": {"self": {"KeyBindings": [[128, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[128, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.get_next": {"var": {"pos": {"int": [[73, "        pos = pos + 1"]]}}, "param": {"self": {"KeyListWalker": [[70, "    def get_next(self, pos):"]]}, "pos": {"?": [[70, "    def get_next(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.selectab": {"param": {"self": {"KeyItem": [[32, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBindings.keypr": {"var": {"tsize": {"?": [[158, "        tsize = self.get_item_size(size, i, True, item_rows)"]]}}, "param": {"self": {"KeyBindings": [[144, "    def keypress(self, size, key):"]]}, "size": {"?": [[144, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp": {"func": {"sig_mod": {"(KeyHelp, ?) -> None": [[120, "    def sig_mod(self, txt):"]]}, "widget": {"(KeyHelp, ?) -> None / (KeyHelp, str) -> None": [[114, "    def widget(self, txt):"]]}, "__init__": {"? -> ?": [[103, "    def __init__(self, master):"]]}, "set_active": {"(KeyHelp, ?) -> None / (KeyHelp, bool) -> None": [[109, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBindings.keypress": {"var": {"i": {"?": [[157, "        i = self.widget_list.index(self.focus_item)"]]}, "key": {"None": [[150, "            key = None"]]}}, "param": {"key": {"?": [[144, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp.widget": {"var": {"cols": {"?": [[115, "        cols, _ = self.master.ui.get_cols_rows()"]]}}, "param": {"self": {"KeyHelp": [[114, "    def widget(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.__init__": {"param": {"self": {"KeyListWalker": [[40, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[40, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings": {"var": {"HELP_HEIGHT": {"int": [[7, "HELP_HEIGHT = 5"]]}}, "class": {"KeyHelp": {"<KeyHelp>": [[102, "class KeyHelp(urwid.Frame):"]]}, "KeyItem": {"<KeyItem>": [[13, "class KeyItem(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp.set_activ": {"var": {"style": {"str": [[111, "        style = \"heading\" if val else \"heading_inactive\""]]}}, "param": {"self": {"KeyHelp": [[109, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyList": {"func": {"keypress": {"(KeyList, ?, ?) -> None": [[89, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.consol": {"var": {"keybinding_focus_change": {"?": [[10, "keybinding_focus_change = blinker.Signal()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalk": {"func": {"get_prev": {"(KeyListWalker, ?) -> (KeyItem, int)": [[76, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBindings.keyp": {"var": {"item_rows": {"None": [[154, "        item_rows = None"]], "?": [[156, "            item_rows = self.get_item_rows(size, focus = True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.set_focu": {"param": {"self": {"KeyListWalker": [[64, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.get_prev": {"var": {"pos": {"int": [[77, "        pos = pos - 1"]]}}, "param": {"self": {"KeyListWalker": [[76, "    def get_prev(self, pos):"]]}, "pos": {"?": [[76, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.get_widget": {"var": {"cmd": {"?": [[20, "        cmd = textwrap.dedent(self.binding.command).strip()"]]}}, "param": {"self": {"KeyItem": [[19, "    def get_widget(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp.widge": {"param": {"txt": {"str": [[114, "    def widget(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBinding": {"func": {"keypress": {"(KeyBindings, ?, ?) -> None": [[144, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker": {"func": {"set_focus": {"(KeyListWalker, ?) -> None / (KeyListWalker, int) -> None": [[64, "    def set_focus(self, index):"]]}, "get_focus": {"KeyListWalker -> (?, int)": [[61, "    def get_focus(self):"]]}, "_get": {"(KeyListWalker, ?) -> KeyItem / (KeyListWalker, int) -> KeyItem": [[57, "    def _get(self, pos):"]]}, "get_next": {"(KeyListWalker, ?) -> (KeyItem, int)": [[70, "    def get_next(self, pos):"]]}, "get_edit_text": {"KeyListWalker -> ?": [[54, "    def get_edit_text(self):"]]}, "sig_modified": {"(KeyListWalker, ?) -> None": [[49, "    def sig_modified(self, sender):"]]}, "__init__": {"? -> ?": [[40, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.keypress": {"param": {"key": {"?": [[35, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.__init__": {"param": {"walker": {"KeyListWalker": [[14, "    def __init__(self, walker, binding, focused):"]]}, "focused": {"bool": [[14, "    def __init__(self, walker, binding, focused):"]]}, "self": {"KeyItem": [[14, "    def __init__(self, walker, binding, focused):"]]}, "binding": {"?": [[14, "    def __init__(self, walker, binding, focused):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyList.__init__": {"param": {"self": {"KeyList": [[84, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[84, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyLis": {"func": {"__init__": {"? -> ?": [[84, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBindings.get_focused_binding": {"var": {"f": {"?": [[141, "        f = self.widget_list[0]"]]}}, "param": {"self": {"KeyBindings": [[138, "    def get_focused_binding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyB": {"func": {"get_focused_binding": {"KeyBindings -> None": [[138, "    def get_focused_binding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.sig_modifi": {"param": {"sender": {"?": [[49, "    def sig_modified(self, sender):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.keypr": {"param": {"self": {"KeyItem": [[35, "    def keypress(self, size, key):"]]}, "size": {"?": [[35, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp.set_active": {"var": {"h": {"?": [[110, "        h = urwid.Text(\"Key Binding Help\")"]]}}, "param": {"val": {"bool": [[109, "    def set_active(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.set_focus": {"var": {"binding": {"?": [[65, "        binding = self.bindings[index]"]]}}, "param": {"index": {"int": [[64, "    def set_focus(self, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp.__init__": {"param": {"self": {"KeyHelp": [[103, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[103, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyList.keypress": {"var": {"foc": {"?": [[91, "            foc, idx = self.get_focus()"]]}}, "param": {"key": {"?": [[89, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker._get": {"var": {"binding": {"?": [[58, "        binding = self.bindings[pos]"]]}}, "param": {"self": {"KeyListWalker": [[57, "    def _get(self, pos):"]]}, "pos": {"int": [[57, "    def _get(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.get_edit_text": {"param": {"self": {"KeyItem": [[29, "    def get_edit_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyListWalker.sig_modified": {"param": {"self": {"KeyListWalker": [[49, "    def sig_modified(self, sender):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyHelp.sig_mod": {"param": {"self": {"KeyHelp": [[120, "    def sig_mod(self, txt):"]]}, "txt": {"?": [[120, "    def sig_mod(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybinding": {"class": {"KeyListWalker": {"<KeyListWalker>": [[39, "class KeyListWalker(urwid.ListWalker):"]]}, "KeyList": {"<KeyList>": [[83, "class KeyList(urwid.ListBox):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyItem.get_widge": {"var": {"parts": {"[(int, ?)]": [[21, "        parts = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keybindings.KeyBindings": {"var": {"keyctx": {"str": [[126, "    keyctx = \"keybindings\""]]}, "title": {"str": [[125, "    title = \"Key Bindings\""]]}}, "func": {"__init__": {"? -> ?": [[128, "    def __init__(self, master):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_disable_h2c.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c.TestDisableH2CleartextUpgrade.test_prior_knowledge": {"var": {"a": {"DisableH2C": [[28, "            a = disable_h2c.DisableH2C()"]]}, "b": {"?": [[31, "            b = io.BytesIO(b\"PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n\")"]]}, "f": {"?": [[32, "            f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c": {"class": {"TestDisableH2CleartextUpgrade": {"<TestDisableH2CleartextUpgrade>": [[10, "class TestDisableH2CleartextUpgrade:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c.TestDisableH2CleartextUpgra": {"func": {"test_prior_knowledge": {"TestDisableH2CleartextUpgrade -> None": [[26, "    def test_prior_knowledge(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c.TestDisableH2CleartextU": {"func": {"test_upgrade": {"TestDisableH2CleartextUpgrade -> None": [[11, "    def test_upgrade(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c.TestDisableH2CleartextUpgrade.test_prior_knowledg": {"param": {"self": {"TestDisableH2CleartextUpgrade": [[26, "    def test_prior_knowledge(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c.TestDisableH2CleartextUpgrade.test_upgrade": {"var": {"a": {"DisableH2C": [[13, "            a = disable_h2c.DisableH2C()"]]}, "f": {"?": [[16, "            f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_disable_h2c.TestDisableH2CleartextUpgrade.test_upgrad": {"param": {"self": {"TestDisableH2CleartextUpgrade": [[11, "    def test_upgrade(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/modes/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes": {"var": {"__all__": {"[str]": [[6, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_command.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TDec.empty": {"param": {"self": {"TDec": [[506, "    def empty(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_typecheck": {"var": {"a": {"TypeErrAddon": [[83, "            a = TypeErrAddon()"]]}, "cm": {"CommandManager": [[82, "            cm = command.CommandManager(tctx.master)"]]}}, "param": {"self": {"TestCommand": [[80, "    def test_typecheck(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TAttr.__getattr__": {"param": {"item": {"?": [[511, "    def __getattr__(self, item):"]]}, "self": {"TAttr": [[511, "    def __getattr__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.test_collect_commands": {"var": {"a": {"TCmds": [[538, "        a = TCmds()"]], "TypeErrAddon": [[542, "        a = TypeErrAddon()"]]}, "c": {"CommandManager": [[537, "        c = command.CommandManager(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_parse_partial": {"var": {"current": {"?": [[415, "                current, remain = tctx.master.commands.parse_partial(s)"]]}, "tests": {"[{[{[?] | [CommandParameter] | str}] | [{[?] | [ParseResult] | str}] | [{[CommandParameter] | [ParseResult] | str}]}]": [[114, "        tests = ["]]}, "s": {"?": [[414, "            for s, expected, expectedremain in tests:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TypeErrAddon.invalidret": {"param": {"self": {"TypeErrAddon": [[71, "    def invalidret(self) -> Unsupported:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_call": {"var": {"a": {"TAddon": [[101, "            a = TAddon()"]]}, "c": {"Command": [[102, "            c = command.Command(cm, \"cmd.path\", a.cmd1)"], [106, "            c = command.Command(cm, \"cmd.two\", a.cmd2)"], [110, "            c = command.Command(cm, \"cmd.three\", a.cmd3)"]]}, "cm": {"CommandManager": [[100, "            cm = command.CommandManager(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_comman": {"class": {"TCmds": {"<TCmds>": [[520, "class TCmds(TAttr):"]]}}, "func": {"test_decorator": {"() -> None": [[547, "def test_decorator():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.DummyConsole": {"func": {"cut": {"(DummyConsole, ?) -> [[str]]": [[481, "    def cut(self, spec: str) -> mitmproxy.types.Data:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.DummyConsole.resolve": {"var": {"n": {"int": [[477, "        n = int(spec)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TypeErrAddo": {"func": {"invalidarg": {"(TypeErrAddon, ?) -> None": [[75, "    def invalidarg(self, u: Unsupported):"]]}, "invalidret": {"TypeErrAddon -> None": [[71, "    def invalidret(self) -> Unsupported:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TDec": {"func": {"empty": {"TDec -> None": [[506, "    def empty(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TypeErrAddon.noret": {"param": {"self": {"TypeErrAddon": [[67, "    def noret(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TA": {"func": {"subcommand": {"(TAddon, ?) -> str": [[34, "    def subcommand(self, cmd: mitmproxy.types.Cmd, *args: mitmproxy.types.CmdArgs) -> str:"]]}, "__getattr__": {"(TAttr, ?) -> None": [[511, "    def __getattr__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.DummyCon": {"func": {"resolve": {"(DummyConsole, ?) -> None": [[476, "    def resolve(self, spec: str) -> typing.Sequence[flow.Flow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_parse_partia": {"param": {"self": {"TestCommand": [[113, "    def test_parse_partial(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TypeErrAdd": {"func": {"noret": {"TypeErrAddon -> None": [[67, "    def noret(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TCmds.empty": {"param": {"self": {"TCmds": [[526, "    def empty(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.test_decorator": {"var": {"a": {"TDec": [[550, "        a = TDec()"]]}, "c": {"CommandManager": [[549, "        c = command.CommandManager(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TDe": {"func": {"cmd1": {"(TDec, ?) -> str": [[497, "    def cmd1(self, foo: str) -> str:"]]}, "cmd2": {"(TDec, ?) -> int": [[502, "    def cmd2(self, foo: str) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TCmds.__init__": {"param": {"self": {"TCmds": [[521, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_comma": {"class": {"TAddon": {"<TAddon>": [[15, "class TAddon:"]]}, "TypeErrAddon": {"<TypeErrAddon>": [[65, "class TypeErrAddon:"]]}, "Unsupported": {"<Unsupported>": [[61, "class Unsupported:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command": {"class": {"TDec": {"<TDec>": [[495, "class TDec:"]]}, "TAttr": {"<TAttr>": [[510, "class TAttr:"]]}, "DummyConsole": {"<DummyConsole>": [[474, "class DummyConsole:"]]}, "TAttr2": {"<TAttr2>": [[515, "class TAttr2:"]]}}, "func": {"test_parsearg": {"() -> None": [[485, "def test_parsearg():"]]}, "test_simple": {"() -> None": [[419, "def test_simple():"]]}, "test_typename": {"() -> None": [[454, "def test_typename():"]]}, "test_verify_arg_signature": {"() -> None": [[562, "def test_verify_arg_signature():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.test_simple": {"var": {"a": {"TAddon": [[422, "        a = TAddon()"]]}, "fp": {"?": [[449, "        fp = io.StringIO()"]]}, "c": {"CommandManager": [[421, "        c = command.CommandManager(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_c": {"class": {"TestCommand": {"<TestCommand>": [[79, "class TestCommand:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TAttr2": {"func": {"__getattr__": {"(TAttr2, ?) -> TAttr2": [[516, "    def __getattr__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TAddon.choic": {"param": {"self": {"TAddon": [[45, "    def choices(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TAttr2.__getattr__": {"param": {"item": {"?": [[516, "    def __getattr__(self, item):"]]}, "self": {"TAttr2": [[516, "    def __getattr__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_vararg": {"param": {"self": {"TestCommand": [[90, "    def test_varargs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_varargs": {"var": {"a": {"TAddon": [[93, "            a = TAddon()"]]}, "c": {"Command": [[94, "            c = command.Command(cm, \"varargs\", a.varargs)"]]}, "cm": {"CommandManager": [[92, "            cm = command.CommandManager(tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand.test_ca": {"param": {"self": {"TestCommand": [[98, "    def test_call(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TAddon.empty": {"param": {"self": {"TAddon": [[38, "    def empty(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TestCommand": {"func": {"test_parse_partial": {"TestCommand -> None": [[113, "    def test_parse_partial(self):"]]}, "test_varargs": {"TestCommand -> None": [[90, "    def test_varargs(self):"]]}, "test_call": {"TestCommand -> None": [[98, "    def test_call(self):"]]}, "test_typecheck": {"TestCommand -> None": [[80, "    def test_typecheck(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TCmds": {"func": {"empty": {"TCmds -> None": [[526, "    def empty(self) -> None:"]]}, "__init__": {"? -> ?": [[521, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command.TAddon": {"func": {"cmd4": {"(TAddon, ?, ?, ?) -> str": [[30, "    def cmd4(self, a: int, b: str, c: mitmproxy.types.Path) -> str:"]]}, "flow": {"(TAddon, ?, ?) -> None": [[57, "    def flow(self, f: flow.Flow, s: str) -> None:"]]}, "cmd1": {"(Command, str) -> None / (TAddon, ?) -> str": [[17, "    def cmd1(self, foo: str) -> str:"]]}, "cmd2": {"(TAddon, ?) -> int": [[22, "    def cmd2(self, foo: str) -> str:"]]}, "cmd3": {"(Command, ?) -> ? / (TAddon, ?) -> ?": [[26, "    def cmd3(self, foo: int) -> int:"]]}, "choose": {"(TAddon, ?) -> [str]": [[49, "    def choose(self, arg: str) -> typing.Sequence[str]:"]]}, "varargs": {"(TAddon, ?) -> list / (Command, ?) -> list": [[42, "    def varargs(self, one: str, *var: str) -> typing.Sequence[str]:"]]}, "path": {"(TAddon, ?) -> None": [[53, "    def path(self, arg: mitmproxy.types.Path) -> None:"]]}, "choices": {"TAddon -> [str]": [[45, "    def choices(self) -> typing.Sequence[str]:"]]}, "empty": {"TAddon -> None": [[38, "    def empty(self) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/websockets/test_masker.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_masker.TestM": {"func": {"test_masker": {"(TestMasker, ?, ?) -> None": [[17, "    def test_masker(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_m": {"class": {"TestMasker": {"<TestMasker>": [[7, "class TestMasker:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_masker.TestMasker.test_masker": {"var": {"data": {"?": [[22, "        data = websockets.Masker(b\"abcd\")(data)"]], "str": [[19, "        data = b\"\".join([m(t) for t in input])"]]}, "m": {"Masker": [[18, "        m = websockets.Masker(b\"abcd\")"]]}}, "param": {"expected": {"?": [[17, "    def test_masker(self, input, expected):"]]}, "input": {"?": [[17, "    def test_masker(self, input, expected):"]]}, "self": {"TestMasker": [[17, "    def test_masker(self, input, expected):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/hook-pkg_resources.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-pkg_": {"var": {"excludedimports": {"[str]": [[7, "excludedimports = ['__main__']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-pkg_resourc": {"var": {"hiddenimports": {"?": [[5, "hiddenimports = collect_submodules('pkg_resources._vendor')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/upstream_auth.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.parse_upstream_auth": {"var": {"pattern": {"?": [[11, "    pattern = re.compile(\".+:\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth": {"param": {"loader": {"?": [[32, "    def load(self, loader):"]]}}, "func": {"load": {"(UpstreamAuth, ?) -> None": [[32, "    def load(self, loader):"]]}, "configure": {"(UpstreamAuth, ?) -> None": [[41, "    def configure(self, updated):"]]}, "__init__": {"? -> ?": [[29, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth.__init__": {"param": {"self": {"UpstreamAuth": [[29, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAu": {"func": {"http_connect": {"(UpstreamAuth, ?) -> None": [[52, "    def http_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth.http_connect": {"param": {"self": {"UpstreamAuth": [[52, "    def http_connect(self, f):"]]}, "f": {"?": [[52, "    def http_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.parse_upstream_": {"param": {"auth": {"?": [[10, "def parse_upstream_auth(auth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth.configur": {"param": {"self": {"UpstreamAuth": [[41, "    def configure(self, updated):"]]}, "updated": {"?": [[41, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth.load": {"param": {"self": {"UpstreamAuth": [[32, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_": {"class": {"UpstreamAuth": {"<UpstreamAuth>": [[19, "class UpstreamAuth():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth.requestheader": {"param": {"self": {"UpstreamAuth": [[56, "    def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addon": {"func": {"parse_upstream_auth": {"? -> str": [[10, "def parse_upstream_auth(auth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamA": {"func": {"requestheaders": {"(UpstreamAuth, ?) -> None": [[56, "    def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.upstream_auth.UpstreamAuth.requestheaders": {"param": {"f": {"?": [[56, "    def requestheaders(self, f):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tservers.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.flowfile": {"var": {"t": {"?": [[48, "            t = tflow.tflow(resp=True)"]]}, "fw": {"FlowWriter": [[47, "            fw = io.FlowWriter(f)"]]}}, "param": {"path": {"?": [[45, "    def flowfile(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ReverseProxyT": {"func": {"get_options": {"<ReverseProxyTest> -> Options": [[298, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.setup": {"param": {"self": {"ProxyTestBase": [[167, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.shutdown": {"param": {"self": {"ProxyThread": [[107, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.tlog": {"param": {"self": {"ProxyThread": [[104, "    def tlog(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.dummy_cycl": {"param": {"content": {"?": [[40, "    async def dummy_cycle(self, master, n, content):"]]}, "master": {"?": [[40, "    async def dummy_cycle(self, master, n, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.setup_cla": {"var": {"opts": {"None": [[358, "            opts = cls.get_options()"]]}}, "param": {"cls": {"<HTTPUpstreamProxyTest>": [[354, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.setup_cla": {"param": {"cls": {"<ProxyTestBase>": [[138, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestS": {"func": {"websocket_start": {"(TestState, ?) -> None": [[64, "    def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMa": {"func": {"reset": {"(TestMaster, ?) -> None": [[84, "    def reset(self, addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase": {"var": {"ssl": {"None": [[131, "    ssl = None"]]}, "ssloptions": {"?": [[132, "    ssloptions = False"]]}}, "func": {"addons": {"ProxyTestBase -> [?] / HTTPUpstreamProxyTest -> [?]": [[189, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.run": {"param": {"self": {"ProxyThread": [[110, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.set_addon": {"param": {"self": {"ProxyTestBase": [[186, "    def set_addons(self, *addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest": {"func": {"flowfile": {"(MasterTest, ?) -> None": [[45, "    def flowfile(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.set_addon": {"param": {"self": {"ProxyThread": [[118, "    def set_addons(self, *addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.get_option": {"param": {"cls": {"<ProxyTestBase>": [[177, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.dummy_cyc": {"param": {"self": {"MasterTest": [[40, "    async def dummy_cycle(self, master, n, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest.path": {"var": {"conn": {"None": [[217, "            conn = None"]], "(str, ?)": [[215, "            conn = (\"127.0.0.1\", self.server.port)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.port": {"param": {"self": {"ProxyThread": [[100, "    def port(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.LazyPathoc.connect": {"param": {"self": {"LazyPathoc": [[201, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestState.respon": {"param": {"self": {"TestState": [[60, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ReverseProxyTes": {"func": {"pathod": {"(ReverseProxyTest, ?, None) -> Response": [[320, "    def pathod(self, spec, sni=None):"]]}, "pathoc": {"(ReverseProxyTest, None) -> Pathoc": [[311, "    def pathoc(self, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest.app": {"param": {"self": {"HTTPProxyTest": [[235, "    def app(self, page):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTes": {"func": {"pathod": {"(HTTPProxyTest, ?, None) -> Response": [[223, "    def pathod(self, spec, sni=None):"]]}, "pathoc": {"(HTTPProxyTest, None) -> LazyPathoc": [[210, "    def pathoc(self, sni=None):"]]}, "pathoc_raw": {"HTTPProxyTest -> Pathoc": [[207, "    def pathoc_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMast": {"func": {"clear_addons": {"(TestMaster, ?) -> None": [[76, "    def clear_addons(self, addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.LazyPathoc.__ini": {"param": {"lazy_connect": {"(str, ?)": [[197, "    def __init__(self, lazy_connect, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.flowfi": {"param": {"self": {"MasterTest": [[45, "    def flowfile(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.teardown_class": {"var": {"proxy": {"?": [[371, "        for proxy in cls.chain:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.dummy_cycle": {"var": {"i": {"int": [[41, "        for i in range(n):"]]}}, "param": {"n": {"?": [[40, "    async def dummy_cycle(self, master, n, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.__init__": {"param": {"masterclass": {"<TestMaster>": [[91, "    def __init__(self, masterclass, options):"]]}, "self": {"ProxyThread": [[91, "    def __init__(self, masterclass, options):"]]}, "options": {"{None | Options}": [[91, "    def __init__(self, masterclass, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTest.get_option": {"var": {"opts": {"Options": [[267, "        opts = ProxyTestBase.get_options()"]]}}, "param": {"cls": {"<TransparentProxyTest>": [[266, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.master": {"param": {"self": {"ProxyTestBase": [[173, "    def master(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest": {"param": {"page": {"?": [[235, "    def app(self, page):"]]}}, "func": {"app": {"(HTTPProxyTest, ?) -> Response": [[235, "    def app(self, page):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ReverseProxyTest.pathod": {"var": {"q": {"str": [[326, "            q = \"get:'/p/%s'\" % spec"], [329, "            q = \"get:'/p/%s'\" % spec"]]}, "p": {"Pathoc": [[325, "            p = self.pathoc(sni=sni)"], [328, "            p = self.pathoc()"]]}}, "param": {"self": {"ReverseProxyTest": [[320, "    def pathod(self, spec, sni=None):"]]}, "spec": {"?": [[320, "    def pathod(self, spec, sni=None):"]]}, "sni": {"None": [[320, "    def pathod(self, spec, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTest.teardown_cla": {"param": {"cls": {"<TransparentProxyTest>": [[260, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest.a": {"var": {"p": {"LazyPathoc": [[243, "            p = self.pathoc()"]], "Pathoc": [[237, "            p = pathod.pathoc.Pathoc("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.LazyPath": {"func": {"connect": {"LazyPathoc -> ConnectionCloser": [[201, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest.pathoc_raw": {"param": {"self": {"HTTPProxyTest": [[207, "    def pathoc_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBas": {"func": {"teardown": {"ProxyTestBase -> ?": [[159, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.teardown_cla": {"param": {"cls": {"<HTTPUpstreamProxyTest>": [[369, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest.pathoc": {"param": {"self": {"HTTPProxyTest": [[210, "    def pathoc(self, sni=None):"]]}, "sni": {"None": [[210, "    def pathoc(self, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.SocksModeTest.get_option": {"var": {"opts": {"Options": [[338, "        opts = ProxyTestBase.get_options()"]]}}, "param": {"cls": {"<SocksModeTest>": [[337, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.cyc": {"var": {"layer": {"?": [[31, "        layer = mock.Mock(\"mitmproxy.proxy.protocol.base.Layer\")"]]}}, "param": {"self": {"MasterTest": [[29, "    async def cycle(self, master, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPProxyTest.pathod": {"var": {"q": {"?": [[231, "            q = \"get:'%s/p/%s'\" % (self.server.urlbase, spec)"]], "str": [[229, "            q = \"get:'/p/%s'\" % spec"]]}, "p": {"LazyPathoc": [[227, "        p = self.pathoc(sni=sni)"]]}}, "param": {"self": {"HTTPProxyTest": [[223, "    def pathod(self, spec, sni=None):"]]}, "spec": {"?": [[223, "    def pathod(self, spec, sni=None):"]]}, "sni": {"None": [[223, "    def pathod(self, spec, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread.start": {"param": {"self": {"ProxyThread": [[121, "    def start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMaster": {"func": {"__init__": {"? -> ?": [[71, "    def __init__(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBa": {"func": {"get_options": {"<ProxyTestBase> -> Options": [[177, "    def get_options(cls):"]]}, "setup": {"ProxyTestBase -> None": [[167, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.cycl": {"param": {"content": {"?": [[29, "    async def cycle(self, master, content):"]]}, "master": {"?": [[29, "    async def cycle(self, master, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestState.websocket_start": {"param": {"self": {"TestState": [[64, "    def websocket_start(self, f):"]]}, "f": {"?": [[64, "    def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTest.pathod": {"var": {"q": {"str": [[277, "            q = \"get:'/p/%s'\" % spec"], [280, "            q = \"get:'/p/%s'\" % spec"]]}, "p": {"Pathoc": [[276, "            p = self.pathoc(sni=sni)"], [279, "            p = self.pathoc()"]]}}, "param": {"self": {"TransparentProxyTest": [[271, "    def pathod(self, spec, sni=None):"]]}, "spec": {"?": [[271, "    def pathod(self, spec, sni=None):"]]}, "sni": {"None": [[271, "    def pathod(self, spec, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest": {"var": {"chain": {"[?]": [[350, "    chain = None"]]}, "n": {"int": [[351, "    n = 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTest.pathoc": {"var": {"p": {"Pathoc": [[288, "        p = pathod.pathoc.Pathoc("]]}}, "param": {"self": {"TransparentProxyTest": [[284, "    def pathoc(self, sni=None):"]]}, "sni": {"None": [[284, "    def pathoc(self, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTest.setup_cla": {"param": {"cls": {"<TransparentProxyTest>": [[252, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmp": {"class": {"ReverseProxyTest": {"<ReverseProxyTest>": [[294, "class ReverseProxyTest(ProxyTestBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestSta": {"func": {"request": {"(TestState, ?) -> None": [[56, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.SocksModeT": {"func": {"get_options": {"<SocksModeTest> -> Options": [[337, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.teardown": {"param": {"self": {"ProxyTestBase": [[159, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTes": {"func": {"pathod": {"(TransparentProxyTest, ?, None) -> Response": [[271, "    def pathod(self, spec, sni=None):"]]}, "pathoc": {"(TransparentProxyTest, None) -> Pathoc": [[284, "    def pathoc(self, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ReverseProxyTest.get_option": {"var": {"s": {"str": [[300, "        s = \"\".join("]]}, "opts": {"Options": [[299, "        opts = ProxyTestBase.get_options()"]]}}, "param": {"cls": {"<ReverseProxyTest>": [[298, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestState.__init__": {"param": {"self": {"TestState": [[53, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestState.request": {"param": {"self": {"TestState": [[56, "    def request(self, f):"]]}, "f": {"?": [[56, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestState.response": {"param": {"f": {"?": [[60, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyT": {"func": {"get_options": {"<TransparentProxyTest> -> Options": [[266, "    def get_options(cls):"]]}, "setup_class": {"<TransparentProxyTest> -> None": [[252, "    def setup_class(cls):"]]}, "teardown_class": {"<TransparentProxyTest> -> None": [[260, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestState": {"func": {"__init__": {"? -> ?": [[53, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tserver": {"class": {"TestState": {"<TestState>": [[52, "class TestState:"]]}, "SocksModeTest": {"<SocksModeTest>": [[334, "class SocksModeTest(HTTPProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.LazyPathoc": {"func": {"__init__": {"? -> ?": [[197, "    def __init__(self, lazy_connect, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.setup_class": {"var": {"proxy": {"ProxyThread": [[359, "            proxy = ProxyThread(cls.masterclass, opts)"]]}, "_": {"int": [[357, "        for _ in range(cls.n):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.teardown_cla": {"param": {"cls": {"<ProxyTestBase>": [[151, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMaster.clear_addon": {"param": {"self": {"TestMaster": [[76, "    def clear_addons(self, addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestB": {"var": {"masterclass": {"<TestMaster>": [[133, "    masterclass = TestMaster"]]}, "add_upstream_certs_to_client_chain": {"?": [[135, "    add_upstream_certs_to_client_chain = False"]]}}, "func": {"setup_class": {"<ProxyTestBase> -> None": [[138, "    def setup_class(cls):"]]}, "teardown_class": {"<ProxyTestBase> -> None": [[151, "    def teardown_class(cls):"]]}, "master": {"ProxyTestBase -> ?": [[173, "    def master(self):"]]}, "set_addons": {"ProxyTestBase -> None": [[186, "    def set_addons(self, *addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMaster.reset": {"param": {"self": {"TestMaster": [[84, "    def reset(self, addons):"]]}, "addons": {"?": [[84, "    def reset(self, addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThrea": {"func": {"shutdown": {"ProxyThread -> None": [[107, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tserv": {"class": {"HTTPProxyTest": {"<HTTPProxyTest>": [[205, "class HTTPProxyTest(ProxyTestBase):"]]}, "TransparentProxyTest": {"<TransparentProxyTest>": [[248, "class TransparentProxyTest(ProxyTestBase):"]]}, "TestMaster": {"<TestMaster>": [[69, "class TestMaster(taddons.RecordingMaster):"]]}, "MasterTest": {"<MasterTest>": [[27, "class MasterTest:"]]}, "ProxyTestBase": {"<ProxyTestBase>": [[129, "class ProxyTestBase:"]]}, "HTTPUpstreamProxyTest": {"<HTTPUpstreamProxyTest>": [[343, "class HTTPUpstreamProxyTest(HTTPProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyTestBase.addon": {"param": {"self": {"{HTTPUpstreamProxyTest | ProxyTestBase}": [[189, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThr": {"func": {"set_addons": {"ProxyThread -> None": [[118, "    def set_addons(self, *addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.MasterTest.cycle": {"var": {"i": {"?": [[35, "        for i in eventsequence.iterate(f):"]]}, "f": {"?": [[30, "        f = tflow.tflow(req=tutils.treq(content=content))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TransparentProxyTest": {"var": {"ssl": {"None": [[249, "    ssl = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.setup": {"param": {"self": {"HTTPUpstreamProxyTest": [[374, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers": {"class": {"ProxyThread": {"<ProxyThread>": [[89, "class ProxyThread(threading.Thread):"]]}, "LazyPathoc": {"<LazyPathoc>": [[196, "class LazyPathoc(pathod.pathoc.Pathoc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ProxyThread": {"func": {"tlog": {"ProxyThread -> ?": [[104, "    def tlog(self):"]]}, "start": {"ProxyThread -> None": [[121, "    def start(self):"]]}, "run": {"ProxyThread -> None": [[110, "    def run(self):"]]}, "port": {"ProxyThread -> ?": [[100, "    def port(self):"]]}, "__init__": {"? -> ?": [[91, "    def __init__(self, masterclass, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ReverseProxyTest.pathoc": {"var": {"p": {"Pathoc": [[315, "        p = pathod.pathoc.Pathoc("]]}}, "param": {"self": {"ReverseProxyTest": [[311, "    def pathoc(self, sni=None):"]]}, "sni": {"None": [[311, "    def pathoc(self, sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.ReverseProxyTest": {"var": {"ssl": {"None": [[295, "    ssl = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.get_option": {"var": {"s": {"str": [[383, "            s = \"http://127.0.0.1:%s\" % cls.chain[0].port"]]}, "opts": {"?": [[381, "        opts = super().get_options()"]]}}, "param": {"cls": {"<HTTPUpstreamProxyTest>": [[380, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyT": {"func": {"get_options": {"<HTTPUpstreamProxyTest> -> None": [[380, "    def get_options(cls):"]]}, "setup_class": {"<HTTPUpstreamProxyTest> -> None": [[354, "    def setup_class(cls):"]]}, "setup": {"HTTPUpstreamProxyTest -> None": [[374, "    def setup(self):"]]}, "teardown_class": {"<HTTPUpstreamProxyTest> -> None": [[369, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMaster.__init__": {"var": {"config": {"ProxyConfig": [[73, "        config = ProxyConfig(opts)"]]}}, "param": {"self": {"TestMaster": [[71, "    def __init__(self, opts):"]]}, "opts": {"None": [[71, "    def __init__(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.LazyPathoc.__init__": {"param": {"self": {"LazyPathoc": [[197, "    def __init__(self, lazy_connect, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestStat": {"func": {"response": {"(TestState, ?) -> None": [[60, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.TestMaster.clear_": {"param": {"addons": {"?": [[76, "    def clear_addons(self, addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tservers.HTTPUpstreamProxyTest.setu": {"var": {"proxy": {"?": [[376, "        for proxy in self.chain:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-redirect-requests.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-redirect-": {"func": {"request": {"? -> None": [[5, "def request(flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_browser.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_browser.test_no_browser": {"var": {"b": {"Browser": [[30, "        b = browser.Browser()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_browser.test_browser": {"var": {"b": {"Browser": [[12, "        b = browser.Browser()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/commandexecutor.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commandexecutor.CommandExecutor.__call__": {"var": {"ret": {"?": [[18, "                ret = self.master.commands.execute(cmd)"]]}}, "param": {"self": {"CommandExecutor": [[15, "    def __call__(self, cmd):"]]}, "cmd": {"?": [[15, "    def __call__(self, cmd):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commandexecutor.CommandExecutor": {"func": {"__call__": {"(CommandExecutor, ?) -> ?": [[15, "    def __call__(self, cmd):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.consol": {"class": {"CommandExecutor": {"<CommandExecutor>": [[11, "class CommandExecutor:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commandexecutor.CommandExecutor.__init__": {"param": {"self": {"CommandExecutor": [[12, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[12, "    def __init__(self, master):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_http.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequ": {"func": {"test_err": {"TestRequest -> None": [[26, "    def test_err(self):"]]}, "test_freeze": {"TestRequest -> None": [[125, "    def test_freeze(self):"]]}, "test_nested_response": {"TestRequest -> None": [[74, "    def test_nested_response(self):"]]}, "test_render": {"TestRequest -> None": [[82, "    def test_render(self):"]]}, "test_simple": {"TestRequest -> None": [[30, "    def test_simple(self):"]]}, "test_spec": {"TestRequest -> None": [[118, "    def test_spec(self):"]]}, "test_path_generator": {"TestRequest -> None": [[129, "    def test_path_generator(self):"]]}, "test_nonascii": {"TestRequest -> None": [[22, "    def test_nonascii(self):"]]}, "test_websocket": {"TestRequest -> None": [[133, "    def test_websocket(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_pause_after": {"param": {"self": {"TestResponse": [[240, "    def test_parse_pause_after(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_pause_random": {"var": {"r": {"?": [[245, "        r = next(language.parse_pathod(\"400:pr,10\"))"]]}}, "param": {"self": {"TestResponse": [[244, "    def test_parse_pause_random(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_spec": {"param": {"self": {"TestRequest": [[118, "    def test_spec(self):"]]}}, "func": {"rt": {"str -> None": [[119, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_length.testlen": {"var": {"x": {"?": [[195, "            x = next(x)"]]}, "s": {"?": [[194, "            s = io.BytesIO()"]]}}, "param": {"x": {"?": [[193, "        def testlen(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestReq": {"func": {"test_multiple": {"TestRequest -> None": [[39, "    def test_multiple(self):"]]}, "test_multiline": {"TestRequest -> None": [[91, "    def test_multiline(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_header": {"param": {"self": {"TestResponse": [[232, "    def test_parse_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_user_agent": {"var": {"v2": {"?": [[325, "    v2 = v.freeze({})"]]}, "v3": {"?": [[326, "    v3 = v2.freeze({})"]]}, "e": {"?": [[315, "    e = http.ShortcutUserAgent.expr()"], [319, "    e = http.ShortcutUserAgent.expr()"]]}, "v": {"?": [[316, "    v = e.parseString(\"ua\")[0]"], [320, "    v = e.parseString(\"u'a'\")[0]"], [323, "    v = e.parseString(\"u@100'\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_response": {"var": {"r": {"?": [[155, "        r = next(language.parse_pathod(\"400:m'msg'\"))"], [159, "        r = next(language.parse_pathod(\"400:m'msg':b@100b\"))"], [164, "        r = next(language.parse_pathod(\"200\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_pause_befor": {"param": {"self": {"TestResponse": [[236, "    def test_parse_pause_before(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_nonascii": {"param": {"self": {"TestRequest": [[22, "    def test_nonascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_nested_response": {"var": {"r": {"list": [[76, "        r = list(language.parse_pathoc(l))"]]}, "l": {"str": [[75, "        l = \"get:/p:s'200'\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_maximum_length.testlen": {"var": {"x": {"?": [[204, "            x = next(x)"]]}, "s": {"?": [[205, "            s = io.BytesIO()"]]}, "m": {"?": [[206, "            m = x.maximum_length({})"]]}}, "param": {"x": {"?": [[203, "        def testlen(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_rende": {"var": {"r": {"?": [[171, "        r = next(language.parse_pathod(\"400:m'msg'\"))"], [174, "        r = next(language.parse_pathod(\"400:p0,100:dr\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_heade": {"var": {"r": {"?": [[233, "        r = next(language.parse_pathod('400:h\"foo\"=\"bar\"'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_err": {"param": {"self": {"TestRequest": [[26, "    def test_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_path_generato": {"var": {"r": {"?": [[130, "        r = parse_request(\"GET:@100\").freeze(language.Settings())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResp": {"func": {"test_nonascii": {"TestResponse -> None": [[228, "    def test_nonascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_render": {"var": {"s": {"?": [[83, "        s = io.BytesIO()"]]}}, "param": {"self": {"TestRequest": [[82, "    def test_render(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.parse_request": {"param": {"s": {"str": [[10, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_websocket": {"var": {"res": {"?": [[135, "        res = r.resolve(language.Settings())"], [142, "        res = r.resolve(language.Settings())"]]}, "r": {"?": [[134, "        r = parse_request('ws:/path/')"], [141, "        r = parse_request('ws:put:/path/')"]]}}, "param": {"self": {"TestRequest": [[133, "    def test_websocket(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_nested_respons": {"var": {"e": {"?": [[331, "    e = http.NestedResponse.expr()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_nested_response_freez": {"var": {"e": {"NestedResponse": [[344, "    e = http.NestedResponse("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http": {"class": {"TestRequest": {"<TestRequest>": [[20, "class TestRequest:"]]}}, "func": {"test_location_shortcut": {"() -> None": [[288, "def test_location_shortcut():"]]}, "test_shortcuts": {"() -> None": [[304, "def test_shortcuts():"]]}, "test_user_agent": {"() -> None": [[314, "def test_user_agent():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_str": {"param": {"self": {"TestResponse": [[248, "    def test_parse_stress(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.languag": {"func": {"test_ctype_shortcut": {"() -> None": [[272, "def test_ctype_shortcut():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_ctype_shortcut": {"var": {"s": {"?": [[278, "    s = v.spec()"]]}, "v3": {"?": [[284, "    v3 = v2.freeze({})"]]}, "e": {"?": [[273, "    e = http.ShortcutContentType.expr()"], [281, "    e = http.ShortcutContentType.expr()"]]}, "v2": {"?": [[283, "    v2 = v.freeze({})"]]}, "v": {"?": [[274, "    v = e.parseString(\"c'foo'\")[0]"], [282, "    v = e.parseString(\"c@100\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_stress": {"var": {"r": {"?": [[253, "        r = next(language.parse_pathod(\"400:b@1g\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_websockets": {"var": {"r": {"?": [[265, "        r = next(language.parse_pathod(\"ws\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_multip": {"param": {"self": {"TestRequest": [[39, "    def test_multiple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_h": {"class": {"TestResponse": {"<TestResponse>": [[149, "class TestResponse:"]]}}, "func": {"test_nested_response": {"() -> None": [[330, "def test_nested_response():"]]}, "test_make_error_response": {"() -> None": [[14, "def test_make_error_response():"]]}, "test_nested_response_freeze": {"() -> None": [[343, "def test_nested_response_freeze():"]]}, "parse_request": {"? -> ? / str -> ?": [[10, "def parse_request(s):"]]}, "test_unique_components": {"() -> None": [[353, "def test_unique_components():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_path_generator": {"param": {"self": {"TestRequest": [[129, "    def test_path_generator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_length": {"param": {"self": {"TestResponse": [[192, "    def test_length(self):"]]}}, "func": {"testlen": {"? -> None": [[193, "        def testlen(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_spec.rt": {"var": {"s": {"?": [[258, "            s = next(language.parse_pathod(s)).spec()"]]}}, "param": {"s": {"str": [[257, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_multiline": {"var": {"r": {"?": [[97, "        r = parse_request(l)"], [113, "        r = parse_request(l)"]]}, "l": {"str": [[92, "        l = \"\"\""], [102, "        l = \"\"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_raw": {"var": {"s": {"?": [[180, "        s = io.BytesIO()"], [186, "        s = io.BytesIO()"]]}, "r": {"?": [[181, "        r = next(language.parse_pathod(\"400:b'foo'\"))"], [187, "        r = next(language.parse_pathod(\"400:b'foo':r\"))"]]}, "v": {"?": [[183, "        v = s.getvalue()"], [189, "        v = s.getvalue()"]]}}, "param": {"self": {"TestResponse": [[179, "    def test_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRespo": {"func": {"test_render": {"TestResponse -> None": [[169, "    def test_render(self):"]]}, "test_length": {"TestResponse -> None": [[192, "    def test_length(self):"]]}, "test_maximum_length": {"TestResponse -> None": [[202, "    def test_maximum_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_spec.rt": {"var": {"s": {"?": [[120, "            s = parse_request(s).spec()"]]}}, "param": {"s": {"str": [[119, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_rende": {"var": {"r": {"?": [[84, "        r = parse_request(\"GET:'/foo'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_nested_response": {"var": {"f": {"?": [[339, "    f = v.freeze({})"]]}, "v": {"?": [[332, "    v = e.parseString(\"s'200'\")[0]"], [337, "    v = e.parseString('s\"200:b@1\"')[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_location_shortcut": {"var": {"s": {"?": [[294, "    s = v.spec()"]]}, "v3": {"?": [[300, "    v3 = v2.freeze({})"]]}, "e": {"?": [[289, "    e = http.ShortcutLocation.expr()"], [297, "    e = http.ShortcutLocation.expr()"]]}, "v2": {"?": [[299, "    v2 = v.freeze({})"]]}, "v": {"?": [[290, "    v = e.parseString(\"l'foo'\")[0]"], [298, "    v = e.parseString(\"l@100\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_simple": {"var": {"r": {"?": [[31, "        r = parse_request('GET:\"/foo\"')"], [34, "        r = parse_request('GET:/foo')"], [36, "        r = parse_request('GET:@1k')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_render": {"var": {"s": {"?": [[170, "        s = io.BytesIO()"], [176, "        s = r.preview_safe()"]]}}, "param": {"self": {"TestResponse": [[169, "    def test_render(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_nested_respon": {"param": {"self": {"TestRequest": [[74, "    def test_nested_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_websocket": {"var": {"res": {"?": [[268, "        res = r.resolve(language.Settings(websocket_key=b\"foo\"))"]]}}, "param": {"self": {"TestResponse": [[264, "    def test_websockets(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRespon": {"func": {"test_parse_header": {"TestResponse -> None": [[232, "    def test_parse_header(self):"]]}, "test_parse_pause_after": {"TestResponse -> None": [[240, "    def test_parse_pause_after(self):"]]}, "test_parse_stress": {"TestResponse -> None": [[248, "    def test_parse_stress(self):"]]}, "test_parse_err": {"TestResponse -> ?": [[219, "    def test_parse_err(self):"]]}, "test_spec": {"TestResponse -> None": [[256, "    def test_spec(self):"]]}, "test_websockets": {"TestResponse -> None": [[264, "    def test_websockets(self):"]]}, "test_raw": {"TestResponse -> None": [[179, "    def test_raw(self):"]]}, "test_parse_pause_before": {"TestResponse -> None": [[236, "    def test_parse_pause_before(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.dummy_respon": {"param": {"self": {"TestResponse": [[151, "    def dummy_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_spec": {"param": {"self": {"TestResponse": [[256, "    def test_spec(self):"]]}}, "func": {"rt": {"str -> None": [[257, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_simp": {"param": {"self": {"TestRequest": [[30, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_nonascii": {"param": {"self": {"TestResponse": [[228, "    def test_nonascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_multiple": {"var": {"r": {"list": [[40, "        r = list(language.parse_pathoc(\"GET:/ PUT:/\"))"], [60, "        r = list(language.parse_pathoc(l))"], [69, "        r = list(language.parse_pathoc(l))"]]}, "l": {"str": [[45, "        l = \"\"\""], [65, "        l = \"\"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_freeze": {"var": {"r": {"?": [[126, "        r = parse_request(\"GET:/:b@100\").freeze(language.Settings())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_respon": {"param": {"self": {"TestResponse": [[154, "    def test_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_freez": {"param": {"self": {"TestRequest": [[125, "    def test_freeze(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_pause_afte": {"var": {"r": {"?": [[241, "        r = next(language.parse_pathod(\"400:pa,10\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_pause_before": {"var": {"r": {"?": [[237, "        r = next(language.parse_pathod(\"400:p0,10\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestR": {"func": {"dummy_response": {"TestResponse -> ?": [[151, "    def dummy_response(self):"]]}, "test_response": {"TestResponse -> None": [[154, "    def test_response(self):"]]}, "test_parse_pause_random": {"TestResponse -> None": [[244, "    def test_parse_pause_random(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_parse_err": {"param": {"self": {"TestResponse": [[219, "    def test_parse_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestRequest.test_multilin": {"param": {"self": {"TestRequest": [[91, "    def test_multiline(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.test_make_error_response": {"var": {"s": {"Response": [[16, "    s = http.make_error_response(\"foo\")"]]}, "d": {"?": [[15, "    d = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http.TestResponse.test_maximum_length": {"var": {"r": {"?": [[210, "        r = language.parse_pathod(\"400:m'msg':b@100:d0\")"], [213, "        r = language.parse_pathod(\"400:m'msg':b@100:d0:i0,'foo'\")"], [216, "        r = language.parse_pathod(\"400:m'msg':b@100:d0:i0,'foo'\")"]]}}, "param": {"self": {"TestResponse": [[202, "    def test_maximum_length(self):"]]}}, "func": {"testlen": {"? -> None": [[203, "        def testlen(x):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/io/test_protobuf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_request_empty_content": {"var": {"lreq": {"None": [[77, "        lreq = protobuf._load_http_request(preq)"]]}, "req": {"HTTPRequest": [[75, "        req = http.HTTPRequest.wrap(tutils.treq(content=b\"\"))"]]}, "preq": {"None": [[76, "        preq = protobuf._dump_http_request(req)"]]}}, "param": {"self": {"TestProtobuf": [[74, "    def test_roundtrip_http_request_empty_content(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_error": {"param": {"self": {"TestProtobuf": [[92, "    def test_roundtrip_http_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_flow_only_req": {"var": {"lf": {"HTTPFlow": [[102, "        lf = protobuf.loads(pf, \"http\")"]]}, "pf": {"None": [[101, "        pf = protobuf.dumps(f)"]]}, "f": {"?": [[99, "        f = tflow.tflow()"]]}}, "param": {"self": {"TestProtobuf": [[98, "    def test_roundtrip_http_flow_only_req(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_respon": {"var": {"res": {"HTTPResponse": [[81, "        res = http.HTTPResponse.wrap(tutils.tresp())"]]}, "lres": {"None": [[83, "        lres = protobuf._load_http_response(pres)"]]}, "pres": {"None": [[82, "        pres = protobuf._dump_http_response(res)"]]}}, "param": {"self": {"TestProtobuf": [[80, "    def test_roundtrip_http_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_server_cer": {"param": {"tdata": {"?": [[42, "    def test_roundtrip_server_cert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf": {"func": {"test_unsupported_loads": {"TestProtobuf -> None": [[117, "    def test_unsupported_loads(self):"]]}, "test_roundtrip_client_cert": {"(TestProtobuf, ?) -> None": [[21, "    def test_roundtrip_client_cert(self, tdata):"]]}, "test_roundtrip_http_request": {"TestProtobuf -> None": [[68, "    def test_roundtrip_http_request(self):"]]}, "test_roundtrip_http_response_empty_content": {"TestProtobuf -> None": [[86, "    def test_roundtrip_http_response_empty_content(self):"]]}, "test_roundtrip_server_cert": {"(TestProtobuf, ?) -> None": [[42, "    def test_roundtrip_server_cert(self, tdata):"]]}, "test_roundtrip_server_via": {"TestProtobuf -> None": [[54, "    def test_roundtrip_server_via(self):"]]}, "test_roundtrip_http_request_empty_content": {"TestProtobuf -> None": [[74, "    def test_roundtrip_http_request_empty_content(self):"]]}, "test_unsupported_dumps": {"TestProtobuf -> None": [[112, "    def test_unsupported_dumps(self):"]]}, "test_roundtrip_client": {"TestProtobuf -> None": [[12, "    def test_roundtrip_client(self):"]]}, "test_roundtrip_http_error": {"TestProtobuf -> None": [[92, "    def test_roundtrip_http_error(self):"]]}, "test_roundtrip_server": {"TestProtobuf -> None": [[33, "    def test_roundtrip_server(self):"]]}, "test_roundtrip_http_response": {"TestProtobuf -> None": [[80, "    def test_roundtrip_http_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_request": {"var": {"lreq": {"None": [[71, "        lreq = protobuf._load_http_request(preq)"]]}, "req": {"HTTPRequest": [[69, "        req = http.HTTPRequest.wrap(tutils.treq())"]]}, "preq": {"None": [[70, "        preq = protobuf._dump_http_request(req)"]]}}, "param": {"self": {"TestProtobuf": [[68, "    def test_roundtrip_http_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_client_cer": {"param": {"tdata": {"?": [[21, "    def test_roundtrip_client_cert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_flow_res": {"var": {"lf": {"HTTPFlow": [[109, "        lf = protobuf.loads(pf, \"http\")"]]}, "pf": {"None": [[108, "        pf = protobuf.dumps(f)"]]}, "f": {"?": [[106, "        f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtob": {"func": {"test_roundtrip_http_flow_res": {"TestProtobuf -> None": [[105, "    def test_roundtrip_http_flow_res(self):"]]}, "test_roundtrip_http_flow_only_req": {"TestProtobuf -> None": [[98, "    def test_roundtrip_http_flow_only_req(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_unsupported_dump": {"param": {"self": {"TestProtobuf": [[112, "    def test_unsupported_dumps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_client": {"var": {"pc": {"None": [[17, "        pc = protobuf._dump_http_client_conn(c)"]]}, "c": {"?": [[13, "        c = tflow.tclient_conn()"]]}, "lc": {"None": [[18, "        lc = protobuf._load_http_client_conn(pc)"]]}}, "param": {"self": {"TestProtobuf": [[12, "    def test_roundtrip_client(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_unsupported_load": {"param": {"self": {"TestProtobuf": [[117, "    def test_unsupported_loads(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_erro": {"var": {"perr": {"None": [[94, "        perr = protobuf._dump_http_error(err)"]]}, "lerr": {"Error": [[95, "        lerr = protobuf._load_http_error(perr)"]]}, "err": {"?": [[93, "        err = tflow.terr()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_p": {"class": {"TestProtobuf": {"<TestProtobuf>": [[10, "class TestProtobuf:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_server_via": {"var": {"ps": {"None": [[60, "        ps = protobuf._dump_http_server_conn(s)"]]}, "s": {"?": [[55, "        s = tflow.tserver_conn()"]]}, "ls": {"None": [[61, "        ls = protobuf._load_http_server_conn(ps)"]]}}, "param": {"self": {"TestProtobuf": [[54, "    def test_roundtrip_server_via(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_flow_r": {"param": {"self": {"TestProtobuf": [[105, "    def test_roundtrip_http_flow_res(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_server_cert": {"var": {"ps": {"None": [[50, "        ps = protobuf._dump_http_server_conn(s)"]]}, "s": {"?": [[43, "        s = tflow.tserver_conn()"]]}, "d": {"str": [[48, "            d = f.read()"]]}, "ls": {"None": [[51, "        ls = protobuf._load_http_server_conn(ps)"]]}}, "param": {"self": {"TestProtobuf": [[42, "    def test_roundtrip_server_cert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_client_cert": {"var": {"pc": {"None": [[29, "        pc = protobuf._dump_http_client_conn(c)"]]}, "c": {"?": [[22, "        c = tflow.tclient_conn()"]]}, "d": {"str": [[27, "            d = f.read()"]]}, "lc": {"None": [[30, "        lc = protobuf._load_http_client_conn(pc)"]]}}, "param": {"self": {"TestProtobuf": [[21, "    def test_roundtrip_client_cert(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_unsupported_loads": {"var": {"b": {"str": [[118, "        b = b\"blobs\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_server": {"var": {"ps": {"None": [[38, "        ps = protobuf._dump_http_server_conn(s)"]]}, "s": {"?": [[34, "        s = tflow.tserver_conn()"]]}, "ls": {"None": [[39, "        ls = protobuf._load_http_server_conn(ps)"]]}}, "param": {"self": {"TestProtobuf": [[33, "    def test_roundtrip_server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_unsupported_dumps": {"var": {"w": {"?": [[113, "        w = tflow.twebsocketflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_protobuf.TestProtobuf.test_roundtrip_http_response_empty_content": {"var": {"res": {"HTTPResponse": [[87, "        res = http.HTTPResponse.wrap(tutils.tresp(content=b\"\"))"]]}, "lres": {"None": [[89, "        lres = protobuf._load_http_response(pres)"]]}, "pres": {"None": [[88, "        pres = protobuf._dump_http_response(res)"]]}}, "param": {"self": {"TestProtobuf": [[86, "    def test_roundtrip_http_response_empty_content(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/test_main.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_main.test_mitmdump": {"param": {"tdata": {"?": [[18, "def test_mitmdump(event_loop, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_main": {"func": {"test_mitmweb": {"(?, ?) -> None": [[9, "def test_mitmweb(event_loop, tdata):"]]}, "test_mitmdump": {"(?, ?) -> None": [[18, "def test_mitmdump(event_loop, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_main.test_mitmdum": {"param": {"event_loop": {"?": [[18, "def test_mitmdump(event_loop, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_ma": {"var": {"shutdown_script": {"str": [[6, "shutdown_script = \"mitmproxy/data/addonscripts/shutdown.py\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.test_main.test_mitmweb": {"param": {"tdata": {"?": [[9, "def test_mitmweb(event_loop, tdata):"]]}, "event_loop": {"?": [[9, "def test_mitmweb(event_loop, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/grideditor/editors.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor": {"var": {"columns": {"[Column]": [[89, "    columns = ["]]}, "title": {"str": [[88, "    title = \"Edit Path Components\""]]}}, "func": {"get_data": {"(PathEditor, ?) -> [[?]]": [[99, "    def get_data(self, flow):"]]}, "data_in": {"(PathEditor, ?) -> [[?]]": [[93, "    def data_in(self, data):"]]}, "set_data": {"(PathEditor, ?, ?) -> None": [[102, "    def set_data(self, vals, flow):"]]}, "data_out": {"(PathEditor, ?) -> [?]": [[96, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.data_ou": {"param": {"data": {"?": [[169, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestMultipartEditor": {"var": {"columns": {"[Column]": [[58, "    columns = ["]]}, "title": {"str": [[57, "    title = \"Edit Multipart Form\""]]}}, "func": {"get_data": {"(RequestMultipartEditor, ?) -> ?": [[63, "    def get_data(self, flow):"]]}, "set_data": {"(RequestMultipartEditor, ?, ?) -> None": [[67, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.ResponseHeaderEditor.set_data": {"param": {"self": {"ResponseHeaderEditor": [[52, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[52, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestUrlEncodedEditor.get_data": {"param": {"self": {"RequestUrlEncodedEditor": [[78, "    def get_data(self, flow):"]]}, "flow": {"?": [[78, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.e": {"class": {"OptionsEditor": {"<OptionsEditor>": [[187, "class OptionsEditor(base.GridEditor, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.QueryEditor.set_dat": {"param": {"vals": {"?": [[25, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.DataViewer.__init__": {"var": {"vals": {"[str]": [[221, "                vals = [vals]"]], "[[str]]": [[223, "                vals = [[i] for i in vals]"]], "?": [[213, "            vals: typing.Union["]]}, "self": {"DataViewer": [[211, "            self,"]]}, "master": {"ConsoleMaster": [[212, "            master,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieAttributeEditor.data_ou": {"var": {"ret": {"[[None]]": [[132, "        ret = []"]]}}, "param": {"data": {"?": [[131, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.data_in": {"var": {"key": {"?": [[165, "        for key, (value, attrs) in data:"]]}}, "param": {"self": {"SetCookieEditor": [[163, "    def data_in(self, data):"]]}, "data": {"?": [[163, "    def data_in(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.QueryEditor.set_data": {"param": {"self": {"QueryEditor": [[25, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[25, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestHeaderEditor.get_data": {"param": {"self": {"RequestHeaderEditor": [[39, "    def get_data(self, flow):"]]}, "flow": {"?": [[39, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieEditor.get_data": {"param": {"self": {"CookieEditor": [[113, "    def get_data(self, flow):"]]}, "flow": {"?": [[113, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestUrlEncodedEditor.set_dat": {"param": {"vals": {"?": [[82, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.DataViewer.callback": {"param": {"vals": {"[?]": [[228, "    def callback(self, vals):"]]}, "self": {"DataViewer": [[228, "    def callback(self, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.DataViewer.is_error": {"param": {"self": {"DataViewer": [[231, "    def is_error(self, col, val):"]]}, "col": {"?": [[231, "    def is_error(self, col, val):"]]}, "val": {"?": [[231, "    def is_error(self, col, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.ResponseHeaderEditor": {"var": {"title": {"str": [[47, "    title = \"Edit Response Headers\""]]}}, "func": {"get_data": {"(ResponseHeaderEditor, ?) -> ?": [[49, "    def get_data(self, flow):"]]}, "set_data": {"(ResponseHeaderEditor, ?, ?) -> None": [[52, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.QueryEditor.get_data": {"param": {"self": {"QueryEditor": [[22, "    def get_data(self, flow):"]]}, "flow": {"?": [[22, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.DataView": {"func": {"is_error": {"(DataViewer, ?, ?) -> None": [[231, "    def is_error(self, col, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.ResponseHeaderEditor.set_dat": {"param": {"vals": {"?": [[52, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieAttributeEditor.layout_pushed": {"param": {"self": {"CookieAttributeEditor": [[140, "    def layout_pushed(self, prev):"]]}, "prev": {"?": [[140, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.OptionsEditor.is_error": {"param": {"self": {"OptionsEditor": [[203, "    def is_error(self, col, val):"]]}, "col": {"?": [[203, "    def is_error(self, col, val):"]]}, "val": {"?": [[203, "    def is_error(self, col, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestHeaderEditor": {"var": {"title": {"str": [[37, "    title = \"Edit Request Headers\""]]}}, "func": {"get_data": {"(RequestHeaderEditor, ?) -> ?": [[39, "    def get_data(self, flow):"]]}, "set_data": {"(RequestHeaderEditor, ?, ?) -> None": [[42, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestUrlEncodedEditor.set_data": {"param": {"self": {"RequestUrlEncodedEditor": [[82, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[82, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.data_out": {"var": {"vals": {"[[(?, ?)]]": [[170, "        vals = []"]]}, "key": {"?": [[171, "        for key, value, attrs in data:"]]}}, "param": {"self": {"SetCookieEditor": [[169, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieAttributeEditor.data_in": {"param": {"self": {"CookieAttributeEditor": [[128, "    def data_in(self, data):"]]}, "data": {"?": [[128, "    def data_in(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.get_data": {"param": {"self": {"SetCookieEditor": [[180, "    def get_data(self, flow):"]]}, "flow": {"?": [[180, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.HeaderEditor": {"var": {"columns": {"[Column]": [[30, "    columns = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.QueryEditor": {"var": {"columns": {"[Column]": [[17, "    columns = ["]]}, "title": {"str": [[16, "    title = \"Edit Query\""]]}}, "func": {"get_data": {"(QueryEditor, ?) -> ?": [[22, "    def get_data(self, flow):"]]}, "set_data": {"(QueryEditor, ?, ?) -> None": [[25, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.ResponseHeaderEditor.get_data": {"param": {"self": {"ResponseHeaderEditor": [[49, "    def get_data(self, flow):"]]}, "flow": {"?": [[49, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor.data_out": {"param": {"self": {"PathEditor": [[96, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor": {"var": {"columns": {"[{Column | Column}]": [[157, "    columns = ["]]}, "title": {"str": [[156, "    title = \"Edit SetCookie Header\""]]}}, "func": {"get_data": {"(SetCookieEditor, ?) -> [[?]]": [[180, "    def get_data(self, flow):"]]}, "data_in": {"(SetCookieEditor, ?) -> [[?]]": [[163, "    def data_in(self, data):"]]}, "set_data": {"(SetCookieEditor, ?, ?) -> None": [[183, "    def set_data(self, vals, flow):"]]}, "data_out": {"(SetCookieEditor, ?) -> [[(?, ?)]]": [[169, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.OptionsEdit": {"func": {"is_error": {"(OptionsEditor, ?, ?) -> None": [[203, "    def is_error(self, col, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestHeaderEditor.set_dat": {"param": {"vals": {"?": [[42, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.OptionsEditor": {"var": {"columns": {"[Column]": [[189, "    columns = ["]]}, "title": {"str": [[188, "    title = \"\""]]}}, "func": {"callback": {"(OptionsEditor, [?]) -> ? / (OptionsEditor, ?) -> ?": [[197, "    def callback(self, vals):"]]}, "__init__": {"? -> ?": [[193, "    def __init__(self, master, name, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieEditor.set_data": {"param": {"self": {"CookieEditor": [[116, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[116, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor.set_dat": {"param": {"vals": {"?": [[102, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.g": {"class": {"RequestMultipartEditor": {"<RequestMultipartEditor>": [[56, "class RequestMultipartEditor(base.FocusEditor):"]]}, "ResponseHeaderEditor": {"<ResponseHeaderEditor>": [[46, "class ResponseHeaderEditor(HeaderEditor):"]]}, "RequestHeaderEditor": {"<RequestHeaderEditor>": [[36, "class RequestHeaderEditor(HeaderEditor):"]]}, "RequestUrlEncodedEditor": {"<RequestUrlEncodedEditor>": [[71, "class RequestUrlEncodedEditor(base.FocusEditor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestMultipartEditor.get_data": {"param": {"self": {"RequestMultipartEditor": [[63, "    def get_data(self, flow):"]]}, "flow": {"?": [[63, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors": {"class": {"HeaderEditor": {"<HeaderEditor>": [[29, "class HeaderEditor(base.FocusEditor):"]]}, "CookieAttributeEditor": {"<CookieAttributeEditor>": [[120, "class CookieAttributeEditor(base.FocusEditor):"]]}, "CookieEditor": {"<CookieEditor>": [[106, "class CookieEditor(base.FocusEditor):"]]}, "SetCookieEditor": {"<SetCookieEditor>": [[155, "class SetCookieEditor(base.FocusEditor):"]]}, "QueryEditor": {"<QueryEditor>": [[15, "class QueryEditor(base.FocusEditor):"]]}, "DataViewer": {"<DataViewer>": [[207, "class DataViewer(base.GridEditor, layoutwidget.LayoutWidget):"]]}, "PathEditor": {"<PathEditor>": [[86, "class PathEditor(base.FocusEditor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor.set_data": {"param": {"self": {"PathEditor": [[102, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[102, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.set_dat": {"param": {"vals": {"?": [[183, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.OptionsEditor.__init__": {"param": {"vals": {"?": [[193, "    def __init__(self, master, name, vals):"]]}, "self": {"OptionsEditor": [[193, "    def __init__(self, master, name, vals):"]]}, "master": {"ConsoleMaster": [[193, "    def __init__(self, master, name, vals):"]]}, "name": {"?": [[193, "    def __init__(self, master, name, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.set_data": {"param": {"self": {"SetCookieEditor": [[183, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[183, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.OptionsEditor.callback": {"param": {"vals": {"[?]": [[197, "    def callback(self, vals):"]]}, "self": {"OptionsEditor": [[197, "    def callback(self, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.SetCookieEditor.data_i": {"var": {"flattened": {"[[?]]": [[164, "        flattened = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor.get_data": {"param": {"self": {"PathEditor": [[99, "    def get_data(self, flow):"]]}, "flow": {"?": [[99, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor.data_in": {"param": {"self": {"PathEditor": [[93, "    def data_in(self, data):"]]}, "data": {"?": [[93, "    def data_in(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieAttributeEditor.data_out": {"var": {"i": {"?": [[133, "        for i in data:"]]}}, "param": {"self": {"CookieAttributeEditor": [[131, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestUrlEncodedEditor": {"var": {"columns": {"[Column]": [[73, "    columns = ["]]}, "title": {"str": [[72, "    title = \"Edit UrlEncoded Form\""]]}}, "func": {"get_data": {"(RequestUrlEncodedEditor, ?) -> ?": [[78, "    def get_data(self, flow):"]]}, "set_data": {"(RequestUrlEncodedEditor, ?, ?) -> None": [[82, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieEditor": {"var": {"columns": {"[Column]": [[108, "    columns = ["]]}, "title": {"str": [[107, "    title = \"Edit Cookies\""]]}}, "func": {"get_data": {"(CookieEditor, ?) -> ?": [[113, "    def get_data(self, flow):"]]}, "set_data": {"(CookieEditor, ?, ?) -> None": [[116, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.DataViewer": {"var": {"title": {"str": [[208, "    title = \"\""]]}}, "func": {"callback": {"(DataViewer, [?]) -> None / (DataViewer, ?) -> None": [[228, "    def callback(self, vals):"]]}, "__init__": {"? -> ?": [[210, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestMultipartEditor.set_data": {"param": {"self": {"RequestMultipartEditor": [[67, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[67, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieEditor.set_dat": {"param": {"vals": {"?": [[116, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestHeaderEditor.set_data": {"param": {"self": {"RequestHeaderEditor": [[42, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[42, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.CookieAttributeEditor": {"var": {"columns": {"[Column]": [[122, "    columns = ["]]}, "title": {"str": [[121, "    title = \"Editing Set-Cookie attributes\""]]}}, "func": {"layout_pushed": {"(CookieAttributeEditor, ?) -> None": [[140, "    def layout_pushed(self, prev):"]]}, "data_in": {"(CookieAttributeEditor, ?) -> [(?, str)]": [[128, "    def data_in(self, data):"]]}, "data_out": {"(CookieAttributeEditor, ?) -> [[None]]": [[131, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.PathEditor.data_ou": {"param": {"data": {"?": [[96, "    def data_out(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.editors.RequestMultipartEditor.set_dat": {"param": {"vals": {"?": [[67, "    def set_data(self, vals, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/error.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.error.request": {"param": {"flow": {"?": [[8, "def request(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.erro": {"func": {"running": {"() -> None": [[4, "def running():"]]}, "request": {"? -> None": [[8, "def request(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_cookies.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_group_cooki": {"var": {"observed": {"{[({[(str, str, CookieAttrs)] | str}, {[(str, str, CookieAttrs)] | str}, CookieAttrs)] | [?]}": [[412, "        observed = cookies.group_cookies(cookies.parse_cookie_header(c))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_is_expired": {"var": {"CA": {"<CookieAttrs>": [[352, "    CA = cookies.CookieAttrs"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_cookie_roundtrip": {"var": {"s2": {"str": [[138, "        s2 = cookies.format_cookie_header(expected)"]]}, "s": {"?": [[134, "    for s, expected in cookie_pairs:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_parse_set_cookie_head": {"var": {"ret2": {"[(?, ?, CookieAttrs)]": [[297, "            ret2 = cookies.parse_set_cookie_header(s2)"]]}, "ret": {"[(?, ?, CookieAttrs)]": [[291, "        ret = cookies.parse_set_cookie_header(s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http": {"func": {"test_refresh_cookie": {"() -> None": [[304, "def test_refresh_cookie():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_pairs_roundtrips": {"var": {"ret": {"[[str]]": [[125, "        ret, off = cookies._read_cookie_pairs(s)"], [129, "        ret, off = cookies._read_cookie_pairs(s2)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.n": {"func": {"test_parse_set_cookie_header": {"() -> None": [[224, "def test_parse_set_cookie_header():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test": {"var": {"cookie_pairs": {"[{[{[?] | str}] | [{[[str]] | str}]}]": [[8, "cookie_pairs = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_read_cookie_pair": {"var": {"vals": {"[[{[[str]] | str}]]": [[84, "    vals = ["]]}, "s": {"{[[str]] | str}": [[118, "    for s, lst in vals:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_parse_set_cookie_": {"var": {"pairs": {"[[{[[[str]]] | str}]]": [[144, "    pairs = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_group_cookies": {"var": {"CA": {"<CookieAttrs>": [[373, "    CA = cookies.CookieAttrs"]]}, "c": {"{[(str, str, CookieAttrs)] | str}": [[411, "    for c, expected in groups:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_parse_set_cookie_pairs": {"var": {"ret2": {"?": [[220, "        ret2, off = cookies._read_set_cookie_pairs(s2)"]]}, "ret": {"?": [[216, "        ret, off = cookies._read_set_cookie_pairs(s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_get_expirati": {"var": {"now_ts": {"int": [[338, "    now_ts = 17"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_cookie_roundtrips": {"var": {"ret": {"[[str]]": [[135, "        ret = cookies.parse_cookie_header(s)"], [139, "        ret = cookies.parse_cookie_header(s2)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_read_cookie_pairs": {"var": {"ret": {"[[{[[str]] | str}]]": [[119, "        ret, off = cookies._read_cookie_pairs(s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_parse_set_cookie_header.set_cookie_equal": {"param": {"obs": {"(?, ?, CookieAttrs)": [[225, "    def set_cookie_equal(obs, exp):"]]}, "exp": {"?": [[225, "    def set_cookie_equal(obs, exp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_read_key": {"var": {"tokens": {"[[(str, int)]]": [[57, "    tokens = ["]]}, "q": {"(str, int)": [[66, "    for q, a in tokens:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cooki": {"func": {"test_read_key": {"() -> None": [[56, "def test_read_key():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cook": {"func": {"test_pairs_roundtrips": {"() -> None": [[123, "def test_pairs_roundtrips():"]]}, "test_read_quoted_string": {"() -> None": [[70, "def test_read_quoted_string():"]]}, "test_is_expired": {"() -> None": [[351, "def test_is_expired():"]]}, "test_get_expiration_ts": {"() -> None": [[336, "def test_get_expiration_ts(*args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_group_cookie": {"var": {"groups": {"[[{[(str, str, CookieAttrs)] | str}]]": [[374, "    groups = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_read_quoted_string": {"var": {"tokens": {"[[(str, int)]]": [[71, "    tokens = ["]]}, "q": {"(str, int)": [[79, "    for q, a in tokens:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_parse_set_cookie_header": {"var": {"vals": {"[{[{[(str, str, ((str, str), (str, str)))] | str}] | [{[(str, str, ())] | str}] | [{[(str, str, (str, str))] | str}] | [{[(str, str, {((str, str), (str, str)) | (str, str)})] | str}] | [{[(str, str, {() | (str, str)})] | str}] | [{[?] | str}]}]": [[230, "    vals = ["]]}, "i": {"int": [[293, "            for i in range(len(expected)):"], [298, "            for i in range(len(expected)):"]]}, "s": {"?": [[290, "    for s, expected in vals:"]]}, "s2": {"str": [[296, "            s2 = cookies.format_set_cookie_header(ret)"]]}}, "func": {"set_cookie_equal": {"((?, ?, CookieAttrs), ?) -> None": [[225, "    def set_cookie_equal(obs, exp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.h": {"func": {"test_cookie_roundtrips": {"() -> None": [[133, "def test_cookie_roundtrips():"]]}, "test_read_cookie_pairs": {"() -> None": [[83, "def test_read_cookie_pairs():"]]}, "test_group_cookies": {"() -> None": [[372, "def test_group_cookies():"]]}, "test_parse_set_cookie_pairs": {"() -> None": [[143, "def test_parse_set_cookie_pairs():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_parse_set_cookie_pair": {"var": {"s2": {"str": [[219, "        s2 = cookies._format_set_cookie_pairs(expected[0])"]]}, "s": {"{[[[str]]] | str}": [[215, "    for s, expected in pairs:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_get_expiration_ts": {"var": {"CA": {"<CookieAttrs>": [[341, "    CA = cookies.CookieAttrs"]]}, "F": {"CookieAttrs -> int / ? -> int": [[342, "    F = cookies.get_expiration_ts"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_pairs_roundtrip": {"var": {"s2": {"str": [[128, "        s2 = cookies._format_pairs(expected)"]]}, "s": {"?": [[124, "    for s, expected in cookie_pairs:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_cookies.test_refresh_cookie": {"var": {"c": {"str": [[307, "    c = \"rfoo=bar; Domain=reddit.com; expires=Thu, 31 Dec 2037 23:59:59 GMT; Path=/\""], [310, "    c = \"MOO=BAR; Expires=Tue, 08-Mar-2011 00:20:38 GMT; Path=foo.com; Secure\""], [313, "    c = \"rfoo=bar; Domain=reddit.com; expires=Thu, 31 Dec 2037; Path=/\""], [316, "    c = \"foo,bar\""], [321, "    c = \">=A\""], [325, "    c = \"foo:bar=bla\""], [327, "    c = \"foo/bar=bla\""], [331, "    c = \"\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/url.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.hos": {"param": {"port": {"{? -> ? | int}": [[121, "def hostport(scheme, host, port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.unpar": {"param": {"scheme": {"{? -> ? | str}": [[64, "def unparse(scheme, host, port, path=\"\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.par": {"func": {"ascii_check": {"? -> None": [[26, "    def ascii_check(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url": {"var": {"encoded": {"?": [[86, "    encoded = urllib.parse.urlencode(s, False, errors=\"surrogateescape\")"], [89, "        encoded = encoded.replace(\"=&\", \"&\")"], [91, "            encoded = encoded[:-1]"]]}, "parsed": {"?": [[39, "    parsed = urllib.parse.urlparse(url)"], [46, "            parsed = parsed.encode(\"ascii\")"]]}}, "func": {"unquote": {"? -> None / str -> None": [[111, "def unquote(s: str) -> str:"]]}, "decode": {"{? -> ? | str} -> None / ? -> None / str -> None": [[96, "def decode(s):"]]}, "unparse": {"({? -> ? | str}, Request -> {? -> ? | ? -> ? | str}, {? -> ? | int}, ? -> ?) -> None / (str, str, int, str) -> None / ({? -> ? | str}, {? -> ? | str}, {? -> ? | int}, ? -> ?) -> None / (?, ?, ?, str) -> None": [[64, "def unparse(scheme, host, port, path=\"\"):"]]}, "quote": {"(?, str) -> None / (str, str) -> None": [[103, "def quote(b: str, safe: str=\"/\") -> str:"]]}, "parse": {"str -> (?, ?, int, str) / ? -> (?, ?, int, str)": [[8, "def parse(url):"]]}, "hostport": {"({? -> ? | str}, Request -> {? -> ? | ? -> ? | str}, {? -> ? | int}) -> Request -> {? -> ? | ? -> ? | str} / (str, str, int) -> str / ({? -> ? | str}, {? -> ? | str}, {? -> ? | int}) -> {? -> ? | str} / (?, ?, ?) -> None": [[121, "def hostport(scheme, host, port):"]]}, "encode": {"([?], None) -> None / ([(str, ?)], None) -> None / (?, {? -> ? | str}) -> None / (?, None) -> None / ([(str, str)], None) -> None": [[76, "def encode(s: Sequence[Tuple[str, str]], similar_to: str=None) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.hostport": {"param": {"scheme": {"{? -> ? | str}": [[121, "def hostport(scheme, host, port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.encod": {"var": {"remove_trailing_equal": {"int": [[84, "        remove_trailing_equal = any(\"=\" not in param for param in similar_to.split(\"&\"))"]], "?": [[82, "    remove_trailing_equal = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.hostpor": {"param": {"host": {"{? -> ? | Request -> {? -> ? | ? -> ? | str} | str}": [[121, "def hostport(scheme, host, port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.parse": {"var": {"url": {"list": [[35, "            url = list(url)"]], "?": [[32, "        url = url.decode()"], [34, "            url = urllib.parse.urlsplit(url)"], [37, "            url = urllib.parse.urlunsplit(url)"]]}, "host": {"?": [[44, "        host = parsed.hostname.encode(\"idna\")"]]}, "port": {"int": [[50, "        port = 443 if parsed.scheme == b\"https\" else 80"]], "?": [[48, "    port = parsed.port  # Returns None if port number invalid in Py3.5. Will throw ValueError in Py3.6"]]}, "full_path": {"str": [[56, "        full_path = b\"/\" + full_path"]], "?": [[52, "    full_path = urllib.parse.urlunparse("]]}}, "param": {"url": {"str": [[8, "def parse(url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.url.unparse": {"var": {"path": {"str": [[72, "        path = \"\""]]}}, "param": {"path": {"{? -> ? | str}": [[64, "def unparse(scheme, host, port, path=\"\"):"]]}, "host": {"{? -> ? | Request -> {? -> ? | ? -> ? | str} | str}": [[64, "def unparse(scheme, host, port, path=\"\"):"]]}, "port": {"{? -> ? | int}": [[64, "def unparse(scheme, host, port, path=\"\"):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/log-events.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.log-events.load": {"param": {"l": {"?": [[5, "def load(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.log-events": {"func": {"load": {"? -> None": [[5, "def load(l):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_protobuf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_protobuf.test_view_protobuf_request": {"var": {"raw": {"str": [[14, "        raw = f.read()"]]}, "p": {"?": [[11, "    p = tdata.path(datadir + \"protobuf01.bin\")"]]}, "v": {"?": [[10, "    v = full_eval(protobuf.ViewProtobuf())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_protobuf.test_format_pbuf": {"var": {"expected": {"str": [[28, "        expected = f.read()"]]}, "path": {"?": [[24, "    path = tdata.path(datadir + filename)"]]}, "input": {"str": [[26, "        input = f.read()"]]}}, "param": {"tdata": {"?": [[23, "def test_format_pbuf(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentview": {"func": {"test_format_pbuf": {"(?, ?) -> None": [[23, "def test_format_pbuf(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_protobuf.test_format_pbu": {"param": {"filename": {"?": [[23, "def test_format_pbuf(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_protobuf": {"var": {"datadir": {"str": [[6, "datadir = \"mitmproxy/contentviews/test_protobuf_data/\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_protobuf_request": {"? -> None": [[9, "def test_view_protobuf_request(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_protobuf.test_view_protobuf_reques": {"var": {"content_type": {"?": [[15, "    content_type, output = v(raw)"]]}}, "param": {"tdata": {"?": [[9, "def test_view_protobuf_request(tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/log.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.__init__": {"param": {"self": {"Log": [[22, "    def __init__(self, master):"]]}, "master": {"Master": [[22, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.debug": {"param": {"self": {"Log": [[25, "    def debug(self, txt):"]]}, "txt": {"?": [[25, "    def debug(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.error": {"param": {"self": {"Log": [[52, "    def error(self, txt):"]]}, "txt": {"?": [[52, "    def error(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.warn": {"param": {"self": {"Log": [[46, "    def warn(self, txt):"]]}, "txt": {"?": [[46, "    def warn(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.log_tier": {"param": {"level": {"str": [[73, "def log_tier(level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.LogEntry": {"func": {"__eq__": {"(LogEntry, ?) -> bool / (LogEntry, LogEntry) -> bool": [[9, "    def __eq__(self, other):"]]}, "__repr__": {"LogEntry -> str": [[14, "    def __repr__(self):"]]}, "__init__": {"? -> ?": [[5, "    def __init__(self, msg, level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.alert": {"param": {"self": {"Log": [[37, "    def alert(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.info": {"param": {"self": {"Log": [[31, "    def info(self, txt):"]]}, "txt": {"?": [[31, "    def info(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log": {"func": {"info": {"(Log, ?) -> None": [[31, "    def info(self, txt):"]]}, "alert": {"(Log, ?) -> None": [[37, "    def alert(self, txt):"]]}, "warn": {"(Log, ?) -> None": [[46, "    def warn(self, txt):"]]}, "error": {"(Log, ?) -> None": [[52, "    def error(self, txt):"]]}, "__call__": {"(Log, ?, str) -> None": [[58, "    def __call__(self, text, level=\"info\"):"]]}, "__init__": {"? -> ?": [[22, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.aler": {"param": {"txt": {"?": [[37, "    def alert(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.LogEntry.__init__": {"param": {"msg": {"str": [[5, "    def __init__(self, msg, level):"]]}, "self": {"LogEntry": [[5, "    def __init__(self, msg, level):"]]}, "level": {"str": [[5, "    def __init__(self, msg, level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.l": {"var": {"LogTierOrder": {"[str]": [[64, "LogTierOrder = ["]]}}, "class": {"Log": {"<Log>": [[18, "class Log:"]]}, "LogEntry": {"<LogEntry>": [[4, "class LogEntry:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.LogEntry.__repr__": {"param": {"self": {"LogEntry": [[14, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Log.__call__": {"param": {"text": {"?": [[58, "    def __call__(self, text, level=\"info\"):"]]}, "self": {"Log": [[58, "    def __call__(self, text, level=\"info\"):"]]}, "level": {"str": [[58, "    def __call__(self, text, level=\"info\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.LogEntry.__eq__": {"param": {"self": {"LogEntry": [[9, "    def __eq__(self, other):"]]}, "other": {"LogEntry": [[9, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.log.Lo": {"func": {"debug": {"(Log, ?) -> None": [[25, "    def debug(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"log_tier": {"str -> ? / ? -> ?": [[73, "def log_tier(level):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/config.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.ProxyC": {"func": {"configure": {"(ProxyConfig, None, ?) -> ? / (ProxyConfig, Options, ?) -> ? / (ProxyConfig, ?, ?) -> ?": [[44, "    def configure(self, options: moptions.Options, updated: typing.Any) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.HostMatcher.__bool__": {"param": {"self": {"HostMatcher": [[28, "    def __bool__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.ProxyConfig.configu": {"var": {"cert": {"str": [[76, "            cert = os.path.expanduser(parts[1])"]]}, "certstore_path": {"str": [[58, "        certstore_path = os.path.expanduser(options.confdir)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.HostMatcher.__call__": {"var": {"host": {"str": [[22, "        host = \"%s:%s\" % address"]]}}, "param": {"self": {"HostMatcher": [[19, "    def __call__(self, address):"]]}, "address": {"?": [[19, "    def __call__(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.HostMatcher": {"func": {"__call__": {"(HostMatcher, ?) -> int": [[19, "    def __call__(self, address):"]]}, "__bool__": {"HostMatcher -> bool": [[28, "    def __bool__(self):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, handle, patterns=tuple()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.ProxyConfig": {"func": {"__init__": {"? -> ?": [[34, "    def __init__(self, options: moptions.Options) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config": {"class": {"HostMatcher": {"<HostMatcher>": [[13, "class HostMatcher:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.c": {"class": {"ProxyConfig": {"<ProxyConfig>": [[32, "class ProxyConfig:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.ProxyConfig.configur": {"var": {"key_size": {"?": [[64, "        key_size = options.key_size"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.ProxyConfig.configure": {"var": {"c": {"?": [[71, "        for c in options.certs:"]]}, "parts": {"[str]": [[74, "                parts = [\"*\", parts[0]]"]], "?": [[72, "            parts = c.split(\"=\", 1)"]]}, "m": {"?": [[87, "        m = options.mode"]]}, "_": {"?": [[89, "            _, spec = server_spec.parse_with_mode(options.mode)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.config.HostMatcher.__init__": {"param": {"patterns": {"{[str] | tuple}": [[14, "    def __init__(self, handle, patterns=tuple()):"]]}, "self": {"HostMatcher": [[14, "    def __init__(self, handle, patterns=tuple()):"]]}, "handle": {"str": [[14, "    def __init__(self, handle, patterns=tuple()):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/change_upstream_proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.change_upstream_proxy.request": {"var": {"address": {"(str, int)": [[25, "    address = proxy_address(flow)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.change_upstream": {"func": {"proxy_address": {"? -> (str, int)": [[12, "def proxy_address(flow: http.HTTPFlow) -> typing.Tuple[str, int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.change_upstream_proxy": {"func": {"request": {"? -> None": [[20, "def request(flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/io.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowReader": {"func": {"__init__": {"? -> ?": [[31, "    def __init__(self, fo):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowWriter.a": {"var": {"d": {"?": [[26, "        d = flow.get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.read_flows_from_path": {"var": {"flows": {"[?]": [[80, "        flows = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.read_flows_from_": {"param": {"paths": {"{[?] | [str]}": [[70, "def read_flows_from_paths(paths):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FilteredFlowWriter": {"func": {"add": {"(FilteredFlowWriter, ?) -> None": [[63, "    def add(self, f: flow.Flow):"]]}, "__init__": {"? -> ?": [[59, "    def __init__(self, fo, flt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowRead": {"func": {"stream": {"FlowReader -> ?": [[34, "    def stream(self) -> Iterable[flow.Flow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowReader.stream": {"var": {"loaded": {"?": [[41, "                loaded = cast("]]}}, "param": {"self": {"FlowReader": [[34, "    def stream(self) -> Iterable[flow.Flow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowReader.stre": {"var": {"mdata": {"{dict | dict}": [[46, "                    mdata = compat.migrate_flow(loaded)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowWriter": {"func": {"add": {"(FlowWriter, ?) -> None": [[25, "    def add(self, flow):"]]}, "__init__": {"? -> ?": [[22, "    def __init__(self, fo):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FilteredFlowWriter.a": {"var": {"d": {"?": [[66, "        d = f.get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.i": {"class": {"FlowReader": {"<FlowReader>": [[30, "class FlowReader:"]]}}, "func": {"read_flows_from_paths": {"[?] -> [?] / [str] -> [?] / ? -> [?]": [[70, "def read_flows_from_paths(paths):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowReader.__init__": {"param": {"self": {"FlowReader": [[31, "    def __init__(self, fo):"]]}, "fo": {"file": [[31, "    def __init__(self, fo):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.read_flows_from_paths": {"var": {"path": {"str": [[81, "        for path in paths:"], [82, "            path = os.path.expanduser(path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"class": {"FilteredFlowWriter": {"<FilteredFlowWriter>": [[58, "class FilteredFlowWriter:"]]}, "FlowWriter": {"<FlowWriter>": [[21, "class FlowWriter:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowWriter.add": {"param": {"self": {"FlowWriter": [[25, "    def add(self, flow):"]]}, "flow": {"?": [[25, "    def add(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FilteredFlowWriter.__init__": {"param": {"self": {"FilteredFlowWriter": [[59, "    def __init__(self, fo, flt):"]]}, "flt": {"None": [[59, "    def __init__(self, fo, flt):"]]}, "fo": {"file": [[59, "    def __init__(self, fo, flt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.io.FlowWriter.__init__": {"param": {"self": {"FlowWriter": [[22, "    def __init__(self, fo):"]]}, "fo": {"file": [[22, "    def __init__(self, fo):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/script/concurrent.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.script.concurrent.concurrent._concurrent": {"var": {"obj": {"?": [[24, "        obj = args[-1]"]]}}, "func": {"run": {"() -> None": [[26, "        def run():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.script.concurrent.ScriptThread": {"var": {"name": {"str": [[11, "    name = \"ScriptThread\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.script.concurren": {"class": {"ScriptThread": {"<ScriptThread>": [[10, "class ScriptThread(basethread.BaseThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.scrip": {"func": {"concurrent": {"? -> () -> None": [[14, "def concurrent(fn):"]]}, "_concurrent": {"() -> None": [[20, "    def _concurrent(*args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.script.concurrent.concurrent": {"param": {"fn": {"?": [[14, "def concurrent(fn):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"default_addons": {"() -> [{AntiCache | AntiComp | Block | Browser | CheckCA | ClientPlayback | CommandHistory | Core | Cut | DisableH2C | Export | MapRemote | ModifyBody | ModifyHeaders | Onboarding | ProxyAuth | Save | ScriptLoader | ServerPlayback | StickyAuth | StickyCookie | StreamBodies | UpstreamAuth}]": [[26, "def default_addons():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/onboarding.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding.Onboarding.configur": {"param": {"self": {"Onboarding": [[32, "    def configure(self, updated):"]]}, "updated": {"?": [[32, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding.Onboard": {"func": {"configure": {"(Onboarding, ?) -> None": [[32, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding.Onboarding": {"var": {"name": {"str": [[10, "    name = \"onboarding\""]]}}, "param": {"loader": {"?": [[15, "    def load(self, loader):"]]}}, "func": {"load": {"(Onboarding, ?) -> None": [[15, "    def load(self, loader):"]]}, "request": {"(Onboarding, ?) -> None": [[37, "    def request(self, f):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding.Onboarding.request": {"param": {"self": {"Onboarding": [[37, "    def request(self, f):"]]}, "f": {"?": [[37, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding": {"var": {"APP_HOST": {"str": [[5, "APP_HOST = \"mitm.it\""]]}, "APP_PORT": {"int": [[6, "APP_PORT = 80"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding.Onboarding.__init__": {"param": {"self": {"Onboarding": [[12, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding.Onboarding.load": {"param": {"self": {"Onboarding": [[15, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons": {"class": {"Onboarding": {"<Onboarding>": [[9, "class Onboarding(wsgiapp.WSGIApp):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/keymap.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap": {"var": {"command": {"str": [[75, "        command: str,"]]}}, "param": {"command": {"str": [[78, "    ) -> None:"]]}}, "func": {"unbind": {"(Keymap, ?) -> None / (Keymap, None) -> None": [[117, "    def unbind(self, binding: Binding) -> None:"]]}, "handle": {"(Keymap, ?, ?) -> None / (Keymap, str, str) -> str / (Keymap, str, None) -> None": [[138, "    def handle(self, context: str, key: str) -> typing.Optional[str]:"]]}, "get": {"(Keymap, str, None) -> None / (Keymap, ?, ?) -> None / (Keymap, str, str) -> None / (Keymap, str, ?) -> None": [[125, "    def get(self, context: str, key: str) -> typing.Optional[Binding]:"]]}, "bind": {"(Keymap, Binding) -> None / (Keymap, ?) -> None / (Keymap, None) -> None": [[113, "    def bind(self, binding: Binding) -> None:"]]}, "list": {"(Keymap, ?) -> [?] / (Keymap, str) -> [?]": [[130, "    def list(self, context: str) -> typing.Sequence[Binding]:"]]}, "remove": {"(Keymap, ?, ?) -> None / (Keymap, str, [str]) -> None": [[98, "    def remove(self, key: str, contexts: typing.Sequence[str]) -> None:"]]}, "add": {"(Keymap, ?, ?, ?, str) -> None / (Keymap, str, str, [str], str) -> None": [[72, "    def add("]]}, "handle_only": {"(Keymap, str, ?) -> None / (Keymap, ?, ?) -> None": [[147, "    def handle_only(self, context: str, key: str) -> typing.Optional[str]:"]]}, "__init__": {"? -> ?": [[58, "    def __init__(self, master):"]]}, "_check_contexts": {"(Keymap, ?) -> None / (Keymap, [str]) -> None": [[65, "    def _check_contexts(self, contexts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Binding.__init__": {"param": {"contexts": {"[str]": [[42, "    def __init__(self, key, command, contexts, help):"]]}, "self": {"Binding": [[42, "    def __init__(self, key, command, contexts, help):"]]}, "command": {"str": [[42, "    def __init__(self, key, command, contexts, help):"]]}, "help": {"str": [[42, "    def __init__(self, key, command, contexts, help):"]]}, "key": {"str": [[42, "    def __init__(self, key, command, contexts, help):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap._check_": {"param": {"contexts": {"[str]": [[65, "    def _check_contexts(self, contexts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap": {"var": {"Contexts": {"[str]": [[18, "Contexts = {"]]}, "navkeys": {"[str]": [[34, "navkeys = ["]]}, "keyAttrs": {"dict": [[158, "keyAttrs = {"]]}, "requiredKeyAttrs": {"?": [[164, "requiredKeyAttrs = set([\"key\", \"cmd\"])"]]}}, "class": {"Binding": {"<Binding>": [[41, "class Binding:"]]}, "KeyBindingError": {"<KeyBindingError>": [[14, "class KeyBindingError(Exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConf": {"func": {"running": {"KeymapConfig -> ?": [[179, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.handle_only": {"var": {"b": {"None": [[152, "        b = self.get(context, key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.remove": {"var": {"c": {"str": [[103, "        for c in contexts:"]]}, "b": {"None": [[104, "            b = self.get(c, key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.lis": {"var": {"multi": {"[?]": [[133, "        multi = [x for x in b if len(x.key.split()) != 1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConfig.par": {"param": {"self": {"KeymapConfig": [[218, "    def parse(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConfig.pars": {"param": {"text": {"str": [[218, "    def parse(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.handle": {"var": {"b": {"None": [[142, "        b = self.get(context, key) or self.get(\"global\", key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.__init__": {"var": {"c": {"str": [[61, "        for c in Contexts:"]]}}, "param": {"self": {"Keymap": [[58, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[58, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.unbind": {"var": {"c": {"?": [[121, "        for c in binding.contexts:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Binding": {"func": {"sortkey": {"Binding -> str": [[53, "    def sortkey(self):"]]}, "__init__": {"? -> ?": [[42, "    def __init__(self, key, command, contexts, help):"]]}, "keyspec": {"Binding -> None": [[46, "    def keyspec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConfig.running": {"var": {"p": {"str": [[180, "        p = os.path.join(os.path.expanduser(ctx.options.confdir), self.defaultFile)"]]}}, "param": {"self": {"KeymapConfig": [[179, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConfig": {"var": {"defaultFile": {"str": [[168, "    defaultFile = \"keys.yaml\""]]}}, "func": {"parse": {"(KeymapConfig, str) -> [?] / (KeymapConfig, ?) -> [?]": [[218, "    def parse(self, text):"]]}, "keymap_load_path": {"(KeymapConfig, ?) -> ?": [[171, "    def keymap_load_path(self, path: mitmproxy.types.Path) -> None:"]]}, "load_path": {"(KeymapConfig, ?, str) -> ? / (KeymapConfig, ?, ?) -> ? / (KeymapConfig, Keymap, str) -> ?": [[187, "    def load_path(self, km, p):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConfig.parse": {"var": {"attr": {"?": [[242, "            for attr in k.keys():"]]}, "missing": {"?": [[239, "            missing = requiredKeyAttrs - k.keys()"]]}, "unknown": {"<list>": [[236, "            unknown = k.keys() - keyAttrs.keys()"]]}, "k": {"?": [[235, "        for k in data:"]]}, "snip": {"?": [[223, "                snip = v.problem_mark.get_snippet()"]]}, "data": {"?": [[220, "            data = ruamel.yaml.safe_load(text)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.list": {"var": {"single": {"[?]": [[132, "        single = [x for x in b if len(x.key.split()) == 1]"]]}, "b": {"[?]": [[131, "        b = [x for x in self.bindings if context in x.contexts or context == \"all\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.k": {"class": {"KeymapConfig": {"<KeymapConfig>": [[167, "class KeymapConfig:"]]}, "Keymap": {"<Keymap>": [[57, "class Keymap:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.bind": {"var": {"c": {"?": [[114, "        for c in binding.contexts:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Binding.keyspec": {"param": {"self": {"Binding": [[46, "    def keyspec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Binding.sortkey": {"param": {"self": {"Binding": [[53, "    def sortkey(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.KeymapConfig.load_path": {"var": {"vals": {"[?]": [[197, "                vals = self.parse(txt)"]]}, "txt": {"str": [[191, "                    txt = f.read()"]]}, "user_ctxs": {"?": [[203, "                user_ctxs = v.get(\"ctx\", [\"global\"])"]]}, "v": {"?": [[202, "            for v in vals:"]]}}, "param": {"p": {"str": [[187, "    def load_path(self, km, p):"]]}, "self": {"KeymapConfig": [[187, "    def load_path(self, km, p):"]]}, "km": {"Keymap": [[187, "    def load_path(self, km, p):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap._check_context": {"param": {"self": {"Keymap": [[65, "    def _check_contexts(self, contexts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap.add": {"var": {"contexts": {"[str]": [[76, "        contexts: typing.Sequence[str],"]]}, "self": {"Keymap": [[73, "        self,"]]}, "b": {"Binding": [[93, "            b = Binding(key=key, command=command, contexts=contexts, help=help)"]], "?": [[84, "        for b in self.bindings:"]]}, "help": {"str": [[77, "        help=\"\""]]}, "key": {"str": [[74, "        key: str,"]]}}, "param": {"contexts": {"[str]": [[78, "    ) -> None:"]]}, "self": {"Keymap": [[78, "    ) -> None:"]]}, "help": {"str": [[78, "    ) -> None:"]]}, "key": {"str": [[78, "    ) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.keymap.Keymap._check_contexts": {"var": {"c": {"str": [[68, "        for c in contexts:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/tls.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_server_": {"var": {"context": {"?": [[351, "    context = _create_ssl_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls._create_ssl_contex": {"var": {"alpn_select_callback": {"None": [[145, "        alpn_select_callback: typing.Callable[[typing.Any, typing.Any], bytes] = None,"]]}, "cipher_list": {"None": [[142, "        cipher_list: str = None,"]]}, "alpn_select": {"None": [[144, "        alpn_select=None,"]]}, "options": {"?": [[139, "        options: int = DEFAULT_OPTIONS,"]]}, "method_name": {"?": [[165, "        method_name = METHOD_NAMES.get(method, \"unknown\")"]]}, "ca_path": {"None": [[140, "        ca_path: str = None,"]]}, "alpn_protos": {"None": [[143, "        alpn_protos: typing.Iterable[bytes] = None,"]]}, "method": {"?": [[138, "        method: int = DEFAULT_METHOD,"]]}}, "func": {"alpn_select_callback": {"(?, ?) -> ?": [[213, "        def alpn_select_callback(conn_, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.extensions": {"var": {"body": {"?": [[463, "                body = getattr(extension, \"_raw_body\", extension.body)"]]}, "ret": {"[(?, ?)]": [[460, "        ret = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tl": {"class": {"MasterSecretLogger": {"<MasterSecretLogger>": [[80, "class MasterSecretLogger:"]]}}, "func": {"create_server_context": {"(?, ?, None, ?, None, None, None) -> None": [[317, "def create_server_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger": {"var": {"__name__": {"str": [[87, "    __name__ = \"MasterSecretLogger\""]]}}, "func": {"__call__": {"(MasterSecretLogger, ?, ?, ?) -> ?": [[89, "    def __call__(self, connection, where, ret):"]]}, "close": {"MasterSecretLogger -> None": [[120, "    def close(self):"]]}, "__init__": {"? -> ?": [[81, "    def __init__(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls._create_ssl_context.alpn_select_callback": {"param": {"conn_": {"?": [[213, "        def alpn_select_callback(conn_, options):"]]}, "options": {"?": [[213, "        def alpn_select_callback(conn_, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls": {"var": {"BASIC_OPTIONS": {"?": [[20, "BASIC_OPTIONS = ("]]}, "DEFAULT_OPTIONS": {"?": [[27, "DEFAULT_OPTIONS = ("]]}, "METHOD_NAMES": {"dict": [[50, "METHOD_NAMES = {"]]}, "VERSION_CHOICES": {"dict": [[38, "VERSION_CHOICES = {"]]}, "DEFAULT_METHOD": {"?": [[26, "DEFAULT_METHOD = SSL.SSLv23_METHOD"]]}}, "class": {"ClientHello": {"<ClientHello>": [[425, "class ClientHello:"]]}}, "func": {"get_client_hello": {"? -> str / None -> str": [[396, "def get_client_hello(rfile):"]]}, "accept_all": {"(?, ?, ?, ?, ?) -> ?": [[306, "def accept_all("]]}, "create_client_context": {"(None, None, None, ?) -> ?": [[231, "def create_client_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.n": {"var": {"log_master_secret": {"MasterSecretLogger": [[132, "log_master_secret = MasterSecretLogger.create_logfun("]]}}, "func": {"is_tls_record_magic": {"str -> bool / ? -> bool": [[378, "def is_tls_record_magic(d):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.from_f": {"var": {"raw_client_hello": {"str": [[477, "            raw_client_hello = get_client_hello(client_conn)[4:]  # exclude handshake header."]]}}, "param": {"client_conn": {"None": [[468, "    def from_file(cls, client_conn) -> \"ClientHello\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger.__call__": {"var": {"d": {"str": [[104, "                    d = os.path.dirname(self.filename)"]]}, "masterkey": {"str": [[111, "                    masterkey = binascii.hexlify(connection.master_key())"]]}}, "param": {"self": {"MasterSecretLogger": [[89, "    def __call__(self, connection, where, ret):"]]}, "where": {"?": [[89, "    def __call__(self, connection, where, ret):"]]}, "connection": {"?": [[89, "    def __call__(self, connection, where, ret):"]]}, "ret": {"?": [[89, "    def __call__(self, connection, where, ret):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.client_arguments_from_options": {"var": {"verify": {"?": [[63, "        verify = SSL.VERIFY_NONE"], [65, "        verify = SSL.VERIFY_PEER"]]}, "method": {"?": [[67, "    method, tls_options = VERSION_CHOICES[options.ssl_version_server]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHell": {"var": {"extension": {"?": [[439, "            for extension in self._client_hello.extensions.extensions:"], [462, "            for extension in self._client_hello.extensions.extensions:"]]}}, "func": {"extensions": {"ClientHello -> [(?, ?)]": [[459, "    def extensions(self) -> typing.List[typing.Tuple[int, bytes]]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientH": {"var": {"is_valid_sni_extension": {"bool": [[440, "                is_valid_sni_extension = ("]]}}, "param": {"raw_client_hello": {"str": [[427, "    def __init__(self, raw_client_hello):"]]}}, "func": {"from_file": {"(<ClientHello>, ?) -> ClientHello / (<ClientHello>, None) -> ClientHello": [[468, "    def from_file(cls, client_conn) -> \"ClientHello\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.is_tls_record_magic": {"var": {"d": {"str": [[384, "    d = d[:3]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello": {"func": {"cipher_suites": {"ClientHello -> ?": [[433, "    def cipher_suites(self):"]]}, "__repr__": {"ClientHello -> None": [[488, "    def __repr__(self):"]]}, "__init__": {"? -> ?": [[427, "    def __init__(self, raw_client_hello):"]]}, "sni": {"ClientHello -> None": [[437, "    def sni(self) -> typing.Optional[bytes]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.__init__": {"param": {"self": {"ClientHello": [[427, "    def __init__(self, raw_client_hello):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.accept_all": {"var": {"x509": {"?": [[308, "        x509: SSL.X509,"]]}, "errno": {"?": [[309, "        errno: int,"]]}, "is_cert_verified": {"?": [[311, "        is_cert_verified: bool,"]]}, "conn_": {"?": [[307, "        conn_: SSL.Connection,"]]}, "err_depth": {"?": [[310, "        err_depth: int,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.g": {"var": {"client_hello": {"str": [[406, "    client_hello = b\"\""]]}, "client_hello_size": {"int": [[407, "    client_hello_size = 1"], [421, "        client_hello_size = struct.unpack(\"!I\", b'\\x00' + client_hello[1:4])[0] + 4"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_client_context": {"var": {"verify": {"?": [[235, "        verify: int = SSL.VERIFY_NONE,"]]}, "address": {"None": [[234, "        address: str = None,"]]}, "param": {"?": [[285, "        param = SSL._lib.SSL_CTX_get0_param(context._context)"]]}, "sni": {"None": [[233, "        sni: str = None,"]]}}, "func": {"verify_callback": {"(?, ?, ?, ?, ?) -> None": [[249, "    def verify_callback("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHe": {"func": {"alpn_protocols": {"ClientHello -> {[?] | list}": [[451, "    def alpn_protocols(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.get_client_hello": {"param": {"rfile": {"None": [[396, "def get_client_hello(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_server_context": {"var": {"chain_file": {"None": [[322, "        chain_file=None,"]]}, "dhparams": {"None": [[323, "        dhparams=None,"]]}, "i": {"?": [[365, "        for i in extra_chain_certs:"]]}, "verify": {"?": [[347, "        verify = SSL.VERIFY_PEER"], [349, "        verify = SSL.VERIFY_NONE"]]}, "handle_sni": {"None": [[320, "        handle_sni: typing.Optional[typing.Callable[[SSL.Connection], None]] = None,"]]}, "key": {"?": [[319, "        key: SSL.PKey,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls._create_ssl_": {"var": {"context": {"?": [[163, "        context = SSL.Context(method)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.sni": {"param": {"self": {"ClientHello": [[437, "    def sni(self) -> typing.Optional[bytes]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.extension": {"param": {"self": {"ClientHello": [[459, "    def extensions(self) -> typing.List[typing.Tuple[int, bytes]]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger.__init__": {"param": {"self": {"MasterSecretLogger": [[81, "    def __init__(self, filename):"]]}, "filename": {"{bool | str}": [[81, "    def __init__(self, filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger.clo": {"param": {"self": {"MasterSecretLogger": [[120, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_server_contex": {"var": {"cert": {"?": [[318, "        cert: typing.Union[certs.Cert, str],"]]}, "request_client_cert": {"?": [[321, "        request_client_cert: bool = False,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretL": {"func": {"create_logfun": {"bool -> MasterSecretLogger / str -> MasterSecretLogger": [[126, "    def create_logfun(filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.from_file": {"param": {"cls": {"<ClientHello>": [[468, "    def from_file(cls, client_conn) -> \"ClientHello\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger.create_logfu": {"param": {"filename": {"{bool | str}": [[126, "    def create_logfun(filename):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.cipher_suit": {"param": {"self": {"ClientHello": [[433, "    def cipher_suites(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger.__ca": {"var": {"done_previously_but_not_logged_yet": {"int": [[98, "        done_previously_but_not_logged_yet = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"client_arguments_from_options": {"? -> dict": [[60, "def client_arguments_from_options(options: \"mitmproxy.options.Options\") -> dict:"]]}, "_create_ssl_context": {"(?, ?, None, None, None, None, None, None, ?, None) -> ?": [[137, "def _create_ssl_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.get_client_hell": {"var": {"record_header": {"?": [[410, "        record_header = rfile.peek(offset + 5)[offset:]"]]}, "record_body": {"?": [[415, "        record_body = rfile.peek(offset + record_size)[offset + 5:]"]]}, "record_size": {"int": [[414, "        record_size = struct.unpack_from(\"!H\", record_header, 3)[0] + 5"]]}, "offset": {"int": [[408, "    offset = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.alpn_protoco": {"param": {"self": {"ClientHello": [[451, "    def alpn_protocols(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.alpn_protocol": {"var": {"extension": {"?": [[453, "            for extension in self._client_hello.extensions.extensions:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls._create_ssl_context": {"var": {"verify": {"?": [[146, "        verify: int = SSL.VERIFY_PEER,"]]}, "verify_callback": {"None": [[147, "        verify_callback: typing.Optional["]]}, "ca_pemfile": {"None": [[141, "        ca_pemfile: str = None,"]], "?": [[181, "            ca_pemfile = certifi.where()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_client_context.verify_callback": {"var": {"x509": {"?": [[251, "            x509: SSL.X509,"]]}, "errno": {"?": [[252, "            errno: int,"]]}, "depth": {"?": [[253, "            depth: int,"]]}, "is_cert_verified": {"?": [[254, "            is_cert_verified: bool"], [260, "            is_cert_verified = False"]]}, "conn": {"?": [[250, "            conn: SSL.Connection,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_client_": {"var": {"context": {"?": [[276, "    context = _create_ssl_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogger.__call": {"var": {"done_now": {"bool": [[90, "        done_now = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_client_contex": {"var": {"cert": {"None": [[232, "        cert: str = None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.MasterSecretLogg": {"var": {"client_random": {"str": [[110, "                    client_random = binascii.hexlify(connection.client_random())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.create_server_co": {"var": {"extra_chain_certs": {"None": [[324, "        extra_chain_certs: typing.Iterable[certs.Cert] = None,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tls.ClientHello.__repr__": {"param": {"self": {"ClientHello": [[488, "    def __repr__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/test_socks.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_server_greeting": {"var": {"raw": {"?": [[55, "    raw = tutils.treader(b\"\\x05\\x02\")"]]}, "out": {"?": [[56, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_username_password_auth_response_auth_assert_ver1": {"var": {"raw": {"?": [[123, "    raw = tutils.treader(b\"\\x02\\x00\\xBE\\xEF\")"]]}, "auth": {"UsernamePasswordAuthResponse": [[124, "    auth = socks.UsernamePasswordAuthResponse.from_file(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_client_greeting": {"var": {"raw": {"?": [[10, "    raw = tutils.treader(b\"\\x05\\x02\\x00\\xBE\\xEF\")"]]}, "out": {"?": [[11, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_username_password_auth_response": {"var": {"raw": {"?": [[110, "    raw = tutils.treader(b\"\\x01\\x00\\xBE\\xEF\")"]]}, "auth": {"UsernamePasswordAuthResponse": [[112, "    auth = socks.UsernamePasswordAuthResponse.from_file(raw)"]]}, "out": {"?": [[111, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_sock": {"func": {"test_server_greeting": {"() -> None": [[54, "def test_server_greeting():"]]}, "test_client_greeting": {"() -> None": [[9, "def test_client_greeting():"]]}, "test_username_password_auth": {"() -> None": [[88, "def test_username_password_auth():"]]}, "test_message_invalid_host": {"() -> None": [[181, "def test_message_invalid_host():"]]}, "test_username_password_auth_response": {"() -> None": [[109, "def test_username_password_auth_response():"]]}, "test_message_invalid_rsv": {"() -> None": [[187, "def test_message_invalid_rsv():"]]}, "test_message": {"() -> None": [[129, "def test_message():"]]}, "test_username_password_auth_response_auth_assert_ver1": {"() -> None": [[122, "def test_username_password_auth_response_auth_assert_ver1():"]]}, "test_message_ipv6": {"() -> None": [[164, "def test_message_ipv6():"]]}, "test_message_ipv4": {"() -> None": [[151, "def test_message_ipv4():"]]}, "test_username_password_auth_assert_ver1": {"() -> None": [[102, "def test_username_password_auth_assert_ver1():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.n": {"func": {"test_message_assert_socks5": {"() -> None": [[144, "def test_message_assert_socks5():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message_assert_socks5": {"var": {"msg": {"Message": [[146, "    msg = socks.Message.from_file(raw)"]]}, "raw": {"?": [[145, "    raw = tutils.treader(b\"\\xEE\\x01\\x00\\x03\\x0bexample.com\\xDE\\xAD\\xBE\\xEF\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_server_greetin": {"var": {"msg": {"ServerGreeting": [[57, "    msg = socks.ServerGreeting.from_file(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_client_greetin": {"var": {"msg": {"ClientGreeting": [[12, "    msg = socks.ClientGreeting.from_file(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_soc": {"func": {"test_message_unknown_atyp": {"() -> None": [[193, "def test_message_unknown_atyp():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_username_password_": {"var": {"auth": {"UsernamePasswordAuth": [[91, "    auth = socks.UsernamePasswordAuth.from_file(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_server_greeting_assert_socks5": {"var": {"msg": {"ServerGreeting": [[68, "    msg = socks.ServerGreeting.from_file(raw)"], [78, "    msg = socks.ServerGreeting.from_file(raw)"]]}, "raw": {"?": [[67, "    raw = tutils.treader(b\"HTTP/1.1 200 OK\" + b\" \" * 100)"], [77, "    raw = tutils.treader(b\"GET / HTTP/1.1\" + b\" \" * 100)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message_unknown_atyp": {"var": {"raw": {"?": [[194, "    raw = tutils.treader(b\"\\x05\\x02\\x00\\x02\\x7f\\x00\\x00\\x01\\xDE\\xAD\\xBE\\xEF\")"]]}, "m": {"Message": [[198, "    m = socks.Message(5, 1, 0x02, (\"example.com\", 5050))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message_ipv6": {"var": {"msg": {"Message": [[173, "    msg = socks.Message.from_file(raw)"]]}, "raw": {"?": [[168, "    raw = tutils.treader("]]}, "out": {"?": [[172, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_client_greeting_assert_socks5": {"var": {"msg": {"ClientGreeting": [[25, "    msg = socks.ClientGreeting.from_file(raw)"], [30, "    msg = socks.ClientGreeting.from_file(raw)"], [40, "    msg = socks.ClientGreeting.from_file(raw)"]]}, "raw": {"?": [[24, "    raw = tutils.treader(b\"\\x00\\x00\")"], [29, "    raw = tutils.treader(b\"HTTP/1.1 200 OK\" + b\" \" * 100)"], [39, "    raw = tutils.treader(b\"GET / HTTP/1.1\" + b\" \" * 100)"], [49, "    raw = tutils.treader(b\"XX\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message": {"var": {"msg": {"Message": [[132, "    msg = socks.Message.from_file(raw)"]]}, "raw": {"?": [[130, "    raw = tutils.treader(b\"\\x05\\x01\\x00\\x03\\x0bexample.com\\xDE\\xAD\\xBE\\xEF\")"]]}, "ipv6_addr": {"str": [[166, "    ipv6_addr = u\"2001:db8:85a3:8d3:1319:8a2e:370:7344\""]]}, "out": {"?": [[131, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_username_password_auth_assert_ver1": {"var": {"raw": {"?": [[103, "    raw = tutils.treader(b\"\\x02\\x03usr\\x03psd\\xBE\\xEF\")"]]}, "auth": {"UsernamePasswordAuth": [[104, "    auth = socks.UsernamePasswordAuth.from_file(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message_ipv4": {"var": {"msg": {"Message": [[155, "    msg = socks.Message.from_file(raw)"]]}, "raw": {"?": [[153, "    raw = tutils.treader(b\"\\x05\\x01\\x00\\x01\\x7f\\x00\\x00\\x01\\xDE\\xAD\\xBE\\xEF\")"]]}, "left": {"?": [[156, "    left = raw.read(2)"]]}, "out": {"?": [[154, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message_invalid_host": {"var": {"raw": {"?": [[182, "    raw = tutils.treader(b\"\\xEE\\x01\\x00\\x03\\x0bexample@com\\xDE\\xAD\\xBE\\xEF\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy": {"func": {"test_client_greeting_assert_socks5": {"() -> ?": [[23, "def test_client_greeting_assert_socks5():"]]}, "test_server_greeting_assert_socks5": {"() -> ?": [[66, "def test_server_greeting_assert_socks5():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_username_password_auth": {"var": {"raw": {"?": [[89, "    raw = tutils.treader(b\"\\x01\\x03usr\\x03psd\\xBE\\xEF\")"]]}, "out": {"?": [[90, "    out = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_socks.test_message_invalid_rsv": {"var": {"raw": {"?": [[188, "    raw = tutils.treader(b\"\\x05\\x01\\xFF\\x01\\x7f\\x00\\x00\\x01\\xDE\\xAD\\xBE\\xEF\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_commander.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander": {"class": {"TestCommandEdit": {"<TestCommandEdit>": [[65, "class TestCommandEdit:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_up_and_dow": {"param": {"commander_tctx": {"?": [[126, "    def test_up_and_down(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_right": {"var": {"cb": {"CommandBuffer": [[323, "            cb = commander.CommandBuffer(commander_tctx.master)"]]}, "c": {"int": [[325, "            for c in cursors:"]]}, "cursors": {"[int]": [[321, "        cursors = [1, 2, 3, 4, 4]"]]}}, "param": {"self": {"TestCommandBuffer": [[320, "    def test_right(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_inser": {"var": {"tests": {"[[(str, int)]]": [[330, "        tests = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_left": {"param": {"self": {"TestCommandEdit": [[96, "    def test_left(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_inser": {"var": {"edit": {"CommandEdit": [[76, "        edit = commander.CommandEdit(commander_tctx.master, '')"], [82, "        edit = commander.CommandEdit(commander_tctx.master, '')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_open_command_b": {"param": {"commander_tctx": {"?": [[67, "    def test_open_command_bar(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_backspace": {"var": {"start": {"(str, int)": [[304, "            for start, output in tests:"]]}, "cb": {"CommandBuffer": [[305, "                cb = commander.CommandBuffer(commander_tctx.master)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestListCompleter.test_cycl": {"var": {"expected": {"?": [[55, "            for expected in cycle:"], [57, "            for expected in cycle_reverse:"], [60, "            for expected in cycle_mix:"]]}, "tests": {"[[{[str] | str}]]": [[30, "        tests = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer": {"func": {"test_cycle_completion": {"TestCommandBuffer -> None": [[343, "    def test_cycle_completion(self):"]]}, "test_left": {"TestCommandBuffer -> None": [[311, "    def test_left(self):"]]}, "test_backspace": {"TestCommandBuffer -> None": [[294, "    def test_backspace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_backspac": {"var": {"tests": {"[[(str, int)]]": [[295, "        tests = ["]]}}, "param": {"self": {"TestCommandBuffer": [[294, "    def test_backspace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_backspac": {"var": {"edit": {"CommandEdit": [[87, "        edit = commander.CommandEdit(commander_tctx.master, '')"]]}}, "param": {"self": {"TestCommandEdit": [[86, "    def test_backspace(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.commander_tctx": {"var": {"confdir": {"?": [[13, "    confdir = dir_name"]]}, "dir_name": {"?": [[12, "    dir_name = tmpdir.mkdir('mitmproxy').dirname"]]}, "ch": {"CommandHistory": [[18, "    ch = command_history.CommandHistory()"]]}, "opts": {"Options": [[15, "    opts = options.Options()"]]}}, "param": {"tmpdir": {"?": [[10, "def commander_tctx(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_up_and_down": {"var": {"edit": {"CommandEdit": [[127, "        edit = commander.CommandEdit(commander_tctx.master, '')"], [144, "        edit = commander.CommandEdit(commander_tctx.master, '')"], [182, "        edit = commander.CommandEdit(commander_tctx.master, '')"]]}}, "param": {"self": {"TestCommandEdit": [[126, "    def test_up_and_down(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_open_command_bar": {"var": {"edit": {"CommandEdit": [[68, "        edit = commander.CommandEdit(commander_tctx.master, '')"]]}}, "param": {"self": {"TestCommandEdit": [[67, "    def test_open_command_bar(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_backsp": {"param": {"commander_tctx": {"?": [[86, "    def test_backspace(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_cycle_completion": {"var": {"cb": {"CommandBuffer": [[345, "            cb = commander.CommandBuffer(commander_tctx.master)"]]}, "ret": {"[(str, str)]": [[353, "            ret = ce.cbuf.render()"]]}, "ce": {"CommandEdit": [[350, "            ce = commander.CommandEdit(commander_tctx.master, \"se\")"]]}}, "param": {"self": {"TestCommandBuffer": [[343, "    def test_cycle_completion(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_right": {"param": {"self": {"TestCommandEdit": [[109, "    def test_right(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_insert": {"var": {"cb": {"CommandBuffer": [[337, "                cb = commander.CommandBuffer(commander_tctx.master)"]]}}, "param": {"self": {"TestCommandBuffer": [[329, "    def test_insert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_inse": {"var": {"start": {"(str, int)": [[336, "            for start, output in tests:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_left": {"var": {"cb": {"CommandBuffer": [[314, "            cb = commander.CommandBuffer(commander_tctx.master)"]]}, "c": {"int": [[316, "            for c in cursors:"]]}, "cursors": {"[int]": [[312, "        cursors = [3, 2, 1, 0, 0]"]]}}, "param": {"self": {"TestCommandBuffer": [[311, "    def test_left(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuff": {"func": {"test_render": {"TestCommandBuffer -> None": [[361, "    def test_render(self):"]]}, "test_right": {"TestCommandBuffer -> None": [[320, "    def test_right(self):"]]}, "test_insert": {"TestCommandBuffer -> None": [[329, "    def test_insert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestListCompleter": {"func": {"test_cycle": {"TestListCompleter -> None": [[29, "    def test_cycle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_c": {"class": {"TestCommandBuffer": {"<TestCommandBuffer>": [[292, "class TestCommandBuffer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.tes": {"var": {"commander_tctx": {"?": [[17, "    commander_tctx = taddons.context(options=opts)"]]}}, "func": {"commander_tctx": {"? -> None": [[10, "def commander_tctx(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_righ": {"var": {"edit": {"CommandEdit": [[110, "        edit = commander.CommandEdit(commander_tctx.master, '')"]]}}, "param": {"commander_tctx": {"?": [[109, "    def test_right(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_lef": {"var": {"edit": {"CommandEdit": [[97, "        edit = commander.CommandEdit(commander_tctx.master, '')"]]}}, "param": {"commander_tctx": {"?": [[96, "    def test_left(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_command": {"class": {"TestListCompleter": {"<TestListCompleter>": [[28, "class TestListCompleter:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_insert": {"param": {"self": {"TestCommandEdit": [[75, "    def test_insert(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_rend": {"var": {"ret": {"[(str, str)]": [[368, "            ret = cb.render()"], [378, "            ret = cb.render()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdit.test_ins": {"param": {"commander_tctx": {"?": [[75, "    def test_insert(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandBuffer.test_render": {"var": {"cb": {"CommandBuffer": [[363, "            cb = commander.CommandBuffer(commander_tctx.master)"]]}}, "param": {"self": {"TestCommandBuffer": [[361, "    def test_render(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestListCompleter.test_cycle": {"var": {"forward": {"?": [[59, "            forward = True"], [62, "                forward = not forward"]]}, "start": {"{[str] | str}": [[53, "        for start, opts, cycle, cycle_reverse, cycle_mix in tests:"]]}, "c": {"ListCompleter": [[54, "            c = commander.ListCompleter(start, opts)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEdi": {"func": {"test_up_and_down": {"(TestCommandEdit, ?) -> None": [[126, "    def test_up_and_down(self, commander_tctx):"]]}, "test_open_command_bar": {"(TestCommandEdit, ?) -> ?": [[67, "    def test_open_command_bar(self, commander_tctx):"]]}, "test_left": {"(TestCommandEdit, ?) -> None": [[96, "    def test_left(self, commander_tctx):"]]}, "test_backspace": {"(TestCommandEdit, ?) -> None": [[86, "    def test_backspace(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestCommandEd": {"func": {"test_right": {"(TestCommandEdit, ?) -> None": [[109, "    def test_right(self, commander_tctx):"]]}, "test_insert": {"(TestCommandEdit, ?) -> None": [[75, "    def test_insert(self, commander_tctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_commander.TestListCompleter.test_cyc": {"param": {"self": {"TestListCompleter": [[29, "    def test_cycle(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/modifybody.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody": {"param": {"loader": {"?": [[13, "    def load(self, loader):"]]}}, "func": {"load": {"(ModifyBody, ?) -> None": [[13, "    def load(self, loader):"]]}, "run": {"(ModifyBody, ?) -> ?": [[42, "    def run(self, flow):"]]}, "configure": {"(ModifyBody, ?) -> ?": [[23, "    def configure(self, updated):"]]}, "request": {"(ModifyBody, ?) -> None": [[34, "    def request(self, flow):"]]}, "response": {"(ModifyBody, ?) -> None": [[38, "    def response(self, flow):"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.run": {"var": {"spec": {"?": [[43, "        for spec in self.replacements:"]]}}, "param": {"self": {"ModifyBody": [[42, "    def run(self, flow):"]]}, "flow": {"?": [[42, "    def run(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.__init__": {"param": {"self": {"ModifyBody": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.configur": {"var": {"spec": {"ModifySpec": [[28, "                    spec = parse_modify_spec(option, True)"]]}}, "param": {"self": {"ModifyBody": [[23, "    def configure(self, updated):"]]}, "updated": {"?": [[23, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.request": {"param": {"self": {"ModifyBody": [[34, "    def request(self, flow):"]]}, "flow": {"?": [[34, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.configure": {"var": {"option": {"?": [[26, "            for option in ctx.options.modify_body:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyb": {"class": {"ModifyBody": {"<ModifyBody>": [[9, "class ModifyBody:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.response": {"param": {"flow": {"?": [[38, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.respon": {"param": {"self": {"ModifyBody": [[38, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.ru": {"var": {"replacement": {"?": [[46, "                    replacement = spec.read_replacement()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifybody.ModifyBody.load": {"param": {"self": {"ModifyBody": [[13, "    def load(self, loader):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/websockets/utils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.util": {"func": {"get_server_accept": {"Headers -> ? / {? -> ? | Headers} -> ? / ? -> ?": [[89, "def get_server_accept(headers):"]]}, "get_extensions": {"Headers -> ? / {? -> ? | Headers} -> ? / ? -> ?": [[77, "def get_extensions(headers):"]]}, "server_handshake_headers": {"(str, str, str) -> Headers / (?, None, None) -> Headers / (str, None, None) -> Headers": [[43, "def server_handshake_headers(client_key, protocol=None, extensions=None):"]]}, "check_handshake": {"Headers -> bool / {? -> ? | Headers} -> bool / ? -> bool": [[61, "def check_handshake(headers):"]]}, "create_server_nonce": {"str -> ? / ? -> ?": [[69, "def create_server_nonce(client_nonce):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.get_extension": {"param": {"headers": {"{? -> ? | Headers}": [[77, "def get_extensions(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils": {"var": {"VERSION": {"str": [[15, "VERSION = \"13\""]]}, "MAGIC": {"str": [[14, "MAGIC = b'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'"]]}}, "func": {"get_client_key": {"Headers -> ? / {? -> ? | Headers} -> ? / ? -> ?": [[85, "def get_client_key(headers):"]]}, "get_protocol": {"? -> ? / Headers -> ? / {? -> ? | Headers} -> ?": [[81, "def get_protocol(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.server_handshake_headers": {"var": {"h": {"Headers": [[49, "    h = http.Headers("]]}}, "param": {"protocol": {"str": [[43, "def server_handshake_headers(client_key, protocol=None, extensions=None):"]]}, "client_key": {"str": [[43, "def server_handshake_headers(client_key, protocol=None, extensions=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.check_client_version": {"param": {"headers": {"Headers": [[73, "def check_client_version(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.create_server": {"param": {"client_nonce": {"str": [[69, "def create_server_nonce(client_nonce):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.u": {"func": {"client_handshake_headers": {"(None, None, None, None) -> Headers": [[18, "def client_handshake_headers(version=None, key=None, protocol=None, extensions=None):"]]}, "check_client_version": {"? -> bool / Headers -> bool": [[73, "def check_client_version(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.get_client_key": {"param": {"headers": {"{? -> ? | Headers}": [[85, "def get_client_key(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.get_server_accept": {"param": {"headers": {"{? -> ? | Headers}": [[89, "def get_server_accept(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.get_protocol": {"param": {"headers": {"{? -> ? | Headers}": [[81, "def get_protocol(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.client_handshake_head": {"var": {"version": {"str": [[27, "        version = VERSION"]]}}, "param": {"version": {"None": [[18, "def client_handshake_headers(version=None, key=None, protocol=None, extensions=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.server_handshake_header": {"param": {"extensions": {"str": [[43, "def server_handshake_headers(client_key, protocol=None, extensions=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.client_handshake_header": {"param": {"extensions": {"None": [[18, "def client_handshake_headers(version=None, key=None, protocol=None, extensions=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.check_handshak": {"param": {"headers": {"{? -> ? | Headers}": [[61, "def check_handshake(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.utils.client_handshake_headers": {"var": {"h": {"Headers": [[30, "    h = http.Headers("]]}, "key": {"?": [[29, "        key = base64.b64encode(os.urandom(16)).decode('ascii')"]]}}, "param": {"protocol": {"None": [[18, "def client_handshake_headers(version=None, key=None, protocol=None, extensions=None):"]]}, "key": {"None": [[18, "def client_handshake_headers(version=None, key=None, protocol=None, extensions=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/sliding_window.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.sliding_window.window": {"var": {"i": {"int": [[22, "    for i in range(behind):"], [24, "    for i in range(ahead):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.sliding_": {"func": {"window": {"([int], int, int) -> None / (?, int, int) -> None / (None, int, int) -> None": [[7, "def window(iterator: Iterable[T], behind: int = 0, ahead: int = 0) -> Iterator[Tuple[Optional[T], ...]]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.sliding_window": {"var": {"T": {"?": [[4, "T = TypeVar('T')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/pathod_cmdline.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdline.args_patho": {"var": {"data": {"str": [[221, "                data = f.read()"]]}}, "param": {"stderr_": {"?": [[22, "def args_pathod(argv, stdout_=sys.stdout, stderr_=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdline.args_path": {"param": {"stdout_": {"?": [[22, "def args_pathod(argv, stdout_=sys.stdout, stderr_=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdline.args_pathod": {"var": {"args": {"?": [[183, "    args = parser.parse_args(argv[1:])"]]}, "group": {"?": [[103, "    group = parser.add_argument_group("], [151, "    group = parser.add_argument_group("]]}, "anchors": {"[(?, str)]": [[216, "    anchors = []"]]}, "i": {"?": [[188, "    for i in args.ssl_certs:"], [201, "    for i in args.anchors:"]]}, "alst": {"[tuple]": [[200, "    alst = []"]]}, "parser": {"?": [[23, "    parser = argparse.ArgumentParser("]]}, "parts": {"[str]": [[191, "            parts = [\"*\", parts[0]]"]], "?": [[189, "        parts = i.split(\"=\", 1)"]], "tuple": [[202, "        parts = parse_anchor_spec(i)"]]}, "certs": {"[[str]]": [[187, "    certs = []"]]}, "sizelimit": {"int": [[211, "            sizelimit = human.parse_size(args.sizelimit)"]], "None": [[208, "    sizelimit = None"]]}, "spec": {"str": [[222, "            spec = data"]], "?": [[218, "        spec = os.path.expanduser(spec)"]]}, "arex": {"?": [[224, "            arex = re.compile(patt)"]]}, "patt": {"?": [[217, "    for patt, spec in args.anchors:"]]}}, "param": {"argv": {"[str]": [[22, "def args_pathod(argv, stdout_=sys.stdout, stderr_=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdline.go_pathod": {"var": {"args": {"?": [[234, "    args = args_pathod(sys.argv)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdline": {"func": {"args_pathod": {"(?, ?, ?) -> ? / ([str], ?, ?) -> ?": [[22, "def args_pathod(argv, stdout_=sys.stdout, stderr_=sys.stderr):"]]}, "go_pathod": {"() -> None": [[233, "def go_pathod():  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdli": {"func": {"parse_anchor_spec": {"? -> tuple / str -> tuple": [[13, "def parse_anchor_spec(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod_cmdline.parse_anchor_spec": {"param": {"s": {"str": [[13, "def parse_anchor_spec(s):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/pathod/test_context.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_contex": {"func": {"test_simple": {"() -> None": [[5, "def test_simple():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_context.test_simple": {"var": {"url": {"None": [[13, "        url = d.p(\"200:b@100\")"]]}, "r": {"?": [[15, "        r = requests.put(url)"]]}, "log": {"?": [[22, "        log = d.last_log()[\"request\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/png.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ChrmChunk.__init__": {"param": {"self": {"ChrmChunk": [[148, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdTruecolor.__init__": {"param": {"self": {"BkgdTruecolor": [[209, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PhysChunk": {"func": {"__init__": {"? -> ?": [[253, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ColorTy": {"var": {"truecolor_alpha": {"int": [[22, "        truecolor_alpha = 6"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdChunk": {"func": {"__init__": {"? -> ?": [[235, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.CompressedTextChunk.__init": {"param": {"_io": {"?": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.GamaChunk.__init": {"param": {"_io": {"?": [[219, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.p": {"class": {"Png": {"<Png>": [[15, "class Png(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdIndexed.__init__": {"param": {"self": {"BkgdIndexed": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ChrmChunk.__init": {"param": {"_io": {"?": [[148, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ColorT": {"var": {"greyscale_alpha": {"int": [[21, "        greyscale_alpha = 4"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Point.__init": {"param": {"_io": {"?": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdTruecolor.__init": {"param": {"_io": {"?": [[209, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Rgb.__init__": {"param": {"self": {"Rgb": [[44, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.InternationalTextChunk.__init": {"param": {"_io": {"?": [[263, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.GamaChunk": {"func": {"gamma_ratio": {"GamaChunk -> float": [[226, "        def gamma_ratio(self):"]]}, "__init__": {"? -> ?": [[219, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PlteChunk.__init": {"param": {"_io": {"?": [[173, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdIndexed.__init": {"param": {"_io": {"?": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PlteChunk": {"func": {"__init__": {"? -> ?": [[173, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Pn": {"class": {"BkgdGreyscale": {"<BkgdGreyscale>": [[139, "    class BkgdGreyscale(KaitaiStruct):"]]}, "Rgb": {"<Rgb>": [[43, "    class Rgb(KaitaiStruct):"]]}, "BkgdTruecolor": {"<BkgdTruecolor>": [[208, "    class BkgdTruecolor(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TimeChunk.__ini": {"param": {"_parent": {"None": [[285, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[285, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Point.__init__": {"param": {"self": {"Point": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.IhdrChunk.__init": {"param": {"_io": {"?": [[159, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdGreyscale.__ini": {"param": {"_parent": {"None": [[140, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[140, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Rgb.__init": {"param": {"_io": {"?": [[44, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PhysChunk.__init__": {"param": {"self": {"PhysChunk": [[253, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TextChunk.__init": {"param": {"_io": {"?": [[276, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png": {"class": {"CompressedTextChunk": {"<CompressedTextChunk>": [[197, "    class CompressedTextChunk(KaitaiStruct):"]]}, "PhysChunk": {"<PhysChunk>": [[252, "    class PhysChunk(KaitaiStruct):"]]}, "Point": {"<Point>": [[114, "    class Point(KaitaiStruct):"]]}, "Chunk": {"<Chunk>": [[53, "    class Chunk(KaitaiStruct):"]]}, "ChrmChunk": {"<ChrmChunk>": [[147, "    class ChrmChunk(KaitaiStruct):"]]}, "TextChunk": {"<TextChunk>": [[275, "    class TextChunk(KaitaiStruct):"]]}, "PhysUnit": {"<PhysUnit>": [[24, "    class PhysUnit(Enum):"]]}, "TimeChunk": {"<TimeChunk>": [[284, "    class TimeChunk(KaitaiStruct):"]]}, "IhdrChunk": {"<IhdrChunk>": [[158, "    class IhdrChunk(KaitaiStruct):"]]}, "GamaChunk": {"<GamaChunk>": [[218, "    class GamaChunk(KaitaiStruct):"]]}, "ColorType": {"<ColorType>": [[17, "    class ColorType(Enum):"]]}, "InternationalTextChunk": {"<InternationalTextChunk>": [[262, "    class InternationalTextChunk(KaitaiStruct):"]]}, "PlteChunk": {"<PlteChunk>": [[172, "    class PlteChunk(KaitaiStruct):"]]}}, "func": {"__init__": {"? -> ?": [[27, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdGreyscale": {"func": {"__init__": {"? -> ?": [[140, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.IhdrChunk.__ini": {"param": {"_parent": {"Png": [[159, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Png": [[159, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdIndexed": {"func": {"__init__": {"? -> ?": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.__ini": {"param": {"_parent": {"None": [[27, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[27, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PlteChunk.__ini": {"param": {"_parent": {"None": [[173, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[173, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TimeChunk": {"func": {"__init__": {"? -> ?": [[285, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.SrgbChunk": {"class": {"Intent": {"<Intent>": [[185, "        class Intent(Enum):"]]}}, "func": {"__init__": {"? -> ?": [[190, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Point.x": {"param": {"self": {"Point": [[123, "        def x(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Point.y": {"param": {"self": {"Point": [[131, "        def y(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.CompressedTextChunk.__ini": {"param": {"_parent": {"None": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.SrgbChunk.__init": {"param": {"_io": {"?": [[190, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TextChunk.__init__": {"param": {"self": {"TextChunk": [[276, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.P": {"class": {"BkgdIndexed": {"<BkgdIndexed>": [[106, "    class BkgdIndexed(KaitaiStruct):"]]}, "BkgdChunk": {"<BkgdChunk>": [[234, "    class BkgdChunk(KaitaiStruct):"]]}, "SrgbChunk": {"<SrgbChunk>": [[183, "    class SrgbChunk(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Rgb": {"func": {"__init__": {"? -> ?": [[44, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.SrgbChunk.Inten": {"var": {"relative_colorimetric": {"int": [[187, "            relative_colorimetric = 1"]]}, "absolute_colorimetric": {"int": [[189, "            absolute_colorimetric = 3"]]}, "perceptual": {"int": [[186, "            perceptual = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TextChunk.__ini": {"param": {"_parent": {"None": [[276, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[276, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.SrgbChunk.__init__": {"param": {"self": {"SrgbChunk": [[190, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.IhdrChunk.__init__": {"param": {"self": {"IhdrChunk": [[159, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ColorTyp": {"var": {"greyscale": {"int": [[18, "        greyscale = 0"]]}, "indexed": {"int": [[20, "        indexed = 3"]]}, "truecolor": {"int": [[19, "        truecolor = 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdTruecolor": {"func": {"__init__": {"? -> ?": [[209, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.InternationalTextChunk.__init__": {"param": {"self": {"InternationalTextChunk": [[263, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PhysChunk.__init": {"param": {"_io": {"?": [[253, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.__init": {"var": {"_": {"Chunk": [[38, "            _ = self._root.Chunk(self._io, self, self._root)"]]}}, "param": {"_io": {"?": [[27, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Chunk.__ini": {"param": {"_parent": {"Png": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Png": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.GamaChunk.gamma_ratio": {"param": {"self": {"GamaChunk": [[226, "        def gamma_ratio(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdIndexed.__ini": {"param": {"_parent": {"None": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[107, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdGreyscale.__init": {"param": {"_io": {"?": [[140, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdGreyscale.__init__": {"param": {"self": {"BkgdGreyscale": [[140, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.InternationalTextChunk": {"func": {"__init__": {"? -> ?": [[263, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PlteChunk.__init__": {"param": {"self": {"PlteChunk": [[173, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TimeChunk.__init__": {"param": {"self": {"TimeChunk": [[285, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Chunk.__init": {"var": {"_on": {"?": [[60, "            _on = self.type"]]}}, "param": {"_io": {"?": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.InternationalTextChunk.__ini": {"param": {"_parent": {"None": [[263, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[263, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Chunk": {"func": {"__init__": {"? -> ?": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdChunk.__init__": {"param": {"self": {"BkgdChunk": [[235, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PhysUnit": {"var": {"unknown": {"int": [[25, "        unknown = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Point.__ini": {"param": {"_parent": {"None": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.GamaChunk.__init__": {"param": {"self": {"GamaChunk": [[219, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Chunk.__init__": {"var": {"io": {"?": [[63, "                io = KaitaiStream(BytesIO(self._raw_body))"], [67, "                io = KaitaiStream(BytesIO(self._raw_body))"], [71, "                io = KaitaiStream(BytesIO(self._raw_body))"], [75, "                io = KaitaiStream(BytesIO(self._raw_body))"], [79, "                io = KaitaiStream(BytesIO(self._raw_body))"], [83, "                io = KaitaiStream(BytesIO(self._raw_body))"], [87, "                io = KaitaiStream(BytesIO(self._raw_body))"], [91, "                io = KaitaiStream(BytesIO(self._raw_body))"], [95, "                io = KaitaiStream(BytesIO(self._raw_body))"], [99, "                io = KaitaiStream(BytesIO(self._raw_body))"]]}}, "param": {"self": {"Chunk": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TextChunk": {"func": {"__init__": {"? -> ?": [[276, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PhysUni": {"var": {"meter": {"int": [[26, "        meter = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Po": {"func": {"__init__": {"? -> ?": [[115, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Rgb.__ini": {"param": {"_parent": {"None": [[44, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[44, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.__init__": {"param": {"self": {"Png": [[27, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ChrmChunk.__ini": {"param": {"_parent": {"None": [[148, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[148, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdChunk.__init": {"var": {"_on": {"?": [[239, "            _on = self._root.ihdr.color_type"]]}}, "param": {"_io": {"?": [[235, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.GamaChunk.__ini": {"param": {"_parent": {"None": [[219, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[219, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.CompressedTextChunk.__init__": {"param": {"self": {"CompressedTextChunk": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.SrgbChunk.Inte": {"var": {"saturation": {"int": [[188, "            saturation = 2"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.TimeChunk.__init": {"param": {"_io": {"?": [[285, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.ChrmChunk": {"func": {"__init__": {"? -> ?": [[148, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.Point": {"func": {"y": {"Point -> float": [[131, "        def y(self):"]]}, "x": {"Point -> float": [[123, "        def x(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdChunk.__ini": {"param": {"_parent": {"None": [[235, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[235, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.CompressedTextChunk": {"func": {"__init__": {"? -> ?": [[198, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.PhysChunk.__ini": {"param": {"_parent": {"None": [[253, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[253, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.IhdrChunk": {"func": {"__init__": {"? -> ?": [[159, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.SrgbChunk.__ini": {"param": {"_parent": {"None": [[190, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[190, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.png.Png.BkgdTruecolor.__ini": {"param": {"_parent": {"None": [[209, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[209, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/events-http-specific.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-http-specific": {"class": {"Events": {"<Events>": [[5, "class Events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-http-specific.Even": {"func": {"requestheaders": {"(Events, ?) -> None": [[15, "    def requestheaders(self, flow: mitmproxy.http.HTTPFlow):"]]}, "request": {"(Events, ?) -> None": [[21, "    def request(self, flow: mitmproxy.http.HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-http-specific.Events": {"func": {"error": {"(Events, ?) -> None": [[37, "    def error(self, flow: mitmproxy.http.HTTPFlow):"]]}, "http_connect": {"(Events, ?) -> None": [[6, "    def http_connect(self, flow: mitmproxy.http.HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-http-specific.Event": {"func": {"responseheaders": {"(Events, ?) -> None": [[26, "    def responseheaders(self, flow: mitmproxy.http.HTTPFlow):"]]}, "response": {"(Events, ?) -> None": [[32, "    def response(self, flow: mitmproxy.http.HTTPFlow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/multipart.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.multipart.decode": {"var": {"i": {"?": [[58, "            for i in content.split(b\"--\" + boundary):"]]}, "rx": {"?": [[55, "        rx = re.compile(br'\\bname=\"([^\"]+)\"')"]]}, "parts": {"?": [[59, "                parts = i.splitlines()"]]}, "r": {"[(?, str)]": [[56, "        r = []"]]}, "v": {"(?, ?, ?)": [[47, "        v = headers.parse_content_type(v)"]], "?": [[45, "    v = hdrs.get(\"content-type\")"]]}, "boundary": {"?": [[51, "            boundary = v[2][\"boundary\"].encode(\"ascii\")"]]}, "match": {"?": [[61, "                    match = rx.search(parts[1])"]]}}, "param": {"hdrs": {"{? -> ? | Headers}": [[41, "def decode(hdrs, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.multipart.decod": {"var": {"value": {"str": [[64, "                        value = b\"\".join(parts[3 + parts[2:].index(b\"\"):])"]]}, "key": {"?": [[63, "                        key = match.group(1)"]]}}, "param": {"content": {"{? -> ? | str}": [[41, "def decode(hdrs, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.multipart.encod": {"var": {"file_type": {"str": [[20, "                file_type = mimetypes.guess_type(str(key))[0] or \"text/plain; charset=utf-8\""]]}, "temp": {"?": [[37, "            temp = b\"\\r\\n\".join(hdrs)"]]}, "key": {"str": [[19, "            for key, value in l:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.multipart": {"func": {"encode": {"(?, ?) -> str / ({? -> ? | Headers}, ?) -> str / (Headers, [(str, str)]) -> str": [[7, "def encode(head, l):"]]}, "decode": {"({? -> ? | Headers}, {? -> ? | str}) -> {[(?, str)] | [?]} / (?, ?) -> {[(?, str)] | [?]} / (Headers, ?) -> {[(?, str)] | [?]}": [[41, "def decode(hdrs, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.multipart.encode": {"var": {"k": {"(?, ?, ?)": [[11, "        k = headers.parse_content_type(k)"]], "?": [[9, "    k = head.get(\"content-type\")"]]}, "boundary": {"?": [[14, "                boundary = k[2][\"boundary\"].encode(\"ascii\")"], [15, "                boundary = quote(boundary)"]]}, "disposition": {"str": [[24, "                    disposition = b'form-data; name=\"%b\"' % key"]]}, "hdrs": {"[str]": [[18, "            hdrs = []"]]}}, "param": {"l": {"[(str, str)]": [[7, "def encode(head, l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.multipart.enco": {"param": {"head": {"{? -> ? | Headers}": [[7, "def encode(head, l):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/actions.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.__lt__": {"param": {"self": {"{DisconnectAt | _Action}": [[34, "    def __lt__(self, other):"]]}, "other": {"DisconnectAt": [[34, "    def __lt__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.action": {"class": {"PauseAt": {"<PauseAt>": [[52, "class PauseAt(_Action):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt.expr": {"var": {"e": {"?": [[112, "        e = pp.Literal(\"i\").suppress()"]]}}, "param": {"cls": {"<InjectAt>": [[111, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt.spec": {"param": {"self": {"PauseAt": [[72, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt.freez": {"param": {"self": {"InjectAt": [[128, "    def freeze(self, settings):"]]}, "settings": {"?": [[128, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt.__init__": {"param": {"self": {"InjectAt": [[106, "    def __init__(self, offset, value):"]]}, "value": {"?": [[106, "    def __init__(self, offset, value):"]]}, "offset": {"{DisconnectAt | InjectAt | PauseAt}": [[106, "    def __init__(self, offset, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt": {"var": {"unique_name": {"None": [[53, "    unique_name = None"]]}}, "func": {"expr": {"<PauseAt> -> None": [[60, "    def expr(cls):"]]}, "spec": {"PauseAt -> ?": [[72, "    def spec(self):"]]}, "freeze": {"(PauseAt, ?) -> PauseAt / (PauseAt, dict) -> PauseAt": [[78, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.__init__": {"param": {"self": {"{<_Action> | _Action}": [[18, "    def __init__(self, offset):"]]}, "offset": {"{DisconnectAt | InjectAt | PauseAt}": [[18, "    def __init__(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.intermediat": {"param": {"self": {"_Action": [[48, "    def intermediate(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt.intermediat": {"param": {"self": {"InjectAt": [[121, "    def intermediate(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt.expr": {"var": {"e": {"?": [[61, "        e = pp.Literal(\"p\").suppress()"]]}}, "param": {"cls": {"<PauseAt>": [[60, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt.spec": {"param": {"self": {"DisconnectAt": [[93, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt.spec": {"param": {"self": {"InjectAt": [[118, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt.__init__": {"param": {"self": {"DisconnectAt": [[84, "    def __init__(self, offset):"]]}, "offset": {"{int | str}": [[84, "    def __init__(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt.intermediat": {"param": {"self": {"PauseAt": [[75, "    def intermediate(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectA": {"func": {"intermediate": {"(DisconnectAt, ?) -> ({DisconnectAt | InjectAt | PauseAt}, str)": [[96, "    def intermediate(self, settings):"]]}, "__init__": {"? -> ?": [[84, "    def __init__(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.__eq__": {"param": {"self": {"{DisconnectAt | InjectAt | _Action}": [[37, "    def __eq__(self, other):"]]}, "other": {"DisconnectAt": [[37, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt.expr": {"var": {"e": {"?": [[89, "        e = pp.Literal(\"d\").suppress()"]]}}, "param": {"cls": {"<DisconnectAt>": [[88, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.a": {"class": {"DisconnectAt": {"<DisconnectAt>": [[82, "class DisconnectAt(_Action):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.intermedia": {"param": {"settings": {"?": [[48, "    def intermediate(self, settings):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt": {"var": {"unique_name": {"None": [[104, "    unique_name = None  # type: ignore"]]}}, "func": {"expr": {"<InjectAt> -> None": [[111, "    def expr(cls):"]]}, "spec": {"InjectAt -> ?": [[118, "    def spec(self):"]]}, "freeze": {"(InjectAt, ?) -> InjectAt": [[128, "    def freeze(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Actio": {"func": {"intermediate": {"(_Action, ?) -> None": [[48, "    def intermediate(self, settings):  # pragma: no cover"]]}, "__init__": {"? -> ?": [[18, "    def __init__(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt.intermedia": {"param": {"settings": {"?": [[96, "    def intermediate(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.spec": {"param": {"self": {"_Action": [[44, "    def spec(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions": {"class": {"_Action": {"<_Action>": [[10, "class _Action(base.Token):"]]}, "InjectAt": {"<InjectAt>": [[103, "class InjectAt(_Action):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectAt.intermedia": {"param": {"settings": {"?": [[121, "    def intermediate(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.InjectA": {"func": {"intermediate": {"(InjectAt, ?) -> ({DisconnectAt | InjectAt | PauseAt}, str, ?)": [[121, "    def intermediate(self, settings):"]]}, "__init__": {"? -> ?": [[106, "    def __init__(self, offset, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt.freez": {"param": {"self": {"PauseAt": [[78, "    def freeze(self, settings_):"]]}, "settings_": {"dict": [[78, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action": {"func": {"__lt__": {"(DisconnectAt, DisconnectAt) -> bool / (_Action, ?) -> bool": [[34, "    def __lt__(self, other):"]]}, "resolve": {"(_Action, ?, ?) -> None / (DisconnectAt, dict, ?) -> None": [[21, "    def resolve(self, settings, msg):"]]}, "__eq__": {"(DisconnectAt, DisconnectAt) -> bool / (_Action, ?) -> ? / (InjectAt, ?) -> ?": [[37, "    def __eq__(self, other):"]]}, "__repr__": {"_Action -> None": [[40, "    def __repr__(self):"]]}, "spec": {"_Action -> None": [[44, "    def spec(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt": {"func": {"expr": {"<DisconnectAt> -> None": [[88, "    def expr(cls):"]]}, "spec": {"DisconnectAt -> ?": [[93, "    def spec(self):"]]}, "freeze": {"(DisconnectAt, ?) -> DisconnectAt / (DisconnectAt, dict) -> DisconnectAt": [[99, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt.__init__": {"param": {"seconds": {"{int | str}": [[55, "    def __init__(self, offset, seconds):"]]}, "self": {"PauseAt": [[55, "    def __init__(self, offset, seconds):"]]}, "offset": {"{int | str}": [[55, "    def __init__(self, offset, seconds):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt.intermediat": {"param": {"self": {"DisconnectAt": [[96, "    def intermediate(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.resolve": {"var": {"c": {"?": [[26, "        c = copy.copy(self)"]]}, "l": {"?": [[27, "        l = msg.length(settings)"]]}}, "param": {"msg": {"?": [[21, "    def resolve(self, settings, msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.__repr__": {"param": {"self": {"_Action": [[40, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseA": {"func": {"intermediate": {"(PauseAt, ?) -> ({DisconnectAt | InjectAt | PauseAt}, str, str)": [[75, "    def intermediate(self, settings):"]]}, "__init__": {"? -> ?": [[55, "    def __init__(self, offset, seconds):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.DisconnectAt.freez": {"param": {"self": {"DisconnectAt": [[99, "    def freeze(self, settings_):"]]}, "settings_": {"dict": [[99, "    def freeze(self, settings_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions.PauseAt.intermedia": {"param": {"settings": {"?": [[75, "    def intermediate(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.actions._Action.resolv": {"param": {"self": {"{DisconnectAt | _Action}": [[21, "    def resolve(self, settings, msg):"]]}, "settings": {"dict": [[21, "    def resolve(self, settings, msg):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/pathod/test_setup.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup.Tes": {"func": {"teardown": {"Test -> None": [[15, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup.Test.teardown": {"param": {"self": {"Test": [[15, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup.Test.test_simp": {"param": {"self": {"Test": [[18, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup": {"class": {"Test": {"<Test>": [[5, "class Test:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup.Test.setup": {"param": {"self": {"Test": [[12, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup.T": {"func": {"setup": {"Test -> None": [[12, "    def setup(self):"]]}, "test_simple": {"Test -> None": [[18, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.pathod.test_setup.Test.test_simple": {"var": {"url": {"?": [[20, "        url = self.d.p(\"200:b@100\")"]]}, "r": {"?": [[22, "        r = requests.put(url)"]]}, "log": {"?": [[29, "        log = self.d.last_log()[\"request\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_encoding.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_encoding.test_encoders_strings": {"param": {"encoder": {"?": [[54, "def test_encoders_strings(encoder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_encoding.test_identity": {"param": {"encoder": {"?": [[11, "def test_identity(encoder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_encoding.lat": {"param": {"encoder": {"?": [[24, "def test_encoders(encoder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_encoding": {"func": {"test_identity": {"? -> None": [[11, "def test_identity(encoder):"]]}, "test_cache": {"() -> None": [[76, "def test_cache():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http": {"func": {"test_encoders_strings": {"? -> None": [[54, "def test_encoders_strings(encoder):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_encoding.test_cach": {"var": {"encode_gzip": {"?": [[79, "    encode_gzip = mock.MagicMock()"]]}, "decode_gzip": {"?": [[77, "    decode_gzip = mock.MagicMock()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/view.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus": {"func": {"index": {"Focus -> int": [[645, "    def index(self) -> typing.Optional[int]:"]], "{? -> ? | int}": [[651, "    def index(self, idx):"]]}, "flow": {"Focus -> ?": [[634, "    def flow(self) -> typing.Optional[mitmproxy.flow.Flow]:"]], "{? -> ? | HTTPFlow | None}": [[638, "    def flow(self, f: typing.Optional[mitmproxy.flow.Flow]):"]]}, "__init__": {"? -> ?": [[623, "    def __init__(self, v: View) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus._sig_view_remo": {"param": {"view": {"?": [[659, "    def _sig_view_remove(self, view, flow, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.get_": {"var": {"order": {"<list>": [[316, "                order = k"]], "str": [[313, "        order = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.set": {"var": {"order_key": {"?": [[302, "        order_key = self.orders[order_key]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settin": {"func": {"_sig_store_refresh": {"(Settings, ?) -> None": [[701, "    def _sig_store_refresh(self, view):"]]}, "_sig_store_remove": {"(Settings, ?, ?) -> None": [[697, "    def _sig_store_remove(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.clear_not_marked": {"var": {"flow": {"?": [[354, "        for flow in self._store.copy().values():"]]}}, "param": {"self": {"View": [[350, "    def clear_not_marked(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.setvalue_togg": {"var": {"self": {"View": [[371, "        self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view._OrderKey.refresh": {"var": {"new": {"None": [[50, "        new = self.generate(f)"]]}, "k": {"?": [[48, "        k = self._key()"]]}, "old": {"?": [[49, "        old = self.view.settings[f][k]"]]}}, "param": {"self": {"{OrderRequestStart | _OrderKey}": [[47, "    def refresh(self, f):"]]}, "f": {"None": [[47, "    def refresh(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View._refilter": {"var": {"i": {"?": [[229, "        for i in self._store.values():"]]}}, "param": {"self": {"View": [[227, "    def _refilter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.__getitem__": {"param": {"self": {"View": [[205, "    def __getitem__(self, offset) -> typing.Any:"]]}, "offset": {"?": [[205, "    def __getitem__(self, offset) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.configure": {"var": {"filt": {"None": [[541, "            filt = None"], [543, "                filt = flowfilter.parse(ctx.options.view_filter)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.resolve": {"var": {"filt": {"None": [[452, "            filt = flowfilter.parse(flow_spec)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.set_filter_cmd": {"var": {"filt": {"None": [[325, "        filt = None"], [327, "            filt = flowfilter.parse(filter_expr)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.tcp_message": {"param": {"f": {"?": [[581, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View._rev": {"var": {"idx": {"int": [[195, "                idx = -idx - 1"], [197, "                idx = len(self._view) - idx - 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings._sig_store_refresh": {"var": {"fid": {"<list>": [[702, "        for fid in list(self._values.keys()):"]]}}, "param": {"self": {"Settings": [[701, "    def _sig_store_refresh(self, view):"]]}, "view": {"?": [[701, "    def _sig_store_refresh(self, view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view._OrderK": {"func": {"_key": {"_OrderKey -> ? / OrderRequestStart -> ?": [[57, "    def _key(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.setvalue_toggl": {"var": {"current": {"?": [[381, "            current = self.settings[f].get(\"key\", \"false\")"]]}, "updated": {"[?]": [[379, "        updated = []"]]}, "key": {"str": [[373, "        key: str"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.update": {"var": {"idx": {"?": [[611, "                        idx = self._view.index(f)"]]}, "f": {"None": [[594, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings.__len__": {"param": {"self": {"Settings": [[689, "    def __len__(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.resume": {"param": {"f": {"None": [[572, "    def resume(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.duplicate": {"var": {"dups": {"[?]": [[408, "        dups = [f.copy() for f in flows]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings._sig_store_remo": {"param": {"view": {"?": [[697, "    def _sig_store_remove(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.respon": {"param": {"self": {"View": [[566, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.OrderKeySiz": {"func": {"generate": {"(OrderKeySize, ?) -> int": [[99, "    def generate(self, f: mitmproxy.flow.Flow) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus.index": {"param": {"self": {"Focus": [[645, "    def index(self) -> typing.Optional[int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.focus_prev": {"var": {"idx": {"?": [[274, "            idx = self.focus.index - 1"]]}}, "param": {"self": {"View": [[269, "    def focus_prev(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings": {"func": {"__iter__": {"Settings -> ?": [[686, "    def __iter__(self) -> typing.Iterator:"]]}, "__getitem__": {"(Settings, ?) -> None": [[692, "    def __getitem__(self, f: mitmproxy.flow.Flow) -> dict:"]]}, "__len__": {"Settings -> int": [[689, "    def __len__(self) -> int:"]]}, "__init__": {"? -> ?": [[680, "    def __init__(self, view: View) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings.__iter__": {"param": {"self": {"Settings": [[686, "    def __iter__(self) -> typing.Iterator:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.OrderRequestS": {"func": {"generate": {"(OrderRequestStart, ?) -> ? / (OrderRequestStart, None) -> ?": [[74, "    def generate(self, f: mitmproxy.flow.Flow) -> float:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.resum": {"param": {"self": {"View": [[572, "    def resume(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.tcp_start": {"param": {"self": {"View": [[578, "    def tcp_start(self, f):"]]}, "f": {"?": [[578, "    def tcp_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.OrderRequestMethod": {"func": {"generate": {"(OrderRequestMethod, ?) -> {? -> ? | str}": [[79, "    def generate(self, f: mitmproxy.flow.Flow) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view._OrderKey._key": {"param": {"self": {"{OrderRequestStart | _OrderKey}": [[57, "    def _key(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view._OrderKey": {"func": {"__call__": {"(_OrderKey, ?) -> None": [[60, "    def __call__(self, f):"]]}, "refresh": {"(_OrderKey, ?) -> None / (OrderRequestStart, None) -> None / (OrderRequestStart, ?) -> None": [[47, "    def refresh(self, f):"]]}, "generate": {"(_OrderKey, ?) -> None": [[44, "    def generate(self, f: mitmproxy.flow.Flow) -> typing.Any:  # pragma: no cover"]]}, "__init__": {"? -> ?": [[41, "    def __init__(self, view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.configur": {"param": {"self": {"View": [[539, "    def configure(self, updated):"]]}, "updated": {"?": [[539, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.setval": {"var": {"updated": {"[?]": [[395, "        updated = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.intercept": {"param": {"self": {"View": [[569, "    def intercept(self, f):"]]}, "f": {"None": [[569, "    def intercept(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.g": {"var": {"offset": {"int": [[249, "            offset = len(self) + offset"], [251, "            offset = 0"], [253, "            offset = len(self) - 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.add": {"var": {"f": {"{HTTPFlow | None}": [[492, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.OrderRequestURL": {"func": {"generate": {"(OrderRequestURL, ?) -> {? -> ? | str}": [[89, "    def generate(self, f: mitmproxy.flow.Flow) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.set_order": {"var": {"newview": {"?": [[304, "        newview = sortedcontainers.SortedListWithKey(key=order_key)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.tcp_error": {"param": {"self": {"View": [[584, "    def tcp_error(self, f):"]]}, "f": {"?": [[584, "    def tcp_error(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View._bisect": {"var": {"v": {"?": [[211, "        v = self._view.bisect_right(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.load": {"param": {"self": {"View": [[167, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.get_marked": {"param": {"self": {"View": [[517, "    def get_marked(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.tcp_messag": {"param": {"self": {"View": [[581, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.order_option": {"param": {"self": {"View": [[282, "    def order_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.setvalue": {"var": {"flows": {"[?]": [[389, "        flows: typing.Sequence[mitmproxy.flow.Flow],"]]}, "f": {"?": [[396, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view._OrderKey.__call__": {"var": {"k": {"?": [[62, "            k = self._key()"]]}, "s": {"?": [[63, "            s = self.view.settings[f]"]]}, "val": {"None": [[66, "            val = self.generate(f)"]]}}, "param": {"self": {"_OrderKey": [[60, "    def __call__(self, f):"]]}, "f": {"?": [[60, "    def __call__(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus._sig_view_add": {"param": {"self": {"Focus": [[673, "    def _sig_view_add(self, view, flow):"]]}, "flow": {"?": [[673, "    def _sig_view_add(self, view, flow):"]]}, "view": {"?": [[673, "    def _sig_view_add(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.toggle_marked": {"param": {"self": {"View": [[524, "    def toggle_marked(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focu": {"func": {"_sig_view_remove": {"(Focus, ?, ?, ?) -> None": [[659, "    def _sig_view_remove(self, view, flow, index):"]]}, "_sig_view_add": {"(Focus, ?, ?) -> None": [[673, "    def _sig_view_add(self, view, flow):"]]}, "_nearest": {"(Focus, ?, ?) -> int / (Focus, {? -> ? | HTTPFlow | None}, ?) -> int": [[656, "    def _nearest(self, f, v):"]]}, "_sig_view_refresh": {"(Focus, ?) -> None": [[665, "    def _sig_view_refresh(self, view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.clear": {"param": {"self": {"View": [[340, "    def clear(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.request": {"param": {"self": {"View": [[560, "    def request(self, f):"]]}, "f": {"None": [[560, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings._sig_store_remove": {"param": {"flow": {"?": [[697, "    def _sig_store_remove(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view": {"var": {"matchall": {"None": [[116, "matchall = flowfilter.parse(\"~http | ~tcp\")"]]}, "orders": {"[(str, str)]": [[118, "orders = ["]]}}, "class": {"OrderRequestURL": {"<OrderRequestURL>": [[88, "class OrderRequestURL(_OrderKey):"]]}, "OrderRequestMethod": {"<OrderRequestMethod>": [[78, "class OrderRequestMethod(_OrderKey):"]]}, "Settings": {"<Settings>": [[679, "class Settings(collections.abc.Mapping):"]]}, "OrderRequestStart": {"<OrderRequestStart>": [[73, "class OrderRequestStart(_OrderKey):"]]}, "_OrderKey": {"<_OrderKey>": [[40, "class _OrderKey:"]]}, "Focus": {"<Focus>": [[619, "class Focus:"]]}, "OrderKeySize": {"<OrderKeySize>": [[98, "class OrderKeySize(_OrderKey):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus._sig_view_remov": {"param": {"index": {"?": [[659, "    def _sig_view_remove(self, view, flow, index):"]]}, "self": {"Focus": [[659, "    def _sig_view_remove(self, view, flow, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Settings._sig_store_remov": {"param": {"self": {"Settings": [[697, "    def _sig_store_remove(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus._sig_view_refresh": {"param": {"self": {"Focus": [[665, "    def _sig_view_refresh(self, view):"]]}, "view": {"?": [[665, "    def _sig_view_refresh(self, view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.focus_next": {"var": {"idx": {"?": [[262, "            idx = self.focus.index + 1"]]}}, "param": {"self": {"View": [[257, "    def focus_next(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View": {"param": {"loader": {"?": [[167, "    def load(self, loader):"]]}}, "func": {"load": {"(View, ?) -> None": [[167, "    def load(self, loader):"]]}, "_bisect": {"(View, ?) -> int": [[210, "    def _bisect(self, f: mitmproxy.flow.Flow) -> int:"]]}, "_rev": {"(View, int) -> int / (View, ?) -> int": [[189, "    def _rev(self, idx: int) -> int:"]]}, "set_order": {"(View, str) -> None / (View, ?) -> None": [[294, "    def set_order(self, order_key: str) -> None:"]]}, "toggle_marked": {"View -> None": [[524, "    def toggle_marked(self) -> None:"]]}, "getvalue": {"(View, ?, str, str) -> None / (View, ?, ?, ?) -> None": [[363, "    def getvalue(self, flow: mitmproxy.flow.Flow, key: str, default: str) -> str:"]]}, "get_order": {"View -> {<list> | str}": [[309, "    def get_order(self) -> str:"]]}, "kill": {"(View, ?) -> None / (View, None) -> None": [[575, "    def kill(self, f):"]]}, "_refilter": {"View -> None": [[227, "    def _refilter(self):"]]}, "go": {"(View, int) -> None / (View, ?) -> None": [[240, "    def go(self, offset: int) -> None:"]]}, "setvalue_toggle": {"(View, ?, ?) -> None / (View, [?], str) -> None": [[370, "    def setvalue_toggle("]]}, "__init__": {"? -> ?": [[127, "    def __init__(self):"]]}, "index": {"(View, ?, int, None) -> int / (View, {? -> ? | HTTPFlow | None}, int, None) -> int": [[214, "    def index(self, f: mitmproxy.flow.Flow, start: int = 0, stop: typing.Optional[int] = None) -> int:"]]}, "tcp_error": {"(View, ?) -> None": [[584, "    def tcp_error(self, f):"]]}, "__contains__": {"(View, ?) -> ?": [[217, "    def __contains__(self, f: typing.Any) -> bool:"]]}, "tcp_start": {"(View, ?) -> None": [[578, "    def tcp_start(self, f):"]]}, "focus_prev": {"View -> None": [[269, "    def focus_prev(self) -> None:"]]}, "add": {"(View, [?]) -> None / (View, ?) -> None / (View, [None]) -> None / (View, [HTTPFlow]) -> None": [[487, "    def add(self, flows: typing.Sequence[mitmproxy.flow.Flow]) -> None:"]]}, "duplicate": {"(View, ?) -> None / (View, [?]) -> None": [[403, "    def duplicate(self, flows: typing.Sequence[mitmproxy.flow.Flow]) -> None:"]]}, "_order_key_name": {"View -> ?": [[220, "    def _order_key_name(self):"]]}, "get_by_id": {"(View, str) -> None / (View, ?) -> None": [[501, "    def get_by_id(self, flow_id: str) -> typing.Optional[mitmproxy.flow.Flow]:"]]}, "order_options": {"View -> list": [[282, "    def order_options(self) -> typing.Sequence[str]:"]]}, "load_file": {"(View, ?) -> ? / (View, str) -> ?": [[471, "    def load_file(self, path: mitmproxy.types.Path) -> None:"]]}, "__len__": {"View -> int": [[202, "    def __len__(self):"]]}, "set_filter": {"(View, ?) -> None / (View, None) -> None": [[334, "    def set_filter(self, flt: typing.Optional[flowfilter.TFilter]):"]]}, "get_length": {"View -> int": [[510, "    def get_length(self) -> int:"]]}, "configure": {"(View, ?) -> None": [[539, "    def configure(self, updated):"]]}, "__getitem__": {"(View, ?) -> ?": [[205, "    def __getitem__(self, offset) -> typing.Any:"]]}, "resume": {"(View, ?) -> None / (View, None) -> None": [[572, "    def resume(self, f):"]]}, "clear_not_marked": {"View -> None": [[350, "    def clear_not_marked(self) -> None:"]]}, "_base_add": {"(View, HTTPFlow) -> None / (View, None) -> None / (View, ?) -> None": [[223, "    def _base_add(self, f):"]]}, "update": {"(View, ?) -> ? / (View, [None]) -> ? / (View, [?]) -> ?": [[590, "    def update(self, flows: typing.Sequence[mitmproxy.flow.Flow]) -> None:"]]}, "resolve": {"(View, ?) -> {[?] | [{? -> ? | HTTPFlow | None}]}": [[435, "    def resolve(self, flow_spec: str) -> typing.Sequence[mitmproxy.flow.Flow]:"]]}, "get_marked": {"View -> None": [[517, "    def get_marked(self) -> bool:"]]}, "inbounds": {"(View, ?) -> bool / (View, int) -> bool": [[532, "    def inbounds(self, index: int) -> bool:"]]}, "response": {"(View, ?) -> None / (View, None) -> None": [[566, "    def response(self, f):"]]}, "store_count": {"View -> int": [[186, "    def store_count(self):"]]}, "setvalue": {"(View, [?], str, str) -> None / (View, ?, ?, ?) -> None": [[387, "    def setvalue("]]}, "set_reversed": {"(View, ?) -> None": [[289, "    def set_reversed(self, boolean: bool) -> None:"]]}, "set_filter_cmd": {"(View, str) -> None / (View, ?) -> None": [[321, "    def set_filter_cmd(self, filter_expr: str) -> None:"]]}, "clear": {"View -> None": [[340, "    def clear(self) -> None:"]]}, "request": {"(View, ?) -> None / (View, None) -> None": [[560, "    def request(self, f):"]]}, "remove": {"(View, [None]) -> None / (View, [?]) -> None / (View, ?) -> None": [[415, "    def remove(self, flows: typing.Sequence[mitmproxy.flow.Flow]) -> None:"]]}, "focus_next": {"View -> None": [[257, "    def focus_next(self) -> None:"]]}, "intercept": {"(View, ?) -> None / (View, None) -> None": [[569, "    def intercept(self, f):"]]}, "tcp_message": {"(View, ?) -> None": [[581, "    def tcp_message(self, f):"]]}, "error": {"(View, ?) -> None / (View, None) -> None": [[563, "    def error(self, f):"]]}, "tcp_end": {"(View, ?) -> None": [[587, "    def tcp_end(self, f):"]]}, "create": {"(View, str, str) -> ? / (View, ?, ?) -> ?": [[458, "    def create(self, method: str, url: str) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.__init__": {"param": {"self": {"View": [[127, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.error": {"param": {"self": {"View": [[563, "    def error(self, f):"]]}, "f": {"None": [[563, "    def error(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.__len__": {"param": {"self": {"View": [[202, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.tcp_end": {"param": {"self": {"View": [[587, "    def tcp_end(self, f):"]]}, "f": {"?": [[587, "    def tcp_end(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.get_order": {"var": {"k": {"<list>": [[314, "        for k in self.orders.keys():"]]}}, "param": {"self": {"View": [[309, "    def get_order(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus._sig_view_remove": {"param": {"flow": {"?": [[659, "    def _sig_view_remove(self, view, flow, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.OrderKeySize.generat": {"var": {"message": {"?": [[109, "            for message in f.messages:"]]}, "size": {"int": [[101, "            size = 0"], [108, "            size = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.create": {"var": {"c": {"ClientConnection": [[463, "        c = connections.ClientConnection.make_dummy((\"\", 0))"]]}, "s": {"ServerConnection": [[464, "        s = connections.ServerConnection.make_dummy((req.host, req.port))"]]}, "f": {"HTTPFlow": [[465, "        f = http.HTTPFlow(c, s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.response": {"param": {"f": {"None": [[566, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.setvalu": {"var": {"self": {"View": [[388, "        self,"]]}, "key": {"str": [[390, "        key: str, value: str"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.store_count": {"param": {"self": {"View": [[186, "    def store_count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.v": {"class": {"View": {"<View>": [[126, "class View(collections.abc.Sequence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.load_file": {"var": {"i": {"?": [[477, "                for i in io.FlowReader(f).stream():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus._nearest": {"param": {"self": {"Focus": [[656, "    def _nearest(self, f, v):"]]}, "v": {"?": [[656, "    def _nearest(self, f, v):"]]}, "f": {"{? -> ? | HTTPFlow | None}": [[656, "    def _nearest(self, f, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.kill": {"param": {"f": {"None": [[575, "    def kill(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view._OrderKey.__init__": {"param": {"self": {"{OrderKeySize | OrderRequestMethod | OrderRequestStart | OrderRequestURL | _OrderKey}": [[41, "    def __init__(self, view):"]]}, "view": {"View": [[41, "    def __init__(self, view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.creat": {"var": {"req": {"Request": [[460, "            req = http.HTTPRequest.make(method.upper(), url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.ki": {"param": {"self": {"View": [[575, "    def kill(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.get_length": {"param": {"self": {"View": [[510, "    def get_length(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.setvalue_toggle": {"var": {"flows": {"[?]": [[372, "        flows: typing.Sequence[mitmproxy.flow.Flow],"]]}, "f": {"?": [[380, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View.remove": {"var": {"idx": {"?": [[426, "                    idx = self._view.index(f)"]]}, "f": {"None": [[419, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View._base_add": {"param": {"self": {"View": [[223, "    def _base_add(self, f):"]]}, "f": {"{HTTPFlow | None}": [[223, "    def _base_add(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.Focus.flow": {"param": {"self": {"Focus": [[634, "    def flow(self) -> typing.Optional[mitmproxy.flow.Flow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.view.View._order_key_nam": {"param": {"self": {"View": [[220, "    def _order_key_name(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/remote-debug.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.remote-debug.load": {"param": {"l": {"?": [[19, "def load(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.remote-debug": {"func": {"load": {"? -> None": [[19, "def load(l):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_dumper.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.TestContentView.test_contentview": {"var": {"sio_err": {"?": [[170, "            sio_err = io.StringIO()"]]}, "sio": {"?": [[169, "            sio = io.StringIO()"]]}, "d": {"Dumper": [[171, "            d = dumper.Dumper(sio, sio_err)"]]}}, "param": {"self": {"TestContentView": [[166, "    async def test_contentview(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_tcp": {"var": {"sio_err": {"?": [[180, "    sio_err = io.StringIO()"]]}, "sio": {"?": [[179, "    sio = io.StringIO()"]]}, "d": {"Dumper": [[181, "    d = dumper.Dumper(sio, sio_err)"]]}, "f": {"?": [[184, "        f = tflow.ttcpflow()"], [189, "        f = tflow.ttcpflow(client_conn=True, err=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper": {"class": {"TestContentView": {"<TestContentView>": [[164, "class TestContentView:"]]}}, "func": {"test_echo_body": {"() -> None": [[116, "def test_echo_body():"]]}, "test_simple": {"() -> None": [[33, "def test_simple():"]]}, "test_tcp": {"() -> None": [[178, "def test_tcp():"]]}, "test_websocket": {"() -> None": [[194, "def test_websocket():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_configure": {"var": {"d": {"Dumper": [[16, "    d = dumper.Dumper()"]]}, "f": {"?": [[21, "        f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dump": {"func": {"test_echo_request_line": {"() -> None": [[131, "def test_echo_request_line():"]]}, "test_configure": {"() -> None": [[15, "def test_configure():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_simpl": {"var": {"sio_err": {"?": [[35, "    sio_err = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_echo_request_lin": {"var": {"sio_err": {"?": [[133, "    sio_err = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_echo_body": {"var": {"sio_err": {"?": [[122, "    sio_err = io.StringIO()"]]}, "t": {"?": [[127, "        t = sio.getvalue()"]]}, "sio": {"?": [[121, "    sio = io.StringIO()"]]}, "d": {"Dumper": [[123, "    d = dumper.Dumper(sio, sio_err)"]]}, "f": {"?": [[117, "    f = tflow.tflow(client_conn=True, server_conn=True, resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_websocket": {"var": {"sio_err": {"?": [[196, "    sio_err = io.StringIO()"]]}, "sio": {"?": [[195, "    sio = io.StringIO()"]]}, "d": {"Dumper": [[197, "    d = dumper.Dumper(sio, sio_err)"]]}, "f": {"?": [[200, "        f = tflow.twebsocketflow()"], [208, "        f = tflow.twebsocketflow(client_conn=True, err=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_echo_request_": {"var": {"terminalWidth": {"int": [[157, "        terminalWidth = max(shutil.get_terminal_size()[0] - 25, 50)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_echo_request_line": {"var": {"sio": {"?": [[132, "    sio = io.StringIO()"]]}, "d": {"Dumper": [[134, "    d = dumper.Dumper(sio, sio_err)"]]}, "f": {"?": [[137, "        f = tflow.tflow(client_conn=None, server_conn=True, resp=True)"], [143, "        f = tflow.tflow(client_conn=None, server_conn=True, resp=True)"], [149, "        f = tflow.tflow(client_conn=None, server_conn=True, resp=True)"], [156, "        f = tflow.tflow(client_conn=None, server_conn=True, resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_dumper.test_simple": {"var": {"flow": {"?": [[81, "        flow = tflow.tflow()"], [95, "        flow = tflow.tflow(resp=tutils.tresp(content=b\"{\"))"], [105, "        flow = tflow.tflow()"]]}, "sio": {"?": [[34, "    sio = io.StringIO()"]]}, "d": {"Dumper": [[36, "    d = dumper.Dumper(sio, sio_err)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_fuzzing.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy.test_idna_err": {"var": {"p": {"?": [[13, "        p = self.pathoc()"]]}}, "param": {"self": {"TestFuzzy": [[11, "    def test_idna_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing": {"class": {"TestFuzzy": {"<TestFuzzy>": [[9, "class TestFuzzy(tservers.HTTPProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy.test_invalid_ipv6_ur": {"param": {"self": {"TestFuzzy": [[23, "    def test_invalid_ipv6_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy.test_nullbyt": {"param": {"self": {"TestFuzzy": [[17, "    def test_nullbytes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy": {"func": {"test_invalid_ipv6_url": {"TestFuzzy -> None": [[23, "    def test_invalid_ipv6_url(self):"]]}, "test_idna_err": {"TestFuzzy -> None": [[11, "    def test_idna_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy.test_nullbytes": {"var": {"p": {"?": [[19, "        p = self.pathoc()"]]}, "req": {"str": [[18, "        req = r'get:\"http://localhost:%s\":i19,\"\\x00\"'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy.test_idna_": {"var": {"req": {"str": [[12, "        req = r'get:\"http://localhost:%s\":i10,\"\\xc6\"'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzzy.test_invalid_ipv6_url": {"var": {"p": {"?": [[25, "        p = self.pathoc()"]]}, "resp": {"?": [[27, "            resp = p.request(req % self.server.port)"]]}, "req": {"str": [[24, "        req = 'get:\"http://localhost:%s\":i13,\"[\"'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_fuzzing.TestFuzz": {"func": {"test_nullbytes": {"TestFuzzy -> None": [[17, "    def test_nullbytes(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/hex.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.h": {"class": {"ViewHex": {"<ViewHex>": [[5, "class ViewHex(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.hex.ViewHex": {"var": {"name": {"str": [[6, "    name = \"Hex\""]]}}, "func": {"__call__": {"(ViewHex, ?) -> (str, None)": [[17, "    def __call__(self, data, **metadata):"]]}, "_format": {"? -> None": [[9, "    def _format(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.hex.ViewHex.__call__": {"param": {"self": {"ViewHex": [[17, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[17, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.hex.ViewHex._form": {"param": {"data": {"?": [[9, "    def _format(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.hex.ViewHex._forma": {"var": {"offset": {"?": [[10, "        for offset, hexa, s in strutils.hexdump(data):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/bench/serialization-bm.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.stream": {"param": {"self": {"StreamTester": [[70, "    async def stream(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-b": {"class": {"StreamTester": {"<StreamTester>": [[13, "class StreamTester:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.write": {"var": {"start": {"?": [[87, "            start = time.perf_counter()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester._log": {"param": {"self": {"StreamTester": [[50, "    def _log(self, msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester._fflush": {"var": {"n": {"int": [[109, "        n = len(self.hot_flows)"]]}}, "param": {"self": {"StreamTester": [[107, "    def _fflush(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTeste": {"func": {"running": {"StreamTester -> None": [[56, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester._lo": {"param": {"msg": {"None": [[50, "    def _log(self, msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester": {"func": {"load": {"(StreamTester, ?) -> None": [[36, "    def load(self, loader):"]]}, "_fflush": {"StreamTester -> int": [[107, "    def _fflush(self):"]]}, "__init__": {"? -> ?": [[20, "    def __init__(self):"]]}, "_log": {"(StreamTester, ?) -> None / (StreamTester, None) -> None": [[50, "    def _log(self, msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.__init__": {"param": {"self": {"StreamTester": [[20, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm": {"var": {"addons": {"[StreamTester]": [[114, "addons = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.writer": {"var": {"count": {"int": [[78, "            count = 1"]]}, "n": {"int": [[88, "            n = self._fflush()"]]}, "end": {"?": [[89, "            end = time.perf_counter()"]]}, "f": {"?": [[79, "            f = await self.queue.get()"]]}}, "param": {"self": {"StreamTester": [[75, "    async def writer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.running": {"var": {"tasks": {"(StreamTester -> None, StreamTester -> ?, StreamTester -> None)": [[67, "            tasks = (self.stream, self.writer, self.stats)"]]}}, "param": {"self": {"StreamTester": [[56, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTest": {"param": {"loader": {"?": [[36, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.load": {"param": {"self": {"StreamTester": [[36, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.serialization-bm.StreamTester.stat": {"param": {"self": {"StreamTester": [[96, "    async def stats(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/image/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image": {"var": {"__all__": {"[str]": [[3, "__all__ = [\"ViewImage\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/test_tls.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestTLSInvalid.test_alpn_error": {"param": {"self": {"TestTLSInvalid": [[63, "    def test_alpn_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretLogger": {"var": {"ssl": {"dict": [[25, "    ssl = dict("]]}}, "func": {"test_log": {"(TestMasterSecretLogger, ?) -> None": [[29, "    def test_log(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretLogger.test_create_logfun": {"param": {"self": {"TestMasterSecretLogger": [[50, "    def test_create_logfun(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretLogger.test_": {"var": {"logfile": {"str": [[33, "        logfile = str(tmpdir.join(\"foo\", \"bar\", \"logfile\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHell": {"func": {"test_extensions": {"TestClientHello -> None": [[109, "    def test_extensions(self):"]]}, "test_no_extensions": {"TestClientHello -> None": [[101, "    def test_no_extensions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHello.test_no_extension": {"param": {"self": {"TestClientHello": [[101, "    def test_no_extensions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.test_get_client_hello": {"var": {"rfile": {"?": [[82, "    rfile = io.BufferedReader(io.BytesIO("], [87, "    rfile = io.BufferedReader(io.BytesIO("], [93, "    rfile = io.BufferedReader(io.BytesIO("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tl": {"class": {"TestMasterSecretLogger": {"<TestMasterSecretLogger>": [[23, "class TestMasterSecretLogger(tservers.ServerTestBase):"]]}}, "func": {"test_is_record_magic": {"() -> None": [[71, "def test_is_record_magic():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretL": {"func": {"test_create_logfun": {"TestMasterSecretLogger -> None": [[50, "    def test_create_logfun(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHello.test_from_fi": {"param": {"self": {"TestClientHello": [[139, "    def test_from_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestTLSI": {"func": {"test_invalid_ssl_method_should_fail": {"TestTLSInvalid -> None": [[58, "    def test_invalid_ssl_method_should_fail(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretLogg": {"var": {"handler": {"<EchoHandler>": [[24, "    handler = EchoHandler"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHello.test_no_extensions": {"var": {"c": {"ClientHello": [[102, "        c = tls.ClientHello(CLIENT_HELLO_NO_EXTENSIONS)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHello.test_extension": {"param": {"self": {"TestClientHello": [[109, "    def test_extensions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHello.test_from_": {"var": {"rfile": {"?": [[140, "        rfile = io.BufferedReader(io.BytesIO("], [145, "        rfile = io.BufferedReader(io.BytesIO("], [151, "        rfile = io.BufferedReader(io.BytesIO("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientH": {"func": {"test_from_file": {"TestClientHello -> None": [[139, "    def test_from_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls": {"var": {"CLIENT_HELLO_NO_EXTENSIONS": {"?": [[11, "CLIENT_HELLO_NO_EXTENSIONS = bytes.fromhex("]]}, "FULL_CLIENT_HELLO_NO_EXTENSIONS": {"str": [[16, "FULL_CLIENT_HELLO_NO_EXTENSIONS = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy": {"func": {"test_get_client_hello": {"() -> None": [[81, "def test_get_client_hello():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_": {"class": {"TestClientHello": {"<TestClientHello>": [[100, "class TestClientHello:"]]}, "TestTLSInvalid": {"<TestTLSInvalid>": [[57, "class TestTLSInvalid:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestTLSInvalid": {"func": {"test_alpn_error": {"TestTLSInvalid -> None": [[63, "    def test_alpn_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestClientHello.test_extensions": {"var": {"c": {"ClientHello": [[117, "        c = tls.ClientHello(data)"]]}, "data": {"?": [[110, "        data = bytes.fromhex("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretLogger.test_log": {"var": {"c": {"TCPClient": [[36, "        c = TCPClient((\"127.0.0.1\", self.port))"]]}, "testval": {"str": [[30, "        testval = b\"echo!\\n\""]]}}, "param": {"self": {"TestMasterSecretLogger": [[29, "    def test_log(self, tmpdir):"]]}, "tmpdir": {"?": [[29, "    def test_log(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestTLSInvalid.test_invalid_ssl_method_should_fai": {"var": {"fake_ssl_method": {"int": [[59, "        fake_ssl_method = 100500"]]}}, "param": {"self": {"TestTLSInvalid": [[58, "    def test_invalid_ssl_method_should_fail(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_tls.TestMasterSecretLogger.test": {"var": {"_logfun": {"MasterSecretLogger": [[31, "        _logfun = tls.log_master_secret"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/modifyheaders.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.parse_modify_": {"var": {"spec": {"ModifySpec": [[81, "    spec = ModifySpec(flow_filter, subject, replacement)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyS": {"func": {"read_replacement": {"ModifySpec -> None": [[17, "    def read_replacement(self) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifySpec.read_replacement": {"param": {"self": {"ModifySpec": [[17, "    def read_replacement(self) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders._match_a": {"param": {"flow": {"?": [[32, "def _match_all(flow) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.configure": {"var": {"option": {"?": [[108, "            for option in ctx.options.modify_headers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.ru": {"var": {"replacement": {"?": [[133, "                    replacement = spec.read_replacement()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.parse_modify_sp": {"var": {"subject": {"None": [[74, "    subject = strutils.escaped_str_to_bytes(subject)"]], "str": [[65, "        subject, replacement = parts"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.configur": {"var": {"spec": {"ModifySpec": [[110, "                    spec = parse_modify_spec(option, False)"]]}}, "param": {"self": {"ModifyHeaders": [[105, "    def configure(self, updated):"]]}, "updated": {"?": [[105, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders": {"class": {"ModifySpec": {"<ModifySpec>": [[12, "class ModifySpec(typing.NamedTuple):"]]}}, "func": {"_match_all": {"? -> ?": [[32, "def _match_all(flow) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.run": {"var": {"spec": {"?": [[125, "        for spec in self.replacements:"], [130, "        for spec in self.replacements:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyh": {"class": {"ModifyHeaders": {"<ModifyHeaders>": [[91, "class ModifyHeaders:"]]}}, "func": {"parse_modify_spec": {"(?, ?) -> ModifySpec / (str, ?) -> ModifySpec": [[36, "def parse_modify_spec(option, subject_is_regex: bool) -> ModifySpec:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.request": {"param": {"self": {"ModifyHeaders": [[115, "    def request(self, flow):"]]}, "flow": {"?": [[115, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.response": {"param": {"flow": {"?": [[119, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.parse_modify_spec": {"var": {"parts": {"[str]": [[62, "    parts = rem.split(sep, 2)"]]}, "flow_filter_pattern": {"str": [[67, "        flow_filter_pattern, subject, replacement = parts"]]}, "flow_filter": {"? -> ?": [[64, "        flow_filter = _match_all"]], "None": [[68, "        flow_filter = flowfilter.parse(flow_filter_pattern)  # type: ignore"]]}, "sep": {"str": [[61, "    sep, rem = option[0], option[1:]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders": {"param": {"loader": {"?": [[95, "    def load(self, loader):"]]}}, "func": {"load": {"(ModifyHeaders, ?) -> None": [[95, "    def load(self, loader):"]]}, "run": {"(ModifyHeaders, ?, ?) -> ?": [[123, "    def run(self, flow: http.HTTPFlow, hdrs: Headers) -> None:"]]}, "configure": {"(ModifyHeaders, ?) -> ?": [[105, "    def configure(self, updated):"]]}, "__init__": {"? -> ?": [[92, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.__init__": {"param": {"self": {"ModifyHeaders": [[92, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.respon": {"param": {"self": {"ModifyHeaders": [[119, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHeaders.load": {"param": {"self": {"ModifyHeaders": [[95, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.modifyheaders.ModifyHead": {"func": {"request": {"(ModifyHeaders, ?) -> None": [[115, "    def request(self, flow):"]]}, "response": {"(ModifyHeaders, ?) -> None": [[119, "    def response(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/consoleaddons.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.grideditor_editor": {"param": {"self": {"ConsoleAddon": [[536, "    def grideditor_editor(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.flowview_mode_set": {"var": {"idx": {"?": [[551, "        idx = fv.body.tab_offset"]]}, "fv": {"?": [[548, "        fv = self.master.window.current_window(\"flowview\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.flowview_mode": {"var": {"idx": {"?": [[579, "        idx = fv.body.tab_offset"]]}, "fv": {"?": [[576, "        fv = self.master.window.current_window(\"flowview\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_": {"var": {"choices": {"?": [[240, "            choices: typing.Sequence[str],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_unbind_focu": {"param": {"self": {"ConsoleAddon": [[634, "    def key_unbind_focus(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog": {"func": {"websocket_end": {"(UnsupportedLog, ?) -> None": [[56, "    def websocket_end(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.tcp_messag": {"var": {"direction": {"str": [[65, "        direction = \"->\" if message.from_client else \"<-\""]]}}, "param": {"self": {"UnsupportedLog": [[63, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_start": {"param": {"self": {"ConsoleAddon": [[167, "    def nav_start(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleadd": {"var": {"console_layouts": {"[str]": [[32, "console_layouts = ["]]}, "console_flowlist_layout": {"[str]": [[38, "console_flowlist_layout = ["]]}, "console_palettes": {"[str]": [[18, "console_palettes = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.view_eventlog": {"param": {"self": {"ConsoleAddon": [[328, "    def view_eventlog(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_bind": {"var": {"contexts": {"?": [[596, "            contexts: typing.Sequence[str],"]]}, "self": {"ConsoleAddon": [[595, "            self,"]]}, "key": {"?": [[597, "            key: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.panes_next": {"param": {"self": {"ConsoleAddon": [[150, "    def panes_next(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.websocket_end": {"param": {"self": {"UnsupportedLog": [[56, "    def websocket_end(self, f):"]]}, "f": {"?": [[56, "    def websocket_end(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_choose_cmd": {"var": {"self": {"ConsoleAddon": [[264, "            self,"]]}, "prompt": {"?": [[265, "            prompt: str,"]]}, "choices": {"?": [[275, "        choices = ctx.master.commands.execute(choicecmd)"]]}}, "func": {"callback": {"Chooser -> ?": [[277, "        def callback(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.updat": {"param": {"self": {"ConsoleAddon": [[668, "    def update(self, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon._keyfocus": {"var": {"kwidget": {"?": [[625, "        kwidget = self.master.window.current(\"keybindings\")"]]}, "f": {"?": [[628, "        f = kwidget.get_focused_binding()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.websocket_message": {"param": {"f": {"?": [[50, "    def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_choo": {"var": {"self": {"ConsoleAddon": [[238, "            self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.running": {"param": {"self": {"ConsoleAddon": [[665, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedL": {"func": {"websocket_message": {"(UnsupportedLog, ?) -> None": [[50, "    def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.ed": {"var": {"focus_options": {"[str]": [[392, "            focus_options = [\"tcp-message\"]"], [394, "            focus_options = ["]], "[?]": [[389, "        focus_options = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_end": {"param": {"self": {"ConsoleAddon": [[174, "    def nav_end(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.websocket_": {"var": {"message": {"?": [[51, "        message = f.messages[-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_left": {"param": {"self": {"ConsoleAddon": [[223, "    def nav_left(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_pagedown": {"param": {"self": {"ConsoleAddon": [[216, "    def nav_pagedown(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.edit_focu": {"var": {"message": {"?": [[448, "                message = flow.request"], [450, "                message = flow.response"], [472, "            message = flow.messages[-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.websocket_messag": {"param": {"self": {"UnsupportedLog": [[50, "    def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddo": {"func": {"nav_start": {"ConsoleAddon -> None": [[167, "    def nav_start(self) -> None:"]]}, "key_bind": {"(ConsoleAddon, ?, ?, ?) -> ?": [[594, "    def key_bind("]]}, "nav_left": {"ConsoleAddon -> None": [[223, "    def nav_left(self) -> None:"]]}, "nav_up": {"ConsoleAddon -> None": [[195, "    def nav_up(self) -> None:"]]}, "key_unbind": {"(ConsoleAddon, ?, ?) -> ?": [[615, "    def key_unbind(self, contexts: typing.Sequence[str], key: str) -> None:"]]}, "nav_end": {"ConsoleAddon -> None": [[174, "    def nav_end(self) -> None:"]]}, "panes_next": {"ConsoleAddon -> None": [[150, "    def panes_next(self) -> None:"]]}, "running": {"ConsoleAddon -> None": [[665, "    def running(self):"]]}, "nav_right": {"ConsoleAddon -> None": [[230, "    def nav_right(self) -> None:"]]}, "nav_select": {"ConsoleAddon -> None": [[188, "    def nav_select(self) -> None:"]]}, "nav_next": {"ConsoleAddon -> None": [[181, "    def nav_next(self) -> None:"]]}, "nav_pageup": {"ConsoleAddon -> None": [[209, "    def nav_pageup(self) -> None:"]]}, "__init__": {"? -> ?": [[82, "    def __init__(self, master):"]]}, "view_keybindings": {"ConsoleAddon -> None": [[313, "    def view_keybindings(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_command_s": {"var": {"option_value": {"str": [[304, "        option_value = getattr(self.master.options, option_name, None) or \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.grideditor_delet": {"param": {"self": {"ConsoleAddon": [[497, "    def grideditor_delete(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_pageup": {"param": {"self": {"ConsoleAddon": [[209, "    def nav_pageup(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon": {"param": {"loader": {"?": [[86, "    def load(self, loader):"]]}}, "func": {"load": {"(ConsoleAddon, ?) -> None": [[86, "    def load(self, loader):"]]}, "grideditor_load": {"(ConsoleAddon, ?) -> None": [[504, "    def grideditor_load(self, path: mitmproxy.types.Path) -> None:"]]}, "grideditor_add": {"ConsoleAddon -> None": [[483, "    def grideditor_add(self) -> None:"]]}, "view_pop": {"ConsoleAddon -> None": [[351, "    def view_pop(self) -> None:"]]}, "_keyfocus": {"ConsoleAddon -> None": [[624, "    def _keyfocus(self):"]]}, "key_edit_focus": {"ConsoleAddon -> None": [[653, "    def key_edit_focus(self) -> None:"]]}, "key_execute_focus": {"ConsoleAddon -> None": [[645, "    def key_execute_focus(self) -> None:"]]}, "grideditor_save": {"(ConsoleAddon, ?) -> ?": [[519, "    def grideditor_save(self, path: mitmproxy.types.Path) -> None:"]]}, "grideditor_editor": {"ConsoleAddon -> None": [[536, "    def grideditor_editor(self) -> None:"]]}, "layout_cycle": {"ConsoleAddon -> None": [[139, "    def layout_cycle(self) -> None:"]]}, "bodyview": {"(ConsoleAddon, ?, ?) -> None": [[360, "    def bodyview(self, flow: flow.Flow, part: str) -> None:"]]}, "_grideditor": {"ConsoleAddon -> None": [[476, "    def _grideditor(self):"]]}, "grideditor_load_escaped": {"(ConsoleAddon, ?) -> None": [[511, "    def grideditor_load_escaped(self, path: mitmproxy.types.Path) -> None:"]]}, "exit": {"ConsoleAddon -> None": [[346, "    def exit(self) -> None:"]]}, "flowview_mode": {"ConsoleAddon -> None": [[572, "    def flowview_mode(self) -> str:"]]}, "view_help": {"ConsoleAddon -> None": [[333, "    def view_help(self) -> None:"]]}, "flowview_mode_set": {"(ConsoleAddon, ?) -> ?": [[544, "    def flowview_mode_set(self, mode: str) -> None:"]]}, "view_flow": {"(ConsoleAddon, ?) -> None": [[338, "    def view_flow(self, flow: flow.Flow) -> None:"]]}, "update": {"(ConsoleAddon, ?) -> None": [[668, "    def update(self, flows):"]]}, "grideditor_delete": {"ConsoleAddon -> None": [[497, "    def grideditor_delete(self) -> None:"]]}, "edit_focus": {"(ConsoleAddon, ?) -> None": [[415, "    def edit_focus(self, flow_part: str) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon._keyfocu": {"param": {"self": {"ConsoleAddon": [[624, "    def _keyfocus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.view_pop": {"param": {"self": {"ConsoleAddon": [[351, "    def view_pop(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_down": {"param": {"self": {"ConsoleAddon": [[202, "    def nav_down(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.flowview_mode_option": {"param": {"self": {"ConsoleAddon": [[565, "    def flowview_mode_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.grideditor_sav": {"var": {"writer": {"?": [[526, "                writer = csv.writer(fp)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_right": {"param": {"self": {"ConsoleAddon": [[230, "    def nav_right(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLo": {"func": {"tcp_message": {"(UnsupportedLog, ?) -> None": [[63, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.view_option": {"param": {"self": {"ConsoleAddon": [[323, "    def view_options(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.bodyview": {"var": {"content": {"?": [[371, "        content = fpart.get_content(strict=False)"]]}, "fpart": {"?": [[367, "        fpart = getattr(flow, part, None)"]]}, "t": {"?": [[370, "        t = fpart.headers.get(\"content-type\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.view_command": {"param": {"self": {"ConsoleAddon": [[318, "    def view_commands(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_bin": {"var": {"cmd": {"?": [[598, "            cmd: mitmproxy.types.Cmd,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_edit_focus": {"var": {"b": {"None": [[657, "        b = self._keyfocus()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_unbind_focus": {"var": {"b": {"None": [[638, "        b = self._keyfocus()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.tcp_": {"var": {"message": {"?": [[64, "        message = f.messages[-1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.update": {"var": {"f": {"?": [[671, "        for f in flows:"]]}}, "param": {"flows": {"?": [[668, "    def update(self, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_context": {"param": {"self": {"ConsoleAddon": [[587, "    def key_contexts(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.options_reset_current": {"var": {"fv": {"?": [[161, "        fv = self.master.window.current(\"options\")"]]}}, "param": {"self": {"ConsoleAddon": [[157, "    def options_reset_current(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_choose_cmd.callback": {"var": {"repl": {"[?]": [[279, "            repl = [arg.replace(\"{choice}\", opt) for arg in args]"]]}}, "param": {"opt": {"Chooser": [[277, "        def callback(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.edit_focus_option": {"param": {"self": {"ConsoleAddon": [[384, "    def edit_focus_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.view_keybinding": {"param": {"self": {"ConsoleAddon": [[313, "    def view_keybindings(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.__init__": {"param": {"self": {"ConsoleAddon": [[82, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[82, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_execute_focus": {"var": {"b": {"None": [[649, "        b = self._keyfocus()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.grideditor_add": {"param": {"self": {"ConsoleAddon": [[483, "    def grideditor_add(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.load": {"param": {"self": {"ConsoleAddon": [[86, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_choose": {"var": {"cmd": {"?": [[241, "            cmd: mitmproxy.types.Cmd,"]]}, "prompt": {"?": [[239, "            prompt: str,"]]}}, "func": {"callback": {"? -> ?": [[250, "        def callback(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_choose_": {"var": {"subcmd": {"?": [[267, "            subcmd: mitmproxy.types.Cmd,"]]}, "choicecmd": {"?": [[266, "            choicecmd: mitmproxy.types.Cmd,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.flowview_mod": {"param": {"self": {"ConsoleAddon": [[572, "    def flowview_mode(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.consol": {"var": {"set_command": {"None": [[305, "        set_command = f\"set {option_name} {option_value!r}\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_comman": {"var": {"quoted": {"str": [[294, "        quoted = \" \".join(command_lexer.quote(x) for x in command_str)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_command_set": {"var": {"cursor": {"int": [[306, "        cursor = len(set_command) - 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.console_choose.callback": {"var": {"repl": {"[?]": [[252, "            repl = [arg.replace(\"{choice}\", opt) for arg in args]"]]}}, "param": {"opt": {"?": [[250, "        def callback(opt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consolea": {"class": {"UnsupportedLog": {"<UnsupportedLog>": [[45, "class UnsupportedLog:"]]}, "ConsoleAddon": {"<ConsoleAddon>": [[76, "class ConsoleAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.view_help": {"param": {"self": {"ConsoleAddon": [[333, "    def view_help(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_edit_focu": {"param": {"self": {"ConsoleAddon": [[653, "    def key_edit_focus(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_next": {"param": {"self": {"ConsoleAddon": [[181, "    def nav_next(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.bodyview_option": {"param": {"self": {"ConsoleAddon": [[377, "    def bodyview_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAdd": {"param": {"layout_options": {"?": [[132, "    def layout_options(self) -> typing.Sequence[str]:"]]}}, "func": {"layout_options": {"ConsoleAddon -> [str]": [[132, "    def layout_options(self) -> typing.Sequence[str]:"]]}, "key_contexts": {"ConsoleAddon -> list": [[587, "    def key_contexts(self) -> typing.Sequence[str]:"]]}, "options_reset_current": {"ConsoleAddon -> None": [[157, "    def options_reset_current(self) -> None:"]]}, "view_options": {"ConsoleAddon -> None": [[323, "    def view_options(self) -> None:"]]}, "view_eventlog": {"ConsoleAddon -> None": [[328, "    def view_eventlog(self) -> None:"]]}, "console_choose": {"(ConsoleAddon, ?, ?, ?) -> None": [[237, "    def console_choose("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.layout_option": {"param": {"self": {"?": [[132, "    def layout_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.grideditor_save": {"var": {"rows": {"?": [[523, "        rows = self._grideditor().value"]]}, "row": {"?": [[527, "                for row in rows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.edit_foc": {"var": {"require_dummy_response": {"bool": [[426, "        require_dummy_response = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddon": {"var": {"view_orders": {"[str]": [[26, "view_orders = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.UnsupportedLog.tcp_message": {"param": {"f": {"?": [[63, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.layout_cycle": {"var": {"off": {"None": [[144, "        off = self.layout_options().index(ctx.options.console_layout)"]]}, "opts": {"[str]": [[143, "        opts = self.layout_options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.edit_focus_options": {"var": {"flow": {"?": [[388, "        flow = self.master.view.focus.flow"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_up": {"param": {"self": {"ConsoleAddon": [[195, "    def nav_up(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.layout_cyc": {"param": {"self": {"ConsoleAddon": [[139, "    def layout_cycle(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.key_execute_focu": {"param": {"self": {"ConsoleAddon": [[645, "    def key_execute_focus(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.exit": {"param": {"self": {"ConsoleAddon": [[346, "    def exit(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.grideditor_insert": {"param": {"self": {"ConsoleAddon": [[490, "    def grideditor_insert(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon._grideditor": {"var": {"gewidget": {"?": [[477, "        gewidget = self.master.window.current(\"grideditor\")"]]}}, "param": {"self": {"ConsoleAddon": [[476, "    def _grideditor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.nav_select": {"param": {"self": {"ConsoleAddon": [[188, "    def nav_select(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleAddon.edit_focus": {"var": {"url": {"?": [[462, "            url = flow.request.url.encode()"], [464, "            url = edited_url.rstrip(b\"\\n\")"]]}, "c": {"?": [[451, "            c = self.master.spawn_editor(message.get_content(strict=False) or b\"\")"], [473, "            c = self.master.spawn_editor(message.content or b\"\")"]]}, "flow": {"?": [[419, "        flow = self.master.view.focus.flow"]]}, "edited_url": {"?": [[463, "            edited_url = self.master.spawn_editor(url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.consoleaddons.ConsoleA": {"func": {"console_choose_cmd": {"(ConsoleAddon, ?, ?, ?) -> None": [[263, "    def console_choose_cmd("]]}, "console_command_set": {"(ConsoleAddon, ?) -> None": [[300, "    def console_command_set(self, option_name: str) -> None:"]]}, "edit_focus_options": {"ConsoleAddon -> {[?] | [str]}": [[384, "    def edit_focus_options(self) -> typing.Sequence[str]:"]]}, "nav_down": {"ConsoleAddon -> None": [[202, "    def nav_down(self) -> None:"]]}, "nav_pagedown": {"ConsoleAddon -> None": [[216, "    def nav_pagedown(self) -> None:"]]}, "bodyview_options": {"ConsoleAddon -> [str]": [[377, "    def bodyview_options(self) -> typing.Sequence[str]:"]]}, "grideditor_insert": {"ConsoleAddon -> None": [[490, "    def grideditor_insert(self) -> None:"]]}, "view_commands": {"ConsoleAddon -> None": [[318, "    def view_commands(self) -> None:"]]}, "key_unbind_focus": {"ConsoleAddon -> ?": [[634, "    def key_unbind_focus(self) -> None:"]]}, "console_command": {"ConsoleAddon -> None": [[290, "    def console_command(self, *command_str: str) -> None:"]]}, "flowview_mode_options": {"ConsoleAddon -> [?]": [[565, "    def flowview_mode_options(self) -> typing.Sequence[str]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/coretypes/serializable.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable.copy": {"var": {"state": {"{None | dict}": [[33, "        state = self.get_state()"]]}}, "param": {"self": {"{Cert | Child | Error | Request | Serializable | SerializableDummy | TAny | TDict | TList | TSerializableChild | TTuple}": [[32, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.s": {"class": {"Serializable": {"<Serializable>": [[5, "class Serializable(metaclass=abc.ABCMeta):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable.set_": {"param": {"state": {"?": [[26, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable.get_stat": {"param": {"self": {"Serializable": [[19, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable.set_stat": {"param": {"self": {"Serializable": [[26, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable.from_state": {"param": {"cls": {"<Serializable>": [[12, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializabl": {"func": {"from_state": {"(<Serializable>, None) -> None / (<Serializable>, ?) -> None": [[12, "    def from_state(cls, state):"]]}, "set_state": {"(Serializable, ?) -> None": [[26, "    def set_state(self, state):"]]}, "get_state": {"Serializable -> None": [[19, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable": {"func": {"copy": {"Error -> ? / Cert -> Cert / TDict -> TObject / TList -> TObject / SerializableDummy -> SerializableDummy / TSerializableChild -> TObject / Child -> TObject / TAny -> TObject / Serializable -> None / TTuple -> TObject": [[32, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.serializable.Serializable.from_": {"param": {"state": {"None": [[12, "    def from_state(cls, state):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/script/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.script": {"var": {"__all__": {"[str]": [[3, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/tls_passthrough.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.record_failur": {"param": {"self": {"_TlsStrategy": [[60, "    def record_failure(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy": {"func": {"record_failure": {"(_TlsStrategy, ?) -> None": [[60, "    def record_failure(self, server_address):"]]}, "record_skipped": {"(_TlsStrategy, ?) -> None": [[63, "    def record_skipped(self, server_address):"]]}, "should_intercept": {"(_TlsStrategy, ?) -> None": [[49, "    def should_intercept(self, server_address):"]]}, "__init__": {"? -> ?": [[45, "    def __init__(self):"]]}, "record_success": {"(_TlsStrategy, ?) -> None": [[57, "    def record_success(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.__init__": {"param": {"self": {"{ConservativeStrategy | _TlsStrategy}": [[45, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough": {"var": {"next_layer_replacement": {"RawTCPLayer": [[144, "            next_layer_replacement = RawTCPLayer(next_layer.ctx, ignore=True)"]]}, "tls_strategy": {"{ConservativeStrategy | ProbabilisticStrategy}": [[112, "tls_strategy = None"]]}}, "param": {"next_layer": {"?": [[129, "def next_layer(next_layer):"]]}}, "func": {"load": {"? -> None": [[115, "def load(l):"]]}, "configure": {"? -> None": [[121, "def configure(updated):"]]}, "next_layer": {"? -> None": [[129, "def next_layer(next_layer):"]]}}, "class": {"InterceptionResult": {"<InterceptionResult>": [[34, "class InterceptionResult(Enum):"]]}, "TlsFeedback": {"<TlsFeedback>": [[92, "class TlsFeedback(TlsLayer):"]]}, "ConservativeStrategy": {"<ConservativeStrategy>": [[67, "class ConservativeStrategy(_TlsStrategy):"]]}, "_TlsStrategy": {"<_TlsStrategy>": [[40, "class _TlsStrategy:"]]}, "ProbabilisticStrategy": {"<ProbabilisticStrategy>": [[79, "class ProbabilisticStrategy(_TlsStrategy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.ProbabilisticStrategy.should_intercept": {"param": {"self": {"ProbabilisticStrategy": [[88, "    def should_intercept(self, server_address):"]]}, "server_address": {"?": [[88, "    def should_intercept(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.TlsFeedback": {"func": {"_establish_tls_with_client": {"TlsFeedback -> ?": [[98, "    def _establish_tls_with_client(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.load": {"param": {"l": {"?": [[115, "def load(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.InterceptionResult": {"var": {"failure": {"bool": [[36, "    failure = False"]]}, "skipped": {"None": [[37, "    skipped = None"]]}, "success": {"bool": [[35, "    success = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.record_skipp": {"param": {"server_address": {"?": [[63, "    def record_skipped(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.ProbabilisticStrategy": {"func": {"should_intercept": {"(ProbabilisticStrategy, ?) -> bool": [[88, "    def should_intercept(self, server_address):"]]}, "__init__": {"? -> ?": [[84, "    def __init__(self, p):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.ConservativeStrategy": {"func": {"should_intercept": {"(ConservativeStrategy, ?) -> bool": [[73, "    def should_intercept(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.configur": {"param": {"updated": {"?": [[121, "def configure(updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.ConservativeStrategy.should_intercept": {"param": {"self": {"ConservativeStrategy": [[73, "    def should_intercept(self, server_address):"]]}, "server_address": {"?": [[73, "    def should_intercept(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.should_intercept": {"param": {"self": {"_TlsStrategy": [[49, "    def should_intercept(self, server_address):"]]}, "server_address": {"?": [[49, "    def should_intercept(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.record_succ": {"param": {"self": {"_TlsStrategy": [[57, "    def record_success(self, server_address):"]]}, "server_address": {"?": [[57, "    def record_success(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.next_lay": {"var": {"server_address": {"?": [[135, "        server_address = next_layer.server_conn.address"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.TlsFeedback._establish_tls_with_client": {"var": {"server_address": {"?": [[99, "        server_address = self.server_conn.address"]]}}, "param": {"self": {"TlsFeedback": [[98, "    def _establish_tls_with_client(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.record_skipped": {"param": {"self": {"_TlsStrategy": [[63, "    def record_skipped(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough._TlsStrategy.record_failu": {"param": {"server_address": {"?": [[60, "    def record_failure(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.tls_passthrough.ProbabilisticStrategy.__init__": {"param": {"p": {"float": [[84, "    def __init__(self, p):"]]}, "self": {"ProbabilisticStrategy": [[84, "    def __init__(self, p):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/dns_spoofing.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.dns_spoofing": {"var": {"parse_host_header": {"?": [[31, "parse_host_header = re.compile(r\"^(?P<host>[^:]+|\\[.+\\])(?::(?P<port>\\d+))?$\")"]]}, "addons": {"[Rerouter]": [[57, "addons = [Rerouter()]"]]}}, "class": {"Rerouter": {"<Rerouter>": [[34, "class Rerouter:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.dns_spoofing.Rero": {"func": {"request": {"(Rerouter, ?) -> None": [[35, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.dns_spoofing.Rerouter.requ": {"var": {"host_header": {"?": [[45, "        host_header = flow.request.host_header"], [48, "            host_header = m.group(\"host\").strip(\"[]\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.dns_spoofing.Rerouter.request": {"var": {"m": {"?": [[46, "        m = parse_host_header.match(host_header)"]]}, "sni": {"None": [[42, "            sni = None"]], "?": [[38, "            sni = flow.client_conn.connection.get_servername()"]]}}, "param": {"self": {"Rerouter": [[35, "    def request(self, flow):"]]}, "flow": {"?": [[35, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.dns_spoofing.Rerouter.reques": {"var": {"port": {"int": [[39, "            port = 443"], [43, "            port = 80"], [50, "                port = int(m.group(\"port\"))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/commander/commander.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandE": {"func": {"get_edit_text": {"CommandEdit -> str": [[254, "    def get_edit_text(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.keypre": {"var": {"pos": {"int": [[182, "            pos = self.cbuf.text.find(' ', self.cbuf.cursor + 1)"], [184, "                pos = len(self.cbuf.text)"]], "str": [[188, "            pos = self.cbuf.text.rfind(' ', 0, self.cbuf.cursor - 1)"]]}, "cursor_pos": {"int": [[191, "                cursor_pos = 0"]], "?": [[196, "                cursor_pos = prev_cursor - (prev_cursor - pos) + 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.ListCompleter.cyc": {"var": {"delta": {"int": [[39, "            delta = 1 if forward else -1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.updat": {"param": {"self": {"CommandEdit": [[238, "    def update(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.Completer": {"func": {"cycle": {"(Completer, ?) -> None": [[15, "    def cycle(self, forward: bool = True) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.rend": {"var": {"ret": {"[(str, str)]": [[77, "        ret = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuff": {"func": {"insert": {"(CommandBuffer, str) -> None / (CommandBuffer, ?) -> None": [[147, "    def insert(self, k: str) -> None:"]]}, "render": {"CommandBuffer -> [(str, str)]": [[75, "    def render(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.key": {"var": {"prev_cursor": {"{? -> ? | int | str}": [[187, "            prev_cursor = self.cbuf.cursor"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.render": {"var": {"canv": {"?": [[243, "        canv = self._w.render((maxcol,))"], [244, "        canv = urwid.CompositeCanvas(canv)"]]}}, "param": {"self": {"CommandEdit": [[241, "    def render(self, size, focus=False) -> urwid.Canvas:"]]}, "focus": {"?": [[241, "    def render(self, size, focus=False) -> urwid.Canvas:"]]}, "size": {"?": [[241, "    def render(self, size, focus=False) -> urwid.Canvas:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.delet": {"param": {"self": {"CommandBuffer": [[141, "    def delete(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.get_edit_text": {"param": {"self": {"CommandEdit": [[254, "    def get_edit_text(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.ListCompleter.__init__": {"var": {"start": {"{[str] | str}": [[22, "            start: str,"]]}, "self": {"ListCompleter": [[21, "            self,"]]}, "options": {"{[str] | str}": [[23, "            options: typing.Sequence[str],"]]}, "o": {"?": [[27, "        for o in options:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.backspac": {"param": {"self": {"CommandBuffer": [[134, "    def backspace(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEd": {"func": {"__init__": {"? -> ?": [[164, "    def __init__(self, master: mitmproxy.master.Master, text: str) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.right": {"param": {"self": {"CommandBuffer": [[103, "    def right(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.get_cursor_coord": {"var": {"trans": {"?": [[250, "        trans = self._w.get_line_translation(size[0])"]]}}, "param": {"self": {"CommandEdit": [[248, "    def get_cursor_coords(self, size) -> typing.Tuple[int, int]:"]]}, "size": {"?": [[248, "    def get_cursor_coords(self, size) -> typing.Tuple[int, int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.ListCompleter": {"func": {"__init__": {"? -> ?": [[20, "    def __init__("]]}, "cycle": {"(ListCompleter, ?) -> {[str] | str}": [[33, "    def cycle(self, forward: bool = True) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.cycle_completion": {"var": {"cycle_prefix": {"str": [[115, "                cycle_prefix = \"\""]], "?": [[111, "                cycle_prefix = parts[-1].value"]]}, "type_to_complete": {"?": [[110, "                type_to_complete = parts[-1].type"], [114, "                type_to_complete = remaining[0].type"]]}, "parts": {"?": [[108, "            parts, remaining = self.master.commands.parse_partial(self.text[:self.cursor])"]]}, "buf": {"str": [[130, "            buf = \"\".join([i.value for i in self.completion.parsed]) + nxt"]]}, "parsed": {"?": [[112, "                parsed = parts[:-1]"], [116, "                parsed = parts"]]}, "ct": {"{_ArgType | _BoolType | _ChoiceType | _CmdType | _CutSpecType | _DataType | _FlowType | _FlowsType | _IntType | _PathType | _StrSeqType | _StrType}": [[119, "            ct = mitmproxy.types.CommandTypes.get(type_to_complete, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.render": {"var": {"p": {"?": [[83, "            for p in parts:"]]}}, "param": {"self": {"CommandBuffer": [[75, "    def render(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.cycle_completio": {"var": {"nxt": {"?": [[129, "            nxt = self.completion.completer.cycle(forward)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.command": {"class": {"ListCompleter": {"<ListCompleter>": [[19, "class ListCompleter(Completer):"]]}, "Completer": {"<Completer>": [[13, "class Completer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander": {"class": {"CommandEdit": {"<CommandEdit>": [[161, "class CommandEdit(urwid.WidgetWrap):"]]}, "CompletionState": {"<CompletionState>": [[44, "class CompletionState(typing.NamedTuple):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.keypress": {"var": {"txt_before": {"str": [[194, "                txt_before = self.cbuf.text[0:pos]"]]}, "txt_after": {"str": [[193, "                txt_after = self.cbuf.text[self.cbuf.cursor:]"]]}, "cmd": {"?": [[214, "            cmd = self.master.commands.execute(\"commands.history.prev\")"], [218, "            cmd = self.master.commands.execute(\"commands.history.next\")"]]}, "new_text": {"None": [[195, "                new_text = f\"{txt_before} {txt_after}\""]], "str": [[190, "                new_text = self.cbuf.text[self.cbuf.cursor:]"]]}, "prev_cmd": {"str": [[217, "            prev_cmd = self.cbuf.text"]]}}, "param": {"key": {"str": [[172, "    def keypress(self, size, key) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.get_cursor_coords": {"var": {"p": {"?": [[249, "        p = self.cbuf.cursor + len(self.leader)"]]}, "x": {"?": [[251, "        x, y = calc_coords(self._w.get_text()[0], trans, p)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.rende": {"var": {"parts": {"?": [[76, "        parts, remaining = self.master.commands.parse_partial(self.text)"]]}, "param": {"?": [[95, "                for param in remaining:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit.keypr": {"param": {"self": {"CommandEdit": [[172, "    def keypress(self, size, key) -> None:"]]}, "size": {"int": [[172, "    def keypress(self, size, key) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdi": {"func": {"update": {"CommandEdit -> None": [[238, "    def update(self) -> None:"]]}, "get_cursor_coords": {"(CommandEdit, ?) -> (?, ?)": [[248, "    def get_cursor_coords(self, size) -> typing.Tuple[int, int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.c": {"class": {"CommandBuffer": {"<CommandBuffer>": [[49, "class CommandBuffer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffe": {"func": {"cursor": {"CommandBuffer -> int": [[58, "    def cursor(self) -> int:"]], "{? -> ? | int | str}": [[62, "    def cursor(self, x) -> None:"]]}, "right": {"CommandBuffer -> None": [[103, "    def right(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.cursor": {"param": {"self": {"CommandBuffer": [[58, "    def cursor(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer": {"func": {"backspace": {"CommandBuffer -> None": [[134, "    def backspace(self) -> None:"]]}, "left": {"CommandBuffer -> None": [[100, "    def left(self) -> None:"]]}, "set_text": {"(CommandBuffer, ?) -> None / (CommandBuffer, str) -> None": [[70, "    def set_text(self, text: str) -> None:"]]}, "cycle_completion": {"(CommandBuffer, ?) -> None": [[106, "    def cycle_completion(self, forward: bool = True) -> None:"]]}, "__init__": {"? -> ?": [[50, "    def __init__(self, master: mitmproxy.master.Master, start: str = \"\") -> None:"]]}, "delete": {"CommandBuffer -> None": [[141, "    def delete(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandBuffer.left": {"param": {"self": {"CommandBuffer": [[100, "    def left(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commander.commander.CommandEdit": {"var": {"leader": {"str": [[162, "    leader = \": \""]]}}, "func": {"keypress": {"(CommandEdit, ?, ?) -> None / (CommandEdit, int, str) -> None": [[172, "    def keypress(self, size, key) -> None:"]]}, "render": {"(CommandEdit, ?, ?) -> None": [[241, "    def render(self, size, focus=False) -> urwid.Canvas:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/scripts/all.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all": {"var": {"record": {"[str]": [[2, "record = []"]]}}, "func": {"serverconnect": {"? -> None": [[10, "def serverconnect(cc):"]]}, "responseheaders": {"? -> None": [[25, "def responseheaders(f):"]]}, "request": {"? -> None": [[15, "def request(f):"]]}, "response": {"? -> None": [[20, "def response(f):"]]}, "error": {"? -> None": [[35, "def error(cc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.responseheaders": {"param": {"f": {"?": [[25, "def responseheaders(f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.a": {"func": {"clientconnect": {"? -> None": [[5, "def clientconnect(cc):"]]}, "clientdisconnect": {"? -> None": [[30, "def clientdisconnect(cc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.serverconnect": {"param": {"cc": {"?": [[10, "def serverconnect(cc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.clientdisconnect": {"param": {"cc": {"?": [[30, "def clientdisconnect(cc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.response": {"param": {"f": {"?": [[20, "def response(f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.clientconnect": {"param": {"cc": {"?": [[5, "def clientconnect(cc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.request": {"param": {"f": {"?": [[15, "def request(f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.scripts.all.error": {"param": {"cc": {"?": [[35, "def error(cc):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOpti": {"func": {"assert_noerr": {"TestProcessProxyOptions -> ProxyConfig": [[36, "    def assert_noerr(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestConnectionHandler.test_fatal_error": {"var": {"_": {"?": [[96, "        _, err = capsys.readouterr()"]]}, "c": {"ConnectionHandler": [[88, "        c = ConnectionHandler("]]}, "channel": {"?": [[82, "        channel = mock.Mock()"]]}, "opts": {"Options": [[79, "        opts = options.Options()"]]}, "pconf": {"ProxyConfig": [[80, "        pconf = config.ProxyConfig(opts)"]]}}, "param": {"self": {"TestConnectionHandler": [[78, "    def test_fatal_error(self, capsys):"]]}, "capsys": {"?": [[78, "    def test_fatal_error(self, capsys):"]]}}, "func": {"ask": {"(?, ?) -> None": [[84, "        def ask(_, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProxyServer.test_err": {"var": {"conf": {"ProxyConfig": [[58, "        conf = ProxyConfig(options.Options(listen_port=1))"]]}}, "param": {"self": {"TestProxyServer": [[56, "    def test_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.MockPars": {"func": {"error": {"(MockParser, ?) -> None": [[22, "    def error(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProxyServer.test_err_2": {"var": {"conf": {"ProxyConfig": [[63, "        conf = ProxyConfig(options.Options(listen_host=\"256.256.256.256\"))"]]}}, "param": {"self": {"TestProxyServer": [[62, "    def test_err_2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestDummyServer.test_simp": {"param": {"self": {"TestDummyServer": [[70, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOption": {"var": {"parser": {"MockParser": [[29, "        parser = MockParser()"]]}, "opts": {"Options": [[30, "        opts = options.Options()"]]}}, "func": {"test_simple": {"TestProcessProxyOptions -> None": [[41, "    def test_simple(self):"]]}, "test_certs": {"(TestProcessProxyOptions, ?) -> None": [[44, "    def test_certs(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy": {"class": {"MockParser": {"<MockParser>": [[16, "class MockParser(argparse.ArgumentParser):"]]}, "TestConnectionHandler": {"<TestConnectionHandler>": [[76, "class TestConnectionHandler:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOptions.test_simp": {"param": {"self": {"TestProcessProxyOptions": [[41, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOptions.p": {"var": {"args": {"?": [[32, "        args = parser.parse_args(args=args)"]]}}, "param": {"self": {"TestProcessProxyOptions": [[28, "    def p(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_prox": {"class": {"TestDummyServer": {"<TestDummyServer>": [[68, "class TestDummyServer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestConnectionHandler.test_fatal_error.ask": {"param": {"x": {"?": [[84, "        def ask(_, x):"]]}, "_": {"?": [[84, "        def ask(_, x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOptions": {"var": {"pconf": {"ProxyConfig": [[33, "        pconf = main.process_options(parser, opts, args)"]]}}, "func": {"p": {"TestProcessProxyOptions -> (MockParser, ProxyConfig)": [[28, "    def p(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.MockParser.error": {"param": {"self": {"MockParser": [[22, "    def error(self, message):"]]}, "message": {"?": [[22, "    def error(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_": {"class": {"TestProcessProxyOptions": {"<TestProcessProxyOptions>": [[26, "class TestProcessProxyOptions:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProxyServ": {"func": {"test_err": {"TestProxyServer -> None": [[56, "    def test_err(self):"]]}, "test_err_2": {"TestProxyServer -> None": [[62, "    def test_err_2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestDummyServer.test_simple": {"var": {"d": {"DummyServer": [[71, "        d = DummyServer(None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOptions.assert_noerr": {"var": {"m": {"MockParser": [[37, "        m, p = self.p(*args)"]]}}, "param": {"self": {"TestProcessProxyOptions": [[36, "    def assert_noerr(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_p": {"class": {"TestProxyServer": {"<TestProxyServer>": [[52, "class TestProxyServer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOptions.test_cert": {"param": {"self": {"TestProcessProxyOptions": [[44, "    def test_certs(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestProcessProxyOptions.test_certs": {"param": {"tdata": {"?": [[44, "    def test_certs(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestConnectionHand": {"func": {"test_fatal_error": {"(TestConnectionHandler, ?) -> None": [[78, "    def test_fatal_error(self, capsys):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_proxy.TestDummyServer": {"func": {"test_simple": {"TestDummyServer -> None": [[70, "    def test_simple(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/stream_modify.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.stream_modify.responseheaders": {"param": {"flow": {"?": [[12, "def responseheaders(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.stream_": {"func": {"modify": {"? -> None": [[3, "def modify(chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.stream_modify": {"func": {"running": {"() -> None": [[8, "def running():"]]}, "responseheaders": {"? -> None": [[12, "def responseheaders(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.stream_modify.modify": {"var": {"chunk": {"?": [[4, "    for chunk in chunks:"]]}}, "param": {"chunks": {"?": [[3, "def modify(chunks):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/urlindex.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.TextUrlIndexWriter": {"func": {"load": {"TextUrlIndexWriter -> None": [[85, "    def load(self):"]]}, "save": {"TextUrlIndexWriter -> None": [[96, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexAddon": {"var": {"OPT_APPEND": {"str": [[122, "    OPT_APPEND = \"URLINDEX_APPEND\""]]}, "OPT_FILEPATH": {"str": [[121, "    OPT_FILEPATH = \"URLINDEX_FILEPATH\""]]}, "OPT_INDEX_FILTER": {"str": [[123, "    OPT_INDEX_FILTER = \"URLINDEX_FILTER\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.SetEncoder.default": {"param": {"self": {"SetEncoder": [[45, "    def default(self, obj):"]]}, "obj": {"?": [[45, "    def default(self, obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.u": {"class": {"JSONUrlIndexWriter": {"<JSONUrlIndexWriter>": [[51, "class JSONUrlIndexWriter(UrlIndexWriter):"]]}, "TextUrlIndexWriter": {"<TextUrlIndexWriter>": [[82, "class TextUrlIndexWriter(UrlIndexWriter):"]]}, "UrlIndexWriter": {"<UrlIndexWriter>": [[14, "class UrlIndexWriter(abc.ABC):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter": {"func": {"load": {"JSONUrlIndexWriter -> None": [[58, "    def load(self):"]]}, "save": {"JSONUrlIndexWriter -> None": [[77, "    def save(self):"]]}, "__init__": {"? -> ?": [[54, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.SetEncoder": {"func": {"default": {"(SetEncoder, ?) -> list": [[45, "    def default(self, obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexA": {"func": {"done": {"UrlIndexAddon -> None": [[166, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter.__init__": {"param": {"self": {"JSONUrlIndexWriter": [[54, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.TextUrlIndexWriter.add_url": {"var": {"res": {"?": [[89, "        res = flow.response"]]}, "req": {"?": [[90, "        req = flow.request"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWrite": {"func": {"add_url": {"(JSONUrlIndexWriter, ?) -> None": [[67, "    def add_url(self, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.TextUrlIndexWriter.sav": {"param": {"self": {"TextUrlIndexWriter": [[96, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.TextUrlIndexWriter.load": {"param": {"self": {"TextUrlIndexWriter": [[85, "    def load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexAddon.don": {"param": {"self": {"UrlIndexAddon": [[166, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexWriter": {"func": {"load": {"UrlIndexWriter -> None": [[30, "    def load(self):"]]}, "save": {"UrlIndexWriter -> None": [[40, "    def save(self):"]]}, "__init__": {"? -> ?": [[21, "    def __init__(self, filename: Path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter.load": {"var": {"path": {"?": [[63, "                for path, methods in self.host_urls[host].items():"]]}, "host": {"<list>": [[62, "            for host in self.host_urls.keys():"]]}}, "param": {"self": {"JSONUrlIndexWriter": [[58, "    def load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexWriter.sav": {"param": {"self": {"UrlIndexWriter": [[40, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexAddon.__in": {"var": {"file_path": {"?": [[145, "        file_path = Path(file_path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexWriter.load": {"param": {"self": {"UrlIndexWriter": [[30, "    def load(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter.add_url": {"var": {"res": {"?": [[69, "        res = flow.response"]]}, "req": {"?": [[68, "        req = flow.request"]]}, "methods": {"?": [[73, "            methods = urls.setdefault(req.path, {})"]]}, "codes": {"?": [[74, "            codes = methods.setdefault(req.method, set())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.TextUrlIndexWrite": {"func": {"add_url": {"(TextUrlIndexWriter, ?) -> None": [[88, "    def add_url(self, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter.loa": {"var": {"method": {"?": [[64, "                    for method, codes in methods.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexWrite": {"func": {"add_url": {"(UrlIndexWriter, ?) -> None": [[35, "    def add_url(self, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexAdd": {"func": {"response": {"(UrlIndexAddon, ?) -> None": [[156, "    def response(self, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter.sav": {"param": {"self": {"JSONUrlIndexWriter": [[77, "    def save(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.UrlIndexAddo": {"var": {"index_filter": {"? -> bool / UrlIndexAddon -> bool": [[126, "                 index_filter: Union[str, flowfilter.TFilter] = filter_404, index_format: str = \"json\"):"]]}}, "func": {"__init__": {"? -> ?": [[125, "    def __init__(self, file_path: Union[str, Path], append: bool = True,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urli": {"class": {"UrlIndexAddon": {"<UrlIndexAddon>": [[111, "class UrlIndexAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.filter_404": {"param": {"flow": {"UrlIndexAddon": [[106, "def filter_404(flow) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex.JSONUrlIndexWriter.add_": {"var": {"urls": {"?": [[72, "            urls = self.host_urls.setdefault(f\"{req.scheme}://{req.host}:{req.port}\", dict())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlindex": {"var": {"logger": {"?": [[11, "logger = logging.getLogger(__name__)"]]}}, "class": {"SetEncoder": {"<SetEncoder>": [[44, "class SetEncoder(json.JSONEncoder):"]]}}, "func": {"filter_404": {"? -> bool / UrlIndexAddon -> bool": [[106, "def filter_404(flow) -> bool:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_master.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_master.TestMaster.mkmaster": {"var": {"m": {"ConsoleMaster": [[14, "        m = console.master.ConsoleMaster(o)"]]}, "o": {"Options": [[13, "        o = options.Options(**opts)"]]}}, "param": {"self": {"TestMaster": [[12, "    def mkmaster(self, **opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_master.TestM": {"func": {"mkmaster": {"TestMaster -> ConsoleMaster": [[12, "    def mkmaster(self, **opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_master.TestMaster.test_basic": {"var": {"i": {"int": [[20, "        for i in (1, 2, 3):"]]}, "m": {"ConsoleMaster": [[19, "        m = self.mkmaster()"]]}}, "param": {"self": {"TestMaster": [[18, "    async def test_basic(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_m": {"class": {"TestMaster": {"<TestMaster>": [[11, "class TestMaster(tservers.MasterTest):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/wbxml/ASWBXMLCodePage.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePa": {"func": {"getToken": {"(ASWBXMLCodePage, ?) -> int": [[41, "\tdef getToken(self, tag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage.__init__": {"param": {"self": {"ASWBXMLCodePage": [[31, "\tdef __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage.addT": {"param": {"token": {"int": [[37, "\tdef addToken(self, token, tag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodeP": {"func": {"getTag": {"(ASWBXMLCodePage, ?) -> None": [[46, "\tdef getTag(self, token):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage.getToken": {"param": {"self": {"ASWBXMLCodePage": [[41, "\tdef getToken(self, tag):"]]}, "tag": {"?": [[41, "\tdef getToken(self, tag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml": {"class": {"ASWBXMLCodePage": {"<ASWBXMLCodePage>": [[30, "class ASWBXMLCodePage:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage.getTag": {"param": {"self": {"ASWBXMLCodePage": [[46, "\tdef getTag(self, token):"]]}, "token": {"?": [[46, "\tdef getTag(self, token):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePag": {"func": {"addToken": {"(ASWBXMLCodePage, int, str) -> None": [[37, "\tdef addToken(self, token, tag):"]]}, "__repr__": {"ASWBXMLCodePage -> str": [[51, "\tdef __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage": {"func": {"__init__": {"? -> ?": [[31, "\tdef __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage.__repr__": {"param": {"self": {"ASWBXMLCodePage": [[51, "\tdef __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASWBXMLCodePage.ASWBXMLCodePage.addToken": {"param": {"self": {"ASWBXMLCodePage": [[37, "\tdef addToken(self, token, tag):"]]}, "tag": {"str": [[37, "\tdef addToken(self, token, tag):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/core.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.encode": {"var": {"p": {"?": [[276, "            p = getattr(f, part, None)"]]}, "part": {"str": [[268, "        part: str,"]]}, "flows": {"[?]": [[267, "        flows: typing.Sequence[flow.Flow],"]]}, "f": {"?": [[275, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.c": {"class": {"Core": {"<Core>": [[21, "class Core:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.flow_": {"var": {"supdate": {"?": [[212, "            supdate = True"], [221, "                    supdate = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core": {"var": {"LISTEN_PORT": {"int": [[18, "LISTEN_PORT = 8080"]]}, "CONF_DIR": {"str": [[17, "CONF_DIR = \"~/.mitmproxy\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.flow_set_option": {"param": {"self": {"Core": [[160, "    def flow_set_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.configure": {"var": {"opts": {"?": [[39, "        opts = ctx.options"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.encode_toggle": {"var": {"p": {"?": [[251, "            p = getattr(f, part, None)"]]}, "f": {"?": [[250, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core": {"func": {"load": {"(Core, ?) -> None": [[22, "    def load(self, loader):"]]}, "kill": {"(Core, ?) -> None / (Core, [?]) -> None": [[133, "    def kill(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}, "options_load": {"(Core, str) -> ? / (Core, ?) -> ?": [[294, "    def options_load(self, path: mitmproxy.types.Path) -> None:"]]}, "mark": {"(Core, [?], bool) -> None / (Core, ?, ?) -> None": [[111, "    def mark(self, flows: typing.Sequence[flow.Flow], boolean: bool) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.mark_toggle": {"var": {"i": {"?": [[128, "        for i in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.configur": {"var": {"mode": {"?": [[62, "            mode = opts.mode"]]}}, "param": {"self": {"Core": [[38, "    def configure(self, updated):"]]}, "updated": {"?": [[38, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.resum": {"var": {"intercepted": {"[?]": [[104, "        intercepted = [i for i in flows if i.intercepted]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.flow_se": {"var": {"attr": {"str": [[175, "        attr: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.encode_toggl": {"var": {"updated": {"[?]": [[249, "        updated = []"]]}, "current_enc": {"?": [[254, "                current_enc = p.headers.get(\"content-encoding\", \"identity\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.configu": {"var": {"client_certs": {"str": [[79, "                client_certs = os.path.expanduser(opts.client_certs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.resume": {"var": {"f": {"?": [[105, "        for f in intercepted:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.revert": {"var": {"f": {"?": [[152, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.flow_set": {"var": {"val": {"int": [[184, "                val = int(val)  # type: ignore"]]}, "f": {"?": [[191, "        for f in flows:"]]}, "self": {"Core": [[173, "        self,"]]}, "req": {"?": [[192, "            req = getattr(f, \"request\", None)"]]}, "value": {"str": [[176, "        value: str"]]}, "flows": {"[?]": [[174, "        flows: typing.Sequence[flow.Flow],"]]}, "resp": {"?": [[211, "            resp = getattr(f, \"response\", None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.load": {"param": {"self": {"Core": [[22, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Cor": {"var": {"encoding": {"str": [[269, "        encoding: str,"]]}}, "func": {"set": {"(Core, ?, str) -> ?": [[86, "    def set(self, option: str, value: str = \"\") -> None:"]]}, "decode": {"(Core, ?, ?) -> None / (Core, [?], str) -> None": [[230, "    def decode(self, flows: typing.Sequence[flow.Flow], part: str) -> None:"]]}, "options_save": {"(Core, str) -> ? / (Core, ?) -> ?": [[306, "    def options_save(self, path: mitmproxy.types.Path) -> None:"]]}, "encode_options": {"Core -> [str]": [[287, "    def encode_options(self) -> typing.Sequence[str]:"]]}, "encode": {"(Core, ?, ?, ?) -> None / (Core, [?], str, str) -> None": [[265, "    def encode("]]}, "flow_set": {"(Core, ?, ?, ?) -> None / (Core, [?], str, str) -> None": [[172, "    def flow_set("]]}, "encode_toggle": {"(Core, ?, ?) -> None / (Core, [?], str) -> None": [[245, "    def encode_toggle(self, flows: typing.Sequence[flow.Flow], part: str) -> None:"]]}, "flow_set_options": {"Core -> [str]": [[160, "    def flow_set_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.options_reset": {"param": {"self": {"Core": [[318, "    def options_reset(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.encod": {"var": {"self": {"Core": [[266, "        self,"]]}, "current_enc": {"?": [[278, "                current_enc = p.headers.get(\"content-encoding\", \"identity\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.encode_option": {"param": {"self": {"Core": [[287, "    def encode_options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Co": {"var": {"strspec": {"None": [[93, "        strspec = f\"{option}={value}\""]]}}, "func": {"revert": {"(Core, ?) -> None / (Core, [?]) -> None": [[147, "    def revert(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}, "resume": {"(Core, [?]) -> None / (Core, ?) -> None": [[100, "    def resume(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.decode": {"var": {"p": {"?": [[236, "            p = getattr(f, part, None)"]]}, "f": {"?": [[235, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.kill": {"var": {"updated": {"[?]": [[137, "        updated = []"]]}, "f": {"?": [[138, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.C": {"param": {"loader": {"?": [[22, "    def load(self, loader):"]]}}, "func": {"options_reset": {"Core -> None": [[318, "    def options_reset(self) -> None:"]]}, "configure": {"(Core, ?) -> ?": [[38, "    def configure(self, updated):"]]}, "options_reset_one": {"(Core, str) -> None / (Core, ?) -> None": [[325, "    def options_reset_one(self, name: str) -> None:"]]}, "mark_toggle": {"(Core, [?]) -> None / (Core, ?) -> None": [[124, "    def mark_toggle(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.rever": {"var": {"updated": {"[?]": [[151, "        updated = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.mark": {"var": {"i": {"?": [[116, "        for i in flows:"]]}, "updated": {"[?]": [[115, "        updated = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.deco": {"var": {"updated": {"[?]": [[234, "        updated = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.enco": {"var": {"updated": {"[?]": [[274, "        updated = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.core.Core.flow_s": {"var": {"updated": {"[?]": [[190, "        updated = []"]]}, "rupdate": {"?": [[193, "            rupdate = True"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/docs/scripts/examples.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.script": {"var": {"examples": {"?": [[8, "examples = example_dir.glob('*.py')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scripts.examples": {"var": {"comment": {"str": [[27, "        comment = \" \u2014 \" + match.group(1)"]]}, "code": {"?": [[14, "    code = example.read_text()"]]}, "overview": {"[None]": [[10, "overview = []"]]}, "here": {"?": [[6, "here = Path(__file__).absolute().parent"]]}, "example": {"?": [[13, "for example in examples:"]]}, "example_dir": {"str": [[7, "example_dir = here / \"..\" / \"src\" / \"examples\" / \"addons\""]]}, "match": {"?": [[17, "    match = re.search(r'''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scripts.example": {"var": {"listings": {"[None]": [[11, "listings = []"]]}, "slug": {"?": [[16, "    slug = re.sub(r\"[^a-zA-Z]\", \"-\", slug)"]], "str": [[15, "    slug = str(example.with_suffix(\"\").relative_to(example_dir))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/test.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.__init__": {"param": {"ssl": {"None": [[12, "    def __init__(self, ssl=None, **daemonargs) -> None:"]]}, "self": {"Daemon": [[12, "    def __init__(self, ssl=None, **daemonargs) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.__exit__": {"param": {"self": {"Daemon": [[28, "    def __exit__(self, type, value, traceback):"]]}, "traceback": {"?": [[28, "    def __exit__(self, type, value, traceback):"]]}, "type": {"?": [[28, "    def __exit__(self, type, value, traceback):"]]}, "value": {"?": [[28, "    def __exit__(self, type, value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.clear_log": {"param": {"self": {"Daemon": [[71, "    def clear_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test._PaThread.run": {"param": {"self": {"_PaThread": [[93, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test._PaThread": {"func": {"run": {"_PaThread -> None": [[93, "    def run(self):"]]}, "__init__": {"? -> ?": [[87, "    def __init__(self, iface, q, ssl, daemonargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.wait_for_silenc": {"param": {"self": {"Daemon": [[42, "    def wait_for_silence(self, timeout=5):"]]}, "timeout": {"int": [[42, "    def wait_for_silence(self, timeout=5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.__enter__": {"param": {"self": {"Daemon": [[25, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.last_log": {"var": {"l": {"[?]": [[60, "        l = self.expect_log(1)"]]}}, "param": {"self": {"Daemon": [[56, "    def last_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemo": {"func": {"__enter__": {"Daemon -> Daemon": [[25, "    def __enter__(self):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, ssl=None, **daemonargs) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test._PaThread.__init__": {"param": {"q": {"?": [[87, "    def __init__(self, iface, q, ssl, daemonargs):"]]}, "ssl": {"None": [[87, "    def __init__(self, iface, q, ssl, daemonargs):"]]}, "self": {"_PaThread": [[87, "    def __init__(self, iface, q, ssl, daemonargs):"]]}, "iface": {"str": [[87, "    def __init__(self, iface, q, ssl, daemonargs):"]]}, "daemonargs": {"?": [[87, "    def __init__(self, iface, q, ssl, daemonargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon": {"var": {"IFACE": {"str": [[10, "    IFACE = \"127.0.0.1\""]]}}, "func": {"__exit__": {"(Daemon, ?, ?, ?) -> None": [[28, "    def __exit__(self, type, value, traceback):"]]}, "log": {"Daemon -> None": [[65, "    def log(self) -> typing.List[typing.Dict]:"]]}, "text_log": {"Daemon -> ?": [[39, "    def text_log(self) -> str:"]]}, "clear_log": {"Daemon -> None": [[71, "    def clear_log(self):"]]}, "p": {"(Daemon, ?) -> None / (Daemon, str) -> None": [[33, "    def p(self, spec: str) -> str:"]]}, "expect_log": {"(Daemon, ?, int) -> [?] / (Daemon, int, int) -> [?]": [[45, "    def expect_log(self, n, timeout=5):"]]}, "last_log": {"Daemon -> None": [[56, "    def last_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daem": {"func": {"shutdown": {"Daemon -> None": [[77, "    def shutdown(self):"]]}, "wait_for_silence": {"(Daemon, int) -> None": [[42, "    def wait_for_silence(self, timeout=5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.log": {"param": {"self": {"Daemon": [[65, "    def log(self) -> typing.List[typing.Dict]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.expect_log": {"var": {"start": {"int": [[47, "        start = time.time()"]]}, "l": {"None": [[49, "            l = self.log()"]], "[?]": [[46, "        l = []"]]}}, "param": {"self": {"Daemon": [[45, "    def expect_log(self, n, timeout=5):"]]}, "timeout": {"int": [[45, "    def expect_log(self, n, timeout=5):"]]}, "n": {"int": [[45, "    def expect_log(self, n, timeout=5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test": {"class": {"Daemon": {"<Daemon>": [[9, "class Daemon:"]]}, "_PaThread": {"<_PaThread>": [[85, "class _PaThread(basethread.BaseThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.shutdown": {"param": {"self": {"Daemon": [[77, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.test.Daemon.text_log": {"param": {"self": {"Daemon": [[39, "    def text_log(self) -> str:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/disable_h2c.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.disable_h2c": {"class": {"DisableH2C": {"<DisableH2C>": [[4, "class DisableH2C:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.disable_h2c.DisableH2C.process_flow": {"var": {"is_connection_preface": {"bool": [[26, "        is_connection_preface = ("]]}}, "param": {"self": {"DisableH2C": [[17, "    def process_flow(self, f):"]]}, "f": {"?": [[17, "    def process_flow(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.disable_h2c.DisableH2C": {"func": {"process_flow": {"(DisableH2C, ?) -> None": [[17, "    def process_flow(self, f):"]]}, "request": {"(DisableH2C, ?) -> None": [[37, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.disable_h2c.DisableH2C.request": {"param": {"self": {"DisableH2C": [[37, "    def request(self, f):"]]}, "f": {"?": [[37, "    def request(self, f):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/protobuf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.protobuf.format_pbuf": {"var": {"body": {"None": [[32, "            body = None"], [34, "            body = None"]], "?": [[37, "            body = pair.value.body"], [39, "            body = pair.value.value"], [41, "            body = pair.value"]]}, "i": {"int": [[57, "            for i in range(1, levels + 1):"]]}, "levels": {"int": [[56, "            levels = int((indent_level - prev_level) / 2)"]]}, "prev_level": {"int": [[53, "            prev_level = 0"]], "?": [[51, "            prev_level = stack[-1][1]"]]}, "pair": {"?": [[29, "        pair, indent_level = stack.pop()"]]}, "stack": {"[?]": [[20, "    stack = []"]]}, "out": {"?": [[19, "    out = io.StringIO()"]]}}, "param": {"raw": {"str": [[18, "def format_pbuf(raw):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews": {"func": {"format_pbuf": {"str -> bool / ? -> bool": [[18, "def format_pbuf(raw):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.protobuf.ViewProtobuf.__call__": {"var": {"decoded": {"bool": [[75, "        decoded = format_pbuf(data)"]]}}, "param": {"self": {"ViewProtobuf": [[74, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[74, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.protobuf.format_p": {"var": {"next_buf": {"?": [[44, "            next_buf = google_protobuf.GoogleProtobuf(KaitaiStream(io.BytesIO(body)))"]]}, "buf": {"?": [[23, "        buf = google_protobuf.GoogleProtobuf(KaitaiStream(io.BytesIO(raw)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.protobuf.write_buf": {"param": {"body": {"None": [[8, "def write_buf(out, field_tag, body, indent_level):"]]}, "indent_level": {"int": [[8, "def write_buf(out, field_tag, body, indent_level):"]]}, "out": {"?": [[8, "def write_buf(out, field_tag, body, indent_level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.protobuf.write_bu": {"param": {"field_tag": {"None": [[8, "def write_buf(out, field_tag, body, indent_level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.proto": {"func": {"write_buf": {"(?, ?, ?, ?) -> None / (?, ?, None, ?) -> None / (?, None, None, int) -> None": [[8, "def write_buf(out, field_tag, body, indent_level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.p": {"class": {"ViewProtobuf": {"<ViewProtobuf>": [[63, "class ViewProtobuf(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.protobuf.ViewProtobuf": {"var": {"content_types": {"[str]": [[69, "    content_types = ["]]}, "name": {"str": [[68, "    name = \"Protocol Buffer\""]]}}, "func": {"__call__": {"(ViewProtobuf, ?) -> (str, ?)": [[74, "    def __call__(self, data, **metadata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/proxyauth.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxy": {"func": {"mkauth": {"(str, str, ?) -> str / (str, str, str) -> str / (?, ?, str) -> str": [[20, "def mkauth(username: str, password: str, scheme: str = \"basic\") -> str:"]]}, "parse_http_basic_auth": {"str -> (str, str, str) / ? -> (?, str, str)": [[30, "def parse_http_basic_auth(s: str) -> Tuple[str, str, str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyA": {"func": {"which_auth_header": {"ProxyAuth -> str": [[78, "    def which_auth_header(self) -> str:"]]}, "is_proxy_auth": {"ProxyAuth -> bool": [[70, "    def is_proxy_auth(self) -> bool:"]]}, "authenticate": {"(ProxyAuth, ?) -> None": [[131, "    def authenticate(self, f: http.HTTPFlow) -> bool:"]]}, "auth_required_response": {"ProxyAuth -> HTTPResponse": [[84, "    def auth_required_response(self) -> http.HTTPResponse:"]]}, "requestheaders": {"(ProxyAuth, ?) -> None": [[208, "    def requestheaders(self, f: http.HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.which_auth_header": {"param": {"self": {"ProxyAuth": [[78, "    def which_auth_header(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.configur": {"var": {"dn_baseauth": {"?": [[167, "                    dn_baseauth = parts[2]"]]}}, "param": {"self": {"ProxyAuth": [[142, "    def configure(self, updated):"]]}, "updated": {"?": [[142, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.check": {"var": {"auth_value": {"?": [[103, "        auth_value = f.request.headers.get(self.which_auth_header(), \"\")"]]}, "scheme": {"?": [[105, "            scheme, username, password = parse_http_basic_auth(auth_value)"]]}, "conn": {"?": [[122, "                conn = ldap3.Connection("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.auth": {"var": {"valid_credentials": {"(str, str)": [[132, "        valid_credentials = self.check(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.is_proxy_auth": {"param": {"self": {"ProxyAuth": [[70, "    def is_proxy_auth(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.mkauth": {"var": {"v": {"str": [[24, "    v = binascii.b2a_base64("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.configure": {"var": {"p": {"?": [[152, "                    p = ctx.options.proxyauth[1:]"]]}, "parts": {"?": [[160, "                    parts = ctx.options.proxyauth.split(':')"], [185, "                    parts = ctx.options.proxyauth.split(':')"]]}, "conn": {"?": [[177, "                    conn = ldap3.Connection("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.config": {"var": {"security": {"?": [[165, "                    security = parts[0]"]]}, "password_baseauth": {"?": [[168, "                    password_baseauth = parts[3]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.__init__": {"param": {"self": {"ProxyAuth": [[46, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.parse_http_basic_auth": {"var": {"user": {"str": [[39, "        user, password = binascii.a2b_base64(authinfo.encode()).decode(\"utf8\", \"replace\").split(\":\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxya": {"class": {"ProxyAuth": {"<ProxyAuth>": [[45, "class ProxyAuth:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth": {"var": {"REALM": {"str": [[17, "REALM = \"mitmproxy\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.configu": {"var": {"ldap_server": {"?": [[166, "                    ldap_server = parts[1]"]]}, "server": {"?": [[170, "                        server = ldap3.Server(ldap_server, use_ssl=True)"], [172, "                        server = ldap3.Server(ldap_server)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAut": {"func": {"check": {"(ProxyAuth, ?) -> (str, str)": [[96, "    def check(self, f: http.HTTPFlow) -> Optional[Tuple[str, str]]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth": {"param": {"loader": {"?": [[55, "    def load(self, loader):"]]}}, "func": {"load": {"(ProxyAuth, ?) -> None": [[55, "    def load(self, loader):"]]}, "enabled": {"ProxyAuth -> int": [[67, "    def enabled(self) -> bool:"]]}, "configure": {"(ProxyAuth, ?) -> ?": [[142, "    def configure(self, updated):"]]}, "__init__": {"? -> ?": [[46, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.auth_required_respon": {"param": {"self": {"ProxyAuth": [[84, "    def auth_required_response(self) -> http.HTTPResponse:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.parse_http_basic_aut": {"var": {"scheme": {"str": [[35, "    scheme, authinfo = s.split()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.enabled": {"param": {"self": {"ProxyAuth": [[67, "    def enabled(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAuth.load": {"param": {"self": {"ProxyAuth": [[55, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.proxyauth.ProxyAu": {"func": {"http_connect": {"(ProxyAuth, ?) -> None": [[203, "    def http_connect(self, f: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/pathod.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.ma": {"var": {"ssloptions": {"SSLOptions": [[434, "    ssloptions = SSLOptions("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLOptio": {"var": {"request_client_cert": {"?": [[40, "        request_client_cert=False,"]]}}, "param": {"request_client_cert": {"None": [[46, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle_http_reques": {"var": {"path": {"?": [[144, "            path = req.path"]]}, "retlog": {"dict": [[160, "            retlog = dict("]]}, "method": {"?": [[143, "            method = req.method"]]}, "clientcert": {"None": [[149, "            clientcert = None"]], "dict": [[151, "                clientcert = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod": {"var": {"CONFDIR": {"str": [[20, "CONFDIR = \"~/.mitmproxy\""]]}, "CA_CERT_NAME": {"str": [[22, "CA_CERT_NAME = \"mitmproxy-ca.pem\""]]}, "DEFAULT_CERT_DOMAIN": {"str": [[19, "DEFAULT_CERT_DOMAIN = b\"pathod.net\""]]}, "KEY_SIZE": {"int": [[24, "KEY_SIZE = 2048"]]}, "DEFAULT_CRAFT_ANCHOR": {"str": [[23, "DEFAULT_CRAFT_ANCHOR = \"/p/\""]]}, "logger": {"?": [[26, "logger = logging.getLogger('pathod')"]]}, "CERTSTORE_BASENAME": {"str": [[21, "CERTSTORE_BASENAME = \"mitmproxy\""]]}}, "class": {"SSLOptions": {"<SSLOptions>": [[33, "class SSLOptions:"]]}}, "func": {"main": {"? -> ?": [[433, "def main(args):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle_sni": {"param": {"self": {"PathodHandler": [[92, "    def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.log_by_": {"param": {"identifier": {"None": [[422, "    def log_by_id(self, identifier):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle": {"var": {"lw": {"None": [[279, "        lw = self.wfile if self.server.logresp else None"]]}, "s": {"str": [[260, "                s = str(v)"]]}, "lr": {"None": [[278, "        lr = self.rfile if self.server.logreq else None"]]}, "alp": {"str": [[270, "            alp = self.get_alpn_proto_negotiated()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.make_http_error_resp": {"param": {"reason": {"str": [[238, "    def make_http_error_response(self, reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle_s": {"param": {"connection": {"?": [[92, "    def handle_sni(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.get_log": {"param": {"self": {"Pathod": [[428, "    def get_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handl": {"var": {"cert": {"?": [[248, "                cert, key, _ = self.server.ssloptions.get_cert(None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.clear_log": {"param": {"self": {"Pathod": [[418, "    def clear_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.handle_client_connection": {"var": {"h": {"PathodHandler": [[380, "        h = PathodHandler("]]}}, "param": {"self": {"Pathod": [[379, "    def handle_client_connection(self, request, client_address):"]]}, "request": {"?": [[379, "    def handle_client_connection(self, request, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.addlog": {"param": {"self": {"PathodHandler": [[293, "    def addlog(self, log):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLOptions.__init__": {"var": {"cn": {"None": [[37, "        cn=None,"]]}, "confdir": {"str": [[36, "        confdir=CONFDIR,"]]}, "self": {"SSLOptions": [[35, "        self,"]]}, "ciphers": {"None": [[43, "        ciphers=None,"]]}, "i": {"?": [[61, "        for i in certs or []:"]]}, "certs": {"None": [[44, "        certs=None,"]]}, "sans": {"()": [[38, "        sans=(),"]]}}, "param": {"cn": {"str": [[46, "    ):"]]}, "confdir": {"str": [[46, "    ):"]]}, "self": {"SSLOptions": [[46, "    ):"]]}, "ciphers": {"tls": [[46, "    ):"]]}, "certs": {"?": [[46, "    ):"]]}, "sans": {"None": [[46, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.__init__": {"var": {"hexdump": {"?": [[319, "        hexdump=False,"]]}, "logresp": {"?": [[317, "        logresp=False,"]]}, "addr": {"(str, int)": [[306, "        addr,"]]}, "staticdir": {"None": [[310, "        staticdir=None,"]]}, "webdebug": {"?": [[321, "        webdebug=False,"]]}, "self": {"Pathod": [[305, "        self,"]]}, "ssl": {"?": [[307, "        ssl=False,"]]}, "ssloptions": {"None": [[308, "        ssloptions=None,"]]}, "explain": {"?": [[318, "        explain=False,"]]}, "timeout": {"None": [[315, "        timeout=None,"]]}, "nohang": {"?": [[314, "        nohang=False,"]]}, "logreq": {"?": [[316, "        logreq=False,"]]}, "sizelimit": {"None": [[312, "        sizelimit=None,"]]}, "logfp": {"?": [[322, "        logfp=sys.stdout,"]]}, "craftanchor": {"str": [[309, "        craftanchor=DEFAULT_CRAFT_ANCHOR,"]]}, "nocraft": {"?": [[313, "        nocraft=False,"]]}, "anchors": {"()": [[311, "        anchors=(),"]]}}, "param": {"hexdump": {"?": [[323, "    ):"]]}, "logresp": {"?": [[323, "    ):"]]}, "addr": {"(str, int)": [[323, "    ):"]]}, "staticdir": {"str": [[323, "    ):"]]}, "webdebug": {"?": [[323, "    ):"]]}, "self": {"Pathod": [[323, "    ):"]]}, "ssl": {"?": [[323, "    ):"]]}, "ssloptions": {"None": [[323, "    ):"]]}, "explain": {"?": [[323, "    ):"]]}, "timeout": {"?": [[323, "    ):"]]}, "nohang": {"?": [[323, "    ):"]]}, "logreq": {"None": [[323, "    ):"]]}, "sizelimit": {"()": [[323, "    ):"]]}, "logfp": {"?": [[323, "    ):"]]}, "craftanchor": {"str": [[323, "    ):"]]}, "nocraft": {"None": [[323, "    ):"]]}, "anchors": {"None": [[323, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.make_http_error_response": {"param": {"body": {"str": [[238, "    def make_http_error_response(self, reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.__ini": {"var": {"http2_framedump": {"?": [[83, "        http2_framedump=False"]]}}, "param": {"http2_framedump": {"?": [[84, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.p": {"class": {"Pathod": {"<Pathod>": [[301, "class Pathod(tcp.TCPServer):"]]}, "PathodError": {"<PathodError>": [[29, "class PathodError(Exception):"]]}, "PathodHandler": {"<PathodHandler>": [[72, "class PathodHandler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle_": {"var": {"sni": {"?": [[93, "        sni = connection.get_servername()"], [95, "            sni = sni.decode(\"idna\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLOptions.__init": {"var": {"ssl_version": {"?": [[41, "        ssl_version=tls.DEFAULT_METHOD,"]]}}, "param": {"ssl_version": {"?": [[46, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandl": {"func": {"make_http_error_response": {"(PathodHandler, ?, None) -> None / (PathodHandler, str, str) -> None": [[238, "    def make_http_error_response(self, reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.check_policy": {"var": {"req": {"?": [[368, "            req = req.resolve(settings)"]]}, "l": {"?": [[369, "            l = req.maximum_length(settings)"]]}, "pauses": {"[int]": [[374, "        pauses = [isinstance(i, language.actions.PauseAt) for i in req.actions]"]]}}, "param": {"self": {"Pathod": [[361, "    def check_policy(self, req, settings):"]]}, "req": {"?": [[361, "    def check_policy(self, req, settings):"]]}, "settings": {"?": [[361, "    def check_policy(self, req, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.hand": {"var": {"logger": {"?": [[280, "        logger = log.ConnectionLogger(self.logfp, self.server.hexdump, True, lr, lw)"]]}}, "param": {"self": {"PathodHandler": [[243, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler": {"var": {"wbufsize": {"int": [[73, "    wbufsize = 0"]]}}, "func": {"handle_sni": {"(PathodHandler, ?) -> None": [[92, "    def handle_sni(self, connection):"]]}, "handle": {"PathodHandler -> ?": [[243, "    def handle(self):"]]}, "__init__": {"? -> ?": [[76, "    def __init__("]]}, "addlog": {"(PathodHandler, dict) -> None / (PathodHandler, ?) -> None": [[293, "    def addlog(self, log):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLOptions": {"func": {"get_cert": {"(SSLOptions, ?) -> None": [[64, "    def get_cert(self, name):"]]}, "__init__": {"? -> ?": [[34, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.P": {"func": {"handle_client_connection": {"(Pathod, ?, ?) -> ?": [[379, "    def handle_client_connection(self, request, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLOptions.get_cert": {"var": {"name": {"None": [[66, "            name = self.cn"]], "str": [[68, "            name = DEFAULT_CERT_DOMAIN"]]}}, "param": {"self": {"SSLOptions": [[64, "    def get_cert(self, name):"]]}, "name": {"?": [[64, "    def get_cert(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.mai": {"var": {"handler": {"?": [[447, "        for handler in root.handlers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLOptions.__ini": {"var": {"not_after_connect": {"None": [[39, "        not_after_connect=None,"]]}, "alpn_select": {"str": [[45, "        alpn_select=b'h2',"]]}}, "param": {"not_after_connect": {"()": [[46, "    ):"]]}, "alpn_select": {"?": [[46, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.main": {"var": {"log": {"?": [[450, "    log = logging.getLogger('pathod')"]]}, "fmt": {"?": [[452, "    fmt = logging.Formatter("]]}, "sh": {"?": [[461, "        sh = logging.StreamHandler()"]]}, "pd": {"Pathod": [[466, "        pd = Pathod("]]}, "fh": {"?": [[457, "        fh = logging.handlers.WatchedFileHandler(args.logfile)"]]}, "root": {"?": [[445, "    root = logging.getLogger()"]]}}, "param": {"args": {"?": [[433, "def main(args):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.add_log": {"param": {"self": {"Pathod": [[409, "    def add_log(self, d):"]]}, "d": {"dict": [[409, "    def add_log(self, d):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.__init__": {"var": {"settings": {"?": [[82, "        settings,"]]}, "logfp": {"?": [[81, "        logfp,"]]}, "self": {"PathodHandler": [[77, "        self,"]]}, "server": {"Pathod": [[80, "        server,"]]}, "connection": {"?": [[78, "        connection,"]]}, "address": {"?": [[79, "        address,"]]}}, "param": {"settings": {"?": [[84, "    ):"]]}, "logfp": {"?": [[84, "    ):"]]}, "self": {"PathodHandler": [[84, "    ):"]]}, "server": {"Pathod": [[84, "    ):"]]}, "connection": {"?": [[84, "    ):"]]}, "address": {"?": [[84, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.handle_client_connectio": {"param": {"client_address": {"?": [[379, "    def handle_client_connection(self, request, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle_http_request": {"var": {"regex": {"?": [[190, "            for regex, spec in self.server.anchors:"]]}, "anchor_gen": {"None": [[188, "                anchor_gen = None"]], "?": [[186, "                anchor_gen = language.parse_pathod(\"ws\")"], [192, "                    anchor_gen = language.parse_pathod(spec, self.use_http2)"], [199, "                            anchor_gen = language.parse_pathod(spec, self.use_http2)"], [202, "                            anchor_gen = iter([self.make_http_error_response("], [210, "                        anchor_gen = iter([self.make_http_error_response("], [217, "                anchor_gen = iter([self.make_http_error_response("]]}, "req": {"?": [[132, "                req = self.protocol.read_request(self.rfile)"]]}, "m": {"?": [[178, "            m = utils.MemBool()"]]}, "headers": {"?": [[146, "            headers = req.headers"]]}, "s": {"str": [[136, "                s = str(s)"]]}, "spec": {"?": [[196, "                    spec = urllib.parse.unquote(path)[len(self.server.craftanchor):]"], [222, "            spec = next(anchor_gen)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod": {"var": {"LOGBUF": {"int": [[302, "    LOGBUF = 500"]]}}, "func": {"get_log": {"Pathod -> [?]": [[428, "    def get_log(self):"]]}, "check_policy": {"(Pathod, ?, ?) -> (str, None)": [[361, "    def check_policy(self, req, settings):"]]}, "clear_log": {"Pathod -> None": [[418, "    def clear_log(self):"]]}, "__init__": {"? -> ?": [[304, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.http_serve_": {"var": {"crafted": {"?": [[111, "            crafted = crafted.freeze(self.settings)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.__ini": {"var": {"http2_framedump": {"?": [[320, "        http2_framedump=False,"]]}}, "param": {"http2_framedump": {"?": [[323, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.make_http_error_respon": {"var": {"resp": {"?": [[239, "        resp = self.protocol.make_error_response(reason, body)"]]}}, "param": {"self": {"PathodHandler": [[238, "    def make_http_error_response(self, reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.SSLO": {"var": {"ssl_options": {"?": [[42, "        ssl_options=tls.DEFAULT_OPTIONS,"]]}}, "param": {"ssl_options": {"?": [[46, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.http_serve_crafted": {"var": {"response_log": {"?": [[114, "        response_log = language.serve("]]}, "err": {"None": [[103, "            err = self.make_http_error_response(error)"]]}, "error": {"?": [[99, "        error, crafted = self.server.check_policy("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.handle_http_requ": {"var": {"http_version": {"?": [[145, "            http_version = req.http_version"]]}, "first_line_format": {"?": [[147, "            first_line_format = req.first_line_format"]]}, "valid_websocket_handshake": {"bool": [[180, "            valid_websocket_handshake = websockets.check_handshake(headers)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Pathod.log_by_id": {"var": {"i": {"?": [[424, "            for i in self.log:"]]}}, "param": {"self": {"Pathod": [[422, "    def log_by_id(self, identifier):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.PathodHandler.add": {"param": {"log": {"dict": [[293, "    def addlog(self, log):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathod.Path": {"func": {"add_log": {"(Pathod, dict) -> None / (Pathod, ?) -> None": [[409, "    def add_log(self, d):"]]}, "log_by_id": {"(Pathod, None) -> None / (Pathod, ?) -> None": [[422, "    def log_by_id(self, identifier):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/raw.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.r": {"class": {"ViewRaw": {"<ViewRaw>": [[7, "class ViewRaw(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.raw.ViewRaw.__call__": {"param": {"self": {"ViewRaw": [[10, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[10, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.raw.ViewRaw": {"var": {"name": {"str": [[8, "    name = \"Raw\""]]}}, "func": {"__call__": {"(ViewRaw, ?) -> (str, ?)": [[10, "    def __call__(self, data, **metadata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/docs/scripts/filters.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.docs.scripts.filters": {"var": {"i": {"(None, str)": [[7, "for i in flowfilter.help:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/hook-mitmproxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-mitmproxy": {"var": {"hiddenimports": {"[str]": [[1, "hiddenimports = [\"mitmproxy.script\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/recorder/a.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder": {"var": {"addons": {"[Recorder]": [[3, "addons = [recorder.Recorder(\"a\")]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/flowview.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.tab_tcp_stream": {"param": {"self": {"FlowDetails": [[95, "    def tab_tcp_stream(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_request": {"var": {"flow": {"FlowDetails -> ?": [[102, "        flow = self.flow"]]}}, "param": {"self": {"FlowDetails": [[101, "    def view_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetail": {"var": {"contentview_status_bar": {"?": [[128, "        contentview_status_bar = urwid.AttrWrap(urwid.Columns(cols), \"heading\")"]]}}, "func": {"view_request": {"FlowDetails -> Searchable": [[101, "    def view_request(self):"]]}, "tab_http_response": {"FlowDetails -> str": [[87, "    def tab_http_response(self):"]]}, "tab_tcp_stream": {"FlowDetails -> str": [[95, "    def tab_tcp_stream(self):"]]}, "view_tcp_stream": {"FlowDetails -> Searchable": [[131, "    def view_tcp_stream(self) -> urwid.Widget:"]]}, "view_response": {"FlowDetails -> Searchable": [[106, "    def view_response(self):"]]}, "_contentview_status_bar": {"(FlowDetails, ?, ?) -> None": [[111, "    def _contentview_status_bar(self, description: str, viewmode: str):"]]}, "focus_changed": {"FlowDetails -> None": [[62, "    def focus_changed(self):"]]}, "tab_http_request": {"FlowDetails -> str": [[79, "    def tab_http_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.tab_http_respon": {"param": {"self": {"FlowDetails": [[87, "    def tab_http_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.content_view": {"var": {"msg": {"str": [[180, "            msg, body = \"\", [urwid.Text([(\"error\", \"[content missing]\")])]"]]}, "full": {"?": [[183, "            full = self.master.commands.execute(\"view.settings.getval @focus fullcontents false\")"]]}, "limit": {"int": [[185, "                limit = sys.maxsize"]], "?": [[187, "                limit = ctx.options.content_view_lines_cutoff"]]}}, "param": {"self": {"FlowDetails": [[178, "    def content_view(self, viewmode, message):"]]}, "message": {"?": [[178, "    def content_view(self, viewmode, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails._get_content_view": {"var": {"chars_per_line": {"int": [[212, "        chars_per_line = 80"]]}, "description": {"str": [[202, "        description, lines, error = contentviews.get_message_content_view("], [209, "            description = \"No request content\""]]}, "text": {"?": [[220, "                    text = text[:max_chars - total_chars]"]]}, "total_chars": {"int": [[214, "        total_chars = 0"], [227, "            total_chars = int(math.ceil(total_chars / chars_per_line) * chars_per_line)"]]}, "text_objects": {"[?]": [[215, "        text_objects = []"]]}, "max_chars": {"int": [[213, "        max_chars = max_lines * chars_per_line"]]}, "message": {"None": [[200, "        message = self._get_content_view_message"]]}, "txt": {"[(?, ?)]": [[217, "            txt = []"]]}, "line": {"?": [[216, "        for line in lines:"]]}}, "param": {"self": {"FlowDetails": [[199, "    def _get_content_view(self, viewmode, max_lines, _):"]]}, "max_lines": {"int": [[199, "    def _get_content_view(self, viewmode, max_lines, _):"]]}, "_": {"int": [[199, "    def _get_content_view(self, viewmode, max_lines, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.focus_changed": {"param": {"self": {"FlowDetails": [[62, "    def focus_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails._get_content_": {"param": {"viewmode": {"?": [[199, "    def _get_content_view(self, viewmode, max_lines, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_response": {"var": {"flow": {"FlowDetails -> ?": [[107, "        flow = self.flow"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_tcp_stream": {"var": {"widget_lines": {"[?]": [[151, "        widget_lines = []"]]}, "line": {"?": [[157, "            for line in lines:"]]}, "flow": {"FlowDetails -> ?": [[132, "        flow = self.flow"]]}, "_": {"str": [[155, "            _, lines, _ = contentviews.get_tcp_content_view(viewmode, m)"]]}}, "param": {"self": {"FlowDetails": [[131, "    def view_tcp_stream(self) -> urwid.Widget:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_respon": {"param": {"self": {"FlowDetails": [[106, "    def view_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview": {"class": {"SearchError": {"<SearchError>": [[22, "class SearchError(Exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowView.__init__": {"param": {"self": {"FlowView": [[309, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[309, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view": {"param": {"self": {"FlowDetails": [[55, "    def view(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowViewHeader.focus_changed": {"var": {"cols": {"?": [[36, "        cols, _ = self.master.ui.get_cols_rows()"]]}}, "param": {"self": {"FlowViewHeader": [[35, "    def focus_changed(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_tcp_strea": {"var": {"from_client": {"None": [[142, "        from_client = None"]], "?": [[147, "                from_client = message.from_client"], [153, "        from_client = flow.messages[0].from_client"], [165, "            from_client = not from_client"]]}, "viewmode": {"?": [[138, "        viewmode = self.master.commands.call(\"console.flowview.mode\")"]]}, "m": {"?": [[154, "        for m in messages:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails._contentview_status_bar": {"var": {"cols": {"[?]": [[112, "        cols = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.tab_http_response": {"var": {"flow": {"FlowDetails -> ?": [[88, "        flow = self.flow"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.flow": {"param": {"self": {"FlowDetails": [[59, "    def flow(self) -> mitmproxy.flow.Flow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails": {"var": {"flow_modify_cache_invalidation": {"int": [[189, "            flow_modify_cache_invalidation = hash(("]]}}, "func": {"conn_text": {"(FlowDetails, ?) -> Searchable": [[240, "    def conn_text(self, conn):"]]}, "content_view": {"(FlowDetails, ?, ?) -> (str, [?])": [[178, "    def content_view(self, viewmode, message):"]]}, "flow": {"FlowDetails -> ?": [[59, "    def flow(self) -> mitmproxy.flow.Flow:"]]}, "_get_content_view": {"(FlowDetails, ?, ?, ?) -> (str, [?]) / (FlowDetails, ?, int, int) -> (str, [?])": [[199, "    def _get_content_view(self, viewmode, max_lines, _):"]]}, "__init__": {"? -> ?": [[48, "    def __init__(self, master):"]]}, "view": {"FlowDetails -> ?": [[55, "    def view(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.__init__": {"param": {"self": {"FlowDetails": [[48, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[48, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_tcp_str": {"var": {"message": {"?": [[144, "        for message in flow.messages:"]]}, "messages": {"[?]": [[143, "        messages = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_detai": {"param": {"self": {"FlowDetails": [[175, "    def view_details(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.tab_detai": {"param": {"self": {"FlowDetails": [[98, "    def tab_details(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.content_": {"param": {"viewmode": {"?": [[178, "    def content_view(self, viewmode, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowD": {"func": {"tab_details": {"FlowDetails -> str": [[98, "    def tab_details(self):"]]}, "view_details": {"FlowDetails -> None": [[175, "    def view_details(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.tab_http_request": {"var": {"flow": {"FlowDetails -> ?": [[80, "        flow = self.flow"]]}}, "param": {"self": {"FlowDetails": [[79, "    def tab_http_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.view_tcp_stre": {"var": {"markup": {"?": [[168, "            markup = widget_lines[-1].get_text()[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowViewHeader": {"func": {"focus_changed": {"FlowViewHeader -> None": [[35, "    def focus_changed(self):"]]}, "__init__": {"? -> ?": [[28, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowViewHeader.__init__": {"var": {"self": {"FlowViewHeader": [[29, "            self,"]]}, "master": {"ConsoleMaster": [[30, "            master: \"mitmproxy.tools.console.master.ConsoleMaster\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowv": {"class": {"FlowDetails": {"<FlowDetails>": [[47, "class FlowDetails(tabs.Tabs):"]]}, "FlowViewHeader": {"<FlowViewHeader>": [[26, "class FlowViewHeader(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowview.FlowDetails.conn_text": {"var": {"k": {"str": [[261, "                k = strutils.bytes_to_escaped_str(k) + \":\""]], "?": [[243, "            for k, v in conn.headers.fields:"]]}, "hdrs": {"[(str, str)]": [[242, "            hdrs = []"]]}, "v": {"str": [[262, "                v = strutils.bytes_to_escaped_str(v)"]]}}, "param": {"self": {"FlowDetails": [[240, "    def conn_text(self, conn):"]]}, "conn": {"?": [[240, "    def conn_text(self, conn):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/tcp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseH": {"func": {"get_alpn_proto_negotiated": {"ALPNHandler -> str / BaseHandler -> str / ClientConnection -> str / PathodHandler -> str": [[523, "    def get_alpn_proto_negotiated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.makesocket": {"param": {"self": {"{<TCPClient> | TCPClient}": [[413, "    def makesocket(self, family, type, proto):"]]}, "family": {"?": [[413, "    def makesocket(self, family, type, proto):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPCl": {"var": {"connection": {"?": [[457, "            connection = self.create_connection()"]]}}, "func": {"create_connection": {"(TCPClient, None) -> ? / (<TCPClient>, None) -> ?": [[417, "    def create_connection(self, timeout=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler": {"func": {"settimeout": {"(PathodHandler, ?) -> None / (handler, float) -> None / (BaseHandler, ?) -> None": [[520, "    def settimeout(self, n):"]]}, "handle": {"BaseHandler -> None": [[517, "    def handle(self):  # pragma: no cover"]]}, "__init__": {"? -> ?": [[488, "    def __init__(self, connection, address, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.reset_timestamp": {"param": {"self": {"Reader": [[70, "    def reset_timestamps(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.clo": {"param": {"self": {"{ServerConnection | TCPClient}": [[374, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClien": {"func": {"makesocket": {"(TCPClient, ?, ?, ?) -> ? / (<TCPClient>, ?, ?, ?) -> ?": [[413, "    def makesocket(self, family, type, proto):"]]}, "gettimeout": {"TCPClient -> ?": [[472, "    def gettimeout(self):"]]}, "settimeout": {"(TCPClient, float) -> None / (Pathoc, None) -> None / (<Pathoc>, None) -> None": [[469, "    def settimeout(self, n):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler.get_alpn_proto_negotiated": {"param": {"self": {"{ALPNHandler | BaseHandler | ClientConnection | PathodHandler}": [[523, "    def get_alpn_proto_negotiated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.connection_th": {"param": {"client_address": {"?": [[599, "    def connection_thread(self, connection, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.settimeout": {"param": {"self": {"{<Pathoc> | Pathoc | TCPClient}": [[469, "    def settimeout(self, n):"]]}, "n": {"float": [[469, "    def settimeout(self, n):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ssl_read_selec": {"param": {"rlist": {"[?]": [[211, "def ssl_read_select(rlist, timeout):"]]}, "timeout": {"{float | int}": [[211, "def ssl_read_select(rlist, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader.re": {"var": {"data": {"?": [[118, "                data = self.o.read(rlen)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader.peek": {"param": {"self": {"Reader": [[185, "    def peek(self, length):"]]}, "length": {"int": [[185, "    def peek(self, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader": {"func": {"peek": {"(Reader, int) -> ? / (Reader, ?) -> ?": [[185, "    def peek(self, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike": {"var": {"BLOCKSIZE": {"int": [[28, "    BLOCKSIZE = 1024 * 32"]]}}, "func": {"is_logging": {"_FileLike -> bool / Writer -> bool / Reader -> bool": [[55, "    def is_logging(self):"]]}, "stop_log": {"Reader -> None / _FileLike -> None": [[49, "    def stop_log(self):"]]}, "start_log": {"_FileLike -> None / Reader -> None / Writer -> None": [[41, "    def start_log(self):"]]}, "__init__": {"? -> ?": [[30, "    def __init__(self, o):"]]}, "add_log": {"(Writer, str) -> None / (Writer, ?) -> None / (Writer, None) -> None / (Reader, str) -> None": [[66, "    def add_log(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.convert_to_t": {"param": {"self": {"{<Pathoc> | Pathoc | ServerConnection | TCPClient}": [[384, "    def convert_to_tls(self, sni=None, alpn_protos=None, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Writer": {"func": {"flush": {"Writer -> ?": [[76, "    def flush(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.create_connection": {"var": {"res": {"?": [[422, "        for res in socket.getaddrinfo(self.address[0], self.address[1], 0, socket.SOCK_STREAM):"]]}, "sock": {"None": [[424, "            sock = None"]], "?": [[426, "                sock = self.makesocket(af, socktype, proto)"]]}, "err": {"None": [[421, "        err = None"]], "?": [[446, "                err = _"]]}, "af": {"?": [[423, "            af, socktype, proto, canonname, sa = res"]]}}, "param": {"self": {"{<TCPClient> | TCPClient}": [[417, "    def create_connection(self, timeout=None):"]]}, "timeout": {"None": [[417, "    def create_connection(self, timeout=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.conve": {"param": {"alpn_protos": {"None": [[384, "    def convert_to_tls(self, sni=None, alpn_protos=None, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.connect": {"param": {"self": {"{<TCPClient> | TCPClient}": [[455, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPCli": {"func": {"connect": {"TCPClient -> ConnectionCloser / <TCPClient> -> ConnectionCloser": [[455, "    def connect(self):"]]}, "convert_to_tls": {"(ServerConnection, None, None) -> ? / (TCPClient, None, None) -> ? / (Pathoc, None, None) -> ? / (<Pathoc>, None, None) -> ?": [[384, "    def convert_to_tls(self, sni=None, alpn_protos=None, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler.convert_to_tls": {"var": {"cert": {"?": [[511, "        cert = self.connection.get_peer_certificate()"]]}, "context": {"None": [[500, "        context = tls.create_server_context("]]}}, "param": {"cert": {"?": [[494, "    def convert_to_tls(self, cert, key, **sslctx_kwargs):"]]}, "key": {"?": [[494, "    def convert_to_tls(self, cert, key, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.wait_for_silenc": {"param": {"self": {"TCPServer": [[674, "    def wait_for_silence(self, timeout=5):"]]}, "timeout": {"int": [[674, "    def wait_for_silence(self, timeout=5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler.convert_to_t": {"param": {"self": {"{BaseHandler | PathodHandler}": [[494, "    def convert_to_tls(self, cert, key, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Writer.write": {"var": {"r": {"?": [[97, "                    r = self.o.write(v)"]]}}, "param": {"v": {"{None | str}": [[86, "    def write(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.handle_erro": {"param": {"client_address": {"?": [[649, "    def handle_error(self, connection_, client_address, fp=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connection._makefi": {"param": {"self": {"{<TCPClient> | TCPClient | _Connection}": [[282, "    def _makefile(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader.readline": {"var": {"ch": {"str": [[160, "            ch = self.read(1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Counter.__exit__": {"param": {"self": {"Counter": [[544, "    def __exit__(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader.readlin": {"var": {"bytes_read": {"int": [[156, "        bytes_read = 0"]]}, "result": {"str": [[155, "        result = b''"]]}}, "param": {"self": {"Reader": [[154, "    def readline(self, size=None):"]]}, "size": {"int": [[154, "    def readline(self, size=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.__init__": {"param": {"self": {"{<TCPClient> | TCPClient}": [[361, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}, "address": {"{(str, ?) | (str, int) | <Pathoc> | Pathoc | ServerConnection}": [[361, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.connection_thread": {"param": {"self": {"TCPServer": [[599, "    def connection_thread(self, connection, client_address):"]]}, "connection": {"?": [[599, "    def connection_thread(self, connection, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.__init": {"param": {"spoof_source_address": {"(?, int)": [[361, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}, "source_address": {"{(?, ?) | (str, ?) | (str, ProxyThread -> ?) | (str, int) | LazyPathoc | Pathoc | ServerConnection | str | tuple}": [[361, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.handle_client_connectio": {"param": {"client_address": {"?": [[663, "    def handle_client_connection(self, conn, client_address):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connection.finish": {"param": {"self": {"{<TCPClient> | PathodHandler | TCPClient | _Connection | handler | handler}": [[317, "    def finish(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.handle_client_connection": {"param": {"self": {"TCPServer": [[663, "    def handle_client_connection(self, conn, client_address):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.makesocke": {"param": {"proto": {"?": [[413, "    def makesocket(self, family, type, proto):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.wait_for_silence": {"var": {"start": {"int": [[675, "        start = time.time()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.serve_forever": {"var": {"connection": {"?": [[621, "                    connection, client_address = self.socket.accept()"]]}, "t": {"BaseThread": [[622, "                    t = basethread.BaseThread("]]}}, "param": {"self": {"{Pathod | TCPServer}": [[615, "    def serve_forever(self, poll_interval=0.1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.__init__": {"param": {"self": {"{<TCPServer> | TCPServer}": [[551, "    def __init__(self, address):"]]}, "address": {"{(str, int) | Pathod | _TServer}": [[551, "    def __init__(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler.__init__": {"param": {"self": {"{<BaseHandler> | ALPNHandler | BaseHandler | ClientCipherListHandler | EchoHandler | EchoHandler | HangHandler | HardDisconnectHandler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler | handler}": [[488, "    def __init__(self, connection, address, server):"]]}, "server": {"?": [[488, "    def __init__(self, connection, address, server):"]]}, "connection": {"PathodHandler": [[488, "    def __init__(self, connection, address, server):"]]}, "address": {"?": [[488, "    def __init__(self, connection, address, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.close_socket": {"var": {"_": {"int": [[263, "            for _ in range(1024 ** 3 // 4096):"]]}}, "param": {"sock": {"?": [[232, "def close_socket(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.is_logging": {"param": {"self": {"{Reader | Writer | _FileLike}": [[55, "    def is_logging(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.convert_to_tls": {"var": {"i": {"?": [[406, "        for i in self.connection.get_peer_cert_chain():"]]}, "context": {"?": [[385, "        context = tls.create_client_context("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ConnectionCloser.__exit__": {"param": {"self": {"ConnectionCloser": [[354, "    def __exit__(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.shutdown": {"param": {"self": {"TCPServer": [[643, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.get_log": {"param": {"self": {"{Reader | Writer | _FileLike}": [[58, "    def get_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.ssl_verification_error": {"param": {"self": {"TCPClient": [[371, "    def ssl_verification_error(self) -> Optional[exceptions.InvalidCertificateException]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Writer.writ": {"param": {"self": {"Writer": [[86, "    def write(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connection": {"var": {"wbufsize": {"int": [[280, "    wbufsize = -1"]]}, "rbufsize": {"int": [[279, "    rbufsize = -1"]]}}, "func": {"_makefile": {"_Connection -> None / <TCPClient> -> None / TCPClient -> None": [[282, "    def _makefile(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHand": {"func": {"convert_to_tls": {"(PathodHandler, ?, ?) -> ? / (BaseHandler, ?, ?) -> ?": [[494, "    def convert_to_tls(self, cert, key, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.start_log": {"param": {"self": {"{Reader | Writer | _FileLike}": [[41, "    def start_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Counter.count": {"param": {"self": {"Counter": [[536, "    def count(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader.read": {"var": {"start": {"int": [[111, "        start = time.time()"]]}, "rlen": {"int": [[114, "                rlen = self.BLOCKSIZE"], [116, "                rlen = length"]]}, "result": {"str": [[110, "        result = b''"]]}, "timeout": {"int": [[129, "                timeout = self.o.gettimeout() or 300"]]}}, "param": {"self": {"Reader": [[106, "    def read(self, length):"]]}, "length": {"int": [[106, "    def read(self, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient": {"func": {"close": {"TCPClient -> None / ServerConnection -> None": [[374, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ConnectionCloser": {"func": {"__exit__": {"ConnectionCloser -> None": [[354, "    def __exit__(self, *args):"]]}, "pop": {"ConnectionCloser -> ConnectionCloser": [[344, "    def pop(self):"]]}, "__init__": {"? -> ?": [[340, "    def __init__(self, conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.R": {"func": {"read": {"(Reader, ?) -> str / (Reader, int) -> str": [[106, "    def read(self, length):"]]}, "readline": {"(Reader, int) -> str / (Reader, None) -> str": [[154, "    def readline(self, size=None):"]]}, "safe_read": {"(Reader, ?) -> str / (Reader, int) -> str": [[170, "    def safe_read(self, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Cou": {"func": {"__enter__": {"Counter -> None": [[540, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.W": {"func": {"write": {"(Writer, str) -> ? / (Writer, None) -> ? / (Writer, ?) -> ?": [[86, "    def write(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClie": {"func": {"__init__": {"? -> ?": [[361, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.__getattr__": {"param": {"self": {"_FileLike": [[38, "    def __getattr__(self, attr):"]]}, "attr": {"?": [[38, "    def __getattr__(self, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Counter.__init__": {"param": {"self": {"Counter": [[531, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.get_alpn_proto_negotiated": {"param": {"self": {"{<Pathoc> | Pathoc | ServerConnection | TCPClient}": [[475, "    def get_alpn_proto_negotiated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ConnectionCloser.__init__": {"param": {"self": {"ConnectionCloser": [[340, "    def __init__(self, conn):"]]}, "conn": {"{<TCPClient> | TCPClient}": [[340, "    def __init__(self, conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.__init__": {"param": {"self": {"{Reader | Writer | _FileLike}": [[30, "    def __init__(self, o):"]]}, "o": {"?": [[30, "    def __init__(self, o):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer": {"func": {"handle_shutdown": {"TCPServer -> None": [[669, "    def handle_shutdown(self):"]]}, "shutdown": {"TCPServer -> None": [[643, "    def shutdown(self):"]]}, "__init__": {"? -> ?": [[551, "    def __init__(self, address):"]]}, "handle_client_connection": {"(TCPServer, ?, ?) -> None": [[663, "    def handle_client_connection(self, conn, client_address):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp": {"var": {"socket_fileobject": {"?": [[20, "socket_fileobject = socket.SocketIO"]]}, "IPPROTO_IPV6": {"?": [[24, "IPPROTO_IPV6 = getattr(socket, \"IPPROTO_IPV6\", 41)"]]}}, "class": {"_Connection": {"<_Connection>": [[277, "class _Connection:"]]}, "_FileLike": {"<_FileLike>": [[27, "class _FileLike:"]]}, "Counter": {"<Counter>": [[530, "class Counter:"]]}, "TCPClient": {"<TCPClient>": [[359, "class TCPClient(_Connection):"]]}, "BaseHandler": {"<BaseHandler>": [[482, "class BaseHandler(_Connection):"]]}, "Writer": {"<Writer>": [[74, "class Writer(_FileLike):"]]}, "TCPServer": {"<TCPServer>": [[549, "class TCPServer:"]]}, "ConnectionCloser": {"<ConnectionCloser>": [[339, "class ConnectionCloser:"]]}, "Reader": {"<Reader>": [[104, "class Reader(_FileLike):"]]}}, "func": {"close_socket": {"? -> ?": [[232, "def close_socket(sock):"]]}, "ssl_read_select": {"(?, ?) -> [?] / ([?], int) -> [?] / ([?], float) -> [?]": [[211, "def ssl_read_select(rlist, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Counter": {"func": {"count": {"Counter -> int": [[536, "    def count(self):"]]}, "__exit__": {"Counter -> None": [[544, "    def __exit__(self, *args):"]]}, "__init__": {"? -> ?": [[531, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.makesock": {"param": {"type": {"?": [[413, "    def makesocket(self, family, type, proto):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Counter.__enter__": {"param": {"self": {"Counter": [[540, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.stop_log": {"param": {"self": {"{Reader | _FileLike}": [[49, "    def stop_log(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ConnectionCloser.pop": {"param": {"self": {"ConnectionCloser": [[344, "    def pop(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.set_descriptor": {"param": {"self": {"{Reader | Writer}": [[35, "    def set_descriptor(self, o):"]]}, "o": {"?": [[35, "    def set_descriptor(self, o):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.convert_to_tl": {"param": {"sni": {"None": [[384, "    def convert_to_tls(self, sni=None, alpn_protos=None, **sslctx_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.handle_error": {"var": {"exc": {"str": [[656, "            exc = str(traceback.format_exc())"]]}}, "param": {"fp": {"?": [[649, "    def handle_error(self, connection_, client_address, fp=sys.stderr):"]]}, "self": {"{<TCPServer> | Pathod | TCPServer}": [[649, "    def handle_error(self, connection_, client_address, fp=sys.stderr):"]]}, "connection_": {"_TServer": [[649, "    def handle_error(self, connection_, client_address, fp=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPS": {"func": {"serve_forever": {"(Pathod, float) -> ? / (TCPServer, float) -> ?": [[615, "    def serve_forever(self, poll_interval=0.1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPClient.gettimeout": {"param": {"self": {"TCPClient": [[472, "    def gettimeout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPC": {"func": {"ssl_verification_error": {"TCPClient -> ?": [[371, "    def ssl_verification_error(self) -> Optional[exceptions.InvalidCertificateException]:"]]}, "get_alpn_proto_negotiated": {"TCPClient -> str / <Pathoc> -> str / Pathoc -> str / ServerConnection -> str": [[475, "    def get_alpn_proto_negotiated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.serve_foreve": {"var": {"r": {"[?]": [[619, "                r, w_, e_ = select.select([self.socket], [], [], poll_interval)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connectio": {"func": {"get_current_cipher": {"PathodHandler -> (?, ?, ?) / TCPClient -> (?, ?, ?) / handler -> (?, ?, ?) / Pathoc -> (?, ?, ?) / <Pathoc> -> (?, ?, ?)": [[308, "    def get_current_cipher(self):"]]}, "finish": {"PathodHandler -> ? / handler -> ? / _Connection -> ? / TCPClient -> ? / <TCPClient> -> ?": [[317, "    def finish(self):"]]}, "__init__": {"? -> ?": [[294, "    def __init__(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Reader.safe_read": {"var": {"result": {"str": [[175, "        result = self.read(length)"]]}}, "param": {"self": {"Reader": [[170, "    def safe_read(self, length):"]]}, "length": {"int": [[170, "    def safe_read(self, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ConnectionCloser.__enter__": {"param": {"self": {"ConnectionCloser": [[351, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.serve_f": {"param": {"poll_interval": {"float": [[615, "    def serve_forever(self, poll_interval=0.1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connection.get_current_ciph": {"var": {"version": {"?": [[314, "        version = self.connection.get_cipher_version()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler.settimeout": {"param": {"self": {"{BaseHandler | PathodHandler | handler}": [[520, "    def settimeout(self, n):"]]}, "n": {"float": [[520, "    def settimeout(self, n):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.Writer.flush": {"param": {"self": {"Writer": [[76, "    def flush(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.ConnectionClos": {"func": {"__enter__": {"ConnectionCloser -> ConnectionCloser": [[351, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLike.add_log": {"param": {"self": {"{Reader | Writer}": [[66, "    def add_log(self, v):"]]}, "v": {"{None | str}": [[66, "    def add_log(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.BaseHandler.hand": {"param": {"self": {"BaseHandler": [[517, "    def handle(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServ": {"func": {"connection_thread": {"(TCPServer, ?, ?) -> ?": [[599, "    def connection_thread(self, connection, client_address):"]]}, "handle_error": {"(<TCPServer>, _TServer, ?, ?) -> None / (TCPServer, ?, ?, ?) -> None / (Pathod, ?, ?, ?) -> None": [[649, "    def handle_error(self, connection_, client_address, fp=sys.stderr):"]]}, "wait_for_silence": {"(TCPServer, int) -> None": [[674, "    def wait_for_silence(self, timeout=5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.handle_client_connecti": {"param": {"conn": {"?": [[663, "    def handle_client_connection(self, conn, client_address):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connection.get_current_cipher": {"var": {"bits": {"?": [[313, "        bits = self.connection.get_cipher_bits()"]]}, "name": {"?": [[312, "        name = self.connection.get_cipher_name()"]]}}, "param": {"self": {"{<Pathoc> | Pathoc | PathodHandler | TCPClient | handler}": [[308, "    def get_current_cipher(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp.TCPServer.handle_shutdown": {"param": {"self": {"TCPServer": [[669, "    def handle_shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._Connection.__init__": {"param": {"self": {"_Connection": [[294, "    def __init__(self, connection):"]]}, "connection": {"?": [[294, "    def __init__(self, connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.tcp._FileLik": {"func": {"get_log": {"Writer -> str / _FileLike -> str / Reader -> str": [[58, "    def get_log(self):"]]}, "reset_timestamps": {"Reader -> None": [[70, "    def reset_timestamps(self):"]]}, "__getattr__": {"(_FileLike, ?) -> ?": [[38, "    def __getattr__(self, attr):"]]}, "set_descriptor": {"(Writer, ?) -> None / (Reader, ?) -> None": [[35, "    def set_descriptor(self, o):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/test_proxyauth_selenium.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_filter_Non": {"param": {"self": {"TestSeleniumAddon": [[89, "    def test_request_filter_None(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_seleniu": {"class": {"TestRandomString": {"<TestRandomString>": [[13, "class TestRandomString:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_filter_None": {"var": {"fltr": {"?": [[91, "        fltr = selenium_addon.filter"]]}, "f": {"?": [[90, "        f = tflow.tflow(resp=tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestRandomS": {"func": {"test_random_string": {"TestRandomString -> None": [[15, "    def test_random_string(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request": {"var": {"f": {"?": [[60, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestSeleniumAddon": [[59, "    def test_request(self, selenium_addon):"]]}, "selenium_addon": {"?": [[59, "    def test_request(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.AuthenticationOracleT": {"func": {"is_unauthorized_request": {"(AuthenticationOracleTest, ?) -> ?": [[26, "    def is_unauthorized_request(self, flow: HTTPFlow) -> bool:"]]}, "is_unauthorized_response": {"(AuthenticationOracleTest, ?) -> ?": [[29, "    def is_unauthorized_response(self, flow: HTTPFlow) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_cooki": {"param": {"self": {"TestSeleniumAddon": [[76, "    def test_request_cookies(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium": {"var": {"oracle": {"AuthenticationOracleTest": [[33, "oracle = AuthenticationOracleTest()"]]}}, "class": {"AuthenticationOracleTest": {"<AuthenticationOracleTest>": [[25, "class AuthenticationOracleTest(AuthorizationOracle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_cook": {"param": {"selenium_addon": {"?": [[76, "    def test_request_cookies(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestRandomString.test_random_string": {"var": {"res": {"?": [[16, "        res = randomString()"]]}, "res_5": {"?": [[20, "        res_5 = randomString(5)"]]}}, "param": {"self": {"TestRandomString": [[15, "    def test_random_string(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_response": {"var": {"f": {"?": [[104, "        f = tflow.tflow(resp=tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_filtered": {"var": {"f": {"?": [[70, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestSeleniumAddon": [[69, "    def test_request_filtered(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_replay": {"var": {"f": {"?": [[53, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestSeleniumAddon": [[52, "    def test_request_replay(self, selenium_addon):"]]}, "selenium_addon": {"?": [[52, "    def test_request_replay(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.selenium_addon": {"var": {"browser": {"?": [[40, "    browser = MagicMock()"]]}}, "param": {"request": {"?": [[37, "def selenium_addon(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_cookies": {"var": {"f": {"?": [[77, "        f = tflow.tflow(resp=tutils.tresp())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_respon": {"param": {"self": {"TestSeleniumAddon": [[103, "    def test_response(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth": {"func": {"selenium_addon": {"? -> None": [[37, "def selenium_addon(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.selenium_": {"var": {"addon": {"?": [[38, "    addon = SeleniumAddon(fltr=r\"~u http://example\\.com/login\\.php\", domain=r\"~d http://example\\.com\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_filter_N": {"param": {"selenium_addon": {"?": [[89, "    def test_request_filter_None(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_request_filter": {"param": {"selenium_addon": {"?": [[69, "    def test_request_filtered(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_response_cook": {"param": {"selenium_addon": {"?": [[111, "    def test_response_cookies(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAdd": {"func": {"test_response": {"(TestSeleniumAddon, ?) -> None": [[103, "    def test_response(self, selenium_addon):"]]}, "test_request_filter_None": {"(TestSeleniumAddon, ?) -> None": [[89, "    def test_request_filter_None(self, selenium_addon):"]]}, "test_response_cookies": {"(TestSeleniumAddon, ?) -> None": [[111, "    def test_response_cookies(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.selenium_addo": {"func": {"fin": {"() -> None": [[44, "    def fin():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon": {"func": {"test_request_filtered": {"(TestSeleniumAddon, ?) -> None": [[69, "    def test_request_filtered(self, selenium_addon):"]]}, "test_request_cookies": {"(TestSeleniumAddon, ?) -> None": [[76, "    def test_request_cookies(self, selenium_addon):"]]}, "test_request": {"(TestSeleniumAddon, ?) -> None": [[59, "    def test_request(self, selenium_addon):"]]}, "test_request_replay": {"(TestSeleniumAddon, ?) -> None": [[52, "    def test_request_replay(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_resp": {"param": {"selenium_addon": {"?": [[103, "    def test_response(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_response_cooki": {"param": {"self": {"TestSeleniumAddon": [[111, "    def test_response_cookies(self, selenium_addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_": {"class": {"TestSeleniumAddon": {"<TestSeleniumAddon>": [[50, "class TestSeleniumAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_proxyauth_selenium.TestSeleniumAddon.test_response_cookies": {"var": {"f": {"?": [[112, "        f = tflow.tflow(resp=tutils.tresp())"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/tabs.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs.keypress": {"var": {"n": {"int": [[37, "        n = len(self.tabs)"]]}}, "param": {"key": {"?": [[36, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tab": {"func": {"keypress": {"(Tabs, ?, ?) -> None": [[36, "    def keypress(self, size, key):"]]}, "show": {"HelpView -> None / FlowDetails -> None / Tabs -> None": [[46, "    def show(self):"]]}, "__init__": {"? -> ?": [[6, "    def __init__(self, offset, content, attr, onclick):"]]}, "mouse_event": {"(Tab, ?, ?, ?, ?, ?, ?) -> bool": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tab.mouse_event": {"param": {"self": {"Tab": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "row": {"?": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "focus": {"?": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "col": {"?": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}, "size": {"?": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs.__init__": {"param": {"tabs": {"?": [[25, "    def __init__(self, tabs, tab_offset=0):"]]}, "self": {"Tabs": [[25, "    def __init__(self, tabs, tab_offset=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.t": {"class": {"Tabs": {"<Tabs>": [[23, "class Tabs(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs.keypr": {"param": {"self": {"Tabs": [[36, "    def keypress(self, size, key):"]]}, "size": {"?": [[36, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs": {"func": {"change_tab": {"(Tabs, ?) -> None / (Tabs, int) -> None / (Tab, int) -> None": [[32, "    def change_tab(self, offset):"]]}, "__init__": {"? -> ?": [[25, "    def __init__(self, tabs, tab_offset=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs.change_tab": {"param": {"self": {"{Tab | Tabs}": [[32, "    def change_tab(self, offset):"]]}, "offset": {"int": [[32, "    def change_tab(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tab.__init__": {"var": {"p": {"?": [[10, "        p = urwid.Text(content, align=\"center\")"], [11, "        p = urwid.Padding(p, align=\"center\", width=(\"relative\", 100))"], [12, "        p = urwid.AttrWrap(p, attr)"]]}}, "param": {"content": {"?": [[6, "    def __init__(self, offset, content, attr, onclick):"]]}, "self": {"Tab": [[6, "    def __init__(self, offset, content, attr, onclick):"]]}, "attr": {"str": [[6, "    def __init__(self, offset, content, attr, onclick):"]]}, "onclick": {"(Tabs, ?) -> None / (Tabs, int) -> None / (Tab, int) -> None": [[6, "    def __init__(self, offset, content, attr, onclick):"]]}, "offset": {"int": [[6, "    def __init__(self, offset, content, attr, onclick):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs.show": {"var": {"i": {"int": [[51, "        for i in range(len(self.tabs)):"]]}, "headers": {"[Tab]": [[50, "        headers = []"]], "?": [[71, "        headers = urwid.Columns(headers, dividechars=1)"]]}, "txt": {"?": [[52, "            txt = self.tabs[i][0]()"]]}}, "param": {"self": {"{FlowDetails | HelpView | Tabs}": [[46, "    def show(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tabs.__ini": {"param": {"tab_offset": {"int": [[25, "    def __init__(self, tabs, tab_offset=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs": {"class": {"Tab": {"<Tab>": [[4, "class Tab(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tab.mouse_eve": {"param": {"button": {"?": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.tabs.Tab.mouse_": {"param": {"event": {"?": [[17, "    def mouse_event(self, size, event, button, col, row, focus):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_termstatus.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_termstatus.test_configure": {"var": {"ts": {"TermStatus": [[10, "    ts = termstatus.TermStatus()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/web/test_master.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_master.TestWebMaster.mkmaster": {"var": {"o": {"Options": [[11, "        o = options.Options(**opts)"]]}}, "param": {"self": {"TestWebMaster": [[10, "    def mkmaster(self, **opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_master.TestWebM": {"func": {"mkmaster": {"TestWebMaster -> WebMaster": [[10, "    def mkmaster(self, **opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_master.TestWebMaster.test_basic": {"var": {"i": {"int": [[17, "        for i in (1, 2, 3):"]]}, "m": {"WebMaster": [[16, "        m = self.mkmaster()"]]}}, "param": {"self": {"TestWebMaster": [[15, "    async def test_basic(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_m": {"class": {"TestWebMaster": {"<TestWebMaster>": [[9, "class TestWebMaster(tservers.MasterTest):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-modify-form.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-modify-form": {"func": {"request": {"? -> None": [[5, "def request(flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/typecheck.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils": {"func": {"check_option_type": {"(str, int, ?) -> ? / (str, int, <int>) -> ? / (str, None, ?) -> None / (str, [?], ?) -> None / (str, ?, None) -> None / (str, ?, ? -> bool) -> None / (str, ?, ?) -> None / (str, str, <str>) -> None / (str, str, ?) -> None / (str, str, None) -> None": [[28, "def check_option_type(name: str, value: typing.Any, typeinfo: Type) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.typecheck.check_option_typ": {"var": {"e": {"TypeError": [[34, "    e = TypeError(\"Expected {} for {}, but got {}.\".format("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.typecheck.typespec_to_str": {"var": {"t": {"str": [[81, "        t = 'optional str'"], [83, "        t = 'sequence of str'"], [85, "        t = 'optional int'"]], "?": [[79, "        t = typespec.__name__"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.typecheck.check_option_": {"var": {"typename": {"str": [[40, "    typename = str(typeinfo)"]]}, "types": {"None": [[52, "        types = tuple_types(typeinfo)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.typecheck": {"var": {"Type": {"?": [[3, "Type = typing.Union["]]}}, "func": {"union_types": {"<int> -> None / <str> -> None / ? -> None / ? -> bool -> None / None -> None": [[18, "def union_types(typeinfo: typing.Type[typing.Tuple]) -> typing.Sequence[Type]:"]]}, "tuple_types": {"<int> -> None / <str> -> None / None -> None / ? -> None / ? -> bool -> None": [[13, "def tuple_types(typeinfo: typing.Type[typing.Tuple]) -> typing.Sequence[Type]:"]]}, "typespec_to_str": {"<dict> -> str / ? -> str / <str> -> str": [[77, "def typespec_to_str(typespec: typing.Any) -> str:"]]}, "mapping_types": {"? -> None / None -> None": [[23, "def mapping_types(typeinfo: typing.Type[typing.Mapping]) -> typing.Tuple[Type, Type]:"]]}, "sequence_type": {"<int> -> None / <str> -> None / None -> None / ? -> None / ? -> bool -> None": [[8, "def sequence_type(typeinfo: typing.Type[typing.List]) -> Type:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.typecheck.check_option_type": {"var": {"i": {"?": [[57, "        for i, (x, T) in enumerate(zip(value, types)):"]]}, "T": {"None": [[61, "        T = sequence_type(typeinfo)"]], "?": [[43, "        for T in union_types(typeinfo):"]]}, "v": {"str": [[64, "        for v in value:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protoco": {"var": {"__all__": {"[str]": [[41, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/statusbar.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusB": {"func": {"redraw": {"StatusBar -> None": [[291, "    def redraw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar": {"func": {"execute_command": {"(ActionBar, ?) -> None": [[111, "    def execute_command(self, txt):"]]}, "selectable": {"ActionBar -> ?": [[135, "    def selectable(self):"]]}, "sig_message": {"(ActionBar, ?, ?, int) -> None": [[50, "    def sig_message(self, sender, message, expire=1):"]]}, "__init__": {"? -> ?": [[37, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.shorten_messag": {"var": {"first_line": {"str": [[89, "            first_line = first_line[:shortening_index] + msg_end"]], "?": [[80, "        first_line = msg_lines[0]"]]}}, "param": {"self": {"ActionBar": [[66, "    def shorten_message(self, msg, max_width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.get_status": {"var": {"r": {"[{(str, str) | str}]": [[204, "        r = []"]]}, "creplay": {"?": [[207, "        creplay = self.master.commands.call(\"replay.client.count\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.PromptPath.__init__": {"param": {"callback": {"?": [[14, "    def __init__(self, callback, args):"]]}, "self": {"PromptPath": [[14, "    def __init__(self, callback, args):"]]}, "args": {"?": [[14, "    def __init__(self, callback, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.shorten_messa": {"var": {"msg_end": {"str": [[76, "        msg_end = \"\\u2026\"  # unicode ellipsis for the end of shortened message"]]}, "shortening_index": {"int": [[88, "            shortening_index = max(0, max_width - len(prompt) - len(msg_end))"]]}, "msg_lines": {"?": [[79, "        msg_lines = msg_text.split(\"\\n\")"]]}, "line_length": {"int": [[83, "            line_length = len(first_line) + len(prompt)"], [85, "            line_length = len(first_line)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBa": {"func": {"keypress": {"StatusBar -> None": [[200, "    def keypress(self, *args, **kwargs):"]]}, "refresh": {"StatusBar -> None": [[193, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_promp": {"param": {"text": {"?": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.PromptPath.__call__": {"var": {"pth": {"?": [[20, "        pth = os.path.expanduser(pth)"]]}}, "param": {"self": {"PromptPath": [[17, "    def __call__(self, pth):"]]}, "pth": {"?": [[17, "    def __call__(self, pth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusb": {"class": {"ActionBar": {"<ActionBar>": [[35, "class ActionBar(urwid.WidgetWrap):"]]}, "StatusBar": {"<StatusBar>": [[174, "class StatusBar(urwid.WidgetWrap):"]]}, "PromptPath": {"<PromptPath>": [[13, "class PromptPath:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.sig_": {"param": {"updated": {"None": [[197, "    def sig_update(self, sender, flow=None, updated=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.red": {"var": {"arrow": {"str": [[299, "            arrow = common.SYMBOL_UP"], [301, "            arrow = common.SYMBOL_DOWN"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.prompt_execute": {"var": {"msg": {"?": [[169, "        msg = p(txt)"]]}, "p": {"None": [[167, "        p = self.prompting"]]}}, "param": {"txt": {"?": [[166, "    def prompt_execute(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.execute_command": {"var": {"execute": {"CommandExecutor": [[114, "        execute = commandexecutor.CommandExecutor(self.master)"]]}}, "param": {"self": {"ActionBar": [[111, "    def execute_command(self, txt):"]]}, "txt": {"?": [[111, "    def execute_command(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar": {"var": {"REFRESHTIME": {"float": [[175, "    REFRESHTIME = 0.5  # Timed refresh time in seconds"]]}, "keyctx": {"str": [[176, "    keyctx = \"\""]]}}, "func": {"selectable": {"StatusBar -> ?": [[325, "    def selectable(self):"]]}, "get_status": {"StatusBar -> [{(str, str) | str}]": [[203, "    def get_status(self):"]]}, "__init__": {"? -> ?": [[178, "    def __init__("]]}, "sig_update": {"(StatusBar, ?, None, None) -> None": [[197, "    def sig_update(self, sender, flow=None, updated=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.PromptPath": {"func": {"__call__": {"(PromptPath, ?) -> ?": [[17, "    def __call__(self, pth):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, callback, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.keypr": {"param": {"self": {"ActionBar": [[138, "    def keypress(self, size, k):"]]}, "size": {"?": [[138, "    def keypress(self, size, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.shorten_message": {"var": {"disp_attr": {"None": [[73, "            disp_attr, msg_text = None, msg"]], "?": [[71, "            disp_attr, msg_text = msg"]]}, "prompt": {"str": [[77, "        prompt = \"(more in eventlog)\""], [92, "                prompt = \"\""]]}}, "param": {"msg": {"str": [[66, "    def shorten_message(self, msg, max_width):"]]}, "max_width": {"int": [[66, "    def shorten_message(self, msg, max_width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.sig_updat": {"param": {"self": {"StatusBar": [[197, "    def sig_update(self, sender, flow=None, updated=None):"]]}, "sender": {"?": [[197, "    def sig_update(self, sender, flow=None, updated=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.PromptStub.__init__": {"param": {"callback": {"?": [[28, "    def __init__(self, callback, args):"]]}, "self": {"PromptStub": [[28, "    def __init__(self, callback, args):"]]}, "args": {"()": [[28, "    def __init__(self, callback, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_prompt": {"param": {"callback": {"?": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}, "self": {"ActionBar": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}, "args": {"()": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}, "sender": {"?": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.sig_update": {"param": {"flow": {"None": [[197, "    def sig_update(self, sender, flow=None, updated=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.__init__": {"var": {"self": {"StatusBar": [[179, "            self, master: \"mitmproxy.tools.console.master.ConsoleMaster\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.selectab": {"param": {"self": {"StatusBar": [[325, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.keypr": {"param": {"self": {"StatusBar": [[200, "    def keypress(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.selectab": {"param": {"self": {"ActionBar": [[135, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_": {"param": {"message": {"?": [[50, "    def sig_message(self, sender, message, expire=1):"]]}, "prompt": {"?": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.get_statu": {"var": {"sreplay": {"?": [[206, "        sreplay = self.master.commands.call(\"replay.server.count\")"]]}, "opts": {"[str]": [[260, "        opts = []"]]}}, "param": {"self": {"StatusBar": [[203, "    def get_status(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.prompt_don": {"param": {"self": {"ActionBar": [[160, "    def prompt_done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.PromptStub": {"func": {"__call__": {"(PromptStub, ?) -> ?": [[31, "    def __call__(self, txt):"]]}, "__init__": {"? -> ?": [[28, "    def __init__(self, callback, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionB": {"func": {"sig_prompt_command": {"(ActionBar, ?, str, None) -> None": [[101, "    def sig_prompt_command(self, sender, partial: str = \"\", cursor: Optional[int] = None):"]]}, "clear": {"ActionBar -> None": [[156, "    def clear(self):"]]}, "shorten_message": {"(ActionBar, str, int) -> {[(str, str)] | str} / (ActionBar, ?, int) -> [(str, str)] / (ActionBar, ?, ?) -> [(str, str)]": [[66, "    def shorten_message(self, msg, max_width):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBa": {"func": {"prompt_execute": {"(ActionBar, ?) -> None": [[166, "    def prompt_execute(self, txt):"]]}, "sig_prompt": {"(ActionBar, ?, ?, ?, ?, ()) -> None": [[96, "    def sig_prompt(self, sender, prompt, text, callback, args=()):"]]}, "sig_prompt_onekey": {"(ActionBar, ?, ?, ?, ?, ()) -> None": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}, "keypress": {"(ActionBar, ?, ?) -> None": [[138, "    def keypress(self, size, k):"]]}, "prep_prompt": {"(ActionBar, ?) -> str": [[63, "    def prep_prompt(self, p):"]]}, "prompt_done": {"ActionBar -> None": [[160, "    def prompt_done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_message": {"var": {"cols": {"?": [[53, "        cols, _ = self.master.ui.get_cols_rows()"]]}, "w": {"?": [[54, "        w = urwid.Text(self.shorten_message(message, cols))"]]}}, "func": {"cb": {"() -> None": [[57, "            def cb(*args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.redraw": {"var": {"boundaddr": {"str": [[317, "            boundaddr = \"\""]], "?": [[315, "            boundaddr = \"[%s:%s]\" % (host, self.master.options.listen_port)"]]}, "status": {"?": [[319, "        status = urwid.AttrWrap(urwid.Columns(["]]}, "marked": {"str": [[303, "        marked = \"\""], [305, "            marked = \"M\""]]}, "host": {"str": [[314, "                host = \"*\""]], "?": [[312, "            host = self.master.options.listen_host"]]}, "fc": {"?": [[292, "        fc = self.master.commands.execute(\"view.properties.length\")"]]}, "t": {"[(str, ?)]": [[307, "        t = ["]]}, "offset": {"int": [[294, "            offset = 0"], [296, "            offset = self.master.view.focus.index + 1"]]}}, "param": {"self": {"StatusBar": [[291, "    def redraw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusba": {"class": {"PromptStub": {"<PromptStub>": [[27, "class PromptStub:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.clear": {"param": {"self": {"ActionBar": [[156, "    def clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.prep_prompt": {"param": {"p": {"?": [[63, "    def prep_prompt(self, p):"]]}, "self": {"ActionBar": [[63, "    def prep_prompt(self, p):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.prompt_execut": {"param": {"self": {"ActionBar": [[166, "    def prompt_execute(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.keypress": {"var": {"text": {"?": [[148, "                text = self._w.get_edit_text()"]]}}, "param": {"k": {"?": [[138, "    def keypress(self, size, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.StatusBar.refresh": {"param": {"self": {"StatusBar": [[193, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.PromptStub.__call__": {"param": {"self": {"PromptStub": [[31, "    def __call__(self, txt):"]]}, "txt": {"?": [[31, "    def __call__(self, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_prompt_on": {"param": {"keys": {"?": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_prompt_onekey": {"var": {"i": {"?": [[125, "        for i, e in enumerate(keys):"]]}, "prompt": {"[str]": [[123, "        prompt = [prompt, \" (\"]"]]}, "mkup": {"[str]": [[124, "        mkup = []"]]}}, "param": {"callback": {"?": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}, "self": {"ActionBar": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}, "args": {"()": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}, "prompt": {"?": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}, "sender": {"?": [[117, "    def sig_prompt_onekey(self, sender, prompt, keys, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.sig_messag": {"param": {"self": {"ActionBar": [[50, "    def sig_message(self, sender, message, expire=1):"]]}, "expire": {"int": [[50, "    def sig_message(self, sender, message, expire=1):"]]}, "sender": {"?": [[50, "    def sig_message(self, sender, message, expire=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.statusbar.ActionBar.__init__": {"param": {"self": {"ActionBar": [[37, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[37, "    def __init__(self, master):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_arg_check.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_arg_check.ault": {"var": {"f": {"?": [[32, "    f = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_arg_check.aul": {"param": {"output": {"?": [[31, "def test_check_args(arg, output):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/wsgiapp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgiapp.WSGIApp.request": {"param": {"self": {"WSGIApp": [[40, "    def request(self, f):"]]}, "f": {"?": [[40, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgiapp.WSGIApp.serv": {"var": {"err": {"?": [[30, "        err = app.serve("]]}}, "param": {"self": {"WSGIApp": [[20, "    def serve(self, app, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgiapp.WSGIApp": {"func": {"request": {"(WSGIApp, ?) -> None": [[40, "    def request(self, f):"]]}, "serve": {"(WSGIApp, ?, ?) -> None": [[20, "    def serve(self, app, flow):"]]}, "name": {"WSGIApp -> ?": [[17, "    def name(self):"]]}, "__init__": {"? -> ?": [[13, "    def __init__(self, app, host, port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgia": {"class": {"WSGIApp": {"<WSGIApp>": [[8, "class WSGIApp:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgiapp.WSGIApp.nam": {"param": {"self": {"WSGIApp": [[17, "    def name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgiapp.WSGIApp.__init__": {"param": {"host": {"str": [[13, "    def __init__(self, app, host, port):"]]}, "self": {"WSGIApp": [[13, "    def __init__(self, app, host, port):"]]}, "app": {"(?, ?) -> None": [[13, "    def __init__(self, app, host, port):"]]}, "port": {"int": [[13, "    def __init__(self, app, host, port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.wsgiapp.WSGIApp.serve": {"var": {"app": {"WSGIAdaptor": [[24, "        app = wsgi.WSGIAdaptor("]]}}, "param": {"app": {"?": [[20, "    def serve(self, app, flow):"]]}, "flow": {"?": [[20, "    def serve(self, app, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/hook-cryptography.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-": {"var": {"cryptography_dir": {"?": [[40, "cryptography_dir = os.path.dirname(get_module_file_attribute('cryptography'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-cryptography": {"var": {"f": {"?": [[43, "    for f in ffimods:"]]}, "hiddenimports": {"?": [[29, "hiddenimports = collect_submodules('cryptography.hazmat.backends')"]]}, "ext": {"?": [[41, "for ext in EXTENSION_SUFFIXES:"]]}, "ffimods": {"?": [[42, "    ffimods = glob.glob(os.path.join(cryptography_dir, '*_cffi_*%s*' % ext))"]]}, "binaries": {"[(?, str)]": [[39, "binaries = []"]]}, "datas": {"?": [[26, "datas = copy_metadata('cryptography')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/modify_body_inject_iframe.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_iframe": {"var": {"addons": {"[Injector]": [[26, "addons = [Injector()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_iframe.Injector.load": {"param": {"self": {"Injector": [[7, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_iframe.Inject": {"param": {"loader": {"?": [[7, "    def load(self, loader):"]]}}, "func": {"response": {"(Injector, ?) -> None": [[12, "    def response(self, flow: http.HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_ifram": {"class": {"Injector": {"<Injector>": [[6, "class Injector:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_iframe.Injector.respons": {"var": {"iframe": {"?": [[16, "                iframe = html.new_tag("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_iframe.Injector": {"func": {"load": {"(Injector, ?) -> None": [[7, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.modify_body_inject_iframe.Injector.response": {"var": {"html": {"?": [[14, "            html = BeautifulSoup(flow.response.content, \"html.parser\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/protocols/websockets.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.websockets.WebsocketsProtocol.__init__": {"param": {"self": {"WebsocketsProtocol": [[10, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.websockets.WebsocketsProtocol.__ini": {"param": {"pathod_handler": {"?": [[10, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.websockets.WebsocketsPr": {"func": {"handle_websocket": {"(WebsocketsProtocol, ?) -> (None, None)": [[13, "    def handle_websocket(self, logger):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.w": {"class": {"WebsocketsProtocol": {"<WebsocketsProtocol>": [[8, "class WebsocketsProtocol:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.websockets.WebsocketsProtocol.handle_websock": {"var": {"started": {"int": [[16, "                started = time.time()"]]}, "nest": {"?": [[38, "                nest = frm.payload[len(ld):]"]]}, "retlog": {"dict": [[24, "            retlog = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.websockets.WebsocketsProtocol": {"func": {"__init__": {"? -> ?": [[10, "    def __init__(self, pathod_handler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols.websockets.WebsocketsProtocol.handle_websocket": {"var": {"ended": {"int": [[22, "                ended = time.time()"]]}, "ld": {"str": [[36, "            ld = language.websockets.NESTED_LEADER"]]}, "wf_gen": {"?": [[40, "                    wf_gen = language.parse_websocket_frame(nest.decode())"]]}, "frm": {"Frame": [[18, "                    frm = websockets.Frame.from_file(self.pathod_handler.rfile)"]], "?": [[47, "                for frm in wf_gen:"]]}, "frame_log": {"dict": [[49, "                        frame_log = language.serve("]]}}, "param": {"self": {"WebsocketsProtocol": [[13, "    def handle_websocket(self, logger):"]]}, "logger": {"?": [[13, "    def handle_websocket(self, logger):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_palettes.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_palettes.TestPalette.test_helptext": {"var": {"i": {"<list>": [[10, "        for i in palettes.palettes.values():"], [12, "        for i in palettes.palettes.values():"]]}}, "param": {"self": {"TestPalette": [[9, "    def test_helptext(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_palettes.TestPa": {"func": {"test_helptext": {"TestPalette -> None": [[9, "    def test_helptext(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_p": {"class": {"TestPalette": {"<TestPalette>": [[7, "class TestPalette:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console": {"var": {"__all__": {"[str]": [[4, "__all__ = [\"master\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/helper_tools/memoryleak.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.memoryleak.requ": {"var": {"all_objects": {"?": [[32, "        all_objects = muppy.get_objects()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.memoryleak": {"var": {"step": {"int": [[11, "step = 0"]]}, "__memory_locals__": {"bool": [[12, "__memory_locals__ = True"]]}}, "func": {"request": {"(?, ?) -> None": [[24, "def request(ctx, flow):"]]}, "str_fun": {"? -> str": [[15, "def str_fun(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.memoryleak.str_fun": {"param": {"obj": {"?": [[15, "def str_fun(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.memoryleak.reques": {"param": {"ctx": {"?": [[24, "def request(ctx, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.helper_tools.memoryleak.request": {"var": {"ib": {"?": [[35, "        ib = refbrowser.InteractiveBrowser(ssl, 2, str_fun, repeat=False)"]]}}, "param": {"flow": {"?": [[24, "def request(ctx, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/script/test_concurrent.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestConcurrent.test_concurrent_err": {"param": {"tdata": {"?": [[36, "    async def test_concurrent_err(self, tdata):"]]}, "self": {"TestConcurrent": [[36, "    async def test_concurrent_err(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestConcurrent.test_concurrent_class": {"var": {"f1": {"?": [[52, "            f1, f2 = tflow.tflow(), tflow.tflow()"]]}}, "param": {"tdata": {"?": [[45, "    def test_concurrent_class(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent": {"class": {"Thing": {"<Thing>": [[12, "class Thing:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestConcurrent.test_concurrent_cla": {"var": {"sc": {"?": [[47, "            sc = tctx.script("]]}}, "param": {"self": {"TestConcurrent": [[45, "    def test_concurrent_class(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.Thing": {"func": {"__init__": {"? -> ?": [[13, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestC": {"func": {"test_concurrent_class": {"(TestConcurrent, ?) -> None": [[45, "    def test_concurrent_class(self, tdata):"]]}, "test_concurrent": {"(TestConcurrent, ?) -> None": [[19, "    def test_concurrent(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestConcurrent.test_concurren": {"var": {"start": {"int": [[29, "            start = time.time()"]]}}, "param": {"tdata": {"?": [[19, "    def test_concurrent(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_": {"class": {"TestConcurrent": {"<TestConcurrent>": [[18, "class TestConcurrent(tservers.MasterTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.Thing.__init__": {"param": {"self": {"Thing": [[13, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestConcurrent.test_concurrent": {"var": {"sc": {"?": [[21, "            sc = tctx.script("]]}, "f1": {"?": [[26, "            f1, f2 = tflow.tflow(), tflow.tflow()"]]}}, "param": {"self": {"TestConcurrent": [[19, "    def test_concurrent(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.script.test_concurrent.TestConcurrent.test_concurrent_cl": {"var": {"start": {"int": [[55, "            start = time.time()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_pathod.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestHexdump.test_hexdump": {"param": {"self": {"TestHexdump": [[101, "    def test_hexdump(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestCustomCert": {"var": {"ssl": {"bool": [[61, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestCustomCert.test_connect": {"var": {"r": {"?": [[67, "        r, _ = self.pathoc([r\"get:/p/202\"])"], [68, "        r = r[0]"]]}}, "param": {"self": {"TestCustomCert": [[66, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_parserr": {"param": {"self": {"CommonTests": [[142, "    def test_parserr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_ancho": {"var": {"rsp": {"?": [[152, "        rsp = self.getpath(\"/anchor/foo\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_invalid_content_length": {"var": {"l": {"?": [[169, "        l = self.d.last_log()"]]}}, "param": {"self": {"CommonTests": [[166, "    def test_invalid_content_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_websocket_frame_disconnect_error": {"param": {"self": {"CommonTests": [[216, "    def test_websocket_frame_disconnect_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemon": {"var": {"ssl": {"bool": [[222, "    ssl = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestHTTP": {"func": {"test_http2": {"TestHTTP2 -> None": [[262, "    def test_http2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestNotAfterConnec": {"var": {"ssloptions": {"dict": [[48, "    ssloptions = dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestSSLCN.test_connect": {"var": {"r": {"?": [[81, "        r, _ = self.pathoc([r\"get:/p/202\"])"], [82, "        r = r[0]"]]}}, "param": {"self": {"TestSSLCN": [[80, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_preline": {"var": {"r": {"?": [[128, "        r, _ = self.pathoc([r\"get:'/p/200':i0,'\\r\\n'\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_binarydata": {"param": {"self": {"CommonTests": [[116, "    def test_binarydata(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_sizelimit": {"var": {"r": {"?": [[122, "        r = self.get(\"200:b@1g\")"]]}, "l": {"?": [[124, "        l = self.d.last_log()"]]}}, "param": {"self": {"CommonTests": [[121, "    def test_sizelimit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_source_access_denied": {"var": {"rsp": {"?": [[185, "        rsp = self.get(\"200:b</foo\")"]]}}, "param": {"self": {"CommonTests": [[184, "    def test_source_access_denied(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_patho": {"var": {"cdata": {"Data": [[13, "cdata = data.Data(__name__)"]]}}, "class": {"TestHexdump": {"<TestHexdump>": [[98, "class TestHexdump(tservers.DaemonTests):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_static": {"var": {"rsp": {"?": [[147, "        rsp = self.get(\"200:b<file\")"]]}}, "param": {"self": {"CommonTests": [[146, "    def test_static(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestNotAfterConnect.test_connect": {"var": {"r": {"?": [[53, "        r, _ = self.pathoc("]]}}, "param": {"self": {"TestNotAfterConnect": [[52, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestHTTP2.test_http2": {"var": {"r": {"?": [[263, "        r, _ = self.pathoc([\"GET:/\"], ssl=True, use_http2=True)"]]}}, "param": {"self": {"TestHTTP2": [[262, "    def test_http2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestNotAfterConnect": {"var": {"ssl": {"bool": [[47, "    ssl = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod": {"class": {"TestDaemon": {"<TestDaemon>": [[221, "class TestDaemon(CommonTests):"]]}, "TestNohang": {"<TestNohang>": [[88, "class TestNohang(tservers.DaemonTests):"]]}, "TestCustomCert": {"<TestCustomCert>": [[60, "class TestCustomCert(tservers.DaemonTests):"]]}, "TestSSLCN": {"<TestSSLCN>": [[74, "class TestSSLCN(tservers.DaemonTests):"]]}, "TestTimeout": {"<TestTimeout>": [[33, "class TestTimeout(tservers.DaemonTests):"]]}, "TestNocraft": {"<TestNocraft>": [[105, "class TestNocraft(tservers.DaemonTests):"]]}, "TestDaemonSSL": {"<TestDaemonSSL>": [[237, "class TestDaemonSSL(CommonTests):"]]}, "CommonTests": {"<CommonTests>": [[114, "class CommonTests(tservers.DaemonTests):"]]}, "TestNotAfterConnect": {"<TestNotAfterConnect>": [[46, "class TestNotAfterConnect(tservers.DaemonTests):"]]}, "TestHTTP2": {"<TestHTTP2>": [[258, "class TestHTTP2(tservers.DaemonTests):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestTimeout.test_timeout": {"param": {"self": {"TestTimeout": [[36, "    def test_timeout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemonSSL.test_ssl_conn_failur": {"param": {"self": {"TestDaemonSSL": [[240, "    def test_ssl_conn_failure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_log": {"param": {"self": {"CommonTests": [[131, "    def test_logs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_p": {"class": {"TestPathod": {"<TestPathod>": [[16, "class TestPathod:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_invalid_header": {"param": {"self": {"CommonTests": [[173, "    def test_invalid_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestPathod.test_logging": {"var": {"p": {"Pathod": [[20, "        p = pathod.Pathod((\"127.0.0.1\", 0), logfp=s)"]]}, "s": {"?": [[19, "        s = io.StringIO()"]]}, "id": {"None": [[22, "        id = p.add_log(dict(s=\"foo\"))"]]}, "_": {"int": [[28, "        for _ in range(p.LOGBUF + 1):"]]}}, "param": {"self": {"TestPathod": [[18, "    def test_logging(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestHTTP2": {"var": {"ssl": {"bool": [[259, "    ssl = True"]]}, "nohang": {"bool": [[260, "    nohang = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_websocket_fram": {"param": {"self": {"CommonTests": [[200, "    def test_websocket_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemonSSL.test_ssl_conn_failure": {"var": {"c": {"TCPClient": [[241, "        c = tcp.TCPClient((\"localhost\", self.d.port))"]]}, "l": {"?": [[248, "            l = self.d.last_log()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonT": {"func": {"test_source_access_denied": {"CommonTests -> None": [[184, "    def test_source_access_denied(self):"]]}, "test_disconnect": {"CommonTests -> None": [[138, "    def test_disconnect(self):"]]}, "test_invalid_headers": {"CommonTests -> None": [[173, "    def test_invalid_headers(self):"]]}, "test_websocket_frame_disconnect_error": {"CommonTests -> None": [[216, "    def test_websocket_frame_disconnect_error(self):"]]}, "test_websocket_frame_reflect_error": {"CommonTests -> None": [[207, "    def test_websocket_frame_reflect_error(self):"]]}, "test_logs": {"CommonTests -> None": [[131, "    def test_logs(self):"]]}, "test_websocket": {"CommonTests -> None": [[193, "    def test_websocket(self):"]]}, "test_invalid_first_line": {"CommonTests -> None": [[155, "    def test_invalid_first_line(self):"]]}, "test_preline": {"CommonTests -> None": [[127, "    def test_preline(self):"]]}, "test_sizelimit": {"CommonTests -> None": [[121, "    def test_sizelimit(self):"]]}, "test_parserr": {"CommonTests -> None": [[142, "    def test_parserr(self):"]]}, "test_access_denied": {"CommonTests -> None": [[180, "    def test_access_denied(self):"]]}, "test_static": {"CommonTests -> None": [[146, "    def test_static(self):"]]}, "test_binarydata": {"CommonTests -> None": [[116, "    def test_binarydata(self):"]]}, "test_proxy": {"CommonTests -> None": [[189, "    def test_proxy(self):"]]}, "test_invalid_content_length": {"CommonTests -> None": [[166, "    def test_invalid_content_length(self):"]]}, "test_anchor": {"CommonTests -> None": [[151, "    def test_anchor(self):"]]}, "test_websocket_frame": {"CommonTests -> None": [[200, "    def test_websocket_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestH": {"var": {"hexdump": {"bool": [[99, "    hexdump = True"]]}}, "func": {"test_hexdump": {"TestHexdump -> None": [[101, "    def test_hexdump(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestN": {"var": {"nocraft": {"bool": [[106, "    nocraft = True"]]}, "nohang": {"bool": [[89, "    nohang = True"]]}}, "func": {"test_nohang": {"TestNohang -> None": [[91, "    def test_nohang(self):"]]}, "test_nocraft": {"TestNocraft -> None": [[108, "    def test_nocraft(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemonSSL.test_ssl_ciphe": {"var": {"r": {"?": [[253, "        r, _ = self.pathoc([r\"get:/p/202\"])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_websocket_frame_reflect_erro": {"var": {"r": {"?": [[208, "        r, _ = self.pathoc("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestNocraft.test_nocraft": {"var": {"r": {"?": [[109, "        r = self.get(r\"200:b'\\xf0'\")"]]}}, "param": {"self": {"TestNocraft": [[108, "    def test_nocraft(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaem": {"func": {"test_connect_err": {"TestDaemon -> None": [[232, "    def test_connect_err(self):"]]}, "test_connect": {"TestDaemon -> None": [[224, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemon.test_connect_err": {"param": {"self": {"TestDaemon": [[232, "    def test_connect_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_invalid_first_lin": {"param": {"self": {"CommonTests": [[155, "    def test_invalid_first_line(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_disconnect": {"param": {"self": {"CommonTests": [[138, "    def test_disconnect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestPathod": {"func": {"test_logging": {"TestPathod -> None": [[18, "    def test_logging(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestSSLCN": {"var": {"ssl": {"bool": [[75, "    ssl = True"]]}, "ssloptions": {"dict": [[76, "    ssloptions = dict("]]}}, "func": {"test_connect": {"TestSSLCN -> None": [[80, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_invalid_first_line": {"var": {"c": {"TCPClient": [[156, "        c = tcp.TCPClient((\"localhost\", self.d.port))"]]}, "l": {"?": [[162, "            l = self.d.last_log()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemon.test_connect": {"var": {"r": {"?": [[225, "        r, _ = self.pathoc("]]}}, "param": {"self": {"TestDaemon": [[224, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_proxy": {"var": {"r": {"?": [[190, "        r, _ = self.pathoc([r\"get:'http://foo.com/p/202':da\"])"]]}}, "param": {"self": {"CommonTests": [[189, "    def test_proxy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_parse": {"var": {"rsp": {"?": [[143, "        rsp = self.get(\"400:msg,b:\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestT": {"var": {"timeout": {"float": [[34, "    timeout = 0.01"]]}}, "func": {"test_timeout": {"TestTimeout -> None": [[36, "    def test_timeout(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_websocket": {"var": {"r": {"?": [[194, "        r, _ = self.pathoc([\"ws:/p/\"], ws_read_limit=0)"], [197, "        r, _ = self.pathoc([\"ws:/p/ws\"], ws_read_limit=0)"]]}}, "param": {"self": {"CommonTests": [[193, "    def test_websocket(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_websocket_frame_reflect_error": {"param": {"self": {"CommonTests": [[207, "    def test_websocket_frame_reflect_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestCustomCer": {"var": {"ssloptions": {"dict": [[62, "    ssloptions = dict("]]}}, "func": {"test_connect": {"TestCustomCert -> None": [[66, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestNotAfterC": {"func": {"test_connect": {"TestNotAfterConnect -> None": [[52, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemonSSL.test_ssl_cipher": {"param": {"self": {"TestDaemonSSL": [[252, "    def test_ssl_cipher(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestNohang.test_nohang": {"var": {"r": {"?": [[92, "        r = self.get(\"200:p0,0\")"]]}, "l": {"?": [[94, "        l = self.d.last_log()"]]}}, "param": {"self": {"TestNohang": [[91, "    def test_nohang(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_prelin": {"param": {"self": {"CommonTests": [[127, "    def test_preline(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_anchor": {"param": {"self": {"CommonTests": [[151, "    def test_anchor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_invalid_headers": {"var": {"l": {"?": [[176, "        l = self.d.last_log()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.TestDaemonSSL": {"var": {"ssl": {"bool": [[238, "    ssl = True"]]}}, "func": {"test_ssl_cipher": {"TestDaemonSSL -> None": [[252, "    def test_ssl_cipher(self):"]]}, "test_ssl_conn_failure": {"TestDaemonSSL -> None": [[240, "    def test_ssl_conn_failure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_access_denied": {"var": {"rsp": {"?": [[181, "        rsp = self.get(\"=nonexistent\")"]]}}, "param": {"self": {"CommonTests": [[180, "    def test_access_denied(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathod.CommonTests.test_websocket_frame": {"var": {"r": {"?": [[201, "        r, _ = self.pathoc("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/arg_check.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.arg_check.check": {"var": {"args": {"[str]": [[110, "    args = sys.argv[1:]"]]}, "option": {"str": [[118, "    for option in (\"-e\", \"--eventlog\", \"--norefresh\"):"], [122, "    for option in (\"--nonanonymous\", \"--singleuser\", \"--htpasswd\"):"], [132, "    for option in REPLACED.splitlines():"], [146, "    for option in DEPRECATED.splitlines():"]]}, "new_options": {"[?]": [[137, "                new_options = [REPLACEMENTS.get(option)]"]], "?": [[135, "                new_options = REPLACEMENTS.get(option)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.arg_": {"func": {"check": {"() -> None": [[109, "def check():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.arg_check": {"var": {"DEPRECATED": {"str": [[3, "DEPRECATED = \"\"\""]]}, "REPLACEMENTS": {"dict": [[65, "REPLACEMENTS = {"]]}, "REPLACED": {"str": [[41, "REPLACED = \"\"\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/dumper.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumpe": {"func": {"colorful": {"(?, ?) -> None / (?, dict) -> None": [[23, "def colorful(line, styles):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper": {"func": {"indent": {"(?, ?) -> str / (None, str) -> str / (None, ?) -> str": [[17, "def indent(n: int, text: str) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_headers": {"var": {"k": {"str": [[81, "            k = strutils.bytes_to_escaped_str(k)"]], "?": [[80, "        for k, v in headers.fields:"]]}, "out": {"str": [[83, "            out = \"{}: {}\".format("]]}, "v": {"str": [[82, "            v = strutils.bytes_to_escaped_str(v)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.websocket_messag": {"param": {"self": {"Dumper": [[260, "    def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.d": {"class": {"Dumper": {"<Dumper>": [[29, "class Dumper:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.websocket_end": {"param": {"self": {"Dumper": [[269, "    def websocket_end(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.websocket_error": {"param": {"self": {"Dumper": [[252, "    def websocket_error(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.tcp_messag": {"param": {"self": {"Dumper": [[285, "    def tcp_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_messag": {"var": {"lines_to_echo": {"None": [[101, "            lines_to_echo = lines"]], "?": [[99, "            lines_to_echo = itertools.islice(lines, 70)"]]}, "styles": {"dict": [[103, "        styles = dict("]]}, "content": {"str": [[110, "        content = u\"\\r\\n\".join("]]}}, "param": {"self": {"Dumper": [[89, "    def _echo_message(self, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dump": {"param": {"configure": {"?": [[56, "    def configure(self, updated):"]]}, "loader": {"?": [[35, "    def load(self, loader):"]]}}, "func": {"_echo_request_line": {"(Dumper, ?) -> None": [[123, "    def _echo_request_line(self, flow):"]]}, "_echo_headers": {"(Dumper, ?) -> None": [[79, "    def _echo_headers(self, headers):"]]}, "configure": {"(Dumper, ?) -> None": [[56, "    def configure(self, updated):"]]}, "echo_error": {"(Dumper, ?) -> None / (Dumper, str) -> None": [[74, "    def echo_error(self, text, **style):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.echo": {"var": {"text": {"str": [[69, "            text = indent(ident, text)"]]}}, "param": {"text": {"str": [[67, "    def echo(self, text, ident=None, **style):"]]}, "self": {"Dumper": [[67, "    def echo(self, text, ident=None, **style):"]]}, "ident": {"None": [[67, "    def echo(self, text, ident=None, **style):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_response_line": {"param": {"flow": {"?": [[168, "    def _echo_response_line(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper": {"func": {"load": {"(Dumper, ?) -> None": [[35, "    def load(self, loader):"]]}, "_echo_message": {"(Dumper, ?, ?) -> None": [[89, "    def _echo_message(self, message, flow):"]]}, "__init__": {"? -> ?": [[30, "    def __init__(self, outfile=sys.stdout, errfile=sys.stderr):"]]}, "echo": {"(Dumper, ?, None) -> None / (Dumper, str, None) -> None": [[67, "    def echo(self, text, ident=None, **style):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_request_lin": {"var": {"pushed": {"str": [[135, "        pushed = ' PUSH_PROMISE' if 'h2-pushed-stream' in flow.metadata else ''"]]}, "method_color": {"?": [[137, "        method_color = dict("]]}, "method": {"?": [[141, "        method = click.style("]], "str": [[136, "        method = flow.request.method + pushed"]]}}, "param": {"self": {"Dumper": [[123, "    def _echo_request_line(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_request_line": {"var": {"url": {"str": [[152, "            url = url[:terminalWidthLimit] + \"\u2026\""]], "?": [[147, "            url = flow.request.pretty_url"], [149, "            url = flow.request.url"]]}}, "param": {"flow": {"?": [[123, "    def _echo_request_line(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_": {"param": {"headers": {"?": [[79, "    def _echo_headers(self, headers):"]]}, "message": {"?": [[89, "    def _echo_message(self, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.match": {"param": {"self": {"Dumper": [[235, "    def match(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.error": {"param": {"self": {"Dumper": [[248, "    def error(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_response_lin": {"param": {"self": {"Dumper": [[168, "    def _echo_response_line(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_request_": {"var": {"client": {"str": [[133, "            client = \"\""]], "?": [[125, "            client = click.style("], [131, "            client = click.style(\"[replay]\", fg=\"yellow\", bold=True)"]]}, "terminalWidthLimit": {"int": [[150, "        terminalWidthLimit = max(shutil.get_terminal_size()[0] - 25, 50)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.respon": {"param": {"self": {"Dumper": [[244, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.indent": {"var": {"pad": {"str": [[19, "    pad = \" \" * n"]]}, "l": {"?": [[18, "    l = str(text).strip().splitlines()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.tcp_error": {"param": {"self": {"Dumper": [[277, "    def tcp_error(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.echo_error": {"param": {"text": {"str": [[74, "    def echo_error(self, text, **style):"]]}, "self": {"Dumper": [[74, "    def echo_error(self, text, **style):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_message": {"var": {"_": {"str": [[90, "        _, lines, error = contentviews.get_message_content_view("]]}}, "param": {"flow": {"?": [[89, "    def _echo_message(self, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.__init__": {"param": {"outfile": {"?": [[30, "    def __init__(self, outfile=sys.stdout, errfile=sys.stderr):"]]}, "self": {"Dumper": [[30, "    def __init__(self, outfile=sys.stdout, errfile=sys.stderr):"]]}, "errfile": {"?": [[30, "    def __init__(self, outfile=sys.stdout, errfile=sys.stderr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.echo_flow": {"param": {"self": {"Dumper": [[216, "    def echo_flow(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.load": {"param": {"self": {"Dumper": [[35, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper.configur": {"param": {"self": {"?": [[56, "    def configure(self, updated):"]]}, "updated": {"contentviews": [[56, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.Dumper._echo_header": {"param": {"self": {"Dumper": [[79, "    def _echo_headers(self, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.dumper.colorfu": {"param": {"styles": {"dict": [[23, "def colorful(line, styles):"]]}, "line": {"?": [[23, "def colorful(line, styles):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/modes/socks_proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.socks_proxy.Socks5Proxy": {"func": {"__call__": {"Socks5Proxy -> ?": [[8, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.socks_proxy.Socks5Proxy.__ca": {"var": {"connect_reply": {"Message": [[37, "            connect_reply = socks.Message("]]}, "client_greet": {"ClientGreeting": [[11, "            client_greet = socks.ClientGreeting.from_file(self.client_conn.rfile, fail_early=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.socks_p": {"class": {"Socks5Proxy": {"<Socks5Proxy>": [[6, "class Socks5Proxy(protocol.Layer, protocol.ServerConnectionMixin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.socks_proxy.Socks5Proxy.__call__": {"var": {"layer": {"None": [[52, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"Socks5Proxy": [[8, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.socks_proxy.Socks5Proxy.__call": {"var": {"server_greet": {"ServerGreeting": [[20, "            server_greet = socks.ServerGreeting("]]}, "connect_request": {"Message": [[28, "            connect_request = socks.Message.from_file(self.client_conn.rfile)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/websockets/test_frame.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_violation": {"param": {"self": {"TestFrameHeader": [[110, "    def test_violations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_serialization_too_large": {"var": {"h": {"FrameHeader": [[31, "        h = websockets.FrameHeader("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_roundtrip": {"param": {"self": {"TestFrameHeader": [[75, "    def test_roundtrip(self):"]]}}, "func": {"round": {"() -> None": [[76, "        def round(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader": {"func": {"test_funky": {"TestFrameHeader -> None": [[104, "    def test_funky(self):"]]}, "test_violations": {"TestFrameHeader -> None": [[110, "    def test_violations(self):"]]}, "test_equality": {"TestFrameHeader -> None": [[64, "    def test_equality(self):"]]}, "test_automask": {"TestFrameHeader -> None": [[116, "    def test_automask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHea": {"func": {"test_roundtrip": {"TestFrameHeader -> None": [[75, "    def test_roundtrip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_funky": {"var": {"raw": {"?": [[106, "        raw = bytes(f)"]]}, "f2": {"FrameHeader": [[107, "        f2 = websockets.FrameHeader.from_file(tutils.treader(raw))"]]}, "f": {"FrameHeader": [[105, "        f = websockets.FrameHeader(masking_key=b\"test\", mask=False)"]]}}, "param": {"self": {"TestFrameHeader": [[104, "    def test_funky(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestF": {"func": {"test_human_readable": {"TestFrame -> None": [[148, "    def test_human_readable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFram": {"func": {"test_serialization_bijection": {"(TestFrame, ?, ?) -> None": [[157, "    def test_serialization_bijection(self, masked, length):"]]}, "test_equality": {"TestFrame -> None": [[129, "    def test_equality(self):"]]}, "test_roundtrip": {"TestFrame -> None": [[136, "    def test_roundtrip(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_human_readab": {"param": {"self": {"TestFrame": [[148, "    def test_human_readable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameH": {"func": {"test_human_readable": {"TestFrameHeader -> None": [[93, "    def test_human_readable(self):"]]}, "test_deserialization_masking": {"(TestFrameHeader, ?, ?) -> None": [[58, "    def test_deserialization_masking(self, input, expected):"]]}, "test_deserialization_length": {"(TestFrameHeader, ?, ?) -> None": [[49, "    def test_deserialization_length(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_roundtrip.round": {"var": {"raw": {"?": [[139, "            raw = bytes(f)"]]}, "f2": {"Frame": [[140, "            f2 = websockets.Frame.from_file(tutils.treader(raw))"]]}, "f": {"Frame": [[138, "            f = websockets.Frame(*args, **kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_roundtrip": {"param": {"self": {"TestFrame": [[136, "    def test_roundtrip(self):"]]}}, "func": {"round": {"() -> None": [[137, "        def round(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_roundtrip.round": {"var": {"h2": {"FrameHeader": [[78, "            h2 = websockets.FrameHeader.from_file(tutils.treader(bytes(h)))"]]}, "h": {"FrameHeader": [[77, "            h = websockets.FrameHeader(*args, **kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_serialization_too_larg": {"param": {"self": {"TestFrameHeader": [[30, "    def test_serialization_too_large(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_serialization_length": {"param": {"expected": {"?": [[23, "    def test_serialization_length(self, input, expected):"]]}, "input": {"?": [[23, "    def test_serialization_length(self, input, expected):"]]}, "self": {"TestFrameHeader": [[23, "    def test_serialization_length(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_deserialization_lengt": {"var": {"h": {"FrameHeader": [[50, "        h = websockets.FrameHeader.from_file(tutils.treader(codecs.decode(input, 'hex')))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHead": {"func": {"test_serialization_length": {"(TestFrameHeader, ?, ?) -> None": [[23, "    def test_serialization_length(self, input, expected):"]]}, "test_serialization_too_large": {"TestFrameHeader -> None": [[30, "    def test_serialization_too_large(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_deserialization_masking": {"var": {"h": {"FrameHeader": [[59, "        h = websockets.FrameHeader.from_file(tutils.treader(codecs.decode(input, 'hex')))"]]}}, "param": {"expected": {"?": [[58, "    def test_deserialization_masking(self, input, expected):"]]}, "input": {"?": [[58, "    def test_deserialization_masking(self, input, expected):"]]}, "self": {"TestFrameHeader": [[58, "    def test_deserialization_masking(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_equality": {"var": {"f2": {"Frame": [[131, "        f2 = websockets.Frame(payload=b'1234')"]]}, "f": {"Frame": [[130, "        f = websockets.Frame(payload=b'1234')"]]}}, "param": {"self": {"TestFrame": [[129, "    def test_equality(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_serialization_lengt": {"var": {"h": {"FrameHeader": [[24, "        h = websockets.FrameHeader("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_automask": {"var": {"f": {"FrameHeader": [[117, "        f = websockets.FrameHeader(mask=True)"], [120, "        f = websockets.FrameHeader(masking_key=b\"foob\")"], [123, "        f = websockets.FrameHeader(masking_key=b\"foob\", mask=0)"]]}}, "param": {"self": {"TestFrameHeader": [[116, "    def test_automask(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_f": {"class": {"TestFrame": {"<TestFrame>": [[128, "class TestFrame:"]]}, "TestFrameHeader": {"<TestFrameHeader>": [[9, "class TestFrameHeader:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_human_readable": {"var": {"f": {"Frame": [[149, "        f = websockets.Frame()"], [152, "        f = websockets.Frame(b\"foobar\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_deserialization_length": {"param": {"expected": {"?": [[49, "    def test_deserialization_length(self, input, expected):"]]}, "input": {"?": [[49, "    def test_deserialization_length(self, input, expected):"]]}, "self": {"TestFrameHeader": [[49, "    def test_deserialization_length(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_human_readable": {"var": {"f": {"FrameHeader": [[94, "        f = websockets.FrameHeader("], [101, "        f = websockets.FrameHeader()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_serialization_bijectio": {"param": {"length": {"?": [[157, "    def test_serialization_bijection(self, masked, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_equality": {"var": {"h2": {"FrameHeader": [[66, "        h2 = websockets.FrameHeader(mask=True, masking_key=b'1234')"], [70, "        h2 = websockets.FrameHeader(fin=False)"]]}, "h": {"FrameHeader": [[65, "        h = websockets.FrameHeader(mask=True, masking_key=b'1234')"], [69, "        h = websockets.FrameHeader(fin=True)"]]}}, "param": {"self": {"TestFrameHeader": [[64, "    def test_equality(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrame.test_serialization_bijection": {"var": {"serialized": {"?": [[165, "        serialized = bytes(frame)"]]}, "frame": {"Frame": [[158, "        frame = websockets.Frame("]]}}, "param": {"self": {"TestFrame": [[157, "    def test_serialization_bijection(self, masked, length):"]]}, "masked": {"?": [[157, "    def test_serialization_bijection(self, masked, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_frame.TestFrameHeader.test_human_readab": {"param": {"self": {"TestFrameHeader": [[93, "    def test_human_readable(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/user_agents.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.user_agents": {"var": {"UASTRINGS": {"[(str, str, str)]": [[10, "UASTRINGS = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.user_agents.get_by_shortcut": {"var": {"i": {"(str, str, str)": [[48, "    for i in UASTRINGS:"]]}}, "param": {"s": {"str": [[44, "def get_by_shortcut(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.user_agen": {"func": {"get_by_shortcut": {"? -> (str, str, str) / str -> (str, str, str)": [[44, "def get_by_shortcut(s):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/help.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView": {"var": {"keyctx": {"str": [[26, "    keyctx = \"help\""]]}, "title": {"str": [[25, "    title = \"Help\""]]}}, "func": {"filtexp": {"HelpView -> CListBox": [[89, "    def filtexp(self):"]]}, "layout_pushed": {"(HelpView, ?) -> None": [[115, "    def layout_pushed(self, prev):"]]}, "filtexp_title": {"HelpView -> str": [[86, "    def filtexp_title(self):"]]}, "format_keys": {"(HelpView, ?) -> [?]": [[41, "    def format_keys(self, binds):"]]}, "keybindings": {"HelpView -> CListBox": [[50, "    def keybindings(self):"]]}, "keybindings_title": {"HelpView -> str": [[38, "    def keybindings_title(self):"]]}, "__init__": {"? -> ?": [[28, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.CListBox.__init__": {"var": {"contents": {"[?]": [[12, "        contents = contents[:] + [urwid.Text([\"\\n\"])] * 5"]]}}, "param": {"self": {"CListBox": [[10, "    def __init__(self, contents):"]]}, "contents": {"[?]": [[10, "    def __init__(self, contents):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.keybindings_tit": {"param": {"self": {"HelpView": [[38, "    def keybindings_title(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.layout_pushed": {"param": {"self": {"HelpView": [[115, "    def layout_pushed(self, prev):"]]}, "prev": {"?": [[115, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.filtexp_tit": {"param": {"self": {"HelpView": [[86, "    def filtexp_title(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.CListBox.keypress": {"param": {"key": {"?": [[15, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.format_keys": {"var": {"k": {"str": [[46, "                k = \"space\""]], "?": [[44, "            k = b.key"]]}, "b": {"?": [[43, "        for b in binds:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.keybinding": {"param": {"self": {"HelpView": [[50, "    def keybindings(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.format_key": {"var": {"kvs": {"[(str, ?)]": [[42, "        kvs = []"]]}}, "param": {"binds": {"?": [[41, "    def format_keys(self, binds):"]]}, "self": {"HelpView": [[41, "    def format_keys(self, binds):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.CListBox": {"func": {"keypress": {"(CListBox, ?, ?) -> None": [[15, "    def keypress(self, size, key):"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self, contents):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.__init__": {"param": {"self": {"HelpView": [[28, "    def __init__(self, master):"]]}, "master": {"?": [[28, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help": {"class": {"CListBox": {"<CListBox>": [[9, "class CListBox(urwid.ListBox):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.CListBox.keypr": {"param": {"self": {"CListBox": [[15, "    def keypress(self, size, key):"]]}, "size": {"?": [[15, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.keybindings": {"var": {"text": {"[?]": [[51, "        text = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.h": {"class": {"HelpView": {"<HelpView>": [[24, "class HelpView(tabs.Tabs, layoutwidget.LayoutWidget):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.filt": {"var": {"examples": {"[(str, str)]": [[105, "        examples = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.help.HelpView.filtexp": {"var": {"text": {"[?]": [[90, "        text = []"]]}}, "param": {"self": {"HelpView": [[89, "    def filtexp(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_test.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_test.TestDaemonManual.test_simple": {"var": {"rsp": {"?": [[13, "            rsp = requests.get(\"http://localhost:%s/p/202:da\" % d.port)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_test.TestDaemonManual.test_startstop_": {"var": {"ssloptions": {"SSLOptions": [[21, "        ssloptions = SSLOptions("]]}}, "param": {"self": {"TestDaemonManual": [[20, "    def test_startstop_ssl(self, not_after_connect):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_test.TestDaemonManu": {"func": {"test_startstop_ssl": {"(TestDaemonManual, ?) -> None": [[20, "    def test_startstop_ssl(self, not_after_connect):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_": {"class": {"TestDaemonManual": {"<TestDaemonManual>": [[9, "class TestDaemonManual:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_test.TestDaemonManual.test_simp": {"param": {"self": {"TestDaemonManual": [[11, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_test.TestDaemonManua": {"func": {"test_simple": {"TestDaemonManual -> None": [[11, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_test.TestDaemonManual.test_startstop_ssl": {"var": {"rsp": {"?": [[27, "        rsp = requests.get("]]}, "d": {"Daemon": [[26, "        d = test.Daemon(ssl=True, ssloptions=ssloptions)"]]}}, "param": {"not_after_connect": {"?": [[20, "    def test_startstop_ssl(self, not_after_connect):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/options.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.options.Options": {"func": {"__init__": {"? -> ?": [[16, "    def __init__(self, **kwargs) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.options.Options.__init__": {"param": {"self": {"Options": [[16, "    def __init__(self, **kwargs) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"class": {"Options": {"<Options>": [[14, "class Options(optmanager.OptManager):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.options": {"var": {"CONF_BASENAME": {"str": [[8, "CONF_BASENAME = \"mitmproxy\""]]}, "KEY_SIZE": {"int": [[11, "KEY_SIZE = 2048"]]}, "LISTEN_PORT": {"int": [[9, "LISTEN_PORT = 8080"]]}, "CONF_DIR": {"str": [[7, "CONF_DIR = \"~/.mitmproxy\""]]}, "CONTENT_VIEW_LINES_CUTOFF": {"int": [[10, "CONTENT_VIEW_LINES_CUTOFF = 512"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/grideditor/col_subgrid.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.Edit": {"param": {"self": {"Column": [[12, "    def Edit(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.blank": {"param": {"self": {"Column": [[18, "    def blank(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.keypr": {"param": {"self": {"Column": [[21, "    def keypress(self, key, editor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Colum": {"func": {"__init__": {"? -> ?": [[8, "    def __init__(self, heading, subeditor):"]]}, "blank": {"Column -> [?]": [[18, "    def blank(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Display.__init__": {"var": {"p": {"str": [[38, "        p = cookies._format_pairs(data, sep=\"\\n\")"]]}, "w": {"?": [[39, "        w = urwid.Text(p)"]]}}, "param": {"self": {"Display": [[37, "    def __init__(self, data):"]]}, "data": {"?": [[37, "    def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.keypress": {"param": {"editor": {"?": [[21, "    def keypress(self, key, editor):"]]}, "key": {"?": [[21, "    def keypress(self, key, editor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.__init__": {"param": {"subeditor": {"<CookieAttributeEditor>": [[8, "    def __init__(self, heading, subeditor):"]]}, "self": {"Column": [[8, "    def __init__(self, heading, subeditor):"]]}, "heading": {"str": [[8, "    def __init__(self, heading, subeditor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.Edi": {"param": {"data": {"?": [[12, "    def Edit(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Display.get_data": {"param": {"self": {"Display": [[42, "    def get_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column.Display": {"param": {"self": {"Column": [[15, "    def Display(self, data):"]]}, "data": {"?": [[15, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Display": {"func": {"get_data": {"Display -> None": [[42, "    def get_data(self):"]]}, "__init__": {"? -> ?": [[37, "    def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid": {"class": {"Column": {"<Column>": [[7, "class Column(base.Column):"]]}, "Display": {"<Display>": [[36, "class Display(base.Cell):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_subgrid.Column": {"func": {"Edit": {"(Column, ?) -> None": [[12, "    def Edit(self, data):"]]}, "keypress": {"(Column, ?, ?) -> None": [[21, "    def keypress(self, key, editor):"]]}, "Display": {"(Column, ?) -> Display": [[15, "    def Display(self, data):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/mapremote.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapr": {"class": {"MapRemote": {"<MapRemote>": [[9, "class MapRemote:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote": {"func": {"load": {"(MapRemote, ?) -> None": [[13, "    def load(self, loader):"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemot": {"param": {"loader": {"?": [[13, "    def load(self, loader):"]]}}, "func": {"configure": {"(MapRemote, ?) -> ?": [[23, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote.configur": {"var": {"spec": {"ModifySpec": [[28, "                    spec = parse_modify_spec(option, True)"]]}}, "param": {"self": {"MapRemote": [[23, "    def configure(self, updated):"]]}, "updated": {"?": [[23, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote.__init__": {"param": {"self": {"MapRemote": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote.load": {"param": {"self": {"MapRemote": [[13, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote.configure": {"var": {"option": {"?": [[26, "            for option in ctx.options.map_remote:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote.request": {"var": {"url": {"?": [[45, "                url = flow.request.pretty_url.encode(\"utf8\", \"surrogateescape\")"]]}, "new_url": {"?": [[46, "                new_url = re.sub(spec.subject, replacement, url)"]]}, "spec": {"?": [[37, "        for spec in self.replacements:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemote.reques": {"var": {"replacement": {"?": [[40, "                    replacement = spec.read_replacement()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.mapremote.MapRemo": {"func": {"request": {"(MapRemote, ?) -> ?": [[34, "    def request(self, flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/wbxml/ASCommandResponse.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandResponse": {"func": {"__init__": {"? -> ?": [[35, "\tdef __init__(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandRespons": {"func": {"getXMLString": {"ASCommandResponse -> None": [[49, "\tdef getXMLString(self):"]]}, "decodeWBXML": {"(ASCommandResponse, ?) -> None / (ASCommandResponse, str) -> None": [[52, "\tdef decodeWBXML(self, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandResponse.getXMLString": {"param": {"self": {"ASCommandResponse": [[49, "\tdef getXMLString(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml": {"class": {"ASCommandResponse": {"<ASCommandResponse>": [[33, "class ASCommandResponse:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandResponse.getWBXMLByt": {"param": {"self": {"ASCommandResponse": [[46, "\tdef getWBXMLBytes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandResponse.__init__": {"param": {"self": {"ASCommandResponse": [[35, "\tdef __init__(self, response):"]]}, "response": {"str": [[35, "\tdef __init__(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandRespon": {"func": {"getWBXMLBytes": {"ASCommandResponse -> ?": [[46, "\tdef getWBXMLBytes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandRespons": {"var": {"filename": {"str": [[65, "\tfor filename in listOfSamples:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxml.ASCommandResponse.ASCommandResponse.decodeWBXML": {"param": {"body": {"str": [[52, "\tdef decodeWBXML(self, body):"]]}, "self": {"ASCommandResponse": [[52, "\tdef decodeWBXML(self, body):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/options-configure.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure": {"var": {"addons": {"[AddHeader]": [[27, "addons = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddHeader": {"func": {"load": {"(AddHeader, ?) -> None": [[9, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddH": {"param": {"loader": {"?": [[9, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddHeader.load": {"param": {"self": {"AddHeader": [[9, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddHeader.configur": {"param": {"self": {"AddHeader": [[17, "    def configure(self, updates):"]]}, "updates": {"?": [[17, "    def configure(self, updates):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddHeader.respon": {"param": {"self": {"AddHeader": [[22, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddHead": {"func": {"configure": {"(AddHeader, ?) -> None": [[17, "    def configure(self, updates):"]]}, "response": {"(AddHeader, ?) -> None": [[22, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configu": {"class": {"AddHeader": {"<AddHeader>": [[8, "class AddHeader:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.options-configure.AddHeader.response": {"param": {"flow": {"?": [[22, "    def response(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/coretypes/test_multidict.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDic": {"func": {"test_getitem": {"TestMultiDict -> None": [[38, "    def test_getitem(self):"]]}, "test_len": {"TestMultiDict -> None": [[79, "    def test_len(self):"]]}, "test_keys": {"TestMultiDict -> None": [[156, "    def test_keys(self):"]]}, "test_values": {"TestMultiDict -> None": [[161, "    def test_values(self):"]]}, "test_get_all": {"TestMultiDict -> None": [[105, "    def test_get_all(self):"]]}, "test_set_all": {"TestMultiDict -> None": [[111, "    def test_set_all(self):"]]}, "test_setitem": {"TestMultiDict -> None": [[52, "    def test_setitem(self):"]]}, "test_add": {"TestMultiDict -> None": [[140, "    def test_add(self):"]]}, "test_state": {"TestMultiDict -> None": [[171, "    def test_state(self):"]]}, "test_insert": {"TestMultiDict -> None": [[150, "    def test_insert(self):"]]}, "test_iter": {"TestMultiDict -> None": [[75, "    def test_iter(self):"]]}, "test_items": {"TestMultiDict -> None": [[166, "    def test_items(self):"]]}, "test_hash": {"TestMultiDict -> None": [[96, "    def test_hash(self):"]]}, "test_repr": {"TestMultiDict -> None": [[33, "    def test_repr(self):"]]}, "_multi": {"() -> TMultiDict": [[18, "    def _multi():"]]}, "test_eq": {"TestMultiDict -> None": [[86, "    def test_eq(self):"]]}, "test_delitem": {"TestMultiDict -> None": [[63, "    def test_delitem(self):"]]}, "test_init": {"TestMultiDict -> None": [[25, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_len": {"var": {"md": {"TMultiDict": [[80, "        md = TMultiDict()"], [83, "        md = self._multi()"]]}}, "param": {"self": {"TestMultiDict": [[79, "    def test_len(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_set_a": {"param": {"self": {"TestMultiDict": [[111, "    def test_set_all(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_getitem": {"param": {"self": {"TestMultiDict": [[38, "    def test_getitem(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_repr": {"param": {"self": {"TestMultiDict": [[33, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_key": {"param": {"self": {"TestMultiDict": [[156, "    def test_keys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multid": {"class": {"TestMultiDictView": {"<TestMultiDictView>": [[193, "class TestMultiDictView:"]]}, "TestMultiDict": {"<TestMultiDict>": [[16, "class TestMultiDict:"]]}, "TMultiDict": {"<TMultiDict>": [[12, "class TMultiDict(_TMulti, multidict.MultiDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TParent.__init__": {"param": {"self": {"TParent": [[183, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_hash": {"param": {"self": {"TestMultiDict": [[96, "    def test_hash(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_get_all": {"var": {"md": {"TMultiDict": [[106, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_iter": {"var": {"md": {"TMultiDict": [[76, "        md = self._multi()"]]}}, "param": {"self": {"TestMultiDict": [[75, "    def test_iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_setitem": {"param": {"self": {"TestMultiDict": [[52, "    def test_setitem(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_keys": {"var": {"md": {"TMultiDict": [[157, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_init": {"var": {"md": {"TMultiDict": [[26, "        md = TMultiDict()"], [29, "        md = TMultiDict([(\"foo\", \"bar\")])"]]}}, "param": {"self": {"TestMultiDict": [[25, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDictView": {"func": {"test_copy": {"TestMultiDictView -> None": [[204, "    def test_copy(self):"]]}, "test_modify": {"TestMultiDictView -> None": [[194, "    def test_modify(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_item": {"param": {"self": {"TestMultiDict": [[166, "    def test_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_valu": {"param": {"self": {"TestMultiDict": [[161, "    def test_values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict._TMulti._kconv": {"param": {"key": {"str": [[8, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_a": {"var": {"md": {"TMultiDict": [[141, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TPare": {"func": {"__init__": {"? -> ?": [[183, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_delite": {"var": {"md": {"TMultiDict": [[64, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_items": {"var": {"md": {"TMultiDict": [[167, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDictView.test_copy": {"var": {"tv": {"MultiDictView": [[206, "        tv = multidict.MultiDictView(p.getter, p.setter)"]]}, "p": {"TParent": [[205, "        p = TParent()"]]}, "c": {"MultiDict": [[207, "        c = tv.copy()"]]}}, "param": {"self": {"TestMultiDictView": [[204, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_delitem": {"param": {"self": {"TestMultiDict": [[63, "    def test_delitem(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict._TMulti": {"func": {"_kconv": {"str -> str / ? -> ?": [[8, "    def _kconv(key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_add": {"param": {"self": {"TestMultiDict": [[140, "    def test_add(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_setite": {"var": {"md": {"TMultiDict": [[53, "        md = TMultiDict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_eq": {"var": {"md2": {"TMultiDict": [[91, "        md2 = self._multi()"]]}, "md1": {"TMultiDict": [[90, "        md1 = self._multi()"]]}}, "param": {"self": {"TestMultiDict": [[86, "    def test_eq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_state": {"var": {"md2": {"TMultiDict": [[176, "        md2 = TMultiDict()"]]}, "md": {"TMultiDict": [[172, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_getite": {"var": {"md": {"TMultiDict": [[39, "        md = TMultiDict([(\"foo\", \"bar\")])"]]}, "md_multi": {"TMultiDict": [[47, "        md_multi = TMultiDict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidic": {"class": {"_TMulti": {"<_TMulti>": [[6, "class _TMulti:"]]}, "TParent": {"<TParent>": [[182, "class TParent:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TParent.setter": {"param": {"vals": {"?": [[186, "    def setter(self, vals):"]]}, "self": {"TParent": [[186, "    def setter(self, vals):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_stat": {"param": {"self": {"TestMultiDict": [[171, "    def test_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_values": {"var": {"md": {"TMultiDict": [[162, "        md = self._multi()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_insert": {"var": {"md": {"TMultiDict": [[151, "        md = TMultiDict([(\"b\", \"b\")])"]]}}, "param": {"self": {"TestMultiDict": [[150, "    def test_insert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_set_all": {"var": {"md": {"TMultiDict": [[112, "        md = TMultiDict()"], [116, "        md = TMultiDict(("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDictView.test_modify": {"var": {"tv": {"MultiDictView": [[196, "        tv = multidict.MultiDictView(p.getter, p.setter)"]]}, "p": {"TParent": [[195, "        p = TParent()"]]}}, "param": {"self": {"TestMultiDictView": [[194, "    def test_modify(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TestMultiDict.test_get_a": {"param": {"self": {"TestMultiDict": [[105, "    def test_get_all(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TParent.getter": {"param": {"self": {"TParent": [[189, "    def getter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_multidict.TParen": {"func": {"getter": {"TParent -> tuple": [[189, "    def getter(self):"]]}, "setter": {"(TParent, ?) -> None": [[186, "    def setter(self, vals):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/coretypes/test_serializable.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.TestSerializable.test_copy_id": {"var": {"a": {"SerializableDummy": [[33, "        a = SerializableDummy({"]]}, "b": {"SerializableDummy": [[37, "        b = a.copy()"]]}}, "param": {"self": {"TestSerializable": [[32, "    def test_copy_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.TestSerializabl": {"func": {"test_copy": {"TestSerializable -> None": [[22, "    def test_copy(self):"]]}, "test_copy_id": {"TestSerializable -> None": [[32, "    def test_copy_id(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_": {"class": {"TestSerializable": {"<TestSerializable>": [[21, "class TestSerializable:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy.from_state": {"param": {"cls": {"<SerializableDummy>": [[17, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy.set_state": {"param": {"i": {"int": [[13, "    def set_state(self, i):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_s": {"class": {"SerializableDummy": {"<SerializableDummy>": [[6, "class SerializableDummy(serializable.Serializable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy.get_stat": {"param": {"self": {"SerializableDummy": [[10, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy.from_": {"param": {"state": {"?": [[17, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy.set_stat": {"param": {"self": {"SerializableDummy": [[13, "    def set_state(self, i):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.TestSerializable.test_copy": {"var": {"a": {"SerializableDummy": [[23, "        a = SerializableDummy(42)"]]}, "b": {"SerializableDummy": [[25, "        b = a.copy()"]]}}, "param": {"self": {"TestSerializable": [[22, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy": {"func": {"from_state": {"(<SerializableDummy>, ?) -> SerializableDummy": [[17, "    def from_state(cls, state):"]]}, "set_state": {"(SerializableDummy, int) -> None / (SerializableDummy, ?) -> None": [[13, "    def set_state(self, i):"]]}, "__init__": {"? -> ?": [[7, "    def __init__(self, i):"]]}, "get_state": {"SerializableDummy -> ?": [[10, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_serializable.SerializableDummy.__init__": {"param": {"i": {"{dict | int}": [[7, "    def __init__(self, i):"]]}, "self": {"SerializableDummy": [[7, "    def __init__(self, i):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/nonblocking.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.nonblocking.request": {"param": {"flow": {"?": [[13, "def request(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.nonblocking": {"func": {"request": {"? -> None": [[13, "def request(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/exif_le.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.TagEn": {"var": {"exposure_time": {"int": [[196, "            exposure_time = 33434"]]}, "default_image_color": {"int": [[140, "            default_image_color = 434"]]}, "profile_hue_sat_map_dims": {"int": [[466, "            profile_hue_sat_map_dims = 50937"]]}, "max_sample_value": {"int": [[83, "            max_sample_value = 281"]]}, "exposure_program": {"int": [[255, "            exposure_program = 34850"]]}, "s_max_sample_value": {"int": [[125, "            s_max_sample_value = 341"]]}, "texture_format": {"int": [[185, "            texture_format = 33302"]]}, "sub_sec_time": {"int": [[312, "            sub_sec_time = 37520"]]}, "chroma_blur_radius": {"int": [[437, "            chroma_blur_radius = 50737"]]}, "max_aperture_value": {"int": [[287, "            max_aperture_value = 37381"]]}, "image_full_height": {"int": [[184, "            image_full_height = 33301"]]}, "exposure_mode": {"int": [[357, "            exposure_mode = 41986"]]}, "image_source_data": {"int": [[318, "            image_source_data = 37724"]]}, "sub_sec_time_digitized": {"int": [[314, "            sub_sec_time_digitized = 37522"]]}, "host_computer": {"int": [[103, "            host_computer = 316"]]}, "image_full_width": {"int": [[183, "            image_full_width = 33300"]]}, "profile_hue_sat_map_data2": {"int": [[468, "            profile_hue_sat_map_data2 = 50939"]]}, "profile_hue_sat_map_data1": {"int": [[467, "            profile_hue_sat_map_data1 = 50938"]]}, "multi_profiles": {"int": [[247, "            multi_profiles = 34688"]]}, "humidity": {"int": [[320, "            humidity = 37889"]]}, "geo_tiff_double_params": {"int": [[252, "            geo_tiff_double_params = 34736"]]}, "image_color_value": {"int": [[228, "            image_color_value = 34025"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.Ifd": {"func": {"__init__": {"? -> ?": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.Ifd.__init": {"param": {"_io": {"?": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField._read": {"param": {"self": {"IfdField": [[528, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.TagEnum": {"var": {"spectral_sensitivity": {"int": [[256, "            spectral_sensitivity = 34852"]]}, "rating": {"int": [[162, "            rating = 18246"]]}, "subject_location": {"int": [[349, "            subject_location = 41492"]]}, "cfa_pattern2": {"int": [[192, "            cfa_pattern2 = 33422"]]}, "background_color_value": {"int": [[229, "            background_color_value = 34026"]]}, "brightness": {"int": [[516, "            brightness = 65107"]]}, "preview_settings_digest": {"int": [[477, "            preview_settings_digest = 50969"]]}, "bits_per_run_length": {"int": [[223, "            bits_per_run_length = 34020"]]}, "consecutive_bad_fax_lines": {"int": [[115, "            consecutive_bad_fax_lines = 328"]]}, "y_cb_cr_coefficients": {"int": [[152, "            y_cb_cr_coefficients = 529"]]}, "fax_profile": {"int": [[135, "            fax_profile = 402"]]}, "tile_width": {"int": [[109, "            tile_width = 322"]]}, "transfer_function": {"int": [[99, "            transfer_function = 301"]]}, "alpha_data_discard": {"int": [[397, "            alpha_data_discard = 48325"]]}, "gdal_no_data": {"int": [[376, "            gdal_no_data = 42113"]]}, "focal_plane_resolution_unit": {"int": [[298, "            focal_plane_resolution_unit = 37392"]]}, "original_default_crop_size": {"int": [[496, "            original_default_crop_size = 51091"]]}, "jpeg_proc": {"int": [[143, "            jpeg_proc = 512"]]}, "default_scale": {"int": [[418, "            default_scale = 50718"]]}, "jpegq_tables": {"int": [[149, "            jpegq_tables = 519"]]}, "copyright": {"int": [[195, "            copyright = 33432"]]}, "aperture_value": {"int": [[284, "            aperture_value = 37378"]]}, "flash": {"int": [[291, "            flash = 37385"]]}, "shutter_speed_value": {"int": [[283, "            shutter_speed_value = 37377"]]}, "white_balance": {"int": [[358, "            white_balance = 41987"]]}, "dot_range": {"int": [[120, "            dot_range = 336"]]}, "t6_options": {"int": [[95, "            t6_options = 293"]]}, "wb_grgb_levels": {"int": [[241, "            wb_grgb_levels = 34306"]]}, "iso_speed_latitudeyyy": {"int": [[267, "            iso_speed_latitudeyyy = 34868"]]}, "panasonic_title2": {"int": [[459, "            panasonic_title2 = 50899"]]}, "color_table": {"int": [[225, "            color_table = 34022"]]}, "color_space": {"int": [[331, "            color_space = 40961"]]}, "saturation": {"int": [[364, "            saturation = 41993"]]}, "strip_byte_counts": {"int": [[81, "            strip_byte_counts = 279"]]}, "sensitivity_type": {"int": [[263, "            sensitivity_type = 34864"]]}, "advent_scale": {"int": [[207, "            advent_scale = 33589"]]}, "uspto_original_content_type": {"int": [[405, "            uspto_original_content_type = 50560"]]}, "resolution_unit": {"int": [[96, "            resolution_unit = 296"]]}, "x_resolution": {"int": [[84, "            x_resolution = 282"]]}, "opi_proxy": {"int": [[132, "            opi_proxy = 351"]]}, "shadow_scale": {"int": [[439, "            shadow_scale = 50739"]]}, "background_color_indicator": {"int": [[227, "            background_color_indicator = 34024"]]}, "free_byte_counts": {"int": [[91, "            free_byte_counts = 289"]]}, "y_resolution": {"int": [[85, "            y_resolution = 283"]]}, "pixel_scale": {"int": [[206, "            pixel_scale = 33550"]]}, "indexed": {"int": [[130, "            indexed = 346"]]}, "iso_speed": {"int": [[266, "            iso_speed = 34867"]]}, "default_black_render": {"int": [[501, "            default_black_render = 51110"]]}, "focal_length": {"int": [[292, "            focal_length = 37386"]]}, "tile_depth": {"int": [[182, "            tile_depth = 32998"]]}, "raw_to_preview_gain": {"int": [[503, "            raw_to_preview_gain = 51112"]]}, "noise_profile": {"int": [[489, "            noise_profile = 51041"]]}, "shadows": {"int": [[515, "            shadows = 65106"]]}, "cell_length": {"int": [[71, "            cell_length = 265"]]}, "bits_per_extended_run_length": {"int": [[224, "            bits_per_extended_run_length = 34021"]]}, "artist": {"int": [[102, "            artist = 315"]]}, "security_classification": {"int": [[300, "            security_classification = 37394"]]}, "profile_tone_curve": {"int": [[469, "            profile_tone_curve = 50940"]]}, "raster_padding": {"int": [[222, "            raster_padding = 34019"]]}, "opcode_list3": {"int": [[488, "            opcode_list3 = 51022"]]}, "opcode_list2": {"int": [[487, "            opcode_list2 = 51009"]]}, "rows_per_strip": {"int": [[80, "            rows_per_strip = 278"]]}, "linearization_table": {"int": [[412, "            linearization_table = 50712"]]}, "intergraph_packet_data": {"int": [[214, "            intergraph_packet_data = 33918"]]}, "jbig_options": {"int": [[254, "            jbig_options = 34750"]]}, "expand_filter_lens": {"int": [[381, "            expand_filter_lens = 44995"]]}, "tile_byte_counts": {"int": [[112, "            tile_byte_counts = 325"]]}, "sharpness2": {"int": [[519, "            sharpness2 = 65110"]]}, "gray_response_unit": {"int": [[92, "            gray_response_unit = 290"]]}, "dng_backward_version": {"int": [[407, "            dng_backward_version = 50707"]]}, "flashpix_version": {"int": [[330, "            flashpix_version = 40960"]]}, "it8_header": {"int": [[221, "            it8_header = 34018"]]}, "t_stop": {"int": [[492, "            t_stop = 51058"]]}, "rating_percent": {"int": [[165, "            rating_percent = 18249"]]}, "wang_annotation": {"int": [[172, "            wang_annotation = 32932"]]}, "flash_energy": {"int": [[293, "            flash_energy = 37387"]]}, "cell_width": {"int": [[70, "            cell_width = 264"]]}, "kdc_ifd": {"int": [[510, "            kdc_ifd = 65024"]]}, "as_shot_icc_profile": {"int": [[452, "            as_shot_icc_profile = 50831"]]}, "application_notes": {"int": [[157, "            application_notes = 700"]]}, "focal_plane_x_resolution2": {"int": [[343, "            focal_plane_x_resolution2 = 41486"]]}, "advent_revision": {"int": [[208, "            advent_revision = 33590"]]}, "xp_keywords": {"int": [[328, "            xp_keywords = 40094"]]}, "profile_look_table_encoding": {"int": [[499, "            profile_look_table_encoding = 51108"]]}, "s_raw_type": {"int": [[457, "            s_raw_type = 50885"]]}, "uic4_tag": {"int": [[212, "            uic4_tag = 33631"]]}, "dng_version": {"int": [[406, "            dng_version = 50706"]]}, "profile_type": {"int": [[134, "            profile_type = 401"]]}, "icc_profile": {"int": [[245, "            icc_profile = 34675"]]}, "sub_ifd": {"int": [[116, "            sub_ifd = 330"]]}, "anti_alias_strength": {"int": [[438, "            anti_alias_strength = 50738"]]}, "ingr_reserved": {"int": [[217, "            ingr_reserved = 33921"]]}, "clip_path": {"int": [[127, "            clip_path = 343"]]}, "spatial_frequency_response": {"int": [[294, "            spatial_frequency_response = 37388"]]}, "sto_nits": {"int": [[309, "            sto_nits = 37439"]]}, "trap_indicator": {"int": [[234, "            trap_indicator = 34031"]]}, "ink_set": {"int": [[117, "            ink_set = 332"]]}, "y_clip_path_units": {"int": [[129, "            y_clip_path_units = 345"]]}, "halftone_hints": {"int": [[108, "            halftone_hints = 321"]]}, "default_crop_origin": {"int": [[419, "            default_crop_origin = 50719"]]}, "raw_data_unique_id": {"int": [[446, "            raw_data_unique_id = 50781"]]}, "photoshop_settings": {"int": [[243, "            photoshop_settings = 34377"]]}, "exif_version": {"int": [[274, "            exif_version = 36864"]]}, "tiff_ep_standard_id": {"int": [[304, "            tiff_ep_standard_id = 37398"]]}, "contrast": {"int": [[363, "            contrast = 41992"]]}, "battery_level": {"int": [[193, "            battery_level = 33423"]]}, "scene_capture_type": {"int": [[361, "            scene_capture_type = 41990"]]}, "noise": {"int": [[295, "            noise = 37389"]]}, "data_type": {"int": [[180, "            data_type = 32996"]]}, "alpha_byte_count": {"int": [[395, "            alpha_byte_count = 48323"]]}, "reference_black_white": {"int": [[155, "            reference_black_white = 532"]]}, "white_balance2": {"int": [[513, "            white_balance2 = 65102"]]}, "opcode_list1": {"int": [[486, "            opcode_list1 = 51008"]]}, "t88_options": {"int": [[249, "            t88_options = 34690"]]}, "wang_tag4": {"int": [[174, "            wang_tag4 = 32934"]]}, "cip3_side": {"int": [[308, "            cip3_side = 37436"]]}, "cfa_layout": {"int": [[411, "            cfa_layout = 50711"]]}, "wang_tag1": {"int": [[171, "            wang_tag1 = 32931"]]}, "default_crop_size": {"int": [[420, "            default_crop_size = 50720"]]}, "wang_tag3": {"int": [[173, "            wang_tag3 = 32933"]]}, "exposure_index": {"int": [[303, "            exposure_index = 37397"]]}, "fedex_edr": {"int": [[272, "            fedex_edr = 34929"]]}, "bayer_green_split": {"int": [[433, "            bayer_green_split = 50733"]]}, "profile_calibration_sig": {"int": [[461, "            profile_calibration_sig = 50932"]]}, "software": {"int": [[100, "            software = 305"]]}, "oce_application_selector": {"int": [[399, "            oce_application_selector = 50216"]]}, "saturation2": {"int": [[518, "            saturation2 = 65109"]]}, "pressure": {"int": [[321, "            pressure = 37890"]]}, "uic1_tag": {"int": [[209, "            uic1_tag = 33628"]]}, "spatial_frequency_response2": {"int": [[341, "            spatial_frequency_response2 = 41484"]]}, "gain_control": {"int": [[362, "            gain_control = 41991"]]}, "alpha_offset": {"int": [[394, "            alpha_offset = 48322"]]}, "preview_color_space": {"int": [[478, "            preview_color_space = 50970"]]}, "baseline_exposure_offset": {"int": [[500, "            baseline_exposure_offset = 51109"]]}, "iso": {"int": [[258, "            iso = 34855"]]}, "shared_data": {"int": [[248, "            shared_data = 34689"]]}, "color_characterization": {"int": [[232, "            color_characterization = 34029"]]}, "panasonic_title": {"int": [[458, "            panasonic_title = 50898"]]}, "raw_file": {"int": [[511, "            raw_file = 65100"]]}, "predictor": {"int": [[104, "            predictor = 317"]]}, "baseline_exposure": {"int": [[430, "            baseline_exposure = 50730"]]}, "jpegac_tables": {"int": [[151, "            jpegac_tables = 521"]]}, "file_source": {"int": [[353, "            file_source = 41728"]]}, "black_level_delta_h": {"int": [[415, "            black_level_delta_h = 50715"]]}, "kodak_ifd": {"int": [[194, "            kodak_ifd = 33424"]]}, "preview_application_version": {"int": [[475, "            preview_application_version = 50967"]]}, "leaf_sub_ifd": {"int": [[273, "            leaf_sub_ifd = 34954"]]}, "xp_title": {"int": [[325, "            xp_title = 40091"]]}, "sharpness": {"int": [[365, "            sharpness = 41994"]]}, "t4_options": {"int": [[94, "            t4_options = 292"]]}, "original_raw_file_digest": {"int": [[481, "            original_raw_file_digest = 50973"]]}, "strip_row_counts": {"int": [[156, "            strip_row_counts = 559"]]}, "profile_look_table_data": {"int": [[485, "            profile_look_table_data = 50982"]]}, "black_level": {"int": [[414, "            black_level = 50714"]]}, "create_date": {"int": [[276, "            create_date = 36868"]]}, "default_user_crop": {"int": [[504, "            default_user_crop = 51125"]]}, "jpeg_tables2": {"int": [[142, "            jpeg_tables2 = 437"]]}, "black_level_delta_v": {"int": [[416, "            black_level_delta_v = 50716"]]}, "stitch_info": {"int": [[164, "            stitch_info = 18248"]]}, "x_clip_path_units": {"int": [[128, "            x_clip_path_units = 344"]]}, "converter": {"int": [[512, "            converter = 65101"]]}, "expand_lens": {"int": [[379, "            expand_lens = 44993"]]}, "interop_offset": {"int": [[335, "            interop_offset = 40965"]]}, "afcp_iptc": {"int": [[237, "            afcp_iptc = 34152"]]}, "uic2_tag": {"int": [[210, "            uic2_tag = 33629"]]}, "focal_plane_y_resolution2": {"int": [[344, "            focal_plane_y_resolution2 = 41487"]]}, "transfer_range": {"int": [[126, "            transfer_range = 342"]]}, "oce_scanjob_desc": {"int": [[398, "            oce_scanjob_desc = 50215"]]}, "decode": {"int": [[139, "            decode = 433"]]}, "interlace": {"int": [[260, "            interlace = 34857"]]}, "related_sound_file": {"int": [[334, "            related_sound_file = 40964"]]}, "intergraph_flag_registers": {"int": [[215, "            intergraph_flag_registers = 33919"]]}, "analog_balance": {"int": [[427, "            analog_balance = 50727"]]}, "exposure": {"int": [[514, "            exposure = 65105"]]}, "jpeg_tables": {"int": [[131, "            jpeg_tables = 347"]]}, "free_offsets": {"int": [[90, "            free_offsets = 288"]]}, "iso_speed_latitudezzz": {"int": [[268, "            iso_speed_latitudezzz = 34869"]]}, "standard_output_sensitivity": {"int": [[264, "            standard_output_sensitivity = 34865"]]}, "height_resolution": {"int": [[391, "            height_resolution = 48259"]]}, "version_year": {"int": [[137, "            version_year = 404"]]}, "jpl_carto_ifd": {"int": [[239, "            jpl_carto_ifd = 34263"]]}, "current_icc_profile": {"int": [[454, "            current_icc_profile = 50833"]]}, "device_setting_description": {"int": [[366, "            device_setting_description = 41995"]]}, "gps_info": {"int": [[257, "            gps_info = 34853"]]}, "bad_fax_lines": {"int": [[113, "            bad_fax_lines = 326"]]}, "iptc_naa": {"int": [[213, "            iptc_naa = 33723"]]}, "site": {"int": [[219, "            site = 34016"]]}, "padding": {"int": [[505, "            padding = 59932"]]}, "subject_distance_range": {"int": [[367, "            subject_distance_range = 41996"]]}, "x_position": {"int": [[88, "            x_position = 286"]]}, "cip3_sheet": {"int": [[307, "            cip3_sheet = 37435"]]}, "water_depth": {"int": [[322, "            water_depth = 37891"]]}, "hc_usage": {"int": [[233, "            hc_usage = 34030"]]}, "warp_quadrilateral": {"int": [[177, "            warp_quadrilateral = 32955"]]}, "noise2": {"int": [[342, "            noise2 = 41485"]]}, "tiff_fx_extensions": {"int": [[246, "            tiff_fx_extensions = 34687"]]}, "noise_reduction_applied": {"int": [[464, "            noise_reduction_applied = 50935"]]}, "annotations": {"int": [[402, "            annotations = 50255"]]}, "t82_options": {"int": [[141, "            t82_options = 435"]]}, "cfa_pattern": {"int": [[355, "            cfa_pattern = 41730"]]}, "color_sequence": {"int": [[220, "            color_sequence = 34017"]]}, "exposure_index2": {"int": [[350, "            exposure_index2 = 41493"]]}, "y_cb_cr_positioning": {"int": [[154, "            y_cb_cr_positioning = 531"]]}, "cfa_plane_color": {"int": [[410, "            cfa_plane_color = 50710"]]}, "color_response_unit": {"int": [[98, "            color_response_unit = 300"]]}, "sub_tile_block_size": {"int": [[482, "            sub_tile_block_size = 50974"]]}, "exif_offset": {"int": [[244, "            exif_offset = 34665"]]}, "opto_electric_conv_factor": {"int": [[259, "            opto_electric_conv_factor = 34856"]]}, "orientation": {"int": [[78, "            orientation = 274"]]}, "baseline_sharpness": {"int": [[432, "            baseline_sharpness = 50732"]]}, "thresholding": {"int": [[69, "            thresholding = 263"]]}, "jpeg_lossless_predictors": {"int": [[147, "            jpeg_lossless_predictors = 517"]]}, "active_area": {"int": [[450, "            active_area = 50829"]]}, "tile_offsets": {"int": [[111, "            tile_offsets = 324"]]}, "xp_subject": {"int": [[329, "            xp_subject = 40095"]]}, "contrast2": {"int": [[517, "            contrast2 = 65108"]]}, "original_raw_file_data": {"int": [[449, "            original_raw_file_data = 50828"]]}, "transparency_indicator": {"int": [[231, "            transparency_indicator = 34028"]]}, "geo_tiff_directory": {"int": [[251, "            geo_tiff_directory = 34735"]]}, "acceleration": {"int": [[323, "            acceleration = 37892"]]}, "lens_info": {"int": [[371, "            lens_info = 42034"]]}, "pixel_intensity_range": {"int": [[230, "            pixel_intensity_range = 34027"]]}, "fill_order": {"int": [[72, "            fill_order = 266"]]}, "baseline_noise": {"int": [[431, "            baseline_noise = 50731"]]}, "brightness_value": {"int": [[285, "            brightness_value = 37379"]]}, "original_best_quality_size": {"int": [[495, "            original_best_quality_size = 51090"]]}, "leaf_data": {"int": [[242, "            leaf_data = 34310"]]}, "white_level": {"int": [[417, "            white_level = 50717"]]}, "tile_length": {"int": [[110, "            tile_length = 323"]]}, "google_plus_upload_code": {"int": [[277, "            google_plus_upload_code = 36873"]]}, "focal_plane_resolution_unit2": {"int": [[345, "            focal_plane_resolution_unit2 = 41488"]]}, "sr2_private": {"int": [[440, "            sr2_private = 50740"]]}, "xp_author": {"int": [[327, "            xp_author = 40093"]]}, "as_shot_neutral": {"int": [[428, "            as_shot_neutral = 50728"]]}, "light_source": {"int": [[290, "            light_source = 37384"]]}, "fax_sub_address": {"int": [[270, "            fax_sub_address = 34909"]]}, "profile_copyright": {"int": [[471, "            profile_copyright = 50942"]]}, "fov_cot": {"int": [[187, "            fov_cot = 33304"]]}, "y_position": {"int": [[89, "            y_position = 287"]]}, "lens": {"int": [[509, "            lens = 65002"]]}, "white_point": {"int": [[105, "            white_point = 318"]]}, "strip_offsets": {"int": [[77, "            strip_offsets = 273"]]}, "width_resolution": {"int": [[390, "            width_resolution = 48258"]]}, "best_quality_scale": {"int": [[445, "            best_quality_scale = 50780"]]}, "dng_lens_info": {"int": [[436, "            dng_lens_info = 50736"]]}, "expand_software": {"int": [[378, "            expand_software = 44992"]]}, "clean_fax_data": {"int": [[114, "            clean_fax_data = 327"]]}, "row_interleave_factor": {"int": [[483, "            row_interleave_factor = 50975"]]}, "sony_raw_file_type": {"int": [[166, "            sony_raw_file_type = 28672"]]}, "subject_area": {"int": [[302, "            subject_area = 37396"]]}, "jpegdc_tables": {"int": [[150, "            jpegdc_tables = 520"]]}, "planar_configuration": {"int": [[86, "            planar_configuration = 284"]]}, "flash_energy2": {"int": [[340, "            flash_energy2 = 41483"]]}, "profile_ifd": {"int": [[462, "            profile_ifd = 50933"]]}, "subject_distance": {"int": [[288, "            subject_distance = 37382"]]}, "uic3_tag": {"int": [[211, "            uic3_tag = 33630"]]}, "expand_scanner": {"int": [[382, "            expand_scanner = 44996"]]}, "gray_response_curve": {"int": [[93, "            gray_response_curve = 291"]]}, "tiff_ep_standard_id2": {"int": [[351, "            tiff_ep_standard_id2 = 41494"]]}, "focal_plane_x_resolution": {"int": [[296, "            focal_plane_x_resolution = 37390"]]}, "cip3_data_file": {"int": [[306, "            cip3_data_file = 37434"]]}, "original_default_final_size": {"int": [[494, "            original_default_final_size = 51089"]]}, "focal_plane_y_resolution": {"int": [[297, "            focal_plane_y_resolution = 37391"]]}, "security_classification2": {"int": [[347, "            security_classification2 = 41490"]]}, "jpeg_restart_interval": {"int": [[146, "            jpeg_restart_interval = 515"]]}, "target_printer": {"int": [[121, "            target_printer = 337"]]}, "as_shot_white_xy": {"int": [[429, "            as_shot_white_xy = 50729"]]}, "scene_type": {"int": [[354, "            scene_type = 41729"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.data": {"var": {"io": {"?": [[564, "                io = self._root._io"]]}, "_pos": {"?": [[565, "                _pos = io.pos()"]]}}, "param": {"self": {"IfdField": [[559, "        def data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.TagEnu": {"var": {"localized_camera_model": {"int": [[409, "            localized_camera_model = 50709"]]}, "linear_response_limit": {"int": [[434, "            linear_response_limit = 50734"]]}, "jpeg_point_transforms": {"int": [[148, "            jpeg_point_transforms = 518"]]}, "region_xform_tack_point": {"int": [[176, "            region_xform_tack_point = 32954"]]}, "black_level_repeat_dim": {"int": [[413, "            black_level_repeat_dim = 50713"]]}, "camera_calibration2": {"int": [[424, "            camera_calibration2 = 50724"]]}, "preview_date_time": {"int": [[479, "            preview_date_time = 50971"]]}, "camera_label": {"int": [[497, "            camera_label = 51105"]]}, "image_type": {"int": [[387, "            image_type = 48132"]]}, "profile_look_table_dims": {"int": [[484, "            profile_look_table_dims = 50981"]]}, "page_name": {"int": [[87, "            page_name = 285"]]}, "moire_filter": {"int": [[521, "            moire_filter = 65112"]]}, "matrix_world_to_camera": {"int": [[189, "            matrix_world_to_camera = 33306"]]}, "transformation": {"int": [[385, "            transformation = 48130"]]}, "new_raw_image_digest": {"int": [[502, "            new_raw_image_digest = 51111"]]}, "image_depth": {"int": [[181, "            image_depth = 32997"]]}, "image_history2": {"int": [[348, "            image_history2 = 41491"]]}, "focal_length_in35mm_format": {"int": [[360, "            focal_length_in35mm_format = 41989"]]}, "smoothness": {"int": [[520, "            smoothness = 65111"]]}, "sensing_method": {"int": [[305, "            sensing_method = 37399"]]}, "frame_rate": {"int": [[491, "            frame_rate = 51044"]]}, "original_raw_file_name": {"int": [[448, "            original_raw_file_name = 50827"]]}, "maker_note_safety": {"int": [[441, "            maker_note_safety = 50741"]]}, "image_color_indicator": {"int": [[226, "            image_color_indicator = 34023"]]}, "as_shot_pre_profile_matrix": {"int": [[453, "            as_shot_pre_profile_matrix = 50832"]]}, "maker_note": {"int": [[310, "            maker_note = 37500"]]}, "color_matrix1": {"int": [[421, "            color_matrix1 = 50721"]]}, "color_matrix2": {"int": [[422, "            color_matrix2 = 50722"]]}, "chromatic_aberration_corr_params": {"int": [[168, "            chromatic_aberration_corr_params = 28725"]]}, "light_falloff_params": {"int": [[167, "            light_falloff_params = 28722"]]}, "sem_info": {"int": [[236, "            sem_info = 34118"]]}, "colorimetric_reference": {"int": [[456, "            colorimetric_reference = 50879"]]}, "owner_name2": {"int": [[507, "            owner_name2 = 65000"]]}, "offset_time_original": {"int": [[279, "            offset_time_original = 36881"]]}, "self_timer_mode": {"int": [[262, "            self_timer_mode = 34859"]]}, "image_offset": {"int": [[392, "            image_offset = 48320"]]}, "raw_image_digest": {"int": [[480, "            raw_image_digest = 50972"]]}, "image_reference_points": {"int": [[175, "            image_reference_points = 32953"]]}, "image_layer": {"int": [[250, "            image_layer = 34732"]]}, "related_image_file_format": {"int": [[159, "            related_image_file_format = 4096"]]}, "primary_chromaticities": {"int": [[106, "            primary_chromaticities = 319"]]}, "sensing_method2": {"int": [[352, "            sensing_method2 = 41495"]]}, "fax_recv_time": {"int": [[271, "            fax_recv_time = 34910"]]}, "related_image_height": {"int": [[161, "            related_image_height = 4098"]]}, "owner_name": {"int": [[369, "            owner_name = 42032"]]}, "md_file_tag": {"int": [[198, "            md_file_tag = 33445"]]}, "wrap_modes": {"int": [[186, "            wrap_modes = 33303"]]}, "preview_application_name": {"int": [[474, "            preview_application_name = 50966"]]}, "image_width2": {"int": [[388, "            image_width2 = 48256"]]}, "distortion_corr_params": {"int": [[169, "            distortion_corr_params = 28727"]]}, "image_id": {"int": [[170, "            image_id = 32781"]]}, "oce_image_logic": {"int": [[401, "            oce_image_logic = 50218"]]}, "expand_flash_lamp": {"int": [[383, "            expand_flash_lamp = 44997"]]}, "lens_make": {"int": [[372, "            lens_make = 42035"]]}, "sample_format": {"int": [[123, "            sample_format = 339"]]}, "affine_transform_mat": {"int": [[178, "            affine_transform_mat = 32956"]]}, "matrix_world_to_screen": {"int": [[188, "            matrix_world_to_screen = 33305"]]}, "gamma": {"int": [[377, "            gamma = 42240"]]}, "extra_samples": {"int": [[122, "            extra_samples = 338"]]}, "model_transform": {"int": [[240, "            model_transform = 34264"]]}, "time_codes": {"int": [[490, "            time_codes = 51043"]]}, "pixel_format": {"int": [[384, "            pixel_format = 48129"]]}, "photometric_interpretation": {"int": [[68, "            photometric_interpretation = 262"]]}, "metering_mode": {"int": [[289, "            metering_mode = 37383"]]}, "exif_image_height": {"int": [[333, "            exif_image_height = 40963"]]}, "print_im": {"int": [[403, "            print_im = 50341"]]}, "ink_names": {"int": [[118, "            ink_names = 333"]]}, "md_sample_info": {"int": [[202, "            md_sample_info = 33449"]]}, "compression": {"int": [[67, "            compression = 259"]]}, "camera_calibration1": {"int": [[423, "            camera_calibration1 = 50723"]]}, "image_width": {"int": [[64, "            image_width = 256"]]}, "color_map": {"int": [[107, "            color_map = 320"]]}, "coding_methods": {"int": [[136, "            coding_methods = 403"]]}, "offset_time_digitized": {"int": [[280, "            offset_time_digitized = 36882"]]}, "md_scale_pixel": {"int": [[199, "            md_scale_pixel = 33446"]]}, "md_color_table": {"int": [[200, "            md_color_table = 33447"]]}, "preview_settings_name": {"int": [[476, "            preview_settings_name = 50968"]]}, "ms_property_set_storage": {"int": [[316, "            ms_property_set_storage = 37680"]]}, "masked_areas": {"int": [[451, "            masked_areas = 50830"]]}, "pixel_magic_jbig_options": {"int": [[238, "            pixel_magic_jbig_options = 34232"]]}, "expand_film": {"int": [[380, "            expand_film = 44994"]]}, "md_lab_name": {"int": [[201, "            md_lab_name = 33448"]]}, "fax_recv_params": {"int": [[269, "            fax_recv_params = 34908"]]}, "exif_image_width": {"int": [[332, "            exif_image_width = 40962"]]}, "profile_name": {"int": [[465, "            profile_name = 50936"]]}, "samples_per_pixel": {"int": [[79, "            samples_per_pixel = 277"]]}, "modify_date": {"int": [[101, "            modify_date = 306"]]}, "cfa_repeat_pattern_dim": {"int": [[191, "            cfa_repeat_pattern_dim = 33421"]]}, "as_shot_profile_name": {"int": [[463, "            as_shot_profile_name = 50934"]]}, "intergraph_matrix": {"int": [[216, "            intergraph_matrix = 33920"]]}, "xp_comment": {"int": [[326, "            xp_comment = 40092"]]}, "image_height2": {"int": [[389, "            image_height2 = 48257"]]}, "md_prep_time": {"int": [[204, "            md_prep_time = 33451"]]}, "model2": {"int": [[190, "            model2 = 33405"]]}, "alias_layer_metadata": {"int": [[447, "            alias_layer_metadata = 50784"]]}, "reel_name": {"int": [[493, "            reel_name = 51081"]]}, "profile_embed_policy": {"int": [[470, "            profile_embed_policy = 50941"]]}, "matteing": {"int": [[179, "            matteing = 32995"]]}, "raw_image_segmentation": {"int": [[442, "            raw_image_segmentation = 50752"]]}, "related_image_width": {"int": [[160, "            related_image_width = 4097"]]}, "camera_calibration_sig": {"int": [[460, "            camera_calibration_sig = 50931"]]}, "lens_model": {"int": [[373, "            lens_model = 42036"]]}, "time_zone_offset": {"int": [[261, "            time_zone_offset = 34858"]]}, "image_description": {"int": [[74, "            image_description = 270"]]}, "make": {"int": [[75, "            make = 271"]]}, "offset_schema": {"int": [[506, "            offset_schema = 59933"]]}, "date_time_original": {"int": [[275, "            date_time_original = 36867"]]}, "offset_time": {"int": [[278, "            offset_time = 36880"]]}, "camera_elevation_angle": {"int": [[324, "            camera_elevation_angle = 37893"]]}, "geo_tiff_ascii_params": {"int": [[253, "            geo_tiff_ascii_params = 34737"]]}, "image_history": {"int": [[301, "            image_history = 37395"]]}, "forward_matrix1": {"int": [[472, "            forward_matrix1 = 50964"]]}, "forward_matrix2": {"int": [[473, "            forward_matrix2 = 50965"]]}, "original_file_name": {"int": [[404, "            original_file_name = 50547"]]}, "model_tie_point": {"int": [[218, "            model_tie_point = 33922"]]}, "xp_dip_xml": {"int": [[163, "            xp_dip_xml = 18247"]]}, "bits_per_sample": {"int": [[66, "            bits_per_sample = 258"]]}, "digital_zoom_ratio": {"int": [[359, "            digital_zoom_ratio = 41988"]]}, "global_parameters_ifd": {"int": [[133, "            global_parameters_ifd = 400"]]}, "md_prep_date": {"int": [[203, "            md_prep_date = 33450"]]}, "image_data_discard": {"int": [[396, "            image_data_discard = 48324"]]}, "image_height": {"int": [[65, "            image_height = 257"]]}, "gdal_metadata": {"int": [[375, "            gdal_metadata = 42112"]]}, "model": {"int": [[76, "            model = 272"]]}, "compressed_bits_per_pixel": {"int": [[282, "            compressed_bits_per_pixel = 37122"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.__init__": {"param": {"self": {"IfdField": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.If": {"class": {"FieldTypeEnum": {"<FieldTypeEnum>": [[53, "        class FieldTypeEnum(Enum):"]]}}, "func": {"_read": {"Ifd -> None": [[29, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.byte_length": {"param": {"self": {"IfdField": [[543, "        def byte_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.__init": {"param": {"_io": {"?": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.__init": {"param": {"_io": {"?": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.Ifd.next_ifd": {"var": {"_pos": {"?": [[43, "                _pos = self._io.pos()"]]}}, "param": {"self": {"Ifd": [[38, "        def next_ifd(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.Ifd._read": {"var": {"i": {"int": [[32, "            for i in range(self.num_fields):"]]}}, "param": {"self": {"Ifd": [[29, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe._read": {"param": {"self": {"ExifLe": [[18, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.type_byte_length": {"param": {"self": {"IfdField": [[535, "        def type_byte_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdFiel": {"func": {"data": {"IfdField -> None": [[559, "        def data(self):"]]}, "_read": {"IfdField -> None": [[528, "        def _read(self):"]]}, "is_immediate_data": {"IfdField -> bool": [[551, "        def is_immediate_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.TagE": {"var": {"ms_document_text_position": {"int": [[317, "            ms_document_text_position = 37681"]]}, "user_comment": {"int": [[311, "            user_comment = 37510"]]}, "thumbnail_length": {"int": [[145, "            thumbnail_length = 514"]]}, "profile_hue_sat_map_encoding": {"int": [[498, "            profile_hue_sat_map_encoding = 51107"]]}, "reduction_matrix2": {"int": [[426, "            reduction_matrix2 = 50726"]]}, "md_file_units": {"int": [[205, "            md_file_units = 33452"]]}, "reduction_matrix1": {"int": [[425, "            reduction_matrix1 = 50725"]]}, "unique_camera_model": {"int": [[408, "            unique_camera_model = 50708"]]}, "samsung_raw_byte_order": {"int": [[338, "            samsung_raw_byte_order = 41217"]]}, "exposure_compensation": {"int": [[286, "            exposure_compensation = 37380"]]}, "camera_serial_number": {"int": [[435, "            camera_serial_number = 50735"]]}, "current_pre_profile_matrix": {"int": [[455, "            current_pre_profile_matrix = 50834"]]}, "components_configuration": {"int": [[281, "            components_configuration = 37121"]]}, "image_number2": {"int": [[346, "            image_number2 = 41489"]]}, "uncompressed": {"int": [[386, "            uncompressed = 48131"]]}, "samsung_raw_unknown": {"int": [[339, "            samsung_raw_unknown = 41218"]]}, "page_number": {"int": [[97, "            page_number = 297"]]}, "serial_number": {"int": [[370, "            serial_number = 42033"]]}, "f_number": {"int": [[197, "            f_number = 33437"]]}, "serial_number2": {"int": [[508, "            serial_number2 = 65001"]]}, "cmyk_equivalent": {"int": [[235, "            cmyk_equivalent = 34032"]]}, "recommended_exposure_index": {"int": [[265, "            recommended_exposure_index = 34866"]]}, "thumbnail_offset": {"int": [[144, "            thumbnail_offset = 513"]]}, "s_min_sample_value": {"int": [[124, "            s_min_sample_value = 340"]]}, "calibration_illuminant1": {"int": [[443, "            calibration_illuminant1 = 50778"]]}, "y_cb_cr_sub_sampling": {"int": [[153, "            y_cb_cr_sub_sampling = 530"]]}, "calibration_illuminant2": {"int": [[444, "            calibration_illuminant2 = 50779"]]}, "uspto_miscellaneous": {"int": [[158, "            uspto_miscellaneous = 999"]]}, "document_name": {"int": [[73, "            document_name = 269"]]}, "image_byte_count": {"int": [[393, "            image_byte_count = 48321"]]}, "ms_document_text": {"int": [[315, "            ms_document_text = 37679"]]}, "ambient_temperature": {"int": [[319, "            ambient_temperature = 37888"]]}, "image_unique_id": {"int": [[368, "            image_unique_id = 42016"]]}, "min_sample_value": {"int": [[82, "            min_sample_value = 280"]]}, "custom_rendered": {"int": [[356, "            custom_rendered = 41985"]]}, "oce_id_number": {"int": [[400, "            oce_id_number = 50217"]]}, "lens_serial_number": {"int": [[374, "            lens_serial_number = 42037"]]}, "samsung_raw_pointers_length": {"int": [[337, "            samsung_raw_pointers_length = 40977"]]}, "numberof_inks": {"int": [[119, "            numberof_inks = 334"]]}, "samsung_raw_pointers_offset": {"int": [[336, "            samsung_raw_pointers_offset = 40976"]]}, "mode_number": {"int": [[138, "            mode_number = 405"]]}, "image_number": {"int": [[299, "            image_number = 37393"]]}, "sub_sec_time_original": {"int": [[313, "            sub_sec_time_original = 37521"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.__ini": {"param": {"_parent": {"None": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.__init__": {"param": {"self": {"ExifLe": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.Ifd.__init__": {"param": {"self": {"Ifd": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.is_immediate_data": {"param": {"self": {"IfdField": [[551, "        def is_immediate_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField": {"class": {"TagEnum": {"<TagEnum>": [[63, "        class TagEnum(Enum):"]]}}, "func": {"type_byte_length": {"IfdField -> int": [[535, "        def type_byte_length(self):"]]}, "byte_length": {"IfdField -> IfdField -> int": [[543, "        def byte_length(self):"]]}, "__init__": {"? -> ?": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.IfdField.FieldTypeEnum": {"var": {"word": {"int": [[56, "            word = 3"]]}, "undefined": {"int": [[59, "            undefined = 7"]]}, "ascii_string": {"int": [[55, "            ascii_string = 2"]]}, "srational": {"int": [[61, "            srational = 10"]]}, "rational": {"int": [[58, "            rational = 5"]]}, "slong": {"int": [[60, "            slong = 9"]]}, "dword": {"int": [[57, "            dword = 4"]]}, "byte": {"int": [[54, "            byte = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.__ini": {"param": {"_parent": {"None": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_l": {"class": {"ExifLe": {"<ExifLe>": [[11, "class ExifLe(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifL": {"class": {"IfdField": {"<IfdField>": [[51, "    class IfdField(KaitaiStruct):"]]}}, "func": {"_read": {"ExifLe -> None": [[18, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.I": {"func": {"next_ifd": {"Ifd -> None": [[38, "        def next_ifd(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe": {"class": {"Ifd": {"<Ifd>": [[22, "    class Ifd(KaitaiStruct):"]]}}, "func": {"ifd0": {"ExifLe -> Ifd": [[574, "    def ifd0(self):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.ifd0": {"var": {"_pos": {"?": [[578, "        _pos = self._io.pos()"]]}}, "param": {"self": {"ExifLe": [[574, "    def ifd0(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_le.ExifLe.Ifd.__ini": {"param": {"_parent": {"ExifLe": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"ExifLe": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/rawtcp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.rawtcp.RawTCPLayer.__call__": {"var": {"f": {"TCPFlow": [[23, "            f = tcp.TCPFlow(self.client_conn, self.server_conn, self)"]]}, "dst": {"?": [[41, "                    dst = server if conn == client else client"]]}, "server": {"?": [[29, "        server = self.server_conn.connection"]]}, "client": {"?": [[28, "        client = self.client_conn.connection"]]}, "conns": {"[?]": [[30, "        conns = [client, server]"]]}, "r": {"[?]": [[39, "                r = mitmproxy.net.tcp.ssl_read_select(conns, 10)"]]}, "buf": {"?": [[26, "        buf = memoryview(bytearray(self.chunk_size))"]]}, "conn": {"?": [[33, "        for conn in conns:"], [40, "                for conn in r:"]]}, "size": {"?": [[43, "                        size = conn.recv_into(buf, self.chunk_size)"]]}}, "param": {"self": {"RawTCPLayer": [[19, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.rawtcp.RawTCPLayer.__call": {"var": {"tcp_message": {"TCPMessage": [[60, "                    tcp_message = tcp.TCPMessage(dst == server, buf[:size].tobytes())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.rawtcp.RawTCPLayer": {"var": {"chunk_size": {"int": [[13, "    chunk_size = 4096"]]}}, "func": {"__call__": {"RawTCPLayer -> ?": [[19, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[15, "    def __init__(self, ctx, ignore=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.rawtcp.RawTCPLayer.__init__": {"param": {"ignore": {"bool": [[15, "    def __init__(self, ctx, ignore=False):"]]}, "self": {"RawTCPLayer": [[15, "    def __init__(self, ctx, ignore=False):"]]}, "ctx": {"{Socks5Proxy | TlsLayer}": [[15, "    def __init__(self, ctx, ignore=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.rawtcp": {"class": {"RawTCPLayer": {"<RawTCPLayer>": [[12, "class RawTCPLayer(base.Layer):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_export.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_g": {"var": {"result": {"str": [[58, "        result = \"\"\"curl -H 'header: qvalue' 'http://address:22/path?a=foo&a=bar&b=baz'\"\"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_patch": {"var": {"result": {"str": [[74, "        result = \"\"\"curl -H 'header: qvalue' -X PATCH 'http://address:22/path?query=param' -d content\"\"\""]]}}, "param": {"self": {"TestExportCurlCommand": [[73, "    def test_patch(self, patch_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRequest.test_get": {"param": {"self": {"TestRawRequest": [[164, "    def test_get(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawResponse.test_tcp": {"param": {"self": {"TestRawResponse": [[185, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_req_and_resp_presen": {"param": {"get_flow": {"?": [[141, "    def test_req_and_resp_present(self, get_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRequest.test_no_request": {"param": {"self": {"TestRawRequest": [[167, "    def test_no_request(self, get_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.test_expo": {"param": {"tmpdir": {"?": [[195, "def test_export(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRequest.test_tcp": {"param": {"self": {"TestRawRequest": [[172, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_missing_both": {"param": {"get_request": {"?": [[152, "    def test_missing_both(self, get_request):"]]}, "self": {"TestRaw": [[152, "    def test_missing_both(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand": {"param": {"get_request": {"?": [[57, "    def test_get(self, get_request):"]]}, "post_request": {"?": [[61, "    def test_post(self, post_request):"]]}, "patch_request": {"?": [[73, "    def test_patch(self, patch_request):"]]}}, "func": {"test_post": {"(TestExportCurlCommand, ?) -> None": [[61, "    def test_post(self, post_request):"]]}, "test_get": {"(TestExportCurlCommand, ?) -> None": [[57, "    def test_get(self, get_request):"]]}, "test_strip_unnecessary": {"(TestExportCurlCommand, ?) -> None": [[93, "    def test_strip_unnecessary(self, get_request):"]]}, "test_tcp": {"(TestExportCurlCommand, ?) -> None": [[77, "    def test_tcp(self, tcp_flow):"]]}, "test_patch": {"(TestExportCurlCommand, ?) -> None": [[73, "    def test_patch(self, patch_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_patch": {"var": {"result": {"str": [[120, "        result = \"\"\"http PATCH 'http://address:22/path?query=param' 'header: qvalue' <<< content\"\"\""]]}}, "param": {"self": {"TestExportHttpieCommand": [[119, "    def test_patch(self, patch_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_expor": {"class": {"TestRawResponse": {"<TestRawResponse>": [[177, "class TestRawResponse:"]]}, "TestRaw": {"<TestRaw>": [[140, "class TestRaw:"]]}, "TestRawRequest": {"<TestRawRequest>": [[163, "class TestRawRequest:"]]}}, "func": {"tcp_flow": {"() -> ?": [[52, "def tcp_flow():"]]}, "get_flow": {"() -> ?": [[28, "def get_flow():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw": {"param": {"get_response": {"?": [[148, "    def test_get_response_present(self, get_response):"]]}}, "func": {"test_missing_both": {"(TestRaw, ?) -> None": [[152, "    def test_missing_both(self, get_request):"]]}, "test_req_and_resp_present": {"(TestRaw, ?) -> None": [[141, "    def test_req_and_resp_present(self, get_flow):"]]}, "test_tcp": {"(TestRaw, ?) -> None": [[158, "    def test_tcp(self, tcp_flow):"]]}, "test_get_request_present": {"(TestRaw, ?) -> None": [[145, "    def test_get_request_present(self, get_request):"]]}, "test_get_response_present": {"(TestRaw, ?) -> None": [[148, "    def test_get_response_present(self, get_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.tes": {"param": {"tcp_flow": {"?": [[123, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_g": {"var": {"result": {"str": [[104, "        result = \"\"\"http GET 'http://address:22/path?a=foo&a=bar&b=baz' 'header: qvalue'\"\"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_escape_single_quotes_in_body": {"var": {"command": {"str": [[89, "        command = export.curl_command(request)"]]}, "request": {"?": [[82, "        request = tflow.tflow("]]}}, "param": {"self": {"TestExportCurlCommand": [[81, "    def test_escape_single_quotes_in_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_tcp": {"param": {"self": {"TestExportHttpieCommand": [[123, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRequest.tes": {"param": {"tcp_flow": {"?": [[172, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.test_cl": {"param": {"tmpdir": {"?": [[237, "async def test_clip(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_req_and_resp_present": {"param": {"self": {"TestRaw": [[141, "    def test_req_and_resp_present(self, get_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_get": {"param": {"self": {"TestExportHttpieCommand": [[103, "    def test_get(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_get": {"param": {"self": {"TestExportCurlCommand": [[57, "    def test_get(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_ex": {"func": {"get_response": {"() -> ?": [[22, "def get_response():"]]}, "post_request": {"() -> ?": [[35, "def post_request():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawResponse.test_no_respon": {"param": {"get_request": {"?": [[181, "    def test_no_response(self, get_request):"]]}, "self": {"TestRawResponse": [[181, "    def test_no_response(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_post": {"param": {"self": {"TestExportCurlCommand": [[61, "    def test_post(self, post_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export": {"func": {"qr": {"str -> str / ? -> str": [[190, "def qr(f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawResponse.test_get": {"param": {"self": {"TestRawResponse": [[178, "    def test_get(self, get_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_tcp": {"param": {"self": {"TestRaw": [[158, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawR": {"param": {"get_request": {"?": [[164, "    def test_get(self, get_request):"]]}, "get_response": {"?": [[178, "    def test_get(self, get_response):"]]}}, "func": {"test_no_response": {"(TestRawResponse, ?) -> None": [[181, "    def test_no_response(self, get_request):"]]}, "test_no_request": {"(TestRawRequest, ?) -> None": [[167, "    def test_no_request(self, get_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_strip_unnecessary": {"var": {"result": {"str": [[98, "        result = \"\"\"curl --compressed 'http://address:22/path?a=foo&a=bar&b=baz'\"\"\""]]}}, "param": {"get_request": {"?": [[93, "    def test_strip_unnecessary(self, get_request):"]]}, "self": {"TestExportCurlCommand": [[93, "    def test_strip_unnecessary(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_expo": {"func": {"get_request": {"() -> ?": [[16, "def get_request():"]]}, "patch_request": {"() -> ?": [[41, "def patch_request():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand": {"param": {"get_request": {"?": [[103, "    def test_get(self, get_request):"]]}, "post_request": {"?": [[107, "    def test_post(self, post_request):"]]}, "patch_request": {"?": [[119, "    def test_patch(self, patch_request):"]]}}, "func": {"test_post": {"(TestExportHttpieCommand, ?) -> None": [[107, "    def test_post(self, post_request):"]]}, "test_get": {"(TestExportHttpieCommand, ?) -> None": [[103, "    def test_get(self, get_request):"]]}, "test_tcp": {"(TestExportHttpieCommand, ?) -> None": [[123, "    def test_tcp(self, tcp_flow):"]]}, "test_patch": {"(TestExportHttpieCommand, ?) -> None": [[119, "    def test_patch(self, patch_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_escape_single_quotes_in_body": {"var": {"command": {"str": [[135, "        command = export.httpie_command(request)"]]}, "request": {"?": [[128, "        request = tflow.tflow("]]}}, "param": {"self": {"TestExportHttpieCommand": [[127, "    def test_escape_single_quotes_in_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_po": {"var": {"result": {"str": [[63, "        result = \"curl -X POST http://address:22/path -d nobinarysupport\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieComm": {"func": {"test_escape_single_quotes_in_body": {"TestExportHttpieCommand -> None": [[127, "    def test_escape_single_quotes_in_body(self):"]]}, "test_fails_with_binary_data": {"(TestExportHttpieCommand, ?) -> None": [[112, "    def test_fails_with_binary_data(self, post_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.tes": {"param": {"tcp_flow": {"?": [[77, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.test_export_": {"param": {"exception": {"?": [[226, "async def test_export_open(exception, log_message, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_fails_with_binary_data": {"param": {"self": {"TestExportHttpieCommand": [[112, "    def test_fails_with_binary_data(self, post_request):"]]}, "post_request": {"?": [[112, "    def test_fails_with_binary_data(self, post_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_get_request_presen": {"param": {"get_request": {"?": [[145, "    def test_get_request_present(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_get_response_present": {"param": {"self": {"TestRaw": [[148, "    def test_get_response_present(self, get_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRespon": {"func": {"test_get": {"(TestRawResponse, ?) -> None": [[178, "    def test_get(self, get_response):"]]}, "test_tcp": {"(TestRawResponse, ?) -> None": [[185, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.test_clip": {"var": {"log_message": {"str": [[260, "            log_message = \"Pyperclip could not find a \" \\"]]}, "e": {"Export": [[238, "    e = export.Export()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.test_export": {"var": {"e": {"Export": [[197, "    e = export.Export()"]]}, "f": {"str": [[196, "    f = str(tmpdir.join(\"path\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawResponse.tes": {"param": {"tcp_flow": {"?": [[185, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.test_get_request_present": {"param": {"self": {"TestRaw": [[145, "    def test_get_request_present(self, get_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_tcp": {"param": {"self": {"TestExportCurlCommand": [[77, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlComm": {"func": {"test_escape_single_quotes_in_body": {"TestExportCurlCommand -> None": [[81, "    def test_escape_single_quotes_in_body(self):"]]}, "test_fails_with_binary_data": {"(TestExportCurlCommand, ?) -> None": [[66, "    def test_fails_with_binary_data(self, post_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportCurlCommand.test_fails_with_binary_data": {"param": {"self": {"TestExportCurlCommand": [[66, "    def test_fails_with_binary_data(self, post_request):"]]}, "post_request": {"?": [[66, "    def test_fails_with_binary_data(self, post_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_post": {"param": {"self": {"TestExportHttpieCommand": [[107, "    def test_post(self, post_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestExportHttpieCommand.test_po": {"var": {"result": {"str": [[109, "        result = \"http POST http://address:22/path <<< nobinarysupport\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_": {"class": {"TestExportHttpieCommand": {"<TestExportHttpieCommand>": [[102, "class TestExportHttpieCommand:"]]}, "TestExportCurlCommand": {"<TestExportCurlCommand>": [[56, "class TestExportCurlCommand:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.test_export_open": {"var": {"e": {"Export": [[228, "    e = export.Export()"]]}, "f": {"str": [[227, "    f = str(tmpdir.join(\"path\"))"]]}}, "param": {"log_message": {"?": [[226, "async def test_export_open(exception, log_message, tmpdir):"]]}, "tmpdir": {"?": [[226, "async def test_export_open(exception, log_message, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRaw.tes": {"param": {"tcp_flow": {"?": [[158, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRequ": {"func": {"test_get": {"(TestRawRequest, ?) -> None": [[164, "    def test_get(self, get_request):"]]}, "test_tcp": {"(TestRawRequest, ?) -> None": [[172, "    def test_tcp(self, tcp_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addon": {"func": {"test_export": {"? -> None": [[195, "def test_export(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_export.TestRawRequest.test_no_requ": {"param": {"get_response": {"?": [[167, "    def test_no_request(self, get_response):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_tcp_content_": {"var": {"viewmode": {"None": [[120, "    viewmode = get(viewname)"], [122, "        viewmode = get(\"auto\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews": {"var": {"__all__": {"[str]": [[179, "__all__ = ["]]}}, "func": {"add": {"TestContentView -> None / ? -> None / ViewSwapCase -> None": [[40, "def add(view: View) -> None:"]]}, "get_content_view": {"(None, str) -> (str, None, None) / (None, ?) -> (str, None, None) / (?, ?) -> (str, None, None)": [[132, "def get_content_view(viewmode: View, data: bytes, **metadata):"]]}, "get_tcp_content_view": {"(?, ?) -> (str, None, None)": [[119, "def get_tcp_content_view(viewname: str, data: bytes):"]]}, "remove": {"TestContentView -> None / ? -> None / ViewSwapCase -> None": [[53, "def remove(view: View) -> None:"]]}, "get": {"str -> None / ? -> None": [[33, "def get(name: str) -> Optional[View]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.remove": {"var": {"l": {"?": [[55, "        l = content_types_map.setdefault(ct, [])"]]}, "ct": {"str": [[54, "    for ct in view.content_types:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentview": {"func": {"safe_to_print": {"(?, str) -> None": [[64, "def safe_to_print(lines, encoding=\"utf8\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.add": {"var": {"i": {"?": [[42, "    for i in views:"]]}, "l": {"?": [[49, "        l = content_types_map.setdefault(ct, [])"]]}, "ct": {"str": [[48, "    for ct in view.content_types:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_message_content_view": {"var": {"content": {"?": [[86, "        content = message.content"], [88, "        content = message.raw_content"]]}, "enc": {"None": [[96, "            enc = None"]], "str": [[89, "        enc = \"[cannot decode]\""], [92, "            enc = \"[decoded {}]\".format("]]}, "description": {"str": [[109, "    description, lines, error = get_content_view("], [114, "        description = \"{} {}\".format(enc, description)"]]}, "metadata": {"{dict | dict | dict | dict}": [[101, "    metadata = {}"]]}}, "param": {"message": {"None": [[78, "def get_message_content_view(viewname, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.safe_to_prin": {"var": {"text": {"None": [[73, "            text = strutils.escape_control_characters(text)"]], "?": [[72, "                text = text.decode(encoding, \"replace\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_content_view": {"var": {"content": {"?": [[155, "        content = raw(data, **metadata)[1]"]]}, "error": {"None": [[149, "        error = None"]], "str": [[156, "        error = \"{} Content viewer failed: \\n{}\".format("]]}, "ret": {"(str, ?)": [[147, "            ret = \"Couldn't parse: falling back to Raw\", get(\"Raw\")(data, **metadata)[1]"]], "?": [[145, "        ret = viewmode(data, **metadata)"]]}, "desc": {"str": [[148, "        desc, content = ret"], [152, "        desc = \"Couldn't parse: falling back to Raw\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_content_vie": {"var": {"raw": {"None": [[153, "        raw = get(\"Raw\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.safe_to_print": {"var": {"line": {"?": [[68, "    for line in lines:"]]}, "clean_line": {"[(?, None)]": [[69, "        clean_line = []"]]}}, "param": {"lines": {"?": [[64, "def safe_to_print(lines, encoding=\"utf8\"):"]]}, "encoding": {"str": [[64, "def safe_to_print(lines, encoding=\"utf8\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get": {"var": {"i": {"?": [[34, "    for i in views:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"get_message_content_view": {"(?, ?, RequestHandler -> None) -> (str, None, None) / (str, ?, ?) -> (str, None, None) / (?, ?, FlowDetails -> ?) -> (str, None, None) / (?, ?, ?) -> (str, None, None) / (?, None, FlowDetails -> ?) -> (str, None, None)": [[78, "def get_message_content_view(viewname, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_message_content_vie": {"param": {"flow": {"{FlowDetails -> ? | RequestHandler -> None}": [[78, "def get_message_content_view(viewname, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_message_content_": {"var": {"viewmode": {"None": [[82, "    viewmode = get(viewname)"], [84, "        viewmode = get(\"auto\")"]]}}, "param": {"viewname": {"str": [[78, "def get_message_content_view(viewname, message, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.get_tcp_content_view": {"var": {"description": {"str": [[127, "    description, lines, error = get_content_view(viewmode, data)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_pathoc_cmdline.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc_cmdline.test_pathoc": {"var": {"a": {"?": [[15, "    a = cmdline.args_pathoc([\"pathoc\", \"foo.com:8888\", \"get:/\"])"], [18, "    a = cmdline.args_pathoc([\"pathoc\", \"foo.com:xxx\", \"get:/\"])"], [22, "    a = cmdline.args_pathoc([\"pathoc\", \"-I\", \"10, 20\", \"foo.com:8888\", \"get:/\"])"], [25, "    a = cmdline.args_pathoc([\"pathoc\", \"-I\", \"xx, 20\", \"foo.com:8888\", \"get:/\"])"], [29, "    a = cmdline.args_pathoc([\"pathoc\", \"-c\", \"foo:10\", \"foo.com:8888\", \"get:/\"])"], [32, "    a = cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\", \"--http2\"])"], [36, "    a = cmdline.args_pathoc([\"pathoc\", \"foo.com\", \"get:/\", \"--http2-skip-connection-preface\"])"], [41, "    a = cmdline.args_pathoc([\"pathoc\", \"-c\", \"foo\", \"foo.com:8888\", \"get:/\"])"], [45, "    a = cmdline.args_pathoc("], [50, "    a = cmdline.args_pathoc("]]}, "s": {"?": [[11, "    s = io.StringIO()"]]}}, "param": {"tdata": {"?": [[9, "def test_pathoc(perror, tdata):"]]}, "perror": {"?": [[9, "def test_pathoc(perror, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_pathoc_cmdlin": {"func": {"test_pathoc": {"(?, ?) -> None": [[9, "def test_pathoc(perror, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_hex.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_hex.test_view_hex": {"var": {"v": {"?": [[6, "    v = full_eval(hex.ViewHex())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_hex": {"() -> None": [[5, "def test_view_hex():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/http2/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2": {"var": {"__all__": {"[str]": [[4, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_statusbar.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusbar.test_statusbar": {"var": {"m": {"ConsoleMaster": [[9, "    m = master.ConsoleMaster(o)"]]}, "o": {"Options": [[8, "    o = options.Options()"]]}}, "param": {"monkeypatch": {"?": [[7, "def test_statusbar(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusbar.test_shorten_": {"param": {"message": {"?": [[50, "def test_shorten_message(message, ready_message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusbar.test_shorten": {"param": {"ready_message": {"?": [[50, "def test_shorten_message(message, ready_message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusbar.test_shorten_message_narrow": {"var": {"ab": {"ActionBar": [[60, "    ab = statusbar.ActionBar(m)"]]}, "m": {"ConsoleMaster": [[59, "    m = master.ConsoleMaster(o)"]]}, "shorten_msg": {"{[(str, str)] | str}": [[61, "    shorten_msg = ab.shorten_message(\"error\", max_width=4)"]]}, "o": {"Options": [[58, "    o = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.consol": {"func": {"test_statusbar": {"? -> None": [[7, "def test_statusbar(monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusb": {"func": {"test_shorten_message": {"(?, ?) -> None": [[50, "def test_shorten_message(message, ready_message):"]]}, "test_shorten_message_narrow": {"() -> None": [[57, "def test_shorten_message_narrow():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusbar.test_status": {"var": {"bar": {"StatusBar": [[35, "    bar = statusbar.StatusBar(m)  # this already causes a redraw"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_statusbar.test_shorten_message": {"var": {"ab": {"ActionBar": [[53, "    ab = statusbar.ActionBar(m)"]]}, "m": {"ConsoleMaster": [[52, "    m = master.ConsoleMaster(o)"]]}, "o": {"Options": [[51, "    o = options.Options()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_keepserving.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.Dummy": {"param": {"loader": {"?": [[13, "    def load(self, loader):"]]}}, "func": {"load": {"(Dummy, ?) -> None": [[13, "    def load(self, loader):"]]}, "readfile": {"Dummy -> ?": [[19, "    def readfile(self) -> bool:"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self, val: bool):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.test_keepserving": {"var": {"ks": {"TKS": [[40, "    ks = TKS()"]]}, "d": {"Dummy": [[41, "    d = Dummy(True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.Dummy.readfi": {"param": {"self": {"Dummy": [[19, "    def readfile(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.Dummy.sreplay": {"param": {"self": {"Dummy": [[27, "    def sreplay(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.Dumm": {"func": {"creplay": {"Dummy -> int": [[23, "    def creplay(self) -> int:"]]}, "sreplay": {"Dummy -> int": [[27, "    def sreplay(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving": {"class": {"Dummy": {"<Dummy>": [[9, "class Dummy:"]]}, "TKS": {"<TKS>": [[31, "class TKS(keepserving.KeepServing):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.Dummy.creplay": {"param": {"self": {"Dummy": [[23, "    def creplay(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.TKS.shutdown": {"param": {"self": {"TKS": [[34, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.Dummy.load": {"param": {"self": {"Dummy": [[13, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_keepserving.TKS": {"var": {"_is_shutdown": {"?": [[32, "    _is_shutdown = False"]]}}, "func": {"shutdown": {"TKS -> None": [[34, "    def shutdown(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/full_coverage_plugin.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugin.pytest_runtestloop": {"var": {"files": {"[str]": [[80, "        files = [f for f in measured_files if f.startswith(os.path.normpath(name))]"]]}, "name": {"?": [[79, "    for name in coverage_values.keys():"]]}, "cov": {"?": [[58, "    cov = session.config.pluginmanager.getplugin(\"_cov\").cov_controller.cov"]]}, "singles": {"[(str, ?)]": [[84, "                singles = [(s, cov.report(s, ignore_errors=True, file=null)) for s in files]"]]}, "overall": {"?": [[83, "                overall = cov.report(files, ignore_errors=True, file=null)"]]}, "measured_files": {"[str]": [[76, "    measured_files = [os.path.normpath(os.path.relpath(f, prefix)) for f in cov.get_data().measured_files()]"], [77, "    measured_files = [f for f in measured_files if not any(f.startswith(excluded_f) for excluded_f in excluded_files)]"]]}, "excluded_files": {"[str]": [[75, "    excluded_files = [os.path.normpath(f) for f in no_full_cov]"]]}}, "param": {"session": {"?": [[48, "def pytest_runtestloop(session):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugin.pytest_terminal_summary": {"var": {"msg": {"str": [[107, "        msg = \"FAIL: Full test coverage not reached!\\n\""], [111, "            msg = 'Coverage for {}: {:.2f}%\\n'.format(name, coverage_values[name][0])"], [121, "        msg = 'SUCCESS: Full test coverage reached in modules and files:\\n'"], [125, "    msg = '\\nExcluded files:\\n'"]]}, "s": {"?": [[114, "                for s, v in sorted(coverage_values[name][1]):"], [126, "    for s in sorted(no_full_cov):"]]}, "markup": {"dict": [[106, "        markup = {'red': True, 'bold': True}"], [113, "                markup = {'red': True, 'bold': True}"], [118, "                markup = {'green': True}"]]}, "name": {"?": [[110, "        for name in sorted(coverage_values.keys()):"]]}}, "param": {"config": {"?": [[95, "def pytest_terminal_summary(terminalreporter, exitstatus, config):"]]}, "exitstatus": {"?": [[95, "def pytest_terminal_summary(terminalreporter, exitstatus, config):"]]}, "terminalreporter": {"?": [[95, "def pytest_terminal_summary(terminalreporter, exitstatus, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_pl": {"func": {"pytest_configure": {"? -> None": [[29, "def pytest_configure(config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugin.pytest_configure": {"var": {"c": {"?": [[41, "    c = configparser.ConfigParser()"]]}, "fs": {"?": [[43, "    fs = c['tool:full_coverage']['exclude'].split('\\n')"]]}}, "param": {"config": {"?": [[29, "def pytest_configure(config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugin": {"var": {"coverage_values": {"{[?] | dict}": [[10, "coverage_values = []"]]}, "coverage_passed": {"bool": [[11, "coverage_passed = True"]]}, "here": {"str": [[6, "here = os.path.abspath(os.path.dirname(__file__))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugin.pytest_runtestloo": {"var": {"prefix": {"str": [[73, "    prefix = os.getcwd()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plug": {"func": {"pytest_addoption": {"? -> None": [[15, "def pytest_addoption(parser):"]]}, "pytest_terminal_summary": {"(?, ?, ?) -> None": [[95, "def pytest_terminal_summary(terminalreporter, exitstatus, config):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugin.pytest_addoption": {"param": {"parser": {"?": [[15, "def pytest_addoption(parser):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.full_coverage_plugi": {"var": {"enable_coverage": {"bool": [[9, "enable_coverage = False"]]}, "no_full_cov": {"[?]": [[12, "no_full_cov = []"]]}}, "func": {"pytest_runtestloop": {"? -> ?": [[48, "def pytest_runtestloop(session):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-mitmproxy%20addons%20onboardingapp": {"var": {"datas": {"?": [[3, ""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/pathoc.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.request": {"var": {"r": {"?": [[482, "            r = next(language.parse_pathoc(r, self.use_http2))"]]}}, "param": {"self": {"{LazyPathoc | Pathoc}": [[470, "    def request(self, r):"]]}, "r": {"str": [[470, "    def request(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc": {"class": {"SSLInfo": {"<SSLInfo>": [[39, "class SSLInfo:"]]}}, "func": {"main": {"? -> None": [[497, "def main(args):  # pragma: no cover"]]}, "xrepr": {"? -> str": [[31, "def xrepr(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.socks": {"var": {"connect_reply": {"Message": [[287, "            connect_reply = socks.Message.from_file(self.rfile)"]]}}, "param": {"connect_to": {"(str, int)": [[261, "    def socks_connect(self, connect_to):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameReader.run": {"var": {"frm": {"Frame": [[142, "                            frm = websockets.Frame.from_file(self.rfile)"]]}, "r": {"[?]": [[128, "                    r, _, _ = select.select([self.rfile], [], [], 0.05)"]]}, "rfile": {"?": [[139, "                for rfile in r:"]]}, "starttime": {"int": [[122, "        starttime = time.time()"], [149, "                        starttime = time.time()"]]}, "delta": {"int": [[131, "                delta = time.time() - starttime"]]}}, "param": {"self": {"WebsocketFrameReader": [[121, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pa": {"func": {"http_connect": {"(Pathoc, (?, ?)) -> ? / (Pathoc, (str, int)) -> ? / (<Pathoc>, LazyPathoc) -> ? / (Pathoc, None) -> ? / (Pathoc, ?) -> ?": [[238, "    def http_connect(self, connect_to):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.wait": {"var": {"frm": {"?": [[363, "                    frm = self.ws_framereader.frames_queue.get("]]}}, "param": {"self": {"Pathoc": [[349, "    def wait(self, timeout=0.01, finish=True):"]]}, "finish": {"?": [[349, "    def wait(self, timeout=0.01, finish=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.sock": {"var": {"connect_request": {"Message": [[278, "            connect_request = socks.Message("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Path": {"param": {"connect_to": {"{(?, ?) | LazyPathoc}": [[297, "    def connect(self, connect_to=None, showssl=False, fp=sys.stdout):"]]}}, "func": {"websocket_start": {"(LazyPathoc, ?) -> Response / (Pathoc, ?) -> Response": [[394, "    def websocket_start(self, r):"]]}, "websocket_send_frame": {"(LazyPathoc, ?) -> None / (Pathoc, ?) -> None": [[378, "    def websocket_send_frame(self, r):"]]}, "socks_connect": {"(Pathoc, (str, int)) -> ? / (Pathoc, ?) -> ?": [[261, "    def socks_connect(self, connect_to):"]]}, "connect": {"(Pathoc, (?, ?), ?, ?) -> ConnectionCloser / (<Pathoc>, LazyPathoc, (str, ?), ?) -> ConnectionCloser / (Pathoc, None, ?, ?) -> ConnectionCloser / (Pathoc, ?, ?, ?) -> ConnectionCloser": [[297, "    def connect(self, connect_to=None, showssl=False, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.stop": {"param": {"self": {"Pathoc": [[345, "    def stop(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.wa": {"param": {"timeout": {"float": [[349, "    def wait(self, timeout=0.01, finish=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.mai": {"var": {"requests_done": {"int": [[511, "        requests_done = 0"]]}, "trycount": {"int": [[543, "            trycount = 0"], [552, "                                trycount = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.__ini": {"var": {"http2_framedump": {"?": [[169, "            http2_framedump=False,"]]}, "use_http2": {"?": [[167, "            use_http2=False,"]]}}, "param": {"http2_framedump": {"None": [[186, "    ):"]]}, "use_http2": {"tls": [[186, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameReader.__init__": {"var": {"hexdump": {"?": [[95, "            hexdump,"]]}, "logfp": {"?": [[93, "            logfp,"]]}, "self": {"WebsocketFrameReader": [[91, "            self,"]]}, "rfile": {"Reader": [[92, "            rfile,"]]}, "timeout": {"None": [[97, "            timeout"]]}, "showresp": {"?": [[94, "            showresp,"]]}}, "param": {"hexdump": {"?": [[98, "    ):"]]}, "logfp": {"?": [[98, "    ):"]]}, "self": {"WebsocketFrameReader": [[98, "    ):"]]}, "rfile": {"Reader": [[98, "    ):"]]}, "timeout": {"None": [[98, "    ):"]]}, "showresp": {"?": [[98, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameReader.__in": {"var": {"ws_read_limit": {"None": [[96, "            ws_read_limit,"]]}}, "param": {"ws_read_limit": {"None": [[98, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.SSLInfo": {"func": {"__str__": {"SSLInfo -> str": [[44, "    def __str__(self):"]]}, "__init__": {"? -> ?": [[41, "    def __init__(self, certchain, cipher, alp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.__init": {"var": {"ssl_version": {"?": [[161, "            ssl_version=tls.DEFAULT_METHOD,"]]}}, "param": {"ssl_version": {"?": [[186, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameReader.terminator": {"param": {"self": {"WebsocketFrameReader": [[117, "    def terminator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.connec": {"var": {"alpn_protos": {"[str]": [[312, "                    alpn_protos = [b'http/1.1']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc": {"var": {"ssl_options": {"?": [[162, "            ssl_options=tls.DEFAULT_OPTIONS,"]]}}, "param": {"ssl_options": {"tls": [[186, "    ):"]]}}, "func": {"http": {"(LazyPathoc, ?) -> Response / (Pathoc, ?) -> Response": [[412, "    def http(self, r):"]]}, "stop": {"Pathoc -> None": [[345, "    def stop(self):"]]}, "request": {"(LazyPathoc, ?) -> Response / (Pathoc, ?) -> Response / (Pathoc, str) -> Response / (LazyPathoc, str) -> Response": [[470, "    def request(self, r):"]]}, "__init__": {"? -> ?": [[154, "    def __init__("]]}, "wait": {"(Pathoc, float, ?) -> ?": [[349, "    def wait(self, timeout=0.01, finish=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameReader": {"func": {"__init__": {"? -> ?": [[90, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.SSLInfo.__str__": {"var": {"cn": {"?": [[53, "            for cn in i.get_subject().get_components():"], [59, "            for cn in i.get_issuer().get_components():"]]}, "n": {"?": [[50, "        for n, i in enumerate(self.certchain):"]]}, "s": {"Cert": [[82, "            s = certs.Cert(i)"]]}, "parts": {"[str]": [[45, "        parts = ["]]}, "t": {"?": [[80, "            t = types.get(pk.type(), \"Uknown\")"]]}, "pk": {"?": [[75, "            pk = i.get_pubkey()"]]}, "types": {"dict": [[76, "            types = {"]]}}, "param": {"self": {"SSLInfo": [[44, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.socks_co": {"var": {"client_greet": {"ClientGreeting": [[263, "            client_greet = socks.ClientGreeting("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.websocket_send_fram": {"var": {"logger": {"?": [[382, "        logger = log.ConnectionLogger("]]}}, "param": {"self": {"{LazyPathoc | Pathoc}": [[378, "    def websocket_send_frame(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.htt": {"var": {"resp": {"None": [[432, "            resp, req = None, None"]], "Response": [[450, "                resp = self.protocol.read_response(self.rfile, dummy_req)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.p": {"class": {"PathocError": {"<PathocError>": [[35, "class PathocError(Exception):"]]}, "Pathoc": {"<Pathoc>": [[152, "class Pathoc(tcp.TCPClient):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.path": {"class": {"WebsocketFrameReader": {"<WebsocketFrameReader>": [[88, "class WebsocketFrameReader(basethread.BaseThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.http": {"var": {"logger": {"?": [[423, "        logger = log.ConnectionLogger("]]}, "req": {"?": [[434, "                req = language.serve(r, self.wfile, self.settings)"]]}, "dummy_req": {"Request": [[439, "                dummy_req = net_http.Request("]]}}, "param": {"connect_to": {"{(?, ?) | (str, int) | LazyPathoc}": [[238, "    def http_connect(self, connect_to):"]]}, "self": {"{LazyPathoc | Pathoc}": [[412, "    def http(self, r):"]]}, "r": {"?": [[412, "    def http(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.http_connect": {"var": {"resp": {"Response": [[253, "            resp = self.protocol.read_response(self.rfile, req)"]]}, "req": {"Request": [[239, "        req = net_http.Request("]]}}, "param": {"self": {"{<Pathoc> | Pathoc}": [[238, "    def http_connect(self, connect_to):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.__init__": {"var": {"fp": {"?": [[185, "            fp=sys.stdout"]]}, "hexdump": {"?": [[181, "            hexdump=False,"]]}, "ignorecodes": {"()": [[182, "            ignorecodes=(),"]]}, "showsummary": {"?": [[184, "            showsummary=False,"]]}, "showreq": {"?": [[178, "            showreq=False,"]]}, "self": {"{<Pathoc> | Pathoc}": [[155, "            self,"]]}, "ciphers": {"None": [[164, "            ciphers=None,"]]}, "sni": {"None": [[160, "            sni=None,"]]}, "ignoretimeout": {"?": [[183, "            ignoretimeout=False,"]]}, "ssl": {"(str, ?)": [[159, "            ssl=None,"]]}, "explain": {"?": [[180, "            explain=False,"]]}, "showresp": {"?": [[179, "            showresp=False,"]]}, "timeout": {"None": [[175, "            timeout=None,"]]}, "address": {"{(?, ?) | (str, ?) | (str, ProxyThread -> ?) | (str, int) | LazyPathoc}": [[156, "            address,"]]}, "clientcert": {"None": [[163, "            clientcert=None,"]]}}, "param": {"fp": {"?": [[186, "    ):"]]}, "hexdump": {"None": [[186, "    ):"]]}, "ignorecodes": {"?": [[186, "    ):"]]}, "showsummary": {"?": [[186, "    ):"]]}, "showreq": {"?": [[186, "    ):"]]}, "self": {"{<Pathoc> | Pathoc}": [[186, "    ):"]]}, "ciphers": {"?": [[186, "    ):"]]}, "sni": {"None": [[186, "    ):"]]}, "ignoretimeout": {"?": [[186, "    ):"]]}, "ssl": {"(str, ?)": [[186, "    ):"]]}, "explain": {"None": [[186, "    ):"]]}, "showresp": {"?": [[186, "    ):"]]}, "timeout": {"?": [[186, "    ):"]]}, "address": {"{(?, ?) | (str, ?) | (str, ProxyThread -> ?) | (str, int) | LazyPathoc}": [[186, "    ):"]]}, "clientcert": {"?": [[186, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameReade": {"func": {"run": {"WebsocketFrameReader -> None": [[121, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.main": {"var": {"playlist": {"?": [[520, "                playlist = random.choice(requests)"], [522, "                playlist = itertools.chain.from_iterable(requests)"]]}, "h": {"?": [[550, "                            h = hashlib.sha256(spec.spec()).digest()"]]}, "memo": {"?": [[498, "    memo = set()"]]}, "ret": {"Response": [[562, "                            ret = p.request(spec)"]]}, "p": {"None": [[499, "    p = None"]], "Pathoc": [[523, "            p = Pathoc("]]}, "requests": {"[list]": [[508, "        requests = [list(x) for x in args.requests]"]], "?": [[502, "        requests = args.requests"]]}, "spec": {"?": [[546, "                    for spec in playlist:"], [548, "                            spec = spec.freeze(p.settings)"]]}, "_": {"?": [[566, "                            for _ in p.wait(timeout=0, finish=False):"], [570, "                    for _ in p.wait(timeout=0.01, finish=True):"]]}}, "param": {"args": {"?": [[497, "def main(args):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.socks_connect": {"param": {"self": {"Pathoc": [[261, "    def socks_connect(self, connect_to):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.SSLInfo.__init__": {"param": {"self": {"SSLInfo": [[41, "    def __init__(self, certchain, cipher, alp):"]]}, "cipher": {"(?, ?, ?)": [[41, "    def __init__(self, certchain, cipher, alp):"]]}, "certchain": {"?": [[41, "    def __init__(self, certchain, cipher, alp):"]]}, "alp": {"str": [[41, "    def __init__(self, certchain, cipher, alp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.WebsocketFrameRead": {"func": {"terminator": {"WebsocketFrameReader -> None": [[117, "    def terminator(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.connect": {"param": {"fp": {"?": [[297, "    def connect(self, connect_to=None, showssl=False, fp=sys.stdout):"]]}, "self": {"{<Pathoc> | Pathoc}": [[297, "    def connect(self, connect_to=None, showssl=False, fp=sys.stdout):"]]}, "showssl": {"(str, ?)": [[297, "    def connect(self, connect_to=None, showssl=False, fp=sys.stdout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.websocket_send_frame": {"param": {"r": {"?": [[378, "    def websocket_send_frame(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.__in": {"var": {"ws_read_limit": {"None": [[172, "            ws_read_limit=None,"]]}}, "param": {"ws_read_limit": {"None": [[186, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.websocket_start": {"var": {"resp": {"Response": [[399, "        resp = self.http(r)"]]}}, "param": {"self": {"{LazyPathoc | Pathoc}": [[394, "    def websocket_start(self, r):"]]}, "r": {"?": [[394, "    def websocket_start(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.P": {"var": {"http2_skip_connection_preface": {"?": [[168, "            http2_skip_connection_preface=False,"]]}}, "param": {"http2_skip_connection_preface": {"?": [[186, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.pathoc.Pathoc.socks_connec": {"var": {"server_greet": {"ServerGreeting": [[270, "            server_greet = socks.ServerGreeting.from_file(self.rfile)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/http2/utils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.utils.parse_head": {"var": {"first_line_format": {"str": [[21, "        first_line_format = \"relative\""], [23, "        first_line_format = \"absolute\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.util": {"func": {"parse_headers": {"dict -> (str, ?, ?, str, int, ?) / ? -> (str, ?, ?, str, int, ?) / Headers -> (str, ?, ?, str, int, ?)": [[4, "def parse_headers(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.utils.parse_": {"param": {"headers": {"{Headers | dict}": [[4, "def parse_headers(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.utils.parse_header": {"var": {"host": {"None": [[14, "    host = None"]], "str": [[30, "        host = b'localhost'"]], "?": [[27, "        host, _, port = authority.partition(b':')"]]}, "scheme": {"?": [[7, "    scheme = headers.get(':scheme', 'https').encode()"], [24, "        scheme, host, port, _ = url.parse(path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http2.utils.parse_headers": {"var": {"path": {"?": [[8, "    path = headers.get(':path', '/').encode()"]]}, "method": {"?": [[6, "    method = headers.get(':method', 'GET').encode()"]]}, "authority": {"?": [[5, "    authority = headers.get(':authority', '').encode()"]]}, "port": {"int": [[33, "        port = 443 if scheme == b'https' else 80"], [35, "    port = int(port)"]], "None": [[15, "    port = None"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/same_filename/addon.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.same_filename.addon": {"var": {"foo": {"int": [[1, "foo = 42"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/common.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow_tab": {"var": {"status_style": {"str": [[539, "        status_style = response_style or HTTP_RESPONSE_CODE_STYLE.get(response_code // 100, \"code_other\")"], [556, "        status_style = 'error'"], [562, "        status_style = 'text'"]]}, "method_style": {"str": [[523, "        method_style = 'method_http2_push'"], [525, "        method_style = request_style or HTTP_REQUEST_METHOD_STYLES.get(request_method, \"method_other\")"]]}, "scheme_style": {"str": [[519, "    scheme_style = request_style or SCHEME_STYLES.get(request_scheme, \"scheme_other\")"]]}, "response_style": {"str": [[532, "        response_style = \"intercept\""], [534, "        response_style = \"\""]]}, "request_style": {"str": [[515, "        request_style = \"intercept\""], [517, "        request_style = \"\""]]}, "content_style": {"str": [[543, "            content_style = response_style or content_style"], [546, "            content_style = 'content_none'"], [549, "            content_style = 'content_none'"], [552, "            content_style = 'content_none'"], [558, "        content_style = 'error'"], [564, "        content_style = ''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText.row": {"param": {"self": {"TruncatedText": [[172, "    def rows(self, size, focus=False):"]]}, "focus": {"?": [[172, "    def rows(self, size, focus=False):"]]}, "size": {"?": [[172, "    def rows(self, size, focus=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.fcol": {"var": {"s": {"str": [[88, "    s = str(s)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_tcp_flow": {"var": {"duration_pretty": {"str": [[631, "        duration_pretty, duration_style = format_duration(duration)"]]}, "items": {"[(str, {float | int}, TruncatedText)]": [[603, "    items = []"]]}, "conn": {"None": [[601, "    conn = f\"{human.format_address(client_address)} <-> {human.format_address(server_address)}\""]]}, "size": {"str": [[625, "        size, size_style = format_size(total_size)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText": {"func": {"rows": {"(TruncatedText, ?, ?) -> int": [[172, "    def rows(self, size, focus=False):"]]}, "render": {"(TruncatedText, ?, ?) -> None": [[175, "    def render(self, size, focus=False):"]]}, "pack": {"(TruncatedText, ?, ?) -> (int, int)": [[169, "    def pack(self, size, focus=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_keyval": {"var": {"entries": {"{[(None, str)] | [(str, ?)] | [(str, str)] | [(str, {? -> ? | str})]}": [[43, "        entries: typing.Iterable[typing.Tuple[str, typing.Union[None, str, urwid.Widget]]],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.colorize_req": {"var": {"a": {"str": [[272, "            a = 'url_punctuation'"], [277, "                    a = 'url_punctuation'"], [279, "                    a = 'url_query_value'"], [283, "                    a = 'url_punctuation'"], [285, "                    a = 'url_query_key'"], [287, "            a = 'url_extension'"], [289, "            a = 'url_filename'"], [291, "            a = 'text'"]]}, "c": {"str": [[268, "        c = s[i]"]]}, "in_val": {"?": [[265, "    in_val = False"], [276, "                    in_val = False"], [282, "                    in_val = True"]]}, "attr": {"[?]": [[266, "    attr = []"]]}, "i_last_slash": {"str": [[262, "    i_last_slash = path.rfind('/')"]]}, "i": {"int": [[267, "    for i in range(len(s)):"]]}, "i_ext": {"{int | str}": [[264, "    i_ext = i_last_slash + i_ext if i_ext >= 0 else len(s)"]], "str": [[263, "    i_ext = path[i_last_slash + 1:].rfind('.')"]]}, "path": {"str": [[260, "    path = s.split('?', 2)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText.rende": {"var": {"attr": {"[(?, int)]": [[177, "        attr = self.attr"], [180, "            attr = attr[::-1]"]]}, "c_attr": {"[(str, int)]": [[200, "            c_attr = (urwid.util.rle_subseg(attr, 0, len(visible_text.encode())) +"]], "{[(?, int)] | [(str, int)]}": [[205, "            c_attr = c_attr[::-1]"]], "?": [[192, "                c_attr = attr + [('text', remaining)]"]], "[(?, int)]": [[195, "                c_attr = attr"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText.__init__": {"param": {"text": {"str": [[163, "    def __init__(self, text, attr, align='left'):"]]}, "self": {"TruncatedText": [[163, "    def __init__(self, text, attr, align='left'):"]]}, "attr": {"{[(?, int)] | [(str, int)] | [?] | [{(str, ?) | [(str, int)]}]}": [[163, "    def __init__(self, text, attr, align='left'):"]]}, "align": {"str": [[163, "    def __init__(self, text, attr, align='left'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.forma": {"var": {"pretty_size": {"str": [[337, "    pretty_size = human.pretty_size(num_bytes)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedTex": {"func": {"__init__": {"? -> ?": [[163, "    def __init__(self, text, attr, align='left'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.rle_append_beginning_modify": {"var": {"a": {"str": [[222, "    a, r = a_r"]]}, "al": {"(str, int)": [[226, "        al, run = rle[0]"]]}}, "param": {"rle": {"[{(str, ?) | [(str, int)]}]": [[215, "def rle_append_beginning_modify(rle, a_r):"]]}, "a_r": {"(str, int)": [[215, "def rle_append_beginning_modify(rle, a_r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_content_typ": {"var": {"style": {"str": [[313, "        style = 'content_script'"], [315, "        style = 'content_text'"], [320, "        style = 'content_media'"], [322, "        style = 'content_data'"], [324, "        style = 'content_raw'"], [326, "        style = 'content_other'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.colorize_": {"param": {"url": {"?": [[296, "def colorize_url(url):"]]}, "host": {"?": [[233, "def colorize_host(host):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow_tabl": {"var": {"content": {"str": [[545, "            content = ''"], [548, "            content = \"[no content]\""], [551, "            content = \"[content missing]\""], [563, "        content = ''"]], "?": [[542, "            content, content_style = format_http_content_type(response_content_type)"], [557, "        content = error_message"]]}, "items": {"[(str, {float | int}, TruncatedText)]": [[506, "    items = ["]]}, "duration_pretty": {"str": [[576, "        duration_pretty, duration_style = format_duration(duration)"]]}, "size": {"str": [[570, "        size, size_style = format_size(response_content_length)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow_li": {"var": {"status_style": {"str": [[447, "        status_style = style or HTTP_RESPONSE_CODE_STYLE.get(response_code // 100, \"code_other\")"]]}, "method_style": {"?": [[412, "    method_style = HTTP_REQUEST_METHOD_STYLES.get(request_method, \"method_other\")"]]}, "request_url": {"str": [[421, "        request_url += \" \" + request_http_version"]]}, "url_style": {"str": [[423, "        url_style = \"intercept\""], [425, "        url_style = \"text\""], [427, "        url_style = \"title\""]]}, "style": {"str": [[443, "            style = \"intercept\""], [445, "            style = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow": {"var": {"size_style": {"str": [[463, "            size_style = \"text\""], [466, "            size_style = \"text\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_keyvals": {"var": {"indent": {"int": [[46, "        indent: int = 0"]]}, "k": {"str": [[65, "    for k, v in entries:"]]}, "key_format": {"str": [[44, "        key_format: str = \"key\","]]}, "ret": {"[?]": [[64, "    ret = []"]]}, "max_key_len": {"int": [[58, "    max_key_len = max((len(k) for k, v in entries if k is not None), default=0)"], [59, "    max_key_len = min(max_key_len, KEY_MAX)"]]}, "v": {"?": [[67, "            v = urwid.Text(\"\")"], [69, "            v = urwid.Text([(value_format, v)])"]]}, "value_format": {"str": [[45, "        value_format: str = \"text\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.form": {"var": {"pretty_duration": {"str": [[331, "    pretty_duration = human.pretty_duration(duration)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.truncated_plain": {"param": {"text": {"str": [[210, "def truncated_plain(text, attr, align='left'):"]]}, "attr": {"str": [[210, "def truncated_plain(text, attr, align='left'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.consol": {"func": {"format_http_content_type": {"? -> (?, str)": [[310, "def format_http_content_type(content_type: str) -> typing.Tuple[str, str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_left_indicato": {"var": {"pretty_timestamp": {"str": [[353, "    pretty_timestamp = human.format_timestamp(timestamp)[-8:]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common": {"var": {"HTTP_RESPONSE_CODE_STYLE": {"dict": [[131, "HTTP_RESPONSE_CODE_STYLE = {"]]}, "SYMBOL_TO_CLIENT": {"str": [[108, "    SYMBOL_TO_CLIENT = u\"\\u21d0\""], [117, "    SYMBOL_TO_CLIENT = u\"<-\""]]}, "SCHEME_STYLES": {"dict": [[119, "SCHEME_STYLES = {"]]}, "HTTP_REQUEST_METHOD_STYLES": {"dict": [[124, "HTTP_REQUEST_METHOD_STYLES = {"]]}, "SYMBOL_MARK": {"str": [[103, "    SYMBOL_MARK = u\"\\u25cf\""], [112, "    SYMBOL_MARK = \"#\""]]}, "SYMBOL_FROM_CLIENT": {"str": [[107, "    SYMBOL_FROM_CLIENT = u\"\\u21d2\""], [116, "    SYMBOL_FROM_CLIENT = u\"->\""]]}, "SYMBOL_REPLAY": {"str": [[101, "    SYMBOL_REPLAY = u\"\\u21ba\""], [110, "    SYMBOL_REPLAY = u\"[r]\""]]}, "KEY_MAX": {"int": [[39, "KEY_MAX = 30"]]}, "SYMBOL_ELLIPSIS": {"str": [[106, "    SYMBOL_ELLIPSIS = u\"\\u2026\""], [115, "    SYMBOL_ELLIPSIS = \"~\""]]}, "SYMBOL_DOWN": {"str": [[105, "    SYMBOL_DOWN = u\"\\u21E9\""], [114, "    SYMBOL_DOWN = \" \""]]}, "SYMBOL_RETURN": {"str": [[102, "    SYMBOL_RETURN = u\"\\u2190\""], [111, "    SYMBOL_RETURN = u\"<-\""]]}, "IS_WSL": {"bool": [[17, "IS_WSL = \"Microsoft\" in platform.platform()"]]}, "SYMBOL_UP": {"str": [[104, "    SYMBOL_UP = u\"\\u21E7\""], [113, "    SYMBOL_UP = \"^\""]]}}, "func": {"format_tcp_flow": {"() -> None": [[589, "def format_tcp_flow("]]}, "colorize_req": {"str -> [?] / ? -> [?]": [[259, "def colorize_req(s):"]]}, "colorize_url": {"? -> {[(str, int)] | [?]}": [[296, "def colorize_url(url):"]]}, "format_http_flow_table": {"() -> None": [[483, "def format_http_flow_table("]]}, "format_keyvals": {"([(str, {? -> ? | str})], str, str, int) -> [?] / ([(str, ?)], str, str, int) -> [?] / (?, str, str, int) -> [?] / ([(str, str)], str, str, int) -> [?] / ([(None, str)], str, str, int) -> [?]": [[42, "def format_keyvals("]]}, "highlight_key": {"(?, ?, str, str) -> [(str, ?)]": [[28, "def highlight_key(str, key, textattr=\"text\", keyattr=\"key\"):"]]}, "format_http_flow_list": {"() -> None": [[379, "def format_http_flow_list("]]}, "format_size": {"? -> (str, ?)": [[336, "def format_size(num_bytes: int) -> typing.Tuple[str, str]:"]]}, "is_keypress": {"? -> None": [[20, "def is_keypress(k):"]]}, "colorize_host": {"? -> [{(str, ?) | [(str, int)]}]": [[233, "def colorize_host(host):"]]}, "fcol": {"(?, str) -> (str, int, ?) / (str, ?) -> (str, int, ?) / (str, str) -> (str, int, ?) / (?, ?) -> (str, int, ?)": [[87, "def fcol(s: str, attr: str) -> typing.Tuple[str, int, urwid.Text]:"]]}, "format_flow": {"? -> None": [[643, "def format_flow("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_duration": {"var": {"style": {"?": [[332, "    style = 'gradient_%02d' % int(99 - 100 * min(math.log2(1 + 1000 * duration) / 12, 0.99))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_siz": {"var": {"style": {"?": [[338, "    style = 'gradient_%02d' % int(99 - 100 * min(math.log2(1 + num_bytes) / 20, 0.99))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText.rend": {"var": {"remaining": {"int": [[189, "            remaining = width - text_len"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.commo": {"class": {"TruncatedText": {"<TruncatedText>": [[162, "class TruncatedText(urwid.Widget):"]]}}, "func": {"fixlen": {"(?, ?) -> str / (?, int) -> str / (str, int) -> str": [[148, "def fixlen(s: str, maxlen: int) -> str:"]]}, "truncated_plain": {"(?, ?, str) -> TruncatedText / (?, str, str) -> TruncatedText / (None, str, str) -> TruncatedText / (str, str, str) -> TruncatedText": [[210, "def truncated_plain(text, attr, align='left'):"]]}, "fixlen_r": {"(?, ?) -> str / (str, int) -> str": [[155, "def fixlen_r(s: str, maxlen: int) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.RenderMode": {"var": {"TABLE": {"int": [[140, "    TABLE = 1"]]}, "LIST": {"int": [[142, "    LIST = 2"]]}, "DETAILVIEW": {"int": [[144, "    DETAILVIEW = 3"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow_list": {"var": {"resp": {"[(str, int, ?)]": [[438, "    resp = ["]]}, "req": {"[{(str, int, ?) | TruncatedText}]": [[402, "    req = []"]]}, "preamble_len": {"int": [[418, "    preamble_len = sum(x[1] for x in req) + len(req) - 1"]]}, "dur": {"str": [[470, "            dur, dur_style = format_duration(duration)"]]}, "size": {"str": [[460, "            size, size_style = format_size(response_content_length)"], [462, "            size = \"[no content]\""], [465, "            size = \"[content missing]\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_h": {"var": {"content_type": {"?": [[311, "    content_type = content_type.split(\";\")[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.c": {"func": {"format_duration": {"? -> (str, ?)": [[330, "def format_duration(duration: float) -> typing.Tuple[str, str]:"]]}, "rle_append_beginning_modify": {"(?, ?) -> None / ([{(str, ?) | [(str, int)]}], (str, int)) -> None": [[215, "def rle_append_beginning_modify(rle, a_r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow_table": {"var": {"status": {"str": [[538, "        status = str(response_code)"], [555, "        status = 'err'"], [561, "        status = ''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText.pack": {"param": {"self": {"TruncatedText": [[169, "    def pack(self, size, focus=False):"]]}, "focus": {"?": [[169, "    def pack(self, size, focus=False):"]]}, "size": {"?": [[169, "    def pack(self, size, focus=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"format_left_indicators": {"() -> None": [[342, "def format_left_indicators("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.colorize_url": {"var": {"parts": {"?": [[297, "    parts = url.split('/', 3)"]]}, "schemes": {"dict": [[300, "    schemes = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.truncated_p": {"param": {"align": {"str": [[210, "def truncated_plain(text, attr, align='left'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.colorize_ho": {"var": {"tld_size": {"int": [[239, "    tld_size = len(tld)"]]}, "style": {"str": [[245, "            style = 'url_domain'"], [248, "            style = 'text'"], [252, "            style = 'url_extension'"], [254, "            style = 'text'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.comm": {"class": {"RenderMode": {"<RenderMode>": [[139, "class RenderMode(enum.Enum):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.colorize_host": {"var": {"sld": {"?": [[235, "    sld = get_sld(host)"]]}, "sld_size": {"int": [[240, "    sld_size = len(sld) - tld_size"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_http_flow_lis": {"var": {"ct": {"?": [[456, "            ct, ct_style = format_http_content_type(response_content_type)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.highlight_key": {"var": {"parts": {"?": [[30, "    parts = str.split(key, 1)"]]}, "l": {"[(str, ?)]": [[29, "    l = []"]]}}, "param": {"textattr": {"str": [[28, "def highlight_key(str, key, textattr=\"text\", keyattr=\"key\"):"]]}, "str": {"?": [[28, "def highlight_key(str, key, textattr=\"text\", keyattr=\"key\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.highlight_": {"param": {"key": {"?": [[28, "def highlight_key(str, key, textattr=\"text\", keyattr=\"key\"):"]]}, "keyattr": {"str": [[28, "def highlight_key(str, key, textattr=\"text\", keyattr=\"key\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.TruncatedText.render": {"var": {"text": {"?": [[176, "        text = self.text"], [179, "            text = text[::-1]"]]}, "visible_text": {"?": [[198, "            visible_text = text[0:visible_len]"]]}, "width": {"int": [[186, "            width = text_len"]], "?": [[184, "            width = size[0]"]]}, "c_text": {"str": [[199, "            c_text = visible_text + SYMBOL_ELLIPSIS"], [204, "            c_text = c_text[::-1]"]], "?": [[191, "                c_text = text + ' ' * remaining"], [194, "                c_text = text"]]}, "visible_len": {"int": [[197, "            visible_len = width - len(SYMBOL_ELLIPSIS)"]]}, "text_len": {"int": [[182, "        text_len = len(text)  # TODO: unicode?"]]}}, "param": {"self": {"TruncatedText": [[175, "    def render(self, size, focus=False):"]]}, "focus": {"?": [[175, "    def render(self, size, focus=False):"]]}, "size": {"?": [[175, "    def render(self, size, focus=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.format_flow": {"var": {"response_is_replay": {"?": [[695, "            response_is_replay = f.response.is_replay"], [705, "            response_is_replay = False"]]}, "f": {"?": [[644, "        f: flow.Flow,"]]}, "total_size": {"int": [[664, "        total_size = 0"]]}, "response_code": {"None": [[702, "            response_code = None"]], "?": [[692, "            response_code = f.response.status_code"]]}, "error_message": {"None": [[661, "        error_message = None"]], "?": [[659, "        error_message = f.error.msg"]]}, "intercepted": {"bool": [[683, "        intercepted = ("]]}, "response_content_type": {"None": [[704, "            response_content_type = None"]], "?": [[694, "            response_content_type = f.response.headers.get(\"content-type\")"]]}, "render_func": {"() -> None": [[709, "            render_func = format_http_flow_list"], [711, "            render_func = format_http_flow_table"]]}, "duration": {"int": [[697, "                duration = max([f.response.timestamp_end - f.request.timestamp_start, 0])"]], "Flow -> None": [[668, "            duration = f.messages[-1].timestamp - f.timestamp_start"]], "None": [[670, "            duration = None"], [699, "                duration = None"], [706, "            duration = None"]]}, "response_content_length": {"int": [[689, "                response_content_length = len(f.response.raw_content)"]], "None": [[691, "                response_content_length = None"], [701, "            response_content_length = None"]]}, "message": {"?": [[665, "        for message in f.messages:"]]}, "response_reason": {"None": [[703, "            response_reason = None"]], "?": [[693, "            response_reason = f.response.reason"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.coloriz": {"var": {"i_query": {"int": [[261, "    i_query = len(path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.common.colorize_hos": {"var": {"character": {"?": [[243, "        character = host[letter]"]]}, "attr": {"[{(str, ?) | [(str, int)]}]": [[237, "    attr = []"]]}, "letter": {"?": [[242, "    for letter in reversed(range(len(host))):"]]}, "tld": {"?": [[234, "    tld = get_tld(host)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console": {"func": {"format_right_indicators": {"() -> None": [[361, "def format_right_indicators("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-stream-simple.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-stream-simpl": {"func": {"responseheaders": {"? -> None": [[9, "def responseheaders(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-stream-simple.responseheaders": {"param": {"flow": {"?": [[9, "def responseheaders(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_websockets.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websock": {"func": {"parse_request": {"? -> ? / str -> ?": [[10, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFr": {"func": {"_test_messages": {"(TestWebsocketFrame, ?, ?) -> None / (TestWebsocketFrame, [str], <WebsocketFrame>) -> None / (TestWebsocketFrame, [str], <WebsocketClientFrame>) -> None": [[16, "    def _test_messages(self, specs, message_klass):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_rawbody": {"var": {"frm": {"Frame": [[93, "        frm = self.fr(\"wf:mask:r'foo'\")"]]}}, "param": {"self": {"TestWebsocketFrame": [[92, "    def test_rawbody(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketF": {"func": {"test_nested_frame": {"TestWebsocketFrame -> None": [[58, "    def test_nested_frame(self):"]]}, "test_parse_websocket_frames": {"TestWebsocketFrame -> None": [[46, "    def test_parse_websocket_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame._test_messages": {"var": {"i": {"str": [[17, "        for i in specs:"]]}, "wf": {"?": [[18, "            wf = parse_request(i)"]]}, "wf2": {"?": [[25, "            wf2 = parse_request(spec)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_construction_2": {"var": {"frm": {"Frame": [[101, "        frm = self.fr(\"wf:b'foo'\")"], [106, "        frm = self.fr(\"wf:b'foo'\", is_client=True)"], [109, "        frm = self.fr(\"wf:b'foo':k'abcd'\", is_client=True)"], [114, "        frm = self.fr(\"wf:b'foo':mask\")"], [117, "        frm = self.fr(\"wf:b'foo':k'abcd'\")"], [122, "        frm = self.fr(\"wf:b'foo':-mask\", is_client=True)"]]}}, "param": {"self": {"TestWebsocketFrame": [[99, "    def test_construction_2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_server_valu": {"var": {"specs": {"[str]": [[29, "        specs = ["]]}}, "param": {"self": {"TestWebsocketFrame": [[28, "    def test_server_values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_length": {"var": {"frm": {"Frame": [[132, "        frm = self.fr(\"wf:l2:b'foo'\")"]]}}, "param": {"self": {"TestWebsocketFrame": [[130, "    def test_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.fr": {"var": {"wf": {"?": [[81, "        wf = parse_request(spec)"]]}, "settings": {"Settings": [[80, "        settings = language.base.Settings(**kwargs)"]]}}, "param": {"self": {"TestWebsocketFrame": [[79, "    def fr(self, spec, **kwargs):"]]}, "spec": {"str": [[79, "    def fr(self, spec, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_nested_frame": {"var": {"wf": {"?": [[59, "        wf = parse_request(\"wf:f'wf'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame._test": {"param": {"message_klass": {"{<WebsocketClientFrame> | <WebsocketFrame>}": [[16, "    def _test_messages(self, specs, message_klass):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_client_valu": {"var": {"specs": {"[str]": [[53, "        specs = ["]]}}, "param": {"self": {"TestWebsocketFrame": [[52, "    def test_client_values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame": {"func": {"fr": {"(TestWebsocketFrame, ?) -> Frame / (TestWebsocketFrame, str) -> Frame": [[79, "    def fr(self, spec, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame._test_messag": {"var": {"spec": {"?": [[24, "            spec = wf.spec()"]]}}, "param": {"self": {"TestWebsocketFrame": [[16, "    def _test_messages(self, specs, message_klass):"]]}, "specs": {"[str]": [[16, "    def _test_messages(self, specs, message_klass):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_nested_fram": {"param": {"self": {"TestWebsocketFrame": [[58, "    def test_nested_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_flags": {"var": {"wf": {"?": [[63, "        wf = parse_request(\"wf:fin:mask:rsv1:rsv2:rsv3\")"], [71, "        wf = parse_request(\"wf:-fin:-mask:-rsv1:-rsv2:-rsv3\")"]]}, "frm": {"Frame": [[64, "        frm = mitmproxy.net.websockets.Frame.from_bytes(tservers.render(wf))"], [72, "        frm = mitmproxy.net.websockets.Frame.from_bytes(tservers.render(wf))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_w": {"class": {"TestWebsocketFrame": {"<TestWebsocketFrame>": [[14, "class TestWebsocketFrame:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_parse_websocket_frames": {"var": {"wf": {"?": [[47, "        wf = language.parse_websocket_frame(\"wf:x10\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.parse_request": {"param": {"s": {"str": [[10, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_flag": {"param": {"self": {"TestWebsocketFrame": [[62, "    def test_flags(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_parse_websocket_fram": {"param": {"self": {"TestWebsocketFrame": [[46, "    def test_parse_websocket_frames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_construction": {"param": {"self": {"TestWebsocketFrame": [[84, "    def test_construction(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFrame.test_knon": {"param": {"self": {"TestWebsocketFrame": [[126, "    def test_knone(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_websockets.TestWebsocketFram": {"func": {"test_rawbody": {"TestWebsocketFrame -> None": [[92, "    def test_rawbody(self):"]]}, "test_client_values": {"TestWebsocketFrame -> None": [[52, "    def test_client_values(self):"]]}, "test_construction": {"TestWebsocketFrame -> None": [[84, "    def test_construction(self):"]]}, "test_flags": {"TestWebsocketFrame -> None": [[62, "    def test_flags(self):"]]}, "test_knone": {"TestWebsocketFrame -> None": [[126, "    def test_knone(self):"]]}, "test_length": {"TestWebsocketFrame -> None": [[130, "    def test_length(self):"]]}, "test_server_values": {"TestWebsocketFrame -> None": [[28, "    def test_server_values(self):"]]}, "test_construction_2": {"TestWebsocketFrame -> None": [[99, "    def test_construction_2(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/tnetstring.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring.lo": {"var": {"data": {"str": [[180, "    data = file_handle.read(int(data_length))"]]}, "data_length": {"str": [[171, "    data_length = b\"\""]]}, "data_type": {"str": [[181, "    data_type = file_handle.read(1)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring.pop": {"var": {"blength": {"str": [[236, "        blength, data = data.split(b':', 1)"]]}, "length": {"int": [[237, "        length = int(blength)"]]}, "data": {"str": [[241, "        data, data_type, remain = data[:length], data[length], data[length + 1:]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring.pars": {"var": {"item": {"{[?] | [{[?] | dict | float | int}] | dict | dict | float | int | str}": [[215, "            item, data = pop(data)"]]}, "key": {"{[?] | [{[?] | dict | float | int}] | dict | dict | float | int | str}": [[221, "            key, data = pop(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring._rdumpq": {"var": {"ldata": {"int": [[97, "        ldata = len(data)"], [107, "        ldata = len(data)"], [113, "        ldata = len(data)"], [122, "        ldata = len(data)"]]}, "span": {"?": [[98, "        span = str(ldata).encode()"], [108, "        span = str(ldata).encode()"], [114, "        span = str(ldata).encode()"], [123, "        span = str(ldata).encode()"], [134, "        span = str(size - init_size).encode()"], [144, "        span = str(size - init_size).encode()"]]}, "write": {"?": [[85, "    write = q.appendleft"]]}, "item": {"?": [[132, "        for item in reversed(value):"]]}, "init_size": {"int": [[131, "        init_size = size = size + 1"], [140, "        init_size = size = size + 1"]]}, "data": {"str": [[106, "        data = repr(value).encode()"]], "?": [[96, "        data = str(value).encode()"], [112, "        data = value"], [121, "        data = value.encode(\"utf8\")"]]}, "size": {"int": [[133, "            size = _rdumpq(q, size, item)"], [142, "            size = _rdumpq(q, size, v)"], [143, "            size = _rdumpq(q, size, k)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring": {"var": {"TSerializable": {"?": [[46, "TSerializable = typing.Union[None, str, bool, int, float, bytes, list, tuple, dict]"]]}, "__all__": {"[str]": [[250, "__all__ = [\"dump\", \"dumps\", \"load\", \"loads\", \"pop\"]"]]}}, "func": {"load": {"? -> {[?] | dict | float | int} / file -> {[{[{[?] | dict | float | int}] | dict | float | int | str}] | dict | float | int | str}": [[159, "def load(file_handle: typing.BinaryIO) -> TSerializable:"]]}, "parse": {"(?, ?) -> {[?] | dict | float | int} / (str, str) -> {[{[{[?] | dict | float | int}] | dict | float | int | str}] | dict | float | int | str} / (?, str) -> {[{[?] | dict | float | int}] | dict | float | int | str}": [[186, "def parse(data_type: int, data: bytes) -> TSerializable:"]]}, "dump": {"({[?] | bool | dict | int}, ?) -> None / (?, ?) -> None": [[61, "def dump(value: TSerializable, file_handle: typing.BinaryIO) -> None:"]]}, "pop": {"None -> ({[?] | dict | float | int}, ?) / str -> ({[{[?] | dict | float | int}] | dict | float | int | str}, str) / ? -> ({[?] | dict | float | int}, ?)": [[228, "def pop(data: bytes) -> typing.Tuple[TSerializable, bytes]:"]]}, "dumps": {"int -> None / ? -> None / {[?] | bool | dict | int} -> None": [[49, "def dumps(value: TSerializable) -> bytes:"]]}, "_rdumpq": {"(?, int, int) -> int / (?, int, {[?] | bool | dict | int}) -> int / (?, int, ?) -> int / (?, ?, ?) -> int": [[69, "def _rdumpq(q: collections.deque, size: int, value: TSerializable) -> int:"]]}, "loads": {"None -> {[?] | dict | float | int} / ? -> {[?] | dict | float | int}": [[152, "def loads(string: bytes) -> TSerializable:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring.load": {"var": {"c": {"str": [[168, "    c = file_handle.read(1)"], [176, "        c = file_handle.read(1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.tnetstring.parse": {"var": {"l": {"{[?] | [{[?] | dict | float | int}] | [{[{[?] | dict | float | int}] | dict | float | int | str}]}": [[213, "        l = []"]]}, "val": {"{[?] | [{[?] | dict | float | int}] | dict | dict | float | int | str}": [[222, "            val, data = pop(data)"]]}, "d": {"{dict | dict | dict}": [[219, "        d = {}"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/flowdetailview.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowdetailview.maybe_timestamp": {"param": {"base": {"Request": [[11, "def maybe_timestamp(base, attr):"]]}, "attr": {"str": [[11, "def maybe_timestamp(base, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowdetailview.flowdetails": {"var": {"cc": {"?": [[22, "    cc = flow.client_conn"]]}, "text": {"[?]": [[19, "    text = []"]]}, "c": {"?": [[54, "        c = sc.cert"]]}, "req": {"None": [[29, "        req = None"]], "Request": [[26, "        req = flow.request"]]}, "metadata": {"?": [[31, "    metadata = flow.metadata"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowdetailview": {"func": {"maybe_timestamp": {"(Request, str) -> str / (?, str) -> str / (?, ?) -> str / (None, str) -> str": [[11, "def maybe_timestamp(base, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowdetailv": {"func": {"flowdetails": {"(FlowDetails -> ?, FlowDetails -> ?) -> None / (?, ?) -> None": [[18, "def flowdetails(state, flow: mitmproxy.flow.Flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.flowdetailview.flowdetail": {"var": {"sc": {"?": [[21, "    sc = flow.server_conn"]]}, "resp": {"None": [[30, "        resp = None"]], "?": [[27, "        resp = flow.response"]]}, "parts": {"[(str, str)]": [[34, "        parts = [(str(k), repr(v)) for k, v in metadata.items()]"], [40, "        parts = ["], [57, "            parts = ["], [121, "    parts = []"]], "{[(str, str)] | [(str, {? -> ? | str})]}": [[103, "        parts = ["]], "?": [[201, "        parts = sorted(parts, key=lambda p: p[1])"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/wsgi.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.error_page": {"var": {"c": {"str": [[100, "        c = \"\"\""]]}}, "param": {"soc": {"?": [[95, "    def error_page(self, soc, headers_sent, s):"]]}, "s": {"?": [[95, "    def error_page(self, soc, headers_sent, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.w": {"func": {"date_time_string": {"() -> None": [[31, "def date_time_string():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.make_": {"var": {"environ": {"{dict | dict}": [[65, "        environ = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.ClientCo": {"func": {"__init__": {"? -> ?": [[12, "    def __init__(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serve.write": {"param": {"data": {"str": [[122, "        def write(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serve.start_response": {"param": {"status": {"?": [[137, "        def start_response(status, headers, exc_info=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdapt": {"func": {"make_environ": {"(WSGIAdaptor, ?, ?) -> dict / (WSGIAdaptor, Flow, None) -> dict / (WSGIAdaptor, Flow, ?) -> dict": [[54, "    def make_environ(self, flow, errsoc, **extra):"]]}, "error_page": {"(WSGIAdaptor, ?, ?, ?) -> None": [[95, "    def error_page(self, soc, headers_sent, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serve.writ": {"var": {"headers": {"?": [[125, "                headers = state[\"headers\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serve": {"var": {"i": {"?": [[154, "            for i in dataiter:"]]}, "s": {"?": [[160, "                s = traceback.format_exc()"]]}}, "param": {"soc": {"?": [[114, "    def serve(self, request, soc, **env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.error_pag": {"param": {"self": {"WSGIAdaptor": [[95, "    def error_page(self, soc, headers_sent, s):"]]}, "headers_sent": {"?": [[95, "    def error_page(self, soc, headers_sent, s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.Request.__init__": {"param": {"self": {"Request": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}, "content": {"str": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}, "headers": {"Headers": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}, "path": {"str": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}, "scheme": {"str": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}, "method": {"str": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdapto": {"func": {"serve": {"(WSGIAdaptor, ?, ?) -> ? / (WSGIAdaptor, Flow, ?) -> ?": [[114, "    def serve(self, request, soc, **env):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serve.start_respons": {"param": {"exc_info": {"None": [[137, "        def start_response(status, headers, exc_info=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serve.start_respon": {"param": {"headers": {"?": [[137, "        def start_response(status, headers, exc_info=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.make_environ": {"var": {"path": {"None": [[59, "        path = strutils.always_str(flow.request.path, \"latin-1\")"]]}, "key": {"str": [[90, "            key = 'HTTP_' + strutils.always_str(key, \"latin-1\").upper().replace('-', '_')"]], "?": [[89, "        for key, value in flow.request.headers.items():"]]}, "query": {"str": [[64, "            query = ''"]]}}, "param": {"errsoc": {"None": [[54, "    def make_environ(self, flow, errsoc, **extra):"]]}, "self": {"WSGIAdaptor": [[54, "    def make_environ(self, flow, errsoc, **extra):"]]}, "flow": {"Flow": [[54, "    def make_environ(self, flow, errsoc, **extra):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.Flow": {"func": {"__init__": {"? -> ?": [[18, "    def __init__(self, address, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.Requ": {"param": {"http_version": {"str": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.date_time_string": {"var": {"s": {"?": [[41, "    s = \"%s, %02d %3s %4d %02d:%02d:%02d GMT\" % ("]]}, "WEEKS": {"[str]": [[33, "    WEEKS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']"]]}, "MONTHS": {"[str]": [[34, "    MONTHS = ["]]}, "now": {"int": [[39, "    now = time.time()"]]}, "year": {"?": [[40, "    year, month, day, hh, mm, ss, wd, y_, z_ = time.gmtime(now)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.__init__": {"param": {"sversion": {"str": [[51, "    def __init__(self, app, domain, port, sversion):"]]}, "self": {"WSGIAdaptor": [[51, "    def __init__(self, app, domain, port, sversion):"]]}, "app": {"{(?, ?) -> ? | (?, ?) -> ? | (?, ?) -> [?] | (WSGIAdaptor, dict) -> ? | ExampleApp}": [[51, "    def __init__(self, app, domain, port, sversion):"]]}, "domain": {"str": [[51, "    def __init__(self, app, domain, port, sversion):"]]}, "port": {"int": [[51, "    def __init__(self, app, domain, port, sversion):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.serv": {"var": {"errs": {"?": [[149, "        errs = io.BytesIO()"]]}, "state": {"dict": [[115, "        state = dict("]]}, "dataiter": {"?": [[151, "            dataiter = self.app("]]}}, "param": {"self": {"WSGIAdaptor": [[114, "    def serve(self, request, soc, **env):"]]}, "request": {"Flow": [[114, "    def serve(self, request, soc, **env):"]]}}, "func": {"write": {"str -> None / ? -> None": [[122, "        def write(data):"]]}, "start_response": {"(?, ?, None) -> None": [[137, "        def start_response(status, headers, exc_info=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.Reques": {"func": {"__init__": {"? -> ?": [[25, "    def __init__(self, scheme, method, path, http_version, headers, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor": {"func": {"__init__": {"? -> ?": [[51, "    def __init__(self, app, domain, port, sversion):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.Flow.__init__": {"param": {"self": {"Flow": [[18, "    def __init__(self, address, request):"]]}, "request": {"Request": [[18, "    def __init__(self, address, request):"]]}, "address": {"(str, int)": [[18, "    def __init__(self, address, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsg": {"class": {"ClientConn": {"<ClientConn>": [[10, "class ClientConn:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi": {"class": {"Request": {"<Request>": [[23, "class Request:"]]}, "WSGIAdaptor": {"<WSGIAdaptor>": [[49, "class WSGIAdaptor:"]]}, "Flow": {"<Flow>": [[16, "class Flow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.WSGIAdaptor.make_envir": {"var": {"path_info": {"None": [[63, "            path_info = path"]], "?": [[61, "            path_info, query = strutils.always_str(path, \"latin-1\").split('?', 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.wsgi.ClientConn.__init__": {"param": {"self": {"ClientConn": [[12, "    def __init__(self, address):"]]}, "address": {"(str, int)": [[12, "    def __init__(self, address):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/tls.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__c": {"var": {"establish_server_tls_now": {"?": [[272, "        establish_server_tls_now = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.server_sni": {"param": {"self": {"TlsLayer": [[325, "    def server_sni(self) -> Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__repr__": {"param": {"self": {"TlsLayer": [[287, "    def __repr__(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__call__": {"var": {"layer": {"?": [[284, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"TlsLayer": [[229, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_server": {"var": {"alpn": {"None": [[408, "            alpn = None"]], "[?]": [[414, "                    alpn = ["], [430, "                alpn = [self.client_conn.get_alpn_proto_negotiated()]"]]}, "id": {"?": [[438, "                for id in self._client_hello.cipher_suites:"]]}}, "param": {"self": {"TlsLayer": [[405, "    def _establish_tls_with_server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__alpn_select_callback": {"var": {"default_alpn": {"str": [[344, "        default_alpn = b'http/1.1'"]]}, "choice": {"?": [[347, "            choice = bytes(self.alpn_for_client_connection)"], [349, "            choice = bytes(default_alpn)"], [351, "            choice = options[0]"]]}}, "param": {"self": {"TlsLayer": [[342, "    def __alpn_select_callback(self, conn_, options):"]]}, "conn_": {"?": [[342, "    def __alpn_select_callback(self, conn_, options):"]]}, "options": {"?": [[342, "    def __alpn_select_callback(self, conn_, options):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.server_t": {"param": {"self": {"TlsLayer": [[318, "    def server_tls(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_clien": {"var": {"extra_certs": {"None": [[377, "            extra_certs = None"]], "?": [[375, "            extra_certs = self.server_conn.server_certs"]]}, "cert": {"?": [[372, "        cert, key, chain_file = self._find_cert()"]]}, "tls_method": {"?": [[380, "            tls_method, tls_options = net_tls.VERSION_CHOICES[self.config.options.ssl_version_client]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLay": {"param": {"custom_server_sni": {"{int | str}": [[221, "    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=None):"]]}}, "func": {"alpn_for_client_connection": {"TlsLayer -> ?": [[339, "    def alpn_for_client_connection(self):"]]}, "set_server_tls": {"(TlsLayer, ?, None) -> None": [[303, "    def set_server_tls(self, server_tls: bool, sni: Union[str, None, bool] = None) -> None:"]]}, "_find_cert": {"TlsLayer -> None": [[469, "    def _find_cert(self):"]]}, "_establish_tls_with_client_and_server": {"TlsLayer -> ?": [[355, "    def _establish_tls_with_client_and_server(self):"]]}, "__repr__": {"TlsLayer -> str": [[287, "    def __repr__(self):  # pragma: no cover"]]}, "server_sni": {"TlsLayer -> None": [[325, "    def server_sni(self) -> Optional[str]:"]]}, "_establish_tls_with_server": {"TlsLayer -> ?": [[405, "    def _establish_tls_with_server(self):"]]}, "server_tls": {"TlsLayer -> bool": [[318, "    def server_tls(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._find": {"var": {"use_upstream_cert": {"?": [[485, "        use_upstream_cert = ("]]}, "upstream_cert": {"?": [[491, "            upstream_cert = self.server_conn.cert"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._find_cert": {"var": {"sans": {"?": [[475, "        sans = set()"]]}}, "param": {"self": {"TlsLayer": [[469, "    def _find_cert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__ini": {"param": {"server_tls": {"bool": [[221, "    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__ca": {"var": {"client_tls_requires_server_connection": {"?": [[261, "        client_tls_requires_server_connection = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_serv": {"var": {"tls_cert_err": {"?": [[450, "            tls_cert_err = self.server_conn.ssl_verification_error"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.__init__": {"param": {"self": {"{TlsFeedback | TlsLayer}": [[221, "    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=None):"]]}, "ctx": {"{ReverseProxy | ServerConnectionMixin | Socks5Proxy | TlsLayer | UpstreamConnectLayer}": [[221, "    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_client": {"param": {"self": {"TlsLayer": [[370, "    def _establish_tls_with_client(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.connect": {"param": {"self": {"TlsLayer": [[297, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._find_ce": {"var": {"organization": {"None": [[476, "        organization = None"]], "?": [[497, "                organization = upstream_cert.organization"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer": {"param": {"client_tls": {"bool": [[221, "    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=None):"]]}}, "func": {"__call__": {"TlsLayer -> ?": [[229, "    def __call__(self):"]]}, "__alpn_select_callback": {"(TlsLayer, ?, ?) -> None": [[342, "    def __alpn_select_callback(self, conn_, options):"]]}, "_establish_tls_with_client": {"TlsLayer -> ?": [[370, "    def _establish_tls_with_client(self):"]]}, "connect": {"TlsLayer -> None": [[297, "    def connect(self):"]]}, "__init__": {"? -> ?": [[221, "    def __init__(self, ctx, client_tls, server_tls, custom_server_sni=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_clie": {"var": {"sni_str": {"ClientHello -> None": [[397, "            sni_str = self._client_hello.sni and self._client_hello.sni.decode(\"idna\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_serve": {"var": {"args": {"dict": [[443, "            args = net_tls.client_arguments_from_options(self.config.options)"]]}, "proto": {"str": [[466, "        proto = self.alpn_for_client_connection.decode() if self.alpn_for_client_connection else '-'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls": {"var": {"DEFAULT_CLIENT_CIPHERS": {"str": [[200, "DEFAULT_CLIENT_CIPHERS = ("]]}, "CIPHER_ID_NAME_MAP": {"dict": [[9, "CIPHER_ID_NAME_MAP = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_with_client_and_server": {"param": {"self": {"TlsLayer": [[355, "    def _establish_tls_with_client_and_server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.t": {"class": {"TlsLayer": {"<TlsLayer>": [[210, "class TlsLayer(base.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._find_cer": {"var": {"host": {"None": [[474, "        host = None"]], "?": [[482, "            host = self.server_conn.address[0].encode(\"idna\")"], [495, "                host = upstream_cert.cn.decode(\"utf8\").encode(\"idna\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer._establish_tls_wit": {"var": {"ciphers_server": {"[str]": [[437, "                ciphers_server = []"]], "str": [[441, "                ciphers_server = ':'.join(ciphers_server)"]], "?": [[435, "            ciphers_server = self.config.options.ciphers_server"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.tls.TlsLayer.alpn_for_client_connection": {"param": {"self": {"TlsLayer": [[339, "    def alpn_for_client_connection(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/console/test_common.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_common.test_format_flow": {"var": {"render_mode": {"?": [[15, "        for render_mode in common.RenderMode:"]]}, "f": {"?": [[14, "    for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_common.test_format_keyvals": {"var": {"wrapped": {"?": [[28, "    wrapped = urwid.BoxAdapter("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_common": {"func": {"test_format_keyvals": {"() -> None": [[20, "def test_format_keyvals():"]]}, "test_format_flow": {"() -> None": [[7, "def test_format_flow():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.console.test_common.test_format_": {"var": {"flows": {"[?]": [[8, "    flows = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_url.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_url": {"var": {"test_quote": {"() -> None": [[137, "    assert url.quote(\"foo\") == \"foo\""]]}}, "func": {"test_ascii_check": {"() -> None": [[52, "def test_ascii_check():"]]}, "test_parse": {"() -> None": [[7, "def test_parse():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_url.test_ascii_check": {"var": {"test_url": {"str": [[54, "    test_url = \"https://xyz.tax-edu.net?flag=selectCourse&lc_id=42825&lc_name=\u8305\u83bd\u83bd\u732b\u6c13\u732b\u6c13\".encode()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_url.test_parse": {"var": {"s": {"?": [[11, "    s, h, po, pa = url.parse(b\"http://foo.com:8888/test\")"], [17, "    s, h, po, pa = url.parse(\"http://foo/bar\")"], [23, "    s, h, po, pa = url.parse(b\"http://user:pass@foo/bar\")"], [29, "    s, h, po, pa = url.parse(b\"http://foo\")"], [32, "    s, h, po, pa = url.parse(b\"https://foo\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/connections.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection": {"var": {"_stateobject_attributes": {"dict": [[224, "    _stateobject_attributes = dict("]]}}, "func": {"from_state": {"(<ServerConnection>, ?) -> ServerConnection / (<ServerConnection>, dict) -> ServerConnection": [[241, "    def from_state(cls, state):"]]}, "establish_tls": {"ServerConnection -> None": [[276, "    def establish_tls(self, *, sni=None, client_certs=None, **kwargs):"]]}, "__repr__": {"ServerConnection -> str": [[197, "    def __repr__(self):"]]}, "__hash__": {"ServerConnection -> int": [[221, "    def __hash__(self):"]]}, "make_dummy": {"(<ServerConnection>, (str, int)) -> ServerConnection / (<ServerConnection>, ?) -> ServerConnection / (<ServerConnection>, (? -> ?, ? -> ?)) -> ServerConnection / (<ServerConnection>, ({? -> ? | str}, {? -> ? | int})) -> ServerConnection": [[247, "    def make_dummy(cls, address):"]]}, "__eq__": {"(ServerConnection, ?) -> bool": [[216, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.from_state": {"var": {"f": {"ClientConnection": [[113, "        f = cls(None, tuple(), None)"]]}}, "param": {"cls": {"<ClientConnection>": [[112, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.__eq__": {"param": {"self": {"ServerConnection": [[216, "    def __eq__(self, other):"]]}, "other": {"?": [[216, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.finish": {"param": {"self": {"ClientConnection": [[157, "    def finish(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.__init__": {"param": {"self": {"ServerConnection": [[182, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}, "address": {"{(?, ?) | (str, ?) | (str, int) | Pathoc | ServerConnection | str | tuple}": [[182, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.make_dummy": {"param": {"address": {"(str, int)": [[118, "    def make_dummy(cls, address):"]]}, "cls": {"<ClientConnection>": [[118, "    def make_dummy(cls, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnecti": {"func": {"connected": {"ServerConnection -> bool": [[194, "    def connected(self):"]]}, "connect": {"ServerConnection -> None": [[265, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.establish": {"var": {"client_certs": {"str": [[281, "            client_certs = os.path.expanduser(client_certs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnectio": {"func": {"finish": {"ServerConnection -> None": [[298, "    def finish(self):"]]}, "send": {"(ServerConnection, ?) -> None": [[270, "    def send(self, message):"]]}, "__init__": {"? -> ?": [[182, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.__hash__": {"param": {"self": {"ServerConnection": [[221, "    def __hash__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.send": {"var": {"message": {"str": [[272, "            message = b''.join(message)"]]}}, "param": {"self": {"ServerConnection": [[270, "    def send(self, message):"]]}, "message": {"?": [[270, "    def send(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnectio": {"func": {"finish": {"ClientConnection -> None": [[157, "    def finish(self):"]]}, "send": {"(ClientConnection, None) -> None / (ClientConnection, ?) -> None": [[105, "    def send(self, message):"]]}, "__init__": {"? -> ?": [[34, "    def __init__(self, client_connection, address, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.from_": {"param": {"state": {"dict": [[241, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnecti": {"func": {"connected": {"ClientConnection -> bool": [[59, "    def connected(self):"]]}, "convert_to_tls": {"(ClientConnection, ?) -> ?": [[135, "    def convert_to_tls(self, cert, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.convert_to_tls": {"var": {"client_hello": {"ClientHello": [[139, "            client_hello = tls.ClientHello.from_file(self.rfile)"]]}}, "param": {"cert": {"?": [[135, "    def convert_to_tls(self, cert, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection": {"var": {"_stateobject_attributes": {"dict": [[89, "    _stateobject_attributes = dict("]]}}, "func": {"__hash__": {"ClientConnection -> int": [[86, "    def __hash__(self):"]]}, "from_state": {"(<ClientConnection>, ?) -> ClientConnection / (<ClientConnection>, dict) -> ClientConnection": [[112, "    def from_state(cls, state):"]]}, "__eq__": {"(ClientConnection, ?) -> bool": [[81, "    def __eq__(self, other):"]]}, "__repr__": {"ClientConnection -> str": [[62, "    def __repr__(self):"]]}, "make_dummy": {"(<ClientConnection>, ?) -> ClientConnection / (<ClientConnection>, (str, int)) -> ClientConnection": [[118, "    def make_dummy(cls, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.convert_to_t": {"param": {"self": {"ClientConnection": [[135, "    def convert_to_tls(self, cert, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.__eq__": {"param": {"self": {"ClientConnection": [[81, "    def __eq__(self, other):"]]}, "other": {"?": [[81, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.__repr__": {"var": {"tls": {"str": [[64, "            tls = \"[{}] \".format(self.tls_version)"], [66, "            tls = \"\""]]}, "alpn": {"str": [[69, "            alpn = \"[ALPN: {}] \".format("], [73, "            alpn = \"\""]]}}, "param": {"self": {"ClientConnection": [[62, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.__init": {"param": {"spoof_source_address": {"None": [[182, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}, "source_address": {"(?, int)": [[182, "    def __init__(self, address, source_address=None, spoof_source_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.finish": {"param": {"self": {"ServerConnection": [[298, "    def finish(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.from_": {"param": {"state": {"dict": [[112, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientC": {"param": {"client_connection": {"None": [[34, "    def __init__(self, client_connection, address, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.__repr__": {"var": {"tls": {"str": [[199, "            tls = \"[{}: {}] \".format(self.tls_version or \"TLS\", self.sni)"], [201, "            tls = \"[{}] \".format(self.tls_version or \"TLS\")"], [203, "            tls = \"\""]]}, "alpn": {"str": [[205, "            alpn = \"[ALPN: {}] \".format("], [209, "            alpn = \"\""]]}}, "param": {"self": {"ServerConnection": [[197, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.connected": {"param": {"self": {"ClientConnection": [[59, "    def connected(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.send": {"var": {"message": {"str": [[107, "            message = b''.join(message)"]]}}, "param": {"self": {"ClientConnection": [[105, "    def send(self, message):"]]}, "message": {"None": [[105, "    def send(self, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.from_state": {"var": {"f": {"ServerConnection": [[242, "        f = cls(tuple())"]]}}, "param": {"cls": {"<ServerConnection>": [[241, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.connected": {"param": {"self": {"ServerConnection": [[194, "    def connected(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.make_dummy": {"param": {"address": {"({? -> ? | str}, {? -> ? | int})": [[247, "    def make_dummy(cls, address):"]]}, "cls": {"<ServerConnection>": [[247, "    def make_dummy(cls, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.establish_tls": {"var": {"path": {"str": [[285, "                path = os.path.join("]]}, "client_cert": {"None": [[279, "        client_cert = None"]], "str": [[283, "                client_cert = client_certs"], [290, "                    client_cert = path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.__hash__": {"param": {"self": {"ClientConnection": [[86, "    def __hash__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.connect": {"param": {"self": {"ServerConnection": [[265, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.convert_to_tl": {"var": {"sni": {"?": [[148, "        sni = self.connection.get_servername()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections": {"class": {"ServerConnection": {"<ServerConnection>": [[162, "class ServerConnection(tcp.TCPClient, stateobject.StateObject):"]]}, "ClientConnection": {"<ClientConnection>": [[15, "class ClientConnection(tcp.BaseHandler, stateobject.StateObject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ClientConnection.__init__": {"param": {"self": {"ClientConnection": [[34, "    def __init__(self, client_connection, address, server):"]]}, "server": {"None": [[34, "    def __init__(self, client_connection, address, server):"]]}, "address": {"{(str, int) | tuple}": [[34, "    def __init__(self, client_connection, address, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.connections.ServerConnection.establish_t": {"param": {"self": {"ServerConnection": [[276, "    def establish_tls(self, *, sni=None, client_certs=None, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/exif_be.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.Ifd.__init": {"param": {"_io": {"?": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.is_immediate_data": {"param": {"self": {"IfdField": [[551, "        def is_immediate_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.data": {"var": {"io": {"?": [[564, "                io = self._root._io"]]}, "_pos": {"?": [[565, "                _pos = io.pos()"]]}}, "param": {"self": {"IfdField": [[559, "        def data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.Ifd": {"func": {"__init__": {"? -> ?": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifB": {"class": {"IfdField": {"<IfdField>": [[51, "    class IfdField(KaitaiStruct):"]]}}, "func": {"_read": {"ExifBe -> None": [[18, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.byte_length": {"param": {"self": {"IfdField": [[543, "        def byte_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.Ifd.__init__": {"param": {"self": {"Ifd": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.__init__": {"param": {"self": {"IfdField": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.If": {"class": {"FieldTypeEnum": {"<FieldTypeEnum>": [[53, "        class FieldTypeEnum(Enum):"]]}}, "func": {"_read": {"Ifd -> None": [[29, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.TagEnum": {"var": {"spectral_sensitivity": {"int": [[256, "            spectral_sensitivity = 34852"]]}, "rating": {"int": [[162, "            rating = 18246"]]}, "subject_location": {"int": [[349, "            subject_location = 41492"]]}, "cfa_pattern2": {"int": [[192, "            cfa_pattern2 = 33422"]]}, "background_color_value": {"int": [[229, "            background_color_value = 34026"]]}, "brightness": {"int": [[516, "            brightness = 65107"]]}, "preview_settings_digest": {"int": [[477, "            preview_settings_digest = 50969"]]}, "bits_per_run_length": {"int": [[223, "            bits_per_run_length = 34020"]]}, "consecutive_bad_fax_lines": {"int": [[115, "            consecutive_bad_fax_lines = 328"]]}, "y_cb_cr_coefficients": {"int": [[152, "            y_cb_cr_coefficients = 529"]]}, "fax_profile": {"int": [[135, "            fax_profile = 402"]]}, "tile_width": {"int": [[109, "            tile_width = 322"]]}, "transfer_function": {"int": [[99, "            transfer_function = 301"]]}, "alpha_data_discard": {"int": [[397, "            alpha_data_discard = 48325"]]}, "gdal_no_data": {"int": [[376, "            gdal_no_data = 42113"]]}, "focal_plane_resolution_unit": {"int": [[298, "            focal_plane_resolution_unit = 37392"]]}, "original_default_crop_size": {"int": [[496, "            original_default_crop_size = 51091"]]}, "jpeg_proc": {"int": [[143, "            jpeg_proc = 512"]]}, "default_scale": {"int": [[418, "            default_scale = 50718"]]}, "jpegq_tables": {"int": [[149, "            jpegq_tables = 519"]]}, "copyright": {"int": [[195, "            copyright = 33432"]]}, "aperture_value": {"int": [[284, "            aperture_value = 37378"]]}, "flash": {"int": [[291, "            flash = 37385"]]}, "shutter_speed_value": {"int": [[283, "            shutter_speed_value = 37377"]]}, "white_balance": {"int": [[358, "            white_balance = 41987"]]}, "dot_range": {"int": [[120, "            dot_range = 336"]]}, "t6_options": {"int": [[95, "            t6_options = 293"]]}, "wb_grgb_levels": {"int": [[241, "            wb_grgb_levels = 34306"]]}, "iso_speed_latitudeyyy": {"int": [[267, "            iso_speed_latitudeyyy = 34868"]]}, "panasonic_title2": {"int": [[459, "            panasonic_title2 = 50899"]]}, "color_table": {"int": [[225, "            color_table = 34022"]]}, "color_space": {"int": [[331, "            color_space = 40961"]]}, "saturation": {"int": [[364, "            saturation = 41993"]]}, "strip_byte_counts": {"int": [[81, "            strip_byte_counts = 279"]]}, "sensitivity_type": {"int": [[263, "            sensitivity_type = 34864"]]}, "advent_scale": {"int": [[207, "            advent_scale = 33589"]]}, "uspto_original_content_type": {"int": [[405, "            uspto_original_content_type = 50560"]]}, "resolution_unit": {"int": [[96, "            resolution_unit = 296"]]}, "x_resolution": {"int": [[84, "            x_resolution = 282"]]}, "opi_proxy": {"int": [[132, "            opi_proxy = 351"]]}, "shadow_scale": {"int": [[439, "            shadow_scale = 50739"]]}, "background_color_indicator": {"int": [[227, "            background_color_indicator = 34024"]]}, "free_byte_counts": {"int": [[91, "            free_byte_counts = 289"]]}, "y_resolution": {"int": [[85, "            y_resolution = 283"]]}, "pixel_scale": {"int": [[206, "            pixel_scale = 33550"]]}, "indexed": {"int": [[130, "            indexed = 346"]]}, "iso_speed": {"int": [[266, "            iso_speed = 34867"]]}, "default_black_render": {"int": [[501, "            default_black_render = 51110"]]}, "focal_length": {"int": [[292, "            focal_length = 37386"]]}, "tile_depth": {"int": [[182, "            tile_depth = 32998"]]}, "raw_to_preview_gain": {"int": [[503, "            raw_to_preview_gain = 51112"]]}, "noise_profile": {"int": [[489, "            noise_profile = 51041"]]}, "shadows": {"int": [[515, "            shadows = 65106"]]}, "cell_length": {"int": [[71, "            cell_length = 265"]]}, "bits_per_extended_run_length": {"int": [[224, "            bits_per_extended_run_length = 34021"]]}, "artist": {"int": [[102, "            artist = 315"]]}, "security_classification": {"int": [[300, "            security_classification = 37394"]]}, "profile_tone_curve": {"int": [[469, "            profile_tone_curve = 50940"]]}, "raster_padding": {"int": [[222, "            raster_padding = 34019"]]}, "opcode_list3": {"int": [[488, "            opcode_list3 = 51022"]]}, "opcode_list2": {"int": [[487, "            opcode_list2 = 51009"]]}, "rows_per_strip": {"int": [[80, "            rows_per_strip = 278"]]}, "linearization_table": {"int": [[412, "            linearization_table = 50712"]]}, "intergraph_packet_data": {"int": [[214, "            intergraph_packet_data = 33918"]]}, "jbig_options": {"int": [[254, "            jbig_options = 34750"]]}, "expand_filter_lens": {"int": [[381, "            expand_filter_lens = 44995"]]}, "tile_byte_counts": {"int": [[112, "            tile_byte_counts = 325"]]}, "sharpness2": {"int": [[519, "            sharpness2 = 65110"]]}, "gray_response_unit": {"int": [[92, "            gray_response_unit = 290"]]}, "dng_backward_version": {"int": [[407, "            dng_backward_version = 50707"]]}, "flashpix_version": {"int": [[330, "            flashpix_version = 40960"]]}, "it8_header": {"int": [[221, "            it8_header = 34018"]]}, "t_stop": {"int": [[492, "            t_stop = 51058"]]}, "rating_percent": {"int": [[165, "            rating_percent = 18249"]]}, "wang_annotation": {"int": [[172, "            wang_annotation = 32932"]]}, "flash_energy": {"int": [[293, "            flash_energy = 37387"]]}, "cell_width": {"int": [[70, "            cell_width = 264"]]}, "kdc_ifd": {"int": [[510, "            kdc_ifd = 65024"]]}, "as_shot_icc_profile": {"int": [[452, "            as_shot_icc_profile = 50831"]]}, "application_notes": {"int": [[157, "            application_notes = 700"]]}, "focal_plane_x_resolution2": {"int": [[343, "            focal_plane_x_resolution2 = 41486"]]}, "advent_revision": {"int": [[208, "            advent_revision = 33590"]]}, "xp_keywords": {"int": [[328, "            xp_keywords = 40094"]]}, "profile_look_table_encoding": {"int": [[499, "            profile_look_table_encoding = 51108"]]}, "s_raw_type": {"int": [[457, "            s_raw_type = 50885"]]}, "uic4_tag": {"int": [[212, "            uic4_tag = 33631"]]}, "dng_version": {"int": [[406, "            dng_version = 50706"]]}, "profile_type": {"int": [[134, "            profile_type = 401"]]}, "icc_profile": {"int": [[245, "            icc_profile = 34675"]]}, "sub_ifd": {"int": [[116, "            sub_ifd = 330"]]}, "anti_alias_strength": {"int": [[438, "            anti_alias_strength = 50738"]]}, "ingr_reserved": {"int": [[217, "            ingr_reserved = 33921"]]}, "clip_path": {"int": [[127, "            clip_path = 343"]]}, "spatial_frequency_response": {"int": [[294, "            spatial_frequency_response = 37388"]]}, "sto_nits": {"int": [[309, "            sto_nits = 37439"]]}, "trap_indicator": {"int": [[234, "            trap_indicator = 34031"]]}, "ink_set": {"int": [[117, "            ink_set = 332"]]}, "y_clip_path_units": {"int": [[129, "            y_clip_path_units = 345"]]}, "halftone_hints": {"int": [[108, "            halftone_hints = 321"]]}, "default_crop_origin": {"int": [[419, "            default_crop_origin = 50719"]]}, "raw_data_unique_id": {"int": [[446, "            raw_data_unique_id = 50781"]]}, "photoshop_settings": {"int": [[243, "            photoshop_settings = 34377"]]}, "exif_version": {"int": [[274, "            exif_version = 36864"]]}, "tiff_ep_standard_id": {"int": [[304, "            tiff_ep_standard_id = 37398"]]}, "contrast": {"int": [[363, "            contrast = 41992"]]}, "battery_level": {"int": [[193, "            battery_level = 33423"]]}, "scene_capture_type": {"int": [[361, "            scene_capture_type = 41990"]]}, "noise": {"int": [[295, "            noise = 37389"]]}, "data_type": {"int": [[180, "            data_type = 32996"]]}, "alpha_byte_count": {"int": [[395, "            alpha_byte_count = 48323"]]}, "reference_black_white": {"int": [[155, "            reference_black_white = 532"]]}, "white_balance2": {"int": [[513, "            white_balance2 = 65102"]]}, "opcode_list1": {"int": [[486, "            opcode_list1 = 51008"]]}, "t88_options": {"int": [[249, "            t88_options = 34690"]]}, "wang_tag4": {"int": [[174, "            wang_tag4 = 32934"]]}, "cip3_side": {"int": [[308, "            cip3_side = 37436"]]}, "cfa_layout": {"int": [[411, "            cfa_layout = 50711"]]}, "wang_tag1": {"int": [[171, "            wang_tag1 = 32931"]]}, "default_crop_size": {"int": [[420, "            default_crop_size = 50720"]]}, "wang_tag3": {"int": [[173, "            wang_tag3 = 32933"]]}, "exposure_index": {"int": [[303, "            exposure_index = 37397"]]}, "fedex_edr": {"int": [[272, "            fedex_edr = 34929"]]}, "bayer_green_split": {"int": [[433, "            bayer_green_split = 50733"]]}, "profile_calibration_sig": {"int": [[461, "            profile_calibration_sig = 50932"]]}, "software": {"int": [[100, "            software = 305"]]}, "oce_application_selector": {"int": [[399, "            oce_application_selector = 50216"]]}, "saturation2": {"int": [[518, "            saturation2 = 65109"]]}, "pressure": {"int": [[321, "            pressure = 37890"]]}, "uic1_tag": {"int": [[209, "            uic1_tag = 33628"]]}, "spatial_frequency_response2": {"int": [[341, "            spatial_frequency_response2 = 41484"]]}, "gain_control": {"int": [[362, "            gain_control = 41991"]]}, "alpha_offset": {"int": [[394, "            alpha_offset = 48322"]]}, "preview_color_space": {"int": [[478, "            preview_color_space = 50970"]]}, "baseline_exposure_offset": {"int": [[500, "            baseline_exposure_offset = 51109"]]}, "iso": {"int": [[258, "            iso = 34855"]]}, "shared_data": {"int": [[248, "            shared_data = 34689"]]}, "color_characterization": {"int": [[232, "            color_characterization = 34029"]]}, "panasonic_title": {"int": [[458, "            panasonic_title = 50898"]]}, "raw_file": {"int": [[511, "            raw_file = 65100"]]}, "predictor": {"int": [[104, "            predictor = 317"]]}, "baseline_exposure": {"int": [[430, "            baseline_exposure = 50730"]]}, "jpegac_tables": {"int": [[151, "            jpegac_tables = 521"]]}, "file_source": {"int": [[353, "            file_source = 41728"]]}, "black_level_delta_h": {"int": [[415, "            black_level_delta_h = 50715"]]}, "kodak_ifd": {"int": [[194, "            kodak_ifd = 33424"]]}, "preview_application_version": {"int": [[475, "            preview_application_version = 50967"]]}, "leaf_sub_ifd": {"int": [[273, "            leaf_sub_ifd = 34954"]]}, "xp_title": {"int": [[325, "            xp_title = 40091"]]}, "sharpness": {"int": [[365, "            sharpness = 41994"]]}, "t4_options": {"int": [[94, "            t4_options = 292"]]}, "original_raw_file_digest": {"int": [[481, "            original_raw_file_digest = 50973"]]}, "strip_row_counts": {"int": [[156, "            strip_row_counts = 559"]]}, "profile_look_table_data": {"int": [[485, "            profile_look_table_data = 50982"]]}, "black_level": {"int": [[414, "            black_level = 50714"]]}, "create_date": {"int": [[276, "            create_date = 36868"]]}, "default_user_crop": {"int": [[504, "            default_user_crop = 51125"]]}, "jpeg_tables2": {"int": [[142, "            jpeg_tables2 = 437"]]}, "black_level_delta_v": {"int": [[416, "            black_level_delta_v = 50716"]]}, "stitch_info": {"int": [[164, "            stitch_info = 18248"]]}, "x_clip_path_units": {"int": [[128, "            x_clip_path_units = 344"]]}, "converter": {"int": [[512, "            converter = 65101"]]}, "expand_lens": {"int": [[379, "            expand_lens = 44993"]]}, "interop_offset": {"int": [[335, "            interop_offset = 40965"]]}, "afcp_iptc": {"int": [[237, "            afcp_iptc = 34152"]]}, "uic2_tag": {"int": [[210, "            uic2_tag = 33629"]]}, "focal_plane_y_resolution2": {"int": [[344, "            focal_plane_y_resolution2 = 41487"]]}, "transfer_range": {"int": [[126, "            transfer_range = 342"]]}, "oce_scanjob_desc": {"int": [[398, "            oce_scanjob_desc = 50215"]]}, "decode": {"int": [[139, "            decode = 433"]]}, "interlace": {"int": [[260, "            interlace = 34857"]]}, "related_sound_file": {"int": [[334, "            related_sound_file = 40964"]]}, "intergraph_flag_registers": {"int": [[215, "            intergraph_flag_registers = 33919"]]}, "analog_balance": {"int": [[427, "            analog_balance = 50727"]]}, "exposure": {"int": [[514, "            exposure = 65105"]]}, "jpeg_tables": {"int": [[131, "            jpeg_tables = 347"]]}, "free_offsets": {"int": [[90, "            free_offsets = 288"]]}, "iso_speed_latitudezzz": {"int": [[268, "            iso_speed_latitudezzz = 34869"]]}, "standard_output_sensitivity": {"int": [[264, "            standard_output_sensitivity = 34865"]]}, "height_resolution": {"int": [[391, "            height_resolution = 48259"]]}, "version_year": {"int": [[137, "            version_year = 404"]]}, "jpl_carto_ifd": {"int": [[239, "            jpl_carto_ifd = 34263"]]}, "current_icc_profile": {"int": [[454, "            current_icc_profile = 50833"]]}, "device_setting_description": {"int": [[366, "            device_setting_description = 41995"]]}, "gps_info": {"int": [[257, "            gps_info = 34853"]]}, "bad_fax_lines": {"int": [[113, "            bad_fax_lines = 326"]]}, "iptc_naa": {"int": [[213, "            iptc_naa = 33723"]]}, "site": {"int": [[219, "            site = 34016"]]}, "padding": {"int": [[505, "            padding = 59932"]]}, "subject_distance_range": {"int": [[367, "            subject_distance_range = 41996"]]}, "x_position": {"int": [[88, "            x_position = 286"]]}, "cip3_sheet": {"int": [[307, "            cip3_sheet = 37435"]]}, "water_depth": {"int": [[322, "            water_depth = 37891"]]}, "hc_usage": {"int": [[233, "            hc_usage = 34030"]]}, "warp_quadrilateral": {"int": [[177, "            warp_quadrilateral = 32955"]]}, "noise2": {"int": [[342, "            noise2 = 41485"]]}, "tiff_fx_extensions": {"int": [[246, "            tiff_fx_extensions = 34687"]]}, "noise_reduction_applied": {"int": [[464, "            noise_reduction_applied = 50935"]]}, "annotations": {"int": [[402, "            annotations = 50255"]]}, "t82_options": {"int": [[141, "            t82_options = 435"]]}, "cfa_pattern": {"int": [[355, "            cfa_pattern = 41730"]]}, "color_sequence": {"int": [[220, "            color_sequence = 34017"]]}, "exposure_index2": {"int": [[350, "            exposure_index2 = 41493"]]}, "y_cb_cr_positioning": {"int": [[154, "            y_cb_cr_positioning = 531"]]}, "cfa_plane_color": {"int": [[410, "            cfa_plane_color = 50710"]]}, "color_response_unit": {"int": [[98, "            color_response_unit = 300"]]}, "sub_tile_block_size": {"int": [[482, "            sub_tile_block_size = 50974"]]}, "exif_offset": {"int": [[244, "            exif_offset = 34665"]]}, "opto_electric_conv_factor": {"int": [[259, "            opto_electric_conv_factor = 34856"]]}, "orientation": {"int": [[78, "            orientation = 274"]]}, "baseline_sharpness": {"int": [[432, "            baseline_sharpness = 50732"]]}, "thresholding": {"int": [[69, "            thresholding = 263"]]}, "jpeg_lossless_predictors": {"int": [[147, "            jpeg_lossless_predictors = 517"]]}, "active_area": {"int": [[450, "            active_area = 50829"]]}, "tile_offsets": {"int": [[111, "            tile_offsets = 324"]]}, "xp_subject": {"int": [[329, "            xp_subject = 40095"]]}, "contrast2": {"int": [[517, "            contrast2 = 65108"]]}, "original_raw_file_data": {"int": [[449, "            original_raw_file_data = 50828"]]}, "transparency_indicator": {"int": [[231, "            transparency_indicator = 34028"]]}, "geo_tiff_directory": {"int": [[251, "            geo_tiff_directory = 34735"]]}, "acceleration": {"int": [[323, "            acceleration = 37892"]]}, "lens_info": {"int": [[371, "            lens_info = 42034"]]}, "pixel_intensity_range": {"int": [[230, "            pixel_intensity_range = 34027"]]}, "fill_order": {"int": [[72, "            fill_order = 266"]]}, "baseline_noise": {"int": [[431, "            baseline_noise = 50731"]]}, "brightness_value": {"int": [[285, "            brightness_value = 37379"]]}, "original_best_quality_size": {"int": [[495, "            original_best_quality_size = 51090"]]}, "leaf_data": {"int": [[242, "            leaf_data = 34310"]]}, "white_level": {"int": [[417, "            white_level = 50717"]]}, "tile_length": {"int": [[110, "            tile_length = 323"]]}, "google_plus_upload_code": {"int": [[277, "            google_plus_upload_code = 36873"]]}, "focal_plane_resolution_unit2": {"int": [[345, "            focal_plane_resolution_unit2 = 41488"]]}, "sr2_private": {"int": [[440, "            sr2_private = 50740"]]}, "xp_author": {"int": [[327, "            xp_author = 40093"]]}, "as_shot_neutral": {"int": [[428, "            as_shot_neutral = 50728"]]}, "light_source": {"int": [[290, "            light_source = 37384"]]}, "fax_sub_address": {"int": [[270, "            fax_sub_address = 34909"]]}, "profile_copyright": {"int": [[471, "            profile_copyright = 50942"]]}, "fov_cot": {"int": [[187, "            fov_cot = 33304"]]}, "y_position": {"int": [[89, "            y_position = 287"]]}, "lens": {"int": [[509, "            lens = 65002"]]}, "white_point": {"int": [[105, "            white_point = 318"]]}, "strip_offsets": {"int": [[77, "            strip_offsets = 273"]]}, "width_resolution": {"int": [[390, "            width_resolution = 48258"]]}, "best_quality_scale": {"int": [[445, "            best_quality_scale = 50780"]]}, "dng_lens_info": {"int": [[436, "            dng_lens_info = 50736"]]}, "expand_software": {"int": [[378, "            expand_software = 44992"]]}, "clean_fax_data": {"int": [[114, "            clean_fax_data = 327"]]}, "row_interleave_factor": {"int": [[483, "            row_interleave_factor = 50975"]]}, "sony_raw_file_type": {"int": [[166, "            sony_raw_file_type = 28672"]]}, "subject_area": {"int": [[302, "            subject_area = 37396"]]}, "jpegdc_tables": {"int": [[150, "            jpegdc_tables = 520"]]}, "planar_configuration": {"int": [[86, "            planar_configuration = 284"]]}, "flash_energy2": {"int": [[340, "            flash_energy2 = 41483"]]}, "profile_ifd": {"int": [[462, "            profile_ifd = 50933"]]}, "subject_distance": {"int": [[288, "            subject_distance = 37382"]]}, "uic3_tag": {"int": [[211, "            uic3_tag = 33630"]]}, "expand_scanner": {"int": [[382, "            expand_scanner = 44996"]]}, "gray_response_curve": {"int": [[93, "            gray_response_curve = 291"]]}, "tiff_ep_standard_id2": {"int": [[351, "            tiff_ep_standard_id2 = 41494"]]}, "focal_plane_x_resolution": {"int": [[296, "            focal_plane_x_resolution = 37390"]]}, "cip3_data_file": {"int": [[306, "            cip3_data_file = 37434"]]}, "original_default_final_size": {"int": [[494, "            original_default_final_size = 51089"]]}, "focal_plane_y_resolution": {"int": [[297, "            focal_plane_y_resolution = 37391"]]}, "security_classification2": {"int": [[347, "            security_classification2 = 41490"]]}, "jpeg_restart_interval": {"int": [[146, "            jpeg_restart_interval = 515"]]}, "target_printer": {"int": [[121, "            target_printer = 337"]]}, "as_shot_white_xy": {"int": [[429, "            as_shot_white_xy = 50729"]]}, "scene_type": {"int": [[354, "            scene_type = 41729"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.__init": {"param": {"_io": {"?": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe": {"class": {"Ifd": {"<Ifd>": [[22, "    class Ifd(KaitaiStruct):"]]}}, "func": {"ifd0": {"ExifBe -> Ifd": [[574, "    def ifd0(self):"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.I": {"func": {"next_ifd": {"Ifd -> None": [[38, "        def next_ifd(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.Ifd._read": {"var": {"i": {"int": [[32, "            for i in range(self.num_fields):"]]}}, "param": {"self": {"Ifd": [[29, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.TagE": {"var": {"ms_document_text_position": {"int": [[317, "            ms_document_text_position = 37681"]]}, "user_comment": {"int": [[311, "            user_comment = 37510"]]}, "thumbnail_length": {"int": [[145, "            thumbnail_length = 514"]]}, "profile_hue_sat_map_encoding": {"int": [[498, "            profile_hue_sat_map_encoding = 51107"]]}, "reduction_matrix2": {"int": [[426, "            reduction_matrix2 = 50726"]]}, "md_file_units": {"int": [[205, "            md_file_units = 33452"]]}, "reduction_matrix1": {"int": [[425, "            reduction_matrix1 = 50725"]]}, "unique_camera_model": {"int": [[408, "            unique_camera_model = 50708"]]}, "samsung_raw_byte_order": {"int": [[338, "            samsung_raw_byte_order = 41217"]]}, "exposure_compensation": {"int": [[286, "            exposure_compensation = 37380"]]}, "camera_serial_number": {"int": [[435, "            camera_serial_number = 50735"]]}, "current_pre_profile_matrix": {"int": [[455, "            current_pre_profile_matrix = 50834"]]}, "components_configuration": {"int": [[281, "            components_configuration = 37121"]]}, "image_number2": {"int": [[346, "            image_number2 = 41489"]]}, "uncompressed": {"int": [[386, "            uncompressed = 48131"]]}, "samsung_raw_unknown": {"int": [[339, "            samsung_raw_unknown = 41218"]]}, "page_number": {"int": [[97, "            page_number = 297"]]}, "serial_number": {"int": [[370, "            serial_number = 42033"]]}, "f_number": {"int": [[197, "            f_number = 33437"]]}, "serial_number2": {"int": [[508, "            serial_number2 = 65001"]]}, "cmyk_equivalent": {"int": [[235, "            cmyk_equivalent = 34032"]]}, "recommended_exposure_index": {"int": [[265, "            recommended_exposure_index = 34866"]]}, "thumbnail_offset": {"int": [[144, "            thumbnail_offset = 513"]]}, "s_min_sample_value": {"int": [[124, "            s_min_sample_value = 340"]]}, "calibration_illuminant1": {"int": [[443, "            calibration_illuminant1 = 50778"]]}, "y_cb_cr_sub_sampling": {"int": [[153, "            y_cb_cr_sub_sampling = 530"]]}, "calibration_illuminant2": {"int": [[444, "            calibration_illuminant2 = 50779"]]}, "uspto_miscellaneous": {"int": [[158, "            uspto_miscellaneous = 999"]]}, "document_name": {"int": [[73, "            document_name = 269"]]}, "image_byte_count": {"int": [[393, "            image_byte_count = 48321"]]}, "ms_document_text": {"int": [[315, "            ms_document_text = 37679"]]}, "ambient_temperature": {"int": [[319, "            ambient_temperature = 37888"]]}, "image_unique_id": {"int": [[368, "            image_unique_id = 42016"]]}, "min_sample_value": {"int": [[82, "            min_sample_value = 280"]]}, "custom_rendered": {"int": [[356, "            custom_rendered = 41985"]]}, "oce_id_number": {"int": [[400, "            oce_id_number = 50217"]]}, "lens_serial_number": {"int": [[374, "            lens_serial_number = 42037"]]}, "samsung_raw_pointers_length": {"int": [[337, "            samsung_raw_pointers_length = 40977"]]}, "numberof_inks": {"int": [[119, "            numberof_inks = 334"]]}, "samsung_raw_pointers_offset": {"int": [[336, "            samsung_raw_pointers_offset = 40976"]]}, "mode_number": {"int": [[138, "            mode_number = 405"]]}, "image_number": {"int": [[299, "            image_number = 37393"]]}, "sub_sec_time_original": {"int": [[313, "            sub_sec_time_original = 37521"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.type_byte_length": {"param": {"self": {"IfdField": [[535, "        def type_byte_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_b": {"class": {"ExifBe": {"<ExifBe>": [[11, "class ExifBe(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.TagEnu": {"var": {"localized_camera_model": {"int": [[409, "            localized_camera_model = 50709"]]}, "linear_response_limit": {"int": [[434, "            linear_response_limit = 50734"]]}, "jpeg_point_transforms": {"int": [[148, "            jpeg_point_transforms = 518"]]}, "region_xform_tack_point": {"int": [[176, "            region_xform_tack_point = 32954"]]}, "black_level_repeat_dim": {"int": [[413, "            black_level_repeat_dim = 50713"]]}, "camera_calibration2": {"int": [[424, "            camera_calibration2 = 50724"]]}, "preview_date_time": {"int": [[479, "            preview_date_time = 50971"]]}, "camera_label": {"int": [[497, "            camera_label = 51105"]]}, "image_type": {"int": [[387, "            image_type = 48132"]]}, "profile_look_table_dims": {"int": [[484, "            profile_look_table_dims = 50981"]]}, "page_name": {"int": [[87, "            page_name = 285"]]}, "moire_filter": {"int": [[521, "            moire_filter = 65112"]]}, "matrix_world_to_camera": {"int": [[189, "            matrix_world_to_camera = 33306"]]}, "transformation": {"int": [[385, "            transformation = 48130"]]}, "new_raw_image_digest": {"int": [[502, "            new_raw_image_digest = 51111"]]}, "image_depth": {"int": [[181, "            image_depth = 32997"]]}, "image_history2": {"int": [[348, "            image_history2 = 41491"]]}, "focal_length_in35mm_format": {"int": [[360, "            focal_length_in35mm_format = 41989"]]}, "smoothness": {"int": [[520, "            smoothness = 65111"]]}, "sensing_method": {"int": [[305, "            sensing_method = 37399"]]}, "frame_rate": {"int": [[491, "            frame_rate = 51044"]]}, "original_raw_file_name": {"int": [[448, "            original_raw_file_name = 50827"]]}, "maker_note_safety": {"int": [[441, "            maker_note_safety = 50741"]]}, "image_color_indicator": {"int": [[226, "            image_color_indicator = 34023"]]}, "as_shot_pre_profile_matrix": {"int": [[453, "            as_shot_pre_profile_matrix = 50832"]]}, "maker_note": {"int": [[310, "            maker_note = 37500"]]}, "color_matrix1": {"int": [[421, "            color_matrix1 = 50721"]]}, "color_matrix2": {"int": [[422, "            color_matrix2 = 50722"]]}, "chromatic_aberration_corr_params": {"int": [[168, "            chromatic_aberration_corr_params = 28725"]]}, "light_falloff_params": {"int": [[167, "            light_falloff_params = 28722"]]}, "sem_info": {"int": [[236, "            sem_info = 34118"]]}, "colorimetric_reference": {"int": [[456, "            colorimetric_reference = 50879"]]}, "owner_name2": {"int": [[507, "            owner_name2 = 65000"]]}, "offset_time_original": {"int": [[279, "            offset_time_original = 36881"]]}, "self_timer_mode": {"int": [[262, "            self_timer_mode = 34859"]]}, "image_offset": {"int": [[392, "            image_offset = 48320"]]}, "raw_image_digest": {"int": [[480, "            raw_image_digest = 50972"]]}, "image_reference_points": {"int": [[175, "            image_reference_points = 32953"]]}, "image_layer": {"int": [[250, "            image_layer = 34732"]]}, "related_image_file_format": {"int": [[159, "            related_image_file_format = 4096"]]}, "primary_chromaticities": {"int": [[106, "            primary_chromaticities = 319"]]}, "sensing_method2": {"int": [[352, "            sensing_method2 = 41495"]]}, "fax_recv_time": {"int": [[271, "            fax_recv_time = 34910"]]}, "related_image_height": {"int": [[161, "            related_image_height = 4098"]]}, "owner_name": {"int": [[369, "            owner_name = 42032"]]}, "md_file_tag": {"int": [[198, "            md_file_tag = 33445"]]}, "wrap_modes": {"int": [[186, "            wrap_modes = 33303"]]}, "preview_application_name": {"int": [[474, "            preview_application_name = 50966"]]}, "image_width2": {"int": [[388, "            image_width2 = 48256"]]}, "distortion_corr_params": {"int": [[169, "            distortion_corr_params = 28727"]]}, "image_id": {"int": [[170, "            image_id = 32781"]]}, "oce_image_logic": {"int": [[401, "            oce_image_logic = 50218"]]}, "expand_flash_lamp": {"int": [[383, "            expand_flash_lamp = 44997"]]}, "lens_make": {"int": [[372, "            lens_make = 42035"]]}, "sample_format": {"int": [[123, "            sample_format = 339"]]}, "affine_transform_mat": {"int": [[178, "            affine_transform_mat = 32956"]]}, "matrix_world_to_screen": {"int": [[188, "            matrix_world_to_screen = 33305"]]}, "gamma": {"int": [[377, "            gamma = 42240"]]}, "extra_samples": {"int": [[122, "            extra_samples = 338"]]}, "model_transform": {"int": [[240, "            model_transform = 34264"]]}, "time_codes": {"int": [[490, "            time_codes = 51043"]]}, "pixel_format": {"int": [[384, "            pixel_format = 48129"]]}, "photometric_interpretation": {"int": [[68, "            photometric_interpretation = 262"]]}, "metering_mode": {"int": [[289, "            metering_mode = 37383"]]}, "exif_image_height": {"int": [[333, "            exif_image_height = 40963"]]}, "print_im": {"int": [[403, "            print_im = 50341"]]}, "ink_names": {"int": [[118, "            ink_names = 333"]]}, "md_sample_info": {"int": [[202, "            md_sample_info = 33449"]]}, "compression": {"int": [[67, "            compression = 259"]]}, "camera_calibration1": {"int": [[423, "            camera_calibration1 = 50723"]]}, "image_width": {"int": [[64, "            image_width = 256"]]}, "color_map": {"int": [[107, "            color_map = 320"]]}, "coding_methods": {"int": [[136, "            coding_methods = 403"]]}, "offset_time_digitized": {"int": [[280, "            offset_time_digitized = 36882"]]}, "md_scale_pixel": {"int": [[199, "            md_scale_pixel = 33446"]]}, "md_color_table": {"int": [[200, "            md_color_table = 33447"]]}, "preview_settings_name": {"int": [[476, "            preview_settings_name = 50968"]]}, "ms_property_set_storage": {"int": [[316, "            ms_property_set_storage = 37680"]]}, "masked_areas": {"int": [[451, "            masked_areas = 50830"]]}, "pixel_magic_jbig_options": {"int": [[238, "            pixel_magic_jbig_options = 34232"]]}, "expand_film": {"int": [[380, "            expand_film = 44994"]]}, "md_lab_name": {"int": [[201, "            md_lab_name = 33448"]]}, "fax_recv_params": {"int": [[269, "            fax_recv_params = 34908"]]}, "exif_image_width": {"int": [[332, "            exif_image_width = 40962"]]}, "profile_name": {"int": [[465, "            profile_name = 50936"]]}, "samples_per_pixel": {"int": [[79, "            samples_per_pixel = 277"]]}, "modify_date": {"int": [[101, "            modify_date = 306"]]}, "cfa_repeat_pattern_dim": {"int": [[191, "            cfa_repeat_pattern_dim = 33421"]]}, "as_shot_profile_name": {"int": [[463, "            as_shot_profile_name = 50934"]]}, "intergraph_matrix": {"int": [[216, "            intergraph_matrix = 33920"]]}, "xp_comment": {"int": [[326, "            xp_comment = 40092"]]}, "image_height2": {"int": [[389, "            image_height2 = 48257"]]}, "md_prep_time": {"int": [[204, "            md_prep_time = 33451"]]}, "model2": {"int": [[190, "            model2 = 33405"]]}, "alias_layer_metadata": {"int": [[447, "            alias_layer_metadata = 50784"]]}, "reel_name": {"int": [[493, "            reel_name = 51081"]]}, "profile_embed_policy": {"int": [[470, "            profile_embed_policy = 50941"]]}, "matteing": {"int": [[179, "            matteing = 32995"]]}, "raw_image_segmentation": {"int": [[442, "            raw_image_segmentation = 50752"]]}, "related_image_width": {"int": [[160, "            related_image_width = 4097"]]}, "camera_calibration_sig": {"int": [[460, "            camera_calibration_sig = 50931"]]}, "lens_model": {"int": [[373, "            lens_model = 42036"]]}, "time_zone_offset": {"int": [[261, "            time_zone_offset = 34858"]]}, "image_description": {"int": [[74, "            image_description = 270"]]}, "make": {"int": [[75, "            make = 271"]]}, "offset_schema": {"int": [[506, "            offset_schema = 59933"]]}, "date_time_original": {"int": [[275, "            date_time_original = 36867"]]}, "offset_time": {"int": [[278, "            offset_time = 36880"]]}, "camera_elevation_angle": {"int": [[324, "            camera_elevation_angle = 37893"]]}, "geo_tiff_ascii_params": {"int": [[253, "            geo_tiff_ascii_params = 34737"]]}, "image_history": {"int": [[301, "            image_history = 37395"]]}, "forward_matrix1": {"int": [[472, "            forward_matrix1 = 50964"]]}, "forward_matrix2": {"int": [[473, "            forward_matrix2 = 50965"]]}, "original_file_name": {"int": [[404, "            original_file_name = 50547"]]}, "model_tie_point": {"int": [[218, "            model_tie_point = 33922"]]}, "xp_dip_xml": {"int": [[163, "            xp_dip_xml = 18247"]]}, "bits_per_sample": {"int": [[66, "            bits_per_sample = 258"]]}, "digital_zoom_ratio": {"int": [[359, "            digital_zoom_ratio = 41988"]]}, "global_parameters_ifd": {"int": [[133, "            global_parameters_ifd = 400"]]}, "md_prep_date": {"int": [[203, "            md_prep_date = 33450"]]}, "image_data_discard": {"int": [[396, "            image_data_discard = 48324"]]}, "image_height": {"int": [[65, "            image_height = 257"]]}, "gdal_metadata": {"int": [[375, "            gdal_metadata = 42112"]]}, "model": {"int": [[76, "            model = 272"]]}, "compressed_bits_per_pixel": {"int": [[282, "            compressed_bits_per_pixel = 37122"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField._read": {"param": {"self": {"IfdField": [[528, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.TagEn": {"var": {"exposure_time": {"int": [[196, "            exposure_time = 33434"]]}, "default_image_color": {"int": [[140, "            default_image_color = 434"]]}, "profile_hue_sat_map_dims": {"int": [[466, "            profile_hue_sat_map_dims = 50937"]]}, "max_sample_value": {"int": [[83, "            max_sample_value = 281"]]}, "exposure_program": {"int": [[255, "            exposure_program = 34850"]]}, "s_max_sample_value": {"int": [[125, "            s_max_sample_value = 341"]]}, "texture_format": {"int": [[185, "            texture_format = 33302"]]}, "sub_sec_time": {"int": [[312, "            sub_sec_time = 37520"]]}, "chroma_blur_radius": {"int": [[437, "            chroma_blur_radius = 50737"]]}, "max_aperture_value": {"int": [[287, "            max_aperture_value = 37381"]]}, "image_full_height": {"int": [[184, "            image_full_height = 33301"]]}, "exposure_mode": {"int": [[357, "            exposure_mode = 41986"]]}, "image_source_data": {"int": [[318, "            image_source_data = 37724"]]}, "sub_sec_time_digitized": {"int": [[314, "            sub_sec_time_digitized = 37522"]]}, "host_computer": {"int": [[103, "            host_computer = 316"]]}, "image_full_width": {"int": [[183, "            image_full_width = 33300"]]}, "profile_hue_sat_map_data2": {"int": [[468, "            profile_hue_sat_map_data2 = 50939"]]}, "profile_hue_sat_map_data1": {"int": [[467, "            profile_hue_sat_map_data1 = 50938"]]}, "multi_profiles": {"int": [[247, "            multi_profiles = 34688"]]}, "humidity": {"int": [[320, "            humidity = 37889"]]}, "geo_tiff_double_params": {"int": [[252, "            geo_tiff_double_params = 34736"]]}, "image_color_value": {"int": [[228, "            image_color_value = 34025"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdFiel": {"func": {"data": {"IfdField -> None": [[559, "        def data(self):"]]}, "_read": {"IfdField -> None": [[528, "        def _read(self):"]]}, "is_immediate_data": {"IfdField -> bool": [[551, "        def is_immediate_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.FieldTypeEnum": {"var": {"word": {"int": [[56, "            word = 3"]]}, "undefined": {"int": [[59, "            undefined = 7"]]}, "ascii_string": {"int": [[55, "            ascii_string = 2"]]}, "srational": {"int": [[61, "            srational = 10"]]}, "rational": {"int": [[58, "            rational = 5"]]}, "slong": {"int": [[60, "            slong = 9"]]}, "dword": {"int": [[57, "            dword = 4"]]}, "byte": {"int": [[54, "            byte = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe._read": {"param": {"self": {"ExifBe": [[18, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.__init": {"param": {"_io": {"?": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.__init__": {"param": {"self": {"ExifBe": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.ifd0": {"var": {"_pos": {"?": [[578, "        _pos = self._io.pos()"]]}}, "param": {"self": {"ExifBe": [[574, "    def ifd0(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.__ini": {"param": {"_parent": {"None": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[12, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField": {"class": {"TagEnum": {"<TagEnum>": [[63, "        class TagEnum(Enum):"]]}}, "func": {"type_byte_length": {"IfdField -> int": [[535, "        def type_byte_length(self):"]]}, "byte_length": {"IfdField -> IfdField -> int": [[543, "        def byte_length(self):"]]}, "__init__": {"? -> ?": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.Ifd.next_ifd": {"var": {"_pos": {"?": [[43, "                _pos = self._io.pos()"]]}}, "param": {"self": {"Ifd": [[38, "        def next_ifd(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.IfdField.__ini": {"param": {"_parent": {"None": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[522, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif_be.ExifBe.Ifd.__ini": {"param": {"_parent": {"ExifBe": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"ExifBe": [[23, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.full_eval.call": {"var": {"x": {"?": [[3, "        x = instance(data, **metadata)"]]}, "name": {"?": [[6, "        name, generator = x"]]}}, "param": {"data": {"?": [[2, "    def call(data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.full_eval": {"param": {"instance": {"?": [[1, "def full_eval(instance):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.full_ev": {"func": {"call": {"? -> (?, list)": [[2, "    def call(data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews": {"func": {"full_eval": {"? -> ? -> (?, list)": [[1, "def full_eval(instance):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/urlinjection.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.UrlInjectionAdd": {"var": {"injection_gen": {"?": [[148, "                 injection_gen: InjectionGenerator):"]]}}, "func": {"response": {"(UrlInjectionAddon, ?) -> None": [[163, "    def response(self, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.RobotsInjection": {"func": {"robots_txt": {"(<RobotsInjection>, ?, str) -> str": [[90, "    def robots_txt(cls, index, directive=\"Allow\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.UrlInjectionAddo": {"func": {"__init__": {"? -> ?": [[147, "    def __init__(self, flt: str, url_index_file: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection.index_htm": {"var": {"url": {"?": [[47, "                url = scheme_netloc + path"]]}}, "param": {"cls": {"<HTMLInjection>": [[43, "    def index_html(cls, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection.landing_pag": {"param": {"index": {"?": [[56, "    def landing_page(cls, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.u": {"class": {"UrlInjectionAddon": {"<UrlInjectionAddon>": [[133, "class UrlInjectionAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.SitemapInjection": {"func": {"sitemap": {"(<SitemapInjection>, ?) -> str": [[113, "    def sitemap(cls, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjectio": {"func": {"landing_page": {"(<HTMLInjection>, ?) -> str": [[56, "    def landing_page(cls, index):"]]}, "inject": {"(HTMLInjection, ?, ?) -> None": [[63, "    def inject(self, index, flow: HTTPFlow):"]]}, "index_html": {"(<HTMLInjection>, ?) -> str": [[43, "    def index_html(cls, index):"]]}, "__init__": {"? -> ?": [[25, "    def __init__(self, insert: bool = False):"]]}, "_link_html": {"(<HTMLInjection>, ?) -> None": [[39, "    def _link_html(cls, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.RobotsInjection.__init__": {"param": {"self": {"RobotsInjection": [[86, "    def __init__(self, directive=\"Allow\"):"]]}, "directive": {"str": [[86, "    def __init__(self, directive=\"Allow\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection.inj": {"var": {"content": {"?": [[70, "                content = (flow.response"], [74, "                    content = content.replace(\"</body>\", self.index_html(index) + \"</body>\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.InjectionGenerator": {"var": {"ENCODING": {"str": [[14, "    ENCODING = \"UTF8\""]]}}, "func": {"inject": {"(InjectionGenerator, ?, ?) -> None": [[17, "    def inject(self, index, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.RobotsInjection.robots_tx": {"var": {"scheme_netloc": {"?": [[92, "        for scheme_netloc, paths in index.items():"]]}, "path": {"?": [[93, "            for path, methods in paths.items():"]]}}, "param": {"directive": {"str": [[90, "    def robots_txt(cls, index, directive=\"Allow\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection.index_html": {"var": {"path": {"?": [[46, "            for path, methods in paths.items():"]]}}, "param": {"index": {"?": [[43, "    def index_html(cls, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.SitemapInjection.sitemap": {"var": {"scheme_netloc": {"?": [[116, "        for scheme_netloc, paths in index.items():"]]}, "url": {"?": [[118, "                url = scheme_netloc + path"]]}, "lines": {"[str]": [[114, "        lines = ["]]}}, "param": {"index": {"?": [[113, "    def sitemap(cls, index):"]]}, "cls": {"<SitemapInjection>": [[113, "    def sitemap(cls, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.url": {"class": {"InjectionGenerator": {"<InjectionGenerator>": [[12, "class InjectionGenerator:"]]}, "SitemapInjection": {"<SitemapInjection>": [[109, "class SitemapInjection(InjectionGenerator):"]]}, "HTMLInjection": {"<HTMLInjection>": [[22, "class HTMLInjection(InjectionGenerator):"]]}, "RobotsInjection": {"<RobotsInjection>": [[83, "class RobotsInjection(InjectionGenerator):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.SitemapInjection.sitem": {"var": {"path": {"?": [[117, "            for path, methods in paths.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.RobotsInjection.robots_txt": {"var": {"lines": {"[str]": [[91, "        lines = [\"User-agent: *\"]"]]}}, "param": {"index": {"?": [[90, "    def robots_txt(cls, index, directive=\"Allow\"):"]]}, "cls": {"<RobotsInjection>": [[90, "    def robots_txt(cls, index, directive=\"Allow\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection._link_htm": {"param": {"url": {"?": [[39, "    def _link_html(cls, url):"]]}, "cls": {"<HTMLInjection>": [[39, "    def _link_html(cls, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.RobotsInjectio": {"func": {"inject": {"(RobotsInjection, ?, ?) -> None": [[97, "    def inject(self, index, flow: HTTPFlow):"]]}, "__init__": {"? -> ?": [[86, "    def __init__(self, directive=\"Allow\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection.index": {"var": {"scheme_netloc": {"?": [[45, "        for scheme_netloc, paths in index.items():"]]}, "link_htmls": {"[None]": [[44, "        link_htmls = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.SitemapInjectio": {"func": {"inject": {"(SitemapInjection, ?, ?) -> None": [[123, "    def inject(self, index, flow: HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection.landing_page": {"param": {"cls": {"<HTMLInjection>": [[56, "    def landing_page(cls, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection._form_htm": {"param": {"url": {"?": [[35, "    def _form_html(cls, url):"]]}, "cls": {"<HTMLInjection>": [[35, "    def _form_html(cls, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection.HTMLInjection": {"func": {"_form_html": {"(<HTMLInjection>, ?) -> None": [[35, "    def _form_html(cls, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urlinjection": {"var": {"logger": {"?": [[9, "logger = logging.getLogger(__name__)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/browser.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.b": {"class": {"Browser": {"<Browser>": [[29, "class Browser:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.browser.Browser": {"func": {"done": {"Browser -> None": [[71, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.browser.Browse": {"var": {"tdir": {"None": [[31, "    tdir = None"]]}}, "func": {"start": {"Browser -> None": [[34, "    def start(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.browser.Browser.don": {"param": {"self": {"Browser": [[71, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.browser.B": {"var": {"browser": {"None": [[30, "    browser = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.browser.get_chrome_executabl": {"var": {"browser": {"str": [[11, "    for browser in ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.brows": {"func": {"get_chrome_executable": {"() -> str": [[10, "def get_chrome_executable() -> typing.Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.browser.Browser.start": {"var": {"cmd": {"str": [[46, "        cmd = get_chrome_executable()"]]}}, "param": {"self": {"Browser": [[34, "    def start(self) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/modes/http_proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_proxy.HttpUpstreamProxy.__init__": {"param": {"self": {"HttpUpstreamProxy": [[17, "    def __init__(self, ctx, server_address):"]]}, "ctx": {"RootContext": [[17, "    def __init__(self, ctx, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_": {"class": {"HttpUpstreamProxy": {"<HttpUpstreamProxy>": [[15, "class HttpUpstreamProxy(protocol.Layer, protocol.ServerConnectionMixin):"]]}, "HttpProxy": {"<HttpProxy>": [[4, "class HttpProxy(protocol.Layer, protocol.ServerConnectionMixin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_proxy.HttpUpstreamProxy.__init": {"param": {"server_address": {"?": [[17, "    def __init__(self, ctx, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_proxy.HttpProxy.__call__": {"var": {"layer": {"?": [[7, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"HttpProxy": [[6, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_proxy.HttpProxy": {"func": {"__call__": {"HttpProxy -> ?": [[6, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_proxy.HttpUpstreamProxy": {"func": {"__call__": {"HttpUpstreamProxy -> ?": [[20, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self, ctx, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.http_proxy.HttpUpstreamProxy.__call__": {"var": {"layer": {"?": [[21, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"HttpUpstreamProxy": [[20, "    def __call__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_intercept.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_intercept.test_simple": {"var": {"r": {"Intercept": [[10, "    r = intercept.Intercept()"]]}, "f": {"?": [[24, "        f = tflow.tflow(resp=True)"], [28, "        f = tflow.tflow(resp=False)"], [32, "        f = tflow.tflow(resp=True)"], [37, "        f = tflow.tflow(resp=True)"], [42, "        f = tflow.tflow(resp=True)"], [47, "        f = tflow.ttcpflow()"], [52, "        f = tflow.ttcpflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_interc": {"func": {"test_simple": {"() -> None": [[9, "def test_simple():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/internet_in_mirror.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.internet_in_mi": {"func": {"response": {"? -> None": [[9, "def response(flow: http.HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.internet_in_mirror.respons": {"var": {"reflector": {"str": [[10, "    reflector = b\"<style>body {transform: scaleX(-1);}</style></head>\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/query.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.q": {"class": {"ViewQuery": {"<ViewQuery>": [[6, "class ViewQuery(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.query.ViewQuery": {"var": {"name": {"str": [[7, "    name = \"Query\""]]}}, "func": {"__call__": {"(ViewQuery, ?) -> (str, ?)": [[9, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.query.ViewQuery.__call__": {"var": {"query": {"?": [[10, "        query = metadata.get(\"query\")"]]}}, "param": {"self": {"ViewQuery": [[9, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[9, "    def __call__(self, data, **metadata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/http1/test_read.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_request_line": {"func": {"t": {"str -> (str, ?, None, None, int, str, ?)": [[241, "    def t(b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_request": {"var": {"r": {"Request": [[35, "    r = read_request(rfile)"]]}, "rfile": {"?": [[34, "    rfile = BytesIO(input)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_expected_http_body_siz": {"var": {"code": {"int": [[182, "    for code in (100, 204, 304):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody": {"func": {"test_known_size": {"TestReadBody -> None": [[112, "    def test_known_size(self):"]]}, "test_known_size_limit": {"TestReadBody -> None": [[118, "    def test_known_size_limit(self):"]]}, "test_unknown_size_limit": {"TestReadBody -> None": [[133, "    def test_unknown_size_limit(self):"]]}, "test_chunked": {"TestReadBody -> None": [[106, "    def test_chunked(self):"]]}, "test_max_chunk_size": {"TestReadBody -> None": [[138, "    def test_max_chunk_size(self):"]]}, "test_known_size_too_short": {"TestReadBody -> None": [[123, "    def test_known_size_too_short(self):"]]}, "test_unknown_size": {"TestReadBody -> None": [[128, "    def test_unknown_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_simpl": {"var": {"headers": {"Headers": [[319, "        headers = self._read(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders": {"func": {"_read": {"? -> Headers / str -> Headers": [[310, "    def _read(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_unknown_size_limit": {"var": {"rfile": {"?": [[134, "        rfile = BytesIO(b\"foobar\")"]]}}, "param": {"self": {"TestReadBody": [[133, "    def test_unknown_size_limit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_request_error": {"param": {"input": {"?": [[46, "def test_read_request_error(input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_respons": {"var": {"req": {"Request": [[77, "    req = treq()"]]}, "rfile": {"?": [[78, "    rfile = BytesIO(input)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_response": {"var": {"r": {"Response": [[79, "    r = read_response(rfile, req)"]]}}, "param": {"input": {"?": [[76, "def test_read_response(input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_unknown_siz": {"var": {"rfile": {"?": [[129, "        rfile = BytesIO(b\"foobar\")"]]}}, "param": {"self": {"TestReadBody": [[128, "    def test_unknown_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_response_head": {"var": {"r": {"Response": [[96, "    r = read_response_head(rfile)"]]}, "rfile": {"?": [[88, "    rfile = BytesIO("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_empty_name": {"var": {"data": {"str": [[352, "        data = b\":foo\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_request_erro": {"var": {"rfile": {"?": [[47, "    rfile = BytesIO(input)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders._re": {"param": {"data": {"str": [[310, "    def _read(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_known_siz": {"var": {"rfile": {"?": [[113, "        rfile = BytesIO(b\"foobar\")"]]}}, "param": {"self": {"TestReadBody": [[112, "    def test_known_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_empty_nam": {"param": {"self": {"TestReadHeaders": [[351, "    def test_read_empty_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_": {"class": {"TestReadHeaders": {"<TestReadHeaders>": [[308, "class TestReadHeaders:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_empty_value": {"var": {"data": {"str": [[357, "        data = b\"bar:\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_get_header_token": {"var": {"headers": {"Headers": [[17, "    headers = Headers()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_continued_err": {"var": {"data": {"str": [[342, "        data = b\"\\tfoo: bar\\r\\n\""]]}}, "param": {"self": {"TestReadHeaders": [[341, "    def test_read_continued_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadH": {"func": {"test_read_err": {"TestReadHeaders -> None": [[346, "    def test_read_err(self):"]]}, "test_read_continued": {"TestReadHeaders -> None": [[331, "    def test_read_continued(self):"]]}, "test_read_simple": {"TestReadHeaders -> None": [[313, "    def test_read_simple(self):"]]}, "test_read_empty_name": {"TestReadHeaders -> None": [[351, "    def test_read_empty_name(self):"]]}, "test_read_multi": {"TestReadHeaders -> None": [[322, "    def test_read_multi(self):"]]}, "test_read_continued_err": {"TestReadHeaders -> None": [[341, "    def test_read_continued_err(self):"]]}, "test_read_empty_value": {"TestReadHeaders -> None": [[356, "    def test_read_empty_value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_simp": {"param": {"self": {"TestReadHeaders": [[313, "    def test_read_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_simple": {"var": {"data": {"str": [[314, "        data = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_chunke": {"var": {"data": {"str": [[366, "    data = b\"1\\r\\na\\r\\n0\\r\\n\""], [370, "    data = b\"1\\r\\na\\r\\n0\\r\\n\\r\\n\""], [373, "    data = b\"\\r\\n\\r\\n1\\r\\na\\r\\n1\\r\\nb\\r\\n0\\r\\n\\r\\n\""], [376, "    data = b\"\\r\\n\""], [380, "    data = b\"1\\r\\nfoo\""], [384, "    data = b\"foo\\r\\nfoo\""], [388, "    data = b\"5\\r\\naaaaa\\r\\n0\\r\\n\\r\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1": {"func": {"test_get_header_tokens": {"() -> None": [[16, "def test_get_header_tokens():"]]}, "test_read_response": {"? -> None": [[76, "def test_read_response(input):"]]}, "test_read_request_line": {"() -> None": [[240, "def test_read_request_line():"]]}, "test_read_response_line": {"() -> None": [[274, "def test_read_response_line():"]]}, "test_read_response_head": {"() -> None": [[87, "def test_read_response_head():"]]}, "test_read_request_head": {"() -> None": [[52, "def test_read_request_head():"]]}, "test_read_chunked": {"() -> None": [[362, "def test_read_chunked():"]]}, "test_read_request": {"? -> None": [[33, "def test_read_request(input):"]]}, "test_read_request_error": {"? -> None": [[46, "def test_read_request_error(input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_request_head": {"var": {"r": {"Request": [[61, "    r = read_request_head(rfile)"]]}, "rfile": {"?": [[53, "    rfile = BytesIO("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_chunke": {"var": {"body": {"str": [[108, "        body = b\"\".join(read_body(rfile, None))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_request_line.t": {"param": {"b": {"str": [[241, "    def t(b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_known_size_limit": {"var": {"rfile": {"?": [[119, "        rfile = BytesIO(b\"foobar\")"]]}}, "param": {"self": {"TestReadBody": [[118, "    def test_known_size_limit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read": {"func": {"test_parse_authority_form": {"() -> None": [[261, "def test_parse_authority_form():"]]}, "test_connection_close": {"() -> None": [[145, "def test_connection_close():"]]}, "test_get_first_line": {"() -> None": [[223, "def test_get_first_line():"]]}, "test_check_http_version": {"() -> None": [[295, "def test_check_http_version():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_multi": {"var": {"headers": {"Headers": [[328, "        headers = self._read(data)"]]}, "data": {"str": [[323, "        data = ("]]}}, "param": {"self": {"TestReadHeaders": [[322, "    def test_read_multi(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_continue": {"var": {"data": {"str": [[332, "        data = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_continu": {"var": {"headers": {"Headers": [[338, "        headers = self._read(data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_known_size": {"var": {"body": {"str": [[114, "        body = b\"\".join(read_body(rfile, 3))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_response_line.t": {"param": {"b": {"str": [[275, "    def t(b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_continued": {"param": {"self": {"TestReadHeaders": [[331, "    def test_read_continued(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_r": {"class": {"TestReadBody": {"<TestReadBody>": [[105, "class TestReadBody:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_chunked": {"var": {"req": {"Request": [[363, "    req = treq(content=None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_get_first_lin": {"var": {"rfile": {"?": [[224, "    rfile = BytesIO(b\"foo\\r\\nbar\")"], [227, "    rfile = BytesIO(b\"\\r\\nfoo\\r\\nbar\")"], [231, "        rfile = BytesIO(b\"\")"], [235, "        rfile = Mock()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_empty_valu": {"var": {"headers": {"Headers": [[358, "        headers = self._read(data)"]]}}, "param": {"self": {"TestReadHeaders": [[356, "    def test_read_empty_value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_reques": {"param": {"input": {"?": [[33, "def test_read_request(input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_known_size_too_short": {"var": {"rfile": {"?": [[124, "        rfile = BytesIO(b\"foo\")"]]}}, "param": {"self": {"TestReadBody": [[123, "    def test_known_size_too_short(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_connection_clo": {"var": {"headers": {"Headers": [[146, "    headers = Headers()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_chunked": {"var": {"rfile": {"?": [[107, "        rfile = BytesIO(b\"3\\r\\nfoo\\r\\n0\\r\\n\\r\\nbar\")"]]}}, "param": {"self": {"TestReadBody": [[106, "    def test_chunked(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_expected_http_body_size": {"var": {"val": {"str": [[194, "    for val in (b\"foo\", b\"-7\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadHeaders.test_read_err": {"var": {"data": {"str": [[347, "        data = b\"foo\""]]}}, "param": {"self": {"TestReadHeaders": [[346, "    def test_read_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_rea": {"func": {"test_expected_http_body_size": {"() -> None": [[161, "def test_expected_http_body_size():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.test_read_response_line": {"func": {"t": {"str -> (?, int, ?)": [[275, "    def t(b):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_max_chunk_siz": {"var": {"rfile": {"?": [[139, "        rfile = BytesIO(b\"123456\")"], [141, "        rfile = BytesIO(b\"123456\")"]]}}, "param": {"self": {"TestReadBody": [[138, "    def test_max_chunk_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http1.test_read.TestReadBody.test_unknown_size": {"var": {"body": {"str": [[130, "        body = b\"\".join(read_body(rfile, -1))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/block.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.b": {"class": {"Block": {"<Block>": [[5, "class Block:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.block.Block.load": {"param": {"self": {"Block": [[6, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.block.Block.clientconnec": {"var": {"astr": {"?": [[24, "        astr = layer.client_conn.address[0]"]]}, "parts": {"?": [[26, "        parts = astr.rsplit(\"%\", 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.block.Block": {"param": {"loader": {"?": [[6, "    def load(self, loader):"]]}}, "func": {"load": {"(Block, ?) -> None": [[6, "    def load(self, loader):"]]}, "clientconnect": {"(Block, ?) -> None": [[23, "    def clientconnect(self, layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.block.Block.clientconnect": {"var": {"address": {"?": [[27, "        address = ipaddress.ip_address(parts[0])"], [29, "            address = address.ipv4_mapped or address"]]}}, "param": {"self": {"(Block, ?) -> None": [[23, "    def clientconnect(self, layer):"]]}, "layer": {"Block": [[23, "    def clientconnect(self, layer):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/_main.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._ma": {"func": {"process_options": {"(?, Options, ?) -> ProxyConfig / (None, Options, ?) -> ProxyConfig / (MockParser, Options, ?) -> ProxyConfig / (?, ?, ?) -> ProxyConfig": [[37, "def process_options(parser, opts, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.mitmproxy": {"param": {"args": {"None": [[141, "def mitmproxy(args=None) -> typing.Optional[int]:  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.process_option": {"param": {"args": {"?": [[37, "def process_options(parser, opts, args):"]]}, "parser": {"{MockParser | None}": [[37, "def process_options(parser, opts, args):"]]}, "opts": {"Options": [[37, "def process_options(parser, opts, args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.mitmdump.ext": {"param": {"args": {"?": [[155, "    def extra(args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.mitmweb": {"param": {"args": {"[str]": [[171, "def mitmweb(args=None) -> typing.Optional[int]:  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.mitmdump.extra": {"var": {"v": {"str": [[157, "            v = \" \".join(args.filter_args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._mai": {"var": {"arguments": {"[str]": [[62, "        arguments: typing.Sequence[str],"]]}}, "func": {"assert_utf8_env": {"() -> None": [[21, "def assert_utf8_env():"]]}, "run": {"(<WebMaster>, ? -> None / Options -> None, None, None) -> WebMaster / (?, ?, ?, None) -> ? / (<DumpMaster>, ? -> None / Options -> None, [str], ? -> {dict | dict}) -> DumpMaster / (<DumpMaster>, ? -> None / Options -> None, None, ? -> {dict | dict}) -> DumpMaster / (<WebMaster>, ? -> None / Options -> None, [str], None) -> WebMaster / (<ConsoleMaster>, Options -> None / ? -> None, None, None) -> ConsoleMaster": [[59, "def run("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.ru": {"var": {"pconf": {"ProxyConfig": [[93, "        pconf = process_options(parser, opts, args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.process_options": {"var": {"adict": {"dict": [[50, "    adict = {}"]]}, "n": {"str": [[51, "    for n in dir(args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main": {"func": {"mitmproxy": {"None -> int": [[141, "def mitmproxy(args=None) -> typing.Optional[int]:  # pragma: no cover"]]}, "mitmweb": {"None -> None / [str] -> None": [[171, "def mitmweb(args=None) -> typing.Optional[int]:  # pragma: no cover"]]}, "mitmdump": {"[str] -> int / None -> int": [[152, "def mitmdump(args=None) -> typing.Optional[int]:  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.run": {"var": {"args": {"?": [[81, "        args = parser.parse_args(arguments)"]]}, "extra": {"? -> {dict | dict}": [[63, "        extra: typing.Callable[[typing.Any], dict] = None"]]}, "parser": {"None": [[74, "    parser = make_parser(opts)"]]}, "server": {"ProxyServer": [[97, "                server = proxy.server.ProxyServer(pconf)"]], "DummyServer": [[102, "            server = proxy.server.DummyServer(pconf)"]]}, "master": {"{ConsoleMaster | DumpMaster | WebMaster}": [[72, "    master = master_cls(opts)"]]}, "master_cls": {"{<ConsoleMaster> | <DumpMaster> | <WebMaster>}": [[60, "        master_cls: typing.Type[master.Master],"]]}, "loop": {"?": [[116, "        loop = asyncio.get_event_loop()"]]}, "make_parser": {"{? -> None / Options -> None | ? -> None / Options -> None | Options -> None / ? -> None}": [[61, "        make_parser: typing.Callable[[options.Options], argparse.ArgumentParser],"]]}, "opts": {"Options": [[71, "    opts = options.Options()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.assert_utf8_env": {"var": {"i": {"str": [[23, "    for i in [\"LANG\", \"LC_CTYPE\", \"LC_ALL\"]:"]]}, "spec": {"str": [[22, "    spec = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools._main.mitmdump": {"var": {"m": {"DumpMaster": [[165, "    m = run(dump.DumpMaster, cmdline.mitmdump, args, extra)"]]}}, "param": {"args": {"[str]": [[152, "def mitmdump(args=None) -> typing.Optional[int]:  # pragma: no cover"]]}}, "func": {"extra": {"? -> {dict | dict}": [[155, "    def extra(args):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/concurrent_decorator_err.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator_err.load": {"param": {"v": {"?": [[5, "def load(v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator_err": {"func": {"load": {"? -> None": [[5, "def load(v):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/platform/windows.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirect": {"var": {"daemon": {"?": [[269, "    daemon = True"]]}}, "func": {"recv": {"Redirect -> ?": [[302, "    def recv(self) -> typing.Optional[pydivert.Packet]:"]]}, "run": {"Redirect -> ?": [[287, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLocal": {"func": {"__init__": {"? -> ?": [[319, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable._refresh_ipv6": {"var": {"local_port": {"?": [[232, "                local_port = socket.htons(row.dwLocalPort)"]]}, "local_ip": {"?": [[231, "                local_ip = socket.inet_ntop(socket.AF_INET6, bytes(row.ucLocalAddr))"]]}, "ret": {"?": [[221, "        ret = ctypes.windll.iphlpapi.GetExtendedTcpTable("]]}, "row": {"?": [[230, "            for row in self._tcp6.table[:self._tcp6.dwNumEntries]:"]]}}, "param": {"self": {"TcpConnectionTable": [[220, "    def _refresh_ipv6(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable._refresh_ipv4": {"var": {"local_port": {"?": [[211, "                local_port = socket.htons(row.dwLocalPort)"]]}, "local_ip": {"?": [[210, "                local_ip = socket.inet_ntop(socket.AF_INET, bytes(row.ucLocalAddr))"]]}, "ret": {"?": [[200, "        ret = ctypes.windll.iphlpapi.GetExtendedTcpTable("]]}, "row": {"?": [[209, "            for row in self._tcp.table[:self._tcp.dwNumEntries]:"]]}}, "param": {"self": {"TcpConnectionTable": [[199, "    def _refresh_ipv4(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.MIB_TCPTABLE_OWNER_PID": {"param": {"size": {"int": [[162, "def MIB_TCPTABLE_OWNER_PID(size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.MIB_TCP6ROW_OWNER_PID": {"var": {"_fields_": {"[(str, int)]": [[122, "    _fields_ = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable.__getitem__": {"param": {"item": {"?": [[185, "    def __getitem__(self, item):"]]}, "self": {"TcpConnectionTable": [[185, "    def __getitem__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.MIB_TCPTABLE_OWNER_PID._MIB_TCPTABLE_OWNER_PID": {"var": {"_fields_": {"{[(str, <MIB_TCPROW_OWNER_PID>)] | [(str, ?)]}": [[164, "        _fields_ = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows": {"var": {"ERROR_INSUFFICIENT_BUFFER": {"int": [[110, "ERROR_INSUFFICIENT_BUFFER = 0x7A"]]}, "IN4_ADDR": {"int": [[113, "IN4_ADDR = ctypes.c_ubyte * 4"]]}, "TCP_TABLE_OWNER_PID_CONNECTIONS": {"int": [[172, "TCP_TABLE_OWNER_PID_CONNECTIONS = 4"]]}, "REDIRECT_API_PORT": {"int": [[21, "REDIRECT_API_PORT = 8085"]]}, "TConnection": {"?": [[347, "TConnection = typing.Tuple[str, int]"]]}, "IN6_ADDR": {"int": [[112, "IN6_ADDR = ctypes.c_ubyte * 16"]]}, "REDIRECT_API_HOST": {"str": [[20, "REDIRECT_API_HOST = \"127.0.0.1\""]]}}, "class": {"Redirect": {"<Redirect>": [[268, "class Redirect(threading.Thread):"]]}, "MIB_TCPROW_OWNER_PID": {"<MIB_TCPROW_OWNER_PID>": [[150, "class MIB_TCPROW_OWNER_PID(ctypes.Structure):"]]}, "_MIB_TCPTABLE_OWNER_PID": {"{<_MIB_TCPTABLE_OWNER_PID> | <_MIB_TCPTABLE_OWNER_PID>}": [[163, "    class _MIB_TCPTABLE_OWNER_PID(ctypes.Structure):"]]}, "RedirectLocal": {"<RedirectLocal>": [[316, "class RedirectLocal(Redirect):"]]}, "APIServer": {"<APIServer>": [[98, "class APIServer(socketserver.ThreadingMixIn, socketserver.TCPServer):"]]}, "ClientServerMap": {"<ClientServerMap>": [[350, "class ClientServerMap:"]]}, "_MIB_TCP6TABLE_OWNER_PID": {"{<_MIB_TCP6TABLE_OWNER_PID> | <_MIB_TCP6TABLE_OWNER_PID>}": [[136, "    class _MIB_TCP6TABLE_OWNER_PID(ctypes.Structure):"]]}, "TcpConnectionTable": {"<TcpConnectionTable>": [[175, "class TcpConnectionTable(collections.abc.Mapping):"]]}, "MIB_TCP6ROW_OWNER_PID": {"<MIB_TCP6ROW_OWNER_PID>": [[121, "class MIB_TCP6ROW_OWNER_PID(ctypes.Structure):"]]}}, "func": {"MIB_TCPTABLE_OWNER_PID": {"? -> _MIB_TCPTABLE_OWNER_PID / int -> _MIB_TCPTABLE_OWNER_PID": [[162, "def MIB_TCPTABLE_OWNER_PID(size):"]]}, "MIB_TCP6TABLE_OWNER_PID": {"? -> _MIB_TCP6TABLE_OWNER_PID / int -> _MIB_TCP6TABLE_OWNER_PID": [[135, "def MIB_TCP6TABLE_OWNER_PID(size):"]]}, "cli": {"() -> None": [[554, "def cli():"]]}, "read": {"? -> None": [[27, "def read(rfile: io.BufferedReader) -> typing.Any:"]]}, "get_local_ip": {"() -> None": [[242, "def get_local_ip() -> typing.Optional[str]:"]]}, "write": {"((?, ?), ?) -> None / (?, ?) -> None": [[32, "def write(data, wfile: io.BufferedWriter) -> None:"]]}, "get_local_ip6": {"? -> None / str -> None": [[255, "def get_local_ip6(reachable: str) -> typing.Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.APIServer": {"func": {"__init__": {"? -> ?": [[100, "    def __init__(self, proxifier, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable": {"var": {"DEFAULT_TABLE_SIZE": {"int": [[176, "    DEFAULT_TABLE_SIZE = 4096"]]}}, "func": {"__init__": {"? -> ?": [[178, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable.__init__": {"param": {"self": {"TcpConnectionTable": [[178, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.read": {"var": {"x": {"?": [[28, "    x = rfile.readline().strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.setup": {"var": {"server_unavailable": {"?": [[478, "        server_unavailable = s.connect_ex((REDIRECT_API_HOST, REDIRECT_API_PORT))"]]}, "s": {"?": [[477, "        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"]]}}, "param": {"cls": {"<TransparentProxy>": [[474, "    def setup(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolver.setup": {"param": {"self": {"Resolver": [[45, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.shutdown": {"param": {"self": {"TransparentProxy": [[492, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLocal.handl": {"param": {"packet": {"?": [[329, "    def handle(self, packet):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirec": {"func": {"start": {"RedirectLocal -> None / Redirect -> None": [[283, "    def start(self):"]]}, "shutdown": {"Redirect -> None / RedirectLocal -> None": [[299, "    def shutdown(self):"]]}, "__init__": {"? -> ?": [[272, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.get_local_ip": {"var": {"s": {"?": [[245, "    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirect.shutdown": {"param": {"self": {"{Redirect | RedirectLocal}": [[299, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirect.__init__": {"var": {"filter": {"str": [[275, "        filter: str,"]]}, "flags": {"int": [[277, "        flags: pydivert.Flag = 0"]]}, "self": {"Redirect": [[273, "        self,"]]}, "handle": {"{(TransparentProxy, ?) -> ? | (TransparentProxy, ?) -> None / (RedirectLocal, ?) -> None | Redirect -> None}": [[274, "        handle: typing.Callable[[pydivert.Packet], None],"]]}, "layer": {"?": [[276, "        layer: pydivert.Layer = pydivert.Layer.NETWORK,"]]}}, "param": {"self": {"Redirect": [[274, "        handle: typing.Callable[[pydivert.Packet], None],"]]}, "handle": {"{(TransparentProxy, ?) -> ? | (TransparentProxy, ?) -> None / (RedirectLocal, ?) -> No": [[274, "        handle: typing.Callable[[pydivert.Packet], None],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirect.start": {"param": {"self": {"{Redirect | RedirectLocal}": [[283, "    def start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLoc": {"func": {"handle": {"(RedirectLocal, ?) -> None": [[329, "    def handle(self, packet):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.__init__": {"var": {"forward": {"?": [[424, "        forward: bool = True,"]]}, "filter": {"str": [[426, "        filter: typing.Optional[str] = \"tcp.DstPort == 80 or tcp.DstPort == 443\","]]}, "self": {"TransparentProxy": [[422, "        self,"]]}, "local": {"?": [[423, "        local: bool = True,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirect.run": {"var": {"packet": {"?": [[290, "                packet = self.windivert.recv()"]]}}, "param": {"self": {"Redirect": [[287, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.APIServer.__init__": {"param": {"self": {"APIServer": [[100, "    def __init__(self, proxifier, *args, **kwargs):"]]}, "proxifier": {"TransparentProxy": [[100, "    def __init__(self, proxifier, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolve": {"func": {"original_addr": {"(Resolver, ?) -> tuple": [[60, "    def original_addr(self, csock: socket.socket):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy": {"func": {"shutdown": {"TransparentProxy -> None": [[492, "    def shutdown(self):"]]}, "setup": {"<TransparentProxy> -> None": [[474, "    def setup(cls):"]]}, "redirect_response": {"(TransparentProxy, ?) -> ?": [[526, "    def redirect_response(self, packet: pydivert.Packet):"]]}, "start": {"TransparentProxy -> None": [[483, "    def start(self):"]]}, "redirect_request": {"(TransparentProxy, ?) -> None / (RedirectLocal, ?) -> None": [[501, "    def redirect_request(self, packet: pydivert.Packet):"]]}, "exempt": {"(TransparentProxy, ?) -> ?": [[543, "    def exempt(self, pid: int):"]]}, "__init__": {"? -> ?": [[421, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable.refresh": {"param": {"self": {"TcpConnectionTable": [[194, "    def refresh(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolver.original_": {"var": {"addr": {"None": [[67, "                addr = read(self.rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.MIB_TCP6TABLE_OWNER_PID._MIB_TCP6TABLE_OWNER_PID": {"var": {"_fields_": {"{[(str, <MIB_TCP6ROW_OWNER_PID>)] | [(str, ?)]}": [[137, "        _fields_ = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.APIRequestHandler.hand": {"var": {"client": {"tuple": [[88, "                    client = tuple(read(self.rfile))"]]}}, "param": {"self": {"APIRequestHandler": [[82, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.get_local_ip6": {"var": {"s": {"?": [[258, "    s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.APIRequestHandler": {"func": {"handle": {"APIRequestHandler -> None": [[82, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.window": {"var": {"connections": {"TcpConnectionTable": [[585, "    connections = TcpConnectionTable()"]]}}, "class": {"TransparentProxy": {"<TransparentProxy>": [[370, "class TransparentProxy:"]]}, "APIRequestHandler": {"<APIRequestHandler>": [[76, "class APIRequestHandler(socketserver.StreamRequestHandler):"]]}, "Resolver": {"<Resolver>": [[37, "class Resolver:"]]}}, "func": {"connections": {"() -> None": [[583, "def connections():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable.__iter__": {"param": {"self": {"TcpConnectionTable": [[188, "    def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLocal.__init__": {"var": {"filter": {"str": [[322, "        filter: str"]]}, "self": {"RedirectLocal": [[320, "        self,"]]}}, "param": {"self": {"RedirectLocal": [[321, "        redirect_request: typing.Callable[[pydivert.Packet], None],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.MIB_TCPROW_OWNER_PID": {"var": {"_fields_": {"[(str, int)]": [[151, "    _fields_ = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.ClientServerMap.__init__": {"param": {"self": {"ClientServerMap": [[354, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTab": {"func": {"__len__": {"TcpConnectionTable -> ?": [[191, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.MIB_TCP6TABLE_OWNER_PID": {"param": {"size": {"int": [[135, "def MIB_TCP6TABLE_OWNER_PID(size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTable.__len__": {"param": {"self": {"TcpConnectionTable": [[191, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolver.__init__": {"param": {"self": {"Resolver": [[41, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolver": {"func": {"setup": {"Resolver -> None": [[45, "    def setup(self):"]]}, "_connect": {"Resolver -> None": [[50, "    def _connect(self):"]]}, "__init__": {"? -> ?": [[41, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLocal.hand": {"var": {"client": {"(?, ?)": [[330, "        client = (packet.src_addr, packet.src_port)"]]}}, "param": {"self": {"RedirectLocal": [[329, "    def handle(self, packet):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolver.original_addr": {"var": {"ip": {"?": [[61, "        ip, port = csock.getpeername()[:2]"], [62, "        ip = re.sub(r\"^::ffff:(?=\\d+.\\d+.\\d+.\\d+$)\", \"\", ip)"], [63, "        ip = ip.split(\"%\", 1)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.redirect_respons": {"var": {"client": {"(?, ?)": [[532, "        client = (packet.dst_addr, packet.dst_port)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Resolver._connect": {"param": {"self": {"Resolver": [[50, "    def _connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLocal.handle": {"var": {"pid": {"?": [[337, "        pid = self.tcp_connections.get(client, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.RedirectLocal.__in": {"var": {"redirect_request": {"(TransparentProxy, ?) -> None / (RedirectLocal, ?) -> None": [[321, "        redirect_request: typing.Callable[[pydivert.Packet], None],"]]}}, "param": {"redirect_request": {"(TransparentProxy, ?) -> None / (RedirectLocal, ?) -> No": [[321, "        redirect_request: typing.Callable[[pydivert.Packet], None],"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TcpConnectionTabl": {"func": {"_refresh_ipv6": {"TcpConnectionTable -> None": [[220, "    def _refresh_ipv6(self):"]]}, "__iter__": {"TcpConnectionTable -> ?": [[188, "    def __iter__(self):"]]}, "_refresh_ipv4": {"TcpConnectionTable -> None": [[199, "    def _refresh_ipv4(self):"]]}, "refresh": {"TcpConnectionTable -> None": [[194, "    def refresh(self):"]]}, "__getitem__": {"(TcpConnectionTable, ?) -> ?": [[185, "    def __getitem__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.APIRequestHandler.handl": {"var": {"server": {"None": [[92, "                        server = None"]], "?": [[90, "                        server = proxifier.client_server_map[client]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.ClientServerMap": {"func": {"__setitem__": {"(ClientServerMap, ?, ?) -> None": [[362, "    def __setitem__(self, key: TConnection, value: TConnection) -> None:"]]}, "__getitem__": {"(ClientServerMap, ?) -> ?": [[358, "    def __getitem__(self, item: TConnection) -> TConnection:"]]}, "__init__": {"? -> ?": [[354, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.start": {"param": {"self": {"TransparentProxy": [[483, "    def start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.Redirect.recv": {"param": {"self": {"Redirect": [[302, "    def recv(self) -> typing.Optional[pydivert.Packet]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.ault": {"var": {"proxy": {"TransparentProxy": [[569, "    proxy = TransparentProxy(**options)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.redirect_reques": {"var": {"client": {"(?, ?)": [[504, "        client = (packet.src_addr, packet.src_port)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.setu": {"var": {"proxifier": {"TransparentProxy": [[480, "            proxifier = TransparentProxy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.windows.TransparentProxy.__ini": {"var": {"proxy_port": {"int": [[425, "        proxy_port: int = 8080,"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-trailers.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-trail": {"func": {"request": {"? -> None": [[14, "def request(flow: http.HTTPFlow):"]]}, "response": {"? -> None": [[19, "def response(flow: http.HTTPFlow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/http1/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1": {"var": {"__all__": {"[str]": [[15, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/websockets/frame.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.from_fil": {"var": {"first_byte": {"?": [[154, "        first_byte, second_byte = fp.safe_read(2)"]]}, "opcode": {"int": [[159, "        opcode = first_byte & 0xF"]]}, "masking_key": {"None": [[176, "            masking_key = None"]], "str": [[174, "            masking_key = fp.safe_read(4)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.__repr__": {"var": {"vals": {"[str]": [[105, "        vals = ["]]}, "i": {"str": [[110, "        for i in [\"fin\", \"rsv1\", \"rsv2\", \"rsv3\", \"mask\"]:"]]}, "flags": {"[str]": [[109, "        flags = []"]]}}, "param": {"self": {"FrameHeader": [[104, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.from_fi": {"var": {"length_code": {"int": [[161, "        length_code = second_byte & 0x7F"]]}, "payload_length": {"int": [[166, "            payload_length = length_code"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.from_file": {"var": {"payload": {"?": [[265, "            payload = Masker(header.masking_key)(payload)"]], "str": [[262, "        payload = fp.safe_read(header.payload_length)"]]}}, "param": {"fp": {"Reader": [[254, "    def from_file(cls, fp):"]]}, "cls": {"<Frame>": [[254, "    def from_file(cls, fp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.__init": {"var": {"masking_key": {"object": [[56, "        masking_key=DEFAULT,"]]}}, "param": {"masking_key": {"bool": [[59, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.__bytes__": {"var": {"b": {"?": [[246, "        b = bytes(self.header)"]]}}, "param": {"self": {"Frame": [[242, "    def __bytes__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader._make_length_cod": {"param": {"self": {"<FrameHeader>": [[91, "    def _make_length_code(self, length):"]]}, "length": {"int": [[91, "    def _make_length_code(self, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.from_byte": {"param": {"cls": {"<Frame>": [[229, "    def from_bytes(cls, bytestring):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHead": {"var": {"first_byte": {"int": [[122, "        first_byte = bits.setbit(0, 7, self.fin)"], [123, "        first_byte = bits.setbit(first_byte, 6, self.rsv1)"], [124, "        first_byte = bits.setbit(first_byte, 5, self.rsv2)"], [125, "        first_byte = bits.setbit(first_byte, 4, self.rsv3)"], [126, "        first_byte = first_byte | self.opcode"]]}}, "func": {"from_file": {"(<FrameHeader>, ?) -> FrameHeader / (<FrameHeader>, Reader) -> FrameHeader": [[150, "    def from_file(cls, fp):"]]}, "__repr__": {"FrameHeader -> str": [[104, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.from_file": {"var": {"mask_bit": {"bool": [[160, "        mask_bit = bits.getbit(second_byte, 7)"]]}, "rsv3": {"bool": [[158, "        rsv3 = bits.getbit(first_byte, 4)"]]}, "fin": {"bool": [[155, "        fin = bits.getbit(first_byte, 7)"]]}, "rsv2": {"bool": [[157, "        rsv2 = bits.getbit(first_byte, 5)"]]}, "rsv1": {"bool": [[156, "        rsv1 = bits.getbit(first_byte, 6)"]]}}, "param": {"fp": {"Reader": [[150, "    def from_file(cls, fp):"]]}, "cls": {"<FrameHeader>": [[150, "    def from_file(cls, fp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.__bytes__": {"var": {"b": {"?": [[130, "        b = bytes([first_byte, second_byte])"]]}}, "param": {"self": {"FrameHeader": [[121, "    def __bytes__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.from_": {"param": {"bytestring": {"?": [[229, "    def from_bytes(cls, bytestring):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.__ini": {"var": {"length_code": {"object": [[58, "        length_code=DEFAULT"]]}, "payload_length": {"int": [[51, "        payload_length=0,"]]}}, "param": {"length_code": {"object": [[59, "    ):"]]}, "payload_length": {"BiDi": [[59, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.__eq__": {"param": {"self": {"Frame": [[271, "    def __eq__(self, other):"]]}, "other": {"Frame": [[271, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Fra": {"func": {"from_file": {"(<Frame>, ?) -> Frame / (<Frame>, Reader) -> Frame": [[254, "    def from_file(cls, fp):"]]}, "from_bytes": {"(<Frame>, ?) -> Frame": [[229, "    def from_bytes(cls, bytestring):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.__init__": {"var": {"rsv3": {"bool": [[55, "        rsv3=False,"]]}, "self": {"FrameHeader": [[49, "        self,"]]}, "mask": {"object": [[57, "        mask=DEFAULT,"]]}, "opcode": {"?": [[50, "        opcode=OPCODE.TEXT,"]]}, "fin": {"bool": [[52, "        fin=False,"]]}, "rsv2": {"bool": [[54, "        rsv2=False,"]]}, "rsv1": {"bool": [[53, "        rsv1=False,"]]}}, "param": {"rsv3": {"bool": [[59, "    ):"]]}, "self": {"FrameHeader": [[59, "    ):"]]}, "mask": {"object": [[59, "    ):"]]}, "opcode": {"?": [[59, "    ):"]]}, "fin": {"int": [[59, "    ):"]]}, "rsv2": {"bool": [[59, "    ):"]]}, "rsv1": {"bool": [[59, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader.__eq__": {"param": {"self": {"FrameHeader": [[190, "    def __eq__(self, other):"]]}, "other": {"FrameHeader": [[190, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame": {"var": {"DEFAULT": {"object": [[16, "DEFAULT = object()"]]}, "OPCODE": {"BiDi": [[19, "OPCODE = bidi.BiDi("]]}, "MAX_64_BIT_INT": {"int": [[14, "MAX_64_BIT_INT = (1 << 64)"]]}, "MAX_16_BIT_INT": {"int": [[13, "MAX_16_BIT_INT = (1 << 16)"]]}, "CLOSE_REASON": {"BiDi": [[29, "CLOSE_REASON = bidi.BiDi("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.__init__": {"param": {"self": {"Frame": [[223, "    def __init__(self, payload=b\"\", **kwargs):"]]}, "payload": {"str": [[223, "    def __init__(self, payload=b\"\", **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.__repr__": {"var": {"ret": {"str": [[237, "        ret = repr(self.header)"], [239, "            ret = ret + \"\\nPayload:\\n\" + strutils.bytes_to_escaped_str(self.payload)"]]}}, "param": {"self": {"Frame": [[236, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.FrameHeader": {"var": {"second_byte": {"None": [[128, "        second_byte = bits.setbit(self.length_code, 7, self.mask)"]]}}, "func": {"__bytes__": {"FrameHeader -> str": [[121, "    def __bytes__(self):"]]}, "_make_length_code": {"(<FrameHeader>, ?) -> int / (<FrameHeader>, int) -> int": [[91, "    def _make_length_code(self, length):"]]}, "__eq__": {"(FrameHeader, ?) -> bool / (FrameHeader, FrameHeader) -> bool": [[190, "    def __eq__(self, other):"]]}, "__init__": {"? -> ?": [[48, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Fram": {"func": {"__bytes__": {"Frame -> str": [[242, "    def __bytes__(self):"]]}, "__eq__": {"(Frame, ?) -> bool / (Frame, Frame) -> bool": [[271, "    def __eq__(self, other):"]]}, "__repr__": {"Frame -> str": [[236, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame.from_fil": {"var": {"header": {"FrameHeader": [[261, "        header = FrameHeader.from_file(fp)"]]}, "frame": {"Frame": [[267, "        frame = cls(payload)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.f": {"class": {"Frame": {"<Frame>": [[196, "class Frame:"]]}, "FrameHeader": {"<FrameHeader>": [[46, "class FrameHeader:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.websockets.frame.Frame": {"func": {"__init__": {"? -> ?": [[223, "    def __init__(self, payload=b\"\", **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/commands-flows.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-flows": {"class": {"MyAddon": {"<MyAddon>": [[9, "class MyAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-flows.MyAddon.addheader": {"var": {"f": {"?": [[12, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-flow": {"var": {"addons": {"[MyAddon]": [[17, "addons = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-flows.MyAddon": {"func": {"addheader": {"(MyAddon, ?) -> None": [[11, "    def addheader(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/javascript.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javascript.ViewJavaScript": {"var": {"name": {"str": [[48, "    name = \"JavaScript\""]]}}, "func": {"__call__": {"(ViewJavaScript, ?) -> (str, None)": [[55, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javas": {"class": {"ViewJavaScript": {"<ViewJavaScript>": [[47, "class ViewJavaScript(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javascript.ViewJavaScript.__call__": {"var": {"res": {"None": [[57, "        res = beautify(data)"]]}, "data": {"?": [[56, "        data = data.decode(\"utf-8\", \"replace\")"]]}}, "param": {"self": {"ViewJavaScript": [[55, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[55, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javascript.ViewJavaScri": {"var": {"content_types": {"[str]": [[49, "    content_types = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javascript.beautify": {"var": {"line": {"?": [[33, "    for line in data.splitlines(True):"]]}, "beautified": {"?": [[30, "    beautified = io.StringIO()"]]}, "data": {"None": [[20, "    data = strutils.escape_special_areas("], [43, "    data = strutils.unescape_special_areas(beautified.getvalue())"]], "?": [[26, "    data = re.sub(r\"\\s*{\\s*(?!};)\", \" {\\n\", data)"], [27, "    data = re.sub(r\"\\s*;\\s*\", \";\\n\", data)"], [28, "    data = re.sub(r\"(?<!{)\\s*}(;)?\\s*\", r\"\\n}\\1\\n\", data)"]]}, "indent_level": {"int": [[31, "    indent_level = 0"]]}}, "param": {"data": {"str": [[19, "def beautify(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javascrip": {"func": {"beautify": {"str -> None / ? -> None": [[19, "def beautify(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.javascript": {"var": {"DELIMITERS": {"str": [[7, "DELIMITERS = '{};\\n'"]]}, "SPECIAL_AREAS": {"(str, str, str, str, str, str, str)": [[8, "SPECIAL_AREAS = ("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/xss_scanner.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.inject_javascript_handl": {"var": {"parser": {"{injectJSHandlerHTMLParser | injectJSHandlerHTMLParser}": [[309, "        parser = injectJSHandlerHTMLParser()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.inside_quot": {"var": {"index": {"?": [[224, "    for index, char in enumerate(body):"]]}}, "param": {"index": {"int": [[224, "    for index, char in enumerate(body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser.handle_": {"param": {"data": {"?": [[265, "        def handle_data(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser.handle_endtag": {"param": {"self": {"PathHTMLParser": [[262, "        def handle_endtag(self, tag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser.handle_data": {"param": {"self": {"PathHTMLParser": [[265, "        def handle_data(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.find_unclaimed_URLs": {"var": {"url": {"?": [[108, "    for url in parser.script_URLs:"]]}, "domain": {"?": [[110, "        domain = url_parser.netloc"]]}}, "param": {"body": {"?": [[89, "def find_unclaimed_URLs(body, requestUrl):"]]}}, "func": {"getValue": {"(?, ?) -> None / (?, str) -> None": [[91, "    def getValue(attrs: List[Tuple[str, str]], attrName: str) -> Optional[str]:"]]}}, "class": {"ScriptURLExtractor": {"<ScriptURLExtractor>": [[97, "    class ScriptURLExtractor(HTMLParser):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.inject_javascript_handler.injectJSHandlerHTMLPars": {"var": {"injectJSHandler": {"?": [[302, "            injectJSHandler = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser.handle_starttag": {"param": {"self": {"PathHTMLParser": [[259, "        def handle_starttag(self, tag, attrs):"]]}, "attrs": {"?": [[259, "        def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_SQLi_data": {"var": {"regex": {"?": [[207, "        for regex in regexes:  # type: ignore"]]}, "dbms": {"?": [[206, "    for dbms, regexes in DBMS_ERRORS.items():"]]}, "DBMS_ERRORS": {"dict": [[193, "    DBMS_ERRORS = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_end_of_URL_inject": {"var": {"xss_info": {"None": [[127, "    xss_info = get_XSS_data(body, url, \"End of URL\")"]]}, "sqli_info": {"None": [[128, "    sqli_info = get_SQLi_data(body, original_body, url, \"End of URL\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.inject_javascript_handler.injectJSHandlerHTMLP": {"func": {"handle_starttag": {"(injectJSHandlerHTMLParser, ?, ?) -> None": [[304, "            def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.find_unclaimed_URLs.ScriptURLExtracto": {"func": {"handle_starttag": {"(ScriptURLExtractor, ?, ?) -> None": [[100, "        def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.inject_javascript_h": {"class": {"injectJSHandlerHTMLParser": {"{<injectJSHandlerHTMLParser> | <injectJSHandlerHTMLParser>}": [[301, "        class injectJSHandlerHTMLParser(HTMLParser):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLP": {"func": {"handle_starttag": {"(PathHTMLParser, ?, ?) -> None": [[259, "        def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.insid": {"var": {"in_quote": {"?": [[223, "    in_quote = False"], [236, "            in_quote = not in_quote"]]}}, "param": {"in_quote": {"?": [[224, "    for index, char in enumerate(body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLPars": {"var": {"currentPath": {"str": [[256, "        currentPath = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.respon": {"var": {"resp": {"?": [[400, "    resp = flow.response.get_text(strict=False)"]]}, "cookies_dict": {"dict": [[399, "    cookies_dict = get_cookies(flow)"]]}, "results": {"(None, None)": [[404, "    results = test_end_of_URL_injection(resp, flow.request.url, cookies_dict)"], [408, "    results = test_referer_injection(resp, flow.request.url, cookies_dict)"], [412, "    results = test_user_agent_injection(resp, flow.request.url, cookies_dict)"], [417, "        results = test_query_injection(resp, flow.request.url, cookies_dict)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner": {"var": {"Cookies": {"?": [[79, "Cookies = Dict[str, str]"]]}, "SQLiData": {"?": [[72, "SQLiData = NamedTuple('SQLiData', [('url', str),"]]}, "FULL_PAYLOAD": {"str": [[55, "FULL_PAYLOAD = FRONT_WALL + PAYLOAD + BACK_WALL"]]}, "BACK_WALL": {"str": [[53, "BACK_WALL = b\"3847asd\""]]}, "VulnData": {"?": [[78, "VulnData = Tuple[Optional[XSSData], Optional[SQLiData]]"]]}, "PAYLOAD": {"str": [[54, "PAYLOAD = b\"\"\"s'd\"ao<ac>so[sb]po(pc)se;sl/bsl\\\\eq=\"\"\""]]}, "FRONT_WALL": {"str": [[52, "FRONT_WALL = b\"1029zxc\""]]}, "XSSData": {"?": [[62, "XSSData = NamedTuple('XSSData', [('url', str),"]]}}, "func": {"log_XSS_data": {"None -> None / ? -> None": [[165, "def log_XSS_data(xss_info: Optional[XSSData]) -> None:"]]}, "test_end_of_URL_injection": {"(?, ?, dict) -> (None, None) / (?, ?, ?) -> (None, None)": [[117, "def test_end_of_URL_injection(original_body: str, request_URL: str, cookies: Cookies) -> VulnData:"]]}, "inside_quote": {"(?, ?, ?, ?) -> None / (str, ?, ?, ?) -> None": [[217, "def inside_quote(qc: str, substring_bytes: bytes, text_index: int, body_bytes: bytes) -> bool:"]]}, "paths_to_text": {"(?, ?) -> None": [[244, "def paths_to_text(html: str, string: str) -> List[str]:"]]}, "log_SQLi_data": {"None -> None / ? -> None": [[177, "def log_SQLi_data(sqli_info: Optional[SQLiData]) -> None:"]]}, "get_cookies": {"? -> dict": [[82, "def get_cookies(flow: http.HTTPFlow) -> Cookies:"]]}, "get_SQLi_data": {"(?, ?, ?, ?) -> None / (?, ?, ?, str) -> None": [[189, "def get_SQLi_data(new_body: str, original_body: str, request_URL: str, injection_point: str) -> Optional[SQLiData]:"]]}, "get_XSS_data": {"(?, ?, ?) -> None / (?, ?, str) -> None": [[274, "def get_XSS_data(body: Union[str, bytes], request_URL: str, injection_point: str) -> Optional[XSSData]:"]]}, "find_unclaimed_URLs": {"(?, ?) -> ?": [[89, "def find_unclaimed_URLs(body, requestUrl):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.find_unclaimed_URLs.getValu": {"var": {"name": {"?": [[92, "        for name, value in attrs:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.find_unclaimed_URLs.ScriptURLExtractor.handle_starttag": {"param": {"self": {"ScriptURLExtractor": [[100, "        def handle_starttag(self, tag, attrs):"]]}, "attrs": {"?": [[100, "        def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.inject_javascript_handler.injectJSHandlerHTMLParser.handle_star": {"param": {"tag": {"?": [[304, "            def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_query_injectio": {"var": {"query_string": {"?": [[154, "    query_string = parsed_URL.query"]]}, "new_query_string": {"str": [[157, "    new_query_string = \"&\".join(queries)"]]}, "new_URL": {"?": [[158, "    new_URL = parsed_URL._replace(query=new_query_string).geturl()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.in_scrip": {"param": {"text": {"?": [[276, "    def in_script(text, index, body) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_d": {"var": {"inject_slash": {"bool": [[330, "        inject_slash = b\"sl/bsl\" in match  # forward slashes"]]}, "inject_close_angle": {"bool": [[327, "        inject_close_angle = b\"ac>so\" in match  # close angle brackets"]]}, "matches": {"?": [[317, "    matches = regex.findall(body)"]]}, "inject_open_angle": {"bool": [[326, "        inject_open_angle = b\"ao<ac\" in match  # open angle brackets"]]}, "in_script_val": {"bool": [[320, "        in_script_val = in_script(match, index, body)"]]}, "in_tag": {"bool": [[322, "        in_tag = not in_script_val and not in_HTML_val"]]}, "inject_equals": {"bool": [[332, "        inject_equals = b\"eq=\" in match  # equals sign"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.find_unclaimed_URLs.ScriptURLExtractor.handle_star": {"param": {"tag": {"?": [[100, "        def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.inside_quote": {"var": {"substring": {"?": [[220, "    substring = substring_bytes.decode('utf-8')"]]}, "body": {"?": [[221, "    body = body_bytes.decode('utf-8')"]]}, "num_substrings_found": {"int": [[222, "    num_substrings_found = 0"]]}}, "param": {"body": {"?": [[224, "    for index, char in enumerate(body):"]]}, "char": {"?": [[224, "    for index, char in enumerate(body):"]]}, "num_substrings_found": {"?": [[224, "    for index, char in enumerate(body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_sca": {"func": {"test_referer_injection": {"(?, ?, dict) -> (None, None) / (?, ?, ?) -> (None, None)": [[132, "def test_referer_injection(original_body: str, request_URL: str, cookies: Cookies) -> VulnData:"]]}, "response": {"? -> None": [[397, "def response(flow: http.HTTPFlow) -> None:"]]}, "test_query_injection": {"(?, ?, dict) -> (None, None) / (?, ?, ?) -> (None, None)": [[150, "def test_query_injection(original_body: str, request_URL: str, cookies: Cookies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.in_HTML": {"var": {"text": {"?": [[291, "        text = text.split(b\"<\")[0]"]]}, "path": {"?": [[294, "            path = paths[index]"]]}, "paths": {"None": [[292, "        paths = paths_to_text(body.decode('utf-8'), text.decode(\"utf-8\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser": {"func": {"handle_data": {"(PathHTMLParser, ?) -> None": [[265, "        def handle_data(self, data):"]]}, "handle_endtag": {"(PathHTMLParser, ?) -> None": [[262, "        def handle_endtag(self, tag):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.x": {"func": {"test_user_agent_injection": {"(?, ?, ?) -> (None, None) / (?, ?, dict) -> (None, None)": [[141, "def test_user_agent_injection(original_body: str, request_URL: str, cookies: Cookies) -> VulnData:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_end_of_URL_injection": {"var": {"url": {"?": [[125, "    url = parsed_URL._replace(path=path).geturl()"]]}, "path": {"?": [[121, "    path = parsed_URL.path"]]}, "parsed_URL": {"?": [[120, "    parsed_URL = urlparse(request_URL)"]]}, "body": {"?": [[126, "    body = requests.get(url, cookies=cookies).text.lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_referer_inject": {"var": {"xss_info": {"None": [[136, "    xss_info = get_XSS_data(body, request_URL, \"Referer\")"]]}, "sqli_info": {"None": [[137, "    sqli_info = get_SQLi_data(body, original_body, request_URL, \"Referer\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_query_injection": {"var": {"body": {"?": [[159, "    body = requests.get(new_URL, cookies=cookies).text.lower()"]]}, "parsed_URL": {"?": [[153, "    parsed_URL = urlparse(request_URL)"]]}, "queries": {"[str]": [[156, "    queries = [query.split(\"=\")[0] + \"=\" + FULL_PAYLOAD.decode('utf-8') for query in query_string.split(\"&\")]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data": {"var": {"body": {"?": [[314, "        body = bytes(body, 'utf-8')"]]}, "regex": {"?": [[316, "    regex = re.compile(b\"\"\"%s.{24,72}?%s\"\"\" % (FRONT_WALL, BACK_WALL))"]]}, "inject_double_quotes": {"bool": [[329, "        inject_double_quotes = b'd\"ao' in match  # double quotes"]]}, "index": {"?": [[318, "    for index, match in enumerate(matches):"]]}, "in_double_quotes": {"None": [[324, "        in_double_quotes = inside_quote('\"', match, index, body)"]]}, "in_single_quotes": {"None": [[323, "        in_single_quotes = inside_quote(\"'\", match, index, body)"]]}, "inject_single_quotes": {"bool": [[328, "        inject_single_quotes = b\"s'd\" in match  # single quotes"]]}, "inject_semi": {"bool": [[331, "        inject_semi = b\"se;sl\" in match  # semicolons"]]}}, "func": {"in_script": {"(?, ?, ?) -> bool": [[276, "    def in_script(text, index, body) -> bool:"]]}, "in_HTML": {"(?, ?, ?) -> bool": [[286, "    def in_HTML(text: bytes, index: int, body: bytes) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.in_script": {"param": {"body": {"?": [[276, "    def in_script(text, index, body) -> bool:"]]}, "index": {"?": [[276, "    def in_script(text, index, body) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.find_unclaimed_URL": {"var": {"parser": {"ScriptURLExtractor": [[106, "    parser = ScriptURLExtractor()"]]}, "url_parser": {"?": [[109, "        url_parser = urlparse(url)"]]}}, "param": {"requestUrl": {"?": [[89, "def find_unclaimed_URLs(body, requestUrl):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.remove_last_occurence_of_sub_string": {"var": {"index": {"str": [[252, "        index = string.rfind(substr)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_dat": {"var": {"in_HTML_val": {"bool": [[321, "        in_HTML_val = in_HTML(match, index, body)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_user_agent_injection": {"var": {"body": {"?": [[144, "    body = requests.get(request_URL, headers={'User-Agent': FULL_PAYLOAD}, cookies=cookies).text.lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser.handle_star": {"param": {"tag": {"?": [[259, "        def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_referer_injection": {"var": {"body": {"?": [[135, "    body = requests.get(request_URL, headers={'referer': FULL_PAYLOAD}, cookies=cookies).text.lower()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text": {"var": {"parser": {"PathHTMLParser": [[269, "    parser = PathHTMLParser()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS": {"func": {"inject_javascript_handler": {"? -> None": [[299, "    def inject_javascript_handler(html: str) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.inside_quo": {"var": {"next_part_is_substring": {"bool": [[226, "        next_part_is_substring = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.inside_qu": {"var": {"is_not_escaped": {"bool": [[231, "        is_not_escaped = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_user_agent_inject": {"var": {"xss_info": {"None": [[145, "    xss_info = get_XSS_data(body, request_URL, \"User Agent\")"]]}, "sqli_info": {"None": [[146, "    sqli_info = get_SQLi_data(body, original_body, request_URL, \"User Agent\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.test_query_inject": {"var": {"xss_info": {"None": [[160, "    xss_info = get_XSS_data(body, new_URL, \"Query\")"]]}, "sqli_info": {"None": [[161, "    sqli_info = get_SQLi_data(body, original_body, new_URL, \"Query\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.in_scri": {"var": {"paths": {"None": [[279, "        paths = paths_to_text(body.decode('utf-8'), text.decode(\"utf-8\"))"]]}, "path": {"?": [[281, "            path = paths[index]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_tex": {"class": {"PathHTMLParser": {"<PathHTMLParser>": [[255, "    class PathHTMLParser(HTMLParser):"]]}}, "func": {"remove_last_occurence_of_sub_string": {"(str, str) -> str / (?, ?) -> None": [[248, "    def remove_last_occurence_of_sub_string(string: str, substr: str) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.get_XSS_data.inject_javascript_handler.injectJSHandlerHTMLParser.handle_starttag": {"var": {"name": {"?": [[305, "                for name, value in attrs:"]]}}, "param": {"self": {"injectJSHandlerHTMLParser": [[304, "            def handle_starttag(self, tag, attrs):"]]}, "attrs": {"?": [[304, "            def handle_starttag(self, tag, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.xss_scanner.paths_to_text.PathHTMLParser.handle_end": {"param": {"tag": {"?": [[262, "        def handle_endtag(self, tag):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_actions.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInjec": {"func": {"test_serve": {"TestInject -> None": [[62, "    def test_serve(self):"]]}, "test_at": {"TestInject -> None": [[52, "    def test_at(self):"]]}, "test_parse_pathod": {"TestInject -> None": [[43, "    def test_parse_pathod(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPa": {"func": {"test_request": {"TestPauses -> None": [[97, "    def test_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action.test_freez": {"param": {"self": {"Test_Action": [[132, "    def test_freeze(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInject.test_spec": {"var": {"v2": {"?": [[75, "        v2 = v.freeze({})"]]}, "e": {"None": [[68, "        e = actions.InjectAt.expr()"]]}, "v": {"?": [[69, "        v = e.parseString(\"i0,'foo'\")[0]"]]}}, "param": {"self": {"TestInject": [[67, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestDisconn": {"func": {"test_spec": {"TestDisconnects -> None": [[36, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action.test_resolv": {"var": {"e": {"DisconnectAt": [[124, "        e = actions.DisconnectAt(\"r\")"]]}, "ret": {"None": [[125, "        ret = e.resolve({}, r)"]]}}, "param": {"self": {"Test_Action": [[122, "    def test_resolve(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPauses.test_parse_pathod": {"var": {"e": {"None": [[83, "        e = actions.PauseAt.expr()"]]}, "v": {"?": [[84, "        v = e.parseString(\"p10,10\")[0]"], [88, "        v = e.parseString(\"p10,f\")[0]"], [91, "        v = e.parseString(\"pr,f\")[0]"], [94, "        v = e.parseString(\"pa,f\")[0]"]]}}, "param": {"self": {"TestPauses": [[82, "    def test_parse_pathod(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInject.test_parse_pathod": {"var": {"a": {"?": [[44, "        a = next(parse_pathod(\"400:ir,@100\")).actions[0]"], [49, "        a = next(parse_pathod(\"400:ia,@100\")).actions[0]"]]}}, "param": {"self": {"TestInject": [[43, "    def test_parse_pathod(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action.test_repr": {"var": {"e": {"DisconnectAt": [[129, "        e = actions.DisconnectAt(\"r\")"]]}}, "param": {"self": {"Test_Action": [[128, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInject.test_spec2": {"var": {"v3": {"?": [[76, "        v3 = v2.freeze({})"]]}, "e": {"None": [[73, "        e = actions.InjectAt.expr()"]]}, "v": {"?": [[74, "        v = e.parseString(\"i0,@100\")[0]"]]}}, "param": {"self": {"TestInject": [[72, "    def test_spec2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_action": {"class": {"TestPauses": {"<TestPauses>": [[80, "class TestPauses:"]]}}, "func": {"parse_request": {"? -> ? / str -> ?": [[6, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPauses.test_freeze": {"var": {"l": {"PauseAt": [[107, "        l = actions.PauseAt(\"r\", 5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestDisconnec": {"func": {"test_at": {"TestDisconnects -> None": [[23, "    def test_at(self):"]]}, "test_parse_pathod": {"TestDisconnects -> None": [[17, "    def test_parse_pathod(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInject.test_serve": {"var": {"s": {"?": [[63, "        s = io.BytesIO()"]]}, "r": {"?": [[64, "        r = next(parse_pathod(\"400:i0,'foo'\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestDisconnects.test_parse_pathod": {"var": {"a": {"?": [[18, "        a = next(parse_pathod(\"400:d0\")).actions[0]"], [20, "        a = next(parse_pathod(\"400:dr\")).actions[0]"]]}}, "param": {"self": {"TestDisconnects": [[17, "    def test_parse_pathod(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action": {"func": {"test_cmp": {"Test_Action -> None": [[113, "    def test_cmp(self):"]]}, "test_repr": {"Test_Action -> None": [[128, "    def test_repr(self):"]]}, "test_freeze": {"Test_Action -> None": [[132, "    def test_freeze(self):"]]}, "test_resolve": {"Test_Action -> None": [[122, "    def test_resolve(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_a": {"class": {"TestDisconnects": {"<TestDisconnects>": [[15, "class TestDisconnects:"]]}, "Test_Action": {"<Test_Action>": [[111, "class Test_Action:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPauses.test_freez": {"param": {"self": {"TestPauses": [[106, "    def test_freeze(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInj": {"func": {"test_spec2": {"TestInject -> None": [[72, "    def test_spec2(self):"]]}, "test_spec": {"TestInject -> None": [[67, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPauses.test_request": {"var": {"r": {"?": [[98, "        r = next(parse_pathod('400:p10,10'))"]]}}, "param": {"self": {"TestPauses": [[97, "    def test_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actio": {"class": {"TestInject": {"<TestInject>": [[41, "class TestInject:"]]}}, "func": {"test_unique_name": {"() -> None": [[10, "def test_unique_name():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInject.test_serv": {"param": {"self": {"TestInject": [[62, "    def test_serve(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action.test_resolve": {"var": {"r": {"?": [[123, "        r = parse_request('GET:\"/foo\"')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPau": {"func": {"test_freeze": {"TestPauses -> None": [[106, "    def test_freeze(self):"]]}, "test_parse_pathod": {"TestPauses -> None": [[82, "    def test_parse_pathod(self):"]]}, "test_spec": {"TestPauses -> None": [[101, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action.test_cmp": {"var": {"a": {"DisconnectAt": [[114, "        a = actions.DisconnectAt(0)"]]}, "c": {"DisconnectAt": [[116, "        c = actions.DisconnectAt(0)"]]}, "b": {"DisconnectAt": [[115, "        b = actions.DisconnectAt(1)"]]}, "l": {"?": [[119, "        l = sorted([b, a])"]]}}, "param": {"self": {"Test_Action": [[113, "    def test_cmp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestInject.test_at": {"var": {"e": {"None": [[53, "        e = actions.InjectAt.expr()"]]}, "v": {"?": [[54, "        v = e.parseString(\"i0,'foo'\")[0]"], [59, "        v = e.parseString(\"ir,'foo'\")[0]"]]}}, "param": {"self": {"TestInject": [[52, "    def test_at(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestPauses.test_spec": {"param": {"self": {"TestPauses": [[101, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.parse_request": {"param": {"s": {"str": [[6, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestDisconnects.test_at": {"var": {"e": {"None": [[24, "        e = actions.DisconnectAt.expr()"], [32, "        e = actions.DisconnectAt.expr()"]]}, "v": {"?": [[25, "        v = e.parseString(\"d0\")[0]"], [29, "        v = e.parseString(\"d100\")[0]"], [33, "        v = e.parseString(\"dr\")[0]"]]}}, "param": {"self": {"TestDisconnects": [[23, "    def test_at(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.Test_Action.test_freeze": {"var": {"l": {"DisconnectAt": [[133, "        l = actions.DisconnectAt(5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_actions.TestDisconnects.test_spec": {"param": {"self": {"TestDisconnects": [[36, "    def test_spec(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/coretypes/bidi.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bidi.BiDi.get_nam": {"param": {"default": {"str": [[28, "    def get_name(self, n, default=None):"]]}, "self": {"BiDi": [[28, "    def get_name(self, n, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bidi.BiDi.__init__": {"var": {"k": {"?": [[18, "        for k, v in kwargs.items():"]]}}, "param": {"self": {"BiDi": [[15, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bidi.BiD": {"func": {"__init__": {"? -> ?": [[15, "    def __init__(self, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bidi.BiDi.get_name": {"param": {"n": {"int": [[28, "    def get_name(self, n, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bid": {"class": {"BiDi": {"<BiDi>": [[3, "class BiDi:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bidi.BiDi": {"func": {"get_name": {"(BiDi, ?, None) -> ? / (BiDi, int, None) -> ? / (BiDi, ?, str) -> ?": [[28, "    def get_name(self, n, default=None):"]]}, "__getattr__": {"(BiDi, ?) -> None": [[23, "    def __getattr__(self, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.bidi.BiDi.__getattr__": {"param": {"self": {"BiDi": [[23, "    def __getattr__(self, k):"]]}, "k": {"?": [[23, "    def __getattr__(self, k):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/utils/bits.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.bits": {"func": {"getbit": {"(?, ?) -> bool / (?, int) -> bool": [[11, "def getbit(byte, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.bits.getbit": {"var": {"mask": {"int": [[12, "    mask = 1 << offset"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.util": {"func": {"setbit": {"({int | object}, int, {bool | int | object}) -> None / (?, ?, ?) -> int / (int, int, bool) -> int": [[1, "def setbit(byte, offset, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.bits.setbit": {"param": {"value": {"{bool | int | object}": [[1, "def setbit(byte, offset, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.bits.setbi": {"param": {"byte": {"{int | object}": [[1, "def setbit(byte, offset, value):"]]}, "offset": {"int": [[1, "def setbit(byte, offset, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.utils.bits.getbi": {"param": {"byte": {"?": [[11, "def getbit(byte, offset):"]]}, "offset": {"int": [[11, "def getbit(byte, offset):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/load_error.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.load_error.load": {"param": {"_": {"?": [[1, "def load(_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.load_error": {"func": {"load": {"? -> None": [[1, "def load(_):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_core.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_option": {"var": {"sa": {"Core": [[129, "    sa = core.Core()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_encoding": {"var": {"sa": {"Core": [[103, "    sa = core.Core()"]]}, "f": {"?": [[105, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_client_cert": {"var": {"sa": {"Core": [[201, "    sa = core.Core()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_validation_modes": {"param": {"m": {"?": [[192, "def test_validation_modes(m):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_revert": {"var": {"sa": {"Core": [[56, "    sa = core.Core()"]]}, "f": {"?": [[58, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_validation_mode": {"var": {"sa": {"Core": [[193, "    sa = core.Core()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_set": {"var": {"sa": {"Core": [[11, "    sa = core.Core()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_kill": {"var": {"sa": {"Core": [[46, "    sa = core.Core()"]]}, "f": {"?": [[48, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_options": {"var": {"p": {"str": [[128, "    p = str(tmpdir.join(\"path\"))"]]}}, "param": {"tmpdir": {"?": [[127, "def test_options(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_client_certs": {"param": {"tdata": {"?": [[200, "def test_client_certs(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_validation_simple": {"var": {"sa": {"Core": [[158, "    sa = core.Core()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_validation_no_transparent": {"var": {"sa": {"Core": [[185, "    sa = core.Core()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_c": {"func": {"test_validation_no_transparent": {"() -> None": [[184, "def test_validation_no_transparent():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_flow_set": {"var": {"sa": {"Core": [[67, "    sa = core.Core()"]]}, "f": {"?": [[69, "        f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_mark": {"var": {"sa": {"Core": [[32, "    sa = core.Core()"]]}, "f": {"?": [[34, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cor": {"func": {"test_validation_modes": {"? -> None": [[192, "def test_validation_modes(m):"]]}, "test_validation_simple": {"() -> None": [[157, "def test_validation_simple():"]]}, "test_encoding": {"() -> None": [[102, "def test_encoding():"]]}, "test_flow_set": {"() -> None": [[66, "def test_flow_set():"]]}, "test_options": {"? -> None": [[127, "def test_options(tmpdir):"]]}, "test_kill": {"() -> None": [[45, "def test_kill():"]]}, "test_set": {"() -> None": [[10, "def test_set():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_co": {"func": {"test_resume": {"() -> None": [[21, "def test_resume():"]]}, "test_mark": {"() -> None": [[31, "def test_mark():"]]}, "test_revert": {"() -> None": [[55, "def test_revert():"]]}, "test_client_certs": {"? -> None": [[200, "def test_client_certs(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_core.test_resume": {"var": {"sa": {"Core": [[22, "    sa = core.Core()"]]}, "f": {"?": [[24, "        f = tflow.tflow()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/vlq_base128_le.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group.__ini": {"param": {"_parent": {"VlqBase128Le": [[49, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"VlqBase128Le": [[49, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group.__init__": {"param": {"self": {"Group": [[49, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128L": {"func": {"_read": {"VlqBase128Le -> None": [[37, "    def _read(self):"]]}, "value": {"VlqBase128Le -> int": [[86, "    def value(self):"]]}, "len": {"VlqBase128Le -> int": [[78, "    def len(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group._read": {"param": {"self": {"Group": [[55, "        def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group": {"func": {"has_next": {"Group -> bool": [[59, "        def has_next(self):"]]}, "_read": {"Group -> None": [[55, "        def _read(self):"]]}, "value": {"Group -> int": [[68, "        def value(self):"]]}, "__init__": {"? -> ?": [[49, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.__init": {"param": {"_io": {"?": [[31, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group.__init": {"param": {"_io": {"?": [[49, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le._read": {"var": {"_": {"Group": [[40, "            _ = self._root.Group(self._io, self, self._root)"]]}}, "param": {"self": {"VlqBase128Le": [[37, "    def _read(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.__init__": {"param": {"self": {"VlqBase128Le": [[31, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.__ini": {"param": {"_parent": {"None": [[31, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[31, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group.has_next": {"param": {"self": {"Group": [[59, "        def has_next(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le": {"class": {"Group": {"<Group>": [[45, "    class Group(KaitaiStruct):"]]}}, "func": {"__init__": {"? -> ?": [[31, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.Group.valu": {"param": {"self": {"Group": [[68, "        def value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.len": {"param": {"self": {"VlqBase128Le": [[78, "    def len(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_": {"class": {"VlqBase128Le": {"<VlqBase128Le>": [[10, "class VlqBase128Le(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.vlq_base128_le.VlqBase128Le.valu": {"param": {"self": {"VlqBase128Le": [[86, "    def value(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/clientplayback.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayba": {"func": {"check": {"(ClientPlayback, ?) -> str": [[130, "    def check(self, f: flow.Flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.RequestReplayThread.run": {"var": {"f": {"?": [[40, "            f = self.queue.get()"]]}}, "param": {"self": {"RequestReplayThread": [[38, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.RequestReplayThread.replay": {"var": {"server_address": {"(?, ?)": [[86, "                    server_address = (r.host, r.port)"]], "?": [[62, "                    server_address = server_spec.parse_with_mode(self.options.mode)[1].address"]]}, "first_line_format_backup": {"?": [[49, "        first_line_format_backup = r.first_line_format"]]}, "server": {"ServerConnection": [[63, "                    server = connections.ServerConnection(server_address)"], [87, "                    server = connections.ServerConnection(server_address)"]], "None": [[50, "        server = None"]]}, "bsl": {"int": [[48, "        bsl = human.parse_size(self.options.body_size_limit)"]]}, "r": {"?": [[47, "        r = f.request"]]}, "connect_request": {"HTTPRequest": [[66, "                        connect_request = http.make_connect_request((r.data.host, r.port))"]]}, "resp": {"Response": [[69, "                        resp = http1.read_response("]]}}, "param": {"self": {"RequestReplayThread": [[45, "    def replay(self, f):  # pragma: no cover"]]}, "f": {"?": [[45, "    def replay(self, f):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.RequestReplayThread.repla": {"var": {"response_reply": {"?": [[107, "            response_reply = self.channel.ask(\"response\", f)"]]}, "request_reply": {"?": [[55, "            request_reply = self.channel.ask(\"request\", f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback": {"param": {"loader": {"?": [[143, "    def load(self, loader):"]]}}, "func": {"load": {"(ClientPlayback, ?) -> None": [[143, "    def load(self, loader):"]]}, "count": {"ClientPlayback -> int": [[166, "    def count(self) -> int:"]]}, "configure": {"(ClientPlayback, ?) -> ?": [[157, "    def configure(self, updated):"]]}, "running": {"ClientPlayback -> None": [[149, "    def running(self):"]]}, "start_replay": {"(ClientPlayback, ?) -> None / (ClientPlayback, [?]) -> None": [[187, "    def start_replay(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}, "load_file": {"(ClientPlayback, ?) -> ? / (ClientPlayback, str) -> ?": [[216, "    def load_file(self, path: mitmproxy.types.Path) -> None:"]]}, "stop_replay": {"ClientPlayback -> None": [[174, "    def stop_replay(self) -> None:"]]}, "__init__": {"? -> ?": [[126, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.configure": {"var": {"flows": {"[?]": [[160, "                flows = io.read_flows_from_paths(ctx.options.client_replay)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.load": {"param": {"self": {"ClientPlayback": [[143, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.RequestReplayThread": {"func": {"replay": {"(RequestReplayThread, ?) -> ?": [[45, "    def replay(self, f):  # pragma: no cover"]]}, "run": {"RequestReplayThread -> None": [[38, "    def run(self):"]]}, "__init__": {"? -> ?": [[26, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.RequestReplayThread.__init__": {"var": {"queue": {"?": [[30, "            queue: queue.Queue,"]]}, "self": {"RequestReplayThread": [[27, "            self,"]]}, "channel": {"?": [[29, "            channel: controller.Channel,"]]}, "opts": {"?": [[28, "            opts: options.Options,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.count": {"param": {"self": {"ClientPlayback": [[166, "    def count(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.configur": {"param": {"self": {"ClientPlayback": [[157, "    def configure(self, updated):"]]}, "updated": {"?": [[157, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.cou": {"var": {"inflight": {"int": [[170, "        inflight = 1 if self.thread and self.thread.inflight.is_set() else 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.RequestReplayThr": {"var": {"daemon": {"?": [[24, "    daemon = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.__init__": {"param": {"self": {"ClientPlayback": [[126, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.start_replay": {"var": {"lst": {"[?]": [[191, "        lst = []"]]}, "hf": {"?": [[193, "            hf = typing.cast(http.HTTPFlow, f)"]]}, "host": {"?": [[209, "                host = hf.request.headers.pop(\":authority\", None)"]]}, "err": {"str": [[195, "            err = self.check(hf)"]]}, "f": {"?": [[192, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback": {"class": {"RequestReplayThread": {"<RequestReplayThread>": [[23, "class RequestReplayThread(basethread.BaseThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.load_file": {"var": {"flows": {"[?]": [[221, "            flows = io.read_flows_from_paths([path])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientp": {"class": {"ClientPlayback": {"<ClientPlayback>": [[125, "class ClientPlayback:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.stop_replay": {"var": {"lst": {"list": [[179, "            lst = list(self.q.queue)"]]}, "f": {"<list>": [[181, "            for f in lst:"]]}}, "param": {"self": {"ClientPlayback": [[174, "    def stop_replay(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.clientplayback.ClientPlayback.running": {"param": {"self": {"ClientPlayback": [[149, "    def running(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_urlencoded.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_urlencoded.test_view_urlencode": {"var": {"d": {"?": [[9, "    d = url.encode([(\"one\", \"two\"), (\"three\", \"four\")]).encode()"], [12, "    d = url.encode([(\"adsfa\", \"\")]).encode()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy": {"func": {"test_view_urlencoded": {"() -> None": [[6, "def test_view_urlencoded():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_urlencoded.test_view_urlencoded": {"var": {"v": {"?": [[7, "    v = full_eval(urlencoded.ViewURLEncoded())"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/hook-pydivert.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-pydiver": {"var": {"datas": {"?": [[3, "datas = collect_data_files('pydivert.windivert_dll')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/setup.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.setu": {"var": {"long_description": {"str": [[13, "    long_description = f.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.setup": {"var": {"VERSION": {"?": [[18, "    VERSION = match.group(1)"]]}, "match": {"?": [[16, "    match = re.search(r'VERSION = \"(.+?)\"', f.read())"]]}, "here": {"str": [[10, "here = os.path.abspath(os.path.dirname(__file__))"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/test_utils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_util": {"func": {"test_data_path": {"() -> None": [[15, "def test_data_path():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_utils.test_membool": {"var": {"m": {"MemBool": [[7, "    m = utils.MemBool()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.test_uti": {"func": {"test_membool": {"() -> None": [[6, "def test_membool():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/servercert/generate.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.servercert.generat": {"var": {"here": {"?": [[5, "here = pathlib.Path(\".\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.servercert.generate": {"var": {"src": {"?": [[4, "src = pathlib.Path(\"../../net/data/verificationcerts\")"]]}, "x": {"str": [[9, "for x in [\"self-signed\", \"trusted-leaf\", \"trusted-root\"]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/proxyauth_selenium.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon": {"func": {"_set_request_cookies": {"(SeleniumAddon, ?) -> None": [[122, "    def _set_request_cookies(self, flow: mitmproxy.http.HTTPFlow):"]]}, "request": {"(SeleniumAddon, ?) -> None": [[74, "    def request(self, flow: mitmproxy.http.HTTPFlow):"]]}, "_set_set_cookie_headers": {"(SeleniumAddon, ?) -> None": [[110, "    def _set_set_cookie_headers(self, flow: mitmproxy.http.HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon.__init__": {"var": {"profile": {"?": [[62, "        profile = webdriver.FirefoxProfile()"]]}, "options": {"?": [[59, "        options = webdriver.FirefoxOptions()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon.respons": {"var": {"new_flow": {"?": [[88, "                new_flow = flow.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon.__ini": {"var": {"auth_oracle": {"?": [[52, "                 auth_oracle: AuthorizationOracle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.AuthorizationOracl": {"func": {"is_unauthorized_request": {"(AuthorizationOracle, ?) -> None": [[34, "    def is_unauthorized_request(self, flow: mitmproxy.http.HTTPFlow) -> bool:"]]}, "is_unauthorized_response": {"(AuthorizationOracle, ?) -> None": [[38, "    def is_unauthorized_response(self, flow: mitmproxy.http.HTTPFlow) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddo": {"func": {"__init__": {"? -> ?": [[51, "    def __init__(self, fltr: str, domain: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_s": {"class": {"SeleniumAddon": {"<SeleniumAddon>": [[42, "class SeleniumAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.randomString": {"var": {"letters": {"?": [[27, "    letters = string.ascii_lowercase"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon._set_set_cookie_heade": {"var": {"parts": {"[None]": [[113, "                parts = [f\"{cookie['name']}={cookie['value']}\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon.response": {"var": {"count": {"int": [[92, "                    count = 0"], [95, "                        count = count + 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAdd": {"func": {"_login": {"(SeleniumAddon, ?) -> None": [[68, "    def _login(self, flow):"]]}, "login": {"(SeleniumAddon, ?) -> None": [[129, "    def login(self, flow: mitmproxy.http.HTTPFlow) -> List[Dict[str, str]]:"]]}, "response": {"(SeleniumAddon, ?) -> None": [[84, "    def response(self, flow: mitmproxy.http.HTTPFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon.don": {"param": {"self": {"SeleniumAddon": [[107, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumA": {"func": {"done": {"SeleniumAddon -> None": [[107, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon._set_request_": {"var": {"cookies": {"str": [[124, "            cookies = \"; \".join("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon._set_set_cookie_headers": {"var": {"k": {"?": [[114, "                for k, v in cookie_key_name.items():"]]}, "cookie": {"?": [[112, "            for cookie in self.cookies:"]]}, "encoded_c": {"str": [[119, "                encoded_c = \"; \".join(parts)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.SeleniumAddon._login": {"param": {"self": {"SeleniumAddon": [[68, "    def _login(self, flow):"]]}, "flow": {"?": [[68, "    def _login(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_seleniu": {"var": {"cookie_key_name": {"dict": [[16, "cookie_key_name = {"]]}}, "func": {"randomString": {"int -> str": [[25, "def randomString(string_length=10):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium.randomS": {"param": {"string_length": {"int": [[25, "def randomString(string_length=10):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.proxyauth_selenium": {"var": {"logger": {"?": [[14, "logger = logging.getLogger(__name__)"]]}}, "class": {"AuthorizationOracle": {"<AuthorizationOracle>": [[31, "class AuthorizationOracle(abc.ABC):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/grideditor/col_viewany.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Display.__init__": {"var": {"data": {"str": [[26, "            data = strutils.bytes_to_escaped_str(data)"], [28, "            data = repr(data)"]]}, "w": {"?": [[29, "        w = urwid.Text(data, wrap=\"any\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Display.get_data": {"param": {"self": {"Display": [[32, "    def get_data(self) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewan": {"class": {"Display": {"<Display>": [[22, "class Display(base.Cell):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Column.blank": {"param": {"self": {"Column": [[18, "    def blank(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Column.Display": {"param": {"self": {"Column": [[13, "    def Display(self, data):"]]}, "data": {"?": [[13, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany": {"class": {"Column": {"<Column>": [[12, "class Column(base.Column):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Column": {"var": {"Edit": {"(Column, ?) -> Display": [[16, "    Edit = Display"]]}}, "func": {"Display": {"(Column, ?) -> Display": [[13, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Display": {"func": {"get_data": {"Display -> ?": [[32, "    def get_data(self) -> typing.Any:"]]}, "__init__": {"? -> ?": [[23, "    def __init__(self, data: typing.Any) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_viewany.Colum": {"func": {"blank": {"Column -> str": [[18, "    def blank(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_raw.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_raw.test_view_raw": {"var": {"v": {"?": [[6, "    v = full_eval(raw.ViewRaw())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_raw": {"() -> None": [[5, "def test_view_raw():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/exceptions.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.NetlibException.__init__": {"param": {"self": {"{HttpSyntaxException | InvalidCertificateException | NetlibException}": [[128, "    def __init__(self, message=None):"]]}, "message": {"str": [[128, "    def __init__(self, message=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.InvalidServerCertificat": {"func": {"__repr__": {"InvalidServerCertificate -> str": [[51, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.InvalidServerCertificate.__repr__": {"param": {"self": {"InvalidServerCertificate": [[51, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.ClientHandshakeException.__init__": {"param": {"self": {"ClientHandshakeException": [[45, "    def __init__(self, message, server):"]]}, "message": {"?": [[45, "    def __init__(self, message, server):"]]}, "server": {"?": [[45, "    def __init__(self, message, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.MitmproxyExceptio": {"func": {"__init__": {"? -> ?": [[19, "    def __init__(self, message=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.ex": {"class": {"HttpReadDisconnect": {"<HttpReadDisconnect>": [[144, "class HttpReadDisconnect(HttpException, Disconnect):"]]}, "TcpDisconnect": {"<TcpDisconnect>": [[156, "class TcpDisconnect(TcpException, Disconnect):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.MitmproxyException.__init__": {"param": {"self": {"{ContentViewException | FlowReadException | Http2ProtocolException | InvalidServerCertificate | MitmproxyException}": [[19, "    def __init__(self, message=None):"]]}, "message": {"str": [[19, "    def __init__(self, message=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions": {"class": {"InvalidCertificateException": {"<InvalidCertificateException>": [[172, "class InvalidCertificateException(TlsException):"]]}, "ContentViewException": {"<ContentViewException>": [[76, "class ContentViewException(MitmproxyException):"]]}, "MitmproxyException": {"<MitmproxyException>": [[13, "class MitmproxyException(Exception):"]]}, "HttpProtocolException": {"<HttpProtocolException>": [[60, "class HttpProtocolException(ProtocolException):"]]}, "Http2ProtocolException": {"<Http2ProtocolException>": [[64, "class Http2ProtocolException(ProtocolException):"]]}, "TcpReadIncomplete": {"<TcpReadIncomplete>": [[160, "class TcpReadIncomplete(TcpException):"]]}, "HttpException": {"<HttpException>": [[140, "class HttpException(NetlibException):"]]}, "Http2ZombieException": {"<Http2ZombieException>": [[68, "class Http2ZombieException(ProtocolException):"]]}, "ControlException": {"<ControlException>": [[88, "class ControlException(MitmproxyException):"]]}, "AddonManagerError": {"<AddonManagerError>": [[104, "class AddonManagerError(MitmproxyException):"]]}, "AddonHalt": {"<AddonHalt>": [[108, "class AddonHalt(MitmproxyException):"]]}, "ServerException": {"<ServerException>": [[72, "class ServerException(MitmproxyException):"]]}, "InvalidServerCertificate": {"<InvalidServerCertificate>": [[50, "class InvalidServerCertificate(TlsProtocolException):"]]}, "CommandError": {"<CommandError>": [[96, "class CommandError(Exception):"]]}, "FlowReadException": {"<FlowReadException>": [[84, "class FlowReadException(MitmproxyException):"]]}, "Timeout": {"<Timeout>": [[176, "class Timeout(TcpException):"]]}, "ReplayException": {"<ReplayException>": [[80, "class ReplayException(MitmproxyException):"]]}, "TcpTimeout": {"<TcpTimeout>": [[164, "class TcpTimeout(TcpException):"]]}, "HttpSyntaxException": {"<HttpSyntaxException>": [[148, "class HttpSyntaxException(HttpException):"]]}, "TypeError": {"<TypeError>": [[115, "class TypeError(MitmproxyException):"]]}, "NetlibException": {"<NetlibException>": [[124, "class NetlibException(MitmproxyException):"]]}, "SetServerNotAllowedException": {"<SetServerNotAllowedException>": [[92, "class SetServerNotAllowedException(MitmproxyException):"]]}, "TcpException": {"<TcpException>": [[152, "class TcpException(NetlibException):"]]}, "Kill": {"<Kill>": [[23, "class Kill(MitmproxyException):"]]}, "ProtocolException": {"<ProtocolException>": [[31, "class ProtocolException(MitmproxyException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.NetlibExceptio": {"func": {"__init__": {"? -> ?": [[128, "    def __init__(self, message=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exceptions.ClientHandshakeExceptio": {"func": {"__init__": {"? -> ?": [[45, "    def __init__(self, message, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"class": {"TlsProtocolException": {"<TlsProtocolException>": [[39, "class TlsProtocolException(ProtocolException):"]]}, "ClientHandshakeException": {"<ClientHandshakeException>": [[43, "class ClientHandshakeException(TlsProtocolException):"]]}, "Socks5ProtocolException": {"<Socks5ProtocolException>": [[56, "class Socks5ProtocolException(ProtocolException):"]]}, "TlsException": {"<TlsException>": [[168, "class TlsException(NetlibException):"]]}, "SessionLoadException": {"<SessionLoadException>": [[132, "class SessionLoadException(MitmproxyException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.exce": {"class": {"OptionsError": {"<OptionsError>": [[100, "class OptionsError(MitmproxyException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.excep": {"class": {"Disconnect": {"<Disconnect>": [[136, "class Disconnect:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/conftest.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.confte": {"var": {"skip_not_windows": {"?": [[15, "skip_not_windows = pytest.mark.skipif("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.conf": {"var": {"pytest_plugins": {"str": [[8, "pytest_plugins = ('test.full_coverage_plugin',)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.conftest": {"var": {"skip_appveyor": {"?": [[20, "skip_appveyor = pytest.mark.skipif("]]}, "s": {"?": [[26, "    s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)"]]}, "skip_windows": {"?": [[10, "skip_windows = pytest.mark.skipif("]]}, "no_ipv6": {"bool": [[30, "    no_ipv6 = True"], [32, "    no_ipv6 = False"]]}, "skip_no_ipv6": {"?": [[34, "skip_no_ipv6 = pytest.mark.skipif("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.conftes": {"func": {"tdata": {"() -> ?": [[41, "def tdata():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/server.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyServer.serve_forever": {"param": {"self": {"DummyServer": [[28, "    def serve_forever(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServ": {"var": {"allow_reuse_address": {"?": [[36, "    allow_reuse_address = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyServer.__init__": {"param": {"self": {"DummyServer": [[21, "    def __init__(self, config=None):"]]}, "config": {"ProxyConfig": [[21, "    def __init__(self, config=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler": {"param": {"client_conn": {"?": [[73, "    def __init__(self, client_conn, client_address, config, channel):"]]}}, "func": {"handle": {"ConnectionHandler -> ?": [[114, "    def handle(self):"]]}, "log": {"(ConnectionHandler, ?, ?) -> None / (ConnectionHandler, str, str) -> None / (ConnectionHandler, ?, str) -> None": [[158, "    def log(self, msg, level):"]]}, "__init__": {"? -> ?": [[73, "    def __init__(self, client_conn, client_address, config, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler.hand": {"var": {"root_layer": {"None": [[117, "        root_layer = None"]], "{HttpProxy | HttpUpstreamProxy | ReverseProxy | Socks5Proxy | TransparentProxy}": [[119, "            root_layer = self._create_root_layer()"]], "?": [[120, "            root_layer = self.channel.ask(\"clientconnect\", root_layer)"]]}}, "param": {"self": {"ConnectionHandler": [[114, "    def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler.log": {"param": {"self": {"ConnectionHandler": [[158, "    def log(self, msg, level):"]]}, "level": {"str": [[158, "    def log(self, msg, level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyServer.set_": {"param": {"channel": {"None": [[25, "    def set_channel(self, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServer.handle_client_connecti": {"param": {"conn": {"?": [[61, "    def handle_client_connection(self, conn, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServer": {"var": {"bound": {"?": [[37, "    bound = True"]]}}, "func": {"handle_client_connection": {"(ProxyServer, ?, ?) -> None": [[61, "    def handle_client_connection(self, conn, client_address):"]]}, "__init__": {"? -> ?": [[40, "    def __init__(self, config: config.ProxyConfig) -> None:"]]}, "set_channel": {"(ProxyServer, ?) -> None": [[58, "    def set_channel(self, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler._create_root_laye": {"var": {"root_ctx": {"RootContext": [[84, "        root_ctx = root_context.RootContext("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler._create_root_lay": {"var": {"server_tls": {"bool": [[99, "            server_tls = self.config.upstream_server.scheme == \"https\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionH": {"param": {"client_address": {"(str, int)": [[73, "    def __init__(self, client_conn, client_address, config, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler._create_root_layer": {"var": {"mode": {"?": [[90, "        mode = self.config.options.mode"]]}}, "param": {"self": {"ConnectionHandler": [[83, "    def _create_root_layer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServer.set_": {"param": {"channel": {"?": [[58, "    def set_channel(self, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyServer": {"var": {"bound": {"?": [[19, "    bound = False"]]}}, "func": {"shutdown": {"DummyServer -> None": [[31, "    def shutdown(self):"]]}, "__init__": {"? -> ?": [[21, "    def __init__(self, config=None):"]]}, "set_channel": {"(DummyServer, ?) -> None / (DummyServer, None) -> None": [[25, "    def set_channel(self, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler.handl": {"var": {"error_response": {"HTTPResponse": [[143, "                error_response = http.make_error_response(502, repr(e))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHand": {"func": {"_create_root_layer": {"ConnectionHandler -> {HttpProxy | HttpUpstreamProxy | ReverseProxy | Socks5Proxy | TransparentProxy}": [[83, "    def _create_root_layer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.serv": {"class": {"ConnectionHandler": {"<ConnectionHandler>": [[71, "class ConnectionHandler:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServer.set_chann": {"param": {"self": {"ProxyServer": [[58, "    def set_channel(self, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler.__init__": {"param": {"self": {"ConnectionHandler": [[73, "    def __init__(self, client_conn, client_address, config, channel):"]]}, "config": {"ProxyConfig": [[73, "    def __init__(self, client_conn, client_address, config, channel):"]]}, "channel": {"?": [[73, "    def __init__(self, client_conn, client_address, config, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServer.handle_client_connectio": {"param": {"client_address": {"?": [[61, "    def handle_client_connection(self, conn, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ProxyServer.handle_client_connection": {"var": {"h": {"ConnectionHandler": [[62, "        h = ConnectionHandler("]]}}, "param": {"self": {"ProxyServer": [[61, "    def handle_client_connection(self, conn, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.ConnectionHandler.lo": {"var": {"msg": {"str": [[159, "        msg = \"{}: {}\".format(human.format_address(self.client_conn.address), msg)"]]}}, "param": {"msg": {"str": [[158, "    def log(self, msg, level):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.s": {"class": {"ProxyServer": {"<ProxyServer>": [[35, "class ProxyServer(tcp.TCPServer):"]]}, "DummyServer": {"<DummyServer>": [[18, "class DummyServer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyServer.shutdown": {"param": {"self": {"DummyServer": [[31, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyS": {"func": {"serve_forever": {"DummyServer -> None": [[28, "    def serve_forever(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.server.DummyServer.set_chann": {"param": {"self": {"DummyServer": [[25, "    def set_channel(self, channel):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/master.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.inject_key": {"param": {"self": {"ConsoleMaster": [[184, "    def inject_key(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.quit": {"param": {"a": {"?": [[224, "    def quit(self, a):"]]}, "self": {"ConsoleMaster": [[224, "    def quit(self, a):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.__setattr__": {"param": {"self": {"ConsoleMaster": [[69, "    def __setattr__(self, name, value):"]]}, "name": {"?": [[69, "    def __setattr__(self, name, value):"]]}, "value": {"?": [[69, "    def __setattr__(self, name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.sig_call_in": {"param": {"callback": {"?": [[102, "    def sig_call_in(self, sender, seconds, callback, args=()):"]]}, "self": {"ConsoleMaster": [[102, "    def sig_call_in(self, sender, seconds, callback, args=()):"]]}, "args": {"()": [[102, "    def sig_call_in(self, sender, seconds, callback, args=()):"]]}}, "func": {"cb": {"() -> ?": [[103, "        def cb(*_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMast": {"func": {"overlay": {"(ConsoleMaster, DataViewerOverlay) -> None / (ConsoleMaster, ?) -> None / (ConsoleMaster, Chooser) -> None / (ConsoleMaster, OptionsOverlay) -> None": [[218, "    def overlay(self, widget, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.__init__": {"param": {"self": {"ConsoleMaster": [[34, "    def __init__(self, opts):"]]}, "opts": {"Options": [[34, "    def __init__(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.sig_call_i": {"param": {"seconds": {"?": [[102, "    def sig_call_in(self, sender, seconds, callback, args=()):"]]}, "sender": {"?": [[102, "    def sig_call_in(self, sender, seconds, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.run": {"param": {"self": {"ConsoleMaster": [[187, "    def run(self):"]]}}, "func": {"display_err": {"() -> None": [[211, "            def display_err(*_):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.uistopped": {"param": {"self": {"ConsoleMaster": [[108, "    def uistopped(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleM": {"func": {"sigint_handler": {"() -> None": [[62, "        def sigint_handler(*args, **kwargs):"]]}, "__setattr__": {"(ConsoleMaster, ?, ?) -> None": [[69, "    def __setattr__(self, name, value):"]]}, "spawn_external_viewer": {"(ConsoleMaster, ?, ?) -> ?": [[139, "    def spawn_external_viewer(self, data, contenttype):"]]}, "spawn_editor": {"(ConsoleMaster, ?) -> str": [[117, "    def spawn_editor(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.overlay": {"param": {"self": {"ConsoleMaster": [[218, "    def overlay(self, widget, **kwargs):"]]}, "widget": {"{Chooser | DataViewerOverlay | OptionsOverlay}": [[218, "    def overlay(self, widget, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.spawn_editor": {"var": {"text": {"int": [[118, "        text = not isinstance(data, bytes)"]]}, "c": {"str": [[123, "        c = os.environ.get(\"MITMPROXY_EDITOR\") or os.environ.get(\"EDITOR\") or \"vi\""]]}, "cmd": {"?": [[124, "        cmd = shlex.split(c)"]]}, "fd": {"?": [[119, "        fd, name = tempfile.mkstemp('', \"mproxy\", text=text)"]]}, "data": {"str": [[135, "                    data = f.read()"]]}}, "param": {"self": {"ConsoleMaster": [[117, "    def spawn_editor(self, data):"]]}, "data": {"?": [[117, "    def spawn_editor(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.options_error": {"param": {"self": {"ConsoleMaster": [[73, "    def options_error(self, opts, exc):"]]}, "exc": {"?": [[73, "    def options_error(self, opts, exc):"]]}, "opts": {"?": [[73, "    def options_error(self, opts, exc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.set_pal": {"param": {"updated": {"None": [[176, "    def set_palette(self, opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.inject_": {"param": {"key": {"str": [[184, "    def inject_key(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.set_palette": {"param": {"opts": {"?": [[176, "    def set_palette(self, opts, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.m": {"class": {"ConsoleMaster": {"<ConsoleMaster>": [[32, "class ConsoleMaster(master.Master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaste": {"func": {"run": {"ConsoleMaster -> None": [[187, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMa": {"func": {"options_error": {"(ConsoleMaster, ?, ?) -> None": [[73, "    def options_error(self, opts, exc):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.switch_view": {"param": {"self": {"ConsoleMaster": [[221, "    def switch_view(self, name):"]]}, "name": {"str": [[221, "    def switch_view(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.prompt_for_exit": {"param": {"self": {"ConsoleMaster": [[79, "    def prompt_for_exit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMas": {"func": {"prompt_for_exit": {"ConsoleMaster -> None": [[79, "    def prompt_for_exit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.spawn_external_viewer": {"var": {"c": {"str": [[164, "                c = \"less\""]], "?": [[156, "            c = mailcap.getcaps()"], [162, "            c = os.environ.get(\"MITMPROXY_EDITOR\") or os.environ.get(\"PAGER\") or os.environ.get(\"EDITOR\")"]]}, "shell": {"?": [[153, "        shell = False"], [159, "                shell = True"]]}, "contenttype": {"?": [[141, "            contenttype = contenttype.split(\";\")[0]"]]}, "cmd": {"None": [[152, "        cmd = None"]], "?": [[157, "            cmd, _ = mailcap.findmatch(c, contenttype, filename=name)"], [165, "            cmd = shlex.split(c)"]]}, "ext": {"str": [[142, "            ext = mimetypes.guess_extension(contenttype) or \"\""], [144, "            ext = \"\""]]}, "fd": {"?": [[145, "        fd, name = tempfile.mkstemp(ext, \"mproxy\")"]]}}, "param": {"contenttype": {"?": [[139, "    def spawn_external_viewer(self, data, contenttype):"]]}, "self": {"ConsoleMaster": [[139, "    def spawn_external_viewer(self, data, contenttype):"]]}, "data": {"?": [[139, "    def spawn_external_viewer(self, data, contenttype):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster": {"func": {"quit": {"(ConsoleMaster, ?) -> None": [[224, "    def quit(self, a):"]]}, "set_palette": {"(ConsoleMaster, ?, ?) -> None / (ConsoleMaster, ?, None) -> None": [[176, "    def set_palette(self, opts, updated):"]]}, "switch_view": {"(ConsoleMaster, ?) -> None / (ConsoleMaster, str) -> None": [[221, "    def switch_view(self, name):"]]}, "inject_key": {"(ConsoleMaster, ?) -> None / (ConsoleMaster, str) -> None": [[184, "    def inject_key(self, key):"]]}, "sig_add_log": {"(ConsoleMaster, None, ?) -> None / (ConsoleMaster, ?, ?) -> None": [[90, "    def sig_add_log(self, event_store, entry: log.LogEntry):"]]}, "uistopped": {"ConsoleMaster -> ?": [[108, "    def uistopped(self):"]]}, "__init__": {"? -> ?": [[34, "    def __init__(self, opts):"]]}, "sig_call_in": {"(ConsoleMaster, ?, ?, ?, ()) -> None": [[102, "    def sig_call_in(self, sender, seconds, callback, args=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.master.ConsoleMaster.set_palett": {"param": {"self": {"ConsoleMaster": [[176, "    def set_palette(self, opts, updated):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_controller.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestDummyReply.test_simple": {"var": {"_": {"int": [[115, "        for _ in range(2):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.test_master.tAddon.log": {"param": {"self": {"tAddon": [[15, "        def log(self, _):"]]}, "_": {"?": [[15, "        def log(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestDummyReply": {"func": {"test_simple": {"TestDummyReply -> None": [[113, "    def test_simple(self):"]]}, "test_del": {"TestDummyReply -> None": [[135, "    def test_del(self):"]]}, "test_reset": {"TestDummyReply -> None": [[123, "    def test_reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_double_send": {"var": {"reply": {"Reply": [[76, "        reply = controller.Reply(47)"]]}}, "param": {"self": {"TestReply": [[75, "    def test_double_send(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestR": {"func": {"test_reply_none": {"TestReply -> None": [[60, "    def test_reply_none(self):"]]}, "test_commit_no_reply": {"TestReply -> None": [[67, "    def test_commit_no_reply(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.test_master.tAddon": {"func": {"log": {"(tAddon, ?) -> None": [[15, "        def log(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_commit_no_reply": {"param": {"self": {"TestReply": [[67, "    def test_commit_no_reply(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_ki": {"var": {"reply": {"Reply": [[47, "        reply = controller.Reply(43)"]]}}, "param": {"self": {"TestReply": [[46, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestDummyReply.test_reset": {"var": {"reply": {"DummyReply": [[124, "        reply = controller.DummyReply()"]]}}, "param": {"self": {"TestDummyReply": [[123, "    def test_reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_d": {"var": {"reply": {"Reply": [[104, "        reply = controller.Reply(47)"]]}}, "param": {"self": {"TestReply": [[103, "    def test_del(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestDummyReply.test_simp": {"param": {"self": {"TestDummyReply": [[113, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_simp": {"param": {"self": {"TestReply": [[30, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_state_transition": {"var": {"states": {"[str]": [[84, "        states = {\"start\", \"taken\", \"committed\"}"]]}, "state": {"str": [[91, "            for state in states:"]]}}, "param": {"self": {"TestReply": [[83, "    def test_state_transitions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller": {"class": {"TestReply": {"<TestReply>": [[29, "class TestReply:"]]}, "TestDummyReply": {"<TestDummyReply>": [[112, "class TestDummyReply:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_sim": {"var": {"reply": {"Reply": [[31, "        reply = controller.Reply(42)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.test_master": {"class": {"tAddon": {"<tAddon>": [[14, "    class tAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply": {"func": {"test_simple": {"TestReply -> None": [[30, "    def test_simple(self):"]]}, "test_state_transitions": {"TestReply -> None": [[83, "    def test_state_transitions(self):"]]}, "test_double_send": {"TestReply -> None": [[75, "    def test_double_send(self):"]]}, "test_del": {"TestReply -> None": [[103, "    def test_del(self):"]]}, "test_ack": {"TestReply -> None": [[53, "    def test_ack(self):"]]}, "test_kill": {"TestReply -> None": [[46, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_state_transitions": {"var": {"r": {"Reply": [[92, "                r = controller.Reply(48)"]]}, "fn": {"?": [[90, "        for fn, ok in accept.items():"]]}, "accept": {"dict": [[85, "        accept = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_reply_non": {"var": {"reply": {"Reply": [[61, "        reply = controller.Reply(45)"]]}}, "param": {"self": {"TestReply": [[60, "    def test_reply_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_commit_no_": {"var": {"reply": {"Reply": [[68, "        reply = controller.Reply(46)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestDummyReply.test_sim": {"var": {"reply": {"DummyReply": [[114, "        reply = controller.DummyReply()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestReply.test_ack": {"var": {"reply": {"Reply": [[54, "        reply = controller.Reply(44)"]]}}, "param": {"self": {"TestReply": [[53, "    def test_ack(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_controller.TestDummyReply.test_d": {"var": {"reply": {"DummyReply": [[136, "        reply = controller.DummyReply()"]]}}, "param": {"self": {"TestDummyReply": [[135, "    def test_del(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_wsgiapp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp.test_simple": {"var": {"p": {"?": [[31, "        p = self.pathoc()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp": {"func": {"addons": {"TestApp -> [WSGIApp]": [[24, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp.test_app_": {"var": {"ret": {"?": [[39, "            ret = p.request(\"get:'http://errapp/'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestA": {"func": {"test_app_err": {"TestApp -> None": [[36, "    def test_app_err(self):"]]}, "test_simple": {"TestApp -> None": [[30, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp": {"func": {"hello": {"() -> str": [[10, "def hello():"]]}, "error": {"() -> None": [[15, "def error():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp.test_simp": {"param": {"self": {"TestApp": [[30, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgia": {"class": {"TestApp": {"<TestApp>": [[23, "class TestApp(tservers.HTTPProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp.test_simpl": {"var": {"ret": {"?": [[33, "            ret = p.request(\"get:'http://testapp/'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp.addon": {"param": {"self": {"TestApp": [[24, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.TestApp.test_app_err": {"var": {"p": {"?": [[37, "        p = self.pathoc()"]]}}, "param": {"self": {"TestApp": [[36, "    def test_app_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgi": {"var": {"tapp": {"?": [[6, "tapp = flask.Flask(__name__)"]]}}, "param": {"start_response": {"?": [[19, "def errapp(environ, start_response):"]]}}, "func": {"errapp": {"(?, ?) -> None": [[19, "def errapp(environ, start_response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_wsgiapp.errapp": {"param": {"environ": {"?": [[19, "def errapp(environ, start_response):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/http1.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.check": {"var": {"close_connection": {"bool": [[96, "        close_connection = request_close or response_close or read_until_eof"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1La": {"func": {"send_request_body": {"(Http1Layer, ?, ?) -> None": [[37, "    def send_request_body(self, request, chunks):"]]}, "send_response_body": {"(Http1Layer, ?, ?) -> None": [[75, "    def send_response_body(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_response_body": {"var": {"expected_size": {"int": [[57, "        expected_size = http1.expected_http_body_size(request, response)"]]}}, "param": {"self": {"Http1Layer": [[56, "    def read_response_body(self, request, response):"]]}, "request": {"?": [[56, "    def read_response_body(self, request, response):"]]}, "response": {"?": [[56, "    def read_response_body(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_response_trailer": {"param": {"self": {"Http1Layer": [[80, "    def send_response_trailers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_response_trail": {"param": {"request": {"?": [[64, "    def read_response_trailers(self, request, response):"]]}, "response": {"?": [[64, "    def read_response_trailers(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_response_head": {"var": {"resp": {"Response": [[53, "        resp = http1.read_response_head(self.server_conn.rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_request_trailer": {"param": {"self": {"Http1Layer": [[26, "    def read_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request_": {"var": {"headers": {"None": [[33, "        headers = http1.assemble_request_head(request)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.__call__": {"var": {"layer": {"HttpLayer": [[106, "        layer = httpbase.HttpLayer(self, self.mode)"]]}}, "param": {"self": {"Http1Layer": [[105, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Lay": {"func": {"send_request": {"(Http1Layer, ?) -> None": [[47, "    def send_request(self, request):"]]}, "read_response_trailers": {"(Http1Layer, ?, ?) -> None": [[64, "    def read_response_trailers(self, request, response):"]]}, "read_request_trailers": {"(Http1Layer, ?) -> None": [[26, "    def read_request_trailers(self, request):"]]}, "read_request_headers": {"(Http1Layer, ?) -> HTTPRequest": [[13, "    def read_request_headers(self, flow):"]]}, "send_response_headers": {"(Http1Layer, ?) -> None": [[70, "    def send_response_headers(self, response):"]]}, "read_response_headers": {"Http1Layer -> HTTPResponse": [[52, "    def read_response_headers(self):"]]}, "send_request_trailers": {"(Http1Layer, ?) -> None": [[42, "    def send_request_trailers(self, request):"]]}, "send_request_headers": {"(Http1Layer, ?) -> None": [[32, "    def send_request_headers(self, request):"]]}, "send_response_trailers": {"(Http1Layer, ?) -> None": [[80, "    def send_response_trailers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request_trailer": {"param": {"self": {"Http1Layer": [[42, "    def send_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_response_head": {"param": {"response": {"?": [[70, "    def send_response_headers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request": {"param": {"self": {"Http1Layer": [[47, "    def send_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1L": {"func": {"read_request_body": {"(Http1Layer, ?) -> None": [[18, "    def read_request_body(self, request):"]]}, "read_response_body": {"(Http1Layer, ?, ?) -> None": [[56, "    def read_response_body(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request_head": {"param": {"request": {"?": [[32, "    def send_request_headers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.check_close_connecti": {"var": {"response_close": {"bool": [[91, "        response_close = http1.connection_close("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_response_header": {"param": {"self": {"Http1Layer": [[52, "    def read_response_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_response_trail": {"param": {"response": {"?": [[80, "    def send_response_trailers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_response_trailer": {"param": {"self": {"Http1Layer": [[64, "    def read_response_trailers(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_response_body": {"var": {"chunk": {"?": [[76, "        for chunk in http1.assemble_body(response.headers, chunks):"]]}}, "param": {"chunks": {"?": [[75, "    def send_response_body(self, response, chunks):"]]}, "self": {"Http1Layer": [[75, "    def send_response_body(self, response, chunks):"]]}, "response": {"?": [[75, "    def send_response_body(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.check_close_connec": {"var": {"read_until_eof": {"bool": [[95, "        read_until_eof = http1.expected_http_body_size(flow.request, flow.response) == -1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request_body": {"var": {"chunk": {"?": [[38, "        for chunk in http1.assemble_body(request.headers, chunks):"]]}}, "param": {"chunks": {"?": [[37, "    def send_request_body(self, request, chunks):"]]}, "self": {"Http1Layer": [[37, "    def send_request_body(self, request, chunks):"]]}, "request": {"?": [[37, "    def send_request_body(self, request, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request_header": {"param": {"self": {"Http1Layer": [[32, "    def send_request_headers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_request_trail": {"param": {"request": {"?": [[42, "    def send_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.h": {"class": {"Http1Layer": {"<Http1Layer>": [[7, "class Http1Layer(httpbase._HttpTransmissionLayer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_request_body": {"var": {"expected_size": {"int": [[19, "        expected_size = http1.expected_http_body_size(request)"]]}}, "param": {"self": {"Http1Layer": [[18, "    def read_request_body(self, request):"]]}, "request": {"?": [[18, "    def read_request_body(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_request_header": {"param": {"self": {"Http1Layer": [[13, "    def read_request_headers(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.check_close_connection": {"var": {"request_close": {"bool": [[87, "        request_close = http1.connection_close("]]}}, "param": {"self": {"Http1Layer": [[86, "    def check_close_connection(self, flow):"]]}, "flow": {"?": [[86, "    def check_close_connection(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_response_header": {"param": {"self": {"Http1Layer": [[70, "    def send_response_headers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_": {"param": {"request": {"?": [[47, "    def send_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer": {"func": {"__call__": {"Http1Layer -> None": [[105, "    def __call__(self):"]]}, "check_close_connection": {"(Http1Layer, ?) -> bool": [[86, "    def check_close_connection(self, flow):"]]}, "__init__": {"? -> ?": [[9, "    def __init__(self, ctx, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.__init__": {"param": {"self": {"Http1Layer": [[9, "    def __init__(self, ctx, mode):"]]}, "ctx": {"{Socks5Proxy | TlsLayer}": [[9, "    def __init__(self, ctx, mode):"]]}, "mode": {"int": [[9, "    def __init__(self, ctx, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_request_trail": {"param": {"request": {"?": [[26, "    def read_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.read_request_headers": {"param": {"flow": {"?": [[13, "    def read_request_headers(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http1.Http1Layer.send_response_headers": {"var": {"raw": {"None": [[71, "        raw = http1.assemble_response_head(response)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/test_mapping.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_configur": {"var": {"open_mock": {"?": [[50, "        open_mock = mock.mock_open(read_data=\"{}\")"]]}, "tmpfile": {"?": [[43, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "updated": {"dict": [[48, "        updated = {str(mapping.OPT_MAPPING_FILE): new_filename, str(mapping.OPT_MAP_PERSISTENT): True}"]]}, "new_filename": {"str": [[47, "        new_filename = \"My new filename\""]]}}, "param": {"self": {"TestMappingAddon": [[42, "    def test_configure(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestC": {"func": {"test_config": {"TestConfig -> None": [[13, "    def test_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAdd": {"func": {"test_response": {"(TestMappingAddon, ?) -> None": [[69, "    def test_response(self, tmpdir):"]]}, "test_configure": {"(TestMappingAddon, ?) -> None": [[42, "    def test_configure(self, tmpdir):"]]}, "test_response_content_type": {"(TestMappingAddon, ?) -> None": [[82, "    def test_response_content_type(self, tmpdir):"]]}, "test_response_not_existing": {"(TestMappingAddon, ?) -> None": [[96, "    def test_response_not_existing(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_m": {"class": {"TestMappingAddon": {"<TestMappingAddon>": [[22, "class TestMappingAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_configure": {"var": {"mapping": {"?": [[46, "        mapping = MappingAddon(tmpfile)"]]}}, "param": {"tmpdir": {"?": [[42, "    def test_configure(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_content_type": {"var": {"mapping": {"?": [[86, "        mapping = MappingAddon(tmpfile)"]]}, "f": {"?": [[87, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"tmpdir": {"?": [[82, "    def test_response_content_type(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_": {"var": {"loader": {"?": [[36, "        loader = MagicMock()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_filtered": {"var": {"tmpfile": {"?": [[58, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "mapping": {"?": [[61, "        mapping = MappingAddon(tmpfile)"]]}, "test_content": {"str": [[63, "        test_content = b\"Test\""]]}, "f": {"?": [[62, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestMappingAddon": [[57, "    def test_response_filtered(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_du": {"var": {"tmpfile": {"?": [[160, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "mapping": {"?": [[163, "        mapping = MappingAddon(tmpfile, persistent=True)"]]}}, "param": {"tmpdir": {"?": [[159, "    def test_dump(selfself, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestConfig.test_config": {"param": {"self": {"TestConfig": [[13, "    def test_config(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_true_add_conten": {"var": {"tmpfile": {"?": [[134, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "results": {"str": [[147, "            results = tfile.read()"]]}}, "param": {"tmpdir": {"?": [[133, "    def test_persistance_true_add_content(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_tru": {"var": {"open_mock": {"?": [[125, "        open_mock = mock.mock_open(read_data=\"{}\")"]]}, "tmpfile": {"?": [[120, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"self": {"TestMappingAddon": [[119, "    def test_persistance_true(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_": {"var": {"results": {"str": [[129, "            results = tfile.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddo": {"func": {"test_persistance_true": {"(TestMappingAddon, ?) -> None": [[119, "    def test_persistance_true(self, tmpdir):"]]}, "test_init": {"(TestMappingAddon, ?) -> None": [[24, "    def test_init(self, tmpdir):"]]}, "test_persistance_false": {"(TestMappingAddon, ?) -> None": [[108, "    def test_persistance_false(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon": {"func": {"test_dump": {"(TestMappingAddon, ?) -> None": [[159, "    def test_dump(selfself, tmpdir):"]]}, "mock_dump": {"(TestMappingAddon, ?, ?) -> ?": [[150, "    def mock_dump(self, f: TextIO, value_dumper: Callable):"]]}, "test_load": {"(TestMappingAddon, ?) -> None": [[31, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_true_add_content": {"var": {"mapping": {"?": [[137, "        mapping = MappingAddon(tmpfile, persistent=True)"]]}, "f": {"?": [[139, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestMappingAddon": [[133, "    def test_persistance_true_add_content(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_content_typ": {"var": {"test_content": {"str": [[88, "        test_content = b\"<body> Test </body>\""]]}}, "param": {"self": {"TestMappingAddon": [[82, "    def test_response_content_type(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.tes": {"var": {"mapping_content": {"None": [[19, "mapping_content = f'{{\"{url}\": {{\"body\": \"{new_content}\"}}}}'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapp": {"class": {"TestConfig": {"<TestConfig>": [[11, "class TestConfig:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_respon": {"param": {"self": {"TestMappingAddon": [[69, "    def test_response(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_dump": {"param": {"selfself": {"TestMappingAddon": [[159, "    def test_dump(selfself, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_not_exist": {"var": {"mapping": {"?": [[100, "        mapping = MappingAddon(tmpfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_in": {"var": {"tmpfile": {"?": [[25, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"tmpdir": {"?": [[24, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_not_existing": {"var": {"tmpfile": {"?": [[97, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "test_content": {"str": [[102, "        test_content = b\"<title> Test </title>\""]]}, "f": {"?": [[101, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestMappingAddon": [[96, "    def test_response_not_existing(self, tmpdir):"]]}, "tmpdir": {"?": [[96, "    def test_response_not_existing(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_true": {"var": {"mapping": {"?": [[123, "        mapping = MappingAddon(tmpfile, persistent=True)"]]}}, "param": {"tmpdir": {"?": [[119, "    def test_persistance_true(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_init": {"var": {"mapping": {"?": [[28, "        mapping = MappingAddon(tmpfile)"]]}}, "param": {"self": {"TestMappingAddon": [[24, "    def test_init(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_load": {"var": {"tmpfile": {"?": [[32, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "mapping": {"?": [[35, "        mapping = MappingAddon(tmpfile)"]]}}, "param": {"self": {"TestMappingAddon": [[31, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_content_ty": {"var": {"tmpfile": {"?": [[83, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_respons": {"var": {"tmpfile": {"?": [[70, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping": {"var": {"url": {"str": [[17, "url = \"http://10.10.10.10\""]]}, "new_content": {"str": [[18, "new_content = \"My Text\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_resp": {"var": {"test_content": {"str": [[75, "        test_content = b\"<body> Test </body>\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_loa": {"param": {"tmpdir": {"?": [[31, "    def test_load(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response": {"var": {"mapping": {"?": [[73, "        mapping = MappingAddon(tmpfile)"]]}, "f": {"?": [[74, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"tmpdir": {"?": [[69, "    def test_response(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_response_filtere": {"param": {"tmpdir": {"?": [[57, "    def test_response_filtered(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_fa": {"param": {"self": {"TestMappingAddon": [[108, "    def test_persistance_false(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_fals": {"var": {"open_mock": {"?": [[114, "        open_mock = mock.mock_open(read_data=\"{}\")"]]}, "tmpfile": {"?": [[109, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_true_add": {"var": {"test_content": {"str": [[140, "        test_content = b\"<title> Test </title>\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingAddon.test_persistance_false": {"var": {"mapping": {"?": [[112, "        mapping = MappingAddon(tmpfile)"]]}}, "param": {"tmpdir": {"?": [[108, "    def test_persistance_false(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_mapping.TestMappingA": {"func": {"test_persistance_true_add_content": {"(TestMappingAddon, ?) -> None": [[133, "    def test_persistance_true_add_content(self, tmpdir):"]]}, "test_response_filtered": {"(TestMappingAddon, ?) -> None": [[57, "    def test_response_filtered(self, tmpdir):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_certs.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_no_common_nam": {"param": {"self": {"TestCertStore": [[46, "    def test_create_no_common_name(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCer": {"func": {"test_simple": {"(TestCert, ?) -> None": [[153, "    def test_simple(self, tdata):"]]}, "test_state": {"(TestCert, ?) -> None": [[191, "    def test_state(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertS": {"func": {"test_overrides": {"(TestCertStore, ?) -> None": [[97, "    def test_overrides(self, tmpdir):"]]}, "test_create_no_common_name": {"(TestCertStore, ?) -> None": [[46, "    def test_create_no_common_name(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_sans": {"var": {"c3": {"None": [[64, "        c3 = ca.get_cert(b\"bar.com\", [])"]]}, "ca": {"CertStore": [[60, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}, "c1": {"None": [[61, "        c1 = ca.get_cert(b\"foo.com\", [b\"*.bar.com\"])"]]}}, "param": {"tmpdir": {"?": [[59, "    def test_sans(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestDummyCert.test_with_ca": {"var": {"r": {"Cert": [[128, "        r = certs.dummy_cert("], [139, "        r = certs.dummy_cert("]]}}, "param": {"self": {"TestDummyCert": [[126, "    def test_with_ca(self, tmpdir):"]]}, "tmpdir": {"?": [[126, "    def test_with_ca(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertSto": {"func": {"test_create_dhparams": {"(TestCertStore, ?) -> None": [[110, "    def test_create_dhparams(self, tmpdir):"]]}, "test_expire": {"(TestCertStore, ?) -> None": [[73, "    def test_expire(self, tmpdir):"]]}, "test_create_explicit": {"(TestCertStore, ?) -> None": [[37, "    def test_create_explicit(self, tmpdir):"]]}, "test_create_tmp": {"(TestCertStore, ?) -> None": [[50, "    def test_create_tmp(self, tmpdir):"]]}, "test_umask_secret": {"(TestCertStore, ?) -> None": [[116, "    def test_umask_secret(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_dhparam": {"param": {"self": {"TestCertStore": [[110, "    def test_create_dhparams(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_explicit": {"var": {"ca2": {"CertStore": [[41, "        ca2 = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}, "ca": {"CertStore": [[38, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}}, "param": {"self": {"TestCertStore": [[37, "    def test_create_explicit(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_expir": {"param": {"self": {"TestCertStore": [[73, "    def test_expire(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_tmp": {"var": {"ca": {"CertStore": [[51, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}, "r": {"None": [[56, "        r = ca.get_cert(b\"*.foo.com\", [])"]]}}, "param": {"self": {"TestCertStore": [[50, "    def test_create_tmp(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStor": {"func": {"test_sans": {"(TestCertStore, ?) -> None": [[59, "    def test_sans(self, tmpdir):"]]}, "test_sans_change": {"(TestCertStore, ?) -> None": [[67, "    def test_sans_change(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_overrid": {"param": {"self": {"TestCertStore": [[97, "    def test_overrides(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_umask_secre": {"param": {"tmpdir": {"?": [[116, "    def test_umask_secret(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestC": {"func": {"test_err_broken_sans": {"(TestCert, ?) -> None": [[178, "    def test_err_broken_sans(self, tdata):"]]}, "test_der": {"(TestCert, ?) -> None": [[185, "    def test_der(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_explic": {"param": {"tmpdir": {"?": [[37, "    def test_create_explicit(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_state": {"var": {"a": {"?": [[198, "        a = c.get_state()"]]}, "c": {"Cert": [[194, "        c = certs.Cert.from_pem(d)"]]}, "b": {"?": [[199, "        b = c2.get_state()"]]}, "d": {"str": [[193, "            d = f.read()"]]}, "x": {"Cert": [[204, "        x = certs.Cert('')"]]}, "c2": {"Cert": [[197, "        c2 = c.copy()"]]}}, "param": {"tdata": {"?": [[191, "    def test_state(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestDummyCer": {"func": {"test_with_ca": {"(TestDummyCert, ?) -> None": [[126, "    def test_with_ca(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_stat": {"param": {"self": {"TestCert": [[191, "    def test_state(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_sans_change": {"var": {"ca": {"CertStore": [[68, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}}, "param": {"tmpdir": {"?": [[67, "    def test_sans_change(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_c": {"class": {"TestCertStore": {"<TestCertStore>": [[35, "class TestCertStore:"]]}, "TestCert": {"<TestCert>": [[151, "class TestCert:"]]}, "TestDummyCert": {"<TestDummyCert>": [[124, "class TestDummyCert:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_no_common_name": {"var": {"ca": {"CertStore": [[47, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}}, "param": {"tmpdir": {"?": [[46, "    def test_create_no_common_name(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_": {"param": {"tmpdir": {"?": [[50, "    def test_create_tmp(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestDummyCert.test_with_": {"var": {"ca": {"CertStore": [[127, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_der": {"var": {"s": {"Cert": [[188, "        s = certs.Cert.from_der(d)"]]}, "d": {"str": [[187, "            d = f.read()"]]}}, "param": {"tdata": {"?": [[185, "    def test_der(self, tdata):"]]}, "self": {"TestCert": [[185, "    def test_der(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_sans_chang": {"var": {"cert": {"?": [[70, "        cert, key, chain_file = ca.get_cert(b\"foo.bar.com\", [b\"*.baz.com\"])"]]}}, "param": {"self": {"TestCertStore": [[67, "    def test_sans_change(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_err_broken_sans": {"var": {"c": {"Cert": [[181, "        c = certs.Cert.from_pem(d)"]]}, "d": {"str": [[180, "            d = f.read()"]]}}, "param": {"tdata": {"?": [[178, "    def test_err_broken_sans(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_overrides": {"var": {"ca2": {"CertStore": [[99, "        ca2 = certs.CertStore.from_store(str(tmpdir.join(\"ca2\")), \"test\", 2048)"]]}, "ca1": {"CertStore": [[98, "        ca1 = certs.CertStore.from_store(str(tmpdir.join(\"ca1\")), \"test\", 2048)"]]}, "dc": {"None": [[102, "        dc = ca2.get_cert(b\"foo.com\", [b\"sans.example.com\"])"]]}, "dcp": {"?": [[103, "        dcp = tmpdir.join(\"dc\")"]]}, "ret": {"None": [[107, "        ret = ca1.get_cert(b\"foo.com\", [])"]]}}, "param": {"tmpdir": {"?": [[97, "    def test_overrides(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_simp": {"param": {"self": {"TestCert": [[153, "    def test_simple(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_san": {"param": {"self": {"TestCertStore": [[59, "    def test_sans(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_umask_secret": {"var": {"filename": {"str": [[117, "        filename = str(tmpdir.join(\"secret\"))"]]}}, "param": {"self": {"TestCertStore": [[116, "    def test_umask_secret(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_create_dhparams": {"var": {"filename": {"str": [[111, "        filename = str(tmpdir.join(\"dhparam.pem\"))"]]}}, "param": {"tmpdir": {"?": [[110, "    def test_create_dhparams(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_err_broken_san": {"param": {"self": {"TestCert": [[178, "    def test_err_broken_sans(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCertStore.test_expire": {"var": {"ca": {"CertStore": [[74, "        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)"]]}}, "param": {"tmpdir": {"?": [[73, "    def test_expire(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_certs.TestCert.test_simple": {"var": {"c2": {"Cert": [[163, "        c2 = certs.Cert.from_pem(d)"]]}, "c1": {"Cert": [[156, "        c1 = certs.Cert.from_pem(d)"]]}, "d": {"str": [[155, "            d = f.read()"], [162, "            d = f.read()"]]}}, "param": {"tdata": {"?": [[153, "    def test_simple(self, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_user_agents.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_user_agen": {"func": {"test_get_shortcut": {"() -> None": [[4, "def test_get_shortcut():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/css.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.css": {"var": {"x": {"str": [[68, "    x = beautify(data)"]]}, "CSS_SPECIAL_CHARS": {"str": [[22, "CSS_SPECIAL_CHARS = \"{};:\""]]}, "data": {"str": [[65, "        data = f.read()"]]}, "t": {"int": [[67, "    t = time.time()"]]}, "CSS_SPECIAL_AREAS": {"(str, str, str, str)": [[16, "CSS_SPECIAL_AREAS = ("]]}}, "class": {"ViewCSS": {"<ViewCSS>": [[51, "class ViewCSS(base.View):"]]}}, "func": {"beautify": {"(?, str) -> str / (str, str) -> str": [[25, "def beautify(data: str, indent: str = \"    \"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.css.ViewCSS.__call__": {"var": {"beautified": {"str": [[59, "        beautified = beautify(data)"]]}, "data": {"?": [[58, "        data = data.decode(\"utf8\", \"surrogateescape\")"]]}}, "param": {"self": {"ViewCSS": [[57, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[57, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.css.beautify": {"var": {"data": {"None": [[27, "    data = strutils.escape_special_areas("], [47, "    data = strutils.unescape_special_areas(data)"]], "?": [[34, "    data = re.sub(r\"\\s*;\\s*\", \";\\n\", data)"], [35, "    data = re.sub(r\"\\s*{\\s*\", \" {\\n\", data)"], [36, "    data = re.sub(r\"\\s*}\\s*\", \"\\n}\\n\\n\", data)"], [39, "    data = re.sub(r\"\\s*:\\s*(?=[^{]+})\", \": \", data)"], [41, "    data = re.sub(r\"\\s*,\\s*\", \", \", data)"], [44, "    data = re.sub(\"\\n[ \\t]+\", \"\\n\", data)"], [45, "    data = re.sub(\"\\n(?![}\\n])(?=[^{]*})\", \"\\n\" + indent, data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.css.ViewCSS": {"var": {"content_types": {"[str]": [[53, "    content_types = ["]]}, "name": {"str": [[52, "    name = \"CSS\""]]}}, "func": {"__call__": {"(ViewCSS, ?) -> (str, None)": [[57, "    def __call__(self, data, **metadata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/gif.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor": {"func": {"__init__": {"? -> ?": [[92, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.has_color_tab": {"param": {"self": {"LocalImageDescriptor": [[109, "        def has_color_table(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblocks.__ini": {"param": {"_parent": {"None": [[226, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[226, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStru": {"func": {"color_table_size": {"LogicalScreenDescriptorStruct -> int": [[83, "        def color_table_size(self):"]]}, "has_color_table": {"LogicalScreenDescriptorStruct -> bool": [[75, "        def has_color_table(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStruc": {"func": {"__init__": {"? -> ?": [[64, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ImageData": {"func": {"__init__": {"? -> ?": [[45, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtApplication.__ini": {"param": {"_parent": {"None": [[212, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[212, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTable.__ini": {"param": {"_parent": {"Gif": [[155, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Gif": [[155, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblock.__init__": {"param": {"self": {"Subblock": [[203, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicControl.__ini": {"param": {"_parent": {"None": [[175, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[175, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.__init": {"param": {"_io": {"?": [[92, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Block.__ini": {"param": {"_parent": {"Gif": [[142, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Gif": [[142, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescrip": {"func": {"color_table_size": {"LocalImageDescriptor -> int": [[133, "        def color_table_size(self):"]]}, "has_color_table": {"LocalImageDescriptor -> bool": [[109, "        def has_color_table(self):"]]}, "has_sorted_color_table": {"LocalImageDescriptor -> bool": [[125, "        def has_sorted_color_table(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Extension.__init": {"var": {"_on": {"?": [[244, "            _on = self.label"]]}}, "param": {"_io": {"?": [[239, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ImageData.__init__": {"param": {"self": {"ImageData": [[45, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.color_table_siz": {"param": {"self": {"LocalImageDescriptor": [[133, "        def color_table_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Header.__init": {"param": {"_io": {"?": [[166, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTable": {"func": {"__init__": {"? -> ?": [[155, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTableEntry.__init__": {"param": {"self": {"ColorTableEntry": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.BlockTyp": {"var": {"end_of_file": {"int": [[20, "        end_of_file = 59"]]}, "extension": {"int": [[18, "        extension = 33"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicControl.__init": {"param": {"_io": {"?": [[175, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStruct.color_table_siz": {"param": {"self": {"LogicalScreenDescriptorStruct": [[83, "        def color_table_size(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtApplication.__init": {"var": {"_": {"?": [[219, "                _ = self._root.Subblock(self._io, self, self._root)"]]}}, "param": {"_io": {"?": [[212, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblocks": {"func": {"__init__": {"? -> ?": [[226, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtensionLabe": {"var": {"graphic_control": {"int": [[23, "        graphic_control = 249"]]}, "application": {"int": [[25, "        application = 255"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicControl.transparent_color_flag": {"param": {"self": {"ExtGraphicControl": [[186, "        def transparent_color_flag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.g": {"class": {"Gif": {"<Gif>": [[15, "class Gif(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.__ini": {"param": {"_parent": {"None": [[92, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[92, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.__ini": {"param": {"_parent": {"None": [[26, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[26, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Extensio": {"func": {"__init__": {"? -> ?": [[239, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.has_interlac": {"param": {"self": {"LocalImageDescriptor": [[117, "        def has_interlace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.BlockTy": {"var": {"local_image_descriptor": {"int": [[19, "        local_image_descriptor = 44"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtApplicatio": {"func": {"__init__": {"? -> ?": [[212, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTable.__init": {"param": {"_io": {"?": [[155, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ImageData.__init": {"param": {"_io": {"?": [[45, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStruct.__ini": {"param": {"_parent": {"Gif": [[64, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Gif": [[64, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStruct.has_color_tab": {"param": {"self": {"LogicalScreenDescriptorStruct": [[75, "        def has_color_table(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Header.__init__": {"param": {"self": {"Header": [[166, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblocks.__init": {"var": {"_": {"?": [[232, "                _ = self._root.Subblock(self._io, self, self._root)"]]}}, "param": {"_io": {"?": [[226, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtApplication.__init__": {"param": {"self": {"ExtApplication": [[212, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Header.__ini": {"param": {"_parent": {"Gif": [[166, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"Gif": [[166, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Block.__init__": {"param": {"self": {"Block": [[142, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescripto": {"func": {"has_interlace": {"LocalImageDescriptor -> bool": [[117, "        def has_interlace(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicControl": {"func": {"__init__": {"? -> ?": [[175, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTable.__init__": {"param": {"self": {"ColorTable": [[155, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicContro": {"func": {"user_input_flag": {"ExtGraphicControl -> bool": [[194, "        def user_input_flag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Extension.__init__": {"param": {"self": {"Extension": [[239, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblock": {"func": {"__init__": {"? -> ?": [[203, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTableEntry.__init": {"param": {"_io": {"?": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.has_sorted_color_tab": {"param": {"self": {"LocalImageDescriptor": [[125, "        def has_sorted_color_table(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LocalImageDescriptor.__init__": {"var": {"io": {"?": [[103, "                io = KaitaiStream(BytesIO(self._raw_local_color_table))"]]}}, "param": {"self": {"LocalImageDescriptor": [[92, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtensionLabel": {"var": {"comment": {"int": [[24, "        comment = 254"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicControl.__init__": {"param": {"self": {"ExtGraphicControl": [[175, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.__init__": {"var": {"io": {"?": [[34, "            io = KaitaiStream(BytesIO(self._raw_global_color_table))"]]}}, "param": {"self": {"Gif": [[26, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStruct.__init__": {"param": {"self": {"LogicalScreenDescriptorStruct": [[64, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ImageData.__ini": {"param": {"_parent": {"None": [[45, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[45, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicControl.user_input_flag": {"param": {"self": {"ExtGraphicControl": [[194, "        def user_input_flag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Header": {"func": {"__init__": {"? -> ?": [[166, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ExtGraphicC": {"func": {"transparent_color_flag": {"ExtGraphicControl -> bool": [[186, "        def transparent_color_flag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblocks.__init__": {"param": {"self": {"Subblocks": [[226, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Extension.__ini": {"param": {"_parent": {"None": [[239, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[239, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Block.__init": {"var": {"_on": {"?": [[147, "            _on = self.block_type"]]}}, "param": {"_io": {"?": [[142, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblock.__init": {"param": {"_io": {"?": [[203, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.__init": {"var": {"_": {"Block": [[39, "            _ = self._root.Block(self._io, self, self._root)"]]}}, "param": {"_io": {"?": [[26, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Subblock.__ini": {"param": {"_parent": {"None": [[203, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[203, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.Block": {"func": {"__init__": {"? -> ?": [[142, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif": {"class": {"ColorTableEntry": {"<ColorTableEntry>": [[53, "    class ColorTableEntry(KaitaiStruct):"]]}, "Extension": {"<Extension>": [[238, "    class Extension(KaitaiStruct):"]]}, "ImageData": {"<ImageData>": [[44, "    class ImageData(KaitaiStruct):"]]}, "Subblocks": {"<Subblocks>": [[225, "    class Subblocks(KaitaiStruct):"]]}, "ExtApplication": {"<ExtApplication>": [[211, "    class ExtApplication(KaitaiStruct):"]]}, "Header": {"<Header>": [[165, "    class Header(KaitaiStruct):"]]}, "Subblock": {"<Subblock>": [[202, "    class Subblock(KaitaiStruct):"]]}, "ColorTable": {"<ColorTable>": [[154, "    class ColorTable(KaitaiStruct):"]]}, "ExtensionLabel": {"<ExtensionLabel>": [[22, "    class ExtensionLabel(Enum):"]]}, "BlockType": {"<BlockType>": [[17, "    class BlockType(Enum):"]]}, "ExtGraphicControl": {"<ExtGraphicControl>": [[174, "    class ExtGraphicControl(KaitaiStruct):"]]}, "LogicalScreenDescriptorStruct": {"<LogicalScreenDescriptorStruct>": [[63, "    class LogicalScreenDescriptorStruct(KaitaiStruct):"]]}, "Block": {"<Block>": [[141, "    class Block(KaitaiStruct):"]]}, "LocalImageDescriptor": {"<LocalImageDescriptor>": [[91, "    class LocalImageDescriptor(KaitaiStruct):"]]}}, "func": {"__init__": {"? -> ?": [[26, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTableEntry": {"func": {"__init__": {"? -> ?": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.LogicalScreenDescriptorStruct.__init": {"param": {"_io": {"?": [[64, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.gif.Gif.ColorTableEntry.__ini": {"param": {"_parent": {"None": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[54, "        def __init__(self, _io, _parent=None, _root=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/examples/test_examples.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_exampl": {"class": {"TestScripts": {"<TestScripts>": [[10, "class TestScripts(tservers.MasterTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_redirect_request": {"var": {"sc": {"?": [[53, "            sc = tctx.script(tdata.path(\"../examples/addons/http-redirect-requests.py\"))"]]}}, "param": {"self": {"TestScripts": [[51, "    def test_redirect_requests(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_modify": {"var": {"form_header": {"Headers": [[29, "            form_header = Headers(content_type=\"application/x-www-form-urlencoded\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_redirect_requests": {"var": {"f": {"?": [[54, "            f = tflow.tflow(req=tutils.treq(host=\"example.org\"))"]]}}, "param": {"tdata": {"?": [[51, "    def test_redirect_requests(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_custom_contentviews": {"var": {"_": {"?": [[22, "            _, fmt = swapcase(b\"<html>Test!</html>\")"]]}}, "param": {"tdata": {"?": [[18, "    def test_custom_contentviews(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_send_reply_from_proxy": {"var": {"sc": {"?": [[60, "            sc = tctx.script(tdata.path(\"../examples/addons/http-reply-from-proxy.py\"))"]]}, "f": {"?": [[61, "            f = tflow.tflow(req=tutils.treq(host=\"example.com\", port=80))"]]}}, "param": {"tdata": {"?": [[58, "    def test_send_reply_from_proxy(self, tdata):"]]}, "self": {"TestScripts": [[58, "    def test_send_reply_from_proxy(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_custom_contentview": {"param": {"self": {"TestScripts": [[18, "    def test_custom_contentviews(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_custom_contentvi": {"var": {"swapcase": {"None": [[21, "            swapcase = contentviews.get(\"swapcase\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScri": {"func": {"test_send_reply_from_proxy": {"(TestScripts, ?) -> None": [[58, "    def test_send_reply_from_proxy(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_modify_form": {"var": {"sc": {"?": [[27, "            sc = tctx.script(tdata.path(\"../examples/addons/http-modify-form.py\"))"]]}, "f": {"?": [[30, "            f = tflow.tflow(req=tutils.treq(headers=form_header))"]]}}, "param": {"tdata": {"?": [[25, "    def test_modify_form(self, tdata):"]]}, "self": {"TestScripts": [[25, "    def test_modify_form(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_add_header": {"var": {"a": {"?": [[13, "            a = tctx.script(tdata.path(\"../examples/addons/scripting-minimal-example.py\"))"]]}, "f": {"?": [[14, "            f = tflow.tflow()"]]}}, "param": {"tdata": {"?": [[11, "    def test_add_header(self, tdata):"]]}, "self": {"TestScripts": [[11, "    def test_add_header(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScripts.test_modify_querystring": {"var": {"sc": {"?": [[41, "            sc = tctx.script(tdata.path(\"../examples/addons/http-modify-query-string.py\"))"]]}, "f": {"?": [[42, "            f = tflow.tflow(req=tutils.treq(path=\"/search?q=term\"))"]]}}, "param": {"tdata": {"?": [[39, "    def test_modify_querystring(self, tdata):"]]}, "self": {"TestScripts": [[39, "    def test_modify_querystring(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.examples.test_examples.TestScrip": {"func": {"test_modify_querystring": {"(TestScripts, ?) -> None": [[39, "    def test_modify_querystring(self, tdata):"]]}, "test_custom_contentviews": {"(TestScripts, ?) -> None": [[18, "    def test_custom_contentviews(self, tdata):"]]}, "test_modify_form": {"(TestScripts, ?) -> None": [[25, "    def test_modify_form(self, tdata):"]]}, "test_redirect_requests": {"(TestScripts, ?) -> None": [[51, "    def test_redirect_requests(self, tdata):"]]}, "test_add_header": {"(TestScripts, ?) -> None": [[11, "    def test_add_header(self, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/anatomy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.anatomy.Coun": {"func": {"request": {"(Counter, ?) -> None": [[13, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.anatomy": {"var": {"addons": {"[Counter]": [[18, "addons = ["]]}}, "class": {"Counter": {"<Counter>": [[9, "class Counter:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.anatomy.Counter.__init__": {"param": {"self": {"Counter": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.anatomy.Counter": {"func": {"__init__": {"? -> ?": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.anatomy.Counter.request": {"param": {"self": {"Counter": [[13, "    def request(self, flow):"]]}, "flow": {"?": [[13, "    def request(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_anticomp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_antic": {"class": {"TestAntiComp": {"<TestAntiComp>": [[7, "class TestAntiComp:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_anticomp.TestAntiComp.test_simple": {"var": {"sa": {"AntiComp": [[9, "        sa = anticomp.AntiComp()"]]}, "f": {"?": [[11, "            f = tflow.tflow(resp=True)"], [15, "            f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_anticomp.TestAntiCo": {"func": {"test_simple": {"TestAntiComp -> None": [[8, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_anticomp.TestAntiComp.test_simp": {"param": {"self": {"TestAntiComp": [[8, "    def test_simple(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/http2/test_framereader.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_framereader.test_parse_frame_combined": {"var": {"f": {"None": [[38, "    f = parse_frame("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_frameread": {"func": {"test_parse_frame": {"() -> None": [[29, "def test_parse_frame():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2": {"func": {"test_parse_frame_combined": {"() -> None": [[37, "def test_parse_frame_combined():"]]}, "test_read_raw_frame_failed": {"() -> None": [[20, "def test_read_raw_frame_failed():"]]}, "test_read_raw_frame": {"() -> None": [[10, "def test_read_raw_frame():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_framereader.test_read_raw_frame": {"var": {"raw": {"?": [[11, "    raw = codecs.decode('000006000101234567666f6f626172', 'hex_codec')"]]}, "bio": {"?": [[12, "    bio = BytesIO(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_framereader.test_read_raw_fram": {"var": {"header": {"?": [[15, "    header, body = read_raw_frame(bio)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_framereader.test_parse_frame": {"var": {"f": {"None": [[30, "    f = parse_frame("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_framereader.test_read_raw_frame_failed": {"var": {"raw": {"?": [[21, "    raw = codecs.decode('485454000000000000', 'hex_codec')"]]}, "bio": {"?": [[22, "    bio = BytesIO(raw)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/http1/assemble.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble._assemble_request_h": {"param": {"request_data": {"RequestData": [[75, "def _assemble_request_headers(request_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_request_head": {"var": {"first_line": {"None": [[13, "    first_line = _assemble_request_line(request.data)"]]}}, "param": {"request": {"{HTTPRequest | None | Request}": [[12, "def assemble_request_head(request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble": {"param": {"body_chunks": {"{[?] | [str]}": [[32, "def assemble_body(headers, body_chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_body": {"var": {"chunk": {"str": [[34, "        for chunk in body_chunks:"], [39, "        for chunk in body_chunks:"]]}}, "param": {"headers": {"{() | Headers}": [[32, "def assemble_body(headers, body_chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble._assemble_request_lin": {"param": {"request_data": {"RequestData": [[43, "def _assemble_request_line(request_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_response_head": {"var": {"first_line": {"?": [[27, "    first_line = _assemble_response_line(response.data)"]]}}, "param": {"response": {"{HTTPResponse | None | Response}": [[26, "def assemble_response_head(response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_request_": {"var": {"headers": {"None": [[14, "    headers = _assemble_request_headers(request.data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_response_": {"var": {"headers": {"?": [[28, "    headers = _assemble_response_headers(response.data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_request": {"var": {"body": {"str": [[8, "    body = b\"\".join(assemble_body(request.data.headers, [request.data.content]))"]]}, "head": {"None": [[7, "    head = assemble_request_head(request)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble._assemble_request_line": {"var": {"form": {"?": [[48, "    form = request_data.first_line_format"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_response": {"var": {"body": {"str": [[22, "    body = b\"\".join(assemble_body(response.data.headers, [response.data.content]))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_": {"param": {"request": {"{HTTPRequest | None | Request}": [[4, "def assemble_request(request):"]]}, "response": {"{HTTPResponse | None | Response}": [[18, "def assemble_response(response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble.assemble_respons": {"var": {"head": {"None": [[21, "    head = assemble_response_head(response)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble._assemble_response_li": {"param": {"response_data": {"ResponseData": [[83, "def _assemble_response_line(response_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1": {"func": {"assemble_request_head": {"HTTPRequest -> None / None -> None / Request -> None / ? -> None": [[12, "def assemble_request_head(request):"]]}, "_assemble_response_line": {"ResponseData -> ? / ? -> ?": [[83, "def _assemble_response_line(response_data):"]]}, "assemble_request": {"HTTPRequest -> None / None -> None / Request -> None / ? -> None": [[4, "def assemble_request(request):"]]}, "assemble_body": {"(?, ?) -> None / (?, [?]) -> None / ({() | Headers}, [str]) -> None / (Headers, [str]) -> None": [[32, "def assemble_body(headers, body_chunks):"]]}, "assemble_response": {"HTTPResponse -> None / Response -> None / None -> None / ? -> None": [[18, "def assemble_response(response):"]]}, "_assemble_response_headers": {"ResponseData -> ? / Response -> ? / ? -> ?": [[91, "def _assemble_response_headers(response):"]]}, "_assemble_request_line": {"? -> None / RequestData -> None": [[43, "def _assemble_request_line(request_data):"]]}, "assemble_response_head": {"HTTPResponse -> None / ? -> None / None -> None / Response -> None": [[26, "def assemble_response_head(response):"]]}, "_assemble_request_headers": {"? -> None / RequestData -> None": [[75, "def _assemble_request_headers(request_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.assemble._assemble_response_head": {"param": {"response": {"{Response | ResponseData}": [[91, "def _assemble_response_headers(response):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/link_expander.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.link_expander.respon": {"var": {"rel_matches": {"?": [[18, "        rel_matches = rel_matcher.finditer(pageText)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.link_expand": {"func": {"response": {"? -> None": [[10, "def response(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.link_expander.respons": {"var": {"pattern": {"str": [[15, "        pattern = (r\"<a\\s+(?:[^>]*?\\s+)?href=(?P<delimiter>[\\\"'])\""]]}, "pageUrl": {"?": [[13, "        pageUrl = flow.request.url"]]}, "pageText": {"?": [[14, "        pageText = flow.response.text"], [25, "            pageText = pageText.replace(*map)"]]}, "rel_matcher": {"?": [[17, "        rel_matcher = re.compile(pattern, flags=re.IGNORECASE)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.link_expander.response": {"var": {"map_dict": {"dict": [[19, "        map_dict = {}"]]}, "map": {"(?, ?)": [[24, "        for map in map_dict.items():"]]}, "abs_link": {"?": [[22, "            abs_link = urljoin(pageUrl, rel_link)"]]}, "match_num": {"?": [[20, "        for match_num, match in enumerate(rel_matches):"]]}}, "param": {"flow": {"?": [[10, "def response(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/duplicate-modify-replay.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.duplicate-modify-replay.request": {"var": {"flow": {"?": [[9, "    flow = flow.copy()"]]}}, "param": {"flow": {"?": [[5, "def request(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.duplicate-modify-replay": {"func": {"request": {"? -> None": [[5, "def request(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/recorder/e.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.e": {"var": {"addons": {"[Recorder]": [[3, "addons = [recorder.Recorder(\"e\")]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/test_check.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.test_check": {"func": {"test_is_valid_host": {"() -> None": [[6, "def test_is_valid_host():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tcp.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.set_": {"param": {"state": {"?": [[23, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.__repr__": {"param": {"self": {"TCPMessage": [[26, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.from_state": {"param": {"cls": {"<TCPMessage>": [[17, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPM": {"func": {"get_state": {"TCPMessage -> (?, ?, int)": [[20, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.get_stat": {"param": {"self": {"TCPMessage": [[20, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPFlow.__init__": {"param": {"self": {"TCPFlow": [[39, "    def __init__(self, client_conn, server_conn, live=None):"]]}, "live": {"RawTCPLayer": [[39, "    def __init__(self, client_conn, server_conn, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessag": {"param": {"from_client": {"bool": [[11, "    def __init__(self, from_client, content, timestamp=None):"]]}}, "func": {"from_state": {"(<TCPMessage>, ?) -> TCPMessage": [[17, "    def from_state(cls, state):"]]}, "set_state": {"(TCPMessage, ?) -> None": [[23, "    def set_state(self, state):"]]}, "__repr__": {"TCPMessage -> str": [[26, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPFlow.__repr__": {"param": {"self": {"TCPFlow": [[46, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPFlow.__init": {"param": {"server_conn": {"{ServerConnection | bool}": [[39, "    def __init__(self, client_conn, server_conn, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.__init__": {"param": {"content": {"str": [[11, "    def __init__(self, from_client, content, timestamp=None):"]]}, "timestamp": {"None": [[11, "    def __init__(self, from_client, content, timestamp=None):"]]}, "self": {"TCPMessage": [[11, "    def __init__(self, from_client, content, timestamp=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.from_": {"param": {"state": {"?": [[17, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage.set_stat": {"param": {"self": {"TCPMessage": [[23, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPFlow": {"var": {"_stateobject_attributes": {"?": [[43, "    _stateobject_attributes = flow.Flow._stateobject_attributes.copy()"]]}}, "param": {"client_conn": {"{ClientConnection | bool}": [[39, "    def __init__(self, client_conn, server_conn, live=None):"]]}}, "func": {"__repr__": {"TCPFlow -> str": [[46, "    def __repr__(self):"]]}, "__init__": {"? -> ?": [[39, "    def __init__(self, client_conn, server_conn, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp.TCPMessage": {"func": {"__init__": {"? -> ?": [[11, "    def __init__(self, from_client, content, timestamp=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tcp": {"class": {"TCPMessage": {"<TCPMessage>": [[9, "class TCPMessage(serializable.Serializable):"]]}, "TCPFlow": {"<TCPFlow>": [[33, "class TCPFlow(flow.Flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/commands-simple.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-simple.MyAddo": {"func": {"__init__": {"? -> ?": [[7, "    def __init__(self):"]]}, "inc": {"MyAddon -> None": [[11, "    def inc(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-simple": {"var": {"addons": {"[MyAddon]": [[16, "addons = ["]]}}, "class": {"MyAddon": {"<MyAddon>": [[6, "class MyAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-simple.MyAddon.__init__": {"param": {"self": {"MyAddon": [[7, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.commands-simple.MyAddon.inc": {"param": {"self": {"MyAddon": [[11, "    def inc(self) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_modifybody.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBody.test_simple": {"var": {"f": {"?": [[27, "            f = tflow.tflow()"], [32, "            f = tflow.tflow(resp=True)"]]}, "mb": {"ModifyBody": [[18, "        mb = modifybody.ModifyBody()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBodyF": {"func": {"test_simple": {"(TestModifyBodyFile, ?) -> None": [[56, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBodyFile.test_simple": {"var": {"f": {"?": [[65, "            f = tflow.tflow()"]]}, "mb": {"ModifyBody": [[57, "        mb = modifybody.ModifyBody()"]]}}, "param": {"tmpdir": {"?": [[56, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBody": {"func": {"test_simple": {"TestModifyBody -> None": [[17, "    def test_simple(self):"]]}, "test_configure": {"TestModifyBody -> None": [[9, "    def test_configure(self):"]]}, "test_order": {"TestModifyBody -> None": [[37, "    def test_order(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBodyFile.test_s": {"var": {"tmpfile": {"?": [[59, "            tmpfile = tmpdir.join(\"replacement\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBodyFile.test_nonexistent": {"var": {"f": {"?": [[87, "            f = tflow.tflow()"]]}, "mb": {"ModifyBody": [[72, "        mb = modifybody.ModifyBody()"]]}}, "param": {"self": {"TestModifyBodyFile": [[71, "    async def test_nonexistent(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBodyFile.test_simp": {"param": {"self": {"TestModifyBodyFile": [[56, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBody.test_configure": {"var": {"mb": {"ModifyBody": [[10, "        mb = modifybody.ModifyBody()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBody.test_configur": {"param": {"self": {"TestModifyBody": [[9, "    def test_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBodyFile.test_nonexisten": {"var": {"tmpfile": {"?": [[80, "            tmpfile = tmpdir.join(\"replacement\")"]]}}, "param": {"tmpdir": {"?": [[71, "    async def test_nonexistent(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBody.test_order": {"var": {"f": {"?": [[49, "            f = tflow.tflow()"]]}, "mb": {"ModifyBody": [[38, "        mb = modifybody.ModifyBody()"]]}}, "param": {"self": {"TestModifyBody": [[37, "    def test_order(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyb": {"class": {"TestModifyBodyFile": {"<TestModifyBodyFile>": [[55, "class TestModifyBodyFile:"]]}, "TestModifyBody": {"<TestModifyBody>": [[8, "class TestModifyBody:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifybody.TestModifyBody.test_simp": {"param": {"self": {"TestModifyBody": [[17, "    def test_simple(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/serverplayback.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback": {"param": {"loader": {"?": [[21, "    def load(self, loader):"]]}}, "func": {"load": {"(ServerPlayback, ?) -> None": [[21, "    def load(self, loader):"]]}, "count": {"ServerPlayback -> int": [[111, "    def count(self) -> int:"]]}, "configure": {"(ServerPlayback, ?) -> ?": [[190, "    def configure(self, updated):"]]}, "clear": {"ServerPlayback -> None": [[103, "    def clear(self) -> None:"]]}, "next_flow": {"(ServerPlayback, ?) -> None": [[163, "    def next_flow(self, flow: http.HTTPFlow) -> typing.Optional[http.HTTPFlow]:"]]}, "request": {"(ServerPlayback, ?) -> None": [[199, "    def request(self, f: http.HTTPFlow) -> None:"]]}, "load_flows": {"(ServerPlayback, ?) -> None / (ServerPlayback, [?]) -> None": [[83, "    def load_flows(self, flows: typing.Sequence[flow.Flow]) -> None:"]]}, "_hash": {"(ServerPlayback, ?) -> None / (ServerPlayback, HTTPFlow) -> None": [[114, "    def _hash(self, flow: http.HTTPFlow) -> typing.Hashable:"]]}, "load_file": {"(ServerPlayback, ?) -> ? / (ServerPlayback, str) -> ?": [[95, "    def load_file(self, path: mitmproxy.types.Path) -> None:"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.load_flows": {"var": {"f": {"?": [[88, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.count": {"param": {"self": {"ServerPlayback": [[111, "    def count(self) -> int:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.load_flow": {"var": {"lst": {"?": [[90, "                lst = self.flowmap.setdefault(self._hash(f), [])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback._hash": {"var": {"queriesArray": {"?": [[120, "        queriesArray = urllib.parse.parse_qsl(query, keep_blank_values=True)"]]}, "i": {"?": [[155, "            for i in ctx.options.server_replay_use_headers:"]]}, "p": {"?": [[146, "        for p in queriesArray:"], [149, "        for p in filtered:"]]}, "r": {"?": [[118, "        r = flow.request"]]}, "v": {"?": [[156, "                v = r.headers.get(i)"]]}, "filtered": {"[?]": [[144, "        filtered = []"]]}, "ignore_params": {"[?]": [[145, "        ignore_params = ctx.options.server_replay_ignore_params or []"]]}, "_": {"?": [[119, "        _, _, path, _, query, _ = urllib.parse.urlparse(r.url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.next_flow": {"var": {"hash": {"None": [[168, "        hash = self._hash(flow)"]]}, "ret": {"?": [[177, "                ret = self.flowmap[hash].pop(0)"], [180, "                        ret = self.flowmap[hash].pop(0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.request": {"var": {"rflow": {"None": [[201, "            rflow = self.next_flow(f)"]]}, "response": {"?": [[204, "                response = rflow.response.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.configur": {"param": {"self": {"ServerPlayback": [[190, "    def configure(self, updated):"]]}, "updated": {"?": [[190, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.load_file": {"var": {"flows": {"[?]": [[97, "            flows = io.read_flows_from_paths([path])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback._": {"var": {"headers": {"[(?, ?)]": [[154, "            headers = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.load": {"param": {"self": {"ServerPlayback": [[21, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.configure": {"var": {"flows": {"[?]": [[194, "                flows = io.read_flows_from_paths(ctx.options.server_replay)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverp": {"class": {"ServerPlayback": {"<ServerPlayback>": [[13, "class ServerPlayback:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.__init__": {"param": {"self": {"ServerPlayback": [[17, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.serverplayback.ServerPlayback.clear": {"param": {"self": {"ServerPlayback": [[103, "    def clear(self) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/watchdog.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddon": {"func": {"error": {"(WatchdogAddon, ?) -> None": [[50, "    def error(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddo": {"func": {"__init__": {"? -> ?": [[24, "    def __init__(self, event, outdir: pathlib.Path, timeout=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddon.not_in_": {"param": {"timeout": {"?": [[46, "    def not_in_timeout(cls, last_triggered, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddon.not_in_timeout": {"param": {"cls": {"<WatchdogAddon>": [[46, "    def not_in_timeout(cls, last_triggered, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddon.error": {"param": {"self": {"WatchdogAddon": [[50, "    def error(self, flow):"]]}, "flow": {"?": [[50, "    def error(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddon.not_in_timeou": {"param": {"last_triggered": {"?": [[46, "    def not_in_timeout(cls, last_triggered, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.w": {"class": {"WatchdogAddon": {"<WatchdogAddon>": [[15, "class WatchdogAddon():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchd": {"var": {"logger": {"?": [[12, "logger = logging.getLogger(__name__)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAdd": {"func": {"serverconnect": {"(WatchdogAddon, ?) -> None": [[41, "    def serverconnect(self, conn: mitmproxy.connections.ServerConnection):"]]}, "not_in_timeout": {"(<WatchdogAddon>, ?, ?) -> bool": [[46, "    def not_in_timeout(cls, last_triggered, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.watchdog.WatchdogAddon.__init__": {"param": {"self": {"WatchdogAddon": [[24, "    def __init__(self, event, outdir: pathlib.Path, timeout=None):"]]}, "event": {"?": [[24, "    def __init__(self, event, outdir: pathlib.Path, timeout=None):"]]}, "timeout": {"None": [[24, "    def __init__(self, event, outdir: pathlib.Path, timeout=None):"]]}, "outdir": {"?": [[24, "    def __init__(self, event, outdir: pathlib.Path, timeout=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/db.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db": {"class": {"DBHandler": {"<DBHandler>": [[7, "class DBHandler:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler": {"func": {"load": {"DBHandler -> [HTTPFlow]": [[35, "    def load(self):"]]}, "__init__": {"? -> ?": [[13, "    def __init__(self, db_path, mode='load'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler._create_db": {"param": {"self": {"DBHandler": [[22, "    def _create_db(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler.__ini": {"param": {"db_path": {"?": [[13, "    def __init__(self, db_path, mode='load'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler.store": {"var": {"flow": {"?": [[30, "        for flow in flows:"]]}, "blobs": {"[None]": [[29, "        blobs = []"]]}}, "param": {"flows": {"[?]": [[28, "    def store(self, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler.stor": {"param": {"self": {"DBHandler": [[28, "    def store(self, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandl": {"func": {"store": {"(DBHandler, ?) -> None / (DBHandler, [?]) -> None": [[28, "    def store(self, flows):"]]}, "_create_db": {"DBHandler -> None": [[22, "    def _create_db(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler.__init__": {"param": {"self": {"DBHandler": [[13, "    def __init__(self, db_path, mode='load'):"]]}, "mode": {"str": [[13, "    def __init__(self, db_path, mode='load'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.db.DBHandler.load": {"var": {"flows": {"[HTTPFlow]": [[36, "        flows = []"]]}, "row": {"?": [[38, "        for row in self._c.fetchall():"]]}}, "param": {"self": {"DBHandler": [[35, "    def load(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/concurrent_decorator.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorato": {"func": {"request": {"? -> None": [[7, "def request(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator.request": {"param": {"flow": {"?": [[7, "def request(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/request.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.path_component": {"param": {"self": {"Request": [[364, "    def path_components(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.anticache": {"var": {"i": {"str": [[391, "        for i in delheaders:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.constrain_encoding": {"param": {"self": {"{HTTPRequest | Request}": [[401, "    def constrain_encoding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.make": {"var": {"url": {"str": [[91, "            url: str,"]]}, "cls": {"<Request>": [[89, "            cls,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Req": {"func": {"_set_urlencoded_form": {"(Request, ?) -> None": [[422, "    def _set_urlencoded_form(self, form_data):"]]}, "_set_multipart_form": {"(Request, ?) -> None": [[457, "    def _set_multipart_form(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.schem": {"param": {"self": {"Request": [[160, "    def scheme(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_urlencoded_form": {"param": {"self": {"Request": [[422, "    def _set_urlencoded_form(self, form_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.ur": {"param": {"self": {"Request": [[268, "    def url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.r": {"class": {"RequestData": {"<RequestData>": [[20, "class RequestData(message.MessageData):"]]}, "Request": {"<Request>": [[67, "class Request(message.Message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.host_header": {"param": {"self": {"Request": [[206, "    def host_header(self) -> Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.requ": {"var": {"host_header_re": {"?": [[17, "host_header_re = re.compile(r\"^(?P<host>[^:]+|\\[.+\\])(?::(?P<port>\\d+))?$\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.first_line_format": {"param": {"self": {"Request": [[136, "    def first_line_format(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.R": {"func": {"_set_query": {"(Request, ?) -> None": [[321, "    def _set_query(self, query_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.urlencoded_form": {"param": {"self": {"Request": [[431, "    def urlencoded_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.mak": {"var": {"content": {"str": [[92, "            content: Union[bytes, str] = \"\","]]}, "headers": {"{() | dict}": [[93, "            headers: Union[Dict[str, AnyStr], Iterable[Tuple[bytes, bytes]]] = ()"]]}, "req": {"Request": [[98, "        req = cls("]]}, "method": {"str": [[90, "            method: str,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.port": {"param": {"self": {"Request": [[242, "    def port(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.multipart_form": {"param": {"self": {"Request": [[462, "    def multipart_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.anticac": {"var": {"delheaders": {"[str]": [[387, "        delheaders = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._get_cookies": {"var": {"h": {"?": [[341, "        h = self.headers.get_all(\"Cookie\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_query": {"var": {"_": {"?": [[323, "        _, _, path, params, _, fragment = urllib.parse.urlparse(self.url)"]]}}, "param": {"self": {"Request": [[321, "    def _set_query(self, query_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.path_components": {"var": {"path": {"?": [[369, "        path = urllib.parse.urlparse(self.url).path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_": {"var": {"query": {"None": [[322, "        query = mitmproxy.net.http.url.encode(query_data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_cookies": {"param": {"value": {"?": [[344, "    def _set_cookies(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.RequestD": {"var": {"first_line_format": {"{(HTTPRequest, ?, ?, ?, ?, ?, ?, ?, ?, ?, None, None, None) | (HTTPRequest, str, ?, ?, str, int, ?, str, ?, None, None, None, None) | (HTTPRequest, str, str, None, ?, ?, None, str, Headers, str, None, None, None) | (HTTPRequest, str, str, None, {int | str}, {int | str}, None, str, Headers, str, None, None, None) | (HTTPRequest, str, str, str, str, int, str, str, ?, ?, None, None, None) | (str, ?, ?, str, int, ?, str, Headers, str, None) | (str, ?, None, None, int, str, ?, Headers, None, None, int) | (str, ?, str, str, str, ?, (int, int), Headers, _HTTP2Message -> ?) | (str, ?, str, str, str, str, str, (), str) | (str, str, str, str, ?, str, str) | (str, str, str, str, ?, str, str, [(str, str)], str) | (str, str, str, str, str, str, str, (), None) | (str, str, str, str, str, str, str, (), str) | (str, str, str, str, str, str, str, Headers, str)}": [[23, "        first_line_format,"]]}, "timestamp_end": {"None": [[34, "        timestamp_end=None"]]}}, "param": {"first_line_format": {"{(HTTPRequest, ?, ?, ?, ?, ?, ?, ?, ?, ?, None, None, None) | (HTTPRequest, str, ?, ?, str, int, ?, str, ?, None, None, None, None) | (HTTPRequest, str, str, None, ?, ?, None, str, Headers, str, None, None, None) | (HTTPRequest, str, str, None, {int | str}, {int | str}, None, str, Headers, str, None, None, None) | (HTTPRequest, str, str, str, str, int, str, str, ?, ?, None, None, None) | (str, ?, ?, str, int, ?, str, Headers, str, None) | (str, ?, None, None, int, str, ?, Headers, None, None, int) | (str, ?, str, str, str, ?, (int, int), Headers, _HTTP2Message -> ?) | (str, ?, str, str, str, str, str, (), str) | (str, str, str, str, ?, str, str) | (str, str, str, str, ?, str, str, [(str, str)], str) | (str, str, str, str, str, str, str, (), None) | (str, str, str, str, str, str, str, (), str) | (str, str, str, str, str, str, str, Headers, str)}": [[35, "    ):"]]}, "timestamp_end": {"None": [[35, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.anticach": {"param": {"self": {"Request": [[382, "    def anticache(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._parse_host_header": {"var": {"host": {"? -> ?": [[282, "        host = self.host_header"]], "?": [[288, "            host = m.group(\"host\").strip(\"[]\")"]]}, "m": {"?": [[286, "        m = host_header_re.match(host)"]]}}, "param": {"self": {"Request": [[280, "    def _parse_host_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.RequestData": {"var": {"http_version": {"?": [[29, "        http_version,"], [45, "            http_version = http_version.encode(\"ascii\", \"strict\")"]]}}, "param": {"http_version": {"?": [[35, "    ):"]]}}, "func": {"__init__": {"? -> ?": [[21, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_urlencode": {"param": {"form_data": {"?": [[422, "    def _set_urlencoded_form(self, form_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.cooki": {"param": {"self": {"Request": [[348, "    def cookies(self) -> multidict.MultiDictView:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_multipart_form": {"param": {"self": {"Request": [[457, "    def _set_multipart_form(self, value):"]]}, "value": {"?": [[457, "    def _set_multipart_form(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._get_multipart_form": {"var": {"is_valid_content_type": {"bool": [[449, "        is_valid_content_type = \"multipart/form-data\" in self.headers.get(\"content-type\", \"\").lower()"]]}}, "param": {"self": {"{MultiDictView | Request}": [[448, "    def _get_multipart_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.RequestData.__init__": {"var": {"trailers": {"Headers": [[51, "            trailers = nheaders.Headers(trailers)"]], "None": [[32, "        trailers=None,"]]}, "self": {"RequestData": [[22, "        self,"]]}, "port": {"?": [[27, "        port,"]]}, "content": {"None": [[31, "        content=None,"]]}, "headers": {"Headers": [[47, "            headers = nheaders.Headers(headers)"]], "()": [[30, "        headers=(),"]]}, "host": {"?": [[26, "        host,"], [41, "            host = host.encode(\"idna\", \"strict\")"]]}, "path": {"?": [[28, "        path,"], [43, "            path = path.encode(\"ascii\", \"strict\")"]]}, "scheme": {"?": [[25, "        scheme,"], [39, "            scheme = scheme.encode(\"ascii\", \"strict\")"]]}, "method": {"?": [[24, "        method,"], [37, "            method = method.encode(\"ascii\", \"strict\")"]]}}, "param": {"trailers": {"None": [[35, "    ):"]]}, "self": {"RequestData": [[35, "    ):"]]}, "port": {"?": [[35, "    ):"]]}, "content": {"None": [[35, "    ):"]]}, "headers": {"()": [[35, "    ):"]]}, "host": {"?": [[35, "    ):"]]}, "path": {"?": [[35, "    ):"]]}, "scheme": {"?": [[35, "    ):"]]}, "method": {"?": [[35, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._s": {"param": {"query_data": {"?": [[321, "    def _set_query(self, query_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._get_": {"var": {"query": {"?": [[318, "        query = urllib.parse.urlparse(self.url).query"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Requ": {"func": {"_parse_host_header": {"Request -> (? -> ?, int)": [[280, "    def _parse_host_header(self):"]]}, "constrain_encoding": {"Request -> None / HTTPRequest -> None": [[401, "    def constrain_encoding(self):"]]}, "_set_cookies": {"(Request, ?) -> None": [[344, "    def _set_cookies(self, value):"]]}, "pretty_host": {"Request -> {? -> ? | ? -> ? | str}": [[294, "    def pretty_host(self):"]]}, "_get_cookies": {"Request -> tuple": [[340, "    def _get_cookies(self):"]]}, "first_line_format": {"? -> ?": [[145, "    def first_line_format(self, first_line_format):"]], "Request -> None": [[136, "    def first_line_format(self):"]]}, "host_header": {"{? -> ? | str}": [[238, "    def host_header(self):"]], "? -> ?": [[220, "    def host_header(self, val: Optional[str]) -> None:"]], "Request -> None": [[206, "    def host_header(self) -> Optional[str]:"]]}, "path_components": {"{? -> ? | [?] | [str]}": [[376, "    def path_components(self, components):"]], "Request -> tuple": [[364, "    def path_components(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.pretty_ur": {"param": {"self": {"Request": [[309, "    def pretty_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.pretty_host": {"param": {"self": {"Request": [[294, "    def pretty_host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.query": {"param": {"self": {"Request": [[327, "    def query(self) -> multidict.MultiDictView:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Reque": {"func": {"host": {"{? -> ? | str}": [[189, "    def host(self, host):"]], "Request -> str": [[173, "    def host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.constr": {"var": {"accept_encoding": {"?": [[406, "        accept_encoding = self.headers.get(\"accept-encoding\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._get_urlencoded_form": {"var": {"is_valid_content_type": {"bool": [[417, "        is_valid_content_type = \"application/x-www-form-urlencoded\" in self.headers.get(\"content-type\", \"\").lower()"]]}}, "param": {"self": {"Request": [[416, "    def _get_urlencoded_form(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.__repr__": {"var": {"path": {"?": [[82, "        path = self.path or \"\""]]}, "hostport": {"str": [[79, "            hostport = \"{}:{}\".format(self.host, self.port)"], [81, "            hostport = \"\""]]}}, "param": {"self": {"Request": [[77, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.pretty_hos": {"var": {"port": {"int": [[304, "            port = 443 if self.scheme == 'https' else 80"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request": {"func": {"cookies": {"Request -> MultiDictView": [[348, "    def cookies(self) -> multidict.MultiDictView:"]], "{? -> ? | [[str]]}": [[360, "    def cookies(self, value):"]]}, "url": {"{? -> ? | str}": [[277, "    def url(self, url):"]], "Request -> None": [[268, "    def url(self):"]]}, "make": {"(<Request>, str, str, str, dict) -> Request / (<Request>, ?, ?, str, ()) -> Request / (<Request>, str, str, str, ()) -> Request": [[88, "    def make("]]}, "__repr__": {"Request -> str": [[77, "    def __repr__(self):"]]}, "query": {"Request -> MultiDictView": [[327, "    def query(self) -> multidict.MultiDictView:"]], "{? -> ? | [(str, str)]}": [[337, "    def query(self, value):"]]}, "scheme": {"{? -> ? | str}": [[169, "    def scheme(self, scheme):"]], "Request -> None": [[160, "    def scheme(self):"]]}, "urlencoded_form": {"Request -> MultiDictView": [[431, "    def urlencoded_form(self):"]], "{? -> ? | [(str, str)]}": [[445, "    def urlencoded_form(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.path": {"param": {"self": {"Request": [[253, "    def path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.pretty_": {"var": {"host": {"? -> ?": [[300, "        host, port = self._parse_host_header()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._get_cooki": {"param": {"self": {"Request": [[340, "    def _get_cookies(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._parse_host_heade": {"var": {"port": {"int": [[290, "                port = int(m.group(\"port\"))"]], "None": [[285, "        port = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.anticomp": {"param": {"self": {"Request": [[394, "    def anticomp(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.RequestData.__in": {"var": {"timestamp_start": {"None": [[33, "        timestamp_start=None,"]]}}, "param": {"timestamp_start": {"None": [[35, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.__init__": {"param": {"self": {"{<Request> | Request}": [[73, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.host": {"param": {"self": {"Request": [[173, "    def host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Reques": {"func": {"_get_urlencoded_form": {"Request -> {() | tuple}": [[416, "    def _get_urlencoded_form(self):"]]}, "pretty_url": {"Request -> None": [[309, "    def pretty_url(self):"]]}, "_get_multipart_form": {"MultiDictView -> {() | [(?, str)] | [?]} / Request -> {() | [(?, str)] | [?]}": [[448, "    def _get_multipart_form(self):"]]}, "multipart_form": {"Request -> MultiDictView": [[462, "    def multipart_form(self):"]], "{? -> ? | [(str, str)]}": [[476, "    def multipart_form(self, value):"]]}, "port": {"Request -> None": [[242, "    def port(self):"]], "{? -> ? | int}": [[249, "    def port(self, port):"]]}, "anticomp": {"Request -> None": [[394, "    def anticomp(self):"]]}, "_get_query": {"Request -> tuple": [[317, "    def _get_query(self):"]]}, "anticache": {"Request -> None": [[382, "    def anticache(self):"]]}, "path": {"? -> ?": [[264, "    def path(self, path):"]], "Request -> None": [[253, "    def path(self):"]]}, "method": {"? -> ?": [[156, "    def method(self, method):"]], "Request -> None": [[149, "    def method(self):"]]}, "__init__": {"? -> ?": [[73, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._set_cooki": {"param": {"self": {"Request": [[344, "    def _set_cookies(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request.method": {"param": {"self": {"Request": [[149, "    def method(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.request.Request._get_query": {"param": {"self": {"Request": [[317, "    def _get_query(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/sslstrip.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstrip.respons": {"var": {"new_header": {"?": [[57, "        new_header = re.sub(r'upgrade-insecure-requests[;\\s]*', '', csp, flags=re.IGNORECASE)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstrip": {"func": {"request": {"? -> None": [[15, "def request(flow: http.HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstrip.resp": {"var": {"hostname": {"?": [[48, "        hostname = urllib.parse.urlparse(location).hostname"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstrip.response": {"var": {"location": {"?": [[47, "        location = flow.response.headers['Location']"]]}, "csp": {"?": [[56, "        csp = flow.response.headers['Content-Security-Policy']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstrip.respon": {"var": {"csp_header": {"?": [[54, "    csp_header = flow.response.headers.get('Content-Security-Policy', '')"]]}, "cookies": {"[?]": [[62, "    cookies = [re.sub(r';\\s*secure\\s*', '', s) for s in cookies]"]], "?": [[61, "    cookies = flow.response.headers.get_all('Set-Cookie')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstrip.respo": {"var": {"csp_meta_tag_pattern": {"str": [[42, "    csp_meta_tag_pattern = br'<meta.*http-equiv=[\"\\']Content-Security-Policy[\\'\"].*upgrade-insecure-requests.*?>'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.sslstri": {"func": {"response": {"? -> None": [[33, "def response(flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/stateobject.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObject.get_stat": {"param": {"self": {"{Child | ClientConnection | Error | StateObject | TAny | TDict | TList | TSerializableChild | TTuple}": [[23, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateo": {"class": {"StateObject": {"<StateObject>": [[8, "class StateObject(serializable.Serializable):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.s": {"func": {"make_object": {"(?, ?) -> {[{[?] | dict | tuple}] | dict | tuple}": [[92, "def make_object(typeinfo: typecheck.Type, val: typing.Any) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObject.get_state": {"var": {"attr": {"?": [[28, "        for attr, cls in self._stateobject_attributes.items():"]]}, "val": {"?": [[29, "            val = getattr(self, attr)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObject.set_state": {"var": {"curr": {"?": [[43, "                curr = getattr(self, attr, None)"]]}, "attr": {"?": [[38, "        for attr, cls in self._stateobject_attributes.items():"]]}, "val": {"?": [[39, "            val = state.pop(attr)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObject.set_": {"var": {"state": {"?": [[37, "        state = state.copy()"]]}}, "param": {"state": {"{dict | dict | dict | dict | dict | dict | dict}": [[33, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObject.get_": {"var": {"state": {"{dict | dict}": [[27, "        state = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject._process": {"var": {"typename": {"str": [[60, "    typename = str(typeinfo)"]]}, "T": {"None": [[63, "        T = typecheck.sequence_type(typeinfo)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject": {"func": {"_process": {"(None, ?, ?) -> {[?] | dict | tuple} / (?, ?, ?) -> {[{[?] | dict | tuple}] | dict | tuple}": [[52, "def _process(typeinfo: typecheck.Type, val: typing.Any, make: bool) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobjec": {"func": {"get_state": {"(?, ?) -> {[{[?] | dict | tuple}] | dict | tuple}": [[97, "def get_state(typeinfo: typecheck.Type, val: typing.Any) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject._proce": {"var": {"k_cls": {"?": [[73, "        k_cls, v_cls = typecheck.mapping_types(typeinfo)"]]}, "Ts": {"None": [[66, "        Ts = typecheck.tuple_types(typeinfo)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObject.set_stat": {"param": {"self": {"{Child | ClientConnection | Error | ServerConnection | StateObject | TObject | TSerializableChild | TTuple}": [[33, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.stateobject.StateObjec": {"func": {"set_state": {"(TTuple, dict) -> ? / (Child, dict) -> None / (ClientConnection, ?) -> None / (Error, ?) -> None / (TObject, dict) -> None / (StateObject, ?) -> None / (TSerializableChild, dict) -> None / (ClientConnection, dict) -> None / (ServerConnection, dict) -> None / (ServerConnection, ?) -> None": [[33, "    def set_state(self, state):"]]}, "get_state": {"Error -> dict / TDict -> dict / TList -> dict / Child -> dict / TSerializableChild -> dict / ClientConnection -> dict / TAny -> dict / StateObject -> dict / TTuple -> dict": [[23, "    def get_state(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/platform/openbsd.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.openbs": {"func": {"original_addr": {"? -> ?": [[2, "def original_addr(csock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.platform.openbsd.original_addr": {"param": {"csock": {"?": [[2, "def original_addr(csock):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/root_context.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext.next_layer": {"param": {"self": {"RootContext": [[31, "    def next_layer(self, top_layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext.lo": {"var": {"full_msg": {"[str]": [[125, "        full_msg = ["]], "str": [[130, "        full_msg = \"\\n\".join(full_msg)"]]}}, "param": {"msg": {"{Socks5Proxy | TlsLayer}": [[121, "    def log(self, msg, level, subs=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext._next_lay": {"var": {"is_filtered": {"?": [[53, "            is_filtered = self.config.check_filter(top_layer.server_conn.address)"], [61, "                    is_filtered = self.config.check_filter((sni_str, 443))"]]}, "server_tls": {"bool": [[81, "                server_tls = top_layer.connect_request.scheme == \"https\""], [83, "                server_tls = client_tls"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContex": {"param": {"client_conn": {"ClientConnection": [[26, "    def __init__(self, client_conn, config, channel):"]]}}, "func": {"__init__": {"? -> ?": [[26, "    def __init__(self, client_conn, config, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext.nex": {"param": {"top_layer": {"Socks5Proxy": [[31, "    def next_layer(self, top_layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext": {"func": {"log": {"(RootContext, ?, ?, ()) -> None / (RootContext, str, str, ()) -> None": [[121, "    def log(self, msg, level, subs=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext.__init__": {"param": {"self": {"RootContext": [[26, "    def __init__(self, client_conn, config, channel):"]]}, "config": {"?": [[26, "    def __init__(self, client_conn, config, channel):"]]}, "channel": {"?": [[26, "    def __init__(self, client_conn, config, channel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootCo": {"func": {"_next_layer": {"(RootContext, Socks5Proxy) -> {Http1Layer | Http2Layer | RawTCPLayer | TlsLayer} / (RootContext, ?) -> {Http1Layer | Http2Layer | RawTCPLayer | TlsLayer}": [[44, "    def _next_layer(self, top_layer):"]]}, "next_layer": {"(RootContext, Socks5Proxy) -> None / (RootContext, ?) -> None": [[31, "    def next_layer(self, top_layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_c": {"class": {"RootContext": {"<RootContext>": [[9, "class RootContext:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext.log": {"var": {"i": {"?": [[128, "        for i in subs:"]]}}, "param": {"self": {"<Http1Layer>": [[121, "    def log(self, msg, level, subs=()):"]]}, "subs": {"<HTTPMode>": [[121, "    def log(self, msg, level, subs=()):"]]}, "level": {"http": [[121, "    def log(self, msg, level, subs=()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext._next_layer": {"var": {"is_ascii": {"?": [[110, "        is_ascii = ("]]}, "client_tls": {"bool": [[49, "        client_tls = tls.is_tls_record_magic(d)"]]}, "client_hello": {"ClientHello": [[56, "                    client_hello = tls.ClientHello.from_file(self.client_conn.rfile)"]]}, "d": {"?": [[46, "            d = top_layer.client_conn.rfile.peek(3)"]]}, "alpn": {"?": [[103, "            alpn = top_layer.client_conn.get_alpn_proto_negotiated()"]]}}, "param": {"self": {"RootContext": [[44, "    def _next_layer(self, top_layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext._next_laye": {"var": {"sni_str": {"ClientHello -> None": [[60, "                    sni_str = client_hello.sni and client_hello.sni.decode(\"idna\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext.next_": {"var": {"layer": {"{Http1Layer | Http2Layer | RawTCPLayer | TlsLayer}": [[41, "        layer = self._next_layer(top_layer)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.root_context.RootContext._nex": {"param": {"top_layer": {"Socks5Proxy": [[44, "    def _next_layer(self, top_layer):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/recorder/b.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.recorder.b": {"var": {"addons": {"[Recorder]": [[3, "addons = [recorder.Recorder(\"b\")]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/websockets/test_utils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_server_acce": {"param": {"input": {"?": [[103, "    def test_get_server_accept(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_check_handshak": {"param": {"expected": {"?": [[44, "    def test_check_handshake(self, input, expected):"]]}, "self": {"TestUtils": [[44, "    def test_check_handshake(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_protocol": {"var": {"h": {"Headers": [[84, "        h = http.Headers(input)"]]}}, "param": {"expected": {"?": [[83, "    def test_get_protocol(self, input, expected):"]]}, "input": {"?": [[83, "    def test_get_protocol(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_server_handshake_headers": {"var": {"h": {"Headers": [[23, "        h = websockets.server_handshake_headers('some-key')"], [28, "        h = websockets.server_handshake_headers('some-key', 'foobar', 'foo; bar')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_client_handshake_header": {"param": {"self": {"TestUtils": [[9, "    def test_client_handshake_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_client_key": {"var": {"h": {"Headers": [[94, "        h = http.Headers(input)"]]}}, "param": {"expected": {"?": [[93, "    def test_get_client_key(self, input, expected):"]]}, "input": {"?": [[93, "    def test_get_client_key(self, input, expected):"]]}, "self": {"TestUtils": [[93, "    def test_get_client_key(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_create_server_nonc": {"param": {"self": {"TestUtils": [[64, "    def test_create_server_nonce(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_server_handshake_header": {"param": {"self": {"TestUtils": [[22, "    def test_server_handshake_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_client_handshake_headers": {"var": {"h": {"Headers": [[10, "        h = websockets.client_handshake_headers(version='42')"], [13, "        h = websockets.client_handshake_headers(key='some-key')"], [16, "        h = websockets.client_handshake_headers(protocol='foobar')"], [19, "        h = websockets.client_handshake_headers(extensions='foo; bar')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_check_handshake": {"var": {"h": {"Headers": [[45, "        h = http.Headers(input)"]]}}, "param": {"input": {"?": [[44, "    def test_check_handshake(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_protoco": {"param": {"self": {"TestUtils": [[83, "    def test_get_protocol(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUti": {"func": {"test_get_protocol": {"(TestUtils, ?, ?) -> None": [[83, "    def test_get_protocol(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtil": {"func": {"test_get_extensions": {"(TestUtils, ?, ?) -> None": [[73, "    def test_get_extensions(self, input, expected):"]]}, "test_server_handshake_headers": {"TestUtils -> None": [[22, "    def test_server_handshake_headers(self):"]]}, "test_check_handshake": {"(TestUtils, ?, ?) -> None": [[44, "    def test_check_handshake(self, input, expected):"]]}, "test_create_server_nonce": {"(TestUtils, ?, ?) -> None": [[64, "    def test_create_server_nonce(self, input, expected):"]]}, "test_get_server_accept": {"(TestUtils, ?, ?) -> None": [[103, "    def test_get_server_accept(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_create_server_non": {"param": {"expected": {"?": [[64, "    def test_create_server_nonce(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_create_server_nonce": {"param": {"input": {"?": [[64, "    def test_create_server_nonce(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_extension": {"param": {"self": {"TestUtils": [[73, "    def test_get_extensions(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_check_client_versio": {"param": {"input": {"?": [[56, "    def test_check_client_version(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_server_a": {"param": {"expected": {"?": [[103, "    def test_get_server_accept(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_check_client_version": {"var": {"h": {"Headers": [[57, "        h = http.Headers(input)"]]}}, "param": {"expected": {"?": [[56, "    def test_check_client_version(self, input, expected):"]]}, "self": {"TestUtils": [[56, "    def test_check_client_version(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_server_accept": {"var": {"h": {"Headers": [[104, "        h = http.Headers(input)"]]}}, "param": {"self": {"TestUtils": [[103, "    def test_get_server_accept(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_u": {"class": {"TestUtils": {"<TestUtils>": [[7, "class TestUtils:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestU": {"func": {"test_check_client_version": {"(TestUtils, ?, ?) -> None": [[56, "    def test_check_client_version(self, input, expected):"]]}, "test_get_client_key": {"(TestUtils, ?, ?) -> None": [[93, "    def test_get_client_key(self, input, expected):"]]}, "test_client_handshake_headers": {"TestUtils -> None": [[9, "    def test_client_handshake_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.websockets.test_utils.TestUtils.test_get_extensions": {"var": {"h": {"Headers": [[74, "        h = http.Headers(input)"]]}}, "param": {"expected": {"?": [[73, "    def test_get_extensions(self, input, expected):"]]}, "input": {"?": [[73, "    def test_get_extensions(self, input, expected):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/http2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Reques": {"func": {"path": {"Request -> ?": [[235, "    def path(self):"]]}, "method": {"Request -> ?": [[231, "    def method(self):"]]}, "__init__": {"? -> ?": [[225, "    def __init__(self, tokens):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.__init__": {"param": {"tokens": {"[{Body | StatusCode}]": [[160, "    def __init__(self, tokens):"]]}, "self": {"Response": [[160, "    def __init__(self, tokens):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Respon": {"func": {"status_code": {"Response -> ?": [[166, "    def status_code(self):"]]}, "values": {"(Response, Settings) -> None / (Response, ?) -> None": [[182, "    def values(self, settings):"]]}, "spec": {"Response -> str": [[204, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message.raw": {"param": {"self": {"_HTTP2Message": [[79, "    def raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.expr": {"var": {"atom": {"?": [[249, "        atom = pp.MatchFirst(parts)"]]}}, "param": {"cls": {"<Request>": [[247, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message": {"func": {"body": {"_HTTP2Message -> ?": [[83, "    def body(self):"]]}, "raw": {"_HTTP2Message -> bool": [[79, "    def raw(self):"]]}, "actions": {"_HTTP2Message -> [?]": [[57, "    def actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.ex": {"var": {"resp": {"?": [[250, "        resp = pp.And("], [258, "        resp = resp.setParseAction(cls)"]]}, "parts": {"[?]": [[248, "        parts = [i.expr() for i in cls.comps]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message.headers": {"var": {"length": {"int": [[67, "                    length = 0"], [69, "                    length = len(self.body.string())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.valu": {"var": {"headers": {"Headers": [[186, "            headers = Headers([header.values(settings) for header in self.headers])"]]}, "resp": {"Response": [[192, "            resp = http.Response("]]}}, "param": {"self": {"Response": [[182, "    def values(self, settings):"]]}, "settings": {"Settings": [[182, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.valu": {"var": {"headers": {"Headers": [[269, "            headers = Headers([header.values(settings) for header in self.headers])"]]}}, "param": {"self": {"Request": [[261, "    def values(self, settings):"]]}, "settings": {"?": [[261, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Times": {"var": {"preamble": {"str": [[147, "    preamble = \"x\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.NestedRespons": {"var": {"preamble": {"str": [[209, "    preamble = \"s\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.get_header": {"var": {"h": {"?": [[36, "    for h in headers:"]]}, "k": {"?": [[37, "        k = h.key.get_generator({})"]]}}, "param": {"val": {"str": [[31, "def get_header(val, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http": {"class": {"_HTTP2Message": {"<_HTTP2Message>": [[55, "class _HTTP2Message(message.Message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutUserAgent": {"var": {"preamble": {"str": [[123, "    preamble = \"u\""]]}, "key": {"?": [[125, "    key = base.TokValueLiteral(\"user-agent\")"]]}}, "func": {"values": {"(ShortcutUserAgent, ?) -> (?, str)": [[127, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.expr": {"var": {"atom": {"?": [[172, "        atom = pp.MatchFirst(parts)"]]}}, "param": {"cls": {"<Response>": [[170, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HeaderMixin": {"func": {"values": {"(_HeaderMixin, ?) -> (?, ?)": [[48, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.NestedRespo": {"var": {"nest_type": {"<Response>": [[210, "    nest_type = Response"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.values": {"var": {"body": {"_HTTP2Message -> ?": [[271, "            body = self.body"]], "?": [[273, "                body = body.string()"]]}, "path": {"?": [[265, "            path = self.path.string()"]]}, "req": {"Request": [[275, "            req = http.Request("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Body": {"var": {"preamble": {"str": [[143, "    preamble = \"b\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Reque": {"var": {"logattrs": {"[str]": [[223, "    logattrs = [\"method\", \"path\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HeaderMix": {"func": {"unique_name": {"_HeaderMixin -> None": [[45, "    def unique_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Messag": {"var": {"headers": {"?": [[62, "        headers = self.toks(_HeaderMixin)"]]}}, "func": {"headers": {"_HTTP2Message -> None": [[61, "    def headers(self):"]]}, "resolve": {"(Response, Settings) -> Response / (_HTTP2Message, ?) -> _HTTP2Message": [[86, "    def resolve(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.path": {"param": {"self": {"Request": [[235, "    def path(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.values": {"var": {"body": {"_HTTP2Message -> ?": [[188, "            body = self.body"]], "?": [[190, "                body = body.string()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message.resolv": {"param": {"self": {"{Response | _HTTP2Message}": [[86, "    def resolve(self, settings):"]]}, "settings": {"Settings": [[86, "    def resolve(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message.header": {"param": {"self": {"_HTTP2Message": [[61, "    def headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.status_cod": {"param": {"self": {"Response": [[166, "    def status_code(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Requ": {"func": {"nested_response": {"Request -> ?": [[239, "    def nested_response(self):"]]}, "times": {"Request -> ?": [[243, "    def times(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HeaderMixin.unique_nam": {"param": {"self": {"_HeaderMixin": [[45, "    def unique_name(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message.body": {"param": {"self": {"_HTTP2Message": [[83, "    def body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HeaderMixin.valu": {"param": {"self": {"_HeaderMixin": [[48, "    def values(self, settings):"]]}, "settings": {"?": [[48, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.make_error_resp": {"var": {"tokens": {"[{Body | StatusCode}]": [[296, "    tokens = ["]]}}, "param": {"reason": {"str": [[295, "def make_error_response(reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.method": {"param": {"self": {"Request": [[231, "    def method(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.__init__": {"param": {"tokens": {"?": [[225, "    def __init__(self, tokens):"]]}, "self": {"Request": [[225, "    def __init__(self, tokens):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.nested_respon": {"param": {"self": {"Request": [[239, "    def nested_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutContentTyp": {"var": {"key": {"?": [[114, "    key = base.TokValueLiteral(\"content-type\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutContentTy": {"var": {"preamble": {"str": [[113, "    preamble = \"c\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutUserAge": {"var": {"options": {"[str]": [[124, "    options = [i[1] for i in user_agents.UASTRINGS]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Raw": {"var": {"TOK": {"str": [[139, "    TOK = \"r\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutLocation": {"var": {"preamble": {"str": [[118, "    preamble = \"l\""]]}, "key": {"?": [[119, "    key = base.TokValueLiteral(\"location\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.make_error_response": {"param": {"body": {"str": [[295, "def make_error_response(reason, body=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutUserAgent.valu": {"param": {"self": {"ShortcutUserAgent": [[127, "    def values(self, settings):"]]}, "settings": {"?": [[127, "    def values(self, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.ShortcutUserAgent.values": {"var": {"value": {"str": [[130, "            value = user_agents.get_by_shortcut(value.lower().decode())[2].encode()"]], "?": [[128, "        value = self.value.val"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.get_": {"param": {"headers": {"?": [[31, "def get_header(val, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Head": {"var": {"preamble": {"str": [[109, "    preamble = \"h\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Method": {"var": {"options": {"[str]": [[95, "    options = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.ex": {"var": {"resp": {"?": [[173, "        resp = pp.And("], [179, "        resp = resp.setParseAction(cls)"]]}, "parts": {"[?]": [[171, "        parts = [i.expr() for i in cls.comps]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Respons": {"var": {"unique_name": {"None": [[151, "    unique_name = None"]]}}, "func": {"expr": {"<Response> -> None": [[170, "    def expr(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.tim": {"param": {"self": {"Request": [[243, "    def times(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2._HTTP2Message.action": {"param": {"self": {"_HTTP2Message": [[57, "    def actions(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response": {"var": {"comps": {"(<Header>, <Body>, <ShortcutContentType>, <ShortcutLocation>, <Raw>)": [[152, "    comps = ("]]}}, "func": {"__init__": {"? -> ?": [[160, "    def __init__(self, tokens):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request.spec": {"param": {"self": {"Request": [[291, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Response.spec": {"param": {"self": {"Response": [[204, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2.Request": {"var": {"comps": {"(<Header>, <ShortcutContentType>, <ShortcutUserAgent>, <Raw>, <NestedResponse>, <Body>, <Times>)": [[214, "    comps = ("]]}}, "func": {"expr": {"<Request> -> None": [[247, "    def expr(cls):"]]}, "values": {"(Request, ?) -> None": [[261, "    def values(self, settings):"]]}, "spec": {"Request -> str": [[291, "    def spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.http2": {"class": {"Body": {"<Body>": [[142, "class Body(base.Value):"]]}, "ShortcutContentType": {"<ShortcutContentType>": [[112, "class ShortcutContentType(_HeaderMixin, base.Value):"]]}, "ShortcutUserAgent": {"<ShortcutUserAgent>": [[122, "class ShortcutUserAgent(_HeaderMixin, base.OptionsOrValue):"]]}, "Response": {"<Response>": [[150, "class Response(_HTTP2Message):"]]}, "Raw": {"<Raw>": [[138, "class Raw(base.CaselessLiteral):"]]}, "Request": {"<Request>": [[213, "class Request(_HTTP2Message):"]]}, "Times": {"<Times>": [[146, "class Times(base.Integer):"]]}, "Header": {"<Header>": [[108, "class Header(_HeaderMixin, base.KeyValue):"]]}, "NestedResponse": {"<NestedResponse>": [[208, "class NestedResponse(message.NestedMessage):"]]}, "_HeaderMixin": {"<_HeaderMixin>": [[43, "class _HeaderMixin:"]]}, "Path": {"<Path>": [[104, "class Path(base.Value):"]]}, "ShortcutLocation": {"<ShortcutLocation>": [[117, "class ShortcutLocation(_HeaderMixin, base.Value):"]]}, "Method": {"<Method>": [[94, "class Method(base.OptionsOrValue):"]]}, "StatusCode": {"<StatusCode>": [[90, "class StatusCode(base.Integer):"]]}}, "func": {"make_error_response": {"(str, str) -> Response / (?, None) -> Response": [[295, "def make_error_response(reason, body=None):"]]}, "get_header": {"(str, ?) -> None / (?, ?) -> None": [[31, "def get_header(val, headers):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/kaitaistruct/exif.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif.Exif.__ini": {"param": {"_parent": {"None": [[19, "    def __init__(self, _io, _parent=None, _root=None):"]]}, "_root": {"None": [[19, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif.Exif.__init": {"var": {"_on": {"?": [[24, "        _on = self.endianness"]]}}, "param": {"_io": {"?": [[19, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.e": {"class": {"Exif": {"<Exif>": [[18, "class Exif(KaitaiStruct):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif.Exif": {"func": {"__init__": {"? -> ?": [[19, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.kaitaistruct.exif.Exif.__init__": {"param": {"self": {"Exif": [[19, "    def __init__(self, _io, _parent=None, _root=None):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_clientplayback.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_load_file": {"var": {"cp": {"ClientPlayback": [[107, "        cp = clientplayback.ClientPlayback()"]]}, "fpath": {"str": [[109, "            fpath = str(tmpdir.join(\"flows\"))"]]}}, "param": {"tmpdir": {"?": [[106, "    def test_load_file(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TBase.wait_response": {"var": {"s": {"int": [[33, "        s = time.time()"]]}}, "param": {"flow": {"?": [[29, "    def wait_response(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_configur": {"param": {"self": {"TestClientPlayback": [[116, "    def test_configure(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback": {"class": {"TestHTTPProxy": {"<TestHTTPProxy>": [[93, "class TestHTTPProxy(TBase, tservers.HTTPProxyTest):"]]}, "TestUpstreamProxy": {"<TestUpstreamProxy>": [[101, "class TestUpstreamProxy(TBase, tservers.HTTPUpstreamProxyTest):"]]}, "TBase": {"<TBase>": [[27, "class TBase(tservers.HTTPProxyTest):"]]}, "TestHTTPSProxy": {"<TestHTTPSProxy>": [[97, "class TestHTTPSProxy(TBase, tservers.HTTPProxyTest):"]]}}, "func": {"tdump": {"(?, ?) -> None / (str, [?]) -> None": [[15, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.tdum": {"param": {"path": {"str": [[15, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TBase.test_replay": {"var": {"cr": {"?": [[52, "        cr = self.master.addons.get(\"clientplayback\")"]]}, "l": {"?": [[56, "        l = self.master.state.flows[-1]"]]}}, "param": {"self": {"TBase": [[51, "    def test_replay(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback": {"func": {"test_http2": {"TestClientPlayback -> None": [[167, "    def test_http2(self):"]]}, "test_configure": {"(TestClientPlayback, ?) -> None": [[116, "    def test_configure(self, tmpdir):"]]}, "test_load_file": {"(TestClientPlayback, ?) -> None": [[106, "    def test_load_file(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TBa": {"func": {"reset": {"? -> None": [[43, "    def reset(f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TBase.addon": {"param": {"self": {"TBase": [[48, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.MockThread.is_aliv": {"param": {"self": {"MockThread": [[23, "    def is_alive(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_http2": {"var": {"cp": {"ClientPlayback": [[168, "        cp = clientplayback.ClientPlayback()"]]}, "req": {"?": [[170, "            req = tutils.treq("]]}, "f": {"?": [[179, "            f = tflow.tflow(req=req)"]]}}, "param": {"self": {"TestClientPlayback": [[167, "    def test_http2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.tdump": {"var": {"i": {"?": [[18, "        for i in flows:"]]}, "w": {"FlowWriter": [[17, "        w = io.FlowWriter(f)"]]}}, "param": {"flows": {"[?]": [[15, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.MockThread": {"func": {"is_alive": {"MockThread -> ?": [[23, "    def is_alive(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientp": {"class": {"TestClientPlayback": {"<TestClientPlayback>": [[105, "class TestClientPlayback:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_check": {"var": {"cp": {"ClientPlayback": [[129, "        cp = clientplayback.ClientPlayback()"]]}, "f": {"?": [[131, "            f = tflow.tflow(resp=True)"], [135, "            f = tflow.tflow(resp=True)"], [139, "            f = tflow.tflow(resp=True)"], [143, "            f = tflow.tflow(resp=True)"], [147, "            f = tflow.ttcpflow()"]]}}, "param": {"self": {"TestClientPlayback": [[128, "    def test_check(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_playback": {"var": {"cp": {"ClientPlayback": [[152, "        cp = clientplayback.ClientPlayback()"]]}, "f": {"?": [[155, "            f = tflow.tflow(resp=True)"]]}}, "param": {"self": {"TestClientPlayback": [[151, "    async def test_playback(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TBase": {"func": {"addons": {"TBase -> [ClientPlayback]": [[48, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_configure": {"var": {"path": {"str": [[119, "            path = str(tmpdir.join(\"flows\"))"]]}, "cp": {"ClientPlayback": [[117, "        cp = clientplayback.ClientPlayback()"]]}}, "param": {"tmpdir": {"?": [[116, "    def test_configure(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayback.test_load_fi": {"param": {"self": {"TestClientPlayback": [[106, "    def test_load_file(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestClientPlayba": {"func": {"test_check": {"TestClientPlayback -> None": [[128, "    def test_check(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayb": {"class": {"MockThread": {"<MockThread>": [[22, "class MockThread():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TB": {"func": {"test_replay": {"TBase -> None": [[51, "    def test_replay(self):"]]}, "wait_response": {"? -> None": [[29, "    def wait_response(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_clientplayback.TestHTTPSProxy": {"var": {"ssl": {"?": [[98, "    ssl = True"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/searchable.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.keypress": {"param": {"key": {"?": [[27, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.set_highligh": {"param": {"offset": {"int": [[52, "    def set_highlight(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.set_highlight": {"var": {"old": {"?": [[54, "            old = self.body[self.current_highlight]"]]}}, "param": {"self": {"Searchable": [[52, "    def set_highlight(self, offset):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.set_search": {"param": {"text": {"?": [[47, "    def set_search(self, text):"]]}, "self": {"Searchable": [[47, "    def set_search(self, text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.keypr": {"param": {"self": {"Searchable": [[27, "    def keypress(self, size, key):"]]}, "size": {"?": [[27, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.s": {"class": {"Searchable": {"<Searchable>": [[17, "class Searchable(urwid.ListBox):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Highlight.__init__": {"param": {"self": {"Highlight": [[8, "    def __init__(self, t):"]]}, "t": {"?": [[8, "    def __init__(self, t):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.__init__": {"param": {"self": {"Searchable": [[19, "    def __init__(self, contents):"]]}, "contents": {"[?]": [[19, "    def __init__(self, contents):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.get_text": {"param": {"self": {"Searchable": [[62, "    def get_text(self, w):"]]}, "w": {"?": [[62, "    def get_text(self, w):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable": {"func": {"__init__": {"? -> ?": [[19, "    def __init__(self, contents):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Highligh": {"func": {"__init__": {"? -> ?": [[8, "    def __init__(self, t):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.find_next": {"var": {"i": {"int": [[82, "        for i in rng:"]]}, "off": {"int": [[83, "            off = (self.focus_position + i) % len(self.body)"]]}, "rng": {"[int]": [[79, "            rng = range(len(self.body) - 1, -1, -1)"], [81, "            rng = range(1, len(self.body) + 1)"]]}, "w": {"?": [[84, "            w = self.body[off]"]]}}, "param": {"self": {"Searchable": [[70, "    def find_next(self, backwards):"]]}, "backwards": {"bool": [[70, "    def find_next(self, backwards):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchabl": {"func": {"set_search": {"(Searchable, ?) -> None": [[47, "    def set_search(self, text):"]]}, "keypress": {"(Searchable, ?, ?) -> None": [[27, "    def keypress(self, size, key):"]]}, "find_next": {"(Searchable, bool) -> None / (Searchable, ?) -> None": [[70, "    def find_next(self, backwards):"]]}, "get_text": {"(Searchable, ?) -> None": [[62, "    def get_text(self, w):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable": {"class": {"Highlight": {"<Highlight>": [[6, "class Highlight(urwid.AttrMap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchable.find_ne": {"var": {"txt": {"None": [[85, "            txt = self.get_text(w)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.searchable.Searchab": {"func": {"set_highlight": {"(Searchable, ?) -> None / (Searchable, None) -> None / (Searchable, int) -> None": [[52, "    def set_highlight(self, offset):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/websocket.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_pong": {"param": {"other_conn": {"?": [[153, "    def _handle_pong(self, event, source_conn, other_conn, is_server):"]]}, "self": {"WebSocketLayer": [[153, "    def _handle_pong(self, event, source_conn, other_conn, is_server):"]]}, "is_server": {"bool": [[153, "    def _handle_pong(self, event, source_conn, other_conn, is_server):"]]}, "event": {"?": [[153, "    def _handle_pong(self, event, source_conn, other_conn, is_server):"]]}, "source_conn": {"?": [[153, "    def _handle_pong(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_message.get": {"var": {"chunk_size": {"int": [[126, "                        chunk_size = 4092 if is_server else 4088"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_message.get_": {"var": {"chunks": {"[int]": [[127, "                        chunks = range(0, len(payload), chunk_size)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_ping": {"var": {"data": {"?": [[142, "        data = self.connections[other_conn].send(Ping())"], [144, "        data = self.connections[source_conn].send(event.response())"]]}}, "param": {"other_conn": {"?": [[140, "    def _handle_ping(self, event, source_conn, other_conn, is_server):"]]}, "self": {"WebSocketLayer": [[140, "    def _handle_ping(self, event, source_conn, other_conn, is_server):"]]}, "is_server": {"bool": [[140, "    def _handle_ping(self, event, source_conn, other_conn, is_server):"]]}, "event": {"?": [[140, "    def _handle_ping(self, event, source_conn, other_conn, is_server):"]]}, "source_conn": {"?": [[140, "    def _handle_ping(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handl": {"var": {"websocket_message": {"WebSocketMessage": [[110, "            websocket_message = WebSocketMessage(message_type, not is_server, payload)"]]}, "message_type": {"?": [[102, "                message_type = wsproto.frame_protocol.Opcode.TEXT"], [105, "                message_type = wsproto.frame_protocol.Opcode.BINARY"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_m": {"var": {"original_chunk_sizes": {"[int]": [[99, "            original_chunk_sizes = [len(f) for f in fb]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer.__call__": {"var": {"frame": {"Frame": [[202, "                    frame = websockets.Frame.from_file(source_conn.rfile)"]]}, "s": {"str": [[214, "            s = 'server' if is_server else 'client'"]]}, "r": {"[?]": [[196, "                r = tcp.ssl_read_select(conns, 0.1)"]]}, "conns": {"[?]": [[188, "        conns = [c.connection for c in self.connections.keys()]"]]}, "data": {"?": [[203, "                    data = self.connections[source_conn].receive_data(bytes(frame))"]]}, "event": {"?": [[209, "                    for event in self.connections[source_conn].events():"]]}, "conn": {"?": [[197, "                for conn in r:"]]}}, "param": {"self": {"WebSocketLayer": [[182, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_close_connecti": {"param": {"other_conn": {"?": [[161, "    def _handle_close_connection(self, event, source_conn, other_conn, is_server):"]]}, "source_conn": {"?": [[161, "    def _handle_close_connection(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._inject_messag": {"param": {"self": {"WebSocketLayer": [[173, "    def _inject_messages(self, endpoint, message_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer.__call": {"var": {"other_conn": {"?": [[199, "                    other_conn = self.server_conn if conn == self.client_conn.connection else self.client_conn"]]}, "is_server": {"bool": [[200, "                    is_server = (source_conn == self.server_conn)"]]}, "source_conn": {"?": [[198, "                    source_conn = self.client_conn if conn == self.client_conn.connection else self.server_conn"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_": {"param": {"event": {"?": [[81, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer.__ca": {"var": {"close_received": {"?": [[189, "        close_received = False"], [212, "                                close_received = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_messa": {"var": {"length": {"int": [[111, "            length = len(websocket_message.content)"]]}}, "func": {"get_chunk": {"str -> None": [[116, "                def get_chunk(payload):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer.__init": {"param": {"handshake_flow": {"HTTPFlow": [[46, "    def __init__(self, ctx, handshake_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._inject": {"param": {"message_queue": {"?": [[173, "    def _inject_messages(self, endpoint, message_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_close_connectio": {"param": {"event": {"?": [[161, "    def _handle_close_connection(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_event": {"param": {"self": {"WebSocketLayer": [[81, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}, "is_server": {"bool": [[81, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}, "source_conn": {"?": [[81, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_message": {"var": {"fb": {"[?]": [[95, "        fb = self.server_frame_buffer if is_server else self.client_frame_buffer"]]}, "data": {"?": [[132, "                    data = self.connections[other_conn].send(Message(data=chunk, message_finished=final))"], [136, "            data = self.connections[other_conn].send(Message(data=event.data, message_finished=event.message_finished))"]]}, "payload": {"str": [[103, "                payload = ''.join(fb)"], [106, "                payload = b''.join(fb)"]]}, "chunk": {"?": [[131, "                for chunk, final in get_chunk(websocket_message.content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_message.get_chunk": {"var": {"i": {"int": [[128, "                        for i in chunks:"]]}, "s": {"?": [[120, "                        for s in original_chunk_sizes:"]]}, "pos": {"int": [[119, "                        pos = 0"]]}}, "param": {"payload": {"str": [[116, "                def get_chunk(payload):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_close_connection": {"var": {"data": {"?": [[166, "        data = self.connections[other_conn].send(CloseConnection(code=event.code, reason=event.reason))"], [168, "        data = self.connections[source_conn].send(event.response())"]]}}, "param": {"self": {"WebSocketLayer": [[161, "    def _handle_close_connection(self, event, source_conn, other_conn, is_server):"]]}, "is_server": {"bool": [[161, "    def _handle_close_connection(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLay": {"var": {"server_extensions": {"[?]": [[57, "        server_extensions = []"], [61, "                server_extensions = [PerMessageDeflate()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer.__init__": {"var": {"data": {"?": [[71, "        data = self.connections[self.server_conn].send(request)"], [77, "        data = self.connections[self.client_conn].send(AcceptConnection(extensions=server_extensions))"]]}, "request": {"?": [[70, "        request = Request(extensions=client_extensions, host=handshake_flow.request.host, target=handshake_flow.request.path)"]]}, "event": {"?": [[74, "        event = next(self.connections[self.client_conn].events())"]]}}, "param": {"self": {"WebSocketLayer": [[46, "    def __init__(self, ctx, handshake_flow):"]]}, "ctx": {"HttpLayer": [[46, "    def __init__(self, ctx, handshake_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._inject_messages": {"var": {"data": {"?": [[177, "                data = self.connections[endpoint].send(Message(data=payload, message_finished=True))"]]}, "payload": {"?": [[176, "                payload = message_queue.get_nowait()"]]}}, "param": {"endpoint": {"?": [[173, "    def _inject_messages(self, endpoint, message_queue):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.webs": {"class": {"WebSocketLayer": {"<WebSocketLayer>": [[21, "class WebSocketLayer(base.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_messag": {"param": {"other_conn": {"?": [[94, "    def _handle_message(self, event, source_conn, other_conn, is_server):"]]}, "self": {"WebSocketLayer": [[94, "    def _handle_message(self, event, source_conn, other_conn, is_server):"]]}, "is_server": {"bool": [[94, "    def _handle_message(self, event, source_conn, other_conn, is_server):"]]}, "event": {"?": [[94, "    def _handle_message(self, event, source_conn, other_conn, is_server):"]]}, "source_conn": {"?": [[94, "    def _handle_message(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer": {"var": {"client_extensions": {"[?]": [[56, "        client_extensions = []"], [60, "                client_extensions = [PerMessageDeflate()]"]]}}, "func": {"_handle_ping": {"(WebSocketLayer, ?, ?, ?, bool) -> None / (WebSocketLayer, ?, ?, ?, ?) -> None": [[140, "    def _handle_ping(self, event, source_conn, other_conn, is_server):"]]}, "_handle_event": {"(WebSocketLayer, ?, ?, ?, bool) -> None / (WebSocketLayer, ?, ?, ?, ?) -> None": [[81, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}, "_inject_messages": {"(WebSocketLayer, ?, ?) -> None": [[173, "    def _inject_messages(self, endpoint, message_queue):"]]}, "_handle_message": {"(WebSocketLayer, ?, ?, ?, bool) -> None / (WebSocketLayer, ?, ?, ?, ?) -> None": [[94, "    def _handle_message(self, event, source_conn, other_conn, is_server):"]]}, "_handle_close_connection": {"(WebSocketLayer, ?, ?, ?, bool) -> None / (WebSocketLayer, ?, ?, ?, ?) -> None": [[161, "    def _handle_close_connection(self, event, source_conn, other_conn, is_server):"]]}, "_handle_pong": {"(WebSocketLayer, ?, ?, ?, bool) -> None / (WebSocketLayer, ?, ?, ?, ?) -> None": [[153, "    def _handle_pong(self, event, source_conn, other_conn, is_server):"]]}, "__call__": {"WebSocketLayer -> ?": [[182, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[46, "    def __init__(self, ctx, handshake_flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.websocket.WebSocketLayer._handle_ev": {"param": {"other_conn": {"?": [[81, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/test/tflow.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.tserver_conn": {"var": {"c": {"ServerConnection": [[180, "    c = connections.ServerConnection.from_state(dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.tclient_conn": {"var": {"c": {"ClientConnection": [[155, "    c = connections.ClientConnection.from_state(dict("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.ttcpflow": {"var": {"client_conn": {"ClientConnection": [[17, "        client_conn = tclient_conn()"]]}, "messages": {"[TCPMessage]": [[21, "        messages = ["]]}, "server_conn": {"ServerConnection": [[19, "        server_conn = tserver_conn()"]]}, "err": {"Error": [[26, "        err = terr()"]]}, "f": {"TCPFlow": [[28, "    f = tcp.TCPFlow(client_conn, server_conn)"]]}}, "param": {"client_conn": {"bool": [[15, "def ttcpflow(client_conn=True, server_conn=True, messages=True, err=None):"]]}, "messages": {"bool": [[15, "def ttcpflow(client_conn=True, server_conn=True, messages=True, err=None):"]]}, "server_conn": {"bool": [[15, "def ttcpflow(client_conn=True, server_conn=True, messages=True, err=None):"]]}, "err": {"None": [[15, "def ttcpflow(client_conn=True, server_conn=True, messages=True, err=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.DummyFlow.__init__": {"param": {"self": {"DummyFlow": [[133, "    def __init__(self, client_conn, server_conn, live=None):"]]}, "live": {"None": [[133, "    def __init__(self, client_conn, server_conn, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.t": {"var": {"err": {"Error": [[206, "    err = flow.Error(content)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.twebsocketflow": {"var": {"err": {"Error": [[89, "        err = terr()"]]}, "f": {"WebSocketFlow": [[77, "    f = websocket.WebSocketFlow(client_conn, server_conn, handshake_flow)"]]}, "resp": {"HTTPResponse": [[60, "        resp = http.HTTPResponse("]]}, "req": {"HTTPRequest": [[42, "        req = http.HTTPRequest("]]}, "messages": {"[WebSocketMessage]": [[83, "        messages = ["]]}, "client_conn": {"ClientConnection": [[38, "        client_conn = tclient_conn()"]]}, "server_conn": {"ServerConnection": [[40, "        server_conn = tserver_conn()"]]}}, "param": {"client_conn": {"bool": [[35, "def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None, handshake_flow=True):"]]}, "messages": {"bool": [[35, "def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None, handshake_flow=True):"]]}, "server_conn": {"bool": [[35, "def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None, handshake_flow=True):"]]}, "err": {"None": [[35, "def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None, handshake_flow=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.DummyFlow.__init": {"param": {"server_conn": {"{ServerConnection | bool}": [[133, "    def __init__(self, client_conn, server_conn, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.twebsocket": {"var": {"handshake_flow": {"HTTPFlow": [[73, "        handshake_flow = http.HTTPFlow(client_conn, server_conn)"]]}}, "param": {"handshake_flow": {"bool": [[35, "def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None, handshake_flow=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tes": {"func": {"tflow": {"(bool, bool, bool, None, None) -> HTTPFlow": [[97, "def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):"]]}, "tdummyflow": {"(bool, bool, None) -> DummyFlow": [[137, "def tdummyflow(client_conn=True, server_conn=True, err=None):"]]}, "ttcpflow": {"(bool, bool, bool, None) -> TCPFlow": [[15, "def ttcpflow(client_conn=True, server_conn=True, messages=True, err=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.tdummyflow": {"var": {"client_conn": {"ClientConnection": [[139, "        client_conn = tclient_conn()"]]}, "server_conn": {"ServerConnection": [[141, "        server_conn = tserver_conn()"]]}, "err": {"Error": [[143, "        err = terr()"]]}, "f": {"DummyFlow": [[145, "    f = DummyFlow(client_conn, server_conn)"]]}}, "param": {"client_conn": {"bool": [[137, "def tdummyflow(client_conn=True, server_conn=True, err=None):"]]}, "server_conn": {"bool": [[137, "def tdummyflow(client_conn=True, server_conn=True, err=None):"]]}, "err": {"None": [[137, "def tdummyflow(client_conn=True, server_conn=True, err=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow": {"func": {"tclient_conn": {"() -> ClientConnection": [[151, "def tclient_conn():"]]}, "terr": {"str -> Error": [[202, "def terr(content=\"error\"):"]]}, "tserver_conn": {"() -> ServerConnection": [[176, "def tserver_conn():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.tflow": {"var": {"err": {"Error": [[115, "        err = terr()"]]}, "f": {"HTTPFlow": [[122, "    f = http.HTTPFlow(client_conn, server_conn)"]]}, "resp": {"HTTPResponse": [[120, "        resp = http.HTTPResponse.wrap(resp)"]], "?": [[113, "        resp = tutils.tresp()"]]}, "req": {"HTTPRequest": [[118, "        req = http.HTTPRequest.wrap(req)"]], "?": [[111, "        req = tutils.treq()"]]}, "client_conn": {"ClientConnection": [[107, "        client_conn = tclient_conn()"]]}, "server_conn": {"ServerConnection": [[109, "        server_conn = tserver_conn()"]]}}, "param": {"client_conn": {"bool": [[97, "def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):"]]}, "resp": {"None": [[97, "def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):"]]}, "req": {"bool": [[97, "def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):"]]}, "server_conn": {"bool": [[97, "def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):"]]}, "err": {"None": [[97, "def tflow(client_conn=True, server_conn=True, req=True, resp=None, err=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"twebsocketflow": {"(bool, bool, bool, None, bool) -> WebSocketFlow": [[35, "def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None, handshake_flow=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tf": {"class": {"DummyFlow": {"<DummyFlow>": [[130, "class DummyFlow(flow.Flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.DummyFlow": {"param": {"client_conn": {"{ClientConnection | bool}": [[133, "    def __init__(self, client_conn, server_conn, live=None):"]]}}, "func": {"__init__": {"? -> ?": [[133, "    def __init__(self, client_conn, server_conn, live=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.test.tflow.terr": {"param": {"content": {"str": [[202, "def terr(content=\"error\"):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_readfile.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFileStdin.test_norma": {"param": {"self": {"TestReadFileStdin": [[112, "    async def test_normal(self, tmpdir, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_nonexistent_fi": {"param": {"self": {"TestReadFile": [[87, "    async def test_nonexistent_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_read": {"var": {"tf": {"?": [[55, "            tf = tmpdir.join(\"tfile\")"]]}, "rf": {"ReadFile": [[51, "        rf = readfile.ReadFile()"]]}}, "param": {"self": {"TestReadFile": [[50, "    async def test_read(self, tmpdir, data, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_rea": {"param": {"tmpdir": {"?": [[50, "    async def test_read(self, tmpdir, data, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFileStdin.test_stdin": {"var": {"rf": {"ReadFileStdin": [[99, "        rf = readfile.ReadFileStdin()"]]}}, "param": {"self": {"TestReadFileStdin": [[98, "    async def test_stdin(self, stdin, data, corrupt_data):"]]}, "data": {"?": [[98, "    async def test_stdin(self, stdin, data, corrupt_data):"]]}, "corrupt_data": {"?": [[98, "    async def test_stdin(self, stdin, data, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFil": {"func": {"test_configure": {"TestReadFile -> None": [[42, "    def test_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile": {"func": {"data": {"() -> None": [[15, "def data():"]]}, "corrupt_data": {"? -> None": [[33, "def corrupt_data(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.corrupt_data": {"var": {"f": {"?": [[34, "    f = io.BytesIO(data.getvalue())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFileStdin.test_": {"param": {"stdin": {"?": [[98, "    async def test_stdin(self, stdin, data, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_re": {"param": {"data": {"?": [[50, "    async def test_read(self, tmpdir, data, corrupt_data):"]]}, "corrupt_data": {"?": [[50, "    async def test_read(self, tmpdir, data, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFileStdin.test_normal": {"var": {"tf": {"?": [[115, "            tf = tmpdir.join(\"tfile\")"]]}, "rf": {"ReadFileStdin": [[113, "        rf = readfile.ReadFileStdin()"]]}}, "param": {"data": {"?": [[112, "    async def test_normal(self, tmpdir, data):"]]}, "tmpdir": {"?": [[112, "    async def test_normal(self, tmpdir, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_configur": {"param": {"self": {"TestReadFile": [[42, "    def test_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_corrupt": {"var": {"rf": {"ReadFile": [[76, "        rf = readfile.ReadFile()"]]}}, "param": {"self": {"TestReadFile": [[75, "    async def test_corrupt(self, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readf": {"class": {"TestReadFileStdin": {"<TestReadFileStdin>": [[95, "class TestReadFileStdin:"]]}, "TestReadFile": {"<TestReadFile>": [[41, "class TestReadFile:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_nonexistent_file": {"var": {"rf": {"ReadFile": [[88, "        rf = readfile.ReadFile()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.test_configure": {"var": {"rf": {"ReadFile": [[43, "        rf = readfile.ReadFile()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.corrupt_": {"param": {"data": {"?": [[33, "def corrupt_data(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.TestReadFile.tes": {"param": {"corrupt_data": {"?": [[75, "    async def test_corrupt(self, corrupt_data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_readfile.data": {"var": {"flow": {"?": [[25, "    for flow in flows:"]]}, "flows": {"[?]": [[19, "    flows = ["]]}, "w": {"FlowWriter": [[18, "    w = mitmproxy.io.FlowWriter(f)"]]}, "f": {"?": [[16, "    f = io.BytesIO()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http": {"var": {"__all__": {"[str]": [[7, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/eventstore.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.eventstore.EventStore.clear": {"param": {"self": {"EventStore": [[25, "    def clear(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.events": {"class": {"EventStore": {"<EventStore>": [[10, "class EventStore:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.eventstore.EventSto": {"func": {"clear": {"EventStore -> None": [[25, "    def clear(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.eventstore.EventStore": {"func": {"log": {"(EventStore, ?) -> None / (EventStore, LogEntry) -> None": [[20, "    def log(self, entry: LogEntry) -> None:"]]}, "__init__": {"? -> ?": [[11, "    def __init__(self, size=10000):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.eventstore.EventStor": {"func": {"size": {"EventStore -> ?": [[17, "    def size(self) -> typing.Optional[int]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.eventstore.EventStore.__init__": {"param": {"self": {"EventStore": [[11, "    def __init__(self, size=10000):"]]}, "size": {"int": [[11, "    def __init__(self, size=10000):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.eventstore.EventStore.siz": {"param": {"self": {"EventStore": [[17, "    def size(self) -> typing.Optional[int]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_query.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_query.test_view_query": {"var": {"f": {"?": [[9, "    f = v(d, query=multidict.MultiDict([(\"foo\", \"bar\"), (\"foo\", \"baz\")]))"]]}, "d": {"str": [[7, "    d = \"\""]]}, "v": {"?": [[8, "    v = full_eval(query.ViewQuery())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_query": {"() -> None": [[6, "def test_view_query():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/http1/read.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_request_line": {"var": {"host": {"?": [[258, "            host, port = _parse_authority_form(path)"]]}, "form": {"str": [[254, "            form = \"relative\""], [257, "            form = \"authority\""], [261, "            form = \"absolute\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_request_": {"var": {"headers": {"Headers": [[55, "    headers = _read_headers(rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.expected_http_body_": {"var": {"size": {"int": [[219, "            size = int(sizes[0])"]]}, "sizes": {"?": [[215, "            sizes = headers.get_all(\"content-length\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.get_header_": {"var": {"tokens": {"?": [[23, "    tokens = headers[key].split(\",\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_request_head": {"var": {"timestamp_start": {"int": [[50, "    timestamp_start = time.time()"]], "?": [[59, "        timestamp_start = rfile.first_byte_timestamp"]]}, "form": {"str": [[54, "    form, method, scheme, host, port, path, http_version = _read_request_line(rfile)"]]}}, "param": {"rfile": {"?": [[35, "def read_request_head(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_response_line": {"var": {"parts": {"[str]": [[300, "        parts = line.split(None, 2)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read": {"func": {"connection_close": {"(str, Headers) -> bool / (?, ?) -> bool": [[159, "def connection_close(http_version, headers):"]]}, "_parse_authority_form": {"str -> (?, int) / ? -> (?, int)": [[271, "def _parse_authority_form(hostport):"]]}, "_get_first_line": {"? -> ? / Reader -> str": [[230, "def _get_first_line(rfile):"]]}, "_check_http_version": {"? -> None / str -> None": [[314, "def _check_http_version(http_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_response_lin": {"var": {"status_code": {"int": [[305, "        status_code = int(status_code)"]]}}, "param": {"rfile": {"Reader": [[292, "def _read_response_line(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_response_head": {"var": {"http_version": {"str": [[94, "    http_version, status_code, message = _read_response_line(rfile)"]]}, "timestamp_start": {"int": [[90, "    timestamp_start = time.time()"], [99, "        timestamp_start = rfile.first_byte_timestamp"]]}}, "param": {"rfile": {"Reader": [[74, "def read_response_head(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_response_": {"var": {"headers": {"Headers": [[95, "    headers = _read_headers(rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_chunked": {"var": {"line": {"str": [[365, "        line = rfile.readline(128)"]]}, "total": {"int": [[363, "    total = 0"]]}, "length": {"int": [[370, "                length = int(line, 16)"]]}, "chunk": {"str": [[379, "            chunk = rfile.read(length)"]]}, "suffix": {"str": [[380, "            suffix = rfile.readline(5)"]]}}, "param": {"limit": {"int": [[355, "def _read_chunked(rfile, limit=sys.maxsize):"]]}, "rfile": {"Reader": [[355, "def _read_chunked(rfile, limit=sys.maxsize):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._get_first_": {"var": {"line": {"str": [[232, "        line = rfile.readline()"], [235, "            line = rfile.readline()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.get_header_tokens": {"param": {"key": {"str": [[15, "def get_header_tokens(headers, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_bod": {"var": {"bytes_left": {"int": [[137, "        bytes_left = expected_size"], [146, "        bytes_left = limit"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_request": {"param": {"rfile": {"?": [[27, "def read_request(rfile, body_size_limit=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_response_": {"var": {"line": {"str": [[294, "        line = _get_first_line(rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_request_": {"var": {"line": {"?": [[245, "        line = _get_first_line(rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1": {"func": {"_read_response_line": {"? -> (?, int, ?) / Reader -> (str, int, str)": [[292, "def _read_response_line(rfile):"]]}, "read_body": {"(?, None, None, int) -> None / (Reader, int, int, int) -> None / (?, int, None, int) -> None / (Reader, int, None, int) -> None / (?, int, int, int) -> None": [[104, "def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):"]]}, "read_response_head": {"? -> Response / Reader -> Response": [[74, "def read_response_head(rfile):"]]}, "_read_request_line": {"? -> (str, ?, None, None, int, str, ?)": [[243, "def _read_request_line(rfile):"]]}, "read_request_head": {"? -> Request": [[35, "def read_request_head(rfile):"]]}, "_read_chunked": {"(?, int) -> ? / (Reader, int) -> ?": [[355, "def _read_chunked(rfile, limit=sys.maxsize):"]]}, "read_response": {"(?, Request, None) -> Response / (Reader, ?, None) -> Response / (Reader, ?, int) -> Response / (Reader, Request, None) -> Response / (Reader, HTTPRequest, None) -> Response": [[66, "def read_response(rfile, request, body_size_limit=None):"]]}, "_read_headers": {"? -> Headers / Reader -> Headers": [[319, "def _read_headers(rfile):"]]}, "get_header_tokens": {"(Headers, str) -> [?] / (?, ?) -> [?] / (?, str) -> [?]": [[15, "def get_header_tokens(headers, key):"]]}, "read_request": {"(?, None) -> Request": [[27, "def read_request(rfile, body_size_limit=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_": {"var": {"request": {"Request": [[28, "    request = read_request_head(rfile)"]]}, "response": {"Response": [[67, "    response = read_response_head(rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._check": {"param": {"http_version": {"str": [[314, "def _check_http_version(http_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_respon": {"var": {"expected_body_size": {"int": [[68, "    expected_body_size = expected_http_body_size(request, response)"]]}}, "param": {"body_size_limit": {"int": [[66, "def read_response(rfile, request, body_size_limit=None):"]]}, "request": {"{HTTPRequest | Request}": [[66, "def read_response(rfile, request, body_size_limit=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_request_lin": {"var": {"scheme": {"None": [[255, "            scheme, host, port = None, None, None"], [259, "            scheme, path = None, None"]], "?": [[262, "            scheme, host, port, path = url.parse(path)"]]}, "method": {"?": [[251, "        method, path, http_version = line.split()"]]}}, "param": {"rfile": {"?": [[243, "def _read_request_line(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.connection_clo": {"param": {"headers": {"Headers": [[159, "def connection_close(http_version, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._get_first_lin": {"param": {"rfile": {"Reader": [[230, "def _get_first_line(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._parse_authority_form": {"var": {"host": {"?": [[280, "        host, port = hostport.rsplit(b\":\", 1)"], [282, "            host = host[1:-1]"]]}, "port": {"int": [[283, "        port = int(port)"]]}}, "param": {"hostport": {"str": [[271, "def _parse_authority_form(hostport):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.get_header_token": {"param": {"headers": {"Headers": [[15, "def get_header_tokens(headers, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.rea": {"func": {"expected_http_body_size": {"(HTTPRequest, Response, ?) -> int / (?, Response, ?) -> int / (?, ?, ?) -> int / (?, None, ?) -> int / (Request, Response, ?) -> int / (Request, None, ?) -> int": [[176, "def expected_http_body_size("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_headers": {"var": {"value": {"str": [[344, "                value = value.strip()"]]}, "line": {"str": [[332, "        line = rfile.readline()"]]}, "name": {"str": [[343, "                name, value = line.split(b\":\", 1)"]]}, "ret": {"[(str, str)]": [[330, "    ret = []"]]}}, "param": {"rfile": {"Reader": [[319, "def _read_headers(rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.connection_cl": {"var": {"tokens": {"[?]": [[167, "        tokens = get_header_tokens(headers, \"connection\")"]]}}, "param": {"http_version": {"str": [[159, "def connection_close(http_version, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read._read_response_l": {"var": {"http_version": {"str": [[304, "        http_version, status_code, message = parts"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_respons": {"param": {"rfile": {"Reader": [[66, "def read_response(rfile, request, body_size_limit=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.expected_http_body_siz": {"var": {"headers": {"{? -> ? | Headers}": [[197, "        headers = request.headers"], [201, "        headers = response.headers"]]}, "different_content_length_headers": {"int": [[216, "            different_content_length_headers = any(x != sizes[0] for x in sizes)"]]}, "request": {"{HTTPRequest | Request}": [[177, "        request: request.Request,"]]}, "response": {"Response": [[178, "        response: typing.Optional[response.Response] = None,"]]}, "expect_continue_as_0": {"?": [[179, "        expect_continue_as_0: bool = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_requ": {"var": {"expected_body_size": {"int": [[29, "    expected_body_size = expected_http_body_size(request)"]]}}, "param": {"body_size_limit": {"None": [[27, "def read_request(rfile, body_size_limit=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.http1.read.read_body": {"var": {"max_chunk_size": {"int": [[126, "        max_chunk_size = limit"]]}, "not_done": {"str": [[154, "        not_done = rfile.read(1)"]]}, "content": {"str": [[140, "            content = rfile.read(chunk_size)"], [149, "            content = rfile.read(chunk_size)"]]}, "limit": {"int": [[124, "        limit = sys.maxsize"]]}, "chunk_size": {"int": [[139, "            chunk_size = min(bytes_left, max_chunk_size)"], [148, "            chunk_size = min(bytes_left, max_chunk_size)"]]}, "x": {"?": [[129, "        for x in _read_chunked(rfile, limit):"]]}}, "param": {"expected_size": {"int": [[104, "def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):"]]}, "max_chunk_size": {"int": [[104, "def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):"]]}, "limit": {"int": [[104, "def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):"]]}, "rfile": {"Reader": [[104, "def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_http2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_render_with_headers": {"var": {"r": {"?": [[132, "        r = parse_request('GET:/foo:h\"foo\"=\"bar\"')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_spec": {"param": {"self": {"TestRequest": [[155, "    def test_spec(self):"]]}}, "func": {"rt": {"str -> None": [[156, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.parse_response": {"param": {"s": {"str": [[16, "def parse_response(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2": {"class": {"TestRequest": {"<TestRequest>": [[33, "class TestRequest:"]]}, "TestResponse": {"<TestResponse>": [[162, "class TestResponse:"]]}}, "func": {"default_settings": {"() -> Settings": [[20, "def default_settings():"]]}, "parse_response": {"? -> ? / str -> ?": [[16, "def parse_response(s):"]]}, "test_make_error_response": {"() -> None": [[27, "def test_make_error_response():"]]}, "parse_request": {"? -> ? / str -> ?": [[12, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_err": {"param": {"self": {"TestResponse": [[174, "    def test_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_content_type": {"var": {"r": {"?": [[187, "        r = parse_response('200:r:c\"foobar\"')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestReq": {"func": {"test_cached_values": {"TestRequest -> None": [[35, "    def test_cached_values(self):"]]}, "test_multiple": {"TestRequest -> None": [[56, "    def test_multiple(self):"]]}, "test_user_agent": {"TestRequest -> None": [[125, "    def test_user_agent(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_render_with_header": {"var": {"s": {"?": [[215, "        s = io.BytesIO()"]]}}, "param": {"self": {"TestResponse": [[214, "    def test_render_with_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_cached_valu": {"var": {"res": {"?": [[165, "        res = parse_response(\"200\")"]]}, "res_id": {"int": [[166, "        res_id = id(res)"]]}}, "param": {"self": {"TestResponse": [[164, "    def test_cached_values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_raw_content_length": {"var": {"r": {"?": [[179, "        r = parse_response('200:r')"], [182, "        r = parse_response('200')"]]}}, "param": {"self": {"TestResponse": [[178, "    def test_raw_content_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_multip": {"param": {"self": {"TestRequest": [[56, "    def test_multiple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_simp": {"param": {"self": {"TestResponse": [[191, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_content_type": {"var": {"r": {"?": [[121, "        r = parse_request('GET:/:r:c\"foobar\"')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_render_with_headers": {"var": {"r": {"?": [[216, "        r = parse_response('200:h\"foo\"=\"bar\"')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_nested_response": {"var": {"r": {"?": [[141, "        r = parse_request(l)"]]}, "l": {"str": [[140, "        l = \"get:/p/:s'200'\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_nested_respon": {"param": {"self": {"TestRequest": [[139, "    def test_nested_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_content_typ": {"param": {"self": {"TestRequest": [[120, "    def test_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_simple": {"var": {"r": {"?": [[50, "        r = parse_request('GET:\"/foo\"')"], [53, "        r = parse_request('GET:/foo')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_render_with_body": {"var": {"s": {"?": [[147, "        s = io.BytesIO()"]]}, "r": {"?": [[148, "        r = parse_request(\"GET:'/foo':bfoobar\")"]]}}, "param": {"self": {"TestRequest": [[146, "    def test_render_with_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRespo": {"func": {"test_render_with_headers": {"TestResponse -> None": [[214, "    def test_render_with_headers(self):"]]}, "test_render_simple": {"TestResponse -> None": [[205, "    def test_render_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_spec.rt": {"var": {"s": {"?": [[157, "            s = parse_request(s).spec()"]]}}, "param": {"s": {"str": [[156, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.parse_request": {"param": {"s": {"str": [[12, "def parse_request(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_render_simp": {"param": {"self": {"TestRequest": [[88, "    def test_render_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_err": {"param": {"self": {"TestRequest": [[45, "    def test_err(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_nonascii": {"param": {"self": {"TestResponse": [[170, "    def test_nonascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_simp": {"param": {"self": {"TestRequest": [[49, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_cached_valu": {"param": {"self": {"TestRequest": [[35, "    def test_cached_values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_cached_values": {"var": {"req": {"?": [[36, "        req = parse_request(\"get:/\")"]]}, "req_id": {"int": [[37, "        req_id = id(req)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRespon": {"func": {"test_cached_values": {"TestResponse -> None": [[164, "    def test_cached_values(self):"]]}, "test_err": {"TestResponse -> None": [[174, "    def test_err(self):"]]}, "test_simple": {"TestResponse -> None": [[191, "    def test_simple(self):"]]}, "test_spec": {"TestResponse -> None": [[232, "    def test_spec(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_render_with_body": {"var": {"s": {"?": [[224, "        s = io.BytesIO()"]]}, "r": {"?": [[225, "        r = parse_response('200:bfoobar')"]]}}, "param": {"self": {"TestResponse": [[223, "    def test_render_with_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestR": {"func": {"test_content_type": {"TestResponse -> None": [[186, "    def test_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_multiple": {"var": {"r": {"list": [[57, "        r = list(language.parse_pathoc(\"GET:/ PUT:/\"))"], [74, "        r = list(language.parse_pathoc(l, True))"], [83, "        r = list(language.parse_pathoc(l, True))"]]}, "l": {"str": [[62, "        l = \"\"\""], [79, "        l = \"\"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_render_simple": {"var": {"s": {"?": [[89, "        s = io.BytesIO()"]]}, "r": {"?": [[90, "        r = parse_request(\"GET:'/foo'\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_simple": {"var": {"r": {"?": [[192, "        r = parse_response('200:r:h\"foo\"=\"bar\"')"], [198, "        r = parse_response('200:r:h\"foo\"=\"bar\":bfoobar:h\"bla\"=\"fasel\"')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_raw_content_length": {"var": {"r": {"?": [[98, "        r = parse_request('GET:/:r')"], [101, "        r = parse_request('GET:/:r:b\"foobar\"')"], [104, "        r = parse_request('GET:/')"], [108, "        r = parse_request('GET:/:b\"foobar\"')"], [112, "        r = parse_request('GET:/:b\"foobar\":h\"content-length\"=\"42\"')"], [116, "        r = parse_request('GET:/:r:b\"foobar\":h\"content-length\"=\"42\"')"]]}}, "param": {"self": {"TestRequest": [[97, "    def test_raw_content_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.test_make_error_response": {"var": {"s": {"Response": [[29, "    s = http2.make_error_response(\"foo\", \"bar\")"]]}, "d": {"?": [[28, "    d = io.BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_render_simp": {"param": {"self": {"TestResponse": [[205, "    def test_render_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_render_with_header": {"var": {"s": {"?": [[131, "        s = io.BytesIO()"]]}}, "param": {"self": {"TestRequest": [[130, "    def test_render_with_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_nonascii": {"param": {"self": {"TestRequest": [[41, "    def test_nonascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_spec.rt": {"var": {"s": {"?": [[234, "            s = parse_response(s).spec()"]]}}, "param": {"s": {"str": [[233, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequest.test_user_agent": {"var": {"r": {"?": [[126, "        r = parse_request('GET:/:r:ua')"]]}}, "param": {"self": {"TestRequest": [[125, "    def test_user_agent(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_content_typ": {"param": {"self": {"TestResponse": [[186, "    def test_content_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestRequ": {"func": {"test_err": {"TestRequest -> None": [[45, "    def test_err(self):"]]}, "test_render_simple": {"TestRequest -> None": [[88, "    def test_render_simple(self):"]]}, "test_nested_response": {"TestRequest -> None": [[139, "    def test_nested_response(self):"]]}, "test_render_with_headers": {"TestRequest -> None": [[130, "    def test_render_with_headers(self):"]]}, "test_simple": {"TestRequest -> None": [[49, "    def test_simple(self):"]]}, "test_raw_content_length": {"TestRequest -> None": [[97, "    def test_raw_content_length(self):"]]}, "test_render_with_body": {"TestRequest -> None": [[146, "    def test_render_with_body(self):"]]}, "test_spec": {"TestRequest -> None": [[155, "    def test_spec(self):"]]}, "test_content_type": {"TestRequest -> None": [[120, "    def test_content_type(self):"]]}, "test_nonascii": {"TestRequest -> None": [[41, "    def test_nonascii(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_render_simple": {"var": {"s": {"?": [[206, "        s = io.BytesIO()"]]}, "r": {"?": [[207, "        r = parse_response('200')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResponse.test_spec": {"param": {"self": {"TestResponse": [[232, "    def test_spec(self):"]]}}, "func": {"rt": {"str -> None": [[233, "        def rt(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_http2.TestResp": {"func": {"test_render_with_body": {"TestResponse -> None": [[223, "    def test_render_with_body(self):"]]}, "test_raw_content_length": {"TestResponse -> None": [[178, "    def test_raw_content_length(self):"]]}, "test_nonascii": {"TestResponse -> None": [[170, "    def test_nonascii(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/coretypes/test_bidi.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretyp": {"func": {"test_bidi": {"() -> None": [[5, "def test_bidi():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.coretypes.test_bidi.test_bidi": {"var": {"b": {"BiDi": [[6, "    b = bidi.BiDi(a=1, b=2)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/proxy/protocol/test_websocket.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestB": {"func": {"setup_class": {"<_WebSocketTestBase> -> None": [[53, "    def setup_class(cls):"]]}, "teardown_class": {"<_WebSocketTestBase> -> None": [[59, "    def teardown_class(cls):"]]}, "master": {"_WebSocketTestBase -> ?": [[74, "    def master(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_w": {"class": {"_WebSocketTestBase": {"<_WebSocketTestBase>": [[49, "class _WebSocketTestBase:"]]}, "_WebSocketTest": {"<_WebSocketTest>": [[130, "class _WebSocketTest(_WebSocketTestBase, _WebSocketServerBase):"]]}, "_WebSocketServerBase": {"<_WebSocketServerBase>": [[20, "class _WebSocketServerBase(net_tservers.ServerTestBase):"]]}}, "param": {"_WebSocketTest": {"{TestClose | TestExtension | TestInjectMessageServer | TestInvalidFrame | TestKillFlow | TestPing | TestPong | TestSimple | TestSimpleTLS | _WebSocketTestBase}": [[130, "class _WebSocketTest(_WebSocketTestBase, _WebSocketServerBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageCli": {"func": {"handle_websockets": {"(<TestInjectMessageClient>, ?, ?) -> None": [[475, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.handle_websocket": {"param": {"cls": {"<TestSimple>": [[146, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestClose.handle_websocket": {"param": {"cls": {"<TestClose>": [[338, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimpleTLS.test_simple_t": {"param": {"self": {"TestSimpleTLS": [[255, "    def test_simple_tls(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInvalidF": {"func": {"test_invalid_frame": {"TestInvalidFrame -> None": [[385, "    def test_invalid_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestExtension.handle_websocket": {"param": {"cls": {"<TestExtension>": [[427, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.setup_connection": {"var": {"request": {"Request": [[89, "        request = http.Request("], [107, "        request = http.Request("]]}}, "param": {"self": {"{TestClose | TestExtension | TestInjectMessageClient | TestInjectMessageServer | TestInvalidFrame | TestKillFlow | TestPing | TestPong | TestSimple | TestSimpleTLS | TestStreaming | _WebSocketTestBase}": [[85, "    def setup_connection(self, extension=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTest.setup_cla": {"param": {"cls": {"<_WebSocketTest>": [[133, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBa": {"func": {"get_options": {"<_WebSocketTestBase> -> Options": [[63, "    def get_options(cls):"]]}, "setup": {"_WebSocketTestBase -> None": [[77, "    def setup(self):"]]}, "setup_connection": {"(TestPing, ?) -> ? / (TestInvalidFrame, ?) -> None / (TestSimpleTLS, ?) -> None / (TestClose, ?) -> None / (TestInjectMessageServer, ?) -> None / (TestSimple, ?) -> None / (TestExtension, ?) -> None / (_WebSocketTestBase, ?) -> None / (TestKillFlow, ?) -> None / (TestPong, ?) -> None": [[85, "    def setup_connection(self, extension=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillF": {"func": {"handle_websockets": {"(<TestKillFlow>, ?, ?) -> None": [[227, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketServerBase.handler.handl": {"var": {"request": {"Request": [[26, "                request = http.http1.read_request(self.rfile)"]]}, "response": {"Response": [[29, "                response = http.Response("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_change_payload.Addon.websocket_message": {"param": {"f": {"?": [[202, "            def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageClient.test_inject_message_client.Inj": {"func": {"websocket_start": {"(Inject, ?) -> None": [[480, "            def websocket_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow": {"func": {"test_kill": {"TestKillFlow -> None": [[231, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.get_option": {"var": {"opts": {"Options": [[64, "        opts = options.Options("]]}}, "param": {"cls": {"<_WebSocketTestBase>": [[63, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPing.handle_websocket": {"param": {"cls": {"<TestPing>": [[274, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPong.handle_websockets": {"var": {"frame": {"Frame": [[307, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[306, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[306, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming.test_streaming.Stream": {"func": {"websocket_start": {"(Stream, ?) -> None": [[405, "            def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInvalidFrame.handle_websockets": {"param": {"wfile": {"?": [[381, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[381, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestExtension.test_extension": {"var": {"frame": {"Frame": [[444, "        frame = websockets.Frame.from_file(self.client.rfile)"], [450, "        frame = websockets.Frame.from_file(self.client.rfile)"], [456, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "param": {"self": {"TestExtension": [[441, "    def test_extension(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageClient.test_inject_message_cli": {"class": {"Inject": {"<Inject>": [[479, "        class Inject:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.setup_connec": {"param": {"extension": {"?": [[85, "    def setup_connection(self, extension=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.test_kill.KillFlow.websocket_messag": {"param": {"self": {"KillFlow": [[233, "            def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer.test_inject_message_server.Inj": {"func": {"websocket_start": {"(Inject, ?) -> None": [[504, "            def websocket_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_change_payloa": {"class": {"Addon": {"<Addon>": [[201, "        class Addon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming.handle_websocket": {"param": {"cls": {"<TestStreaming>": [[398, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimpleTLS.handle_websockets": {"var": {"frame": {"Frame": [[251, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[247, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[247, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPong.handle_websocket": {"param": {"cls": {"<TestPong>": [[306, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSim": {"func": {"test_change_payload": {"TestSimple -> None": [[200, "    def test_change_payload(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketServerBase.handler": {"func": {"handle": {"handler -> ?": [[24, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.test_kill.KillFlow.websocket_message": {"param": {"f": {"?": [[233, "            def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming.handle_websockets": {"param": {"wfile": {"?": [[398, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[398, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInvalidFrame.test_invalid_fram": {"param": {"self": {"TestInvalidFrame": [[385, "    def test_invalid_frame(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimp": {"func": {"handle_websockets": {"(<TestSimple>, ?, ?) -> None": [[146, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.handle_websockets": {"var": {"frame": {"Frame": [[150, "        frame = websockets.Frame.from_file(rfile)"], [154, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[146, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[146, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer.handle_websocket": {"var": {"success": {"bool": [[497, "        success = frame.payload == b'This is an injected message!'"]]}}, "param": {"cls": {"<TestInjectMessageServer>": [[494, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageClient.test_inject_message_client.Inject.websocket_start": {"param": {"self": {"Inject": [[480, "            def websocket_start(self, flow):"]]}, "flow": {"?": [[480, "            def websocket_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimpleTLS.test_simple_tls": {"var": {"frame": {"Frame": [[258, "        frame = websockets.Frame.from_file(self.client.rfile)"], [264, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInvalidFrame.test_invalid_": {"var": {"frame": {"Frame": [[389, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketServerBase.handler.hand": {"param": {"self": {"handler": [[24, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming.test_": {"param": {"streaming": {"?": [[403, "    def test_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.test_ki": {"param": {"self": {"TestKillFlow": [[231, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageClient.handle_websocket": {"param": {"cls": {"<TestInjectMessageClient>": [[475, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageS": {"func": {"test_inject_message_server": {"TestInjectMessageServer -> None": [[502, "    def test_inject_message_server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_simp": {"param": {"self": {"TestSimple": [[159, "    def test_simple(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimpleTLS.handle_websocket": {"param": {"cls": {"<TestSimpleTLS>": [[247, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestClose.test_close_payload_1": {"param": {"self": {"TestClose": [[357, "    def test_close_payload_1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestClose.test_close_payload_2": {"param": {"self": {"TestClose": [[367, "    def test_close_payload_2(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.teardown_cla": {"param": {"cls": {"<_WebSocketTestBase>": [[59, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websock": {"class": {"TestSimpleTLS": {"<TestSimpleTLS>": [[243, "class TestSimpleTLS(_WebSocketTest):"]]}, "TestClose": {"<TestClose>": [[335, "class TestClose(_WebSocketTest):"]]}, "TestInvalidFrame": {"<TestInvalidFrame>": [[378, "class TestInvalidFrame(_WebSocketTest):"]]}, "TestStreaming": {"<TestStreaming>": [[395, "class TestStreaming(_WebSocketTest):"]]}, "TestInjectMessageServer": {"<TestInjectMessageServer>": [[491, "class TestInjectMessageServer(_WebSocketTest):"]]}, "TestPing": {"<TestPing>": [[271, "class TestPing(_WebSocketTest):"]]}, "TestKillFlow": {"<TestKillFlow>": [[224, "class TestKillFlow(_WebSocketTest):"]]}, "TestInjectMessageClient": {"<TestInjectMessageClient>": [[472, "class TestInjectMessageClient(_WebSocketTest):"]]}, "TestSimple": {"<TestSimple>": [[143, "class TestSimple(_WebSocketTest):"]]}, "TestPong": {"<TestPong>": [[303, "class TestPong(_WebSocketTest):"]]}, "TestExtension": {"<TestExtension>": [[424, "class TestExtension(_WebSocketTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming.test_streaming.Stream.websocket_start": {"param": {"self": {"Stream": [[405, "            def websocket_start(self, f):"]]}, "f": {"?": [[405, "            def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_change_payload.Addon": {"func": {"websocket_message": {"(Addon, ?) -> None": [[202, "            def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer.handle_websockets": {"var": {"frame": {"Frame": [[495, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[494, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[494, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimpleTLS": {"var": {"ssl": {"?": [[244, "    ssl = True"]]}}, "func": {"handle_websockets": {"(<TestSimpleTLS>, ?, ?) -> None": [[247, "    def handle_websockets(cls, rfile, wfile):"]]}, "test_simple_tls": {"TestSimpleTLS -> None": [[255, "    def test_simple_tls(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.setup_connecti": {"var": {"response": {"Response": [[101, "        response = http.http1.read_response(self.client.rfile, request)"], [126, "        response = http.http1.read_response(self.client.rfile, request)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPing.test_ping": {"var": {"frame": {"Frame": [[293, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "param": {"self": {"TestPing": [[290, "    async def test_ping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.handle_websocket": {"param": {"cls": {"<TestKillFlow>": [[227, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.test_kill.KillFl": {"func": {"websocket_message": {"(KillFlow, ?) -> None": [[233, "            def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageClient.test_inject_message_client": {"var": {"frame": {"Frame": [[486, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "param": {"self": {"TestInjectMessageClient": [[478, "    def test_inject_message_client(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBas": {"var": {"client": {"TCPClient": [[50, "    client = None"]]}}, "func": {"teardown": {"_WebSocketTestBase -> None": [[81, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.teardown": {"param": {"self": {"_WebSocketTestBase": [[81, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketServerBas": {"class": {"handler": {"<handler>": [[22, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestExtension.handle_websockets": {"var": {"frame": {"Frame": [[431, "        frame = websockets.Frame.from_file(rfile)"], [436, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[427, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[427, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_simple.Stream.websocket_start": {"param": {"self": {"Stream": [[161, "            def websocket_start(self, f):"]]}, "f": {"?": [[161, "            def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestClose.test_clo": {"param": {"self": {"TestClose": [[347, "    def test_close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.setup_cla": {"param": {"cls": {"<_WebSocketTestBase>": [[53, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestClose.handle_websockets": {"var": {"frame": {"Frame": [[339, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[338, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[338, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestExtensi": {"func": {"handle_websockets": {"(<TestExtension>, ?, ?) -> None": [[427, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer.test_inject_message_serv": {"var": {"frame": {"Frame": [[510, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPing.handle_websockets": {"var": {"frame": {"Frame": [[278, "        frame = websockets.Frame.from_file(rfile)"]]}}, "param": {"wfile": {"?": [[274, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[274, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming": {"func": {"handle_websockets": {"(<TestStreaming>, ?, ?) -> None": [[398, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer.test_inject_message_server.Inject.websocket_start": {"param": {"self": {"Inject": [[504, "            def websocket_start(self, flow):"]]}, "flow": {"?": [[504, "            def websocket_start(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPing": {"func": {"handle_websockets": {"(<TestPing>, ?, ?) -> None": [[274, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.setup": {"param": {"self": {"_WebSocketTestBase": [[77, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_simpl": {"var": {"frame": {"Frame": [[167, "        frame = websockets.Frame.from_file(self.client.rfile)"], [173, "        frame = websockets.Frame.from_file(self.client.rfile)"], [179, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "class": {"Stream": {"<Stream>": [[160, "        class Stream:"]]}}, "param": {"streaming": {"?": [[159, "    def test_simple(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInvalidFrame.handle_websocket": {"param": {"cls": {"<TestInvalidFrame>": [[381, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageClient.handle_websockets": {"param": {"wfile": {"?": [[475, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[475, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTestBase.master": {"param": {"self": {"_WebSocketTestBase": [[74, "    def master(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.test_k": {"class": {"KillFlow": {"<KillFlow>": [[232, "        class KillFlow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestStreaming.test_streaming": {"var": {"frame": {"None": [[411, "        frame = None"]], "Frame": [[414, "                frame = websockets.Frame.from_file(self.client.rfile)"], [418, "            frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "class": {"Stream": {"<Stream>": [[404, "        class Stream:"]]}}, "param": {"self": {"TestStreaming": [[403, "    def test_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestE": {"func": {"test_extension": {"TestExtension -> None": [[441, "    def test_extension(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestC": {"func": {"handle_websockets": {"(<TestClose>, ?, ?) -> None": [[338, "    def handle_websockets(cls, rfile, wfile):"]]}, "test_close_payload_2": {"TestClose -> None": [[367, "    def test_close_payload_2(self):"]]}, "test_close_payload_1": {"TestClose -> None": [[357, "    def test_close_payload_1(self):"]]}, "test_close": {"TestClose -> None": [[347, "    def test_close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_simple.Stream": {"func": {"websocket_start": {"(Stream, ?) -> None": [[161, "            def websocket_start(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestS": {"func": {"test_simple": {"(TestSimple, ?) -> None": [[159, "    def test_simple(self, streaming):"]]}, "test_streaming": {"(TestStreaming, ?) -> None": [[403, "    def test_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInvalidFram": {"func": {"handle_websockets": {"(<TestInvalidFrame>, ?, ?) -> None": [[381, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPong": {"func": {"handle_websockets": {"(<TestPong>, ?, ?) -> None": [[306, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageC": {"func": {"test_inject_message_client": {"TestInjectMessageClient -> None": [[478, "    def test_inject_message_client(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestPong.test_pong": {"var": {"frame": {"Frame": [[325, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "param": {"self": {"TestPong": [[319, "    async def test_pong(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_change_payload": {"var": {"frame": {"Frame": [[208, "        frame = websockets.Frame.from_file(self.client.rfile)"], [214, "        frame = websockets.Frame.from_file(self.client.rfile)"], [220, "        frame = websockets.Frame.from_file(self.client.rfile)"]]}}, "param": {"self": {"TestSimple": [[200, "    def test_change_payload(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer.test_inject_message_server": {"class": {"Inject": {"<Inject>": [[503, "        class Inject:"]]}}, "param": {"self": {"TestInjectMessageServer": [[502, "    def test_inject_message_server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestInjectMessageServer": {"func": {"handle_websockets": {"(<TestInjectMessageServer>, ?, ?) -> None": [[494, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketTest.teardown_cla": {"param": {"cls": {"<_WebSocketTest>": [[138, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestKillFlow.handle_websockets": {"param": {"wfile": {"?": [[227, "    def handle_websockets(cls, rfile, wfile):"]]}, "rfile": {"?": [[227, "    def handle_websockets(cls, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket.TestSimple.test_change_payload.Addon.websocket_messag": {"param": {"self": {"Addon": [[202, "            def websocket_message(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_websocket._WebSocketT": {"func": {"setup_class": {"<_WebSocketTest> -> None": [[133, "    def setup_class(cls):"]]}, "teardown_class": {"<_WebSocketTest> -> None": [[138, "    def teardown_class(cls):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-add-header.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-header.AddHeader": {"func": {"__init__": {"? -> ?": [[5, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-header.AddHead": {"func": {"response": {"(AddHeader, ?) -> None": [[8, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-header.AddHeader.respon": {"param": {"self": {"AddHeader": [[8, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-h": {"class": {"AddHeader": {"<AddHeader>": [[4, "class AddHeader:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-header.AddHeader.response": {"param": {"flow": {"?": [[8, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-header.AddHeader.__init__": {"param": {"self": {"AddHeader": [[5, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-add-header": {"var": {"addons": {"[AddHeader]": [[13, "addons = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.parse_websocket_fram": {"var": {"reqs": {"?": [[78, "        reqs = pp.OneOrMore("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.serve": {"var": {"msg": {"{None | Response}": [[99, "    msg = msg.resolve(settings)"]]}, "vals": {"None": [[102, "    vals = msg.values(settings)"]]}, "duration": {"int": [[110, "    duration = time.time() - started"]]}, "actions": {"[?]": [[107, "    actions = [i.intermediate(settings) for i in actions]"]], "?": [[105, "    actions = sorted(msg.actions[:])"]]}}, "param": {"msg": {"{Response | Response}": [[89, "def serve(msg, fp, settings):"]]}, "fp": {"?": [[89, "def serve(msg, fp, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.parse_websocket_frame": {"param": {"s": {"str": [[73, "def parse_websocket_frame(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.serv": {"var": {"started": {"int": [[100, "    started = time.time()"]]}, "disconnect": {"bool": [[109, "    disconnect = writer.write_values(fp, vals, actions[:])"]]}, "ret": {"dict": [[111, "    ret = dict("]]}}, "param": {"settings": {"{Settings | dict}": [[89, "def serve(msg, fp, settings):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.expand": {"var": {"j_": {"int": [[20, "        for j_ in range(int(times.value)):"]]}, "times": {"?": [[18, "    times = getattr(msg, \"times\", None)"]]}}, "param": {"msg": {"?": [[17, "def expand(msg):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.languag": {"func": {"parse_pathod": {"(?, bool) -> ? / (str, bool) -> ?": [[26, "def parse_pathod(s, use_http2=False):"]]}, "parse_websocket_frame": {"str -> ? / ? -> ?": [[73, "def parse_websocket_frame(s):"]]}, "serve": {"(Response, ?, dict) -> dict / (?, ?, ?) -> dict / (?, ?, dict) -> dict / (?, ?, Settings) -> dict / (Response, ?, Settings) -> dict": [[89, "def serve(msg, fp, settings):"]]}, "expand": {"? -> None": [[17, "def expand(msg):"]]}, "parse_pathoc": {"(str, bool) -> ? / (?, bool) -> ?": [[51, "def parse_pathoc(s, use_http2=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.parse_pathod": {"var": {"expressions": {"[None]": [[36, "            expressions = ["], [41, "            expressions = ["]]}, "reqs": {"?": [[45, "        reqs = pp.Or(expressions).parseString(s, parseAll=True)"]]}}, "param": {"s": {"str": [[26, "def parse_pathod(s, use_http2=False):"]]}, "use_http2": {"bool": [[26, "def parse_pathod(s, use_http2=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language": {"var": {"__all__": {"[str]": [[11, "__all__ = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.parse_pathoc": {"var": {"expressions": {"[None]": [[58, "            expressions = ["], [63, "            expressions = ["]]}, "reqs": {"?": [[67, "        reqs = pp.OneOrMore(pp.Or(expressions)).parseString(s, parseAll=True)"]]}}, "param": {"s": {"str": [[51, "def parse_pathoc(s, use_http2=False):"]]}, "use_http2": {"bool": [[51, "def parse_pathoc(s, use_http2=False):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/master.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.ServerThread.run": {"param": {"self": {"ServerThread": [[36, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.ServerThread": {"func": {"run": {"ServerThread -> None": [[36, "    def run(self):"]]}, "__init__": {"? -> ?": [[29, "    def __init__(self, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.M": {"func": {"_change_reverse_host": {"(Master, ?) -> None / (Master, HTTPFlow) -> None / (ConsoleMaster, HTTPFlow) -> None": [[133, "    def _change_reverse_host(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.run_loo": {"var": {"p": {"?": [[94, "            for p in tasks:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.m": {"class": {"Master": {"<Master>": [[40, "class Master:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.running": {"param": {"self": {"{DumpMaster | Master | WebMaster}": [[77, "    async def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.server": {"param": {"self": {"Master": [[64, "    def server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master._shutdown": {"var": {"loop": {"?": [[114, "        loop = asyncio.get_event_loop()"]]}}, "param": {"self": {"{ConsoleMaster | DumpMaster | Master | WebMaster}": [[110, "    async def _shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.run_loop": {"var": {"tasks": {"?": [[93, "            tasks = asyncio.all_tasks(loop) if sys.version_info >= (3, 7) else asyncio.Task.all_tasks(loop)"]]}, "exc": {"None": [[84, "        exc = None"]], "?": [[88, "            exc = traceback.format_exc()"]]}}, "param": {"self": {"{DumpMaster | Master | WebMaster}": [[80, "    def run_loop(self, loop):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.start": {"param": {"self": {"{DumpMaster | Master | WebMaster}": [[72, "    def start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.run_": {"var": {"loop": {"?": [[92, "            loop = asyncio.get_event_loop()"]]}}, "param": {"loop": {"?": [[80, "    def run_loop(self, loop):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master._change_reverse_host": {"var": {"_": {"?": [[140, "            _, upstream_spec = server_spec.parse_with_mode(self.options.mode)"]]}}, "param": {"self": {"{ConsoleMaster | Master}": [[133, "    def _change_reverse_host(self, f):"]]}, "f": {"HTTPFlow": [[133, "    def _change_reverse_host(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Maste": {"func": {"start": {"DumpMaster -> None / Master -> None / WebMaster -> None": [[72, "    def start(self):"]]}, "run": {"(DumpMaster, None) -> None / (Master, None) -> None": [[106, "    def run(self, func=None):"]]}, "run_loop": {"(DumpMaster, ?) -> ? / (Master, ?) -> ? / (WebMaster, ?) -> ?": [[80, "    def run_loop(self, loop):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.shutdown": {"var": {"ret": {"?": [[123, "            ret = asyncio.run_coroutine_threadsafe(self._shutdown(), loop=self.channel.loop)"]]}}, "param": {"self": {"{ConsoleMaster | DumpMaster | Master | WebMaster}": [[117, "    def shutdown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master": {"func": {"shutdown": {"DumpMaster -> ? / ConsoleMaster -> ? / Master -> ? / WebMaster -> ?": [[117, "    def shutdown(self):"]]}, "__init__": {"? -> ?": [[44, "    def __init__(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.__init__": {"param": {"self": {"Master": [[44, "    def __init__(self, opts):"]]}, "opts": {"Options": [[44, "    def __init__(self, opts):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.ServerThread.__init__": {"var": {"address": {"?": [[31, "        address = getattr(self.server, \"address\", None)"]]}}, "param": {"self": {"ServerThread": [[29, "    def __init__(self, server):"]]}, "server": {"{? -> ? | DummyServer | ProxyServer}": [[29, "    def __init__(self, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.run": {"var": {"loop": {"?": [[107, "        loop = asyncio.get_event_loop()"]]}}, "param": {"self": {"{DumpMaster | Master}": [[106, "    def run(self, func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.mast": {"class": {"ServerThread": {"<ServerThread>": [[28, "class ServerThread(basethread.BaseThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.r": {"param": {"func": {"None": [[106, "    def run(self, func=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Master.load_flow": {"var": {"e": {"?": [[161, "        for e, o in eventsequence.iterate(f):"]]}, "hf": {"HTTPFlow": [[155, "            hf = [hf for hf in self.waiting_flows if hf.id == f.metadata['websocket_handshake']][0]"]]}}, "param": {"self": {"{ConsoleMaster | Master}": [[144, "    async def load_flow(self, f):"]]}, "f": {"HTTPFlow": [[144, "    async def load_flow(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.master.Mast": {"func": {"server": {"Master -> None": [[64, "    def server(self):"]], "{? -> ? | DummyServer | ProxyServer}": [[68, "    def server(self, server):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/mapping.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.done.value_dump": {"var": {"store": {"dict": [[133, "                store = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon": {"var": {"OPT_MAPPING_FILE": {"str": [[28, "    OPT_MAPPING_FILE = \"mapping_file\""]]}, "OPT_MAP_PERSISTENT": {"str": [[46, "    OPT_MAP_PERSISTENT = \"map_persistent\""]]}}, "param": {"loader": {"?": [[74, "    def load(self, loader):"]]}}, "func": {"load": {"(MappingAddon, ?) -> None": [[74, "    def load(self, loader):"]]}, "apply_template": {"(MappingAddon, ?, ?) -> None": [[99, "    def apply_template(self, soup: BeautifulSoup, template: Dict[str, typing.Union[BeautifulSoup]]) -> None:"]]}, "replace": {"(MappingAddon, ?, ?, ?) -> None": [[93, "    def replace(self, soup: BeautifulSoup, css_sel: str, replace: BeautifulSoup) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.don": {"param": {"self": {"MappingAddon": [[127, "    def done(self) -> None:"]]}}, "func": {"value_dumper": {"? -> {dict | str}": [[132, "            def value_dumper(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.respons": {"var": {"content": {"?": [[118, "                    content = BeautifulSoup(res.content, MappingAddonConfig.HTML_PARSER)"]]}, "template": {"?": [[119, "                    for template in templates:"]]}, "content_type": {"?": [[115, "                content_type = res.headers.get(\"content-type\", \"text/html\")"]]}, "encoding": {"?": [[114, "                encoding = res.headers.get(\"content-encoding\", \"utf-8\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingA": {"func": {"done": {"MappingAddon -> None": [[127, "    def done(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.m": {"class": {"MappingAddonConfig": {"<MappingAddonConfig>": [[14, "class MappingAddonConfig:"]]}, "MappingAddon": {"<MappingAddon>": [[18, "class MappingAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping": {"var": {"NO_CONTENT": {"object": [[11, "NO_CONTENT = object()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.repla": {"var": {"content": {"?": [[95, "        for content in soup.select(css_sel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddo": {"func": {"__init__": {"? -> ?": [[49, "    def __init__(self, filename: str, persistent: bool = False) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.apply_templat": {"var": {"mapped": {"?": [[102, "            mapped = soup.select(css_sel)"]]}, "css_sel": {"?": [[101, "        for css_sel, replace in template.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAdd": {"func": {"configure": {"(MappingAddon, ?) -> None": [[84, "    def configure(self, updated):"]]}, "response": {"(MappingAddon, ?) -> ?": [[108, "    def response(self, flow: HTTPFlow) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.load": {"param": {"self": {"MappingAddon": [[74, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddonConfig": {"var": {"HTML_PARSER": {"str": [[15, "    HTML_PARSER = \"html.parser\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.configur": {"param": {"self": {"MappingAddon": [[84, "    def configure(self, updated):"]]}, "updated": {"?": [[84, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.respon": {"var": {"templates": {"?": [[111, "            templates = self.mapping_templates[flow]"]]}, "res": {"?": [[112, "            res = flow.response"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.mapping.MappingAddon.done.value_dumper": {"var": {"css_sel": {"?": [[137, "                    for css_sel, soup in value.items():"]]}}, "param": {"value": {"?": [[132, "            def value_dumper(value):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/web/app.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowConten": {"func": {"post": {"(FlowContent, ?, ?) -> None": [[362, "    def post(self, flow_id, message):"]]}, "get": {"(FlowContent, ?, ?) -> None": [[368, "    def get(self, flow_id, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FilterHelp.get": {"param": {"self": {"FilterHelp": [[194, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowHandler.put": {"var": {"a": {"?": [[295, "            for a, b in self.json.items():"]]}, "header": {"?": [[305, "                            for header in v:"], [321, "                            for header in v:"]]}, "k": {"?": [[298, "                    for k, v in b.items():"], [314, "                    for k, v in b.items():"]]}, "flow": {"RequestHandler -> None": [[292, "        flow = self.flow"]]}, "response": {"?": [[313, "                    response = flow.response"]]}}, "param": {"self": {"FlowHandler": [[291, "    def put(self, flow_id):"]]}, "flow_id": {"?": [[291, "    def put(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ResumeFlow": {"func": {"post": {"ResumeFlows -> None": [[258, "    def post(self):"]], "(ResumeFlow, ?) -> None": [[273, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ResumeFlows.post": {"var": {"f": {"?": [[259, "        for f in self.view:"]]}}, "param": {"self": {"ResumeFlows": [[258, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.flow_to_json": {"var": {"f": {"dict": [[33, "    f = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Settings.pu": {"var": {"allowed_options": {"[str]": [[443, "        allowed_options = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Options": {"var": {"update": {"RequestHandler -> ?": [[459, "        update = self.json"]]}}, "func": {"put": {"Options -> ?": [[458, "    def put(self):"]]}, "get": {"Options -> None": [[455, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowHandler.delete": {"param": {"flow_id": {"?": [[286, "    def delete(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.view": {"param": {"self": {"RequestHandler": [[162, "    def view(self) -> \"mitmproxy.addons.view.View\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FilterHelp": {"func": {"get": {"FilterHelp -> None": [[194, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.KillFlow": {"func": {"post": {"(KillFlow, ?) -> None": [[279, "    def post(self, flow_id):"]], "KillFlows -> None": [[265, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.write": {"var": {"chunk": {"?": [[124, "            chunk = tornado.escape.json_encode(chunk)"]]}}, "param": {"chunk": {"{[dict] | [dict] | dict | dict}": [[120, "    def write(self, chunk):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.SaveOption": {"func": {"post": {"SaveOptions -> None": [[467, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ResumeFlow.post": {"param": {"self": {"ResumeFlow": [[273, "    def post(self, flow_id):"]]}, "flow_id": {"?": [[273, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.WebSocketEventBroadcaster": {"func": {"on_close": {"WebSocketEventBroadcaster -> None": [[207, "    def on_close(self):"]]}, "open": {"WebSocketEventBroadcaster -> None": [[204, "    def open(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Settings.get": {"param": {"self": {"Settings": [[419, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.KillFlows.post": {"var": {"f": {"?": [[266, "        for f in self.view:"]]}}, "param": {"self": {"KillFlows": [[265, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowContentView": {"func": {"get": {"(FlowContentView, ?, ?, ?) -> None": [[398, "    def get(self, flow_id, message, content_view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.writ": {"param": {"self": {"{DumpFlows | DuplicateFlow | Events | FilterHelp | FlowContent | FlowContentView | Flows | Options | RequestHandler | Settings}": [[120, "    def write(self, chunk):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.WebSocketEventBroadcaste": {"func": {"broadcast": {"<WebSocketEventBroadcaster> -> ?": [[211, "    def broadcast(cls, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DumpFlows.get": {"var": {"bio": {"?": [[235, "        bio = BytesIO()"]]}, "f": {"?": [[237, "        for f in self.view:"]]}, "fw": {"FlowWriter": [[236, "        fw = io.FlowWriter(bio)"]]}}, "param": {"self": {"DumpFlows": [[231, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DuplicateFlow.post": {"var": {"f": {"?": [[337, "        f = self.flow.copy()"]]}}, "param": {"self": {"DuplicateFlow": [[336, "    def post(self, flow_id):"]]}, "flow_id": {"?": [[336, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.a": {"class": {"DumpFlows": {"<DumpFlows>": [[230, "class DumpFlows(RequestHandler):"]]}, "FilterHelp": {"<FilterHelp>": [[193, "class FilterHelp(RequestHandler):"]]}, "Options": {"<Options>": [[454, "class Options(RequestHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandl": {"func": {"write": {"(DumpFlows, ?) -> ? / (FlowContent, ?) -> None / (RequestHandler, ?) -> None / (Flows, [dict]) -> None / (DuplicateFlow, ?) -> None / (Options, dict) -> None / (FilterHelp, dict) -> None / (Settings, dict) -> None / (Events, [dict]) -> None / (FlowContentView, dict) -> None": [[120, "    def write(self, chunk):"]]}, "write_error": {"(RequestHandler, ?) -> None": [[179, "    def write_error(self, status_code: int, **kwargs):"]]}, "master": {"RequestHandler -> ?": [[166, "    def master(self) -> \"mitmproxy.tools.web.master.WebMaster\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RevertFlow.post": {"param": {"self": {"RevertFlow": [[343, "    def post(self, flow_id):"]]}, "flow_id": {"?": [[343, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DnsRebind.get": {"param": {"self": {"DnsRebind": [[476, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.WebSocketEventBroadcaster.open": {"param": {"self": {"WebSocketEventBroadcaster": [[204, "    def open(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.IndexHandler.get": {"param": {"self": {"IndexHandler": [[187, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.IndexHandler": {"func": {"get": {"IndexHandler -> None": [[187, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.IndexHandler.g": {"var": {"token": {"?": [[188, "        token = self.xsrf_token  # https://github.com/tornadoweb/tornado/issues/645"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.flow": {"param": {"self": {"RequestHandler": [[170, "    def flow(self) -> mitmproxy.flow.Flow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Settings": {"var": {"update": {"RequestHandler -> ?": [[442, "        update = self.json"]]}}, "func": {"put": {"Settings -> None": [[441, "    def put(self):"]]}, "get": {"Settings -> None": [[419, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.json": {"param": {"self": {"RequestHandler": [[142, "    def json(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.filecontent": {"param": {"self": {"RequestHandler": [[151, "    def filecontents(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DumpFlow": {"func": {"post": {"DumpFlows -> None": [[243, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.set_default_header": {"param": {"self": {"RequestHandler": [[128, "    def set_default_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Events.get": {"param": {"self": {"Events": [[414, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ClearAll.post": {"param": {"self": {"ClearAll": [[252, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.flow_to_js": {"var": {"content_length": {"int": [[58, "                content_length = len(flow.request.raw_content)"], [80, "                content_length = len(flow.response.raw_content)"]], "None": [[61, "                content_length = None"], [83, "                content_length = None"]]}, "conn": {"str": [[43, "    for conn in \"client_conn\", \"server_conn\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowHandler.delet": {"param": {"self": {"FlowHandler": [[286, "    def delete(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Flows": {"func": {"get": {"Flows -> None": [[226, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowContentView.get": {"var": {"message": {"?": [[399, "        message = getattr(self.flow, message)"]]}}, "param": {"self": {"FlowContentView": [[398, "    def get(self, flow_id, message, content_view):"]]}, "message": {"?": [[398, "    def get(self, flow_id, message, content_view):"]]}, "flow_id": {"?": [[398, "    def get(self, flow_id, message, content_view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Flows.get": {"param": {"self": {"Flows": [[226, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.WebSocketEventBroadcaster.broadcast": {"var": {"message": {"?": [[212, "        message = json.dumps(kwargs, ensure_ascii=False).encode(\"utf8\", \"surrogateescape\")"]]}, "conn": {"?": [[214, "        for conn in cls.connections:"]]}}, "param": {"cls": {"<WebSocketEventBroadcaster>": [[211, "    def broadcast(cls, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web": {"class": {"Application": {"<Application>": [[484, "class Application(tornado.web.Application):"]]}, "ReplayFlow": {"<ReplayFlow>": [[349, "class ReplayFlow(RequestHandler):"]]}, "SaveOptions": {"<SaveOptions>": [[466, "class SaveOptions(RequestHandler):"]]}, "DuplicateFlow": {"<DuplicateFlow>": [[335, "class DuplicateFlow(RequestHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowHandler": {"func": {"put": {"(FlowHandler, ?) -> ?": [[291, "    def put(self, flow_id):"]]}, "delete": {"(FlowHandler, ?) -> None": [[286, "    def delete(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowContentView.g": {"var": {"description": {"str": [[401, "        description, lines, error = contentviews.get_message_content_view("]]}}, "param": {"content_view": {"?": [[398, "    def get(self, flow_id, message, content_view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Events": {"func": {"get": {"Events -> None": [[414, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DuplicateFlow": {"func": {"post": {"(DuplicateFlow, ?) -> None": [[336, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RevertFlow": {"func": {"post": {"(RevertFlow, ?) -> None": [[343, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DumpFlows.post": {"var": {"i": {"?": [[246, "        for i in io.FlowReader(bio).stream():"]]}, "bio": {"?": [[245, "        bio = BytesIO(self.filecontents)"]]}}, "param": {"self": {"DumpFlows": [[243, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ClearAll": {"func": {"post": {"ClearAll -> None": [[252, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ReplayFlow": {"func": {"post": {"(ReplayFlow, ?) -> ?": [[350, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.flow_to_j": {"var": {"content_hash": {"None": [[62, "                content_hash = None"], [84, "                content_hash = None"]], "?": [[59, "                content_hash = hashlib.sha256(flow.request.raw_content).hexdigest()"], [81, "                content_hash = hashlib.sha256(flow.response.raw_content).hexdigest()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowContent.post": {"var": {"message": {"?": [[364, "        message = getattr(self.flow, message)"]]}}, "param": {"self": {"FlowContent": [[362, "    def post(self, flow_id, message):"]]}, "message": {"?": [[362, "    def post(self, flow_id, message):"]]}, "flow_id": {"?": [[362, "    def post(self, flow_id, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler.master": {"param": {"self": {"RequestHandler": [[166, "    def master(self) -> \"mitmproxy.tools.web.master.WebMaster\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHan": {"func": {"set_default_headers": {"RequestHandler -> None": [[128, "    def set_default_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Options.get": {"param": {"self": {"Options": [[455, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DnsRebind": {"func": {"get": {"DnsRebind -> None": [[476, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.RequestHandler": {"var": {"flow": {"?": [[173, "        flow = self.view.get_by_id(flow_id)"]]}, "flow_id": {"str": [[171, "        flow_id = str(self.path_kwargs[\"flow_id\"])"]]}}, "func": {"filecontents": {"RequestHandler -> None": [[151, "    def filecontents(self):"]]}, "json": {"RequestHandler -> ?": [[142, "    def json(self):"]]}, "flow": {"RequestHandler -> None": [[170, "    def flow(self) -> mitmproxy.flow.Flow:"]]}, "view": {"RequestHandler -> ?": [[162, "    def view(self) -> \"mitmproxy.addons.view.View\":"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowContent.get": {"var": {"message": {"?": [[369, "        message = getattr(self.flow, message)"]]}, "cd": {"str": [[389, "        cd = \"attachment; filename={}\".format(filename)"]]}, "original_cd": {"?": [[379, "        original_cd = message.headers.get(\"Content-Disposition\", None)"]]}, "filename": {"None": [[380, "        filename = None"]], "?": [[382, "            filename = re.search(r'filename=([-\\w\" .()]+)', original_cd)"], [384, "                filename = filename.group(1)"], [386, "            filename = self.flow.request.path.split(\"?\")[0].split(\"/\")[-1]"], [388, "        filename = re.sub(r'[^-\\w\" .()]', \"\", filename)"]]}}, "param": {"self": {"FlowContent": [[368, "    def get(self, flow_id, message):"]]}, "message": {"?": [[368, "    def get(self, flow_id, message):"]]}, "flow_id": {"?": [[368, "    def get(self, flow_id, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Applicatio": {"func": {"__init__": {"? -> ?": [[487, "    def __init__(self, master: \"mitmproxy.tools.web.master.WebMaster\", debug: bool) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.KillFlow.post": {"param": {"self": {"KillFlow": [[279, "    def post(self, flow_id):"]]}, "flow_id": {"?": [[279, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Settings.put": {"var": {"k": {"?": [[448, "        for k in update:"]]}}, "param": {"self": {"Settings": [[441, "    def put(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.DumpFlows": {"func": {"get": {"DumpFlows -> None": [[231, "    def get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app": {"class": {"Events": {"<Events>": [[413, "class Events(RequestHandler):"]]}, "Settings": {"<Settings>": [[418, "class Settings(RequestHandler):"]]}, "ClearAll": {"<ClearAll>": [[251, "class ClearAll(RequestHandler):"]]}, "APIError": {"<APIError>": [[113, "class APIError(tornado.web.HTTPError):"]]}, "FlowHandler": {"<FlowHandler>": [[285, "class FlowHandler(RequestHandler):"]]}, "Flows": {"<Flows>": [[225, "class Flows(RequestHandler):"]]}, "ResumeFlow": {"<ResumeFlow>": [[272, "class ResumeFlow(RequestHandler):"]]}, "KillFlow": {"<KillFlow>": [[278, "class KillFlow(RequestHandler):"]]}, "KillFlows": {"<KillFlows>": [[264, "class KillFlows(RequestHandler):"]]}, "RequestHandler": {"<RequestHandler>": [[117, "class RequestHandler(tornado.web.RequestHandler):"]]}, "RevertFlow": {"<RevertFlow>": [[342, "class RevertFlow(RequestHandler):"]]}, "DnsRebind": {"<DnsRebind>": [[475, "class DnsRebind(RequestHandler):"]]}, "ResumeFlows": {"<ResumeFlows>": [[257, "class ResumeFlows(RequestHandler):"]]}, "WebSocketEventBroadcaster": {"<WebSocketEventBroadcaster>": [[200, "class WebSocketEventBroadcaster(tornado.websocket.WebSocketHandler):"]]}, "FlowContent": {"<FlowContent>": [[361, "class FlowContent(RequestHandler):"]]}, "FlowContentView": {"<FlowContentView>": [[397, "class FlowContentView(RequestHandler):"]]}, "IndexHandler": {"<IndexHandler>": [[186, "class IndexHandler(RequestHandler):"]]}, "ClientConnection": {"<ClientConnection>": [[221, "class ClientConnection(WebSocketEventBroadcaster):"]]}}, "func": {"flow_to_json": {"? -> dict": [[26, "def flow_to_json(flow: mitmproxy.flow.Flow) -> dict:"]]}, "logentry_to_json": {"? -> dict": [[105, "def logentry_to_json(e: log.LogEntry) -> dict:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.ReplayFlow.post": {"param": {"self": {"ReplayFlow": [[350, "    def post(self, flow_id):"]]}, "flow_id": {"?": [[350, "    def post(self, flow_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.SaveOptions.post": {"param": {"self": {"SaveOptions": [[467, "    def post(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowC": {"var": {"content_encoding": {"?": [[374, "        content_encoding = message.headers.get(\"Content-Encoding\", None)"], [376, "            content_encoding = re.sub(r\"[^\\w]\", \"\", content_encoding)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.WebSocketEventBroadcaster.on_clo": {"param": {"self": {"WebSocketEventBroadcaster": [[207, "    def on_close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.Options.put": {"param": {"self": {"Options": [[458, "    def put(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.app.FlowHandler.p": {"var": {"request": {"?": [[297, "                    request = flow.request"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_request.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_set_path_componen": {"var": {"request": {"Request": [[297, "        request.path_components = [\"foo\", \"baz\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCor": {"var": {"test_make": {"TestRequestCore -> None": [[42, "        r = Request.make(\"GET\", \"https://example.com/\")"]]}, "test_host": {"TestRequestCore -> None": [[89, "        request = treq()"]]}, "test_path": {"TestRequestCore -> None": [[81, "        req = treq()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_pretty_url": {"var": {"request": {"Request": [[219, "        # Without host header"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestData": {"func": {"test_init": {"TestRequestData -> None": [[10, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_r": {"class": {"TestRequestData": {"<TestRequestData>": [[9, "class TestRequestData:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_set_multipart_form": {"var": {"request": {"Request": [[364, "        request.multipart_form = [(\"file\", \"shell.jpg\"), (\"file_size\", \"1000\")]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_set_cooki": {"var": {"request": {"Request": [[283, "        request.headers = Headers(cookie=\"cookiename=cookievalue\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_host_update_also_updates_head": {"var": {"request": {"Request": [[117, "        assert \"host\" not in request.headers"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_anticach": {"var": {"request": {"Request": [[312, "        request.headers[\"If-Modified-Since\"] = \"foo\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_host": {"var": {"d": {"{? -> ? | str}": [[112, "        request.host = d"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_ho": {"var": {"request": {"Request": [[90, "        assert request.host == request.data.host.decode(\"idna\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_anticomp": {"var": {"request": {"Request": [[320, "        request.headers[\"Accept-Encoding\"] = \"foobar\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_get_query": {"var": {"request": {"Request": [[239, "        assert not request.query"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_get_cookies_withequalsign": {"var": {"request": {"Request": [[275, "        request.headers = Headers(cookie=\"cookiename=coo=kievalue;othercookiename=othercookievalue\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_path": {"var": {"req": {"Request": [[82, "        _test_decoded_attr(req, \"path\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_get_cookies_singl": {"var": {"request": {"Request": [[261, "        request.headers = Headers(cookie=\"cookiename=cookievalue\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_constrain_encoding": {"var": {"request": {"Request": [[327, "        h = request.headers.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_get_cookies_doubl": {"var": {"request": {"Request": [[267, "        request.headers = Headers(cookie=\"cookiename=cookievalue;othercookiename=othercookievalue\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_url": {"var": {"request": {"Request": [[177, "        assert request.url == \"http://address:22/path\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_rep": {"var": {"request": {"Request": [[37, "        assert repr(request) == \"Request(GET address:22/path)\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestC": {"var": {"test_port": {"TestRequestCore -> None": [[78, "        _test_passthrough_attr(treq(), \"port\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCo": {"var": {"test_repr": {"TestRequestCore -> None": [[36, "        request = treq()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_get_cookies_non": {"var": {"request": {"Request": [[256, "        request.headers = Headers()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUti": {"var": {"test_url": {"TestRequestUtils -> None": [[176, "        request = treq()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_get_host_heade": {"var": {"no_hdr": {"Request": [[127, "        assert no_hdr.host_header is None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtil": {"var": {"test_anticomp": {"TestRequestUtils -> None": [[319, "        request = treq()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_set_query": {"var": {"request": {"Request": [[246, "        assert not request.query"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestData.test_init": {"param": {"self": {"TestRequestData": [[10, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestCore.test_get_host_header": {"var": {"h2": {"Request": [[135, "            (b\":authority\", b\"example.org\"),"]]}, "h1": {"Request": [[130, "            (b\"host\", b\"example.com\"),"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_request.TestRequestUtils.test_pretty_ho": {"var": {"request": {"Request": [[198, "        # Without host header"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/grideditor/base.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_spawn_editor": {"var": {"o": {"None": [[397, "        o = self.walker.get_current_value()"]]}, "n": {"None": [[400, "            n = strutils.clean_hanging_newline(n)"]], "?": [[399, "            n = self.master.spawn_editor(o)"]]}}, "param": {"self": {"BaseGridEditor": [[396, "    def cmd_spawn_editor(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.start_edit": {"var": {"col": {"?": [[186, "        col = self.editor.columns[self.focus_col]"]]}}, "param": {"self": {"GridWalker": [[185, "    def start_edit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEdit": {"func": {"is_error": {"(BaseGridEditor, int, None) -> None / (BaseGridEditor, ?, ?) -> None / (BaseGridEditor, int, str) -> None": [[372, "    def is_error(self, col: int, val: typing.Any) -> typing.Optional[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.C": {"func": {"selectable": {"Cell -> ?": [[37, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEdit": {"func": {"key_responder": {"FocusEditor -> ?": [[458, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Column.__init__": {"param": {"self": {"{Column | Column | Column}": [[44, "    def __init__(self, heading):"]]}, "heading": {"str": [[44, "    def __init__(self, heading):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridEditor": {"var": {"keyctx": {"str": [[407, "    keyctx = \"grideditor\""]]}, "title": {"str": [[405, "    title = \"\""]]}}, "func": {"__init__": {"? -> ?": [[409, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.handle_key": {"param": {"self": {"BaseGridEditor": [[378, "    def handle_key(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.right": {"param": {"self": {"GridWalker": [[206, "    def right(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.set_current_valu": {"var": {"errors": {"?": [[147, "        errors = self.lst[self.focus][1]"]]}, "emsg": {"None": [[148, "        emsg = self.editor.is_error(self.focus_col, val)"]]}}, "param": {"self": {"GridWalker": [[146, "    def set_current_value(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.set_subeditor_valu": {"param": {"self": {"BaseGridEditor": [[329, "    def set_subeditor_value(self, val, focus, focus_col):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.get_data": {"param": {"self": {"FocusEditor": [[442, "    def get_data(self, flow):"]]}, "flow": {"?": [[442, "    def get_data(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.insert": {"param": {"self": {"GridWalker": [[179, "    def insert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_read_file_escaped": {"param": {"path": {"?": [[393, "    def cmd_read_file_escaped(self, path):"]]}, "self": {"BaseGridEditor": [[393, "    def cmd_read_file_escaped(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.delete_focu": {"param": {"self": {"GridWalker": [[164, "    def delete_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_read_fi": {"param": {"self": {"BaseGridEditor": [[390, "    def cmd_read_file(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_add": {"param": {"self": {"BaseGridEditor": [[381, "    def cmd_add(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.__init__": {"var": {"c": {"?": [[290, "                c = urwid.Text(col.heading)"]]}, "title": {"str": [[263, "            title,"]]}, "i": {"?": [[289, "            for i, col in enumerate(self.columns):"]]}, "h": {"None": [[286, "        h = None"]], "?": [[295, "            h = urwid.Columns("], [299, "            h = urwid.AttrWrap(h, \"heading\")"]]}, "self": {"BaseGridEditor": [[261, "            self,"]]}, "value": {"None": [[265, "            value: typing.Any,"], [270, "        value = self.data_in(copy.deepcopy(value))"]]}, "callback": {"(BaseGridEditor, [?], ?) -> None / (FocusEditor, ?, ?) -> None": [[266, "            callback: typing.Callable[..., None],"]]}, "r": {"?": [[281, "            for r in value:"]]}, "master": {"?": [[262, "            master: \"mitmproxy.tools.console.master.ConsoleMaster\","]]}, "headings": {"[(str, int, ?)]": [[288, "            headings = []"]]}, "w": {"?": [[303, "        w = urwid.Frame(self.lb, header=h)"]]}, "columns": {"[Column]": [[264, "            columns,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_delet": {"param": {"self": {"BaseGridEditor": [[387, "    def cmd_delete(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Colum": {"func": {"__init__": {"? -> ?": [[44, "    def __init__(self, heading):"]]}, "blank": {"Column -> None": [[56, "    def blank(self) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridRow.selectab": {"param": {"self": {"GridRow": [[110, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.keypr": {"param": {"self": {"BaseGridEditor": [[332, "    def keypress(self, size, key):"]]}, "size": {"?": [[332, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Column.blank": {"param": {"self": {"Column": [[56, "    def blank(self) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.layout_pushed": {"param": {"self": {"FocusEditor": [[464, "    def layout_pushed(self, prev):"]]}, "prev": {"?": [[464, "    def layout_pushed(self, prev):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.show_empty_msg": {"param": {"self": {"BaseGridEditor": [[315, "    def show_empty_msg(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.set_dat": {"param": {"vals": {"?": [[448, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_insert": {"param": {"self": {"BaseGridEditor": [[384, "    def cmd_insert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.add": {"param": {"self": {"GridWalker": [[182, "    def add(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker": {"func": {"delete_focus": {"GridWalker -> None": [[164, "    def delete_focus(self):"]]}, "set_focus": {"(GridWalker, ?) -> None / (GridWalker, int) -> None": [[232, "    def set_focus(self, focus):"]]}, "stop_edit": {"GridWalker -> None": [[193, "    def stop_edit(self):"]]}, "tab_next": {"GridWalker -> None": [[210, "    def tab_next(self):"]]}, "get_focus": {"GridWalker -> (GridRow, int)": [[219, "    def get_focus(self):"]]}, "add_value": {"(GridWalker, ?) -> None": [[136, "    def add_value(self, lst):"]]}, "add": {"GridWalker -> None": [[182, "    def add(self):"]]}, "get_next": {"(GridWalker, ?) -> (GridRow, int)": [[237, "    def get_next(self, pos):"]]}, "_modified": {"GridWalker -> None": [[132, "    def _modified(self):"]]}, "left": {"GridWalker -> None": [[202, "    def left(self):"]]}, "__init__": {"? -> ?": [[121, "    def __init__("]]}, "set_value": {"(GridWalker, None, int, int, ?) -> None / (GridWalker, ?, ?, ?, None) -> None / (GridWalker, ?, int, int, ?) -> None / (GridWalker, str, int, int, ?) -> None": [[156, "    def set_value(self, val, focus, focus_col, errors=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.key_responder": {"param": {"self": {"FocusEditor": [[458, "    def key_responder(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.layout_popping": {"param": {"self": {"FocusEditor": [[461, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.get_prev": {"param": {"self": {"GridWalker": [[242, "    def get_prev(self, pos):"]]}, "pos": {"?": [[242, "    def get_prev(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Column": {"func": {"Edit": {"(Column, ?) -> None": [[52, "    def Edit(self, data) -> Cell:"]]}, "keypress": {"(Column, ?, ?) -> ?": [[59, "    def keypress(self, key: str, editor: \"GridEditor\") -> typing.Optional[str]:"]]}, "Display": {"(Column, ?) -> None": [[48, "    def Display(self, data) -> Cell:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridRow": {"func": {"keypress": {"(GridRow, ?, ?) -> None": [[104, "    def keypress(self, s, k):"]]}, "selectable": {"GridRow -> ?": [[110, "    def selectable(self):"]]}, "__init__": {"? -> ?": [[65, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Column.Edi": {"param": {"data": {"?": [[52, "    def Edit(self, data) -> Cell:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.get_current_valu": {"param": {"self": {"GridWalker": [[142, "    def get_current_value(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker._insert": {"param": {"self": {"GridWalker": [[170, "    def _insert(self, pos):"]]}, "pos": {"int": [[170, "    def _insert(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.bas": {"class": {"Cell": {"<Cell>": [[29, "class Cell(urwid.WidgetWrap):"]]}, "GridWalker": {"<GridWalker>": [[114, "class GridWalker(urwid.ListWalker):"]]}}, "func": {"read_file": {"(?, ?) -> str": [[14, "def read_file(filename: str, escaped: bool) -> typing.AnyStr:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.get_next": {"param": {"self": {"GridWalker": [[237, "    def get_next(self, pos):"]]}, "pos": {"?": [[237, "    def get_next(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.keypress": {"var": {"column": {"Column": [[345, "        column = self.columns[self.walker.focus_col]"]]}, "pf": {"int": [[337, "                pf, pfc = self.walker.focus, self.walker.focus_col"]]}}, "param": {"key": {"?": [[332, "    def keypress(self, size, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.set_subeditor_value": {"param": {"focus_col": {"?": [[329, "    def set_subeditor_value(self, val, focus, focus_col):"]]}, "focus": {"?": [[329, "    def set_subeditor_value(self, val, focus, focus_col):"]]}, "val": {"?": [[329, "    def set_subeditor_value(self, val, focus, focus_col):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.set_focu": {"param": {"self": {"GridWalker": [[232, "    def set_focus(self, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.__in": {"var": {"first_width": {"int": [[279, "        first_width = 20"], [283, "                first_width = max(len(r), first_width)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.get_focu": {"param": {"self": {"GridWalker": [[219, "    def get_focus(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.set_data_updat": {"param": {"self": {"{BaseGridEditor | FocusEditor}": [[454, "    def set_data_update(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.add_valu": {"param": {"self": {"GridWalker": [[136, "    def add_value(self, lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.b": {"class": {"BaseGridEditor": {"<BaseGridEditor>": [[256, "class BaseGridEditor(urwid.WidgetWrap):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.stop_edit": {"var": {"val": {"?": [[196, "                val = self.edit_row.edit_col.get_data()"]]}}, "param": {"self": {"GridWalker": [[193, "    def stop_edit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridListBox": {"func": {"__init__": {"? -> ?": [[249, "    def __init__(self, lw):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Column.Edit": {"param": {"self": {"Column": [[52, "    def Edit(self, data) -> Cell:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.read_": {"var": {"filename": {"str": [[15, "    filename = os.path.expanduser(filename)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.set_valu": {"var": {"errors": {"?": [[158, "            errors = set([])"]]}}, "param": {"self": {"GridWalker": [[156, "    def set_value(self, val, focus, focus_col, errors=None):"]]}, "errors": {"None": [[156, "    def set_value(self, val, focus, focus_col, errors=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.set_value": {"var": {"row": {"list": [[159, "        row = list(self.lst[focus][0])"]]}}, "param": {"focus_col": {"int": [[156, "    def set_value(self, val, focus, focus_col, errors=None):"]]}, "focus": {"int": [[156, "    def set_value(self, val, focus, focus_col, errors=None):"]]}, "val": {"{None | str}": [[156, "    def set_value(self, val, focus, focus_col, errors=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridRow.keypress": {"var": {"k": {"?": [[107, "            k = self.edit_col.keypress((w,), k)"]]}, "w": {"?": [[106, "            w = self._w.column_widths(s)[self.focused]"]]}}, "param": {"k": {"?": [[104, "    def keypress(self, s, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Cell": {"func": {"get_data": {"Cell -> None": [[30, "    def get_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.read_file": {"var": {"d": {"None": [[23, "            d = strutils.escaped_str_to_bytes(d)"]], "str": [[18, "            d = f.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Cell.get_data": {"param": {"self": {"Cell": [[30, "    def get_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.set_": {"param": {"focus": {"int": [[232, "    def set_focus(self, focus):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridRow.keypr": {"param": {"self": {"GridRow": [[104, "    def keypress(self, s, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.__init__": {"var": {"self": {"GridWalker": [[122, "            self,"]]}, "lst": {"None": [[123, "            lst: typing.Iterable[list],"]]}, "editor": {"BaseGridEditor": [[124, "            editor: \"GridEditor\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.add_value": {"param": {"lst": {"?": [[136, "    def add_value(self, lst):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor": {"var": {"keyctx": {"str": [[258, "    keyctx = \"grideditor\""]]}}, "func": {"cmd_delete": {"BaseGridEditor -> None": [[387, "    def cmd_delete(self):"]]}, "layout_popping": {"DataViewer -> None / OptionsEditor -> None / BaseGridEditor -> None": [[308, "    def layout_popping(self):"]]}, "cmd_add": {"BaseGridEditor -> None": [[381, "    def cmd_add(self):"]]}, "data_in": {"(BaseGridEditor, ?) -> None": [[366, "    def data_in(self, data: typing.Any) -> typing.Iterable[list]:"]]}, "data_out": {"(DataViewer, [?]) -> [?] / (BaseGridEditor, [?]) -> [?] / (OptionsEditor, [?]) -> [?] / (BaseGridEditor, ?) -> None": [[359, "    def data_out(self, data: typing.Sequence[list]) -> typing.Any:"]]}, "handle_key": {"(BaseGridEditor, ?) -> ?": [[378, "    def handle_key(self, key):"]]}, "show_empty_msg": {"BaseGridEditor -> None": [[315, "    def show_empty_msg(self):"]]}, "__init__": {"? -> ?": [[260, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.cmd_read_file": {"param": {"path": {"?": [[390, "    def cmd_read_file(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor": {"var": {"keyctx": {"str": [[432, "    keyctx = \"grideditor\""]]}}, "func": {"layout_pushed": {"(FocusEditor, ?) -> None": [[464, "    def layout_pushed(self, prev):"]]}, "set_data_update": {"(BaseGridEditor, [?], ?) -> None / (FocusEditor, ?, ?) -> None": [[454, "    def set_data_update(self, vals, flow):"]]}, "get_data": {"(FocusEditor, ?) -> None": [[442, "    def get_data(self, flow):"]]}, "call": {"(FocusEditor, ?, ?) -> None / (FocusEditor, ?, str) -> None": [[437, "    def call(self, v, name, *args, **kwargs):"]]}, "set_data": {"(FocusEditor, ?, ?) -> None": [[448, "    def set_data(self, vals, flow):"]]}, "layout_popping": {"FocusEditor -> None": [[461, "    def layout_popping(self):"]]}, "__init__": {"? -> ?": [[434, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalk": {"func": {"insert": {"GridWalker -> None": [[179, "    def insert(self):"]]}, "get_prev": {"(GridWalker, ?) -> (GridRow, int)": [[242, "    def get_prev(self, pos):"]]}, "start_edit": {"GridWalker -> None": [[185, "    def start_edit(self):"]]}, "get_current_value": {"GridWalker -> None": [[142, "    def get_current_value(self):"]]}, "set_current_value": {"(GridWalker, None) -> None / (GridWalker, ?) -> None / (GridWalker, str) -> None": [[146, "    def set_current_value(self, val):"]]}, "_insert": {"(GridWalker, ?) -> None / (GridWalker, int) -> None": [[170, "    def _insert(self, pos):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridE": {"func": {"cmd_spawn_editor": {"BaseGridEditor -> None": [[396, "    def cmd_spawn_editor(self):"]]}, "set_subeditor_value": {"(BaseGridEditor, ?, ?, ?) -> None": [[329, "    def set_subeditor_value(self, val, focus, focus_col):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridListBox.__init__": {"param": {"lw": {"GridWalker": [[249, "    def __init__(self, lw):"]]}, "self": {"GridListBox": [[249, "    def __init__(self, lw):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEdito": {"func": {"keypress": {"(BaseGridEditor, ?, ?) -> None": [[332, "    def keypress(self, size, key):"]]}, "cmd_read_file_escaped": {"(BaseGridEditor, ?) -> None": [[393, "    def cmd_read_file_escaped(self, path):"]]}, "cmd_insert": {"BaseGridEditor -> None": [[384, "    def cmd_insert(self):"]]}, "cmd_read_file": {"(BaseGridEditor, ?) -> None": [[390, "    def cmd_read_file(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.handle_": {"param": {"key": {"?": [[378, "    def handle_key(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.set_data_update": {"param": {"vals": {"[?]": [[454, "    def set_data_update(self, vals, flow):"]]}, "flow": {"?": [[454, "    def set_data_update(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.set_data": {"param": {"self": {"FocusEditor": [[448, "    def set_data(self, vals, flow):"]]}, "flow": {"?": [[448, "    def set_data(self, vals, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.BaseGridEditor.layout_popping": {"var": {"i": {"?": [[310, "        for i in self.walker.lst:"]]}, "res": {"[?]": [[309, "        res = []"]]}}, "param": {"self": {"{BaseGridEditor | DataViewer | OptionsEditor}": [[308, "    def layout_popping(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Column.Display": {"param": {"self": {"Column": [[48, "    def Display(self, data) -> Cell:"]]}, "data": {"?": [[48, "    def Display(self, data) -> Cell:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.tab_next": {"param": {"self": {"GridWalker": [[210, "    def tab_next(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.__init__": {"param": {"self": {"{CookieAttributeEditor | CookieEditor | FocusEditor | PathEditor | QueryEditor | RequestHeaderEditor | RequestMultipartEditor | RequestUrlEncodedEditor | ResponseHeaderEditor | SetCookieEditor}": [[434, "    def __init__(self, master):"]]}, "master": {"ConsoleMaster": [[434, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridEditor.__init__": {"var": {"callback": {"?": [[413, "            callback: typing.Callable[..., None],"]]}, "self": {"GridEditor": [[410, "            self,"]]}, "master": {"?": [[411, "            master: \"mitmproxy.tools.console.master.ConsoleMaster\","]]}, "value": {"?": [[412, "            value: typing.Any,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.ca": {"param": {"self": {"FocusEditor": [[437, "    def call(self, v, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.left": {"param": {"self": {"GridWalker": [[202, "    def left(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridRow.keypre": {"param": {"s": {"?": [[104, "    def keypress(self, s, k):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.FocusEditor.call": {"var": {"f": {"?": [[438, "        f = getattr(v, name, None)"]]}}, "param": {"name": {"str": [[437, "    def call(self, v, name, *args, **kwargs):"]]}, "v": {"?": [[437, "    def call(self, v, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker.set_current_value": {"param": {"val": {"{None | str}": [[146, "    def set_current_value(self, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.Cell.selectab": {"param": {"self": {"Cell": [[37, "    def selectable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalke": {"func": {"right": {"GridWalker -> None": [[206, "    def right(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridWalker._modified": {"param": {"self": {"GridWalker": [[132, "    def _modified(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base": {"var": {"FIRST_WIDTH_MAX": {"int": [[253, "FIRST_WIDTH_MAX = 40"]]}}, "class": {"Column": {"<Column>": [[41, "class Column(metaclass=abc.ABCMeta):"]]}, "GridListBox": {"<GridListBox>": [[248, "class GridListBox(urwid.ListBox):"]]}, "FocusEditor": {"<FocusEditor>": [[428, "class FocusEditor(urwid.WidgetWrap, layoutwidget.LayoutWidget):"]]}, "GridRow": {"<GridRow>": [[63, "class GridRow(urwid.WidgetWrap):"]]}, "GridEditor": {"<GridEditor>": [[404, "class GridEditor(BaseGridEditor):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.base.GridRow.__init__": {"var": {"errors": {"?": [[76, "        errors = values[1]"]]}, "i": {"?": [[78, "        for i, v in enumerate(values[0]):"]]}, "self": {"GridRow": [[66, "            self,"]]}, "fspecs": {"?": [[93, "        fspecs = self.fields[:]"]]}, "values": {"?": [[70, "            values: typing.Tuple[typing.Iterable[bytes], typing.Container[int]]"]]}, "editor": {"BaseGridEditor": [[69, "            editor: \"GridEditor\","]]}, "w": {"?": [[83, "                w = self.editor.columns[i].Display(v)"], [86, "                        w = urwid.AttrWrap(w, \"focusfield_error\")"], [88, "                        w = urwid.AttrWrap(w, \"focusfield\")"], [90, "                    w = urwid.AttrWrap(w, \"field_error\")"], [96, "        w = urwid.Columns("]]}, "focused": {"int": [[67, "            focused: typing.Optional[int],"]]}, "editing": {"?": [[68, "            editing: bool,"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/urldict.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict": {"func": {"f_id": {"? -> ?": [[11, "def f_id(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.dumps": {"param": {"value_dumper": {"? -> ?": [[89, "    def dumps(self, value_dumper: Callable = f_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.__setitem__": {"var": {"fltr": {"None": [[32, "        fltr = flowfilter.parse(key)"]]}}, "param": {"self": {"URLDict": [[31, "    def __setitem__(self, key: str, value):"]]}, "value": {"?": [[31, "    def __setitem__(self, key: str, value):"]]}, "key": {"?": [[31, "    def __setitem__(self, key: str, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.__len__": {"param": {"self": {"URLDict": [[44, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.__init__": {"param": {"self": {"URLDict": [[17, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.dump": {"param": {"self": {"URLDict": [[86, "    def dump(self, f: TextIO, value_dumper: Callable = f_id):"], [89, "    def dumps(self, value_dumper: Callable = f_id):"]]}, "f": {"?": [[86, "    def dump(self, f: TextIO, value_dumper: Callable = f_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.__iter__": {"param": {"self": {"URLDict": [[41, "    def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.get_generato": {"var": {"fltr": {"?": [[49, "        for fltr, value in self.store.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.loads": {"param": {"value_loader": {"? -> ?": [[72, "    def loads(cls, json_str: str, value_loader: Callable = f_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDic": {"func": {"__delitem__": {"(URLDict, ?) -> None": [[38, "    def __delitem__(self, key):"]]}, "__getitem__": {"(URLDict, ?) -> list": [[20, "    def __getitem__(self, key, *, count=0):"]]}, "get_generator": {"(URLDict, ?) -> None": [[47, "    def get_generator(self, flow: HTTPFlow) -> Generator[Any, None, None]:"]]}, "get": {"(URLDict, ?, None) -> list": [[53, "    def get(self, flow: HTTPFlow, default=None, *, count=0) -> List[Any]:"]]}, "__iter__": {"URLDict -> ?": [[41, "    def __iter__(self):"]]}, "__setitem__": {"(URLDict, ?, ?) -> None": [[31, "    def __setitem__(self, key: str, value):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict": {"param": {"value_dumper": {"? -> ?": [[76, "    def _dump(self, value_dumper: Callable = f_id) -> Dict:"], [86, "    def dump(self, f: TextIO, value_dumper: Callable = f_id):"]]}, "value_loader": {"? -> ?": [[60, "    def _load(cls, json_obj, value_loader: Callable = f_id):"], [67, "    def load(cls, f: TextIO, value_loader: Callable = f_id):"]]}}, "func": {"load": {"(<URLDict>, ?, ? -> ?) -> URLDict": [[67, "    def load(cls, f: TextIO, value_loader: Callable = f_id):"]]}, "dumps": {"(URLDict, ? -> ?) -> ?": [[89, "    def dumps(self, value_dumper: Callable = f_id):"]]}, "dump": {"(URLDict, ?, ? -> ?) -> None": [[86, "    def dump(self, f: TextIO, value_dumper: Callable = f_id):"]]}, "_dump": {"(URLDict, ? -> ?) -> None": [[76, "    def _dump(self, value_dumper: Callable = f_id) -> Dict:"]]}, "__len__": {"URLDict -> ?": [[44, "    def __len__(self):"]]}, "loads": {"(<URLDict>, ?, ? -> ?) -> URLDict": [[72, "    def loads(cls, json_str: str, value_loader: Callable = f_id):"]]}, "_load": {"(<URLDict>, ?, ? -> ?) -> URLDict": [[60, "    def _load(cls, json_obj, value_loader: Callable = f_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.get": {"param": {"self": {"URLDict": [[53, "    def get(self, flow: HTTPFlow, default=None, *, count=0) -> List[Any]:"]]}, "flow": {"?": [[53, "    def get(self, flow: HTTPFlow, default=None, *, count=0) -> List[Any]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.load": {"var": {"json_obj": {"?": [[68, "        json_obj = json.load(f)"], [73, "        json_obj = json.loads(json_str)"]]}}, "param": {"json_str": {"?": [[72, "    def loads(cls, json_str: str, value_loader: Callable = f_id):"]]}, "f": {"?": [[67, "    def load(cls, f: TextIO, value_loader: Callable = f_id):"]]}, "cls": {"<URLDict>": [[67, "    def load(cls, f: TextIO, value_loader: Callable = f_id):"], [72, "    def loads(cls, json_str: str, value_loader: Callable = f_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict._load": {"var": {"fltr": {"?": [[62, "        for fltr, value in json_obj.items():"]]}}, "param": {"json_obj": {"?": [[60, "    def _load(cls, json_obj, value_loader: Callable = f_id):"]]}, "cls": {"<URLDict>": [[60, "    def _load(cls, json_obj, value_loader: Callable = f_id):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.__getitem__": {"var": {"ret": {"list": [[24, "            ret = list(self.get_generator(key))"]], "?": [[22, "            ret = itertools.islice(self.get_generator(key), 0, count)"]]}}, "param": {"self": {"URLDict": [[20, "    def __getitem__(self, key, *, count=0):"]]}, "key": {"?": [[20, "    def __getitem__(self, key, *, count=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urld": {"class": {"URLDict": {"<URLDict>": [[15, "class URLDict(MutableMapping):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict._loa": {"var": {"url_dict": {"URLDict": [[61, "        url_dict = cls()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.__delitem__": {"param": {"self": {"URLDict": [[38, "    def __delitem__(self, key):"]]}, "key": {"?": [[38, "    def __delitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict._dump": {"var": {"fltr": {"?": [[78, "        for fltr, value in self.store.items():"]]}}, "param": {"self": {"URLDict": [[76, "    def _dump(self, value_dumper: Callable = f_id) -> Dict:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.urldict.URLDict.g": {"param": {"default": {"None": [[53, "    def get(self, flow: HTTPFlow, default=None, *, count=0) -> List[Any]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_view.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_order_generators_tcp": {"var": {"sz": {"OrderKeySize": [[69, "    sz = view.OrderKeySize(v)"]]}, "rs": {"OrderRequestStart": [[60, "    rs = view.OrderRequestStart(v)"]]}, "v": {"View": [[57, "    v = view.View()"]]}, "tf": {"?": [[58, "    tf = tflow.ttcpflow()"]]}, "rm": {"OrderRequestMethod": [[63, "    rm = view.OrderRequestMethod(v)"]]}, "ru": {"OrderRequestURL": [[66, "    ru = view.OrderRequestURL(v)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.Record.__call__": {"param": {"self": {"Record": [[412, "    def __call__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_signal": {"var": {"rec_refresh": {"Record": [[421, "    rec_refresh = Record()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.tdum": {"param": {"path": {"str": [[169, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_focus": {"var": {"f": {"Focus": [[505, "    f = view.Focus(v)"], [511, "    f = view.Focus(v)"]]}, "filt": {"None": [[560, "    filt = flowfilter.parse(\"~m get\")"], [564, "    filt = flowfilter.parse(\"~m oink\")"]]}, "v": {"View": [[503, "    v = view.View()"], [510, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_remove": {"var": {"f": {"[?]": [[316, "        f = [tflow.tflow(), tflow.tflow()]"]]}, "v": {"View": [[314, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.Record.__init__": {"param": {"self": {"Record": [[403, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_load": {"var": {"path": {"str": [[198, "    path = str(tmpdir.join(\"path\"))"]]}, "v": {"View": [[199, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.tft": {"var": {"f": {"?": [[14, "    f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_filter": {"var": {"v": {"View": [[141, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_update": {"var": {"f": {"None": [[386, "    f = tft(method=\"get\")"]]}, "flt": {"None": [[383, "    flt = flowfilter.parse(\"~m get\")"]]}, "v": {"View": [[382, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_focus_follow": {"var": {"console_addon": {"ConsoleAddon": [[475, "        console_addon = consoleaddons.ConsoleAddon(tctx.master)"]]}, "mod": {"None": [[490, "        mod = tft(method=\"put\", start=6)"]]}, "v": {"View": [[473, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_simple": {"var": {"f2": {"None": [[95, "    f2 = tft(start=3)"]]}, "f": {"None": [[75, "    f = tft(start=1)"]]}, "f3": {"None": [[106, "    f3 = tft(start=2)"]]}, "v": {"View": [[74, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_vi": {"func": {"test_focus_follow": {"() -> None": [[472, "def test_focus_follow():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.Record": {"func": {"__bool__": {"Record -> bool": [[406, "    def __bool__(self):"]]}, "__call__": {"Record -> None": [[412, "    def __call__(self, *args, **kwargs):"]]}, "__repr__": {"Record -> str": [[409, "    def __repr__(self):"]]}, "__init__": {"? -> ?": [[403, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_settings": {"var": {"f": {"None": [[571, "    f = tft()"]]}, "v": {"View": [[570, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_duplicate": {"var": {"f": {"[?]": [[302, "        f = ["]]}, "v": {"View": [[300, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_simple_tcp": {"var": {"f": {"?": [[127, "    f = tflow.ttcpflow()"]]}, "v": {"View": [[126, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_orders": {"var": {"v": {"View": [[191, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_resolve": {"var": {"f": {"None": [[251, "        f = flowfilter.parse(\"~m get\")"]]}, "v": {"View": [[224, "    v = view.View()"]]}}, "func": {"m": {"? -> [?]": [[255, "        def m(l):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_configure": {"var": {"v": {"View": [[603, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_reversed": {"var": {"v": {"View": [[363, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view": {"class": {"Record": {"<Record>": [[402, "class Record:"]]}}, "func": {"test_duplicate": {"() -> None": [[299, "def test_duplicate():"]]}, "test_order_generators_tcp": {"() -> None": [[56, "def test_order_generators_tcp():"]]}, "test_movement": {"() -> None": [[270, "def test_movement():"]]}, "test_orders": {"() -> None": [[190, "def test_orders():"]]}, "test_create": {"() -> None": [[176, "def test_create():"]]}, "test_signals": {"() -> None": [[416, "def test_signals():"]]}, "test_order": {"() -> None": [[338, "def test_order():"]]}, "test_reversed": {"() -> None": [[362, "def test_reversed():"]]}, "test_update": {"() -> None": [[381, "def test_update():"]]}, "test_order_refresh": {"() -> None": [[20, "def test_order_refresh():"]]}, "test_order_generators_http": {"() -> None": [[39, "def test_order_generators_http():"]]}, "test_simple_tcp": {"() -> None": [[125, "def test_simple_tcp():"]]}, "test_properties": {"() -> None": [[591, "def test_properties():"]]}, "tft": {"() -> None": [[13, "def tft(*, method=\"get\", start=0):"]]}, "tdump": {"(?, ?) -> None / (str, [?]) -> None": [[169, "def tdump(path, flows):"]]}, "test_remove": {"() -> None": [[313, "def test_remove():"]]}, "test_configure": {"() -> None": [[602, "def test_configure():"]]}, "test_settings": {"() -> None": [[569, "def test_settings():"]]}, "test_simple": {"() -> None": [[73, "def test_simple():"]]}, "test_focus": {"() -> None": [[501, "def test_focus():"]]}, "test_resolve": {"() -> None": [[223, "def test_resolve():"]]}, "test_filter": {"() -> None": [[140, "def test_filter():"]]}, "test_setgetval": {"() -> None": [[323, "def test_setgetval():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.Record.__repr__": {"param": {"self": {"Record": [[409, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_create": {"var": {"v": {"View": [[177, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.tdump": {"var": {"i": {"?": [[172, "        for i in flows:"]]}, "w": {"FlowWriter": [[171, "        w = io.FlowWriter(f)"]]}}, "param": {"flows": {"[?]": [[169, "def tdump(path, flows):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_properties": {"var": {"f": {"None": [[593, "    f = tft()"]]}, "v": {"View": [[592, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_loa": {"param": {"tmpdir": {"?": [[197, "async def test_load(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_signals": {"var": {"rec_remove": {"Record": [[420, "    rec_remove = Record()"]]}, "rec_update": {"Record": [[419, "    rec_update = Record()"]]}, "rec_add": {"Record": [[418, "    rec_add = Record()"]]}, "f": {"?": [[464, "    f = v[0]"]]}, "v": {"View": [[417, "    v = view.View()"]]}}, "func": {"clearrec": {"() -> None": [[423, "    def clearrec():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_movement": {"var": {"v": {"View": [[271, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_order": {"var": {"v": {"View": [[339, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_order_generators_http": {"var": {"sz": {"OrderKeySize": [[52, "    sz = view.OrderKeySize(v)"]]}, "rs": {"OrderRequestStart": [[43, "    rs = view.OrderRequestStart(v)"]]}, "v": {"View": [[40, "    v = view.View()"]]}, "tf": {"?": [[41, "    tf = tflow.tflow(resp=True)"]]}, "rm": {"OrderRequestMethod": [[46, "    rm = view.OrderRequestMethod(v)"]]}, "ru": {"OrderRequestURL": [[49, "    ru = view.OrderRequestURL(v)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.Record.__bool__": {"param": {"self": {"Record": [[406, "    def __bool__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_setgetval": {"var": {"f": {"?": [[326, "        f = tflow.tflow()"]]}, "v": {"View": [[324, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_view.test_order_refresh": {"var": {"tf": {"?": [[29, "    tf = tflow.tflow(resp=True)"]]}, "sargs": {"[?]": [[22, "    sargs = []"]]}, "v": {"View": [[21, "    v = view.View()"]]}}, "func": {"save": {"() -> None": [[24, "    def save(*args, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/http2/test_utils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_connect": {"var": {"h": {"dict": [[62, "        h = dict(["]]}}, "param": {"self": {"TestHttp2ParseHeaders": [[61, "    def test_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_absolute": {"var": {"h": {"dict": [[24, "        h = dict(["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_absolut": {"param": {"self": {"TestHttp2ParseHeaders": [[23, "    def test_absolute(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_without_port": {"var": {"h": {"dict": [[43, "        h = dict(["]]}, "_": {"str": [[49, "        _, _, _, _, port, _ = parse_headers(h)"]]}}, "param": {"self": {"TestHttp2ParseHeaders": [[42, "    def test_without_port(self, scheme, expected_port):"]]}, "scheme": {"?": [[42, "    def test_without_port(self, scheme, expected_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_util": {"class": {"TestHttp2ParseHeaders": {"<TestHttp2ParseHeaders>": [[6, "class TestHttp2ParseHeaders:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_absolu": {"var": {"first_line_format": {"str": [[30, "        first_line_format, method, scheme, host, port, path = parse_headers(h)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_withou": {"param": {"expected_port": {"?": [[42, "    def test_without_port(self, scheme, expected_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeader": {"func": {"test_connect": {"TestHttp2ParseHeaders -> None": [[61, "    def test_connect(self):"]]}, "test_absolute": {"TestHttp2ParseHeaders -> None": [[23, "    def test_absolute(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_relative": {"var": {"h": {"dict": [[9, "        h = dict(["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_relativ": {"var": {"first_line_format": {"str": [[15, "        first_line_format, method, scheme, host, port, path = parse_headers(h)"]]}}, "param": {"self": {"TestHttp2ParseHeaders": [[8, "    def test_relative(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHeaders.test_without_authority": {"var": {"h": {"dict": [[53, "        h = dict(["]]}, "_": {"str": [[58, "        _, _, _, host, _, _ = parse_headers(h)"]]}}, "param": {"self": {"TestHttp2ParseHeaders": [[52, "    def test_without_authority(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.http2.test_utils.TestHttp2ParseHead": {"func": {"test_without_port": {"(TestHttp2ParseHeaders, ?, ?) -> None": [[42, "    def test_without_port(self, scheme, expected_port):"]]}, "test_without_authority": {"TestHttp2ParseHeaders -> None": [[52, "    def test_without_authority(self):"]]}, "test_relative": {"TestHttp2ParseHeaders -> None": [[8, "    def test_relative(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/tools/web/test_app.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_options": {"var": {"j": {"?": [[265, "        j = json(self.fetch(\"/options\"))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flow_delet": {"param": {"self": {"TestApp": [[119, "    def test_flow_delete(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flow_updat": {"param": {"self": {"TestApp": [[130, "    def test_flow_update(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_resum": {"param": {"self": {"TestApp": [[97, "    def test_resume(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_index": {"param": {"self": {"TestApp": [[67, "    def test_index(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.get_new": {"var": {"io_loop": {"?": [[36, "        io_loop = tornado.platform.asyncio.AsyncIOLoop()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_a": {"class": {"TestApp": {"<TestApp>": [[34, "class TestApp(tornado.testing.AsyncHTTPTestCase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestA": {"func": {"get_new_ioloop": {"TestApp -> None": [[35, "    def get_new_ioloop(self):"]]}, "put_json": {"(TestApp, ?, ?) -> ? / (TestApp, str, dict) -> ?": [[59, "    def put_json(self, url, data: dict) -> httpclient.HTTPResponse:"]]}, "test_flows_dump": {"TestApp -> None": [[79, "    def test_flows_dump(self):"]]}, "test_flow_update": {"TestApp -> None": [[130, "    def test_flow_update(self):"]]}, "test_filter_help": {"TestApp -> None": [[70, "    def test_filter_help(self):"]]}, "get_app": {"TestApp -> Application": [[40, "    def get_app(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flow": {"var": {"resp": {"?": [[74, "        resp = self.fetch(\"/flows\")"]]}}, "param": {"self": {"TestApp": [[73, "    def test_flows(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flow_delete": {"var": {"f": {"?": [[120, "        f = self.view.get_by_id(\"42\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_ki": {"param": {"self": {"TestApp": [[107, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.fetch": {"param": {"self": {"TestApp": [[55, "    def fetch(self, *args, **kwargs) -> httpclient.HTTPResponse:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flow_update": {"var": {"upd": {"dict": [[135, "        upd = {"]]}, "f": {"?": [[131, "        f = self.view.get_by_id(\"42\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flows_dump": {"param": {"self": {"TestApp": [[79, "    def test_flows_dump(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.get_app": {"var": {"m": {"WebMaster": [[42, "        m = webmaster.WebMaster(o, with_termlog=False)"]]}, "o": {"Options": [[41, "        o = options.Options(http2=False)"]]}, "f": {"?": [[43, "        f = tflow.tflow(resp=True)"]]}}, "param": {"self": {"TestApp": [[40, "    def get_app(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_resume": {"var": {"f": {"?": [[98, "        for f in self.view:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flow_content": {"var": {"r": {"?": [[198, "        r = self.fetch(\"/flows/42/response/content.data\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp": {"func": {"test_flow_delete": {"TestApp -> None": [[119, "    def test_flow_delete(self):"]]}, "test_flows": {"TestApp -> None": [[73, "    def test_flows(self):"]]}, "test_resume": {"TestApp -> None": [[97, "    def test_resume(self):"]]}, "test_clear": {"TestApp -> None": [[83, "    def test_clear(self):"]]}, "test_index": {"TestApp -> None": [[67, "    def test_index(self):"]]}, "fetch": {"TestApp -> ?": [[55, "    def fetch(self, *args, **kwargs) -> httpclient.HTTPResponse:"]]}, "test_kill": {"TestApp -> None": [[107, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.get_new_ioloop": {"param": {"self": {"TestApp": [[35, "    def get_new_ioloop(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_clear": {"var": {"events": {"?": [[84, "        events = self.events.data.copy()"]]}, "flows": {"list": [[85, "        flows = list(self.view)"]]}, "f": {"<list>": [[93, "        for f in flows:"]]}}, "param": {"self": {"TestApp": [[83, "    def test_clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_filter_help": {"param": {"self": {"TestApp": [[70, "    def test_filter_help(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app": {"func": {"json": {"? -> ?": [[29, "def json(resp: httpclient.HTTPResponse):"]]}, "no_tornado_logging": {"() -> None": [[19, "def no_tornado_logging():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_flows_dum": {"var": {"resp": {"?": [[80, "        resp = self.fetch(\"/flows/dump\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.test_kill": {"var": {"f": {"?": [[108, "        for f in self.view:"], [116, "        for f in self.view:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.tools.web.test_app.TestApp.get_": {"var": {"webapp": {"Application": [[51, "        webapp = app.Application(m, None)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/script.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.S": {"func": {"loadscript": {"Script -> ?": [[95, "    def loadscript(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoad": {"func": {"configure": {"(ScriptLoader, ?) -> None": [[174, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader": {"func": {"load": {"(ScriptLoader, ?) -> None": [[142, "    def load(self, loader):"]]}, "__init__": {"? -> ?": [[138, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.configure": {"var": {"a": {"?": [[180, "            for a in self.addons[:]:"], [193, "            for a in self.addons:"]]}, "sc": {"Script": [[202, "                    sc = Script(s, True)"]]}, "s": {"?": [[176, "            for s in ctx.options.scripts:"], [198, "            for s in ctx.options.scripts:"]], "Script": [[208, "            for s in newscripts:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.scrip": {"var": {"ReloadInterval": {"{float | int}": [[62, "ReloadInterval = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptL": {"param": {"loader": {"?": [[142, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.s": {"class": {"ScriptLoader": {"<ScriptLoader>": [[134, "class ScriptLoader:"]]}, "Script": {"<Script>": [[65, "class Script:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.script_error_handler": {"var": {"etype": {"?": [[56, "        etype, value, tback = sys.exc_info()"]]}, "tback": {"None": [[57, "        tback = addonmanager.cut_traceback(tback, \"invoke_addon\")"]]}, "exception": {"str": [[50, "        exception = msg"]], "?": [[48, "    exception = type(exc).__name__"]]}, "lineno": {"str": [[51, "    lineno = \"\""], [53, "        lineno = str(exc.lineno)"]]}, "log_msg": {"str": [[54, "    log_msg = \"in script {}:{} {}\".format(path, lineno, exception)"], [58, "        log_msg = log_msg + \"\\n\" + \"\".join(traceback.format_exception(etype, value, tback))"]]}}, "param": {"msg": {"str": [[43, "def script_error_handler(path, exc, msg=\"\", tb=False):"]]}, "path": {"str": [[43, "def script_error_handler(path, exc, msg=\"\", tb=False):"]]}, "tb": {"?": [[43, "def script_error_handler(path, exc, msg=\"\", tb=False):"]]}, "exc": {"<SyntaxError>": [[43, "def script_error_handler(path, exc, msg=\"\", tb=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Script.watche": {"var": {"scripts": {"list": [[124, "                scripts = list(ctx.options.scripts)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoade": {"func": {"script_run": {"(ScriptLoader, [?], str) -> None / (ScriptLoader, [?], ?) -> None / (ScriptLoader, ?, ?) -> None": [[152, "    def script_run(self, flows: typing.Sequence[flow.Flow], path: mtypes.Path) -> None:"]]}, "running": {"ScriptLoader -> None": [[148, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.load_script": {"var": {"fullname": {"str": [[20, "    fullname = \"__mitmproxy_script__.{}\".format("]]}, "m": {"None": [[28, "    m = None"]], "?": [[32, "        m = importlib.util.module_from_spec(spec)"]]}, "spec": {"?": [[31, "        spec = importlib.util.spec_from_loader(fullname, loader=loader)"]]}, "loader": {"?": [[30, "        loader = importlib.machinery.SourceFileLoader(fullname, path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.__init__": {"param": {"self": {"ScriptLoader": [[138, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Script": {"func": {"addons": {"Script -> {[?] | [None]}": [[92, "    def addons(self):"]]}, "done": {"Script -> None": [[87, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.config": {"var": {"current": {"dict": [[192, "            current = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Script.watcher": {"var": {"last_mtime": {"int": [[118, "        last_mtime = 0"]], "?": [[130, "                last_mtime = mtime"]]}, "mtime": {"?": [[121, "                mtime = os.stat(self.fullpath).st_mtime"]]}}, "param": {"self": {"Script": [[117, "    async def watcher(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.configu": {"var": {"newscripts": {"[Script]": [[197, "            newscripts = []"]]}, "ordered": {"[Script]": [[196, "            ordered = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.script_run": {"var": {"f": {"?": [[170, "                for f in flows:"]]}, "evt": {"?": [[171, "                    for evt, arg in eventsequence.iterate(f):"]]}, "mod": {"?": [[161, "        mod = load_script(path)"]]}}, "param": {"path": {"str": [[152, "    def script_run(self, flows: typing.Sequence[flow.Flow], path: mtypes.Path) -> None:"]]}, "self": {"ScriptLoader": [[152, "    def script_run(self, flows: typing.Sequence[flow.Flow], path: mtypes.Path) -> None:"]]}, "flows": {"[?]": [[152, "    def script_run(self, flows: typing.Sequence[flow.Flow], path: mtypes.Path) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.load": {"param": {"self": {"ScriptLoader": [[142, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Script.addon": {"param": {"self": {"Script": [[92, "    def addons(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"script_error_handler": {"(?, ?, str, ?) -> None / (str, ?, str, ?) -> None / (str, <SyntaxError>, str, ?) -> None": [[43, "def script_error_handler(path, exc, msg=\"\", tb=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.load_scri": {"var": {"oldpath": {"[{#1 | str}]": [[26, "    oldpath = sys.path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Scrip": {"func": {"__init__": {"? -> ?": [[70, "    def __init__(self, path: str, reload: bool) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addon": {"func": {"load_script": {"? -> ? / str -> ?": [[19, "def load_script(path: str) -> typing.Optional[types.ModuleType]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.running": {"param": {"self": {"ScriptLoader": [[148, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Script.don": {"param": {"self": {"Script": [[87, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.ScriptLoader.configur": {"param": {"self": {"ScriptLoader": [[174, "    def configure(self, updated):"]]}, "updated": {"?": [[174, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.script.Script.loadscript": {"var": {"ns": {"?": [[101, "            ns = load_script(self.fullpath)"]]}}, "param": {"self": {"Script": [[95, "    def loadscript(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/utils/test_debug.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_debug": {"func": {"test_dump_system_info_precompiled": {"? -> None": [[10, "def test_dump_system_info_precompiled(precompiled):"]]}, "test_dump_info": {"() -> None": [[16, "def test_dump_info():"]]}, "test_dump_stacks": {"() -> None": [[22, "def test_dump_stacks():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_deb": {"func": {"test_register_info_dumpers": {"() -> None": [[28, "def test_register_info_dumpers():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_debug.test_dump_stack": {"var": {"cs": {"?": [[23, "    cs = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_debug.test_dump_info": {"var": {"cs": {"?": [[17, "    cs = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.utils.test_debug.test_dump_system_info_": {"param": {"precompiled": {"?": [[10, "def test_dump_system_info_precompiled(precompiled):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_modifyheaders.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeadersF": {"func": {"test_simple": {"(TestModifyHeadersFile, ?) -> None": [[128, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeadersFile.test_nonexisten": {"var": {"tmpfile": {"?": [[152, "            tmpfile = tmpdir.join(\"replacement\")"]]}}, "param": {"tmpdir": {"?": [[143, "    async def test_nonexistent(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeadersFile.test_nonexistent": {"var": {"mh": {"ModifyHeaders": [[144, "        mh = ModifyHeaders()"]]}, "f": {"?": [[159, "            f = tflow.tflow()"]]}}, "param": {"self": {"TestModifyHeadersFile": [[143, "    async def test_nonexistent(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeadersFile.test_simp": {"param": {"self": {"TestModifyHeadersFile": [[128, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeaders.test_modify_headers": {"var": {"mh": {"ModifyHeaders": [[48, "        mh = ModifyHeaders()"]]}, "f": {"?": [[57, "            f = tflow.tflow()"], [62, "            f = tflow.tflow(resp=True)"], [74, "            f = tflow.tflow(resp=True)"], [87, "            f = tflow.tflow()"], [100, "            f = tflow.tflow()"], [105, "            f = tflow.tflow(resp=True)"], [116, "            f = tflow.tflow()"], [121, "            f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHead": {"func": {"test_configure": {"TestModifyHeaders -> None": [[40, "    def test_configure(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyH": {"func": {"test_modify_headers": {"TestModifyHeaders -> None": [[47, "    def test_modify_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.test_parse_modify_": {"var": {"spec": {"ModifySpec": [[10, "    spec = parse_modify_spec(\"/foo/bar/voing\", True)"], [15, "    spec = parse_modify_spec(\"/foo/bar/vo/ing/\", False)"], [20, "    spec = parse_modify_spec(\"/bar/voing\", False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeaders.test_configure": {"var": {"mh": {"ModifyHeaders": [[41, "        mh = ModifyHeaders()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeaders.test_modify_header": {"param": {"self": {"TestModifyHeaders": [[47, "    def test_modify_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeadersFile.test_s": {"var": {"tmpfile": {"?": [[131, "            tmpfile = tmpdir.join(\"replacement\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyh": {"class": {"TestModifyHeaders": {"<TestModifyHeaders>": [[38, "class TestModifyHeaders:"]]}, "TestModifyHeadersFile": {"<TestModifyHeadersFile>": [[127, "class TestModifyHeadersFile:"]]}}, "func": {"test_parse_modify_spec": {"() -> None": [[9, "def test_parse_modify_spec():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeadersFile.test_simple": {"var": {"mh": {"ModifyHeaders": [[129, "        mh = ModifyHeaders()"]]}, "f": {"?": [[137, "            f = tflow.tflow()"]]}}, "param": {"tmpdir": {"?": [[128, "    def test_simple(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_modifyheaders.TestModifyHeaders.test_configur": {"param": {"self": {"TestModifyHeaders": [[40, "    def test_configure(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_anticache.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_anticache.TestAntiCach": {"func": {"test_simple": {"TestAntiCache -> None": [[8, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_anticache.TestAntiCache.test_simple": {"var": {"sa": {"AntiCache": [[9, "        sa = anticache.AntiCache()"]]}, "f": {"?": [[11, "            f = tflow.tflow(resp=True)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_": {"class": {"TestAntiCache": {"<TestAntiCache>": [[7, "class TestAntiCache:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_anticache.TestAntiCache.test_simp": {"param": {"self": {"TestAntiCache": [[8, "    def test_simple(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/language/test_generators.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.langu": {"func": {"test_randomgenerator": {"() -> None": [[4, "def test_randomgenerator():"]]}, "test_filegenerator": {"? -> None": [[15, "def test_filegenerator(tmpdir):"]]}, "test_transform_generator": {"() -> None": [[27, "def test_transform_generator():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_randomgenerator": {"var": {"g": {"RandomGenerator": [[5, "    g = generators.RandomGenerator(\"bytes\", 100)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_filegenerato": {"param": {"tmpdir": {"?": [[15, "def test_filegenerator(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_transform_generator.trans": {"param": {"data": {"?": [[28, "    def trans(offset, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_transform_generator": {"var": {"t": {"TransformGenerator": [[31, "    t = generators.TransformGenerator(g, trans)"]]}, "g": {"str": [[30, "    g = \"one\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_transform_generato": {"func": {"trans": {"(TransformGenerator, ?) -> ?": [[28, "    def trans(offset, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_transform_generator.tran": {"param": {"offset": {"TransformGenerator": [[28, "    def trans(offset, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.language.test_generators.test_filegenerator": {"var": {"g": {"FileGenerator": [[18, "    g = generators.FileGenerator(str(f))"]]}, "f": {"?": [[16, "    f = tmpdir.join(\"foo\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/flow.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.get_stat": {"param": {"self": {"Flow": [[93, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.__init": {"var": {"server_conn": {"?": [[66, "            server_conn: connections.ServerConnection,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.f": {"class": {"Flow": {"<Flow>": [[55, "class Flow(stateobject.StateObject):"]]}}, "param": {"Flow": {"<Error>": [[55, "class Flow(stateobject.StateObject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Error.__repr__": {"param": {"self": {"Error": [[43, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.killab": {"param": {"self": {"Flow": [[146, "    def killable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.modified": {"param": {"self": {"Flow": [[120, "    def modified(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.get_state": {"var": {"d": {"?": [[94, "        d = super().get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.backup": {"param": {"self": {"Flow": [[129, "    def backup(self, force=False):"]]}, "force": {"?": [[129, "    def backup(self, force=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Erro": {"func": {"__str__": {"Error -> str": [[40, "    def __str__(self):"]]}, "__repr__": {"Error -> str": [[43, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.timestamp_start": {"param": {"self": {"Flow": [[185, "    def timestamp_start(self) -> float:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.copy": {"var": {"f": {"?": [[114, "        f = super().copy()"]]}}, "param": {"self": {"Flow": [[113, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.resum": {"param": {"self": {"Flow": [[172, "    def resume(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Error": {"func": {"__init__": {"? -> ?": [[27, "    def __init__(self, msg: str, timestamp=None) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.from_state": {"var": {"f": {"Flow": [[109, "        f = cls(None, None)"]]}}, "param": {"cls": {"<Flow>": [[108, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow": {"var": {"client_conn": {"None": [[65, "            client_conn: connections.ClientConnection,"]]}, "_stateobject_attributes": {"dict": [[82, "    _stateobject_attributes = dict("]]}}, "func": {"from_state": {"(<Flow>, ?) -> Flow": [[108, "    def from_state(cls, state):"]]}, "set_state": {"(Flow, None) -> None / (Flow, ?) -> None / (WebSocketFlow, ?) -> None": [[100, "    def set_state(self, state):"]]}, "resume": {"Flow -> None": [[172, "    def resume(self):"]]}, "revert": {"Flow -> None": [[137, "    def revert(self):"]]}, "modified": {"Flow -> bool": [[120, "    def modified(self):"]]}, "killable": {"Flow -> bool": [[146, "    def killable(self):"]]}, "timestamp_start": {"Flow -> None": [[185, "    def timestamp_start(self) -> float:"]]}, "intercept": {"Flow -> None": [[162, "    def intercept(self):"]]}, "kill": {"Flow -> None": [[153, "    def kill(self):"]]}, "get_state": {"Flow -> None": [[93, "    def get_state(self):"]]}, "copy": {"Flow -> None": [[113, "    def copy(self):"]]}, "backup": {"(Flow, ?) -> None": [[129, "    def backup(self, force=False):"]]}, "__init__": {"? -> ?": [[62, "    def __init__("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Error.from_": {"param": {"state": {"dict": [[47, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.E": {"var": {"_stateobject_attributes": {"dict": [[35, "    _stateobject_attributes = dict("]]}}, "func": {"from_state": {"(<Error>, dict) -> Error / (<Error>, ?) -> Error": [[47, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.__init__": {"var": {"self": {"Flow": [[63, "            self,"]]}, "type": {"None": [[64, "            type: str,"]]}, "live": {"None": [[67, "            live: bool=None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.intercept": {"param": {"self": {"Flow": [[162, "    def intercept(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.ki": {"param": {"self": {"Flow": [[153, "    def kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow": {"class": {"Error": {"<Error>": [[11, "class Error(stateobject.StateObject):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Error.__str__": {"param": {"self": {"Error": [[40, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Error.from_state": {"var": {"f": {"Error": [[50, "        f = cls(None)"]]}}, "param": {"cls": {"<Error>": [[47, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.set_stat": {"param": {"self": {"{Flow | WebSocketFlow}": [[100, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.from_": {"param": {"state": {"?": [[108, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.revert": {"param": {"self": {"Flow": [[137, "    def revert(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Error.__init__": {"param": {"msg": {"str": [[27, "    def __init__(self, msg: str, timestamp=None) -> None:"]]}, "timestamp": {"None": [[27, "    def __init__(self, msg: str, timestamp=None) -> None:"]]}, "self": {"Error": [[27, "    def __init__(self, msg: str, timestamp=None) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.flow.Flow.set_": {"var": {"state": {"?": [[101, "        state = state.copy()"]]}}, "param": {"state": {"None": [[100, "    def set_state(self, state):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_command_lexer.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_lexer.test_expr": {"param": {"expected": {"?": [[41, "def test_expr(test_input, expected):"]]}, "test_input": {"?": [[41, "def test_expr(test_input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_lexer.test_unquote_never_fail": {"param": {"s": {"?": [[52, "def test_unquote_never_fails(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_lex": {"func": {"test_unquote_never_fails": {"? -> None": [[52, "def test_unquote_never_fails(s):"]]}, "test_partial_quoted_string": {"(?, ?) -> None": [[22, "def test_partial_quoted_string(test_input, valid):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_l": {"func": {"test_expr": {"(?, ?) -> None": [[41, "def test_expr(test_input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_lexer": {"func": {"test_quote_unquote_cycle": {"? -> None": [[46, "def test_quote_unquote_cycle(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_lexer.test_quote_unquote_cycle": {"param": {"s": {"?": [[46, "def test_quote_unquote_cycle(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_command_lexer.test_partial_quoted_string": {"param": {"valid": {"?": [[22, "def test_partial_quoted_string(test_input, valid):"]]}, "test_input": {"?": [[22, "def test_partial_quoted_string(test_input, valid):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/shutdown.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.shutdow": {"func": {"running": {"() -> None": [[4, "def running():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/proxy/protocol/test_http2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.setup_connect": {"var": {"config": {"?": [[146, "        config = h2.config.H2Configuration("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestTrailers.handle_server_event": {"param": {"h2_conn": {"?": [[1040, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[1040, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[1040, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestRequestTrailers>": [[1040, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase._send_reques": {"var": {"priority_weight": {"None": [[166, "                      priority_weight=None,"]]}}, "param": {"priority_weight": {"None": [[167, "                      streaming=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.test_max_concurrent_streams": {"var": {"h2_conn": {"None": [[844, "        h2_conn = self.setup_connection()"]]}, "header": {"str": [[860, "                header, body = http2.read_raw_frame(self.client.rfile)"]]}, "flow": {"?": [[876, "        for flow in self.master.state.flows:"]]}, "event": {"?": [[867, "            for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestStreamResetFromServer.test_request_with_priority": {"var": {"h2_conn": {"?": [[462, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[478, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[475, "        done = False"], [489, "                    done = True"]]}, "events": {"?": [[479, "                events = h2_conn.receive_data(raw)"]]}, "event": {"?": [[487, "            for event in events:"]]}}, "param": {"self": {"TestStreamResetFromServer": [[461, "    def test_request_with_priority(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromS": {"func": {"handle_server_event": {"(<TestAllStreamResetsFromServer>, ?, ?, ?, ?) -> bool": [[505, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.handle_server_event": {"param": {"h2_conn": {"?": [[829, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[829, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[829, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestMaxConcurrentStreams>": [[829, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseTrailers.handle_server_event": {"var": {"headers": {"[(str, str)]": [[1117, "            headers = ["]]}}, "param": {"h2_conn": {"?": [[1113, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[1113, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[1113, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestResponseTrailers>": [[1113, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_h": {"class": {"_Http2ServerBase": {"<_Http2ServerBase>": [[32, "class _Http2ServerBase(net_tservers.ServerTestBase):"]]}, "_Http2TestBase": {"<_Http2TestBase>": [[87, "class _Http2TestBase:"]]}, "_Http2Test": {"<_Http2Test>": [[189, "class _Http2Test(_Http2TestBase, _Http2ServerBase):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.handle_server_event": {"param": {"h2_conn": {"?": [[982, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[982, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[982, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestResponseStreaming>": [[982, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority.test_request_w": {"param": {"http2_priority_enabled": {"?": [[318, "    def test_request_with_priority(self, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPriority.test_": {"param": {"priority": {"?": [[396, "    def test_priority(self, prioritize_before, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.get_option": {"var": {"opts": {"Options": [[101, "        opts = options.Options("]]}}, "param": {"cls": {"<_Http2TestBase>": [[100, "    def get_options(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.handle_server_event": {"param": {"h2_conn": {"?": [[615, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[615, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[615, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestPushPromise>": [[615, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionLost.test_connection_lost": {"var": {"h2_conn": {"None": [[791, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[804, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[801, "        done = False"]]}}, "param": {"self": {"TestConnectionLost": [[790, "    def test_connection_lost(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase._send_req": {"var": {"priority_exclusive": {"None": [[164, "                      priority_exclusive=None,"]]}}, "param": {"priority_exclusive": {"None": [[167, "                      streaming=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase._send_request": {"var": {"h2_conn": {"None": [[159, "                      h2_conn,"]]}, "headers": {"None": [[161, "                      headers=None,"]], "[?]": [[169, "            headers = []"]]}, "body": {"str": [[162, "                      body=b'',"]]}, "wfile": {"Writer": [[158, "                      wfile,"]]}}, "param": {"h2_conn": {"None": [[167, "                      streaming=False):"]]}, "headers": {"None": [[167, "                      streaming=False):"]]}, "self": {"{TestAllStreamResetsFromServer | TestBodySizeLimit | TestConnectionLost | TestConnectionTerminated | TestMaxConcurrentStreams | TestPriority | TestPushPromise | TestRequestStreaming | TestRequestWithPriority | TestResponseStreaming | TestResponseTrailers | TestSimple | TestStreamResetFromServer | _Http2TestBase}": [[167, "                      streaming=False):"]]}, "body": {"str": [[167, "                      streaming=False):"]]}, "wfile": {"Writer": [[167, "                      streaming=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestStreamResetFromServer.handle_server_event": {"param": {"h2_conn": {"?": [[452, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[452, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[452, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestStreamResetFromServer>": [[452, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.run_test_for_stream_res": {"var": {"event": {"?": [[554, "            for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.test_all_stream_reset_error_cod": {"param": {"self": {"TestAllStreamResetsFromServer": [[514, "    def test_all_stream_reset_error_codes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseTrailers.test_trail": {"var": {"response_body_buffer": {"str": [[1133, "        response_body_buffer = b''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionTerminated.handle_server_event": {"param": {"h2_conn": {"?": [[884, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[884, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[884, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestConnectionTerminated>": [[884, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionTerminated.test_connection_terminated": {"var": {"h2_conn": {"None": [[892, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[905, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "events": {"?": [[906, "                events = h2_conn.receive_data(raw)"]]}, "event": {"?": [[907, "                for event in events:"]]}}, "param": {"self": {"TestConnectionTerminated": [[891, "    def test_connection_terminated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionTerminated.test_connection_terminat": {"var": {"done": {"bool": [[901, "        done = False"], [910, "                        done = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionLost.handle_server_event": {"param": {"h2_conn": {"?": [[783, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[783, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[783, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestConnectionLost>": [[783, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseTrailers.handle_server_": {"param": {"event": {"?": [[1113, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.test_max_concurrent_stream": {"var": {"events": {"?": [[861, "                events = h2_conn.receive_data(b''.join([header, body]))"]]}}, "param": {"self": {"TestMaxConcurrentStreams": [[843, "    def test_max_concurrent_streams(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority.test_request_with_": {"param": {"priority": {"?": [[318, "    def test_request_with_priority(self, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.handle_server_": {"param": {"event": {"?": [[982, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2T": {"func": {"setup_class": {"<_Http2Test> -> None": [[192, "    def setup_class(cls):"]]}, "teardown_class": {"<_Http2Test> -> None": [[197, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2": {"class": {"TestAllStreamResetsFromServer": {"<TestAllStreamResetsFromServer>": [[499, "class TestAllStreamResetsFromServer(_Http2Test):"]]}, "TestConnectionTerminated": {"<TestConnectionTerminated>": [[881, "class TestConnectionTerminated(_Http2Test):"]]}, "TestPriority": {"<TestPriority>": [[365, "class TestPriority(_Http2Test):"]]}, "TestMaxConcurrentStreams": {"<TestMaxConcurrentStreams>": [[821, "class TestMaxConcurrentStreams(_Http2Test):"]]}, "TestStreamResetFromServer": {"<TestStreamResetFromServer>": [[449, "class TestStreamResetFromServer(_Http2Test):"]]}, "TestResponseTrailers": {"<TestResponseTrailers>": [[1110, "class TestResponseTrailers(_Http2Test):"]]}, "TestRequestWithPriority": {"<TestRequestWithPriority>": [[284, "class TestRequestWithPriority(_Http2Test):"]]}, "TestBodySizeLimit": {"<TestBodySizeLimit>": [[564, "class TestBodySizeLimit(_Http2Test):"]]}, "TestConnectionLost": {"<TestConnectionLost>": [[780, "class TestConnectionLost(_Http2Test):"]]}, "TestRequestTrailers": {"<TestRequestTrailers>": [[1036, "class TestRequestTrailers(_Http2Test):"]]}, "TestSimple": {"<TestSimple>": [[202, "class TestSimple(_Http2Test):"]]}, "TestResponseStreaming": {"<TestResponseStreaming>": [[979, "class TestResponseStreaming(_Http2Test):"]]}, "TestPushPromise": {"<TestPushPromise>": [[612, "class TestPushPromise(_Http2Test):"]]}, "TestRequestStreaming": {"<TestRequestStreaming>": [[921, "class TestRequestStreaming(_Http2Test):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentS": {"func": {"test_max_concurrent_streams": {"TestMaxConcurrentStreams -> None": [[843, "    def test_max_concurrent_streams(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.test_response_": {"param": {"streaming": {"?": [[997, "    def test_response_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.test_request_streaming": {"var": {"h2_conn": {"?": [[943, "        h2_conn = self.setup_connection()"]]}, "body": {"?": [[944, "        body = generators.RandomGenerator(\"bytes\", 100)[:]"]]}, "event": {"?": [[966, "                for event in events:"]]}, "raw": {"str": [[963, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[958, "        done = False"], [969, "                        done = True"]]}, "connection_terminated_event": {"None": [[959, "        connection_terminated_event = None"]], "?": [[968, "                        connection_terminated_event = event"]]}, "events": {"?": [[964, "                events = h2_conn.receive_data(raw)"]]}}, "class": {"Stream": {"<Stream>": [[938, "        class Stream:"]]}}, "param": {"self": {"TestRequestStreaming": [[937, "    def test_request_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.setup_cla": {"param": {"cls": {"<_Http2TestBase>": [[90, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionTermi": {"func": {"handle_server_event": {"(<TestConnectionTerminated>, ?, ?, ?, ?) -> bool": [[884, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionT": {"func": {"test_connection_terminated": {"TestConnectionTerminated -> None": [[891, "    def test_connection_terminated(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestStreamResetFromServer.handle_server_": {"param": {"event": {"?": [[452, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionTerminated.tes": {"var": {"connection_terminated_event": {"None": [[902, "        connection_terminated_event = None"]], "?": [[909, "                        connection_terminated_event = event"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.test_all_stream_reset_error_codes": {"var": {"error_name": {"?": [[515, "        for error_name, error_code in h2.errors.ErrorCodes.__members__.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.setup_connection": {"param": {"self": {"{TestAllStreamResetsFromServer | TestBodySizeLimit | TestConnectionLost | TestConnectionTerminated | TestMaxConcurrentStreams | TestPriority | TestPushPromise | TestRequestStreaming | TestRequestTrailers | TestRequestWithPriority | TestResponseStreaming | TestResponseTrailers | TestSimple | TestStreamResetFromServer | _Http2TestBase}": [[122, "    def setup_connection(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionL": {"func": {"test_connection_lost": {"TestConnectionLost -> None": [[790, "    def test_connection_lost(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming": {"func": {"handle_server_event": {"(<TestRequestStreaming>, ?, ?, ?, ?) -> bool": [[924, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.handle_server_": {"param": {"event": {"?": [[924, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestTrai": {"func": {"handle_server_event": {"(<TestRequestTrailers>, ?, ?, ?, ?) -> bool": [[1040, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_promise": {"var": {"h2_conn": {"None": [[673, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[689, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimple.handle_server_": {"param": {"event": {"?": [[206, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseS": {"func": {"test_response_streaming": {"(TestResponseStreaming, ?) -> None": [[997, "    def test_response_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimple.test_simp": {"param": {"self": {"TestSimple": [[236, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_prom": {"var": {"bodies": {"[?]": [[719, "        bodies = [flow.response.content for flow in self.master.state.flows]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.test_response_streaming.Stream": {"func": {"responseheaders": {"(Stream, ?) -> None": [[999, "            def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseTrailers.test_trailer": {"var": {"events": {"?": [[1152, "                events = h2_conn.receive_data(raw)"]]}}, "param": {"self": {"TestResponseTrailers": [[1132, "    def test_trailers(self, announce):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.run_test_for_stream_r": {"var": {"events": {"?": [[546, "                events = h2_conn.receive_data(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseT": {"var": {"trailers_buffer": {"None": [[1147, "        trailers_buffer = None"]], "?": [[1164, "                    trailers_buffer = event.headers"]]}}, "func": {"test_trailers": {"(TestResponseTrailers, ?) -> ?": [[1132, "    def test_trailers(self, announce):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestBodySizeLimi": {"func": {"handle_server_event": {"(<TestBodySizeLimit>, ?, ?, ?, ?) -> bool": [[567, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStream": {"func": {"setup_class": {"<TestMaxConcurrentStreams> -> None": [[824, "    def setup_class(cls):"]]}, "handle_server_event": {"(<TestMaxConcurrentStreams>, ?, ?, ?, ?) -> bool": [[829, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.handle_server_event": {"param": {"h2_conn": {"?": [[924, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[924, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[924, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestRequestStreaming>": [[924, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase._send_requ": {"var": {"end_stream": {"None": [[163, "                      end_stream=None,"]], "bool": [[171, "            end_stream = (len(body) == 0)"]]}, "stream_id": {"int": [[160, "                      stream_id=1,"]]}, "priority_depends_on": {"None": [[165, "                      priority_depends_on=None,"]]}, "streaming": {"bool": [[167, "                      streaming=False):"]]}}, "param": {"end_stream": {"None": [[167, "                      streaming=False):"]]}, "stream_id": {"int": [[167, "                      streaming=False):"]]}, "priority_depends_on": {"None": [[167, "                      streaming=False):"]]}, "streaming": {"bool": [[167, "                      streaming=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase.handle_server_event": {"param": {"h2_conn": {"?": [[83, "    def handle_server_event(self, event, h2_conn, rfile, wfile):"]]}, "self": {"_Http2ServerBase": [[83, "    def handle_server_event(self, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[83, "    def handle_server_event(self, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[83, "    def handle_server_event(self, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_promise_reset": {"var": {"h2_conn": {"None": [[729, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[745, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[739, "        done = False"], [765, "                    done = True"], [768, "                done = True"]]}, "responses": {"int": [[742, "        responses = 0"]]}, "bodies": {"[?]": [[774, "        bodies = [flow.response.content for flow in self.master.state.flows if flow.response]"]]}}, "param": {"self": {"TestPushPromise": [[728, "    def test_push_promise_reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2Test.teardown_cla": {"param": {"cls": {"<_Http2Test>": [[197, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase.handler.handle": {"var": {"h2_conn": {"?": [[42, "            h2_conn = h2.connection.H2Connection(config)"]]}, "raw": {"str": [[58, "                    raw = b''.join(http2.read_raw_frame(self.rfile))"]]}, "config": {"?": [[38, "            config = h2.config.H2Configuration("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.setup": {"param": {"self": {"_Http2TestBase": [[113, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.handle_server_": {"param": {"event": {"?": [[829, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestStreamResetFromServ": {"func": {"test_request_with_priority": {"TestStreamResetFromServer -> ?": [[461, "    def test_request_with_priority(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase.handler.hand": {"var": {"preamble": {"?": [[44, "            preamble = self.rfile.read(24)"]]}}, "param": {"self": {"handler": [[37, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.master": {"param": {"self": {"_Http2TestBase": [[110, "    def master(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_promi": {"var": {"events": {"?": [[690, "                events = h2_conn.receive_data(raw)"]]}, "pushed_flows": {"[?]": [[725, "        pushed_flows = [flow for flow in self.master.state.flows if 'h2-pushed-stream' in flow.metadata]"]]}, "pushed_streams": {"int": [[685, "        pushed_streams = 0"], [741, "        pushed_streams = 0"]]}, "responses": {"int": [[686, "        responses = 0"]]}, "ended_streams": {"int": [[684, "        ended_streams = 0"], [740, "        ended_streams = 0"]]}}, "param": {"self": {"TestPushPromise": [[672, "    def test_push_promise(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestTrailers.handle_server_": {"param": {"event": {"?": [[1040, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.handle_server_": {"param": {"event": {"?": [[505, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushP": {"func": {"test_push_promise": {"TestPushPromise -> ?": [[672, "    def test_push_promise(self):"]]}, "test_push_promise_reset": {"TestPushPromise -> ?": [[728, "    def test_push_promise_reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimple.test_simpl": {"var": {"response_body_buffer": {"str": [[237, "        response_body_buffer = b''"]]}, "done": {"bool": [[253, "        done = False"], [269, "                    done = True"]]}, "events": {"?": [[257, "                events = h2_conn.receive_data(raw)"]]}, "event": {"?": [[265, "            for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBas": {"class": {"handler": {"<handler>": [[35, "    class handler(mitmproxy.net.tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase.handle_server_": {"param": {"event": {"?": [[83, "    def handle_server_event(self, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.handle_server_even": {"var": {"data": {"?": [[928, "            data = event.data"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.test_max_concu": {"var": {"new_streams": {"[int]": [[845, "        new_streams = [1, 3, 5, 7, 9, 11]"]]}, "ended_streams": {"int": [[857, "        ended_streams = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPriority.handle_server_event": {"var": {"headers": {"[(str, str)]": [[384, "                headers = [(':status', '200')]"]]}}, "param": {"h2_conn": {"?": [[368, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[368, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[368, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestPriority>": [[368, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimp": {"func": {"handle_server_event": {"(<TestSimple>, ?, ?, ?, ?) -> bool": [[206, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.handle_server_": {"param": {"event": {"?": [[615, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestT": {"var": {"server_trailers_received": {"bool": [[1037, "    server_trailers_received = False"]]}}, "func": {"test_trailers": {"(TestRequestTrailers, ?, ?) -> ?": [[1060, "    def test_trailers(self, announce, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.setup_connecti": {"var": {"h2_conn": {"?": [[150, "        h2_conn = h2.connection.H2Connection(config)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestS": {"func": {"test_request_streaming": {"(TestRequestStreaming, ?) -> None": [[937, "    def test_request_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestBodySizeLimit.test_body_size_limi": {"var": {"events": {"?": [[593, "                events = h2_conn.receive_data(raw)"]]}, "event": {"?": [[601, "            for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPriority.test_priority": {"var": {"h2_conn": {"None": [[400, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[428, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[425, "        done = False"], [439, "                    done = True"]]}, "events": {"?": [[429, "                events = h2_conn.receive_data(raw)"]]}, "event": {"?": [[437, "            for event in events:"]]}}, "param": {"self": {"TestPriority": [[396, "    def test_priority(self, prioritize_before, http2_priority_enabled, priority, expected_priority):"]]}, "prioritize_before": {"?": [[396, "    def test_priority(self, prioritize_before, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromi": {"func": {"handle_server_event": {"(<TestPushPromise>, ?, ?, ?, ?) -> bool": [[615, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority.handle_server_event": {"var": {"headers": {"[(str, str)]": [[301, "                headers = [(':status', '200')]"]]}}, "param": {"h2_conn": {"?": [[287, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[287, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[287, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestRequestWithPriority>": [[287, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestStreamResetFromS": {"func": {"handle_server_event": {"(<TestStreamResetFromServer>, ?, ?, ?, ?) -> bool": [[452, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.test_response_streaming.Stream.responseheaders": {"param": {"f": {"?": [[999, "            def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimple.test_simple": {"var": {"h2_conn": {"None": [[238, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[256, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestBodySizeL": {"func": {"test_body_size_limit": {"TestBodySizeLimit -> ?": [[572, "    def test_body_size_limit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.setup_cla": {"param": {"cls": {"<TestMaxConcurrentStreams>": [[824, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.test_request_streaming.Stream": {"func": {"requestheaders": {"(Stream, ?) -> None": [[939, "            def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestTrailers.test_trail": {"var": {"stream_id": {"int": [[1062, "        stream_id = 1"]]}, "headers": {"[(str, str)]": [[1063, "        headers = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming": {"func": {"handle_server_event": {"(<TestResponseStreaming>, ?, ?, ?, ?) -> bool": [[982, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionLost.handle_server_": {"param": {"event": {"?": [[783, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase.handler.handl": {"var": {"done": {"bool": [[55, "            done = False"], [74, "                            done = True"], [77, "                        done = True"], [79, "                        done = True"]]}, "events": {"?": [[59, "                    events = h2_conn.receive_data(raw)"]]}, "event": {"?": [[71, "                for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2Test.setup_cla": {"param": {"cls": {"<_Http2Test>": [[192, "    def setup_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority.test_request_with": {"param": {"expected_priority": {"?": [[318, "    def test_request_with_priority(self, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPriority.handle_server_": {"param": {"event": {"?": [[368, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_promise_r": {"var": {"events": {"?": [[746, "                events = h2_conn.receive_data(raw)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionTerminated.handle_server_": {"param": {"event": {"?": [[884, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestB": {"func": {"setup_class": {"<_Http2TestBase> -> None": [[90, "    def setup_class(cls):"]]}, "teardown_class": {"<_Http2TestBase> -> None": [[96, "    def teardown_class(cls):"]]}, "master": {"_Http2TestBase -> ?": [[110, "    def master(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestTrailers.test_trailers": {"var": {"h2_conn": {"None": [[1061, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[1087, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[1084, "        done = False"], [1098, "                    done = True"]]}, "event": {"?": [[1096, "            for event in events:"]]}}, "param": {"body": {"?": [[1060, "    def test_trailers(self, announce, body):"]]}, "announce": {"?": [[1060, "    def test_trailers(self, announce, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority.test_request_with_priority": {"var": {"h2_conn": {"?": [[321, "        h2_conn = self.setup_connection()"]]}, "resp": {"?": [[359, "        resp = self.master.state.flows[0].response"]]}, "event": {"?": [[349, "            for event in events:"]]}, "raw": {"str": [[340, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[337, "        done = False"], [351, "                    done = True"]]}, "events": {"?": [[341, "                events = h2_conn.receive_data(raw)"]]}}, "param": {"self": {"TestRequestWithPriority": [[318, "    def test_request_with_priority(self, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_promise_res": {"var": {"event": {"?": [[754, "            for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase": {"var": {"ssl": {"dict": [[33, "    ssl = dict(alpn_select=b'h2')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestS": {"func": {"test_simple": {"TestSimple -> ?": [[236, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPriority.tes": {"param": {"http2_priority_enabled": {"?": [[396, "    def test_priority(self, prioritize_before, http2_priority_enabled, priority, expected_priority):"]]}, "expected_priority": {"?": [[396, "    def test_priority(self, prioritize_before, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.handle_server_even": {"var": {"data": {"?": [[986, "            data = generators.RandomGenerator(\"bytes\", 100)[:]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerB": {"func": {"handle_server_event": {"(_Http2ServerBase, ?, ?, ?, ?) -> None": [[83, "    def handle_server_event(self, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBa": {"func": {"get_options": {"<_Http2TestBase> -> Options": [[100, "    def get_options(cls):"]]}, "setup": {"_Http2TestBase -> None": [[113, "    def setup(self):"]]}, "_send_request": {"(_Http2TestBase, ?, ?, int, None, str, None, None, None, None, bool) -> ? / (TestStreamResetFromServer, ?, ?, int, None, str, None, None, None, None, bool) -> None / (TestMaxConcurrentStreams, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestSimple, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestConnectionTerminated, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestResponseStreaming, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestPriority, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestConnectionLost, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestPushPromise, Writer, None, int, None, str, None, None, None, None, bool) -> None / (TestResponseTrailers, Writer, None, int, None, str, None, None, None, None, bool) -> None": [[157, "    def _send_request(self,"]]}, "setup_connection": {"TestMaxConcurrentStreams -> ? / TestSimple -> None / TestResponseTrailers -> None / TestPushPromise -> None / _Http2TestBase -> None / TestResponseStreaming -> None / TestPriority -> None / TestConnectionTerminated -> None / TestConnectionLost -> None / TestRequestTrailers -> None": [[122, "    def setup_connection(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithP": {"func": {"test_request_with_priority": {"(TestRequestWithPriority, ?, ?, ?) -> ?": [[318, "    def test_request_with_priority(self, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestBodySizeLimit.handle_server_": {"param": {"event": {"?": [[567, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority.handle_server_": {"param": {"event": {"?": [[287, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestBodySizeLimit.handle_server_event": {"param": {"h2_conn": {"?": [[567, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[567, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[567, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestBodySizeLimit>": [[567, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2ServerBase.handler": {"func": {"handle": {"handler -> ?": [[37, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.run_test_for_stream_reset": {"var": {"h2_conn": {"?": [[527, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[545, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[542, "        done = False"], [557, "                    done = True"]]}}, "param": {"self": {"TestAllStreamResetsFromServer": [[526, "    def run_test_for_stream_reset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.test_request_": {"param": {"streaming": {"?": [[937, "    def test_request_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBas": {"func": {"teardown": {"_Http2TestBase -> None": [[117, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestConnectionLo": {"func": {"handle_server_event": {"(<TestConnectionLost>, ?, ?, ?, ?) -> bool": [[783, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestBodySizeLimit.test_body_size_limit": {"var": {"h2_conn": {"?": [[575, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[592, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[589, "        done = False"], [603, "                    done = True"]]}}, "param": {"self": {"TestBodySizeLimit": [[572, "    def test_body_size_limit(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.test_response_streaming.Stream.responseheader": {"param": {"self": {"Stream": [[999, "            def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestMaxConcurrentStreams.test_max_concurren": {"var": {"stream_id": {"int": [[846, "        for stream_id in new_streams:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseStreaming.test_response_streaming": {"var": {"h2_conn": {"None": [[1003, "        h2_conn = self.setup_connection()"]]}, "events": {"?": [[1021, "                events = h2_conn.receive_data(raw)"]]}, "raw": {"str": [[1020, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[1015, "        done = False"], [1026, "                        done = True"]]}, "data": {"None": [[1017, "        data = None"]], "?": [[1025, "                        data = event.data"]]}, "event": {"?": [[1023, "                for event in events:"]]}}, "class": {"Stream": {"<Stream>": [[998, "        class Stream:"]]}}, "param": {"self": {"TestResponseStreaming": [[997, "    def test_response_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServer.handle_server_event": {"param": {"h2_conn": {"?": [[505, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[505, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[505, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestAllStreamResetsFromServer>": [[505, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPushPromise.test_push_promis": {"var": {"done": {"bool": [[683, "        done = False"], [707, "                    done = True"], [710, "                done = True"]]}, "event": {"?": [[699, "            for event in events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestTrailers.test_trailer": {"var": {"events": {"?": [[1088, "                events = h2_conn.receive_data(raw)"]]}}, "param": {"self": {"TestRequestTrailers": [[1060, "    def test_trailers(self, announce, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseTrailers.test_trailers": {"var": {"h2_conn": {"None": [[1134, "        h2_conn = self.setup_connection()"]]}, "raw": {"str": [[1151, "                raw = b''.join(http2.read_raw_frame(self.client.rfile))"]]}, "done": {"bool": [[1148, "        done = False"], [1166, "                    done = True"]]}, "event": {"?": [[1160, "            for event in events:"]]}}, "param": {"announce": {"?": [[1132, "    def test_trailers(self, announce):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.test_request_streaming.Stream.requestheaders": {"param": {"f": {"?": [[939, "            def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestAllStreamResetsFromServ": {"var": {"current_error_name": {"None": [[501, "    current_error_name = None"]]}, "current_error_code": {"None": [[502, "    current_error_code = None"]]}}, "func": {"run_test_for_stream_reset": {"TestAllStreamResetsFromServer -> ?": [[526, "    def run_test_for_stream_reset(self):"]]}, "test_all_stream_reset_error_codes": {"TestAllStreamResetsFromServer -> ?": [[514, "    def test_all_stream_reset_error_codes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestStreaming.test_request_streaming.Stream.requestheader": {"param": {"self": {"Stream": [[939, "            def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimpl": {"var": {"request_body_buffer": {"str": [[203, "    request_body_buffer = b''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestP": {"func": {"test_priority": {"(TestPriority, ?, ?, ?, ?) -> ?": [[396, "    def test_priority(self, prioritize_before, http2_priority_enabled, priority, expected_priority):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.teardown_cla": {"param": {"cls": {"<_Http2TestBase>": [[96, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestPriority": {"func": {"handle_server_event": {"(<TestPriority>, ?, ?, ?, ?) -> bool": [[368, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestResponseTrai": {"func": {"handle_server_event": {"(<TestResponseTrailers>, ?, ?, ?, ?) -> bool": [[1113, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestRequestWithPriority": {"func": {"handle_server_event": {"(<TestRequestWithPriority>, ?, ?, ?, ?) -> bool": [[287, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2.TestSimple.handle_server_event": {"param": {"h2_conn": {"?": [[206, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "wfile": {"?": [[206, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "rfile": {"?": [[206, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}, "cls": {"<TestSimple>": [[206, "    def handle_server_event(cls, event, h2_conn, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http2._Http2TestBase.teardown": {"param": {"self": {"_Http2TestBase": [[117, "    def teardown(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/io/test_compat.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_compat.test_lo": {"param": {"tdata": {"?": [[7, "def test_load(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_compat.test": {"var": {"flow_reader": {"FlowReader": [[9, "        flow_reader = io.FlowReader(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_compat.test_cannot_conver": {"param": {"tdata": {"?": [[23, "def test_cannot_convert(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_compat.test_load_018": {"var": {"flow_reader": {"FlowReader": [[17, "        flow_reader = io.FlowReader(f)"]]}, "flows": {"list": [[18, "        flows = list(flow_reader.stream())"]]}}, "param": {"tdata": {"?": [[15, "def test_load_018(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_compat.test_load": {"var": {"flows": {"list": [[10, "        flows = list(flow_reader.stream())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_compat.test_cannot_convert": {"var": {"flow_reader": {"FlowReader": [[25, "        flow_reader = io.FlowReader(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.io.test_comp": {"func": {"test_cannot_convert": {"? -> None": [[23, "def test_cannot_convert(tdata):"]]}, "test_load_018": {"? -> None": [[15, "def test_load_018(tdata):"]]}, "test_load": {"? -> None": [[7, "def test_load(tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addonmanager.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonM": {"func": {"_configure_all": {"(AddonManager, Options, ?) -> None / (AddonManager, ?, ?) -> None": [[119, "    def _configure_all(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManag": {"func": {"clear": {"AddonManager -> None": [[122, "    def clear(self):"]]}, "remove": {"(AddonManager, THalt) -> None / (AddonManager, TAddon) -> None / (AddonManager, None) -> None / (AddonManager, ?) -> None": [[173, "    def remove(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.Loader.add_option": {"var": {"default": {"?": [[66, "        default: typing.Any,"]]}, "typespec": {"? -> bool": [[65, "        typespec: type,"]]}, "self": {"Loader": [[63, "        self,"]]}, "help": {"str": [[67, "        help: str,"]]}, "choices": {"None": [[68, "        choices: typing.Optional[typing.Sequence[str]] = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.__len__": {"param": {"self": {"AddonManager": [[189, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.invoke_addon": {"var": {"a": {"?": [[234, "        for a in traverse([addon]):"]]}}, "param": {"self": {"{AddonManager | TestAddons}": [[228, "    def invoke_addon(self, addon, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.invoke_": {"param": {"addon": {"{Core | None | TAddon | THalt}": [[228, "    def invoke_addon(self, addon, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager": {"func": {"_get_name": {"? -> ?": [[15, "def _get_name(itm):"]]}, "safecall": {"() -> ?": [[40, "def safecall():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManage": {"func": {"__str__": {"AddonManager -> ?": [[192, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.trigger": {"var": {"i": {"?": [[254, "        for i in self.chain:"]]}}, "param": {"self": {"AddonManager": [[250, "    def trigger(self, name, *args, **kwargs):"]]}, "name": {"str": [[250, "    def trigger(self, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.invoke_addo": {"var": {"func": {"?": [[235, "            func = getattr(a, name, None)"]]}}, "param": {"name": {"str": [[228, "    def invoke_addon(self, addon, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.add": {"var": {"i": {"Core": [[170, "        for i in addons:"]]}}, "param": {"self": {"{AddonManager | TestAddons}": [[165, "    def add(self, *addons):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.register": {"var": {"a": {"?": [[149, "        for a in traverse([addon]):"], [157, "        for a in traverse([addon]):"], [160, "        for a in traverse([addon]):"]]}, "name": {"?": [[150, "            name = _get_name(a)"], [158, "            name = _get_name(a)"]]}, "l": {"Loader": [[155, "        l = Loader(self.master)"]]}}, "param": {"self": {"{AddonManager | TestAddons}": [[139, "    def register(self, addon):"]]}, "addon": {"Core": [[139, "    def register(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.remove": {"var": {"a": {"?": [[181, "        for a in traverse([addon]):"]]}, "n": {"?": [[182, "            n = _get_name(a)"]]}}, "param": {"addon": {"{None | TAddon | THalt}": [[173, "    def remove(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonm": {"class": {"AddonManager": {"<AddonManager>": [[112, "class AddonManager:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.clear": {"var": {"a": {"?": [[126, "        for a in self.chain:"]]}}, "param": {"self": {"AddonManager": [[122, "    def clear(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.Loader": {"func": {"add_command": {"(Loader, ?, ?) -> None / (Loader, str, ? -> str) -> None": [[98, "    def add_command(self, path: str, func: typing.Callable) -> None:"]]}, "add_option": {"(Loader, ?, ?, ?, ?, None) -> None / (Loader, str, ? -> bool, ?, str, None) -> None": [[62, "    def add_option("]]}, "__init__": {"? -> ?": [[59, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonMana": {"func": {"trigger": {"(AddonManager, str) -> None / (AddonManager, ?) -> None": [[250, "    def trigger(self, name, *args, **kwargs):"]]}, "register": {"(AddonManager, ?) -> None / (TestAddons, Core) -> Core / (TestAddons, ?) -> None": [[139, "    def register(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.traverse": {"var": {"a": {"{Core | None | TAddon | THalt}": [[106, "    for a in chain:"]]}}, "param": {"chain": {"{[?] | [Core] | [None] | [TAddon] | [THalt]}": [[102, "def traverse(chain):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanag": {"class": {"Loader": {"<Loader>": [[55, "class Loader:"]]}}, "func": {"cut_traceback": {"(?, ?) -> None / (?, str) -> None": [[19, "def cut_traceback(tb, func_name):"]]}, "traverse": {"[THalt] -> None / [?] -> None / [Core] -> None / ? -> None / [None] -> None / [TAddon] -> None / None -> None": [[102, "def traverse(chain):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager._configure_all": {"param": {"updated": {"?": [[119, "    def _configure_all(self, options, updated):"]]}, "options": {"Options": [[119, "    def _configure_all(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.__init__": {"param": {"self": {"AddonManager": [[113, "    def __init__(self, master):"]]}, "master": {"Master": [[113, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.__contains__": {"var": {"name": {"?": [[196, "        name = _get_name(item)"]]}}, "param": {"item": {"?": [[195, "    def __contains__(self, item):"]]}, "self": {"AddonManager": [[195, "    def __contains__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager._get_name": {"param": {"itm": {"?": [[15, "def _get_name(itm):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.get": {"param": {"self": {"AddonManager": [[131, "    def get(self, name):"]]}, "name": {"str": [[131, "    def get(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.safecall": {"var": {"etype": {"?": [[46, "        etype, value, tb = sys.exc_info()"]]}, "tb": {"None": [[47, "        tb = cut_traceback(tb, \"invoke_addon\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.Loader.__init__": {"param": {"self": {"Loader": [[59, "    def __init__(self, master):"]]}, "master": {"Master": [[59, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.handle_lifecycl": {"param": {"message": {"?": [[199, "    async def handle_lifecycle(self, name, message):"]]}, "name": {"str": [[199, "    async def handle_lifecycle(self, name, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.remov": {"param": {"self": {"AddonManager": [[173, "    def remove(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager._configure_a": {"param": {"self": {"AddonManager": [[119, "    def _configure_all(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.cut_traceback": {"var": {"tb": {"?": [[33, "        tb = tb.tb_next"]]}, "tb_orig": {"?": [[31, "    tb_orig = tb"]]}, "_": {"?": [[32, "    for _, _, fname, _ in traceback.extract_tb(tb):"]]}}, "param": {"func_name": {"str": [[19, "def cut_traceback(tb, func_name):"]]}, "tb": {"?": [[19, "def cut_traceback(tb, func_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.Loader.add_optio": {"var": {"same_signature": {"bool": [[79, "            same_signature = ("]]}, "name": {"str": [[64, "        name: str,"]]}, "existing": {"?": [[78, "            existing = self.master.options._options[name]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.handle_lifecyc": {"param": {"self": {"AddonManager": [[199, "    async def handle_lifecycle(self, name, message):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager": {"func": {"__contains__": {"(AddonManager, ?) -> bool": [[195, "    def __contains__(self, item):"]]}, "get": {"(AddonManager, ?) -> None / (AddonManager, str) -> None": [[131, "    def get(self, name):"]]}, "add": {"AddonManager -> None / TestAddons -> None": [[165, "    def add(self, *addons):"]]}, "__init__": {"? -> ?": [[113, "    def __init__(self, master):"]]}, "invoke_addon": {"(AddonManager, THalt, str) -> None / (AddonManager, TAddon, str) -> None / (AddonManager, ?, str) -> None / (TestAddons, Core, str) -> None / (TestAddons, ?, str) -> None / (AddonManager, ?, ?) -> None / (AddonManager, None, str) -> None / (TestAddons, ?, ?) -> None": [[228, "    def invoke_addon(self, addon, name, *args, **kwargs):"]]}, "__len__": {"AddonManager -> int": [[189, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addonmanager.AddonManager.__str__": {"param": {"self": {"AddonManager": [[192, "    def __str__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/data/addonscripts/concurrent_decorator_class.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator_cl": {"var": {"addons": {"[ConcurrentClass]": [[12, "addons = [ConcurrentClass()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator_": {"class": {"ConcurrentClass": {"<ConcurrentClass>": [[5, "class ConcurrentClass:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator_class.ConcurrentClass.request": {"param": {"self": {"ConcurrentClass": [[8, "    def request(self, flow):"]]}, "flow": {"?": [[8, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.data.addonscripts.concurrent_decorator_class.ConcurrentCla": {"func": {"request": {"(ConcurrentClass, ?) -> None": [[8, "    def request(self, flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_types.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_int": {"var": {"b": {"_IntType": [[56, "        b = mitmproxy.types._IntType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_path.normPathOpts": {"var": {"ret": {"[str]": [[79, "            ret = []"]]}}, "param": {"prefix": {"str": [[78, "        def normPathOpts(prefix, match):"]]}, "match": {"str": [[78, "        def normPathOpts(prefix, match):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_typ": {"class": {"DummyConsole": {"<DummyConsole>": [[147, "class DummyConsole:"]]}}, "func": {"test_strseq": {"() -> None": [[135, "def test_strseq():"]]}, "test_flow": {"() -> None": [[164, "def test_flow():"]]}, "test_flows": {"() -> None": [[180, "def test_flows():"]]}, "test_cmd": {"() -> None": [[97, "def test_cmd():"]]}, "test_choice": {"() -> None": [[211, "def test_choice():"]]}, "test_bool": {"() -> None": [[24, "def test_bool():"]]}, "test_unknown": {"() -> None": [[45, "def test_unknown():"]]}, "test_arg": {"() -> None": [[127, "def test_arg():"]]}, "test_str": {"() -> None": [[36, "def test_str():"]]}, "test_data": {"() -> None": [[197, "def test_data():"]]}, "test_int": {"() -> None": [[54, "def test_int():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_arg": {"var": {"b": {"_ArgType": [[129, "        b = mitmproxy.types._ArgType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_path": {"var": {"b": {"_PathType": [[68, "        b = mitmproxy.types._PathType()"]]}, "cd": {"str": [[86, "        cd = os.path.normpath(tdata.path(\"mitmproxy/completion\"))"]]}}, "param": {"tdata": {"?": [[66, "def test_path(tdata, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_path.normPathOpt": {"var": {"s": {"str": [[80, "            for s in b.completion(tctx.master.commands, mitmproxy.types.Path, match):"], [81, "                s = s[len(prefix):]"], [82, "                s = s.replace(os.sep, \"/\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_str": {"var": {"b": {"_StrType": [[38, "        b = mitmproxy.types._StrType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_ty": {"func": {"test_cutspec": {"() -> None": [[111, "def test_cutspec():"]]}, "test_path": {"(?, ?) -> None": [[66, "def test_path(tdata, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types": {"func": {"chdir": {"str -> None / ? -> None": [[17, "def chdir(path: str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.DummyConsole": {"func": {"cut": {"(DummyConsole, ?) -> [[str]]": [[156, "    def cut(self, spec: str) -> mitmproxy.types.Data:"]]}, "options": {"DummyConsole -> [str]": [[160, "    def options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.DummyConsole.option": {"param": {"self": {"DummyConsole": [[160, "    def options(self) -> typing.Sequence[str]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_flow": {"var": {"b": {"_FlowType": [[167, "        b = mitmproxy.types._FlowType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.DummyCon": {"func": {"resolve": {"(DummyConsole, ?) -> None": [[149, "    def resolve(self, spec: str) -> typing.Sequence[flow.Flow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.DummyConsole.resolve": {"var": {"n": {"int": [[152, "        n = int(spec)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_": {"param": {"monkeypatch": {"?": [[66, "def test_path(tdata, monkeypatch):"]]}}, "func": {"normPathOpts": {"(str, str) -> [str]": [[78, "        def normPathOpts(prefix, match):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_data": {"var": {"b": {"_DataType": [[199, "        b = mitmproxy.types._DataType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_unknown": {"var": {"b": {"_UnknownType": [[47, "        b = mitmproxy.types._UnknownType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_bool": {"var": {"b": {"_BoolType": [[26, "        b = mitmproxy.types._BoolType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_strseq": {"var": {"b": {"_StrSeqType": [[137, "        b = mitmproxy.types._StrSeqType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_flows": {"var": {"b": {"_FlowsType": [[183, "        b = mitmproxy.types._FlowsType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_choice": {"var": {"comp": {"?": [[230, "        comp = b.completion(tctx.master.commands, mitmproxy.types.Choice(\"options\"), \"\")"]]}, "b": {"_ChoiceType": [[214, "        b = mitmproxy.types._ChoiceType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmprox": {"func": {"test_typemanager": {"() -> None": [[237, "def test_typemanager():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_cmd": {"var": {"b": {"_CmdType": [[100, "        b = mitmproxy.types._CmdType()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.test_cutspec": {"var": {"b": {"_CutSpecType": [[113, "        b = mitmproxy.types._CutSpecType()"]]}, "ret": {"[str]": [[122, "        ret = b.completion(tctx.master.commands, mitmproxy.types.CutSpec, \"request.port,f\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_types.ch": {"var": {"old_dir": {"str": [[18, "    old_dir = os.getcwd()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/bench/benchmark.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.__init__": {"param": {"self": {"Benchmark": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.respon": {"param": {"self": {"Benchmark": [[20, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.load": {"param": {"self": {"Benchmark": [[41, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark": {"param": {"loader": {"?": [[41, "    def load(self, loader):"]]}}, "func": {"load": {"(Benchmark, ?) -> None": [[41, "    def load(self, loader):"]]}, "request": {"(Benchmark, ?) -> None": [[17, "    def request(self, f):"]]}, "running": {"Benchmark -> None": [[53, "    def running(self):"]]}, "done": {"Benchmark -> None": [[58, "    def done(self):"]]}, "response": {"(Benchmark, ?) -> None": [[20, "    def response(self, f):"]]}, "__init__": {"? -> ?": [[10, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark": {"var": {"addons": {"[Benchmark]": [[62, "addons = [Benchmark()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.proc": {"var": {"stdout": {"?": [[33, "        stdout, _ = await traf.communicate()"]]}}, "param": {"self": {"Benchmark": [[23, "    async def procs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.request": {"param": {"self": {"Benchmark": [[17, "    def request(self, f):"]]}, "f": {"?": [[17, "    def request(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.response": {"param": {"f": {"?": [[20, "    def response(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.running": {"param": {"self": {"Benchmark": [[53, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.procs": {"var": {"traf": {"?": [[26, "        traf = await asyncio.create_subprocess_exec("]]}, "backend": {"?": [[25, "        backend = await asyncio.create_subprocess_exec(\"devd\", \"-q\", \"-p\", \"10001\", \".\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.benchmark.Benchmark.don": {"param": {"self": {"Benchmark": [[58, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.bench.b": {"class": {"Benchmark": {"<Benchmark>": [[6, "class Benchmark:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_version.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_version.test": {"var": {"version_file": {"str": [[12, "    version_file = here / \"..\" / \"..\" / \"mitmproxy\" / \"version.py\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy": {"func": {"test_get_version": {"() -> None": [[19, "def test_get_version():"]]}, "test_version": {"? -> None": [[10, "def test_version(capsys):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_version.test_version": {"var": {"here": {"?": [[11, "    here = pathlib.Path(__file__).absolute().parent"]]}, "stdout": {"?": [[14, "    stdout, stderr = capsys.readouterr()"]]}}, "param": {"capsys": {"?": [[10, "def test_version(capsys):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/io/protobuf.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_request": {"var": {"h": {"?": [[42, "        for h in req.headers.fields:"]]}, "preq": {"?": [[38, "    preq = http_pb2.HTTPRequest()"]]}, "header": {"?": [[43, "            header = preq.headers.add()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_client_c": {"var": {"extension": {"?": [[57, "        for extension in cc.tls_extensions:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_error": {"var": {"pe": {"?": [[83, "    pe = http_pb2.HTTPError()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._load_http_respons": {"var": {"header": {"?": [[127, "    for header in o.headers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_response": {"var": {"h": {"?": [[30, "        for h in res.headers.fields:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf.dump_htt": {"var": {"p": {"str": [[92, "    for p in ['request', 'response', 'client_conn', 'server_conn', 'error']:"]]}, "pf": {"?": [[91, "    pf = http_pb2.HTTPFlow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf.load_http": {"var": {"k": {"?": [[187, "    for k, v in parts.items():"]]}, "f": {"HTTPFlow": [[186, "    f = HTTPFlow(ClientConnection(None, tuple(), None), ServerConnection(tuple()))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf.load_h": {"var": {"parts": {"dict": [[179, "    parts = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_erro": {"var": {"attr": {"str": [[84, "    for attr in ['msg', 'timestamp']:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._move_attr": {"param": {"s_obj": {"{HTTPRequest | HTTPResponse | None}": [[11, "def _move_attrs(s_obj, d_obj, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf.loads": {"var": {"p": {"?": [[196, "        p = http_pb2.HTTPFlow()"]]}}, "param": {"b": {"{None | str}": [[192, "def loads(b: bytes, typ=\"http\") -> typing.Union[HTTPFlow]:"]]}, "typ": {"str": [[192, "def loads(b: bytes, typ=\"http\") -> typing.Union[HTTPFlow]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_respons": {"var": {"header": {"?": [[31, "            header = pres.headers.add()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._load_http_client_c": {"var": {"extension": {"?": [[142, "        for extension in o.tls_extensions:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_server_conn": {"var": {"psc": {"?": [[68, "    psc = http_pb2.ServerConnection()"]]}, "addr": {"str": [[71, "    for addr in ['address', 'ip_address', 'source_address']:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._load_http_error": {"var": {"m": {"str": [[172, "    for m in ['msg', 'timestamp']:"]]}, "d": {"dict": [[171, "    d = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._load_http_request": {"var": {"header": {"?": [[114, "    for header in o.headers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._move_": {"param": {"attrs": {"[str]": [[11, "def _move_attrs(s_obj, d_obj, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._move_attrs": {"var": {"attr": {"str": [[12, "    for attr in attrs:"]]}}, "param": {"d_obj": {"dict": [[11, "def _move_attrs(s_obj, d_obj, attrs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_respon": {"var": {"pres": {"?": [[26, "    pres = http_pb2.HTTPResponse()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf.dumps": {"var": {"p": {"None": [[103, "        p = dump_http(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._load_http_client_conn": {"var": {"cc": {"ClientConnection": [[146, "    cc = ClientConnection(None, tuple(), None)"]]}, "cert": {"str": [[137, "    for cert in ['clientcert', 'mitmcert']:"]]}, "k": {"?": [[147, "    for k, v in d.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._dump_http_client_conn": {"var": {"pcc": {"?": [[50, "    pcc = http_pb2.ClientConnection()"]]}, "cert": {"str": [[53, "    for cert in ['clientcert', 'mitmcert']:"]]}, "ext": {"?": [[58, "            ext = pcc.tls_extensions.add()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf.load_htt": {"var": {"p": {"str": [[180, "    for p in ['request', 'response', 'client_conn', 'server_conn', 'error']:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf._load_http_server_conn": {"var": {"sc": {"ServerConnection": [[164, "    sc = ServerConnection(tuple())"]]}, "k": {"?": [[165, "    for k, v in d.items():"]]}, "c": {"Cert": [[160, "        c = Cert.from_pem(o.cert)"]]}, "addr": {"str": [[156, "    for addr in ['address', 'ip_address', 'source_address']:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.io.protobuf": {"func": {"_dump_http_response": {"? -> None / HTTPResponse -> None": [[25, "def _dump_http_response(res: HTTPResponse) -> http_pb2.HTTPResponse:"]]}, "load_http": {"? -> HTTPFlow": [[178, "def load_http(hf: http_pb2.HTTPFlow) -> HTTPFlow:"]]}, "_dump_http_client_conn": {"? -> None": [[49, "def _dump_http_client_conn(cc: ClientConnection) -> http_pb2.ClientConnection:"]]}, "loads": {"(None, str) -> HTTPFlow / (?, str) -> HTTPFlow / (str, str) -> HTTPFlow": [[192, "def loads(b: bytes, typ=\"http\") -> typing.Union[HTTPFlow]:"]]}, "_move_attrs": {"(HTTPRequest, ?, [str]) -> None / (?, ?, ?) -> None / (HTTPResponse, ?, [str]) -> None / (?, dict, [str]) -> None / (?, ?, [str]) -> None / (None, ?, [str]) -> None": [[11, "def _move_attrs(s_obj, d_obj, attrs):"]]}, "_load_http_server_conn": {"None -> None / ? -> None": [[152, "def _load_http_server_conn(o: http_pb2.ServerConnection) -> ServerConnection:"]]}, "dump_http": {"? -> None": [[90, "def dump_http(f: flow.Flow) -> http_pb2.HTTPFlow:"]]}, "_dump_http_error": {"? -> None": [[82, "def _dump_http_error(e: flow.Error) -> http_pb2.HTTPError:"]]}, "_dump_http_server_conn": {"? -> None": [[67, "def _dump_http_server_conn(sc: ServerConnection) -> http_pb2.ServerConnection:"]]}, "_load_http_client_conn": {"? -> None / None -> None": [[133, "def _load_http_client_conn(o: http_pb2.ClientConnection) -> ClientConnection:"]]}, "dumps": {"? -> None": [[99, "def dumps(f: flow.Flow) -> bytes:"]]}, "_load_http_request": {"? -> None / None -> None": [[107, "def _load_http_request(o: http_pb2.HTTPRequest) -> HTTPRequest:"]]}, "_dump_http_request": {"? -> None / HTTPRequest -> None": [[37, "def _dump_http_request(req: HTTPRequest) -> http_pb2.HTTPRequest:"]]}, "_load_http_error": {"? -> Error / None -> Error": [[170, "def _load_http_error(o: http_pb2.HTTPError) -> typing.Optional[flow.Error]:"]]}, "_load_http_response": {"? -> None / None -> None": [[120, "def _load_http_response(o: http_pb2.HTTPResponse) -> HTTPResponse:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contrib/wbxml/InvalidDataException.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contrib.wbxm": {"class": {"InvalidDataException": {"<InvalidDataException>": [[30, "class InvalidDataException(Exception):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/proxy/test_config.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_config.TestProxyConfig.test_invalid_certificat": {"param": {"self": {"TestProxyConfig": [[15, "    def test_invalid_certificate(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_config.TestProxyConfig.test_invalid_certificate": {"var": {"opts": {"Options": [[16, "        opts = options.Options()"]]}}, "param": {"tdata": {"?": [[15, "    def test_invalid_certificate(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_config.TestProxyConfig.test_invalid_confdir": {"var": {"opts": {"Options": [[10, "        opts = options.Options()"]]}}, "param": {"self": {"TestProxyConfig": [[9, "    def test_invalid_confdir(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_config.TestProxyConfig.test_cannot_set_both_allow_and_filter_option": {"var": {"opts": {"Options": [[22, "        opts = options.Options()"]]}}, "param": {"self": {"TestProxyConfig": [[21, "    def test_cannot_set_both_allow_and_filter_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_config.TestProxyConfig": {"func": {"test_invalid_confdir": {"TestProxyConfig -> None": [[9, "    def test_invalid_confdir(self):"]]}, "test_invalid_certificate": {"(TestProxyConfig, ?) -> None": [[15, "    def test_invalid_certificate(self, tdata):"]]}, "test_cannot_set_both_allow_and_filter_options": {"TestProxyConfig -> None": [[21, "    def test_cannot_set_both_allow_and_filter_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.test_c": {"class": {"TestProxyConfig": {"<TestProxyConfig>": [[8, "class TestProxyConfig:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/wsgi-flask-app.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.wsgi-flask-app": {"var": {"addons": {"[WSGIApp]": [[19, "addons = ["]]}}, "func": {"hello_world": {"() -> str": [[15, "def hello_world() -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.wsgi-flask-": {"var": {"app": {"?": [[11, "app = Flask(\"proxapp\")"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/json.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.json.format_j": {"var": {"rest_of_last_line": {"?": [[23, "            rest_of_last_line, chunk = chunk.split(\"\\n\", maxsplit=1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.json.ViewJSON.__call__": {"var": {"data": {"object": [[48, "        data = parse_json(data)"]]}}, "param": {"self": {"ViewJSON": [[47, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[47, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.json.ViewJSON": {"var": {"content_types": {"[str]": [[41, "    content_types = ["]]}, "name": {"str": [[40, "    name = \"JSON\""]]}}, "func": {"__call__": {"(ViewJSON, ?) -> (str, None)": [[47, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentview": {"func": {"format_json": {"object -> None / dict -> None / ? -> None": [[18, "def format_json(data: typing.Any) -> typing.Iterator[base.TViewLine]:"]]}, "parse_json": {"str -> object / ? -> object": [[11, "def parse_json(s: bytes) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.json": {"var": {"PARSE_ERROR": {"object": [[8, "PARSE_ERROR = object()"]]}}, "class": {"ViewJSON": {"<ViewJSON>": [[39, "class ViewJSON(base.View):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.json.format_js": {"var": {"encoder": {"?": [[19, "    encoder = json.JSONEncoder(indent=4, sort_keys=True, ensure_ascii=False)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.json.format_jso": {"var": {"current_line": {"{[(str, ?)] | [?]}": [[27, "            current_line = []"]]}, "chunk": {"?": [[21, "    for chunk in encoder.iterencode(data):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/events.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events.Events.don": {"param": {"self": {"Events": [[48, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events.Ev": {"func": {"clientdisconnect": {"(Events, ?) -> None": [[18, "    def clientdisconnect(self, layer: mitmproxy.proxy.protocol.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addo": {"class": {"Events": {"<Events>": [[10, "class Events:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events.Events": {"func": {"load": {"(Events, ?) -> None": [[58, "    def load(self, entry: mitmproxy.addonmanager.Loader):"]]}, "log": {"(Events, ?) -> None": [[65, "    def log(self, entry: mitmproxy.log.LogEntry):"]]}, "next_layer": {"(Events, ?) -> None": [[34, "    def next_layer(self, layer: mitmproxy.proxy.protocol.Layer):"]]}, "update": {"(Events, ?) -> None": [[79, "    def update(self, flows: typing.Sequence[mitmproxy.flow.Flow]):"]]}, "running": {"Events -> None": [[72, "    def running(self):"]]}, "done": {"Events -> None": [[48, "    def done(self):"]]}, "clientconnect": {"(Events, ?) -> None": [[12, "    def clientconnect(self, layer: mitmproxy.proxy.protocol.Layer):"]]}, "configure": {"(Events, ?) -> None": [[41, "    def configure(self, updated: typing.Set[str]):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events.Events.running": {"param": {"self": {"Events": [[72, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events.E": {"func": {"serverconnect": {"(Events, ?) -> None": [[23, "    def serverconnect(self, conn: mitmproxy.connections.ServerConnection):"]]}, "serverdisconnect": {"(Events, ?) -> None": [[29, "    def serverdisconnect(self, conn: mitmproxy.connections.ServerConnection):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_multipart.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_multipart.test_view_multipart": {"var": {"h": {"Headers": [[15, "    h = http.Headers(content_type=\"multipart/form-data; boundary=AaB03x\")"], [18, "    h = http.Headers()"], [21, "    h = http.Headers(content_type=\"multipart/form-data\")"], [24, "    h = http.Headers(content_type=\"unparseable\")"]]}, "v": {"str": [[8, "    v = b\"\"\""]]}, "view": {"?": [[7, "    view = full_eval(multipart.ViewMultipart())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_multipart": {"() -> None": [[6, "def test_view_multipart():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/http/encoding.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.htt": {"func": {"encode_gzip": {"None -> None / str -> None / ? -> None": [[126, "def encode_gzip(content: bytes) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.identity": {"param": {"content": {"{? -> ? | str}": [[111, "def identity(content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encodin": {"func": {"decode_gzip": {"None -> str / {? -> ? | str} -> str / str -> str / ? -> ? -> str / ? -> str": [[119, "def decode_gzip(content: bytes) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.encode_gzip": {"var": {"gf": {"?": [[128, "    gf = gzip.GzipFile(fileobj=s, mode='wb')"]]}, "s": {"?": [[127, "    s = BytesIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding": {"var": {"decoded": {"{? -> ? | None | str}": [[53, "            decoded = custom_decode[encoding](encoded)"]], "?": [[55, "            decoded = codecs.decode(encoded, encoding, errors)"]]}, "__all__": {"[str]": [[202, "__all__ = [\"encode\", \"decode\"]"]]}, "CachedDecode": {"<(namedtuple)>": [[21, "CachedDecode = collections.namedtuple("]]}, "encoded": {"{? -> ? | str}": [[28, "    encoded: Optional[bytes], encoding: str, errors: str='strict'"]], "{None | str}": [[94, "            encoded = custom_encode[encoding](decoded)"]], "?": [[96, "            encoded = codecs.encode(decoded, encoding, errors)"]]}, "custom_encode": {"dict": [[193, "custom_encode = {"]]}, "_cache": {"(namedtuple)": [[24, "_cache = CachedDecode(None, None, None, None)"]]}, "custom_decode": {"dict": [[185, "custom_decode = {"]]}}, "func": {"decode_deflate": {"None -> str / {? -> ? | str} -> str / str -> str / ? -> ? -> str / ? -> str": [[161, "def decode_deflate(content: bytes) -> bytes:"]]}, "encode_brotli": {"None -> ? / str -> ? / ? -> ?": [[140, "def encode_brotli(content: bytes) -> bytes:"]]}, "decode": {"(None, ?, str) -> str / (?, ?, str) -> str / (? -> ?, ?, str) -> {? -> ? | str} / (str, str, str) -> str / ({? -> ? | str}, ?, str) -> {? -> ? | str} / ({? -> ? | str}, str, str) -> {? -> ? | str} / (str, ?, str) -> str": [[27, "def decode("]]}, "encode_deflate": {"None -> str / str -> str / ? -> str": [[178, "def encode_deflate(content: bytes) -> bytes:"]]}, "decode_zstd": {"None -> str / {? -> ? | str} -> str / str -> str / ? -> ? -> str / ? -> str": [[144, "def decode_zstd(content: bytes) -> bytes:"]]}, "encode": {"(None, ?, str) -> str / (?, ?, str) -> str / (?, str, str) -> str / (str, str, str) -> str / (str, ?, str) -> str": [[70, "def encode(decoded: Optional[str], encoding: str, errors: str='strict') -> Optional[AnyStr]:"]]}, "decode_brotli": {"None -> str / {? -> ? | str} -> str / str -> str / ? -> ? -> str / ? -> str": [[134, "def decode_brotli(content: bytes) -> bytes:"]]}, "identity": {"None -> None / {? -> ? | str} -> {? -> ? | str} / str -> str / ? -> ? -> ? -> ? / ? -> None": [[111, "def identity(content):"]]}, "encode_zstd": {"None -> None / str -> None / ? -> None": [[156, "def encode_zstd(content: bytes) -> bytes:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.enco": {"var": {"cached": {"bool": [[84, "    cached = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.encode": {"var": {"zstd_ctx": {"?": [[157, "    zstd_ctx = zstd.ZstdCompressor()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.decode_gzip": {"var": {"gfile": {"?": [[122, "    gfile = gzip.GzipFile(fileobj=BytesIO(content))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.deco": {"var": {"cached": {"bool": [[43, "    cached = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.http.encoding.decode": {"var": {"zstd_ctx": {"?": [[147, "    zstd_ctx = zstd.ZstdDecompressor()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_proxyauth.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_authenticate": {"var": {"up": {"ProxyAuth": [[134, "        up = proxyauth.ProxyAuth()"]]}, "f": {"?": [[138, "            f = tflow.tflow()"], [143, "            f = tflow.tflow()"], [151, "            f = tflow.tflow()"], [157, "            f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAu": {"func": {"test_handlers": {"TestProxyAuth -> None": [[223, "    def test_handlers(self):"]]}, "test_check": {"(TestProxyAuth, ?) -> None": [[75, "    def test_check(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_authenticat": {"param": {"self": {"TestProxyAuth": [[133, "    def test_authenticate(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_which_auth_header": {"var": {"up": {"ProxyAuth": [[60, "        up = proxyauth.ProxyAuth()"]]}}, "param": {"expected": {"?": [[59, "    def test_which_auth_header(self, is_proxy_auth, expected):"]]}, "self": {"TestProxyAuth": [[59, "    def test_which_auth_header(self, is_proxy_auth, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_auth_required_respon": {"var": {"resp": {"HTTPResponse": [[71, "            resp = up.auth_required_response()"]]}}, "param": {"self": {"TestProxyAuth": [[68, "    def test_auth_required_response(self, is_proxy_auth, expected_status_code, expected_header):"]]}, "expected_status_code": {"?": [[68, "    def test_auth_required_response(self, is_proxy_auth, expected_status_code, expected_header):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestParseHttpBasicA": {"func": {"test_parse_http_basic_auth": {"TestParseHttpBasicAuth -> None": [[36, "    def test_parse_http_basic_auth(self):"]]}, "test_parse_http_basic_auth_error": {"(TestParseHttpBasicAuth, ?) -> None": [[32, "    def test_parse_http_basic_auth_error(self, input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestParseHttpBasicAuth.test_parse_http_basic_auth_error": {"param": {"input": {"?": [[32, "    def test_parse_http_basic_auth_error(self, input):"]]}, "self": {"TestParseHttpBasicAuth": [[32, "    def test_parse_http_basic_auth_error(self, input):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_handlers": {"var": {"f2": {"?": [[247, "            f2 = tflow.tflow(client_conn=f.client_conn)"]]}, "up": {"ProxyAuth": [[224, "        up = proxyauth.ProxyAuth()"]]}, "f": {"?": [[228, "            f = tflow.tflow()"], [233, "            f = tflow.tflow()"], [239, "            f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_auth_required_response": {"var": {"up": {"ProxyAuth": [[69, "        up = proxyauth.ProxyAuth()"]]}}, "param": {"is_proxy_auth": {"?": [[68, "    def test_auth_required_response(self, is_proxy_auth, expected_status_code, expected_header):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_configure": {"var": {"up": {"ProxyAuth": [[166, "        up = proxyauth.ProxyAuth()"]]}}, "param": {"tdata": {"?": [[165, "    def test_configure(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyA": {"func": {"test_auth_required_response": {"(TestProxyAuth, ?, ?, ?) -> None": [[68, "    def test_auth_required_response(self, is_proxy_auth, expected_status_code, expected_header):"]]}, "test_authenticate": {"TestProxyAuth -> None": [[133, "    def test_authenticate(self):"]]}, "test_which_auth_header": {"(TestProxyAuth, ?, ?) -> None": [[59, "    def test_which_auth_header(self, is_proxy_auth, expected):"]]}, "test_is_proxy_auth": {"(TestProxyAuth, ?, ?) -> None": [[49, "    def test_is_proxy_auth(self, mode, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_check": {"var": {"up": {"ProxyAuth": [[76, "        up = proxyauth.ProxyAuth()"]]}, "f": {"?": [[79, "            f = tflow.tflow()"]]}}, "param": {"tdata": {"?": [[75, "    def test_check(self, tdata):"]]}, "self": {"TestProxyAuth": [[75, "    def test_check(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestMkauth.test_mkaut": {"param": {"scheme": {"?": [[21, "    def test_mkauth(self, scheme, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestMkauth.test_mkauth_schem": {"param": {"self": {"TestMkauth": [[13, "    def test_mkauth_scheme(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestMkauth.test_mkauth": {"param": {"expected": {"?": [[21, "    def test_mkauth(self, scheme, expected):"]]}, "self": {"TestMkauth": [[21, "    def test_mkauth(self, scheme, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestM": {"func": {"test_mkauth": {"(TestMkauth, ?, ?) -> None": [[21, "    def test_mkauth(self, scheme, expected):"]]}, "test_mkauth_scheme": {"TestMkauth -> None": [[13, "    def test_mkauth_scheme(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxy": {"class": {"TestMkauth": {"<TestMkauth>": [[12, "class TestMkauth:"]]}, "TestParseHttpBasicAuth": {"<TestParseHttpBasicAuth>": [[25, "class TestParseHttpBasicAuth:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestParseHttpBasicAuth.test_parse_http_basic_auth": {"var": {"input": {"str": [[37, "        input = proxyauth.mkauth(\"test\", \"test\")"]]}}, "param": {"self": {"TestParseHttpBasicAuth": [[36, "    def test_parse_http_basic_auth(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_auth_required_respons": {"param": {"expected_header": {"?": [[68, "    def test_auth_required_response(self, is_proxy_auth, expected_status_code, expected_header):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_configur": {"param": {"self": {"TestProxyAuth": [[165, "    def test_configure(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_which_auth_heade": {"param": {"is_proxy_auth": {"?": [[59, "    def test_which_auth_header(self, is_proxy_auth, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_is_proxy_auth": {"var": {"up": {"ProxyAuth": [[50, "        up = proxyauth.ProxyAuth()"]]}}, "param": {"expected": {"?": [[49, "    def test_is_proxy_auth(self, mode, expected):"]]}, "self": {"TestProxyAuth": [[49, "    def test_is_proxy_auth(self, mode, expected):"]]}, "mode": {"?": [[49, "    def test_is_proxy_auth(self, mode, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxya": {"class": {"TestProxyAuth": {"<TestProxyAuth>": [[41, "class TestProxyAuth:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth": {"func": {"test_configure": {"(TestProxyAuth, ?) -> None": [[165, "    def test_configure(self, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_proxyauth.TestProxyAuth.test_handler": {"param": {"self": {"TestProxyAuth": [[223, "    def test_handlers(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/onboardingapp/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboardinga": {"func": {"pem": {"() -> (str, dict)": [[18, "def pem():"]]}, "p12": {"() -> (str, dict)": [[23, "def p12():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboardingapp.read_cer": {"param": {"ext": {"str": [[27, "def read_cert(ext, content_type):"]]}, "content_type": {"str": [[27, "def read_cert(ext, content_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboardingapp.read_cert": {"var": {"p": {"str": [[29, "    p = os.path.join(app.config[\"CONFDIR\"], filename)"], [30, "    p = os.path.expanduser(p)"]]}, "filename": {"?": [[28, "    filename = CONF_BASENAME + f\"-ca-cert.{ext}\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboarding": {"var": {"app": {"?": [[7, "app = Flask(__name__)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboardingapp": {"func": {"index": {"() -> ?": [[13, "def index():"]]}, "read_cert": {"(?, ?) -> (str, dict) / (str, str) -> (str, dict)": [[27, "def read_cert(ext, content_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.onboardingapp.read_": {"var": {"cert": {"str": [[32, "        cert = f.read()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/utils.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.utils.daemonize": {"var": {"so": {"file": [[44, "    so = open(stdout, 'a+b')"]]}, "si": {"file": [[43, "    si = open(stdin, 'rb')"]]}, "pid": {"{file | int}": [[27, "        pid = os.fork()"], [37, "        pid = os.fork()"]]}}, "param": {"stdin": {"str": [[25, "def daemonize(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):  # pragma: no cover"]]}, "stdout": {"str": [[25, "def daemonize(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.utils.MemBool": {"func": {"__init__": {"? -> ?": [[13, "    def __init__(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.utils.MemBoo": {"func": {"__call__": {"(MemBool, ?) -> bool": [[16, "    def __call__(self, v: bool) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.utils": {"var": {"data": {"Data": [[22, "data = mdata.Data(__name__)"]]}}, "class": {"MemBool": {"<MemBool>": [[7, "class MemBool:"]]}}, "func": {"daemonize": {"(str, str, str) -> ?": [[25, "def daemonize(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.utils.MemBool.__init__": {"param": {"self": {"MemBool": [[13, "    def __init__(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.utils.daemoniz": {"var": {"se": {"file": [[45, "    se = open(stderr, 'a+b', 0)"]]}}, "param": {"stderr": {"str": [[25, "def daemonize(stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):  # pragma: no cover"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/proxy/protocol/test_http1.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestHeadContentLength.test_head_content_length": {"var": {"p": {"?": [[77, "        p = self.pathoc()"]]}, "resp": {"?": [[79, "            resp = p.request("]]}}, "param": {"self": {"TestHeadContentLength": [[76, "    def test_head_content_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming": {"var": {"p": {"?": [[103, "        p = self.pathoc()"]]}, "r": {"?": [[107, "                r = p.request(\"post:'%s/p/200:b@10000'\" % self.server.urlbase)"]]}}, "param": {"self": {"TestStreaming": [[88, "    def test_streaming(self, streaming):"]]}}, "func": {"assert_write": {"(?, ?) -> None": [[97, "        def assert_write(self, v):"]]}}, "class": {"Stream": {"<Stream>": [[90, "        class Stream:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestHTTPFlow": {"func": {"test_repr": {"TestHTTPFlow -> None": [[13, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestExpectHeader.test_simpl": {"var": {"resp": {"Response": [[67, "        resp = http1.read_response(client.rfile, treq())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestProxyMisconfiguration.test_absolute_request": {"var": {"p": {"?": [[39, "        p = self.pathoc()"]]}, "r": {"?": [[41, "            r = p.request(\"get:'http://localhost:%d/p/200'\" % self.server.port)"]]}}, "param": {"self": {"TestProxyMisconfiguration": [[38, "    def test_absolute_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.Stream.responseheaders": {"param": {"f": {"?": [[94, "            def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestProxyMisconfiguration": {"func": {"test_absolute_request": {"TestProxyMisconfiguration -> None": [[38, "    def test_absolute_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.Stream.requestheader": {"param": {"self": {"Stream": [[91, "            def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.Stream.requestheaders": {"param": {"f": {"?": [[91, "            def requestheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.Stream": {"func": {"requestheaders": {"(Stream, ?) -> None": [[91, "            def requestheaders(self, f):"]]}, "responseheaders": {"(Stream, ?) -> None": [[94, "            def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.Stream.responseheader": {"param": {"self": {"Stream": [[94, "            def responseheaders(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestInvalidRequests.test_double_connect": {"var": {"p": {"?": [[22, "        p = self.pathoc()"]]}, "r": {"?": [[24, "            r = p.request(\"connect:'%s:%s'\" % (\"127.0.0.1\", self.server2.port))"]]}}, "param": {"self": {"TestInvalidRequests": [[21, "    def test_double_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestS": {"func": {"test_streaming": {"(TestStreaming, ?) -> None": [[88, "    def test_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestHeadContentL": {"func": {"test_head_content_length": {"TestHeadContentLength -> None": [[76, "    def test_head_content_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_": {"param": {"streaming": {"?": [[88, "    def test_streaming(self, streaming):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestInvalidRequests.test_relative_request": {"var": {"p": {"?": [[29, "        p = self.pathoc_raw()"]]}, "r": {"?": [[31, "            r = p.request(\"get:/p/200\")"]]}}, "param": {"self": {"TestInvalidRequests": [[28, "    def test_relative_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.assert_writ": {"param": {"self": {"?": [[97, "        def assert_write(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestInvalidR": {"func": {"test_relative_request": {"TestInvalidRequests -> None": [[28, "    def test_relative_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestInvalidRequest": {"var": {"ssl": {"bool": [[19, "    ssl = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestInvalidReq": {"func": {"test_double_connect": {"TestInvalidRequests -> None": [[21, "    def test_double_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestExpectHeader.test_simp": {"var": {"client": {"TCPClient": [[49, "        client = TCPClient((\"127.0.0.1\", self.proxy.port))"]]}}, "param": {"self": {"TestExpectHeader": [[48, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestExpectHeader": {"func": {"test_simple": {"TestExpectHeader -> None": [[48, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1": {"class": {"TestExpectHeader": {"<TestExpectHeader>": [[46, "class TestExpectHeader(tservers.HTTPProxyTest):"]]}, "TestHTTPFlow": {"<TestHTTPFlow>": [[11, "class TestHTTPFlow:"]]}, "TestStreaming": {"<TestStreaming>": [[85, "class TestStreaming(tservers.HTTPProxyTest):"]]}, "TestInvalidRequests": {"<TestInvalidRequests>": [[18, "class TestInvalidRequests(tservers.HTTPProxyTest):"]]}, "TestHeadContentLength": {"<TestHeadContentLength>": [[74, "class TestHeadContentLength(tservers.HTTPProxyTest):"]]}, "TestProxyMisconfiguration": {"<TestProxyMisconfiguration>": [[36, "class TestProxyMisconfiguration(tservers.TransparentProxyTest):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestStreaming.test_streaming.assert_write": {"param": {"v": {"?": [[97, "        def assert_write(self, v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.proxy.protocol.test_http1.TestHTTPFlow.test_repr": {"var": {"f": {"?": [[14, "        f = tflow.tflow(resp=True, err=True)"]]}}, "param": {"self": {"TestHTTPFlow": [[13, "    def test_repr(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/pathod/tservers.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests._ge": {"param": {"path": {"?": [[72, "    def _getpath(self, path, params=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.getpath": {"var": {"logfp": {"?": [[86, "        logfp = io.StringIO()"]]}, "c": {"Pathoc": [[87, "        c = pathoc.Pathoc("]]}, "resp": {"Response": [[95, "            resp = c.request(\"get:%s\" % path)"]]}}, "param": {"self": {"DaemonTests": [[85, "    def getpath(self, path, params=None):"]]}, "params": {"None": [[85, "    def getpath(self, path, params=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests._getpath": {"var": {"resp": {"?": [[74, "        resp = requests.get("]]}}, "param": {"self": {"DaemonTests": [[72, "    def _getpath(self, path, params=None):"]]}, "params": {"None": [[72, "    def _getpath(self, path, params=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers": {"var": {"cdata": {"Data": [[20, "cdata = data.Data(__name__)"]]}}, "func": {"treader": {"? -> Reader": [[23, "def treader(bytes):"]]}, "render": {"(?, Settings) -> None": [[146, "def render(r, settings=language.Settings()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTest": {"var": {"ssl": {"bool": [[33, "    ssl = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTe": {"var": {"ssloptions": {"None": [[36, "    ssloptions = None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.patho": {"var": {"c": {"Pathoc": [[126, "        c = pathoc.Pathoc("]]}, "specs": {"?": [[113, "        specs,"]]}}, "param": {"specs": {"?": [[119, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonT": {"func": {"setup_class": {"<DaemonTests> -> None": [[41, "    def setup_class(cls):"]]}, "teardown_class": {"<DaemonTests> -> None": [[64, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tserver": {"class": {"DaemonTests": {"<DaemonTests>": [[31, "class DaemonTests:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.teardown_cla": {"param": {"cls": {"<DaemonTests>": [[64, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.get": {"var": {"logfp": {"?": [[99, "        logfp = io.StringIO()"]]}, "c": {"Pathoc": [[100, "        c = pathoc.Pathoc("]]}, "resp": {"Response": [[106, "            resp = c.request("]]}}, "param": {"self": {"DaemonTests": [[98, "    def get(self, spec):"]]}, "spec": {"?": [[98, "    def get(self, spec):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.rende": {"var": {"r": {"?": [[147, "    r = r.resolve(settings)"]]}}, "param": {"r": {"?": [[146, "def render(r, settings=language.Settings()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests._getpat": {"var": {"scheme": {"str": [[73, "        scheme = \"https\" if self.ssl else \"http\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.teardown": {"param": {"self": {"DaemonTests": [[68, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests": {"var": {"hexdump": {"bool": [[35, "    hexdump = False"]]}, "explain": {"bool": [[38, "    explain = True"]]}, "nocraft": {"bool": [[37, "    nocraft = False"]]}, "timeout": {"None": [[34, "    timeout = None"]]}, "nohang": {"bool": [[32, "    nohang = False"]]}}, "func": {"teardown": {"DaemonTests -> None": [[68, "    def teardown(self):"]]}, "_getpath": {"(DaemonTests, ?, None) -> None": [[72, "    def _getpath(self, path, params=None):"]]}, "pathoc": {"(DaemonTests, ?, None, None, None, None, bool) -> ([Response], ?)": [[111, "    def pathoc("]]}, "getpath": {"(DaemonTests, ?, None) -> Response": [[85, "    def getpath(self, path, params=None):"]]}, "get": {"(DaemonTests, ?) -> Response": [[98, "    def get(self, spec):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.ge": {"var": {"path": {"str": [[94, "                path = path + \"?\" + urllib.parse.urlencode(params)"]]}}, "param": {"path": {"?": [[85, "    def getpath(self, path, params=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.treader": {"var": {"fp": {"?": [[27, "    fp = io.BytesIO(bytes)"]]}}, "param": {"bytes": {"?": [[23, "def treader(bytes):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.pathoc": {"var": {"i": {"?": [[136, "            for i in specs:"]]}, "ws_read_limit": {"None": [[117, "        ws_read_limit=None,"]]}, "logfp": {"?": [[125, "        logfp = io.StringIO()"]]}, "self": {"DaemonTests": [[112, "        self,"]]}, "ret": {"[Response]": [[135, "            ret = []"]]}, "ssl": {"None": [[116, "        ssl=None,"]], "bool": [[124, "            ssl = self.ssl"]]}, "frm": {"?": [[140, "            for frm in c.wait():"]]}, "timeout": {"None": [[114, "        timeout=None,"]]}, "resp": {"Response": [[137, "                resp = c.request(i)"]]}, "use_http2": {"bool": [[118, "        use_http2=False,"]]}}, "param": {"ws_read_limit": {"None": [[119, "    ):"]]}, "ssl": {"None": [[119, "    ):"]]}, "self": {"DaemonTests": [[119, "    ):"]]}, "timeout": {"None": [[119, "    ):"]]}, "use_http2": {"bool": [[119, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.path": {"var": {"connect_to": {"None": [[115, "        connect_to=None,"]]}}, "param": {"connect_to": {"None": [[119, "    ):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.render": {"var": {"s": {"?": [[148, "    s = io.BytesIO()"]]}}, "param": {"settings": {"Settings": [[146, "def render(r, settings=language.Settings()):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.pathod.tservers.DaemonTests.setup_cla": {"var": {"so": {"?": [[45, "        so = pathod.SSLOptions(**opts)"]]}, "opts": {"dict": [[42, "        opts = cls.ssloptions or {}"]]}}, "param": {"cls": {"<DaemonTests>": [[41, "    def setup_class(cls):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/block_dns_over_https.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._has_dns_messag": {"var": {"doh_content_types": {"[str]": [[100, "    doh_content_types = ['application/dns-message']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._requested_hostname_is_in_doh_blocklist": {"var": {"ip": {"?": [[167, "    ip = flow.server_conn.address"]]}}, "param": {"flow": {"?": [[157, "def _requested_hostname_is_in_doh_blocklist(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_ov": {"func": {"_request_has_doh_looking_path": {"? -> bool": [[142, "def _request_has_doh_looking_path(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._request_has_doh_looking": {"var": {"doh_paths": {"[str]": [[150, "    doh_paths = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._request_is_dns_json": {"var": {"path": {"?": [[136, "    path = flow.request.path.split('?')[0]"]]}}, "param": {"flow": {"?": [[117, "def _request_is_dns_json(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._request_has_doh_looking_": {"var": {"path": {"?": [[153, "    path = flow.request.path.split('?')[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_htt": {"var": {"doh_ips": {"?": [[90, "doh_ips = set(doh_ips)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over": {"func": {"_has_dns_message_content_type": {"? -> None": [[93, "def _has_dns_message_content_type(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._requested_hostname_is_in_doh_blockli": {"var": {"hostname": {"?": [[166, "    hostname = flow.request.host"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._request_has_doh_looking_path": {"param": {"flow": {"?": [[142, "def _request_has_doh_looking_path(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._request_has_dns_query_string": {"param": {"flow": {"?": [[107, "def _request_has_dns_query_string(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https._has_dns_message_content_type": {"param": {"flow": {"?": [[93, "def _has_dns_message_content_type(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_http": {"var": {"doh_hostnames": {"?": [[86, "doh_hostnames, doh_ips = default_blocklist['hostnames'], default_blocklist['ips']"], [89, "doh_hostnames = set(doh_hostnames)"]]}, "doh_request_detection_checks": {"[{? -> None | ? -> None | ? -> bool | ? -> bool | ? -> bool}]": [[171, "doh_request_detection_checks = ["]]}}, "func": {"request": {"? -> None": [[180, "def request(flow):"]]}, "_requested_hostname_is_in_doh_blocklist": {"? -> bool": [[157, "def _requested_hostname_is_in_doh_blocklist(flow):"]]}, "_request_is_dns_json": {"? -> None": [[117, "def _request_is_dns_json(flow):"]]}, "_request_has_dns_query_string": {"? -> bool": [[107, "def _request_has_dns_query_string(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.block_dns_over_https.request": {"var": {"is_doh": {"{None | bool}": [[182, "        is_doh = check(flow)"]]}, "check": {"{? -> None | ? -> None | ? -> bool | ? -> bool | ? -> bool}": [[181, "    for check in doh_request_detection_checks:"]]}}, "param": {"flow": {"?": [[180, "def request(flow):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_connections.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnectionTLS.test_t": {"param": {"self": {"TestServerConnectionTLS": [[239, "    def test_tls(self, client_certs, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_send": {"var": {"c": {"?": [[86, "        c = tflow.tserver_conn()"]]}}, "param": {"self": {"TestServerConnection": [[85, "    def test_send(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_repr": {"var": {"c": {"?": [[96, "        c = tflow.tserver_conn()"]]}}, "param": {"self": {"TestServerConnection": [[95, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnectionTLS.test_tls_with_": {"param": {"sni": {"?": [[187, "    def test_tls_with_sni(self, sni, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnec": {"func": {"test_terminate_error": {"TestServerConnection -> None": [[150, "    def test_terminate_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_sni": {"var": {"c": {"ServerConnection": [[161, "        c = connections.ServerConnection(('', 1234))"]]}}, "param": {"self": {"TestServerConnection": [[160, "    def test_sni(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnectionTLS.test_tls_with_sni.client_run": {"var": {"s": {"?": [[199, "            s = socket.create_connection(address)"], [200, "            s = ctx.wrap_socket(s, server_hostname=sni)"]]}, "ctx": {"?": [[196, "            ctx = ssl.create_default_context()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_state": {"var": {"c2": {"?": [[167, "        c2 = c.copy()"]]}, "c": {"?": [[166, "        c = tflow.tserver_conn()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnectionTLS.handler": {"func": {"handle": {"handler -> None": [[231, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_tls_established_property": {"var": {"c": {"?": [[119, "        c = tflow.tserver_conn()"]]}}, "param": {"self": {"TestServerConnection": [[118, "    def test_tls_established_property(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_stat": {"param": {"self": {"TestServerConnection": [[165, "    def test_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnectionTLS.test_tls_with_sni": {"var": {"raw_key": {"str": [[213, "            raw_key = f.read()"]]}, "c": {"ClientConnection": [[209, "        c = connections.ClientConnection(connection, client_address, None)"]]}, "sock": {"?": [[189, "        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)"]]}, "cert": {"?": [[211, "        cert = tdata.path(\"mitmproxy/net/data/server.crt\")"]]}, "key": {"?": [[214, "        key = OpenSSL.crypto.load_privatekey("]]}, "address": {"?": [[193, "        address = sock.getsockname()"]], "(str, int)": [[188, "        address = ('127.0.0.1', 0)"]]}}, "param": {"tdata": {"?": [[187, "    def test_tls_with_sni(self, sni, tdata):"]]}, "self": {"TestClientConnectionTLS": [[187, "    def test_tls_with_sni(self, sni, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_send": {"var": {"c": {"?": [[20, "        c = tflow.tclient_conn()"]]}}, "param": {"self": {"TestClientConnection": [[19, "    def test_send(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnectionTLS.test_tls_with_s": {"var": {"connection": {"?": [[208, "        connection, client_address = sock.accept()"]]}}, "func": {"client_run": {"() -> None": [[195, "        def client_run():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_simple": {"var": {"c": {"ServerConnection": [[133, "        c = connections.ServerConnection((d.IFACE, d.port))"]]}, "d": {"Daemon": [[132, "        d = test.Daemon()"]]}, "f": {"?": [[135, "        f = tflow.tflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_tls_established_property": {"var": {"c": {"?": [[44, "        c = tflow.tclient_conn()"]]}}, "param": {"self": {"TestClientConnection": [[43, "    def test_tls_established_property(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_state": {"var": {"c3": {"?": [[69, "        c3 = c.copy()"]]}, "c2": {"?": [[61, "        c2 = tflow.tclient_conn()"]]}, "c": {"?": [[57, "        c = tflow.tclient_conn()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnectionTLS": {"var": {"ssl": {"bool": [[228, "    ssl = True"]]}, "client_certs": {"?": [[241, "            client_certs = tdata.path(client_certs)"]]}}, "param": {"client_certs": {"?": [[239, "    def test_tls(self, client_certs, tdata):"]]}}, "func": {"test_tls": {"(TestServerConnectionTLS, ?, ?) -> None": [[239, "    def test_tls(self, client_certs, tdata):"]]}}, "class": {"handler": {"<handler>": [[230, "    class handler(tcp.BaseHandler):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_": {"class": {"TestServerConnection": {"<TestServerConnection>": [[83, "class TestServerConnection:"]]}, "TestServerConnectionTLS": {"<TestServerConnectionTLS>": [[227, "class TestServerConnectionTLS(tservers.ServerTestBase):"]]}, "TestClientConnection": {"<TestClientConnection>": [[17, "class TestClientConnection:"]]}, "TestClientConnectionTLS": {"<TestClientConnectionTLS>": [[181, "class TestClientConnectionTLS:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnectionTLS.test_tls": {"var": {"c": {"ServerConnection": [[242, "        c = connections.ServerConnection((\"127.0.0.1\", self.port))"]]}}, "param": {"tdata": {"?": [[239, "    def test_tls(self, client_certs, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection": {"func": {"test_simple": {"TestServerConnection -> None": [[131, "    def test_simple(self):"]]}, "test_state": {"TestServerConnection -> None": [[165, "    def test_state(self):"]]}, "test_make_dummy": {"TestServerConnection -> None": [[127, "    def test_make_dummy(self):"]]}, "test_tls_established_property": {"TestServerConnection -> None": [[118, "    def test_tls_established_property(self):"]]}, "test_repr": {"TestServerConnection -> None": [[95, "    def test_repr(self):"]]}, "test_eq": {"TestServerConnection -> None": [[172, "    def test_eq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection": {"func": {"test_tls_established_property": {"TestClientConnection -> None": [[43, "    def test_tls_established_property(self):"]]}, "test_make_dummy": {"TestClientConnection -> None": [[52, "    def test_make_dummy(self):"]]}, "test_state": {"TestClientConnection -> None": [[56, "    def test_state(self):"]]}, "test_eq": {"TestClientConnection -> None": [[74, "    def test_eq(self):"]]}, "test_repr": {"TestClientConnection -> None": [[29, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnectio": {"func": {"test_send": {"TestClientConnection -> None": [[19, "    def test_send(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnectionTLS.handler.hand": {"param": {"self": {"handler": [[231, "        def handle(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_repr": {"var": {"c": {"?": [[30, "        c = tflow.tclient_conn()"]]}}, "param": {"self": {"TestClientConnection": [[29, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnectio": {"func": {"test_send": {"TestServerConnection -> None": [[85, "    def test_send(self):"]]}, "test_sni": {"TestServerConnection -> None": [[160, "    def test_sni(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_make_dummy": {"var": {"c": {"ServerConnection": [[128, "        c = connections.ServerConnection.make_dummy(('foobar', 1234))"]]}}, "param": {"self": {"TestServerConnection": [[127, "    def test_make_dummy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_eq": {"var": {"c2": {"?": [[76, "        c2 = c.copy()"]]}, "c": {"?": [[75, "        c = tflow.tclient_conn()"]]}}, "param": {"self": {"TestClientConnection": [[74, "    def test_eq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_make_dummy": {"var": {"c": {"ClientConnection": [[53, "        c = connections.ClientConnection.make_dummy(('foobar', 1234))"]]}}, "param": {"self": {"TestClientConnection": [[52, "    def test_make_dummy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_terminate_error": {"var": {"c": {"ServerConnection": [[152, "        c = connections.ServerConnection((d.IFACE, d.port))"]]}, "d": {"Daemon": [[151, "        d = test.Daemon()"]]}}, "param": {"self": {"TestServerConnection": [[150, "    def test_terminate_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_simp": {"param": {"self": {"TestServerConnection": [[131, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestServerConnection.test_eq": {"var": {"c2": {"?": [[174, "        c2 = c.copy()"]]}, "c": {"?": [[173, "        c = tflow.tserver_conn()"]]}}, "param": {"self": {"TestServerConnection": [[172, "    def test_eq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnectionTLS": {"func": {"test_tls_with_sni": {"(TestClientConnectionTLS, ?, ?) -> None": [[187, "    def test_tls_with_sni(self, sni, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_connections.TestClientConnection.test_stat": {"param": {"self": {"TestClientConnection": [[56, "    def test_state(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/command_history.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory": {"var": {"VACUUM_SIZE": {"int": [[10, "    VACUUM_SIZE = 1024"]]}}, "param": {"loader": {"?": [[17, "    def load(self, loader):"]]}}, "func": {"load": {"(CommandHistory, ?) -> None": [[17, "    def load(self, loader):"]]}, "get_prev": {"CommandHistory -> None": [[87, "    def get_prev(self) -> str:"]]}, "configure": {"(CommandHistory, ?) -> None / (CommandHistory, str) -> None": [[32, "    def configure(self, updated):"]]}, "running": {"CommandHistory -> None": [[27, "    def running(self):"]]}, "add_command": {"(CommandHistory, ?) -> None / (CommandHistory, str) -> None": [[45, "    def add_command(self, command: str) -> None:"]]}, "done": {"CommandHistory -> None": [[38, "    def done(self):"]]}, "get_next": {"CommandHistory -> None": [[82, "    def get_next(self) -> str:"]]}, "__init__": {"? -> ?": [[12, "    def __init__(self) -> None:"]]}, "set_filter": {"(CommandHistory, ?) -> None / (CommandHistory, str) -> None": [[72, "    def set_filter(self, prefix: str) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.history_fi": {"param": {"self": {"CommandHistory": [[24, "    def history_file(self) -> pathlib.Path:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_h": {"class": {"CommandHistory": {"<CommandHistory>": [[9, "class CommandHistory:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandH": {"func": {"get_history": {"CommandHistory -> None": [[58, "    def get_history(self) -> typing.Sequence[str]:"]]}, "history_file": {"CommandHistory -> str": [[24, "    def history_file(self) -> pathlib.Path:"]]}, "clear_history": {"CommandHistory -> None": [[63, "    def clear_history(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.configur": {"param": {"self": {"CommandHistory": [[32, "    def configure(self, updated):"]]}, "updated": {"str": [[32, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.get_next": {"param": {"self": {"CommandHistory": [[82, "    def get_next(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.done": {"var": {"history_str": {"str": [[41, "            history_str = \"\\n\".join(self.history[-self.VACUUM_SIZE // 2:]) + \"\\n\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.running": {"param": {"self": {"CommandHistory": [[27, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.get_prev": {"param": {"self": {"CommandHistory": [[87, "    def get_prev(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.__init__": {"param": {"self": {"CommandHistory": [[12, "    def __init__(self) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.load": {"param": {"self": {"CommandHistory": [[17, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.don": {"param": {"self": {"CommandHistory": [[38, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.clear_history": {"param": {"self": {"CommandHistory": [[63, "    def clear_history(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.command_history.CommandHistory.get_history": {"param": {"self": {"CommandHistory": [[58, "    def get_history(self) -> typing.Sequence[str]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/termlog.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termlog.TermLog": {"param": {"loader": {"?": [[17, "    def load(self, loader):"]]}}, "func": {"load": {"(TermLog, ?) -> None": [[17, "    def load(self, loader):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, outfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termlog.TermLog.__init__": {"param": {"outfile": {"None": [[14, "    def __init__(self, outfile=None):"]]}, "self": {"TermLog": [[14, "    def __init__(self, outfile=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termlog.TermLog.load": {"param": {"self": {"TermLog": [[17, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.terml": {"class": {"TermLog": {"<TermLog>": [[13, "class TermLog:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termlog.TermLog.log": {"var": {"outfile": {"None": [[26, "            outfile = self.outfile or realstderr"], [28, "            outfile = self.outfile or realstdout"]]}}, "param": {"self": {"TermLog": [[24, "    def log(self, e):"]]}, "e": {"LogEntry": [[24, "    def log(self, e):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termlog": {"var": {"realstderr": {"?": [[10, "realstderr = sys.stderr"]]}, "realstdout": {"?": [[9, "realstdout = sys.stdout"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termlog.TermL": {"func": {"log": {"(TermLog, LogEntry) -> None / (TermLog, ?) -> None": [[24, "    def log(self, e):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/release/hooks/hook-publicsuffix2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.release.hooks.hook-publicsuffix2": {"var": {"datas": {"?": [[3, "datas = collect_data_files('publicsuffix2')"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_stickyauth.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickyauth.test_configure": {"var": {"r": {"StickyAuth": [[11, "    r = stickyauth.StickyAuth()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickyauth": {"func": {"test_simple": {"() -> None": [[21, "def test_simple():"]]}, "test_configure": {"() -> None": [[10, "def test_configure():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_stickyauth.test_simple": {"var": {"r": {"StickyAuth": [[22, "    r = stickyauth.StickyAuth()"]]}, "f": {"?": [[25, "        f = tflow.tflow(resp=True)"], [31, "        f = tflow.tflow(resp=True)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/http.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_response_head": {"param": {"response": {"?": [[54, "    def send_response_headers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_request_trail": {"param": {"request": {"?": [[23, "    def read_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http": {"var": {"MODE_REQUEST_FORMS": {"dict": [[143, "MODE_REQUEST_FORMS = {"]]}}, "class": {"ConnectServerConnection": {"<ConnectServerConnection>": [[67, "class ConnectServerConnection:"]]}, "HTTPMode": {"<HTTPMode>": [[136, "class HTTPMode(enum.Enum):"]]}}, "func": {"is_ok": {"? -> ? -> bool / ? -> bool": [[132, "def is_ok(status):"]]}, "validate_request_form": {"(?, ?) -> None": [[150, "def validate_request_form(mode, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer._process_flow": {"var": {"msg": {"str": [[278, "                    msg = \"Unexpected CONNECT request.\""]]}, "host_header": {"?": [[335, "            host_header = f.request.host_header"]]}, "layer": {"?": [[470, "                    layer = self.ctx.next_layer(self)"]], "WebSocketLayer": [[468, "                    layer = WebSocketLayer(self, f)"]]}, "request": {"?": [[255, "                request = self.read_request_headers(f)"]]}, "chunks": {"?": [[440, "                chunks = self.read_response_body("], [445, "                    chunks = f.response.stream(chunks)"]]}}, "param": {"self": {"HttpLayer": [[252, "    def _process_flow(self, f):"]]}, "f": {"HTTPFlow": [[252, "    def _process_flow(self, f):"]]}}, "func": {"get_response": {"() -> None": [[356, "                def get_response():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnecti": {"func": {"connected": {"ConnectServerConnection -> ?": [[84, "    def connected(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.send_error_respon": {"param": {"headers": {"None": [[490, "    def send_error_response(self, code, message, headers=None) -> None:"]]}, "self": {"HttpLayer": [[490, "    def send_error_response(self, code, message, headers=None) -> None:"]]}, "message": {"str": [[490, "    def send_error_response(self, code, message, headers=None) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.__ini": {"param": {"connect_request": {"None": [[90, "    def __init__(self, ctx, connect_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.validate_request_for": {"param": {"mode": {"?": [[150, "def validate_request_form(mode, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLay": {"func": {"send_error_response": {"(HttpLayer, ?, ?, None) -> ? / (HttpLayer, int, str, None) -> ?": [[490, "    def send_error_response(self, code, message, headers=None) -> None:"]]}, "handle_regular_connect": {"(HttpLayer, ?) -> ? / (HttpLayer, HTTPFlow) -> ?": [[204, "    def handle_regular_connect(self, f):"]]}, "_process_flow": {"(HttpLayer, ?) -> ? / (HttpLayer, HTTPFlow) -> ?": [[252, "    def _process_flow(self, f):"]]}, "handle_upstream_connect": {"(HttpLayer, HTTPFlow) -> None / (HttpLayer, ?) -> None": [[232, "    def handle_upstream_connect(self, f):"]]}, "establish_server_connection": {"(HttpLayer, ?, ?, str) -> None / (HttpLayer, ?, ?, ?) -> None": [[506, "    def establish_server_connection(self, host: str, port: int, scheme: str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_response_trailer": {"param": {"self": {"_HttpTransmissionLayer": [[36, "    def read_response_trailers(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_request_headers": {"param": {"flow": {"?": [[17, "    def read_request_headers(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_response_body": {"param": {"self": {"_HttpTransmissionLayer": [[32, "    def read_response_body(self, request, response):"]]}, "request": {"?": [[32, "    def read_response_body(self, request, response):"]]}, "response": {"None": [[32, "    def read_response_body(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.__init__": {"param": {"self": {"UpstreamConnectLayer": [[90, "    def __init__(self, ctx, connect_request):"]]}, "ctx": {"HttpLayer": [[90, "    def __init__(self, ctx, connect_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.send_error_respons": {"param": {"code": {"int": [[490, "    def send_error_response(self, code, message, headers=None) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.set_serv": {"param": {"address": {"?": [[124, "    def set_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.set_server": {"param": {"self": {"UpstreamConnectLayer": [[124, "    def set_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnection.__getattr__": {"param": {"item": {"?": [[81, "    def __getattr__(self, item):"]]}, "self": {"ConnectServerConnection": [[81, "    def __getattr__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer": {"func": {"__call__": {"HttpLayer -> None": [[190, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[178, "    def __init__(self, ctx, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.check_close_connection": {"param": {"self": {"_HttpTransmissionLayer": [[63, "    def check_close_connection(self, f):"]]}, "f": {"?": [[63, "    def check_close_connection(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer._send_connect_request": {"var": {"resp": {"?": [[108, "        resp = self.read_response(self.connect_request)"]]}}, "param": {"self": {"UpstreamConnectLayer": [[102, "    def _send_connect_request(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer._process_fl": {"var": {"is_websocket": {"bool": [[457, "                is_websocket = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_request_body": {"param": {"self": {"_HttpTransmissionLayer": [[20, "    def read_request_body(self, request):"]]}, "request": {"?": [[20, "    def read_request_body(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnection.via": {"param": {"self": {"ConnectServerConnection": [[78, "    def via(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpL": {"func": {"change_upstream_proxy_server": {"(HttpLayer, ?) -> None": [[497, "    def change_upstream_proxy_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_respon": {"param": {"self": {"_HttpTransmissionLayer": [[47, "    def send_response(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer": {"func": {"check_close_connection": {"(_HttpTransmissionLayer, ?) -> None": [[63, "    def check_close_connection(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionL": {"func": {"read_request_body": {"(_HttpTransmissionLayer, ?) -> None": [[20, "    def read_request_body(self, request):"]]}, "read_response_body": {"(_HttpTransmissionLayer, ?, ?) -> None / (_HttpTransmissionLayer, ?, None) -> None": [[32, "    def read_response_body(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.establish_server_connection": {"var": {"tls": {"bool": [[507, "        tls = (scheme == \"https\")"]]}, "address": {"(?, ?)": [[511, "            address = (host, port)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.change_upstream_proxy_server": {"param": {"self": {"HttpLayer": [[497, "    def change_upstream_proxy_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.validate_request_fo": {"var": {"err_message": {"?": [[158, "            err_message = textwrap.dedent(("], [166, "            err_message = \"Invalid HTTP request form (expected: %s, got: %s)\" % ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_respon": {"param": {"self": {"_HttpTransmissionLayer": [[39, "    def read_response(self, request):"]]}, "request": {"?": [[39, "    def read_response(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HTTPMod": {"var": {"regular": {"int": [[137, "    regular = 1"]]}, "transparent": {"int": [[138, "    transparent = 2"]]}, "upstream": {"int": [[139, "    upstream = 3"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.__call__": {"var": {"flow": {"HTTPFlow": [[195, "            flow = http.HTTPFlow("]]}}, "param": {"self": {"HttpLayer": [[190, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLa": {"func": {"send_response_body": {"(_HttpTransmissionLayer, ?, [?]) -> None / (_HttpTransmissionLayer, ?, ?) -> None": [[57, "    def send_response_body(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.change_upstream_proxy_server": {"param": {"self": {"UpstreamConnectLayer": [[119, "    def change_upstream_proxy_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_": {"var": {"response": {"None": [[40, "        response = self.read_response_headers()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.vali": {"var": {"allowed_request_forms": {"{(str, str) | str}": [[155, "    allowed_request_forms = MODE_REQUEST_FORMS[mode]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.__call__": {"var": {"layer": {"?": [[99, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"UpstreamConnectLayer": [[98, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnection": {"func": {"via": {"ConnectServerConnection -> ?": [[78, "    def via(self):"]]}, "__getattr__": {"(ConnectServerConnection, ?) -> ?": [[81, "    def __getattr__(self, item):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLay": {"func": {"_send_connect_request": {"UpstreamConnectLayer -> None": [[102, "    def _send_connect_request(self):"]]}, "set_server": {"(UpstreamConnectLayer, ?) -> None": [[124, "    def set_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_response_body": {"param": {"chunks": {"[?]": [[57, "    def send_response_body(self, response, chunks):"]]}, "self": {"_HttpTransmissionLayer": [[57, "    def send_response_body(self, response, chunks):"]]}, "response": {"?": [[57, "    def send_response_body(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnection.connected": {"param": {"self": {"ConnectServerConnection": [[84, "    def connected(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.change_upstream_proxy_serv": {"param": {"address": {"?": [[119, "    def change_upstream_proxy_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnectio": {"func": {"__init__": {"? -> ?": [[73, "    def __init__(self, address, ctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.validate_request_form": {"param": {"request": {"?": [[150, "def validate_request_form(mode, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.handle_upstream_connect": {"var": {"layer": {"UpstreamConnectLayer": [[248, "            layer = UpstreamConnectLayer(self, f.request)"]]}}, "param": {"self": {"HttpLayer": [[232, "    def handle_upstream_connect(self, f):"]]}, "f": {"HTTPFlow": [[232, "    def handle_upstream_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_request": {"param": {"self": {"_HttpTransmissionLayer": [[26, "    def send_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.handle_regular_connect": {"var": {"resp": {"HTTPResponse": [[213, "                resp = http.make_connect_response(f.request.data.http_version)"]], "?": [[211, "                resp = f.response"]]}, "layer": {"?": [[218, "                layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"HttpLayer": [[204, "    def handle_regular_connect(self, f):"]]}, "f": {"HTTPFlow": [[204, "    def handle_regular_connect(self, f):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.change_upstream_proxy_serv": {"param": {"address": {"?": [[497, "    def change_upstream_proxy_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_response_trail": {"param": {"response": {"?": [[60, "    def send_response_trailers(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_response_header": {"param": {"self": {"_HttpTransmissionLayer": [[54, "    def send_response_headers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.h": {"class": {"UpstreamConnectLayer": {"<UpstreamConnectLayer>": [[88, "class UpstreamConnectLayer(base.Layer):"]]}, "_HttpTransmissionLayer": {"<_HttpTransmissionLayer>": [[16, "class _HttpTransmissionLayer(base.Layer):"]]}, "HttpLayer": {"<HttpLayer>": [[172, "class HttpLayer(base.Layer):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_response_header": {"param": {"self": {"_HttpTransmissionLayer": [[29, "    def read_response_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.send_error_": {"var": {"response": {"HTTPResponse": [[492, "            response = http.make_error_response(code, message, headers)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_": {"param": {"request": {"?": [[26, "    def send_request(self, request):"]]}, "response": {"?": [[47, "    def send_response(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLay": {"func": {"send_request": {"(_HttpTransmissionLayer, ?) -> None": [[26, "    def send_request(self, request):"]]}, "read_response_trailers": {"(_HttpTransmissionLayer, ?, ?) -> None / (_HttpTransmissionLayer, ?, None) -> None": [[36, "    def read_response_trailers(self, request, response):"]]}, "read_request_trailers": {"(_HttpTransmissionLayer, ?) -> None": [[23, "    def read_request_trailers(self, request):"]]}, "read_request_headers": {"(_HttpTransmissionLayer, ?) -> None": [[17, "    def read_request_headers(self, flow):"]]}, "send_response_headers": {"(_HttpTransmissionLayer, ?) -> None": [[54, "    def send_response_headers(self, response):"]]}, "send_response_trailers": {"(_HttpTransmissionLayer, ?, ?) -> None": [[60, "    def send_response_trailers(self, response, chunks):"]]}, "read_response_headers": {"_HttpTransmissionLayer -> None": [[29, "    def read_response_headers(self):"]]}, "read_response": {"(_HttpTransmissionLayer, ?) -> None": [[39, "    def read_response(self, request):"]]}, "send_response": {"(_HttpTransmissionLayer, ?) -> None": [[47, "    def send_response(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer.connect": {"param": {"self": {"UpstreamConnectLayer": [[112, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.is_ok": {"param": {"status": {"? -> ?": [[132, "def is_ok(status):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectL": {"func": {"change_upstream_proxy_server": {"(UpstreamConnectLayer, ?) -> None": [[119, "    def change_upstream_proxy_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.send_response_trailer": {"param": {"chunks": {"?": [[60, "    def send_response_trailers(self, response, chunks):"]]}, "self": {"_HttpTransmissionLayer": [[60, "    def send_response_trailers(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_request_trailer": {"param": {"self": {"_HttpTransmissionLayer": [[23, "    def read_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_response_trail": {"param": {"request": {"?": [[36, "    def read_response_trailers(self, request, response):"]]}, "response": {"None": [[36, "    def read_response_trailers(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http._HttpTransmissionLayer.read_request_header": {"param": {"self": {"_HttpTransmissionLayer": [[17, "    def read_request_headers(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.ConnectServerConnection.__init__": {"param": {"self": {"ConnectServerConnection": [[73, "    def __init__(self, address, ctx):"]]}, "ctx": {"?": [[73, "    def __init__(self, address, ctx):"]]}, "address": {"(?, ?)": [[73, "    def __init__(self, address, ctx):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer._process_flow.get_response": {"var": {"chunks": {"?": [[359, "                        chunks = self.read_request_body(f.request)"], [361, "                            chunks = f.request.stream(chunks)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.HttpLayer.__init__": {"param": {"self": {"HttpLayer": [[178, "    def __init__(self, ctx, mode):"]]}, "ctx": {"{Http1Layer | Http2SingleStreamLayer}": [[178, "    def __init__(self, ctx, mode):"]]}, "mode": {"?": [[178, "    def __init__(self, ctx, mode):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http.UpstreamConnectLayer": {"func": {"__call__": {"UpstreamConnectLayer -> None": [[98, "    def __call__(self):"]]}, "connect": {"UpstreamConnectLayer -> None": [[112, "    def connect(self):"]]}, "__init__": {"? -> ?": [[90, "    def __init__(self, ctx, connect_request):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/language/exceptions.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptions.ParseExceptio": {"func": {"__init__": {"? -> ?": [[11, "    def __init__(self, msg, s, col):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptions.ParseException.__init__": {"param": {"msg": {"?": [[11, "    def __init__(self, msg, s, col):"]]}, "self": {"ParseException": [[11, "    def __init__(self, msg, s, col):"]]}, "s": {"?": [[11, "    def __init__(self, msg, s, col):"]]}, "col": {"?": [[11, "    def __init__(self, msg, s, col):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptions": {"class": {"RenderError": {"<RenderError>": [[1, "class RenderError(Exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptions.ParseException.__str__": {"param": {"self": {"ParseException": [[20, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.languag": {"class": {"ParseException": {"<ParseException>": [[9, "class ParseException(Exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptions.ParseException": {"func": {"__str__": {"ParseException -> ?": [[20, "    def __str__(self):"]]}, "marked": {"ParseException -> ?": [[17, "    def marked(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptions.ParseException.marked": {"param": {"self": {"ParseException": [[17, "    def marked(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.language.exceptio": {"class": {"FileAccessDenied": {"<FileAccessDenied>": [[5, "class FileAccessDenied(RenderError):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_message.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_unknown_c": {"param": {"self": {"TestMessageContentEncoding": [[137, "    def test_unknown_ce(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_utf8_as_ce": {"var": {"r": {"?": [[147, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_simple": {"var": {"r": {"?": [[201, "        r = tutils.tresp(content=b'\\xfc')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message._test_passthrough_attr": {"param": {"message": {"{Request | Response}": [[9, "def _test_passthrough_attr(message, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_non": {"param": {"self": {"TestMessageContentEncoding": [[173, "    def test_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_m": {"class": {"TestMessageContentEncoding": {"<TestMessageContentEncoding>": [[104, "class TestMessageContentEncoding:"]]}, "TestMessage": {"<TestMessage>": [[58, "class TestMessage:"]]}, "TestMessageText": {"<TestMessageText>": [[199, "class TestMessageText:"]]}, "TestMessageData": {"<TestMessageData>": [[40, "class TestMessageData:"]]}}, "func": {"_test_passthrough_attr": {"(?, ?) -> None / (?, str) -> None / (Request, str) -> None / (Response, str) -> None": [[9, "def _test_passthrough_attr(message, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageD": {"func": {"test_serializable": {"TestMessageData -> None": [[51, "    def test_serializable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessag": {"func": {"test_timestamp_start": {"TestMessage -> None": [[94, "    def test_timestamp_start(self):"]]}, "test_headers": {"TestMessage -> None": [[91, "    def test_headers(self):"]]}, "test_eq_ne": {"TestMessage -> None": [[64, "    def test_eq_ne(self):"]]}, "test_http_version": {"TestMessage -> None": [[100, "    def test_http_version(self):"]]}, "test_timestamp_end": {"TestMessage -> None": [[97, "    def test_timestamp_end(self):"]]}, "test_serializable": {"TestMessage -> None": [[74, "    def test_serializable(self):"]]}, "test_init": {"TestMessage -> None": [[60, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageData.test_serializab": {"param": {"self": {"TestMessageData": [[51, "    def test_serializable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_cannot_encode": {"var": {"r": {"?": [[269, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_messag": {"func": {"_test_decoded_attr": {"(?, ?) -> None / (Request, str) -> None / (?, str) -> None": [[15, "def _test_decoded_attr(message, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message._test_decoded_attr": {"var": {"d": {"?": [[35, "    d = getattr(message, attr)"]]}}, "param": {"message": {"Request": [[15, "def _test_decoded_attr(message, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_modify": {"var": {"r": {"?": [[125, "        r = tutils.tresp()"]]}}, "param": {"self": {"TestMessageContentEncoding": [[124, "    def test_modify(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_header": {"param": {"self": {"TestMessage": [[91, "    def test_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_cannot_decode": {"var": {"r": {"?": [[156, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_guess_latin_1": {"var": {"r": {"?": [[229, "        r = tutils.tresp(content=b\"\\xF0\\xE2\")"]]}}, "param": {"self": {"TestMessageText": [[228, "    def test_guess_latin_1(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_init": {"var": {"resp": {"?": [[61, "        resp = tutils.tresp()"]]}}, "param": {"self": {"TestMessage": [[60, "    def test_init(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_eq_n": {"var": {"resp": {"?": [[65, "        resp = tutils.tresp(timestamp_start=42, timestamp_end=42)"]]}, "other": {"?": [[69, "        other = tutils.tresp(timestamp_start=0, timestamp_end=0)"]]}, "same": {"?": [[66, "        same = tutils.tresp(timestamp_start=42, timestamp_end=42)"]]}}, "param": {"self": {"TestMessage": [[64, "    def test_eq_ne(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding": {"func": {"test_unknown_ce": {"TestMessageContentEncoding -> None": [[137, "    def test_unknown_ce(self):"]]}, "test_simple": {"TestMessageContentEncoding -> None": [[105, "    def test_simple(self):"]]}, "test_utf8_as_ce": {"TestMessageContentEncoding -> None": [[146, "    def test_utf8_as_ce(self):"]]}, "test_cannot_decode": {"TestMessageContentEncoding -> None": [[155, "    def test_cannot_decode(self):"]]}, "test_modify": {"TestMessageContentEncoding -> None": [[124, "    def test_modify(self):"]]}, "test_cannot_encode": {"TestMessageContentEncoding -> None": [[181, "    def test_cannot_encode(self):"]]}, "test_none": {"TestMessageContentEncoding -> None": [[173, "    def test_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_utf8_as_c": {"param": {"self": {"TestMessageContentEncoding": [[146, "    def test_utf8_as_ce(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_simple": {"var": {"r": {"?": [[106, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_non": {"param": {"self": {"TestMessageText": [[232, "    def test_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_update_content_length_heade": {"var": {"r": {"?": [[117, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_serializabl": {"var": {"resp": {"?": [[75, "        resp = tutils.tresp()"]]}, "resp2": {"Message": [[76, "        resp2 = http.Response.from_state(resp.get_state())"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_serializab": {"param": {"self": {"TestMessage": [[74, "    def test_serializable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_unknown_ce": {"var": {"r": {"?": [[252, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageTex": {"func": {"test_guess_latin_1": {"TestMessageText -> None": [[228, "    def test_guess_latin_1(self):"]]}, "test_unknown_ce": {"TestMessageText -> None": [[251, "    def test_unknown_ce(self):"]]}, "test_simple": {"TestMessageText -> None": [[200, "    def test_simple(self):"]]}, "test_cannot_decode": {"TestMessageText -> None": [[259, "    def test_cannot_decode(self):"]]}, "test_modify": {"TestMessageText -> None": [[240, "    def test_modify(self):"]]}, "test_none": {"TestMessageText -> None": [[232, "    def test_none(self):"]]}, "test_cannot_encode": {"TestMessageText -> None": [[268, "    def test_cannot_encode(self):"]]}, "test_guess_meta_charset": {"TestMessageText -> None": [[222, "    def test_guess_meta_charset(self):"]]}, "test_guess_json": {"TestMessageText -> None": [[217, "    def test_guess_json(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_cannot_decode": {"var": {"r": {"?": [[260, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_http_version": {"param": {"self": {"TestMessage": [[100, "    def test_http_version(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_simp": {"param": {"self": {"TestMessageText": [[200, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_timestamp_start": {"param": {"self": {"TestMessage": [[94, "    def test_timestamp_start(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_cannot_encod": {"param": {"self": {"TestMessageContentEncoding": [[181, "    def test_cannot_encode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_unknown_c": {"param": {"self": {"TestMessageText": [[251, "    def test_unknown_ce(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_none": {"var": {"r": {"?": [[233, "        r = tutils.tresp(content=None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageData.test_eq": {"var": {"other": {"?": [[46, "        other = tutils.tresp(content=b\"foo\").data"]]}, "data": {"?": [[42, "        data = tutils.tresp(timestamp_start=42, timestamp_end=42).data"]]}, "same": {"?": [[43, "        same = tutils.tresp(timestamp_start=42, timestamp_end=42).data"]]}}, "param": {"self": {"TestMessageData": [[41, "    def test_eq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message._test_decoded_": {"param": {"attr": {"str": [[15, "def _test_decoded_attr(message, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_guess_json": {"var": {"r": {"?": [[218, "        r = tutils.tresp(content=b'\"\\xc3\\xbc\"')"]]}}, "param": {"self": {"TestMessageText": [[217, "    def test_guess_json(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_cannot_decod": {"param": {"self": {"TestMessageText": [[259, "    def test_cannot_decode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_modify": {"var": {"r": {"?": [[241, "        r = tutils.tresp()"]]}}, "param": {"self": {"TestMessageText": [[240, "    def test_modify(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message._test_passthrough_": {"param": {"attr": {"str": [[9, "def _test_passthrough_attr(message, attr):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncodi": {"func": {"test_update_content_length_header": {"TestMessageContentEncoding -> None": [[116, "    def test_update_content_length_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_cannot_encode": {"var": {"r": {"?": [[182, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageData.test_serializable": {"var": {"data1": {"?": [[52, "        data1 = tutils.tresp(timestamp_start=42, timestamp_end=42).data"]]}, "data2": {"?": [[53, "        data2 = tutils.tresp().data.from_state(data1.get_state())  # ResponseData.from_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageData": {"func": {"test_eq": {"TestMessageData -> None": [[41, "    def test_eq(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_guess_meta_charset": {"var": {"r": {"?": [[223, "        r = tutils.tresp(content=b'<meta http-equiv=\"content-type\" '"]]}}, "param": {"self": {"TestMessageText": [[222, "    def test_guess_meta_charset(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_update_content_length_header": {"param": {"self": {"TestMessageContentEncoding": [[116, "    def test_update_content_length_header(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_simp": {"param": {"self": {"TestMessageContentEncoding": [[105, "    def test_simple(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageText.test_cannot_encod": {"param": {"self": {"TestMessageText": [[268, "    def test_cannot_encode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_none": {"var": {"r": {"?": [[174, "        r = tutils.tresp(content=None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_unknown_ce": {"var": {"r": {"?": [[138, "        r = tutils.tresp()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_timestamp_end": {"param": {"self": {"TestMessage": [[97, "    def test_timestamp_end(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessageContentEncoding.test_cannot_decod": {"param": {"self": {"TestMessageContentEncoding": [[155, "    def test_cannot_decode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestM": {"func": {"test_content_length_update": {"TestMessage -> None": [[79, "    def test_content_length_update(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_message.TestMessage.test_content_length_updat": {"var": {"resp": {"?": [[80, "        resp = tutils.tresp()"]]}}, "param": {"self": {"TestMessage": [[79, "    def test_content_length_update(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/test_xss_scanner.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_end_of_url_injectio": {"param": {"get_request_vuln": {"?": [[255, "    def test_test_end_of_url_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger.Logger.error": {"param": {"self": {"Logger": [[305, "            def error(self, str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mocked_requests_invul": {"class": {"MockResponse": {"<MockResponse>": [[250, "        class MockResponse:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mock_gethostbyname.gethostby": {"var": {"claimed_domains": {"[str]": [[323, "            claimed_domains = [\"google.com\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSSca": {"func": {"test_test_query_injection": {"(TestXSSScanner, ?) -> None": [[285, "    def test_test_query_injection(self, get_request_vuln):"]]}, "test_response": {"(TestXSSScanner, ?, ?) -> None": [[379, "    def test_response(self, get_request_invuln, logger):"]]}, "mocked_requests_vuln": {"() -> MockResponse": [[243, "    def mocked_requests_vuln(*args, headers=None, cookies=None):"]]}, "get_request_invuln": {"(TestXSSScanner, ?) -> None": [[317, "    def get_request_invuln(self, monkeypatch):"]]}, "test_test_referer_injection": {"(TestXSSScanner, ?) -> None": [[265, "    def test_test_referer_injection(self, get_request_vuln):"]]}, "mocked_requests_invuln": {"() -> MockResponse": [[249, "    def mocked_requests_invuln(*args, headers=None, cookies=None):"]]}, "test_test_end_of_url_injection": {"(TestXSSScanner, ?) -> None": [[255, "    def test_test_end_of_url_injection(self, get_request_vuln):"]]}, "get_request_vuln": {"(TestXSSScanner, ?) -> None": [[313, "    def get_request_vuln(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_data_equa": {"param": {"self": {"TestXSSScanner": [[387, "    def test_data_equals(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_referer_injection": {"param": {"self": {"TestXSSScanner": [[265, "    def test_test_referer_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger.Logger.__init__": {"param": {"self": {"Logger": [[299, "            def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.get_request_invuln": {"param": {"self": {"TestXSSScanner": [[317, "    def get_request_invuln(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScann": {"var": {"logger": {"Logger": [[308, "        logger = Logger()"]]}}, "func": {"logger": {"(TestXSSScanner, ?) -> None": [[297, "    def logger(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_respon": {"param": {"self": {"TestXSSScanner": [[379, "    def test_response(self, get_request_invuln, logger):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_get_cooki": {"param": {"self": {"TestXSSScanner": [[372, "    def test_get_cookies(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_referer_inj": {"var": {"expected_xss_info": {"?": [[267, "        expected_xss_info = xss.XSSData('https://example.com/',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_referer_injectio": {"param": {"get_request_vuln": {"?": [[265, "    def test_test_referer_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger.Logger.info": {"param": {"self": {"Logger": [[302, "            def info(self, str):"]]}, "str": {"?": [[302, "            def info(self, str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.get_request_invul": {"param": {"monkeypatch": {"?": [[317, "    def get_request_invuln(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_end_of_url_inject": {"var": {"xss_info": {"?": [[256, "        xss_info = xss.test_end_of_URL_injection(\"<html></html>\", \"https://example.com/index.html\", {})[0]"]]}, "sqli_info": {"?": [[261, "        sqli_info = xss.test_end_of_URL_injection(\"<html></html>\", \"https://example.com/\", {})[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_inside_quot": {"param": {"self": {"TestXSSScanner": [[229, "    def test_inside_quote(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mocked_requests_invuln.MockResponse": {"func": {"__init__": {"? -> ?": [[251, "            def __init__(self, html, headers=None, cookies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mocked_requests_invuln.MockResponse.__init__": {"param": {"headers": {"None": [[251, "            def __init__(self, html, headers=None, cookies=None):"]]}, "self": {"MockResponse": [[251, "            def __init__(self, html, headers=None, cookies=None):"]]}, "html": {"str": [[251, "            def __init__(self, html, headers=None, cookies=None):"]]}, "cookies": {"None": [[251, "            def __init__(self, html, headers=None, cookies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mocked_requests_vuln.MockResponse.__init__": {"param": {"headers": {"None": [[245, "            def __init__(self, html, headers=None, cookies=None):"]]}, "self": {"MockResponse": [[245, "            def __init__(self, html, headers=None, cookies=None):"]]}, "html": {"str": [[245, "            def __init__(self, html, headers=None, cookies=None):"]]}, "cookies": {"None": [[245, "            def __init__(self, html, headers=None, cookies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_referer_inject": {"var": {"xss_info": {"?": [[266, "        xss_info = xss.test_referer_injection(\"<html></html>\", \"https://example.com/\", {})[0]"]]}, "sqli_info": {"?": [[271, "        sqli_info = xss.test_referer_injection(\"<html></html>\", \"https://example.com/\", {})[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_user_agent_inject": {"var": {"xss_info": {"?": [[276, "        xss_info = xss.test_user_agent_injection(\"<html></html>\", \"https://example.com/\", {})[0]"]]}, "sqli_info": {"?": [[281, "        sqli_info = xss.test_user_agent_injection(\"<html></html>\", \"https://example.com/\", {})[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mocked_requests_vul": {"class": {"MockResponse": {"<MockResponse>": [[244, "        class MockResponse:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_query_inj": {"var": {"expected_xss_info": {"?": [[288, "        expected_xss_info = xss.XSSData('https://example.com/vuln.php?cmd=1029zxcs\\'d\"ao<ac>so[sb]po(pc)se;sl/bsl\\\\eq=3847asd',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_get_SQLi_data": {"param": {"self": {"TestXSSScanner": [[213, "    def test_get_SQLi_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_query_inject": {"var": {"xss_info": {"?": [[287, "        xss_info = xss.test_query_injection(\"<html></html>\", \"https://example.com/vuln.php?cmd=ls\", {})[0]"]]}, "sqli_info": {"?": [[292, "        sqli_info = xss.test_query_injection(\"<html></html>\", \"https://example.com/vuln.php?cmd=ls\", {})[1]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger": {"param": {"self": {"TestXSSScanner": [[297, "    def logger(self, monkeypatch):"]]}, "monkeypatch": {"?": [[297, "    def logger(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_end_of_url_inj": {"var": {"expected_xss_info": {"?": [[257, "        expected_xss_info = xss.XSSData('https://example.com/index.html/1029zxcs\\'d\"ao<ac>so[sb]po(pc)se;sl/bsl\\\\eq=3847asd',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSS": {"func": {"test_test_user_agent_injection": {"(TestXSSScanner, ?) -> None": [[275, "    def test_test_user_agent_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_": {"class": {"TestXSSScanner": {"<TestXSSScanner>": [[7, "class TestXSSScanner():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_get_SQL": {"var": {"sqli_data": {"?": [[214, "        sqli_data = xss.get_SQLi_data(\"<html>SQL syntax MySQL</html>\","], [223, "        sqli_data = xss.get_SQLi_data(\"<html>SQL syntax MySQL</html>\","]]}, "expected_sqli_data": {"?": [[218, "        expected_sqli_data = xss.SQLiData(\"https://example.com\","]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.get_request_vul": {"param": {"monkeypatch": {"?": [[313, "    def get_request_vuln(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.get_request_vuln": {"param": {"self": {"TestXSSScanner": [[313, "    def get_request_vuln(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner": {"func": {"test_get_XSS_info": {"TestXSSScanner -> None": [[8, "    def test_get_XSS_info(self):"]]}, "mock_gethostbyname": {"(TestXSSScanner, ?) -> None": [[321, "    def mock_gethostbyname(self, monkeypatch):"]]}, "test_inside_quote": {"TestXSSScanner -> None": [[229, "    def test_inside_quote(self):"]]}, "test_get_cookies": {"TestXSSScanner -> None": [[372, "    def test_get_cookies(self):"]]}, "test_log_SQLi_data": {"(TestXSSScanner, ?) -> None": [[360, "    def test_log_SQLi_data(self, logger):"]]}, "test_paths_to_text": {"TestXSSScanner -> None": [[235, "    def test_paths_to_text(self):"]]}, "test_find_unclaimed_URLs": {"(TestXSSScanner, ?, ?) -> None": [[332, "    def test_find_unclaimed_URLs(self, logger, mock_gethostbyname):"]]}, "test_log_XSS_data": {"(TestXSSScanner, ?) -> None": [[346, "    def test_log_XSS_data(self, logger):"]]}, "test_data_equals": {"TestXSSScanner -> None": [[387, "    def test_data_equals(self):"]]}, "test_get_SQLi_data": {"TestXSSScanner -> None": [[213, "    def test_get_SQLi_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_get_cookies": {"var": {"mocked_req": {"?": [[373, "        mocked_req = tutils.treq()"]]}, "mocked_flow": {"?": [[375, "        mocked_flow = tflow.tflow(req=mocked_req)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mock_gethostbynam": {"param": {"self": {"TestXSSScanner": [[321, "    def mock_gethostbyname(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_paths_to_": {"var": {"text": {"?": [[236, "        text = xss.paths_to_text(\"\"\"<html><head><h1>STRING</h1></head>"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_query_injectio": {"param": {"get_request_vuln": {"?": [[285, "    def test_test_query_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_user_agent_injection": {"param": {"self": {"TestXSSScanner": [[275, "    def test_test_user_agent_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_paths_to": {"var": {"expected_text": {"[str]": [[239, "        expected_text = [\"/html/head/h1\", \"/html/script\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mock_": {"func": {"gethostbyname": {"? -> str": [[322, "        def gethostbyname(domain):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_paths_to_text": {"param": {"self": {"TestXSSScanner": [[235, "    def test_paths_to_text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_log_SQLi_data": {"param": {"self": {"TestXSSScanner": [[360, "    def test_log_SQLi_data(self, logger):"]]}, "logger": {"?": [[360, "    def test_log_SQLi_data(self, logger):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_get_XSS": {"var": {"expected_xss_info": {"?": [[15, "        expected_xss_info = xss.XSSData('https://example.com',"], [24, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [41, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [59, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [77, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [94, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [111, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [129, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [146, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [164, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [182, "        expected_xss_info = xss.XSSData(\"https://example.com\","], [200, "        expected_xss_info = xss.XSSData(\"https://example.com\","]]}, "xss_info": {"?": [[11, "        xss_info = xss.get_XSS_data(b\"<html><script>%s</script><html>\" %"], [20, "        xss_info = xss.get_XSS_data(b\"<html><script>%s</script><html>\" %"], [30, "        xss_info = xss.get_XSS_data(b\"<html><script>%s</script><html>\" %"], [37, "        xss_info = xss.get_XSS_data(b\"<html><script>t='%s';</script></html>\" %"], [48, "        xss_info = xss.get_XSS_data(b\"<html><script>t='%s';</script></html>\" %"], [55, "        xss_info = xss.get_XSS_data(b\"<html><script>t=\\\"%s\\\";</script></html>\" %"], [66, "        xss_info = xss.get_XSS_data(b\"<html><script>t=\\\"%s\\\";</script></html>\" %"], [73, "        xss_info = xss.get_XSS_data(b\"<html><a href='%s'>Test</a></html>\" %"], [83, "        xss_info = xss.get_XSS_data(b\"<html><a href='OtherStuff%s'>Test</a></html>\" %"], [90, "        xss_info = xss.get_XSS_data(b\"<html><a href=\\\"%s\\\">Test</a></html>\" %"], [100, "        xss_info = xss.get_XSS_data(b\"<html><a href=\\\"OtherStuff%s\\\">Test</a></html>\" %"], [107, "        xss_info = xss.get_XSS_data(b\"<html><a href=%s>Test</a></html>\" %"], [117, "        xss_info = xss.get_XSS_data(b\"<html><a href=OtherStuff%s>Test</a></html>\" %"], [125, "        xss_info = xss.get_XSS_data(b\"<html><b>%s</b></html>\" %"], [135, "        xss_info = xss.get_XSS_data(b\"<html><b>%s</b></html>\" %"], [142, "        xss_info = xss.get_XSS_data(b\"<html><a href=%s>Test</a></html>\" %"], [152, "        xss_info = xss.get_XSS_data(b\"<html><a href=OtherStuff%s>Test</a></html>\" %"], [160, "        xss_info = xss.get_XSS_data(b\"<html><a href=\\\"STUFF %s\\\">Test</a></html>\" %"], [170, "        xss_info = xss.get_XSS_data(b\"<html><a href=\\\"STUFF %s\\\">Test</a></html>\" %"], [178, "        xss_info = xss.get_XSS_data(b\"<html><a href='STUFF %s'>Test</a></html>\" %"], [188, "        xss_info = xss.get_XSS_data(b\"<html><a href='STUFF %s'>Test</a></html>\" %"], [196, "        xss_info = xss.get_XSS_data(b\"<html><a href=STUFF%s>Test</a></html>\" %"], [206, "        xss_info = xss.get_XSS_data(b\"<html><a href=STUFF_%s>Test</a></html>\" %"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mock_gethostbyname.gethostbyname": {"param": {"domain": {"?": [[322, "        def gethostbyname(domain):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_find_unclaimed_URLs": {"param": {"logger": {"?": [[332, "    def test_find_unclaimed_URLs(self, logger, mock_gethostbyname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_data_equal": {"var": {"xssData": {"?": [[388, "        xssData = xss.XSSData(\"a\", \"b\", \"c\", \"d\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_log_XSS_data": {"param": {"self": {"TestXSSScanner": [[346, "    def test_log_XSS_data(self, logger):"]]}, "logger": {"?": [[346, "    def test_log_XSS_data(self, logger):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mock_gethostb": {"param": {"monkeypatch": {"?": [[321, "    def mock_gethostbyname(self, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.mocked_requests_vuln.MockResponse": {"func": {"__init__": {"? -> ?": [[245, "            def __init__(self, html, headers=None, cookies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger.Logger": {"func": {"info": {"(Logger, ?) -> None": [[302, "            def info(self, str):"]]}, "__init__": {"? -> ?": [[299, "            def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_user_agent_injectio": {"param": {"get_request_vuln": {"?": [[275, "    def test_test_user_agent_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_get_XSS_info": {"param": {"self": {"TestXSSScanner": [[8, "    def test_get_XSS_info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_find_unclaimed_URL": {"param": {"mock_gethostbyname": {"?": [[332, "    def test_find_unclaimed_URLs(self, logger, mock_gethostbyname):"]]}, "self": {"TestXSSScanner": [[332, "    def test_find_unclaimed_URLs(self, logger, mock_gethostbyname):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.l": {"class": {"Logger": {"<Logger>": [[298, "        class Logger():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_data_equ": {"var": {"sqliData": {"?": [[389, "        sqliData = xss.SQLiData(\"a\", \"b\", \"c\", \"d\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_respons": {"var": {"mocked_flow": {"?": [[380, "        mocked_flow = tflow.tflow("]]}}, "param": {"logger": {"?": [[379, "    def test_response(self, get_request_invuln, logger):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger.Logger.erro": {"param": {"str": {"?": [[305, "            def error(self, str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_end_of_url_injection": {"param": {"self": {"TestXSSScanner": [[255, "    def test_test_end_of_url_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_query_injection": {"param": {"self": {"TestXSSScanner": [[285, "    def test_test_query_injection(self, get_request_vuln):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_test_user_agent_inj": {"var": {"expected_xss_info": {"?": [[277, "        expected_xss_info = xss.XSSData('https://example.com/',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.logger.Logg": {"func": {"error": {"(Logger, ?) -> None": [[305, "            def error(self, str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.test_xss_scanner.TestXSSScanner.test_respo": {"param": {"get_request_invuln": {"?": [[379, "    def test_response(self, get_request_invuln, logger):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/test_websocket.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_message_ki": {"param": {"self": {"TestWebSocketFlow": [[90, "    def test_message_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_kill": {"var": {"f": {"?": [[47, "        f = tflow.twebsocketflow()"], [53, "        f = tflow.twebsocketflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_serialize": {"var": {"b": {"?": [[80, "        b = io.BytesIO()"], [85, "        b = io.BytesIO()"]]}, "d": {"?": [[81, "        d = tflow.twebsocketflow().get_state()"], [86, "        d = tflow.twebsocketflow().handshake_flow.get_state()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_serializ": {"param": {"self": {"TestWebSocketFlow": [[79, "    def test_serialize(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_": {"class": {"TestWebSocketFlow": {"<TestWebSocketFlow>": [[10, "class TestWebSocketFlow:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_inject_messag": {"param": {"self": {"TestWebSocketFlow": [[96, "    def test_inject_message(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow": {"func": {"test_serialize": {"TestWebSocketFlow -> None": [[79, "    def test_serialize(self):"]]}, "test_copy": {"TestWebSocketFlow -> None": [[12, "    def test_copy(self):"]]}, "test_message_kill": {"TestWebSocketFlow -> None": [[90, "    def test_message_kill(self):"]]}, "test_match": {"TestWebSocketFlow -> None": [[60, "    def test_match(self):"]]}, "test_repr": {"TestWebSocketFlow -> None": [[72, "    def test_repr(self):"]]}, "test_kill": {"TestWebSocketFlow -> None": [[46, "    def test_kill(self):"]]}, "test_inject_message": {"TestWebSocketFlow -> None": [[96, "    def test_inject_message(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_match": {"var": {"f": {"?": [[61, "        f = tflow.twebsocketflow()"], [66, "        f = tflow.twebsocketflow(err=True)"]]}}, "param": {"self": {"TestWebSocketFlow": [[60, "    def test_match(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_repr": {"var": {"f": {"?": [[73, "        f = tflow.twebsocketflow()"]]}}, "param": {"self": {"TestWebSocketFlow": [[72, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_copy": {"var": {"a": {"?": [[16, "        a = f.get_state()"]]}, "f2": {"?": [[15, "        f2 = f.copy()"], [40, "        f2 = f.copy()"]]}, "b": {"?": [[17, "        b = f2.get_state()"]]}, "f": {"?": [[13, "        f = tflow.twebsocketflow()"], [39, "        f = tflow.twebsocketflow(err=True)"]]}, "m": {"?": [[33, "        for m in f.messages:"]]}, "m2": {"?": [[34, "            m2 = m.copy()"]]}}, "param": {"self": {"TestWebSocketFlow": [[12, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_inject_message": {"var": {"f": {"?": [[97, "        f = tflow.twebsocketflow()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_ki": {"param": {"self": {"TestWebSocketFlow": [[46, "    def test_kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.test_websocket.TestWebSocketFlow.test_message_kill": {"var": {"f": {"?": [[91, "        f = tflow.twebsocketflow()"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_auto.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.conten": {"func": {"test_view_auto": {"() -> None": [[7, "def test_view_auto():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_auto.test_view_auto": {"var": {"f": {"?": [[9, "    f = v("], [15, "    f = v("], [21, "    f = v("], [27, "    f = v("], [33, "    f = v("], [39, "    f = v("], [45, "    f = v(b\"\\xFF\" * 30)"], [48, "    f = v("], [54, "    f = v("]]}, "v": {"?": [[8, "    v = full_eval(auto.ViewAuto())"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/modes/reverse_proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.reverse_proxy.ReverseProxy.__ini": {"param": {"server_tls": {"bool": [[6, "    def __init__(self, ctx, server_address, server_tls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.reverse_proxy.ReverseProxy.__call__": {"var": {"layer": {"?": [[11, "        layer = self.ctx.next_layer(self)"]]}}, "param": {"self": {"ReverseProxy": [[10, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.reverse_p": {"class": {"ReverseProxy": {"<ReverseProxy>": [[4, "class ReverseProxy(protocol.Layer, protocol.ServerConnectionMixin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.reverse_proxy.ReverseProxy": {"func": {"__call__": {"ReverseProxy -> ?": [[10, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[6, "    def __init__(self, ctx, server_address, server_tls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.reverse_proxy.ReverseProxy.__init__": {"param": {"self": {"ReverseProxy": [[6, "    def __init__(self, ctx, server_address, server_tls):"]]}, "ctx": {"RootContext": [[6, "    def __init__(self, ctx, server_address, server_tls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.modes.reverse_proxy.ReverseProxy.__init": {"param": {"server_address": {"?": [[6, "    def __init__(self, ctx, server_address, server_tls):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/protocols/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.protocols": {"var": {"__all__": {"[str]": [[3, "__all__ = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/test_xml_html.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_xml_html.test_format_x": {"param": {"filename": {"?": [[29, "def test_format_xml(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_xml_html": {"var": {"datadir": {"str": [[6, "datadir = \"mitmproxy/contentviews/test_xml_html_data/\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_xml_h": {"func": {"test_simple": {"? -> None": [[9, "def test_simple(tdata):"]]}, "test_format_xml": {"(?, ?) -> None": [[29, "def test_format_xml(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_xml_html.test_simpl": {"var": {"tokens": {"None": [[18, "    tokens = xml_html.tokenize(input)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_xml_html.test_format_xml": {"var": {"expected": {"str": [[34, "        expected = f.read()"]]}, "path": {"?": [[30, "    path = tdata.path(datadir + filename)"]]}, "tokens": {"None": [[35, "    tokens = xml_html.tokenize(input)"]]}, "input": {"str": [[32, "        input = f.read()"]]}}, "param": {"tdata": {"?": [[29, "def test_format_xml(filename, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.test_xml_html.test_simple": {"var": {"input": {"str": [[17, "        input = f.read()"]]}, "v": {"?": [[10, "    v = full_eval(xml_html.ViewXmlHtml())"]]}}, "param": {"tdata": {"?": [[9, "def test_simple(tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/cut.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut": {"func": {"headername": {"str -> str / ? -> None": [[17, "def headername(spec: str):"]]}, "is_addr": {"? -> ?": [[23, "def is_addr(v):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.Cut.cut": {"var": {"self": {"Cut": [[57, "        self,"]]}, "flows": {"[?]": [[58, "        flows: typing.Sequence[flow.Flow],"]]}, "f": {"?": [[71, "        for f in flows:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.c": {"class": {"Cut": {"<Cut>": [[54, "class Cut:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.extract": {"var": {"i": {"?": [[30, "    for i, spec in enumerate(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.Cut.clip": {"var": {"f": {"?": [[137, "            for f in flows:"]]}, "cuts": {"?": [[122, "        cuts: mitmproxy.types.CutSpec,"]]}, "self": {"Cut": [[120, "        self,"]]}, "writer": {"?": [[136, "            writer = csv.writer(fp)"]]}, "flows": {"?": [[121, "        flows: typing.Sequence[flow.Flow],"]]}, "v": {"None": [[132, "            v = extract(cuts[0], flows[0])"]]}, "vals": {"[None]": [[138, "                vals = [extract(c, f) for c in cuts]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.extrac": {"var": {"path": {"[str]": [[28, "    path = cut.split(\".\")"]]}, "part": {"?": [[34, "        part = getattr(current, spec, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.Cut": {"func": {"save": {"(Cut, ?, ?, ?) -> ?": [[76, "    def save("]]}, "clip": {"(Cut, ?, ?) -> None": [[119, "    def clip("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.Cut.save": {"var": {"f": {"?": [[109, "                    for f in flows:"]]}, "cuts": {"?": [[79, "        cuts: mitmproxy.types.CutSpec,"]]}, "flows": {"?": [[78, "        flows: typing.Sequence[flow.Flow],"]]}, "v": {"None": [[100, "                    v = extract(cuts[0], flows[0])"]]}, "vals": {"[None]": [[110, "                        vals = [extract(c, f) for c in cuts]"]]}, "path": {"Path": [[93, "            path = mitmproxy.types.Path(epath)"]], "?": [[80, "        path: mitmproxy.types.Path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.Cut.cli": {"var": {"fp": {"?": [[130, "        fp = io.StringIO(newline=\"\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.C": {"var": {"cuts": {"[str]": [[59, "        cuts: mitmproxy.types.CutSpec,"]]}}, "func": {"cut": {"(Cut, ?, ?) -> None / (Cut, [?], [str]) -> None": [[56, "    def cut("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.Cut.sav": {"var": {"self": {"Cut": [[77, "        self,"]]}, "writer": {"?": [[108, "                    writer = csv.writer(fp)"]]}, "epath": {"?": [[92, "            epath = os.path.expanduser(path[1:])"]]}, "append": {"?": [[89, "        append = False"], [91, "            append = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cut.extra": {"var": {"current": {"?": [[50, "        current = part"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.cu": {"func": {"extract": {"(str, ?) -> None / (?, ?) -> None": [[27, "def extract(cut: str, f: flow.Flow) -> typing.Union[str, bytes]:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_cut.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cu": {"func": {"test_extract": {"? -> None": [[13, "def test_extract(tdata):"]]}, "test_headername": {"() -> None": [[63, "def test_headername():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_cut": {"var": {"c": {"Cut": [[144, "    c = cut.Cut()"], [170, "    c = cut.Cut()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_cut_save": {"var": {"c": {"Cut": [[104, "    c = cut.Cut()"]]}, "v": {"View": [[103, "    v = view.View()"]]}, "f": {"str": [[102, "    f = str(tmpdir.join(\"path\"))"]]}}, "param": {"tmpdir": {"?": [[101, "def test_cut_save(tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_extract": {"var": {"c1": {"Cert": [[58, "    c1 = certs.Cert.from_pem(d)"]]}, "spec": {"str": [[52, "    for spec, expected in tests:"]]}, "d": {"str": [[57, "        d = f.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_cut_save_": {"param": {"exception": {"?": [[129, "async def test_cut_save_open(exception, log_message, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_extrac": {"var": {"tf": {"?": [[14, "    tf = tflow.tflow(resp=True)"]]}, "tests": {"[[str]]": [[15, "    tests = ["]]}, "ret": {"None": [[53, "        ret = cut.extract(spec, tf)"]]}}, "param": {"tdata": {"?": [[13, "def test_extract(tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_cut_clip": {"var": {"log_message": {"str": [[94, "            log_message = \"Pyperclip could not find a \" \\"]]}, "c": {"Cut": [[76, "    c = cut.Cut()"]]}, "v": {"View": [[75, "    v = view.View()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_cut_save_open": {"var": {"c": {"Cut": [[132, "    c = cut.Cut()"]]}, "v": {"View": [[131, "    v = view.View()"]]}, "f": {"str": [[130, "    f = str(tmpdir.join(\"path\"))"]]}}, "param": {"log_message": {"?": [[129, "async def test_cut_save_open(exception, log_message, tmpdir):"]]}, "tmpdir": {"?": [[129, "async def test_cut_save_open(exception, log_message, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut.test_cu": {"var": {"tflows": {"[?]": [[146, "        tflows = [tflow.tflow(resp=True)]"], [166, "        tflows = [tflow.tflow(resp=False)]"], [172, "        tflows = [tflow.ttcpflow()]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addon": {"func": {"test_cut_save": {"? -> None": [[101, "def test_cut_save(tmpdir):"]]}, "test_cut": {"() -> None": [[143, "def test_cut():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_cut": {"func": {"qr": {"? -> str / str -> str": [[68, "def qr(f):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/termstatus.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termstatus.TermStatus": {"func": {"running": {"TermStatus -> None": [[11, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addon": {"class": {"TermStatus": {"<TermStatus>": [[10, "class TermStatus:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.termstatus.TermStatus.running": {"param": {"self": {"TermStatus": [[11, "    def running(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/webscanner_helper/test_urldict.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_ge": {"var": {"urldict": {"?": [[42, "            urldict = URLDict.load(tfile)"]]}}, "param": {"tmpdir": {"?": [[37, "    def test_urldict_get(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldi": {"var": {"content": {"None": [[7, "content = f'{{\"body\": \"{new_content_body}\", \"title\": \"{new_content_title}\"}}'"]]}, "new_content_body": {"str": [[5, "new_content_body = \"New Body\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlD": {"func": {"test_urldict_empty": {"TestUrlDict -> None": [[15, "    def test_urldict_empty(self):"]]}, "test_urldict_dumps": {"(TestUrlDict, ?) -> None": [[67, "    def test_urldict_dumps(self, tmpdir):"]]}, "test_urldict_get": {"(TestUrlDict, ?) -> ?": [[37, "    def test_urldict_get(self, tmpdir):"]]}, "test_urldict_loads": {"TestUrlDict -> None": [[20, "    def test_urldict_loads(self):"]]}, "test_urldict_dump": {"(TestUrlDict, ?) -> None": [[77, "    def test_urldict_dump(self, tmpdir):"]]}, "test_urldict_set_error": {"(TestUrlDict, ?) -> ?": [[25, "    def test_urldict_set_error(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_load": {"param": {"self": {"TestUrlDict": [[20, "    def test_urldict_loads(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urld": {"var": {"selection_get": {"?": [[52, "        selection_get = urldict.get(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_dump": {"var": {"urldict": {"?": [[83, "            urldict = URLDict.load(tfile)"]]}, "outfile": {"?": [[79, "        outfile = tmpdir.join(\"outfile\")"]]}}, "param": {"self": {"TestUrlDict": [[67, "    def test_urldict_dumps(self, tmpdir):"], [77, "    def test_urldict_dump(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_du": {"var": {"tmpfile": {"?": [[78, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"tmpdir": {"?": [[77, "    def test_urldict_dump(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_get": {"var": {"f": {"?": [[44, "        f = tflow.tflow(resp=tutils.tresp())"]]}}, "param": {"self": {"TestUrlDict": [[37, "    def test_urldict_get(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_g": {"var": {"tmpfile": {"?": [[38, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "selection": {"?": [[46, "        selection = urldict[f]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_loads": {"var": {"urldict": {"?": [[21, "        urldict = URLDict.loads(input_file_content)"]]}, "dump": {"?": [[22, "        dump = urldict.dumps()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict": {"var": {"url": {"str": [[4, "url = \"http://10.10.10.10\""]]}, "url_error": {"str": [[8, "url_error = \"i~nvalid\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_empty": {"var": {"urldict": {"?": [[16, "        urldict = URLDict()"]]}, "dump": {"?": [[17, "        dump = urldict.dumps()"]]}}, "param": {"self": {"TestUrlDict": [[15, "    def test_urldict_empty(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_dum": {"var": {"output": {"str": [[88, "            output = ofile.read()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_set_error": {"var": {"tmpfile": {"?": [[26, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}}, "param": {"self": {"TestUrlDict": [[25, "    def test_urldict_set_error(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_set_erro": {"param": {"tmpdir": {"?": [[25, "    def test_urldict_set_error(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urldict.TestUrlDict.test_urldict_dumps": {"var": {"urldict": {"?": [[72, "            urldict = URLDict.load(tfile)"]]}, "tmpfile": {"?": [[68, "        tmpfile = tmpdir.join(\"tmpfile\")"]]}, "dump": {"?": [[74, "        dump = urldict.dumps()"]]}}, "param": {"tmpdir": {"?": [[67, "    def test_urldict_dumps(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.webscanner_helper.test_urld": {"var": {"input_file_content_error": {"None": [[10, "input_file_content_error = f'{{\"{url_error}\": {content}}}'"]]}, "input_file_content": {"None": [[9, "input_file_content = f'{{\"{url}\": {content}}}'"]]}, "new_content_title": {"str": [[6, "new_content_title = \"New Title\""]]}}, "class": {"TestUrlDict": {"<TestUrlDict>": [[13, "class TestUrlDict:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/certs.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.has_expired": {"param": {"self": {"Cert": [[444, "    def has_expired(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.__in": {"param": {"default_privatekey": {"?": [[164, "            dhparams):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.cn": {"param": {"self": {"Cert": [[468, "    def cn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.from_der": {"param": {"cls": {"<Cert>": [[417, "    def from_der(cls, der):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.from_pem": {"param": {"txt": {"str": [[412, "    def from_pem(cls, txt):"]]}, "cls": {"<Cert>": [[412, "    def from_pem(cls, txt):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.notafter": {"param": {"self": {"Cert": [[439, "    def notafter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.dummy_ce": {"param": {"organization": {"str": [[83, "def dummy_cert(privkey, cacert, commonname, sans, organization):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.expir": {"param": {"self": {"CertStore": [[172, "    def expire(self, entry):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.from_state": {"param": {"cls": {"<Cert>": [[408, "    def from_state(cls, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.create_store": {"param": {"path": {"str": [[232, "    def create_store(path, basename, key_size, organization=None, cn=None, expiry=DEFAULT_EXP):"]]}, "cn": {"None": [[232, "    def create_store(path, basename, key_size, organization=None, cn=None, expiry=DEFAULT_EXP):"]]}, "organization": {"None": [[232, "    def create_store(path, basename, key_size, organization=None, cn=None, expiry=DEFAULT_EXP):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.dummy_cert": {"var": {"ss": {"[str]": [[95, "    ss = []"]], "str": [[103, "    ss = b\", \".join(ss)"]]}, "i": {"str": [[96, "    for i in sans:"]]}, "is_valid_commonname": {"bool": [[109, "    is_valid_commonname = ("]]}}, "param": {"commonname": {"str": [[83, "def dummy_cert(privkey, cacert, commonname, sans, organization):"]]}, "sans": {"{() | [?] | [str]}": [[83, "def dummy_cert(privkey, cacert, commonname, sans, organization):"]]}, "privkey": {"?": [[83, "def dummy_cert(privkey, cacert, commonname, sans, organization):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.__ini": {"param": {"default_ca": {"?": [[164, "            dhparams):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.expi": {"param": {"entry": {"CertStoreEntry": [[172, "    def expire(self, entry):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.issuer": {"param": {"self": {"Cert": [[430, "    def issuer(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.create_sto": {"param": {"expiry": {"int": [[232, "    def create_store(path, basename, key_size, organization=None, cn=None, expiry=DEFAULT_EXP):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.load_dhparam": {"param": {"path": {"{None | str}": [[179, "    def load_dhparam(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.__init__": {"param": {"self": {"Cert": [[392, "    def __init__(self, cert):"]]}, "cert": {"str": [[392, "    def __init__(self, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStor": {"param": {"default_chain_file": {"str": [[164, "            dhparams):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.from_stor": {"param": {"basename": {"str": [[199, "    def from_store(cls, path, basename, key_size):"]]}, "key_size": {"int": [[199, "    def from_store(cls, path, basename, key_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.from_store": {"param": {"path": {"str": [[199, "    def from_store(cls, path, basename, key_size):"]]}, "cls": {"<CertStore>": [[199, "    def from_store(cls, path, basename, key_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.get_stat": {"param": {"self": {"Cert": [[401, "    def get_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.keyinfo": {"param": {"self": {"Cert": [[456, "    def keyinfo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.digest": {"param": {"self": {"Cert": [[426, "    def digest(self, name):"]]}, "name": {"str": [[426, "    def digest(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.organization": {"param": {"self": {"Cert": [[476, "    def organization(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.create_ca": {"var": {"cert": {"?": [[42, "    cert = OpenSSL.crypto.X509()"]]}, "key": {"?": [[40, "    key = OpenSSL.crypto.PKey()"]]}}, "param": {"key_size": {"int": [[39, "def create_ca(organization, cn, exp, key_size):"]]}, "cn": {"str": [[39, "def create_ca(organization, cn, exp, key_size):"]]}, "exp": {"int": [[39, "def create_ca(organization, cn, exp, key_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.subject": {"param": {"self": {"Cert": [[448, "    def subject(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStoreEntry.__init": {"param": {"chain_file": {"str": [[141, "    def __init__(self, cert, privatekey, chain_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.create_stor": {"param": {"basename": {"str": [[232, "    def create_store(path, basename, key_size, organization=None, cn=None, expiry=DEFAULT_EXP):"]]}, "key_size": {"int": [[232, "    def create_store(path, basename, key_size, organization=None, cn=None, expiry=DEFAULT_EXP):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.seria": {"param": {"self": {"Cert": [[452, "    def serial(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.create_c": {"param": {"organization": {"str": [[39, "def create_ca(organization, cn, exp, key_size):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.altnam": {"param": {"self": {"Cert": [[484, "    def altnames(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.set_": {"param": {"state": {"?": [[404, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.to_pem": {"param": {"self": {"Cert": [[421, "    def to_pem(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.dummy_": {"var": {"cert": {"?": [[105, "    cert = OpenSSL.crypto.X509()"]]}}, "param": {"cacert": {"?": [[83, "def dummy_cert(privkey, cacert, commonname, sans, organization):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.from_": {"param": {"state": {"?": [[408, "    def from_state(cls, state):"]]}, "der": {"str": [[417, "    def from_der(cls, der):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.notbefor": {"param": {"self": {"Cert": [[434, "    def notbefore(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStore.__init__": {"param": {"self": {"CertStore": [[164, "            dhparams):"]]}, "dhparams": {"None": [[164, "            dhparams):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.CertStoreEntry.__init__": {"param": {"self": {"CertStoreEntry": [[141, "    def __init__(self, cert, privatekey, chain_file):"]]}, "privatekey": {"?": [[141, "    def __init__(self, cert, privatekey, chain_file):"]]}, "cert": {"Cert": [[141, "    def __init__(self, cert, privatekey, chain_file):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.set_stat": {"param": {"self": {"Cert": [[404, "    def set_state(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs": {"var": {"DEFAULT_EXP": {"int": [[18, "DEFAULT_EXP = 94608000  # = 60 * 60 * 24 * 365 * 3 = 3 years"]]}, "DEFAULT_EXP_DUMMY_CERT": {"int": [[19, "DEFAULT_EXP_DUMMY_CERT = 31536000  # = 60 * 60 * 24 * 365 = 1 year"]]}, "DEFAULT_DHPARAM": {"str": [[22, "DEFAULT_DHPARAM = b\"\"\""]]}}, "func": {"create_ca": {"(str, str, int, ?) -> (?, ?) / (str, str, int, int) -> (?, ?)": [[39, "def create_ca(organization, cn, exp, key_size):"]]}, "dummy_cert": {"{(?, ?, ?, ?, None) -> Cert / (?, ?, str, (), None) -> Cert / (?, ?, str, [str], None) -> Cert / (?, ?, str, [?], None) -> Cert / (?, ?, None, [?], None) -> Cert / (?, ?, ?, ?, ?) -> Cert / (?, ?, str, [str], str) -> Cert | (?, ?, str, [str]) -> Cert / (?, ?, None, [?]) -> Cert / (?, ?, str, [?]) -> Cert / (?, ?, ?, ?) -> Cert / (?, ?, str, ()) -> Cert}": [[83, "def dummy_cert(privkey, cacert, commonname, sans, organization):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.certs.Cert.__eq__": {"param": {"self": {"Cert": [[398, "    def __eq__(self, other):"]]}, "other": {"Cert": [[398, "    def __eq__(self, other):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/tservers.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBase.teardown": {"param": {"self": {"ServerTestBase": [[108, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.handle_error": {"var": {"s": {"?": [[81, "        s = io.StringIO()"]]}}, "param": {"fp": {"None": [[80, "    def handle_error(self, connection, client_address, fp=None):"]]}, "self": {"_TServer": [[80, "    def handle_error(self, connection, client_address, fp=None):"]]}, "connection": {"?": [[80, "    def handle_error(self, connection, client_address, fp=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._ServerThread.__init__": {"param": {"self": {"_ServerThread": [[14, "    def __init__(self, server):"]]}, "server": {"_TServer": [[14, "    def __init__(self, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.__init": {"param": {"handler_klass": {"None": [[24, "    def __init__(self, ssl, q, handler_klass, addr, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBase.makeserver": {"var": {"ssl": {"?": [[101, "        ssl = kwargs.pop('ssl', cls.ssl)"]]}}, "param": {"cls": {"<ServerTestBase>": [[100, "    def makeserver(cls, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestB": {"func": {"setup_class": {"<ServerTestBase> -> None": [[92, "    def setup_class(cls, **kwargs):"]]}, "teardown_class": {"<ServerTestBase> -> None": [[105, "    def teardown_class(cls):"]]}, "makeserver": {"<ServerTestBase> -> _TServer": [[100, "    def makeserver(cls, **kwargs):"]]}, "last_handler": {"ServerTestBase -> ?": [[112, "    def last_handler(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.n": {"class": {"ServerTestBase": {"<ServerTestBase>": [[86, "class ServerTestBase:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.handle_client_connectio": {"param": {"client_address": {"?": [[46, "    def handle_client_connection(self, request, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBas": {"var": {"handler": {"None": [[88, "    handler = None"]]}}, "func": {"teardown": {"ServerTestBase -> None": [[108, "    def teardown(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.handle_client_connec": {"var": {"options": {"None": [[64, "                options = None"]], "?": [[61, "                options = OpenSSL.SSL.OP_NO_SSLv2 | OpenSSL.SSL.OP_NO_TLSv1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._ServerThread.run": {"param": {"self": {"_ServerThread": [[18, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServ": {"func": {"handle_error": {"(_TServer, ?, ?, None) -> None": [[80, "    def handle_error(self, connection, client_address, fp=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.handle_erro": {"param": {"client_address": {"?": [[80, "    def handle_error(self, connection, client_address, fp=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBase": {"var": {"ssl": {"None": [[87, "    ssl = None"]]}, "addr": {"(str, int)": [[89, "    addr = (\"127.0.0.1\", 0)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers": {"var": {"cdata": {"Data": [[9, "cdata = data.Data(__name__)"]]}}, "class": {"_TServer": {"<_TServer>": [[22, "class _TServer(tcp.TCPServer):"]]}, "_ServerThread": {"<_ServerThread>": [[12, "class _ServerThread(threading.Thread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.handle_client_connection": {"var": {"h": {"?": [[47, "        h = self.handler_klass(request, client_address, self)"]]}, "cert": {"?": [[50, "            cert = self.ssl.get("]]}, "method": {"?": [[60, "                method = OpenSSL.SSL.SSLv3_METHOD"], [63, "                method = OpenSSL.SSL.SSLv23_METHOD"]]}, "key": {"?": [[58, "            key = OpenSSL.crypto.load_privatekey(OpenSSL.crypto.FILETYPE_PEM, raw_key)"]]}, "raw_key": {"str": [[57, "                raw_key = f.read()"]], "?": [[53, "            raw_key = self.ssl.get("]]}}, "param": {"self": {"_TServer": [[46, "    def handle_client_connection(self, request, client_address):"]]}, "request": {"?": [[46, "    def handle_client_connection(self, request, client_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer.__init__": {"param": {"q": {"?": [[24, "    def __init__(self, ssl, q, handler_klass, addr, **kwargs):"]]}, "ssl": {"?": [[24, "    def __init__(self, ssl, q, handler_klass, addr, **kwargs):"]]}, "self": {"_TServer": [[24, "    def __init__(self, ssl, q, handler_klass, addr, **kwargs):"]]}, "addr": {"(str, int)": [[24, "    def __init__(self, ssl, q, handler_klass, addr, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._ServerThread": {"func": {"run": {"_ServerThread -> None": [[18, "    def run(self):"]]}, "__init__": {"? -> ?": [[14, "    def __init__(self, server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBase.teardown_cla": {"param": {"cls": {"<ServerTestBase>": [[105, "    def teardown_class(cls):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBase.setup_cla": {"var": {"s": {"_TServer": [[94, "        s = cls.makeserver(**kwargs)"]]}}, "param": {"cls": {"<ServerTestBase>": [[92, "    def setup_class(cls, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers.ServerTestBase.last_handler": {"param": {"self": {"ServerTestBase": [[112, "    def last_handler(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.tservers._TServer": {"func": {"__init__": {"? -> ?": [[24, "    def __init__(self, ssl, q, handler_klass, addr, **kwargs):"]]}, "handle_client_connection": {"(_TServer, ?, ?) -> None": [[46, "    def handle_client_connection(self, request, client_address):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/net/http/test_multipart.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_multipart.test_deco": {"var": {"headers": {"Headers": [[8, "    headers = Headers("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_multipart.test_decode": {"var": {"boundary": {"str": [[7, "    boundary = 'somefancyboundary'"], [27, "    boundary = 'boundary\u8305\u83bd'"]]}, "form": {"{[(?, str)] | [?]}": [[21, "    form = multipart.decode(headers, content)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_multipar": {"func": {"test_decode": {"() -> None": [[6, "def test_decode():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.net.http.test_multipart.test_decod": {"var": {"content": {"?": [[11, "    content = ("]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/contrib/jsondump.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.__init__": {"param": {"self": {"JSONDumper": [[51, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumpe": {"func": {"_init_transformations": {"JSONDumper -> None": [[103, "    def _init_transformations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsond": {"class": {"JSONDumper": {"<JSONDumper>": [[45, "class JSONDumper:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.work": {"var": {"frame": {"?": [[166, "            frame = self.queue.get()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.websocket_end": {"param": {"self": {"JSONDumper": [[239, "    def websocket_end(self, flow):"]]}, "flow": {"?": [[239, "    def websocket_end(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump": {"var": {"HTTP_WORKERS": {"int": [[42, "HTTP_WORKERS = 10"]]}, "addons": {"[JSONDumper]": [[257, "addons = [JSONDumper()]  # pylint: disable=invalid-name"]]}, "FILE_WORKERS": {"int": [[41, "FILE_WORKERS = 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDum": {"func": {"response": {"(JSONDumper, ?) -> None": [[227, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.respon": {"param": {"self": {"JSONDumper": [[227, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.convert_to_strings": {"param": {"obj": {"?": [[151, "    def convert_to_strings(cls, obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.response": {"param": {"flow": {"?": [[227, "    def response(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDump": {"param": {"loader": {"?": [[187, "    def load(loader):"]]}}, "func": {"websocket_error": {"(JSONDumper, ?) -> None": [[250, "    def websocket_error(self, flow):"]]}, "worker": {"JSONDumper -> None": [[164, "    def worker(self):"]]}, "error": {"(JSONDumper, ?) -> None": [[233, "    def error(self, flow):"]]}, "convert_to_strings": {"(<JSONDumper>, ?) -> {[dict] | dict}": [[151, "    def convert_to_strings(cls, obj):"]]}, "transform_field": {"(?, ?, ?) -> None": [[138, "    def transform_field(obj, path, func):"]]}, "configure": {"(JSONDumper, ?) -> None": [[200, "    def configure(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper._init_transformation": {"param": {"self": {"JSONDumper": [[103, "    def _init_transformations(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.transform_field": {"var": {"obj": {"?": [[146, "            obj = obj[key]"]]}, "key": {"?": [[143, "        for key in path[:-1]:"]]}}, "param": {"path": {"?": [[138, "    def transform_field(obj, path, func):"]]}, "obj": {"?": [[138, "    def transform_field(obj, path, func):"]]}, "func": {"?": [[138, "    def transform_field(obj, path, func):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.websocket_error": {"param": {"self": {"JSONDumper": [[250, "    def websocket_error(self, flow):"]]}, "flow": {"?": [[250, "    def websocket_error(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.configure": {"var": {"i": {"int": [[222, "        for i in range(FILE_WORKERS if self.outfile else HTTP_WORKERS):"]]}, "t": {"?": [[223, "            t = Thread(target=self.worker)"]]}}, "param": {"_": {"?": [[200, "    def configure(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.configur": {"param": {"self": {"JSONDumper": [[200, "    def configure(self, _):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.don": {"param": {"self": {"JSONDumper": [[60, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.worker": {"param": {"self": {"JSONDumper": [[164, "    def worker(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.dump": {"var": {"tfm": {"?": [[174, "        for tfm in self.transformations:"]]}, "field": {"?": [[175, "            for field in tfm['fields']:"]]}, "frame": {"{[dict] | dict}": [[177, "        frame = self.convert_to_strings(frame)"]]}}, "param": {"self": {"JSONDumper": [[170, "    def dump(self, frame):"]]}, "frame": {"?": [[170, "    def dump(self, frame):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.error": {"param": {"self": {"JSONDumper": [[233, "    def error(self, flow):"]]}, "flow": {"?": [[233, "    def error(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper.convert_to_string": {"param": {"cls": {"<JSONDumper>": [[151, "    def convert_to_strings(cls, obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.contrib.jsondump.JSONDumper": {"var": {"fields": {"dict": [[65, "    fields = {"]]}}, "func": {"load": {"? -> None": [[187, "    def load(loader):"]]}, "websocket_end": {"(JSONDumper, ?) -> None": [[239, "    def websocket_end(self, flow):"]]}, "done": {"JSONDumper -> None": [[60, "    def done(self):"]]}, "dump": {"(JSONDumper, ?) -> None": [[170, "    def dump(self, frame):"]]}, "__init__": {"? -> ?": [[51, "    def __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/net/server_spec.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net": {"var": {"server_spec_re": {"?": [[16, "server_spec_re = re.compile("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.server_spec.par": {"var": {"scheme": {"str": [[45, "    scheme = m.group(\"scheme\") or \"https\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.server_spec": {"func": {"parse": {"str -> ServerSpec / ? -> ServerSpec": [[29, "def parse(server_spec: str) -> ServerSpec:"]]}, "parse_with_mode": {"str -> (str, ServerSpec) / ? -> (?, ServerSpec)": [[69, "def parse_with_mode(mode: str) -> Tuple[str, ServerSpec]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.server_s": {"class": {"ServerSpec": {"<ServerSpec>": [[11, "class ServerSpec(typing.NamedTuple):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.server_spec.parse": {"var": {"host": {"?": [[49, "    host = m.group(\"host\")"], [52, "        host = host[1:-1]"]]}, "m": {"?": [[40, "    m = server_spec_re.match(server_spec)"]]}, "port": {"int": [[57, "        port = int(m.group(\"port\"))"], [59, "        port = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.net.server_spec.parse_with_": {"var": {"mode": {"str": [[79, "    mode, server_spec = mode.split(\":\", maxsplit=1)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/addons/test_check_ca.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_check_ca.TestCheckCA.test_check_c": {"var": {"a": {"CheckCA": [[15, "        a = check_ca.CheckCA()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_check_ca": {"class": {"TestCheckCA": {"<TestCheckCA>": [[8, "class TestCheckCA:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.addons.test_check_ca.TestCheckCA.test_check_ca": {"var": {"msg": {"str": [[13, "        msg = 'The mitmproxy certificate authority has expired!'"]]}}, "param": {"self": {"TestCheckCA": [[12, "    async def test_check_ca(self, expired):"]]}, "expired": {"?": [[12, "    async def test_check_ca(self, expired):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/pathod/log.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.__exi": {"param": {"exc_type": {"?": [[34, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log": {"func": {"write_raw": {"(?, ?, bool) -> None / (?, [str], bool) -> None / (DummyIO, ?, bool) -> None": [[7, "def write_raw(fp, lines, timestamp=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogC": {"func": {"__exit__": {"(LogCtx, ?, ?, ?) -> None": [[34, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.write_raw": {"var": {"i": {"str": [[11, "        for i in lines:"]]}}, "param": {"fp": {"DummyIO": [[7, "def write_raw(fp, lines, timestamp=True):"]]}, "timestamp": {"bool": [[7, "def write_raw(fp, lines, timestamp=True):"]]}, "lines": {"[str]": [[7, "def write_raw(fp, lines, timestamp=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.__exit__": {"var": {"rlog": {"None": [[36, "        rlog = self.rfile.get_log() if self.rfile else None"]]}, "wlog": {"None": [[35, "        wlog = self.wfile.get_log() if self.wfile else None"]]}}, "param": {"self": {"LogCtx": [[34, "    def __exit__(self, exc_type, exc_value, traceback):"]]}, "traceback": {"?": [[34, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx": {"func": {"__call__": {"(LogCtx, ?) -> None": [[74, "    def __call__(self, line):"]]}, "suppress": {"LogCtx -> None": [[56, "    def suppress(self):"]]}, "__enter__": {"LogCtx -> LogCtx": [[27, "    def __enter__(self):"]]}, "dump": {"(LogCtx, ?, ?) -> None / (LogCtx, None, ?) -> None": [[59, "    def dump(self, data, hexdump):"]]}, "__init__": {"? -> ?": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.__call__": {"param": {"self": {"LogCtx": [[74, "    def __call__(self, line):"]]}, "line": {"?": [[74, "    def __call__(self, line):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.ConnectionLogg": {"func": {"write": {"(ConnectionLogger, ?) -> None": [[88, "    def write(self, lines):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.ConnectionLogger.ctx": {"param": {"self": {"ConnectionLogger": [[85, "    def ctx(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.ConnectionLogger.writ": {"param": {"self": {"ConnectionLogger": [[88, "    def write(self, lines):"]]}, "lines": {"?": [[88, "    def write(self, lines):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.__exit": {"param": {"exc_value": {"?": [[34, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.suppr": {"param": {"self": {"LogCtx": [[56, "    def suppress(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCt": {"param": {"hexdump": {"?": [[59, "    def dump(self, data, hexdump):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.ConnectionLogger.__init__": {"param": {"fp": {"DummyIO": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "wfile": {"DummyIO": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "timestamp": {"bool": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "self": {"ConnectionLogger": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "hex": {"bool": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "rfile": {"DummyIO": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.l": {"class": {"LogCtx": {"<LogCtx>": [[17, "class LogCtx:"]]}, "ConnectionLogger": {"<ConnectionLogger>": [[78, "class ConnectionLogger:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.ConnectionLogger": {"func": {"ctx": {"ConnectionLogger -> LogCtx": [[85, "    def ctx(self):"]]}, "__init__": {"? -> ?": [[79, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.__init__": {"param": {"fp": {"DummyIO": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "wfile": {"DummyIO": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "timestamp": {"bool": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "self": {"LogCtx": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "hex": {"bool": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}, "rfile": {"DummyIO": [[19, "    def __init__(self, fp, hex, timestamp, rfile, wfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.__enter__": {"param": {"self": {"LogCtx": [[27, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.pathod.log.LogCtx.dump": {"var": {"i": {"?": [[71, "            for i in data.split(\"\\n\"):"]]}, "line": {"?": [[61, "            for line in strutils.hexdump(data):"]]}, "data": {"None": [[64, "            data = strutils.always_str("]]}}, "param": {"self": {"LogCtx": [[59, "    def dump(self, data, hexdump):"]]}, "data": {"None": [[59, "    def dump(self, data, hexdump):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/anticache.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticache.AntiCache": {"func": {"load": {"(AntiCache, ?) -> None": [[5, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticache.AntiCache.request": {"param": {"self": {"AntiCache": [[14, "    def request(self, flow):"]]}, "flow": {"?": [[14, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticache.AntiCach": {"param": {"loader": {"?": [[5, "    def load(self, loader):"]]}}, "func": {"request": {"(AntiCache, ?) -> None": [[14, "    def request(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons": {"class": {"AntiCache": {"<AntiCache>": [[4, "class AntiCache:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.anticache.AntiCache.load": {"param": {"self": {"AntiCache": [[5, "    def load(self, loader):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/image/image_parser.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_ico": {"var": {"i": {"?": [[91, "    for i, image in enumerate(img.images):"]]}, "parts": {"[(str, str)]": [[86, "    parts = ["]]}, "img": {"?": [[85, "    img = ico.Ico(KaitaiStream(io.BytesIO(data)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_pn": {"var": {"img": {"?": [[15, "    img = png.Png(KaitaiStream(io.BytesIO(data)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_jp": {"var": {"segment": {"?": [[67, "    for segment in img.segments:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_gif": {"var": {"comment": {"?": [[56, "            comment = entry.bytes"]]}, "ext_blocks": {"[?]": [[45, "    ext_blocks = []"]]}, "img": {"?": [[37, "    img = gif.Gif(KaitaiStream(io.BytesIO(data)))"]]}, "comment_blocks": {"[?]": [[49, "    comment_blocks = []"]]}, "descriptor": {"?": [[38, "    descriptor = img.logical_screen_descriptor"]]}, "parts": {"[(str, str)]": [[39, "    parts = ["]]}, "entries": {"?": [[54, "        entries = block.body.body.entries"]]}, "entry": {"?": [[55, "        for entry in entries:"]]}, "block": {"?": [[46, "    for block in img.blocks:"], [50, "    for block in ext_blocks:"], [53, "    for block in comment_blocks:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_jpeg": {"var": {"field": {"?": [[78, "                for field in segment.data.body.data.body.ifd0.fields:"]]}, "parts": {"[(str, str)]": [[64, "    parts = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_jpe": {"var": {"img": {"?": [[63, "    img = jpeg.Jpeg(KaitaiStream(io.BytesIO(data)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.imag": {"func": {"parse_ico": {"str -> [(str, str)] / ? -> [(str, str)]": [[84, "def parse_ico(data: bytes) -> Metadata:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.im": {"func": {"parse_jpeg": {"str -> [(str, str)] / ? -> [(str, str)]": [[62, "def parse_jpeg(data: bytes) -> Metadata:"]]}, "parse_gif": {"? -> [(str, str)] / str -> [(str, str)]": [[36, "def parse_gif(data: bytes) -> Metadata:"]]}, "parse_png": {"str -> [(str, str)] / ? -> [(str, str)]": [[14, "def parse_png(data: bytes) -> Metadata:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser.parse_png": {"var": {"chunk": {"?": [[20, "    for chunk in img.chunks:"]]}, "parts": {"[(str, str)]": [[16, "    parts = ["]]}, "aspecty": {"?": [[25, "            aspecty = chunk.body.pixels_per_unit_y"]]}, "aspectx": {"?": [[24, "            aspectx = chunk.body.pixels_per_unit_x"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.image.image_parser": {"var": {"Metadata": {"?": [[11, "Metadata = typing.List[typing.Tuple[str, str]]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/web/webaddons.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons": {"class": {"WebAddon": {"<WebAddon>": [[6, "class WebAddon:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons.WebAddon": {"param": {"loader": {"?": [[7, "    def load(self, loader):"]]}}, "func": {"load": {"(WebAddon, ?) -> None": [[7, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webadd": {"func": {"open_browser": {"? -> ? / str -> ?": [[35, "def open_browser(url: str) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons.WebAddon.running": {"var": {"web_url": {"str": [[27, "            web_url = \"http://{}:{}/\".format(ctx.options.web_host, ctx.options.web_port)"]]}, "success": {"?": [[28, "            success = open_browser(web_url)"]]}}, "param": {"self": {"WebAddon": [[25, "    def running(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons.open_browser": {"var": {"b": {"?": [[55, "            b = webbrowser.get(browser)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons.open_": {"var": {"browsers": {"(str, str, str, str, str, str, str, str, str, str, str, str)": [[46, "    browsers = ("]]}, "browser": {"str": [[53, "    for browser in browsers:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons.WebAddon.load": {"param": {"self": {"WebAddon": [[7, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.webaddons.WebAddo": {"func": {"running": {"WebAddon -> None": [[25, "    def running(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-stream-modify.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-stream-modify.responseheaders": {"param": {"flow": {"?": [[20, "def responseheaders(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-stream-": {"func": {"modify": {"? -> None": [[12, "def modify(chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-stream-modify": {"func": {"responseheaders": {"? -> None": [[20, "def responseheaders(flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-stream-modify.modify": {"var": {"chunk": {"?": [[16, "    for chunk in chunks:"]]}}, "param": {"chunks": {"?": [[12, "def modify(chunks):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/web/__init__.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web": {"var": {"__all__": {"[str]": [[2, "__all__ = [\"master\"]"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-reply-from-proxy.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-reply-from-proxy": {"func": {"request": {"? -> None": [[5, "def request(flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/console/grideditor/col_text.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.EncodingMixin.get_data": {"param": {"self": {"EncodingMixin": [[33, "    def get_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Column.Edi": {"param": {"data": {"?": [[20, "    def Edit(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Column.Edit": {"param": {"self": {"Column": [[20, "    def Edit(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.EncodingMixin.get_": {"var": {"data": {"?": [[34, "        data = super().get_data()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.EncodingMixin.__init__": {"param": {"self": {"{EncodingMixin | TDisplay | TEdit}": [[29, "    def __init__(self, data, encoding_args):"]]}, "data": {"?": [[29, "    def __init__(self, data, encoding_args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Column.__init__": {"param": {"self": {"Column": [[13, "    def __init__(self, heading, encoding=\"utf8\", errors=\"surrogateescape\"):"]]}, "errors": {"str": [[13, "    def __init__(self, heading, encoding=\"utf8\", errors=\"surrogateescape\"):"]]}, "heading": {"str": [[13, "    def __init__(self, heading, encoding=\"utf8\", errors=\"surrogateescape\"):"]]}, "encoding": {"str": [[13, "    def __init__(self, heading, encoding=\"utf8\", errors=\"surrogateescape\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Column": {"func": {"Edit": {"(Column, ?) -> TEdit": [[20, "    def Edit(self, data):"]]}, "Display": {"(Column, ?) -> TDisplay": [[17, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text": {"class": {"Column": {"<Column>": [[12, "class Column(col_bytes.Column):"]]}, "EncodingMixin": {"<EncodingMixin>": [[28, "class EncodingMixin:"]]}, "TDisplay": {"<TDisplay>": [[47, "class TDisplay(EncodingMixin, col_bytes.Display):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Column.Display": {"param": {"self": {"Column": [[17, "    def Display(self, data):"]]}, "data": {"?": [[17, "    def Display(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Colum": {"func": {"__init__": {"? -> ?": [[13, "    def __init__(self, heading, encoding=\"utf8\", errors=\"surrogateescape\"):"]]}, "blank": {"Column -> str": [[23, "    def blank(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.Column.blank": {"param": {"self": {"Column": [[23, "    def blank(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_tex": {"class": {"TEdit": {"<TEdit>": [[51, "class TEdit(EncodingMixin, col_bytes.Edit):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.EncodingMixin": {"func": {"get_data": {"EncodingMixin -> ?": [[33, "    def get_data(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.EncodingMix": {"func": {"__init__": {"? -> ?": [[29, "    def __init__(self, data, encoding_args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.console.grideditor.col_text.EncodingMixin.__init": {"param": {"encoding_args": {"(str, str)": [[29, "    def __init__(self, data, encoding_args):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/coretypes/basethread.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.baset": {"class": {"BaseThread": {"<BaseThread>": [[5, "class BaseThread(threading.Thread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.basethread.BaseThread._threadinfo": {"param": {"self": {"BaseThread": [[10, "    def _threadinfo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.basethread.BaseT": {"func": {"_threadinfo": {"BaseThread -> ?": [[10, "    def _threadinfo(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.basethread.BaseThread": {"func": {"__init__": {"? -> ?": [[6, "    def __init__(self, name, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.coretypes.basethread.BaseThread.__init__": {"param": {"self": {"{<BaseThread> | BaseThread | ScriptThread}": [[6, "    def __init__(self, name, *args, **kwargs):"]]}, "name": {"{WebsocketFrameReader | _PaThread | str}": [[6, "    def __init__(self, name, *args, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/base.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.__init__": {"param": {"self": {"ServerConnectionMixin": [[96, "    def __init__(self, server_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.set_serv": {"param": {"address": {"?": [[130, "    def set_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.disconnect": {"var": {"address": {"{(str, int) | Pathoc | ServerConnection}": [[146, "        address = self.server_conn.address"]]}}, "param": {"self": {"{HttpProxy | HttpUpstreamProxy | ReverseProxy | ServerConnectionMixin | Socks5Proxy | TransparentProxy}": [[140, "    def disconnect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.Lay": {"func": {"__getattr__": {"(Layer, ?) -> None": [[69, "    def __getattr__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.Layer": {"func": {"__call__": {"Layer -> None": [[58, "    def __call__(self):"]]}, "__init__": {"? -> ?": [[31, "    def __init__(self, ctx, **mixin_args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.__check_self_connect": {"var": {"address": {"{(str, int) | Pathoc | ServerConnection}": [[108, "        address = self.server_conn.address"]]}}, "param": {"self": {"ServerConnectionMixin": [[103, "    def __check_self_connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base._LayerCodeCompletion.__init__": {"param": {"self": {"_LayerCodeCompletion": [[13, "    def __init__(self, **mixin_args):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.__init": {"param": {"server_address": {"None": [[96, "    def __init__(self, server_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.connect": {"param": {"self": {"ServerConnectionMixin": [[153, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMix": {"func": {"disconnect": {"Socks5Proxy -> None / ReverseProxy -> None / TransparentProxy -> None / HttpProxy -> None / ServerConnectionMixin -> None / HttpUpstreamProxy -> None": [[140, "    def disconnect(self):"]]}, "__init__": {"? -> ?": [[96, "    def __init__(self, server_address=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.set_server": {"param": {"self": {"ServerConnectionMixin": [[130, "    def set_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.Layer.__call__": {"param": {"self": {"Layer": [[58, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixi": {"func": {"__check_self_connect": {"ServerConnectionMixin -> None": [[103, "    def __check_self_connect(self):"]]}, "__make_server_conn": {"(Socks5Proxy, ?) -> ServerConnection / (ReverseProxy, ?) -> ServerConnection / (HttpProxy, ?) -> ServerConnection / (ServerConnectionMixin, None) -> ServerConnection / (ServerConnectionMixin, {(str, int) | Pathoc | ServerConnection}) -> ServerConnection / (HttpUpstreamProxy, ?) -> ServerConnection / (ServerConnectionMixin, ?) -> ServerConnection / (TransparentProxy, ?) -> ServerConnection": [[120, "    def __make_server_conn(self, server_address):"]]}, "connect": {"ServerConnectionMixin -> ?": [[153, "    def connect(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.__make_server_conn": {"param": {"self": {"{HttpProxy | HttpUpstreamProxy | ReverseProxy | ServerConnectionMixin | Socks5Proxy | TransparentProxy}": [[120, "    def __make_server_conn(self, server_address):"]]}, "server_address": {"{(str, int) | Pathoc | ServerConnection}": [[120, "    def __make_server_conn(self, server_address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base._LayerCodeCompletio": {"func": {"__init__": {"? -> ?": [[13, "    def __init__(self, **mixin_args):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin": {"func": {"set_server": {"(ServerConnectionMixin, ?) -> None": [[130, "    def set_server(self, address):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.Layer.__init__": {"param": {"self": {"{HttpProxy | Layer | Socks5Proxy | _HttpTransmissionLayer}": [[31, "    def __init__(self, ctx, **mixin_args):"]]}, "ctx": {"RootContext": [[31, "    def __init__(self, ctx, **mixin_args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.ServerConnectionMixin.__check": {"var": {"self_connect": {"bool": [[110, "            self_connect = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.bas": {"class": {"Layer": {"<Layer>": [[25, "class Layer(_LayerCodeCompletion):"]]}, "_LayerCodeCompletion": {"<_LayerCodeCompletion>": [[7, "class _LayerCodeCompletion:"]]}, "ServerConnectionMixin": {"<ServerConnectionMixin>": [[76, "class ServerConnectionMixin:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.base.Layer.__getattr__": {"param": {"self": {"Layer": [[69, "    def __getattr__(self, name):"]]}, "name": {"?": [[69, "    def __getattr__(self, name):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/command.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager": {"func": {"execute": {"(CommandManager, ?) -> None / (CommandManager, str) -> None": [[254, "    def execute(self, cmdstr: str) -> typing.Any:"]]}, "dump": {"(CommandManager, ?) -> None": [[268, "    def dump(self, out=sys.stdout) -> None:"]]}, "collect_commands": {"(CommandManager, TypeErrAddon) -> ? / (CommandManager, TDec) -> ? / (CommandManager, ?) -> ? / (CommandManager, TCmds) -> ?": [[147, "    def collect_commands(self, addon):"]]}, "add": {"(CommandManager, str, TAddon -> None) -> None / (CommandManager, ?, ?) -> None / (CommandManager, str, (Command, str) -> None / (TAddon, ?) -> str) -> None": [[165, "    def add(self, path: str, func: typing.Callable):"]]}, "call": {"(CommandManager, str) -> None / (CommandManager, ?) -> None": [[237, "    def call(self, command_name: str, *args: typing.Sequence[typing.Any]) -> typing.Any:"]]}, "__init__": {"? -> ?": [[143, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.__init__": {"param": {"self": {"CommandManager": [[143, "    def __init__(self, master):"]]}, "master": {"{Master | ctx}": [[143, "    def __init__(self, master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandParamete": {"func": {"__str__": {"CommandParameter -> None": [[47, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.execut": {"var": {"command_name": {"?": [[261, "        command_name, *args = ["]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.parameters": {"var": {"name": {"?": [[88, "        for name, param in self.signature.parameters.items():"]]}, "ret": {"[CommandParameter]": [[87, "        ret = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManag": {"func": {"parse_partial": {"(CommandManager, str) -> None / (CommandManager, ?) -> None": [[169, "    def parse_partial("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.c": {"class": {"Command": {"<Command>": [[54, "class Command:"]]}, "CommandParameter": {"<CommandParameter>": [[42, "class CommandParameter(typing.NamedTuple):"]]}, "CommandManager": {"<CommandManager>": [[140, "class CommandManager:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.argumen": {"param": {"type": {"?": [[304, "def argument(name, type):"]]}}, "func": {"decorator": {"? -> None": [[311, "    def decorator(f: types.FunctionType) -> types.FunctionType:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.verify_arg_signature": {"var": {"sig": {"?": [[17, "    sig = inspect.signature(f)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.collect_command": {"param": {"self": {"CommandManager": [[147, "    def collect_commands(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.command.decorato": {"func": {"wrapper": {"() -> None": [[294, "        def wrapper(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command": {"class": {"ParseResult": {"<ParseResult>": [[134, "class ParseResult(typing.NamedTuple):"]]}}, "func": {"_empty_as_none": {"? -> None": [[36, "def _empty_as_none(x: typing.Any) -> typing.Any:"]]}, "verify_arg_signature": {"(?, ?, ?) -> ? / (() -> None, [int], dict) -> ? / ((?, ?) -> None, [int], dict) -> ?": [[16, "def verify_arg_signature(f: typing.Callable, args: typing.Iterable[typing.Any], kwargs: dict) -> None:"]]}, "parsearg": {"(?, str, <int>) -> ? / (?, str, ? -> ?) -> ? / (?, ?, ?) -> ? / (CommandManager, ?, ?) -> ? / (?, str, <str>) -> ?": [[278, "def parsearg(manager: CommandManager, spec: str, argtype: type) -> typing.Any:"]]}, "argument": {"(?, ?) -> ? -> None": [[304, "def argument(name, type):"]]}, "typename": {"None -> None / <Cmd> -> str / <Path> -> str / <Data> -> str / ? -> str / <str> -> str / <CutSpec> -> str / <Flow> -> str / Choice -> str": [[24, "def typename(t: type) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command": {"func": {"parameters": {"Command -> [CommandParameter]": [[85, "    def parameters(self) -> typing.List[CommandParameter]:"]]}, "signature_help": {"Command -> None": [[92, "    def signature_help(self) -> str:"]]}, "call": {"(Command, ?) -> None / (Command, [str]) -> list": [[116, "    def call(self, args: typing.Sequence[str]) -> typing.Any:"]]}, "return_type": {"Command -> None": [[81, "    def return_type(self) -> typing.Optional[typing.Type]:"]]}, "__init__": {"? -> ?": [[60, "    def __init__(self, manager: \"CommandManager\", name: str, func: typing.Callable) -> None:"]]}, "prepare_args": {"(Command, ?) -> ? / (Command, [str]) -> ?": [[100, "    def prepare_args(self, args: typing.Sequence[str]) -> inspect.BoundArguments:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.parameter": {"param": {"self": {"Command": [[85, "    def parameters(self) -> typing.List[CommandParameter]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.signature_help": {"var": {"ret": {"None": [[95, "            ret = f\" -> {typename(self.return_type)}\""]], "str": [[97, "            ret = \"\""]]}}, "param": {"self": {"Command": [[92, "    def signature_help(self) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandParameter.__str__": {"param": {"self": {"CommandParameter": [[47, "    def __str__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.collect_commands": {"var": {"i": {"str": [[148, "        for i in dir(addon):"]]}, "o": {"?": [[150, "                o = getattr(addon, i)"]]}}, "param": {"addon": {"{TCmds | TDec | TypeErrAddon}": [[147, "    def collect_commands(self, addon):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.parsearg": {"var": {"t": {"{_ArgType | _BoolType | _ChoiceType | _CmdType | _CutSpecType | _DataType | _FlowType | _FlowsType | _IntType | _PathType | _StrSeqType | _StrType}": [[282, "    t = mitmproxy.types.CommandTypes.get(argtype, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.argument": {"param": {"name": {"?": [[304, "def argument(name, type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.call": {"var": {"typ": {"{_ArgType | _BoolType | _ChoiceType | _CmdType | _CutSpecType | _DataType | _FlowType | _FlowsType | _IntType | _PathType | _StrSeqType | _StrType}": [[125, "        typ = mitmproxy.types.CommandTypes.get(self.return_type)"]]}, "ret": {"list": [[122, "        ret = self.func(*bound_args.args, **bound_args.kwargs)"]]}, "bound_args": {"?": [[121, "        bound_args = self.prepare_args(args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.execute": {"var": {"parts": {"?": [[258, "        parts, _ = self.parse_partial(cmdstr)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.typename": {"var": {"to": {"{_ArgType | _BoolType | _ChoiceType | _CmdType | _CutSpecType | _DataType | _FlowType | _FlowsType | _IntType | _PathType | _StrSeqType | _StrType}": [[30, "    to = mitmproxy.types.CommandTypes.get(t, None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.parse_part": {"var": {"command_args_following": {"bool": [[209, "            command_args_following = ("]]}, "valid": {"?": [[218, "            valid = False"], [223, "                    valid = False"], [225, "                    valid = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.__init__": {"var": {"txt": {"?": [[67, "            txt = func.__doc__.strip()"]]}, "name": {"?": [[73, "        for name, parameter in self.signature.parameters.items():"]]}, "t": {"?": [[74, "            t = parameter.annotation"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.return_typ": {"param": {"self": {"Command": [[81, "    def return_type(self) -> typing.Optional[typing.Type]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.signature_hel": {"var": {"params": {"str": [[93, "        params = \" \".join(str(param) for param in self.parameters)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.comman": {"func": {"decorator": {"? -> () -> None": [[292, "    def decorator(function):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.collect": {"var": {"is_command": {"int": [[153, "                    is_command = isinstance(getattr(o, \"command_name\", None), str)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy": {"func": {"command": {"None -> ? -> () -> None": [[291, "def command(name: typing.Optional[str] = None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.dump": {"var": {"c": {"<list>": [[271, "        for c in cmds:"]]}, "hl": {"str": [[272, "            for hl in (c.help or \"\").splitlines():"]]}, "cmds": {"list": [[269, "        cmds = list(self.commands.values())"]]}}, "param": {"self": {"CommandManager": [[268, "    def dump(self, out=sys.stdout) -> None:"]]}, "out": {"?": [[268, "    def dump(self, out=sys.stdout) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManage": {"func": {"call_strings": {"(CommandManager, ?, ?) -> None": [[245, "    def call_strings(self, command_name: str, args: typing.Sequence[str]) -> typing.Any:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.prepare_args": {"var": {"expected": {"None": [[104, "            expected = f'Expected: {str(self.signature.parameters)}'"]]}, "received": {"None": [[105, "            received = f'Received: {str(args)}'"]]}, "name": {"?": [[108, "        for name, value in bound_arguments.arguments.items():"]]}, "convert_to": {"?": [[109, "            convert_to = self.signature.parameters[name].annotation"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.parse_partia": {"var": {"self": {"CommandManager": [[170, "            self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.Command.prep": {"var": {"bound_arguments": {"?": [[102, "            bound_arguments = self.signature.bind(*args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.CommandManager.parse_partial": {"var": {"next_params": {"?": [[213, "                next_params = self.commands[part].parameters + next_params[1:]"]]}, "arg_is_unknown_command": {"bool": [[206, "            arg_is_unknown_command = ("]]}, "cmdstr": {"str": [[171, "            cmdstr: str"]]}, "to": {"{_ArgType | _BoolType | _ChoiceType | _CmdType | _CutSpecType | _DataType | _FlowType | _FlowsType | _IntType | _PathType | _StrSeqType | _StrType}": [[217, "            to = mitmproxy.types.CommandTypes.get(expected.type, None)"]]}, "part": {"?": [[185, "        for part in parts:"]]}, "expected": {"CommandParameter": [[201, "                expected = CommandParameter(\"\", mitmproxy.types.Unknown)"]], "?": [[199, "                expected = next_params.pop(0)"]]}, "arg_is_known_command": {"bool": [[203, "            arg_is_known_command = ("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.command.command.decorator": {"param": {"function": {"?": [[292, "    def decorator(function):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/addons/readfile.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFil": {"func": {"reading": {"ReadFile -> ?": [[83, "    def reading(self) -> bool:"]]}, "configure": {"(ReadFile, ?) -> None": [[31, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.doread": {"param": {"self": {"{ReadFile | ReadFileStdin}": [[69, "    async def doread(self, rfile):"]]}, "rfile": {"?": [[69, "    async def doread(self, rfile):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFi": {"param": {"loader": {"?": [[21, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.configure": {"var": {"filt": {"None": [[33, "            filt = None"], [35, "                filt = flowfilter.parse(ctx.options.readfile_filter)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.configur": {"param": {"self": {"ReadFile": [[31, "    def configure(self, updated):"]]}, "updated": {"?": [[31, "    def configure(self, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.load": {"param": {"self": {"ReadFile": [[21, "    def load(self, loader):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile": {"func": {"load": {"(ReadFile, ?) -> None": [[21, "    def load(self, loader):"]]}, "running": {"ReadFile -> None / ReadFileStdin -> None": [[78, "    def running(self):"]]}, "__init__": {"? -> ?": [[17, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.reading": {"param": {"self": {"ReadFile": [[83, "    def reading(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.load_flows": {"var": {"freader": {"FlowReader": [[44, "        freader = io.FlowReader(fo)"]]}, "cnt": {"int": [[43, "        cnt = 0"]]}, "flow": {"?": [[46, "            for flow in freader.stream():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.__init__": {"param": {"self": {"{ReadFile | ReadFileStdin}": [[17, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.load_flows_from_": {"var": {"path": {"?": [[61, "        path = os.path.expanduser(path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readf": {"class": {"ReadFileStdin": {"<ReadFileStdin>": [[87, "class ReadFileStdin(ReadFile):"]]}, "ReadFile": {"<ReadFile>": [[13, "class ReadFile:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.addons.readfile.ReadFile.running": {"param": {"self": {"{ReadFile | ReadFileStdin}": [[78, "    def running(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/http-modify-query-string.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.http-modify-query-string": {"func": {"request": {"? -> None": [[5, "def request(flow: http.HTTPFlow) -> None:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/tools/web/master.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_remove": {"param": {"flow": {"?": [[63, "    def _sig_view_remove(self, view, flow, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_settings_update": {"param": {"options": {"?": [[97, "    def _sig_settings_update(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_updat": {"param": {"self": {"WebMaster": [[56, "    def _sig_view_update(self, view, flow):"]]}, "view": {"?": [[56, "    def _sig_view_update(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMa": {"func": {"_sig_events_refresh": {"(WebMaster, ?) -> None": [[83, "    def _sig_events_refresh(self, event_store):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_options_update": {"var": {"options_dict": {"dict": [[90, "        options_dict = optmanager.dump_dicts(options, updated)"]]}}, "param": {"options": {"?": [[89, "    def _sig_options_update(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_remov": {"param": {"index": {"?": [[63, "    def _sig_view_remove(self, view, flow, index):"]]}, "self": {"WebMaster": [[63, "    def _sig_view_remove(self, view, flow, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_events_refresh": {"param": {"event_store": {"?": [[83, "    def _sig_events_refresh(self, event_store):"]]}, "self": {"WebMaster": [[83, "    def _sig_events_refresh(self, event_store):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster": {"func": {"_sig_events_add": {"(WebMaster, ?, ?) -> None": [[76, "    def _sig_events_add(self, event_store, entry: log.LogEntry):"]]}, "_sig_settings_update": {"(WebMaster, ?, ?) -> None": [[97, "    def _sig_settings_update(self, options, updated):"]]}, "_sig_view_update": {"(WebMaster, ?, ?) -> None": [[56, "    def _sig_view_update(self, view, flow):"]]}, "_sig_view_add": {"(WebMaster, ?, ?) -> None": [[49, "    def _sig_view_add(self, view, flow):"]]}, "_sig_options_update": {"(WebMaster, ?, ?) -> None": [[89, "    def _sig_options_update(self, options, updated):"]]}, "__init__": {"? -> ?": [[19, "    def __init__(self, options, with_termlog=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_update": {"param": {"flow": {"?": [[56, "    def _sig_view_update(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_settings_updat": {"param": {"self": {"WebMaster": [[97, "    def _sig_settings_update(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster.run": {"var": {"iol": {"?": [[106, "        iol = tornado.ioloop.IOLoop.instance()"]]}, "web_url": {"str": [[109, "        web_url = \"http://{}:{}/\".format(self.options.web_host, self.options.web_port)"]]}, "http_server": {"?": [[107, "        http_server = tornado.httpserver.HTTPServer(self.app)"]]}}, "param": {"self": {"WebMaster": [[104, "    def run(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster.__in": {"param": {"with_termlog": {"?": [[19, "    def __init__(self, options, with_termlog=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_remo": {"param": {"view": {"?": [[63, "    def _sig_view_remove(self, view, flow, index):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.m": {"class": {"WebMaster": {"<WebMaster>": [[18, "class WebMaster(master.Master):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaste": {"func": {"run": {"WebMaster -> None": [[104, "    def run(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_options_updat": {"param": {"self": {"WebMaster": [[89, "    def _sig_options_update(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMast": {"func": {"_sig_view_remove": {"(WebMaster, ?, ?, ?) -> None": [[63, "    def _sig_view_remove(self, view, flow, index):"]]}, "_sig_view_refresh": {"(WebMaster, ?) -> None": [[70, "    def _sig_view_refresh(self, view):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_options_": {"param": {"updated": {"?": [[89, "    def _sig_options_update(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster.__init__": {"param": {"self": {"WebMaster": [[19, "    def __init__(self, options, with_termlog=True):"]]}, "options": {"Options": [[19, "    def __init__(self, options, with_termlog=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_settings_": {"param": {"updated": {"?": [[97, "    def _sig_settings_update(self, options, updated):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_add": {"param": {"self": {"WebMaster": [[49, "    def _sig_view_add(self, view, flow):"]]}, "flow": {"?": [[49, "    def _sig_view_add(self, view, flow):"]]}, "view": {"?": [[49, "    def _sig_view_add(self, view, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.tools.web.master.WebMaster._sig_view_refresh": {"param": {"self": {"WebMaster": [[70, "    def _sig_view_refresh(self, view):"]]}, "view": {"?": [[70, "    def _sig_view_refresh(self, view):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/test/mitmproxy/contentviews/image/test_image_parser.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_image_parser": {"func": {"test_ico": {"(?, ?, ?) -> None": [[189, "def test_ico(filename, metadata, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_im": {"func": {"test_parse_png": {"(?, ?, ?) -> None": [[73, "def test_parse_png(filename, metadata, tdata):"]]}, "test_parse_gif": {"(?, ?, ?) -> None": [[103, "def test_parse_gif(filename, metadata, tdata):"]]}, "test_parse_jpeg": {"(?, ?, ?) -> None": [[166, "def test_parse_jpeg(filename, metadata, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_image_parser.test_parse_jpeg": {"param": {"tdata": {"?": [[166, "def test_parse_jpeg(filename, metadata, tdata):"]]}, "metadata": {"?": [[166, "def test_parse_jpeg(filename, metadata, tdata):"]]}, "filename": {"?": [[166, "def test_parse_jpeg(filename, metadata, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_image_parser.test_parse_png": {"param": {"tdata": {"?": [[73, "def test_parse_png(filename, metadata, tdata):"]]}, "metadata": {"?": [[73, "def test_parse_png(filename, metadata, tdata):"]]}, "filename": {"?": [[73, "def test_parse_png(filename, metadata, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_image_parser.test_parse_gif": {"param": {"tdata": {"?": [[103, "def test_parse_gif(filename, metadata, tdata):"]]}, "metadata": {"?": [[103, "def test_parse_gif(filename, metadata, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_image_parser.test_parse_g": {"param": {"filename": {"?": [[103, "def test_parse_gif(filename, metadata, tdata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.test.mitmproxy.contentviews.image.test_image_parser.test_ico": {"param": {"tdata": {"?": [[189, "def test_ico(filename, metadata, tdata):"]]}, "metadata": {"?": [[189, "def test_ico(filename, metadata, tdata):"]]}, "filename": {"?": [[189, "def test_ico(filename, metadata, tdata):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/contentviews/xml_html.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.indent_tex": {"var": {"dedented": {"?": [[123, "    dedented = textwrap.dedent(\" \" * 32 + data).strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.ElementStack": {"func": {"push_tag": {"(ElementStack, Tag -> str) -> None / (ElementStack, ?) -> None": [[156, "    def push_tag(self, tag: str):"]]}, "__init__": {"? -> ?": [[152, "    def __init__(self):"]]}, "pop_tag": {"(ElementStack, ?) -> None / (ElementStack, Tag -> str) -> None": [[163, "    def pop_tag(self, tag: str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html": {"var": {"REGEX_TAG": {"?": [[21, "REGEX_TAG = re.compile(r\"[a-zA-Z0-9._:\\-]+(?!=)\")"]]}, "NO_INDENT_TAGS": {"[str]": [[27, "NO_INDENT_TAGS = {\"xml\", \"doctype\", \"html\"}"]]}, "HTML_VOID_ELEMENTS": {"[str]": [[23, "HTML_VOID_ELEMENTS = {"]]}, "INDENT": {"int": [[28, "INDENT = 2"]]}}, "class": {"Text": {"<Text>": [[42, "class Text(Token):"]]}, "Token": {"<Token>": [[31, "class Token:"]]}, "Tag": {"<Tag>": [[48, "class Tag(Token):"]]}}, "func": {"indent_text": {"(?, ?) -> None / (str, str) -> None": [[117, "def indent_text(data: str, prefix: str) -> str:"]]}, "tokenize": {"? -> None / str -> None": [[88, "def tokenize(data: str) -> Iterable[Token]:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.tokenize": {"var": {"i": {"int": [[91, "    i = 0"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.tokenize.readuntil": {"var": {"end": {"int": [[95, "        end = data.find(char, start)"], [97, "            end = len(data)"]]}, "ret": {"str": [[98, "        ret = data[i:end + include]"]]}}, "param": {"char": {"str": [[93, "    def readuntil(char, start, include=1):"]]}, "start": {"int": [[93, "    def readuntil(char, start, include=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.tokenize.readunt": {"param": {"include": {"int": [[93, "    def readuntil(char, start, include=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.is_opening": {"param": {"self": {"Tag": [[74, "    def is_opening(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.don": {"param": {"self": {"Tag": [[78, "    def done(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.tokeniz": {"var": {"token": {"Text": [[112, "                token = Text(\"\")"]], "Tag": [[107, "            token = Tag(\"\")"]]}}, "func": {"readuntil": {"(str, int, int) -> str": [[93, "    def readuntil(char, start, include=1):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.ViewXmlHtm": {"func": {"__call__": {"(ViewXmlHtml, ?) -> (str, None)": [[219, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.tag": {"var": {"t": {"?": [[51, "        t = REGEX_TAG.search(self.data)"]]}}, "param": {"self": {"Tag": [[50, "    def tag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.is_closing": {"param": {"self": {"Tag": [[65, "    def is_closing(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.ViewXmlHtml": {"var": {"content_types": {"[str]": [[217, "    content_types = [\"text/xml\", \"text/html\"]"]]}, "name": {"str": [[216, "    name = \"XML/HTML\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.ElementStack.__init__": {"param": {"self": {"ElementStack": [[152, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.is_self_closing": {"param": {"self": {"Tag": [[69, "    def is_self_closing(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.is_cdata": {"param": {"self": {"Tag": [[61, "    def is_cdata(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.ElementStack.pop_tag": {"var": {"remove_indent": {"int": [[165, "            remove_indent = 0"]]}, "t": {"None": [[167, "                t = self.open_tags.pop()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.format_xml": {"var": {"prev2": {"?": [[182, "    for prev2, prev1, token, next1, next2 in sliding_window.window(tokens, 2, 2):"]]}, "context": {"ElementStack": [[180, "    context = ElementStack()"]]}, "out": {"?": [[178, "    out = io.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag.is_comment": {"param": {"self": {"Tag": [[57, "    def is_comment(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Tag": {"func": {"is_comment": {"Tag -> int": [[57, "    def is_comment(self) -> bool:"]]}, "done": {"Tag -> int": [[78, "    def done(self):"]]}, "is_cdata": {"Tag -> int": [[61, "    def is_cdata(self) -> bool:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Token": {"func": {"__repr__": {"Token -> str": [[35, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Ta": {"func": {"is_self_closing": {"Tag -> ?": [[69, "    def is_self_closing(self):"]]}, "is_closing": {"Tag -> int": [[65, "    def is_closing(self):"]]}, "is_opening": {"Tag -> ?": [[74, "    def is_opening(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Toke": {"func": {"__init__": {"? -> ?": [[32, "    def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Token.__repr__": {"param": {"self": {"Token": [[35, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_h": {"class": {"ElementStack": {"<ElementStack>": [[147, "class ElementStack:"]]}, "ViewXmlHtml": {"<ViewXmlHtml>": [[215, "class ViewXmlHtml(base.View):"]]}}, "func": {"format_xml": {"? -> None / None -> None": [[177, "def format_xml(tokens: Iterable[Token]) -> str:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.T": {"func": {"text": {"Text -> str": [[44, "    def text(self):"]]}, "tag": {"Tag -> str": [[50, "    def tag(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.ViewXmlHtml.__call__": {"var": {"tokens": {"None": [[225, "        tokens = tokenize(data)"]]}, "data": {"?": [[224, "        data = data.decode(\"utf8\", \"xmlcharrefreplace\")"]]}, "t": {"str": [[232, "            t = \"HTML\""], [234, "            t = \"XML\""]]}, "pretty": {"None": [[230, "        pretty = base.format_text(format_xml(tokens))"]]}}, "param": {"self": {"ViewXmlHtml": [[219, "    def __call__(self, data, **metadata):"]]}, "data": {"?": [[219, "    def __call__(self, data, **metadata):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Token.__init__": {"param": {"self": {"{Tag | Text | Token}": [[32, "    def __init__(self, data):"]]}, "data": {"str": [[32, "    def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_html.Text.text": {"param": {"self": {"Text": [[44, "    def text(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.contentviews.xml_htm": {"func": {"is_inline_text": {"(?, ?, ?) -> None / (?, ?, Tag) -> None / (?, Text, ?) -> None / (Tag, ?, ?) -> None": [[127, "def is_inline_text(a: Optional[Token], b: Optional[Token], c: Optional[Token]) -> bool:"]]}, "is_inline": {"(?, ?, ?, ?, ?) -> None / (?, ?, Tag, ?, ?) -> None / (?, ?, Text, ?, ?) -> None": [[134, "def is_inline(prev2: Optional[Token], prev1: Optional[Token], t: Optional[Token], next1: Optional[Token], next2: Optional[Token]) -> bool:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/examples/addons/events-websocket-specific.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-websocket-specific.Ev": {"func": {"websocket_handshake": {"(Events, ?) -> None": [[8, "    def websocket_handshake(self, flow: mitmproxy.http.HTTPFlow):"]]}, "websocket_end": {"(Events, ?) -> None": [[34, "    def websocket_end(self, flow: mitmproxy.websocket.WebSocketFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-websocket-specific.Even": {"func": {"websocket_start": {"(Events, ?) -> None": [[16, "    def websocket_start(self, flow: mitmproxy.websocket.WebSocketFlow):"]]}, "websocket_message": {"(Events, ?) -> None": [[21, "    def websocket_message(self, flow: mitmproxy.websocket.WebSocketFlow):"]]}, "websocket_error": {"(Events, ?) -> None": [[29, "    def websocket_error(self, flow: mitmproxy.websocket.WebSocketFlow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.examples.addons.events-websocket-specific": {"class": {"Events": {"<Events>": [[6, "class Events:"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/mitmproxy/mitmproxy/proxy/protocol/http2.py": {".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2L": {"func": {"_handle_priority_updated": {"(Http2Layer, ?, ?) -> None / (Http2Layer, None, ?) -> None": [[290, "    def _handle_priority_updated(self, eid, event):"]]}, "next_layer": {"Http2Layer -> None": [[136, "    def next_layer(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer": {"class": {"Message": {"<Message>": [[400, "    class Message:"]]}}, "func": {"data_queue": {"Http2SingleStreamLayer -> ?": [[454, "    def data_queue(self):"]]}, "disconnect": {"Http2SingleStreamLayer -> None": [[442, "    def disconnect(self):  # pragma: no cover"]]}, "queued_data_length": {"? -> ?": [[468, "    def queued_data_length(self, v):"]], "Http2SingleStreamLayer -> int": [[461, "    def queued_data_length(self):"]]}, "check_close_connection": {"(Http2SingleStreamLayer, ?) -> ?": [[448, "    def check_close_connection(self, flow):"]]}, "kill": {"Http2SingleStreamLayer -> None": [[431, "    def kill(self):"]]}, "connect": {"Http2SingleStreamLayer -> None": [[439, "    def connect(self):  # pragma: no cover"]]}, "__call__": {"Http2SingleStreamLayer -> None": [[700, "    def __call__(self):  # pragma: no cover"]]}, "__init__": {"? -> ?": [[410, "    def __init__(self, ctx, h2_connection, stream_id: int, request_headers: mitmproxy.net.http.Headers) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_trailer": {"param": {"self": {"Http2Layer": [[236, "    def _handle_trailers(self, eid, event, is_server, other_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_priority_updated": {"param": {"self": {"Http2Layer": [[290, "    def _handle_priority_updated(self, eid, event):"]]}, "event": {"?": [[290, "    def _handle_priority_updated(self, eid, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._initiate_server_": {"var": {"config": {"?": [[120, "            config = h2.config.H2Configuration("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._cleanup_streams": {"var": {"death_time": {"int": [[334, "        death_time = time.time() - 10"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.ki": {"param": {"self": {"Http2SingleStreamLayer": [[431, "    def kill(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_trailer": {"param": {"self": {"Http2SingleStreamLayer": [[618, "    def send_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_stream_res": {"param": {"other_conn": {"?": [[225, "    def _handle_stream_reset(self, eid, event, is_server, other_conn):"]]}, "event": {"?": [[225, "    def _handle_stream_reset(self, eid, event, is_server, other_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.Message": {"func": {"__init__": {"? -> ?": [[401, "        def __init__(self, headers=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Lay": {"class": {"H2ConnLogger": {"<H2ConnLogger>": [[91, "    class H2ConnLogger:"]]}}, "func": {"_map_depends_on_stream_id": {"(Http2Layer, ?, ?) -> int": [[321, "    def _map_depends_on_stream_id(self, stream_id, depends_on):"]]}, "_handle_connection_terminated": {"(Http2Layer, ?, bool) -> None / (Http2Layer, ?, ?) -> None": [[246, "    def _handle_connection_terminated(self, event, is_server):"]]}, "_handle_request_received": {"(Http2Layer, None, ?) -> None / (Http2Layer, ?, ?) -> None": [[179, "    def _handle_request_received(self, eid, event):"]]}, "_cleanup_streams": {"Http2Layer -> None": [[333, "    def _cleanup_streams(self):"]]}, "_initiate_server_conn": {"Http2Layer -> None": [[118, "    def _initiate_server_conn(self):"]]}, "_handle_stream_reset": {"(Http2Layer, None, ?, bool, ?) -> None / (Http2Layer, None, ?, ?, ?) -> None / (Http2Layer, ?, ?, ?, ?) -> None": [[225, "    def _handle_stream_reset(self, eid, event, is_server, other_conn):"]]}, "_handle_trailers": {"(Http2Layer, ?, ?, ?, ?) -> None / (Http2Layer, None, ?, ?, ?) -> None / (Http2Layer, None, ?, bool, ?) -> None": [[236, "    def _handle_trailers(self, eid, event, is_server, other_conn):"]]}, "_handle_data_received": {"(Http2Layer, ?, ?, ?) -> None / (Http2Layer, None, ?, ?) -> None": [[200, "    def _handle_data_received(self, eid, event, source_conn):"]]}, "_handle_remote_settings_changed": {"(Http2Layer, ?, ?) -> None": [[241, "    def _handle_remote_settings_changed(self, event, other_conn):"]]}, "_handle_stream_ended": {"(Http2Layer, ?) -> None / (Http2Layer, None) -> None": [[220, "    def _handle_stream_ended(self, eid):"]]}, "_handle_response_received": {"(Http2Layer, None, ?) -> None / (Http2Layer, ?, ?) -> None": [[192, "    def _handle_response_received(self, eid, event):"]]}, "_handle_pushed_stream_received": {"(Http2Layer, ?) -> None": [[269, "    def _handle_pushed_stream_received(self, event):"]]}, "_kill_all_streams": {"Http2Layer -> None": [[342, "    def _kill_all_streams(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogger.debu": {"var": {"msg": {"str": [[97, "            msg = \"H2Conn {}: {}\".format(self.name, fmtstr % args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.set_server": {"param": {"self": {"Http2SingleStreamLayer": [[445, "    def set_server(self, address):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_trail": {"param": {"is_server": {"bool": [[236, "    def _handle_trailers(self, eid, event, is_server, other_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_pushed_stream_received": {"var": {"layer": {"Http2SingleStreamLayer": [[279, "        layer = Http2SingleStreamLayer(self, self.connections[self.client_conn], event.pushed_stream_id, headers)"]]}}, "param": {"self": {"Http2Layer": [[269, "    def _handle_pushed_stream_received(self, event):"]]}, "event": {"?": [[269, "    def _handle_pushed_stream_received(self, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogger.debug": {"param": {"fmtstr": {"?": [[96, "        def debug(self, fmtstr, *args):"]]}, "self": {"H2ConnLogger": [[96, "        def debug(self, fmtstr, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._initiate_server_conn": {"param": {"self": {"Http2Layer": [[118, "    def _initiate_server_conn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_connection_terminated": {"param": {"self": {"Http2Layer": [[246, "    def _handle_connection_terminated(self, event, is_server):"]]}, "event": {"?": [[246, "    def _handle_connection_terminated(self, event, is_server):"]]}, "is_server": {"bool": [[246, "    def _handle_connection_terminated(self, event, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.detect_zombie_stream.wrapper": {"param": {"self": {"?": [[389, "    def wrapper(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_": {"var": {"headers": {"?": [[571, "        headers = request.headers.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_response_trailer": {"param": {"self": {"Http2SingleStreamLayer": [[686, "    def send_response_trailers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_trail": {"param": {"request": {"?": [[618, "    def send_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogger": {"func": {"debug": {"(H2ConnLogger, ?) -> None": [[96, "        def debug(self, fmtstr, *args):"]]}, "__init__": {"? -> ?": [[92, "        def __init__(self, name, log):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_request_trail": {"param": {"request": {"?": [[542, "    def read_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_response_": {"var": {"headers": {"?": [[634, "        headers = self.response_message.headers.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.detect_zombie_stream.wrapp": {"var": {"result": {"?": [[391, "        result = func(self, *args, **kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.SafeH2Connecti": {"func": {"safe_send_body": {"(SafeH2Connection, ?, ?, ?, ?) -> ?": [[58, "    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.disconnect": {"param": {"self": {"Http2SingleStreamLayer": [[442, "    def disconnect(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_request_body": {"param": {"self": {"Http2SingleStreamLayer": [[525, "    def read_request_body(self, request):"]]}, "request": {"?": [[525, "    def read_request_body(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_response_header": {"var": {"status_code": {"int": [[633, "        status_code = int(self.response_message.headers.get(':status', 502))"]]}}, "param": {"self": {"Http2SingleStreamLayer": [[628, "    def read_response_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogger.trace": {"param": {"fmtstr": {"?": [[100, "        def trace(self, fmtstr, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_hea": {"var": {"priority_depends_on": {"None": [[577, "        priority_depends_on = None"]], "?": [[586, "                priority_depends_on = self._map_depends_on_stream_id(self.server_stream_id, self.priority_depends_on)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer._send_trailers": {"param": {"conn": {"?": [[689, "    def _send_trailers(self, conn, trailers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_response_": {"var": {"headers": {"?": [[667, "        headers = response.headers.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_headers": {"var": {"priority_weight": {"None": [[578, "        priority_weight = None"]], "?": [[587, "                priority_weight = self.priority_weight"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_response_header": {"param": {"self": {"Http2SingleStreamLayer": [[666, "    def send_response_headers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogg": {"func": {"trace": {"(H2ConnLogger, ?) -> None": [[100, "        def trace(self, fmtstr, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_response_head": {"param": {"response": {"?": [[666, "    def send_response_headers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_response_trail": {"param": {"request": {"?": [[662, "    def read_response_trailers(self, request, response):"]]}, "response": {"?": [[662, "    def read_response_trailers(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._complete_handshak": {"var": {"preamble": {"?": [[131, "        preamble = self.client_conn.rfile.read(24)"]]}}, "param": {"self": {"Http2Layer": [[130, "    def _complete_handshake(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLa": {"func": {"send_request_body": {"(Http2SingleStreamLayer, ?, ?) -> None / (Http2SingleStreamLayer, ?, [?]) -> None": [[605, "    def send_request_body(self, request, chunks):"]]}, "send_response_body": {"(Http2SingleStreamLayer, ?, ?) -> None": [[677, "    def send_response_body(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLay": {"func": {"read_response_headers": {"Http2SingleStreamLayer -> HTTPResponse": [[628, "    def read_response_headers(self):"]]}, "send_request": {"(Http2SingleStreamLayer, ?) -> None": [[622, "    def send_request(self, request):"]]}, "read_response_trailers": {"(Http2SingleStreamLayer, ?, ?) -> ?": [[662, "    def read_response_trailers(self, request, response):"]]}, "read_request_trailers": {"(Http2SingleStreamLayer, ?) -> ?": [[542, "    def read_request_trailers(self, request):"]]}, "read_request_headers": {"(Http2SingleStreamLayer, ?) -> HTTPRequest": [[502, "    def read_request_headers(self, flow):"]]}, "send_response_headers": {"(Http2SingleStreamLayer, ?) -> None": [[666, "    def send_response_headers(self, response):"]]}, "send_response_trailers": {"(Http2SingleStreamLayer, ?) -> None": [[686, "    def send_response_trailers(self, response):"]]}, "trailers": {"? -> ?": [[488, "    def trailers(self, v):"]], "Http2SingleStreamLayer -> ?": [[481, "    def trailers(self):"]]}, "raise_zombie": {"(Http2SingleStreamLayer, None) -> None": [[494, "    def raise_zombie(self, pre_command=None):  # pragma: no cover"]]}, "send_request_trailers": {"(Http2SingleStreamLayer, ?) -> None": [[618, "    def send_request_trailers(self, request):"]]}, "set_server": {"(Http2SingleStreamLayer, ?) -> None": [[445, "    def set_server(self, address):  # pragma: no cover"]]}, "send_request_headers": {"(Http2SingleStreamLayer, ?) -> ?": [[546, "    def send_request_headers(self, request):"]]}, "stream_ended": {"Http2SingleStreamLayer -> ?": [[472, "    def stream_ended(self):"]]}, "_send_trailers": {"(Http2SingleStreamLayer, ?, ?) -> None": [[689, "    def _send_trailers(self, conn, trailers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.queued_data_length": {"param": {"self": {"Http2SingleStreamLayer": [[461, "    def queued_data_length(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_stream_ended": {"param": {"self": {"Http2Layer": [[220, "    def _handle_stream_ended(self, eid):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._map_depends_on": {"param": {"stream_id": {"?": [[321, "    def _map_depends_on_stream_id(self, stream_id, depends_on):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_response_trailer": {"param": {"self": {"Http2SingleStreamLayer": [[662, "    def read_response_trailers(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._map_depends_on_stream_i": {"var": {"mapped_depends_on": {"?": [[322, "        mapped_depends_on = depends_on"], [326, "            mapped_depends_on = self.streams[mapped_depends_on].server_stream_id"]]}}, "param": {"depends_on": {"?": [[321, "    def _map_depends_on_stream_id(self, stream_id, depends_on):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_priority_updat": {"param": {"eid": {"None": [[290, "    def _handle_priority_updated(self, eid, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.raise_zombi": {"param": {"self": {"Http2SingleStreamLayer": [[494, "    def raise_zombie(self, pre_command=None):  # pragma: no cover"]]}, "pre_command": {"None": [[494, "    def raise_zombie(self, pre_command=None):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_request_receiv": {"var": {"headers": {"Headers": [[180, "        headers = mitmproxy.net.http.Headers([[k, v] for k, v in event.headers])"]]}}, "param": {"eid": {"None": [[179, "    def _handle_request_received(self, eid, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handl": {"var": {"other_stream_id": {"?": [[229, "                other_stream_id = self.streams[eid].client_stream_id"], [231, "                other_stream_id = self.streams[eid].server_stream_id"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.__call__": {"var": {"conns": {"[?]": [[350, "        conns = [c.connection for c in self.connections.keys()]"]]}, "r": {"[?]": [[354, "                r = tcp.ssl_read_select(conns, 0.1)"]]}, "event": {"?": [[375, "                        for event in incoming_events:"]]}, "conn": {"?": [[355, "                for conn in r:"]]}}, "param": {"self": {"Http2Layer": [[346, "    def __call__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.next_layer": {"param": {"self": {"Http2Layer": [[136, "    def next_layer(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer": {"func": {"__call__": {"Http2Layer -> ?": [[346, "    def __call__(self):"]]}, "_handle_event": {"(Http2Layer, ?, ?, ?, bool) -> None / (Http2Layer, ?, ?, ?, ?) -> None": [[141, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}, "_complete_handshake": {"Http2Layer -> None": [[130, "    def _complete_handshake(self):"]]}, "__init__": {"? -> ?": [[103, "    def __init__(self, ctx, mode: str) -> None:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_data_received": {"var": {"bsl": {"int": [[201, "        bsl = human.parse_size(self.config.options.body_size_limit)"]]}}, "param": {"self": {"Http2Layer": [[200, "    def _handle_data_received(self, eid, event, source_conn):"]]}, "event": {"?": [[200, "    def _handle_data_received(self, eid, event, source_conn):"]]}, "source_conn": {"?": [[200, "    def _handle_data_received(self, eid, event, source_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_stream_en": {"param": {"eid": {"None": [[220, "    def _handle_stream_ended(self, eid):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_trailers": {"param": {"other_conn": {"?": [[236, "    def _handle_trailers(self, eid, event, is_server, other_conn):"]]}, "eid": {"None": [[236, "    def _handle_trailers(self, eid, event, is_server, other_conn):"]]}, "event": {"?": [[236, "    def _handle_trailers(self, eid, event, is_server, other_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLaye": {"func": {"run": {"Http2SingleStreamLayer -> ?": [[703, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._kill_all_": {"var": {"stream": {"?": [[343, "        for stream in self.streams.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._cleanup_stream": {"param": {"self": {"Http2Layer": [[333, "    def _cleanup_streams(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.SafeH2Connectio": {"func": {"safe_update_settings": {"(SafeH2Connection, ?) -> None": [[47, "    def safe_update_settings(self, new_settings: Dict[int, Any]):"]]}, "safe_send_headers": {"(SafeH2Connection, ?, ?, ?) -> None": [[52, "    def safe_send_headers(self, raise_zombie: Callable, stream_id: int, headers: headers.Headers, **kwargs):"]]}, "__init__": {"? -> ?": [[25, "    def __init__(self, conn, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer._send_": {"param": {"trailers": {"?": [[689, "    def _send_trailers(self, conn, trailers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_ev": {"param": {"other_conn": {"?": [[141, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._cleanup": {"var": {"stream_id": {"?": [[339, "        for stream_id in outdated_streams:  # pragma: no cover"]]}, "zombie_streams": {"[(?, ?)]": [[336, "        zombie_streams = [(stream_id, stream) for stream_id, stream in list(self.streams.items()) if stream.zombie]"]]}, "outdated_streams": {"[?]": [[337, "        outdated_streams = [stream_id for stream_id, stream in zombie_streams if stream.zombie <= death_time]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_response_body": {"param": {"self": {"Http2SingleStreamLayer": [[648, "    def read_response_body(self, request, response):"]]}, "request": {"?": [[648, "    def read_response_body(self, request, response):"]]}, "response": {"?": [[648, "    def read_response_body(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_request_headers": {"param": {"flow": {"?": [[502, "    def read_request_headers(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogger.__init__": {"param": {"self": {"H2ConnLogger": [[92, "        def __init__(self, name, log):"]]}, "name": {"str": [[92, "        def __init__(self, name, log):"]]}, "log": {"?": [[92, "        def __init__(self, name, log):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.h": {"class": {"Http2Layer": {"<Http2Layer>": [[85, "class Http2Layer(base.Layer):"]]}, "Http2SingleStreamLayer": {"<Http2SingleStreamLayer>": [[398, "class Http2SingleStreamLayer(httpbase._HttpTransmissionLayer, basethread.BaseThread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.data_queu": {"param": {"self": {"Http2SingleStreamLayer": [[454, "    def data_queue(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_": {"var": {"trailers": {"Headers": [[237, "        trailers = mitmproxy.net.http.Headers([[k, v] for k, v in event.headers])"]]}}, "param": {"event": {"?": [[141, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_": {"param": {"request": {"?": [[622, "    def send_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.SafeH2Connection.__init__": {"param": {"self": {"SafeH2Connection": [[25, "    def __init__(self, conn, *args, **kwargs):"]]}, "conn": {"?": [[25, "    def __init__(self, conn, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_priority_u": {"var": {"mapped_stream_id": {"?": [[301, "            mapped_stream_id = event.stream_id"], [305, "                mapped_stream_id = self.streams[mapped_stream_id].server_stream_id"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.Message.__init__": {"param": {"headers": {"Headers": [[401, "        def __init__(self, headers=None):"]]}, "self": {"Message": [[401, "        def __init__(self, headers=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http": {"class": {"SafeH2Connection": {"<SafeH2Connection>": [[23, "class SafeH2Connection(connection.H2Connection):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_remote_settings_changed": {"var": {"new_settings": {"dict": [[242, "        new_settings = dict([(key, cs.new_value) for (key, cs) in event.changed_settings.items()])"]]}}, "param": {"other_conn": {"?": [[241, "    def _handle_remote_settings_changed(self, event, other_conn):"]]}, "self": {"Http2Layer": [[241, "    def _handle_remote_settings_changed(self, event, other_conn):"]]}, "event": {"?": [[241, "    def _handle_remote_settings_changed(self, event, other_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.stream_ended": {"param": {"self": {"Http2SingleStreamLayer": [[472, "    def stream_ended(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_response_trail": {"param": {"response": {"?": [[686, "    def send_response_trailers(self, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_stream_reset": {"param": {"self": {"Http2Layer": [[225, "    def _handle_stream_reset(self, eid, event, is_server, other_conn):"]]}, "eid": {"None": [[225, "    def _handle_stream_reset(self, eid, event, is_server, other_conn):"]]}, "is_server": {"bool": [[225, "    def _handle_stream_reset(self, eid, event, is_server, other_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._map_depends_on_stream_id": {"param": {"self": {"Http2Layer": [[321, "    def _map_depends_on_stream_id(self, stream_id, depends_on):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_event": {"var": {"eid": {"None": [[148, "        eid = None"]], "?": [[151, "                eid = self.server_to_client_stream_ids[event.stream_id]"], [153, "                eid = event.stream_id"]]}}, "param": {"self": {"Http2Layer": [[141, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}, "is_server": {"bool": [[141, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}, "source_conn": {"?": [[141, "    def _handle_event(self, event, source_conn, other_conn, is_server):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_pushed_stream_receiv": {"var": {"headers": {"Headers": [[278, "        headers = mitmproxy.net.http.Headers([[k, v] for k, v in event.headers])"]]}, "parent_eid": {"?": [[273, "        parent_eid = self.server_to_client_stream_ids[event.parent_stream_id]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.H2ConnLogger.trac": {"param": {"self": {"H2ConnLogger": [[100, "        def trace(self, fmtstr, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.trailer": {"param": {"self": {"Http2SingleStreamLayer": [[481, "    def trailers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_response_receiv": {"var": {"headers": {"Headers": [[193, "        headers = mitmproxy.net.http.Headers([[k, v] for k, v in event.headers])"]]}}, "param": {"eid": {"None": [[192, "    def _handle_response_received(self, eid, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamL": {"func": {"read_request_body": {"(Http2SingleStreamLayer, ?) -> ?": [[525, "    def read_request_body(self, request):"]]}, "read_response_body": {"(Http2SingleStreamLayer, ?, ?) -> ?": [[648, "    def read_response_body(self, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.__call__": {"param": {"self": {"Http2SingleStreamLayer": [[700, "    def __call__(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.detect_zombie_stream": {"param": {"func": {"?": [[387, "def detect_zombie_stream(func):  # pragma: no cover"]]}}, "func": {"wrapper": {"? -> None": [[389, "    def wrapper(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_request_header": {"param": {"self": {"Http2SingleStreamLayer": [[502, "    def read_request_headers(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_response_body": {"param": {"chunks": {"?": [[677, "    def send_response_body(self, response, chunks):"]]}, "self": {"Http2SingleStreamLayer": [[677, "    def send_response_body(self, response, chunks):"]]}, "response": {"?": [[677, "    def send_response_body(self, response, chunks):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2": {"func": {"detect_zombie_stream": {"? -> ? -> None": [[387, "def detect_zombie_stream(func):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_data_receiv": {"param": {"eid": {"None": [[200, "    def _handle_data_received(self, eid, event, source_conn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_header": {"param": {"self": {"Http2SingleStreamLayer": [[546, "    def send_request_headers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.raise_zomb": {"var": {"connection_closed": {"bool": [[495, "        connection_closed = self.h2_connection.state_machine.state == h2.connection.ConnectionState.CLOSED"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.SafeH2Connection.safe_send_body": {"var": {"position": {"int": [[60, "            position = 0"]]}, "chunk": {"?": [[59, "        for chunk in chunks:"]]}, "frame_chunk": {"?": [[65, "                frame_chunk = chunk[position:position + max_outbound_frame_size]"]]}, "max_outbound_frame_size": {"?": [[64, "                max_outbound_frame_size = self.max_outbound_frame_size"]]}}, "param": {"chunks": {"?": [[58, "    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=True):"]]}, "raise_zombie": {"?": [[58, "    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=True):"]]}, "self": {"SafeH2Connection": [[58, "    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=True):"]]}, "end_stream": {"?": [[58, "    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=True):"]]}, "stream_id": {"?": [[58, "    def safe_send_body(self, raise_zombie: Callable, stream_id: int, chunks: List[bytes], end_stream=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.run": {"var": {"layer": {"HttpLayer": [[704, "        layer = httpbase.HttpLayer(self, self.mode)"]]}}, "param": {"self": {"Http2SingleStreamLayer": [[703, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_request_received": {"param": {"self": {"Http2Layer": [[179, "    def _handle_request_received(self, eid, event):"]]}, "event": {"?": [[179, "    def _handle_request_received(self, eid, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.SafeH2Connection": {"func": {"safe_reset_stream": {"(SafeH2Connection, ?, ?) -> ?": [[38, "    def safe_reset_stream(self, stream_id: int, error_code: int):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._handle_response_received": {"param": {"self": {"Http2Layer": [[192, "    def _handle_response_received(self, eid, event):"]]}, "event": {"?": [[192, "    def _handle_response_received(self, eid, event):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.connect": {"param": {"self": {"Http2SingleStreamLayer": [[439, "    def connect(self):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_request_trailer": {"param": {"self": {"Http2SingleStreamLayer": [[542, "    def read_request_trailers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.SafeH2C": {"func": {"safe_acknowledge_received_data": {"(SafeH2Connection, ?, ?) -> None": [[30, "    def safe_acknowledge_received_data(self, acknowledged_size: int, stream_id: int):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer._kill_all_stream": {"param": {"self": {"Http2Layer": [[342, "    def _kill_all_streams(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_head": {"var": {"max_streams": {"?": [[555, "            max_streams = self.connections[self.server_conn].remote_settings.max_concurrent_streams"]]}, "priority_exclusive": {"None": [[576, "        priority_exclusive = None"]], "?": [[585, "                priority_exclusive = self.priority_exclusive"]]}}, "param": {"request": {"?": [[546, "    def send_request_headers(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.__call": {"var": {"other_conn": {"?": [[357, "                    other_conn = self.server_conn if conn == self.client_conn.connection else self.client_conn"]]}, "is_server": {"bool": [[358, "                    is_server = (source_conn == self.server_conn)"]]}, "raw_frame": {"str": [[362, "                            raw_frame = b''.join(http2.read_raw_frame(source_conn.rfile))"]]}, "incoming_events": {"?": [[372, "                        incoming_events = self.connections[source_conn].receive_data(raw_frame)"]]}, "source_conn": {"?": [[356, "                    source_conn = self.client_conn if conn == self.client_conn.connection else self.server_conn"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.set_serv": {"param": {"address": {"?": [[445, "    def set_server(self, address):  # pragma: no cover"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request": {"param": {"self": {"Http2SingleStreamLayer": [[622, "    def send_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.check_close_connection": {"param": {"self": {"Http2SingleStreamLayer": [[448, "    def check_close_connection(self, flow):"]]}, "flow": {"?": [[448, "    def check_close_connection(self, flow):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2Layer.__init__": {"var": {"config": {"?": [[110, "        config = h2.config.H2Configuration("]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer._send_trailer": {"param": {"self": {"Http2SingleStreamLayer": [[689, "    def _send_trailers(self, conn, trailers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.read_request_head": {"var": {"first_line_format": {"str": [[509, "        first_line_format, method, scheme, host, port, path = http2.parse_headers(self.request_message.headers)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.mitmproxy.mitmproxy.proxy.protocol.http2.Http2SingleStreamLayer.send_request_body": {"param": {"chunks": {"[?]": [[605, "    def send_request_body(self, request, chunks):"]]}, "self": {"Http2SingleStreamLayer": [[605, "    def send_request_body(self, request, chunks):"]]}, "request": {"?": [[605, "    def send_request_body(self, request, chunks):"]]}}}}}