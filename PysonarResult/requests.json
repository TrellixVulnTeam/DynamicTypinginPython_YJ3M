{"/home/xxm/Desktop/EMSE/dataset/requests/tests/testserver/server.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.text_response_server.text_response_handler": {"param": {"sock": {"?": [[46, "        def text_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server._close_server_sock_ignore_error": {"param": {"self": {"Server": [[84, "    def _close_server_sock_ignore_errors(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.text_response_server": {"param": {"text": {"str": [[45, "    def text_response_server(cls, text, request_timeout=0.5, **kwargs):"]]}, "cls": {"<Server>": [[45, "    def text_response_server(cls, text, request_timeout=0.5, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.S": {"func": {"_close_server_sock_ignore_errors": {"Server -> ?": [[84, "    def _close_server_sock_ignore_errors(self):"]]}, "basic_response_server": {"<Server> -> Server": [[56, "    def basic_response_server(cls, **kwargs):"]]}, "text_response_server": {"(<Server>, ?, float) -> Server / (<Server>, str, float) -> Server": [[45, "    def text_response_server(cls, text, request_timeout=0.5, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.__exit": {"param": {"exc_value": {"?": [[116, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.run": {"param": {"self": {"Server": [[63, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server": {"var": {"WAIT_EVENT_TIMEOUT": {"int": [[28, "    WAIT_EVENT_TIMEOUT = 5"]]}}, "param": {"wait_to_close_event": {"None": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}}, "func": {"_accept_connection": {"Server -> None": [[101, "    def _accept_connection(self):"]]}, "__exit__": {"(Server, ?, ?, ?) -> bool": [[116, "    def __exit__(self, exc_type, exc_value, traceback):"]]}, "__init__": {"? -> ?": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server._accept_connection": {"var": {"ready": {"[?]": [[103, "            ready, _, _ = select.select([self.server_sock], [], [], self.WAIT_EVENT_TIMEOUT)"]]}}, "param": {"self": {"Server": [[101, "    def _accept_connection(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.__enter__": {"param": {"self": {"Server": [[111, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.__exit__": {"param": {"self": {"Server": [[116, "    def __exit__(self, exc_type, exc_value, traceback):"]]}, "traceback": {"?": [[116, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Serve": {"func": {"run": {"Server -> ?": [[63, "    def run(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server._handle_req": {"var": {"handler_result": {"str": [[96, "            handler_result = self.handler(sock)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.basic_response_server": {"param": {"cls": {"<Server>": [[56, "    def basic_response_server(cls, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.__ini": {"param": {"requests_to_handle": {"int": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Serv": {"func": {"__enter__": {"Server -> (str, int)": [[111, "    def __enter__(self):"]]}, "_create_socket_and_bind": {"Server -> None": [[78, "    def _create_socket_and_bind(self):"]]}, "_handle_requests": {"Server -> None": [[90, "    def _handle_requests(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.consume_sock": {"var": {"new_content": {"?": [[17, "        new_content = sock.recv(chunks)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.text_response_server.text_response_handl": {"var": {"request_content": {"str": [[47, "            request_content = consume_socket_content(sock, timeout=request_timeout)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.__exi": {"param": {"exc_type": {"?": [[116, "    def __exit__(self, exc_type, exc_value, traceback):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server": {"func": {"consume_socket_content": {"(Server, None) -> str / (?, float) -> str": [[8, "def consume_socket_content(sock, timeout=0.5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.__init__": {"param": {"self": {"Server": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}, "handler": {"{? -> None | ? -> None | ? -> None | ? -> None | ? -> str | ? -> str | ? -> str | ? -> str}": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}, "host": {"str": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}, "port": {"int": [[30, "    def __init__(self, handler=None, host='localhost', port=0, requests_to_handle=1, wait_to_close_event=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server._create_socket_and_bind": {"var": {"sock": {"?": [[79, "        sock = socket.socket()"]]}}, "param": {"self": {"Server": [[78, "    def _create_socket_and_bind(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.s": {"class": {"Server": {"<Server>": [[26, "class Server(threading.Thread):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server._handle_request": {"var": {"sock": {"None": [[92, "            sock = self._accept_connection()"]]}}, "param": {"self": {"Server": [[90, "    def _handle_requests(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server.text_response_serv": {"param": {"request_timeout": {"float": [[45, "    def text_response_server(cls, text, request_timeout=0.5, **kwargs):"]]}}, "func": {"text_response_handler": {"? -> str": [[46, "        def text_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.consume_socket_content": {"var": {"chunks": {"int": [[9, "    chunks = 65536"]]}}, "param": {"sock": {"Server": [[8, "def consume_socket_content(sock, timeout=0.5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.consume_socket_": {"var": {"content": {"str": [[10, "    content = b''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.consume_socket_conten": {"var": {"more_to_read": {"[?]": [[13, "        more_to_read = select.select([sock], [], [], timeout)[0]"]]}}, "param": {"timeout": {"float": [[8, "def consume_socket_content(sock, timeout=0.5):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.testserver.server.Server._handle_requests": {"var": {"_": {"int": [[91, "        for _ in range(self.requests_to_handle):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_help.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_help.VersionedPackage": {"func": {"__init__": {"? -> ?": [[16, "    def __init__(self, version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_help.VersionedPackage.__init__": {"param": {"self": {"VersionedPackage": [[16, "    def __init__(self, version):"]]}, "version": {"str": [[16, "    def __init__(self, version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_help.test_idna_without_version_attribut": {"param": {"mocker": {"?": [[20, "def test_idna_without_version_attribute(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_help": {"class": {"VersionedPackage": {"<VersionedPackage>": [[15, "class VersionedPackage(object):"]]}}, "func": {"test_system_ssl": {"() -> None": [[10, "def test_system_ssl():"]]}, "test_idna_with_version_attribute": {"? -> None": [[28, "def test_idna_with_version_attribute(mocker):"]]}, "test_idna_without_version_attribute": {"? -> None": [[20, "def test_idna_without_version_attribute(mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_help.test_idna_with_version_attribut": {"param": {"mocker": {"?": [[28, "def test_idna_with_version_attribute(mocker):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_packages.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_packag": {"func": {"test_can_access_idna_attribute": {"() -> None": [[8, "def test_can_access_idna_attribute():"]]}, "test_can_access_urllib3_attribute": {"() -> None": [[4, "def test_can_access_urllib3_attribute():"]]}, "test_can_access_chardet_attribute": {"() -> None": [[12, "def test_can_access_chardet_attribute():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/auth.py": {".home.xxm.Desktop.EMSE.dataset.requests.reque": {"class": {"HTTPBasicAuth": {"<HTTPBasicAuth>": [[79, "class HTTPBasicAuth(AuthBase):"]]}}, "func": {"_basic_auth_str": {"(?, ?) -> str": [[28, "def _basic_auth_str(username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAut": {"func": {"handle_401": {"(HTTPDigestAuth, ?) -> None": [[234, "    def handle_401(self, r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.__ne__": {"param": {"self": {"HTTPDigestAuth": [[304, "    def __ne__(self, other):"]]}, "other": {"?": [[304, "    def __ne__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_header.md5_utf8": {"var": {"x": {"?": [[147, "                    x = x.encode('utf-8')"]]}}, "param": {"x": {"?": [[145, "            def md5_utf8(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_head": {"var": {"realm": {"?": [[132, "        realm = self._thread_local.chal['realm']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPBasicAuth": {"func": {"__call__": {"(HTTPBasicAuth, ?) -> None": [[95, "    def __call__(self, r):"]]}, "__ne__": {"(HTTPBasicAuth, ?) -> int": [[92, "    def __ne__(self, other):"]]}, "__eq__": {"(HTTPBasicAuth, ?) -> int": [[86, "    def __eq__(self, other):"]]}, "__init__": {"? -> ?": [[82, "    def __init__(self, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.handle_redirect": {"param": {"self": {"HTTPDigestAuth": [[229, "    def handle_redirect(self, r, **kwargs):"]]}, "r": {"?": [[229, "    def handle_redirect(self, r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.a": {"class": {"HTTPDigestAuth": {"<HTTPDigestAuth>": [[108, "class HTTPDigestAuth(AuthBase):"]]}, "HTTPProxyAuth": {"<HTTPProxyAuth>": [[100, "class HTTPProxyAuth(HTTPBasicAuth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPBasicAuth.__call__": {"param": {"self": {"HTTPBasicAuth": [[95, "    def __call__(self, r):"]]}, "r": {"?": [[95, "    def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPBasicAuth.__ne__": {"param": {"self": {"HTTPBasicAuth": [[92, "    def __ne__(self, other):"]]}, "other": {"?": [[92, "    def __ne__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.AuthBase": {"func": {"__call__": {"(AuthBase, ?) -> None": [[75, "    def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.handle_401": {"var": {"pat": {"?": [[256, "            pat = re.compile(r'digest ', flags=re.IGNORECASE)"]]}, "prep": {"?": [[263, "            prep = r.request.copy()"]]}, "s_auth": {"?": [[251, "        s_auth = r.headers.get('www-authenticate', '')"]]}, "_r": {"?": [[269, "            _r = r.connection.send(prep, **kwargs)"]]}}, "param": {"self": {"HTTPDigestAuth": [[234, "    def handle_401(self, r, **kwargs):"]]}, "r": {"?": [[234, "    def handle_401(self, r, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPBasicAuth.__init__": {"param": {"username": {"?": [[82, "    def __init__(self, username, password):"]]}, "self": {"{HTTPBasicAuth | HTTPProxyAuth}": [[82, "    def __init__(self, username, password):"]]}, "password": {"?": [[82, "    def __init__(self, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.__call__": {"param": {"self": {"HTTPDigestAuth": [[278, "    def __call__(self, r):"]]}, "r": {"?": [[278, "    def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPBasicAuth.__eq__": {"param": {"self": {"HTTPBasicAuth": [[86, "    def __eq__(self, other):"]]}, "other": {"?": [[86, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_h": {"var": {"p_parsed": {"?": [[176, "        p_parsed = urlparse(url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestA": {"func": {"build_digest_header": {"(HTTPDigestAuth, ?, ?) -> str": [[127, "    def build_digest_header(self, method, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.init_per_thread_stat": {"param": {"self": {"HTTPDigestAuth": [[117, "    def init_per_thread_state(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.AuthBase.__call__": {"param": {"self": {"AuthBase": [[75, "    def __call__(self, r):"]]}, "r": {"?": [[75, "    def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_header.sha_utf8": {"var": {"x": {"?": [[153, "                    x = x.encode('utf-8')"]]}}, "param": {"x": {"?": [[151, "            def sha_utf8(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_header": {"var": {"nonce": {"?": [[133, "        nonce = self._thread_local.chal['nonce']"]]}, "opaque": {"?": [[136, "        opaque = self._thread_local.chal.get('opaque')"]]}, "cnonce": {"?": [[198, "        cnonce = (hashlib.sha1(s).hexdigest()[:16])"]]}, "KD": {"(None, ?) -> None": [[169, "        KD = lambda s, d: hash_utf8(\"%s:%s\" % (s, d))"]]}, "ncvalue": {"str": [[192, "        ncvalue = '%08x' % self._thread_local.nonce_count"]]}, "A1": {"?": [[182, "        A1 = '%s:%s:%s' % (self.username, realm, self.password)"]]}, "s": {"?": [[193, "        s = str(self._thread_local.nonce_count).encode('utf-8')"]]}, "A2": {"?": [[183, "        A2 = '%s:%s' % (method, path)"]]}, "HA1": {"None": [[185, "        HA1 = hash_utf8(A1)"], [200, "            HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))"]]}, "noncebit": {"?": [[205, "            noncebit = \"%s:%s:%s:%s:%s\" % ("]]}, "hash_utf8": {"None": [[137, "        hash_utf8 = None"]], "? -> None": [[149, "            hash_utf8 = md5_utf8"], [155, "            hash_utf8 = sha_utf8"], [161, "            hash_utf8 = sha256_utf8"], [167, "            hash_utf8 = sha512_utf8"]]}, "qop": {"?": [[134, "        qop = self._thread_local.chal.get('qop')"]]}, "path": {"str": [[178, "        path = p_parsed.path or \"/\""]]}, "HA2": {"None": [[186, "        HA2 = hash_utf8(A2)"]]}, "base": {"?": [[216, "        base = 'username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"%s\", ' \\"]]}, "entdig": {"None": [[175, "        entdig = None"]]}}, "param": {"self": {"HTTPDigestAuth": [[127, "    def build_digest_header(self, method, url):"]]}, "method": {"?": [[127, "    def build_digest_header(self, method, url):"]]}}, "func": {"md5_utf8": {"? -> None": [[145, "            def md5_utf8(x):"]]}, "sha_utf8": {"? -> None": [[151, "            def sha_utf8(x):"]]}, "sha256_utf8": {"? -> None": [[157, "            def sha256_utf8(x):"]]}, "sha512_utf8": {"? -> None": [[163, "            def sha512_utf8(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPProxyAuth.__call__": {"param": {"self": {"HTTPProxyAuth": [[103, "    def __call__(self, r):"]]}, "r": {"?": [[103, "    def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.req": {"class": {"AuthBase": {"<AuthBase>": [[72, "class AuthBase(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_header.sha256_utf8": {"var": {"x": {"?": [[159, "                    x = x.encode('utf-8')"]]}}, "param": {"x": {"?": [[157, "            def sha256_utf8(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPProxyAuth": {"func": {"__call__": {"(HTTPProxyAuth, ?) -> None": [[103, "    def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_heade": {"var": {"_algorithm": {"?": [[142, "            _algorithm = algorithm.upper()"]], "str": [[140, "            _algorithm = 'MD5'"]]}, "algorithm": {"?": [[135, "        algorithm = self._thread_local.chal.get('algorithm')"]]}}, "param": {"url": {"?": [[127, "    def build_digest_header(self, method, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_hea": {"var": {"respdig": {"None": [[203, "            respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))"], [208, "            respdig = KD(HA1, noncebit)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth": {"var": {"CONTENT_TYPE_FORM_URLENCODED": {"str": [[24, "CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'"]]}, "CONTENT_TYPE_MULTI_PART": {"str": [[25, "CONTENT_TYPE_MULTI_PART = 'multipart/form-data'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth": {"func": {"__call__": {"(HTTPDigestAuth, ?) -> ?": [[278, "    def __call__(self, r):"]]}, "__ne__": {"(HTTPDigestAuth, ?) -> int": [[304, "    def __ne__(self, other):"]]}, "__eq__": {"(HTTPDigestAuth, ?) -> int": [[298, "    def __eq__(self, other):"]]}, "__init__": {"? -> ?": [[111, "    def __init__(self, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.__init__": {"param": {"username": {"str": [[111, "    def __init__(self, username, password):"]]}, "self": {"HTTPDigestAuth": [[111, "    def __init__(self, username, password):"]]}, "password": {"str": [[111, "    def __init__(self, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.__eq__": {"param": {"self": {"HTTPDigestAuth": [[298, "    def __eq__(self, other):"]]}, "other": {"?": [[298, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth._basic_auth_st": {"var": {"username": {"?": [[60, "        username = username.encode('latin1')"]], "str": [[46, "        username = str(username)"]]}, "password": {"?": [[63, "        password = password.encode('latin1')"]], "str": [[56, "        password = str(password)"]]}}, "param": {"username": {"?": [[28, "def _basic_auth_str(username, password):"]]}, "password": {"?": [[28, "def _basic_auth_str(username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAuth.build_digest_header.sha512_utf8": {"var": {"x": {"?": [[165, "                    x = x.encode('utf-8')"]]}}, "param": {"x": {"?": [[163, "            def sha512_utf8(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth._basic_auth_": {"var": {"authstr": {"str": [[65, "    authstr = 'Basic ' + to_native_string("]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.auth.HTTPDigestAu": {"func": {"handle_redirect": {"(HTTPDigestAuth, ?) -> None": [[229, "    def handle_redirect(self, r, **kwargs):"]]}, "init_per_thread_state": {"HTTPDigestAuth -> None": [[117, "    def init_per_thread_state(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/sessions.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.resolve_redirect": {"var": {"parsed_rurl": {"?": [[173, "                parsed_rurl = urlparse(resp.url)"]]}, "resp": {"Response": [[237, "                resp = self.send("]]}, "headers": {"CaseInsensitiveDict": [[204, "            headers = prepared_request.headers"]]}, "proxies": {"?": [[215, "            proxies = self.rebuild_proxies(prepared_request, proxies)"]]}, "parsed": {"?": [[177, "            parsed = urlparse(url)"], [179, "                parsed = parsed._replace(fragment=previous_fragment)"]]}, "purged_headers": {"(str, str, str)": [[199, "                purged_headers = ('Content-Length', 'Content-Type', 'Transfer-Encoding')"]]}}, "param": {"self": {"{CustomRedirectSession | RedirectSession | Session | SessionRedirectMixin}": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "proxies": {"None": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "resp": {"{None | Response}": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Se": {"func": {"options": {"(Session, ?) -> None": [[545, "    def options(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.pos": {"param": {"data": {"(Session, ?, None, None) -> None": [[567, "    def post(self, url, data=None, json=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.get_adapter": {"param": {"self": {"{CustomRedirectSession | Session}": [[718, "    def get_adapter(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.send": {"var": {"stream": {"?": [[633, "        stream = kwargs.get('stream')"]]}, "hooks": {"dict": [[634, "        hooks = request.hooks"]]}, "resp": {"None": [[656, "            for resp in r.history:"]]}, "start": {"int": [[640, "        start = preferred_clock()"]]}, "r": {"None": [[650, "        r = dispatch_hook('response', hooks, r, **kwargs)"], [674, "            r = history.pop()"]], "?": [[643, "        r = adapter.send(request, **kwargs)"]]}, "gen": {"?": [[664, "            gen = self.resolve_redirects(r, request, **kwargs)"]]}, "history": {"[?]": [[665, "            history = [resp for resp in gen]"], [667, "            history = []"]]}}, "param": {"self": {"{CustomRedirectSession | Session}": [[614, "    def send(self, request, **kwargs):"]]}, "request": {"{PreparedRequest | Request}": [[614, "    def send(self, request, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_aut": {"var": {"headers": {"CaseInsensitiveDict": [[259, "        headers = prepared_request.headers"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.__init__": {"param": {"self": {"{CustomRedirectSession | Session}": [[362, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.merge_environment_setting": {"var": {"proxies": {"dict": [[710, "        proxies = merge_setting(proxies, self.proxies)"]]}, "stream": {"bool": [[711, "        stream = merge_setting(stream, self.stream)"]]}, "env_proxies": {"dict": [[699, "            env_proxies = get_environ_proxies(url, no_proxy=no_proxy)"]]}}, "param": {"self": {"{CustomRedirectSession | Session}": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}, "proxies": {"dict": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}, "stream": {"None": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.prepare_request": {"var": {"p": {"PreparedRequest": [[448, "        p = PreparedRequest()"]]}, "cookies": {"RequestsCookieJar": [[437, "            cookies = cookiejar_from_dict(cookies)"]], "dict": [[433, "        cookies = request.cookies or {}"]]}, "merged_cookies": {"RequestsCookieJar": [[440, "        merged_cookies = merge_cookies("]]}}, "param": {"self": {"{CustomRedirectSession | Session}": [[423, "    def prepare_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_auth": {"var": {"url": {"str": [[260, "        url = prepared_request.url"]]}}, "param": {"prepared_request": {"PreparedRequest": [[254, "    def rebuild_auth(self, prepared_request, response):"]]}, "self": {"{CustomRedirectSession | RedirectSession | Session | SessionRedirectMixin}": [[254, "    def rebuild_auth(self, prepared_request, response):"]]}, "response": {"{None | Response}": [[254, "    def rebuild_auth(self, prepared_request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.session": {"func": {"merge_hooks": {"(?, dict, ?) -> dict / (dict, dict, ?) -> dict / (?, ?, ?) -> None": [[81, "def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.head": {"param": {"url": {"?": [[556, "    def head(self, url, **kwargs):"]]}, "self": {"(CustomRedirectSession, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, ?, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None": [[556, "    def head(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.mer": {"param": {"session_setting": {"{CaseInsensitiveDict | bool | dict | dict}": [[50, "def merge_setting(request_setting, session_setting, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_proxi": {"var": {"username": {"None": [[307, "            username, password = None, None"]], "?": [[305, "            username, password = get_auth_from_url(new_proxies[scheme])"]]}, "headers": {"CaseInsensitiveDict": [[286, "        headers = prepared_request.headers"]]}, "scheme": {"?": [[288, "        scheme = urlparse(url).scheme"]]}}, "param": {"prepared_request": {"PreparedRequest": [[273, "    def rebuild_proxies(self, prepared_request, proxies):"]]}, "self": {"{CustomRedirectSession | RedirectSession | Session | SessionRedirectMixin}": [[273, "    def rebuild_proxies(self, prepared_request, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.options": {"param": {"url": {"?": [[545, "    def options(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.patch": {"param": {"url": {"?": [[592, "    def patch(self, url, data=None, **kwargs):"]]}, "self": {"Session": [[592, "    def patch(self, url, data=None, **kwargs):"]]}, "data": {"None": [[592, "    def patch(self, url, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.should_strip_auth": {"var": {"new_parsed": {"?": [[122, "        new_parsed = urlparse(new_url)"]]}, "default_port": {"(?, None)": [[136, "        default_port = (DEFAULT_PORTS.get(old_parsed.scheme, None), None)"]]}, "old_parsed": {"?": [[121, "        old_parsed = urlparse(old_url)"]]}}, "param": {"self": {"{CustomRedirectSession | RedirectSession | Session | SessionRedirectMixin}": [[119, "    def should_strip_auth(self, old_url, new_url):"]]}, "new_url": {"str": [[119, "    def should_strip_auth(self, old_url, new_url):"]]}, "old_url": {"str": [[119, "    def should_strip_auth(self, old_url, new_url):"]]}, "default_port": {"?": [[138, "                and new_parsed.port in default_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.mount": {"var": {"key": {"?": [[745, "        for key in keys_to_move:"]]}}, "param": {"self": {"{CustomRedirectSession | Session}": [[737, "    def mount(self, prefix, adapter):"]]}, "prefix": {"str": [[737, "    def mount(self, prefix, adapter):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.should_strip_aut": {"var": {"changed_scheme": {"bool": [[135, "        changed_scheme = old_parsed.scheme != new_parsed.scheme"]]}}, "param": {"changed_scheme": {"?": [[138, "                and new_parsed.port in default_port):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.resolve_redirec": {"var": {"hist": {"{[?] | [None] | [Response]}": [[148, "        hist = []  # keep track of history"]]}, "prepared_request": {"PreparedRequest": [[153, "            prepared_request = req.copy()"]]}, "previous_fragment": {"?": [[151, "        previous_fragment = urlparse(req.url).fragment"], [181, "                previous_fragment = parsed.fragment"]]}}, "param": {"yield_requests": {"bool": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "stream": {"bool": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.option": {"param": {"self": {"(CustomRedirectSession, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, ?, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None": [[545, "    def options(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.delet": {"param": {"self": {"Session": [[604, "    def delete(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.merge_environment_settings": {"var": {"no_proxy": {"None": [[698, "            no_proxy = proxies.get('no_proxy') if proxies is not None else None"]]}, "verify": {"bool": [[712, "        verify = merge_setting(verify, self.verify)"]], "?": [[706, "                verify = (os.environ.get('REQUESTS_CA_BUNDLE') or"]]}, "cert": {"None": [[713, "        cert = merge_setting(cert, self.cert)"]]}}, "param": {"url": {"None": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}, "verify": {"None": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}, "cert": {"None": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.__getstate__": {"var": {"state": {"dict": [[749, "        state = {attr: getattr(self, attr, None) for attr in self.__attrs__}"]]}}, "param": {"self": {"Session": [[748, "    def __getstate__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requ": {"class": {"SessionRedirectMixin": {"<SessionRedirectMixin>": [[96, "class SessionRedirectMixin(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.should_strip_au": {"var": {"changed_port": {"bool": [[134, "        changed_port = old_parsed.port != new_parsed.port"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.sen": {"var": {"allow_redirects": {"?": [[632, "        allow_redirects = kwargs.pop('allow_redirects', True)"]]}, "adapter": {"None": [[637, "        adapter = self.get_adapter(url=request.url)"]]}, "elapsed": {"int": [[646, "        elapsed = preferred_clock() - start"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.get": {"param": {"url": {"?": [[534, "    def get(self, url, **kwargs):"]]}, "self": {"{CustomRedirectSession | Session}": [[534, "    def get(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.close": {"var": {"v": {"?": [[734, "        for v in self.adapters.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.clo": {"param": {"self": {"Session": [[732, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.put": {"param": {"url": {"?": [[580, "    def put(self, url, data=None, **kwargs):"]]}, "self": {"Session": [[580, "    def put(self, url, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin": {"func": {"rebuild_method": {"(CustomRedirectSession, ?, None) -> None / (SessionRedirectMixin, ?, ?) -> None / (Session, PreparedRequest, ?) -> None / (RedirectSession, PreparedRequest, Response) -> None / (Session, ?, None) -> None / (Session, PreparedRequest, Response) -> None": [[314, "    def rebuild_method(self, prepared_request, response):"]]}, "get_redirect_target": {"(Session, Response) -> str / (SessionRedirectMixin, ?) -> str / (Session, ?) -> str / (Session, None) -> str / (RedirectSession, Response) -> str": [[98, "    def get_redirect_target(self, resp):"]]}, "resolve_redirects": {"(CustomRedirectSession, None, Request, bool, None, bool, None, None, bool) -> ? / (CustomRedirectSession, None, {PreparedRequest | Request}, bool, None, bool, None, None, bool) -> ? / (SessionRedirectMixin, ?, ?, bool, None, bool, None, None, bool) -> ? / (RedirectSession, Response, PreparedRequest, bool, None, bool, None, None, bool) -> ? / (Session, None, {PreparedRequest | Request}, bool, None, bool, None, None, bool) -> ? / (Session, None, Request, bool, None, bool, None, None, bool) -> ? / (Session, None, ?, bool, None, bool, None, None, bool) -> ? / (Session, Response, PreparedRequest, bool, None, bool, None, None, bool) -> ? / (Session, ?, PreparedRequest, bool, None, bool, None, None, bool) -> ?": [[144, "    def resolve_redirects(self, resp, req, stream=False, timeout=None,"]]}, "should_strip_auth": {"(CustomRedirectSession, ?, ?) -> bool / (RedirectSession, ?, str) -> bool / (Session, ?, ?) -> bool / (Session, str, str) -> bool / (SessionRedirectMixin, ?, ?) -> bool / (Session, None, str) -> bool / (Session, ?, str) -> bool": [[119, "    def should_strip_auth(self, old_url, new_url):"]]}, "rebuild_proxies": {"(CustomRedirectSession, ?, None) -> ? / (SessionRedirectMixin, ?, None) -> ? / (Session, PreparedRequest, ?) -> ? / (Session, PreparedRequest, None) -> ? / (RedirectSession, PreparedRequest, None) -> ? / (Session, ?, None) -> ? / (Session, ?, ?) -> ? / (RedirectSession, PreparedRequest, ?) -> ? / (Session, PreparedRequest, dict) -> ? / (SessionRedirectMixin, ?, ?) -> ?": [[273, "    def rebuild_proxies(self, prepared_request, proxies):"]]}, "rebuild_auth": {"(CustomRedirectSession, ?, None) -> None / (SessionRedirectMixin, ?, ?) -> None / (Session, PreparedRequest, ?) -> None / (RedirectSession, PreparedRequest, Response) -> None / (Session, ?, None) -> None / (Session, PreparedRequest, Response) -> None": [[254, "    def rebuild_auth(self, prepared_request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.get_redirect_target": {"param": {"self": {"{RedirectSession | Session | SessionRedirectMixin}": [[98, "    def get_redirect_target(self, resp):"]]}, "resp": {"{None | Response}": [[98, "    def get_redirect_target(self, resp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.get_redirect_targe": {"var": {"location": {"?": [[107, "            location = resp.headers['location']"], [115, "                location = location.encode('latin1')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.request": {"var": {"hooks": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "resp": {"?": [[530, "        resp = self.send(prep, **send_kwargs)"]]}, "req": {"Request": [[504, "        req = Request("]]}, "params": {"None": [[464, "            params=None, data=None, headers=None, cookies=None, files=None,"]]}, "send_kwargs": {"dict": [[525, "        send_kwargs = {"]]}, "proxies": {"dict": [[518, "        proxies = proxies or {}"]]}, "prep": {"PreparedRequest": [[516, "        prep = self.prepare_request(req)"]]}}, "param": {"files": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "cookies": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "url": {"?": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "hooks": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "self": {"{CustomRedirectSession | Session}": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "headers": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "json": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "params": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "verify": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "proxies": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.requ": {"var": {"settings": {"dict": [[520, "        settings = self.merge_environment_settings("]]}}, "param": {"allow_redirects": {"bool": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "stream": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_proxies": {"var": {"url": {"str": [[287, "        url = prepared_request.url"]]}, "no_proxy": {"?": [[290, "        no_proxy = proxies.get('no_proxy')"]]}, "proxy": {"?": [[296, "            proxy = environ_proxies.get(scheme, environ_proxies.get('all'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.merge_hook": {"param": {"dict_class": {"?": [[81, "def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.m": {"param": {"request_setting": {"{(?, ?) | (str, str) | dict | dict}": [[50, "def merge_setting(request_setting, session_setting, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.resolve_redirects": {"var": {"url": {"{None | str}": [[150, "        url = self.get_redirect_target(resp)"], [251, "                url = self.get_redirect_target(resp)"]], "str": [[174, "                url = ':'.join([to_native_string(parsed_rurl.scheme), url])"]], "?": [[182, "            url = parsed.geturl()"], [188, "                url = urljoin(resp.url, requote_uri(url))"], [190, "                url = requote_uri(url)"]]}, "verify": {"bool": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "rewindable": {"bool": [[221, "            rewindable = ("]]}, "req": {"PreparedRequest": [[231, "            req = prepared_request"]]}, "header": {"str": [[200, "                for header in purged_headers:"]]}}, "param": {"verify": {"bool": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "cert": {"None": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "req": {"{PreparedRequest | Request}": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}, "timeout": {"None": [[145, "                          verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Sessio": {"func": {"__enter__": {"Session -> Session": [[417, "    def __enter__(self):"]]}, "send": {"(CustomRedirectSession, ?) -> ? / (CustomRedirectSession, PreparedRequest) -> ? / (Session, ?) -> ? / (Session, PreparedRequest) -> ? / (Session, Request) -> ?": [[614, "    def send(self, request, **kwargs):"]]}, "__init__": {"? -> ?": [[362, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.post": {"param": {"url": {"?": [[567, "    def post(self, url, data=None, json=None, **kwargs):"]]}, "self": {"(CustomRedirectSession, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, ?, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None": [[567, "    def post(self, url, data=None, json=None, **kwargs):"]]}, "json": {"Session": [[567, "    def post(self, url, data=None, json=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session": {"var": {"__attrs__": {"[str]": [[356, "    __attrs__ = ["]]}}, "func": {"prepare_request": {"(CustomRedirectSession, Request) -> PreparedRequest / (Session, Request) -> PreparedRequest / (Session, ?) -> PreparedRequest": [[423, "    def prepare_request(self, request):"]]}, "head": {"(Session, ?) -> None": [[556, "    def head(self, url, **kwargs):"]]}, "get_adapter": {"(CustomRedirectSession, None) -> None / (Session, ?) -> None / (Session, None) -> None / (Session, str) -> None": [[718, "    def get_adapter(self, url):"]]}, "__exit__": {"Session -> None": [[420, "    def __exit__(self, *args):"]]}, "get": {"(CustomRedirectSession, ?) -> None / (Session, ?) -> None": [[534, "    def get(self, url, **kwargs):"]]}, "__setstate__": {"(Session, ?) -> None": [[752, "    def __setstate__(self, state):"]]}, "request": {"(CustomRedirectSession, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, str, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None / (Session, ?, ?, None, None, None, None, None, None, None, bool, None, None, None, None, None, None) -> None": [[463, "    def request(self, method, url,"]]}, "patch": {"(Session, ?, None) -> None": [[592, "    def patch(self, url, data=None, **kwargs):"]]}, "put": {"(Session, ?, None) -> None": [[580, "    def put(self, url, data=None, **kwargs):"]]}, "close": {"Session -> None": [[732, "    def close(self):"]]}, "post": {"(Session, ?, None, None) -> None": [[567, "    def post(self, url, data=None, json=None, **kwargs):"]]}, "__getstate__": {"Session -> dict": [[748, "    def __getstate__(self):"]]}, "delete": {"(Session, ?) -> None": [[604, "    def delete(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_": {"var": {"proxies": {"dict": [[285, "        proxies = proxies if proxies is not None else {}"]]}, "method": {"str": [[318, "        method = prepared_request.method"], [322, "            method = 'GET'"], [327, "            method = 'GET'"], [332, "            method = 'GET'"]]}}, "param": {"proxies": {"dict": [[273, "    def rebuild_proxies(self, prepared_request, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.__enter__": {"param": {"self": {"Session": [[417, "    def __enter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.reques": {"var": {"auth": {"None": [[465, "            auth=None, timeout=None, allow_redirects=True, proxies=None,"]]}}, "param": {"cert": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "timeout": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "data": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "method": {"str": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}, "auth": {"None": [[466, "            hooks=None, stream=None, verify=None, cert=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessio": {"var": {"merged_setting": {"?": [[69, "    merged_setting = dict_class(to_key_val_list(session_setting))"]]}}, "func": {"merge_setting": {"(?, None, ?) -> ? / (?, bool, ?) -> bool / (?, dict, ?) -> dict / (?, ?, ?) -> None / ((?, ?), None, ?) -> (?, ?) / (dict, CaseInsensitiveDict, ?) -> {CaseInsensitiveDict | dict} / (dict, dict, ?) -> dict / (None, bool, ?) -> bool / (None, None, ?) -> None": [[50, "def merge_setting(request_setting, session_setting, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.merge_setting": {"var": {"none_keys": {"[?]": [[74, "    none_keys = [k for (k, v) in merged_setting.items() if v is None]"]]}, "key": {"?": [[75, "    for key in none_keys:"]]}}, "param": {"dict_class": {"?": [[50, "def merge_setting(request_setting, session_setting, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.prepare_reques": {"var": {"auth": {"(str, str)": [[446, "            auth = get_netrc_auth(request.url)"]], "None": [[444, "        auth = request.auth"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.prepare_": {"param": {"request": {"Request": [[423, "    def prepare_request(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.pu": {"param": {"data": {"None": [[580, "    def put(self, url, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild": {"var": {"new_proxies": {"?": [[289, "        new_proxies = proxies.copy()"]]}, "environ_proxies": {"dict": [[294, "            environ_proxies = get_environ_proxies(url, no_proxy=no_proxy)"]]}, "new_auth": {"(str, str)": [[268, "        new_auth = get_netrc_auth(url) if self.trust_env else None"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.__exit__": {"param": {"self": {"Session": [[420, "    def __exit__(self, *args):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_method": {"param": {"self": {"{CustomRedirectSession | RedirectSession | Session | SessionRedirectMixin}": [[314, "    def rebuild_method(self, prepared_request, response):"]]}, "response": {"{None | Response}": [[314, "    def rebuild_method(self, prepared_request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.get_adapte": {"param": {"url": {"str": [[718, "    def get_adapter(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_metho": {"param": {"prepared_request": {"PreparedRequest": [[314, "    def rebuild_method(self, prepared_request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Sessi": {"func": {"mount": {"(CustomRedirectSession, str, HTTPAdapter) -> None / (Session, str, HTTPAdapter) -> None / (Session, ?, ?) -> None": [[737, "    def mount(self, prefix, adapter):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.merg": {"param": {"session_hooks": {"dict": [[81, "def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):"]]}, "request_hooks": {"dict": [[81, "def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.S": {"func": {"merge_environment_settings": {"(CustomRedirectSession, None, dict, None, None, None) -> dict / (Session, None, dict, None, None, None) -> dict / (Session, ?, ?, ?, ?, ?) -> dict": [[689, "    def merge_environment_settings(self, url, proxies, stream, verify, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.moun": {"var": {"keys_to_move": {"[?]": [[743, "        keys_to_move = [k for k in self.adapters if len(k) < len(prefix)]"]]}}, "param": {"adapter": {"HTTPAdapter": [[737, "    def mount(self, prefix, adapter):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions": {"var": {"preferred_clock": {"? -> int": [[45, "        preferred_clock = time.clock"], [47, "    preferred_clock = time.time"]], "?": [[43, "        preferred_clock = time.perf_counter"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.SessionRedirectMixin.rebuild_proxie": {"var": {"bypass_proxy": {"bool": [[292, "        bypass_proxy = should_bypass_proxies(url, no_proxy=no_proxy)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.__setstate__": {"var": {"attr": {"?": [[753, "        for attr, value in state.items():"]]}}, "param": {"self": {"Session": [[752, "    def __setstate__(self, state):"]]}, "state": {"?": [[752, "    def __setstate__(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.sessions.Session.delete": {"param": {"url": {"?": [[604, "    def delete(self, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.request": {"class": {"Session": {"<Session>": [[337, "class Session(SessionRedirectMixin):"]]}}, "func": {"session": {"() -> Session": [[757, "def session():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/exceptions.py": {".home.xxm.Desktop.EMSE.dataset.requests.r": {"class": {"RequestException": {"<RequestException>": [[12, "class RequestException(IOError):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.excepti": {"class": {"StreamConsumedError": {"<StreamConsumedError>": [[100, "class StreamConsumedError(RequestException, TypeError):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.exceptio": {"class": {"RequestsWarning": {"<RequestsWarning>": [[114, "class RequestsWarning(Warning):"]]}, "MissingSchema": {"<MissingSchema>": [[72, "class MissingSchema(RequestException, ValueError):"]]}, "RequestsDependencyWarning": {"<RequestsDependencyWarning>": [[122, "class RequestsDependencyWarning(RequestsWarning):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.exceptions.RequestExceptio": {"func": {"__init__": {"? -> ?": [[17, "    def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.excep": {"class": {"TooManyRedirects": {"<TooManyRedirects>": [[68, "class TooManyRedirects(RequestException):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.exceptions": {"class": {"UnrewindableBodyError": {"<UnrewindableBodyError>": [[108, "class UnrewindableBodyError(RequestException):"]]}, "FileModeWarning": {"<FileModeWarning>": [[118, "class FileModeWarning(RequestsWarning, DeprecationWarning):"]]}, "InvalidHeader": {"<InvalidHeader>": [[84, "class InvalidHeader(RequestException, ValueError):"]]}, "ConnectionError": {"<ConnectionError>": [[32, "class ConnectionError(RequestException):"]]}, "RetryError": {"<RetryError>": [[104, "class RetryError(RequestException):"]]}, "ProxyError": {"<ProxyError>": [[36, "class ProxyError(ConnectionError):"]]}, "URLRequired": {"<URLRequired>": [[64, "class URLRequired(RequestException):"]]}, "InvalidProxyURL": {"<InvalidProxyURL>": [[88, "class InvalidProxyURL(InvalidURL):"]]}, "ChunkedEncodingError": {"<ChunkedEncodingError>": [[92, "class ChunkedEncodingError(RequestException):"]]}, "InvalidURL": {"<InvalidURL>": [[80, "class InvalidURL(RequestException, ValueError):"]]}, "Timeout": {"<Timeout>": [[44, "class Timeout(RequestException):"]]}, "ContentDecodingError": {"<ContentDecodingError>": [[96, "class ContentDecodingError(RequestException, BaseHTTPError):"]]}, "SSLError": {"<SSLError>": [[40, "class SSLError(ConnectionError):"]]}, "InvalidSchema": {"<InvalidSchema>": [[76, "class InvalidSchema(RequestException, ValueError):"]]}, "HTTPError": {"<HTTPError>": [[28, "class HTTPError(RequestException):"]]}, "ReadTimeout": {"<ReadTimeout>": [[60, "class ReadTimeout(Timeout):"]]}, "ConnectTimeout": {"<ConnectTimeout>": [[53, "class ConnectTimeout(ConnectionError, Timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.exceptions.RequestException.__init__": {"var": {"response": {"?": [[19, "        response = kwargs.pop('response', None)"]]}}, "param": {"self": {"{HTTPError | RequestException}": [[17, "    def __init__(self, *args, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_hooks.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_hooks.hook": {"param": {"value": {"?": [[8, "def hook(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_hooks": {"func": {"hook": {"? -> ?": [[8, "def hook(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requ": {"func": {"test_hooks": {"(?, ?) -> None": [[18, "def test_hooks(hooks_list, result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_hooks.test_hook": {"param": {"result": {"?": [[18, "def test_hooks(hooks_list, result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_hooks.te": {"param": {"hooks_list": {"?": [[18, "def test_hooks(hooks_list, result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.req": {"func": {"test_default_hooks": {"() -> None": [[22, "def test_default_hooks():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/setup.py": {".home.xxm.Desktop.EMSE.dataset.requests.setup.PyTest.finalize_option": {"param": {"self": {"PyTest": [[25, "    def finalize_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.setup.PyT": {"var": {"user_options": {"[(str, str, str)]": [[15, "    user_options = [('pytest-args=', 'a', \"Arguments to pass into py.test\")]"]]}}, "func": {"finalize_options": {"PyTest -> None": [[25, "    def finalize_options(self):"]]}, "run_tests": {"PyTest -> None": [[30, "    def run_tests(self):"]]}, "initialize_options": {"PyTest -> ?": [[17, "    def initialize_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.setup.PyTest.initialize_option": {"param": {"self": {"PyTest": [[17, "    def initialize_options(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.setup.PyTest.run_tests": {"var": {"errno": {"?": [[33, "        errno = pytest.main(self.pytest_args)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.setu": {"var": {"packages": {"[str]": [[42, "packages = ['requests']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.setup": {"var": {"about": {"dict": [[60, "about = {}"]]}, "here": {"str": [[12, "here = os.path.abspath(os.path.dirname(__file__))"]]}, "test_requirements": {"[str]": [[51, "test_requirements = ["]]}, "readme": {"str": [[65, "    readme = f.read()"]]}, "requires": {"[str]": [[44, "requires = ["]]}, "history": {"str": [[67, "    history = f.read()"]]}}, "class": {"PyTest": {"<PyTest>": [[14, "class PyTest(TestCommand):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.setup.PyTest.run_test": {"param": {"self": {"PyTest": [[30, "    def run_tests(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_lowlevel.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_not_sent_with_request.response_handl": {"var": {"req": {"str": [[242, "        req = consume_socket_content(sock, timeout=0.5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_redirect_rfc1808_to_non_ascii_location": {"var": {"expected_path": {"str": [[210, "    expected_path = b'%C5%A1'"]]}, "url": {"str": [[229, "        url = u'http://{}:{}'.format(host, port)"]]}, "server": {"Server": [[226, "    server = Server(redirect_resp_handler, wait_to_close_event=close_server)"]]}, "r": {"None": [[230, "        r = requests.get(url=url, allow_redirects=True)"]]}, "redirect_request": {"[str]": [[211, "    redirect_request = []  # stores the second request to the server"]]}, "path": {"str": [[209, "    path = u'\u0161'"]]}, "close_server": {"?": [[225, "    close_server = threading.Event()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_count_reset_on_redir": {"var": {"expected_digest": {"str": [[46, "    expected_digest = (b'Authorization: Digest username=\"user\", '"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_count_reset_on_redirect.digest_response_handler": {"param": {"sock": {"?": [[52, "    def digest_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_update_on_redirec": {"var": {"raw_request": {"?": [[298, "        raw_request = r.content"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_chunked_upload": {"var": {"url": {"str": [[19, "        url = 'http://{}:{}/'.format(host, port)"]]}, "r": {"None": [[20, "        r = requests.post(url, data=data, stream=True)"]]}, "close_server": {"?": [[14, "    close_server = threading.Event()"]]}, "server": {"Server": [[15, "    server = Server.basic_response_server(wait_to_close_event=close_server)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlev": {"func": {"test_chunked_upload": {"() -> None": [[12, "def test_chunked_upload():"]]}, "test_digestauth_401_only_sent_once": {"() -> None": [[92, "def test_digestauth_401_only_sent_once():"]]}, "test_digestauth_only_on_4xx": {"() -> None": [[138, "def test_digestauth_only_on_4xx():"]]}, "test_redirect_rfc1808_to_non_ascii_location": {"() -> None": [[208, "def test_redirect_rfc1808_to_non_ascii_location():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_only_on_4xx.digest_response_handl": {"var": {"request_content": {"str": [[153, "        request_content = consume_socket_content(sock, timeout=0.5)"], [158, "        request_content = consume_socket_content(sock, timeout=0.5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_only_on_4": {"var": {"text_200_chal": {"str": [[143, "    text_200_chal = (b'HTTP/1.1 200 OK\\r\\n'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_not_sent_with_request.response_handler": {"param": {"sock": {"?": [[241, "    def response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_not_sent_with_request": {"var": {"frag": {"str": [[262, "        for frag in (b'view', b'edit', b'token', b'hunter2'):"]]}, "url": {"str": [[253, "        url = 'http://{}:{}/path/to/thing/#view=edit&token=hunter2'.format(host, port)"]]}, "server": {"Server": [[250, "    server = Server(response_handler, wait_to_close_event=close_server)"]]}, "headers": {"?": [[258, "        headers, body = raw_request.split(b'\\r\\n\\r\\n', 1)"]]}, "r": {"None": [[254, "        r = requests.get(url)"]]}, "close_server": {"?": [[249, "    close_server = threading.Event()"]]}}, "func": {"response_handler": {"? -> None": [[241, "    def response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_only_on_4xx.digest_response_handler": {"param": {"sock": {"?": [[151, "    def digest_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_redirect_rfc1808_to_non_ascii_location.redirect_resp_handler": {"var": {"location": {"str": [[215, "        location = u'//{}:{}/{}'.format(host, port, path)"]]}}, "param": {"sock": {"?": [[213, "    def redirect_resp_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_count_reset_on_redirec": {"var": {"text_302": {"str": [[39, "    text_302 = (b'HTTP/1.1 302 FOUND\\r\\n'"]]}, "text_200": {"str": [[43, "    text_200 = (b'HTTP/1.1 200 OK\\r\\n'"]]}, "text_401": {"str": [[33, "    text_401 = (b'HTTP/1.1 401 UNAUTHORIZED\\r\\n'"]]}, "auth": {"HTTPDigestAuth": [[50, "    auth = requests.auth.HTTPDigestAuth('user', 'pass')"]]}}, "func": {"digest_response_handler": {"? -> str": [[52, "    def digest_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_only_sent_on": {"var": {"expected_digest": {"str": [[102, "    expected_digest = (b'Authorization: Digest username=\"user\", '"]]}, "close_server": {"?": [[126, "    close_server = threading.Event()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_only_sent_onc": {"var": {"text_401": {"str": [[96, "    text_401 = (b'HTTP/1.1 401 UNAUTHORIZED\\r\\n'"]]}, "server": {"Server": [[127, "    server = Server(digest_failed_response_handler, wait_to_close_event=close_server)"]]}}, "func": {"digest_failed_response_handler": {"? -> str": [[108, "    def digest_failed_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel": {"var": {"_schemes_by_var_prefix": {"[(str, [str])]": [[175, "_schemes_by_var_prefix = ["]]}, "scheme": {"str": [[183, "    for scheme in schemes:"]]}, "_proxy_combos": {"[(str, str)]": [[181, "_proxy_combos = []"]]}, "prefix": {"str": [[182, "for prefix, schemes in _schemes_by_var_prefix:"]]}}, "func": {"test_fragment_not_sent_with_request": {"() -> None": [[239, "def test_fragment_not_sent_with_request():"]]}, "test_digestauth_401_count_reset_on_redirect": {"() -> None": [[27, "def test_digestauth_401_count_reset_on_redirect():"]]}, "test_fragment_update_on_redirect": {"() -> None": [[268, "def test_fragment_update_on_redirect():"]]}, "test_use_proxy_from_environment": {"(?, ?, ?) -> None": [[190, "def test_use_proxy_from_environment(httpbin, var, scheme):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_chunked_uplo": {"var": {"data": {"?": [[16, "    data = iter([b'a', b'b', b'c'])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_count_reset_on_redirect": {"var": {"url": {"str": [[80, "        url = 'http://{}:{}/'.format(host, port)"]]}, "r": {"None": [[81, "        r = requests.get(url, auth=auth)"]]}, "close_server": {"?": [[76, "    close_server = threading.Event()"]]}, "server": {"Server": [[77, "    server = Server(digest_response_handler, wait_to_close_event=close_server)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_only_sent_once.digest_failed_response_handl": {"var": {"request_content": {"str": [[110, "        request_content = consume_socket_content(sock, timeout=0.5)"], [116, "        request_content = consume_socket_content(sock, timeout=0.5)"], [121, "        request_content = consume_socket_content(sock, timeout=0.5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_only_on_4xx": {"var": {"url": {"str": [[167, "        url = 'http://{}:{}/'.format(host, port)"]]}, "r": {"None": [[168, "        r = requests.get(url, auth=auth)"]]}, "close_server": {"?": [[163, "    close_server = threading.Event()"]]}, "auth": {"HTTPDigestAuth": [[149, "    auth = requests.auth.HTTPDigestAuth('user', 'pass')"]]}, "server": {"Server": [[164, "    server = Server(digest_response_handler, wait_to_close_event=close_server)"]]}}, "func": {"digest_response_handler": {"? -> str": [[151, "    def digest_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_update_on_redirect.response_handler": {"param": {"sock": {"?": [[274, "    def response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_not_sent_with": {"var": {"raw_request": {"?": [[255, "        raw_request = r.content"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_not_sent_with_req": {"var": {"status_line": {"?": [[259, "        status_line, headers = headers.split(b'\\r\\n', 1)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_only_sent_once.digest_failed_response_handler": {"param": {"sock": {"?": [[108, "    def digest_failed_response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_redirect_rfc1808_to_non_ascii_locatio": {"func": {"redirect_resp_handler": {"? -> None": [[213, "    def redirect_resp_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_only_sent_once": {"var": {"url": {"str": [[130, "        url = 'http://{}:{}/'.format(host, port)"]]}, "r": {"None": [[131, "        r = requests.get(url, auth=auth)"]]}, "auth": {"HTTPDigestAuth": [[106, "    auth = requests.auth.HTTPDigestAuth('user', 'pass')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_fragment_update_on_redirect": {"var": {"url": {"str": [[296, "        url = 'http://{}:{}/path/to/thing/#view=edit&token=hunter2'.format(host, port)"]]}, "r": {"None": [[297, "        r = requests.get(url)"]]}, "close_server": {"?": [[292, "    close_server = threading.Event()"]]}, "server": {"Server": [[293, "    server = Server(response_handler, wait_to_close_event=close_server)"]]}}, "func": {"response_handler": {"? -> None": [[274, "    def response_handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_digestauth_401_count_reset_on_redirect.digest_response_handl": {"var": {"request_content": {"str": [[54, "        request_content = consume_socket_content(sock, timeout=0.5)"], [59, "        request_content = consume_socket_content(sock, timeout=0.5)"], [65, "        request_content = consume_socket_content(sock, timeout=0.5)"], [70, "        request_content = consume_socket_content(sock, timeout=0.5)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_use_proxy_from_environment": {"var": {"url": {"str": [[191, "    url = \"{}://httpbin.org\".format(scheme)"]]}, "fake_proxy": {"Server": [[192, "    fake_proxy = Server()  # do nothing with the requests; just close the socket"]]}, "proxy_url": {"str": [[194, "        proxy_url = \"socks5://{}:{}\".format(host, port)"]]}, "kwargs": {"dict": [[195, "        kwargs = {var: proxy_url}"]]}}, "param": {"var": {"?": [[190, "def test_use_proxy_from_environment(httpbin, var, scheme):"]]}, "scheme": {"?": [[190, "def test_use_proxy_from_environment(httpbin, var, scheme):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_lowlevel.test_use_proxy_from_environme": {"param": {"httpbin": {"?": [[190, "def test_use_proxy_from_environment(httpbin, var, scheme):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_requests.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cannot_send_unprepared_requests": {"var": {"r": {"Request": [[1332, "        r = requests.Request(url=httpbin())"]]}}, "param": {"httpbin": {"?": [[1331, "    def test_cannot_send_unprepared_requests(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession.__in": {"param": {"order_of_redirects": {"[int]": [[2226, "    def __init__(self, order_of_redirects):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_manual_redirect_with_partial_body_read": {"var": {"r1": {"None": [[1630, "        r1 = s.get(httpbin('redirect/2'), allow_redirects=False, stream=True)"]]}, "r2": {"?": [[1637, "        r2 = next(rg)"]]}, "r3": {"?": [[1644, "        r3 = next(rg)"]]}, "s": {"Session": [[1629, "        s = requests.Session()"]]}, "rg": {"?": [[1632, "        rg = s.resolve_redirects(r1, r1.request, stream=True)"]]}, "_": {"?": [[1642, "        for _ in r2.iter_content():"]]}}, "param": {"self": {"TestRequests": [[1628, "    def test_manual_redirect_with_partial_body_read(self, httpbin):"]]}, "httpbin": {"?": [[1628, "    def test_manual_redirect_with_partial_body_read(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_update_retains_unchanged": {"param": {"self": {"TestCaseInsensitiveDict": [[2025, "    def test_update_retains_unchanged(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_total_timeout_connec": {"param": {"timeout": {"?": [[2209, "    def test_total_timeout_connect(self, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_headers_on_session_with_None_are_not_sent": {"var": {"req": {"Request": [[442, "        req = requests.Request('GET', httpbin('get'))"]]}, "ses": {"Session": [[440, "        ses = requests.Session()"]]}, "prep": {"PreparedRequest": [[443, "        prep = ses.prepare_request(req)"]]}}, "param": {"self": {"TestRequests": [[438, "    def test_headers_on_session_with_None_are_not_sent(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_reason_unicod": {"param": {"self": {"TestRequests": [[1233, "    def test_response_reason_unicode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_is_iterab": {"param": {"self": {"TestRequests": [[1202, "    def test_response_is_iterable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests._patch_adapter_gzipped_redirect.build_respon": {"var": {"resp": {"?": [[1748, "            resp = org_build_response(*args, **kwargs)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.__init__": {"param": {"self": {"BadFileObj": [[1724, "            def __init__(self, data):"]]}, "data": {"str": [[1724, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_persists_via_api": {"var": {"s": {"Session": [[354, "        s = requests.session()"]]}, "r": {"None": [[355, "        r = s.get(httpbin('redirect/1'), cookies={'foo': 'bar'})"]]}}, "param": {"self": {"TestRequests": [[353, "    def test_cookie_persists_via_api(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession": {"func": {"_build_raw": {"RedirectSession -> None": [[2251, "    def _build_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.t": {"param": {"self": {"BadFileObj": [[1727, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_set_basic": {"var": {"auth": {"(?, ?)": [[505, "        auth = (username, password)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieExpires.test_expires_non": {"var": {"cookie": {"?": [[2119, "        cookie = morsel_to_cookie(morsel)"]]}, "morsel": {"?": [[2117, "        morsel = Morsel()"]]}}, "param": {"self": {"TestMorselToCookieExpires": [[2114, "    def test_expires_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_fragment_maintained_on_redirec": {"var": {"fragment": {"str": [[302, "        fragment = \"#view=edit&token=hunter2\""]]}}, "param": {"httpbin": {"?": [[301, "    def test_fragment_maintained_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_and_body_removal_on_redirec": {"var": {"next_resp": {"?": [[273, "        next_resp = next(ses.resolve_redirects(resp, prep))"]]}}, "param": {"httpbin": {"?": [[261, "    def test_header_and_body_removal_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_and_response_are_pickleable": {"var": {"pr": {"?": [[1281, "        pr = pickle.loads(pickle.dumps(r))"]]}, "r": {"None": [[1274, "        r = requests.get(httpbin('get'))"]]}}, "param": {"httpbin": {"?": [[1273, "    def test_request_and_response_are_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_context_manager": {"param": {"self": {"TestRequests": [[1804, "    def test_response_context_manager(self, httpbin):"]]}, "httpbin": {"?": [[1804, "    def test_response_context_manager(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepare_body_position_non_stream": {"var": {"data": {"str": [[1648, "        data = b'the data'"]]}, "prep": {"PreparedRequest": [[1649, "        prep = requests.Request('GET', 'http://example.com', data=data).prepare()"]]}}, "param": {"self": {"TestRequests": [[1647, "    def test_prepare_body_position_non_stream(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_item": {"param": {"self": {"TestRequests": [[1136, "    def test_cookie_as_dict_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_erro": {"var": {"jar": {"RequestsCookieJar": [[1178, "        jar = requests.cookies.RequestsCookieJar()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession.send": {"param": {"self": {"RedirectSession": [[2233, "    def send(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_files_inpu": {"var": {"post": {"None": [[684, "        post = requests.post(url,"]]}}, "param": {"httpbin": {"?": [[681, "    def test_invalid_files_input(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieE": {"func": {"test_expires_none": {"TestMorselToCookieExpires -> None": [[2114, "    def test_expires_none(self):"]]}, "test_expires_valid_str": {"TestMorselToCookieExpires -> None": [[2094, "    def test_expires_valid_str(self):"]]}, "test_expires_invalid_int": {"(TestMorselToCookieExpires, ?, ?) -> None": [[2107, "    def test_expires_invalid_int(self, value, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS": {"var": {"url": {"?": [[198, "            url = httpbin('relative-redirect', '20')"]]}}, "param": {"self": {"TestRequests": [[194, "    def test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin):"]]}, "httpbin": {"?": [[194, "    def test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_auth_is_stripped_on_http_downgrad": {"param": {"self": {"TestRequests": [[1579, "    def test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle):"]]}, "httpbin_secure": {"?": [[1579, "    def test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_iter_lines_reentrant": {"var": {"r": {"None": [[1822, "        r = requests.get(httpbin('stream/4'), stream=True)"]]}}, "param": {"self": {"TestRequests": [[1820, "    def test_response_iter_lines_reentrant(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_total_timeout_connect": {"param": {"self": {"TestTimeout": [[2209, "    def test_total_timeout_connect(self, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_is_pickleable": {"var": {"p": {"PreparedRequest": [[1286, "        p = requests.Request('GET', httpbin('get')).prepare()"]]}, "s": {"Session": [[1295, "        s = requests.Session()"]]}, "r": {"?": [[1289, "        r = pickle.loads(pickle.dumps(p))"]]}}, "param": {"httpbin": {"?": [[1285, "    def test_prepared_request_is_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_keys_are_native": {"var": {"p": {"PreparedRequest": [[1475, "        p = r.prepare()"]]}, "r": {"Request": [[1474, "        r = requests.Request('GET', httpbin('get'), headers=headers)"]]}}, "param": {"httpbin": {"?": [[1472, "    def test_header_keys_are_native(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_long_authinfo_in_url": {"var": {"r": {"PreparedRequest": [[1469, "        r = requests.Request('GET', url).prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER": {"var": {"test": {"TestStream": [[720, "        test = TestStream('test')"], [725, "        test = TestStream('test')"]]}, "post2": {"None": [[727, "        post2 = requests.post(httpbin('post'), data=test)"]]}, "post1": {"None": [[721, "        post1 = requests.post(httpbin('post'), data=test)"]]}}, "class": {"TestStream": {"<TestStream>": [[691, "        class TestStream(object):"]]}}, "param": {"self": {"TestRequests": [[689, "    def test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin):"]]}, "httpbin": {"?": [[689, "    def test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_cookie_overrides_session_cookie": {"var": {"s": {"Session": [[360, "        s = requests.session()"]]}, "r": {"None": [[362, "        r = s.get(httpbin('cookies'), cookies={'foo': 'baz'})"]]}}, "param": {"httpbin": {"?": [[359, "    def test_request_cookie_overrides_session_cookie(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_content_typ": {"param": {"self": {"TestRequests": [[935, "    def test_custom_content_type(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_303_changes_post_to_ge": {"param": {"httpbin": {"?": [[247, "    def test_http_303_changes_post_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_bad_url": {"var": {"r": {"Request": [[2447, "        r = requests.Request('GET', url=url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_time_elapsed_blank": {"var": {"total_seconds": {"int": [[1195, "        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6)"]]}, "td": {"?": [[1194, "        td = r.elapsed"]]}, "r": {"None": [[1193, "        r = requests.get(httpbin('get'))"]]}}, "param": {"self": {"TestRequests": [[1192, "    def test_time_elapsed_blank(self, httpbin):"]]}, "httpbin": {"?": [[1192, "    def test_time_elapsed_blank(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_fixes_1329": {"var": {"headers": {"?": [[1362, "        headers = r.request.headers"]]}, "s": {"Session": [[1358, "        s = requests.Session()"]]}, "r": {"None": [[1361, "        r = s.get(httpbin('get'))"]]}}, "param": {"self": {"TestRequests": [[1356, "    def test_fixes_1329(self, httpbin):"]]}, "httpbin": {"?": [[1356, "    def test_fixes_1329(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_hooks_are_overridden_by_request_hook": {"var": {"s": {"Session": [[969, "        s = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[965, "    def test_session_hooks_are_overridden_by_request_hooks(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_header_nam": {"param": {"self": {"TestRequests": [[809, "    def test_unicode_header_name(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_303_changes_post_to_get": {"var": {"r": {"None": [[248, "        r = requests.post(httpbin('status', '303'))"]]}}, "param": {"self": {"TestRequests": [[247, "    def test_http_303_changes_post_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_encoded_method": {"param": {"self": {"TestTimeout": [[2216, "    def test_encoded_methods(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_301_doesnt_change_head_to_get": {"var": {"r": {"None": [[226, "        r = requests.head(httpbin('status', '301'), allow_redirects=True)"]]}}, "param": {"self": {"TestRequests": [[225, "    def test_http_301_doesnt_change_head_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_ssl_certificate_fi": {"param": {"self": {"TestRequests": [[824, "    def test_invalid_ssl_certificate_files(self, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_reason_unicode_fallback": {"var": {"reason": {"str": [[1246, "        reason = u'Komponenttia ei l\u00f6ydy'"]]}, "r": {"Response": [[1244, "        r = requests.Response()"]]}}, "param": {"self": {"TestRequests": [[1242, "    def test_response_reason_unicode_fallback(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_removed_on_expire": {"var": {"s": {"Session": [[336, "        s = requests.session()"]]}}, "param": {"httpbin": {"?": [[335, "    def test_cookie_removed_on_expire(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unconsumed_session_response_closes_connection": {"var": {"s": {"Session": [[1811, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[1810, "    def test_unconsumed_session_response_closes_connection(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cannot_send_unprepared_request": {"param": {"self": {"TestRequests": [[1331, "    def test_cannot_send_unprepared_requests(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_different_encodings_dont_break_pos": {"param": {"httpbin": {"?": [[880, "    def test_different_encodings_dont_break_post(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_200_OK_PUT": {"var": {"r": {"None": [[479, "        r = requests.put(httpbin('put'))"]]}}, "param": {"self": {"TestRequests": [[478, "    def test_HTTP_200_OK_PUT(self, httpbin):"]]}, "httpbin": {"?": [[478, "    def test_HTTP_200_OK_PUT(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_items": {"var": {"key1": {"str": [[1140, "        key1 = 'some_cookie1'"]]}, "value1": {"str": [[1141, "        value1 = 'some_value1'"]]}, "jar": {"RequestsCookieJar": [[1143, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1138, "        value = 'some_value'"]]}, "key": {"str": [[1137, "        key = 'some_cookie'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_value_not_str": {"param": {"self": {"TestRequests": [[1491, "    def test_header_value_not_str(self, httpbin):"]]}, "httpbin": {"?": [[1491, "    def test_header_value_not_str(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_param_cookiejar_work": {"var": {"s": {"Session": [[387, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[384, "    def test_param_cookiejar_works(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_whitespaces_are_removed_from_ur": {"param": {"self": {"TestRequests": [[149, "    def test_whitespaces_are_removed_from_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_quote_wrapped": {"var": {"s": {"Session": [[349, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[348, "    def test_cookie_quote_wrapped(self, httpbin):"]]}, "httpbin": {"?": [[348, "    def test_cookie_quote_wrapped(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_hook_receives_request_argument": {"var": {"s": {"Session": [[951, "        s = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[946, "    def test_hook_receives_request_arguments(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests._patch_adapter_gzipped_redirect": {"var": {"org_build_response": {"?": [[1744, "        org_build_response = adapter.build_response"]]}}, "param": {"url": {"?": [[1742, "    def _patch_adapter_gzipped_redirect(self, session, url):"]]}, "self": {"TestRequests": [[1742, "    def _patch_adapter_gzipped_redirect(self, session, url):"]]}, "session": {"Session": [[1742, "    def _patch_adapter_gzipped_redirect(self, session, url):"]]}}, "func": {"build_response": {"() -> None": [[1747, "        def build_response(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_redirect_with_wrong_gzipped_header": {"var": {"s": {"Session": [[1757, "        s = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[1756, "    def test_redirect_with_wrong_gzipped_header(self, httpbin):"]]}, "httpbin": {"?": [[1756, "    def test_redirect_with_wrong_gzipped_header(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_conflicting_post_params": {"var": {"url": {"?": [[775, "        url = httpbin('post')"]]}}, "param": {"httpbin": {"?": [[774, "    def test_conflicting_post_params(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basic_auth_str_is_always_native": {"var": {"s": {"str": [[1768, "        s = _basic_auth_str(username, password)"]]}}, "param": {"password": {"?": [[1767, "    def test_basic_auth_str_is_always_native(self, username, password, auth_str):"]]}, "auth_str": {"?": [[1767, "    def test_basic_auth_str_is_always_native(self, username, password, auth_str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_preserve_key_ca": {"var": {"keyset": {"?": [[2063, "        keyset = frozenset(['Accept', 'user-Agent'])"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2058, "    def test_preserve_key_case(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_decompress_gzip": {"var": {"r": {"None": [[795, "        r = requests.get(httpbin('gzip'))"]]}}, "param": {"self": {"TestRequests": [[794, "    def test_decompress_gzip(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_301_changes_post_to_get": {"var": {"r": {"None": [[219, "        r = requests.post(httpbin('status', '301'))"]]}}, "param": {"self": {"TestRequests": [[218, "    def test_http_301_changes_post_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.ault_hooks": {"var": {"p": {"PreparedRequest": [[2353, "    p = PreparedRequest()"]]}, "copy": {"PreparedRequest": [[2356, "    copy = p.copy()"]]}, "attr": {"str": [[2357, "    for attr in ('method', 'url', 'headers', '_cookies', 'body', 'hooks'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_port_chang": {"param": {"self": {"TestRequests": [[1613, "    def test_should_strip_auth_port_change(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_set_basicauth": {"var": {"url": {"?": [[506, "        url = httpbin('get')"]]}, "p": {"PreparedRequest": [[509, "        p = r.prepare()"]]}, "r": {"Request": [[508, "        r = requests.Request('GET', url, auth=auth)"]]}}, "param": {"username": {"?": [[504, "    def test_set_basicauth(self, httpbin, username, password):"]]}, "self": {"TestRequests": [[504, "    def test_set_basicauth(self, httpbin, username, password):"]]}, "password": {"?": [[504, "    def test_set_basicauth(self, httpbin, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_tell": {"var": {"data": {"BadFileObj": [[1733, "        data = BadFileObj('the data')"]]}, "prep": {"PreparedRequest": [[1734, "        prep = requests.Request('GET', 'http://example.com', data=data).prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_auth_empty_pass": {"var": {"adapter": {"HTTPAdapter": [[1845, "        adapter = HTTPAdapter()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.seek": {"param": {"self": {"TestStream": [[712, "            def seek(self, offset, where=0):"]]}, "where": {"int": [[712, "            def seek(self, offset, where=0):"]]}, "offset": {"int": [[712, "            def seek(self, offset, where=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_iter": {"var": {"keys": {"?": [[2032, "        keys = frozenset(['Spam', 'Eggs'])"]]}, "cid": {"CaseInsensitiveDict": [[2031, "        cid = CaseInsensitiveDict({'Spam': 'spam', 'Eggs': 'eggs'})"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2030, "    def test_iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookielib_cookiejar_on_redirect": {"var": {"cj": {"RequestsCookieJar": [[398, "        cj = cookiejar_from_dict({'foo': 'bar'}, cookielib.CookieJar())"]]}, "cookies": {"dict": [[418, "        cookies = {}"]]}, "resp": {"?": [[407, "        resp = s.send(prep_req)"], [411, "        resp = next(redirects)"]]}, "req": {"Request": [[403, "        req = requests.Request('GET', httpbin('headers'), cookies=cj)"]]}, "c": {"?": [[419, "        for c in resp.request._cookies:"]]}, "s": {"Session": [[399, "        s = requests.Session()"]]}, "prep_req": {"PreparedRequest": [[404, "        prep_req = req.prepare()"]]}}, "param": {"self": {"TestRequests": [[392, "    def test_cookielib_cookiejar_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_preserve_last_key_ca": {"var": {"keyset": {"?": [[2075, "        keyset = frozenset(['ACCEPT', 'USER-AGENT'])"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2068, "    def test_preserve_last_key_case(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_redirect_mixin.CustomRedirectSession.get_redirect_target": {"param": {"self": {"CustomRedirectSession": [[1928, "            def get_redirect_target(self, resp):"]]}, "resp": {"None": [[1928, "            def get_redirect_target(self, resp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_ok_se": {"param": {"httpbin": {"?": [[782, "    def test_request_ok_set(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_with_file_is_pickleable": {"var": {"p": {"PreparedRequest": [[1302, "        p = r.prepare()"]]}, "s": {"Session": [[1311, "        s = requests.Session()"]]}, "r": {"Request": [[1301, "        r = requests.Request('POST', httpbin('post'), files=files)"]], "?": [[1305, "        r = pickle.loads(pickle.dumps(p))"]]}}, "param": {"httpbin": {"?": [[1299, "    def test_prepared_request_with_file_is_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_init": {"param": {"self": {"TestCaseInsensitiveDict": [[1957, "    def test_init(self, cid):"]]}, "cid": {"?": [[1957, "    def test_init(self, cid):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_url_mutatio": {"param": {"input": {"?": [[2486, "    def test_url_mutation(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_keys_are_nativ": {"var": {"headers": {"dict": [[1473, "        headers = {u('unicode'): 'blah', 'byte'.encode('ascii'): 'blah'}"]]}}, "param": {"self": {"TestRequests": [[1472, "    def test_header_keys_are_native(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_get": {"param": {"url": {"?": [[806, "    def test_unicode_get(self, httpbin, url, params):"]]}, "self": {"TestRequests": [[806, "    def test_unicode_get(self, httpbin, url, params):"]]}, "params": {"?": [[806, "    def test_unicode_get(self, httpbin, url, params):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_urllib3_retries": {"param": {"httpbin": {"?": [[2361, "def test_urllib3_retries(httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_status_raising": {"var": {"r": {"None": [[787, "        r = requests.get(httpbin('status', '404'))"], [791, "        r = requests.get(httpbin('status', '500'))"]]}}, "param": {"self": {"TestRequests": [[786, "    def test_status_raising(self, httpbin):"]]}, "httpbin": {"?": [[786, "    def test_status_raising(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_none_": {"param": {"timeout": {"?": [[2167, "    def test_none_timeout(self, httpbin, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_DIGESTAUTH_WRONG_HTTP_401_GET": {"var": {"url": {"?": [[641, "            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)"]]}, "authtype": {"str": [[639, "        for authtype in self.digest_auth_algo:"]]}, "r": {"None": [[643, "            r = requests.get(url, auth=auth)"], [646, "            r = requests.get(url)"], [651, "            r = s.get(url)"]]}, "s": {"Session": [[649, "            s = requests.session()"]]}, "auth": {"HTTPDigestAuth": [[640, "            auth = HTTPDigestAuth('user', 'wrongpass')"]]}}, "param": {"self": {"TestRequests": [[637, "    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin):"]]}, "httpbin": {"?": [[637, "    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj.__iter__": {"param": {"self": {"BadFileObj": [[1730, "            def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession.build_response": {"var": {"r": {"Response": [[2239, "        r = requests.Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_read_timeout": {"param": {"self": {"(?, None) -> None / (str, None) -> None": [[2184, "    def test_read_timeout(self, httpbin, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_parameters_for_nonstandard_schemes": {"var": {"p": {"PreparedRequest": [[2528, "        p = r.prepare()"]]}, "r": {"Request": [[2527, "        r = requests.Request('GET', url=input, params=params)"]]}}, "param": {"expected": {"?": [[2522, "    def test_parameters_for_nonstandard_schemes(self, input, params, expected):"]]}, "input": {"?": [[2522, "    def test_parameters_for_nonstandard_schemes(self, input, params, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_can_send_file_object_with_non_string_filenam": {"param": {"self": {"TestRequests": [[1552, "    def test_can_send_file_object_with_non_string_filename(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeou": {"func": {"test_encoded_methods": {"(TestTimeout, ?) -> None": [[2216, "    def test_encoded_methods(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj": {"func": {"__iter__": {"BadFileObj -> None": [[1687, "            def __iter__(self):"]]}, "tell": {"BadFileObj -> int": [[1684, "            def tell(self):"]]}, "__init__": {"? -> ?": [[1681, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_leading_space": {"var": {"r": {"None": [[1539, "            r = requests.get(httpbin('get'), headers=headers_space)"], [1542, "            r = requests.get(httpbin('get'), headers=headers_tab)"]]}}, "param": {"httpbin": {"?": [[1530, "    def test_header_no_leading_space(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_validatio": {"param": {"httpbin": {"?": [[1482, "    def test_header_validation(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_override_content_length": {"var": {"r": {"PreparedRequest": [[114, "        r = requests.Request('POST', httpbin('post'), headers=headers).prepare()"]]}}, "param": {"self": {"TestRequests": [[110, "    def test_override_content_length(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieMaxAge.test_max_age_invalid_st": {"var": {"morsel": {"?": [[2138, "        morsel = Morsel()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_response_has_content_none": {"var": {"r": {"Response": [[1199, "        r = requests.Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_with_certificate": {"var": {"r": {"None": [[835, "        r = requests.get(httpbin(), cert='.')"]]}}, "param": {"httpbin": {"?": [[834, "    def test_http_with_certificate(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_ok_set": {"var": {"r": {"None": [[783, "        r = requests.get(httpbin('status', '404'))"]]}}, "param": {"self": {"TestRequests": [[782, "    def test_request_ok_set(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_without_release_conn": {"var": {"resp": {"Response": [[1864, "        resp = requests.Response()"]]}}, "param": {"self": {"TestRequests": [[1860, "    def test_response_without_release_conn(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_persists_via_a": {"param": {"httpbin": {"?": [[353, "    def test_cookie_persists_via_api(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_is_pickleabl": {"var": {"resp": {"?": [[1296, "        resp = s.send(r)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_302_doesnt_change_head_to_ge": {"param": {"httpbin": {"?": [[240, "    def test_http_302_doesnt_change_head_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_redirect_mixin": {"var": {"url_redirect_malformed": {"?": [[1919, "        url_redirect_malformed = httpbin('response-headers?%s' % querystring_malformed)"]]}, "r": {"None": [[1939, "        r = session.get(urls_test[0])"]]}, "urls_test": {"[?]": [[1922, "        urls_test = [url_redirect,"]]}, "url_redirect": {"?": [[1921, "        url_redirect = httpbin('redirect-to?%s' % querystring_redirect)"]]}}, "param": {"self": {"TestRequests": [[1905, "    def test_custom_redirect_mixin(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http": {"var": {"warnings_category": {"tuple": [[855, "        warnings_category = tuple("]]}, "warning_records": {"[?]": [[852, "        warning_records = [item for item in warning_records"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_mixed_case_scheme_acceptab": {"param": {"self": {"TestRequests": [[155, "    def test_mixed_case_scheme_acceptable(self, httpbin, scheme):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_mixed_cas": {"var": {"my_adapter": {"HTTPAdapter": [[1435, "        my_adapter = HTTPAdapter()"]]}, "url_matching_prefix": {"str": [[1432, "        url_matching_prefix = mixed_case_prefix + '/full_url'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_partially_read_body": {"var": {"data": {"?": [[1666, "        data = io.BytesIO(b'the data')"]]}, "prep": {"PreparedRequest": [[1668, "        prep = requests.Request('GET', 'http://example.com', data=data).prepare()"]]}}, "param": {"self": {"TestRequests": [[1665, "    def test_rewind_partially_read_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping": {"var": {"url": {"?": [[770, "        url = httpbin('post')"]]}, "data": {"CustomMapping": [[769, "        data = CustomMapping({'some': 'data'})"]]}, "found_json": {"?": [[771, "        found_json = requests.post(url, data=data).json().get('form')"]]}}, "param": {"self": {"TestRequests": [[749, "    def test_post_with_custom_mapping(self, httpbin):"]]}, "httpbin": {"?": [[749, "    def test_post_with_custom_mapping(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__init__": {"param": {"self": {"CustomMapping": [[751, "            def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_ssl_certificate_files": {"var": {"INVALID_PATH": {"str": [[825, "        INVALID_PATH = '/garbage'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_none_timeout": {"var": {"r": {"None": [[2176, "        r = requests.get(httpbin('get'), timeout=timeout)"]]}}, "param": {"self": {"TestTimeout": [[2167, "    def test_none_timeout(self, httpbin, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_headers_preserve_o": {"var": {"headers": {"?": [[453, "        headers = collections.OrderedDict([('Third', '3'), ('Fourth', '4')])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_cookie_overrides_session_cooki": {"param": {"self": {"TestRequests": [[359, "    def test_request_cookie_overrides_session_cookie(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_stream_with_auth_does_not_set_content_length_heade": {"var": {"url": {"?": [[1875, "        url = httpbin('post')"]]}, "r": {"Request": [[1877, "        r = requests.Request('POST', url, auth=auth, data=file_obj)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_hooks_are_used_with_no_request_hooks": {"var": {"hook": {"? -> ?": [[957, "        hook = lambda x, *args, **kwargs: x"]]}, "r": {"Request": [[960, "        r = requests.Request('GET', httpbin())"]]}, "prep": {"PreparedRequest": [[961, "        prep = s.prepare_request(r)"]]}}, "param": {"httpbin": {"?": [[956, "    def test_session_hooks_are_used_with_no_request_hooks(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_seek": {"var": {"data": {"BadFileObj": [[1713, "        data = BadFileObj('the data')"]]}, "prep": {"PreparedRequest": [[1714, "        prep = requests.Request('GET', 'http://example.com', data=data).prepare()"]]}}, "class": {"BadFileObj": {"<BadFileObj>": [[1700, "        class BadFileObj:"]]}}, "param": {"self": {"TestRequests": [[1699, "    def test_rewind_body_failed_seek(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_non_prepared_request_erro": {"var": {"req": {"Request": [[929, "        req = requests.Request(u('POST'), '/')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_files_input": {"var": {"url": {"?": [[683, "        url = httpbin('post')"]]}}, "param": {"self": {"TestRequests": [[681, "    def test_invalid_files_input(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_with_bytestring_hos": {"param": {"httpbin": {"?": [[1013, "    def test_request_with_bytestring_host(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMappin": {"func": {"__getitem__": {"(CustomMapping, ?) -> ?": [[757, "            def __getitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_preserve_last_key_case": {"var": {"cid": {"CaseInsensitiveDict": [[2069, "        cid = CaseInsensitiveDict({"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_requests_in_history_are_not_overridden": {"var": {"resp": {"None": [[425, "        resp = requests.get(httpbin('redirect/3'))"]]}, "req_urls": {"[?]": [[427, "        req_urls = [r.request.url for r in resp.history]"]]}, "urls": {"[?]": [[426, "        urls = [r.url for r in resp.history]"]]}}, "param": {"self": {"TestRequests": [[424, "    def test_requests_in_history_are_not_overridden(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_value_not_st": {"var": {"r": {"None": [[1501, "            r = requests.get(httpbin('get'), headers=headers_int)"], [1505, "            r = requests.get(httpbin('get'), headers=headers_dict)"], [1509, "            r = requests.get(httpbin('get'), headers=headers_list)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_redirecting_to_bad_url": {"var": {"r": {"None": [[2459, "            r = requests.get(httpbin('redirect-to'), params={'url': url})"]]}}, "param": {"exception": {"?": [[2457, "    def test_redirecting_to_bad_url(self, httpbin, url, exception):"]]}, "httpbin": {"?": [[2457, "    def test_redirecting_to_bad_url(self, httpbin, url, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_link": {"param": {"self": {"TestRequests": [[1023, "    def test_links(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieExpires.test_expires_valid_st": {"var": {"morsel": {"?": [[2097, "        morsel = Morsel()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_keeps_item": {"param": {"self": {"TestRequests": [[1085, "    def test_cookie_as_dict_keeps_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_redirect_mixin.CustomRedirectSession": {"func": {"get_redirect_target": {"(CustomRedirectSession, ?) -> None / (CustomRedirectSession, None) -> None": [[1928, "            def get_redirect_target(self, resp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_transport_adapter_ordering": {"var": {"s2": {"Session": [[1406, "        s2 = requests.Session()"]]}, "s": {"Session": [[1375, "        s = requests.Session()"]]}, "order": {"[str]": [[1376, "        order = ['https://', 'http://']"], [1382, "        order = ["], [1394, "        order = ["]]}}, "param": {"self": {"TestRequests": [[1374, "    def test_transport_adapter_ordering(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepare_request_with_bytestring_url": {"var": {"s": {"Session": [[1009, "        s = requests.Session()"]]}, "req": {"Request": [[1008, "        req = requests.Request('GET', b'https://httpbin.org/')"]]}, "prep": {"PreparedRequest": [[1010, "        prep = s.prepare_request(req)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_sent_on_redirect": {"var": {"s": {"Session": [[330, "        s = requests.session()"]]}, "r": {"None": [[332, "        r = s.get(httpbin('redirect/1'))  # redirects to httpbin('get')"]]}}, "param": {"self": {"TestRequests": [[329, "    def test_cookie_sent_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_contains": {"var": {"cid": {"CaseInsensitiveDict": [[1997, "        cid = CaseInsensitiveDict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_requests_history_is_saved": {"var": {"total": {"[None]": [[1774, "        total = r.history[-1].history"]]}, "i": {"int": [[1775, "        i = 0"]]}, "r": {"None": [[1773, "        r = requests.get(httpbin('redirect/5'))"]]}, "item": {"None": [[1776, "        for item in r.history:"]]}}, "param": {"self": {"TestRequests": [[1772, "    def test_requests_history_is_saved(self, httpbin):"]]}, "httpbin": {"?": [[1772, "    def test_requests_history_is_saved(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_is_iterable": {"var": {"r": {"Response": [[1203, "        r = requests.Response()"]]}, "io": {"?": [[1204, "        io = StringIO.StringIO('abc')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_update_retains_unchange": {"var": {"cid": {"CaseInsensitiveDict": [[2026, "        cid = CaseInsensitiveDict({'foo': 'foo', 'bar': 'bar'})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_DIGEST_HTTP_200_OK_GET": {"var": {"url": {"?": [[591, "            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype, 'never')"]]}, "authtype": {"str": [[589, "        for authtype in self.digest_auth_algo:"]]}, "r": {"None": [[593, "            r = requests.get(url, auth=auth)"], [596, "            r = requests.get(url)"], [602, "            r = s.get(url)"]]}, "s": {"Session": [[600, "            s = requests.session()"]]}, "auth": {"HTTPDigestAuth": [[590, "            auth = HTTPDigestAuth('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[587, "    def test_DIGEST_HTTP_200_OK_GET(self, httpbin):"]]}, "httpbin": {"?": [[587, "    def test_DIGEST_HTTP_200_OK_GET(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_remove_is_case_insensitiv": {"param": {"self": {"TestRequests": [[1450, "    def test_header_remove_is_case_insensitive(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_override_content_lengt": {"var": {"headers": {"dict": [[111, "        headers = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__setitem__": {"param": {"self": {"CustomMapping": [[760, "            def __setitem__(self, key, value):"]]}, "value": {"?": [[760, "            def __setitem__(self, key, value):"]]}, "key": {"?": [[760, "            def __setitem__(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_nonhttp_schemes_dont_check_URL": {"var": {"test_urls": {"(str, str, str)": [[1569, "        test_urls = ("]]}, "test_url": {"str": [[1574, "        for test_url in test_urls:"]]}}, "param": {"self": {"TestRequests": [[1568, "    def test_nonhttp_schemes_dont_check_URLs(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_pyopenssl_redir": {"param": {"httpbin_ca_bundle": {"?": [[815, "    def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_valu": {"param": {"self": {"TestRequests": [[1120, "    def test_cookie_as_dict_values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_redirect_mix": {"var": {"session": {"CustomRedirectSession": [[1938, "        session = CustomRedirectSession()"]]}, "querystring_redirect": {"?": [[1920, "        querystring_redirect = urlencode({'url': url_redirect_malformed})"]]}, "url_final": {"?": [[1917, "        url_final = httpbin('html')"]]}, "querystring_malformed": {"?": [[1918, "        querystring_malformed = urlencode({'location': url_final})"]]}}, "class": {"CustomRedirectSession": {"<CustomRedirectSession>": [[1927, "        class CustomRedirectSession(requests.Session):"]]}}, "param": {"httpbin": {"?": [[1905, "    def test_custom_redirect_mixin(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_requests_are_updated_each_tim": {"var": {"send_call": {"(namedtuple)": [[2286, "        send_call = SendCall((response.request,), default_keyword_args)"]]}, "default_keyword_args": {"dict": [[2276, "    default_keyword_args = {"]]}, "response": {"?": [[2284, "    for response in redirect_generator:"]]}, "session": {"RedirectSession": [[2270, "    session = RedirectSession([303, 307])"]]}, "redirect_generator": {"?": [[2275, "    redirect_generator = session.resolve_redirects(r0, prep)"]]}, "prep": {"PreparedRequest": [[2271, "    prep = requests.Request('POST', httpbin('post')).prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_paramet": {"var": {"secure": {"bool": [[1050, "        secure = True"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_form_encoded_post_query_multivalued_eleme": {"param": {"httpbin": {"?": [[874, "    def test_form_encoded_post_query_multivalued_element(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_transfer_enc_removal_on_redirec": {"var": {"next_resp": {"?": [[296, "        next_resp = next(ses.resolve_redirects(resp, prep))"]]}}, "param": {"httpbin": {"?": [[278, "    def test_transfer_enc_removal_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession.__init__": {"param": {"self": {"RedirectSession": [[2226, "    def __init__(self, order_of_redirects):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_get": {"var": {"cid": {"CaseInsensitiveDict": [[2006, "        cid = CaseInsensitiveDict()"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2005, "    def test_get(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__iter__": {"param": {"self": {"CustomMapping": [[763, "            def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basicauth_encodes_byte_string": {"param": {"self": {"TestRequests": [[513, "    def test_basicauth_encodes_byte_strings(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.t": {"param": {"self": {"BadFileObj": [[1684, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_multipart_post_fieldnames": {"var": {"r": {"Request": [[902, "        r = requests.Request("]]}, "prep": {"PreparedRequest": [[906, "        prep = r.prepare()"]]}, "filename": {"str": [[901, "        filename = os.path.splitext(__file__)[0] + '.py'"]]}}, "param": {"httpbin": {"?": [[900, "    def test_unicode_multipart_post_fieldnames(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_ca_certificate_path": {"var": {"INVALID_PATH": {"str": [[819, "        INVALID_PATH = '/garbage'"]]}}, "param": {"self": {"TestRequests": [[818, "    def test_invalid_ca_certificate_path(self, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_form_encoded_post_query_multivalued_element": {"var": {"r": {"Request": [[875, "        r = requests.Request(method='POST', url=httpbin('post'),"]]}, "prep": {"PreparedRequest": [[877, "        prep = r.prepare()"]]}}, "param": {"self": {"TestRequests": [[874, "    def test_form_encoded_post_query_multivalued_element(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_ad": {"var": {"url_not_matching_prefix": {"str": [[1418, "        url_not_matching_prefix = 'https://another.example.com/'"]]}, "url_matching_more_specific_prefix": {"str": [[1417, "        url_matching_more_specific_prefix = more_specific_prefix + '/longer/path'"]]}, "url_matching_only_prefix": {"str": [[1416, "        url_matching_only_prefix = prefix + '/another/path'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_fixes_649": {"var": {"cid": {"CaseInsensitiveDict": [[1980, "        cid = CaseInsensitiveDict()"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[1978, "    def test_fixes_649(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_302_changes_post_to_get": {"var": {"r": {"None": [[234, "        r = requests.post(httpbin('status', '302'))"]]}}, "param": {"self": {"TestRequests": [[233, "    def test_http_302_changes_post_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_parameters": {"var": {"cookie": {"?": [[1060, "        cookie = list(jar)[0]"]]}, "domain": {"str": [[1051, "        domain = 'test.com'"]]}, "jar": {"RequestsCookieJar": [[1054, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1049, "        value = 'some_value'"]]}, "key": {"str": [[1048, "        key = 'some_cookie'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_equality": {"var": {"othercid": {"CaseInsensitiveDict": [[2037, "        othercid = CaseInsensitiveDict({'spam': 'blueval', 'eggs': 'redval'})"]]}, "cid": {"CaseInsensitiveDict": [[2036, "        cid = CaseInsensitiveDict({'SPAM': 'blueval', 'Eggs': 'redval'})"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2035, "    def test_equality(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_override_content_leng": {"param": {"httpbin": {"?": [[110, "    def test_override_content_length(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_method_nam": {"var": {"files": {"dict": [[911, "        files = {'file': open(__file__, 'rb')}"]]}}, "param": {"self": {"TestRequests": [[910, "    def test_unicode_method_name(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_binary_put": {"param": {"self": {"TestRequests": [[144, "    def test_binary_put(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_heade": {"var": {"url": {"?": [[1887, "        url = httpbin('post')"]]}, "r": {"Request": [[1889, "        r = requests.Request('POST', url, auth=auth, data=file_obj)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_method_name_with_request_object": {"var": {"files": {"dict": [[917, "        files = {'file': open(__file__, 'rb')}"]]}, "s": {"Session": [[918, "        s = requests.Session()"]]}, "req": {"Request": [[919, "        req = requests.Request(u('POST'), httpbin('post'), files=files)"]]}, "prep": {"PreparedRequest": [[920, "        prep = s.prepare_request(req)"]]}, "resp": {"?": [[924, "        resp = s.send(prep)"]]}}, "param": {"self": {"TestRequests": [[916, "    def test_unicode_method_name_with_request_object(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_hook.hook": {"param": {"resp": {"?": [[976, "        def hook(resp, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_no_body_content_length": {"var": {"req": {"PreparedRequest": [[102, "        req = requests.Request(method, httpbin(method.lower())).prepare()"]]}}, "param": {"self": {"TestRequests": [[101, "    def test_no_body_content_length(self, httpbin, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basicauth_wi": {"func": {"get_netrc_auth_mock": {"None -> (str, str) / ? -> (str, str) / str -> (str, str)": [[562, "            def get_netrc_auth_mock(url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_invalid_timeout": {"param": {"self": {"TestTimeout": [[2157, "    def test_invalid_timeout(self, httpbin, timeout, error_text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_auth_is_retained_for_redirect_on_hos": {"param": {"httpbin": {"?": [[1589, "    def test_auth_is_retained_for_redirect_on_host(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_generic_cookiejar_work": {"var": {"s": {"Session": [[376, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[373, "    def test_generic_cookiejar_works(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_non_prepared_request_error": {"var": {"s": {"Session": [[928, "        s = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[927, "    def test_non_prepared_request_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basic_building": {"var": {"pr": {"PreparedRequest": [[91, "        pr = req.prepare()"]]}, "req": {"Request": [[87, "        req = requests.Request()"]]}}, "param": {"self": {"TestRequests": [[86, "    def test_basic_building(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching": {"var": {"mixed_case_prefix": {"str": [[1431, "        mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'"]]}, "prefix": {"str": [[1413, "        prefix = 'https://example.com'"]]}, "more_specific_prefix": {"str": [[1414, "        more_specific_prefix = prefix + '/some/path'"]]}, "s": {"Session": [[1420, "        s = requests.Session()"]]}, "prefix_adapter": {"HTTPAdapter": [[1421, "        prefix_adapter = HTTPAdapter()"]]}, "more_specific_prefix_adapter": {"HTTPAdapter": [[1422, "        more_specific_prefix_adapter = HTTPAdapter()"]]}}, "param": {"self": {"TestRequests": [[1412, "    def test_session_get_adapter_prefix_matching(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_certificate_failur": {"param": {"self": {"TestRequests": [[859, "    def test_certificate_failure(self, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_return_chars": {"var": {"r": {"None": [[1522, "            r = requests.get(httpbin('get'), headers=headers_ret)"], [1525, "            r = requests.get(httpbin('get'), headers=headers_lf)"], [1528, "            r = requests.get(httpbin('get'), headers=headers_cr)"]]}}, "param": {"httpbin": {"?": [[1512, "    def test_header_no_return_chars(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_with_certificat": {"param": {"self": {"TestRequests": [[834, "    def test_http_with_certificate(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_original_order_is_preserved_by_defaul": {"var": {"request": {"Request": [[135, "        request = requests.Request('GET', 'http://example.com/', params=param_ordered_dict)"]]}, "param_ordered_dict": {"?": [[133, "        param_ordered_dict = collections.OrderedDict((('z', 1), ('a', 1), ('k', 1), ('d', 1)))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_original_order_is_preserved_by_default": {"var": {"session": {"Session": [[134, "        session = requests.Session()"]]}, "prep": {"PreparedRequest": [[136, "        prep = session.prepare_request(request)"]]}}, "param": {"self": {"TestRequests": [[132, "    def test_params_original_order_is_preserved_by_default(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_200_OK_GET_ALTERNATIVE": {"var": {"s": {"Session": [[166, "        s = requests.Session()"]]}, "r": {"Request": [[165, "        r = requests.Request('GET', httpbin('get'))"]], "?": [[169, "        r = s.send(r.prepare())"]]}}, "param": {"self": {"TestRequests": [[164, "    def test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin):"]]}, "httpbin": {"?": [[164, "    def test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_stream_timeout": {"param": {"self": {"TestTimeout": [[2146, "    def test_stream_timeout(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_auth": {"var": {"adapter": {"HTTPAdapter": [[1840, "        adapter = HTTPAdapter()"]]}}, "param": {"self": {"TestRequests": [[1839, "    def test_proxy_auth(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_long_authinfo_in_": {"var": {"url": {"str": [[1464, "        url = 'http://{}:{}@{}:9000/path?query#frag'.format("]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_decode_unicod": {"param": {"self": {"TestRequests": [[1214, "    def test_response_decode_unicode(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_": {"param": {"url": {"?": [[2423, "    def test_preparing_url(self, url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.__init__": {"param": {"self": {"BadFileObj": [[1681, "            def __init__(self, data):"]]}, "data": {"str": [[1681, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream": {"func": {"read": {"(TestStream, None) -> str": [[700, "            def read(self, size=None):"]]}, "seek": {"(TestStream, int, int) -> None": [[712, "            def seek(self, offset, where=0):"]]}, "__len__": {"TestStream -> int": [[697, "            def __len__(self):"]]}, "__init__": {"? -> ?": [[692, "            def __init__(self, data):"]]}, "tell": {"TestStream -> int": [[709, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_validation": {"var": {"headers_ok": {"dict": [[1484, "        headers_ok = {'foo': 'bar baz qux',"]]}, "r": {"None": [[1488, "        r = requests.get(httpbin('get'), headers=headers_ok)"]]}}, "param": {"self": {"TestRequests": [[1482, "    def test_header_validation(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_return_c": {"var": {"headers_ret": {"dict": [[1516, "        headers_ret = {'foo': 'bar\\r\\nbaz: qux'}"]]}, "headers_lf": {"dict": [[1517, "        headers_lf = {'foo': 'bar\\nbaz: qux'}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_redirect_with_wrong_gzipped_heade": {"var": {"url": {"?": [[1758, "        url = httpbin('redirect/1')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_error": {"var": {"path": {"str": [[1176, "        path = 'some_path'"]]}, "value": {"str": [[1175, "        value = 'some_value'"]]}, "key": {"str": [[1174, "        key = 'some_cookie'"]]}}, "param": {"self": {"TestRequests": [[1173, "    def test_cookie_duplicate_names_raises_cookie_conflict_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_hook": {"var": {"s": {"Session": [[983, "        s = requests.Session()"]]}, "req": {"Request": [[980, "        req = requests.Request('GET', httpbin(), hooks={'response': hook})"]]}, "prep": {"PreparedRequest": [[981, "        prep = req.prepare()"]]}, "resp": {"?": [[985, "        resp = s.send(prep)"]]}}, "param": {"self": {"TestRequests": [[975, "    def test_prepared_request_hook(self, httpbin):"]]}, "httpbin": {"?": [[975, "    def test_prepared_request_hook(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_invalid_": {"param": {"timeout": {"?": [[2157, "    def test_invalid_timeout(self, httpbin, timeout, error_text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_port_change": {"var": {"s": {"Session": [[1614, "        s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_duplicate_names_different_domain": {"var": {"items": {"list": [[1162, "        items = jar.items()"]]}}, "param": {"self": {"TestRequests": [[1152, "    def test_cookie_duplicate_names_different_domains(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.__iter__": {"param": {"self": {"BadFileObj": [[1710, "            def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_parameter": {"param": {"self": {"TestRequests": [[1047, "    def test_cookie_parameters(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_chunked_upload_does_not_set_content_length_heade": {"var": {"url": {"?": [[1899, "        url = httpbin('post')"]]}, "r": {"Request": [[1900, "        r = requests.Request('POST', url, data=data)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test": {"var": {"cid_copy": {"CaseInsensitiveDict": [[2085, "        cid_copy = cid.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_bad_ur": {"param": {"self": {"TestPreparingURLs": [[2446, "    def test_preparing_bad_url(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_whitespaces_are_removed_from_url": {"var": {"request": {"PreparedRequest": [[151, "        request = requests.Request('GET', ' http://example.com').prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_json_param_post_content_type_work": {"param": {"self": {"TestRequests": [[1780, "    def test_json_param_post_content_type_works(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.t": {"param": {"self": {"TestStream": [[709, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieMaxA": {"func": {"test_max_age_valid_int": {"TestMorselToCookieMaxAge -> None": [[2127, "    def test_max_age_valid_int(self):"]]}, "test_max_age_invalid_str": {"TestMorselToCookieMaxAge -> None": [[2135, "    def test_max_age_invalid_str(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_302_ALLOW_REDIRECT_GET": {"var": {"r": {"None": [[174, "        r = requests.get(httpbin('redirect', '1'))"]]}}, "param": {"self": {"TestRequests": [[173, "    def test_HTTP_302_ALLOW_REDIRECT_GET(self, httpbin):"]]}, "httpbin": {"?": [[173, "    def test_HTTP_302_ALLOW_REDIRECT_GET(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_header": {"var": {"file_obj": {"?": [[1888, "        file_obj = io.BytesIO(b'test data')"]]}, "auth": {"(str, str)": [[1886, "        auth = ('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[1882, "    def test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin):"]]}, "httpbin": {"?": [[1882, "    def test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_with_file_is_pickleabl": {"var": {"resp": {"?": [[1312, "        resp = s.send(r)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_chunk_size_typ": {"param": {"self": {"TestRequests": [[1254, "    def test_response_chunk_size_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_is_pickleab": {"param": {"self": {"TestRequests": [[1285, "    def test_prepared_request_is_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_policy_copy": {"var": {"jar": {"RequestsCookieJar": [[1188, "        jar = requests.cookies.RequestsCookieJar()"]]}}, "param": {"self": {"TestRequests": [[1184, "    def test_cookie_policy_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveD": {"func": {"test_docstring_example": {"TestCaseInsensitiveDict -> None": [[1962, "    def test_docstring_example(self):"]]}, "test_update_retains_unchanged": {"TestCaseInsensitiveDict -> None": [[2025, "    def test_update_retains_unchanged(self):"]]}, "test_contains": {"TestCaseInsensitiveDict -> None": [[1996, "    def test_contains(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_header_name": {"param": {"httpbin": {"?": [[809, "    def test_unicode_header_name(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unconsumed_session_response_closes_connectio": {"param": {"httpbin": {"?": [[1810, "    def test_unconsumed_session_response_closes_connection(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_with_hook_is_pickleab": {"param": {"self": {"TestRequests": [[1315, "    def test_prepared_request_with_hook_is_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_getitem": {"var": {"cid": {"CaseInsensitiveDict": [[1974, "        cid = CaseInsensitiveDict({'Spam': 'blueval'})"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[1973, "    def test_getitem(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_default_port": {"var": {"s": {"Session": [[1625, "        s = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[1624, "    def test_should_strip_auth_default_port(self, old_uri, new_uri):"]]}, "new_uri": {"?": [[1624, "    def test_should_strip_auth_default_port(self, old_uri, new_uri):"]]}, "old_uri": {"?": [[1624, "    def test_should_strip_auth_default_port(self, old_uri, new_uri):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_connect_": {"param": {"timeout": {"?": [[2196, "    def test_connect_timeout(self, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_errors": {"param": {"url": {"?": [[532, "    def test_errors(self, url, exception):"]]}, "exception": {"?": [[532, "    def test_errors(self, url, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_autoset_header_values_are_native": {"var": {"p": {"PreparedRequest": [[1564, "        p = req.prepare()"]]}, "data": {"str": [[1561, "        data = 'this is a string'"]]}}, "param": {"httpbin": {"?": [[1560, "    def test_autoset_header_values_are_native(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_nonhttp_schemes_dont_check_URLs": {"var": {"req": {"Request": [[1575, "            req = requests.Request('GET', test_url)"]]}, "preq": {"PreparedRequest": [[1576, "            preq = req.prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_contain": {"param": {"self": {"TestCaseInsensitiveDict": [[1996, "    def test_contains(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_iter_lines": {"var": {"r": {"None": [[1797, "        r = requests.get(httpbin('stream/4'), stream=True)"]]}, "it": {"?": [[1800, "        it = r.iter_lines()"]]}}, "param": {"httpbin": {"?": [[1796, "    def test_response_iter_lines(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_pickling": {"var": {"s": {"Session": [[1348, "        s = requests.Session()"]], "?": [[1350, "        s = pickle.loads(pickle.dumps(s))"]]}, "r": {"Request": [[1347, "        r = requests.Request('GET', httpbin('get'))"]], "?": [[1353, "        r = s.send(r.prepare())"]]}}, "param": {"self": {"TestRequests": [[1346, "    def test_session_pickling(self, httpbin):"]]}, "httpbin": {"?": [[1346, "    def test_session_pickling(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_error": {"param": {"self": {"TestRequests": [[532, "    def test_errors(self, url, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieMaxAge.test_max_age_valid_int": {"var": {"cookie": {"?": [[2132, "        cookie = morsel_to_cookie(morsel)"]]}, "morsel": {"?": [[2130, "        morsel = Morsel()"]]}}, "param": {"self": {"TestMorselToCookieMaxAge": [[2127, "    def test_max_age_valid_int(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_parameters_for_nonstandard_schem": {"param": {"self": {"TestPreparingURLs": [[2522, "    def test_parameters_for_nonstandard_schemes(self, input, params, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE": {"var": {"byte_str": {"str": [[187, "        byte_str = b'test'"]]}, "r": {"None": [[188, "        r = requests.post(httpbin('redirect-to'), data=io.BytesIO(byte_str), params={'url': 'post', 'status_code': 307})"]]}}, "param": {"self": {"TestRequests": [[186, "    def test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE(self, httpbin):"]]}, "httpbin": {"?": [[186, "    def test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_t": {"class": {"BadFileObj": {"<BadFileObj>": [[1723, "        class BadFileObj:"]]}}, "param": {"self": {"TestRequests": [[1722, "    def test_rewind_body_failed_tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_keeps_len": {"var": {"key": {"str": [[1066, "        key = 'some_cookie'"]]}, "key1": {"str": [[1069, "        key1 = 'some_cookie1'"]]}, "jar": {"RequestsCookieJar": [[1072, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1067, "        value = 'some_value'"]]}, "value1": {"str": [[1070, "        value1 = 'some_value1'"]]}, "d2": {"dict": [[1077, "        d2 = dict(jar.iteritems())"]]}, "d3": {"dict": [[1078, "        d3 = dict(jar.items())"]]}, "d1": {"dict": [[1076, "        d1 = dict(jar)"]]}}, "param": {"self": {"TestRequests": [[1065, "    def test_cookie_as_dict_keeps_len(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_generic_cookiejar_works": {"var": {"cj": {"?": [[374, "        cj = cookielib.CookieJar()"]]}, "r": {"None": [[378, "        r = s.get(httpbin('cookies'))"]]}}, "param": {"httpbin": {"?": [[373, "    def test_generic_cookiejar_works(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_param": {"var": {"rest": {"dict": [[1052, "        rest = {'HttpOnly': True}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requ": {"class": {"TestMorselToCookieExpires": {"<TestMorselToCookieExpires>": [[2091, "class TestMorselToCookieExpires:"]]}, "TestMorselToCookieMaxAge": {"<TestMorselToCookieMaxAge>": [[2123, "class TestMorselToCookieMaxAge:"]]}, "RedirectSession": {"<RedirectSession>": [[2225, "class RedirectSession(SessionRedirectMixin):"]]}, "TestCaseInsensitiveDict": {"<TestCaseInsensitiveDict>": [[1949, "class TestCaseInsensitiveDict:"]]}, "TestPreparingURLs": {"<TestPreparingURLs>": [[2382, "class TestPreparingURLs(object):"]]}}, "func": {"test_json_encodes_as_bytes": {"() -> None": [[2257, "def test_json_encodes_as_bytes():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_200_OK_HEAD": {"var": {"r": {"None": [[475, "        r = requests.head(httpbin('get'))"]]}}, "param": {"self": {"TestRequests": [[474, "    def test_HTTP_200_OK_HEAD(self, httpbin):"]]}, "httpbin": {"?": [[474, "    def test_HTTP_200_OK_HEAD(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST": {"var": {"r": {"None": [[180, "        r = requests.post(httpbin('redirect-to'), data='test', params={'url': 'post', 'status_code': 307})"]]}}, "param": {"self": {"TestRequests": [[179, "    def test_HTTP_307_ALLOW_REDIRECT_POST(self, httpbin):"]]}, "httpbin": {"?": [[179, "    def test_HTTP_307_ALLOW_REDIRECT_POST(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_docstring_examp": {"param": {"self": {"TestCaseInsensitiveDict": [[1962, "    def test_docstring_example(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_long_authinfo_in_ur": {"param": {"self": {"TestRequests": [[1463, "    def test_long_authinfo_in_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_content_length": {"var": {"req": {"PreparedRequest": [[107, "        req = requests.Request(method, httpbin(method.lower()), data='').prepare()"]]}}, "param": {"self": {"TestRequests": [[106, "    def test_empty_content_length(self, httpbin, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_close_proxy_clear": {"var": {"session": {"Session": [[1833, "        session = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[1828, "    def test_session_close_proxy_clear(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_from_sessio": {"param": {"httpbin": {"?": [[989, "    def test_prepared_from_session(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_different_encodings_dont_break_post": {"var": {"r": {"None": [[881, "        r = requests.post(httpbin('post'),"]]}}, "param": {"self": {"TestRequests": [[880, "    def test_different_encodings_dont_break_post(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDic": {"func": {"test_len": {"TestCaseInsensitiveDict -> None": [[1968, "    def test_len(self):"]]}, "test_getitem": {"TestCaseInsensitiveDict -> None": [[1973, "    def test_getitem(self):"]]}, "test_equality": {"TestCaseInsensitiveDict -> None": [[2035, "    def test_equality(self):"]]}, "test_update": {"TestCaseInsensitiveDict -> None": [[2014, "    def test_update(self):"]]}, "test_iter": {"TestCaseInsensitiveDict -> None": [[2030, "    def test_iter(self):"]]}, "test_lower_items": {"TestCaseInsensitiveDict -> None": [[2049, "    def test_lower_items(self):"]]}, "test_fixes_649": {"TestCaseInsensitiveDict -> None": [[1978, "    def test_fixes_649(self):"]]}, "test_get": {"TestCaseInsensitiveDict -> None": [[2005, "    def test_get(self):"]]}, "test_delitem": {"TestCaseInsensitiveDict -> None": [[1989, "    def test_delitem(self):"]]}, "test_init": {"(TestCaseInsensitiveDict, ?) -> None": [[1957, "    def test_init(self, cid):"]]}, "test_setdefault": {"TestCaseInsensitiveDict -> None": [[2044, "    def test_setdefault(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_multipart_pos": {"param": {"data": {"?": [[894, "    def test_unicode_multipart_post(self, httpbin, data):"]]}, "httpbin": {"?": [[894, "    def test_unicode_multipart_post(self, httpbin, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_": {"func": {"hook": {"? -> None": [[976, "        def hook(resp, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_DIGEST_AUTH_RETURNS_COOKIE": {"var": {"url": {"?": [[608, "            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)"]]}, "authtype": {"str": [[607, "        for authtype in self.digest_auth_algo:"]]}, "r": {"None": [[610, "            r = requests.get(url)"], [613, "            r = requests.get(url, auth=auth)"]]}, "auth": {"HTTPDigestAuth": [[609, "            auth = HTTPDigestAuth('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[605, "    def test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin):"]]}, "httpbin": {"?": [[605, "    def test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_no_seek": {"var": {"data": {"BadFileObj": [[1690, "        data = BadFileObj('the data')"]]}, "prep": {"PreparedRequest": [[1691, "        prep = requests.Request('GET', 'http://example.com', data=data).prepare()"]]}}, "class": {"BadFileObj": {"<BadFileObj>": [[1680, "        class BadFileObj:"]]}}, "param": {"self": {"TestRequests": [[1679, "    def test_rewind_body_no_seek(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_param_cookiejar_works": {"var": {"cj": {"?": [[385, "        cj = cookielib.CookieJar()"]]}, "r": {"None": [[388, "        r = s.get(httpbin('cookies'), cookies=cj)"]]}}, "param": {"httpbin": {"?": [[384, "    def test_param_cookiejar_works(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_host_change": {"var": {"s": {"Session": [[1597, "        s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieExpires.test_expires_invalid_int": {"var": {"morsel": {"?": [[2109, "        morsel = Morsel()"]]}}, "param": {"self": {"TestMorselToCookieExpires": [[2107, "    def test_expires_invalid_int(self, value, exception):"]]}, "value": {"?": [[2107, "    def test_expires_invalid_int(self, value, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_encoded_methods": {"var": {"r": {"None": [[2218, "        r = requests.request(b'GET', httpbin('get'))"]]}}, "param": {"httpbin": {"?": [[2216, "    def test_encoded_methods(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.t": {"param": {"self": {"BadFileObj": [[1704, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestReq": {"var": {"digest_auth_algo": {"(str, str, str)": [[59, "    digest_auth_algo = ('MD5', 'SHA-256', 'SHA-512')"]]}}, "func": {"test_response_reason_unicode_fallback": {"TestRequests -> None": [[1242, "    def test_response_reason_unicode_fallback(self):"]]}, "test_basicauth_with_netrc": {"(TestRequests, ?) -> ?": [[554, "    def test_basicauth_with_netrc(self, httpbin):"]]}, "test_unicode_get": {"(TestRequests, ?, ?, ?) -> None": [[806, "    def test_unicode_get(self, httpbin, url, params):"]]}, "test_whitespaces_are_removed_from_url": {"TestRequests -> None": [[149, "    def test_whitespaces_are_removed_from_url(self):"]]}, "test_status_raising": {"(TestRequests, ?) -> None": [[786, "    def test_status_raising(self, httpbin):"]]}, "test_proxy_auth_empty_pass": {"TestRequests -> None": [[1844, "    def test_proxy_auth_empty_pass(self):"]]}, "test_response_decode_unicode": {"TestRequests -> None": [[1214, "    def test_response_decode_unicode(self):"]]}, "test_custom_redirect_mixin": {"(TestRequests, ?) -> None": [[1905, "    def test_custom_redirect_mixin(self, httpbin):"]]}, "test_cookie_duplicate_names_raises_cookie_conflict_error": {"TestRequests -> None": [[1173, "    def test_cookie_duplicate_names_raises_cookie_conflict_error(self):"]]}, "test_should_strip_auth_default_port": {"(TestRequests, ?, ?) -> None": [[1624, "    def test_should_strip_auth_default_port(self, old_uri, new_uri):"]]}, "test_long_authinfo_in_url": {"TestRequests -> None": [[1463, "    def test_long_authinfo_in_url(self):"]]}, "test_unicode_multipart_post": {"(TestRequests, ?, ?) -> None": [[894, "    def test_unicode_multipart_post(self, httpbin, data):"]]}, "test_basicauth_encodes_byte_strings": {"TestRequests -> None": [[513, "    def test_basicauth_encodes_byte_strings(self):"]]}, "test_user_agent_transfers": {"(TestRequests, ?, ?) -> None": [[467, "    def test_user_agent_transfers(self, httpbin, key):"]]}, "test_header_value_not_str": {"(TestRequests, ?) -> None": [[1491, "    def test_header_value_not_str(self, httpbin):"]]}, "test_header_no_return_chars": {"(TestRequests, ?) -> None": [[1512, "    def test_header_no_return_chars(self, httpbin):"]]}, "test_proxy_error_on_bad_url": {"(TestRequests, ?, ?) -> None": [[541, "    def test_proxy_error_on_bad_url(self, httpbin, httpbin_secure):"]]}, "test_should_strip_auth_host_change": {"TestRequests -> None": [[1596, "    def test_should_strip_auth_host_change(self):"]]}, "test_stream_with_auth_does_not_set_transfer_encoding_header": {"(TestRequests, ?) -> None": [[1882, "    def test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin):"]]}, "test_params_original_order_is_preserved_by_default": {"TestRequests -> None": [[132, "    def test_params_original_order_is_preserved_by_default(self):"]]}, "test_cookie_as_dict_values": {"TestRequests -> None": [[1120, "    def test_cookie_as_dict_values(self):"]]}, "test_custom_content_type": {"(TestRequests, ?) -> None": [[935, "    def test_custom_content_type(self, httpbin):"]]}, "test_response_reason_unicode": {"TestRequests -> None": [[1233, "    def test_response_reason_unicode(self):"]]}, "test_set_basicauth": {"(TestRequests, ?, ?, ?) -> None": [[504, "    def test_set_basicauth(self, httpbin, username, password):"]]}, "test_autoset_header_values_are_native": {"(TestRequests, ?) -> None": [[1560, "    def test_autoset_header_values_are_native(self, httpbin):"]]}, "test_chunked_upload_does_not_set_content_length_header": {"(TestRequests, ?) -> None": [[1894, "    def test_chunked_upload_does_not_set_content_length_header(self, httpbin):"]]}, "test_empty_stream_with_auth_does_not_set_content_length_header": {"(TestRequests, ?) -> None": [[1870, "    def test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin):"]]}, "test_invalid_url": {"(TestRequests, ?, ?) -> None": [[82, "    def test_invalid_url(self, exception, url):"]]}, "test_json_param_post_should_not_override_data_param": {"(TestRequests, ?) -> None": [[1789, "    def test_json_param_post_should_not_override_data_param(self, httpbin):"]]}, "test_path_is_not_double_encoded": {"TestRequests -> None": [[118, "    def test_path_is_not_double_encoded(self):"]]}, "test_binary_put": {"TestRequests -> None": [[144, "    def test_binary_put(self):"]]}, "test_manual_redirect_with_partial_body_read": {"(TestRequests, ?) -> None": [[1628, "    def test_manual_redirect_with_partial_body_read(self, httpbin):"]]}, "test_response_chunk_size_type": {"TestRequests -> None": [[1254, "    def test_response_chunk_size_type(self):"]]}, "test_response_without_release_conn": {"TestRequests -> None": [[1860, "    def test_response_without_release_conn(self):"]]}, "test_auth_is_retained_for_redirect_on_host": {"(TestRequests, ?) -> None": [[1589, "    def test_auth_is_retained_for_redirect_on_host(self, httpbin):"]]}, "test_unicode_header_name": {"(TestRequests, ?) -> None": [[809, "    def test_unicode_header_name(self, httpbin):"]]}, "test_should_strip_auth_port_change": {"TestRequests -> None": [[1613, "    def test_should_strip_auth_port_change(self):"]]}, "test_should_strip_auth_https_upgrade": {"TestRequests -> None": [[1604, "    def test_should_strip_auth_https_upgrade(self):"]]}, "test_certificate_failure": {"(TestRequests, ?) -> None": [[859, "    def test_certificate_failure(self, httpbin_secure):"]]}, "test_basic_auth_str_is_always_native": {"(TestRequests, ?, ?, ?) -> None": [[1767, "    def test_basic_auth_str_is_always_native(self, username, password, auth_str):"]]}, "test_unicode_multipart_post_fieldnames": {"(TestRequests, ?) -> None": [[900, "    def test_unicode_multipart_post_fieldnames(self, httpbin):"]]}, "test_invalid_files_input": {"(TestRequests, ?) -> None": [[681, "    def test_invalid_files_input(self, httpbin):"]]}, "test_unconsumed_session_response_closes_connection": {"(TestRequests, ?) -> None": [[1810, "    def test_unconsumed_session_response_closes_connection(self, httpbin):"]]}, "test_auth_is_stripped_on_http_downgrade": {"(TestRequests, ?, ?, ?) -> None": [[1579, "    def test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle):"]]}, "test_post_with_custom_mapping": {"(TestRequests, ?) -> None": [[749, "    def test_post_with_custom_mapping(self, httpbin):"]]}, "test_uppercase_scheme_redirect": {"(TestRequests, ?) -> None": [[1367, "    def test_uppercase_scheme_redirect(self, httpbin):"]]}, "test_cookie_duplicate_names_different_domains": {"TestRequests -> None": [[1152, "    def test_cookie_duplicate_names_different_domains(self):"]]}, "test_basic_building": {"TestRequests -> None": [[86, "    def test_basic_building(self):"]]}, "test_should_strip_auth_http_downgrade": {"TestRequests -> None": [[1600, "    def test_should_strip_auth_http_downgrade(self):"]]}, "test_proxy_auth": {"TestRequests -> None": [[1839, "    def test_proxy_auth(self):"]]}, "test_unicode_method_name": {"(TestRequests, ?) -> None": [[910, "    def test_unicode_method_name(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_are_merged_case_sensitiv": {"param": {"self": {"TestRequests": [[1457, "    def test_params_are_merged_case_sensitive(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_set_cookie_on_301": {"var": {"url": {"?": [[325, "        url = httpbin('cookies/set?foo=bar')"]]}, "s": {"Session": [[324, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[323, "    def test_set_cookie_on_301(self, httpbin):"]]}, "httpbin": {"?": [[323, "    def test_set_cookie_on_301(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_read_": {"param": {"timeout": {"?": [[2184, "    def test_read_timeout(self, httpbin, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_fragment_maintained_on_redirect": {"var": {"r": {"None": [[303, "        r = requests.get(httpbin('redirect-to?url=get')+fragment)"]]}}, "param": {"self": {"TestRequests": [[301, "    def test_fragment_maintained_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_is_iterable.read_mock": {"param": {"amt": {"?": [[1207, "        def read_mock(amt, decode_content=None):"]]}, "decode_content": {"None": [[1207, "        def read_mock(amt, decode_content=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_none_timeou": {"param": {"httpbin": {"?": [[2167, "    def test_none_timeout(self, httpbin, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURL": {"func": {"test_url_mutation": {"(TestPreparingURLs, ?, ?) -> None": [[2486, "    def test_url_mutation(self, input, expected):"]]}, "test_redirecting_to_bad_url": {"(TestPreparingURLs, ?, ?, ?) -> None": [[2457, "    def test_redirecting_to_bad_url(self, httpbin, url, exception):"]]}, "test_preparing_url": {"(TestPreparingURLs, ?, ?) -> None": [[2423, "    def test_preparing_url(self, url, expected):"]]}, "test_parameters_for_nonstandard_schemes": {"(TestPreparingURLs, ?, ?, ?) -> None": [[2522, "    def test_parameters_for_nonstandard_schemes(self, input, params, expected):"]]}, "test_preparing_bad_url": {"(TestPreparingURLs, ?) -> None": [[2446, "    def test_preparing_bad_url(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_https_upgrade": {"var": {"s": {"Session": [[1605, "        s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_bad_": {"param": {"url": {"?": [[2446, "    def test_preparing_bad_url(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_are_added_before_fragmen": {"var": {"request": {"PreparedRequest": [[129, "        request = requests.Request('GET', url, params={\"a\": \"b\"}).prepare()"]]}}, "param": {"expected": {"?": [[128, "    def test_params_are_added_before_fragment(self, url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_parameters_for_nonstandard_scheme": {"param": {"params": {"?": [[2522, "    def test_parameters_for_nonstandard_schemes(self, input, params, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_h": {"var": {"warnings_expected": {"str": [[841, "            warnings_expected = ('SubjectAltNameWarning', )"]], "(str, str, str)": [[843, "            warnings_expected = ('SNIMissingWarning',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__delitem__": {"param": {"self": {"CustomMapping": [[754, "            def __delitem__(self, key):"]]}, "key": {"?": [[754, "            def __delitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__getitem__": {"param": {"self": {"CustomMapping": [[757, "            def __getitem__(self, key):"]]}, "key": {"?": [[757, "            def __getitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basicauth_with_netrc": {"var": {"old_auth": {"(str, bool) -> (?, ?) / (None, bool) -> (?, ?) / (?, bool) -> (?, ?)": [[559, "        old_auth = requests.sessions.get_netrc_auth"]]}, "url": {"?": [[557, "        url = httpbin('basic-auth', 'user', 'pass')"]]}, "auth": {"(str, str)": [[555, "        auth = ('user', 'pass')"]]}, "s": {"Session": [[574, "            s = requests.session()"]]}, "r": {"None": [[567, "            r = requests.get(url)"], [571, "            r = requests.get(url, auth=wrong_auth)"], [577, "            r = s.get(url)"], [582, "            r = s.get(url)"]]}, "wrong_auth": {"(str, str)": [[556, "        wrong_auth = ('wronguser', 'wrongpass')"]]}}, "param": {"self": {"TestRequests": [[554, "    def test_basicauth_with_netrc(self, httpbin):"]]}, "httpbin": {"?": [[554, "    def test_basicauth_with_netrc(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_chunked_upload_does_not_set_content_length_h": {"var": {"prepared_request": {"PreparedRequest": [[1901, "        prepared_request = r.prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_return": {"var": {"headers_cr": {"dict": [[1518, "        headers_cr = {'foo': 'bar\\rbaz: qux'}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_ur": {"param": {"self": {"TestRequests": [[82, "    def test_invalid_url(self, exception, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_https_upgrad": {"param": {"self": {"TestRequests": [[1604, "    def test_should_strip_auth_https_upgrade(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_set_basicau": {"param": {"httpbin": {"?": [[504, "    def test_set_basicauth(self, httpbin, username, password):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_close_proxy_clea": {"var": {"proxies": {"dict": [[1829, "        proxies = {"]]}}, "param": {"mocker": {"?": [[1828, "    def test_session_close_proxy_clear(self, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSessio": {"func": {"send": {"RedirectSession -> Response": [[2233, "    def send(self, *args, **kwargs):"]]}, "__init__": {"? -> ?": [[2226, "    def __init__(self, order_of_redirects):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basic_auth_str_is_always_nativ": {"param": {"username": {"?": [[1767, "    def test_basic_auth_str_is_always_native(self, username, password, auth_str):"]]}, "self": {"TestRequests": [[1767, "    def test_basic_auth_str_is_always_native(self, username, password, auth_str):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_301_changes_post_to_ge": {"param": {"httpbin": {"?": [[218, "    def test_http_301_changes_post_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_is_iterabl": {"var": {"read_": {"?": [[1205, "        read_ = io.read"]]}}, "func": {"read_mock": {"(?, None) -> ?": [[1207, "        def read_mock(amt, decode_content=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_path_is_not_double_encoded": {"var": {"request": {"PreparedRequest": [[119, "        request = requests.Request('GET', \"http://0.0.0.0/get/test case\").prepare()"]]}}, "param": {"self": {"TestRequests": [[118, "    def test_path_is_not_double_encoded(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_headers_on_session_with_None_are_not_se": {"param": {"httpbin": {"?": [[438, "    def test_headers_on_session_with_None_are_not_sent(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_json_encodes_as_bytes": {"var": {"body": {"dict": [[2259, "    body = {\"key\": \"value\"}"]]}, "p": {"PreparedRequest": [[2260, "    p = PreparedRequest()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_invalid_timeou": {"param": {"httpbin": {"?": [[2157, "    def test_invalid_timeout(self, httpbin, timeout, error_text):"]]}, "error_text": {"?": [[2157, "    def test_invalid_timeout(self, httpbin, timeout, error_text):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_301_doesnt_change_head_to_ge": {"param": {"httpbin": {"?": [[225, "    def test_http_301_doesnt_change_head_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_stream_timeou": {"param": {"httpbin": {"?": [[2146, "    def test_stream_timeout(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_data_argument_accepts_tuples": {"var": {"p": {"PreparedRequest": [[2321, "    p = PreparedRequest()"]]}}, "param": {"data": {"?": [[2317, "def test_data_argument_accepts_tuples(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_url_mutation": {"var": {"p": {"PreparedRequest": [[2494, "        p = r.prepare()"]]}, "r": {"Request": [[2493, "        r = requests.Request('GET', url=input)"]]}}, "param": {"expected": {"?": [[2486, "    def test_url_mutation(self, input, expected):"]]}, "self": {"TestPreparingURLs": [[2486, "    def test_url_mutation(self, input, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_remove_is_case_insensitive": {"var": {"s": {"Session": [[1452, "        s = requests.Session()"]]}, "r": {"None": [[1454, "        r = s.get(httpbin('get'), headers={'FOO': None})"]]}}, "param": {"httpbin": {"?": [[1450, "    def test_header_remove_is_case_insensitive(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_docstring_example": {"var": {"cid": {"CaseInsensitiveDict": [[1963, "        cid = CaseInsensitiveDict()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDi": {"func": {"test_preserve_key_case": {"TestCaseInsensitiveDict -> None": [[2058, "    def test_preserve_key_case(self):"]]}, "test_copy": {"TestCaseInsensitiveDict -> None": [[2080, "    def test_copy(self):"]]}, "test_preserve_last_key_case": {"TestCaseInsensitiveDict -> None": [[2068, "    def test_preserve_last_key_case(self):"]]}}}, ".home.xxm.Desktop.EMSE": {"func": {"test_requests_are_updated_each_time": {"? -> None": [[2269, "def test_requests_are_updated_each_time(httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_requests_are_updated_each_time": {"var": {"r0": {"Response": [[2272, "    r0 = session.send(prep)"]]}}, "param": {"httpbin": {"?": [[2269, "def test_requests_are_updated_each_time(httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_links": {"var": {"r": {"Response": [[1024, "        r = requests.Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_multipart_post": {"var": {"r": {"None": [[895, "        r = requests.post(httpbin('post'),"]]}}, "param": {"self": {"TestRequests": [[894, "    def test_unicode_multipart_post(self, httpbin, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_are_merged_case_sensitive": {"var": {"s": {"Session": [[1458, "        s = requests.Session()"]]}, "r": {"None": [[1460, "        r = s.get(httpbin('get'), params={'FOO': 'bar'})"]]}}, "param": {"httpbin": {"?": [[1457, "    def test_params_are_merged_case_sensitive(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_no_body_content_leng": {"param": {"httpbin": {"?": [[101, "    def test_no_body_content_length(self, httpbin, method):"]]}, "method": {"?": [[101, "    def test_no_body_content_length(self, httpbin, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.read": {"var": {"ret": {"str": [[702, "                    ret = self.data[self.index:self.index + size]"], [705, "                    ret = self.data[self.index:]"]]}}, "param": {"self": {"TestStream": [[700, "            def read(self, size=None):"]]}, "size": {"None": [[700, "            def read(self, size=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests": {"var": {"HAS_PYOPENSSL": {"bool": [[52, "    HAS_PYOPENSSL = True"], [54, "    HAS_PYOPENSSL = False"]]}, "SendCall": {"<(namedtuple)>": [[2222, "SendCall = collections.namedtuple('SendCall', ('args', 'kwargs'))"]]}, "TARPIT": {"str": [[41, "TARPIT = 'http://10.255.255.1'"]]}, "HAS_MODERN_SSL": {"bool": [[46, "    HAS_MODERN_SSL = True"], [48, "    HAS_MODERN_SSL = False"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_can_send_objects_with_fi": {"param": {"self": {"TestRequests": [[1545, "    def test_can_send_objects_with_files(self, httpbin, files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_leading": {"var": {"headers_space": {"dict": [[1534, "        headers_space = {'foo': ' bar'}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_no_seek.BadFileObj.__iter__": {"param": {"self": {"BadFileObj": [[1687, "            def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_with_bytestring_host": {"var": {"s": {"Session": [[1014, "        s = requests.Session()"]]}, "resp": {"None": [[1015, "        resp = s.request("]]}}, "param": {"self": {"TestRequests": [[1013, "    def test_request_with_bytestring_host(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_auth_is_stripped_on_http_downgrade": {"var": {"r": {"None": [[1580, "        r = requests.get("]]}}, "param": {"httpbin": {"?": [[1579, "    def test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_with_hook_is_pickleable": {"var": {"p": {"PreparedRequest": [[1317, "        p = r.prepare()"]]}, "s": {"Session": [[1327, "        s = requests.Session()"]]}, "r": {"Request": [[1316, "        r = requests.Request('GET', httpbin('get'), hooks=default_hooks())"]], "?": [[1320, "        r = pickle.loads(pickle.dumps(p))"]]}}, "param": {"httpbin": {"?": [[1315, "    def test_prepared_request_with_hook_is_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_http_downgrad": {"param": {"self": {"TestRequests": [[1600, "    def test_should_strip_auth_http_downgrade(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestT": {"param": {"test_read_timeout": {"requests": [[2184, "    def test_read_timeout(self, httpbin, timeout):"]]}}, "func": {"test_invalid_timeout": {"(TestTimeout, ?, ?, ?) -> None": [[2157, "    def test_invalid_timeout(self, httpbin, timeout, error_text):"]]}, "test_stream_timeout": {"(TestTimeout, ?) -> ?": [[2146, "    def test_stream_timeout(self, httpbin):"]]}, "test_connect_timeout": {"(TestTimeout, ?) -> ?": [[2196, "    def test_connect_timeout(self, timeout):"]]}, "test_none_timeout": {"(TestTimeout, ?, ?) -> None": [[2167, "    def test_none_timeout(self, httpbin, timeout):"]]}, "test_read_timeout": {"(TestTimeout, ?, ?) -> ?": [[2184, "    def test_read_timeout(self, httpbin, timeout):"]]}, "test_total_timeout_connect": {"(TestTimeout, ?) -> ?": [[2209, "    def test_total_timeout_connect(self, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestR": {"func": {"test_hook_receives_request_arguments": {"(TestRequests, ?) -> None": [[946, "    def test_hook_receives_request_arguments(self, httpbin):"]]}, "test_request_ok_set": {"(TestRequests, ?) -> None": [[782, "    def test_request_ok_set(self, httpbin):"]]}, "test_non_prepared_request_error": {"TestRequests -> None": [[927, "    def test_non_prepared_request_error(self):"]]}, "test_cookie_quote_wrapped": {"(TestRequests, ?) -> None": [[348, "    def test_cookie_quote_wrapped(self, httpbin):"]]}, "test_request_cookies_not_persisted": {"(TestRequests, ?) -> None": [[367, "    def test_request_cookies_not_persisted(self, httpbin):"]]}, "test_cannot_send_unprepared_requests": {"(TestRequests, ?) -> None": [[1331, "    def test_cannot_send_unprepared_requests(self, httpbin):"]]}, "test_unicode_method_name_with_request_object": {"(TestRequests, ?) -> None": [[916, "    def test_unicode_method_name_with_request_object(self, httpbin):"]]}, "test_form_encoded_post_query_multivalued_element": {"(TestRequests, ?) -> None": [[874, "    def test_form_encoded_post_query_multivalued_element(self, httpbin):"]]}, "test_request_with_bytestring_host": {"(TestRequests, ?) -> None": [[1013, "    def test_request_with_bytestring_host(self, httpbin):"]]}, "test_prepared_request_with_file_is_pickleable": {"(TestRequests, ?) -> None": [[1299, "    def test_prepared_request_with_file_is_pickleable(self, httpbin):"]]}, "test_prepared_request_is_pickleable": {"(TestRequests, ?) -> None": [[1285, "    def test_prepared_request_is_pickleable(self, httpbin):"]]}, "test_session_hooks_are_used_with_no_request_hooks": {"(TestRequests, ?) -> None": [[956, "    def test_session_hooks_are_used_with_no_request_hooks(self, httpbin):"]]}, "test_request_and_response_are_pickleable": {"(TestRequests, ?) -> None": [[1273, "    def test_request_and_response_are_pickleable(self, httpbin):"]]}, "test_requests_history_is_saved": {"(TestRequests, ?) -> None": [[1772, "    def test_requests_history_is_saved(self, httpbin):"]]}, "test_prepared_request_hook": {"(TestRequests, ?) -> None": [[975, "    def test_prepared_request_hook(self, httpbin):"]]}, "test_session_hooks_are_overridden_by_request_hooks": {"(TestRequests, ?) -> None": [[965, "    def test_session_hooks_are_overridden_by_request_hooks(self, httpbin):"]]}, "test_requests_in_history_are_not_overridden": {"(TestRequests, ?) -> None": [[424, "    def test_requests_in_history_are_not_overridden(self, httpbin):"]]}, "test_prepared_request_with_hook_is_pickleable": {"(TestRequests, ?) -> None": [[1315, "    def test_prepared_request_with_hook_is_pickleable(self, httpbin):"]]}, "test_request_cookie_overrides_session_cookie": {"(TestRequests, ?) -> None": [[359, "    def test_request_cookie_overrides_session_cookie(self, httpbin):"]]}, "test_urlencoded_get_query_multivalued_param": {"(TestRequests, ?) -> None": [[868, "    def test_urlencoded_get_query_multivalued_param(self, httpbin):"]]}, "test_prepare_request_with_bytestring_url": {"TestRequests -> None": [[1007, "    def test_prepare_request_with_bytestring_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_auth_is_retained_for_redirect_on_host": {"var": {"h1": {"?": [[1591, "        h1 = r.history[0].request.headers['Authorization']"]]}, "h2": {"?": [[1592, "        h2 = r.request.headers['Authorization']"]]}, "r": {"None": [[1590, "        r = requests.get(httpbin('redirect/1'), auth=('user', 'pass'))"]]}}, "param": {"self": {"TestRequests": [[1589, "    def test_auth_is_retained_for_redirect_on_host(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_302_doesnt_change_head_to_get": {"var": {"r": {"None": [[241, "        r = requests.head(httpbin('status', '302'), allow_redirects=True)"]]}}, "param": {"self": {"TestRequests": [[240, "    def test_http_302_doesnt_change_head_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_hook_receives_request_arguments.hook": {"param": {"resp": {"?": [[947, "        def hook(resp, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_req": {"class": {"TestTimeout": {"<TestTimeout>": [[2144, "class TestTimeout:"]]}}, "func": {"test_data_argument_accepts_tuples": {"? -> None": [[2317, "def test_data_argument_accepts_tuples(data):"]]}, "test_urllib3_retries": {"? -> None": [[2361, "def test_urllib3_retries(httpbin):"]]}, "test_urllib3_pool_connection_closed": {"? -> ?": [[2372, "def test_urllib3_pool_connection_closed(httpbin):"]]}, "test_proxy_env_vars_override_default": {"(?, ?, ?) -> None": [[2296, "def test_proxy_env_vars_override_default(var, url, proxy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_entry_point": {"param": {"self": {"TestRequests": [[61, "    def test_entry_points(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieExpires.test_expires_invalid_": {"param": {"exception": {"?": [[2107, "    def test_expires_invalid_int(self, value, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_urllib3_pool_connection_closed": {"var": {"s": {"Session": [[2373, "    s = requests.Session()"]]}}, "param": {"httpbin": {"?": [[2372, "def test_urllib3_pool_connection_closed(httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_uppercase_scheme_redirect": {"var": {"url": {"str": [[1369, "        url = \"HTTP://\" + parts.netloc + parts.path"]]}, "r": {"None": [[1370, "        r = requests.get(httpbin('redirect-to'), params={'url': url})"]]}}, "param": {"self": {"TestRequests": [[1367, "    def test_uppercase_scheme_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequ": {"func": {"test_http_302_changes_post_to_get": {"(TestRequests, ?) -> None": [[233, "    def test_http_302_changes_post_to_get(self, httpbin):"]]}, "test_header_remove_is_case_insensitive": {"(TestRequests, ?) -> None": [[1450, "    def test_header_remove_is_case_insensitive(self, httpbin):"]]}, "test_https_warnings": {"(TestRequests, ?, ?) -> None": [[838, "    def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):"]]}, "test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": {"(TestRequests, ?) -> None": [[317, "    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self, httpbin):"]]}, "test_cookie_as_dict_keeps_items": {"TestRequests -> None": [[1085, "    def test_cookie_as_dict_keeps_items(self):"]]}, "test_header_keys_are_native": {"(TestRequests, ?) -> None": [[1472, "    def test_header_keys_are_native(self, httpbin):"]]}, "test_errors": {"(TestRequests, ?, ?) -> None": [[532, "    def test_errors(self, url, exception):"]]}, "test_redirect_with_wrong_gzipped_header": {"(TestRequests, ?) -> None": [[1756, "    def test_redirect_with_wrong_gzipped_header(self, httpbin):"]]}, "test_empty_response_has_content_none": {"TestRequests -> None": [[1198, "    def test_empty_response_has_content_none(self):"]]}, "test_different_encodings_dont_break_post": {"(TestRequests, ?) -> None": [[880, "    def test_different_encodings_dont_break_post(self, httpbin):"]]}, "test_session_close_proxy_clear": {"(TestRequests, ?) -> None": [[1828, "    def test_session_close_proxy_clear(self, mocker):"]]}, "test_params_are_merged_case_sensitive": {"(TestRequests, ?) -> None": [[1457, "    def test_params_are_merged_case_sensitive(self, httpbin):"]]}, "test_entry_points": {"TestRequests -> None": [[61, "    def test_entry_points(self):"]]}, "test_http_303_doesnt_change_head_to_get": {"(TestRequests, ?) -> None": [[254, "    def test_http_303_doesnt_change_head_to_get(self, httpbin):"]]}, "test_POSTBIN_GET_POST_FILES_WITH_DATA": {"(TestRequests, ?) -> None": [[731, "    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin):"]]}, "test_cookie_as_dict_items": {"TestRequests -> None": [[1136, "    def test_cookie_as_dict_items(self):"]]}, "test_cookie_policy_copy": {"TestRequests -> None": [[1184, "    def test_cookie_policy_copy(self):"]]}, "test_response_is_iterable": {"TestRequests -> None": [[1202, "    def test_response_is_iterable(self):"]]}, "test_DIGESTAUTH_WRONG_HTTP_401_GET": {"(TestRequests, ?) -> None": [[637, "    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin):"]]}, "test_params_bytes_are_encoded": {"TestRequests -> None": [[139, "    def test_params_bytes_are_encoded(self):"]]}, "test_rewind_body_no_seek": {"TestRequests -> None": [[1679, "    def test_rewind_body_no_seek(self):"]]}, "test_cookie_sent_on_redirect": {"(TestRequests, ?) -> None": [[329, "    def test_cookie_sent_on_redirect(self, httpbin):"]]}, "test_BASICAUTH_TUPLE_HTTP_200_OK_GET": {"(TestRequests, ?) -> None": [[482, "    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin):"]]}, "test_response_json_when_content_is_None": {"(TestRequests, ?) -> None": [[1849, "    def test_response_json_when_content_is_None(self, httpbin):"]]}, "test_empty_content_length": {"(TestRequests, ?, ?) -> None": [[106, "    def test_empty_content_length(self, httpbin, method):"]]}, "test_param_cookiejar_works": {"(TestRequests, ?) -> None": [[384, "    def test_param_cookiejar_works(self, httpbin):"]]}, "test_pyopenssl_redirect": {"(TestRequests, ?, ?) -> None": [[815, "    def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):"]]}, "test_DIGEST_STREAM": {"(TestRequests, ?) -> None": [[625, "    def test_DIGEST_STREAM(self, httpbin):"]]}, "test_rewind_body_failed_tell": {"TestRequests -> None": [[1722, "    def test_rewind_body_failed_tell(self):"]]}, "test_can_send_objects_with_files": {"(TestRequests, ?, ?) -> None": [[1545, "    def test_can_send_objects_with_files(self, httpbin, files):"]]}, "test_http_302_doesnt_change_head_to_get": {"(TestRequests, ?) -> None": [[240, "    def test_http_302_doesnt_change_head_to_get(self, httpbin):"]]}, "test_json_param_post_content_type_works": {"(TestRequests, ?) -> None": [[1780, "    def test_json_param_post_content_type_works(self, httpbin):"]]}, "test_nonhttp_schemes_dont_check_URLs": {"TestRequests -> None": [[1568, "    def test_nonhttp_schemes_dont_check_URLs(self):"]]}, "test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS": {"(TestRequests, ?) -> ?": [[205, "    def test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin):"]]}, "test_links": {"TestRequests -> None": [[1023, "    def test_links(self):"]]}, "test_cookie_parameters": {"TestRequests -> None": [[1047, "    def test_cookie_parameters(self):"]]}, "test_HTTP_200_OK_PUT": {"(TestRequests, ?) -> None": [[478, "    def test_HTTP_200_OK_PUT(self, httpbin):"]]}, "test_response_iter_lines": {"(TestRequests, ?) -> None": [[1796, "    def test_response_iter_lines(self, httpbin):"]]}, "test_session_pickling": {"(TestRequests, ?) -> None": [[1346, "    def test_session_pickling(self, httpbin):"]]}, "test_conflicting_post_params": {"(TestRequests, ?) -> None": [[774, "    def test_conflicting_post_params(self, httpbin):"]]}, "test_invalid_ca_certificate_path": {"(TestRequests, ?) -> None": [[818, "    def test_invalid_ca_certificate_path(self, httpbin_secure):"]]}, "test_decompress_gzip": {"(TestRequests, ?) -> None": [[794, "    def test_decompress_gzip(self, httpbin):"]]}, "test_POSTBIN_GET_POST_FILES": {"(TestRequests, ?) -> None": [[663, "    def test_POSTBIN_GET_POST_FILES(self, httpbin):"]]}, "test_DIGESTAUTH_QUOTES_QOP_VALUE": {"(TestRequests, ?) -> None": [[654, "    def test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin):"]]}, "test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE": {"(TestRequests, ?) -> None": [[186, "    def test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE(self, httpbin):"]]}, "test_DIGEST_AUTH_RETURNS_COOKIE": {"(TestRequests, ?) -> None": [[605, "    def test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin):"]]}, "test_HTTP_200_OK_HEAD": {"(TestRequests, ?) -> None": [[474, "    def test_HTTP_200_OK_HEAD(self, httpbin):"]]}, "test_override_content_length": {"(TestRequests, ?) -> None": [[110, "    def test_override_content_length(self, httpbin):"]]}, "test_response_iter_lines_reentrant": {"(TestRequests, ?) -> None": [[1820, "    def test_response_iter_lines_reentrant(self, httpbin):"]]}, "test_params_are_added_before_fragment": {"(TestRequests, ?, ?) -> None": [[128, "    def test_params_are_added_before_fragment(self, url, expected):"]]}, "test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER": {"(TestRequests, ?) -> None": [[689, "    def test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin):"]]}, "test_prepared_from_session": {"(TestRequests, ?) -> None": [[989, "    def test_prepared_from_session(self, httpbin):"]]}, "test_response_context_manager": {"(TestRequests, ?) -> None": [[1804, "    def test_response_context_manager(self, httpbin):"]]}, "test_prepare_body_position_non_stream": {"TestRequests -> None": [[1647, "    def test_prepare_body_position_non_stream(self):"]]}, "test_invalid_ssl_certificate_files": {"(TestRequests, ?) -> None": [[824, "    def test_invalid_ssl_certificate_files(self, httpbin_secure):"]]}, "test_mixed_case_scheme_acceptable": {"(TestRequests, ?, ?) -> None": [[155, "    def test_mixed_case_scheme_acceptable(self, httpbin, scheme):"]]}, "test_transfer_enc_removal_on_redirect": {"(TestRequests, ?) -> None": [[278, "    def test_transfer_enc_removal_on_redirect(self, httpbin):"]]}, "test_time_elapsed_blank": {"(TestRequests, ?) -> None": [[1192, "    def test_time_elapsed_blank(self, httpbin):"]]}, "test_http_301_changes_post_to_get": {"(TestRequests, ?) -> None": [[218, "    def test_http_301_changes_post_to_get(self, httpbin):"]]}, "test_fragment_maintained_on_redirect": {"(TestRequests, ?) -> None": [[301, "    def test_fragment_maintained_on_redirect(self, httpbin):"]]}, "test_header_and_body_removal_on_redirect": {"(TestRequests, ?) -> None": [[261, "    def test_header_and_body_removal_on_redirect(self, httpbin):"]]}, "test_headers_on_session_with_None_are_not_sent": {"(TestRequests, ?) -> None": [[438, "    def test_headers_on_session_with_None_are_not_sent(self, httpbin):"]]}, "test_generic_cookiejar_works": {"(TestRequests, ?) -> None": [[373, "    def test_generic_cookiejar_works(self, httpbin):"]]}, "test_headers_preserve_order": {"(TestRequests, ?) -> None": [[446, "    def test_headers_preserve_order(self, httpbin):"]]}, "test_cookie_removed_on_expire": {"(TestRequests, ?) -> None": [[335, "    def test_cookie_removed_on_expire(self, httpbin):"]]}, "test_HTTP_200_OK_GET_WITH_PARAMS": {"(TestRequests, ?) -> None": [[309, "    def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):"]]}, "test_HTTP_307_ALLOW_REDIRECT_POST": {"(TestRequests, ?) -> None": [[179, "    def test_HTTP_307_ALLOW_REDIRECT_POST(self, httpbin):"]]}, "test_HTTP_200_OK_GET_ALTERNATIVE": {"(TestRequests, ?) -> None": [[164, "    def test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin):"]]}, "test_session_get_adapter_prefix_matching": {"TestRequests -> None": [[1412, "    def test_session_get_adapter_prefix_matching(self):"]]}, "test_cookielib_cookiejar_on_redirect": {"(TestRequests, ?) -> None": [[392, "    def test_cookielib_cookiejar_on_redirect(self, httpbin):"]]}, "test_cookie_as_dict_keys": {"TestRequests -> None": [[1104, "    def test_cookie_as_dict_keys(self):"]]}, "test_DIGEST_HTTP_200_OK_GET": {"(TestRequests, ?) -> None": [[587, "    def test_DIGEST_HTTP_200_OK_GET(self, httpbin):"]]}, "test_no_body_content_length": {"(TestRequests, ?, ?) -> None": [[101, "    def test_no_body_content_length(self, httpbin, method):"]]}, "test_HTTP_302_TOO_MANY_REDIRECTS": {"(TestRequests, ?) -> ?": [[194, "    def test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin):"]]}, "test_history_is_always_a_list": {"(TestRequests, ?) -> None": [[430, "    def test_history_is_always_a_list(self, httpbin):"]]}, "test_header_no_leading_space": {"(TestRequests, ?) -> None": [[1530, "    def test_header_no_leading_space(self, httpbin):"]]}, "test_cookie_as_dict_keeps_len": {"TestRequests -> None": [[1065, "    def test_cookie_as_dict_keeps_len(self):"]]}, "test_set_cookie_on_301": {"(TestRequests, ?) -> None": [[323, "    def test_set_cookie_on_301(self, httpbin):"]]}, "test_no_content_length": {"(TestRequests, ?, ?) -> None": [[96, "    def test_no_content_length(self, httpbin, method):"]]}, "test_http_301_doesnt_change_head_to_get": {"(TestRequests, ?) -> None": [[225, "    def test_http_301_doesnt_change_head_to_get(self, httpbin):"]]}, "test_session_get_adapter_prefix_matching_mixed_case": {"TestRequests -> None": [[1430, "    def test_session_get_adapter_prefix_matching_mixed_case(self):"]]}, "test_can_send_file_object_with_non_string_filename": {"(TestRequests, ?) -> None": [[1552, "    def test_can_send_file_object_with_non_string_filename(self, httpbin):"]]}, "test_fixes_1329": {"(TestRequests, ?) -> None": [[1356, "    def test_fixes_1329(self, httpbin):"]]}, "test_cookie_persists_via_api": {"(TestRequests, ?) -> None": [[353, "    def test_cookie_persists_via_api(self, httpbin):"]]}, "test_transport_adapter_ordering": {"TestRequests -> None": [[1374, "    def test_transport_adapter_ordering(self):"]]}, "test_proxy_error": {"TestRequests -> None": [[536, "    def test_proxy_error(self):"]]}, "test_session_get_adapter_prefix_matching_is_case_insensitive": {"TestRequests -> None": [[1440, "    def test_session_get_adapter_prefix_matching_is_case_insensitive(self):"]]}, "test_HTTP_302_ALLOW_REDIRECT_GET": {"(TestRequests, ?) -> None": [[173, "    def test_HTTP_302_ALLOW_REDIRECT_GET(self, httpbin):"]]}, "test_header_validation": {"(TestRequests, ?) -> None": [[1482, "    def test_header_validation(self, httpbin):"]]}, "test_http_303_changes_post_to_get": {"(TestRequests, ?) -> None": [[247, "    def test_http_303_changes_post_to_get(self, httpbin):"]]}, "test_rewind_body": {"TestRequests -> None": [[1652, "    def test_rewind_body(self):"]]}, "test_DIGEST_AUTH_SETS_SESSION_COOKIES": {"(TestRequests, ?) -> None": [[616, "    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin):"]]}, "test_rewind_partially_read_body": {"TestRequests -> None": [[1665, "    def test_rewind_partially_read_body(self):"]]}, "test_rewind_body_failed_seek": {"TestRequests -> None": [[1699, "    def test_rewind_body_failed_seek(self):"]]}, "test_http_error": {"TestRequests -> None": [[1336, "    def test_http_error(self):"]]}, "test_http_with_certificate": {"(TestRequests, ?) -> None": [[834, "    def test_http_with_certificate(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_mixed_ca": {"param": {"self": {"TestRequests": [[1430, "    def test_session_get_adapter_prefix_matching_mixed_case(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_redirecting_to_bad_": {"param": {"url": {"?": [[2457, "    def test_redirecting_to_bad_url(self, httpbin, url, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_no_content_leng": {"param": {"httpbin": {"?": [[96, "    def test_no_content_length(self, httpbin, method):"]]}, "method": {"?": [[96, "    def test_no_content_length(self, httpbin, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_uppercase_scheme_redirec": {"var": {"parts": {"?": [[1368, "        parts = urlparse(httpbin('html'))"]]}}, "param": {"httpbin": {"?": [[1367, "    def test_uppercase_scheme_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_connect_timeout": {"param": {"self": {"TestTimeout": [[2196, "    def test_connect_timeout(self, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_BASICAUTH_TUPLE_HTTP_200_OK_GET": {"var": {"url": {"?": [[484, "        url = httpbin('basic-auth', 'user', 'pass')"]]}, "s": {"Session": [[492, "        s = requests.session()"]]}, "r": {"None": [[486, "        r = requests.get(url, auth=auth)"], [489, "        r = requests.get(url)"], [494, "        r = s.get(url)"]]}, "auth": {"(str, str)": [[483, "        auth = ('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[482, "    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin):"]]}, "httpbin": {"?": [[482, "    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_history_is_always_a_lis": {"param": {"httpbin": {"?": [[430, "    def test_history_is_always_a_list(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_autoset_header_values_are_nativ": {"var": {"length": {"str": [[1562, "        length = '16'"]]}, "req": {"Request": [[1563, "        req = requests.Request('POST', httpbin('post'), data=data)"]]}}, "param": {"self": {"TestRequests": [[1560, "    def test_autoset_header_values_are_native(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_preserve_key_case": {"var": {"cid": {"CaseInsensitiveDict": [[2059, "        cid = CaseInsensitiveDict({"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_r": {"class": {"TestRequests": {"<TestRequests>": [[57, "class TestRequests:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_auth_is_stripped_on_http_downgr": {"param": {"httpbin_ca_bundle": {"?": [[1579, "    def test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieExpires.test_expires_valid_str": {"var": {"cookie": {"?": [[2099, "        cookie = morsel_to_cookie(morsel)"]]}}, "param": {"self": {"TestMorselToCookieExpires": [[2094, "    def test_expires_valid_str(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_value_no": {"var": {"headers_dict": {"dict": [[1496, "        headers_dict = {'bar': {'foo': 'bar'}}"]]}, "headers_int": {"dict": [[1495, "        headers_int = {'foo': 3}"]]}, "headers_list": {"dict": [[1497, "        headers_list = {'baz': ['foo', 'bar']}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_auth_empty_pa": {"param": {"self": {"TestRequests": [[1844, "    def test_proxy_auth_empty_pass(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_method_name": {"var": {"r": {"None": [[912, "        r = requests.request("]]}}, "param": {"httpbin": {"?": [[910, "    def test_unicode_method_name(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_auth_empty_p": {"var": {"headers": {"dict": [[1846, "        headers = adapter.proxy_headers(\"http://user:@httpbin.org\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj": {"func": {"__iter__": {"BadFileObj -> None": [[1710, "            def __iter__(self):"]]}, "seek": {"(BadFileObj, ?, int) -> None": [[1707, "            def seek(self, pos, whence=0):"]]}, "tell": {"BadFileObj -> int": [[1704, "            def tell(self):"]]}, "__init__": {"? -> ?": [[1701, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_binary_p": {"var": {"request": {"PreparedRequest": [[145, "        request = requests.Request('PUT', 'http://example.com',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_json_param_post_should_not_override_data_param": {"var": {"r": {"Request": [[1790, "        r = requests.Request(method='POST', url=httpbin('post'),"]]}, "prep": {"PreparedRequest": [[1793, "        prep = r.prepare()"]]}}, "param": {"self": {"TestRequests": [[1789, "    def test_json_param_post_should_not_override_data_param(self, httpbin):"]]}, "httpbin": {"?": [[1789, "    def test_json_param_post_should_not_override_data_param(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_return_char": {"param": {"self": {"TestRequests": [[1512, "    def test_header_no_return_chars(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_certificate_fail": {"param": {"httpbin_secure": {"?": [[859, "    def test_certificate_failure(self, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_key": {"param": {"self": {"TestRequests": [[1104, "    def test_cookie_as_dict_keys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_urlencoded_get_query_multivalued_param": {"var": {"r": {"None": [[870, "        r = requests.get(httpbin('get'), params={'test': ['foo', 'baz']})"]]}}, "param": {"self": {"(?, None) -> None / (str, None) -> None": [[868, "    def test_urlencoded_get_query_multivalued_param(self, httpbin):"]]}, "httpbin": {"?": [[868, "    def test_urlencoded_get_query_multivalued_param(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_decompress_gz": {"param": {"httpbin": {"?": [[794, "    def test_decompress_gzip(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_mixed_case_scheme_acceptabl": {"param": {"scheme": {"?": [[155, "    def test_mixed_case_scheme_acceptable(self, httpbin, scheme):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_proxy_env_vars_override_default": {"var": {"scheme": {"?": [[2304, "    scheme = urlparse(url).scheme"]]}, "session": {"Session": [[2297, "    session = requests.Session()"]]}, "prep": {"PreparedRequest": [[2298, "    prep = PreparedRequest()"]]}, "proxies": {"?": [[2306, "        proxies = session.rebuild_proxies(prep, {})"]]}, "kwargs": {"dict": [[2301, "    kwargs = {"]]}}, "param": {"var": {"?": [[2296, "def test_proxy_env_vars_override_default(var, url, proxy):"]]}, "url": {"?": [[2296, "def test_proxy_env_vars_override_default(var, url, proxy):"]]}, "proxy": {"?": [[2296, "def test_proxy_env_vars_override_default(var, url, proxy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basicauth_with_netrc.get_netrc_auth_mock": {"param": {"url": {"str": [[562, "            def get_netrc_auth_mock(url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_transfer_enc_removal_on_redirect": {"var": {"ses": {"Session": [[280, "        ses = requests.Session()"]]}, "resp": {"Response": [[286, "        resp = requests.Response()"]]}, "req": {"Request": [[281, "        req = requests.Request('POST', httpbin('post'), data=(b'x' for x in range(1)))"]]}, "header": {"str": [[298, "        for header in purged_headers:"]]}, "prep": {"PreparedRequest": [[282, "        prep = ses.prepare_request(req)"]]}, "purged_headers": {"(str, str)": [[279, "        purged_headers = ('Transfer-Encoding', 'Content-Type')"]]}}, "param": {"self": {"TestRequests": [[278, "    def test_transfer_enc_removal_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_ge": {"param": {"httpbin": {"?": [[806, "    def test_unicode_get(self, httpbin, url, params):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__init__": {"param": {"self": {"TestStream": [[692, "            def __init__(self, data):"]]}, "data": {"str": [[692, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_": {"class": {"CustomMapping": {"<CustomMapping>": [[750, "        class CustomMapping(MutableMapping):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body": {"var": {"data": {"?": [[1653, "        data = io.BytesIO(b'the data')"]]}, "prep": {"PreparedRequest": [[1654, "        prep = requests.Request('GET', 'http://example.com', data=data).prepare()"]]}}, "param": {"self": {"TestRequests": [[1652, "    def test_rewind_body(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_decode_unicode": {"var": {"chunks": {"None": [[1223, "        chunks = r.iter_content(decode_unicode=True)"], [1230, "        chunks = r.iter_content(decode_unicode=True)"]]}, "r": {"Response": [[1218, "        r = requests.Response()"], [1227, "        r = requests.Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_can_send_file_object_with_non_string_filename": {"var": {"p": {"PreparedRequest": [[1556, "        p = r.prepare()"]]}, "r": {"Request": [[1555, "        r = requests.Request('POST', httpbin('post'), files={'f': f})"]]}, "f": {"?": [[1553, "        f = io.BytesIO()"]]}}, "param": {"httpbin": {"?": [[1552, "    def test_can_send_file_object_with_non_string_filename(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_copy": {"var": {"cid": {"CaseInsensitiveDict": [[2081, "        cid = CaseInsensitiveDict({"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2080, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_ca_certificate_pa": {"param": {"httpbin_secure": {"?": [[818, "    def test_invalid_ca_certificate_path(self, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_chunked_upload_does_not_set_content_length_header": {"var": {"data": {"[str]": [[1898, "        data = (i for i in [b'a', b'b', b'c'])"]]}}, "param": {"self": {"TestRequests": [[1894, "    def test_chunked_upload_does_not_set_content_length_header(self, httpbin):"]]}, "httpbin": {"?": [[1894, "    def test_chunked_upload_does_not_set_content_length_header(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_303_doesnt_change_head_to_get": {"var": {"r": {"None": [[255, "        r = requests.head(httpbin('status', '303'), allow_redirects=True)"]]}}, "param": {"self": {"TestRequests": [[254, "    def test_http_303_doesnt_change_head_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_method_name_with_request_objec": {"param": {"httpbin": {"?": [[916, "    def test_unicode_method_name_with_request_object(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_reason_unicode": {"var": {"r": {"Response": [[1235, "        r = requests.Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectS": {"func": {"build_response": {"RedirectSession -> Response": [[2237, "    def build_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_200_OK_GET_WITH_PARAMS": {"var": {"r": {"None": [[312, "        r = requests.get(httpbin('user-agent'), headers=heads)"]]}, "heads": {"dict": [[310, "        heads = {'User-agent': 'Mozilla/5.0'}"]]}}, "param": {"self": {"TestRequests": [[309, "    def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):"]]}, "httpbin": {"?": [[309, "    def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_iter_lin": {"param": {"self": {"TestRequests": [[1796, "    def test_response_iter_lines(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_": {"var": {"keys": {"list": [[1115, "        keys = jar.keys()"]]}, "items": {"list": [[1147, "        items = jar.items()"]]}, "values": {"list": [[1131, "        values = jar.values()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_from_session.DummyAuth.__call__": {"param": {"self": {"DummyAuth": [[991, "            def __call__(self, r):"]]}, "r": {"?": [[991, "            def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_headers_preserve_order": {"var": {"items": {"list": [[458, "        items = list(prep.headers.items())"]]}, "ses": {"Session": [[448, "        ses = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[446, "    def test_headers_preserve_order(self, httpbin):"]]}, "httpbin": {"?": [[446, "    def test_headers_preserve_order(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_error": {"param": {"self": {"TestRequests": [[1336, "    def test_http_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_u": {"func": {"normalize_percent_encode": {"str -> str": [[2425, "        def normalize_percent_encode(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_content_leng": {"param": {"httpbin": {"?": [[106, "    def test_empty_content_length(self, httpbin, method):"]]}, "method": {"?": [[106, "    def test_empty_content_length(self, httpbin, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_with_hook_is_pickleabl": {"var": {"resp": {"?": [[1328, "        resp = s.send(r)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_and_response_are_pickleab": {"param": {"self": {"TestRequests": [[1273, "    def test_request_and_response_are_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_error": {"param": {"self": {"TestRequests": [[536, "    def test_proxy_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_keys": {"var": {"key1": {"str": [[1108, "        key1 = 'some_cookie1'"]]}, "value1": {"str": [[1109, "        value1 = 'some_value1'"]]}, "jar": {"RequestsCookieJar": [[1111, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1106, "        value = 'some_value'"]]}, "key": {"str": [[1105, "        key = 'some_cookie'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_mixed_case_scheme_acceptable": {"var": {"url": {"?": [[159, "        url = scheme + parts.netloc + parts.path"]]}, "s": {"Session": [[156, "        s = requests.Session()"]]}, "parts": {"?": [[158, "        parts = urlparse(httpbin('get'))"]]}, "r": {"Request": [[160, "        r = requests.Request('GET', url)"]], "?": [[161, "        r = s.send(r.prepare())"]]}}, "param": {"httpbin": {"?": [[155, "    def test_mixed_case_scheme_acceptable(self, httpbin, scheme):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.seek": {"param": {"whence": {"int": [[1707, "            def seek(self, pos, whence=0):"]]}, "self": {"BadFileObj": [[1707, "            def seek(self, pos, whence=0):"]]}, "pos": {"?": [[1707, "            def seek(self, pos, whence=0):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookielib_cookiejar_on_redirec": {"param": {"httpbin": {"?": [[392, "    def test_cookielib_cookiejar_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_": {"var": {"response": {"Response": [[1339, "        response = requests.Response()"]]}, "error": {"HTTPError": [[1337, "        error = requests.exceptions.HTTPError()"], [1340, "        error = requests.exceptions.HTTPError(response=response)"], [1342, "        error = requests.exceptions.HTTPError('message', response=response)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_can_send_objects_with_": {"var": {"files": {"dict": [[1547, "        files = {'b': files}"]]}}, "param": {"files": {"?": [[1545, "    def test_can_send_objects_with_files(self, httpbin, files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_requests_in_history_are_not_overridde": {"param": {"httpbin": {"?": [[424, "    def test_requests_in_history_are_not_overridden(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_can_send_objects_with_files": {"var": {"p": {"PreparedRequest": [[1549, "        p = r.prepare()"]]}, "r": {"Request": [[1548, "        r = requests.Request('POST', httpbin('post'), data=data, files=files)"]]}, "data": {"dict": [[1546, "        data = {'a': 'this is a string'}"]]}}, "param": {"httpbin": {"?": [[1545, "    def test_can_send_objects_with_files(self, httpbin, files):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_mixed_case": {"var": {"s": {"Session": [[1434, "        s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_no_leading_spac": {"var": {"headers_tab": {"dict": [[1535, "        headers_tab = {'foo': '   bar'}"]]}}, "param": {"self": {"TestRequests": [[1530, "    def test_header_no_leading_space(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_pyopenssl_red": {"param": {"httpbin_secure": {"?": [[815, "    def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_json_when_content_is_Non": {"param": {"self": {"TestRequests": [[1849, "    def test_response_json_when_content_is_None(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_from_session": {"var": {"s": {"Session": [[998, "        s = requests.Session()"]]}, "req": {"Request": [[995, "        req = requests.Request('GET', httpbin('headers'))"]]}, "prep": {"PreparedRequest": [[1001, "        prep = s.prepare_request(req)"]]}, "resp": {"?": [[1002, "        resp = s.send(prep)"]]}}, "class": {"DummyAuth": {"<DummyAuth>": [[990, "        class DummyAuth(requests.auth.AuthBase):"]]}}, "param": {"self": {"TestRequests": [[989, "    def test_prepared_from_session(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_header_and_body_removal_on_redirect": {"var": {"ses": {"Session": [[263, "        ses = requests.Session()"]]}, "resp": {"?": [[266, "        resp = ses.send(prep)"]]}, "req": {"Request": [[264, "        req = requests.Request('POST', httpbin('post'), data={'test': 'data'})"]]}, "header": {"str": [[275, "        for header in purged_headers:"]]}, "prep": {"PreparedRequest": [[265, "        prep = ses.prepare_request(req)"]]}, "purged_headers": {"(str, str)": [[262, "        purged_headers = ('Content-Length', 'Content-Type')"]]}}, "param": {"self": {"TestRequests": [[261, "    def test_header_and_body_removal_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_error_on_bad_ur": {"param": {"self": {"TestRequests": [[541, "    def test_proxy_error_on_bad_url(self, httpbin, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping": {"func": {"__delitem__": {"(CustomMapping, ?) -> None": [[754, "            def __delitem__(self, key):"]]}, "__setitem__": {"(CustomMapping, ?, ?) -> None": [[760, "            def __setitem__(self, key, value):"]]}, "__len__": {"CustomMapping -> int": [[766, "            def __len__(self):"]]}, "__iter__": {"CustomMapping -> ?": [[763, "            def __iter__(self):"]]}, "__init__": {"? -> ?": [[751, "            def __init__(self, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_delitem": {"var": {"cid": {"CaseInsensitiveDict": [[1990, "        cid = CaseInsensitiveDict()"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[1989, "    def test_delitem(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_stream_with_auth_does_not_set_content_length_h": {"var": {"prepared_request": {"PreparedRequest": [[1878, "        prepared_request = r.prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_302_changes_post_to_ge": {"param": {"httpbin": {"?": [[233, "    def test_http_302_changes_post_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": {"var": {"r": {"None": [[320, "        r = requests.get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)"]]}, "heads": {"dict": [[318, "        heads = {'User-agent': 'Mozilla/5.0'}"]]}}, "param": {"self": {"TestRequests": [[317, "    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self, httpbin):"]]}, "httpbin": {"?": [[317, "    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests": {"func": {"_patch_adapter_gzipped_redirect": {"(TestRequests, Session, ?) -> None / (TestRequests, ?, ?) -> None": [[1742, "    def _patch_adapter_gzipped_redirect(self, session, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_keeps_items": {"var": {"key": {"str": [[1086, "        key = 'some_cookie'"]]}, "key1": {"str": [[1089, "        key1 = 'some_cookie1'"]]}, "jar": {"RequestsCookieJar": [[1092, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1087, "        value = 'some_value'"]]}, "value1": {"str": [[1090, "        value1 = 'some_value1'"]]}, "d2": {"dict": [[1097, "        d2 = dict(jar.iteritems())"]]}, "d3": {"dict": [[1098, "        d3 = dict(jar.items())"]]}, "d1": {"dict": [[1096, "        d1 = dict(jar)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_basicauth_encodes_byte_strings": {"var": {"p": {"PreparedRequest": [[519, "        p = r.prepare()"]]}, "r": {"Request": [[518, "        r = requests.Request('GET', 'http://localhost', auth=auth)"]]}, "auth": {"(str, str)": [[517, "        auth = (b'\\xc5\\xafsername', b'test\\xc6\\xb6')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_stream_with_auth_does_not_set_content_length_header": {"var": {"file_obj": {"?": [[1876, "        file_obj = io.BytesIO(b'')"]]}, "auth": {"(str, str)": [[1874, "        auth = ('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[1870, "    def test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin):"]]}, "httpbin": {"?": [[1870, "    def test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_are_added_before_fragment": {"param": {"url": {"?": [[128, "    def test_params_are_added_before_fragment(self, url, expected):"]]}, "self": {"TestRequests": [[128, "    def test_params_are_added_before_fragment(self, url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_content_type": {"var": {"r": {"None": [[936, "        r = requests.post("]]}}, "param": {"httpbin": {"?": [[935, "    def test_custom_content_type(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_http_downgrade": {"var": {"s": {"Session": [[1601, "        s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitiv": {"var": {"my_adapter": {"HTTPAdapter": [[1445, "        my_adapter = HTTPAdapter()"]]}, "url_matching_prefix_with_different_case": {"str": [[1442, "        url_matching_prefix_with_different_case = 'HtTpS://exaMPLe.cOm/MiXeD_caSE_preFIX/another_url'"]]}, "mixed_case_prefix": {"str": [[1441, "        mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'"]]}}, "param": {"self": {"TestRequests": [[1440, "    def test_session_get_adapter_prefix_matching_is_case_insensitive(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_url": {"var": {"p": {"PreparedRequest": [[2433, "        p = r.prepare()"]]}, "r": {"Request": [[2432, "        r = requests.Request('GET', url=url)"]]}}, "param": {"expected": {"?": [[2423, "    def test_preparing_url(self, url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_tell.BadFileObj": {"func": {"__iter__": {"BadFileObj -> None": [[1730, "            def __iter__(self):"]]}, "tell": {"BadFileObj -> None": [[1727, "            def tell(self):"]]}, "__init__": {"? -> ?": [[1724, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_GET_POST_FILES_WITH_DATA": {"var": {"url": {"?": [[733, "        url = httpbin('post')"]]}, "post4": {"None": [[743, "        post4 = requests.post(url, data='[{\"some\": \"json\"}]')"]]}, "post2": {"None": [[740, "            post2 = requests.post(url, data={'some': 'data'}, files={'some': f})"]]}, "post1": {"None": [[736, "        post1 = requests.post(url, data={'some': 'data'})"]]}}, "param": {"self": {"TestRequests": [[731, "    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin):"]]}, "httpbin": {"?": [[731, "    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests._patch_adapter_gzipped_redirec": {"var": {"adapter": {"None": [[1743, "        adapter = session.get_adapter(url=url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS": {"var": {"url": {"?": [[211, "            url = httpbin('relative-redirect', '45')"]]}, "s": {"Session": [[206, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[205, "    def test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin):"]]}, "httpbin": {"?": [[205, "    def test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_pyopenssl_redirect": {"param": {"self": {"TestRequests": [[815, "    def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_removed_on_expir": {"param": {"self": {"TestRequests": [[335, "    def test_cookie_removed_on_expire(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.test_urllib3_retrie": {"var": {"s": {"Session": [[2363, "    s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_empty_response_has_content_non": {"param": {"self": {"TestRequests": [[1198, "    def test_empty_response_has_content_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_post_with_custom_mapping.CustomMapping.__len__": {"param": {"self": {"CustomMapping": [[766, "            def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_no_content_length": {"var": {"req": {"PreparedRequest": [[97, "        req = requests.Request(method, httpbin(method.lower())).prepare()"]]}}, "param": {"self": {"TestRequests": [[96, "    def test_no_content_length(self, httpbin, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_user_agent_transfers": {"var": {"r": {"None": [[471, "        r = requests.get(httpbin('user-agent'), headers=heads)"]]}}, "param": {"httpbin": {"?": [[467, "    def test_user_agent_transfers(self, httpbin, key):"]]}, "key": {"?": [[467, "    def test_user_agent_transfers(self, httpbin, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_aut": {"var": {"headers": {"dict": [[1841, "        headers = adapter.proxy_headers(\"http://user:pass@httpbin.org\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_json_when_content_is_None": {"var": {"r": {"None": [[1850, "        r = requests.get(httpbin('/status/204'))"]]}}, "param": {"httpbin": {"?": [[1849, "    def test_response_json_when_content_is_None(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_http_303_doesnt_change_head_to_ge": {"param": {"httpbin": {"?": [[254, "    def test_http_303_doesnt_change_head_to_get(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession._build_raw": {"var": {"string": {"?": [[2252, "        string = StringIO.StringIO('')"]]}}, "param": {"self": {"RedirectSession": [[2251, "    def _build_raw(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_sent_on_redirec": {"param": {"httpbin": {"?": [[329, "    def test_cookie_sent_on_redirect(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_history_is_always_a_list": {"var": {"resp": {"None": [[432, "        resp = requests.get(httpbin('get'))"], [434, "        resp = requests.get(httpbin('redirect/1'))"]]}}, "param": {"self": {"TestRequests": [[430, "    def test_history_is_always_a_list(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_updat": {"param": {"self": {"TestCaseInsensitiveDict": [[2014, "    def test_update(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_redirecting_to_bad_ur": {"param": {"self": {"TestPreparingURLs": [[2457, "    def test_redirecting_to_bad_url(self, httpbin, url, exception):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_ssl_certificate_fil": {"param": {"httpbin_secure": {"?": [[824, "    def test_invalid_ssl_certificate_files(self, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_request_with_file_is_pickleab": {"var": {"files": {"dict": [[1300, "        files = {'file': open(__file__, 'rb')}"]]}}, "param": {"self": {"TestRequests": [[1299, "    def test_prepared_request_with_file_is_pickleable(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_proxy_error_on_bad_url": {"param": {"httpbin_secure": {"?": [[541, "    def test_proxy_error_on_bad_url(self, httpbin, httpbin_secure):"]]}, "httpbin": {"?": [[541, "    def test_proxy_error_on_bad_url(self, httpbin, httpbin_secure):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_ur": {"param": {"self": {"TestPreparingURLs": [[2423, "    def test_preparing_url(self, url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_json_param_post_content_type_works": {"var": {"r": {"None": [[1781, "        r = requests.post("]]}}, "param": {"httpbin": {"?": [[1780, "    def test_json_param_post_content_type_works(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_https_warnings": {"param": {"httpbin_ca_bundle": {"?": [[838, "    def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_rewind_body_failed_seek.BadFileObj.__init__": {"param": {"self": {"BadFileObj": [[1701, "            def __init__(self, data):"]]}, "data": {"str": [[1701, "            def __init__(self, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_headers_preserve_ord": {"var": {"req": {"Request": [[456, "        req = requests.Request('GET', httpbin('get'), headers=headers)"]]}, "prep": {"PreparedRequest": [[457, "        prep = ses.prepare_request(req)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_hooks_are_used_with_no_request_hook": {"var": {"s": {"Session": [[958, "        s = requests.Session()"]]}}, "param": {"self": {"TestRequests": [[956, "    def test_session_hooks_are_used_with_no_request_hooks(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestPreparingURLs.test_preparing_url.normalize_percent_encode": {"var": {"x": {"str": [[2429, "                x = x.replace(c, c.upper())"]]}, "c": {"?": [[2428, "            for c in re.findall(r'%[a-fA-F0-9]{2}', x):"]]}}, "param": {"x": {"str": [[2425, "        def normalize_percent_encode(x):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_chunk_size_type": {"var": {"chunks": {"None": [[1260, "        chunks = r.iter_content(1)"], [1265, "        chunks = r.iter_content(None)"], [1271, "            chunks = r.iter_content(\"1024\")"]]}, "r": {"Response": [[1258, "        r = requests.Response()"], [1263, "        r = requests.Response()"], [1268, "        r = requests.Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_setdefault": {"var": {"cid": {"CaseInsensitiveDict": [[2045, "        cid = CaseInsensitiveDict({'Spam': 'blueval'})"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2044, "    def test_setdefault(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_policy_cop": {"class": {"MyCookiePolicy": {"<MyCookiePolicy>": [[1185, "        class MyCookiePolicy(cookielib.DefaultCookiePolicy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookielib_cookiejar_on_": {"var": {"redirects": {"?": [[410, "        redirects = s.resolve_redirects(resp, prep_req)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_h": {"var": {"prepared_request": {"PreparedRequest": [[1890, "        prepared_request = r.prepare()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestTimeout.test_read_timeou": {"param": {"httpbin": {"?": [[2184, "    def test_read_timeout(self, httpbin, timeout):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_request_cookies_not_persisted": {"var": {"s": {"Session": [[368, "        s = requests.session()"]]}}, "param": {"self": {"TestRequests": [[367, "    def test_request_cookies_not_persisted(self, httpbin):"]]}, "httpbin": {"?": [[367, "    def test_request_cookies_not_persisted(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_unicode_multipart_post_fieldnam": {"param": {"self": {"TestRequests": [[900, "    def test_unicode_multipart_post_fieldnames(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.RedirectSession.build_respon": {"var": {"request": {"?": [[2238, "        request = self.calls[-1].args[0]"]]}}, "param": {"self": {"RedirectSession": [[2237, "    def build_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_conflicting_post_param": {"param": {"self": {"TestRequests": [[774, "    def test_conflicting_post_params(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepared_from_session.DummyAuth": {"func": {"__call__": {"(DummyAuth, ?) -> None": [[991, "            def __call__(self, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__len__": {"param": {"self": {"TestStream": [[697, "            def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_duplicate_names_different_domains": {"var": {"jar": {"RequestsCookieJar": [[1158, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1154, "        value = 'some_value'"]]}, "cookie": {"None": [[1170, "        cookie = jar.get(key, domain=domain1)"]]}, "key": {"str": [[1153, "        key = 'some_cookie'"]]}, "domain2": {"str": [[1156, "        domain2 = 'test2.com'"]]}, "domain1": {"str": [[1155, "        domain1 = 'test1.com'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_cookie_as_dict_values": {"var": {"key1": {"str": [[1124, "        key1 = 'some_cookie1'"]]}, "value1": {"str": [[1125, "        value1 = 'some_value1'"]]}, "jar": {"RequestsCookieJar": [[1127, "        jar = requests.cookies.RequestsCookieJar()"]]}, "value": {"str": [[1122, "        value = 'some_value'"]]}, "key": {"str": [[1121, "        key = 'some_cookie'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_DIGESTAUTH_QUOTES_QOP_VALUE": {"var": {"url": {"?": [[658, "            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)"]]}, "authtype": {"str": [[656, "        for authtype in self.digest_auth_algo:"]]}, "r": {"None": [[660, "            r = requests.get(url, auth=auth)"]]}, "auth": {"HTTPDigestAuth": [[657, "            auth = HTTPDigestAuth('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[654, "    def test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin):"]]}, "httpbin": {"?": [[654, "    def test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitive": {"var": {"s": {"Session": [[1444, "        s = requests.Session()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_": {"param": {"url": {"?": [[82, "    def test_invalid_url(self, exception, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_user_agent_transfer": {"var": {"heads": {"dict": [[469, "        heads = {key: 'Mozilla/5.0 (github.com/psf/requests)'}"]]}}, "param": {"self": {"TestRequests": [[467, "    def test_user_agent_transfers(self, httpbin, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_DIGEST_STREAM": {"var": {"url": {"?": [[629, "            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)"]]}, "authtype": {"str": [[627, "        for authtype in self.digest_auth_algo:"]]}, "r": {"None": [[631, "            r = requests.get(url, auth=auth, stream=True)"], [634, "            r = requests.get(url, auth=auth, stream=False)"]]}, "auth": {"HTTPDigestAuth": [[628, "            auth = HTTPDigestAuth('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[625, "    def test_DIGEST_STREAM(self, httpbin):"]]}, "httpbin": {"?": [[625, "    def test_DIGEST_STREAM(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_lower_item": {"var": {"keyset": {"?": [[2054, "        keyset = frozenset(lowerkey for lowerkey, v in cid.lower_items())"]]}, "lowerkeyset": {"?": [[2055, "        lowerkeyset = frozenset(['accept', 'user-agent'])"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[2049, "    def test_lower_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_len": {"var": {"cid": {"CaseInsensitiveDict": [[1969, "        cid = CaseInsensitiveDict({'a': 'a', 'b': 'b'})"]]}}, "param": {"self": {"TestCaseInsensitiveDict": [[1968, "    def test_len(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_invalid_url": {"param": {"exception": {"?": [[82, "    def test_invalid_url(self, exception, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_https_warning": {"param": {"self": {"TestRequests": [[838, "    def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):"]]}, "httpbin_secure": {"?": [[838, "    def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_response_iter_lines_reentra": {"param": {"httpbin": {"?": [[1820, "    def test_response_iter_lines_reentrant(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_should_strip_auth_host_chang": {"param": {"self": {"TestRequests": [[1596, "    def test_should_strip_auth_host_change(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_prepare_request_with_bytestring_ur": {"param": {"self": {"TestRequests": [[1007, "    def test_prepare_request_with_bytestring_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_params_bytes_are_encoded": {"var": {"request": {"PreparedRequest": [[140, "        request = requests.Request('GET', 'http://example.com',"]]}}, "param": {"self": {"TestRequests": [[139, "    def test_params_bytes_are_encoded(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_session_hooks_are_overridden_by_request_hooks": {"var": {"hook2": {"? -> ?": [[967, "        hook2 = lambda x, *args, **kwargs: x"]]}, "r": {"Request": [[971, "        r = requests.Request('GET', httpbin(), hooks={'response': [hook1]})"]]}, "hook1": {"? -> ?": [[966, "        hook1 = lambda x, *args, **kwargs: x"]]}, "prep": {"PreparedRequest": [[972, "        prep = s.prepare_request(r)"]]}}, "param": {"httpbin": {"?": [[965, "    def test_session_hooks_are_overridden_by_request_hooks(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_custom_redirect_mixin.CustomRedirectSession.get_redirect_targe": {"var": {"location": {"?": [[1933, "                location = resp.headers.get('location')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_lower_items": {"var": {"cid": {"CaseInsensitiveDict": [[2050, "        cid = CaseInsensitiveDict({"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestCaseInsensitiveDict.test_update": {"var": {"cid": {"CaseInsensitiveDict": [[2015, "        cid = CaseInsensitiveDict()"], [2019, "        cid = CaseInsensitiveDict({'Foo': 'foo', 'BAr': 'bar'})"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_POSTBIN_GET_POST_FILES": {"var": {"url": {"?": [[665, "        url = httpbin('post')"]]}, "post4": {"None": [[675, "        post4 = requests.post(url, data='[{\"some\": \"json\"}]')"]]}, "post2": {"None": [[672, "            post2 = requests.post(url, files={'some': f})"]]}, "post1": {"None": [[668, "        post1 = requests.post(url, data={'some': 'data'})"]]}}, "param": {"self": {"TestRequests": [[663, "    def test_POSTBIN_GET_POST_FILES(self, httpbin):"]]}, "httpbin": {"?": [[663, "    def test_POSTBIN_GET_POST_FILES(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_hook_receives_request_arguments": {"var": {"r": {"Request": [[952, "        r = requests.Request('GET', httpbin(), hooks={'response': hook})"]]}, "prep": {"PreparedRequest": [[953, "        prep = s.prepare_request(r)"]]}}, "param": {"httpbin": {"?": [[946, "    def test_hook_receives_request_arguments(self, httpbin):"]]}}, "func": {"hook": {"? -> None": [[947, "        def hook(resp, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestRequests.test_DIGEST_AUTH_SETS_SESSION_COOKIES": {"var": {"url": {"?": [[619, "            url = httpbin('digest-auth', 'auth', 'user', 'pass', authtype)"]]}, "authtype": {"str": [[618, "        for authtype in self.digest_auth_algo:"]]}, "s": {"Session": [[621, "            s = requests.Session()"]]}, "auth": {"HTTPDigestAuth": [[620, "            auth = HTTPDigestAuth('user', 'pass')"]]}}, "param": {"self": {"TestRequests": [[616, "    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin):"]]}, "httpbin": {"?": [[616, "    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_requests.TestMorselToCookieMaxAge.test_max_age_invalid_str": {"param": {"self": {"TestMorselToCookieMaxAge": [[2135, "    def test_max_age_invalid_str(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/hooks.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.hooks.dispatc": {"var": {"hook_data": {"?": [[33, "                hook_data = _hook_data"]]}, "_hook_data": {"?": [[31, "            _hook_data = hook(hook_data, **kwargs)"]]}}, "param": {"hook_data": {"str": [[23, "def dispatch_hook(key, hooks, hook_data, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.hooks": {"var": {"HOOKS": {"[str]": [[14, "HOOKS = ['response']"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.reque": {"func": {"dispatch_hook": {"(?, ?, ?) -> None / (str, dict, ?) -> None / (str, dict, str) -> str": [[23, "def dispatch_hook(key, hooks, hook_data, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.hooks.dispatch_": {"var": {"hooks": {"[?]": [[29, "            hooks = [hooks]"]], "dict": [[25, "    hooks = hooks or {}"]], "?": [[26, "    hooks = hooks.get(key)"]]}, "hook": {"?": [[30, "        for hook in hooks:"]]}}, "param": {"hooks": {"{dict | dict}": [[23, "def dispatch_hook(key, hooks, hook_data, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.hooks.dispatch_hoo": {"param": {"key": {"str": [[23, "def dispatch_hook(key, hooks, hook_data, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.req": {"func": {"default_hooks": {"() -> dict": [[17, "def default_hooks():"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/api.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.api.delete": {"param": {"url": {"?": [[152, "def delete(url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.put": {"param": {"url": {"?": [[122, "def put(url, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.options": {"param": {"url": {"str": [[79, "def options(url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.post": {"param": {"url": {"?": [[107, "def post(url, data=None, json=None, **kwargs):"]]}, "json": {"str": [[107, "def post(url, data=None, json=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.reques": {"param": {"method": {"str": [[16, "def request(method, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.patch": {"param": {"url": {"?": [[137, "def patch(url, data=None, **kwargs):"]]}, "data": {"None": [[137, "def patch(url, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.pu": {"param": {"data": {"None": [[122, "def put(url, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api": {"func": {"head": {"? -> None": [[92, "def head(url, **kwargs):"]]}, "get": {"(?, None) -> None / (str, None) -> None": [[64, "def get(url, params=None, **kwargs):"]]}, "request": {"(?, ?) -> None / (str, ?) -> None / (str, str) -> None": [[16, "def request(method, url, **kwargs):"]]}, "patch": {"(?, None) -> None": [[137, "def patch(url, data=None, **kwargs):"]]}, "put": {"(?, None) -> None": [[122, "def put(url, data=None, **kwargs):"]]}, "post": {"(str, None, None) -> None / (?, None, None) -> None": [[107, "def post(url, data=None, json=None, **kwargs):"]]}, "delete": {"? -> None": [[152, "def delete(url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.pos": {"param": {"data": {"(str, None, None) -> None / (?, None, None) -> None": [[107, "def post(url, data=None, json=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.request": {"param": {"url": {"str": [[16, "def request(method, url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.a": {"func": {"options": {"? -> None": [[79, "def options(url, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.get": {"param": {"url": {"str": [[64, "def get(url, params=None, **kwargs):"]]}, "params": {"None": [[64, "def get(url, params=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.api.head": {"param": {"url": {"?": [[92, "def head(url, **kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/_internal_utils.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests._internal_utils.to_native_string": {"var": {"out": {"str": [[20, "        out = string"], [23, "            out = string.encode(encoding)"], [25, "            out = string.decode(encoding)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests._internal_util": {"func": {"unicode_is_ascii": {"? -> bool": [[30, "def unicode_is_ascii(u_string):"]]}, "to_native_string": {"(({<str> | ? -> ?}, <str>), str) -> str / (?, str) -> str / (str, str) -> str": [[14, "def to_native_string(string, encoding='ascii'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests._internal_utils.to_native_": {"param": {"string": {"{({<str> | ? -> ?}, <str>) | str}": [[14, "def to_native_string(string, encoding='ascii'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests._internal_utils.to_native_str": {"param": {"encoding": {"str": [[14, "def to_native_string(string, encoding='ascii'):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests._internal_utils.unicode_is_asc": {"param": {"u_string": {"?": [[30, "def unicode_is_ascii(u_string):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/cookies.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockReques": {"func": {"add_unredirected_header": {"(MockRequest, ?, ?) -> None": [[78, "    def add_unredirected_header(self, name, value):"]]}, "get_type": {"MockRequest -> ?": [[42, "    def get_type(self):"]]}, "get_full_url": {"MockRequest -> str": [[51, "    def get_full_url(self):"]]}, "__init__": {"? -> ?": [[37, "    def __init__(self, request):"]]}, "get_header": {"(MockRequest, ?, None) -> ?": [[71, "    def get_header(self, name, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.remove_cookie_by_nam": {"var": {"cookie": {"?": [[152, "    for cookie in cookiejar:"]]}, "clearables": {"[(?, ?, ?)]": [[151, "    clearables = []"]]}}, "param": {"cookiejar": {"RequestsCookieJar": [[146, "def remove_cookie_by_name(cookiejar, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJ": {"func": {"itervalues": {"RequestsCookieJar -> None": [[235, "    def itervalues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.merge_": {"param": {"cookies": {"{RequestsCookieJar | dict}": [[529, "def merge_cookies(cookiejar, cookies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.cookiejar_from_dict": {"var": {"names_from_jar": {"[?]": [[521, "        names_from_jar = [cookie.name for cookie in cookiejar]"]]}, "cookiejar": {"RequestsCookieJar": [[518, "        cookiejar = RequestsCookieJar()"]]}, "name": {"?": [[522, "        for name in cookie_dict:"]]}}, "param": {"cookiejar": {"None": [[508, "def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.is_unverifiab": {"param": {"self": {"MockRequest": [[65, "    def is_unverifiable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.remove_cookie_by_": {"param": {"name": {"str": [[146, "def remove_cookie_by_name(cookiejar, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.__getitem__": {"param": {"self": {"RequestsCookieJar": [[321, "    def __getitem__(self, name):"]]}, "name": {"?": [[321, "    def __getitem__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.create_cookie": {"var": {"badargs": {"?": [[463, "    badargs = set(kwargs) - set(result)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.c": {"class": {"RequestsCookieJar": {"<RequestsCookieJar>": [[171, "class RequestsCookieJar(cookielib.CookieJar, MutableMapping):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.origin_req_host": {"param": {"self": {"MockRequest": [[89, "    def origin_req_host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.remove_cookie_by_name": {"var": {"domain": {"?": [[161, "    for domain, path, name in clearables:"]]}}, "param": {"path": {"None": [[146, "def remove_cookie_by_name(cookiejar, name, domain=None, path=None):"]]}, "domain": {"None": [[146, "def remove_cookie_by_name(cookiejar, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.updat": {"var": {"cookie": {"?": [[351, "            for cookie in other:"]]}}, "param": {"self": {"RequestsCookieJar": [[348, "    def update(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.unverifiab": {"param": {"self": {"MockRequest": [[85, "    def unverifiable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.iterkey": {"param": {"self": {"RequestsCookieJar": [[218, "    def iterkeys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.__contains__": {"param": {"self": {"RequestsCookieJar": [[315, "    def __contains__(self, name):"]]}, "name": {"?": [[315, "    def __contains__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockResponse.__init__": {"param": {"headers": {"?": [[104, "    def __init__(self, headers):"]]}, "self": {"MockResponse": [[104, "    def __init__(self, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.get_dict": {"var": {"cookie": {"?": [[307, "        for cookie in iter(self):"]]}}, "param": {"self": {"RequestsCookieJar": [[299, "    def get_dict(self, domain=None, path=None):"]]}, "domain": {"None": [[299, "    def get_dict(self, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar._find_no_duplicat": {"param": {"self": {"RequestsCookieJar": [[376, "    def _find_no_duplicates(self, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.merge_cookies": {"var": {"cookie_in_jar": {"?": [[546, "            for cookie_in_jar in cookies:"]]}, "cookiejar": {"RequestsCookieJar": [[540, "        cookiejar = cookiejar_from_dict("]]}}, "param": {"cookiejar": {"RequestsCookieJar": [[529, "def merge_cookies(cookiejar, cookies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_host": {"param": {"self": {"MockRequest": [[45, "    def get_host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.list_paths": {"var": {"cookie": {"?": [[281, "        for cookie in iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies._copy_cooki": {"var": {"new_jar": {"?": [[434, "    new_jar = copy.copy(jar)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockResponse.getheader": {"param": {"self": {"MockResponse": [[114, "    def getheaders(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.__setitem__": {"param": {"self": {"RequestsCookieJar": [[330, "    def __setitem__(self, name, value):"]]}, "name": {"?": [[330, "    def __setitem__(self, name, value):"]]}, "value": {"?": [[330, "    def __setitem__(self, name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.iteritem": {"param": {"self": {"RequestsCookieJar": [[252, "    def iteritems(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.ge": {"param": {"path": {"None": [[189, "    def get(self, name, default=None, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.host": {"param": {"self": {"MockRequest": [[93, "    def host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.copy": {"var": {"new_cj": {"RequestsCookieJar": [[416, "        new_cj = RequestsCookieJar()"]]}}, "param": {"self": {"RequestsCookieJar": [[414, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.add_unredirected_header": {"param": {"self": {"MockRequest": [[78, "    def add_unredirected_header(self, name, value):"]]}, "name": {"?": [[78, "    def add_unredirected_header(self, name, value):"]]}, "value": {"?": [[78, "    def add_unredirected_header(self, name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.morsel_to_cooki": {"param": {"morsel": {"?": [[477, "def morsel_to_cookie(morsel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.list_path": {"param": {"self": {"RequestsCookieJar": [[278, "    def list_paths(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.key": {"param": {"self": {"RequestsCookieJar": [[227, "    def keys(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.list_": {"var": {"domains": {"[?]": [[272, "        domains = []"]]}, "paths": {"[?]": [[280, "        paths = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.__init__": {"param": {"self": {"MockRequest": [[37, "    def __init__(self, request):"]]}, "request": {"{PreparedRequest | Request}": [[37, "    def __init__(self, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.multiple_domains": {"var": {"cookie": {"?": [[293, "        for cookie in iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_new_header": {"param": {"self": {"MockRequest": [[81, "    def get_new_headers(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.get_cookie_heade": {"var": {"r": {"MockRequest": [[141, "    r = MockRequest(request)"]]}}, "param": {"jar": {"RequestsCookieJar": [[135, "def get_cookie_header(jar, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.multiple_": {"var": {"domains": {"[?]": [[292, "        domains = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.extract_cookies_to_": {"param": {"jar": {"{RequestsCookieJar | dict}": [[118, "def extract_cookies_to_jar(jar, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest": {"func": {"add_header": {"(MockRequest, ?, ?) -> None": [[74, "    def add_header(self, key, val):"]]}, "is_unverifiable": {"MockRequest -> bool": [[65, "    def is_unverifiable(self):"]]}, "has_header": {"(MockRequest, ?) -> bool": [[68, "    def has_header(self, name):"]]}, "unverifiable": {"MockRequest -> bool": [[85, "    def unverifiable(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.list_domains": {"var": {"cookie": {"?": [[273, "        for cookie in iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.get_cookie_head": {"param": {"request": {"PreparedRequest": [[135, "def get_cookie_header(jar, request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.itervalu": {"param": {"self": {"RequestsCookieJar": [[235, "    def itervalues(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.add_header": {"param": {"self": {"MockRequest": [[74, "    def add_header(self, key, val):"]]}, "val": {"?": [[74, "    def add_header(self, key, val):"]]}, "key": {"?": [[74, "    def add_header(self, key, val):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequ": {"func": {"get_host": {"MockRequest -> ?": [[45, "    def get_host(self):"]]}, "get_origin_req_host": {"MockRequest -> ?": [[48, "    def get_origin_req_host(self):"]]}, "get_new_headers": {"MockRequest -> dict": [[81, "    def get_new_headers(self):"]]}, "origin_req_host": {"MockRequest -> ?": [[89, "    def origin_req_host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRespon": {"func": {"getheaders": {"(MockResponse, ?) -> None": [[114, "    def getheaders(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.cookiejar_from": {"param": {"cookie_dict": {"{RequestsCookieJar | dict | dict | dict}": [[508, "def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockReque": {"func": {"host": {"MockRequest -> ?": [[93, "    def host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.g": {"param": {"default": {"None": [[189, "    def get(self, name, default=None, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_full_ur": {"param": {"self": {"MockRequest": [[51, "    def get_full_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar._f": {"param": {"domain": {"None": [[356, "    def _find(self, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.iteritems": {"var": {"cookie": {"?": [[258, "        for cookie in iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requ": {"func": {"extract_cookies_to_jar": {"(RequestsCookieJar, PreparedRequest, ?) -> ? / (RequestsCookieJar, PreparedRequest, None) -> None / (dict, PreparedRequest, None) -> None / (?, {PreparedRequest | Request}, ?) -> None / (RequestsCookieJar, ?, ?) -> None / (RequestsCookieJar, {PreparedRequest | Request}, ?) -> None / (RequestsCookieJar, Request, ?) -> None / (?, Request, ?) -> None / (?, ?, ?) -> None": [[118, "def extract_cookies_to_jar(jar, request, response):"]]}, "morsel_to_cookie": {"? -> ?": [[477, "def morsel_to_cookie(morsel):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies._copy_cookie_": {"param": {"jar": {"RequestsCookieJar": [[426, "def _copy_cookie_jar(jar):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJa": {"func": {"iterkeys": {"RequestsCookieJar -> None": [[218, "    def iterkeys(self):"]]}, "iteritems": {"RequestsCookieJar -> None": [[252, "    def iteritems(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar._find_no_duplicates": {"var": {"toReturn": {"None": [[388, "        toReturn = None"]], "?": [[395, "                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict"]]}, "cookie": {"?": [[389, "        for cookie in iter(self):"]]}}, "param": {"path": {"None": [[376, "    def _find_no_duplicates(self, name, domain=None, path=None):"]]}, "domain": {"None": [[376, "    def _find_no_duplicates(self, name, domain=None, path=None):"]]}, "name": {"str": [[376, "    def _find_no_duplicates(self, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar": {"func": {"__delitem__": {"(RequestsCookieJar, ?) -> None": [[337, "    def __delitem__(self, name):"]]}, "set_cookie": {"(RequestsCookieJar, ?) -> None / (RequestsCookieJar, None) -> None": [[343, "    def set_cookie(self, cookie, *args, **kwargs):"]]}, "set": {"(RequestsCookieJar, ?, ?) -> None / (RequestsCookieJar, str, str) -> None": [[201, "    def set(self, name, value, **kwargs):"]]}, "copy": {"RequestsCookieJar -> RequestsCookieJar": [[414, "    def copy(self):"]]}, "__getitem__": {"(RequestsCookieJar, ?) -> None": [[321, "    def __getitem__(self, name):"]]}, "get": {"(RequestsCookieJar, str, None, None, None) -> None / (RequestsCookieJar, ?, None, None, None) -> None": [[189, "    def get(self, name, default=None, domain=None, path=None):"]]}, "keys": {"RequestsCookieJar -> list": [[227, "    def keys(self):"]]}, "items": {"RequestsCookieJar -> list": [[261, "    def items(self):"]]}, "__setstate__": {"(RequestsCookieJar, ?) -> None": [[408, "    def __setstate__(self, state):"]]}, "__contains__": {"(RequestsCookieJar, ?) -> bool": [[315, "    def __contains__(self, name):"]]}, "get_policy": {"RequestsCookieJar -> None": [[421, "    def get_policy(self):"]]}, "update": {"(RequestsCookieJar, RequestsCookieJar) -> None / (RequestsCookieJar, ?) -> None": [[348, "    def update(self, other):"]]}, "multiple_domains": {"RequestsCookieJar -> bool": [[286, "    def multiple_domains(self):"]]}, "list_paths": {"RequestsCookieJar -> [?]": [[278, "    def list_paths(self):"]]}, "__setitem__": {"(RequestsCookieJar, ?, ?) -> None": [[330, "    def __setitem__(self, name, value):"]]}, "_find": {"(RequestsCookieJar, ?, None, None) -> None": [[356, "    def _find(self, name, domain=None, path=None):"]]}, "values": {"RequestsCookieJar -> list": [[244, "    def values(self):"]]}, "get_dict": {"(RequestsCookieJar, None, None) -> dict": [[299, "    def get_dict(self, domain=None, path=None):"]]}, "_find_no_duplicates": {"(RequestsCookieJar, str, None, None) -> None / (RequestsCookieJar, ?, None, None) -> None": [[376, "    def _find_no_duplicates(self, name, domain=None, path=None):"]]}, "__getstate__": {"RequestsCookieJar -> None": [[401, "    def __getstate__(self):"]]}, "list_domains": {"RequestsCookieJar -> [?]": [[270, "    def list_domains(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.list_domain": {"param": {"self": {"RequestsCookieJar": [[270, "    def list_domains(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_header": {"param": {"default": {"None": [[71, "    def get_header(self, name, default=None):"]]}, "self": {"MockRequest": [[71, "    def get_header(self, name, default=None):"]]}, "name": {"?": [[71, "    def get_header(self, name, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.get_dic": {"param": {"path": {"None": [[299, "    def get_dict(self, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.get_policy": {"param": {"self": {"RequestsCookieJar": [[421, "    def get_policy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_full_url": {"var": {"host": {"str": [[57, "        host = to_native_string(self._r.headers['Host'], encoding='utf-8')"]]}, "parsed": {"?": [[58, "        parsed = urlparse(self._r.url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies": {"class": {"CookieConflictError": {"<CookieConflictError>": [[165, "class CookieConflictError(RuntimeError):"]]}}, "func": {"cookiejar_from_dict": {"(dict, None, bool) -> RequestsCookieJar / (?, ?, bool) -> RequestsCookieJar / (None, None, bool) -> RequestsCookieJar / (RequestsCookieJar, None, bool) -> RequestsCookieJar / (dict, ?, bool) -> RequestsCookieJar / (?, None, bool) -> RequestsCookieJar": [[508, "def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):"]]}, "get_cookie_header": {"(?, ?) -> None / (RequestsCookieJar, PreparedRequest) -> None": [[135, "def get_cookie_header(jar, request):"]]}, "_copy_cookie_jar": {"? -> None / RequestsCookieJar -> RequestsCookieJar": [[426, "def _copy_cookie_jar(jar):"]]}, "create_cookie": {"(?, str) -> None / (?, ?) -> None / (str, str) -> None": [[441, "def create_cookie(name, value, **kwargs):"]]}, "remove_cookie_by_name": {"(RequestsCookieJar, ?, None, None) -> None / (RequestsCookieJar, str, None, None) -> None / (?, ?, None, None) -> None": [[146, "def remove_cookie_by_name(cookiejar, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cooki": {"class": {"MockRequest": {"<MockRequest>": [[25, "class MockRequest(object):"]]}, "MockResponse": {"<MockResponse>": [[97, "class MockResponse(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.valu": {"param": {"self": {"RequestsCookieJar": [[244, "    def values(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_origin_req_host": {"param": {"self": {"MockRequest": [[48, "    def get_origin_req_host(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.request": {"func": {"merge_cookies": {"(?, ?) -> RequestsCookieJar / (RequestsCookieJar, dict) -> RequestsCookieJar / (RequestsCookieJar, {RequestsCookieJar | dict}) -> RequestsCookieJar / (RequestsCookieJar, RequestsCookieJar) -> RequestsCookieJar / (?, RequestsCookieJar) -> RequestsCookieJar": [[529, "def merge_cookies(cookiejar, cookies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.multiple_domain": {"param": {"self": {"RequestsCookieJar": [[286, "    def multiple_domains(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockResponse.getheaders": {"param": {"name": {"?": [[114, "    def getheaders(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.get_typ": {"param": {"self": {"MockRequest": [[42, "    def get_type(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.create_cooki": {"var": {"result": {"dict": [[447, "    result = {"]]}, "err": {"str": [[465, "        err = 'create_cookie() got unexpected keyword arguments: %s'"]]}}, "param": {"name": {"str": [[441, "def create_cookie(name, value, **kwargs):"]]}, "value": {"str": [[441, "def create_cookie(name, value, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.upda": {"param": {"other": {"RequestsCookieJar": [[348, "    def update(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.extract_cookies_to_ja": {"var": {"res": {"MockResponse": [[131, "    res = MockResponse(response._original_response.msg)"]]}, "req": {"MockRequest": [[129, "    req = MockRequest(request)"]]}}, "param": {"request": {"{PreparedRequest | Request}": [[118, "def extract_cookies_to_jar(jar, request, response):"]]}, "response": {"None": [[118, "def extract_cookies_to_jar(jar, request, response):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar._find": {"var": {"cookie": {"?": [[368, "        for cookie in iter(self):"]]}}, "param": {"path": {"None": [[356, "    def _find(self, name, domain=None, path=None):"]]}, "self": {"RequestsCookieJar": [[356, "    def _find(self, name, domain=None, path=None):"]]}, "name": {"?": [[356, "    def _find(self, name, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.morsel_to_cook": {"var": {"time_template": {"str": [[487, "        time_template = '%a, %d-%b-%Y %H:%M:%S GMT'"]]}, "expires": {"int": [[483, "            expires = int(time.time() + int(morsel['max-age']))"]], "None": [[480, "    expires = None"]], "?": [[488, "        expires = calendar.timegm("]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockResponse": {"func": {"info": {"MockResponse -> ?": [[111, "    def info(self):"]]}, "__init__": {"? -> ?": [[104, "    def __init__(self, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockRequest.has_header": {"param": {"self": {"MockRequest": [[68, "    def has_header(self, name):"]]}, "name": {"?": [[68, "    def has_header(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.get": {"param": {"self": {"RequestsCookieJar": [[189, "    def get(self, name, default=None, domain=None, path=None):"]]}, "name": {"str": [[189, "    def get(self, name, default=None, domain=None, path=None):"]]}, "domain": {"None": [[189, "    def get(self, name, default=None, domain=None, path=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.get_": {"var": {"dictionary": {"dict": [[306, "        dictionary = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies._copy_cookie_jar": {"var": {"cookie": {"?": [[436, "    for cookie in jar:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.__delitem__": {"param": {"self": {"RequestsCookieJar": [[337, "    def __delitem__(self, name):"]]}, "name": {"?": [[337, "    def __delitem__(self, name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.cookiejar_from_dic": {"param": {"overwrite": {"bool": [[508, "def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.item": {"param": {"self": {"RequestsCookieJar": [[261, "    def items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.iterkeys": {"var": {"cookie": {"?": [[224, "        for cookie in iter(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.__setstate__": {"param": {"self": {"RequestsCookieJar": [[408, "    def __setstate__(self, state):"]]}, "state": {"?": [[408, "    def __setstate__(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.MockResponse.info": {"param": {"self": {"MockResponse": [[111, "    def info(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.set": {"var": {"c": {"None": [[214, "            c = create_cookie(name, value, **kwargs)"]], "?": [[212, "            c = morsel_to_cookie(value)"]]}}, "param": {"self": {"RequestsCookieJar": [[201, "    def set(self, name, value, **kwargs):"]]}, "name": {"str": [[201, "    def set(self, name, value, **kwargs):"]]}, "value": {"str": [[201, "    def set(self, name, value, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.set_cooki": {"param": {"self": {"RequestsCookieJar": [[343, "    def set_cookie(self, cookie, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.__getstate__": {"var": {"state": {"?": [[403, "        state = self.__dict__.copy()"]]}}, "param": {"self": {"RequestsCookieJar": [[401, "    def __getstate__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.set_": {"param": {"cookie": {"None": [[343, "    def set_cookie(self, cookie, *args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.cookies.RequestsCookieJar.itervalues": {"var": {"cookie": {"?": [[241, "        for cookie in iter(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_utils.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFile.t": {"param": {"self": {"NoLenBoomFile": [[66, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_": {"class": {"TestGuessFilename": {"<TestGuessFilename>": [[243, "class TestGuessFilename:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_io_": {"param": {"stream": {"?": [[39, "    def test_io_streams(self, stream, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessFilename.test_guess_filename_invalid": {"param": {"self": {"TestGuessFilename": [[248, "    def test_guess_filename_invalid(self, value):"]]}, "value": {"?": [[248, "    def test_guess_filename_invalid(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_tell_i": {"param": {"error": {"?": [[63, "    def test_super_len_tell_ioerror(self, error):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFile.__len__": {"param": {"self": {"BoomFile": [[54, "            def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection.test_precedenc": {"param": {"self": {"TestContentEncodingDetection": [[311, "    def test_precedence(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_select_proxies": {"param": {"url": {"?": [[460, "def test_select_proxies(url, expected, proxies):"]]}, "expected": {"?": [[460, "def test_select_proxies(url, expected, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_tell": {"var": {"foo": {"?": [[102, "        foo = StringIO.StringIO('12345')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_regist": {"var": {"proxyEnableValues": {"deque": [[736, "    proxyEnableValues = deque([1, \"1\"])"]]}}, "func": {"QueryValueEx": {"(?, ?) -> {[?] | [str]}": [[741, "    def QueryValueEx(key, value_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_no__len__": {"class": {"LenFile": {"<LenFile>": [[95, "        class LenFile(object):"]]}}, "param": {"self": {"TestSuperLen": [[94, "    def test_super_len_with_no__len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.no_proxy": {"param": {"self": {"TestGetEnvironProxies": [[158, "    def no_proxy(self, request, monkeypatch):"]]}, "request": {"?": [[158, "    def no_proxy(self, request, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_string": {"param": {"self": {"TestSuperLen": [[74, "    def test_string(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.test_not_bypa": {"param": {"self": {"TestGetEnvironProxies": [[178, "    def test_not_bypass(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_io_streams": {"param": {"value": {"?": [[39, "    def test_io_streams(self, stream, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.req": {"func": {"test_should_bypass_proxies_win_registry": {"(?, ?, ?, ?) -> None": [[719, "def test_should_bypass_proxies_win_registry(url, expected, override,"]]}, "test_should_bypass_proxies_pass_only_hostname": {"(?, ?, ?) -> None": [[648, "def test_should_bypass_proxies_pass_only_hostname(url, expected, mocker):"]]}, "test_should_bypass_proxies_no_proxy": {"(?, ?, ?) -> None": [[695, "def test_should_bypass_proxies_no_proxy("]]}, "test_should_bypass_proxies": {"(?, ?, ?) -> None": [[628, "def test_should_bypass_proxies(url, expected, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedPaths.test_zipped_paths": {"var": {"extracted_path": {"str": [[282, "        extracted_path = extract_zipped_paths(zipped_path)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFi": {"func": {"tell": {"NoLenBoomFile -> None": [[66, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_get_auth_from_": {"param": {"url": {"?": [[383, "def test_get_auth_from_url(url, auth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_fi": {"param": {"self": {"TestSuperLen": [[44, "    def test_super_len_correctly_calculates_len_of_partially_read_file(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_parse_dict_header": {"param": {"expected": {"?": [[470, "def test_parse_dict_header(value, expected):"]]}, "value": {"?": [[470, "def test_parse_dict_header(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedPaths.test_zipped_paths_extracte": {"param": {"tmpdir": {"?": [[275, "    def test_zipped_paths_extracted(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.test_bypa": {"param": {"self": {"TestGetEnvironProxies": [[169, "    def test_bypass(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestIsValidCIDR.test_valid": {"param": {"self": {"TestIsValidCIDR": [[219, "    def test_valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection.test_preced": {"var": {"content": {"str": [[312, "        content = '''"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_file": {"var": {"s": {"?": [[46, "        s = StringIO.StringIO()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection": {"func": {"test_pragmas": {"(TestContentEncodingDetection, ?) -> None": [[306, "    def test_pragmas(self, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestToKeyValL": {"func": {"test_invalid": {"TestToKeyValList -> None": [[130, "    def test_invalid(self):"]]}, "test_valid": {"(TestToKeyValList, ?, ?) -> None": [[127, "    def test_valid(self, value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_no_match": {"param": {"self": {"TestSuperLen": [[113, "    def test_super_len_with_no_matches(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_no_proxy": {"var": {"url": {"?": [[696, "        url, expected, monkeypatch):"]]}}, "param": {"url": {"?": [[696, "        url, expected, monkeypatch):"]]}, "expected": {"?": [[696, "        url, expected, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.test_bypass": {"param": {"url": {"?": [[169, "    def test_bypass(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_unquote_unreserv": {"param": {"expected": {"?": [[418, "def test_unquote_unreserved(uri, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessFilename.test_guess_filename_valid": {"var": {"obj": {"?": [[257, "        obj = type('Fake', (object,), {'name': value})()"]]}, "result": {"str": [[258, "        result = guess_filename(obj)"]]}}, "param": {"self": {"TestGuessFilename": [[256, "    def test_guess_filename_valid(self, value, expected_type):"]]}, "value": {"?": [[256, "    def test_guess_filename_valid(self, value, expected_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_set": {"var": {"environ_copy": {"?": [[769, "    environ_copy = copy.deepcopy(os.environ)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessJSONUTF.test_bad_utf_like_encoding": {"param": {"self": {"TestGuessJSONUTF": [[331, "    def test_bad_utf_like_encoding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_add_dict_to_": {"param": {"cookiejar": {"?": [[662, "def test_add_dict_to_cookiejar(cookiejar):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_unquote_unreserved": {"param": {"uri": {"?": [[418, "def test_unquote_unreserved(uri, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedPaths.test_zipped_paths_extract": {"var": {"zipped_py": {"?": [[276, "        zipped_py = tmpdir.join('test.zip')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.no_prox": {"param": {"monkeypatch": {"?": [[158, "    def no_proxy(self, request, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_add_dict_to_cookiejar": {"var": {"cj": {"RequestsCookieJar": [[668, "    cj = add_dict_to_cookiejar(cookiejar, cookiedict)"]]}, "cookies": {"dict": [[669, "    cookies = {cookie.name: cookie.value for cookie in cj}"]]}, "cookiedict": {"dict": [[666, "    cookiedict = {'test': 'cookies',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection.test_pragma": {"var": {"encodings": {"None": [[307, "        encodings = get_encodings_from_content(content)"]]}}, "param": {"self": {"TestContentEncodingDetection": [[306, "    def test_pragmas(self, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_set_environ": {"param": {"value": {"?": [[767, "def test_set_environ(env_name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperL": {"func": {"test_super_len_with_no_matches": {"TestSuperLen -> None": [[113, "    def test_super_len_with_no_matches(self):"]]}, "test_super_len_with_fileno": {"TestSuperLen -> None": [[107, "    def test_super_len_with_fileno(self):"]]}, "test_super_len_with_no__len__": {"TestSuperLen -> None": [[94, "    def test_super_len_with_no__len__(self):"]]}, "test_super_len_correctly_calculates_len_of_partially_read_file": {"TestSuperLen -> None": [[44, "    def test_super_len_correctly_calculates_len_of_partially_read_file(self):"]]}, "test_super_len_handles_files_raising_weird_errors_in_tell": {"(TestSuperLen, ?) -> None": [[51, "    def test_super_len_handles_files_raising_weird_errors_in_tell(self, error):"]]}, "test_super_len_tell_ioerror": {"(TestSuperLen, ?) -> None": [[63, "    def test_super_len_tell_ioerror(self, error):"]]}, "test_super_len_with_tell": {"TestSuperLen -> None": [[101, "    def test_super_len_with_tell(self):"]]}, "test_super_len_with__len__": {"TestSuperLen -> None": [[89, "    def test_super_len_with__len__(self):"]]}, "test_string": {"TestSuperLen -> None": [[74, "    def test_string(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFile.seek": {"param": {"self": {"NoLenBoomFile": [[69, "            def seek(self, offset, whence):"]]}, "whence": {"int": [[69, "            def seek(self, offset, whence):"]]}, "offset": {"int": [[69, "            def seek(self, offset, whence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies": {"func": {"no_proxy": {"(TestGetEnvironProxies, ?, ?) -> None": [[158, "    def no_proxy(self, request, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_pass_only_hostnam": {"param": {"expected": {"?": [[648, "def test_should_bypass_proxies_pass_only_hostname(url, expected, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_pass_only_hostname": {"var": {"proxy_bypass": {"?": [[652, "    proxy_bypass = mocker.patch('requests.utils.proxy_bypass')"]]}}, "param": {"url": {"?": [[648, "def test_should_bypass_proxies_pass_only_hostname(url, expected, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils": {"var": {"ENCODED_USER": {"?": [[347, "ENCODED_USER = compat.quote(USER, '')"]]}, "ENCODED_PASSWORD": {"?": [[348, "ENCODED_PASSWORD = compat.quote(PASSWORD, '')"]]}, "USER": {"str": [[346, "USER = PASSWORD = \"%!*'();:@&=+$,/?#[] \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestIsIPv4Addr": {"func": {"test_invalid": {"(TestIsIPv4Address, ?) -> None": [[213, "    def test_invalid(self, value):"]]}, "test_valid": {"TestIsIPv4Address -> None": [[209, "    def test_valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_t": {"class": {"BoomFile": {"<BoomFile>": [[53, "        class BoomFile(object):"]]}}, "param": {"self": {"TestSuperLen": [[51, "    def test_super_len_handles_files_raising_weird_errors_in_tell(self, error):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_registry.OpenK": {"param": {"subkey": {"?": [[738, "    def OpenKey(key, subkey):"]]}, "key": {"?": [[738, "    def OpenKey(key, subkey):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_dotted_netmask": {"param": {"expected": {"?": [[428, "def test_dotted_netmask(mask, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestIsIPv4Address.test_invalid": {"param": {"self": {"TestIsIPv4Address": [[213, "    def test_invalid(self, value):"]]}, "value": {"?": [[213, "    def test_invalid(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_u": {"class": {"TestToKeyValList": {"<TestToKeyValList>": [[118, "class TestToKeyValList:"]]}, "TestIsValidCIDR": {"<TestIsValidCIDR>": [[217, "class TestIsValidCIDR:"]]}}, "func": {"test_select_proxies": {"(?, ?, ?) -> None": [[460, "def test_select_proxies(url, expected, proxies):"]]}, "test_iter_slices": {"(?, ?) -> None": [[545, "def test_iter_slices(value, length):"]]}, "test_parse_header_links": {"(?, ?) -> None": [[579, "def test_parse_header_links(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestAddressInNetwork": {"func": {"test_invalid": {"TestAddressInNetwork -> None": [[239, "    def test_invalid(self):"]]}, "test_valid": {"TestAddressInNetwork -> None": [[236, "    def test_valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_dotted_net": {"param": {"mask": {"?": [[428, "def test_dotted_netmask(mask, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestUnquoteHeaderValue.test_vali": {"param": {"expected": {"?": [[145, "    def test_valid(self, value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestUnquoteHeaderValu": {"func": {"test_valid": {"(TestUnquoteHeaderValue, ?, ?) -> None": [[145, "    def test_valid(self, value, expected):"]]}, "test_is_filename": {"TestUnquoteHeaderValue -> None": [[148, "    def test_is_filename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestToKeyValList.test_vali": {"param": {"expected": {"?": [[127, "    def test_valid(self, value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestIsValidCIDR.test_invalid": {"param": {"self": {"TestIsValidCIDR": [[230, "    def test_invalid(self, value):"]]}, "value": {"?": [[230, "    def test_invalid(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessJSONUTF.test_encode": {"var": {"data": {"str": [[328, "        data = '{}'.encode(encoding)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_select_": {"param": {"proxies": {"?": [[460, "def test_select_proxies(url, expected, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies": {"var": {"no_proxy": {"str": [[700, "    no_proxy = '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1'"]]}}, "param": {"url": {"?": [[628, "def test_should_bypass_proxies(url, expected, monkeypatch):"]]}, "expected": {"?": [[628, "def test_should_bypass_proxies(url, expected, monkeypatch):"]]}, "monkeypatch": {"?": [[628, "def test_should_bypass_proxies(url, expected, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test__parse_content_type_header": {"param": {"expected": {"?": [[513, "def test__parse_content_type_header(value, expected):"]]}, "value": {"?": [[513, "def test__parse_content_type_header(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen": {"func": {"test_io_streams": {"(TestSuperLen, ?, ?) -> None": [[39, "    def test_io_streams(self, stream, value):"]]}, "test_file": {"(TestSuperLen, ?, ?, ?, ?) -> None": [[82, "    def test_file(self, tmpdir, mode, warnings_num, recwarn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_fil": {"param": {"mode": {"?": [[82, "    def test_file(self, tmpdir, mode, warnings_num, recwarn):"]]}, "recwarn": {"?": [[82, "    def test_file(self, tmpdir, mode, warnings_num, recwarn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_requote_uri_with_unquoted_percents": {"param": {"expected": {"?": [[400, "def test_requote_uri_with_unquoted_percents(uri, expected):"]]}, "uri": {"?": [[400, "def test_requote_uri_with_unquoted_percents(uri, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_util": {"var": {"mixed_proxies": {"dict": [[436, "mixed_proxies = {'http': 'http://http.proxy',"]]}, "http_proxies": {"dict": [[432, "http_proxies = {'http': 'http://http.proxy',"]]}}, "class": {"TestContentEncodingDetection": {"<TestContentEncodingDetection>": [[289, "class TestContentEncodingDetection:"]]}, "TestAddressInNetwork": {"<TestAddressInNetwork>": [[234, "class TestAddressInNetwork:"]]}, "TestExtractZippedPaths": {"<TestExtractZippedPaths>": [[263, "class TestExtractZippedPaths:"]]}, "TestIsIPv4Address": {"<TestIsIPv4Address>": [[207, "class TestIsIPv4Address:"]]}, "TestGuessJSONUTF": {"<TestGuessJSONUTF>": [[320, "class TestGuessJSONUTF:"]]}, "TestSuperLen": {"<TestSuperLen>": [[30, "class TestSuperLen:"]]}, "TestGetEnvironProxies": {"<TestGetEnvironProxies>": [[152, "class TestGetEnvironProxies:"]]}}, "func": {"test_dotted_netmask": {"(?, ?) -> None": [[428, "def test_dotted_netmask(mask, expected):"]]}, "test_to_native_string": {"(?, ?) -> None": [[598, "def test_to_native_string(value, expected):"]]}, "test_unicode_is_ascii": {"(?, ?) -> None": [[680, "def test_unicode_is_ascii(value, expected):"]]}, "test_requote_uri_with_unquoted_percents": {"(?, ?) -> None": [[400, "def test_requote_uri_with_unquoted_percents(uri, expected):"]]}, "test_set_environ": {"(?, ?) -> None": [[767, "def test_set_environ(env_name, value):"]]}, "test_unquote_unreserved": {"(?, ?) -> None": [[418, "def test_unquote_unreserved(uri, expected):"]]}, "test_parse_dict_header": {"(?, ?) -> None": [[470, "def test_parse_dict_header(value, expected):"]]}, "test_set_environ_raises_exception": {"() -> None": [[776, "def test_set_environ_raises_exception():"]]}, "test__parse_content_type_header": {"(?, ?) -> None": [[513, "def test__parse_content_type_header(value, expected):"]]}, "test_add_dict_to_cookiejar": {"? -> None": [[662, "def test_add_dict_to_cookiejar(cookiejar):"]]}, "test_prepend_scheme_if_needed": {"(?, ?) -> None": [[588, "def test_prepend_scheme_if_needed(value, expected):"]]}, "test_get_encoding_from_headers": {"(?, ?) -> None": [[532, "def test_get_encoding_from_headers(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestToKeyValList.test_valid": {"param": {"self": {"TestToKeyValList": [[127, "    def test_valid(self, value, expected):"]]}, "value": {"?": [[127, "    def test_valid(self, value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection.test_": {"var": {"encodings": {"None": [[292, "        encodings = get_encodings_from_content('')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestIsValidCIDR": {"func": {"test_invalid": {"(TestIsValidCIDR, ?) -> None": [[230, "    def test_invalid(self, value):"]]}, "test_valid": {"TestIsValidCIDR -> None": [[219, "    def test_valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_prepend_scheme_if_n": {"param": {"expected": {"?": [[588, "def test_prepend_scheme_if_needed(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection.test_pragmas": {"param": {"content": {"?": [[306, "    def test_pragmas(self, content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_parse_header_links": {"param": {"expected": {"?": [[579, "def test_parse_header_links(value, expected):"]]}, "value": {"?": [[579, "def test_parse_header_links(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.test_not_bypass": {"param": {"url": {"?": [[178, "    def test_not_bypass(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_fi": {"param": {"self": {"TestSuperLen": [[82, "    def test_file(self, tmpdir, mode, warnings_num, recwarn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessJSONUTF.test_": {"param": {"encoding": {"?": [[327, "    def test_encoded(self, encoding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test": {"var": {"file_obj": {"?": [[83, "        file_obj = tmpdir.join('test.txt')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell": {"param": {"error": {"?": [[51, "    def test_super_len_handles_files_raising_weird_errors_in_tell(self, error):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_urldefragauth": {"param": {"url": {"?": [[611, "def test_urldefragauth(url, expected):"]]}, "expected": {"?": [[611, "def test_urldefragauth(url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetecti": {"func": {"test_none": {"TestContentEncodingDetection -> None": [[291, "    def test_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetectio": {"func": {"test_precedence": {"TestContentEncodingDetection -> None": [[311, "    def test_precedence(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_io_stream": {"param": {"self": {"TestSuperLen": [[39, "    def test_io_streams(self, stream, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_unicode_is_ascii": {"param": {"expected": {"?": [[680, "def test_unicode_is_ascii(value, expected):"]]}, "value": {"?": [[680, "def test_unicode_is_ascii(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.test_bypass_no_proxy_keyword": {"var": {"no_proxy": {"str": [[188, "        no_proxy = '192.168.1.1,requests.com'"]]}}, "param": {"url": {"?": [[187, "    def test_bypass_no_proxy_keyword(self, url):"]]}, "self": {"TestGetEnvironProxies": [[187, "    def test_bypass_no_proxy_keyword(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_pass_only_hostna": {"param": {"mocker": {"?": [[648, "def test_should_bypass_proxies_pass_only_hostname(url, expected, mocker):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_tell_ioerror": {"class": {"NoLenBoomFile": {"<NoLenBoomFile>": [[65, "        class NoLenBoomFile(object):"]]}}, "param": {"self": {"TestSuperLen": [[63, "    def test_super_len_tell_ioerror(self, error):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_prepend_scheme_if_needed": {"param": {"value": {"?": [[588, "def test_prepend_scheme_if_needed(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessFilename.test_guess_filename_vali": {"param": {"expected_type": {"?": [[256, "    def test_guess_filename_valid(self, value, expected_type):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFil": {"func": {"seek": {"(NoLenBoomFile, ?, ?) -> None / (NoLenBoomFile, int, int) -> None": [[69, "            def seek(self, offset, whence):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_fileno": {"var": {"file_data": {"str": [[110, "            file_data = f.read()"]]}, "length": {"int": [[109, "            length = super_len(f)"]]}}, "param": {"self": {"TestSuperLen": [[107, "    def test_super_len_with_fileno(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_file": {"param": {"warnings_num": {"?": [[82, "    def test_file(self, tmpdir, mode, warnings_num, recwarn):"]]}, "tmpdir": {"?": [[82, "    def test_file(self, tmpdir, mode, warnings_num, recwarn):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestIsIPv4Address.test_valid": {"param": {"self": {"TestIsIPv4Address": [[209, "    def test_valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessF": {"func": {"test_guess_filename_valid": {"(TestGuessFilename, ?, ?) -> None": [[256, "    def test_guess_filename_valid(self, value, expected_type):"]]}, "test_guess_filename_invalid": {"(TestGuessFilename, ?) -> None": [[248, "    def test_guess_filename_invalid(self, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_ut": {"var": {"all_proxies": {"dict": [[434, "all_proxies = {'all': 'socks5://http.proxy',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestToKeyValList.test_invalid": {"param": {"self": {"TestToKeyValList": [[130, "    def test_invalid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFile.t": {"param": {"self": {"BoomFile": [[57, "            def tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_get_encoding_from_headers": {"param": {"expected": {"?": [[532, "def test_get_encoding_from_headers(value, expected):"]]}, "value": {"?": [[532, "def test_get_encoding_from_headers(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_registry.RegHand": {"func": {"Close": {"RegHandle -> None": [[732, "        def Close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxies.test_not_bypass_no_proxy_keyword": {"var": {"no_proxy": {"str": [[203, "        no_proxy = '192.168.1.1,requests.com'"]]}}, "param": {"url": {"?": [[199, "    def test_not_bypass_no_proxy_keyword(self, url, monkeypatch):"]]}, "self": {"TestGetEnvironProxies": [[199, "    def test_not_bypass_no_proxy_keyword(self, url, monkeypatch):"]]}, "monkeypatch": {"?": [[199, "    def test_not_bypass_no_proxy_keyword(self, url, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestContentEncodingDetection.test_non": {"param": {"self": {"TestContentEncodingDetection": [[291, "    def test_none(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_to_native_string": {"param": {"expected": {"?": [[598, "def test_to_native_string(value, expected):"]]}, "value": {"?": [[598, "def test_to_native_string(value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFi": {"func": {"tell": {"BoomFile -> None": [[57, "            def tell(self):"]]}, "__len__": {"BoomFile -> int": [[54, "            def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_registry.QueryValueEx": {"param": {"value_name": {"?": [[741, "    def QueryValueEx(key, value_name):"]]}, "key": {"?": [[741, "    def QueryValueEx(key, value_name):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestAddressInNetwork.test_valid": {"param": {"self": {"TestAddressInNetwork": [[236, "    def test_valid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedP": {"func": {"test_zipped_paths_extracted": {"(TestExtractZippedPaths, ?) -> None": [[275, "    def test_zipped_paths_extracted(self, tmpdir):"]]}, "test_unzipped_paths_unchanged": {"(TestExtractZippedPaths, ?) -> None": [[272, "    def test_unzipped_paths_unchanged(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGetEnvironProxi": {"func": {"test_bypass": {"(TestGetEnvironProxies, ?) -> None": [[169, "    def test_bypass(self, url):"]]}, "test_not_bypass": {"(TestGetEnvironProxies, ?) -> None": [[178, "    def test_not_bypass(self, url):"]]}, "test_not_bypass_no_proxy_keyword": {"(TestGetEnvironProxies, ?, ?) -> None": [[199, "    def test_not_bypass_no_proxy_keyword(self, url, monkeypatch):"]]}, "test_bypass_no_proxy_keyword": {"(TestGetEnvironProxies, ?) -> None": [[187, "    def test_bypass_no_proxy_keyword(self, url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_registry.RegHandle.Clo": {"param": {"self": {"RegHandle": [[732, "        def Close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_registr": {"var": {"monkeypatch": {"?": [[720, "                                            monkeypatch):"]]}}, "param": {"monkeypatch": {"?": [[720, "                                            monkeypatch):"]]}}, "func": {"OpenKey": {"(?, ?) -> RegHandle": [[738, "    def OpenKey(key, subkey):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_uti": {"class": {"TestUnquoteHeaderValue": {"<TestUnquoteHeaderValue>": [[135, "class TestUnquoteHeaderValue:"]]}}, "func": {"test_get_auth_from_url": {"(?, ?) -> None": [[383, "def test_get_auth_from_url(url, auth):"]]}, "test_urldefragauth": {"(?, ?) -> None": [[611, "def test_urldefragauth(url, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessJSONUTF.test_encoded": {"param": {"self": {"TestGuessJSONUTF": [[327, "    def test_encoded(self, encoding):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_iter_slices": {"param": {"length": {"?": [[545, "def test_iter_slices(value, length):"]]}, "value": {"?": [[545, "def test_iter_slices(value, length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestAddressInNetwork.test_invalid": {"param": {"self": {"TestAddressInNetwork": [[239, "    def test_invalid(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestUnquoteHeaderValue.test_valid": {"param": {"self": {"TestUnquoteHeaderValue": [[145, "    def test_valid(self, value, expected):"]]}, "value": {"?": [[145, "    def test_valid(self, value, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessJSONUTF": {"func": {"test_guess_by_bom": {"(TestGuessJSONUTF, ?, ?) -> None": [[341, "    def test_guess_by_bom(self, encoding, expected):"]]}, "test_encoded": {"(TestGuessJSONUTF, ?) -> None": [[327, "    def test_encoded(self, encoding):"]]}, "test_bad_utf_like_encoding": {"TestGuessJSONUTF -> None": [[331, "    def test_bad_utf_like_encoding(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_get_auth_from_url": {"param": {"auth": {"?": [[383, "def test_get_auth_from_url(url, auth):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestUnquoteHeaderValue.test_is_filenam": {"param": {"self": {"TestUnquoteHeaderValue": [[148, "    def test_is_filename(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_set_enviro": {"param": {"env_name": {"?": [[767, "def test_set_environ(env_name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedPaths.test_zipped_paths_extrac": {"var": {"zipped_path": {"str": [[281, "        zipped_path = os.path.join(zipped_py.strpath, name.lstrip(r'\\/'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with__len__": {"var": {"foo": {"[int]": [[90, "        foo = [1,2,3,4]"]]}}, "param": {"self": {"TestSuperLen": [[89, "    def test_super_len_with__len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_no_prox": {"param": {"monkeypatch": {"?": [[696, "        url, expected, monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestGuessJSONUTF.test_guess_by_bom": {"var": {"data": {"str": [[342, "        data = u'\\ufeff{}'.encode(encoding)"]]}}, "param": {"expected": {"?": [[341, "    def test_guess_by_bom(self, encoding, expected):"]]}, "self": {"TestGuessJSONUTF": [[341, "    def test_guess_by_bom(self, encoding, expected):"]]}, "encoding": {"?": [[341, "    def test_guess_by_bom(self, encoding, expected):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_t": {"param": {"self": {"TestSuperLen": [[101, "    def test_super_len_with_tell(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedPaths.test_zipped_paths_extracted": {"var": {"_": {"str": [[280, "        _, name = os.path.splitdrive(__file__)"]]}}, "param": {"self": {"TestExtractZippedPaths": [[275, "    def test_zipped_paths_extracted(self, tmpdir):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.test_should_bypass_proxies_win_registry": {"var": {"override": {"str": [[725, "        override = '192.168.*;127.0.0.1;localhost.localdomain;172.16.1.1'"]]}, "ie_settings": {"RegHandle": [[735, "    ie_settings = RegHandle()"]]}}, "class": {"RegHandle": {"<RegHandle>": [[731, "    class RegHandle:"]]}}, "param": {"url": {"?": [[720, "                                            monkeypatch):"]]}, "expected": {"?": [[720, "                                            monkeypatch):"]]}, "override": {"?": [[720, "                                            monkeypatch):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_no__len__.LenFile": {"func": {"__init__": {"? -> ?": [[96, "            def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestExtractZippedPaths.test_unzipped_paths_unchanged": {"param": {"path": {"?": [[272, "    def test_unzipped_paths_unchanged(self, path):"]]}, "self": {"TestExtractZippedPaths": [[272, "    def test_unzipped_paths_unchanged(self, path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with": {"var": {"len_foo": {"int": [[91, "        len_foo = super_len(foo)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_utils.TestSuperLen.test_super_len_with_no__len__.LenFile.__init__": {"param": {"self": {"LenFile": [[96, "            def __init__(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/__version__.py": {".home.xxm.Desktop.EMSE.dataset.requests.request": {"var": {"__version__": {"__version__": [[69, ""], [71, ""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/adapters.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.__in": {"param": {"max_retries": {"int": [[115, "                 pool_block=DEFAULT_POOLBLOCK):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_manager_f": {"var": {"proxy_headers": {"dict": [[192, "            proxy_headers = self.proxy_headers(proxy)"]]}}, "param": {"proxy": {"None": [[166, "    def proxy_manager_for(self, proxy, **proxy_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_": {"var": {"headers": {"dict": [[385, "        headers = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_header": {"param": {"self": {"HTTPAdapter": [[372, "    def proxy_headers(self, proxy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.get_connection": {"var": {"url": {"?": [[314, "            url = parsed.geturl()"]]}, "proxy_url": {"?": [[305, "            proxy_url = parse_url(proxy)"]]}, "proxy": {"None": [[301, "        proxy = select_proxy(url, proxies)"], [304, "            proxy = prepend_scheme_if_needed(proxy, 'http')"]]}, "parsed": {"?": [[313, "            parsed = urlparse(url)"]]}}, "param": {"url": {"?": [[292, "    def get_connection(self, url, proxies=None):"]]}, "self": {"HTTPAdapter": [[292, "    def get_connection(self, url, proxies=None):"]]}, "proxies": {"None": [[292, "    def get_connection(self, url, proxies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.build_respon": {"param": {"self": {"HTTPAdapter": [[255, "    def build_response(self, req, resp):"]]}, "resp": {"?": [[255, "    def build_response(self, req, resp):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.request_ur": {"param": {"self": {"HTTPAdapter": [[329, "    def request_url(self, request, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.send": {"var": {"low_conn": {"?": [[457, "                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)"]]}, "err": {"?": [[428, "                err = (\"Invalid timeout {}. Pass a (connect, read) \""]]}, "url": {"None": [[417, "        url = self.request_url(request, proxies)"]]}, "resp": {"?": [[439, "                resp = conn.urlopen("], [484, "                    resp = HTTPResponse.from_httplib("]]}, "i": {"?": [[469, "                    for i in request.body:"]]}, "r": {"?": [[479, "                        r = low_conn.getresponse(buffering=True)"], [482, "                        r = low_conn.getresponse()"]]}, "connect": {"?": [[424, "                connect, read = timeout"]]}, "timeout": {"?": [[425, "                timeout = TimeoutSauce(connect=connect, read=read)"], [435, "            timeout = TimeoutSauce(connect=timeout, read=timeout)"]]}, "conn": {"None": [[412, "            conn = self.get_connection(request.url, proxies)"]], "?": [[455, "                    conn = conn.proxy_pool"]]}}, "param": {"stream": {"bool": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "verify": {"bool": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "self": {"HTTPAdapter": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "request": {"?": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "cert": {"None": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "timeout": {"None": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "proxies": {"None": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_headers": {"param": {"proxy": {"{None | str}": [[372, "    def proxy_headers(self, proxy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.__setstate__": {"var": {"attr": {"?": [[140, "        for attr, value in state.items():"]]}}, "param": {"self": {"HTTPAdapter": [[134, "    def __setstate__(self, state):"]]}, "state": {"?": [[134, "    def __setstate__(self, state):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapte": {"var": {"__attrs__": {"[str]": [[110, "    __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize',"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.cert_": {"param": {"verify": {"bool": [[203, "    def cert_verify(self, conn, url, verify, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.BaseAdapter.clo": {"param": {"self": {"BaseAdapter": [[79, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requ": {"class": {"BaseAdapter": {"<BaseAdapter>": [[55, "class BaseAdapter(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_manager_for": {"param": {"self": {"HTTPAdapter": [[166, "    def proxy_manager_for(self, proxy, **proxy_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.BaseAdapter": {"func": {"close": {"BaseAdapter -> None": [[79, "    def close(self):"]]}, "send": {"(BaseAdapter, ?, bool, None, bool, None, None) -> None": [[61, "    def send(self, request, stream=False, timeout=None, verify=True,"]]}, "__init__": {"? -> ?": [[58, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdap": {"func": {"request_url": {"(HTTPAdapter, ?, ?) -> None / (HTTPAdapter, ?, None) -> None": [[329, "    def request_url(self, request, proxies):"]]}, "cert_verify": {"(HTTPAdapter, None, ?, bool, None) -> None / (HTTPAdapter, ?, ?, ?, ?) -> None": [[203, "    def cert_verify(self, conn, url, verify, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.init_poolmanager": {"param": {"connections": {"int": [[146, "    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):"]]}, "self": {"HTTPAdapter": [[146, "    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):"]]}, "maxsize": {"int": [[146, "    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):"]]}, "block": {"bool": [[146, "    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.cert_verify": {"var": {"cert_loc": {"None": [[217, "            cert_loc = None"]], "bool": [[221, "                cert_loc = verify"]], "str": [[224, "                cert_loc = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)"]]}}, "param": {"url": {"?": [[203, "    def cert_verify(self, conn, url, verify, cert):"]]}, "self": {"HTTPAdapter": [[203, "    def cert_verify(self, conn, url, verify, cert):"]]}, "cert": {"None": [[203, "    def cert_verify(self, conn, url, verify, cert):"]]}, "conn": {"None": [[203, "    def cert_verify(self, conn, url, verify, cert):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapt": {"func": {"add_headers": {"(HTTPAdapter, ?) -> None": [[358, "    def add_headers(self, request, **kwargs):"]]}, "build_response": {"(HTTPAdapter, ?, ?) -> Response": [[255, "    def build_response(self, req, resp):"]]}, "proxy_manager_for": {"(HTTPAdapter, ?) -> None / (HTTPAdapter, None) -> None": [[166, "    def proxy_manager_for(self, proxy, **proxy_kwargs):"]]}, "proxy_headers": {"(HTTPAdapter, ?) -> dict / (HTTPAdapter, None) -> dict / (HTTPAdapter, str) -> dict": [[372, "    def proxy_headers(self, proxy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.get_connecti": {"var": {"proxy_manager": {"None": [[309, "            proxy_manager = self.proxy_manager_for(proxy)"]]}, "conn": {"?": [[310, "            conn = proxy_manager.connection_from_url(url)"], [315, "            conn = self.poolmanager.connection_from_url(url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_manager_fo": {"var": {"username": {"?": [[181, "            username, password = get_auth_from_url(proxy)"]]}, "manager": {"None": [[182, "            manager = self.proxy_manager[proxy] = SOCKSProxyManager("], [193, "            manager = self.proxy_manager[proxy] = proxy_from_url("]], "?": [[179, "            manager = self.proxy_manager[proxy]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.add_head": {"param": {"request": {"?": [[358, "    def add_headers(self, request, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.close": {"var": {"proxy": {"<list>": [[326, "        for proxy in self.proxy_manager.values():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.build_": {"var": {"response": {"Response": [[265, "        response = Response()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.request_": {"var": {"url": {"None": [[354, "            url = urldefragauth(request.url)"]], "?": [[352, "        url = request.path_url"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter": {"param": {"pool_connections": {"int": [[115, "                 pool_block=DEFAULT_POOLBLOCK):"]]}}, "func": {"__setstate__": {"(HTTPAdapter, ?) -> None": [[134, "    def __setstate__(self, state):"]]}, "send": {"(HTTPAdapter, ?, bool, None, bool, None, None) -> Response": [[394, "    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):"]]}, "get_connection": {"(HTTPAdapter, ?, None) -> None": [[292, "    def get_connection(self, url, proxies=None):"]]}, "close": {"HTTPAdapter -> None": [[319, "    def close(self):"]]}, "__getstate__": {"HTTPAdapter -> dict": [[131, "    def __getstate__(self):"]]}, "__init__": {"? -> ?": [[113, "    def __init__(self, pool_connections=DEFAULT_POOLSIZE,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.BaseAdapter.__init__": {"param": {"self": {"BaseAdapter": [[58, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.s": {"var": {"chunked": {"bool": [[420, "        chunked = not (request.body is None or 'Content-Length' in request.headers)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.sen": {"var": {"header": {"?": [[464, "                    for header, value in request.headers.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.add_header": {"param": {"self": {"HTTPAdapter": [[358, "    def add_headers(self, request, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.BaseAdapter.send": {"var": {"cert": {"None": [[62, "             cert=None, proxies=None):"]]}}, "param": {"stream": {"bool": [[62, "             cert=None, proxies=None):"]]}, "verify": {"bool": [[62, "             cert=None, proxies=None):"]]}, "self": {"BaseAdapter": [[62, "             cert=None, proxies=None):"]]}, "request": {"?": [[62, "             cert=None, proxies=None):"]]}, "cert": {"None": [[62, "             cert=None, proxies=None):"]]}, "timeout": {"None": [[62, "             cert=None, proxies=None):"]]}, "proxies": {"None": [[62, "             cert=None, proxies=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.proxy_head": {"var": {"username": {"?": [[386, "        username, password = get_auth_from_url(proxy)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.__init__": {"param": {"self": {"HTTPAdapter": [[115, "                 pool_block=DEFAULT_POOLBLOCK):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.request_url": {"var": {"proxy_scheme": {"?": [[349, "            proxy_scheme = urlparse(proxy).scheme.lower()"]]}, "scheme": {"?": [[344, "        scheme = urlparse(request.url).scheme"]]}, "is_proxied_http_request": {"?": [[346, "        is_proxied_http_request = (proxy and scheme != 'https')"]]}, "proxy": {"None": [[343, "        proxy = select_proxy(request.url, proxies)"]]}, "using_socks_proxy": {"bool": [[347, "        using_socks_proxy = False"]], "?": [[350, "            using_socks_proxy = proxy_scheme.startswith('socks')"]]}}, "param": {"proxies": {"None": [[329, "    def request_url(self, request, proxies):"]]}, "request": {"?": [[329, "    def request_url(self, request, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.__init": {"var": {"pool_maxsize": {"int": [[114, "                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,"]]}, "pool_block": {"bool": [[115, "                 pool_block=DEFAULT_POOLBLOCK):"]]}}, "param": {"pool_maxsize": {"int": [[115, "                 pool_block=DEFAULT_POOLBLOCK):"]]}, "pool_block": {"int": [[115, "                 pool_block=DEFAULT_POOLBLOCK):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters": {"var": {"DEFAULT_POOL_TIMEOUT": {"None": [[52, "DEFAULT_POOL_TIMEOUT = None"]]}, "DEFAULT_RETRIES": {"int": [[51, "DEFAULT_RETRIES = 0"]]}, "DEFAULT_POOLBLOCK": {"bool": [[49, "DEFAULT_POOLBLOCK = False"]]}, "DEFAULT_POOLSIZE": {"int": [[50, "DEFAULT_POOLSIZE = 10"]]}}, "class": {"HTTPAdapter": {"<HTTPAdapter>": [[84, "class HTTPAdapter(BaseAdapter):"]]}}, "func": {"SOCKSProxyManager": {"() -> None": [[46, "    def SOCKSProxyManager(*args, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.__getstate__": {"param": {"self": {"HTTPAdapter": [[131, "    def __getstate__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAd": {"func": {"init_poolmanager": {"(HTTPAdapter, ?, ?, bool) -> None / (HTTPAdapter, int, int, bool) -> None": [[146, "    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.clo": {"param": {"self": {"HTTPAdapter": [[319, "    def close(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.adapters.HTTPAdapter.build_respons": {"param": {"req": {"?": [[255, "    def build_response(self, req, resp):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_testserver.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_server_finishes_when_no_connection": {"var": {"server": {"Server": [[159, "        server = Server.basic_response_server()"]]}}, "param": {"self": {"TestTestServer": [[157, "    def test_server_finishes_when_no_connections(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_multiple_requests": {"var": {"r": {"None": [[88, "                r = requests.get(server_url)"], [93, "                r = requests.get(server_url)"]]}, "_": {"int": [[87, "            for _ in range(requests_to_handle):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basic_respon": {"param": {"self": {"TestTestServer": [[59, "    def test_basic_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_": {"class": {"TestTestServer": {"<TestTestServer>": [[12, "class TestTestServer:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basic_waiting": {"var": {"block_server": {"?": [[69, "        block_server = threading.Event()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_server_finishes_on_error": {"param": {"self": {"TestTestServer": [[145, "    def test_server_finishes_on_error(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_server_clo": {"param": {"self": {"TestTestServer": [[32, "    def test_server_closes(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basic.handler": {"var": {"text": {"?": [[20, "            text = sock.recv(1000)"]]}}, "param": {"sock": {"?": [[19, "        def handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServ": {"func": {"test_basic_response": {"TestTestServer -> None": [[59, "    def test_basic_response(self):"]]}, "test_multiple_requests": {"TestTestServer -> None": [[79, "    def test_multiple_requests(self):"]]}, "test_text_response": {"TestTestServer -> None": [[44, "    def test_text_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_multiple_request": {"var": {"server_url": {"str": [[86, "            server_url = 'http://{}:{}'.format(host, port)"]]}, "server": {"Server": [[83, "        server = Server.basic_response_server(requests_to_handle=requests_to_handle)"]]}}, "param": {"self": {"TestTestServer": [[79, "    def test_multiple_requests(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_server_finishes_on_erro": {"var": {"server": {"Server": [[147, "        server = Server.basic_response_server()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basic_response": {"var": {"r": {"None": [[62, "            r = requests.get('http://{}:{}'.format(host, port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_request_recovery_with_bigger_timeou": {"var": {"data": {"str": [[134, "        data = b'bananadine'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_text_respon": {"var": {"server": {"Server": [[46, "        server = Server.text_response_server("]]}}, "param": {"self": {"TestTestServer": [[44, "    def test_text_response(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer": {"func": {"test_basic": {"TestTestServer -> None": [[14, "    def test_basic(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_multip": {"var": {"requests_to_handle": {"int": [[81, "        requests_to_handle = 5"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_requests_after_timeout_are_not_received": {"var": {"sock": {"?": [[123, "            sock = socket.socket()"]]}, "server": {"Server": [[120, "        server = Server.basic_response_server(request_timeout=1)"]]}}, "param": {"self": {"TestTestServer": [[118, "    def test_requests_after_timeout_are_not_received(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basi": {"var": {"sock": {"?": [[25, "            sock = socket.socket()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestS": {"func": {"test_server_closes": {"TestTestServer -> None": [[32, "    def test_server_closes(self):"]]}, "test_request_recovery": {"TestTestServer -> None": [[96, "    def test_request_recovery(self):"]]}, "test_requests_after_timeout_are_not_received": {"TestTestServer -> None": [[118, "    def test_requests_after_timeout_are_not_received(self):"]]}, "test_basic_waiting_server": {"TestTestServer -> None": [[67, "    def test_basic_waiting_server(self):"]]}, "test_request_recovery_with_bigger_timeout": {"TestTestServer -> None": [[131, "    def test_request_recovery_with_bigger_timeout(self):"]]}, "test_server_finishes_on_error": {"TestTestServer -> None": [[145, "    def test_server_finishes_on_error(self):"]]}, "test_server_finishes_when_no_connections": {"TestTestServer -> None": [[157, "    def test_server_finishes_when_no_connections(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_request_recovery": {"var": {"sock1": {"?": [[104, "            sock1 = socket.socket()"]]}, "first_request": {"str": [[100, "        first_request = b'put your hands up in the air'"]]}, "sock2": {"?": [[105, "            sock2 = socket.socket()"]]}, "second_request": {"str": [[101, "        second_request = b'put your hand down in the floor'"]]}, "server": {"Server": [[99, "        server = Server.basic_response_server(requests_to_handle=2)"]]}}, "param": {"self": {"TestTestServer": [[96, "    def test_request_recovery(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basic": {"var": {"answer": {"str": [[17, "        answer = b\"yeah, success\""]]}, "text": {"?": [[28, "            text = sock.recv(1000)"]]}, "question": {"str": [[16, "        question = b\"success?\""]]}}, "param": {"self": {"TestTestServer": [[14, "    def test_basic(self):"]]}}, "func": {"handler": {"? -> None": [[19, "        def handler(sock):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_text_response": {"var": {"r": {"None": [[53, "            r = requests.get('http://{}:{}'.format(host, port))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_server_cl": {"var": {"new_sock": {"?": [[41, "            new_sock = socket.socket()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_basic_waiting_server": {"var": {"sock": {"?": [[72, "            sock = socket.socket()"]]}}, "param": {"self": {"TestTestServer": [[67, "    def test_basic_waiting_server(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_server_close": {"var": {"sock": {"?": [[35, "            sock = socket.socket()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_testserver.TestTestServer.test_request_recovery_with_bigger_timeout": {"var": {"sock": {"?": [[137, "            sock = socket.socket()"]]}, "server": {"Server": [[133, "        server = Server.basic_response_server(request_timeout=3)"]]}}, "param": {"self": {"TestTestServer": [[131, "    def test_request_recovery_with_bigger_timeout(self):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/utils.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.utils.override_enviro": {"var": {"save_env": {"dict": [[9, "    save_env = dict(os.environ)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.utils.override_environ": {"var": {"key": {"?": [[10, "    for key, value in kwargs.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.utils": {"func": {"override_environ": {"() -> ?": [[8, "def override_environ(**kwargs):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/structures.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__len__": {"param": {"self": {"CaseInsensitiveDict": [[62, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structur": {"class": {"CaseInsensitiveDict": {"<CaseInsensitiveDict>": [[15, "class CaseInsensitiveDict(MutableMapping):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__init__": {"var": {"data": {"dict": [[45, "            data = {}"]]}}, "param": {"self": {"CaseInsensitiveDict": [[42, "    def __init__(self, data=None, **kwargs):"]]}, "data": {"{Mapping | dict | dict}": [[42, "    def __init__(self, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDic": {"func": {"__getitem__": {"(LookupDict, ?) -> ?": [[99, "    def __getitem__(self, key):"]]}, "__init__": {"? -> ?": [[92, "    def __init__(self, name=None):"]]}, "get": {"(LookupDict, ?, None) -> ?": [[104, "    def get(self, key, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.copy": {"param": {"self": {"CaseInsensitiveDict": [[82, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDict.__getitem__": {"param": {"self": {"LookupDict": [[99, "    def __getitem__(self, key):"]]}, "key": {"?": [[99, "    def __getitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDic": {"func": {"__delitem__": {"(CaseInsensitiveDict, ?) -> None": [[56, "    def __delitem__(self, key):"]]}, "__getitem__": {"(CaseInsensitiveDict, ?) -> ?": [[53, "    def __getitem__(self, key):"]]}, "__iter__": {"CaseInsensitiveDict -> [?]": [[59, "    def __iter__(self):"]]}, "__setitem__": {"(CaseInsensitiveDict, ?, ?) -> None": [[48, "    def __setitem__(self, key, value):"]]}, "lower_items": {"CaseInsensitiveDict -> [(?, ?)]": [[65, "    def lower_items(self):"]]}, "__init__": {"? -> ?": [[42, "    def __init__(self, data=None, **kwargs):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures": {"class": {"LookupDict": {"<LookupDict>": [[89, "class LookupDict(dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.lower_item": {"param": {"self": {"CaseInsensitiveDict": [[65, "    def lower_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__eq__": {"var": {"other": {"CaseInsensitiveDict": [[75, "            other = CaseInsensitiveDict(other)"]]}}, "param": {"self": {"CaseInsensitiveDict": [[73, "    def __eq__(self, other):"]]}, "other": {"{CaseInsensitiveDict | dict}": [[73, "    def __eq__(self, other):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict": {"func": {"copy": {"CaseInsensitiveDict -> CaseInsensitiveDict": [[82, "    def copy(self):"]]}, "__eq__": {"(CaseInsensitiveDict, ?) -> {<NotImplemented> | bool} / (CaseInsensitiveDict, CaseInsensitiveDict) -> {<NotImplemented> | bool} / (CaseInsensitiveDict, dict) -> {<NotImplemented> | bool}": [[73, "    def __eq__(self, other):"]]}, "__repr__": {"CaseInsensitiveDict -> str": [[85, "    def __repr__(self):"]]}, "__len__": {"CaseInsensitiveDict -> int": [[62, "    def __len__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__iter__": {"param": {"self": {"CaseInsensitiveDict": [[59, "    def __iter__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__repr__": {"param": {"self": {"CaseInsensitiveDict": [[85, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDict": {"func": {"__repr__": {"LookupDict -> ?": [[96, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDict.__init__": {"param": {"self": {"LookupDict": [[92, "    def __init__(self, name=None):"]]}, "name": {"str": [[92, "    def __init__(self, name=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDict.__repr__": {"param": {"self": {"LookupDict": [[96, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDict.g": {"param": {"default": {"LookupDict": [[104, "    def get(self, key, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__getitem__": {"param": {"self": {"CaseInsensitiveDict": [[53, "    def __getitem__(self, key):"]]}, "key": {"?": [[53, "    def __getitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.LookupDict.get": {"param": {"self": {"?": [[104, "    def get(self, key, default=None):"]]}, "key": {"(LookupDict, ?, None) -> ?": [[104, "    def get(self, key, default=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__delitem__": {"param": {"self": {"CaseInsensitiveDict": [[56, "    def __delitem__(self, key):"]]}, "key": {"?": [[56, "    def __delitem__(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.structures.CaseInsensitiveDict.__setitem__": {"param": {"self": {"CaseInsensitiveDict": [[48, "    def __setitem__(self, key, value):"]]}, "value": {"?": [[48, "    def __setitem__(self, key, value):"]]}, "key": {"?": [[48, "    def __setitem__(self, key, value):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/docs/_themes/flask_theme_support.py": {".home.xxm.Desktop.EMSE.dataset.requests.docs._themes.flask_theme_suppor": {"class": {"FlaskyStyle": {"<FlaskyStyle>": [[7, "class FlaskyStyle(Style):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.docs._themes.flask_theme_support.FlaskyS": {"var": {"styles": {"dict": [[11, "    styles = {"]]}, "default_style": {"str": [[9, "    default_style = \"\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.docs._themes.flask_theme_support.FlaskyStyle": {"var": {"background_color": {"str": [[8, "    background_color = \"#f8f8f8\""]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/test_structures.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestLookupDict.test_get": {"param": {"self": {"TestLookupDict": [[75, "    def test_get(self, key, value):"]]}, "value": {"?": [[75, "    def test_get(self, key, value):"]]}, "key": {"?": [[75, "    def test_get(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestLookupDict.test_getitem": {"param": {"self": {"TestLookupDict": [[71, "    def test_getitem(self, key, value):"]]}, "value": {"?": [[71, "    def test_getitem(self, key, value):"]]}, "key": {"?": [[71, "    def test_getitem(self, key, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDi": {"func": {"test_copy": {"TestCaseInsensitiveDict -> None": [[36, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.setup": {"param": {"self": {"TestCaseInsensitiveDict": [[11, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDic": {"func": {"test_getitem": {"(TestCaseInsensitiveDict, ?) -> None": [[22, "    def test_getitem(self, key):"]]}, "setup": {"TestCaseInsensitiveDict -> None": [[11, "    def setup(self):"]]}, "test_lower_items": {"TestCaseInsensitiveDict -> None": [[30, "    def test_lower_items(self):"]]}, "test_list": {"TestCaseInsensitiveDict -> None": [[16, "    def test_list(self):"]]}, "test_repr": {"TestCaseInsensitiveDict -> None": [[33, "    def test_repr(self):"]]}, "test_delitem": {"(TestCaseInsensitiveDict, ?) -> None": [[26, "    def test_delitem(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_lower_item": {"param": {"self": {"TestCaseInsensitiveDict": [[30, "    def test_lower_items(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestLookupDict.setup": {"param": {"self": {"TestLookupDict": [[55, "    def setup(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_instance_equality": {"param": {"self": {"TestCaseInsensitiveDict": [[48, "    def test_instance_equality(self, other, result):"]]}, "other": {"?": [[48, "    def test_instance_equality(self, other, result):"]]}, "result": {"?": [[48, "    def test_instance_equality(self, other, result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestLookupDic": {"var": {"get_item_parameters": {"?": [[63, "    get_item_parameters = pytest.mark.parametrize("]]}}, "func": {"test_getitem": {"(TestLookupDict, ?, ?) -> None": [[71, "    def test_getitem(self, key, value):"]]}, "test_get": {"(TestLookupDict, ?, ?) -> None": [[75, "    def test_get(self, key, value):"]]}, "setup": {"TestLookupDict -> None": [[55, "    def setup(self):"]]}, "test_repr": {"TestLookupDict -> None": [[60, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_delitem": {"param": {"self": {"TestCaseInsensitiveDict": [[26, "    def test_delitem(self, key):"]]}, "key": {"?": [[26, "    def test_delitem(self, key):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveD": {"func": {"test_instance_equality": {"(TestCaseInsensitiveDict, ?, ?) -> None": [[48, "    def test_instance_equality(self, other, result):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict": {"var": {"possible_keys": {"?": [[19, "    possible_keys = pytest.mark.parametrize('key', ('accept', 'ACCEPT', 'aCcEpT', 'Accept'))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_copy": {"param": {"self": {"TestCaseInsensitiveDict": [[36, "    def test_copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_": {"var": {"copy": {"?": [[37, "        copy = self.case_insensitive_dict.copy()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_repr": {"param": {"self": {"TestCaseInsensitiveDict": [[33, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestLookupDict.test_repr": {"param": {"self": {"TestLookupDict": [[60, "    def test_repr(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_list": {"param": {"self": {"TestCaseInsensitiveDict": [[16, "    def test_list(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structur": {"class": {"TestLookupDict": {"<TestLookupDict>": [[52, "class TestLookupDict:"]]}, "TestCaseInsensitiveDict": {"<TestCaseInsensitiveDict>": [[8, "class TestCaseInsensitiveDict:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.test_structures.TestCaseInsensitiveDict.test_getitem": {"param": {"self": {"TestCaseInsensitiveDict": [[22, "    def test_getitem(self, key):"]]}, "key": {"?": [[22, "    def test_getitem(self, key):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/docs/conf.py": {".home.xxm.Desktop.EMSE.dataset.requests.docs.con": {"var": {"source_suffix": {"str": [[51, "source_suffix = \".rst\""]]}, "epub_exclude_files": {"[str]": [[360, "epub_exclude_files = [\"search.html\"]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.docs.conf": {"var": {"add_module_names": {"bool": [[99, "add_module_names = True"]]}, "html_show_sphinx": {"bool": [[203, "html_show_sphinx = False"]]}, "exclude_patterns": {"[str]": [[88, "exclude_patterns = [\"_build\"]"]]}, "epub_copyright": {"str": [[320, "epub_copyright = copyright"]]}, "pygments_style": {"str": [[106, "pygments_style = \"flask_theme_support.FlaskyStyle\""]]}, "html_use_smartypants": {"bool": [[171, "html_use_smartypants = False"]]}, "htmlhelp_basename": {"str": [[231, "htmlhelp_basename = \"Requestsdoc\""]]}, "html_theme": {"str": [[122, "html_theme = \"alabaster\""]]}, "master_doc": {"str": [[57, "master_doc = \"index\""]]}, "html_show_sourcelink": {"bool": [[200, "html_show_sourcelink = False"]]}, "copyright": {"str": [[61, "copyright = u'MMXVIX. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'"]]}, "author": {"str": [[62, "author = u\"Kenneth Reitz\""]]}, "epub_title": {"str": [[317, "epub_title = project"]]}, "html_sidebars": {"dict": [[174, "html_sidebars = {"]]}, "epub_author": {"str": [[318, "epub_author = author"]]}, "html_show_copyright": {"bool": [[206, "html_show_copyright = True"]]}, "html_theme_options": {"dict": [[127, "html_theme_options = {"]]}, "templates_path": {"[str]": [[46, "templates_path = [\"_templates\"]"]]}, "latex_documents": {"[(str, str, str, str, str)]": [[249, "latex_documents = ["]]}, "man_pages": {"[(str, str, str, [str], int)]": [[278, "man_pages = [(master_doc, \"requests\", u\"Requests Documentation\", [author], 1)]"]]}, "html_static_path": {"[str]": [[158, "html_static_path = [\"_static\"]"]]}, "intersphinx_mapping": {"dict": [[383, "intersphinx_mapping = {"]]}, "todo_include_todos": {"bool": [[115, "todo_include_todos = True"]]}, "latex_elements": {"dict": [[235, "latex_elements = {"]]}, "language": {"None": [[78, "language = None"]]}, "project": {"str": [[60, "project = u\"Requests\""]]}, "extensions": {"[str]": [[38, "extensions = ["]]}, "epub_publisher": {"str": [[319, "epub_publisher = author"]]}}}, ".home.xxm.Desktop.EMSE.dataset.req": {"var": {"add_function_parentheses": {"bool": [[95, "add_function_parentheses = False"]]}, "texinfo_documents": {"[(str, str, str, str, str, str, str)]": [[289, "texinfo_documents = ["]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/compat.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.compat": {"var": {"_ver": {"?": [[20, "_ver = sys.version_info"]]}, "is_py2": {"bool": [[23, "is_py2 = (_ver[0] == 2)"]]}, "is_py3": {"bool": [[26, "is_py3 = (_ver[0] == 3)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.comp": {"var": {"basestring": {"? -> ?": [[53, "    basestring = basestring"]], "(<str>, ?)": [[70, "    basestring = (str, bytes)"]]}}, "param": {"basestring": {"(<str>, ?)": [[72, "    integer_types = (int,)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.compa": {"var": {"integer_types": {"(<int>, ? -> ?)": [[55, "    integer_types = (int, long)"]], "<int>": [[72, "    integer_types = (int,)"]]}, "numeric_types": {"(<int>, ? -> ?, <float>)": [[54, "    numeric_types = (int, long, float)"]], "(<int>, <float>)": [[71, "    numeric_types = (int, float)"]]}, "bytes": {"<str>": [[51, "    bytes = str"]], "?": [[69, "    bytes = bytes"]]}, "str": {"<str>": [[68, "    str = str"]], "? -> ?": [[52, "    str = unicode"]]}, "builtin_str": {"<str>": [[50, "    builtin_str = str"], [67, "    builtin_str = str"]]}}, "param": {"integer_types": {"?": [[72, "    integer_types = (int,)"]]}, "numeric_types": {"<str>": [[72, "    integer_types = (int,)"]]}, "bytes": {"?": [[72, "    integer_types = (int,)"]]}, "str": {"<str>": [[72, "    integer_types = (int,)"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/compat.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.compat.u": {"param": {"s": {"str": [[17, "    def u(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.compat": {"func": {"u": {"? -> ? / str -> str": [[17, "    def u(s):"]], "? -> ?": [[20, "    def u(s):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.compa": {"var": {"cStringIO": {"None": [[14, "    cStringIO = None"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/status_codes.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.status_": {"var": {"codes": {"LookupDict": [[105, "codes = LookupDict(name='status_codes')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.status_codes._init": {"var": {"code": {"?": [[108, "    for code, titles in _codes.items():"]]}}, "param": {"code": {"?": [[114, "    def doc(code):"]]}}, "func": {"doc": {"? -> None": [[114, "    def doc(code):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.status_codes._in": {"var": {"title": {"?": [[109, "        for title in titles:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.statu": {"var": {"_codes": {"dict": [[25, "_codes = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.status_codes": {"func": {"_init": {"() -> None": [[107, "def _init():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.status_codes._init.doc": {"var": {"names": {"str": [[115, "        names = ', '.join('``%s``' % n for n in _codes[code])"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/utils.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_header_links": {"var": {"val": {"?": [[835, "    for val in re.split(', *<', value):"]]}, "url": {"?": [[837, "            url, params = val.split(';', 1)"], [839, "            url, params = val, ''"]]}, "param": {"?": [[843, "        for param in params.split(';'):"]]}, "link": {"dict": [[841, "        link = {'url': url.strip('<> \\'\"')}"]]}, "value": {"?": [[831, "    value = value.strip(replace_chars)"]]}, "key": {"?": [[845, "                key, value = param.split('=')"]]}}, "param": {"value": {"?": [[819, "def parse_header_links(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils._parse_content_type_header": {"var": {"tokens": {"?": [[463, "    tokens = header.split(';')"]]}, "value": {"?": [[475, "                value = param[index_of_equals + 1:].strip(items_to_strip)"]]}, "key": {"?": [[471, "            key, value = param, True"], [474, "                key = param[:index_of_equals].strip(items_to_strip)"]]}, "content_type": {"?": [[464, "    content_type, params = tokens[0].strip(), tokens[1:]"]]}, "index_of_equals": {"?": [[472, "            index_of_equals = param.find(\"=\")"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.guess_fil": {"var": {"name": {"?": [[222, "    name = getattr(obj, 'name', None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.guess_filename": {"param": {"obj": {"(? -> tuple, ? -> list)": [[220, "def guess_filename(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.uti": {"func": {"super_len": {"object -> ? / [int] -> int / str -> int / file -> int / ? -> int / None -> int / ({<str> | ? -> ?}, <str>) -> int / BoomFile -> int / NoLenBoomFile -> int / LenFile -> int": [[108, "def super_len(o):"]]}, "default_headers": {"() -> CaseInsensitiveDict": [[807, "def default_headers():"]]}, "select_proxy": {"(?, None) -> None / (?, ?) -> None": [[772, "def select_proxy(url, proxies):"]]}, "default_user_agent": {"str -> None": [[798, "def default_user_agent(name=\"python-requests\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.select_proxy": {"var": {"proxies": {"dict": [[778, "    proxies = proxies or {}"]]}, "urlparts": {"?": [[779, "    urlparts = urlparse(url)"]]}}, "param": {"url": {"?": [[772, "def select_proxy(url, proxies):"]]}, "proxies": {"None": [[772, "def select_proxy(url, proxies):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_encodings_from_content": {"var": {"pragma_re": {"?": [[447, "    pragma_re = re.compile(r'<meta.*?content=[\"\\']*;?charset=(.+?)[\"\\'>]', flags=re.I)"]]}, "xml_re": {"?": [[448, "    xml_re = re.compile(r'^<\\?xml.*?encoding=[\"\\']*(.+?)[\"\\'>]')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.unquote_header_": {"var": {"value": {"str": [[397, "        value = value[1:-1]"]]}}, "param": {"value": {"str": [[384, "def unquote_header_value(value, is_filename=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_netrc_auth": {"var": {"loc": {"str": [[179, "                loc = os.path.expanduser('~/{}'.format(f))"]]}, "f": {"str": [[177, "        for f in NETRC_FILES:"]]}, "login_i": {"int": [[207, "                login_i = (0 if _netrc[0] else 1)"]]}, "splitstr": {"str": [[198, "        splitstr = b':'"], [200, "            splitstr = splitstr.decode('ascii')"]]}, "_netrc": {"?": [[204, "            _netrc = netrc(netrc_path).authenticators(host)"]]}, "ri": {"?": [[194, "        ri = urlparse(url)"]]}}, "param": {"url": {"str": [[169, "def get_netrc_auth(url, raise_errors=False):"]]}, "raise_errors": {"bool": [[169, "def get_netrc_auth(url, raise_errors=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.stream_decode_response_unicod": {"var": {"item": {"?": [[505, "        for item in iterator:"]]}}, "param": {"iterator": {"None": [[501, "def stream_decode_response_unicode(iterator, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.should_bypass_proxie": {"var": {"host": {"str": [[741, "            for host in no_proxy:"]]}, "bypass": {"bool": [[750, "            bypass = proxy_bypass(parsed.hostname)"], [752, "            bypass = False"]]}, "host_with_port": {"?": [[737, "            host_with_port = parsed.hostname"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.u": {"func": {"parse_list_header": {"? -> [None]": [[317, "def parse_list_header(value):"]]}, "from_key_val_list": {"? -> None": [[260, "def from_key_val_list(value):"]]}, "iter_slices": {"(?, int) -> None / (?, ?) -> None / (bool, None) -> None / (bool, int) -> None / (bool, str) -> None": [[519, "def iter_slices(string, slice_length):"]]}, "to_key_val_list": {"bool -> list / dict -> list / str -> list / ? -> list / None -> list / CaseInsensitiveDict -> list / (?, ?) -> list": [[287, "def to_key_val_list(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.set_environ": {"var": {"old_value": {"?": [[687, "        old_value = os.environ.get(env_name)"]]}}, "param": {"value": {"str": [[678, "def set_environ(env_name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_encodings_from_conten": {"var": {"charset_re": {"?": [[446, "    charset_re = re.compile(r'<meta.*?charset=[\"\\']*(.+?)[\"\\'>]', flags=re.I)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.iter": {"var": {"slice_length": {"int": [[523, "        slice_length = len(string)"]]}}, "param": {"slice_length": {"{int | str}": [[519, "def iter_slices(string, slice_length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_dict_head": {"var": {"result": {"dict": [[371, "    result = {}"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.address_in_networ": {"var": {"netmask": {"?": [[626, "    netmask = struct.unpack('=L', socket.inet_aton(dotted_netmask(int(bits))))[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.add_dict_to_cookiejar": {"param": {"cj": {"?": [[424, "def add_dict_to_cookiejar(cj, cookie_dict):"]]}, "cookie_dict": {"dict": [[424, "def add_dict_to_cookiejar(cj, cookie_dict):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.is_valid_cid": {"param": {"string_network": {"str": [[653, "def is_valid_cidr(string_network):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.req": {"var": {"safe_without_percent": {"str": [[603, "    safe_without_percent = \"!#$&'()*+,/:;=?@[]~\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.prepend_scheme_if_needed": {"var": {"scheme": {"?": [[900, "    scheme, netloc, path, params, query, fragment = urlparse(url, new_scheme)"]]}, "netloc": {"?": [[906, "        netloc, path = path, netloc"]]}}, "param": {"url": {"None": [[894, "def prepend_scheme_if_needed(url, new_scheme):"]]}, "new_scheme": {"str": [[894, "def prepend_scheme_if_needed(url, new_scheme):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.stream_decode_response_uni": {"var": {"decoder": {"?": [[509, "    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.urldefragaut": {"var": {"scheme": {"?": [[959, "    scheme, netloc, path, params, query, fragment = urlparse(url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.urldefragauth": {"var": {"netloc": {"?": [[963, "        netloc, path = path, netloc"], [965, "    netloc = netloc.rsplit('@', 1)[-1]"]]}}, "param": {"url": {"?": [[953, "def urldefragauth(url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.select": {"var": {"proxy_keys": {"[str]": [[783, "    proxy_keys = ["]]}, "proxy_key": {"str": [[790, "    for proxy_key in proxy_keys:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_encoding_from_": {"param": {"headers": {"CaseInsensitiveDict": [[480, "def get_encoding_from_headers(headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.should_bypass_proxies": {"var": {"no_proxy": {"{[?] | [str]}": [[723, "        no_proxy = ("]], "?": [[713, "        no_proxy = get_proxy('no_proxy')"]]}, "no_proxy_arg": {"str": [[711, "    no_proxy_arg = no_proxy"]]}, "get_proxy": {"str -> ?": [[707, "    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())"]]}, "proxy_ip": {"str": [[728, "            for proxy_ip in no_proxy:"]]}}, "param": {"url": {"str": [[699, "def should_bypass_proxies(url, no_proxy):"]]}, "no_proxy": {"str": [[699, "def should_bypass_proxies(url, no_proxy):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils": {"var": {"DEFAULT_CA_BUNDLE_PATH": {"?": [[40, "DEFAULT_CA_BUNDLE_PATH = certs.where()"]]}, "_null2": {"?": [[858, "_null2 = _null * 2"]]}, "_null3": {"?": [[859, "_null3 = _null * 3"]]}, "NETRC_FILES": {"(str, str)": [[38, "NETRC_FILES = ('.netrc', '_netrc')"]]}, "DEFAULT_PORTS": {"dict": [[42, "DEFAULT_PORTS = {'http': 80, 'https': 443}"]]}, "_null": {"str": [[857, "_null = '\\x00'.encode('ascii')  # encoding to ASCII for Python 3"]]}, "_CLEAN_HEADER_REGEX_BYTE": {"?": [[928, "_CLEAN_HEADER_REGEX_BYTE = re.compile(b'^\\\\S[^\\\\r\\\\n]*$|^$')"]]}, "_CLEAN_HEADER_REGEX_STR": {"?": [[929, "_CLEAN_HEADER_REGEX_STR = re.compile(r'^\\S[^\\r\\n]*$|^$')"]]}, "UNRESERVED_SET": {"?": [[566, "UNRESERVED_SET = frozenset("]]}}, "func": {"get_netrc_auth": {"{(str, bool) -> (?, ?) / (None, bool) -> (?, ?) / (?, bool) -> (?, ?) | None -> (str, str) / ? -> (str, str) / str -> (str, str)}": [[169, "def get_netrc_auth(url, raise_errors=False):"]]}, "check_header_validity": {"? -> ?": [[932, "def check_header_validity(header):"]]}, "add_dict_to_cookiejar": {"(?, dict) -> RequestsCookieJar / (?, ?) -> RequestsCookieJar": [[424, "def add_dict_to_cookiejar(cj, cookie_dict):"]]}, "urldefragauth": {"? -> None": [[953, "def urldefragauth(url):"]]}, "rewind_body": {"PreparedRequest -> ? / ? -> ?": [[970, "def rewind_body(prepared_request):"]]}, "requote_uri": {"? -> ?": [[594, "def requote_uri(uri):"]]}, "dict_from_cookiejar": {"? -> dict": [[409, "def dict_from_cookiejar(cj):"]]}, "unquote_header_value": {"(str, bool) -> str / (?, bool) -> None": [[384, "def unquote_header_value(value, is_filename=False):"]]}, "get_auth_from_url": {"None -> (?, ?) / ? -> (?, ?) / str -> (?, ?)": [[911, "def get_auth_from_url(url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_encoding_from_headers": {"var": {"content_type": {"?": [[487, "    content_type = headers.get('content-type')"], [492, "    content_type, params = _parse_content_type_header(content_type)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.dotted_net": {"param": {"mask": {"int": [[631, "def dotted_netmask(mask):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.dotted_netmask": {"var": {"bits": {"int": [[638, "    bits = 0xffffffff ^ (1 << 32 - mask) - 1"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_auth_from_": {"param": {"url": {"{None | str}": [[911, "def get_auth_from_url(url):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.proxy_bypass_registry": {"var": {"internetSettings": {"?": [[58, "            internetSettings = winreg.OpenKey(winreg.HKEY_CURRENT_USER,"]]}, "test": {"?": [[76, "        for test in proxyOverride:"], [80, "            test = test.replace(\".\", r\"\\.\")     # mask dots"], [81, "            test = test.replace(\"*\", r\".*\")     # change glob sequence"], [82, "            test = test.replace(\"?\", r\".\")      # change glob char"]]}}, "param": {"host": {"?": [[48, "    def proxy_bypass_registry(host):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.requote_": {"param": {"uri": {"?": [[594, "def requote_uri(uri):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_unicode_from_resp": {"var": {"tried_encodings": {"[str]": [[547, "    tried_encodings = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.from_key_val_list": {"param": {"value": {"?": [[260, "def from_key_val_list(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.proxy_bypass_regist": {"var": {"proxyOverride": {"?": [[64, "            proxyOverride = winreg.QueryValueEx(internetSettings,"], [74, "        proxyOverride = proxyOverride.split(';')"]]}, "proxyEnable": {"int": [[61, "            proxyEnable = int(winreg.QueryValueEx(internetSettings,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.ut": {"func": {"should_bypass_proxies": {"(?, str) -> bool / (?, None) -> bool / (None, None) -> bool / (?, ?) -> bool / (str, ?) -> bool / (str, None) -> bool / (None, ?) -> bool": [[699, "def should_bypass_proxies(url, no_proxy):"]]}, "is_valid_cidr": {"str -> bool / ? -> bool": [[653, "def is_valid_cidr(string_network):"]]}, "parse_header_links": {"? -> [dict]": [[819, "def parse_header_links(value):"]]}, "guess_filename": {"(? -> tuple, ? -> list) -> str / ? -> str": [[220, "def guess_filename(obj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.guess_json_utf": {"var": {"sample": {"str": [[869, "    sample = data[:4]"]]}, "nullcount": {"int": [[876, "    nullcount = sample.count(_null)"]]}}, "param": {"data": {"{Response -> {bool | str} | str}": [[862, "def guess_json_utf(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_list_head": {"var": {"result": {"[None]": [[340, "    result = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_environ_proxies": {"param": {"url": {"str": [[760, "def get_environ_proxies(url, no_proxy=None):"]]}, "no_proxy": {"None": [[760, "def get_environ_proxies(url, no_proxy=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.check_header_validity": {"var": {"pat": {"?": [[942, "        pat = _CLEAN_HEADER_REGEX_BYTE"], [944, "        pat = _CLEAN_HEADER_REGEX_STR"]]}, "name": {"?": [[939, "    name, value = header"]]}}, "param": {"header": {"?": [[932, "def check_header_validity(header):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_dict_header": {"var": {"item": {"?": [[372, "    for item in _parse_list_header(value):"]]}, "name": {"?": [[376, "        name, value = item.split('=', 1)"]]}, "value": {"None": [[378, "            value = unquote_header_value(value[1:-1])"]]}}, "param": {"value": {"?": [[349, "def parse_dict_header(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.super_": {"var": {"fileno": {"int": [[120, "            fileno = o.fileno()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.extract_zipped_paths": {"var": {"member": {"str": [[242, "        member = '/'.join([prefix, member])"]]}, "tmp": {"?": [[252, "    tmp = tempfile.gettempdir()"]]}, "zip_file": {"?": [[247, "    zip_file = zipfile.ZipFile(archive)"]]}, "extracted_path": {"?": [[255, "        extracted_path = zip_file.extract(member, path=tmp)"]], "str": [[253, "    extracted_path = os.path.join(tmp, *member.split('/'))"]]}, "archive": {"str": [[239, "    archive, member = os.path.split(path)"], [241, "        archive, prefix = os.path.split(archive)"]]}}, "param": {"path": {"str": [[228, "def extract_zipped_paths(path):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.rewin": {"var": {"body_seek": {"?": [[974, "    body_seek = getattr(prepared_request.body, 'seek', None)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_header_link": {"var": {"replace_chars": {"str": [[829, "    replace_chars = ' \\'\"'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils._parse_content_type_heade": {"var": {"params_dict": {"dict": [[465, "    params_dict = {}"]]}, "param": {"?": [[468, "    for param in params:"], [469, "        param = param.strip()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_auth_from_url": {"var": {"parsed": {"?": [[917, "    parsed = urlparse(url)"]]}, "auth": {"(str, str)": [[922, "        auth = ('', '')"]], "(?, ?)": [[920, "        auth = (unquote(parsed.username), unquote(parsed.password))"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.unquote_header_valu": {"param": {"is_filename": {"bool": [[384, "def unquote_header_value(value, is_filename=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.set_enviro": {"var": {"value_changed": {"bool": [[685, "    value_changed = value is not None"]]}}, "param": {"env_name": {"str": [[678, "def set_environ(env_name, value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.util": {"func": {"get_encodings_from_content": {"str -> None / ? -> None": [[435, "def get_encodings_from_content(content):"]]}, "is_ipv4_address": {"str -> bool / ? -> bool": [[642, "def is_ipv4_address(string_ip):"]]}, "unquote_unreserved": {"? -> str": [[570, "def unquote_unreserved(uri):"]]}, "dotted_netmask": {"? -> None / int -> None": [[631, "def dotted_netmask(mask):"]]}, "get_encoding_from_headers": {"CaseInsensitiveDict -> str / ? -> str": [[480, "def get_encoding_from_headers(headers):"]]}, "prepend_scheme_if_needed": {"(?, ?) -> None / (None, str) -> None / (?, str) -> None": [[894, "def prepend_scheme_if_needed(url, new_scheme):"]]}, "parse_dict_header": {"? -> dict": [[349, "def parse_dict_header(value):"]]}, "proxy_bypass": {"? -> bool": [[87, "    def proxy_bypass(host):  # noqa"]]}, "set_environ": {"(str, str) -> ? / (str, ?) -> ? / (str, None) -> ? / (?, ?) -> ?": [[678, "def set_environ(env_name, value):"]]}, "_parse_content_type_header": {"? -> (?, dict)": [[455, "def _parse_content_type_header(header):"]]}, "address_in_network": {"(str, str) -> bool / (?, ?) -> bool / (?, str) -> bool": [[616, "def address_in_network(ip, net):"]]}, "guess_json_utf": {"Response -> {bool | str} -> str / str -> str / ? -> str": [[862, "def guess_json_utf(data):"]]}, "extract_zipped_paths": {"str -> str / ? -> str": [[228, "def extract_zipped_paths(path):"]]}, "get_environ_proxies": {"(str, None) -> dict / (None, None) -> dict / (?, None) -> dict": [[760, "def get_environ_proxies(url, no_proxy=None):"]]}, "proxy_bypass_registry": {"? -> bool": [[48, "    def proxy_bypass_registry(host):"]]}, "dict_to_sequence": {"? -> None": [[99, "def dict_to_sequence(d):"]]}, "stream_decode_response_unicode": {"(?, ?) -> None / (None, Response) -> None": [[501, "def stream_decode_response_unicode(iterator, r):"]]}, "get_unicode_from_response": {"? -> str": [[529, "def get_unicode_from_response(r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.address_in_": {"var": {"network": {"?": [[627, "    network = struct.unpack('=L', socket.inet_aton(netaddr))[0] & netmask"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.iter_slice": {"var": {"pos": {"int": [[521, "    pos = 0"]]}}, "param": {"string": {"bool": [[519, "def iter_slices(string, slice_length):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.rewind_body": {"param": {"prepared_request": {"PreparedRequest": [[970, "def rewind_body(prepared_request):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.dict_from_cookiejar": {"var": {"cookie_dict": {"dict": [[416, "    cookie_dict = {}"]]}, "cookie": {"?": [[418, "    for cookie in cj:"]]}}, "param": {"cj": {"?": [[409, "def dict_from_cookiejar(cj):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.is_ipv4_addre": {"param": {"string_ip": {"str": [[642, "def is_ipv4_address(string_ip):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_list_header": {"var": {"item": {"None": [[343, "            item = unquote_header_value(item[1:-1])"]], "?": [[341, "    for item in _parse_list_header(value):"]]}}, "param": {"value": {"?": [[317, "def parse_list_header(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.super": {"var": {"total_length": {"int": [[113, "        total_length = len(o)"], [116, "        total_length = o.len"], [161, "                    total_length = 0"], [164, "        total_length = 0"]], "None": [[109, "    total_length = None"]], "{None | int}": [[155, "                    total_length = o.tell()"]], "?": [[124, "            total_length = os.fstat(fileno).st_size"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.to_key_val_list": {"var": {"value": {"?": [[311, "        value = value.items()"]]}}, "param": {"value": {"{(?, ?) | CaseInsensitiveDict | bool | dict | dict | str}": [[287, "def to_key_val_list(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_unicode_from_respons": {"var": {"encoding": {"str": [[550, "    encoding = get_encoding_from_headers(r.headers)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_netrc_au": {"var": {"netrc_path": {"None": [[175, "        netrc_path = None"]], "str": [[187, "                netrc_path = loc"]]}, "host": {"?": [[201, "        host = ri.netloc.split(splitstr)[0]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.dict_to_sequence": {"var": {"d": {"?": [[103, "        d = d.items()"]]}}, "param": {"d": {"?": [[99, "def dict_to_sequence(d):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.proxy_bypa": {"param": {"host": {"?": [[87, "    def proxy_bypass(host):  # noqa"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.is_valid_cidr": {"var": {"mask": {"int": [[661, "            mask = int(string_network.split('/')[1])"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.should_bypass_proxi": {"var": {"parsed": {"?": [[714, "    parsed = urlparse(url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.select_": {"var": {"proxy": {"None": [[789, "    proxy = None"]], "?": [[792, "            proxy = proxies[proxy_key]"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.unquote_unreserved": {"var": {"i": {"int": [[577, "    for i in range(1, len(parts)):"]]}, "h": {"?": [[578, "        h = parts[i][0:2]"]]}, "c": {"str": [[581, "                c = chr(int(h, 16))"]]}, "parts": {"?": [[576, "    parts = uri.split('%')"]]}}, "param": {"uri": {"?": [[570, "def unquote_unreserved(uri):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.stream_decode_response_unicode": {"var": {"chunk": {"?": [[510, "    for chunk in iterator:"]]}, "rv": {"?": [[511, "        rv = decoder.decode(chunk)"], [514, "    rv = decoder.decode(b'', final=True)"]]}}, "param": {"r": {"Response": [[501, "def stream_decode_response_unicode(iterator, r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.requote_u": {"var": {"safe_with_percent": {"str": [[602, "    safe_with_percent = \"!#$%&'()*+,/:;=?@[]~\""]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils._parse_content_type_head": {"var": {"items_to_strip": {"str": [[466, "    items_to_strip = \"\\\"' \""]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.default_user_agent": {"param": {"name": {"str": [[798, "def default_user_agent(name=\"python-requests\"):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.address_in_network": {"var": {"netaddr": {"str": [[625, "    netaddr, bits = net.split('/')"]]}, "ipaddr": {"?": [[624, "    ipaddr = struct.unpack('=L', socket.inet_aton(ip))[0]"]]}}, "param": {"ip": {"str": [[616, "def address_in_network(ip, net):"]]}, "net": {"str": [[616, "def address_in_network(ip, net):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils._parse_content_type_": {"param": {"header": {"?": [[455, "def _parse_content_type_header(header):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.parse_header_": {"var": {"links": {"[dict]": [[827, "    links = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_unicode_from_response": {"param": {"r": {"?": [[529, "def get_unicode_from_response(r):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.super_l": {"var": {"current_position": {"int": [[110, "    current_position = 0"], [148, "                current_position = total_length"]], "{None | int}": [[141, "            current_position = o.tell()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.get_encodings_from_": {"param": {"content": {"str": [[435, "def get_encodings_from_content(content):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.utils.super_len": {"param": {"o": {"{({<str> | ? -> ?}, <str>) | BoomFile | LenFile | NoLenBoomFile | [int] | file | object | str}": [[108, "def super_len(o):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/__init__.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests": {"func": {"_check_cryptography": {"? -> None": [[74, "def _check_cryptography(cryptography_version):"]]}, "check_compatibility": {"(?, ?) -> None": [[49, "def check_compatibility(urllib3_version, chardet_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests._check_cryptography": {"var": {"warning": {"str": [[82, "        warning = 'Old version of cryptography ({}) may cause slowdown.'.format(cryptography_version)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.check_compatibility": {"var": {"major": {"int": [[59, "    major, minor, patch = int(major), int(minor), int(patch)"], [67, "    major, minor, patch = int(major), int(minor), int(patch)"]], "?": [[58, "    major, minor, patch = urllib3_version  # noqa: F811"], [66, "    major, minor, patch = chardet_version.split('.')[:3]"]]}, "urllib3_version": {"?": [[50, "    urllib3_version = urllib3_version.split('.')"]]}}, "param": {"urllib3_version": {"?": [[49, "def check_compatibility(urllib3_version, chardet_version):"]]}, "chardet_version": {"?": [[49, "def check_compatibility(urllib3_version, chardet_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests._check": {"var": {"cryptography_version": {"list": [[77, "        cryptography_version = list(map(int, cryptography_version.split('.')))"]]}}, "param": {"cryptography_version": {"?": [[74, "def _check_cryptography(cryptography_version):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.request": {"var": {"ssl": {"None": [[100, "        ssl = None"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/help.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.he": {"var": {"platform_info": {"dict": [[62, "        platform_info = {"], [67, "        platform_info = {"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.help.info": {"var": {"system_ssl": {"?": [[92, "    system_ssl = ssl.OPENSSL_VERSION_NUMBER"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.help": {"var": {"urllib3_info": {"dict": [[73, "    urllib3_info = {'version': urllib3.__version__}"]]}, "system_ssl_info": {"dict": [[93, "    system_ssl_info = {"]]}, "chardet_info": {"dict": [[74, "    chardet_info = {'version': chardet.__version__}"]]}, "idna_info": {"dict": [[88, "    idna_info = {"]]}}, "func": {"info": {"() -> dict": [[59, "def info():"]]}, "main": {"() -> None": [[113, "def main():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.help._": {"var": {"implementation": {"?": [[37, "    implementation = platform.python_implementation()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.h": {"var": {"pyopenssl": {"None": [[18, "    pyopenssl = None"]]}, "implementation_info": {"dict": [[72, "    implementation_info = _implementation()"]]}, "implementation_version": {"str": [[46, "            implementation_version = ''.join(["], [54, "        implementation_version = 'Unknown'"]], "?": [[40, "        implementation_version = platform.python_version()"], [42, "        implementation_version = '%s.%s.%s' % (sys.pypy_version_info.major,"], [50, "        implementation_version = platform.python_version()  # Complete Guess"], [52, "        implementation_version = platform.python_version()  # Complete Guess"]]}, "pyopenssl_info": {"dict": [[76, "    pyopenssl_info = {"], [81, "        pyopenssl_info = {"]]}}, "func": {"_implementation": {"() -> dict": [[26, "def _implementation():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.hel": {"var": {"cryptography_info": {"dict": [[85, "    cryptography_info = {"]]}, "OpenSSL": {"None": [[19, "    OpenSSL = None"]]}, "cryptography": {"None": [[20, "    cryptography = None"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/tests/conftest.py": {".home.xxm.Desktop.EMSE.dataset.requests.tests.conftest": {"func": {"prepare_url": {"? -> () -> ?": [[7, "def prepare_url(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.conftes": {"param": {"httpbin": {"?": [[18, "def httpbin(httpbin):"]]}}, "func": {"httpbin": {"? -> () -> ?": [[18, "def httpbin(httpbin):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.conftest.prepare_ur": {"param": {"value": {"?": [[7, "def prepare_url(value):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.conftest.prepare": {"var": {"httpbin_url": {"str": [[9, "    httpbin_url = value.url.rstrip('/') + '/'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.conftest.prepare_url": {"func": {"inner": {"() -> ?": [[11, "    def inner(*suffix):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.tests.conf": {"param": {"httpbin_secure": {"?": [[23, "def httpbin_secure(httpbin_secure):"]]}}, "func": {"httpbin_secure": {"? -> () -> ?": [[23, "def httpbin_secure(httpbin_secure):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/packages.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.packages": {"var": {"mod": {"<list>": [[10, "    for mod in list(sys.modules):"]]}, "package": {"str": [[6, "for package in ('urllib3', 'idna', 'chardet'):"]]}}}}, "/home/xxm/Desktop/EMSE/dataset/requests/requests/models.py": {".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Request.__repr__": {"param": {"self": {"Request": [[251, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.iter_co": {"var": {"generate": {"() -> ?": [[747, "        def generate():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin.path_": {"var": {"url": {"[str]": [[65, "        url = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_content_": {"var": {"length": {"int": [[525, "            length = super_len(body)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestHooksMixin.deregister_hook": {"param": {"self": {"RequestHooksMixin": [[186, "    def deregister_hook(self, event, hook):"]]}, "event": {"?": [[186, "    def deregister_hook(self, event, hook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.model": {"class": {"PreparedRequest": {"<PreparedRequest>": [[272, "class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):"]]}, "RequestEncodingMixin": {"<RequestEncodingMixin>": [[60, "class RequestEncodingMixin(object):"]]}, "Request": {"<Request>": [[198, "class Request(RequestHooksMixin):"]]}, "RequestHooksMixin": {"<RequestHooksMixin>": [[174, "class RequestHooksMixin(object):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.js": {"var": {"encoding": {"str": [[886, "            encoding = guess_json_utf(self.content)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest._get_idna_encoded_": {"var": {"host": {"?": [[351, "            host = idna.encode(host, uts46=True).decode('utf-8')"]]}}, "param": {"host": {"?": [[347, "    def _get_idna_encoded_host(host):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.text": {"var": {"encoding": {"Response -> None": [[858, "            encoding = self.apparent_encoding"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin._encode_": {"var": {"files": {"list": [[126, "        files = to_key_val_list(files or {})"]]}, "fields": {"list": [[125, "        fields = to_key_val_list(data or {})"]]}}, "param": {"files": {"None": [[110, "    def _encode_files(files, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequ": {"func": {"_get_idna_encoded_host": {"? -> ?": [[347, "    def _get_idna_encoded_host(host):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest": {"func": {"prepare": {"(PreparedRequest, None, None, None, None, None, None, None, None, None, None) -> None": [[308, "    def prepare(self,"]]}, "prepare_url": {"(PreparedRequest, ?, ?) -> ? / (PreparedRequest, None, None) -> ?": [[356, "    def prepare_url(self, url, params):"]]}, "__repr__": {"PreparedRequest -> ?": [[326, "    def __repr__(self):"]]}, "copy": {"PreparedRequest -> PreparedRequest": [[329, "    def copy(self):"]]}, "prepare_body": {"(PreparedRequest, ?, ?, None) -> ? / (PreparedRequest, None, None, None) -> ?": [[453, "    def prepare_body(self, data, files, json=None):"]]}, "prepare_headers": {"(PreparedRequest, ?) -> None / (PreparedRequest, None) -> None": [[442, "    def prepare_headers(self, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestHooksMixin.deregister_": {"param": {"hook": {"?": [[186, "    def deregister_hook(self, event, hook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Request.prepar": {"param": {"self": {"Request": [[254, "    def prepare(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_auth": {"var": {"r": {"?": [[549, "            r = auth(self)"]]}}, "param": {"url": {"str": [[535, "    def prepare_auth(self, auth, url=''):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Request": {"func": {"__repr__": {"Request -> str": [[251, "    def __repr__(self):"]]}, "prepare": {"Request -> PreparedRequest": [[254, "    def prepare(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin._encode_files": {"var": {"fp": {"(? -> tuple, ? -> list)": [[154, "                fp = v"]]}, "body": {"?": [[169, "        body, content_type = encode_multipart_formdata(new_fields)"]]}, "ft": {"None": [[143, "            ft = None"]]}, "val": {"{[?] | [[?]]}": [[130, "                val = [val]"]]}, "field": {"?": [[128, "        for field, val in fields:"]]}, "rf": {"?": [[165, "            rf = RequestField(name=k, data=fdata, filename=fn, headers=fh)"]]}, "fdata": {"({<str> | ? -> ?}, <str>, ?)": [[157, "                fdata = fp"]], "{(? -> tuple, ? -> list) | ({<str> | ? -> ?}, <str>, ?) | ? -> list}": [[163, "                fdata = fp"]], "?": [[159, "                fdata = fp.read()"]]}, "v": {"str": [[135, "                        v = str(v)"]], "?": [[131, "            for v in val:"]]}, "fh": {"None": [[144, "            fh = None"]]}, "fn": {"? -> tuple": [[147, "                    fn, fp = v"]], "str": [[153, "                fn = guess_filename(v) or k"]]}}, "param": {"data": {"None": [[110, "    def _encode_files(files, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response": {"var": {"links": {"[dict]": [[910, "            links = parse_header_links(header)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Request.__init__": {"var": {"files": {"[?]": [[232, "        files = [] if files is None else files"]]}, "hooks": {"dict": [[235, "        hooks = {} if hooks is None else hooks"]]}, "headers": {"dict": [[233, "        headers = {} if headers is None else headers"]]}, "params": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]], "dict": [[234, "        params = {} if params is None else params"]]}, "data": {"[?]": [[231, "        data = [] if data is None else data"]]}, "method": {"str": [[227, "            method=None, url=None, headers=None, files=None, data=None,"]]}}, "param": {"files": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "cookies": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "url": {"str": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "hooks": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "self": {"Request": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "auth": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "headers": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "json": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "params": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "data": {"None": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "method": {"str": [[228, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.iter_": {"var": {"lines": {"?": [[801, "                lines = chunk.split(delimiter)"], [803, "                lines = chunk.splitlines()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.tex": {"var": {"content": {"str": [[862, "            content = str(self.content, encoding, errors='replace')"], [870, "            content = str(self.content, errors='replace')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.__repr__": {"param": {"self": {"PreparedRequest": [[326, "    def __repr__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Reques": {"func": {"__init__": {"? -> ?": [[226, "    def __init__(self,"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prep": {"param": {"headers": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_bod": {"var": {"content_type": {"None": [[461, "        content_type = None"], [510, "                        content_type = None"]], "str": [[466, "            content_type = 'application/json'"], [512, "                        content_type = 'application/x-www-form-urlencoded'"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedReques": {"func": {"prepare_method": {"(PreparedRequest, ?) -> None / (PreparedRequest, None) -> None": [[340, "    def prepare_method(self, method):"]]}, "prepare_content_length": {"(PreparedRequest, ?) -> None / (PreparedRequest, ({<str> | ? -> ?}, <str>)) -> None": [[522, "    def prepare_content_length(self, body):"]]}, "__init__": {"? -> ?": [[291, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin.path_url": {"var": {"p": {"?": [[67, "        p = urlsplit(self.url)"]]}, "query": {"?": [[75, "        query = p.query"]]}, "path": {"str": [[71, "            path = '/'"]], "?": [[69, "        path = p.path"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.__setstate__": {"var": {"name": {"?": [[659, "        for name, value in state.items():"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_body": {"var": {"length": {"int": [[477, "            length = super_len(data)"]], "None": [[479, "            length = None"]]}, "is_stream": {"int": [[471, "        is_stream = all(["]]}}, "param": {"files": {"None": [[453, "    def prepare_body(self, data, files, json=None):"]]}, "self": {"PreparedRequest": [[453, "    def prepare_body(self, data, files, json=None):"]]}, "data": {"None": [[453, "    def prepare_body(self, data, files, json=None):"]]}, "json": {"None": [[453, "    def prepare_body(self, data, files, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models": {"var": {"REDIRECT_STATI": {"(?, ?, ?, ?, ?)": [[47, "REDIRECT_STATI = ("]]}, "DEFAULT_REDIRECT_LIMIT": {"int": [[55, "DEFAULT_REDIRECT_LIMIT = 30"]]}, "ITER_CHUNK_SIZE": {"int": [[57, "ITER_CHUNK_SIZE = 512"]]}, "CONTENT_CHUNK_SIZE": {"int": [[56, "CONTENT_CHUNK_SIZE = 10 * 1024"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_url": {"var": {"fragment": {"?": [[427, "                fragment = fragment.encode('utf-8')"]]}, "error": {"str": [[385, "            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")"], [386, "            error = error.format(to_native_string(url, 'utf8'))"]]}, "host": {"?": [[399, "                host = self._get_idna_encoded_host(host)"]]}, "enc_params": {"{({<str> | ? -> ?}, <str>) | str}": [[432, "        enc_params = self._encode_params(params)"]]}, "params": {"str": [[430, "            params = to_native_string(params)"]]}, "query": {"{({<str> | ? -> ?}, <str>) | str}": [[437, "                query = enc_params"]], "?": [[425, "                query = query.encode('utf-8')"], [435, "                query = '%s&%s' % (query, enc_params)"]]}, "path": {"?": [[423, "                path = path.encode('utf-8')"]], "str": [[415, "            path = '/'"]]}, "scheme": {"?": [[380, "            scheme, auth, host, port, path, query, fragment = parse_url(url)"], [419, "                scheme = scheme.encode('utf-8')"]]}}, "param": {"params": {"None": [[356, "    def prepare_url(self, url, params):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_method": {"param": {"self": {"PreparedRequest": [[340, "    def prepare_method(self, method):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_": {"var": {"url": {"?": [[439, "        url = requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))"]], "str": [[364, "            url = url.decode('utf8')"], [366, "            url = unicode(url) if is_py2 else str(url)"], [369, "        url = url.lstrip()"]]}, "body": {"None": [[460, "        body = None"], [482, "            body = data"]], "?": [[467, "            body = complexjson.dumps(json)"], [469, "                body = body.encode('utf-8')"]], "({<str> | ? -> ?}, <str>)": [[508, "                    body = self._encode_params(data)"]]}, "auth": {"HTTPBasicAuth": [[546, "                auth = HTTPBasicAuth(*auth)"]], "(?, ?)": [[541, "            auth = url_auth if any(url_auth) else None"]]}}, "param": {"url": {"None": [[356, "    def prepare_url(self, url, params):"]]}, "headers": {"None": [[442, "    def prepare_headers(self, headers):"]]}, "method": {"None": [[340, "    def prepare_method(self, method):"]]}, "auth": {"(str, str)": [[535, "    def prepare_auth(self, auth, url=''):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.links": {"var": {"link": {"dict": [[912, "            for link in links:"]]}, "key": {"?": [[913, "                key = link.get('rel') or link.get('url')"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestHooksMixin": {"func": {"register_hook": {"(RequestHooksMixin, ?, ?) -> None / (Request, ?, ?) -> None / (PreparedRequest, ?, list) -> None": [[175, "    def register_hook(self, event, hook):"]]}, "deregister_hook": {"(RequestHooksMixin, ?, ?) -> bool": [[186, "    def deregister_hook(self, event, hook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestHooksMixin.register_": {"param": {"hook": {"list": [[175, "    def register_hook(self, event, hook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.iter_content": {"var": {"chunks": {"None": [[781, "            chunks = stream_decode_response_unicode(chunks, self)"]]}}, "param": {"decode_unicode": {"bool": [[730, "    def iter_content(self, chunk_size=1, decode_unicode=False):"]]}, "chunk_size": {"{int | str}": [[730, "    def iter_content(self, chunk_size=1, decode_unicode=False):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_header": {"param": {"self": {"PreparedRequest": [[442, "    def prepare_headers(self, headers):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin._encode_params": {"var": {"k": {"?": [[97, "            for k, vs in to_key_val_list(data):"]]}, "v": {"?": [[100, "                for v in vs:"]]}}, "param": {"data": {"str": [[83, "    def _encode_params(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin._encode_param": {"var": {"vs": {"{[?] | [[?]]}": [[99, "                    vs = [vs]"]]}, "result": {"[(?, ?)]": [[96, "            result = []"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare": {"var": {"url_auth": {"(?, ?)": [[540, "            url_auth = get_auth_from_url(self.url)"]]}, "params": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}}, "param": {"url": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "hooks": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "auth": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "json": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "params": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "data": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.iter_lines": {"var": {"chunk": {"None": [[798, "                chunk = pending + chunk"]], "?": [[795, "        for chunk in self.iter_content(chunk_size=chunk_size, decode_unicode=decode_unicode):"]]}, "line": {"?": [[810, "            for line in lines:"]]}, "pending": {"None": [[808, "                pending = None"]], "?": [[806, "                pending = lines.pop()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin": {"func": {"path_url": {"RequestEncodingMixin -> str": [[62, "    def path_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.raise_for_statu": {"var": {"reason": {"None": [[932, "            reason = self.reason"]], "?": [[928, "                reason = self.reason.decode('utf-8')"], [930, "                reason = self.reason.decode('iso-8859-1')"]]}, "http_error_msg": {"?": [[935, "            http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)"], [938, "            http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMix": {"func": {"_encode_files": {"(?, ?) -> (?, ?) / (None, None) -> (?, ?)": [[110, "    def _encode_files(files, data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixi": {"func": {"_encode_params": {"? -> ({<str> | ? -> ?}, <str>) / str -> {({<str> | ? -> ?}, <str>) | str} / None -> ({<str> | ? -> ?}, <str>)": [[83, "    def _encode_params(data):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_ur": {"var": {"netloc": {"?": [[421, "                netloc = netloc.encode('utf-8')"]], "str": [[406, "        netloc = auth or ''"]]}}, "param": {"self": {"PreparedRequest": [[356, "    def prepare_url(self, url, params):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Request.prepare": {"var": {"p": {"PreparedRequest": [[256, "        p = PreparedRequest()"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_headers": {"var": {"header": {"?": [[447, "            for header in headers.items():"]]}, "name": {"?": [[450, "                name, value = header"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.__init__": {"param": {"self": {"PreparedRequest": [[291, "    def __init__(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_hooks": {"var": {"event": {"?": [[583, "        for event in hooks:"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepar": {"var": {"method": {"None": [[309, "            method=None, url=None, headers=None, files=None, data=None,"]]}}, "param": {"files": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "self": {"PreparedRequest": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "method": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}, "cookies": {"None": [[310, "            params=None, auth=None, cookies=None, hooks=None, json=None):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.Response.iter_content.generate": {"var": {"chunk": {"?": [[751, "                    for chunk in self.raw.stream(chunk_size, decode_content=True):"], [762, "                    chunk = self.raw.read(chunk_size)"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.copy": {"var": {"p": {"PreparedRequest": [[330, "        p = PreparedRequest()"]]}}, "param": {"self": {"PreparedRequest": [[329, "    def copy(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin.path_ur": {"param": {"self": {"RequestEncodingMixin": [[62, "    def path_url(self):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.PreparedRequest.prepare_content_length": {"param": {"body": {"({<str> | ? -> ?}, <str>)": [[522, "    def prepare_content_length(self, body):"]]}, "self": {"PreparedRequest": [[522, "    def prepare_content_length(self, body):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestHooksMixin.register_hook": {"param": {"self": {"{PreparedRequest | Request | RequestHooksMixin}": [[175, "    def register_hook(self, event, hook):"]]}, "event": {"?": [[175, "    def register_hook(self, event, hook):"]]}}}, ".home.xxm.Desktop.EMSE.dataset.requests.requests.models.RequestEncodingMixin._enco": {"var": {"new_fields": {"[(?, str)]": [[124, "        new_fields = []"]]}}}}}